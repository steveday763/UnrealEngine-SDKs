Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x8a873f8 0x78e9fe6520

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10] 0x78ea07aba0

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0x10] 0x78ea089f80
	FString Model;//[Offset: 0x10, Size: 0x10] 0x78ea08a000

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10] 0x78ea07ab00

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10] 0x78ea089c80
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10] 0x78ea07aa60

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1] 0x78ea089d00
	byte CompareType;//[Offset: 0x1, Size: 0x1] 0x78ea089d80
	FString MatchString;//[Offset: 0x8, Size: 0x10] 0x78ea089e00

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30] 0x78cf616c00
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78cf616c80
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78cf616d00
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1] 0x78cf616d80
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1] 0x78cf616e00
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1] 0x78cf616e80
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1] 0x78cf616f00
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1] 0x78cf616f80
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x78cf617000
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78cf617080
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78cf617100
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78cf617180
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1] 0x78cf617200
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1] 0x78cf617280
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1] 0x78cf617300
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1] 0x78cf617380
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1] 0x78cf615300
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1] 0x78cf615380
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1] 0x78cf615400
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1] 0x78cf615480
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1] 0x78cf615500
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1] 0x78cf615580
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1] 0x78cf615600
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1] 0x78cf615680
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1] 0x78cf615700
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x78cf615780
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78cf615800
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78cf615880
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1] 0x78cf615900
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1] 0x78cf615a00
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1] 0x78cf56ef20
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1] 0x78cf56efc0
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1] 0x78cf615b00
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x34] 0x78cf616000
	float InitialLifeSpan;//[Offset: 0x94, Size: 0x4] 0x78cf616080
	float CustomTimeDilation;//[Offset: 0x98, Size: 0x4] 0x78cf616100
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 0x40] 0x78cf614380
	Actor* Owner;//[Offset: 0xe0, Size: 0x8] 0x78cf614400
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8] 0x78cf614480
	byte Role;//[Offset: 0xf0, Size: 0x1] 0x78cf614500
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1] 0x78cf614580
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 0x1] 0x78cf56f2e0
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 0x1] 0x78cf614680
	int InputPriority;//[Offset: 0xf4, Size: 0x4] 0x78cf614700
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x8] 0x78cf614780
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 0x4] 0x78cf614800
	int NetTag;//[Offset: 0x104, Size: 0x4] 0x78cf614880
	float NetUpdateFrequency;//[Offset: 0x108, Size: 0x4] 0x78cf614900
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 0x4] 0x78cf614980
	float NetPriority;//[Offset: 0x110, Size: 0x4] 0x78cf614a00
	Pawn* Instigator;//[Offset: 0x118, Size: 0x8] 0x78cf614a80
	Actor*[] Children;//[Offset: 0x120, Size: 0x10] 0x78cf56f380
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 0x8] 0x78cf614b80
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 0x10] 0x78cf56f420
	FName[] Layers;//[Offset: 0x150, Size: 0x10] 0x78cf56f4c0
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 0x8] 0x78cf614d00
	FName[] Tags;//[Offset: 0x170, Size: 0x10] 0x78cf56f560
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 0x1] 0x78cf614e00
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 0x1] 0x78cf614e80
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 0x1] 0x78cf614f00
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 0x1] 0x78cf614f80
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 0x1] 0x78cf615000
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 0x1] 0x78cf615080
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 0x1] 0x78cf615100
	delegate OnClicked;//[Offset: 0x187, Size: 0x1] 0x78cf615180
	delegate OnReleased;//[Offset: 0x188, Size: 0x1] 0x78cf615200
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 0x1] 0x78cf615280
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 0x1] 0x78cf613200
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 0x1] 0x78cf613280
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 0x1] 0x78cf613300
	delegate OnActorHit;//[Offset: 0x18d, Size: 0x1] 0x78cf613380
	delegate OnDestroyed;//[Offset: 0x18e, Size: 0x1] 0x78cf613400
	delegate OnEndPlay;//[Offset: 0x18f, Size: 0x1] 0x78cf613480
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 0x10] 0x78cf56f600
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 0x10] 0x78cf56f6a0
	bool WasRecentlyRendered(float Tolerance);// 0xaeaaa10 0x78cf5cb920
	void UserConstructionScript();// 0x8a873f8 0x78cf5cba00
	void TearOff();// 0xaeaf948 0x78cf5cbae0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0xaeabdd8 0x78cf5cbbc0
	void SetTickGroup(byte NewTickGroup);// 0xaeaaac4 0x78cf5cbca0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xaeab758 0x78cf5cbd80
	void SetReplicates(bool bInReplicates);// 0xaeaf7cc 0x78cf5cbe60
	void SetReplicateMovement(bool bInReplicateMovement);// 0xaeaf714 0x78cf5cbf40
	void SetOwner(Actor* NewOwner);// 0xaeab114 0x78cf5cc020
	void SetNetDormancy(byte NewDormancy);// 0xaeaaf9c 0x78cf5cc100
	void SetLifeSpan(float InLifespan);// 0xaeab3e0 0x78cf5cc1e0
	void SetAutoDestroyWhenFinished(bool bVal);// 0xaeaf898 0x78cf5cc2c0
	void SetActorTickInterval(float TickInterval);// 0xaeab214 0x78cf5cc3a0
	void SetActorTickEnabled(bool bEnabled);// 0xaeab2f4 0x78cf5cc480
	void SetActorScale3D(Vector NewScale3D);// 0xaeae710 0x78cf5cc560
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0xaeace34 0x78cf5cc640
	void SetActorHiddenInGame(bool bNewHidden);// 0xaeacd44 0x78cf5cc720
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0xaeacc94 0x78cf5cc800
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xaeab840 0x78cf5cc8e0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xaeab8f0 0x78cf5cc9c0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78cf5c90e0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x8a873f8 0x78cf5c91c0
	void ReceivePointDamage(float damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x8a873f8 0x78cf5c92a0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult hit);// 0x8a873f8 0x78cf5c9380
	void ReceiveEndPlay(byte EndPlayReason);// 0x8a873f8 0x78cf5c9460
	void ReceiveDestroyed();// 0x8a873f8 0x78cf5c9540
	void ReceiveBeginPlay();// 0x8a873f8 0x78cf5c9620
	void ReceiveAnyDamage(float damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x8a873f8 0x78cf5c9700
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x8a873f8 0x78cf5c97e0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x8a873f8 0x78cf5c98c0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x8a873f8 0x78cf5c99a0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x8a873f8 0x78cf5c9a80
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x8a873f8 0x78cf5c9b60
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x8a873f8 0x78cf5c9c40
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x8a873f8 0x78cf5c9d20
	void ReceiveActorEndCursorOver();// 0x8a873f8 0x78cf5c9e00
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x8a873f8 0x78cf5c9ee0
	void ReceiveActorBeginCursorOver();// 0x8a873f8 0x78cf5c9fc0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0xaeaa8b0 0x78cf5ca0a0
	void OnRep_ReplicateMovement();// 0xaeaf964 0x78cf5ca180
	void OnRep_ReplicatedMovement();// 0xaeab1c4 0x78cf5ca260
	void OnRep_Owner();// 0xaeaf87c 0x78cf5ca340
	void OnRep_Instigator();// 0xaeaf6a4 0x78cf5ca420
	void OnRep_AttachmentReplication();// 0xaeaf6c0 0x78cf5ca500
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0xaeaa1ec 0x78cf5ca5e0
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0xaeab6a8 0x78cf5ca6c0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0xaeaace0 0x78cf5ca7a0
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaead97c 0x78cf5ca880
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0xaeae9c4 0x78cf5ca960
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaeacedc 0x78cf5caa40
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaead0cc 0x78cf5cab20
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaead27c 0x78cf5cac00
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaeae7b8 0x78cf5cace0
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaeaeec0 0x78cf5c7400
	void K2_OnReset();// 0x8a873f8 0x78cf5c74e0
	void K2_OnEndViewTarget(PlayerController* PC);// 0x8a873f8 0x78cf5c75c0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x8a873f8 0x78cf5c76a0
	SceneComponent* K2_GetRootComponent();// 0xaeaeb0c 0x78cf5c7780
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0xaeaa600 0x78cf5c7860
	Rotator K2_GetActorRotation();// 0xaeaedc8 0x78cf5c7940
	Vector K2_GetActorLocation();// 0xaeaf07c 0x78cf5c7a20
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0xaeabbe8 0x78cf5c7b00
	void K2_DestroyComponent(ActorComponent* Component);// 0xaeac638 0x78cf5c7be0
	void K2_DestroyActor();// 0xaeacc58 0x78cf5c7cc0
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xaeac280 0x78cf5c7da0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xaeabec8 0x78cf5c7e80
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xaeac0f0 0x78cf5c7f60
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xaeac4a8 0x78cf5c8040
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaeadb78 0x78cf5c8120
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaeadd68 0x78cf5c8200
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaeadf58 0x78cf5c82e0
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaeae108 0x78cf5c83c0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaead42c 0x78cf5c84a0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaead61c 0x78cf5c8580
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xaead7cc 0x78cf5c8660
	bool IsOverlappingActor(const Actor* Other);// 0xaeab044 0x78cf5c8740
	bool IsChildActor();// 0xaeaaf50 0x78cf5c8820
	bool IsActorTickEnabled();// 0xaeab2bc 0x78cf5c8900
	bool IsActorBeingDestroyed();// 0xaeab654 0x78cf5c89e0
	bool HasAuthority();// 0xaeacc34 0x78cf5c8ac0
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0xaeae418 0x78cf5c8ba0
	Vector GetVelocity();// 0xaeaeacc 0x78cf5c8c80
	Transform GetTransform();// 0xaeaf0d4 0x78cf5c8d60
	bool GetTickableWhenPaused();// 0xaeab808 0x78cf5c8e40
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0xaeae578 0x78cf5c8f20
	byte GetRemoteRole();// 0xaeaf6dc 0x78cf5c9000
	ChildActorComponent* GetParentComponent();// 0xaeaae10 0x78cf5c5720
	Actor* GetParentActor();// 0xaeaaddc 0x78cf5c5800
	Actor* GetOwner();// 0xaeab0f8 0x78cf5c58e0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0xaeab490 0x78cf5c59c0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xaeab550 0x78cf5c5aa0
	byte GetLocalRole();// 0xaeaf6f8 0x78cf5c5b80
	float GetLifeSpan();// 0xaeab3a4 0x78cf5c5c60
	Controller* GetInstigatorController();// 0xaeaf110 0x78cf5c5d40
	Pawn* GetInstigator();// 0xaeaf144 0x78cf5c5e20
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0xaeaf178 0x78cf5c5f00
	float GetInputAxisValue(const FName InputAxisName);// 0xaeaf494 0x78cf5c5fe0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0xaeaf308 0x78cf5c60c0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0xaeae2b8 0x78cf5c61a0
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0xaeae4c8 0x78cf5c6280
	float GetGameTimeSinceCreation();// 0xaeab674 0x78cf5c6360
	float GetDotProductTo(const Actor* OtherActor);// 0xaeae368 0x78cf5c6440
	float GetDistanceTo(const Actor* OtherActor);// 0xaeae628 0x78cf5c6520
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0xaeaa4bc 0x78cf5c6600
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0xaeaa3c0 0x78cf5c66e0
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0xaeaa6fc 0x78cf5c67c0
	FName GetAttachParentSocketName();// 0xaeaac78 0x78cf5c68a0
	Actor* GetAttachParentActor();// 0xaeaacac 0x78cf5c6980
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0xaeaab6c 0x78cf5c6a60
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0xaeaae44 0x78cf5c6b40
	Vector GetActorUpVector();// 0xaeaed20 0x78cf5c6c20
	float GetActorTimeDilation();// 0xaeabb00 0x78cf5c6d00
	float GetActorTickInterval();// 0xaeab1e0 0x78cf5c6de0
	Vector GetActorScale3D();// 0xaeae6d8 0x78cf5c6ec0
	Vector GetActorRightVector();// 0xaeaeccc 0x78cf5c6fa0
	Vector GetActorRelativeScale3D();// 0xaeacdfc 0x78cf5c7080
	Vector GetActorForwardVector();// 0xaeaed74 0x78cf5c7160
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0xaeaa7ac 0x78cf5c7240
	bool GetActorEnableCollision();// 0xaeacc74 0x78cf5c7320
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0xaeaeb28 0x78cf5c3a40
	void ForceNetUpdate();// 0xaeaa9f4 0x78cf5c3b20
	void FlushNetDormancy();// 0xaeaaf88 0x78cf5c3c00
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0xaeac6e0 0x78cf5c3ce0
	void EnableInput(PlayerController* PlayerController);// 0xaeaf5f4 0x78cf5c3dc0
	void DisableInput(PlayerController* PlayerController);// 0xaeaf544 0x78cf5c3ea0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0xaeabd28 0x78cf5c3f80
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xaeab9a0 0x78cf5c4060
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xaeaba50 0x78cf5c4140
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0xaeac850 0x78cf5c4220
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0xaeaca1c 0x78cf5c4300
	bool ActorHasTag(FName Tag);// 0xaeabb34 0x78cf5c43e0

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1] 0x78cf50ae00
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1] 0x78cf50ae80
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x78cf50af00
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x78cf50af80
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x78cf50b000
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x78cf50b080
	float TickInterval;//[Offset: 0xc, Size: 0x4] 0x78cf50b100

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc] 0x78cf615b80
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc] 0x78cf615c00
	Vector Location;//[Offset: 0x18, Size: 0xc] 0x78cf615c80
	Rotator Rotation;//[Offset: 0x24, Size: 0xc] 0x78cf615d00
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78cf615d80
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78cf615e00
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1] 0x78cf56f100
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1] 0x78cf56f060
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1] 0x78cf56f1a0

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4] 0x78ea083400
	float Y;//[Offset: 0x4, Size: 0x4] 0x78ea083480
	float Z;//[Offset: 0x8, Size: 0x4] 0x78ea083500

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4] 0x78ea084f00
	float Yaw;//[Offset: 0x4, Size: 0x4] 0x78ea084f80
	float Roll;//[Offset: 0x8, Size: 0x4] 0x78ea085000

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8] 0x78cf616180
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc] 0x78cf616200
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc] 0x78cf616280
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc] 0x78cf616300
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8] 0x78cf614280
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8] 0x78cf614300

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8] 0x78cee64880
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8] 0x78cee64900
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8] 0x78cee64980
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10] 0x78cee50ce0
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10] 0x78cee50d80
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc] 0x78cee64b00
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc] 0x78cee64b80
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc] 0x78cee64c00
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc] 0x78cee64c80
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x78cee64d00
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1] 0x78cee64d80
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1] 0x78cee64e00
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1] 0x78cee64e80
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1] 0x78cee64f00
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1] 0x78cee64f80
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1] 0x78cee65000
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1] 0x78cee65080
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1] 0x78cee65100
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1] 0x78cee65180
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1] 0x78cee65200
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1] 0x78cee65280
	byte Mobility;//[Offset: 0x14f, Size: 0x1] 0x78cee63200
	byte DetailMode;//[Offset: 0x150, Size: 0x1] 0x78cee63280
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1] 0x78cee63300
	void ToggleVisibility(bool bPropagateToChildren);// 0xb156004 0x78cee284a0
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0xb156990 0x78cee28580
	void SetWorldScale3D(Vector NewScale);// 0xb157d28 0x78cee28660
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xb1560cc 0x78cee28740
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xb159158 0x78cee28820
	void SetRelativeScale3D(Vector NewScale3D);// 0xb1589e0 0x78cee28900
	void SetMobility(byte NewMobility);// 0xb1558ec 0x78cee289e0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xb155f08 0x78cee28ac0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xb155b94 0x78cee28ba0
	void ResetRelativeTransform();// 0xb158a88 0x78cee28c80
	void OnRep_Visibility(bool OldValue);// 0xb159058 0x78cee28d60
	void OnRep_Transform();// 0xb159144 0x78cee28e40
	void OnRep_AttachSocketName();// 0xb159108 0x78cee28f20
	void OnRep_AttachParent();// 0xb159130 0x78cee29000
	void OnRep_AttachChildren();// 0xb15911c 0x78cee25720
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb157b38 0x78cee25800
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb157dd0 0x78cee258e0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb15599c 0x78cee259c0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb157f80 0x78cee25aa0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb158b08 0x78cee25b80
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb158cf8 0x78cee25c60
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb155cdc 0x78cee25d40
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb158ea8 0x78cee25e20
	Transform K2_GetComponentToWorld();// 0xb1572e4 0x78cee25f00
	Vector K2_GetComponentScale();// 0xb157350 0x78cee25fe0
	Rotator K2_GetComponentRotation();// 0xb157388 0x78cee260c0
	Vector K2_GetComponentLocation();// 0xb1573c0 0x78cee261a0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xb1566fc 0x78cee26280
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xb156a8c 0x78cee26360
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xb156cc0 0x78cee26440
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb1573f8 0x78cee26520
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb1575e8 0x78cee26600
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb1577d8 0x78cee266e0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb157988 0x78cee267c0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb158680 0x78cee268a0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb158830 0x78cee26980
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb158130 0x78cee26a60
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb158320 0x78cee26b40
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb1584d0 0x78cee26c20
	bool IsVisible();// 0xb1561c8 0x78cee26d00
	bool IsSimulatingPhysics(FName BoneName);// 0xb157180 0x78cee26de0
	bool IsAnySimulatingPhysics();// 0xb157140 0x78cee26ec0
	Vector GetUpVector();// 0xb157274 0x78cee26fa0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xb156538 0x78cee27080
	Rotator GetSocketRotation(FName InSocketName);// 0xb1563c0 0x78cee27160
	Quat GetSocketQuaternion(FName InSocketName);// 0xb156304 0x78cee27240
	Vector GetSocketLocation(FName InSocketName);// 0xb15647c 0x78cee27320
	bool GetShouldUpdatePhysicsVolume();// 0xb159208 0x78cee23a40
	Vector GetRightVector();// 0xb15723c 0x78cee23b20
	Transform GetRelativeTransform();// 0xb158a9c 0x78cee23c00
	PhysicsVolume* GetPhysicsVolume();// 0xb155ed4 0x78cee23ce0
	void GetParentComponents(out SceneComponent*[] Parents);// 0xb157048 0x78cee23dc0
	int GetNumChildrenComponents();// 0xb157014 0x78cee23ea0
	Vector GetForwardVector();// 0xb1572ac 0x78cee23f80
	Vector GetComponentVelocity();// 0xb156208 0x78cee24060
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xb156e5c 0x78cee24140
	SceneComponent* GetChildComponent(int ChildIndex);// 0xb156f64 0x78cee24220
	FName GetAttachSocketName();// 0xb157108 0x78cee24300
	SceneComponent* GetAttachParent();// 0xb157124 0x78cee243e0
	FName[] GetAllSocketNames();// 0xb15664c 0x78cee244c0
	bool DoesSocketExist(FName InSocketName);// 0xb156248 0x78cee245a0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xb156890 0x78cee24680

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30] 0x78cf50b180
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10] 0x78cf2ca740
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x78cf2ca7e0
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4] 0x78cf50b300
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1] 0x78cf50b380
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1] 0x78cf50b400
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1] 0x78cf50b480
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1] 0x78cf50b500
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1] 0x78cf50b580
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1] 0x78cf509500
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1] 0x78cf509580
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1] 0x78cf2ca880
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1] 0x78cf509680
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1] 0x78cf509700
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10] 0x78cf2ca9c0
	void ToggleActive();// 0xaeb4c3c 0x78cf5214a0
	void SetTickGroup(byte NewTickGroup);// 0xaeb4638 0x78cf521580
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xaeb4ab4 0x78cf521660
	void SetIsReplicated(bool ShouldReplicate);// 0xaeb4a04 0x78cf521740
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0xaeb47bc 0x78cf521820
	void SetComponentTickInterval(float TickInterval);// 0xaeb4864 0x78cf521900
	void SetComponentTickEnabled(bool bEnabled);// 0xaeb494c 0x78cf5219e0
	void SetAutoActivate(bool bNewAutoActivate);// 0xaeb4b64 0x78cf521ac0
	void SetActive(bool bNewActive, bool bReset);// 0xaeb4c58 0x78cf521ba0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xaeb4378 0x78cf521c80
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xaeb4428 0x78cf30e780
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78cf30e860
	void ReceiveEndPlay(byte EndPlayReason);// 0x8a873f8 0x78cf30e940
	void ReceiveBeginPlay();// 0x8a873f8 0x78cf30ea20
	void OnRep_IsActive();// 0xaeb4efc 0x78cf30eb00
	void K2_DestroyComponent(Object* Object);// 0xaeb46e0 0x78cf30ebe0
	bool IsComponentTickEnabled();// 0xaeb490c 0x78cf30ecc0
	bool IsBeingDestroyed();// 0xaeb4f18 0x78cf30eda0
	bool IsActive();// 0xaeb4c1c 0x78cf30ee80
	Actor* GetOwner();// 0xaeb4ee0 0x78cf30ef60
	float GetComponentTickInterval();// 0xaeb4788 0x78cf30f040
	void Deactivate();// 0xaeb4d58 0x78cf30f120
	bool ComponentHasTag(FName Tag);// 0xaeb4e2c 0x78cf30f200
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xaeb44d8 0x78cf30f2e0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xaeb4588 0x78cf30f3c0
	void Activate(bool bReset);// 0xaeb4d74 0x78cf30f4a0

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8] 0x78cf509780
	FName MemberName;//[Offset: 0x8, Size: 0x8] 0x78cf509800
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10] 0x78cf509880

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4] 0x78ea083580
	int B;//[Offset: 0x4, Size: 0x4] 0x78ea083600
	int C;//[Offset: 0x8, Size: 0x4] 0x78ea083680
	int D;//[Offset: 0xc, Size: 0x4] 0x78ea083700

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 0x4] 0x78ce94a400
	int Priority;//[Offset: 0x25c, Size: 0x4] 0x78ce94a480
	float FluidFriction;//[Offset: 0x260, Size: 0x4] 0x78ce94a500
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78ce948480
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x78ce948500

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 0x1] 0x78ce781780
	Color BrushColor;//[Offset: 0x224, Size: 0x4] 0x78ce781800
	int PolyFlags;//[Offset: 0x228, Size: 0x4] 0x78ce781880
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1] 0x78ce781900
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1] 0x78ce781980
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 0x1] 0x78ce781a00
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 0x1] 0x78ce781a80
	Model* Brush;//[Offset: 0x230, Size: 0x8] 0x78ce781b00
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 0x8] 0x78ce781b80
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78ce781c00
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 0x10] 0x78ce727a40

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1] 0x78ea084500
	byte G;//[Offset: 0x1, Size: 0x1] 0x78ea084580
	byte R;//[Offset: 0x2, Size: 0x1] 0x78ea084600
	byte A;//[Offset: 0x3, Size: 0x1] 0x78ea084680

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x440, Size: 0x8] 0x78ce91c000
	BodySetup* BrushBodySetup;//[Offset: 0x448, Size: 0x8] 0x78ce91c080

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 0x4] 0x78cef6e300
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 0x4] 0x78cef6e380
	float CachedMaxDrawDistance;//[Offset: 0x20c, Size: 0x4] 0x78cef6e400
	byte DepthPriorityGroup;//[Offset: 0x210, Size: 0x1] 0x78cef6e480
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x211, Size: 0x1] 0x78cef6e500
	byte IndirectLightingCacheQuality;//[Offset: 0x212, Size: 0x1] 0x78cef6e580
	enum LightmapType;//[Offset: 0x213, Size: 0x1] 0x78cee54ca0
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1] 0x78cef6e680
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1] 0x78cef6e700
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1] 0x78cef6c680
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 0x1] 0x78cef6c700
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1] 0x78cef6c780
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1] 0x78cef6c800
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1] 0x78cef6c880
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1] 0x78cef6c900
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1] 0x78cef6c980
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1] 0x78cef6ca00
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1] 0x78cef6ca80
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1] 0x78cef6cb00
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1] 0x78cef6cb80
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 0x1] 0x78cef6cc00
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 0x1] 0x78cef6cc80
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 0x1] 0x78cef6cd00
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 0x1] 0x78cef6cd80
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 0x1] 0x78cef6ce00
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 0x1] 0x78cef6ce80
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 0x1] 0x78cef6cf00
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 0x1] 0x78cef6cf80
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x217, Size: 0x1] 0x78cef6d000
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x217, Size: 0x1] 0x78cef6d080
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x217, Size: 0x1] 0x78cef6d100
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x217, Size: 0x1] 0x78cef6d180
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x217, Size: 0x1] 0x78cef6d200
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x217, Size: 0x1] 0x78cef6d280
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x217, Size: 0x1] 0x78cef6d300
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78cef6d380
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1] 0x78cef6d400
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1] 0x78cef6d480
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1] 0x78cef6d500
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 0x1] 0x78cef6d580
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 0x1] 0x78cef6d600
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 0x1] 0x78cef6d680
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 0x1] 0x78cef6b600
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1] 0x78cef6b680
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 0x1] 0x78cef6b700
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x219, Size: 0x1] 0x78cef6b780
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x219, Size: 0x1] 0x78cef6b800
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x219, Size: 0x1] 0x78cef6b880
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x219, Size: 0x1] 0x78cef6b900
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x219, Size: 0x1] 0x78cef6b980
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x219, Size: 0x1] 0x78cef6ba00
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21a, Size: 0x1] 0x78cef6ba80
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21a, Size: 0x1] 0x78cef6bb00
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21a, Size: 0x1] 0x78cef6bb80
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21a, Size: 0x1] 0x78cef6bc00
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 0x1] 0x78cef6bc80
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21a, Size: 0x1] 0x78cef6bd00
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21a, Size: 0x1] 0x78cef6bd80
	byte bHasCustomNavigableGeometry;//[Offset: 0x21b, Size: 0x1] 0x78cef6be00
	byte CanCharacterStepUpOn;//[Offset: 0x21d, Size: 0x1] 0x78cef6be80
	LightingChannels LightingChannels;//[Offset: 0x21e, Size: 0x1] 0x78cef6c080
	enum CustomDepthStencilWriteMask;//[Offset: 0x21f, Size: 0x1] 0x78cee54d40
	int CustomDepthStencilValue;//[Offset: 0x220, Size: 0x4] 0x78cef6c180
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x228, Size: 0x10] 0x78cef6c200
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x238, Size: 0x10] 0x78cef6c300
	int TranslucencySortPriority;//[Offset: 0x250, Size: 0x4] 0x78cef6c380
	int VisibilityId;//[Offset: 0x254, Size: 0x4] 0x78cef6c400
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x258, Size: 0x10] 0x78cee54e80
	int8 VirtualTextureLodBias;//[Offset: 0x268, Size: 0x1] 0x78cef6c500
	int8 VirtualTextureCullMips;//[Offset: 0x269, Size: 0x1] 0x78cef6c580
	int8 VirtualTextureMinCoverage;//[Offset: 0x26a, Size: 0x1] 0x78cef6c600
	enum VirtualTextureRenderPassType;//[Offset: 0x26b, Size: 0x1] 0x78cee54f20
	float LpvBiasMultiplier;//[Offset: 0x270, Size: 0x4] 0x78cef6a600
	float BoundsScale;//[Offset: 0x27c, Size: 0x4] 0x78cef6a680
	Actor*[] MoveIgnoreActors;//[Offset: 0x290, Size: 0x10] 0x78cee54fc0
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a0, Size: 0x10] 0x78cee55060
	BodyInstance BodyInstance;//[Offset: 0x2c0, Size: 0x150] 0x78cef68e00
	delegate OnComponentHit;//[Offset: 0x410, Size: 0x1] 0x78cef68e80
	delegate OnComponentBeginOverlap;//[Offset: 0x411, Size: 0x1] 0x78cef68f00
	delegate OnComponentEndOverlap;//[Offset: 0x412, Size: 0x1] 0x78cef68f80
	delegate OnComponentWake;//[Offset: 0x413, Size: 0x1] 0x78cef69000
	delegate OnComponentSleep;//[Offset: 0x414, Size: 0x1] 0x78cef69080
	delegate OnBeginCursorOver;//[Offset: 0x416, Size: 0x1] 0x78cef69100
	delegate OnEndCursorOver;//[Offset: 0x417, Size: 0x1] 0x78cef69180
	delegate OnClicked;//[Offset: 0x418, Size: 0x1] 0x78cef69200
	delegate OnReleased;//[Offset: 0x419, Size: 0x1] 0x78cef69280
	delegate OnInputTouchBegin;//[Offset: 0x41a, Size: 0x1] 0x78cef69300
	delegate OnInputTouchEnd;//[Offset: 0x41b, Size: 0x1] 0x78cef69380
	delegate OnInputTouchEnter;//[Offset: 0x41c, Size: 0x1] 0x78cef69400
	delegate OnInputTouchLeave;//[Offset: 0x41d, Size: 0x1] 0x78cef69480
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x438, Size: 0x8] 0x78cef67400
	bool WasRecentlyRendered(float Tolerance);// 0xb1331e0 0x78cef70a20
	void WakeRigidBody(FName BoneName);// 0xb12f70c 0x78cef70b00
	void WakeAllRigidBodies();// 0xb12d6a8 0x78cef70be0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xb131b28 0x78cef70cc0
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xb12cd2c 0x78cef70da0
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0xb12f034 0x78cef70e80
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0xb12f0dc 0x78cef70f60
	void SetSimulatePhysics(bool bSimulate);// 0xb131a70 0x78cef71040
	void SetRenderInMainPass(bool bValue);// 0xb12dc84 0x78cef71120
	void SetRenderCustomDepth(bool bValue);// 0xb12de84 0x78cef71200
	void SetReceivesDecals(bool bNewReceivesDecals);// 0xb12ef84 0x78cef712e0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xb12c9d8 0x78cef713c0
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xb12fbb0 0x78cef714a0
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xb12fcec 0x78cef71580
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xb12fe38 0x78cef71660
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xb130638 0x78cef71740
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xb1300e0 0x78cef71820
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xb12ff84 0x78cef71900
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xb130224 0x78cef719e0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0xb12f4fc 0x78cef71ac0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0xb12f44c 0x78cef71ba0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xb12f5ac 0x78cef71c80
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xb132040 0x78cee8e780
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xb132138 0x78cee8e860
	void SetMassScale(FName BoneName, float InMassScale);// 0xb12d2dc 0x78cee8e940
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xb12d024 0x78cee8ea20
	void SetLinearDamping(float InDamping);// 0xb12d500 0x78cee8eb00
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xb133294 0x78cee8ebe0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0xb12f23c 0x78cee8ecc0
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xb1333dc 0x78cee8eda0
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0xb12f18c 0x78cee8ee80
	void SetEnableGravity(bool bGravityEnabled);// 0xb12d5f0 0x78cee8ef60
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xb1326c0 0x78cee8f040
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xb1327b4 0x78cee8f120
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xb1328a4 0x78cee8f200
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xb132990 0x78cee8f2e0
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xb132a84 0x78cee8f3c0
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xb132b78 0x78cee8f4a0
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xb132c68 0x78cee8f580
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xb132d54 0x78cee8f660
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0xb12dd34 0x78cee8f740
	void SetCustomDepthStencilValue(int Value);// 0xb12dddc 0x78cee8f820
	void SetCullDistance(float NewCullDistance);// 0xb12c930 0x78cee8f900
	void SetConstraintMode(byte ConstraintMode);// 0xb1319c0 0x78cee8f9e0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xb12cb38 0x78cee8fac0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xb12ca88 0x78cee8fba0
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0xb12edd0 0x78cee8fc80
	void SetCollisionObjectType(byte Channel);// 0xb12ecec 0x78cee8fd60
	void SetCollisionEnabled(byte newType);// 0xb12eed4 0x78cee8fe40
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0xb12f7bc 0x78cee8ff20
	void SetCastShadow(bool NewCastShadow);// 0xb12f39c 0x78cee8caa0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0xb12f2ec 0x78cee8cb80
	void SetBoundsScale(float NewBoundsScale);// 0xb1322ec 0x78cee8cc60
	void SetAngularDamping(float InDamping);// 0xb12d414 0x78cee8cd40
	void SetAllUseCCD(bool InUseCCD);// 0xb12cc74 0x78cee8ce20
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xb130380 0x78cee8cf00
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xb12d6c4 0x78cee8cfe0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xb12d7c8 0x78cee8d0c0
	void SetAllMassScale(float InMassScale);// 0xb12d174 0x78cee8d1a0
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xb12ce24 0x78cee8d280
	void PutRigidBodyToSleep(FName BoneName);// 0xb12f664 0x78cee8d360
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xb12e5f8 0x78cee8d440
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xb12df34 0x78cee8d520
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xb12e998 0x78cee8d600
	bool K2_IsQueryCollisionEnabled();// 0xb12da30 0x78cee8d6e0
	bool K2_IsPhysicsCollisionEnabled();// 0xb12d9e8 0x78cee8d7c0
	bool K2_IsCollisionEnabled();// 0xb12da78 0x78cee8d8a0
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xb12e28c 0x78cee8d980
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0xb13260c 0x78cee8da60
	bool IsOverlappingActor(const Actor* Other);// 0xb132558 0x78cee8db40
	bool IsGravityEnabled();// 0xb12d5b0 0x78cee8dc20
	bool IsAnyRigidBodyAwake();// 0xb12cc34 0x78cee8dd00
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0xb132f24 0x78cee8dde0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0xb1330e4 0x78cee8dec0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0xb131bf0 0x78cee8dfa0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0xb130484 0x78cee8e080
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0xb130584 0x78cee8e160
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0xb12f964 0x78cee8e240
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0xb12fa18 0x78cee8e320
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0xb12fae4 0x78cee8e400
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0xb132394 0x78cee8e4e0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xb132454 0x78cee8e5c0
	int GetNumMaterials();// 0xb12dc48 0x78cee8e6a0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xb131c28 0x78cee8adc0
	MaterialInterface* GetMaterial(int ElementIndex);// 0xb132234 0x78cee8aea0
	float GetMassScale(FName BoneName);// 0xb12d224 0x78cee8af80
	float GetMass();// 0xb12cfe8 0x78cee8b060
	float GetLinearDamping();// 0xb12d4c4 0x78cee8b140
	Vector GetInertiaTensor(FName BoneName);// 0xb12cf2c 0x78cee8b220
	bool GetGenerateOverlapEvents();// 0xb13348c 0x78cee8b300
	byte GetCollisionResponseToChannel(byte Channel);// 0xb12d930 0x78cee8b3e0
	FName GetCollisionProfileName();// 0xb12ed9c 0x78cee8b4c0
	byte GetCollisionObjectType();// 0xb12d8f4 0x78cee8b5a0
	byte GetCollisionEnabled();// 0xb12dabc 0x78cee8b680
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0xb12daf8 0x78cee8b760
	Vector GetCenterOfMass(FName BoneName);// 0xb12f8b0 0x78cee8b840
	float GetAngularDamping();// 0xb12d3d8 0x78cee8b920
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xb131d38 0x78cee8ba00
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0xb131e84 0x78cee8bae0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xb131f88 0x78cee8bbc0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0xb132e74 0x78cee8bca0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0xb133034 0x78cee8bd80
	void ClearMoveIgnoreComponents();// 0xb132e48 0x78cee8be60
	void ClearMoveIgnoreActors();// 0xb133020 0x78cee8bf40
	bool CanCharacterStepUp(Pawn* Pawn);// 0xb12c874 0x78cee8c020
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xb1308e4 0x78cee8c100
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xb13077c 0x78cee8c1e0
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0xb130a34 0x78cee8c2c0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xb131140 0x78cee8c3a0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xb130b84 0x78cee8c480
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xb131324 0x78cee8c560
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xb131870 0x78cee8c640
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xb130d68 0x78cee8c720
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xb130eac 0x78cee8c800
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xb130ff0 0x78cee8c8e0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xb1315d0 0x78cee8c9c0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xb131468 0x78cee890e0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xb131720 0x78cee891c0

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cef6bf00
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cef6bf80
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cef6c000

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10] 0x78cee54de0

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1] 0x78cef63c00
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4] 0x78cef63c80

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x78ce712280
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x78ce712300
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1] 0x78ce712380
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78ce712400
	float Restitution;//[Offset: 0x34, Size: 0x4] 0x78ce712480
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1] 0x78ce712500
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78ce712580
	float Density;//[Offset: 0x3c, Size: 0x4] 0x78ce712600
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x78ce712680
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4] 0x78ce712700
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4] 0x78ce712780
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4] 0x78ce712800
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4] 0x78ce712880
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8] 0x78ce712900
	byte SurfaceType;//[Offset: 0x60, Size: 0x1] 0x78ce712980

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8] 0x78ce789400
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10] 0x78ce789480
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10] 0x78ce7268c0
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x78ce726960
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0xb0ac56c 0x78ce75ac00
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0xb0ac94c 0x78ce75ace0
	PhysicalMaterial* GetPhysicalMaterialFromMap(int index);// 0xb0ac894 0x78ce757400
	PhysicalMaterial* GetPhysicalMaterial();// 0xb0ac988 0x78ce7574e0
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0xb0ac750 0x78ce7575c0
	Material* GetBaseMaterial();// 0xb0ac9c4 0x78ce7576a0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4] 0x78ce37c800
	byte AddressX;//[Offset: 0x2c, Size: 0x1] 0x78ce37c880
	byte AddressY;//[Offset: 0x2d, Size: 0x1] 0x78ce37c900

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x78ce365000
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1] 0x78ce9d3440

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0c4100
	byte Association;//[Offset: 0x8, Size: 0x1] 0x78cf0c4180
	int index;//[Offset: 0xc, Size: 0x4] 0x78cf0c4200

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x78ce357100
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8] 0x78ce357180
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8] 0x78ce357200
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc] 0x78ce357280
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc] 0x78ce357300
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc] 0x78ce357380
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc] 0x78ce355300
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc] 0x78ce355380
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc] 0x78ce355400
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1] 0x78ce355480
	byte BlendMode;//[Offset: 0x151, Size: 0x1] 0x78ce355500
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1] 0x78ce355580
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1] 0x78ce355600
	byte ShadingModel;//[Offset: 0x154, Size: 0x1] 0x78ce355680
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1] 0x78ce355700
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2] 0x78ce355780
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4] 0x78ce355800
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc] 0x78ce355880
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc] 0x78ce355900
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10] 0x78ce355980
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc] 0x78ce355a00
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc] 0x78ce355a80
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1] 0x78ce355b00
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1] 0x78ce355b80
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1] 0x78ce355c00
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1] 0x78ce355c80
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1] 0x78ce355d00
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1] 0x78ce355d80
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1] 0x78ce355e00
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1] 0x78ce355e80
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 0x1] 0x78ce355f00
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1] 0x78ce355f80
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4] 0x78ce356000
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4] 0x78ce356080
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4] 0x78ce356100
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4] 0x78ce356180
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4] 0x78ce356200
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4] 0x78ce356280
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4] 0x78ce356300
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10] 0x78ce354280
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4] 0x78ce354300
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1] 0x78ce354380
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1] 0x78ce354400
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1] 0x78ce354480
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1] 0x78ce354500
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1] 0x78ce354580
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1] 0x78ce354600
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1] 0x78ce354680
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1] 0x78ce354700
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1] 0x78ce354780
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1] 0x78ce354800
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1] 0x78ce354880
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1] 0x78ce354900
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1] 0x78ce354980
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1] 0x78ce354a00
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1] 0x78ce354a80
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1] 0x78ce354b00
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1] 0x78ce354b80
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1] 0x78ce354c00
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1] 0x78ce354c80
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1] 0x78ce354d00
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1] 0x78ce354d80
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1] 0x78ce354e00
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1] 0x78ce354e80
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1] 0x78ce354f00
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1] 0x78ce354f80
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1] 0x78ce355000
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1] 0x78ce355080
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1] 0x78ce355100
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1] 0x78ce355180
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1] 0x78ce355200
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1] 0x78ce355280
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1] 0x78ce353200
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1] 0x78ce353280
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1] 0x78ce353300
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1] 0x78ce353380
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 0x1] 0x78ce353400
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 0x1] 0x78ce353480
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1] 0x78ce353500
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1] 0x78ce353580
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1] 0x78ce353600
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1] 0x78ce353680
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1] 0x78ce353700
	byte ShadingRate;//[Offset: 0x1ff, Size: 0x1] 0x78ce353780
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x78ce353800
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x78ce353880
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1] 0x78ce353900
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1] 0x78ce353980
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1] 0x78ce353a00
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1] 0x78ce353a80
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1] 0x78ce353b00
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1] 0x78ce353b80
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x78ce353c00
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1] 0x78ce353c80
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1] 0x78ce353d00
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1] 0x78ce353d80
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1] 0x78ce353e00
	byte BlendableLocation;//[Offset: 0x202, Size: 0x1] 0x78ce353e80
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1] 0x78ce353f00
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1] 0x78ce353f80
	byte StencilCompare;//[Offset: 0x204, Size: 0x1] 0x78ce354000
	byte StencilRefValue;//[Offset: 0x205, Size: 0x1] 0x78ce354080
	byte RefractionMode;//[Offset: 0x206, Size: 0x1] 0x78ce354100
	int BlendablePriority;//[Offset: 0x208, Size: 0x4] 0x78ce354180
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1] 0x78ce354200
	uint32 UsageFlagWarnings;//[Offset: 0x210, Size: 0x4] 0x78ce352180
	float RefractionDepthBias;//[Offset: 0x214, Size: 0x4] 0x78ce352200
	Guid StateId;//[Offset: 0x218, Size: 0x10] 0x78ce352280
	float MaxDisplacement;//[Offset: 0x228, Size: 0x4] 0x78ce352300
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x260, Size: 0x228] 0x78ce352380

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x78cf505e80
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x78cf505f00

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2] 0x78cf0a9e80

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4] 0x78cf506000

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x78cf506080
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x78cf506100

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4] 0x78ea086380
	float G;//[Offset: 0x4, Size: 0x4] 0x78ea084300
	float B;//[Offset: 0x8, Size: 0x4] 0x78ea084380
	float A;//[Offset: 0xc, Size: 0x4] 0x78ea084400

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0] 0x78cf0c2680
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10] 0x78cf086320
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10] 0x78cf0863c0
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10] 0x78cf086460
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10] 0x78cf086500
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10] 0x78cf0865a0
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10] 0x78cf086640
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10] 0x78cf0866e0
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10] 0x78cf083e40
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x78cf0c2d00
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1] 0x78cf0c2d80

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 0x40] 0x78cf0c2300
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10] 0x78cf085f60
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10] 0x78cf086000
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10] 0x78cf0860a0
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10] 0x78cf086140
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10] 0x78cf0861e0
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10] 0x78cf086280

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10] 0x78cf085ce0
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10] 0x78cf085d80
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10] 0x78cf085e20
	bool[] Overrides;//[Offset: 0x30, Size: 0x10] 0x78cf085ec0

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10] 0x78ce740c00
	int LODBias;//[Offset: 0x78, Size: 0x4] 0x78ce740c80
	byte CompressionSettings;//[Offset: 0x7c, Size: 0x1] 0x78ce740d00
	byte Filter;//[Offset: 0x7d, Size: 0x1] 0x78ce740d80
	enum MipLoadOptions;//[Offset: 0x7e, Size: 0x1] 0x78ce724e80
	byte LODGroup;//[Offset: 0x7f, Size: 0x1] 0x78ce740e80
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 0x4] 0x78ce740f00
	enum DownscaleOptions;//[Offset: 0x84, Size: 0x1] 0x78ce724f20
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1] 0x78ce741000
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1] 0x78ce741080
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1] 0x78ce71f800
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1] 0x78ce71f880
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1] 0x78ce71f900
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1] 0x78ce71f980
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 0x10] 0x78ce724fc0

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8] 0x78cf169b00
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4] 0x78cf169b80
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4] 0x78cf169c00
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4] 0x78cf169c80
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78cf169d00
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78cf169d80
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78cf169e00
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78cf169e80
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x78cf169f00
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1] 0x78cf169f80

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4] 0x78cef9a400

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1] 0x78ce8cccc0
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10] 0x78ce8ccd60
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10] 0x78ce8cce00
	int IsRemapped;//[Offset: 0x58, Size: 0x4] 0x78ce98c280
	float EmScale;//[Offset: 0x5c, Size: 0x4] 0x78ce98c300
	float Ascent;//[Offset: 0x60, Size: 0x4] 0x78ce98c380
	float Descent;//[Offset: 0x64, Size: 0x4] 0x78ce98c400
	float Leading;//[Offset: 0x68, Size: 0x4] 0x78ce98c480
	int Kerning;//[Offset: 0x6c, Size: 0x4] 0x78ce98c500
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8] 0x78ce98c580
	int NumCharacters;//[Offset: 0x118, Size: 0x4] 0x78ce98c600
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10] 0x78ce8ca560
	float ScalingFactor;//[Offset: 0x130, Size: 0x4] 0x78ce98a600
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4] 0x78ce98a680
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8] 0x78ce98a700
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38] 0x78ce98a780

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4] 0x78cf0a9a00
	int StartV;//[Offset: 0x4, Size: 0x4] 0x78cf0a9a80
	int USize;//[Offset: 0x8, Size: 0x4] 0x78cf0a9b00
	int VSize;//[Offset: 0xc, Size: 0x4] 0x78cf0a9b80
	byte TextureIndex;//[Offset: 0x10, Size: 0x1] 0x78cf0a9c00
	int VerticalOffset;//[Offset: 0x14, Size: 0x4] 0x78cf0a9c80

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xd8, Size: 0x4] 0x78ce947100
	int FirstResourceMemMip;//[Offset: 0xdc, Size: 0x4] 0x78ce947180
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x78ce947200
	byte AddressX;//[Offset: 0xe1, Size: 0x1] 0x78ce947280
	byte AddressY;//[Offset: 0xe2, Size: 0x1] 0x78ce947300
	IntPoint ImportedSize;//[Offset: 0xe4, Size: 0x8] 0x78ce947380
	int Blueprint_GetSizeY();// 0xb1b944c 0x78ce92a7a0
	int Blueprint_GetSizeX();// 0xb1b9480 0x78ce92a880

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4] 0x78ea084880
	int Y;//[Offset: 0x4, Size: 0x4] 0x78ea084900

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10] 0x78cf0aac80
	float Height;//[Offset: 0x10, Size: 0x4] 0x78cf0aad00
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78cf0aad80
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x78cf0aae00
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x78cf0aae80
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x78cf0aaf00
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x78cf0aaf80
	byte CharacterSet;//[Offset: 0x15, Size: 0x1] 0x78cf0ab000
	FString Chars;//[Offset: 0x18, Size: 0x10] 0x78cf0ab080
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10] 0x78cf0ab100
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10] 0x78cf0ab180
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10] 0x78cf0ab200
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78cf0ab280
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78cf0ab300
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10] 0x78cf0ab380
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78cf0ab400
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4] 0x78cf0ab480
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4] 0x78cf0ab500
	int XPadding;//[Offset: 0x78, Size: 0x4] 0x78cf0ab580
	int YPadding;//[Offset: 0x7c, Size: 0x4] 0x78cf0a9500
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4] 0x78cf0a9580
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4] 0x78cf0a9600
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4] 0x78cf0a9680
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4] 0x78cf0a9700
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78cf0a9780
	int Kerning;//[Offset: 0x94, Size: 0x4] 0x78cf0a9800
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x78cf0a9880
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4] 0x78cf0a9900
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4] 0x78cf0a9980

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10] 0x78cefe9d00
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18] 0x78cefe9d80
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10] 0x78cefd4160

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10] 0x78cefd40c0

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cefe9f00
	FontData Font;//[Offset: 0x8, Size: 0x20] 0x78cefea200

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10] 0x78cefe9f80
	enum Hinting;//[Offset: 0x10, Size: 0x1] 0x78cefd3f80
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1] 0x78cefd4020
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4] 0x78cefea100
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8] 0x78cefea180

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10] 0x78cefea300
	float ScalingFactor;//[Offset: 0x10, Size: 0x4] 0x78cefea380

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10] 0x78cefd3ee0
	FString Cultures;//[Offset: 0x28, Size: 0x10] 0x78cefe9e80

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78ea087500
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78ea087580

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78ea087600
	int Value;//[Offset: 0x4, Size: 0x4] 0x78ea087680

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4] 0x78ce38e800
	int TileSize;//[Offset: 0x2c, Size: 0x4] 0x78ce38e880
	int TileBorderSize;//[Offset: 0x30, Size: 0x4] 0x78ce38e900
	enum MaterialType;//[Offset: 0x34, Size: 0x1] 0x78ce9d6b40
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78ce38ea00
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x78ce38ea80
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x78ce38eb00
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ce38eb80
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78ce38ec00
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x78ce38ec80
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4] 0x78ce38ed00
	byte LODGroup;//[Offset: 0x40, Size: 0x1] 0x78ce38ed80
	int Size;//[Offset: 0x44, Size: 0x4] 0x78ce38ee00
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8] 0x78ce38ee80
	int GetTileSize();// 0xb1480b0 0x78ce34b300
	int GetTileCount();// 0xb1480e4 0x78ce34b3e0
	int GetTileBorderSize();// 0xb148080 0x78ce34b4c0
	int GetSize();// 0xb148000 0x78ce34b5a0
	int GetPageTableSize();// 0xb147fcc 0x78ce34b680

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x78cf0c2780
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8] 0x78cf0c2800

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x78cf0c2900
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8] 0x78cf0c2980

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x78ce365980
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10] 0x78ce9d2e00
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10] 0x78ce9d2ea0

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4] 0x78cf0c5f80

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf0c6080
	Guid ID;//[Offset: 0x8, Size: 0x10] 0x78cf0c6100

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10] 0x78cf0c6000

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10] 0x78ce726c80
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce786700
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8] 0x78ce786780
	float GrassDensity;//[Offset: 0x48, Size: 0x4] 0x78ce786800
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4] 0x78ce786880
	int StartCullDistance;//[Offset: 0x50, Size: 0x4] 0x78ce786900
	int EndCullDistance;//[Offset: 0x54, Size: 0x4] 0x78ce786980
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78ce786a00
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78ce786a80

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8] 0x78cf035f00
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10] 0x78cefd75e0
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4] 0x78cf036000
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cf036080
	float PlacementJitter;//[Offset: 0x20, Size: 0x4] 0x78cf036100
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4] 0x78cf036180
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4] 0x78cf036200
	int MinLOD;//[Offset: 0x2c, Size: 0x4] 0x78cf036280
	enum Scaling;//[Offset: 0x30, Size: 0x1] 0x78cefd7680
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8] 0x78cf034280
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8] 0x78cf034300
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8] 0x78cf034380
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78cf034400
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78cf034480
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x78cf034500
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1] 0x78cf034580
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cf034600
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78cf034680
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78cf034700

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 0x4] 0x78ce39eb80
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 0x4] 0x78ce39ec00
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 0x10] 0x78ce9da100
	float LightmapUVDensity;//[Offset: 0x98, Size: 0x4] 0x78ce39ed00
	int LightMapResolution;//[Offset: 0x9c, Size: 0x4] 0x78ce39ed80
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 0x4] 0x78ce39ee00
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 0x4] 0x78ce39ee80
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8] 0x78ce39ef00
	int LODForCollision;//[Offset: 0xb0, Size: 0x4] 0x78ce39ef80
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x78ce39f000
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x78ce39f080
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x78ce39f100
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x78ce39f180
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1] 0x78ce39f200
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1] 0x78ce39f280
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1] 0x78ce39f300
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1] 0x78ce39f380
	bool bForceSkipStaticMeshLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78ce39f400
	StaticMeshSocket*[] Sockets;//[Offset: 0xe0, Size: 0x10] 0x78ce9da1a0
	Vector PositiveBoundsExtension;//[Offset: 0x100, Size: 0xc] 0x78ce39f500
	Vector NegativeBoundsExtension;//[Offset: 0x10c, Size: 0xc] 0x78ce39f580
	BoxSphereBounds ExtendedBounds;//[Offset: 0x118, Size: 0x1c] 0x78ce39f600
	int ElementToIgnoreForTexFactor;//[Offset: 0x134, Size: 0x4] 0x78ce39f680
	AssetUserData*[] AssetUserData;//[Offset: 0x138, Size: 0x10] 0x78ce9da240
	Object* EditableMesh;//[Offset: 0x148, Size: 0x8] 0x78ce39f780
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 0x8] 0x78ce39d700
	void RemoveSocket(StaticMeshSocket* Socket);// 0xb1a7970 0x78ce3a0240
	int GetNumSections(int InLOD);// 0xb1a7d80 0x78ce3a0320
	int GetNumLODs();// 0xb1a7f08 0x78ce3a0400
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0xb1a8194 0x78ce3a04e0
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0xb1a80f0 0x78ce3a05c0
	int GetMaterialIndex(FName MaterialSlotName);// 0xb1a7b70 0x78ce3a06a0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0xb1a7cd0 0x78ce3a0780
	BoxSphereBounds GetBounds();// 0xb1a7e9c 0x78ce3a0860
	Box GetBoundingBox();// 0xb1a7e30 0x78ce3a0940
	StaticMeshSocket* FindSocket(FName InSocketName);// 0xb1a7a18 0x78ce3a0a20
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0xb1a8048 0x78ce3a0b00
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0xb1a7f3c 0x78ce3a0be0
	void AddSocket(StaticMeshSocket* Socket);// 0xb1a7ac8 0x78ce3a0cc0
	FName AddMaterial(MaterialInterface* Material);// 0xb1a7c20 0x78ce3a0da0

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4] 0x78cef9a300

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x78cf0f1480
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x78cf0f1500
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8] 0x78cf0f1580
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14] 0x78cf0f1600

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf09e480
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cf09e500
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4] 0x78cf09e580

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 0x58] 0x78ce919900
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce919980
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78ce919a00
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x78ce919a80
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x78ce919b00
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x78ce919b80
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1] 0x78ce919c00
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1] 0x78ce919c80
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1] 0x78ce919d00
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 0x8] 0x78ce919d80
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10] 0x78ce919e00
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x150] 0x78ce919e80
	Vector BuildScale3D;//[Offset: 0x280, Size: 0xc] 0x78ce919f00

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8] 0x78ce712d80
	byte PhysicsType;//[Offset: 0x30, Size: 0x1] 0x78ce712e00
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1] 0x78ce712e80
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1] 0x78ce712f00

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10] 0x78cefdea20
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10] 0x78cefdeac0
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10] 0x78cefdeb60
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10] 0x78cefded40
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10] 0x78cefdede0

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78cf070e80
	float Radius;//[Offset: 0x3c, Size: 0x4] 0x78cf070f00

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4] 0x78cf05e900
	FName Name;//[Offset: 0xc, Size: 0x8] 0x78cf05e980
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cf05ea00
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1] 0x78cf05ea80

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78cf071000
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x78cf071080
	float X;//[Offset: 0x48, Size: 0x4] 0x78cf05f800
	float Y;//[Offset: 0x4c, Size: 0x4] 0x78cf05f880
	float Z;//[Offset: 0x50, Size: 0x4] 0x78cf05f900

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78cf05fa00
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x78cf05fa80
	float Radius;//[Offset: 0x48, Size: 0x4] 0x78cf05fb00
	float Length;//[Offset: 0x4c, Size: 0x4] 0x78cf05fb80

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10] 0x78cefdec00
	int[] IndexData;//[Offset: 0x40, Size: 0x10] 0x78cefdeca0
	Box ElemBox;//[Offset: 0x50, Size: 0x1c] 0x78cf05fd80
	Transform Transform;//[Offset: 0x70, Size: 0x30] 0x78cf05fe00

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc] 0x78ea086200
	Vector Max;//[Offset: 0xc, Size: 0xc] 0x78ea086280
	byte IsValid;//[Offset: 0x18, Size: 0x1] 0x78ea086300

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x78ea088200
	Vector Translation;//[Offset: 0x10, Size: 0xc] 0x78ea088280
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc] 0x78ea088300

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4] 0x78ea084d00
	float Y;//[Offset: 0x4, Size: 0x4] 0x78ea084d80
	float Z;//[Offset: 0x8, Size: 0x4] 0x78ea084e00
	float W;//[Offset: 0xc, Size: 0x4] 0x78ea084e80

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x78cf05ff00
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x78cf05ff80
	float Radius0;//[Offset: 0x48, Size: 0x4] 0x78cf05e780
	float Radius1;//[Offset: 0x4c, Size: 0x4] 0x78cf05e800
	float Length;//[Offset: 0x50, Size: 0x4] 0x78cf05e880

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1] 0x78cef6a800
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1] 0x78cef6a880
	enum SleepFamily;//[Offset: 0x51, Size: 0x1] 0x78cee55100
	byte DOFMode;//[Offset: 0x52, Size: 0x1] 0x78cef6a980
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1] 0x78cef6aa00
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1] 0x78cef6aa80
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1] 0x78cef6ab00
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1] 0x78cef6ab80
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1] 0x78cef6ac00
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1] 0x78cef6ac80
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1] 0x78cef6ad00
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78cef6ad80
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78cef6ae00
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78cef6ae80
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78cef6af00
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x78cef6af80
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x54, Size: 0x1] 0x78cef6b000
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x78cef6b080
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x78cef6b100
	FName CollisionProfileName;//[Offset: 0x64, Size: 0x8] 0x78cef6b180
	byte PositionSolverIterationCount;//[Offset: 0x6c, Size: 0x1] 0x78cef6b200
	byte VelocitySolverIterationCount;//[Offset: 0x6d, Size: 0x1] 0x78cef6b280
	CollisionResponse CollisionResponses;//[Offset: 0x70, Size: 0x30] 0x78cef6a400
	float MaxDepenetrationVelocity;//[Offset: 0xa0, Size: 0x4] 0x78cef6a480
	float MassInKgOverride;//[Offset: 0xa4, Size: 0x4] 0x78cef6a500
	float LinearDamping;//[Offset: 0xb0, Size: 0x4] 0x78cef68480
	float AngularDamping;//[Offset: 0xb4, Size: 0x4] 0x78cef68500
	Vector CustomDOFPlaneNormal;//[Offset: 0xb8, Size: 0xc] 0x78cef68580
	Vector COMNudge;//[Offset: 0xc4, Size: 0xc] 0x78cef68600
	float MassScale;//[Offset: 0xd0, Size: 0x4] 0x78cef68680
	Vector InertiaTensorScale;//[Offset: 0xd4, Size: 0xc] 0x78cef68700
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf0, Size: 0x10] 0x78cef68780
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x100, Size: 0x8] 0x78cef68800
	float MaxAngularVelocity;//[Offset: 0x108, Size: 0x4] 0x78cef68880
	float CustomSleepThresholdMultiplier;//[Offset: 0x10c, Size: 0x4] 0x78cef68900
	float StabilizationThresholdMultiplier;//[Offset: 0x110, Size: 0x4] 0x78cef68980
	float PhysicsBlendWeight;//[Offset: 0x114, Size: 0x4] 0x78cef68a00

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cef68a80
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78cef68b00
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78cef68b80
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78cef68c00
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78cef68c80
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78cef68d00
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78cef68d80

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20] 0x78cef6a200
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10] 0x78cee551a0

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1] 0x78cef6b300
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1] 0x78cef6b380
	byte Pawn;//[Offset: 0x2, Size: 0x1] 0x78cef6b400
	byte Visibility;//[Offset: 0x3, Size: 0x1] 0x78cef6b480
	byte Camera;//[Offset: 0x4, Size: 0x1] 0x78cef6b500
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1] 0x78cef6b580
	byte Vehicle;//[Offset: 0x6, Size: 0x1] 0x78cef69500
	byte Destructible;//[Offset: 0x7, Size: 0x1] 0x78cef69580
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1] 0x78cef69600
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1] 0x78cef69680
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1] 0x78cef69700
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1] 0x78cef69780
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1] 0x78cef69800
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1] 0x78cef69880
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1] 0x78cef69900
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1] 0x78cef69980
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1] 0x78cef69a00
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1] 0x78cef69a80
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1] 0x78cef69b00
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1] 0x78cef69b80
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1] 0x78cef69c00
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1] 0x78cef69c80
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1] 0x78cef69d00
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1] 0x78cef69d80
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1] 0x78cef69e00
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1] 0x78cef69e80
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1] 0x78cef69f00
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1] 0x78cef69f80
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1] 0x78cef6a000
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1] 0x78cef6a080
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1] 0x78cef6a100
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1] 0x78cef6a180

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8] 0x78cef6a280
	byte Response;//[Offset: 0x8, Size: 0x1] 0x78cef6a300

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x78ce39e900
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc] 0x78ce39e980
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc] 0x78ce39ea00
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc] 0x78ce39ea80
	FString Tag;//[Offset: 0x58, Size: 0x10] 0x78ce39eb00

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc] 0x78ea085f00
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc] 0x78ea085f80
	float SphereRadius;//[Offset: 0x18, Size: 0x4] 0x78ea086000

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce368000

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0xa38be80 0x78ce8d06a0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0xa38ba34 0x78ce8d0780
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0xa38bfc4 0x78ce8d0860
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0xa38bb40 0x78ce8d0940

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0xa35c948 0x78ce8d0a20
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0xa35a7e0 0x78ce8d0b00
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0xa35a6e8 0x78ce8d0be0
	void ReversePolygonFacing(PolygonID PolygonID);// 0xa35a634 0x78ce8d0cc0
	void ReserveNewVertices(int NumberOfNewVertices);// 0xa35f08c 0x78ce8d0da0
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0xa35ed88 0x78ce8d0e80
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0xa35e490 0x78ce8d0f60
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0xa35de14 0x78ce8d1040
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0xa35d798 0x78ce8d1120
	void ReserveNewEdges(int NumberOfNewEdges);// 0xa35e954 0x78ce8d1200
	bool IsVertexValid(VertexID VertexID);// 0xa35ee30 0x78ce8d12e0
	bool IsVertexOrphaned(VertexID VertexID);// 0xa35d47c 0x78ce8d13c0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0xa35e9fc 0x78ce8d14a0
	bool IsTriangleValid(const TriangleID TriangleID);// 0xa35debc 0x78ce8d1580
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0xa35ba14 0x78ce8d1660
	bool IsPolygonValid(PolygonID PolygonID);// 0xa35d840 0x78ce8d1740
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0xa35d53c 0x78ce8d1820
	bool IsEmpty();// 0xa35f134 0x78ce8d1900
	bool IsEdgeValid(EdgeID EdgeID);// 0xa35e538 0x78ce8d19e0
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0xa35c210 0x78ce8d1ac0
	bool IsEdgeInternal(EdgeID EdgeID);// 0xa35c31c 0x78ce8d1ba0
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xa35d088 0x78ce8d1c80
	Vector GetVertexPosition(VertexID VertexID);// 0xa35ca4c 0x78ce88e780
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0xa35d374 0x78ce88e860
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0xa35c88c 0x78ce88e940
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0xa35c784 0x78ce88ea20
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0xa35b3a8 0x78ce88eb00
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0xa35a920 0x78ce88ebe0
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0xa35c66c 0x78ce88ecc0
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0xa35c498 0x78ce88eda0
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0xa35ceb4 0x78ce88ee80
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0xa35cce0 0x78ce88ef60
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0xa35d25c 0x78ce88f040
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0xa35cb0c 0x78ce88f120
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0xa35b6e0 0x78ce88f200
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xa35b8fc 0x78ce88f2e0
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int index);// 0xa35b7f8 0x78ce88f3c0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0xa35bad4 0x78ce88f4a0
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0xa35bb90 0x78ce88f580
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0xa35b5c8 0x78ce88f660
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0xa35b4b0 0x78ce88f740
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0xa35aee8 0x78ce88f820
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xa35b0bc 0x78ce88f900
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0xa35b290 0x78ce88f9e0
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0xa35aa28 0x78ce88fac0
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xa35add0 0x78ce88fba0
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xa35acb8 0x78ce88fc80
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0xa35a468 0x78ce88fd60
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0xa35aae4 0x78ce88fe40
	int GetNumVertexVertexInstances(VertexID VertexID);// 0xa35cfcc 0x78ce88ff20
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0xa35c5b0 0x78ce88caa0
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0xa35c3dc 0x78ce88cb80
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0xa35cdf8 0x78ce88cc60
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0xa35cc24 0x78ce88cd40
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0xa35d1a0 0x78ce88ce20
	int GetNumPolygonVertices(PolygonID PolygonID);// 0xa35b000 0x78ce88cf00
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0xa35b1d4 0x78ce88cfe0
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0xa35abfc 0x78ce88d0c0
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0xa35a3ac 0x78ce88d1a0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0xa35c03c 0x78ce88d280
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0xa35be68 0x78ce88d360
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0xa35bc4c 0x78ce88d440
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0xa35bd64 0x78ce88d520
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0xa35c0f8 0x78ce88d600
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0xa35bf24 0x78ce88d6e0
	void Empty();// 0xa35f16c 0x78ce88d7c0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0xa35eabc 0x78ce88d8a0
	void DeleteVertex(VertexID VertexID);// 0xa35eef0 0x78ce88d980
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0xa35df7c 0x78ce88da60
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0xa35d5fc 0x78ce88db40
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0xa35d900 0x78ce88dc20
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0xa35e5f8 0x78ce88dd00
	void CreateVertexWithID(VertexID VertexID);// 0xa35efa4 0x78ce88dde0
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0xa35ebd4 0x78ce88dec0
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0xa35eccc 0x78ce88dfa0
	VertexID CreateVertex();// 0xa35f058 0x78ce88e080
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa35e154 0x78ce88e160
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa35e30c 0x78ce88e240
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa35dad8 0x78ce88e320
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0xa35d6b0 0x78ce88e400
	PolygonGroupID CreatePolygonGroup();// 0xa35d764 0x78ce88e4e0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa35dc90 0x78ce88e5c0
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0xa35e710 0x78ce88e6a0
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0xa35e84c 0x78ce88adc0
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0xa35a580 0x78ce88aea0

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4] 0x78cef9d000

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4] 0x78ea085200
	float Y;//[Offset: 0x4, Size: 0x4] 0x78ea085280

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4] 0x78ea089300
	float Max;//[Offset: 0x4, Size: 0x4] 0x78ea089380

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c] 0x78ce3b0300

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10] 0x78cf0f5180
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10] 0x78cf0f5200
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4] 0x78cf0f5280
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4] 0x78cf0f3200
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf0f3280
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4] 0x78cf0f3300
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10] 0x78cf0f3380
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10] 0x78cf0f3400
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10] 0x78cf0f3480
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4] 0x78cf0f3500
	float NormalScale;//[Offset: 0x64, Size: 0x4] 0x78cf0f3580
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4] 0x78cf0f3600
	float IOR;//[Offset: 0x6c, Size: 0x4] 0x78cf0f3680
	float Roughness0;//[Offset: 0x70, Size: 0x4] 0x78cf0f3700
	float Roughness1;//[Offset: 0x74, Size: 0x4] 0x78cf0f3780
	float LobeMix;//[Offset: 0x78, Size: 0x4] 0x78cf0f3800
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10] 0x78cf0f3880

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4] 0x78cf0c4280
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4] 0x78cf0c4300
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4] 0x78cf0c4380
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf0c4400
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78cf0c4480
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78cf0c4500
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78cf0c4580
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x78cf0c4600

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4] 0x78cf0c4680
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4] 0x78cf0c4700
	FName TextureName;//[Offset: 0x8, Size: 0x8] 0x78cf0c4780

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4] 0x78ea085300
	float Y;//[Offset: 0x4, Size: 0x4] 0x78ea083280
	float Z;//[Offset: 0x8, Size: 0x4] 0x78ea083300
	float W;//[Offset: 0xc, Size: 0x4] 0x78ea083380

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf506a00
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf506a80
	int FaceIndex;//[Offset: 0x4, Size: 0x4] 0x78cf506b00
	float Time;//[Offset: 0x8, Size: 0x4] 0x78cf506b80
	float Distance;//[Offset: 0xc, Size: 0x4] 0x78cf506c00
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc] 0x78cf506c80
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc] 0x78cf506d00
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc] 0x78cf506d80
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc] 0x78cf506e00
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc] 0x78cf506e80
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc] 0x78cf506f00
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4] 0x78cf506f80
	int Item;//[Offset: 0x5c, Size: 0x4] 0x78cf507000
	byte ElementIndex;//[Offset: 0x60, Size: 0x1] 0x78cf507080
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 0x8] 0x78cf507100
	Actor* Actor;//[Offset: 0x6c, Size: 0x8] 0x78cf507180
	PrimitiveComponent* Component;//[Offset: 0x74, Size: 0x8] 0x78cf507200
	FName BoneName;//[Offset: 0x7c, Size: 0x8] 0x78cf507280
	FName MyBoneName;//[Offset: 0x84, Size: 0x8] 0x78cf507300

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0xb0aae74 0x78ce343340
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0xb0aaf7c 0x78ce343420
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0xb0ab1e8 0x78ce343500
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0xb0ab2f0 0x78ce3435e0
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0xb0ab55c 0x78ce3436c0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0xb0ab664 0x78ce3437a0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0xb0aabb4 0x78ce343880
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xb0aacf0 0x78ce343960
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xb0aadc0 0x78ce340080
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xb0ab06c 0x78ce340160
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xb0ab138 0x78ce340240
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xb0ab3e0 0x78ce340320
	float K2_GetScalarParameterValue(FName ParameterName);// 0xb0ab4ac 0x78ce340400
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0xb0aaab8 0x78ce3404e0
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0xb0aa968 0x78ce3405c0
	void CopyInterpParameters(MaterialInstance* Source);// 0xb0aaa10 0x78ce3406a0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x78ce788d00
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8] 0x78ce788d80
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8] 0x78ce788e00
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78ce788e80
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x78ce788f00
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10] 0x78ce728e40
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10] 0x78ce728ee0
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10] 0x78ce728f80
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10] 0x78ce729020
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10] 0x78ce726780
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8] 0x78ce789200
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40] 0x78ce789280
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0] 0x78ce789300
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10] 0x78ce726820

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78cf0c4f80
	float ParameterValue;//[Offset: 0x10, Size: 0x4] 0x78cf0c5000
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x78cf0c5080

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78cf0c5100
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10] 0x78cf0c5180
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10] 0x78cf0c5200

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78cf0c5280
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x78cf0c3200
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x78cf0c3280

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78cf0c3300
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x78cf0c3380
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x78cf0c3400

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78cf0c3480
	Font* FontValue;//[Offset: 0x10, Size: 0x8] 0x78cf0c3500
	int FontPage;//[Offset: 0x18, Size: 0x4] 0x78cf0c3580
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10] 0x78cf0c3600

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0c4800
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0c4880
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0c4900
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0c4980
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf0c4a00
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cf0c4a80
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cf0c4b00
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cf0c4b80
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cf0c4c00
	byte BlendMode;//[Offset: 0x2, Size: 0x1] 0x78cf0c4c80
	byte ShadingModel;//[Offset: 0x3, Size: 0x1] 0x78cf0c4d00
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4] 0x78cf0c4d80

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10] 0x78cf08a1a0
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10] 0x78cf08a240
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10] 0x78cf08a2e0
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10] 0x78cf08a380

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78cf0f3c00

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x78cf0f4180
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf0f4200
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x78cf0f2180

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78cf0f3d00
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x78cf0f3d80
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1] 0x78cf0f3e00
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1] 0x78cf0f3e80

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4] 0x78cf0f3f80
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf0f4000

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40] 0x78cf0f4100

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10] 0x78cf085b00
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10] 0x78cf085ba0
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10] 0x78cf085c40
	FString KeyString;//[Offset: 0x30, Size: 0x10] 0x78cf0c6300

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78cf21d400
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78cf21d480
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78cf21d500
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1] 0x78cf21d580
	float BaseEyeHeight;//[Offset: 0x22c, Size: 0x4] 0x78cf21d600
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 0x1] 0x78cf21d680
	enum AutoPossessAI;//[Offset: 0x231, Size: 0x1] 0x78cf1e33a0
	byte RemoteViewPitch;//[Offset: 0x232, Size: 0x1] 0x78cf21b680
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 0x8] 0x78cf1e3440
	PlayerState* PlayerState;//[Offset: 0x240, Size: 0x8] 0x78cf21b700
	Controller* LastHitBy;//[Offset: 0x250, Size: 0x8] 0x78cf21b780
	Controller* Controller;//[Offset: 0x258, Size: 0x8] 0x78cf21b800
	Vector ControlInputVector;//[Offset: 0x264, Size: 0xc] 0x78cf21b880
	Vector LastControlInputVector;//[Offset: 0x270, Size: 0xc] 0x78cf21b900
	void SpawnDefaultController();// 0xb0fea68 0x78cf1fc9c0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0xb0febe0 0x78cf1f90e0
	void ReceiveUnpossessed(Controller* OldController);// 0x8a873f8 0x78cf1f91c0
	void ReceivePossessed(Controller* NewController);// 0x8a873f8 0x78cf1f92a0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0xb0fee7c 0x78cf1f9380
	void OnRep_PlayerState();// 0xb0fecd8 0x78cf1f9460
	void OnRep_Controller();// 0xb0fecf4 0x78cf1f9540
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xb0fe4d4 0x78cf1f9620
	Vector K2_GetMovementInputVector();// 0xb0fe49c 0x78cf1f9700
	bool IsPlayerControlled();// 0xb0feb20 0x78cf1f97e0
	bool IsPawnControlled();// 0xb0fed64 0x78cf1f98c0
	bool IsMoveInputIgnored();// 0xb0fe618 0x78cf1f99a0
	bool IsLocallyControlled();// 0xb0feb60 0x78cf1f9a80
	bool IsControlled();// 0xb0fed9c 0x78cf1f9b60
	bool IsBotControlled();// 0xb0feae0 0x78cf1f9c40
	Vector GetPendingMovementInputVector();// 0xb0fe8e0 0x78cf1f9d20
	Vector GetNavAgentLocation();// 0xb0feba0 0x78cf1f9e00
	PawnMovementComponent* GetMovementComponent();// 0xb0feffc 0x78cf1f9ee0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0xb0fedd4 0x78cf1f9fc0
	Vector GetLastMovementInputVector();// 0xb0fe8a8 0x78cf1fa0a0
	Rotator GetControlRotation();// 0xb0fed10 0x78cf1fa180
	Controller* GetController();// 0xb0fed48 0x78cf1fa260
	Rotator GetBaseAimRotation();// 0xb0feaa0 0x78cf1fa340
	void DetachFromControllerPendingDestroy();// 0xb0fea84 0x78cf1fa420
	Vector ConsumeMovementInputVector();// 0xb0fe868 0x78cf1fa500
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0xb0fe918 0x78cf1fa5e0
	void AddControllerYawInput(float val);// 0xb0fe708 0x78cf1fa6c0
	void AddControllerRollInput(float val);// 0xb0fe658 0x78cf1fa7a0
	void AddControllerPitchInput(float val);// 0xb0fe7b8 0x78cf1fa880

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 0x8] 0x78cec9f480
	delegate OnInstigatedAnyDamage;//[Offset: 0x238, Size: 0x10] 0x78cec9f500
	FName StateName;//[Offset: 0x248, Size: 0x8] 0x78cec9f580
	Pawn* Pawn;//[Offset: 0x250, Size: 0x8] 0x78cec9f600
	Character* Character;//[Offset: 0x260, Size: 0x8] 0x78cec9f680
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 0x8] 0x78cec9f700
	Rotator ControlRotation;//[Offset: 0x288, Size: 0xc] 0x78cec9f780
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1] 0x78cec9d700
	void UnPossess();// 0xaf4620c 0x78ceca5560
	void StopMovement();// 0xaf461f0 0x78ceca5640
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0xaf4687c 0x78ceca1d60
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0xaf46138 0x78ceca1e40
	void SetIgnoreLookInput(bool bNewLookInput);// 0xaf46024 0x78ceca1f20
	void SetControlRotation(out const Rotator NewRotation);// 0xaf46980 0x78ceca2000
	void ResetIgnoreMoveInput();// 0xaf4611c 0x78ceca20e0
	void ResetIgnoreLookInput();// 0xaf46008 0x78ceca21c0
	void ResetIgnoreInputFlags();// 0xaf45fac 0x78ceca22a0
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x8a873f8 0x78ceca2380
	void ReceivePossess(Pawn* PossessedPawn);// 0x8a873f8 0x78ceca2460
	void ReceiveInstigatedAnyDamage(float damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x8a873f8 0x78ceca2540
	void Possess(Pawn* InPawn);// 0xaf46220 0x78ceca2620
	void OnRep_PlayerState();// 0xaf466ec 0x78ceca2700
	void OnRep_Pawn();// 0xaf46708 0x78ceca27e0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0xaf46724 0x78ceca28c0
	Pawn* K2_GetPawn();// 0xaf46400 0x78ceca29a0
	bool IsPlayerController();// 0xaf46364 0x78ceca2a80
	bool IsMoveInputIgnored();// 0xaf460dc 0x78ceca2b60
	bool IsLookInputIgnored();// 0xaf45fc8 0x78ceca2c40
	bool IsLocalPlayerController();// 0xaf46308 0x78ceca2d20
	bool IsLocalController();// 0xaf462c8 0x78ceca2e00
	Actor* GetViewTarget();// 0xaf463c4 0x78ceca2ee0
	Rotator GetDesiredRotation();// 0xaf46384 0x78ceca2fc0
	Rotator GetControlRotation();// 0xaf46a38 0x78ceca30a0
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0xaf46434 0x78ceca3180
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0xaf4657c 0x78ceca3260
	PlayerController* CastToPlayerController();// 0xaf466b8 0x78ceca3340

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 0x4] 0x78ce6dea80
	int PlayerID;//[Offset: 0x224, Size: 0x4] 0x78ce6deb00
	byte Ping;//[Offset: 0x228, Size: 0x1] 0x78ce6deb80
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 0x1] 0x78ce6dec00
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 0x1] 0x78ce6dec80
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 0x1] 0x78ce6ded00
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 0x1] 0x78ce6ded80
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 0x1] 0x78ce6dee00
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 0x1] 0x78ce6dee80
	int StartTime;//[Offset: 0x22c, Size: 0x4] 0x78ce6def00
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 0x8] 0x78ceddfba0
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 0x10] 0x78ce6def80
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 0x28] 0x78ce6df000
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 0x8] 0x78ce6df080
	FString PlayerNamePrivate;//[Offset: 0x2f8, Size: 0x10] 0x78ce6df100
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x8a873f8 0x78ce705480
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x8a873f8 0x78ce705560
	void OnRep_UniqueId();// 0xb125c78 0x78ce705640
	void OnRep_Score();// 0xb125ce8 0x78ce701d60
	void OnRep_PlayerName();// 0xb125ccc 0x78ce701e40
	void OnRep_PlayerId();// 0xb125c94 0x78ce701f20
	void OnRep_bIsInactive();// 0xb125cb0 0x78ce702000
	FString GetPlayerName();// 0xb125bc8 0x78ce7020e0

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10] 0x78cee5c400

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 0x8] 0x78cea23100
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 0x8] 0x78cea23180
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 0x8] 0x78cea21100
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 0x30] 0x78cea21180
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 0x30] 0x78cea21200
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 0x4] 0x78cea21280
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 0xc] 0x78cea21300
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10] 0x78cea21380
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4] 0x78cea21400
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4] 0x78cea21480
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1] 0x78cea21500
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1] 0x78cea21580
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4] 0x78cea21600
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x78cea21680
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1] 0x78cea21700
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1] 0x78cea21780
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1] 0x78cea21800
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1] 0x78cea21880
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1] 0x78cea21900
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1] 0x78cea21980
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1] 0x78cea21a00
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1] 0x78cea21a80
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1] 0x78cea21b00
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1] 0x78cea21b80
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4] 0x78cea21c00
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4] 0x78cea21c80
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4] 0x78cea21d00
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4] 0x78cea21d80
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4] 0x78cea21e00
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4] 0x78cea21e80
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 0x4] 0x78cea21f00
	delegate OnReachedJumpApex;//[Offset: 0x358, Size: 0x10] 0x78cea21f80
	delegate MovementModeChangedDelegate;//[Offset: 0x378, Size: 0x10] 0x78cea22000
	delegate OnCharacterMovementUpdated;//[Offset: 0x388, Size: 0x10] 0x78cea22080
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 0x38] 0x78cea22100
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40] 0x78cea20080
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10] 0x78cf1e3300
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98] 0x78cea20180
	void UnCrouch(bool bClientSimulation);// 0xaf3078c 0x78cf1fd980
	void StopJumping();// 0xaf30eec 0x78cf1fda60
	void StopAnimMontage(AnimMontage* AnimMontage);// 0xaf30c34 0x78cf1fdb40
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0xaf33498 0x78cf1fdc20
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0xaf31efc 0x78cf1fdd00
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xaf32da4 0x78cf1fdde0
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xaf3250c 0x78cf1fdec0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xaf3206c 0x78cf1fdfa0
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xaf32904 0x78cf1fe080
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xaf3305c 0x78cf1fe160
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0xaf3063c 0x78cf1fe240
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xaf30ce4 0x78cf1fe320
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0xaf308fc 0x78cf1fe400
	void OnRep_RootMotion();// 0xaf30628 0x78cf1fe4e0
	void OnRep_ReplicatedBasedMovement();// 0xaf30ff4 0x78cf1fe5c0
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0xaf30fe0 0x78cf1fe6a0
	void OnRep_IsCrouched();// 0xaf30f24 0x78cf1fadc0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x8a873f8 0x78cf1faea0
	void OnLanded(out const HitResult hit);// 0x8a873f8 0x78cf1faf80
	void OnJumped();// 0xaf30a98 0x78cf1fb060
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xaf30ab4 0x78cf1fb140
	void K2_UpdateCustomMovement(float DeltaTime);// 0x8a873f8 0x78cf1fb220
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x8a873f8 0x78cf1fb300
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x8a873f8 0x78cf1fb3e0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x8a873f8 0x78cf1fb4c0
	void Jump();// 0xaf30f08 0x78cf1fb5a0
	bool IsPlayingRootMotion();// 0xaf305f0 0x78cf1fb680
	bool IsPlayingNetworkedRootMotionMontage();// 0xaf30580 0x78cf1fb760
	bool IsJumpProvidingForce();// 0xaf30e34 0x78cf1fb840
	bool HasAnyRootMotion();// 0xaf305b8 0x78cf1fb920
	AnimMontage* GetCurrentMontage();// 0xaf30c00 0x78cf1fba00
	Vector GetBaseTranslationOffset();// 0xaf30fb8 0x78cf1fbae0
	Rotator GetBaseRotationOffsetRotator();// 0xaf30f40 0x78cf1fbbc0
	float GetAnimRootMotionTranslationScale();// 0xaf3054c 0x78cf1fbca0
	void Crouch(bool bClientSimulation);// 0xaf30844 0x78cf1fbd80
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xaf31940 0x78cf1fbe60
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0xaf333ac 0x78cf1fbf40
	void ClientCheatWalk();// 0xaf30730 0x78cf1fc020
	void ClientCheatGhost();// 0xaf306f8 0x78cf1fc100
	void ClientCheatFly();// 0xaf30714 0x78cf1fc1e0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xaf31108 0x78cf1fc2c0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xaf315f8 0x78cf1fc3a0
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xaf31ba4 0x78cf1fc480
	void ClientAckGoodMove(float Timestamp);// 0xaf31e54 0x78cf1fc560
	bool CanJumpInternal();// 0xaf30e74 0x78cf1fc640
	bool CanJump();// 0xaf30eb4 0x78cf1fc720
	bool CanCrouch();// 0xaf3074c 0x78cf1fc800
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0xaf31010 0x78cf1fc8e0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x690, Size: 0x8] 0x78cf1e1aa0
	class AnimInstance* AnimClass;//[Offset: 0x698, Size: 0x8] 0x78cf1e1b40
	AnimInstance* AnimScriptInstance;//[Offset: 0x6a0, Size: 0x8] 0x78cf217f00
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6a8, Size: 0x8] 0x78cf217f80
	SingleAnimationPlayData AnimationData;//[Offset: 0x6b0, Size: 0x18] 0x78cf218000
	Vector RootBoneTranslation;//[Offset: 0x6d8, Size: 0xc] 0x78cf218080
	Vector LineCheckBoundsScale;//[Offset: 0x6e4, Size: 0xc] 0x78cf218100
	AnimInstance*[] LinkedInstances;//[Offset: 0x720, Size: 0x10] 0x78cf1e1be0
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x730, Size: 0x10] 0x78cf1e1c80
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x740, Size: 0x10] 0x78cf1e1d20
	float GlobalAnimRateScale;//[Offset: 0x8a0, Size: 0x4] 0x78cf218300
	byte KinematicBonesUpdateType;//[Offset: 0x8a4, Size: 0x1] 0x78cf218380
	byte PhysicsTransformUpdateMode;//[Offset: 0x8a5, Size: 0x1] 0x78cf218400
	byte AnimationMode;//[Offset: 0x8a7, Size: 0x1] 0x78cf216380
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a9, Size: 0x1] 0x78cf216400
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a9, Size: 0x1] 0x78cf216480
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a9, Size: 0x1] 0x78cf216500
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a9, Size: 0x1] 0x78cf216580
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a9, Size: 0x1] 0x78cf216600
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8a9, Size: 0x1] 0x78cf216680
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8aa, Size: 0x1] 0x78cf216700
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b0, Size: 0x1] 0x78cf216780
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b0, Size: 0x1] 0x78cf216800
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b0, Size: 0x1] 0x78cf216880
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b0, Size: 0x1] 0x78cf216900
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b1, Size: 0x1] 0x78cf216980
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b1, Size: 0x1] 0x78cf216a00
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b1, Size: 0x1] 0x78cf216a80
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b1, Size: 0x1] 0x78cf216b00
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b1, Size: 0x1] 0x78cf216b80
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b1, Size: 0x1] 0x78cf216c00
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b1, Size: 0x1] 0x78cf216c80
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b2, Size: 0x1] 0x78cf216d00
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b2, Size: 0x1] 0x78cf216d80
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b2, Size: 0x1] 0x78cf216e00
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b2, Size: 0x1] 0x78cf216e80
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b2, Size: 0x1] 0x78cf216f00
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b2, Size: 0x1] 0x78cf216f80
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b2, Size: 0x1] 0x78cf217000
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b2, Size: 0x1] 0x78cf217080
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b3, Size: 0x1] 0x78cf217100
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b3, Size: 0x1] 0x78cf217180
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b3, Size: 0x1] 0x78cf217200
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b3, Size: 0x1] 0x78cf217280
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b3, Size: 0x1] 0x78cf217300
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b3, Size: 0x1] 0x78cf217380
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b3, Size: 0x1] 0x78cf215300
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b3, Size: 0x1] 0x78cf215380
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b4, Size: 0x1] 0x78cf215400
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b4, Size: 0x1] 0x78cf215480
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b4, Size: 0x1] 0x78cf215500
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8b6, Size: 0x2] 0x78cf215580
	enum MassMode;//[Offset: 0x8b8, Size: 0x1] 0x78cf1e1dc0
	float UniformMass;//[Offset: 0x8bc, Size: 0x4] 0x78cf215680
	float TotalMass;//[Offset: 0x8c0, Size: 0x4] 0x78cf215700
	float Density;//[Offset: 0x8c4, Size: 0x4] 0x78cf215780
	float MinPerParticleMass;//[Offset: 0x8c8, Size: 0x4] 0x78cf215800
	float ClothBlendWeight;//[Offset: 0x8cc, Size: 0x4] 0x78cf215880
	float EdgeStiffness;//[Offset: 0x8d0, Size: 0x4] 0x78cf215900
	float BendingStiffness;//[Offset: 0x8d4, Size: 0x4] 0x78cf215980
	float AreaStiffness;//[Offset: 0x8d8, Size: 0x4] 0x78cf215a00
	float VolumeStiffness;//[Offset: 0x8dc, Size: 0x4] 0x78cf215a80
	float StrainLimitingStiffness;//[Offset: 0x8e0, Size: 0x4] 0x78cf215b00
	float ShapeTargetStiffness;//[Offset: 0x8e4, Size: 0x4] 0x78cf215b80
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1] 0x78cf215c00
	FName[] DisallowedAnimCurves;//[Offset: 0x8f0, Size: 0x10] 0x78cf1e1e60
	BodySetup* BodySetup;//[Offset: 0x900, Size: 0x8] 0x78cf215d00
	delegate OnConstraintBroken;//[Offset: 0x910, Size: 0x10] 0x78cf215d80
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x920, Size: 0x8] 0x78cf1e1f00
	float TeleportDistanceThreshold;//[Offset: 0x9f8, Size: 0x4] 0x78cf215e00
	float TeleportRotationThreshold;//[Offset: 0x9fc, Size: 0x4] 0x78cf215e80
	uint32 LastPoseTickFrame;//[Offset: 0xa08, Size: 0x4] 0x78cf215f00
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa60, Size: 0x8] 0x78cf215f80
	delegate OnAnimInitialized;//[Offset: 0xb30, Size: 0x10] 0x78cf216000
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xb1693a0 0x78cf1f5800
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0xb1684e4 0x78cf1f58e0
	void ToggleDisablePostProcessBlueprint();// 0xb16a558 0x78cf1f59c0
	void TermBodiesBelow(FName ParentBoneName);// 0xb167078 0x78cf1f5aa0
	void SuspendClothingSimulation();// 0xb168608 0x78cf1f5b80
	void Stop();// 0xb168e1c 0x78cf1f5c60
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xb168720 0x78cf1f5d40
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0xb168268 0x78cf1f5e20
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0xb168318 0x78cf1f5f00
	void SetTeleportRotationThreshold(float Threshold);// 0xb167dcc 0x78cf1f5fe0
	void SetTeleportDistanceThreshold(float Threshold);// 0xb167cf0 0x78cf1f60c0
	void SetPosition(float InPos, bool bFireNotifies);// 0xb168ce8 0x78cf1f61a0
	void SetPlayRate(float Rate);// 0xb168c0c 0x78cf1f6280
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0xb166f20 0x78cf1f6360
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0xb167a78 0x78cf1f6440
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0xb1688bc 0x78cf1f6520
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0xb166e70 0x78cf1f6600
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0xb167790 0x78cf1f66e0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0xb167988 0x78cf1f67c0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0xb16a470 0x78cf1f68a0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0xb1681b8 0x78cf1f6980
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0xb1662c8 0x78cf1f6a60
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0xb1663c4 0x78cf1f6b40
	void SetClothMaxDistanceScale(float Scale);// 0xb168644 0x78cf1f6c20
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0xb167bc4 0x78cf1f6d00
	void SetAnimClass(class Object NewClass);// 0xb169838 0x78cf1f6de0
	void SetAnimationMode(byte InAnimationMode);// 0xb1690b8 0x78cf1f6ec0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0xb168ee0 0x78cf1f6fa0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0xb165f54 0x78cf1f7080
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0xb1683ec 0x78cf1f7160
	void SetAllowedAnimCurvesEvaluation(out const FName[] list, bool bAllow);// 0xb167ea8 0x78cf1f7240
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0xb1680e4 0x78cf1f7320
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xb166698 0x78cf1f3a40
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xb1667e0 0x78cf1f3b20
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0xb166508 0x78cf1f3c00
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0xb166fc8 0x78cf1f3ce0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xb166c10 0x78cf1f3dc0
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0xb166d20 0x78cf1f3ea0
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0xb166a74 0x78cf1f3f80
	void ResumeClothingSimulation();// 0xb1685f4 0x78cf1f4060
	void ResetClothTeleportMode();// 0xb1685a8 0x78cf1f4140
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0xb169160 0x78cf1f4220
	void ResetAllowedAnimCurveEvaluation();// 0xb167fb4 0x78cf1f4300
	void ResetAllBodiesSimulatePhysics();// 0xb166d0c 0x78cf1f43e0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0xb168f88 0x78cf1f44c0
	void Play(bool bLooping);// 0xb168e30 0x78cf1f45a0
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0xb168a04 0x78cf1f4680
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xb1694f0 0x78cf1f4760
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xb169448 0x78cf1f4840
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0xb16758c 0x78cf1f4920
	bool IsPlaying();// 0xb168de4 0x78cf1f4a00
	bool IsClothingSimulationSuspended();// 0xb1685bc 0x78cf1f4ae0
	bool IsBodyGravityEnabled(FName BoneName);// 0xb1678d4 0x78cf1f4bc0
	bool HasValidAnimationInstance();// 0xb169208 0x78cf1f4ca0
	float GetTeleportRotationThreshold();// 0xb167e74 0x78cf1f4d80
	float GetTeleportDistanceThreshold();// 0xb167d98 0x78cf1f4e60
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0xb169f48 0x78cf1f4f40
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0xb1698e8 0x78cf1f5020
	Vector GetSkeletalCenterOfMass();// 0xb167450 0x78cf1f5100
	AnimInstance* GetPostProcessInstance();// 0xb16979c 0x78cf1f51e0
	float GetPosition();// 0xb168cb4 0x78cf1f52c0
	float GetPlayRate();// 0xb168bd8 0x78cf1f53a0
	float GetMorphTarget(FName MorphTargetName);// 0xb1687f8 0x78cf1f5480
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xb1692f0 0x78cf1f5560
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xb169240 0x78cf1f5640
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xb1695e0 0x78cf1f1d60
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xb1696ec 0x78cf1f1e40
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0xb16a108 0x78cf1f1f20
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0xb169b48 0x78cf1f2000
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0xb16a2bc 0x78cf1f20e0
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0xb169d48 0x78cf1f21c0
	bool GetDisablePostProcessBlueprint();// 0xb16a520 0x78cf1f22a0
	bool GetDisableAnimCurves();// 0xb168194 0x78cf1f2380
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0xb165dac 0x78cf1f2460
	float GetClothMaxDistanceScale();// 0xb1686ec 0x78cf1f2540
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0xb167cbc 0x78cf1f2620
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0xb167488 0x78cf1f2700
	AnimInstance* GetAnimInstance();// 0xb1697d0 0x78cf1f27e0
	class Object GetAnimClass();// 0xb169804 0x78cf1f28c0
	byte GetAnimationMode();// 0xb169084 0x78cf1f29a0
	bool GetAllowRigidBodyAnimNode();// 0xb1683c8 0x78cf1f2a80
	bool GetAllowedAnimCurveEvaluate();// 0xb1680c4 0x78cf1f2b60
	void ForceClothNextUpdateTeleportAndReset();// 0xb16861c 0x78cf1f2c40
	void ForceClothNextUpdateTeleport();// 0xb168630 0x78cf1f2d20
	FName FindConstraintBoneName(int ConstraintIndex);// 0xb166218 0x78cf1f2e00
	void ClearMorphTargets();// 0xb1688a8 0x78cf1f2ee0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0xb1660dc 0x78cf1f2fc0
	void BindClothToMasterPoseComponent();// 0xb168594 0x78cf1f30a0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0xb167fc8 0x78cf1f3180
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0xb167120 0x78cf1f3260
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0xb1672b8 0x78cf1f3340
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xb166928 0x78cf5acf00

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x470, Size: 0x8] 0x78cf168a80
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x478, Size: 0x8] 0x78cf168b00
	enum[] SkinCacheUsage;//[Offset: 0x480, Size: 0x10] 0x78cf08c540
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x490, Size: 0x10] 0x78cf08c5e0
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x598, Size: 0x8] 0x78cf168c80
	int ForcedLodModel;//[Offset: 0x5a0, Size: 0x4] 0x78cf168d00
	int MinLodModel;//[Offset: 0x5a4, Size: 0x4] 0x78cf168d80
	float StreamingDistanceMultiplier;//[Offset: 0x5b0, Size: 0x4] 0x78cf168e00
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5c0, Size: 0x10] 0x78cf08c680
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5f4, Size: 0x1] 0x78cf08c720
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f6, Size: 0x1] 0x78cf168f80
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f6, Size: 0x1] 0x78cf169000
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f6, Size: 0x1] 0x78cf169080
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5f6, Size: 0x1] 0x78cf169100
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5f6, Size: 0x1] 0x78cf169180
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f7, Size: 0x1] 0x78cf169200
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f7, Size: 0x1] 0x78cf169280
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f7, Size: 0x1] 0x78cf169300
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f7, Size: 0x1] 0x78cf169380
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f7, Size: 0x1] 0x78cf169400
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f7, Size: 0x1] 0x78cf169480
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5f7, Size: 0x1] 0x78cf167400
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5f7, Size: 0x1] 0x78cf167480
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 0x1] 0x78cf167500
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f8, Size: 0x1] 0x78cf167580
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f8, Size: 0x1] 0x78cf167600
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f8, Size: 0x1] 0x78cf167680
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f8, Size: 0x1] 0x78cf167700
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f8, Size: 0x1] 0x78cf167780
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f9, Size: 0x1] 0x78cf167800
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f9, Size: 0x1] 0x78cf167880
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5fc, Size: 0x4] 0x78cf167900
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x610, Size: 0x1c] 0x78cf167980
	Matrix CachedWorldToLocalTransform;//[Offset: 0x630, Size: 0x40] 0x78cf167a00
	void UnloadSkinWeightProfile(FName InProfileName);// 0xb172660 0x78cef73c00
	void UnHideBoneByName(FName BoneName);// 0xb171844 0x78cef73ce0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xb171d54 0x78cef73dc0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xb171b80 0x78cef73ea0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0xb17160c 0x78cef73f80
	void ShowAllMaterialSections(int LODIndex);// 0xb171564 0x78cef74060
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0xb172484 0x78cef74140
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0xb172a2c 0x78cef74220
	bool SetSkinWeightProfile(FName InProfileName);// 0xb17271c 0x78cef74300
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0xb172878 0x78cef743e0
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0xb172e54 0x78cef744c0
	void SetRenderStatic(bool bNewValue);// 0xb1713b8 0x78cef745a0
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xb17232c 0x78cef74680
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xb1721d4 0x78cef74760
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0xb17355c 0x78cef74840
	void SetMinLOD(int InNewMinLOD);// 0xb173480 0x78cef74920
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0xb1720d8 0x78cef74a00
	void SetForcedLOD(int InNewForcedLOD);// 0xb1733d8 0x78cef74ae0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0xb173244 0x78cef74bc0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0xb1732f4 0x78cef74ca0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0xb17319c 0x78cef74d80
	bool IsUsingSkinWeightProfile();// 0xb172624 0x78cef74e60
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0xb171468 0x78cef74f40
	bool IsBoneHiddenByName(FName BoneName);// 0xb171790 0x78cef75020
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0xb1718ec 0x78cef75100
	int GetVertexOffsetUsage(int LODIndex);// 0xb172574 0x78cef751e0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0xb172b38 0x78cef752c0
	FName GetSocketBoneName(FName InSocketName);// 0xb172f58 0x78cef753a0
	Vector GetRefPosePosition(int BoneIndex);// 0xb171f28 0x78cef75480
	FName GetParentBone(FName BoneName);// 0xb172da4 0x78cef75560
	int GetNumLODs();// 0xb173528 0x78cef75640
	int GetNumBones();// 0xb173168 0x78cef71d60
	int GetForcedLOD();// 0xb1733a4 0x78cef71e40
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0xb172c9c 0x78cef71f20
	FName GetCurrentSkinWeightProfileName();// 0xb172644 0x78cef72000
	FName GetBoneName(int BoneIndex);// 0xb173008 0x78cef720e0
	int GetBoneIndex(FName BoneName);// 0xb1730b8 0x78cef721c0
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0xb1719e0 0x78cef722a0
	void ClearVertexColorOverride(int LODIndex);// 0xb172984 0x78cef72380
	void ClearSkinWeightProfile();// 0xb172708 0x78cef72460
	void ClearSkinWeightOverride(int LODIndex);// 0xb1727d0 0x78e9fe6440
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0xb171fdc 0x78cef735e0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x440, Size: 0x10] 0x78cee54ac0
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1] 0x78cef6dc00
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0xb0b2418 0x78cef70400
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0xb0b2508 0x78cef704e0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xb0b25fc 0x78cef705c0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xb0b2740 0x78cef706a0
	FName[] GetMaterialSlotNames();// 0xb0b27fc 0x78cef70780
	MaterialInterface*[] GetMaterials();// 0xb0b296c 0x78cef70860
	int GetMaterialIndex(FName MaterialSlotName);// 0xb0b28b4 0x78cef70940

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4] 0x78cf0daa00
	byte Weights;//[Offset: 0x30, Size: 0x1] 0x78cf0daa80

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8] 0x78cea79700
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1] 0x78cea79780
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x78cea79800
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1] 0x78cea79880
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1] 0x78cea79900
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1] 0x78cea79980
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1] 0x78cea79a00
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10] 0x78cea79a80
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10] 0x78cea79b00
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10] 0x78cea79b80
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10] 0x78cea79c00
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70] 0x78cea79c80
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10] 0x78cf1e9520
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0xaec4370 0x78cea858e0
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xaec5c34 0x78cea859c0
	Pawn* TryGetPawnOwner();// 0xaec7a10 0x78cea85aa0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0xaec7098 0x78cea85b80
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xaec7880 0x78cea85c60
	void SetRootMotionMode(byte Value);// 0xaec5828 0x78cea85d40
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0xaec77a8 0x78cea85e20
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0xaec76d0 0x78cea85f00
	void SetMorphTarget(FName MorphTargetName, float Value);// 0xaec4680 0x78cea85fe0
	void SavePoseSnapshot(FName SnapshotName);// 0xaec7960 0x78cea860c0
	void ResetDynamics(enum InTeleportType);// 0xaec3e1c 0x78cea861a0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0xaec718c 0x78cea86280
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0xaec7444 0x78cea86360
	void Montage_StopGroupByName(float InBlendOutTime, FName groupName);// 0xaec6bcc 0x78cea86440
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0xaec6cc0 0x78cea86520
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0xaec62b0 0x78cea86600
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0xaec666c 0x78cea866e0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0xaec6760 0x78cea867c0
	void Montage_Resume(const AnimMontage* Montage);// 0xaec6a7c 0x78cea868a0
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0xaec6db4 0x78cea86980
	void Montage_Pause(const AnimMontage* Montage);// 0xaec6b24 0x78cea86a60
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0xaec689c 0x78cea86b40
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0xaec698c 0x78cea86c20
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0xaec6504 0x78cea86d00
	bool Montage_IsActive(const AnimMontage* Montage);// 0xaec65b8 0x78cea86de0
	float Montage_GetPosition(const AnimMontage* Montage);// 0xaec63a4 0x78cea86ec0
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0xaec609c 0x78cea86fa0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0xaec61fc 0x78cea87080
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0xaec6454 0x78cea87160
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0xaec614c 0x78cea87240
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0xaec4468 0x78cea87320
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xaec5d84 0x78cea83a40
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xaec5cdc 0x78cea83b20
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0xaec3f84 0x78cea83c00
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0xaec6f9c 0x78cea83ce0
	bool IsAnyMontagePlaying();// 0xaec6064 0x78cea83dc0
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0xaec4120 0x78cea83ea0
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0xaec421c 0x78cea83f80
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0xaec3ec4 0x78cea84060
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0xaec4d88 0x78cea84140
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0xaec4e80 0x78cea84220
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0xaec4aa0 0x78cea84300
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0xaec4b98 0x78cea843e0
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0xaec4c90 0x78cea844c0
	bool GetReceiveNotifiesFromLinkedInstances();// 0xaec7860 0x78cea845a0
	bool GetPropagateNotifiesToLinkedInstances();// 0xaec7788 0x78cea84680
	SkeletalMeshComponent* GetOwningComponent();// 0xaec7668 0x78cea84760
	Actor* GetOwningActor();// 0xaec769c 0x78cea84840
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0xaec5a78 0x78cea84920
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0xaec5980 0x78cea84a00
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xaec5b84 0x78cea84ae0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xaec58d0 0x78cea84bc0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xaec5e74 0x78cea84ca0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xaec5f80 0x78cea84d80
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0xaec4f78 0x78cea84e60
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0xaec5070 0x78cea84f40
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0xaec5168 0x78cea85020
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0xaec5310 0x78cea85100
	float GetInstanceMachineWeight(int MachineIndex);// 0xaec5408 0x78cea851e0
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0xaec5260 0x78cea852c0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0xaec54b8 0x78cea853a0
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0xaec5568 0x78cea85480
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0xaec5618 0x78cea85560
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0xaec56c8 0x78cea85640
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0xaec5778 0x78cea81d60
	float GetCurveValue(FName CurveName);// 0xaec49f0 0x78cea81e40
	FName GetCurrentStateName(int MachineIndex);// 0xaec4774 0x78cea81f20
	AnimMontage* GetCurrentActiveMontage();// 0xaec6030 0x78cea82000
	void GetAllCurveNames(out FName[] OutNames);// 0xaec4824 0x78cea820e0
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0xaec48e4 0x78cea821c0
	void ClearMorphTargets();// 0xaec466c 0x78cea822a0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0xaec4560 0x78cea82380
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78cea82460
	void BlueprintPostEvaluateAnimation();// 0x8a873f8 0x78cea82540
	void BlueprintLinkedAnimationLayersInitialized();// 0x8a873f8 0x78cea82620
	void BlueprintInitializeAnimation();// 0x8a873f8 0x78cea82700
	void BlueprintBeginPlay();// 0x8a873f8 0x78cea827e0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10] 0x78cefdad80
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10] 0x78cefdae20
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8] 0x78cf049f00
	FName SnapshotName;//[Offset: 0x28, Size: 0x8] 0x78cf049f80
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cf04a000

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10] 0x78ce8c4b60
	float SequenceLength;//[Offset: 0x90, Size: 0x4] 0x78ce8e9180
	float RateScale;//[Offset: 0x94, Size: 0x4] 0x78ce8e9200
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10] 0x78ce8e9280
	float GetPlayLength();// 0xaee0f94 0x78ce8d9a80

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x78ce8e5680
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10] 0x78ce8c33a0
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x78ce8c3440

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4] 0x78cf073400
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4] 0x78cf073480
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4] 0x78cf073500
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4] 0x78cf073580
	FName NotifyName;//[Offset: 0x40, Size: 0x8] 0x78cf073600
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8] 0x78cf073680
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8] 0x78cf073700
	float Duration;//[Offset: 0x58, Size: 0x4] 0x78cf073780
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30] 0x78cf073800
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78cf073880
	byte MontageTickType;//[Offset: 0x91, Size: 0x1] 0x78cf073900
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4] 0x78cf073980
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1] 0x78cf073a00
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4] 0x78cf073a80
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78cf073b00
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x78cf073b80
	int TrackIndex;//[Offset: 0xa4, Size: 0x4] 0x78cf073c00

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8] 0x78cf073f00
	int slotindex;//[Offset: 0x10, Size: 0x4] 0x78cf073f80
	int SegmentIndex;//[Offset: 0x14, Size: 0x4] 0x78cf074000
	byte LinkMethod;//[Offset: 0x18, Size: 0x1] 0x78cf074080
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1] 0x78cf074100
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4] 0x78cf074180
	float SegmentLength;//[Offset: 0x20, Size: 0x4] 0x78cf074200
	float LinkValue;//[Offset: 0x24, Size: 0x4] 0x78cf072180
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8] 0x78cf072200

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x8a873f8 0x78cea3ff20
	FString GetNotifyName();// 0xaedcd20 0x78cea3caa0

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x8a873f8 0x78cea3fac0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x8a873f8 0x78cea3fba0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x8a873f8 0x78cea3fc80
	FString GetNotifyName();// 0xaeded14 0x78cea3fd60

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30] 0x78ce8eb480
	float BlendInTime;//[Offset: 0xd8, Size: 0x4] 0x78ce8eb500
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30] 0x78ce8eb580
	float BlendOutTime;//[Offset: 0x110, Size: 0x4] 0x78ce8e9500
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4] 0x78ce8e9580
	FName SyncGroup;//[Offset: 0x118, Size: 0x8] 0x78ce8e9600
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4] 0x78ce8e9680
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20] 0x78ce8e9700
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10] 0x78ce8c4660
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10] 0x78ce8c4700
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10] 0x78ce8c47a0
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x78ce8e9900
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x78ce8e9980
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1] 0x78ce8e9a00
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1] 0x78ce8e9a80
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10] 0x78ce8c4840
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10] 0x78ce8c48e0
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28] 0x78ce8e9c00
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8] 0x78ce8e9c80
	float GetDefaultBlendOutTime();// 0xaed2684 0x78ce8d99a0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x78cefb4200
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x78cefb2180
	enum BlendOption;//[Offset: 0x24, Size: 0x1] 0x78cee5c180

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80] 0x78ce945a00
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78ce945a80
	float GetFloatValue(float InTime);// 0xaf4956c 0x78ce92ab20

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0xaf48934 0x78ce92ac00
	void GetTimeRange(out float MinTime, out float MaxTime);// 0xaf48a38 0x78ce92ace0

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x78cee57360

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4] 0x78cef87e80
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1] 0x78cef87f00
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1] 0x78cef87f80

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60] 0x78cef88000

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1] 0x78cef87980
	byte TangentMode;//[Offset: 0x1, Size: 0x1] 0x78cef87a00
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1] 0x78cef87a80
	float Time;//[Offset: 0x4, Size: 0x4] 0x78cef87b00
	float Value;//[Offset: 0x8, Size: 0x4] 0x78cef87b80
	float ArriveTangent;//[Offset: 0xc, Size: 0x4] 0x78cef87c00
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x78cef87c80
	float LeaveTangent;//[Offset: 0x14, Size: 0x4] 0x78cef87d00
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4] 0x78cef87d80

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10] 0x78cf080240

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8] 0x78cf077480
	float Time;//[Offset: 0x8, Size: 0x4] 0x78cf077500

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8] 0x78cf074c80
	float StartTime;//[Offset: 0x38, Size: 0x4] 0x78cf074d00
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8] 0x78cf074d80
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10] 0x78cefdfb00

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8] 0x78cf074e80
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10] 0x78cf074f00

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10] 0x78cefdff60

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8] 0x78cf071100
	float startPos;//[Offset: 0x8, Size: 0x4] 0x78cf071180
	float AnimStartTime;//[Offset: 0xc, Size: 0x4] 0x78cf071200
	float AnimEndTime;//[Offset: 0x10, Size: 0x4] 0x78cf071280
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4] 0x78cf071300
	int LoopingCount;//[Offset: 0x18, Size: 0x4] 0x78cf071380

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8] 0x78cf074f80
	float DisplayTime;//[Offset: 0x38, Size: 0x4] 0x78cf075000
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4] 0x78cf075080

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4] 0x78cf075100
	float TriggerTime;//[Offset: 0x4, Size: 0x4] 0x78cf075180
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1] 0x78cf075200

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4] 0x78cf0f6a80
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4] 0x78cf0f6b00
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10] 0x78cf089d40
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4] 0x78cf0f6d00

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0f6b80
	float Alpha;//[Offset: 0xc, Size: 0x4] 0x78cf0f6c00

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x78cefdfec0

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80] 0x78cf072d80

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8] 0x78cf072e00
	SmartName Name;//[Offset: 0x8, Size: 0xc] 0x78cf072f00
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4] 0x78cf072f80

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8] 0x78cf072e80

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10] 0x78ce9d8c60
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10] 0x78ce9d8d00
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10] 0x78ce393680
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10] 0x78ce9d8da0
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10] 0x78ce9d8e40
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50] 0x78ce393800
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10] 0x78ce9d8ee0
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10] 0x78ce9d8f80
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10] 0x78ce9d9020

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0dad00
	int ParentIndex;//[Offset: 0x8, Size: 0x4] 0x78cf0dad80
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1] 0x78cf0dae00

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8] 0x78cf0db300
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8] 0x78cf0db380
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8] 0x78cf0db400

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x78ce393a00
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x78ce393a80
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc] 0x78ce393b00
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x78ce393b80
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc] 0x78ce393c00
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78ce393c80
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0xb16f558 0x78ce34e240
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0xb16f690 0x78ce34e320

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8] 0x78ce912280
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10] 0x78ce8c7720

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x78cf07b800
	float BlendScale;//[Offset: 0x10, Size: 0x4] 0x78cf07b880

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78cf041d00

--------------------------------
Class: AnimSlotGroup
	FName groupName;//[Offset: 0x0, Size: 0x8] 0x78cf0db200
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10] 0x78cf088d00

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8] 0x78cf070980
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8] 0x78cf070a00
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4] 0x78cf070a80

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10] 0x78cf081140
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50] 0x78cf068140

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8] 0x78cf077380

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10] 0x78cf0811e0

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8] 0x78cf0d8380
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0d8400
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78cf0d6380
	float SavedPosition;//[Offset: 0xc, Size: 0x4] 0x78cf0d6400
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4] 0x78cf0d6480

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0xa3c6f60 0x78cea8d440
	void PhysicsAssetUpdated();// 0xa3c702c 0x78cea8d520
	float GetSimulationTime();// 0xa3c6d24 0x78cea8d600
	int GetNumSubsteps();// 0xa3c6d60 0x78cea8d6e0
	int GetNumKinematicParticles();// 0xa3c6e14 0x78cea8d7c0
	int GetNumIterations();// 0xa3c6d9c 0x78cea8d8a0
	int GetNumDynamicParticles();// 0xa3c6dd8 0x78cea8d980
	int GetNumCloths();// 0xa3c6e50 0x78cea8da60
	void EnableGravityOverride(out const Vector InVector);// 0xa3c6ea8 0x78cea8db40
	void DisableGravityOverride();// 0xa3c6e8c 0x78cea8dc20
	void ClothConfigUpdated();// 0xa3c7010 0x78cea8dd00

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8] 0x78cf16c380
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c] 0x78cf16c400
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c] 0x78cf16c480
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc] 0x78cf16c500
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc] 0x78cf16c580
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 0x10] 0x78cf08bb40
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 0x10] 0x78cf08bbe0
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 0x10] 0x78cf08bc80
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4] 0x78cf16a680
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 0x1] 0x78cf16a700
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 0x1] 0x78cf16a780
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 0x1] 0x78cf16a800
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 0x1] 0x78cf16a880
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 0x1] 0x78cf16a900
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 0x1] 0x78cf16a980
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 0x1] 0x78cf16aa00
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 0x1] 0x78cf16aa80
	BodySetup* BodySetup;//[Offset: 0x160, Size: 0x8] 0x78cf16ab00
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 0x8] 0x78cf16ab80
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 0x8] 0x78cf16ac00
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 0x10] 0x78cf08bd20
	MorphTarget*[] MorphTargets;//[Offset: 0x188, Size: 0x10] 0x78cf08bdc0
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x310, Size: 0x8] 0x78cf08be60
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x318, Size: 0x10] 0x78cf08bf00
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x328, Size: 0x30] 0x78cf16ae00
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10] 0x78cf08bfa0
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x368, Size: 0x10] 0x78cf08c040
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x388, Size: 0x10] 0x78cf08c0e0
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0xb1613d8 0x78cef766e0
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0xb1612b4 0x78cef767c0
	int NumSockets();// 0xb160c58 0x78cef768a0
	FString[] K2_GetAllMorphTargetNames();// 0xb161010 0x78cef76980
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0xb160aa4 0x78cef76a60
	SkeletalMeshSocket* GetSocketByIndex(int index);// 0xb160ba8 0x78cef76b40
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0xb161128 0x78cef76c20
	BoxSphereBounds GetImportedBounds();// 0xb161480 0x78cef76d00
	Object* GetDefaultAnimatingRig();// 0xb1611d8 0x78cef76de0
	BoxSphereBounds GetBounds();// 0xb1614ec 0x78cef76ec0
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0xb160c8c 0x78cef76fa0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0xb160e58 0x78cef77080
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0xb160f60 0x78cef77160

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x78cf0d8200
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x78cf0d8280
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14] 0x78cf0d8300

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x78cf0d9f00
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1] 0x78cf0d9f80

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x78cf0d8480
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x78cf0d8500
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10] 0x78cf086960
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14] 0x78cf0d8600
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c] 0x78cf0d9100
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10] 0x78cf086a00
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10] 0x78cf086aa0
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4] 0x78cf0d9280
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8] 0x78cf0d9300
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8] 0x78cf0d9380
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10] 0x78cf0d9400
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1] 0x78cf086b40
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x78cf0d7400
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x78cf0d7480
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x78cf0d7500
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x78cf0d7580

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0a5500
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0a5580
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0a5600
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0a5680
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf0a5700
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cf0a5780
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cf0a5800
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cf0a5880
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4] 0x78cf0a5900
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4] 0x78cf0a5980
	float ThresholdUV;//[Offset: 0xc, Size: 0x4] 0x78cf0a5a00
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4] 0x78cf0a5a80

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1] 0x78cf0d8680
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4] 0x78cf0d8700
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4] 0x78cf0d8780
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4] 0x78cf0d8800
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4] 0x78cf0d8880
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4] 0x78cf0d8900
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1] 0x78cf0d8980
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1] 0x78cf0d8a00
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1] 0x78cf0d8a80
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1] 0x78cf0d8b00
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1] 0x78cf0d8b80
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x78cf0d8c00
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x78cf0d8c80
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4] 0x78cf0d8d00
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4] 0x78cf0d8d80
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4] 0x78cf0d8e00
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78cf0d8e80
	float VolumeImportance;//[Offset: 0x30, Size: 0x4] 0x78cf0d8f00
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78cf0d8f80
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1] 0x78cf0d9000
	int BaseLOD;//[Offset: 0x38, Size: 0x4] 0x78cf0d9080

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4] 0x78ce8ec080
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10] 0x78ce8c43e0
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x78ce8ec180
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8] 0x78ce8ec200
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1] 0x78ce8ec280
	byte RefPoseType;//[Offset: 0x151, Size: 0x1] 0x78ce8ec300
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8] 0x78ce8ec380
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4] 0x78ce8ec400
	FName RetargetSource;//[Offset: 0x164, Size: 0x8] 0x78ce8ec480
	enum Interpolation;//[Offset: 0x16c, Size: 0x1] 0x78ce8c4480
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x78ce8ec580
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1] 0x78ce8ec600
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1] 0x78ce8ea580
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x78ce8ea600
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1] 0x78ce8ea680
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10] 0x78ce8c4520
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1a0, Size: 0x10] 0x78ce8c45c0

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x78cf077600

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10] 0x78ce8c2ae0

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10] 0x78ce8e7d80

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8] 0x78ce8e9d80

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x78cf0a0800
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 0x10] 0x78cf083580
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 0x10] 0x78cf0836c0
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 0x10] 0x78cf083800

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x78cf0a0880
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88] 0x78cf0a0b00

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 0x10] 0x78cf0a0900
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 0x10] 0x78cf0834e0

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0a0980
	FString Value;//[Offset: 0x8, Size: 0x10] 0x78cf0a0a00

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x78cf0a0c00
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 0x80] 0x78cf0a0f00

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x78cf083620
	int DefaultValue;//[Offset: 0x78, Size: 0x4] 0x78cf0a0e00
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78cf0a0e80

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0a0c80
	int Value;//[Offset: 0x4, Size: 0x4] 0x78cf0a0d00

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x78cf0a1000
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x80] 0x78cf09f980

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x6e, Size: 0x1] 0x78cf0a1080
	SimpleCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x78cf083760

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf09f800
	float Value;//[Offset: 0x4, Size: 0x4] 0x78cf09f880

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cef9a180

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10] 0x78ce9d5ec0
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10] 0x78ce9d5f60
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10] 0x78ce9d6000
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x1c] 0x78ce37e700
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1] 0x78ce37c680
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8] 0x78ce37c700
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10] 0x78ce9d60a0

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78ce37e480
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a0, Size: 0x10] 0x78ce9d5e20

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x78cf0d0b00
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24] 0x78cf0d0b80

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8] 0x78cf0d0c00
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0d0c80
	float OrientationStrength;//[Offset: 0xc, Size: 0x4] 0x78cf0d0d00
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4] 0x78cf0d0d80
	float PositionStrength;//[Offset: 0x14, Size: 0x4] 0x78cf0d0e00
	float VelocityStrength;//[Offset: 0x18, Size: 0x4] 0x78cf0d0e80
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4] 0x78cf0d0f00
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4] 0x78cf0d0f80

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1c0] 0x78ce380e80
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e8, Size: 0x10] 0x78ce9d5d80
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f8, Size: 0x10c] 0x78ce380f80

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 0x8] 0x78cf09fe80
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8] 0x78cf09ff00
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8] 0x78cf09ff80
	Vector Pos1;//[Offset: 0x30, Size: 0xc] 0x78cf09e780
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc] 0x78cf09e800
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc] 0x78cf09e880
	Vector Pos2;//[Offset: 0x54, Size: 0xc] 0x78cf09e900
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc] 0x78cf09e980
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc] 0x78cf09ea00
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc] 0x78cf09ea80
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x78cf09eb00
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x10c] 0x78cf09da80

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4] 0x78cf09eb80
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4] 0x78cf09ec00
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4] 0x78cf09ec80
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4] 0x78cf09ed00
	float LinearBreakThreshold;//[Offset: 0x10, Size: 0x4] 0x78cf09ed80
	float AngularBreakThreshold;//[Offset: 0x14, Size: 0x4] 0x78cf09ee00
	LinearConstraint LinearLimit;//[Offset: 0x18, Size: 0x1c] 0x78cf09f080
	ConeConstraint ConeLimit;//[Offset: 0x34, Size: 0x20] 0x78cf09f300
	TwistConstraint TwistLimit;//[Offset: 0x54, Size: 0x1c] 0x78cf09f700
	LinearDriveConstraint LinearDrive;//[Offset: 0x70, Size: 0x4c] 0x78cf09f780
	AngularDriveConstraint AngularDrive;//[Offset: 0xbc, Size: 0x4c] 0x78cf09d700
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78cf09d780
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x78cf09d800
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1] 0x78cf09d880
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1] 0x78cf09d900
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1] 0x78cf09d980
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1] 0x78cf09da00

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4] 0x78cf09ee80
	byte XMotion;//[Offset: 0x18, Size: 0x1] 0x78cf09ef00
	byte YMotion;//[Offset: 0x19, Size: 0x1] 0x78cf09ef80
	byte ZMotion;//[Offset: 0x1a, Size: 0x1] 0x78cf09f000

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78cf09f480
	float Damping;//[Offset: 0x4, Size: 0x4] 0x78cf09f500
	float Restitution;//[Offset: 0x8, Size: 0x4] 0x78cf09f580
	float ContactDistance;//[Offset: 0xc, Size: 0x4] 0x78cf09f600
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cf09f680

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4] 0x78cf09f100
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4] 0x78cf09f180
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1] 0x78cf09f200
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1] 0x78cf09f280

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4] 0x78cf09f380
	byte TwistMotion;//[Offset: 0x18, Size: 0x1] 0x78cf09f400

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc] 0x78cf09db00
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc] 0x78cf09db80
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10] 0x78cf09dc00
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10] 0x78cf09dc80
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10] 0x78cf09dd00
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78cf09dd80

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78cf09df00
	float Damping;//[Offset: 0x4, Size: 0x4] 0x78cf09df80
	float MaxForce;//[Offset: 0x8, Size: 0x4] 0x78cf09e000
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf09e080
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78cf09e100

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10] 0x78cf09de00
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10] 0x78cf09de80
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10] 0x78cf09e180
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc] 0x78cf09e200
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc] 0x78cf09e280
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1] 0x78cf09e300

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x10c] 0x78cf0d0680
	FName ProfileName;//[Offset: 0x10c, Size: 0x8] 0x78cf0d0700

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4] 0x78cf0d0780
	int SolverIterations;//[Offset: 0x4, Size: 0x4] 0x78cf0d0800
	int JointIterations;//[Offset: 0x8, Size: 0x4] 0x78cf0d0880
	int CollisionIterations;//[Offset: 0xc, Size: 0x4] 0x78cf0d0900
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4] 0x78cf0d0980
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4] 0x78cf0d0a00
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4] 0x78cf0d0a80

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50] 0x78cee15ec0
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50] 0x78cee15f80
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50] 0x78cee16040
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28] 0x78ce367480
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28] 0x78ce367500

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8] 0x78cf0cbc00
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78cf0cbc80

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8] 0x78ce368080

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10] 0x78ce8bb000
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10] 0x78ce8bb080

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10] 0x78cf088ee0
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20] 0x78cf0d9980

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0db480
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x78cf0db500
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf0db580
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10] 0x78cf088da0
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10] 0x78cf088e40

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8] 0x78cf0d9500

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78cf0d9600
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0d9680
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78cf0d9700

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10] 0x78cf088f80
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10] 0x78cf089020

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0da880
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1] 0x78cf0da900
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4] 0x78cf0da980

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4] 0x78ce394000
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1] 0x78ce394080
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78ce394100
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1] 0x78ce394180
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4] 0x78ce394200
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4] 0x78ce392180
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10] 0x78ce9d6780

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8] 0x78cf1e2ea0

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x78cf0d9a00
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x78cf0d9a80
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1] 0x78cf086780
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10] 0x78cf086820
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10] 0x78cf0868c0
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4] 0x78cf0d9d80
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8] 0x78cf0d9e00
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c] 0x78cf0d9e80

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf0d9b80
	FName BoneName;//[Offset: 0x4, Size: 0x8] 0x78cf0d9c00

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8] 0x78ce8c3940
	byte BlueprintType;//[Offset: 0x58, Size: 0x1] 0x78ce8e3c00
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78ce8e3c80
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78ce8e3d00
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78ce8e3d80
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4] 0x78ce8e3e00
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8] 0x78ce8e3e80
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10] 0x78ce8c39e0
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10] 0x78ce8c3a80
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10] 0x78ce8c3b20
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8] 0x78ce8e4080

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8] 0x78ce8c3bc0
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8] 0x78ce8c3c60
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ce8e4100
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10] 0x78ce8e4180

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10] 0x78ce9d6820
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10] 0x78ce9d68c0
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8] 0x78ce392700

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8] 0x78ce9d6960
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8] 0x78ce391f80
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48] 0x78ce392000
	FName AttachToName;//[Offset: 0x80, Size: 0x8] 0x78ce392080
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8] 0x78ce392100
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8] 0x78ce390080
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78ce390100
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10] 0x78ce9d6a00
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10] 0x78ce9d6aa0
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10] 0x78ce390280
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8] 0x78ce390300

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10] 0x78cf081960
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78cf07db80

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x78cf07d980
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x78cf07da00
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8] 0x78cf07da80

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8] 0x78cf07cb80
	FString DataValue;//[Offset: 0x8, Size: 0x10] 0x78cf07cc00

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4] 0x78ce3b4c00
	byte LengthMode;//[Offset: 0x2c, Size: 0x1] 0x78ce3b4c80
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78ce3b4d00
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x78ce3b4d80
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1] 0x78ce3b4e00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1] 0x78ce3b4e80
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10] 0x78ce9d9ac0
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10] 0x78ce9d9b60
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10] 0x78ce9d9c00
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10] 0x78ce9d9ca0
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10] 0x78ce9d9d40
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10] 0x78ce3b5180
	FName VariableName;//[Offset: 0x90, Size: 0x8] 0x78ce3b5200
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8] 0x78ce3b5280
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8] 0x78ce3b3200
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8] 0x78ce3b3280

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8] 0x78cf0f6f00
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8] 0x78cf0f6f80

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8] 0x78cf0f7200
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf0f7280

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8] 0x78cf0f7000

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8] 0x78cf0f7180

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8] 0x78cf0f7080

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x78ce946b00
	Vector GetVectorValue(float InTime);// 0xaf4dbc4 0x78ce92a340

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8] 0x78cf0f7100

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x78ce945400
	float AdjustHue;//[Offset: 0x230, Size: 0x4] 0x78ce945480
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4] 0x78ce945500
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4] 0x78ce945580
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4] 0x78ce945600
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4] 0x78ce945680
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4] 0x78ce945700
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4] 0x78ce945780
	LinearColor GetLinearColorValue(float InTime);// 0xaf4be40 0x78ce92a960
	LinearColor GetClampedLinearColorValue(float InTime);// 0xaf4bd84 0x78ce92aa40

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x78cf07dc00
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8] 0x78cf081a00

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] records;//[Offset: 0x28, Size: 0x10] 0x78ce8cd9e0
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10] 0x78ce8cda80

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8] 0x78cf084700
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8] 0x78cf0ace00
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20] 0x78cf0acf80
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48] 0x78cf0ad000

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8] 0x78cf0847a0
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8] 0x78cf0ace80
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10] 0x78cf0acf00

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4] 0x78cf0dab80

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10] 0x78cf088940

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10] 0x78ea085980
	Plane YPlane;//[Offset: 0x10, Size: 0x10] 0x78ea085a00
	Plane ZPlane;//[Offset: 0x20, Size: 0x10] 0x78ea085a80
	Plane WPlane;//[Offset: 0x30, Size: 0x10] 0x78ea085b00

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4] 0x78ea085080

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8] 0x78ceadc780
	float GravityScale;//[Offset: 0x150, Size: 0x4] 0x78ceadc800
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4] 0x78ceadc880
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4] 0x78ceadc900
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4] 0x78ceadc980
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4] 0x78ceadca00
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4] 0x78ceadca80
	byte MovementMode;//[Offset: 0x168, Size: 0x1] 0x78ceadcb00
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1] 0x78ceadcb80
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1] 0x78ceac4ac0
	float GroundFriction;//[Offset: 0x16c, Size: 0x4] 0x78ceadcc80
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4] 0x78ceadcd00
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4] 0x78ceadcd80
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4] 0x78ceadce00
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4] 0x78ceadce80
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4] 0x78ceadcf00
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4] 0x78ceadcf80
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4] 0x78ceadd000
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4] 0x78ceadd080
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4] 0x78ceadd100
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4] 0x78ceadd180
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4] 0x78ceadd200
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4] 0x78ceadd280
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4] 0x78ceadd300
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4] 0x78ceadd380
	float AirControl;//[Offset: 0x1c4, Size: 0x4] 0x78ceadd400
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4] 0x78ceadd480
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4] 0x78ceadd500
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4] 0x78ceadd580
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4] 0x78ceadd600
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4] 0x78ceadd680
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4] 0x78ceadb600
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4] 0x78ceadb680
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc] 0x78ceadb700
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x78ceadb780
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1] 0x78ceadb800
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1] 0x78ceadb880
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1] 0x78ceadb900
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1] 0x78ceadb980
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1] 0x78ceadba00
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1] 0x78ceadba80
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x78ceadbb00
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x78ceadbb80
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x78ceadbc00
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1] 0x78ceadbc80
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1] 0x78ceadbd00
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1] 0x78ceadbd80
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1] 0x78ceadbe00
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1] 0x78ceadbe80
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1] 0x78ceadbf00
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1] 0x78ceadbf80
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1] 0x78ceadc000
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1] 0x78ceadc080
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1] 0x78ceadc100
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1] 0x78ceadc180
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1] 0x78ceadc200
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8] 0x78ceadc280
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4] 0x78ceadc300
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4] 0x78ceadc380
	float Mass;//[Offset: 0x208, Size: 0x4] 0x78ceadc400
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4] 0x78ceadc480
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4] 0x78ceadc500
	float PushForceFactor;//[Offset: 0x214, Size: 0x4] 0x78ceadc580
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4] 0x78ceadc600
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4] 0x78ceada580
	float MinTouchForce;//[Offset: 0x220, Size: 0x4] 0x78ceada600
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4] 0x78ceada680
	float RepulsionForce;//[Offset: 0x228, Size: 0x4] 0x78ceada700
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc] 0x78ceada780
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10] 0x78ceada800
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc] 0x78ceada880
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc] 0x78ceada900
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4] 0x78ceada980
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4] 0x78ceadaa00
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4] 0x78ceadaa80
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc] 0x78ceadab00
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc] 0x78ceadab80
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4] 0x78ceadac00
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4] 0x78ceadac80
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4] 0x78ceadad00
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4] 0x78ceadad80
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4] 0x78ceadae00
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4] 0x78ceadae80
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4] 0x78ceadaf00
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4] 0x78ceadaf80
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4] 0x78ceadb000
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4] 0x78ceadb080
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4] 0x78ceadb100
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4] 0x78ceadb180
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4] 0x78ceadb200
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4] 0x78ceadb280
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4] 0x78ceadb300
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4] 0x78ceadb380
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 0x4] 0x78ceadb400
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 0x4] 0x78ceadb480
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 0x4] 0x78ceadb500
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 0x4] 0x78ceadb580
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 0x4] 0x78cead9500
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 0x4] 0x78cead9580
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 0x98] 0x78cead9600
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 0x1] 0x78cead9680
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 0x1] 0x78cead9700
	byte GroundMovementMode;//[Offset: 0x38a, Size: 0x1] 0x78cead9780
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 0x1] 0x78cead9800
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 0x1] 0x78cead9880
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 0x1] 0x78cead9900
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 0x1] 0x78cead9980
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 0x1] 0x78cead9a00
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 0x1] 0x78cead9a80
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 0x1] 0x78cead9b00
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 0x1] 0x78cead9b80
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1] 0x78cead9c00
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1] 0x78cead9c80
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1] 0x78cead9d00
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1] 0x78cead9d80
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1] 0x78cead9e00
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1] 0x78cead9e80
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1] 0x78cead9f00
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1] 0x78cead9f80
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1] 0x78ceada000
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1] 0x78ceada080
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1] 0x78ceada100
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1] 0x78ceada180
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1] 0x78ceada200
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1] 0x78ceada280
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 0x1] 0x78ceada300
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1] 0x78ceada380
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1] 0x78ceada400
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 0x1] 0x78ceada480
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 0x1] 0x78ceada500
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38e, Size: 0x1] 0x78cead8480
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 0x1] 0x78cead8500
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 0x4] 0x78cead8580
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 0xc] 0x78cead8600
	int AvoidanceUID;//[Offset: 0x3b0, Size: 0x4] 0x78cead8680
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 0x4] 0x78cead8700
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 0x4] 0x78cead8780
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 0x4] 0x78cead8800
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 0x4] 0x78cead8880
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 0xc] 0x78cead8900
	float NavMeshProjectionInterval;//[Offset: 0x474, Size: 0x4] 0x78cead8980
	float NavMeshProjectionTimer;//[Offset: 0x478, Size: 0x4] 0x78cead8a00
	float NavMeshProjectionInterpSpeed;//[Offset: 0x47c, Size: 0x4] 0x78cead8a80
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x480, Size: 0x4] 0x78cead8b00
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x484, Size: 0x4] 0x78cead8b80
	float NavWalkingFloorDistTolerance;//[Offset: 0x488, Size: 0x4] 0x78cead8c00
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x490, Size: 0x30] 0x78cead8c80
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d8, Size: 0x4] 0x78cead8d00
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x988, Size: 0x38] 0x78cead8d80
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9c0, Size: 0x38] 0x78cead8e00
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa90, Size: 0x40] 0x78cead8e80
	Vector AnimRootMotionVelocity;//[Offset: 0xad0, Size: 0xc] 0x78cead8f00
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0xaf37918 0x78ceaaeda0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0xaf379f4 0x78ceaaee80
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0xaf3821c 0x78ceaaef60
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0xaf383e4 0x78ceaaf040
	void SetGroupsToIgnore(int GroupFlags);// 0xaf38494 0x78ceaaf120
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0xaf3853c 0x78ceaaf200
	void SetGroupsToAvoid(int GroupFlags);// 0xaf385ec 0x78ceaaf2e0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0xaf38694 0x78ceaaf3c0
	void SetAvoidanceGroup(int GroupFlags);// 0xaf38744 0x78ceaaf4a0
	void SetAvoidanceEnabled(bool bEnable);// 0xaf38334 0x78ceaaf580
	float K2_GetWalkableFloorZ();// 0xaf379c0 0x78ceaaf660
	float K2_GetWalkableFloorAngle();// 0xaf37a9c 0x78ceaaf740
	float K2_GetModifiedMaxAcceleration();// 0xaf37ed0 0x78ceaaf820
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0xaf377e8 0x78ceaaf900
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0xaf375d8 0x78ceaaf9e0
	bool IsWalking();// 0xaf381dc 0x78ceaafac0
	bool IsWalkable(out const HitResult hit);// 0xaf37ad0 0x78ceaafba0
	float GetValidPerchRadius();// 0xaf37bb4 0x78ceaafc80
	float GetPerchRadiusThreshold();// 0xaf37be8 0x78ceaafd60
	PrimitiveComponent* GetMovementBase();// 0xaf3818c 0x78ceaafe40
	float GetMinAnalogSpeed();// 0xaf37f0c 0x78ceaaff20
	float GetMaxJumpHeightWithJumpTime();// 0xaf37f48 0x78ceaacaa0
	float GetMaxJumpHeight();// 0xaf37f84 0x78ceaacb80
	float GetMaxBrakingDeceleration();// 0xaf37e58 0x78ceaacc60
	float GetMaxAcceleration();// 0xaf37e94 0x78ceaacd40
	Vector GetLastUpdateVelocity();// 0xaf387ec 0x78ceaace20
	Rotator GetLastUpdateRotation();// 0xaf38814 0x78ceaacf00
	Vector GetLastUpdateLocation();// 0xaf38850 0x78ceaacfe0
	Vector GetImpartedMovementBaseVelocity();// 0xaf3814c 0x78ceaad0c0
	Vector GetCurrentAcceleration();// 0xaf37e20 0x78ceaad1a0
	Character* GetCharacterOwner();// 0xaf38318 0x78ceaad280
	float GetAnalogInputModifier();// 0xaf37dec 0x78ceaad360
	void DisableMovement();// 0xaf381c0 0x78ceaad440
	void ClearAccumulatedForces();// 0xaf37dd0 0x78ceaad520
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xaf3738c 0x78ceaad600
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0xaf37fc0 0x78ceaad6e0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0xaf37ccc 0x78ceaad7c0
	void AddForce(Vector Force);// 0xaf37c1c 0x78ceaad8a0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8] 0x78cead6880
	Vector K2_GetInputVector();// 0xb0fffec 0x78ceaad980
	bool IsMoveInputIgnored();// 0xb100058 0x78ceaada60
	Vector GetPendingInputVector();// 0xb100110 0x78ceaadb40
	Pawn* GetPawnOwner();// 0xb100024 0x78ceaadc20
	Vector GetLastInputVector();// 0xb1000d8 0x78ceaadd00
	Vector ConsumeInputVector();// 0xb100098 0x78ceaadde0
	void AddInputVector(Vector WorldVector, bool bForce);// 0xb100148 0x78ceaadec0

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30] 0x78cead6d00
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4] 0x78cead6d80
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1] 0x78cead6e00
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1] 0x78cead6e80
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1] 0x78cead6f00
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1] 0x78cead6f80
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8] 0x78cead7000
	void StopMovementKeepPathing();// 0xb0be23c 0x78ceaadfa0
	void StopActiveMovement();// 0xb0be28c 0x78ceaae080
	bool IsSwimming();// 0xb0be13c 0x78ceaae160
	bool IsMovingOnGround();// 0xb0be17c 0x78ceaae240
	bool IsFlying();// 0xb0be0fc 0x78ceaae320
	bool IsFalling();// 0xb0be1bc 0x78ceaae400
	bool IsCrouching();// 0xb0be1fc 0x78ceaae4e0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8] 0x78cf50e280
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8] 0x78cf50e300
	Vector Velocity;//[Offset: 0xc4, Size: 0xc] 0x78cf50e380
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc] 0x78cf50e400
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc] 0x78cf50e480
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x78cf50e500
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1] 0x78cf50e580
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1] 0x78cf50e600
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1] 0x78cf50e680
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1] 0x78cf50e700
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1] 0x78cf50c680
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1] 0x78cf50c700
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1] 0x78cf50c780
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1] 0x78cf2cc860
	void StopMovementImmediately();// 0xb0b699c 0x78cf522700
	void SnapUpdatedComponentToPlane();// 0xb0b5f4c 0x78cf5227e0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xb0b6800 0x78cf5228c0
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xb0b62d4 0x78cf5229a0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xb0b647c 0x78cf522a80
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xb0b6384 0x78cf522b60
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xb0b621c 0x78cf522c40
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xb0b6548 0x78cf522d20
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xb0b68b0 0x78cf522e00
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xb0b65f8 0x78cf522ee0
	float K2_GetModifiedMaxSpeed();// 0xb0b6a74 0x78cf522fc0
	float K2_GetMaxSpeedModifier();// 0xb0b6ab0 0x78cf5230a0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xb0b69b8 0x78cf523180
	Vector GetPlaneConstraintOrigin();// 0xb0b619c 0x78cf523260
	Vector GetPlaneConstraintNormal();// 0xb0b61dc 0x78cf523340
	enum GetPlaneConstraintAxisSetting();// 0xb0b652c 0x78cf523420
	PhysicsVolume* GetPhysicsVolume();// 0xb0b6960 0x78cf523500
	float GetMaxSpeed();// 0xb0b6aec 0x78cf5235e0
	float GetGravityZ();// 0xb0b6b28 0x78cf5236c0
	Vector ConstrainNormalToPlane(Vector Normal);// 0xb0b5f68 0x78cf5237a0
	Vector ConstrainLocationToPlane(Vector Location);// 0xb0b6024 0x78cf523880
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xb0b60e0 0x78cf523960

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4] 0x78cf0c8480
	float AgentHeight;//[Offset: 0x8, Size: 0x4] 0x78cf0c8500
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4] 0x78cf0c8580
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4] 0x78cf0c8600
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18] 0x78cf0c8680

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0c8700
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0c8780
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0c8800
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0c8880
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf0c8900

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8] 0x78ea087a00
	FString SubPathString;//[Offset: 0x8, Size: 0x10] 0x78ea087a80

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0c8980
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0c8a00
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0c8a80
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0c8b00
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf0c8b80
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cf0c8c00
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cf0c8c80
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cf0c8d00
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cf0c8d80
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78cf0c8e00
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78cf0c8e80
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78cf0c8f00
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78cf0c8f80
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78cf0c9000
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78cf0c9080
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78cf0c9100
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x78cf0c9180
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x78cf0c9200
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x78cf0c9280
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x78cf0c9300
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x78cf0c9380
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x78cf0c9400
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x78cf0c9480
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x78cf0c7400
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x78cf0c7480
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x78cf0c7500
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x78cf0c7580
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x78cf0c7600
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x78cf0c7680
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x78cf0c7700
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x78cf0c7780
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x78cf0c7800

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf09cf00
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf09cf80
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf09d000
	float FloorDist;//[Offset: 0x4, Size: 0x4] 0x78cf09d080
	float LineDist;//[Offset: 0x8, Size: 0x4] 0x78cf09d100
	HitResult HitResult;//[Offset: 0xc, Size: 0x8c] 0x78cf09d180

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78cf09b600
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78cf09b680
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78cf09b700
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78cf09b780
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1] 0x78cf09b880
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc] 0x78cf09b900

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1] 0x78cf09b800

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf070b80
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x78cf070c00
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30] 0x78cf070c80

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x458, Size: 0x4] 0x78ce942c00
	float CapsuleRadius;//[Offset: 0x45c, Size: 0x4] 0x78ce942c80
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0xaf2f280 0x78ce926b40
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0xaf2f180 0x78ce926c20
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0xaf2f080 0x78ce926d00
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xaf2eb14 0x78ce926de0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xaf2ec24 0x78ce926ec0
	float GetUnscaledCapsuleRadius();// 0xaf2ed6c 0x78ce926fa0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0xaf2ed2c 0x78ce927080
	float GetUnscaledCapsuleHalfHeight();// 0xaf2ed50 0x78ce927160
	float GetShapeScale();// 0xaf2ead4 0x78ce927240
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xaf2ed88 0x78ce927320
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xaf2eec8 0x78ce923a40
	float GetScaledCapsuleRadius();// 0xaf2f050 0x78ce923b20
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0xaf2efec 0x78ce923c00
	float GetScaledCapsuleHalfHeight();// 0xaf2f02c 0x78ce923ce0

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x440, Size: 0x8] 0x78ce91b080
	class NavAreaBase* AreaClass;//[Offset: 0x448, Size: 0x8] 0x78ce8c8bc0
	Color ShapeColor;//[Offset: 0x450, Size: 0x4] 0x78ce91b100
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x454, Size: 0x1] 0x78ce91b180
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x454, Size: 0x1] 0x78ce91b200
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x454, Size: 0x1] 0x78ce91b280

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8] 0x78cf09bb80
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x78cf09bc00
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc] 0x78cf09bc80
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc] 0x78cf09bd00
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf09bd80
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cf09be00
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cf09be80

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf09d200
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98] 0x78cf09bb00

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf09d280
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8] 0x78cf09d300
	float Position;//[Offset: 0x10, Size: 0x4] 0x78cf09d380
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc] 0x78cf09d400
	Rotator Rotation;//[Offset: 0x20, Size: 0xc] 0x78cf09d480
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8] 0x78cf09d500
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8] 0x78cf09d580
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cf09d600
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78cf09d680
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38] 0x78cf09b980
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc] 0x78cf09ba00
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc] 0x78cf09ba80

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce946780
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78ce946800
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78ce946880
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4] 0x78ce946900
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4] 0x78ce946980
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4] 0x78ce946a00
	float DamageFalloff;//[Offset: 0x38, Size: 0x4] 0x78ce946a80

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 0x8] 0x78ce6da380
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 0x8] 0x78ce6da400
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 0x8] 0x78ce6da480
	HUD* MyHUD;//[Offset: 0x2b0, Size: 0x8] 0x78ce6da500
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 0x8] 0x78ce6d8480
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 0x8] 0x78ceddeb60
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78ce6d8500
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 0xc] 0x78ce6d8580
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 0x4] 0x78ce6d8600
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 0x10] 0x78ceddec00
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 0x10] 0x78ceddeca0
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 0x4] 0x78ce6d8780
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 0xc] 0x78ce6d8800
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 0xc] 0x78ce6d8880
	int ClientCap;//[Offset: 0x330, Size: 0x4] 0x78ce6d8900
	CheatManager* CheatManager;//[Offset: 0x338, Size: 0x8] 0x78ce6d8980
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 0x8] 0x78cedded40
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 0x8] 0x78ce6d8a00
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 0x10] 0x78ceddede0
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 0x1] 0x78ce6d8b00
	byte NetPlayerIndex;//[Offset: 0x3d1, Size: 0x1] 0x78ce6d8b80
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 0x8] 0x78ce6d8c00
	NetConnection* NetConnection;//[Offset: 0x418, Size: 0x8] 0x78ce6d8c80
	float InputYawScale;//[Offset: 0x42c, Size: 0x4] 0x78ce6d8d00
	float InputPitchScale;//[Offset: 0x430, Size: 0x4] 0x78ce6d8d80
	float InputRollScale;//[Offset: 0x434, Size: 0x4] 0x78ce6d8e00
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1] 0x78ce6d8e80
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 0x1] 0x78ce6d8f00
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 0x1] 0x78ce6d8f80
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 0x1] 0x78ce6d9000
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 0x1] 0x78ce6d9080
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 0x1] 0x78ce6d9100
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 0x4] 0x78ce6d9180
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 0x10] 0x78ceddee80
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 0x1] 0x78ce6d9280
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 0x1] 0x78ce6d9300
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 0x1] 0x78ce6d9380
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 0x1] 0x78ce6d9400
	float HitResultTraceDistance;//[Offset: 0x454, Size: 0x4] 0x78ce6d9480
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 0x2] 0x78ce6d7400
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 0x2] 0x78ce6d7480
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 0x8] 0x78ce6d7500
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 0x1] 0x78ce6d7580
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 0x8] 0x78ce6d7600
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 0x8] 0x78ce6d7680
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1] 0x78ce6d7700
	Vector spawnlocation;//[Offset: 0x558, Size: 0xc] 0x78ce6d7780
	bool WasInputKeyJustReleased(Key Key);// 0xb1164e4 0x78ce6bdd00
	bool WasInputKeyJustPressed(Key Key);// 0xb116674 0x78ce6bdde0
	void ToggleSpeaking(bool bInSpeaking);// 0xb11bb40 0x78ce6bdec0
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0xb1187c0 0x78ce6bdfa0
	void SwitchLevel(FString URL);// 0xb11cc2c 0x78ce6be080
	void StopHapticEffect(enum Hand);// 0xb118584 0x78ce6be160
	void StartFire(byte FireModeNum);// 0xb11bcb0 0x78ce6be240
	void SetVirtualJoystickVisibility(bool bVisible);// 0xb115824 0x78ce6be320
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0xb11558c 0x78ce6be400
	void SetName(FString S);// 0xb11cce8 0x78ce6be4e0
	void SetMouseLocation(const int X, const int Y);// 0xb11bd60 0x78ce6be5c0
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0xb1193cc 0x78ce6be6a0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0xb118448 0x78ce6badc0
	void SetDisableHaptics(bool bNewDisabled);// 0xb118390 0x78ce6baea0
	void SetControllerLightColor(Color Color);// 0xb1182ec 0x78ce6baf80
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xb115114 0x78ce6bb060
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0xb115454 0x78ce6bb140
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0xb115350 0x78ce6bb220
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0xb116da0 0x78ce6bb300
	void ServerViewPrevPlayer();// 0xb116e9c 0x78ce6bb3e0
	void ServerViewNextPlayer();// 0xb116ef8 0x78ce6bb4c0
	void ServerVerifyViewTarget();// 0xb116f54 0x78ce6bb5a0
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0xb116fb0 0x78ce6bb680
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0xb11708c 0x78ce6bb760
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0xb117168 0x78ce6bb840
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0xb11b57c 0x78ce6bb920
	void ServerToggleAILogging();// 0xb116ba4 0x78ce6bba00
	void ServerShortTimeout();// 0xb1172a4 0x78ce6bbae0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0xb11d434 0x78ce6bbbc0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0xb1173b8 0x78ce6bbca0
	void ServerRestartPlayer();// 0xb1174f4 0x78ce6bbd80
	void ServerPause();// 0xb117550 0x78ce6bbe60
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0xb1175ac 0x78ce6bbf40
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0xb11b850 0x78ce6bc020
	void ServerExecRPC(FString Msg);// 0xb11d0ec 0x78ce6bc100
	void ServerExec(FString Msg);// 0xb11d038 0x78ce6bc1e0
	void ServerCheckClientPossessionReliable();// 0xb117300 0x78ce6bc2c0
	void ServerCheckClientPossession();// 0xb11735c 0x78ce6bc3a0
	void ServerChangeName(FString S);// 0xb117684 0x78ce6bc480
	void ServerCamera(FName NewMode);// 0xb117770 0x78ce6bc560
	void ServerAcknowledgePossession(Pawn* P);// 0xb117858 0x78ce6bc640
	void SendToConsole(FString Command);// 0xb11af5c 0x78ce6bc720
	void RestartLevel();// 0xb11d294 0x78ce6bc800
	void ResetControllerLightColor();// 0xb1182d8 0x78ce6bc8e0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0xb11be50 0x78ce6bc9c0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0xb11862c 0x78ce6b90e0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0xb1188b0 0x78ce6b91c0
	void Pause();// 0xb11cda4 0x78ce6b92a0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0xb11505c 0x78ce6b9380
	void LocalTravel(FString URL);// 0xb11d1d8 0x78ce6b9460
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0xb118d68 0x78ce6b9540
	bool IsInputKeyDown(Key Key);// 0xb116804 0x78ce6b9620
	void GetViewportSize(out int SizeX, out int SizeY);// 0xb1194f4 0x78ce6b9700
	SpectatorPawn* GetSpectatorPawn();// 0xb115040 0x78ce6b97e0
	bool GetMousePosition(out float locationX, out float locationY);// 0xb115d6c 0x78ce6b98c0
	Vector GetInputVectorKeyState(Key Key);// 0xb1161c8 0x78ce6b99a0
	void GetInputTouchState(byte FingerIndex, out float locationX, out float locationY, out bool bIsCurrentlyPressed);// 0xb116020 0x78ce6b9a80
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0xb115adc 0x78ce6b9b60
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0xb115e84 0x78ce6b9c40
	float GetInputKeyTimeDown(Key Key);// 0xb115be0 0x78ce6b9d20
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xb11598c 0x78ce6b9e00
	float GetInputAnalogKeyState(Key Key);// 0xb116358 0x78ce6b9ee0
	HUD* GetHUD();// 0xb1194c0 0x78ce6b9fc0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xb11c258 0x78ce6ba0a0
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xb11c42c 0x78ce6ba180
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xb11c5f0 0x78ce6ba260
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xb11c7b4 0x78ce6ba340
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xb11c93c 0x78ce6ba420
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xb11cab4 0x78ce6ba500
	Vector GetFocalLocation();// 0xb115000 0x78ce6ba5e0
	void FOV(float NewFOV);// 0xb11d2b0 0x78ce6ba6c0
	void EnableCheats();// 0xb11d360 0x78ce6ba7a0
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0xb11bfa8 0x78ce6ba880
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0xb11c148 0x78ce6ba960
	void ConsoleKey(Key Key);// 0xb11b018 0x78ce6baa40
	void ClientWasKicked(const FText KickReason);// 0xb117c04 0x78ce6bab20
	void ClientVoiceHandshakeComplete();// 0xb11bb24 0x78ce6bac00
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0xb117d10 0x78ce6bace0
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0xb117dcc 0x78ce6b7400
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0xb11b1a4 0x78ce6b74e0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xb117fa8 0x78ce6b75c0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0xb118144 0x78ce6b76a0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0xb116c00 0x78ce6b7780
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0xb118b78 0x78ce6b7860
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xb118f44 0x78ce6b7940
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0xb119040 0x78ce6b7a20
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0xb119144 0x78ce6b7b00
	void ClientStartOnlineSession();// 0xb117be8 0x78ce6b7be0
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0xb11a300 0x78ce6b7cc0
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xb11a3f0 0x78ce6b7da0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xb119210 0x78ce6b7e80
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0xb1192c0 0x78ce6b7f60
	void ClientSetSpectatorWaiting(bool bWaiting);// 0xb11d37c 0x78ce6b8040
	void ClientSetHUD(class HUD NewHUDClass);// 0xb1195f8 0x78ce6b8120
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0xb1196a8 0x78ce6b8200
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0xb1197f0 0x78ce6b82e0
	void ClientSetCameraMode(FName NewCamMode);// 0xb119988 0x78ce6b83c0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0xb119a38 0x78ce6b84a0
	void ClientSetBlockOnAsyncLoading();// 0xb119c6c 0x78ce6b8580
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0xb11ce70 0x78ce6b8660
	void ClientReturnToMainMenu(FString ReturnReason);// 0xb11cf7c 0x78ce6b8740
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xb117b1c 0x78ce6b8820
	void ClientRestart(Pawn* NewPawn);// 0xb119c88 0x78ce6b8900
	void ClientReset();// 0xb119d38 0x78ce6b89e0
	void ClientRepObjRef(Object* Object);// 0xb11cdc0 0x78ce6b8ac0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0xb117940 0x78ce6b8ba0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0xb119d54 0x78ce6b8c80
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0xb119ee4 0x78ce6b8d60
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0xb11a030 0x78ce6b8e40
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xb11a1bc 0x78ce6b8f20
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0xb118c70 0x78ce6b9000
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0xb11a580 0x78ce6b5720
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0xb11b390 0x78ce6b5800
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0xb11a884 0x78ce6b58e0
	void ClientIgnoreMoveInput(bool bIgnore);// 0xb11a9d8 0x78ce6b59c0
	void ClientIgnoreLookInput(bool bIgnore);// 0xb11aa90 0x78ce6b5aa0
	void ClientGotoState(FName newstate);// 0xb11ab48 0x78ce6b5b80
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0xb11abf8 0x78ce6b5c60
	void ClientForceGarbageCollection();// 0xb11acfc 0x78ce6b5d40
	void ClientFlushLevelStreaming();// 0xb11ad18 0x78ce6b5e20
	void ClientEndOnlineSession();// 0xb117bcc 0x78ce6b5f00
	void ClientEnableNetworkVoice(bool bEnable);// 0xb11bbf8 0x78ce6b5fe0
	void ClientCommitMapChange();// 0xb11ad2c 0x78ce6b60c0
	void ClientClearCameraLensEffects();// 0xb1191f4 0x78ce6b61a0
	void ClientCapBandwidth(int Cap);// 0xb11ad48 0x78ce6b6280
	void ClientCancelPendingMapChange();// 0xb11adf8 0x78ce6b6360
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0xb11ae14 0x78ce6b6440
	void ClearAudioListenerOverride();// 0xb115440 0x78ce6b6520
	void ClearAudioListenerAttenuationOverride();// 0xb11533c 0x78ce6b6600
	bool CanRestartPlayer();// 0xb1152fc 0x78ce6b66e0
	void Camera(FName NewMode);// 0xb115774 0x78ce6b67c0
	void AddYawInput(float val);// 0xb116a44 0x78ce6b68a0
	void AddRollInput(float val);// 0xb116994 0x78ce6b6980
	void AddPitchInput(float val);// 0xb116af4 0x78ce6b6a60
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0xb1158dc 0x78ce6b6b40

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8] 0x78cf508300

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8] 0x78ceabe780
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4] 0x78ceabe800
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4] 0x78ceabe880
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4] 0x78ceabe900

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8] 0x78ce9b8880

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 0x8] 0x78ceb77280
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78ceb77300
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78ceb77380
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78ceb75300
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 0x4] 0x78ceb75380
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x78ceb75400
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1] 0x78ceb75480
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1] 0x78ceb75500
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 0x10] 0x78ceace020
	FName[] DebugDisplay;//[Offset: 0x250, Size: 0x10] 0x78ceace0c0
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 0x10] 0x78ceace160
	Canvas* Canvas;//[Offset: 0x270, Size: 0x8] 0x78ceb75700
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 0x8] 0x78ceb75780
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 0x10] 0x78ceace200
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 0x8] 0x78ceace2a0
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 0x8] 0x78ceb75880
	void ShowHUD();// 0xafada44 0x78ceb67860
	void ShowDebugToggleSubCategory(FName Category);// 0xafad8ec 0x78ceb67940
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0xafad844 0x78ceb67a20
	void ShowDebug(FName DebugType);// 0xafad994 0x78ceb67b00
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0xafad348 0x78ceb67be0
	void RemoveAllDebugStrings();// 0xafad444 0x78ceb67cc0
	void ReceiveHitBoxRelease(const FName BoxName);// 0x8a873f8 0x78ceb67da0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x8a873f8 0x78ceb67e80
	void ReceiveHitBoxClick(const FName BoxName);// 0x8a873f8 0x78ceb67f60
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x8a873f8 0x78ceb68040
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x8a873f8 0x78ceb68120
	Vector Project(Vector Location);// 0xafab9b8 0x78ceb68200
	void PreviousDebugTarget();// 0xafab380 0x78ceb682e0
	void NextDebugTarget();// 0xafab39c 0x78ceb683c0
	void GetTextSize(FString text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0xafad154 0x78ceb684a0
	PlayerController* GetOwningPlayerController();// 0xafab3ec 0x78ceb68580
	Pawn* GetOwningPawn();// 0xafab3b8 0x78ceb68660
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0xafab5e8 0x78ceb68740
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0xafac444 0x78ceb68820
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xafac620 0x78ceb68900
	void DrawText(FString text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0xafaced8 0x78ceb689e0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0xafacae8 0x78ceb68ac0
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0xafaba6c 0x78ceb68ba0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0xafabdac 0x78ceb68c80
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xafac01c 0x78ceb68d60
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0xafaccb8 0x78ceb68e40
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0xafab82c 0x78ceb68f20
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0xafab420 0x78ceb69000
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0xafad458 0x78ceb65720

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4] 0x78ce940380
	float OrgY;//[Offset: 0x2c, Size: 0x4] 0x78ce940400
	float ClipX;//[Offset: 0x30, Size: 0x4] 0x78ce940480
	float ClipY;//[Offset: 0x34, Size: 0x4] 0x78ce940500
	Color DrawColor;//[Offset: 0x38, Size: 0x4] 0x78ce940580
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78ce940600
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78ce940680
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78ce940700
	int SizeX;//[Offset: 0x40, Size: 0x4] 0x78ce940780
	int SizeY;//[Offset: 0x44, Size: 0x4] 0x78ce940800
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10] 0x78ce940880
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8] 0x78ce940900
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8] 0x78ce940980
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8] 0x78ce940a00
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0xaf28f10 0x78ce924140
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0xaf2905c 0x78ce924220
	Vector K2_Project(Vector WorldLocation);// 0xaf292a4 0x78ce924300
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0xaf29674 0x78ce9243e0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0xaf2a494 0x78ce9244c0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0xaf29e40 0x78ce9245a0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0xaf29358 0x78ce924680
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0xaf2951c 0x78ce924760
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0xaf2a244 0x78ce924840
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0xaf2a784 0x78ce924920
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0xaf297cc 0x78ce924a00
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0xaf29958 0x78ce924ae0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0xaf29164 0x78ce924bc0

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8] 0x78cf0a4680
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8] 0x78cf0a4700
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10] 0x78cf0a4780
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8] 0x78cf0a4800
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8] 0x78cf0a4880
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10] 0x78cf0a4900
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8] 0x78cf0a4980
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8] 0x78cf0a4a00
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10] 0x78cf0a4a80

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8] 0x78cf0a1b80
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc] 0x78cf0a1c00
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc] 0x78cf0a1c80
	FString DebugText;//[Offset: 0x20, Size: 0x10] 0x78cf0a1d00
	float TimeRemaining;//[Offset: 0x30, Size: 0x4] 0x78cf0a1d80
	float Duration;//[Offset: 0x34, Size: 0x4] 0x78cf0a1e00
	Color TextColor;//[Offset: 0x38, Size: 0x4] 0x78cf0a1e80
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78cf0a1f00
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78cf0a1f80
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78cf0a2000
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc] 0x78cf0a2080
	Font* Font;//[Offset: 0x50, Size: 0x8] 0x78cf0a2100
	float FontScale;//[Offset: 0x58, Size: 0x4] 0x78cf0a0080

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 0x8] 0x78ce388080
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x78ce388100
	float DefaultFOV;//[Offset: 0x238, Size: 0x4] 0x78ce388180
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 0x4] 0x78ce388200
	float DefaultAspectRatio;//[Offset: 0x248, Size: 0x4] 0x78ce388280
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 0x5f0] 0x78ce388300
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x880, Size: 0x5f0] 0x78ce388380
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 0x600] 0x78ce388400
	TViewTarget PendingViewTarget;//[Offset: 0x1470, Size: 0x600] 0x78ce386380
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1aa0, Size: 0x5f0] 0x78ce386400
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2090, Size: 0x5f0] 0x78ce386480
	CameraModifier*[] ModifierList;//[Offset: 0x2680, Size: 0x10] 0x78ce9d74a0
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2690, Size: 0x10] 0x78ce9d75e0
	float FreeCamDistance;//[Offset: 0x26a0, Size: 0x4] 0x78ce386580
	Vector FreeCamOffset;//[Offset: 0x26a4, Size: 0xc] 0x78ce386600
	Vector ViewTargetOffset;//[Offset: 0x26b0, Size: 0xc] 0x78ce386680
	delegate OnAudioFadeChangeEvent;//[Offset: 0x26c0, Size: 0x10] 0x78ce386700
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x26e0, Size: 0x10] 0x78ce9d7680
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x26f0, Size: 0x8] 0x78ce386800
	CameraAnimInst* AnimInstPool;//[Offset: 0x26f8, Size: 0x8] 0x78ce386880
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2738, Size: 0x10] 0x78ce9d7720
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2758, Size: 0x10] 0x78ce9d77c0
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2768, Size: 0x10] 0x78ce9d7860
	CameraActor* AnimCameraActor;//[Offset: 0x2778, Size: 0x8] 0x78ce386a80
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2780, Size: 0x1] 0x78ce386b00
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2780, Size: 0x1] 0x78ce386b80
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2780, Size: 0x1] 0x78ce386c00
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2780, Size: 0x1] 0x78ce386c80
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2781, Size: 0x1] 0x78ce386d00
	float ViewPitchMin;//[Offset: 0x2784, Size: 0x4] 0x78ce386d80
	float ViewPitchMax;//[Offset: 0x2788, Size: 0x4] 0x78ce386e00
	float ViewYawMin;//[Offset: 0x278c, Size: 0x4] 0x78ce386e80
	float ViewYawMax;//[Offset: 0x2790, Size: 0x4] 0x78ce386f00
	float ViewRollMin;//[Offset: 0x2794, Size: 0x4] 0x78ce386f80
	float ViewRollMax;//[Offset: 0x2798, Size: 0x4] 0x78ce387000
	float ServerUpdateCameraTimeout;//[Offset: 0x27a0, Size: 0x4] 0x78ce387080
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0xb111ba4 0x78ce349c40
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0xb112990 0x78ce349d20
	void StopCameraFade();// 0xb112340 0x78ce349e00
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0xb111c94 0x78ce349ee0
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xb112688 0x78ce349fc0
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0xb11288c 0x78ce34a0a0
	void StopAllInstancesOfCameraAnim(CameraAnim* anim, bool bImmediate);// 0xb111d98 0x78ce34a180
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xb112584 0x78ce34a260
	void StopAllCameraShakes(bool bImmediately);// 0xb1127d4 0x78ce34a340
	void StopAllCameraAnims(bool bImmediate);// 0xb111bdc 0x78ce34a420
	MatineeCameraShake* StartMatineeCameraShakeFromSource(class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xb112a94 0x78ce34a500
	MatineeCameraShake* StartMatineeCameraShake(class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xb112e4c 0x78ce34a5e0
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xb112c6c 0x78ce34a6c0
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xb112fdc 0x78ce34a7a0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0xb11235c 0x78ce34a880
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0xb1121f4 0x78ce34a960
	void SetGameCameraCutThisFrame();// 0xb111bb8 0x78ce34aa40
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0xb1133b4 0x78ce34ab20
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0xb113190 0x78ce34ac00
	CameraAnimInst* PlayCameraAnim(CameraAnim* anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xb111e9c 0x78ce34ace0
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0xb11368c 0x78ce347400
	void OnPhotographySessionStart();// 0xb113670 0x78ce3474e0
	void OnPhotographySessionEnd();// 0xb113654 0x78ce3475c0
	void OnPhotographyMultiPartCaptureStart();// 0xb113638 0x78ce3476a0
	void OnPhotographyMultiPartCaptureEnd();// 0xb11361c 0x78ce347780
	PlayerController* GetOwningPlayerController();// 0xb1135e0 0x78ce347860
	float GetFOVAngle();// 0xb113378 0x78ce347940
	Rotator GetCameraRotation();// 0xb113338 0x78ce347a20
	Vector GetCameraLocation();// 0xb1132f8 0x78ce347b00
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0xb113470 0x78ce347be0
	void ClearCameraLensEffects();// 0xb113174 0x78ce347cc0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x8a873f8 0x78ce347da0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0xb113528 0x78ce347e80
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xb113240 0x78ce347f60

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ceabb500
	float ShakeScale;//[Offset: 0x2c, Size: 0x4] 0x78ceabb580
	PlayerCameraManager* CameraManager;//[Offset: 0x30, Size: 0x8] 0x78ceab9500

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8] 0x78ce91b700
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8] 0x78ce91b780
	float PlayRate;//[Offset: 0x50, Size: 0x4] 0x78ce91b800
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8] 0x78ce91b880
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8] 0x78ce91b900
	enum PlaySpace;//[Offset: 0x78, Size: 0x1] 0x78ce8c88a0
	void Stop(bool bImmediate);// 0xaf233a0 0x78ce922000
	void SetScale(float NewDuration);// 0xaf23250 0x78ce9220e0
	void SetDuration(float NewDuration);// 0xaf232f8 0x78ce9221c0

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8] 0x78ce91bb80
	float AnimLength;//[Offset: 0x30, Size: 0x4] 0x78ce91bc00
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c] 0x78ce91bc80
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce91bd00
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78ce91bd80
	float BaseFOV;//[Offset: 0x54, Size: 0x4] 0x78ce91be00
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x550] 0x78ce91be80
	float BasePostProcessBlendWeight;//[Offset: 0x5b0, Size: 0x4] 0x78ce91bf00

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10] 0x78ce8cf2e0
	FName groupName;//[Offset: 0x40, Size: 0x8] 0x78ce9b7f80
	Color GroupColor;//[Offset: 0x48, Size: 0x4] 0x78ce9b8000
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78ce9b8080
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x78ce9b8100
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x78ce9b8180
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1] 0x78ce9b8200
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1] 0x78ce9b8280

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10] 0x78ce8cf100
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8] 0x78ce8cf1a0
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1] 0x78ce9b7780
	FString TrackTitle;//[Offset: 0x58, Size: 0x10] 0x78ce9b7800
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce9b7880
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78ce9b7900
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78ce9b7980
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78ce9b7a00
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78ce9b7a80
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78ce9b7b00
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78ce9b7b80
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x78ce9b7c00

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf09ab00
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf09ab80
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf09ac00
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf09ac80
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf09ad00
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cf09ad80
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cf09ae00
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cf09ae80
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cf09af00
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78cf09af80
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78cf09b000
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78cf09b080
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78cf09b100
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78cf09b180
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78cf09b200
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78cf09b280
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x78cf09b300
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x78cf09b380
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x78cf09b400
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x78cf09b480
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x78cf09b500
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x78cf09b580
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x78cf099500
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x78cf099580
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x78cf099600
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x78cf099680
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x78cf099700
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x78cf099780
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x78cf099800
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x78cf099880
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x78cf099900
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x78cf099980
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78cf099a00
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1] 0x78cf099a80
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1] 0x78cf099b00
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1] 0x78cf099b80
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1] 0x78cf099c00
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1] 0x78cf099c80
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1] 0x78cf099d00
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1] 0x78cf099d80
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1] 0x78cf099e00
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1] 0x78cf099e80
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1] 0x78cf099f00
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1] 0x78cf099f80
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1] 0x78cf09a000
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1] 0x78cf09a080
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1] 0x78cf09a100
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1] 0x78cf09a180
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1] 0x78cf09a200
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1] 0x78cf09a280
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1] 0x78cf09a300
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1] 0x78cf09a380
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1] 0x78cf09a400
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1] 0x78cf09a480
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1] 0x78cf09a500
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1] 0x78cf098480
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1] 0x78cf098500
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1] 0x78cf098580
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1] 0x78cf098600
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1] 0x78cf098680
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1] 0x78cf098700
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1] 0x78cf098780
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1] 0x78cf098800
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1] 0x78cf098880
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf098900
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78cf098980
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78cf098a00
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78cf098a80
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x78cf098b00
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1] 0x78cf098b80
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1] 0x78cf098c00
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1] 0x78cf098c80
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x78cf098d00
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x78cf098d80
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1] 0x78cf098e00
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1] 0x78cf098e80
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1] 0x78cf098f00
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1] 0x78cf098f80
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1] 0x78cf099000
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1] 0x78cf099080
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x78cf099100
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x78cf099180
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x78cf099200
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x78cf099280
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1] 0x78cf099300
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1] 0x78cf099380
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1] 0x78cf099400
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1] 0x78cf099480
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1] 0x78cf097400
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1] 0x78cf097480
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1] 0x78cf097500
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1] 0x78cf097580
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1] 0x78cf097600
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1] 0x78cf097680
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1] 0x78cf097700
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1] 0x78cf097780
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf097800
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78cf097880
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78cf097900
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78cf097980
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x78cf097a00
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x78cf097a80
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x78cf097b00
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x78cf097b80
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x78cf097c00
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x78cf097c80
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x78cf097d00
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x78cf097d80
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x78cf097e00
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x78cf097e80
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x78cf097f00
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x78cf097f80
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x78cf098000
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x78cf098080
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x78cf098100
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x78cf098180
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1] 0x78cf098200
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x78cf098280
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x78cf098300
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x78cf098380
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x78cf098400
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1] 0x78cf096380
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1] 0x78cf096400
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1] 0x78cf096480
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1] 0x78cf096500
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1] 0x78cf096580
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1] 0x78cf096600
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1] 0x78cf096680
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cf096700
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78cf096780
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78cf096800
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78cf096880
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78cf096900
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78cf096980
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78cf096a00
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x78cf096a80
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x78cf096b00
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x78cf096b80
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x78cf096c00
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x78cf096c80
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1] 0x78cf096d00
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1] 0x78cf096d80
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1] 0x78cf096e00
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1] 0x78cf096e80
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1] 0x78cf096f00
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1] 0x78cf096f80
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1] 0x78cf097000
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1] 0x78cf097080
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1] 0x78cf097100
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1] 0x78cf097180
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1] 0x78cf097200
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1] 0x78cf097280
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1] 0x78cf097300
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1] 0x78cf097380
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1] 0x78cf095300
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1] 0x78cf095380
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1] 0x78cf095400
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1] 0x78cf095480
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1] 0x78cf095500
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1] 0x78cf095580
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78cf095600
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x78cf095680
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x78cf095700
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x78cf095780
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x78cf095800
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1] 0x78cf095880
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1] 0x78cf095900
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1] 0x78cf095980
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x78cf095a00
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x78cf095a80
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x78cf095b00
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x78cf095b80
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x78cf095c00
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1] 0x78cf095c80
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1] 0x78cf095d00
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1] 0x78cf095d80
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x78cf095e00
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x78cf095e80
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1] 0x78cf095f00
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1] 0x78cf095f80
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1] 0x78cf096000
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1] 0x78cf096080
	byte BloomMethod;//[Offset: 0x17, Size: 0x1] 0x78cf096100
	byte AutoExposureMethod;//[Offset: 0x18, Size: 0x1] 0x78cf096180
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4] 0x78cf096200
	float WhiteTint;//[Offset: 0x20, Size: 0x4] 0x78cf096280
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10] 0x78cf096300
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10] 0x78cf094280
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10] 0x78cf094300
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10] 0x78cf094380
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10] 0x78cf094400
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10] 0x78cf094480
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10] 0x78cf094500
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10] 0x78cf094580
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10] 0x78cf094600
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10] 0x78cf094680
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10] 0x78cf094700
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10] 0x78cf094780
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10] 0x78cf094800
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10] 0x78cf094880
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10] 0x78cf094900
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10] 0x78cf094980
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10] 0x78cf094a00
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10] 0x78cf094a80
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10] 0x78cf094b00
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10] 0x78cf094b80
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4] 0x78cf094c00
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4] 0x78cf094c80
	float BlueCorrection;//[Offset: 0x178, Size: 0x4] 0x78cf094d00
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4] 0x78cf094d80
	float ToneCurveAmount;//[Offset: 0x180, Size: 0x4] 0x78cf094e00
	float FilmSlope;//[Offset: 0x184, Size: 0x4] 0x78cf094e80
	float FilmToe;//[Offset: 0x188, Size: 0x4] 0x78cf094f00
	float FilmShoulder;//[Offset: 0x18c, Size: 0x4] 0x78cf094f80
	float FilmBlackClip;//[Offset: 0x190, Size: 0x4] 0x78cf095000
	float FilmWhiteClip;//[Offset: 0x194, Size: 0x4] 0x78cf095080
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 0x10] 0x78cf095100
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 0x10] 0x78cf095180
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 0x4] 0x78cf095200
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 0x4] 0x78cf095280
	float FilmSaturation;//[Offset: 0x1c0, Size: 0x4] 0x78cf093200
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 0x10] 0x78cf093280
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 0x10] 0x78cf093300
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 0x10] 0x78cf093380
	float FilmContrast;//[Offset: 0x1f4, Size: 0x4] 0x78cf093400
	float FilmToeAmount;//[Offset: 0x1f8, Size: 0x4] 0x78cf093480
	float FilmHealAmount;//[Offset: 0x1fc, Size: 0x4] 0x78cf093500
	float FilmDynamicRange;//[Offset: 0x200, Size: 0x4] 0x78cf093580
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 0x10] 0x78cf093600
	float SceneFringeIntensity;//[Offset: 0x214, Size: 0x4] 0x78cf093680
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 0x4] 0x78cf093700
	float BloomIntensity;//[Offset: 0x21c, Size: 0x4] 0x78cf093780
	float BloomThreshold;//[Offset: 0x220, Size: 0x4] 0x78cf093800
	float BloomSizeScale;//[Offset: 0x224, Size: 0x4] 0x78cf093880
	float Bloom1Size;//[Offset: 0x228, Size: 0x4] 0x78cf093900
	float Bloom2Size;//[Offset: 0x22c, Size: 0x4] 0x78cf093980
	float Bloom3Size;//[Offset: 0x230, Size: 0x4] 0x78cf093a00
	float Bloom4Size;//[Offset: 0x234, Size: 0x4] 0x78cf093a80
	float Bloom5Size;//[Offset: 0x238, Size: 0x4] 0x78cf093b00
	float Bloom6Size;//[Offset: 0x23c, Size: 0x4] 0x78cf093b80
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 0x10] 0x78cf093c00
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 0x10] 0x78cf093c80
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 0x10] 0x78cf093d00
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 0x10] 0x78cf093d80
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 0x10] 0x78cf093e00
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 0x10] 0x78cf093e80
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4] 0x78cf093f00
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 0x8] 0x78cf093f80
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 0x8] 0x78cf094000
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4] 0x78cf094080
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4] 0x78cf094100
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4] 0x78cf094180
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4] 0x78cf094200
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x8] 0x78cf092180
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 0x4] 0x78cf092200
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 0x10] 0x78cf092280
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 0x10] 0x78cf092300
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 0x4] 0x78cf092380
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 0x8] 0x78cf092400
	float CameraShutterSpeed;//[Offset: 0x300, Size: 0x4] 0x78cf092480
	float CameraISO;//[Offset: 0x304, Size: 0x4] 0x78cf092500
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 0x4] 0x78cf092580
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 0x4] 0x78cf092600
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 0x4] 0x78cf092680
	float AutoExposureBias;//[Offset: 0x314, Size: 0x4] 0x78cf092700
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 0x4] 0x78cf092780
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1] 0x78cf092800
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 0x1] 0x78cf092880
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 0x8] 0x78cf092900
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 0x8] 0x78cf092980
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 0x4] 0x78cf092a00
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 0x4] 0x78cf092a80
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 0x4] 0x78cf092b00
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 0x4] 0x78cf092b80
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 0x4] 0x78cf092c00
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 0x4] 0x78cf092c80
	float HistogramLogMin;//[Offset: 0x348, Size: 0x4] 0x78cf092d00
	float HistogramLogMax;//[Offset: 0x34c, Size: 0x4] 0x78cf092d80
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 0x4] 0x78cf092e00
	float LensFlareIntensity;//[Offset: 0x354, Size: 0x4] 0x78cf092e80
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 0x10] 0x78cf092f00
	float LensFlareBokehSize;//[Offset: 0x368, Size: 0x4] 0x78cf092f80
	float LensFlareThreshold;//[Offset: 0x36c, Size: 0x4] 0x78cf093000
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 0x8] 0x78cf093080
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 0x10] 0x78cf093100
	float VignetteIntensity;//[Offset: 0x3f8, Size: 0x4] 0x78cf093180
	float GrainJitter;//[Offset: 0x3fc, Size: 0x4] 0x78cf091100
	float GrainIntensity;//[Offset: 0x400, Size: 0x4] 0x78cf091180
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 0x4] 0x78cf091200
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 0x4] 0x78cf091280
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 0x4] 0x78cf091300
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 0x1] 0x78cf091380
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 0x4] 0x78cf091400
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 0x4] 0x78cf091480
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 0x4] 0x78cf091500
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 0x4] 0x78cf091580
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 0x4] 0x78cf091600
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 0x4] 0x78cf091680
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 0x4] 0x78cf091700
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 0x4] 0x78cf091780
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 0x4] 0x78cf091800
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 0x4] 0x78cf091880
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 0x1] 0x78cf091900
	int RayTracingAOSamplesPerPixel;//[Offset: 0x440, Size: 0x4] 0x78cf091980
	float RayTracingAOIntensity;//[Offset: 0x444, Size: 0x4] 0x78cf091a00
	float RayTracingAORadius;//[Offset: 0x448, Size: 0x4] 0x78cf091a80
	LinearColor IndirectLightingColor;//[Offset: 0x44c, Size: 0x10] 0x78cf091b00
	float IndirectLightingIntensity;//[Offset: 0x45c, Size: 0x4] 0x78cf091b80
	enum RayTracingGIType;//[Offset: 0x460, Size: 0x1] 0x78cf083bc0
	int RayTracingGIMaxBounces;//[Offset: 0x464, Size: 0x4] 0x78cf091c80
	int RayTracingGISamplesPerPixel;//[Offset: 0x468, Size: 0x4] 0x78cf091d00
	float ColorGradingIntensity;//[Offset: 0x46c, Size: 0x4] 0x78cf091d80
	Texture* ColorGradingLUT;//[Offset: 0x470, Size: 0x8] 0x78cf091e00
	float DepthOfFieldSensorWidth;//[Offset: 0x478, Size: 0x4] 0x78cf091e80
	float DepthOfFieldFocalDistance;//[Offset: 0x47c, Size: 0x4] 0x78cf091f00
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x480, Size: 0x4] 0x78cf091f80
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x484, Size: 0x4] 0x78cf092000
	float DepthOfFieldFocalRegion;//[Offset: 0x488, Size: 0x4] 0x78cf092080
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x48c, Size: 0x4] 0x78cf092100
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x490, Size: 0x4] 0x78cf090080
	float DepthOfFieldScale;//[Offset: 0x494, Size: 0x4] 0x78cf090100
	float DepthOfFieldNearBlurSize;//[Offset: 0x498, Size: 0x4] 0x78cf090180
	float DepthOfFieldFarBlurSize;//[Offset: 0x49c, Size: 0x4] 0x78cf090200
	float DepthOfFieldOcclusion;//[Offset: 0x4a0, Size: 0x4] 0x78cf090280
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a4, Size: 0x4] 0x78cf090300
	float DepthOfFieldVignetteSize;//[Offset: 0x4a8, Size: 0x4] 0x78cf090380
	float MotionBlurAmount;//[Offset: 0x4ac, Size: 0x4] 0x78cf090400
	float MotionBlurMax;//[Offset: 0x4b0, Size: 0x4] 0x78cf090480
	int MotionBlurTargetFPS;//[Offset: 0x4b4, Size: 0x4] 0x78cf090500
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 0x4] 0x78cf090580
	float LPVIntensity;//[Offset: 0x4bc, Size: 0x4] 0x78cf090600
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 0x4] 0x78cf090680
	float LPVSize;//[Offset: 0x4c4, Size: 0x4] 0x78cf090700
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 0x4] 0x78cf090780
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 0x4] 0x78cf090800
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 0x4] 0x78cf090880
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 0x4] 0x78cf090900
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 0x4] 0x78cf090980
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 0x4] 0x78cf090a00
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 0x4] 0x78cf090a80
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 0x4] 0x78cf090b00
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4] 0x78cf090b80
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 0x4] 0x78cf090c00
	enum ReflectionsType;//[Offset: 0x4f0, Size: 0x1] 0x78cf083c60
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f4, Size: 0x4] 0x78cf090d00
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f8, Size: 0x4] 0x78cf090d80
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4fc, Size: 0x4] 0x78cf090e00
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x500, Size: 0x4] 0x78cf090e80
	int RayTracingReflectionsMaxBounces;//[Offset: 0x504, Size: 0x4] 0x78cf090f00
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x508, Size: 0x4] 0x78cf090f80
	enum RayTracingReflectionsShadows;//[Offset: 0x50c, Size: 0x1] 0x78cf083d00
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50d, Size: 0x1] 0x78cf091080
	enum TranslucencyType;//[Offset: 0x50e, Size: 0x1] 0x78cf083da0
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x510, Size: 0x4] 0x78cf07f880
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x514, Size: 0x4] 0x78cf07f900
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x518, Size: 0x4] 0x78cf07f980
	enum RayTracingTranslucencyShadows;//[Offset: 0x51c, Size: 0x1] 0x78cf081500
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1] 0x78cf07fa80
	int PathTracingMaxBounces;//[Offset: 0x520, Size: 0x4] 0x78cf07fb00
	int PathTracingSamplesPerPixel;//[Offset: 0x524, Size: 0x4] 0x78cf07fb80
	float LPVFadeRange;//[Offset: 0x528, Size: 0x4] 0x78cf07fc00
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x52c, Size: 0x4] 0x78cf07fc80
	float ScreenPercentage;//[Offset: 0x530, Size: 0x4] 0x78cf07fd00
	WeightedBlendables WeightedBlendables;//[Offset: 0x538, Size: 0x10] 0x78cf07ff00

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10] 0x78cf0815a0

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4] 0x78cf07fd80
	Object* Object;//[Offset: 0x8, Size: 0x8] 0x78cf07fe00

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8] 0x78ce9b7c80
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8] 0x78ce9b7d00
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10] 0x78ce8cf240

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18] 0x78ce9bb580
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18] 0x78ce9b9500
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10] 0x78ce9b9580
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8] 0x78ce9b9600
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4] 0x78ce9b9680
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4] 0x78ce9b9700
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78ce9b9780
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78ce9b9800
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78ce9b9880
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x78ce9b9900
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x78ce9b9980
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x78ce9b9a00
	byte RotMode;//[Offset: 0xc1, Size: 0x1] 0x78ce9b9a80

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10] 0x78ea07b460
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78ea086f00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78ea086f80

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78ea087000
	Vector OutVal;//[Offset: 0x4, Size: 0xc] 0x78ea087080
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x78ea087100
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x78ea087180
	byte InterpMode;//[Offset: 0x28, Size: 0x1] 0x78ea087200

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10] 0x78cf084200

--------------------------------
Class: InterpLookupPoint
	FName groupName;//[Offset: 0x0, Size: 0x8] 0x78cf0aec80
	float Time;//[Offset: 0x8, Size: 0x4] 0x78cf0aed00

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc] 0x78ce9ba380
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc] 0x78ce9ba400

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f1, Size: 0x1] 0x78ce8c8440
	float InnerAttenuationRadius;//[Offset: 0x1f4, Size: 0x4] 0x78ce91dd00
	float OuterAttenuationRadius;//[Offset: 0x1f8, Size: 0x4] 0x78ce91dd80
	class CameraShakeBase* CameraShake;//[Offset: 0x200, Size: 0x8] 0x78ce8c84e0
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x78ce91de00
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0xaf28148 0x78ce924ca0
	void StopAllCameraShakes(bool bImmediately);// 0xaf28098 0x78ce924d80
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0xaf28244 0x78ce924e60
	void Start();// 0xaf283cc 0x78ce924f40
	float GetAttenuationFactor(out const Vector Location);// 0xaf27fe0 0x78ce925020

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0x98, Size: 0x4] 0x78ce91e280
	float OscillationBlendInTime;//[Offset: 0x9c, Size: 0x4] 0x78ce91e300
	float OscillationBlendOutTime;//[Offset: 0xa0, Size: 0x4] 0x78ce91e380
	ROscillator RotOscillation;//[Offset: 0xa4, Size: 0x24] 0x78ce91e400
	VOscillator LocOscillation;//[Offset: 0xc8, Size: 0x24] 0x78ce91e480
	FOscillator FOVOscillation;//[Offset: 0xec, Size: 0xc] 0x78ce91e500
	float AnimPlayRate;//[Offset: 0xf8, Size: 0x4] 0x78ce91e580
	float AnimScale;//[Offset: 0xfc, Size: 0x4] 0x78ce91e600
	float AnimBlendInTime;//[Offset: 0x100, Size: 0x4] 0x78ce91e680
	float AnimBlendOutTime;//[Offset: 0x104, Size: 0x4] 0x78ce91e700
	float RandomAnimSegmentDuration;//[Offset: 0x108, Size: 0x4] 0x78ce91c680
	CameraAnim* anim;//[Offset: 0x110, Size: 0x8] 0x78ce91c700
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x78ce91c780
	float OscillatorTimeRemaining;//[Offset: 0x11c, Size: 0x4] 0x78ce91c800
	CameraAnimInst* AnimInst;//[Offset: 0x120, Size: 0x8] 0x78ce91c880
	void ReceiveStopShake(bool bImmediately);// 0x8a873f8 0x78ce925100
	void ReceivePlayShake(float Scale);// 0x8a873f8 0x78ce9251e0
	bool ReceiveIsFinished();// 0xaf266c0 0x78ce9252c0
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x8a873f8 0x78ce9253a0

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cf09c600
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x78cf09a580
	float FOV;//[Offset: 0x18, Size: 0x4] 0x78cf09a600
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4] 0x78cf09a680
	float OrthoWidth;//[Offset: 0x20, Size: 0x4] 0x78cf09a700
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4] 0x78cf09a780
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4] 0x78cf09a800
	float AspectRatio;//[Offset: 0x2c, Size: 0x4] 0x78cf09a880
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78cf09a900
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78cf09a980
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1] 0x78cf09aa00
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4] 0x78cf09aa80
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x550] 0x78cf07ff80
	Vector2D OffCenterProjectionOffset;//[Offset: 0x590, Size: 0x8] 0x78cf07e780

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc] 0x78cf07ea80
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc] 0x78cf07eb00
	FOscillator Roll;//[Offset: 0x18, Size: 0xc] 0x78cf07eb80

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x78cf07ed00
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78cf07ed80
	byte InitialOffset;//[Offset: 0x8, Size: 0x1] 0x78cf07ee00
	enum Waveform;//[Offset: 0x9, Size: 0x1] 0x78cf0816e0

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc] 0x78cf07ec00
	FOscillator Y;//[Offset: 0xc, Size: 0xc] 0x78cf07ec80
	FOscillator Z;//[Offset: 0x18, Size: 0xc] 0x78cf07ef00

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce91ce00
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78ce91ce80
	byte Priority;//[Offset: 0x29, Size: 0x1] 0x78ce91cf00
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8] 0x78ce91cf80
	float AlphaInTime;//[Offset: 0x38, Size: 0x4] 0x78ce91d000
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4] 0x78ce91d080
	float Alpha;//[Offset: 0x40, Size: 0x4] 0x78ce91d100
	bool IsDisabled();// 0xaf25094 0x78ce925480
	Actor* GetViewTarget();// 0xaf25058 0x78ce925560
	void EnableModifier();// 0xaf24f84 0x78ce925640
	void DisableModifier(bool bImmediate);// 0xaf24fa0 0x78ce921d60
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x8a873f8 0x78ce921e40
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x8a873f8 0x78ce921f20

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 0x8] 0x78ce982900
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 0x8] 0x78ce982980
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 0x8] 0x78ce982a00
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30] 0x78ce982a80
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4] 0x78ce982b00
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x78ce982b80
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1] 0x78ce982c00
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10] 0x78ce8c92a0
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4] 0x78ce982c80

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 0x8] 0x78ce982d00
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78ce982d80
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78ce982e00
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78ce982e80
	delegate OnParticleSpawn;//[Offset: 0x230, Size: 0x10] 0x78ce982f00
	delegate OnParticleBurst;//[Offset: 0x240, Size: 0x10] 0x78ce982f80
	delegate OnParticleDeath;//[Offset: 0x250, Size: 0x10] 0x78ce983000
	delegate OnParticleCollide;//[Offset: 0x260, Size: 0x10] 0x78ce983080
	void ToggleActive();// 0xaf69298 0x78ce92f4a0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xaf68fcc 0x78ce92f580
	void SetTemplate(ParticleSystem* NewTemplate);// 0xaf691b0 0x78ce92f660
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xaf68cfc 0x78ce92f740
	void SetFloatParameter(FName ParameterName, float Param);// 0xaf690bc 0x78ce92f820
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xaf68edc 0x78ce92f900
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xaf68dec 0x78ce92f9e0
	void OnRep_bCurrentlyActive();// 0xaf692d4 0x78ce92fac0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0xaf692f0 0x78ce92fba0
	bool IsActive();// 0xaf69260 0x78ce92fc80
	void Deactivate();// 0xaf692ac 0x78ce92fd60
	void Activate();// 0xaf692c0 0x78ce92fe40

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x440, Size: 0x8] 0x78ce37d680
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x448, Size: 0x10] 0x78ce9d6140
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x458, Size: 0x10] 0x78ce9d61e0
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x469, Size: 0x1] 0x78ce37b700
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x469, Size: 0x1] 0x78ce37b780
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x469, Size: 0x1] 0x78ce37b800
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x469, Size: 0x1] 0x78ce37b880
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x469, Size: 0x1] 0x78ce37b900
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46a, Size: 0x1] 0x78ce37b980
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46a, Size: 0x1] 0x78ce37ba00
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x46a, Size: 0x1] 0x78ce37ba80
	byte LODMethod;//[Offset: 0x475, Size: 0x1] 0x78ce37bb00
	enum RequiredSignificance;//[Offset: 0x476, Size: 0x1] 0x78ce9d6280
	ParticleSysParam[] InstanceParameters;//[Offset: 0x478, Size: 0x10] 0x78ce9d6320
	delegate OnParticleSpawn;//[Offset: 0x488, Size: 0x10] 0x78ce37bc80
	delegate OnParticleBurst;//[Offset: 0x498, Size: 0x10] 0x78ce37bd00
	delegate OnParticleDeath;//[Offset: 0x4a8, Size: 0x10] 0x78ce37bd80
	delegate OnParticleCollide;//[Offset: 0x4b8, Size: 0x10] 0x78ce37be00
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1] 0x78ce37be80
	Vector OldPosition;//[Offset: 0x4cc, Size: 0xc] 0x78ce37bf00
	Vector PartSysVelocity;//[Offset: 0x4d8, Size: 0xc] 0x78ce37bf80
	float WarmupTime;//[Offset: 0x4e4, Size: 0x4] 0x78ce37c000
	float WarmupTickRate;//[Offset: 0x4e8, Size: 0x4] 0x78ce37c080
	float SecondsBeforeInactive;//[Offset: 0x4f0, Size: 0x4] 0x78ce37c100
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x4f8, Size: 0x4] 0x78ce37c180
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x518, Size: 0x10] 0x78ce9d63c0
	float CustomTimeDilation;//[Offset: 0x530, Size: 0x4] 0x78ce37c280
	SceneComponent* AutoAttachParent;//[Offset: 0x588, Size: 0x8] 0x78ce37c300
	FName AutoAttachSocketName;//[Offset: 0x590, Size: 0x8] 0x78ce37c380
	enum AutoAttachLocationRule;//[Offset: 0x598, Size: 0x1] 0x78ce9d6460
	enum AutoAttachRotationRule;//[Offset: 0x599, Size: 0x1] 0x78ce9d6500
	enum AutoAttachScaleRule;//[Offset: 0x59a, Size: 0x1] 0x78ce9d65a0
	delegate OnSystemFinished;//[Offset: 0x5c8, Size: 0x10] 0x78ce37c580
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xb0f8f24 0x78ce344bc0
	void SetTemplate(ParticleSystem* NewTemplate);// 0xb0f927c 0x78ce344ca0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xb0f9324 0x78ce344d80
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int targetindex);// 0xb0f9e70 0x78ce344e60
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int targetindex);// 0xb0f9d28 0x78ce344f40
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int targetindex);// 0xb0f9fb4 0x78ce345020
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0xb0fa240 0x78ce345100
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0xb0fa0f8 0x78ce3451e0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0xb0fa384 0x78ce3452c0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0xb0fa4c8 0x78ce3453a0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0xb0fa5c0 0x78ce345480
	int GetNumActiveParticles();// 0xb0f9248 0x78ce345560
	MaterialInterface* GetNamedMaterial(FName InName);// 0xb0f8d6c 0x78ce345640
	bool GetBeamTargetTangent(int EmitterIndex, int targetindex, out Vector OutTangentPoint);// 0xb0f9570 0x78ce341d60
	bool GetBeamTargetStrength(int EmitterIndex, int targetindex, out float OutTargetStrength);// 0xb0f9414 0x78ce341e40
	bool GetBeamTargetPoint(int EmitterIndex, int targetindex, out Vector OutTargetPoint);// 0xb0f96c4 0x78ce341f20
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0xb0f9974 0x78ce342000
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0xb0f9818 0x78ce3420e0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0xb0f9ac8 0x78ce3421c0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0xb0f9c1c 0x78ce3422a0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0xb0f8b98 0x78ce342380
	void EndTrails();// 0xb0f90ac 0x78ce342460
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0xb0f8e24 0x78ce342540
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xb0f90c0 0x78ce342620

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xb0f80a0 0x78cea38200
	void SetUseAutoManageAttachment(bool bAutoManage);// 0xb0f7adc 0x78cea382e0
	void SetIntParameter(FName ParameterName, int Param);// 0xb0f8294 0x78cea383c0
	void SetFloatParameter(FName ParameterName, float Param);// 0xb0f8198 0x78cea384a0
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0xb0f7d70 0x78cea38580
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xb0f7fa8 0x78cea38660
	void SetBoolParameter(FName ParameterName, bool Param);// 0xb0f8390 0x78cea38740
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0xb0f7b94 0x78cea38820
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xb0f7eb0 0x78cea38900
	void ReleaseToPool();// 0xb0f7ac0 0x78cea389e0
	FXSystemAsset* GetFXSystemAsset();// 0xb0f7e74 0x78cea38ac0

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4] 0x78ce378800
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4] 0x78ce378880
	float WarmupTime;//[Offset: 0x38, Size: 0x4] 0x78ce378900
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4] 0x78ce378980
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10] 0x78ce9d6640
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8] 0x78ce378a80
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8] 0x78ce378b00
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4] 0x78ce378b80
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4] 0x78ce378c00
	float[] LODDistances;//[Offset: 0x68, Size: 0x10] 0x78ce9d66e0
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10] 0x78ce9d3e40
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c] 0x78ce378d80
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4] 0x78ce378e00
	float Delay;//[Offset: 0xa8, Size: 0x4] 0x78ce378e80
	float DelayLow;//[Offset: 0xac, Size: 0x4] 0x78ce378f00
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce378f80
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78ce379000
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78ce379080
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78ce379100
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x78ce379180
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x78ce379200
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x78ce379280
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x78ce379300
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x78ce379380
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x78ce379400
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1] 0x78ce379480
	byte LODMethod;//[Offset: 0xb3, Size: 0x1] 0x78ce377400
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1] 0x78ce9d3ee0
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1] 0x78ce377500
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1] 0x78ce9d3f80
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4] 0x78ce377600
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4] 0x78ce377680
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc] 0x78ce377700
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c] 0x78ce377780
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10] 0x78ce9d4020
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10] 0x78ce9d40c0
	bool ContainsEmitterType(class Object TypeData);// 0xb0f6f78 0x78ce342700

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4] 0x78cea69080
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4] 0x78cea69100

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8] 0x78ce368500
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4] 0x78ce368580
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1] 0x78ce368600
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1] 0x78ce9d4de0
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1] 0x78ce368700
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1] 0x78ce368780
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1] 0x78ce368800
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1] 0x78ce368880
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1] 0x78ce368900
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce368980
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10] 0x78ce9d4e80
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4] 0x78ce368a80
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4] 0x78ce368b00
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4] 0x78ce368b80
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4] 0x78ce368c00

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4] 0x78ce369f00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78ce369f80
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8] 0x78ce36a000
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10] 0x78ce9d4a20
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8] 0x78ce36a100
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8] 0x78ce36a180
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8] 0x78ce36a200
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10] 0x78ce9d4ac0
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10] 0x78ce9d4b60
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10] 0x78ce9d4c00
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10] 0x78ce9d4ca0
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10] 0x78ce9d4d40
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce36a500
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4] 0x78ce368480

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8] 0x78ce373f80
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4] 0x78ce374000
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4] 0x78ce374080
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc] 0x78ce374100
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc] 0x78ce374180
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1] 0x78ce374200
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78ce372180
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78ce372200
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78ce372280
	byte SortMode;//[Offset: 0x5a, Size: 0x1] 0x78ce372300
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x78ce372380
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78ce372400
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78ce372480
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4] 0x78ce372500
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30] 0x78ce372580
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10] 0x78ce9d4340
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4] 0x78ce372680
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4] 0x78ce372700
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce372780
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1] 0x78ce372800
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1] 0x78ce372880
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1] 0x78ce372900
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1] 0x78ce372980
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78ce372a00
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78ce372a80
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1] 0x78ce372b00
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1] 0x78ce372b80
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1] 0x78ce372c00
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4] 0x78ce372c80
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4] 0x78ce372d00
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4] 0x78ce372d80
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4] 0x78ce372e00
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc] 0x78ce372e80
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4] 0x78ce372f00
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1] 0x78ce9d43e0
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1] 0x78ce373000
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1] 0x78ce373080
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc] 0x78ce373100
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4] 0x78ce373180
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4] 0x78ce371100
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8] 0x78ce371180
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4] 0x78ce371200
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4] 0x78ce371280
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc] 0x78ce371300
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10] 0x78ce9d4480

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce369880
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78ce369900
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78ce369980
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78ce369a00
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x78ce369a80
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x78ce369b00
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x78ce369b80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x78ce369c00
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x78ce369c80
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x78ce369d00
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x78ce369d80
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x78ce369e00
	byte LODValidity;//[Offset: 0x2a, Size: 0x1] 0x78ce369e80

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x78cf0a1300
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x78cf0a1380
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8] 0x78cf0a1400

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x78cf504700

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x78cf504780
	float TimeBias;//[Offset: 0x4, Size: 0x4] 0x78cf504800
	float[] Values;//[Offset: 0x8, Size: 0x10] 0x78cf2cab00
	byte Op;//[Offset: 0x18, Size: 0x1] 0x78cf504900
	byte EntryCount;//[Offset: 0x19, Size: 0x1] 0x78cf504980
	byte EntryStride;//[Offset: 0x1a, Size: 0x1] 0x78cf504a00
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1] 0x78cf504a80
	byte LockFlag;//[Offset: 0x1c, Size: 0x1] 0x78cf504b00

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78ce94ef80
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78ce94f000

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4] 0x78cf0cba80
	int CountLow;//[Offset: 0x4, Size: 0x4] 0x78cf0cbb00
	float Time;//[Offset: 0x8, Size: 0x4] 0x78cf0cbb80

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30] 0x78ce375280
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30] 0x78ce373200
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1] 0x78ce373280
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10] 0x78ce9d42a0
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30] 0x78ce373380
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78ce373400

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce373480
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78ce373500

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10] 0x78ce9d48e0

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78cf0cd180
	int Frequency;//[Offset: 0x4, Size: 0x4] 0x78cf0cd200
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4] 0x78cf0cd280
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf0cd300
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78cf0cd380
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78cf0cd400
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x78cf0cd480
	FName CustomName;//[Offset: 0x10, Size: 0x8] 0x78cf0cd500
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10] 0x78cf087ae0

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1] 0x78ce371700
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48] 0x78ce371780
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4] 0x78ce371800
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48] 0x78ce371880
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4] 0x78ce371900
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48] 0x78ce371980
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4] 0x78ce371a00

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce371a80

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x78cf0a3180
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x78cf0a1100
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc] 0x78cf0a1180
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc] 0x78cf0a1200
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8] 0x78cf0a1280

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78ce94e880
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78ce94e900
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78ce94e980

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0ccf00
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0ccf80
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0cd000

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1] 0x78ce36db80
	FName EventName;//[Offset: 0x2c, Size: 0x8] 0x78ce36dc00

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10] 0x78ce8cf4c0
	int ActiveTab;//[Offset: 0x38, Size: 0x4] 0x78ce9b6780

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10] 0x78cf0adb80
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10] 0x78cf084480
	float ViewStartInput;//[Offset: 0x20, Size: 0x4] 0x78cf0ae100
	float ViewEndInput;//[Offset: 0x24, Size: 0x4] 0x78cf0ae180
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4] 0x78cf0ae200
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4] 0x78cf0ae280

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8] 0x78cf0adc00
	Color CurveColor;//[Offset: 0x8, Size: 0x4] 0x78cf0adc80
	FString CurveName;//[Offset: 0x10, Size: 0x10] 0x78cf0add00
	int bHideCurve;//[Offset: 0x20, Size: 0x4] 0x78cf0add80
	int bColorCurve;//[Offset: 0x24, Size: 0x4] 0x78cf0ade00
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4] 0x78cf0ade80
	int bClamp;//[Offset: 0x2c, Size: 0x4] 0x78cf0adf00
	float ClampLow;//[Offset: 0x30, Size: 0x4] 0x78cf0adf80
	float ClampHigh;//[Offset: 0x34, Size: 0x4] 0x78cf0ae000

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10] 0x78cf0877c0

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0cfc00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78cf0cfc80

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0d1000
	byte ParamType;//[Offset: 0x8, Size: 0x1] 0x78cf0d1080
	float Scalar;//[Offset: 0xc, Size: 0x4] 0x78cf0cf800
	float Scalar_Low;//[Offset: 0x10, Size: 0x4] 0x78cf0cf880
	Vector Vector;//[Offset: 0x14, Size: 0xc] 0x78cf0cf900
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc] 0x78cf0cf980
	Color Color;//[Offset: 0x2c, Size: 0x4] 0x78cf0cfa00
	Actor* Actor;//[Offset: 0x30, Size: 0x8] 0x78cf0cfa80
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8] 0x78cf0cfb00

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4] 0x78ce37d600

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x78cf0d2000
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5e0] 0x78cf0d2080

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x78cf0d2100
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5e0] 0x78cf0d0080
	PlayerState* PlayerState;//[Offset: 0x5f0, Size: 0x8] 0x78cf0d0100

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10] 0x78ce8c8760
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50] 0x78cee13280
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4] 0x78ce91cd80

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8] 0x78cf07f000
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8] 0x78cf07f080

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10] 0x78cf081780

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 0x1] 0x78ce895d00
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 0x8] 0x78ce895d80
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8] 0x78ce895e00
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78ce895e80
	float AspectRatio;//[Offset: 0x244, Size: 0x4] 0x78ce895f00
	float FOVAngle;//[Offset: 0x248, Size: 0x4] 0x78ce895f80
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 0x4] 0x78ce896000
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 0x550] 0x78ce896080
	int GetAutoActivatePlayerIndex();// 0xaf229cc 0x78ce885100

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f4, Size: 0x4] 0x78ce897000
	float OrthoWidth;//[Offset: 0x1f8, Size: 0x4] 0x78ce897080
	float OrthoNearClipPlane;//[Offset: 0x1fc, Size: 0x4] 0x78ce897100
	float OrthoFarClipPlane;//[Offset: 0x200, Size: 0x4] 0x78ce897180
	float AspectRatio;//[Offset: 0x204, Size: 0x4] 0x78ce897200
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78ce897280
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1] 0x78ce897300
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1] 0x78ce897380
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 0x1] 0x78ce895300
	byte ProjectionMode;//[Offset: 0x209, Size: 0x1] 0x78ce895380
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 0x4] 0x78ce895400
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 0x550] 0x78ce895480
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0xaf242f0 0x78ce8844c0
	void SetProjectionMode(byte InProjectionMode);// 0xaf2424c 0x78ce8845a0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0xaf241a8 0x78ce884680
	void SetOrthoWidth(float InOrthoWidth);// 0xaf2464c 0x78ce884760
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0xaf245a8 0x78ce884840
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0xaf24504 0x78ce884920
	void SetFieldOfView(float InFieldOfView);// 0xaf246f0 0x78ce884a00
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0xaf243a8 0x78ce884ae0
	void SetAspectRatio(float InAspectRatio);// 0xaf24460 0x78ce884bc0
	void RemoveBlendable(interface classNone InBlendableObject);// 0xaf23d8c 0x78ce884ca0
	void OnCameraMeshHiddenChanged();// 0xaf23d78 0x78ce884d80
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0xaf24038 0x78ce884e60
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xaf23ebc 0x78ce884f40

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10] 0x78ceb17d00
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10] 0x78ceb17d80
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28] 0x78ceb17e00
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10] 0x78ceb17e80
	delegate OnVisibilityChanged;//[Offset: 0x168, Size: 0x10] 0x78ceb17f00
	Margin Padding;//[Offset: 0x190, Size: 0x10] 0x78ceb17f80
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10] 0x78ceac72c0
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 0x8] 0x78ceb18080
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10] 0x78ceac7360
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10] 0x78ceac7400
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8] 0x78ceb18200
	int Priority;//[Offset: 0x1e0, Size: 0x4] 0x78ceb18280
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1] 0x78ceb18300
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1] 0x78ceb18380
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1] 0x78ceb18400
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1] 0x78ceb16380
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1] 0x78ceb16400
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1] 0x78ceac74a0
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8] 0x78ceb16500
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10] 0x78ceac7540
	void UnregisterInputComponent();// 0xa1ab424 0x78ceb243e0
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xa1acf78 0x78ceb244c0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xa1acce0 0x78ceb245a0
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0xa1aced0 0x78ceb24680
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0xa1acc38 0x78ceb24760
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78ceb24840
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0xa1ab460 0x78ceb24920
	void StopListeningForAllInputActions();// 0xa1ab44c 0x78ceb24a00
	void StopAnimationsAndLatentActions();// 0xa1ad168 0x78ceb24ae0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0xa1abe64 0x78ceb24bc0
	void StopAllAnimations();// 0xa1abe50 0x78ceb24ca0
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0xa1ad570 0x78ceb24d80
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xa1ab928 0x78ceb24e60
	void SetPadding(Margin InPadding);// 0xa1ac65c 0x78ceb24f40
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0xa1ad1f8 0x78ceb25020
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0xa1aba1c 0x78ceb25100
	void SetInputActionPriority(int NewPriority);// 0xa1ab2c8 0x78ceb251e0
	void SetInputActionBlocking(bool bShouldBlock);// 0xa1ab218 0x78ceb252c0
	void SetForegroundColor(SlateColor InForegroundColor);// 0xa1ac708 0x78ceb253a0
	void SetDesiredSizeInViewport(Vector2D Size);// 0xa1ad4cc 0x78ceb25480
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xa1ac8a0 0x78ceb25560
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0xa1abbfc 0x78ceb25640
	void SetAnchorsInViewport(Anchors Anchors);// 0xa1ad420 0x78ceb21d60
	void SetAlignmentInViewport(Vector2D Alignment);// 0xa1ad37c 0x78ceb21e40
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0xa1ab880 0x78ceb21f20
	void RemoveFromViewport();// 0xa1ad668 0x78ceb22000
	void RegisterInputComponent();// 0xa1ab438 0x78ceb220e0
	void PreConstruct(bool IsDesignTime);// 0x8a873f8 0x78ceb221c0
	void PlaySound(SoundBase* SoundToPlay);// 0xa1ab710 0x78ceb222a0
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xa1ac1ac 0x78ceb22380
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xa1abf0c 0x78ceb22460
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xa1ac05c 0x78ceb22540
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xa1ac428 0x78ceb22620
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0xa1abda0 0x78ceb22700
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78ceb227e0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78ceb228c0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x8a873f8 0x78ceb229a0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78ceb22a80
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78ceb22b60
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x8a873f8 0x78ceb22c40
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78ceb22d20
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x8a873f8 0x78ceb22e00
	void OnPaint(out PaintContext Context);// 0x8a873f8 0x78ceb22ee0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78ceb22fc0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78ceb230a0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78ceb23180
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78ceb23260
	void OnMouseCaptureLost();// 0x8a873f8 0x78ceb23340
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78ceb23420
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78ceb23500
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x8a873f8 0x78ceb235e0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x8a873f8 0x78ceb236c0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x8a873f8 0x78ceb237a0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x8a873f8 0x78ceb23880
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x8a873f8 0x78ceb23960
	void OnInitialized();// 0x8a873f8 0x78ceb20080
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x8a873f8 0x78ceb20160
	void OnFocusLost(FocusEvent InFocusEvent);// 0x8a873f8 0x78ceb20240
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78ceb20320
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78ceb20400
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78ceb204e0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78ceb205c0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x8a873f8 0x78ceb206a0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78ceb20780
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xa1ac9f8 0x78ceb20860
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xa1ac948 0x78ceb20940
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x8a873f8 0x78ceb20a20
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x8a873f8 0x78ceb20b00
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate callback);// 0xa1ab554 0x78ceb20be0
	bool IsPlayingAnimation();// 0xa1ab6ec 0x78ceb20cc0
	bool IsListeningForInputAction(FName ActionName);// 0xa1ab370 0x78ceb20da0
	bool IsInViewport();// 0xa1ad2a0 0x78ceb20e80
	bool IsInteractable();// 0x8a873f8 0x78ceb20f60
	bool IsAnyAnimationPlaying();// 0xa1abb10 0x78ceb21040
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0xa1ab7cc 0x78ceb21120
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0xa1abb48 0x78ceb21200
	Pawn* GetOwningPlayerPawn();// 0xa1ad1c4 0x78ceb212e0
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0xa1ad190 0x78ceb213c0
	bool GetIsVisible();// 0xa1ad2d8 0x78ceb214a0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0xa1abcf0 0x78ceb21580
	Anchors GetAnchorsInViewport();// 0xa1ad344 0x78ceb21660
	Vector2D GetAlignmentInViewport();// 0xa1ad310 0x78ceb21740
	void FlushAnimations();// 0xa1ab7b8 0x78ceb21820
	void Destruct();// 0x8a873f8 0x78ceb21900
	void Construct();// 0x8a873f8 0x78ceb219e0
	void CancelLatentActions();// 0xa1ad17c 0x78ceb21ac0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xa1ad070 0x78ceb21ba0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xa1acdd8 0x78ceb21c80
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0xa1acaa8 0x78ceaee780
	void AddToViewport(int ZOrder);// 0xa1ad730 0x78ceaee860
	bool AddToPlayerScreen(int ZOrder);// 0xa1ad67c 0x78ceaee940

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8] 0x78cee6c380
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10] 0x78cee6c400
	FText ToolTipText;//[Offset: 0x40, Size: 0x18] 0x78cee6c480
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10] 0x78cee6c500
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8] 0x78cee6c580
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10] 0x78cee6c600
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10] 0x78cee6a580
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c] 0x78cee6a600
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8] 0x78cee6a680
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x78cee6a700
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x78cee6a780
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x78cee6a800
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x78cee6a880
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8] 0x78cee6a900
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78cee6a980
	byte Cursor;//[Offset: 0xc1, Size: 0x1] 0x78cee6aa00
	enum Clipping;//[Offset: 0xc2, Size: 0x1] 0x78cee520e0
	enum Visibility;//[Offset: 0xc3, Size: 0x1] 0x78cee52180
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4] 0x78cee6ab80
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8] 0x78cee6ac00
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1] 0x78cee52220
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10] 0x78cee522c0
	void SetVisibility(enum InVisibility);// 0xa1b8a9c 0x78cee2da60
	void SetUserFocus(PlayerController* PlayerController);// 0xa1b83e0 0x78cee2db40
	void SetToolTipText(out const FText InToolTipText);// 0xa1b8d1c 0x78cee2dc20
	void SetToolTip(Widget* Widget);// 0xa1b8c74 0x78cee2dd00
	void SetRenderTranslation(Vector2D Translation);// 0xa1b8fc0 0x78cee2dde0
	void SetRenderTransformPivot(Vector2D Pivot);// 0xa1b8f1c 0x78cee2dec0
	void SetRenderTransformAngle(float Angle);// 0xa1b9098 0x78cee2dfa0
	void SetRenderTransform(WidgetTransform InTransform);// 0xa1b9288 0x78cee2e080
	void SetRenderShear(Vector2D Shear);// 0xa1b9140 0x78cee2e160
	void SetRenderScale(Vector2D Scale);// 0xa1b91e4 0x78cee2e240
	void SetRenderOpacity(float InOpacity);// 0xa1b89c0 0x78cee2e320
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0xa1b7f68 0x78cee2e400
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0xa1b7d78 0x78cee2e4e0
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0xa1b7e70 0x78cee2e5c0
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0xa1b805c 0x78cee2e6a0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0xa1b8150 0x78cee2adc0
	void SetKeyboardFocus();// 0xa1b8674 0x78cee2aea0
	void SetIsEnabled(bool bInIsEnabled);// 0xa1b8e2c 0x78cee2af80
	void SetFocus();// 0xa1b8488 0x78cee2b060
	void SetCursor(byte InCursor);// 0xa1b8bcc 0x78cee2b140
	void SetClipping(enum InClipping);// 0xa1b88e4 0x78cee2b220
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0xa1b8290 0x78cee2b300
	void ResetCursor();// 0xa1b8bb8 0x78cee2b3e0
	void RemoveFromParent();// 0xa1b7d28 0x78cee2b4c0
	EventReply OnReply__DelegateSignature();// 0x8a873f8 0x78cee2b5a0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78cee2b680
	bool IsVisible();// 0xa1b8b80 0x78cee2b760
	bool IsHovered();// 0xa1b87f4 0x78cee2b840
	void InvalidateLayoutAndVolatility();// 0xa1b83b8 0x78cee2b920
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0xa1b849c 0x78cee2ba00
	bool HasUserFocus(PlayerController* PlayerController);// 0xa1b85c0 0x78cee2bae0
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0xa1b8688 0x78cee2bbc0
	bool HasMouseCapture();// 0xa1b8784 0x78cee2bca0
	bool HasKeyboardFocus();// 0xa1b87bc 0x78cee2bd80
	bool HasFocusedDescendants();// 0xa1b8550 0x78cee2be60
	bool HasAnyUserFocus();// 0xa1b8588 0x78cee2bf40
	Widget* GetWidget__DelegateSignature();// 0x8a873f8 0x78cee2c020
	enum GetVisibility();// 0xa1b8b4c 0x78cee2c100
	Geometry GetTickSpaceGeometry();// 0xa1b7cb8 0x78cee2c1e0
	FText GetText__DelegateSignature();// 0x8a873f8 0x78cee2c2c0
	enum GetSlateVisibility__DelegateSignature();// 0x8a873f8 0x78cee2c3a0
	SlateColor GetSlateColor__DelegateSignature();// 0x8a873f8 0x78cee2c480
	SlateBrush GetSlateBrush__DelegateSignature();// 0x8a873f8 0x78cee2c560
	float GetRenderTransformAngle();// 0xa1b9064 0x78cee2c640
	float GetRenderOpacity();// 0xa1b8a68 0x78cee2c720
	PanelWidget* GetParent();// 0xa1b7d44 0x78cee2c800
	Geometry GetPaintSpaceGeometry();// 0xa1b7c80 0x78cee2c8e0
	PlayerController* GetOwningPlayer();// 0xa1b7c10 0x78cee2c9c0
	LocalPlayer* GetOwningLocalPlayer();// 0xa1b7bd4 0x78cee290e0
	byte GetMouseCursor__DelegateSignature();// 0x8a873f8 0x78cee291c0
	LinearColor GetLinearColor__DelegateSignature();// 0x8a873f8 0x78cee292a0
	bool GetIsEnabled();// 0xa1b8ee4 0x78cee29380
	int GetInt32__DelegateSignature();// 0x8a873f8 0x78cee29460
	GameInstance* GetGameInstance();// 0xa1b7c4c 0x78cee29540
	float GetFloat__DelegateSignature();// 0x8a873f8 0x78cee29620
	Vector2D GetDesiredSize();// 0xa1b8384 0x78cee29700
	enum GetClipping();// 0xa1b898c 0x78cee297e0
	enum GetCheckBoxState__DelegateSignature();// 0x8a873f8 0x78cee298c0
	Geometry GetCachedGeometry();// 0xa1b7cf0 0x78cee299a0
	bool GetBool__DelegateSignature();// 0x8a873f8 0x78cee29a80
	FText GetAccessibleText();// 0xa1b7b04 0x78cee29b60
	FText GetAccessibleSummaryText();// 0xa1b7a34 0x78cee29c40
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x8a873f8 0x78cee29d20
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x8a873f8 0x78cee29e00
	void ForceVolatile(bool bForce);// 0xa1b8834 0x78cee29ee0
	void ForceLayoutPrepass();// 0xa1b83cc 0x78cee29fc0

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10] 0x78cee68880
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1] 0x78cee68900

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4] 0x78cee68600
	float Top;//[Offset: 0x4, Size: 0x4] 0x78cee68680
	float Right;//[Offset: 0x8, Size: 0x4] 0x78cee68700
	float Bottom;//[Offset: 0xc, Size: 0x4] 0x78cee68780

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8] 0x78cee6b100
	Vector2D Scale;//[Offset: 0x8, Size: 0x8] 0x78cee6b180
	Vector2D Shear;//[Offset: 0x10, Size: 0x8] 0x78cee6b200
	float Angle;//[Offset: 0x18, Size: 0x4] 0x78cee6b280

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8] 0x78cee68580
	Margin Margin;//[Offset: 0x10, Size: 0x10] 0x78cee68800
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28] 0x78cee68980
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8] 0x78cee68a00
	FName ResourceName;//[Offset: 0x50, Size: 0x8] 0x78cee68a80
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14] 0x78cee68b00
	byte DrawAs;//[Offset: 0x6c, Size: 0x1] 0x78cee68b80
	byte Tiling;//[Offset: 0x6d, Size: 0x1] 0x78cee68c00
	byte Mirroring;//[Offset: 0x6e, Size: 0x1] 0x78cee68c80
	byte ImageType;//[Offset: 0x6f, Size: 0x1] 0x78cee68d00
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78cee68d80
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78cee68e00

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8] 0x78ea086080
	Vector2D Max;//[Offset: 0x8, Size: 0x8] 0x78ea086100
	byte bIsValid;//[Offset: 0x10, Size: 0x1] 0x78ea086180

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10] 0x78cee53b20
	bool RemoveChildAt(int index);// 0xa191540 0x78cee844c0
	bool RemoveChild(Widget* Content);// 0xa1913dc 0x78cee845a0
	bool HasChild(Widget* Content);// 0xa1915f4 0x78cee84680
	bool HasAnyChildren();// 0xa1913a4 0x78cee84760
	int GetChildrenCount();// 0xa1918b8 0x78cee84840
	int GetChildIndex(const Widget* Content);// 0xa1916a8 0x78cee84920
	Widget* GetChildAt(int index);// 0xa191808 0x78cee84a00
	Widget*[] GetAllChildren();// 0xa191758 0x78cee84ae0
	void ClearChildren();// 0xa191388 0x78cee84bc0
	PanelSlot* AddChild(Widget* Content);// 0xa191490 0x78cee84ca0

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8] 0x78ce797700
	Widget* Content;//[Offset: 0x30, Size: 0x8] 0x78ce797780

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cee67c00
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1] 0x78cee50380
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1] 0x78cee504c0
	FText AccessibleText;//[Offset: 0x30, Size: 0x18] 0x78cee67d80
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10] 0x78cee67e00
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18] 0x78cee67f00
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10] 0x78cee67f80

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24] 0x78ce893d80
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24] 0x78ce893e00
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24] 0x78ce893e80
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24] 0x78ce893f00
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24] 0x78ce893f80
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24] 0x78ce894000

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1] 0x78cefddd00
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8] 0x78cf055c80
	Widget* Widget;//[Offset: 0xc, Size: 0x8] 0x78cf055d00
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10] 0x78cf055d80

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8] 0x78ce799380
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28] 0x78ce799400
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8] 0x78ce799480

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x78cefdbbe0
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8] 0x78cf053a00

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf053800
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x78cf053880
	Struct* Struct;//[Offset: 0x10, Size: 0x8] 0x78cf053900

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78ce85cf00
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10] 0x78ce72c0e0
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78ce85d000
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10] 0x78ce85d080
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xa1baa94 0x78ce7ccaa0
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xa1ba7fc 0x78ce7ccb80
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0xa1ba9ec 0x78ce7ccc60
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0xa1ba754 0x78ce7ccd40
	float GetStartTime();// 0xa1bacb8 0x78ce7cce20
	float GetEndTime();// 0xa1bac84 0x78ce7ccf00
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xa1bab8c 0x78ce7ccfe0
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xa1ba8f4 0x78ce7cd0c0

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8] 0x78ceab7680
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1] 0x78ceac36c0
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78ceab7780
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x78ceab7800
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1] 0x78ceac3760
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x9e9bc18 0x78ceaa5d40
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x9e9bd18 0x78ceaa5e20

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10] 0x78cea52380

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4] 0x78cf036380
	enum Space;//[Offset: 0x4, Size: 0x1] 0x78cefd72c0
	Guid Guid;//[Offset: 0x8, Size: 0x10] 0x78cf036480

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10] 0x78ce728120
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10] 0x78ce7281c0
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10] 0x78ce728260
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50] 0x78cee14480
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10] 0x78ce728300
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8] 0x78ce78c980
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10] 0x78ce78ca00
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10] 0x78ce78ca80
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8] 0x78ce78cb00
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8] 0x78ce78cb80
	enum EvaluationType;//[Offset: 0x118, Size: 0x1] 0x78ce7283a0
	enum ClockSource;//[Offset: 0x119, Size: 0x1] 0x78ce728440
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18] 0x78ce78cd00
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10] 0x78ce7284e0

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30] 0x78cf03e600
	FName[] Tags;//[Offset: 0x30, Size: 0x10] 0x78cefd8440
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cf03e700
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78cf03c680
	Guid Guid;//[Offset: 0x44, Size: 0x10] 0x78cf03c700
	FString Name;//[Offset: 0x58, Size: 0x10] 0x78cf03c780
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8] 0x78cf03c800
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10] 0x78cefd84e0
	enum Ownership;//[Offset: 0x80, Size: 0x1] 0x78cefd8580
	FName LevelName;//[Offset: 0x84, Size: 0x8] 0x78cf03c980

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10] 0x78cefd8a80
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x78cf03ad80
	FString Name;//[Offset: 0x20, Size: 0x10] 0x78cf03ae00
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8] 0x78cefd8b20
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10] 0x78cf03ae80

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10] 0x78cf037b00
	FString BindingName;//[Offset: 0x10, Size: 0x10] 0x78cf037b80
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10] 0x78cefd7040

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4] 0x78cea52180
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78cea52200
	Guid EvaluationFieldGuid;//[Offset: 0x58, Size: 0x10] 0x78cea52280
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x68, Size: 0x10] 0x78cea52300

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf03e300
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf03e380
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf03e400
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf03e480
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf03e500

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10] 0x78cefd83a0

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x78cf03e000
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10] 0x78cf03e080
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4] 0x78cf03e100
	enum Flags;//[Offset: 0x1c, Size: 0x1] 0x78cefd8300
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2] 0x78cf03e200

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2] 0x78cea55280
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38] 0x78cea53200
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10] 0x78cea53280
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4] 0x78cea53300
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4] 0x78cea53380
	int RowIndex;//[Offset: 0xa8, Size: 0x4] 0x78cea53400
	int OverlapPriority;//[Offset: 0xac, Size: 0x4] 0x78cea53480
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78cea53500
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78cea53580
	float StartTime;//[Offset: 0xb4, Size: 0x4] 0x78cea53600
	float EndTime;//[Offset: 0xb8, Size: 0x4] 0x78cea53680
	float PrerollTime;//[Offset: 0xbc, Size: 0x4] 0x78cea53700
	float PostrollTime;//[Offset: 0xc0, Size: 0x4] 0x78cea53780
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x78cea53800
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x78cea53880
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2] 0x78cea53900
	void SetRowIndex(int NewRowIndex);// 0x9e9aac8 0x78cea38d60
	void SetPreRollFrames(int InPreRollFrames);// 0x9e9a788 0x78cea38e40
	void SetPostRollFrames(int InPostRollFrames);// 0x9e9a6b8 0x78cea38f20
	void SetOverlapPriority(int NewPriority);// 0x9e9aa08 0x78cea39000
	void SetIsLocked(bool bInIsLocked);// 0x9e9a85c 0x78cea35720
	void SetIsActive(bool bInIsActive);// 0x9e9a934 0x78cea35800
	void SetCompletionMode(enum InCompletionMode);// 0x9e9ac38 0x78cea358e0
	void SetBlendType(enum InBlendType);// 0x9e9ab6c 0x78cea359c0
	bool IsLocked();// 0x9e9a83c 0x78cea35aa0
	bool IsActive();// 0x9e9a914 0x78cea35b80
	int GetRowIndex();// 0x9e9aaac 0x78cea35c60
	int GetPreRollFrames();// 0x9e9a76c 0x78cea35d40
	int GetPostRollFrames();// 0x9e9a69c 0x78cea35e20
	int GetOverlapPriority();// 0x9e9a9ec 0x78cea35f00
	enum GetCompletionMode();// 0x9e9acdc 0x78cea35fe0
	OptionalMovieSceneBlendType GetBlendType();// 0x9e9ac1c 0x78cea360c0

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1] 0x78cefd6fa0
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cf037900

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf03a800
	enum CompletionMode;//[Offset: 0x1, Size: 0x1] 0x78cefd89e0

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4] 0x78cf03a900
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4] 0x78cf03a980
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10] 0x78cf03aa00
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cf03aa80
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4] 0x78cf03ab00
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10] 0x78cf03ab80
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cf03ac00
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4] 0x78cf03ac80

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4] 0x78ea088080

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78ea089400
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78ea089480

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78ea089500
	FrameNumber Value;//[Offset: 0x4, Size: 0x4] 0x78ea087480

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10] 0x78cefd7360

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4] 0x78ea087f80
	int Denominator;//[Offset: 0x4, Size: 0x4] 0x78ea088000

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x78cf037d80
	FString label;//[Offset: 0x8, Size: 0x10] 0x78cf037e00

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8] 0x78cf054680
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8] 0x78cf054700
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10] 0x78cf054780
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cf054800

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160] 0x78ce78e100
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118] 0x78ce78e180
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0] 0x78ce78e200
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30] 0x78ce78e280
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10] 0x78ce727f40
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10] 0x78ce78e380
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10] 0x78ce78e400
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1] 0x78ce78e480
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1] 0x78ce78e500
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1] 0x78ce727fe0

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50] 0x78cf017300
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10] 0x78cf039b00
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4] 0x78cf039c00
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8] 0x78cf039f00

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78cf039000

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10] 0x78cf039500
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2] 0x78cf039580
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1] 0x78cefd8e40
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8] 0x78cf039680
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10] 0x78cefd8ee0
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38] 0x78cf039780
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8] 0x78cf039800
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78cf039880
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78cf039900
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x78cf039980

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78cf039b80

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4] 0x78cf039c80
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50] 0x78cf017480
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50] 0x78cf017540

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18] 0x78cf03d500
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60] 0x78cf03d580
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50] 0x78cf016400
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50] 0x78cf016580

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4] 0x78cf03c100
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10] 0x78cefd88a0

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78cf038f00

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18] 0x78cf03d600
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20] 0x78cf03d680
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8] 0x78cf03b600
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4] 0x78cf03b680
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10] 0x78cf03b700
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10] 0x78cf03b780
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10] 0x78cf03b800
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10] 0x78cf03b880
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10] 0x78cf03b900
	int16 HierarchicalBias;//[Offset: 0x94, Size: 0x2] 0x78cf03b980
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1] 0x78cf03ba00
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18] 0x78cf03ba80
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10] 0x78cf03bb00
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20] 0x78cf03bf80

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x78cf03bb80
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10] 0x78cefd8800

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x78cf03bc00
	FrameTime Offset;//[Offset: 0x4, Size: 0x8] 0x78cf03bc80

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x78ea087e80
	float SubFrame;//[Offset: 0x4, Size: 0x4] 0x78ea087f00

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x78cf03bd00
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8] 0x78cf03be80

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4] 0x78cf03bd80
	FrameNumber End;//[Offset: 0x4, Size: 0x4] 0x78cf03be00

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60] 0x78cf03a080
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60] 0x78cf03a100
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10] 0x78cefd8f80
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10] 0x78cefd6780
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10] 0x78cefd6820

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc] 0x78cf03a280
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4] 0x78cf03a300

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8] 0x78cf03a180
	uint32 EntityID;//[Offset: 0x8, Size: 0x4] 0x78cf03a200

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FrameNumber ForcedTime;//[Offset: 0x0, Size: 0x4] 0x78cf03a400
	enum Flags;//[Offset: 0x8, Size: 0x1] 0x78cefd9020
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x78cf03a500
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x78cf038480

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10] 0x78cf038580

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10] 0x78cefd68c0
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10] 0x78cefd6be0
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10] 0x78cefd6dc0

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10] 0x78cefd6960
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10] 0x78cefd6a00
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10] 0x78cefd6b40

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4] 0x78cf038800
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4] 0x78cf038880

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8] 0x78cf038a80
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2] 0x78cf038b00

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x78cf038980
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x78cf038a00

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2] 0x78cf038c00
	enum Flags;//[Offset: 0x2, Size: 0x1] 0x78cefd6aa0
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4] 0x78cf038d00

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10] 0x78cefd6c80
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10] 0x78cefd6d20

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc] 0x78cf039180
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2] 0x78cf039200
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2] 0x78cf039280

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x78cf038f80
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x78cf039080
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4] 0x78cf039100

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf037400
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf037480
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf037500
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf037580

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8] 0x78cefece00
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8] 0x78cefece80

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x410, Size: 0x8] 0x78ce85a800
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x420, Size: 0xe8] 0x78ce85a880
	void SetUserTag(FName InUserTag);// 0xa1a8ed8 0x78ce7ce320
	FName GetUserTag();// 0xa1a8f80 0x78ce7ce400

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8] 0x78cf03b200
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8] 0x78cf03b280
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8] 0x78cf03b300
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 0x50] 0x78cf016f40

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50] 0x78cee14180
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50] 0x78cee14240
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50] 0x78cee14300
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50] 0x78cee143c0

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x238, Size: 0x138] 0x78ce78da80

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38] 0x78cf039480

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 0x50] 0x78ce72c2c0
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8] 0x78ce85a780

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf054b80
	Widget* Content;//[Offset: 0x8, Size: 0x8] 0x78cf054c00

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8] 0x78ce893600

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8] 0x78ce89e500
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce89e580
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78ce89e600
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78ce89e680
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x78ce89e700
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x78ce89c680
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x78ce89c700
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1] 0x78ce72f420
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50] 0x78ce72f4c0
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24] 0x78ce89c880
	float Duration;//[Offset: 0x104, Size: 0x4] 0x78ce89c900
	float MaxDistance;//[Offset: 0x108, Size: 0x4] 0x78ce89c980
	float TotalSamples;//[Offset: 0x10c, Size: 0x4] 0x78ce89ca00
	float Priority;//[Offset: 0x110, Size: 0x4] 0x78ce89ca80
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8] 0x78ce89cb00
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x120, Size: 0x48] 0x78ce89cb80
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x168, Size: 0x8] 0x78ce89cc00
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x170, Size: 0x10] 0x78ce72f560
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x180, Size: 0x8] 0x78ce89cd00
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x188, Size: 0x10] 0x78ce72f600
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x198, Size: 0x10] 0x78ce72f6a0
	AssetUserData*[] AssetUserData;//[Offset: 0x1a8, Size: 0x10] 0x78ce72f740

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x80] 0x78ce397000
	SoundClass*[] ChildClasses;//[Offset: 0xa8, Size: 0x10] 0x78ce9d8a80
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb8, Size: 0x10] 0x78ce9d8b20
	SoundClass* ParentClass;//[Offset: 0xc8, Size: 0x8] 0x78ce397180

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4] 0x78cf0dda00
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x78cf0dda80
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x78cf0ddb00
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4] 0x78cf0ddb80
	float StereoBleed;//[Offset: 0x10, Size: 0x4] 0x78cf0ddc00
	float LFEBleed;//[Offset: 0x14, Size: 0x4] 0x78cf0ddc80
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4] 0x78cf0ddd00
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4] 0x78cf0ddd80
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4] 0x78cf0dde00
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x78cf0dde80
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x78cf0ddf00
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x78cf0ddf80
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1] 0x78cf0de000
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1] 0x78cf0de080
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1] 0x78cf0de100
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1] 0x78cf0de180
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4] 0x78cf0de200
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x30, Size: 0x40] 0x78cf0de480
	byte OutputTarget;//[Offset: 0x70, Size: 0x1] 0x78cf0de500
	enum LoadingBehavior;//[Offset: 0x71, Size: 0x1] 0x78cf0883a0
	SoundSubmix* DefaultSubmix;//[Offset: 0x78, Size: 0x8] 0x78cf0de600

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10] 0x78cf0de280
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10] 0x78cf0de300
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10] 0x78cf0de380
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10] 0x78cf0de400

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4] 0x78cefb6780
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8] 0x78cefb6800

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78ce39b200
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10] 0x78ce9d7e00
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8] 0x78ce39b300
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4] 0x78ce39b380
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4] 0x78ce39b400
	enum GainMode;//[Offset: 0x68, Size: 0x1] 0x78ce9d7ea0
	float OutputVolume;//[Offset: 0x6c, Size: 0x4] 0x78ce39b500
	float WetLevel;//[Offset: 0x70, Size: 0x4] 0x78ce39b580
	float DryLevel;//[Offset: 0x74, Size: 0x4] 0x78ce399500
	delegate OnSubmixRecordedFileDone;//[Offset: 0x78, Size: 0x10] 0x78ce399580
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0xb1903c8 0x78ce34f740
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0xb190d38 0x78ce34f820
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0xb190be8 0x78ce34f900
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0xb190470 0x78ce34f9e0
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0xb190f80 0x78ce34fac0
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0xb190c90 0x78ce34fba0
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0xb1902d4 0x78ce34fc80
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0xb190694 0x78ce34fd60
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0xb1907a4 0x78ce34fe40
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0xb190ad8 0x78ce34ff20

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8] 0x78ce398480

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10] 0x78ce9d8300

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x1b8, Size: 0x4] 0x78ce89d880
	int StreamingPriority;//[Offset: 0x1bc, Size: 0x4] 0x78ce89d900
	enum SampleRateQuality;//[Offset: 0x1c0, Size: 0x1] 0x78ce72f060
	byte SoundGroup;//[Offset: 0x1c2, Size: 0x1] 0x78ce89da00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c3, Size: 0x1] 0x78ce89da80
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c3, Size: 0x1] 0x78ce89db00
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c3, Size: 0x1] 0x78ce89db80
	enum LoadingBehavior;//[Offset: 0x1c4, Size: 0x1] 0x78ce72f100
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c5, Size: 0x1] 0x78ce89dc80
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c5, Size: 0x1] 0x78ce89dd00
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1] 0x78ce89dd80
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c6, Size: 0x1] 0x78ce89de00
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 0x10] 0x78ce72f1a0
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 0x10] 0x78ce72f240
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 0x10] 0x78ce72f2e0
	int InitialChunkSize;//[Offset: 0x1f8, Size: 0x4] 0x78ce89e000
	FString SpokenText;//[Offset: 0x240, Size: 0x10] 0x78ce89e080
	float SubtitlePriority;//[Offset: 0x250, Size: 0x4] 0x78ce89e100
	float Volume;//[Offset: 0x254, Size: 0x4] 0x78ce89e180
	float Pitch;//[Offset: 0x258, Size: 0x4] 0x78ce89e200
	int NumChannels;//[Offset: 0x25c, Size: 0x4] 0x78ce89e280
	int SampleRate;//[Offset: 0x260, Size: 0x4] 0x78ce89e300
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 0x10] 0x78ce72f380
	CurveTable* Curves;//[Offset: 0x280, Size: 0x8] 0x78ce89e400
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 0x8] 0x78ce89e480

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10] 0x78cf087f40
	float TimeSec;//[Offset: 0x10, Size: 0x4] 0x78cf0f0b80

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4] 0x78cf0f0a00
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4] 0x78cf0f0a80

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x78cf0f0c00
	float TimeSec;//[Offset: 0x4, Size: 0x4] 0x78cf0f0c80

--------------------------------
Class: SubtitleCue
	FText text;//[Offset: 0x0, Size: 0x18] 0x78cf50bf00
	float Time;//[Offset: 0x18, Size: 0x4] 0x78cf50bf80

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4] 0x78cf0f0d00
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78cf0f0d80
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78cf0f0e00
	float QFactor;//[Offset: 0xc, Size: 0x4] 0x78cf0f0e80

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8] 0x78cf0de680
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4] 0x78cf0de700
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4] 0x78cf0dc680

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce396500
	float EQPriority;//[Offset: 0x2c, Size: 0x4] 0x78ce396580
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40] 0x78ce396600
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10] 0x78ce9d88a0
	float InitialDelay;//[Offset: 0x80, Size: 0x4] 0x78ce396700
	float FadeInTime;//[Offset: 0x84, Size: 0x4] 0x78ce396780
	float Duration;//[Offset: 0x88, Size: 0x4] 0x78ce396800
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4] 0x78ce396880

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4] 0x78cf0dea00
	float Gain0;//[Offset: 0x14, Size: 0x4] 0x78cf0dea80
	float Bandwidth0;//[Offset: 0x18, Size: 0x4] 0x78cf0deb00
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4] 0x78cf0deb80
	float Gain1;//[Offset: 0x20, Size: 0x4] 0x78cf0dec00
	float Bandwidth1;//[Offset: 0x24, Size: 0x4] 0x78cf0dec80
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4] 0x78cf0ded00
	float Gain2;//[Offset: 0x2c, Size: 0x4] 0x78cf0ded80
	float Bandwidth2;//[Offset: 0x30, Size: 0x4] 0x78cf0dee00
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4] 0x78cf0dee80
	float Gain3;//[Offset: 0x38, Size: 0x4] 0x78cf0def00
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4] 0x78cf0def80

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8] 0x78cf0df000
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4] 0x78cf0df080
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4] 0x78cf0df100
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4] 0x78cf0df180
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78cf0df200
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4] 0x78cf0df280

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24] 0x78ce396f80

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4] 0x78cf0df600
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78cf0df680
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1] 0x78cf0df700
	float RetriggerTime;//[Offset: 0x8, Size: 0x4] 0x78cf0df780
	float VolumeScale;//[Offset: 0xc, Size: 0x4] 0x78cf0dd700
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4] 0x78cf088300
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4] 0x78cf0dd800
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cf0dd880
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4] 0x78cf0dd900
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4] 0x78cf0dd980

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0] 0x78ce397200

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78cf0dc700
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78cf0dc780
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78cf0dc800
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78cf0dc880
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x78cf0dc900
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x78cf0dc980
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1] 0x78cf0dca00
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1] 0x78cf0dca80
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x78cf0dcb00
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x78cf0dcb80
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x78cf0dcc00
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x78cf0dcc80
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1] 0x78cf0dcd00
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4] 0x78cf0dcd80
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1] 0x78cf088440
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1] 0x78cf0dce80
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1] 0x78cf0884e0
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1] 0x78cf088580
	float OmniRadius;//[Offset: 0xbc, Size: 0x4] 0x78cf0dd000
	float StereoSpread;//[Offset: 0xc0, Size: 0x4] 0x78cf0dd080
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4] 0x78cf0dd100
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4] 0x78cf0dd180
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88] 0x78cf0dd200
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88] 0x78cf0dd280
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4] 0x78cf0dd300
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4] 0x78cf0dd380
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4] 0x78cf0dd400
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4] 0x78cf0dd480
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4] 0x78cf0dd500
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4] 0x78cf0dd580
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4] 0x78cf0dd600
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4] 0x78cf0dd680
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4] 0x78cf0db600
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4] 0x78cf0db680
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4] 0x78cf0db700
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4] 0x78cf0db780
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4] 0x78cf0db800
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4] 0x78cf0db880
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4] 0x78cf0db900
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4] 0x78cf0db980
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4] 0x78cf0dba00
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4] 0x78cf0dba80
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4] 0x78cf0dbb00
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4] 0x78cf0dbb80
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4] 0x78cf0dbc00
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4] 0x78cf0dbc80
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88] 0x78cf0dbd00
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10] 0x78cf0886c0
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4] 0x78cf0dc200
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4] 0x78cf0dc280
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4] 0x78cf0dc300
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4] 0x78cf0dc380
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4] 0x78cf0dc400
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88] 0x78cf0dc480
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30] 0x78cf0da580

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1] 0x78cf0825e0
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1] 0x78cf07a080
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4] 0x78cf07a100
	enum FalloffMode;//[Offset: 0x10, Size: 0x1] 0x78cf082680
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc] 0x78cf07a200
	float ConeOffset;//[Offset: 0x20, Size: 0x4] 0x78cf07a280
	float FalloffDistance;//[Offset: 0x24, Size: 0x4] 0x78cf07a300
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88] 0x78cf07a380

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80] 0x78cefb4b80
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8] 0x78cefb4c00

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8] 0x78cf0dbd80
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1] 0x78cf088620
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4] 0x78cf0dbe80
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4] 0x78cf0dbf00
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4] 0x78cf0dbf80
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4] 0x78cf0dc000
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4] 0x78cf0dc080
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88] 0x78cf0dc100

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10] 0x78cf088760
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10] 0x78cf088800
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10] 0x78cf0888a0

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1] 0x78cf088080
	enum PitchRouting;//[Offset: 0x41, Size: 0x1] 0x78cf088120
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1] 0x78cf0881c0
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1] 0x78cf088260

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x78cf082360
	enum SendStage;//[Offset: 0x1, Size: 0x1] 0x78cf082400
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8] 0x78cf07b380
	float SendLevel;//[Offset: 0x10, Size: 0x4] 0x78cf07b400
	float MinSendLevel;//[Offset: 0x14, Size: 0x4] 0x78cf07b480
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4] 0x78cf07b500
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4] 0x78cf07b580
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4] 0x78cf079500
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88] 0x78cf079580

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10] 0x78ce9d89e0
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce396a00

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8] 0x78cf0df500
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0df580

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x78cf087fe0
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8] 0x78cf0f0f80
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8] 0x78cf0f1000
	float SendLevel;//[Offset: 0x18, Size: 0x4] 0x78cf0f1080
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4] 0x78cf0df800
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4] 0x78cf0df880
	float MinSendDistance;//[Offset: 0x24, Size: 0x4] 0x78cf0df900
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4] 0x78cf0df980
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88] 0x78cf0dfa00

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x36c, Size: 0x1] 0x78ce9d83a0
	float SourceBusDuration;//[Offset: 0x370, Size: 0x4] 0x78ce398600
	AudioBus* AudioBus;//[Offset: 0x378, Size: 0x8] 0x78ce398680
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1] 0x78ce398700

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1] 0x78ce8c59c0
	bool bIsAutomatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78ce910380

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10] 0x78ce79ba00
	Object* Payload;//[Offset: 0x38, Size: 0x8] 0x78ce79ba80
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8] 0x78ce79bb00
	enum Pivot;//[Offset: 0x48, Size: 0x1] 0x78ce72af60
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8] 0x78ce79bc00
	delegate OnDrop;//[Offset: 0x58, Size: 0x10] 0x78ce79bc80
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10] 0x78ce79bd00
	delegate OnDragged;//[Offset: 0x78, Size: 0x10] 0x78ce79bd80
	void Drop(out const PointerEvent PointerEvent);// 0xa17a7a0 0x78ce7c0da0
	void Dragged(out const PointerEvent PointerEvent);// 0xa17a4d8 0x78ce7c0e80
	void DragCancelled(out const PointerEvent PointerEvent);// 0xa17a63c 0x78ce7c0f60

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10] 0x78ce8cd760
	bool WasControllerKeyJustReleased(Key Key);// 0xafb5890 0x78ce99e5c0
	bool WasControllerKeyJustPressed(Key Key);// 0xafb5a20 0x78ce99e6a0
	bool IsControllerKeyDown(Key Key);// 0xafb5bb0 0x78ce99adc0
	void GetTouchState(int FingerIndex, out float locationX, out float locationY, out bool bIsCurrentlyPressed);// 0xafb53cc 0x78ce99aea0
	Vector GetControllerVectorKeyState(Key Key);// 0xafb5574 0x78ce99af80
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0xafb513c 0x78ce99b060
	float GetControllerKeyTimeDown(Key Key);// 0xafb5240 0x78ce99b140
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xafb4fec 0x78ce99b220
	float GetControllerAnalogKeyState(Key Key);// 0xafb5704 0x78ce99b300

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8] 0x78cf0ac880

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10] 0x78ce9d7360
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10] 0x78ce9d7400
	void SetMouseSensitivity(const float Sensitivity);// 0xb124bd0 0x78ce3497e0
	void SetBind(FName BindName, FString Command);// 0xb124ad0 0x78ce3498c0
	void InvertAxisKey(const Key AxisKey);// 0xb12494c 0x78ce3499a0
	void InvertAxis(const FName AxisName);// 0xb1248a4 0x78ce349a80
	void ClearSmoothing();// 0xb124890 0x78ce349b60

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18] 0x78cf0d3080
	FString Command;//[Offset: 0x18, Size: 0x10] 0x78cf0d3100
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78cf0d3180
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78cf0d1100
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78cf0d1180
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78cf0d1200
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x78cf0d1280
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x78cf0d1300
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x78cf0d1380
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x78cf0d1400
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x78cf0d1480

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8] 0x78cf054980
	delegate Delegate;//[Offset: 0x8, Size: 0x10] 0x78cf054a00
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1] 0x78cefdba00
	FName UserTag;//[Offset: 0x1c, Size: 0x8] 0x78cf054b00

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8] 0x78ce352e00
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1] 0x78ce352e80
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8] 0x78ce9d1640
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce352f00
	int ControllerId;//[Offset: 0xb8, Size: 0x4] 0x78ce352f80

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8] 0x78ce9b2200
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10] 0x78ce8cdda0
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4] 0x78ce9b2300
	World* World;//[Offset: 0x70, Size: 0x8] 0x78ce9b2380
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8] 0x78ce9b2400
	void SSSwapControllers();// 0xafa7ddc 0x78ce99c020
	void ShowTitleSafeArea();// 0xafa7dc0 0x78ce99c100
	void SetConsoleTarget(int PlayerIndex);// 0xafa7d10 0x78ce99c1e0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8] 0x78ce944e00
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8] 0x78ce944e80
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8] 0x78ce944f00
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10] 0x78ce8c9e80

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8] 0x78cf0a0100
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8] 0x78cf083300

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8] 0x78ce3bae80
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8] 0x78ce3baf00
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8] 0x78ce3baf80
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8] 0x78ce3bb000
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8] 0x78ce3bb080
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8] 0x78ce3bb100
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8] 0x78ce3bb180
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10] 0x78ce9db960
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10] 0x78ce9d90c0
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10] 0x78ce9d9160
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28] 0x78ce3bb380
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10] 0x78ce3bb400
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8] 0x78ce3bb480
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8] 0x78ce3bb500
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8] 0x78ce3bb580
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8] 0x78ce3b9500
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8] 0x78ce3b9580
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1] 0x78ce3b9600
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8] 0x78ce3b9680
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8] 0x78ce3b9700
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8] 0x78ce3b9780
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8] 0x78ce3b9800
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8] 0x78ce3b9880
	Level*[] Levels;//[Offset: 0x138, Size: 0x10] 0x78ce9d9200
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10] 0x78ce9d92a0
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 0x8] 0x78ce3b9a00
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 0x10] 0x78ce9d9340
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 0x8] 0x78ce3b9b00
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 0x8] 0x78ce3b9b80
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x1f8, Size: 0x50] 0x78ce9d93e0
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x248, Size: 0x10] 0x78ce9d9480
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x258, Size: 0x10] 0x78ce9d9520
	WorldComposition* WorldComposition;//[Offset: 0x5d8, Size: 0x8] 0x78ce3b9d80
	WorldPSCPool PSCPool;//[Offset: 0x668, Size: 0x58] 0x78ce3b9e00
	WorldSettings* K2_GetWorldSettings();// 0xb1d7628 0x78ce3a8ba0
	void HandleTimelineScrubbed();// 0xb1d765c 0x78ce3a8c80

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8] 0x78ce33e800
	Model* Model;//[Offset: 0xc0, Size: 0x8] 0x78ce33e880
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10] 0x78ce9d1d20
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8] 0x78ce33e980
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4] 0x78ce33ea00
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4] 0x78ce33ea80
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8] 0x78ce33eb00
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8] 0x78ce33eb80
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8] 0x78ce33ec00
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10] 0x78ce9d1dc0
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4] 0x78ce33ed00
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4] 0x78ce33ed80
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10] 0x78ce9d1e60
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10] 0x78ce9d1f00
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10] 0x78ce33ef00
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8] 0x78ce33ef80
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc] 0x78ce33f000
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1] 0x78ce33f080
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1] 0x78ce33f100
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1] 0x78ce33f180
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1] 0x78ce33f200
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 0x8] 0x78ce33f280
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 0x10] 0x78ce9d1fa0
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 0x10] 0x78ce9d2040

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x458, Size: 0x8] 0x78ce368100

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10] 0x78ce9d1c80

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x78ce33fa00
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x8a873f8 0x78ce341ac0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xb051a14 0x78ce341ba0
	bool RemoteEvent(FName EventName);// 0xb051bfc 0x78ce341c80
	void LevelReset();// 0x8a873f8 0x78ce31e780

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4] 0x78ea084700
	int Y;//[Offset: 0x4, Size: 0x4] 0x78ea084780
	int Z;//[Offset: 0x8, Size: 0x4] 0x78ea084800

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 0x8] 0x78ce367d80
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 0x8] 0x78ce367e00
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 0x8] 0x78ce367e80
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78ce367f00

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x440, Size: 0x8] 0x78ceb4a480
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 0x1] 0x78ceb4a500
	float ScreenSize;//[Offset: 0x44c, Size: 0x4] 0x78ceb48480
	float U;//[Offset: 0x450, Size: 0x4] 0x78ceb48500
	float UL;//[Offset: 0x454, Size: 0x4] 0x78ceb48580
	float V;//[Offset: 0x458, Size: 0x4] 0x78ceb48600
	float VL;//[Offset: 0x45c, Size: 0x4] 0x78ceb48680
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0xaeff2f8 0x78ceb61120
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0xaeff120 0x78ceb61200
	void SetSprite(Texture2D* NewSprite);// 0xaeff484 0x78ceb612e0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8] 0x78ce367f80

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1] 0x78ce352400

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 0x4] 0x78ce3bd600
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 0x1] 0x78ce3bd680
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1] 0x78ce3bb600
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1] 0x78ce3bb680
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 0x1] 0x78ce3bb700
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 0x1] 0x78ce3bb780
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 0x1] 0x78ce3bb800
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 0x1] 0x78ce3bb880
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 0x1] 0x78ce3bb900
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 0x1] 0x78ce3bb980
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 0x1] 0x78ce3bba00
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 0x1] 0x78ce3bba80
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 0x1] 0x78ce3bbb00
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 0x1] 0x78ce3bbb80
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 0x1] 0x78ce3bbc00
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 0x1] 0x78ce3bbc80
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 0x1] 0x78ce3bbd00
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 0x8] 0x78ce3bbd80
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 0x8] 0x78ce3bbe00
	float WorldToMeters;//[Offset: 0x240, Size: 0x4] 0x78ce3bbe80
	float KillZ;//[Offset: 0x244, Size: 0x4] 0x78ce3bbf00
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 0x8] 0x78ce9db1e0
	float WorldGravityZ;//[Offset: 0x250, Size: 0x4] 0x78ce3bbf80
	float GlobalGravityZ;//[Offset: 0x254, Size: 0x4] 0x78ce3bc000
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 0x8] 0x78ce9db280
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 0x8] 0x78ce9db320
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 0x8] 0x78ce9db3c0
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 0x8] 0x78ce9db460
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 0x4] 0x78ce3bc080
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 0xc] 0x78ce3bc100
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 0x4] 0x78ce3bc180
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 0x4] 0x78ce3bc200
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 0x4] 0x78ce3bc280
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 0x20] 0x78ce3bc300
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 0x24] 0x78ce3bc380
	float MonoCullingDistance;//[Offset: 0x2dc, Size: 0x4] 0x78ce3bc400
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 0x8] 0x78ce3bc480
	float TimeDilation;//[Offset: 0x2e8, Size: 0x4] 0x78ce3bc500
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 0x4] 0x78ce3bc580
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 0x4] 0x78ce3bc600
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 0x4] 0x78ce3ba580
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 0x4] 0x78ce3ba600
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 0x4] 0x78ce3ba680
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 0x4] 0x78ce3ba700
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 0x40] 0x78ce3ba780
	PlayerState* Pauser;//[Offset: 0x348, Size: 0x8] 0x78ce3ba800
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 0x10] 0x78ce9db500
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10] 0x78ce9db5a0
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 0x8] 0x78ce3ba980
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 0x4] 0x78ce3baa00
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 0x8] 0x78ce9db640
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 0x10] 0x78ce9db6e0
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 0x8] 0x78ce9db780
	void OnRep_WorldGravityZ();// 0xb1d91d4 0x78ce3a8ac0

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18] 0x78ce367b80
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4] 0x78ce367c00
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8] 0x78ce367c80
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78ce367d00

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0c9c00
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0c9c80
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0c9d00
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0c9d80
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf0c9e00
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cf0c9e80
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cf0c9f00
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cf0c9f80
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cf0ca000
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78cf0ca080
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78cf0ca100
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78cf0ca180
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78cf0ca200
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78cf0ca280
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78cf0ca300
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78cf0ca380

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4] 0x78ce37e280
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4] 0x78ce37e300
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8] 0x78ce37e380
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4] 0x78ce37e400

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 0x10] 0x78cf619100
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 0x8] 0x78cf56e8e0
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 0x8] 0x78cf56e980
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 0x8] 0x78cf56ea20
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 0x8] 0x78cf56eac0
	class HUD* HUDClass;//[Offset: 0x250, Size: 0x8] 0x78cf56eb60
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 0x8] 0x78cf56ec00
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 0x8] 0x78cf56eca0
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 0x8] 0x78cf56ed40
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 0x8] 0x78cf56ede0
	GameSession* GameSession;//[Offset: 0x278, Size: 0x8] 0x78cf619180
	GameStateBase* GameState;//[Offset: 0x280, Size: 0x8] 0x78cf619200
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 0x8] 0x78cf619280
	FText DefaultPlayerName;//[Offset: 0x290, Size: 0x18] 0x78cf619300
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78cf619380
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78cf619400
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78cf619480
	void StartPlay();// 0xaf903d0 0x78cf5cd980
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0xaf8f738 0x78cf5cda60
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xaf8f60c 0x78cf5cdb40
	bool ShouldReset(Actor* ActorToReset);// 0xaf90294 0x78cf5cdc20
	void ReturnToMainMenuHost();// 0xaf9025c 0x78cf5cdd00
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xaf8f838 0x78cf5cdde0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0xaf8f95c 0x78cf5cdec0
	void RestartPlayer(Controller* NewPlayer);// 0xaf8fa54 0x78cf5cdfa0
	void ResetLevel();// 0xaf90278 0x78cf5ce080
	bool PlayerCanRestart(PlayerController* Player);// 0xaf8fb04 0x78cf5ce160
	bool MustSpectate(PlayerController* NewPlayerController);// 0xaf900f0 0x78cf5ce240
	void K2_PostLogin(PlayerController* NewPlayer);// 0x8a873f8 0x78cf5ce320
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x8a873f8 0x78cf5ce400
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x8a873f8 0x78cf5ce4e0
	void K2_OnLogout(Controller* ExitingController);// 0x8a873f8 0x78cf5ce5c0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x8a873f8 0x78cf5ce6a0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0xaf8fbc0 0x78cf5cadc0
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0xaf8f514 0x78cf5caea0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0xaf8f464 0x78cf5caf80
	bool HasMatchStarted();// 0xaf90390 0x78cf5cb060
	bool HasMatchEnded();// 0xaf90350 0x78cf5cb140
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0xaf901ac 0x78cf5cb220
	int GetNumSpectators();// 0xaf903ec 0x78cf5cb300
	int GetNumPlayers();// 0xaf90428 0x78cf5cb3e0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0xaf90464 0x78cf5cb4c0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0xaf8fcc8 0x78cf5cb5a0
	Actor* ChoosePlayerStart(Controller* Player);// 0xaf8fdd8 0x78cf5cb680
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0xaf8fe90 0x78cf5cb760
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0xaf8ffec 0x78cf5cb840

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 0x4] 0x78ce9afc00
	int MaxPlayers;//[Offset: 0x224, Size: 0x4] 0x78ce9afc80
	int MaxPartySize;//[Offset: 0x228, Size: 0x4] 0x78ce9afd00
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 0x1] 0x78ce9afd80
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x78ce9afe00
	FName SessionName;//[Offset: 0x230, Size: 0x8] 0x78ce9afe80

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 0x8] 0x78ceddbc80
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 0x8] 0x78ce6a9980
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 0x8] 0x78ceddbd20
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 0x10] 0x78ceddbdc0
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x78ce6a9a80
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 0x4] 0x78ce6a9b00
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 0x4] 0x78ce6a9b80
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 0x4] 0x78ce6a9c00
	void OnRep_SpectatorClass();// 0xafa2ad8 0x78ce6b0940
	void OnRep_ReplicatedWorldTimeSeconds();// 0xafa2aa0 0x78ce6b0a20
	void OnRep_ReplicatedHasBegunPlay();// 0xafa2abc 0x78ce6b0b00
	void OnRep_GameModeClass();// 0xafa2af4 0x78ce6b0be0
	bool HasMatchStarted();// 0xafa2cc0 0x78ce6b0cc0
	bool HasMatchEnded();// 0xafa2c80 0x78ce6b0da0
	bool HasBegunPlay();// 0xafa2d00 0x78ce6b0e80
	float GetServerWorldTimeSeconds();// 0xafa2d40 0x78ce6b0f60
	float GetPlayerStartTime(Controller* Controller);// 0xafa2bc8 0x78ce6b1040
	float GetPlayerRespawnDelay(Controller* Controller);// 0xafa2b10 0x78ce6b1120

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x27c, Size: 0x4] 0x78ce6dc580
	float BaseLookUpRate;//[Offset: 0x280, Size: 0x4] 0x78ce6dc600
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 0x8] 0x78ce6da580
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 0x8] 0x78ce6da600
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 0x8] 0x78ce6da680
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1] 0x78ce6da700
	void TurnAtRate(float Rate);// 0xaf58d0c 0x78ce6bf120
	void MoveUp_World(float val);// 0xaf58dbc 0x78ce6bf200
	void MoveRight(float val);// 0xaf58e6c 0x78ce6bf2e0
	void MoveForward(float val);// 0xaf58f1c 0x78ce6bf3c0
	void LookUpAtRate(float Rate);// 0xaf58c5c 0x78ce6bf4a0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x458, Size: 0x4] 0x78ce980800
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0xb197a08 0x78ce92ff20
	float GetUnscaledSphereRadius();// 0xb1979a4 0x78ce92caa0
	float GetShapeScale();// 0xb197964 0x78ce92cb80
	float GetScaledSphereRadius();// 0xb1979c0 0x78ce92cc60

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x464, Size: 0x4] 0x78ce74a600
	int PreviousLODLevel;//[Offset: 0x468, Size: 0x4] 0x78ce74a680
	int MinLOD;//[Offset: 0x46c, Size: 0x4] 0x78ce74a700
	int SubDivisionStepSize;//[Offset: 0x470, Size: 0x4] 0x78ce74a780
	StaticMesh* StaticMesh;//[Offset: 0x478, Size: 0x8] 0x78ce74a800
	Color WireframeColorOverride;//[Offset: 0x480, Size: 0x4] 0x78ce74a880
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 0x1] 0x78ce74a900
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 0x1] 0x78ce74a980
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x484, Size: 0x1] 0x78ce74aa00
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x484, Size: 0x1] 0x78ce74aa80
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x484, Size: 0x1] 0x78ce74ab00
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x484, Size: 0x1] 0x78ce74ab80
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x484, Size: 0x1] 0x78ce74ac00
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x484, Size: 0x1] 0x78ce74ac80
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x485, Size: 0x1] 0x78ce74ad00
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x485, Size: 0x1] 0x78ce74ad80
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x485, Size: 0x1] 0x78ce74ae00
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x485, Size: 0x1] 0x78ce74ae80
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x485, Size: 0x1] 0x78ce74af00
	int OverriddenLightMapRes;//[Offset: 0x488, Size: 0x4] 0x78ce74af80
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x48c, Size: 0x4] 0x78ce74b000
	float DistanceFieldSelfShadowBias;//[Offset: 0x490, Size: 0x4] 0x78ce74b080
	float StreamingDistanceMultiplier;//[Offset: 0x494, Size: 0x4] 0x78ce74b100
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x498, Size: 0x10] 0x78ce725f60
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4a8, Size: 0x10] 0x78ce726000
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4b8, Size: 0x18] 0x78ce74b280
	bool SetStaticMesh(StaticMesh* NewMesh);// 0xb1abd80 0x78ce755f00
	void SetReverseCulling(bool ReverseCulling);// 0xb1ab9d4 0x78ce755fe0
	void SetForcedLodModel(int NewForcedLodModel);// 0xb1abcd8 0x78ce7560c0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0xb1abb80 0x78ce7561a0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0xb1abc30 0x78ce756280
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0xb1abe3c 0x78ce756360
	void GetLocalBounds(out Vector Min, out Vector Max);// 0xb1aba84 0x78ce756440

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4] 0x78cf0f2700
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4] 0x78cf0f2780
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x78cf0f2800

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0a9080
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0a9100
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0a9180
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0a9200
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4] 0x78cf0a9280
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4] 0x78cf0a9300
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4] 0x78cf0a9380
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4] 0x78cf0a9400
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4] 0x78cf0a9480

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78ce392800
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78ce392880
	uint32 Channels;//[Offset: 0x224, Size: 0x4] 0x78ce392900
	uint32 InRate;//[Offset: 0x228, Size: 0x4] 0x78ce392980
	uint32 OutRate;//[Offset: 0x22c, Size: 0x4] 0x78ce392a00
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 0x4] 0x78ce392a80
	uint32 InRateClientMax;//[Offset: 0x238, Size: 0x4] 0x78ce392b00
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 0x4] 0x78ce392b80
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 0x4] 0x78ce392c00
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 0x4] 0x78ce392c80
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 0x4] 0x78ce392d00
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 0x4] 0x78ce392d80
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 0x4] 0x78ce392e00
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 0x4] 0x78ce392e80
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 0x4] 0x78ce392f00
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 0x4] 0x78ce392f80
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 0x4] 0x78ce393000
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 0x4] 0x78ce393080
	uint32 NetNumClients;//[Offset: 0x268, Size: 0x4] 0x78ce393100
	uint32 InPackets;//[Offset: 0x26c, Size: 0x4] 0x78ce393180
	uint32 OutPackets;//[Offset: 0x270, Size: 0x4] 0x78ce391100
	uint32 InBunches;//[Offset: 0x274, Size: 0x4] 0x78ce391180
	uint32 OutBunches;//[Offset: 0x278, Size: 0x4] 0x78ce391200
	uint32 OutLoss;//[Offset: 0x27c, Size: 0x4] 0x78ce391280
	uint32 InLoss;//[Offset: 0x280, Size: 0x4] 0x78ce391300
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 0x4] 0x78ce391380
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 0x4] 0x78ce391400
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 0x4] 0x78ce391480
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 0x4] 0x78ce391500
	uint32 PercentInVoice;//[Offset: 0x294, Size: 0x4] 0x78ce391580
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 0x4] 0x78ce391600
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 0x4] 0x78ce391680
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 0x4] 0x78ce391700
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 0x4] 0x78ce391780
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 0x4] 0x78ce391800
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 0x4] 0x78ce391880
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 0x4] 0x78ce391900
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 0x4] 0x78ce391980
	uint32 NumActors;//[Offset: 0x2b8, Size: 0x4] 0x78ce391a00
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 0x4] 0x78ce391a80
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 0x4] 0x78ce391b00
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 0x4] 0x78ce391b80
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 0x4] 0x78ce391c00
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 0x4] 0x78ce391c80
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 0x4] 0x78ce391d00
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 0x4] 0x78ce391d80
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 0x4] 0x78ce391e00
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 0x4] 0x78ce391e80
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 0x4] 0x78ce391f00

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 0x4] 0x78ce98df80
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 0x4] 0x78ce98e000
	int BadPingThreshold;//[Offset: 0x228, Size: 0x4] 0x78ce98e080
	int SeverePingThreshold;//[Offset: 0x22c, Size: 0x4] 0x78ce98e100
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 0x4] 0x78ce98e180
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 0x4] 0x78ce98e200
	int TotalNetBandwidth;//[Offset: 0x238, Size: 0x4] 0x78ce98e280
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 0x4] 0x78ce98e300
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 0x4] 0x78ce98e380
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x78ce98e400
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x78ce98e480
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 0x4] 0x78ce98e500
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 0x4] 0x78ce98e580
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 0x4] 0x78ce98e600
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 0x4] 0x78ce98e680
	float PercentForBadPing;//[Offset: 0x258, Size: 0x4] 0x78ce98e700
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 0x4] 0x78ce98c680
	float MoveRepSize;//[Offset: 0x260, Size: 0x4] 0x78ce98c700
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 0x4] 0x78ce98c780
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 0x4] 0x78ce98c800
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 0x4] 0x78ce98c880
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 0x4] 0x78ce98c900
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 0x4] 0x78ce98c980
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 0x4] 0x78ce98ca00
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 0x4] 0x78ce98ca80
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 0x4] 0x78ce98cb00
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 0x4] 0x78ce98cb80
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 0x4] 0x78ce98cc00
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 0x4] 0x78ce98cc80
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 0x4] 0x78ce98cd00
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 0x4] 0x78ce98cd80
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 0x4] 0x78ce98ce00
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x78ce98ce80
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 0x4] 0x78ce98cf00
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 0x4] 0x78ce98cf80
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 0x4] 0x78ce98d000
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x78ce98d080
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x78ce98d100
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 0x4] 0x78ce98d180
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 0x4] 0x78ce98d200
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 0x4] 0x78ce98d280
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 0x4] 0x78ce98d300
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78ce98d380
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78ce98d400

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf0d3d80
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8] 0x78cf0d3e00
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8] 0x78cf0d3e80
	float Volume;//[Offset: 0x18, Size: 0x4] 0x78cf0d3f00
	float FadeTime;//[Offset: 0x1c, Size: 0x4] 0x78cf0d3f80

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce38f400
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4] 0x78ce38f480
	float GainHF;//[Offset: 0x30, Size: 0x4] 0x78ce38f500
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4] 0x78ce38f580
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ce38f600
	float LateDelay;//[Offset: 0x3c, Size: 0x4] 0x78ce38f680
	float DecayTime;//[Offset: 0x40, Size: 0x4] 0x78ce38f700
	float Density;//[Offset: 0x44, Size: 0x4] 0x78ce38f780
	float Diffusion;//[Offset: 0x48, Size: 0x4] 0x78ce38d700
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4] 0x78ce38d780
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4] 0x78ce38d800
	float LateGain;//[Offset: 0x54, Size: 0x4] 0x78ce38d880
	float Gain;//[Offset: 0x58, Size: 0x4] 0x78ce38d900
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4] 0x78ce38d980

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf079800
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4] 0x78cf079880
	float ExteriorTime;//[Offset: 0x8, Size: 0x4] 0x78cf079900
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4] 0x78cf079980
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4] 0x78cf079a00
	float InteriorVolume;//[Offset: 0x14, Size: 0x4] 0x78cf079a80
	float InteriorTime;//[Offset: 0x18, Size: 0x4] 0x78cf079b00
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4] 0x78cf079b80
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4] 0x78cf079c00

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf0f9400
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cf0f9480
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cf0f7400
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c] 0x78cf0f7480
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c] 0x78cf0f7500
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4] 0x78cf0f7580

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x78cf0f8b80
	Actor* InViewer;//[Offset: 0x8, Size: 0x8] 0x78cf0f8c00
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8] 0x78cf0f8c80
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc] 0x78cf0f8d00
	Vector ViewDir;//[Offset: 0x24, Size: 0xc] 0x78cf0f8d80

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10] 0x78ceac2e00
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8] 0x78ceabfa80
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8] 0x78ceac2ea0
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8] 0x78ceabfb00
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10] 0x78ceac2f40
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10] 0x78ceac2fe0
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8] 0x78ceabfc80
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8] 0x78ceabfd00
	int MaxPacket;//[Offset: 0xa0, Size: 0x4] 0x78ceabfd80
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1] 0x78ceabfe00
	UniqueNetIdRepl PlayerID;//[Offset: 0x160, Size: 0x28] 0x78ceabfe80
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8] 0x78ceabff00
	Channel*[] ChannelsToTick;//[Offset: 0x1518, Size: 0x10] 0x78ceac3080

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1af0, Size: 0x8] 0x78ce943d80

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10] 0x78cead0400
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10] 0x78cead0480
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4] 0x78cead0500
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78cead0580
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4] 0x78cead0600
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4] 0x78cead0680
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4] 0x78cead0700
	int MaxClientRate;//[Offset: 0x64, Size: 0x4] 0x78cead0780
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4] 0x78cead0800
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4] 0x78cead0880
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4] 0x78cead0900
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4] 0x78cead0980
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4] 0x78cead0a00
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4] 0x78cead0a80
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4] 0x78cead0b00
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78cead0b80
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x78cead0c00
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8] 0x78cead0c80
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10] 0x78ceac2ae0
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4] 0x78cead0d80
	World* World;//[Offset: 0x140, Size: 0x8] 0x78cead0e00
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8] 0x78cead0e80
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8] 0x78ceac2b80
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8] 0x78ceac2c20
	FName NetDriverName;//[Offset: 0x190, Size: 0x8] 0x78cead0f00
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10] 0x78ceac2cc0
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50] 0x78cf158e00
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10] 0x78ceac2d60
	float Time;//[Offset: 0x210, Size: 0x4] 0x78ceabf880
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6e8, Size: 0x8] 0x78ceabf900

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8] 0x78cf0ca600
	FName ClassName;//[Offset: 0x8, Size: 0x8] 0x78cf0ca680
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8] 0x78cf085380
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4] 0x78cf0ca700
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cf0ca780
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x78cf0ca800
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x78cf0ca880
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1] 0x78cf0ca900
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cf0ca980

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8] 0x78ce8e5900

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8] 0x78cf0840c0

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28] 0x78ce352100
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8] 0x78ce350080
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10] 0x78ce9d1b40
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30] 0x78ce350180
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4] 0x78ce350200
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4] 0x78ce350280
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1] 0x78ce350300
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1] 0x78ce350380
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1] 0x78ce350400
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1] 0x78ce350480
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1] 0x78ce350500
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1] 0x78ce350580
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1] 0x78ce350600
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1] 0x78ce350680
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10] 0x78ce350700
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10] 0x78ce9d1be0
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4] 0x78ce350800
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10] 0x78ce350880
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10] 0x78ce350900
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10] 0x78ce350980
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10] 0x78ce350a00
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8] 0x78ce350a80
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8] 0x78ce350b00
	bool ShouldBeLoaded();// 0xb052918 0x78ce340e80
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0xb052c64 0x78ce340f60
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0xb052bac 0x78ce341040
	void SetPriority(int NewPriority);// 0xb052a5c 0x78ce341120
	void SetLevelLODIndex(int LODIndex);// 0xb052b04 0x78ce341200
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0xb05298c 0x78ce3412e0
	bool IsStreamingStatePending();// 0xb052868 0x78ce3413c0
	bool IsLevelVisible();// 0xb0528c4 0x78ce3414a0
	bool IsLevelLoaded();// 0xb0528a0 0x78ce341580
	FName GetWorldAssetPackageFName();// 0xb052958 0x78ce341660
	Level* GetLoadedLevel();// 0xb0528fc 0x78ce341740
	LevelScriptActor* GetLevelScriptActor();// 0xb052778 0x78ce341820
	bool GetIsRequestingUnloadAndRemoval();// 0xb052a3c 0x78ce341900
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0xb0527ac 0x78ce3419e0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 0x10] 0x78ce9d1aa0
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x78ce351780
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1] 0x78ce351800
	byte StreamingUsage;//[Offset: 0x269, Size: 0x1] 0x78ce351880

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10] 0x78cf089c00

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x840, Size: 0x50] 0x78cee131c0
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9ec, Size: 0x4] 0x78ce94a200
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa10, Size: 0x10] 0x78ce8c9980
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 0x1] 0x78ce94a300
	PlayerController*[] SpectatorControllers;//[Offset: 0xa28, Size: 0x10] 0x78ce8c9a20

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8] 0x78cf0a1880
	Level* Level;//[Offset: 0x38, Size: 0x8] 0x78cf0a1900
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10] 0x78cf083260

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10] 0x78cf0a1a00
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf0a1a80
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x78cf0a1b00

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18] 0x78ce8e7000
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8] 0x78ce8e7080
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78ce8e7100

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4] 0x78ce912400
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4] 0x78ce912480
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4] 0x78ce912500
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4] 0x78ce912580
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4] 0x78ce912600
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4] 0x78ce912680
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4] 0x78ce912700
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0xaefe380 0x78ce8de240
	int GetObjectCount();// 0xaefe4b4 0x78ce8de320
	int GetNewAvoidanceUID();// 0xaefe480 0x78ce8de400
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0xaefe2cc 0x78ce8de4e0

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8] 0x78cf0f7b00
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8] 0x78cf0f7b80
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8] 0x78cf0f7c00
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8] 0x78cf0f7c80
	<Level*> Levels;//[Offset: 0x28, Size: 0x50] 0x78cf089b60

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10] 0x78cf2cc540
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8] 0x78cf531a80
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10] 0x78cf2cc5e0
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10] 0x78cf531b80
	void ReceiveShutdown();// 0x8a873f8 0x78cf527240
	void ReceiveInit();// 0x8a873f8 0x78cf527320
	void HandleTravelError(byte FailureType);// 0x8a873f8 0x78cf523a40
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x8a873f8 0x78cf523b20
	void DebugRemovePlayer(int ControllerId);// 0xaf8af94 0x78cf523c00
	void DebugCreatePlayer(int ControllerId);// 0xaf8b044 0x78cf523ce0

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8] 0x78ce365900

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10] 0x78ce9db8c0
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8] 0x78ce3bac80
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78ce3bad00
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78ce3bad80
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4] 0x78ce3bae00

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50] 0x78cf152800

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x78cf089980
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10] 0x78cf089a20
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10] 0x78cf089ac0

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8] 0x78cf0f7600

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8] 0x78ce943f80
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8] 0x78ce8c7fe0
	void Walk();// 0xaf3bd18 0x78ce9274e0
	void ViewSelf();// 0xaf3b8f4 0x78ce9275c0
	void ViewPlayer(FString S);// 0xaf3b838 0x78ce9276a0
	void ViewClass(class Actor DesiredClass);// 0xaf3b6d8 0x78ce927780
	void ViewActor(FName ActorName);// 0xaf3b788 0x78ce927860
	void UpdateSafeArea();// 0xaf3aa60 0x78ce927940
	void ToggleServerStatReplicatorUpdateStatNet();// 0xaf3aa74 0x78ce927a20
	void ToggleServerStatReplicatorClientOverwrite();// 0xaf3aa88 0x78ce927b00
	void ToggleDebugCamera();// 0xaf3b4ac 0x78ce927be0
	void ToggleAILogging();// 0xaf3b490 0x78ce927cc0
	void TestCollisionDistance();// 0xaf3b148 0x78ce927da0
	void Teleport();// 0xaf3be00 0x78ce927e80
	void Summon(FString ClassName);// 0xaf3b92c 0x78ce927f60
	void StreamLevelOut(FName PackageName);// 0xaf3b4c8 0x78ce928040
	void StreamLevelIn(FName PackageName);// 0xaf3b628 0x78ce928120
	void SpawnServerStatReplicator();// 0xaf3aab0 0x78ce928200
	void Slomo(float NewTimeDilation);// 0xaf3bc30 0x78ce9282e0
	void SetWorldOrigin();// 0xaf3abf8 0x78ce9283c0
	void SetMouseSensitivityToDefault();// 0xaf3abdc 0x78ce9284a0
	void ServerToggleAILogging();// 0xaf3b434 0x78ce928580
	void ReceiveInitCheatManager();// 0x8a873f8 0x78ce928660
	void ReceiveEndPlay();// 0x8a873f8 0x78ce928740
	void PlayersOnly();// 0xaf3b910 0x78ce928820
	void OnlyLoadLevel(FName PackageName);// 0xaf3b578 0x78ce928900
	void LogLoc();// 0xaf3ac0c 0x78ce9289e0
	void InvertMouse();// 0xaf3abc0 0x78ce928ac0
	void God();// 0xaf3bce0 0x78ce928ba0
	void Ghost();// 0xaf3bcfc 0x78ce928c80
	void FreezeFrame(float Delay);// 0xaf3be1c 0x78ce928d60
	void Fly();// 0xaf3bd34 0x78ce928e40
	void FlushLog();// 0xaf3ac28 0x78ce928f20
	void EnableDebugCamera();// 0xaf3aa44 0x78ce929000
	void DumpVoiceMutingState();// 0xaf3b0d8 0x78ce925720
	void DumpPartyState();// 0xaf3b110 0x78ce925800
	void DumpOnlineSessionState();// 0xaf3b12c 0x78ce9258e0
	void DumpChatState();// 0xaf3b0f4 0x78ce9259c0
	void DisableDebugCamera();// 0xaf3aa28 0x78ce925aa0
	void DestroyTarget();// 0xaf3bb64 0x78ce925b80
	void DestroyServerStatReplicator();// 0xaf3aa9c 0x78ce925c60
	void DestroyPawns(class Pawn aClass);// 0xaf3b9e8 0x78ce925d40
	void DestroyAllPawnsExceptTarget();// 0xaf3ba98 0x78ce925e20
	void DestroyAll(class Actor aClass);// 0xaf3bab4 0x78ce925f00
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0xaf3b320 0x78ce925fe0
	void DebugCapsuleSweepPawn();// 0xaf3b180 0x78ce9260c0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0xaf3b1b8 0x78ce9261a0
	void DebugCapsuleSweepClear();// 0xaf3b164 0x78ce926280
	void DebugCapsuleSweepChannel(byte Channel);// 0xaf3b270 0x78ce926360
	void DebugCapsuleSweepCapture();// 0xaf3b19c 0x78ce926440
	void DebugCapsuleSweep();// 0xaf3b418 0x78ce926520
	void DamageTarget(float DamageAmount);// 0xaf3bb80 0x78ce926600
	void CheatScript(FString ScriptName);// 0xaf3aac4 0x78ce9266e0
	void ChangeSize(float F);// 0xaf3bd50 0x78ce9267c0
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0xaf3ac44 0x78ce9268a0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0xaf3aeb8 0x78ce926980
	void BugIt(FString ScreenShotDescription);// 0xaf3adfc 0x78ce926a60

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1] 0x78ce949380
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 0x1] 0x78ce949400
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56d, Size: 0x1] 0x78ce949480
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56d, Size: 0x1] 0x78ce947400
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56d, Size: 0x1] 0x78ce947480
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56d, Size: 0x1] 0x78ce947500
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56d, Size: 0x1] 0x78ce947580
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56d, Size: 0x1] 0x78ce947600
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570, Size: 0x8] 0x78ce947680
	Actor* SelectedActor;//[Offset: 0x578, Size: 0x8] 0x78ce947700
	PrimitiveComponent* SelectedComponent;//[Offset: 0x580, Size: 0x8] 0x78ce947780
	HitResult SelectedHitPoint;//[Offset: 0x588, Size: 0x8c] 0x78ce947800
	PlayerController* OriginalControllerRef;//[Offset: 0x618, Size: 0x8] 0x78ce947880
	Player* OriginalPlayer;//[Offset: 0x620, Size: 0x8] 0x78ce947900
	float SpeedScale;//[Offset: 0x628, Size: 0x4] 0x78ce947980
	float InitialMaxSpeed;//[Offset: 0x62c, Size: 0x4] 0x78ce947a00
	float InitialAccel;//[Offset: 0x630, Size: 0x4] 0x78ce947a80
	float InitialDecel;//[Offset: 0x634, Size: 0x4] 0x78ce947b00
	void ToggleDisplay();// 0xaf50f5c 0x78ce9298c0
	void ShowDebugSelectedInfo();// 0xaf50f70 0x78ce9299a0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0xaf50e80 0x78ce929a80
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x8a873f8 0x78ce929b60
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult hit);// 0x8a873f8 0x78ce929c40
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x8a873f8 0x78ce929d20
	Actor* GetSelectedActor();// 0xaf50f28 0x78ce929e00

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x440, Size: 0x4] 0x78ce980b00
	float FrustumAngle;//[Offset: 0x444, Size: 0x4] 0x78ce980b80
	float FrustumAspectRatio;//[Offset: 0x448, Size: 0x4] 0x78ce980c00
	float FrustumStartDist;//[Offset: 0x44c, Size: 0x4] 0x78ce980c80
	float FrustumEndDist;//[Offset: 0x450, Size: 0x4] 0x78ce980d00
	Texture* Texture;//[Offset: 0x458, Size: 0x8] 0x78ce980d80

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8] 0x78cf0aac00

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10] 0x78ce8cca40
	float Duration;//[Offset: 0x38, Size: 0x4] 0x78ce98d680

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0aa780
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0aa800
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0aa880
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0aa900
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88] 0x78cf0aa980

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10] 0x78ce9d9a20
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4] 0x78ce3b4800
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4] 0x78ce3b4880
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4] 0x78ce3b4900
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4] 0x78ce3b4980
	float ActivationDelay;//[Offset: 0x48, Size: 0x4] 0x78ce3b4a00
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78ce3b4a80
	float StartupDelay;//[Offset: 0x50, Size: 0x4] 0x78ce3b4b00

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8] 0x78cf0f6600
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8] 0x78cf0f6680
	Vector2D Center;//[Offset: 0x10, Size: 0x8] 0x78cf0f6700
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8] 0x78cf0f6780
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8] 0x78cf0f6800
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8] 0x78cf0f6880
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8] 0x78cf0f6900
	Key MainInputKey;//[Offset: 0x38, Size: 0x18] 0x78cf0f6980
	Key AltInputKey;//[Offset: 0x50, Size: 0x18] 0x78cf0f6a00

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x78cf0d0180
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x78cf0d0200
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x78cf0d0280
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf0d0300

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x78cf0f6480
	FName Filename;//[Offset: 0x8, Size: 0x8] 0x78cf0f6500
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cf0f6580

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4] 0x78cf53b080
	int UUID;//[Offset: 0x4, Size: 0x4] 0x78cf53b100
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8] 0x78cf53b180
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8] 0x78cf53b200

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x78cf0d1d80
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x78cf0d1e00
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf0d1e80
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x78cf0d1f00
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x78cf0d1f80

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x78cf0aaa00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf0aaa80
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78cf0aab00
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78cf0aab80

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4] 0x78cf07d700
	int index;//[Offset: 0x4, Size: 0x4] 0x78cf07d780
	int SelectionIndex;//[Offset: 0x8, Size: 0x4] 0x78cf07d800

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 0x8] 0x78ce366780
	FName MatineeControllerName;//[Offset: 0x228, Size: 0x8] 0x78ce366800
	float PlayRate;//[Offset: 0x230, Size: 0x4] 0x78ce366880
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x78ce366900
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1] 0x78ce366980
	float ForceStartPosition;//[Offset: 0x238, Size: 0x4] 0x78ce366a00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1] 0x78ce366a80
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1] 0x78ce366b00
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1] 0x78ce366b80
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1] 0x78ce366c00
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 0x1] 0x78ce366c80
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 0x1] 0x78ce366d00
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 0x1] 0x78ce366d80
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 0x1] 0x78ce366e00
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 0x4] 0x78ce366e80
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x78ce366f00
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x78ce366f80
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1] 0x78ce367000
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1] 0x78ce367080
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 0x10] 0x78ce9d2c20
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x78ce367180
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 0x10] 0x78ce9d2cc0
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 0x10] 0x78ce9d2d60
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x78ce367300
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x78ce367380
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x78ce365300
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1] 0x78ce365380
	float InterpPosition;//[Offset: 0x284, Size: 0x4] 0x78ce365400
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 0x1] 0x78ce365480
	delegate OnPlay;//[Offset: 0x290, Size: 0x10] 0x78ce365500
	delegate OnStop;//[Offset: 0x2a0, Size: 0x10] 0x78ce365580
	delegate OnPause;//[Offset: 0x2b0, Size: 0x10] 0x78ce365600
	void Stop();// 0xb0aea30 0x78ce342c40
	void SetPosition(float NewPosition, bool bJump);// 0xb0ae8fc 0x78ce342d20
	void SetLoopingState(bool bNewLooping);// 0xb0ae828 0x78ce342e00
	void Reverse();// 0xb0aea14 0x78ce342ee0
	void Play();// 0xb0aea4c 0x78ce342fc0
	void Pause();// 0xb0ae9f8 0x78ce3430a0
	void EnableGroupByName(FString groupName, bool bEnable);// 0xb0ae6d0 0x78ce343180
	void ChangePlaybackDirection();// 0xb0ae8e0 0x78ce343260

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4] 0x78ce9b8380
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4] 0x78ce9b8400
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10] 0x78ce8cf380
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8] 0x78ce9b6400
	float EdSectionStart;//[Offset: 0x48, Size: 0x4] 0x78ce9b6480
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4] 0x78ce9b6500
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce9b6580
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8] 0x78ce9b6600
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10] 0x78ce8cf420

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x78cf0c5e80
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x78cf085a60

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cf0c5d80
	float Timestamp;//[Offset: 0xc, Size: 0x4] 0x78cf0c5e00

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 0x8] 0x78ce8c7ea0
	Actor* ChildActor;//[Offset: 0x200, Size: 0x8] 0x78ce943e00
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 0x8] 0x78ce943e80
	void SetChildActorClass(class Actor InClass);// 0xaf3da1c 0x78ce927400

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x70, Size: 0x8] 0x78ce8e5800
	Object*[] CreateSubObjects;//[Offset: 0x160, Size: 0x10] 0x78ce8c34e0

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78ce8e7280
	float AnimLength;//[Offset: 0x8c, Size: 0x4] 0x78ce8e7300
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8] 0x78ce8e7380
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4] 0x78ce8e5300
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1] 0x78ce8e5380
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10] 0x78ce8c31c0
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4] 0x78ce8e5480
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10] 0x78ce8c3260
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10] 0x78ce8c3300
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20] 0x78ce8e5600

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4] 0x78cf07d180
	byte InterpolationType;//[Offset: 0x4, Size: 0x1] 0x78cf07d200

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x78cf07b700
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4] 0x78cf07b780

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8] 0x78cf07d480
	Vector SampleValue;//[Offset: 0x8, Size: 0xc] 0x78cf07d500
	float RateScale;//[Offset: 0x14, Size: 0x4] 0x78cf07d580

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4] 0x78cf07d600
	float Weights;//[Offset: 0xc, Size: 0x4] 0x78cf07d680

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10] 0x78cf07d280
	float Min;//[Offset: 0x10, Size: 0x4] 0x78cf07d300
	float Max;//[Offset: 0x14, Size: 0x4] 0x78cf07d380
	int GridNum;//[Offset: 0x18, Size: 0x4] 0x78cf07d400

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1] 0x78ce8e7200

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x78ce8e7180

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x220, Size: 0x8] 0x78ce8e6c00
	void Stop();// 0xaeb6b14 0x78ce8d9b60
	void Play(float StartTime);// 0xaeb6b28 0x78ce8d9c40
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0xaeb6cc0 0x78ce8d9d20
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0xaeb6db0 0x78ce8d9e00
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0xaeb6bd0 0x78ce8d9ee0

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 0x8] 0x78cea7f200
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 0x10] 0x78cf1eb1e0
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 0x8] 0x78cea7f300
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78cea7f380
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1] 0x78cea7f400
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1] 0x78cea7f480
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1] 0x78cea7f500
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 0x1] 0x78cea7f580
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 0x1] 0x78cea7f600
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 0x1] 0x78cea7f680
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 0x1] 0x78cea7f700
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1] 0x78cea7f780
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 0x1] 0x78cea7d700
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 0x1] 0x78cea7d780
	FName AudioComponentUserID;//[Offset: 0x220, Size: 0x8] 0x78cea7d800
	float PitchModulationMin;//[Offset: 0x228, Size: 0x4] 0x78cea7d880
	float PitchModulationMax;//[Offset: 0x22c, Size: 0x4] 0x78cea7d900
	float VolumeModulationMin;//[Offset: 0x230, Size: 0x4] 0x78cea7d980
	float VolumeModulationMax;//[Offset: 0x234, Size: 0x4] 0x78cea7da00
	float VolumeMultiplier;//[Offset: 0x238, Size: 0x4] 0x78cea7da80
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 0x4] 0x78cea7db00
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 0x4] 0x78cea7db80
	float Priority;//[Offset: 0x244, Size: 0x4] 0x78cea7dc00
	float SubtitlePriority;//[Offset: 0x248, Size: 0x4] 0x78cea7dc80
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 0x8] 0x78cea7dd00
	float PitchMultiplier;//[Offset: 0x258, Size: 0x4] 0x78cea7dd80
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 0x4] 0x78cea7de00
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 0x8] 0x78cea7de80
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 0x3a0] 0x78cea7df00
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 0x8] 0x78cea7df80
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 0x50] 0x78cf1eb280
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 0x1] 0x78cf1eb320
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 0x1] 0x78cf1eb3c0
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 0x1] 0x78cf1eb460
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 0x48] 0x78cea7e200
	delegate OnAudioPlayStateChanged;//[Offset: 0x6c0, Size: 0x10] 0x78cea7e280
	delegate OnAudioVirtualizationChanged;//[Offset: 0x6e8, Size: 0x10] 0x78cea7e300
	delegate OnAudioFinished;//[Offset: 0x710, Size: 0x10] 0x78cea7e380
	delegate OnAudioPlaybackPercent;//[Offset: 0x738, Size: 0x10] 0x78cea7e400
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x760, Size: 0x10] 0x78cea7e480
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x788, Size: 0x10] 0x78cea7e500
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 0x10] 0x78cea7e580
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 0x8] 0x78cea7e600
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 0x8] 0x78cea7e680
	void StopDelayed(float DelayTime);// 0xaef7140 0x78cea8a880
	void Stop();// 0xaef71e8 0x78cea8a960
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0xaef6cc4 0x78cea8aa40
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0xaef6a2c 0x78cea8ab20
	void SetUISound(bool bInUISound);// 0xaef68d4 0x78cea8ac00
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0xaef6720 0x78cea8ace0
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0xaef662c 0x78cea87400
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0xaef6538 0x78cea874e0
	void SetSound(SoundBase* NewSound);// 0xaef7884 0x78cea875c0
	void SetPitchMultiplier(float NewPitchMultiplier);// 0xaef6984 0x78cea876a0
	void SetPaused(bool bPause);// 0xaef7090 0x78cea87780
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xaef61f8 0x78cea87860
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xaef62a0 0x78cea87940
	void SetIntParameter(FName InName, int inInt);// 0xaef6ad4 0x78cea87a20
	void SetFloatParameter(FName InName, float InFloat);// 0xaef6db4 0x78cea87b00
	void SetBoolParameter(FName InName, bool InBool);// 0xaef6bc8 0x78cea87be0
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0xaef6444 0x78cea87cc0
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float SourceBusSendLevel);// 0xaef6350 0x78cea87da0
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0xaef7204 0x78cea87e80
	void Play(float StartTime);// 0xaef7500 0x78cea87f60
	bool IsVirtualized();// 0xaef7018 0x78cea88040
	bool IsPlaying();// 0xaef7050 0x78cea88120
	bool HasCookedFFTData();// 0xaef61c0 0x78cea88200
	bool HasCookedAmplitudeEnvelopeData();// 0xaef6188 0x78cea882e0
	enum GetPlayState();// 0xaef6fe4 0x78cea883c0
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0xaef5f58 0x78cea884a0
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0xaef6058 0x78cea88580
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0xaef5dcc 0x78cea88660
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0xaef5e98 0x78cea88740
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0xaef75b0 0x78cea88820
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0xaef76f4 0x78cea88900
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xaef5cf8 0x78cea889e0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0xaef6ea8 0x78cea88ac0
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0xaef6814 0x78cea88ba0

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78cf079d80
	float FloatParam;//[Offset: 0x8, Size: 0x4] 0x78cf079e00
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cf079e80
	int IntParam;//[Offset: 0x10, Size: 0x4] 0x78cf079f00
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8] 0x78cf079f80

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary);// 0xa286b6c 0x78ce888580
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject);// 0xa286ac4 0x78ce888660
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent);// 0xa286d70 0x78ce888740
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent);// 0xa286c60 0x78ce888820
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float TicksPerSecond);// 0xa286754 0x78ce888900
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float ThirtySecondsNotesPerMinute);// 0xa2863e4 0x78ce8889e0
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float SecondsPerTick);// 0xa28659c 0x78ce888ac0
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float MillisecondsPerTick);// 0xa28690c 0x78ce888ba0
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float BeatsPerMinute);// 0xa28622c 0x78ce888c80
	void ResumeClock(const Object* WorldContextObject);// 0xa286fdc 0x78ce888d60
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0xa286ecc 0x78ce888e40
	void PauseClock(const Object* WorldContextObject);// 0xa287084 0x78ce888f20
	float GetTicksPerSecond(const Object* WorldContextObject);// 0xa2860cc 0x78ce889000
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0xa285f6c 0x78ce885720
	float GetSecondsPerTick(const Object* WorldContextObject);// 0xa28601c 0x78ce885800
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0xa28617c 0x78ce8858e0
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0xa285ebc 0x78ce8859c0

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1] 0x78cf086dc0
	float Multiplier;//[Offset: 0x4, Size: 0x4] 0x78cf0d4180
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1] 0x78cf086e60

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10] 0x78cf087ea0
	float PlaybackTime;//[Offset: 0x10, Size: 0x4] 0x78cf0f0780
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x78cf0f0800

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x78cf0f0580
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x78cf0f0600
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4] 0x78cf0f0680

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4] 0x78cf0f0880
	float PlaybackTime;//[Offset: 0x4, Size: 0x4] 0x78cf0f0900
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8] 0x78cf0f0980

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4] 0x78ce8e6500
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10] 0x78ce8c2ea0
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78ce8e6600
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78ce8e6680
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78ce8e6700
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x78ce8e6780
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78ce8e6800
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78ce8e6880
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x78ce8e6900
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x58, Size: 0x10] 0x78ce8c2f40
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0x68, Size: 0x10] 0x78ce8c2fe0
	<FName,enum> AttributeBlendModes;//[Offset: 0x78, Size: 0x50] 0x78cee13dc0
	enum DefaultAttributeBlendMode;//[Offset: 0xc8, Size: 0x1] 0x78ce8c3120

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cf0a0480
	FString Meaning;//[Offset: 0x10, Size: 0x10] 0x78cf0a0500

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8] 0x78ce8e8400
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10] 0x78ce8c2e00
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78ce8e6400
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78ce8e6480

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf071b00
	LinearColor Color;//[Offset: 0x8, Size: 0x10] 0x78cf071b80

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x260, Size: 0x4] 0x78ce85df80
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78ce85e000
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x78ce85e080
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x268, Size: 0x10] 0x78ce72bdc0
	ActorComponent*[] ComponentTemplates;//[Offset: 0x278, Size: 0x10] 0x78ce72be60
	TimelineTemplate*[] Timelines;//[Offset: 0x288, Size: 0x10] 0x78ce72bf00
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x298, Size: 0x10] 0x78ce72bfa0
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x2a8, Size: 0x8] 0x78ce85e300
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x2b0, Size: 0x8] 0x78ce85e380
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x2b8, Size: 0x8] 0x78ce85e400
	Function* UberGraphFunction;//[Offset: 0x2c8, Size: 0x8] 0x78ce85e480
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x2d0, Size: 0x50] 0x78cee14000

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x360, Size: 0x10] 0x78ce8c2b80
	Skeleton* TargetSkeleton;//[Offset: 0x370, Size: 0x8] 0x78ce8e7e80
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x378, Size: 0x10] 0x78ce8c2c20
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x388, Size: 0x50] 0x78cee13b80
	FName[] SyncGroupNames;//[Offset: 0x458, Size: 0x10] 0x78ce8c2cc0
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x468, Size: 0x10] 0x78ce8c2d60
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x478, Size: 0x50] 0x78cee13c40
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x4c8, Size: 0x50] 0x78cee13d00
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x518, Size: 0xc8] 0x78ce8e8380

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8] 0x78cf077a80
	int InitialState;//[Offset: 0x8, Size: 0x4] 0x78cf077b00
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10] 0x78cf080600
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10] 0x78cf080740

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x78cf077b80
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10] 0x78cf080420
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4] 0x78cf077f80
	int StartNotify;//[Offset: 0x1c, Size: 0x4] 0x78cf078000
	int EndNotify;//[Offset: 0x20, Size: 0x4] 0x78cf078080
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4] 0x78cf078100
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf078180
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4] 0x78cf078200
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10] 0x78cf0804c0
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10] 0x78cf080560
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cf078380

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4] 0x78cf077c00
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4] 0x78cf077c80
	int TransitionIndex;//[Offset: 0x8, Size: 0x4] 0x78cf077d00
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cf077d80
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x78cf077e00
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0x10] 0x78cf080380

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4] 0x78cf076380
	int NextState;//[Offset: 0xc, Size: 0x4] 0x78cf076400
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4] 0x78cf076480
	int StartNotify;//[Offset: 0x14, Size: 0x4] 0x78cf076500
	int EndNotify;//[Offset: 0x18, Size: 0x4] 0x78cf076580
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4] 0x78cf076600
	enum BlendMode;//[Offset: 0x20, Size: 0x1] 0x78cf0806a0
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8] 0x78cf076700
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8] 0x78cf076780
	byte LogicType;//[Offset: 0x38, Size: 0x1] 0x78cf076800

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x78cf076880

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10] 0x78cefde480

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 0x8] 0x78cf075580
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 0x10] 0x78cf081320
	Function* Function;//[Offset: 0x18, Size: 0x8] 0x78cf075780
	FieldPathProperty ValueHandlerNodeProperty;//[Size: 0x20] 0x78cf075800

--------------------------------
Class: ExposedValueCopyRecord
	int CopyIndex;//[Offset: 0x0, Size: 0x4] 0x78cf075600
	enum PostCopyOperation;//[Offset: 0x4, Size: 0x1] 0x78cf081280

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10] 0x78cefde520

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x78cf071880
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x78cf071900

--------------------------------
Class: PropertyAccessLibrary
	PropertyAccessSegment[] PathSegments;//[Offset: 0x0, Size: 0x10] 0x78cefdcea0
	PropertyAccessPath[] SrcPaths;//[Offset: 0x10, Size: 0x10] 0x78cefdcf40
	PropertyAccessPath[] DestPaths;//[Offset: 0x20, Size: 0x10] 0x78cefdcfe0
	PropertyAccessCopyBatch CopyBatches;//[Offset: 0x30, Size: 0x10] 0x78cf059780
	PropertyAccessIndirectionChain[] SrcAccesses;//[Offset: 0x70, Size: 0x10] 0x78cefdd1c0
	PropertyAccessIndirectionChain[] DestAccesses;//[Offset: 0x80, Size: 0x10] 0x78cefdd260
	PropertyAccessIndirection[] Indirections;//[Offset: 0x90, Size: 0x10] 0x78cefdd440
	int[] EventAccessIndices;//[Offset: 0xa0, Size: 0x10] 0x78cefdd4e0

--------------------------------
Class: PropertyAccessSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf05b000
	Struct* Struct;//[Offset: 0x8, Size: 0x8] 0x78cf05b080
	FieldPathProperty Property;//[Size: 0x20] 0x78cf05b100
	Function* Function;//[Offset: 0x30, Size: 0x8] 0x78cf05b180
	int ArrayIndex;//[Offset: 0x38, Size: 0x4] 0x78cf05b200
	uint16 Flags;//[Offset: 0x3c, Size: 0x2] 0x78cf05b280

--------------------------------
Class: PropertyAccessPath
	int PathSegmentStartIndex;//[Offset: 0x0, Size: 0x4] 0x78cf05b400
	int PathSegmentCount;//[Offset: 0x4, Size: 0x4] 0x78cf05b480
	bool bHasEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf05b500

--------------------------------
Class: PropertyAccessCopyBatch
	PropertyAccessCopy[] Copies;//[Offset: 0x0, Size: 0x10] 0x78cefdd120

--------------------------------
Class: PropertyAccessCopy
	int AccessIndex;//[Offset: 0x0, Size: 0x4] 0x78cf059500
	int DestAccessStartIndex;//[Offset: 0x4, Size: 0x4] 0x78cf059580
	int DestAccessEndIndex;//[Offset: 0x8, Size: 0x4] 0x78cf059600
	enum Type;//[Offset: 0xc, Size: 0x1] 0x78cefdd080

--------------------------------
Class: PropertyAccessIndirectionChain
	FieldPathProperty Property;//[Size: 0x20] 0x78cf059880
	int IndirectionStartIndex;//[Offset: 0x20, Size: 0x4] 0x78cf059900
	int IndirectionEndIndex;//[Offset: 0x24, Size: 0x4] 0x78cf059980
	int EventId;//[Offset: 0x28, Size: 0x4] 0x78cf059a00

--------------------------------
Class: PropertyAccessIndirection
	FieldPathProperty ArrayProperty;//[Size: 0x20] 0x78cf059b00
	Function* Function;//[Offset: 0x20, Size: 0x8] 0x78cf059b80
	int ReturnBufferSize;//[Offset: 0x28, Size: 0x4] 0x78cf059c00
	int ReturnBufferAlignment;//[Offset: 0x2c, Size: 0x4] 0x78cf059c80
	int ArrayIndex;//[Offset: 0x30, Size: 0x4] 0x78cf059d00
	uint32 Offset;//[Offset: 0x34, Size: 0x4] 0x78cf059d80
	enum ObjectType;//[Offset: 0x38, Size: 0x1] 0x78cefdd300
	enum Type;//[Offset: 0x39, Size: 0x1] 0x78cefdd3a0

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10] 0x78ce8c4c00
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8] 0x78ce8e9400
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10] 0x78ce8c4ca0
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50] 0x78cee13940
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10] 0x78ce8c4d40
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10] 0x78ce8c4de0
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10] 0x78ce8c4e80
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10] 0x78ce8c4f20
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10] 0x78ce8c4fc0
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10] 0x78ce8c5060
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10] 0x78ce8c5100
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10] 0x78ce8c51a0
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10] 0x78ce8c5240
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50] 0x78cee13a00
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10] 0x78ce8c29a0
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x208, Size: 0x10] 0x78ce8c2a40
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x218, Size: 0x50] 0x78cee13ac0
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x268, Size: 0xc8] 0x78ce8e7c80

--------------------------------
Class: AnimBlueprintFunction
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf071480
	FName Group;//[Offset: 0x8, Size: 0x8] 0x78cf071500
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4] 0x78cf071580
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10] 0x78cefde340
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10] 0x78cefde3e0
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cf071700

--------------------------------
Class: AnimBlueprintFunctionData
	FieldPathProperty OutputPoseNodeProperty;//[Size: 0x20] 0x78cf071980
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10] 0x78cefde5c0
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10] 0x78cefde660

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10] 0x78ce8e9080

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce8e8e80
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1] 0x78ce8e8f00
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1] 0x78ce8e8f80
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1] 0x78ce8e9000

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x78ce8e8a00
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x78ce8e8a80
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x78ce8e8b00
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4] 0x78ce8e8b80
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4] 0x78ce8e8c00
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4] 0x78ce8e8c80
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4] 0x78ce8e8d00
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78ce8e8d80
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78ce8e8e00

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4] 0x78ce8ea080
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4] 0x78ce8ea100
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4] 0x78ce8ea180
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4] 0x78ce8ea200
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10] 0x78ce8c4980
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10] 0x78ce8c4a20
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10] 0x78ce8c4ac0
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce8ea400
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4] 0x78ce8ea480
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4] 0x78ce8ea500
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78ce8e8480
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78ce8e8500
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4] 0x78ce8e8580
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4] 0x78ce8e8600
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4] 0x78ce8e8680
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x78ce8e8700
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4] 0x78ce8e8780
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4] 0x78ce8e8800
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4] 0x78ce8e8880
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4] 0x78ce8e8900
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4] 0x78ce8e8980

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object
	int MinKeys;//[Offset: 0x3c, Size: 0x4] 0x78ce8e9f80
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78ce8ea000

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x78ce8e9e00
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x78ce8e9e80
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x78ce8e9f00

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimLayerInterface.Interface.Object

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8] 0x78ce8eb180
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78ce8eb200
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78ce8eb280
	Vector Scale;//[Offset: 0x58, Size: 0xc] 0x78ce8eb300
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce8eb380
	FName SocketName;//[Offset: 0x84, Size: 0x8] 0x78ce8eb400

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8] 0x78ce8eaf00
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4] 0x78ce8eaf80
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4] 0x78ce8eb000
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce8eb080
	FName AttachName;//[Offset: 0x4c, Size: 0x8] 0x78ce8eb100

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x78ce8eac80
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x78ce8ead00
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78ce8ead80
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78ce8eae00
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78ce8eae80

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x78ce8ea800
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8] 0x78ce8ea880
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8] 0x78ce8ea900
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1] 0x78ce8ea980
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8] 0x78ce8eaa00
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78ce8eaa80
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x8a873f8 0x78ce8d98c0

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce8ebc00
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10] 0x78ce8c4020
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10] 0x78ce8c40c0
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10] 0x78ce8c4160
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10] 0x78ce8c4200
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10] 0x78ce8c42a0
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10] 0x78ce8c4340
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8] 0x78ce8ebf80
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8] 0x78ce8ec000

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10] 0x78cf0807e0

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x2b8, Size: 0x8] 0x78ce8ed180
	delegate PostEvaluateAnimEvent;//[Offset: 0x2c0, Size: 0x10] 0x78ce8ed200
	void StopAnim();// 0xaee1a84 0x78ce8dc720
	void SetReverse(bool bInReverse);// 0xaee1fa4 0x78ce8dc800
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0xaee17b8 0x78ce8dc8e0
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0xaee1d64 0x78ce8dc9c0
	void SetPosition(float InPosition, bool bFireNotifies);// 0xaee1ea8 0x78ce8d90e0
	void SetPlayRate(float InPlayRate);// 0xaee2054 0x78ce8d91c0
	void SetPlaying(bool bIsPlaying);// 0xaee1c04 0x78ce8d92a0
	void SetLooping(bool bIsLooping);// 0xaee20fc 0x78ce8d9380
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0xaee1cb4 0x78ce8d9460
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0xaee1940 0x78ce8d9540
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0xaee1a98 0x78ce8d9620
	float GetLength();// 0xaee1bd0 0x78ce8d9700
	AnimationAsset* GetAnimationAsset();// 0xaee1904 0x78ce8d97e0

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4] 0x78ce8ecd00
	enum Interpolation;//[Offset: 0xac, Size: 0x1] 0x78ce8c3f80
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8] 0x78ce8ece00
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8] 0x78ce8ece80
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x78ce8ecf00
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x78ce8ecf80
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1] 0x78ce8ed000
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x78ce8ed080
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1] 0x78ce8ed100

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb0, Size: 0x10] 0x78cf50a800
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc0, Size: 0x10] 0x78cf50a880
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd0, Size: 0x10] 0x78cf50a900
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0, Size: 0x10] 0x78cf50a980
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf0, Size: 0x10] 0x78cf50aa00
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x100, Size: 0x10] 0x78cf50aa80
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x110, Size: 0x10] 0x78cf50ab80
	delegate OnTemperatureChangeDelegate;//[Offset: 0x120, Size: 0x10] 0x78cf50ac80
	delegate OnLowPowerModeDelegate;//[Offset: 0x130, Size: 0x10] 0x78cf50ad80

--------------------------------
Class: PhysicsSettingsCore.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4] 0x78ce713800
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4] 0x78ce713880
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4] 0x78ce713900
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4] 0x78ce713980
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4] 0x78ce713a00
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4] 0x78ce713a80
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78ce713b00
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78ce713b80
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78ce713c00
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x78ce713c80
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78ce713d00
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78ce713d80
	float BounceThresholdVelocity;//[Offset: 0x58, Size: 0x4] 0x78ce713e00
	byte FrictionCombineMode;//[Offset: 0x5c, Size: 0x1] 0x78ce713e80
	byte RestitutionCombineMode;//[Offset: 0x5d, Size: 0x1] 0x78ce713f00
	float MaxAngularVelocity;//[Offset: 0x60, Size: 0x4] 0x78ce713f80
	float MaxDepenetrationVelocity;//[Offset: 0x64, Size: 0x4] 0x78ce714000
	float ContactOffsetMultiplier;//[Offset: 0x68, Size: 0x4] 0x78ce714080
	float MinContactOffset;//[Offset: 0x6c, Size: 0x4] 0x78ce714100
	float MaxContactOffset;//[Offset: 0x70, Size: 0x4] 0x78ce714180
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78ce714200
	byte DefaultShapeComplexity;//[Offset: 0x75, Size: 0x1] 0x78ce712180
	ChaosSolverConfiguration SolverOptions;//[Offset: 0x78, Size: 0x68] 0x78ce712200

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4] 0x78cefef280
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4] 0x78cefef300
	int PushOutIterations;//[Offset: 0x8, Size: 0x4] 0x78cefef380
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4] 0x78cefef400
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4] 0x78cefef480
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4] 0x78cefef500
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4] 0x78cefef580
	int JointPairIterations;//[Offset: 0x1c, Size: 0x4] 0x78cefef600
	int JointPushOutPairIterations;//[Offset: 0x20, Size: 0x4] 0x78cefef680
	float ClusterConnectionFactor;//[Offset: 0x24, Size: 0x4] 0x78cefef700
	enum ClusterUnionConnectionType;//[Offset: 0x28, Size: 0x1] 0x78cefd63c0
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cefed700
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2c, Size: 0x10] 0x78cefed980
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78cefeda00
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x40, Size: 0x10] 0x78cefedc80
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cefedd00
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x54, Size: 0x10] 0x78cefedf80
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78cefee000

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefed780
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78cefed800
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78cefed880
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x78cefed900

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefeda80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78cefedb00
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78cefedb80
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x78cefedc00

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefedd80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78cefede00
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78cefede80
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x78cefedf00

--------------------------------
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0xe0, Size: 0x34] 0x78ce381380
	byte LockedAxis;//[Offset: 0x114, Size: 0x1] 0x78ce381400
	byte DefaultDegreesOfFreedom;//[Offset: 0x115, Size: 0x1] 0x78ce381480
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 0x1] 0x78ce381500
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 0x1] 0x78ce381580
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78ce381600
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78ce381680
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78ce381700
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78ce381780
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x78ce381800
	float AnimPhysicsMinDeltaTime;//[Offset: 0x120, Size: 0x4] 0x78ce381880
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1] 0x78ce381900
	float MaxPhysicsDeltaTime;//[Offset: 0x128, Size: 0x4] 0x78ce381980
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78ce381a00
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1] 0x78ce381a80
	float MaxSubstepDeltaTime;//[Offset: 0x130, Size: 0x4] 0x78ce381b00
	int MaxSubsteps;//[Offset: 0x134, Size: 0x4] 0x78ce381b80
	float SyncSceneSmoothingFactor;//[Offset: 0x138, Size: 0x4] 0x78ce381c00
	float InitialAverageFrameRate;//[Offset: 0x13c, Size: 0x4] 0x78ce381c80
	int PhysXTreeRebuildRate;//[Offset: 0x140, Size: 0x4] 0x78ce381d00
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x148, Size: 0x10] 0x78ce9d5ce0
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0x158, Size: 0x40] 0x78ce381e00
	float MinDeltaVelocityForHitEvents;//[Offset: 0x198, Size: 0x4] 0x78ce381e80
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x19c, Size: 0x3] 0x78ce381f00

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4] 0x78cf0aa180
	float PingLimit;//[Offset: 0x4, Size: 0x4] 0x78cf0aa200
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4] 0x78cf0aa280
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4] 0x78cf0aa300
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4] 0x78cf0aa380
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4] 0x78cf0aa400
	float PositionLerp;//[Offset: 0x18, Size: 0x4] 0x78cf0aa480
	float AngleLerp;//[Offset: 0x1c, Size: 0x4] 0x78cf0aa500
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4] 0x78cf0a8480
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4] 0x78cf0a8500
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4] 0x78cf0a8580
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4] 0x78cf0a8600
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4] 0x78cf0a8680

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78cf0d0400
	FName Name;//[Offset: 0x4, Size: 0x8] 0x78cf0d0480

--------------------------------
Class: ChaosPhysicsSettings
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1] 0x78cf0875e0
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1] 0x78cf087680
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1] 0x78cf087720

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10] 0x78ce8ca380
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10] 0x78ce8ca420
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10] 0x78ce8ca4c0
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10] 0x78ce8c7c20
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10] 0x78ce8c7cc0

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf09c680
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x78cf09c700
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78cf09c780
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8] 0x78cf09c800
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10] 0x78cf083940

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x78cf09c900
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1] 0x78cf09c980
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cf09ca00
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cf09ca80
	FName Name;//[Offset: 0x4, Size: 0x8] 0x78cf09cb00

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf09cb80
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10] 0x78cf0839e0

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8] 0x78cf0a6300
	FName NewName;//[Offset: 0x8, Size: 0x8] 0x78cf0a4280

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x440, Size: 0x4] 0x78ce8ec980
	float ArrowSize;//[Offset: 0x444, Size: 0x4] 0x78ce8eca00
	float ArrowLength;//[Offset: 0x448, Size: 0x4] 0x78ce8eca80
	float ScreenSize;//[Offset: 0x44c, Size: 0x4] 0x78ce8ecb00
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1] 0x78ce8ecb80
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 0x1] 0x78ce8ecc00
	void SetArrowColor(LinearColor NewColor);// 0xaee9310 0x78ce8dc640

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8] 0x78ce8ee480
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8] 0x78ce8ee500
	FString Filename;//[Offset: 0x38, Size: 0x10] 0x78ce8ee580
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ce8ee600
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78ce8ee680
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78ce8ee700
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x78ce8ec680
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78ce8ec700
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78ce8ec780
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10] 0x78ce8c3e40
	Object* Options;//[Offset: 0x60, Size: 0x8] 0x78ce8ec880
	FString[] Errors;//[Offset: 0x68, Size: 0x10] 0x78ce8c3ee0

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8] 0x78ce8ca600
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8] 0x78ce98aa80
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10] 0x78ce8ca6a0
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10] 0x78ce8ca740
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4] 0x78ce98ac00
	int TextIndent;//[Offset: 0x5c, Size: 0x4] 0x78ce98ac80
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78ce98ad00
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78ce98ad80
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78ce98ae00
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8] 0x78ce98ae80
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0x8a873f8 0x78ce991580
	static bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0xaf877cc 0x78ce991660
	static bool RunAssetExportTask(AssetExportTask* Task);// 0xaf87890 0x78ce991740

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10] 0x78ce8c66e0
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x78ce8ede00
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1] 0x78ce8ede80
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1] 0x78ce8edf00
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1] 0x78ce8edf80
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x78ce8ee000
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1] 0x78ce8ee080
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1] 0x78ce8ee100
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1] 0x78ce8ee180
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78ce8ee200
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x78ce8ee280
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1] 0x78ce8ee300
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1] 0x78ce8ee380
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4] 0x78ce8ee400

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10] 0x78ce8c61e0
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10] 0x78ce8c6280
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10] 0x78ce8c6320
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10] 0x78ce8c63c0
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78ce8ed980
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78ce8eda00
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x78ce8eda80
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x78ce8edb00
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10] 0x78ce8c6460
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10] 0x78ce8c6500
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10] 0x78ce8c65a0
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50] 0x78ce8c6640

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x78cf078980
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28] 0x78cf082720
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x8] 0x78cf0827c0
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cf078a00
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78cf078a80
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10] 0x78cf082860
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10] 0x78cf082900
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0xc] 0x78cf078c00
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10] 0x78cf080060
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x78cf078d00
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4] 0x78cf078d80

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10] 0x78cef82500

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4] 0x78cf079180
	int ChunkId;//[Offset: 0x4, Size: 0x4] 0x78cf079200
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf079280
	enum CookRule;//[Offset: 0x9, Size: 0x1] 0x78cf080100

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10] 0x78cf078f00
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0xc] 0x78cf078f80

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x78ea087880
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8] 0x78ea087900

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78ea087980

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x78cf079000
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10] 0x78cf079080
	FString FilterString;//[Offset: 0x18, Size: 0x10] 0x78cf079100
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0xc] 0x78cf079380

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10] 0x78cf078e00
	FString New;//[Offset: 0x10, Size: 0x10] 0x78cf078e80

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10] 0x78ce8c6140

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8] 0x78cf078880
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8] 0x78cf078900

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0xaf07ca0 0x78cee27da0

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x78ce8ef280
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8] 0x78ce8ef300
	static AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0xaef0958 0x78ce8dc480
	static AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0xaef080c 0x78ce8dc560

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78ce8ef000
	static AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0xaef1550 0x78ce8dc3a0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78ce8eed80
	static AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0xaef1b78 0x78ce8dc2c0

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78ce8eeb00
	static AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0xaef21a0 0x78ce8dc1e0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78ce8ee880
	static AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0xaef27d8 0x78ce8dc100

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78ce8efc00
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0xaef2e10 0x78ce8dbf40
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0xaef2fdc 0x78ce8dc020

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x220, Size: 0x8] 0x78ce8efb80

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x1f4, Size: 0x4] 0x78ce910400
	float FogMultiplier;//[Offset: 0x1f8, Size: 0x4] 0x78ce910480
	float DensityMultiplier;//[Offset: 0x1fc, Size: 0x4] 0x78ce910500
	float DensityOffset;//[Offset: 0x200, Size: 0x4] 0x78ce910580
	float DistanceScale;//[Offset: 0x204, Size: 0x4] 0x78ce910600
	float AltitudeScale;//[Offset: 0x208, Size: 0x4] 0x78ce910680
	float DistanceOffset;//[Offset: 0x20c, Size: 0x4] 0x78ce910700
	float GroundOffset;//[Offset: 0x210, Size: 0x4] 0x78ce910780
	float StartDistance;//[Offset: 0x214, Size: 0x4] 0x78ce910800
	float SunDiscScale;//[Offset: 0x218, Size: 0x4] 0x78ce910880
	float DefaultBrightness;//[Offset: 0x21c, Size: 0x4] 0x78ce910900
	Color DefaultLightColor;//[Offset: 0x220, Size: 0x4] 0x78ce910980
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x78ce910a00
	bool bAtmosphereAffectsSunIlluminance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1] 0x78ce910a80
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1] 0x78ce910b00
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x228, Size: 0x2c] 0x78ce910b80
	Texture2D* TransmittanceTexture;//[Offset: 0x258, Size: 0x8] 0x78ce910c00
	Texture2D* IrradianceTexture;//[Offset: 0x260, Size: 0x8] 0x78ce910c80
	void StartPrecompute();// 0xaef3d44 0x78ce8db300
	void SetSunMultiplier(float NewSunMultiplier);// 0xaef448c 0x78ce8db3e0
	void SetStartDistance(float NewStartDistance);// 0xaef409c 0x78ce8db4c0
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0xaef3d58 0x78ce8db5a0
	void SetFogMultiplier(float NewFogMultiplier);// 0xaef43e4 0x78ce8db680
	void SetDistanceScale(float NewDistanceScale);// 0xaef41ec 0x78ce8db760
	void SetDistanceOffset(float NewDistanceOffset);// 0xaef3ff4 0x78ce8db840
	void SetDensityOffset(float NewDensityOffset);// 0xaef4294 0x78ce8db920
	void SetDensityMultiplier(float NewDensityMultiplier);// 0xaef433c 0x78ce8dba00
	void SetDefaultLightColor(LinearColor NewLightColor);// 0xaef4534 0x78ce8dbae0
	void SetDefaultBrightness(float NewBrightness);// 0xaef45dc 0x78ce8dbbc0
	void SetAltitudeScale(float NewAltitudeScale);// 0xaef4144 0x78ce8dbca0
	void DisableSunDisk(bool NewSunDisk);// 0xaef3f44 0x78ce8dbd80
	void DisableGroundScattering(bool NewGroundScattering);// 0xaef3e94 0x78ce8dbe60

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0, Size: 0x4] 0x78cf07a400
	float DecayHeight;//[Offset: 0x4, Size: 0x4] 0x78cf07a480
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4] 0x78cf07a500
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4] 0x78cf078480
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4] 0x78cf078500
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4] 0x78cf078580
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4] 0x78cf078600
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4] 0x78cf078680
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4] 0x78cf078700
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4] 0x78cf078780
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4] 0x78cf078800

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18] 0x78ce911980
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18] 0x78ce911a00
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18] 0x78ce911a80
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18] 0x78ce911b00
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18] 0x78ce911b80
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18] 0x78ce911c00
	SoftObjectPath ReverbSubmix;//[Offset: 0xc8, Size: 0x18] 0x78ce911c80
	SoftObjectPath EQSubmix;//[Offset: 0xe0, Size: 0x18] 0x78ce911d00
	enum VoiPSampleRate;//[Offset: 0xf8, Size: 0x4] 0x78ce8c5740
	float DefaultReverbSendLevel;//[Offset: 0xfc, Size: 0x4] 0x78ce911e00
	int MaximumConcurrentStreams;//[Offset: 0x100, Size: 0x4] 0x78ce911e80
	float GlobalMinPitchScale;//[Offset: 0x104, Size: 0x4] 0x78ce911f00
	float GlobalMaxPitchScale;//[Offset: 0x108, Size: 0x4] 0x78ce911f80
	AudioQualitySettings[] QualityLevels;//[Offset: 0x110, Size: 0x10] 0x78ce8c57e0
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78ce912080
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1] 0x78ce912100
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 0x1] 0x78ce910080
	uint32 NumStoppingSources;//[Offset: 0x124, Size: 0x4] 0x78ce910100
	enum PanningMethod;//[Offset: 0x128, Size: 0x1] 0x78ce8c5880
	enum MonoChannelUpmixMethod;//[Offset: 0x129, Size: 0x1] 0x78ce8c5920
	FString DialogueFilenameFormat;//[Offset: 0x130, Size: 0x10] 0x78ce910280

--------------------------------
Class: AudioQualitySettings
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x78cf079c80
	int MaxChannels;//[Offset: 0x18, Size: 0x4] 0x78cf079d00

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x258, Size: 0x4] 0x78ce911380
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1] 0x78ce911400
	ReverbSettings Settings;//[Offset: 0x260, Size: 0x20] 0x78ce911480
	InteriorSettings AmbientZoneSettings;//[Offset: 0x280, Size: 0x24] 0x78ce911500
	AudioVolumeSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2a8, Size: 0x10] 0x78ce8c54c0
	AudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings;//[Offset: 0x2b8, Size: 0x10] 0x78ce8c5560
	void SetSubmixSendSettings(out const AudioVolumeSubmixSendSettings[] NewSubmixSendSettings);// 0xaefbc74 0x78ce8de6a0
	void SetSubmixOverrideSettings(out const AudioVolumeSubmixOverrideSettings[] NewSubmixOverrideSettings);// 0xaefbb78 0x78ce8dadc0
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0xaefbe80 0x78ce8daea0
	void SetPriority(float NewPriority);// 0xaefbff8 0x78ce8daf80
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0xaefbdc8 0x78ce8db060
	void SetEnabled(bool bNewEnabled);// 0xaefbf48 0x78ce8db140
	void OnRep_bEnabled();// 0xaefbb5c 0x78ce8db220

--------------------------------
Class: AudioVolumeSubmixSendSettings
	enum ListenerLocationState;//[Offset: 0x0, Size: 0x1] 0x78cf082220
	enum SourceLocationState;//[Offset: 0x1, Size: 0x1] 0x78cf0822c0
	SoundSubmixSendInfo[] SubmixSends;//[Offset: 0x8, Size: 0x10] 0x78cf0824a0

--------------------------------
Class: AudioVolumeSubmixOverrideSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8] 0x78cf079680
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x8, Size: 0x10] 0x78cf082540
	float CrossfadeTime;//[Offset: 0x18, Size: 0x4] 0x78cf079780

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: AutoDestroySubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x38, Size: 0x10] 0x78ce8c5420
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0xaefc7b4 0x78ce8de5c0

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10] 0x78ce8c77c0
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10] 0x78ce8c7860
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18] 0x78ce912c00
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10] 0x78ce8c7900
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x70, Size: 0x10] 0x78ce8c79a0
	FString[] MapsToPIETest;//[Offset: 0x80, Size: 0x10] 0x78ce8c7a40
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x90, Size: 0x1f0] 0x78ce912e00
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x280, Size: 0x30] 0x78ce912e80
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2b0, Size: 0x10] 0x78ce912f00
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2c0, Size: 0x30] 0x78ce912f80
	FString[] TestLevelFolders;//[Offset: 0x2f0, Size: 0x10] 0x78ce8c7ae0
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x300, Size: 0x10] 0x78ce8c7b80
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x310, Size: 0x10] 0x78ce8c52e0
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x320, Size: 0x10] 0x78ce8c5380
	IntPoint DefaultScreenshotResolution;//[Offset: 0x330, Size: 0x8] 0x78ce911100
	float PIETestDuration;//[Offset: 0x338, Size: 0x4] 0x78ce911180

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18] 0x78cf07af80
	int TestTimer;//[Offset: 0x18, Size: 0x4] 0x78cf07b000

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10] 0x78cf07c280
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150] 0x78cf07a980
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60] 0x78cf07ad00
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20] 0x78cf07ae80
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10] 0x78cf07af00

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10] 0x78cef82200

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20] 0x78cf07c300
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20] 0x78cf07c380
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20] 0x78cf07c400
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20] 0x78cf07c480
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20] 0x78cf07c500
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20] 0x78cf07c580
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20] 0x78cf07c600
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20] 0x78cf07a580
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20] 0x78cf07a600
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20] 0x78cf07a680
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10] 0x78cf082180

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x78cf07a700
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10] 0x78cf0820e0

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10] 0x78cf07a780
	FString Value;//[Offset: 0x10, Size: 0x10] 0x78cf07a800

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10] 0x78cf07aa00
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10] 0x78cf07aa80
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10] 0x78cf07ab00
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10] 0x78cf07ab80
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10] 0x78cf07ac00
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10] 0x78cf07ac80

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10] 0x78cf07ad80
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10] 0x78cf07ae00

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10] 0x78cf07bf00
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10] 0x78cf07bf80
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10] 0x78cf07c000

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10] 0x78cf07c080

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10] 0x78cf07c100
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10] 0x78cf07c180
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10] 0x78cf07c200

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10] 0x78cf07ba00
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10] 0x78cf07ba80
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10] 0x78cf07bb00
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10] 0x78cf07bb80
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10] 0x78cf07bc00
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10] 0x78cf07bc80

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x78cf07bd00
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10] 0x78cf07bd80
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cf07be00
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10] 0x78cf082040

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10] 0x78cf07b080
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x78cf07b100

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x220, Size: 0x20] 0x78ce912380

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10] 0x78cf081fa0

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10] 0x78cf081f00

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintExtension.Object

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	static void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0xaf0a4fc 0x78ce8dda60
	static void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0xaf0a3f4 0x78ce8ddb40
	static bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0xaf0a238 0x78ce8ddc20
	static int Map_Length(out const <int,int> TargetMap);// 0xaf0a194 0x78ce8ddd00
	static void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0xaf0a08c 0x78ce8ddde0
	static bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0xaf09db0 0x78ce8ddec0
	static bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0xaf09bf0 0x78ce8ddfa0
	static void Map_Clear(out const <int,int> TargetMap);// 0xaf09b58 0x78ce8de080
	static void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0xaf098c8 0x78ce8de160

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	static FString VideoCaptureDir();// 0xaf13288 0x78ce9237a0
	static void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0xaf10ac0 0x78ce923880
	static void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0xaf108f8 0x78ce923960
	static FString SourceConfigDir();// 0xaf136a8 0x78ce920080
	static bool ShouldSaveToUserDir();// 0xaf14760 0x78ce920160
	static FString ShaderWorkingDir();// 0xaf139a0 0x78ce920240
	static void SetProjectFilePath(FString NewGameProjectFilePath);// 0xaf126b4 0x78ce920320
	static FString SetExtension(FString InPath, FString InNewExtension);// 0xaf11f9c 0x78ce920400
	static FString ScreenShotDir();// 0xaf133e8 0x78ce9204e0
	static FString SandboxesDir();// 0xaf13548 0x78ce9205c0
	static FString RootDir();// 0xaf13e70 0x78ce9206a0
	static void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0xaf11778 0x78ce920780
	static FString ProjectUserDir();// 0xaf13d10 0x78ce920860
	static FString ProjectSavedDir();// 0xaf13b00 0x78ce920940
	static FString ProjectPluginsDir();// 0xaf138f0 0x78ce920a20
	static FString ProjectPersistentDownloadDir();// 0xaf13758 0x78ce920b00
	static FString ProjectModsDir();// 0xaf13840 0x78ce920be0
	static FString ProjectLogDir();// 0xaf131d8 0x78ce920cc0
	static FString ProjectIntermediateDir();// 0xaf13a50 0x78ce920da0
	static FString ProjectDir();// 0xaf13dc0 0x78ce920e80
	static FString ProjectContentDir();// 0xaf13c60 0x78ce920f60
	static FString ProjectConfigDir();// 0xaf13bb0 0x78ce921040
	static FString ProfilingDir();// 0xaf13498 0x78ce921120
	static void NormalizeFilename(FString InPath, out FString OutPath);// 0xaf11bb4 0x78ce921200
	static void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0xaf1199c 0x78ce9212e0
	static FString MakeValidFileName(FString inString, FString InReplacementChar);// 0xaf10c70 0x78ce9213c0
	static void MakeStandardFilename(FString InPath, out FString OutPath);// 0xaf11670 0x78ce9214a0
	static void MakePlatformFilename(FString InPath, out FString OutPath);// 0xaf11568 0x78ce921580
	static bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0xaf113f4 0x78ce921660
	static FString LaunchDir();// 0xaf146b0 0x78ce921740
	static bool IsSamePath(FString PathA, FString PathB);// 0xaf11aa4 0x78ce921820
	static bool IsRestrictedPath(FString InPath);// 0xaf12b00 0x78ce921900
	static bool IsRelative(FString InPath);// 0xaf11cbc 0x78ce9219e0
	static bool IsProjectFilePathSet();// 0xaf12808 0x78ce921ac0
	static bool IsDrive(FString InPath);// 0xaf11d74 0x78ce921ba0
	static bool HasProjectPersistentDownloadDir();// 0xaf13808 0x78ce921c80
	static FString[] GetToolTipLocalizationPaths();// 0xaf12c28 0x78ce8de780
	static FString[] GetRestrictedFolderNames();// 0xaf12bb8 0x78ce8de860
	static FString GetRelativePathToRoot();// 0xaf10874 0x78ce8de940
	static FString[] GetPropertyNameLocalizationPaths();// 0xaf12c60 0x78ce8dea20
	static FString GetProjectFilePath();// 0xaf12758 0x78ce8deb00
	static FString GetPath(FString InPath);// 0xaf12234 0x78ce8debe0
	static FString GetInvalidFileSystemChars();// 0xaf10dbc 0x78ce8decc0
	static FString[] GetGameLocalizationPaths();// 0xaf12bf0 0x78ce8deda0
	static FString GetExtension(FString InPath, bool bIncludeDot);// 0xaf12568 0x78ce8dee80
	static FString[] GetEngineLocalizationPaths();// 0xaf12cd0 0x78ce8def60
	static FString[] GetEditorLocalizationPaths();// 0xaf12c98 0x78ce8df040
	static FString GetCleanFilename(FString InPath);// 0xaf12474 0x78ce8df120
	static FString GetBaseFilename(FString InPath, bool bRemovePath);// 0xaf12328 0x78ce8df200
	static FString GeneratedConfigDir();// 0xaf135f8 0x78ce8df2e0
	static FString GameUserDeveloperDir();// 0xaf12db8 0x78ce8df3c0
	static FString GameSourceDir();// 0xaf128f0 0x78ce8df4a0
	static FString GameDevelopersDir();// 0xaf12e68 0x78ce8df580
	static FString GameAgnosticSavedDir();// 0xaf12a50 0x78ce8df660
	static bool FileExists(FString InPath);// 0xaf11ee4 0x78ce8df740
	static FString FeaturePackDir();// 0xaf12840 0x78ce8df820
	static FString EnterprisePluginsDir();// 0xaf13fd0 0x78ce8df900
	static FString EnterpriseFeaturePackDir();// 0xaf13f20 0x78ce8df9e0
	static FString EnterpriseDir();// 0xaf14080 0x78ce8dfac0
	static FString EngineVersionAgnosticUserDir();// 0xaf144a0 0x78ce8dfba0
	static FString EngineUserDir();// 0xaf14550 0x78ce8dfc80
	static FString EngineSourceDir();// 0xaf129a0 0x78ce8dfd60
	static FString EngineSavedDir();// 0xaf141e0 0x78ce8dfe40
	static FString EnginePluginsDir();// 0xaf14130 0x78ce8dff20
	static FString EngineIntermediateDir();// 0xaf14290 0x78ce8dcaa0
	static FString EngineDir();// 0xaf14600 0x78ce8dcb80
	static FString EngineContentDir();// 0xaf143f0 0x78ce8dcc60
	static FString EngineConfigDir();// 0xaf14340 0x78ce8dcd40
	static bool DirectoryExists(FString InPath);// 0xaf11e2c 0x78ce8dce20
	static FString DiffDir();// 0xaf12d08 0x78ce8dcf00
	static FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0xaf10e6c 0x78ce8dcfe0
	static FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0xaf1115c 0x78ce8dd0c0
	static FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0xaf112a8 0x78ce8dd1a0
	static FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0xaf11010 0x78ce8dd280
	static FString Combine(out const FString[] InPaths);// 0xaf10738 0x78ce8dd360
	static bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0xaf11880 0x78ce8dd440
	static FString CloudDir();// 0xaf12f18 0x78ce8dd520
	static FString ChangeExtension(FString InPath, FString InNewExtension);// 0xaf120e8 0x78ce8dd600
	static FString BugItDir();// 0xaf13338 0x78ce8dd6e0
	static FString AutomationTransientDir();// 0xaf13078 0x78ce8dd7c0
	static FString AutomationLogDir();// 0xaf12fc8 0x78ce8dd8a0
	static FString AutomationDir();// 0xaf13128 0x78ce8dd980

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10] 0x78cf532f80
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10] 0x78cf533000
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10] 0x78cf533080
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x78cf533100
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10] 0x78cf533180
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10] 0x78cf531100
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10] 0x78cf531200
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10] 0x78cf531300
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10] 0x78cf531400
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10] 0x78cf531500
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10] 0x78cf531680
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10] 0x78cf531880
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10] 0x78cf531980

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	static int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText title, out const FText Body, out const FText Action, FString ActivationEvent);// 0xaf17244 0x78ce922fc0
	static void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0xaf17004 0x78ce9230a0
	static int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0xaf170f4 0x78ce923180
	static int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText title, out const FText Body, out const FText Action, FString ActivationEvent);// 0xaf17544 0x78ce923260
	static void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0xaf16d70 0x78ce923340
	static byte GetDeviceOrientation();// 0xaf16d3c 0x78ce923420
	static void ClearAllLocalNotifications();// 0xaf178a0 0x78ce923500
	static void CancelLocalNotificationById(int NotificationId);// 0xaf16ec8 0x78ce9235e0
	static void CancelLocalNotification(FString ActivationEvent);// 0xaf16f60 0x78ce9236c0

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	static void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0xaf19528 0x78ce922540
	static void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0xaf193b0 0x78ce922620
	static void Set_ToArray(out const <int> A, out int[] Result);// 0xaf192a8 0x78ce922700
	static void Set_RemoveItems(out const <int> TargetSet, out const int[] items);// 0xaf191a0 0x78ce9227e0
	static bool Set_Remove(out const <int> TargetSet, out const int Item);// 0xaf18fe4 0x78ce9228c0
	static int Set_Length(out const <int> TargetSet);// 0xaf18f40 0x78ce9229a0
	static void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0xaf18dc8 0x78ce922a80
	static void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0xaf18c50 0x78ce922b60
	static bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0xaf18a94 0x78ce922c40
	static void Set_Clear(out const <int> TargetSet);// 0xaf189fc 0x78ce922d20
	static void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0xaf188f4 0x78ce922e00
	static void Set_Add(out const <int> TargetSet, out const int NewItem);// 0xaf1874c 0x78ce922ee0

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10] 0x78ce8c8d00

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10] 0x78cefd92a0

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78cf046c00
	int BlendDepth;//[Offset: 0x8, Size: 0x4] 0x78cf046c80

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x78ce919700
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x78ce919780
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10] 0x78ce8c8c60

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4] 0x78ce919600
	IntPoint Location;//[Offset: 0x2c, Size: 0x8] 0x78ce919680

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb0, Size: 0x28] 0x78ce91b300
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x78ce91b380
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78ce91b400
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x78ce91b480
	Transform PostTransform;//[Offset: 0xe0, Size: 0x30] 0x78ce91b500
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78ce91b580
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1] 0x78ce919500
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1] 0x78ce919580

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x458, Size: 0xc] 0x78ce91ad80
	float LineThickness;//[Offset: 0x464, Size: 0x4] 0x78ce91ae00
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0xaf1c0c0 0x78ce9222a0
	Vector GetUnscaledBoxExtent();// 0xaf1c064 0x78ce922380
	Vector GetScaledBoxExtent();// 0xaf1c088 0x78ce922460

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x220, Size: 0x8] 0x78ce91ad00

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x1f8, Size: 0x8] 0x78ce91a780
	enum ReflectionSourceType;//[Offset: 0x200, Size: 0x1] 0x78ce8c8a80
	enum MobileReflectionCompression;//[Offset: 0x201, Size: 0x1] 0x78ce8c8b20
	TextureCube* Cubemap;//[Offset: 0x208, Size: 0x8] 0x78ce91a900
	float SourceCubemapAngle;//[Offset: 0x210, Size: 0x4] 0x78ce91a980
	float Brightness;//[Offset: 0x214, Size: 0x4] 0x78ce91aa00
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x78ce91aa80
	float MaxValueRGBM;//[Offset: 0x21c, Size: 0x4] 0x78ce91ab00
	Vector CaptureOffset;//[Offset: 0x220, Size: 0xc] 0x78ce91ab80
	Guid MapBuildDataId;//[Offset: 0x22c, Size: 0x10] 0x78ce91ac00
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x250, Size: 0x8] 0x78ce91ac80

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x270, Size: 0x4] 0x78ce91a600
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x278, Size: 0x8] 0x78ce91a680
	BoxComponent* PreviewCaptureBox;//[Offset: 0x280, Size: 0x8] 0x78ce91a700

--------------------------------
Class: Breakpoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce91c480
	EdGraphNode* Node;//[Offset: 0x30, Size: 0x8] 0x78ce91c500
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce91c580
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78ce91c600
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78ce91a580

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10] 0x78ce8c9480
	int NodePosX;//[Offset: 0x48, Size: 0x4] 0x78ce981e00
	int NodePosY;//[Offset: 0x4c, Size: 0x4] 0x78ce981e80
	int NodeWidth;//[Offset: 0x50, Size: 0x4] 0x78ce981f00
	int NodeHeight;//[Offset: 0x54, Size: 0x4] 0x78ce981f80
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1] 0x78ce982000
	enum EnabledState;//[Offset: 0x59, Size: 0x1] 0x78ce8c9520
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78ce982100
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78ce980080
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x78ce980100
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1] 0x78ce980180
	FString NodeComment;//[Offset: 0x60, Size: 0x10] 0x78ce980200
	int ErrorType;//[Offset: 0x70, Size: 0x4] 0x78ce980280
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10] 0x78ce980300
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10] 0x78ce980380

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10] 0x78ce981680
	FString PinToolTip;//[Offset: 0x38, Size: 0x10] 0x78ce981700
	byte Direction;//[Offset: 0x48, Size: 0x1] 0x78ce981780
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58] 0x78ce981800
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10] 0x78ce981880
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10] 0x78ce981900
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8] 0x78ce981980
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18] 0x78ce981a00
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10] 0x78ce8c9340
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10] 0x78ce8c93e0
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8] 0x78ce981b80
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8] 0x78ce981c00

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8] 0x78cf07e100
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8] 0x78cf07e180
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x78cf07e200
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20] 0x78cf07e280
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c] 0x78cf07e600
	enum ContainerType;//[Offset: 0x54, Size: 0x1] 0x78cf081c80
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x78cf07e700
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x78cf07c680
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x78cf07c700
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1] 0x78cf07c780
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1] 0x78cf07c800

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8] 0x78cf07e300
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8] 0x78cf07e380
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x78cf07e400
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cf07e480
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78cf07e500
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x78cf07e580

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10] 0x78ce91c100
	FString Tooltip;//[Offset: 0x38, Size: 0x10] 0x78ce91c180
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce91c200
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10] 0x78ce8c8940
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10] 0x78ce8c89e0
	FName Layer;//[Offset: 0x70, Size: 0x8] 0x78ce91c380
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce91c400

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10] 0x78cf0818c0
	int Direction;//[Offset: 0x10, Size: 0x4] 0x78cf07f680
	FName ItemName;//[Offset: 0x14, Size: 0x8] 0x78cf07f700
	int PolyFlags;//[Offset: 0x1c, Size: 0x4] 0x78cf07f780

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x278] 0x78ce91bf80

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88] 0x78cee92b80
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88] 0x78cee92c00
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88] 0x78cee92c80
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88] 0x78cee92d00
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10] 0x78cee92d80
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10] 0x78cee92e00
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18] 0x78cee92e80
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18] 0x78cee92f00

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8] 0x78cee91280

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraShakeSourceActor.Actor.Object
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x220, Size: 0x8] 0x78ce91e200

--------------------------------
Class: DeviceProfileManager.Object
	Object*[] Profiles;//[Offset: 0x28, Size: 0x10] 0x78ce8c97a0

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10] 0x78ce949d80
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10] 0x78ce949e00
	Object* Parent;//[Offset: 0x58, Size: 0x8] 0x78ce949e80
	FString[] CVars;//[Offset: 0x88, Size: 0x10] 0x78ce8c9840

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10] 0x78ce8c98e0

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1] 0x78cf0f6300
	int LODBias;//[Offset: 0xc, Size: 0x4] 0x78cf0f4280
	int LODBias_Smaller;//[Offset: 0x10, Size: 0x4] 0x78cf0f4300
	int LODBias_Smallest;//[Offset: 0x14, Size: 0x4] 0x78cf0f4380
	int NumStreamedMips;//[Offset: 0x1c, Size: 0x4] 0x78cf0f4400
	byte MipGenSettings;//[Offset: 0x20, Size: 0x1] 0x78cf0f4480
	int MinLODSize;//[Offset: 0x24, Size: 0x4] 0x78cf0f4500
	int MaxLODSize;//[Offset: 0x28, Size: 0x4] 0x78cf0f4580
	int MaxLODSize_Smaller;//[Offset: 0x2c, Size: 0x4] 0x78cf0f4600
	int MaxLODSize_Smallest;//[Offset: 0x30, Size: 0x4] 0x78cf0f4680
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4] 0x78cf0f4700
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4] 0x78cf0f4780
	FName MinMagFilter;//[Offset: 0x40, Size: 0x8] 0x78cf0f4800
	FName MipFilter;//[Offset: 0x48, Size: 0x8] 0x78cf0f4880
	enum MipLoadOptions;//[Offset: 0x50, Size: 0x1] 0x78cf08a060
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78cf0f4980
	float Downscale;//[Offset: 0x54, Size: 0x4] 0x78cf0f4a00
	enum DownscaleOptions;//[Offset: 0x58, Size: 0x1] 0x78cf08a100
	int VirtualTextureTileCountBias;//[Offset: 0x5c, Size: 0x4] 0x78cf0f4b00
	int VirtualTextureTileSizeBias;//[Offset: 0x60, Size: 0x4] 0x78cf0f4b80

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xd8, Size: 0x4] 0x78ce940300

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78ce941d00
	int SizeY;//[Offset: 0xe4, Size: 0x4] 0x78ce941d80
	LinearColor ClearColor;//[Offset: 0xe8, Size: 0x10] 0x78ce941e00
	byte AddressX;//[Offset: 0xf8, Size: 0x1] 0x78ce941e80
	byte AddressY;//[Offset: 0xf9, Size: 0x1] 0x78ce941f00
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1] 0x78ce941f80
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 0x1] 0x78ce942000
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 0x1] 0x78ce942080
	byte RenderTargetFormat;//[Offset: 0xfb, Size: 0x1] 0x78ce942100
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1] 0x78ce940080
	byte MipsSamplerFilter;//[Offset: 0xfd, Size: 0x1] 0x78ce940100
	byte MipsAddressU;//[Offset: 0xfe, Size: 0x1] 0x78ce940180
	byte MipsAddressV;//[Offset: 0xff, Size: 0x1] 0x78ce940200
	byte OverrideFormat;//[Offset: 0x100, Size: 0x1] 0x78ce940280

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x108, Size: 0x10] 0x78ce941700
	World* World;//[Offset: 0x118, Size: 0x8] 0x78ce941780
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78ce941800
	void UpdateResource();// 0xaf2e228 0x78ce923dc0
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x8a873f8 0x78ce923ea0
	void GetSize(out int Width, out int Height);// 0xaf2dfa0 0x78ce923f80
	static CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0xaf2e0a4 0x78ce924060

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8] 0x78ce988b80
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18] 0x78ce988c00
	Font* SmallFont;//[Offset: 0x50, Size: 0x8] 0x78ce988c80
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18] 0x78ce988d00
	Font* MediumFont;//[Offset: 0x70, Size: 0x8] 0x78ce988d80
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18] 0x78ce988e00
	Font* LargeFont;//[Offset: 0x90, Size: 0x8] 0x78ce988e80
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18] 0x78ce988f00
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8] 0x78ce988f80
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18] 0x78ce989000
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10] 0x78ce8ca880
	FString[] AdditionalFontNames;//[Offset: 0xe0, Size: 0x10] 0x78ce8ca920
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x8] 0x78ce8ca9c0
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18] 0x78ce989180
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x8] 0x78ce8caa60
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18] 0x78ce989200
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x8] 0x78ce8cab00
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18] 0x78ce989280
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x8] 0x78ce8caba0
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18] 0x78ce989300
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18] 0x78ce989380
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x188, Size: 0x8] 0x78ce8cac40
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x190, Size: 0x18] 0x78ce989400
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1a8, Size: 0x8] 0x78ce8cace0
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b0, Size: 0x18] 0x78ce989480
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1c8, Size: 0x8] 0x78ce8cad80
	SoftClassPath AIControllerClassName;//[Offset: 0x1d0, Size: 0x18] 0x78ce987400
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1e8, Size: 0x8] 0x78ce8cae20
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1f0, Size: 0x18] 0x78ce987480
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x208, Size: 0x18] 0x78ce987500
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x220, Size: 0x8] 0x78ce8caec0
	GameUserSettings* GameUserSettings;//[Offset: 0x228, Size: 0x8] 0x78ce987580
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x230, Size: 0x8] 0x78ce8caf60
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x238, Size: 0x18] 0x78ce987600
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x250, Size: 0x18] 0x78ce987680
	SoftClassPath GameSingletonClassName;//[Offset: 0x268, Size: 0x18] 0x78ce987700
	Object* GameSingleton;//[Offset: 0x280, Size: 0x8] 0x78ce987780
	SoftClassPath AssetManagerClassName;//[Offset: 0x288, Size: 0x18] 0x78ce987800
	AssetManager* AssetManager;//[Offset: 0x2a0, Size: 0x8] 0x78ce987880
	Texture2D* DefaultTexture;//[Offset: 0x2a8, Size: 0x8] 0x78ce987900
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b0, Size: 0x18] 0x78ce987980
	Texture* DefaultDiffuseTexture;//[Offset: 0x2c8, Size: 0x8] 0x78ce987a00
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d0, Size: 0x18] 0x78ce987a80
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2e8, Size: 0x8] 0x78ce987b00
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f0, Size: 0x18] 0x78ce987b80
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x308, Size: 0x8] 0x78ce987c00
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x310, Size: 0x18] 0x78ce987c80
	Texture2D* DefaultBokehTexture;//[Offset: 0x328, Size: 0x8] 0x78ce987d00
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x330, Size: 0x18] 0x78ce987d80
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x348, Size: 0x8] 0x78ce987e00
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x350, Size: 0x18] 0x78ce987e80
	Material* WireframeMaterial;//[Offset: 0x368, Size: 0x8] 0x78ce987f00
	FString WireframeMaterialName;//[Offset: 0x370, Size: 0x10] 0x78ce987f80
	Material* DebugMeshMaterial;//[Offset: 0x380, Size: 0x8] 0x78ce988000
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x388, Size: 0x18] 0x78ce988080
	Material* EmissiveMeshMaterial;//[Offset: 0x3a0, Size: 0x8] 0x78ce988100
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3a8, Size: 0x18] 0x78ce988180
	Material* LevelColorationLitMaterial;//[Offset: 0x3c0, Size: 0x8] 0x78ce988200
	FString LevelColorationLitMaterialName;//[Offset: 0x3c8, Size: 0x10] 0x78ce988280
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3d8, Size: 0x8] 0x78ce988300
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3e0, Size: 0x10] 0x78ce988380
	Material* LightingTexelDensityMaterial;//[Offset: 0x3f0, Size: 0x8] 0x78ce988400
	FString LightingTexelDensityName;//[Offset: 0x3f8, Size: 0x10] 0x78ce986380
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x408, Size: 0x8] 0x78ce986400
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x410, Size: 0x10] 0x78ce986480
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x420, Size: 0x8] 0x78ce986500
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x428, Size: 0x10] 0x78ce986580
	Material* RemoveSurfaceMaterial;//[Offset: 0x438, Size: 0x8] 0x78ce986600
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x440, Size: 0x18] 0x78ce986680
	Material* VertexColorMaterial;//[Offset: 0x458, Size: 0x8] 0x78ce986700
	FString VertexColorMaterialName;//[Offset: 0x460, Size: 0x10] 0x78ce986780
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x470, Size: 0x8] 0x78ce986800
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x478, Size: 0x10] 0x78ce986880
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x488, Size: 0x8] 0x78ce986900
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x490, Size: 0x10] 0x78ce986980
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4a0, Size: 0x8] 0x78ce986a00
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4a8, Size: 0x10] 0x78ce986a80
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4b8, Size: 0x8] 0x78ce986b00
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4c0, Size: 0x10] 0x78ce986b80
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4d0, Size: 0x8] 0x78ce986c00
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4d8, Size: 0x10] 0x78ce986c80
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4e8, Size: 0x18] 0x78ce986d00
	Material* ConstraintLimitMaterial;//[Offset: 0x500, Size: 0x8] 0x78ce986d80
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x508, Size: 0x8] 0x78ce986e00
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x510, Size: 0x8] 0x78ce986e80
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x518, Size: 0x8] 0x78ce986f00
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x520, Size: 0x8] 0x78ce986f80
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x528, Size: 0x8] 0x78ce987000
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x530, Size: 0x8] 0x78ce987080
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x538, Size: 0x8] 0x78ce987100
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x540, Size: 0x8] 0x78ce987180
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x548, Size: 0x18] 0x78ce987200
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x560, Size: 0x8] 0x78ce987280
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x568, Size: 0x18] 0x78ce987300
	Material* ArrowMaterial;//[Offset: 0x580, Size: 0x8] 0x78ce987380
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x588, Size: 0x8] 0x78ce985300
	SoftObjectPath ArrowMaterialName;//[Offset: 0x590, Size: 0x18] 0x78ce985380
	LinearColor LightingOnlyBrightness;//[Offset: 0x5a8, Size: 0x10] 0x78ce985400
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5b8, Size: 0x10] 0x78ce8cb000
	LinearColor[] QuadComplexityColors;//[Offset: 0x5c8, Size: 0x10] 0x78ce8cb0a0
	LinearColor[] LightComplexityColors;//[Offset: 0x5d8, Size: 0x10] 0x78ce8cb140
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5e8, Size: 0x10] 0x78ce8cb1e0
	LinearColor[] LODColorationColors;//[Offset: 0x5f8, Size: 0x10] 0x78ce8cb280
	LinearColor[] HLODColorationColors;//[Offset: 0x608, Size: 0x10] 0x78ce8cb320
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x618, Size: 0x10] 0x78ce8cb3c0
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x628, Size: 0x4] 0x78ce985800
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x62c, Size: 0x4] 0x78ce985880
	float MinLightMapDensity;//[Offset: 0x630, Size: 0x4] 0x78ce985900
	float IdealLightMapDensity;//[Offset: 0x634, Size: 0x4] 0x78ce985980
	float MaxLightMapDensity;//[Offset: 0x638, Size: 0x4] 0x78ce985a00
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63c, Size: 0x1] 0x78ce985a80
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x640, Size: 0x4] 0x78ce985b00
	float RenderLightMapDensityColorScale;//[Offset: 0x644, Size: 0x4] 0x78ce985b80
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x648, Size: 0x10] 0x78ce985c00
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x658, Size: 0x10] 0x78ce985c80
	StatColorMapping[] StatColorMappings;//[Offset: 0x668, Size: 0x10] 0x78ce8cb460
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x678, Size: 0x8] 0x78ce985d80
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x680, Size: 0x18] 0x78ce985e00
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x698, Size: 0x10] 0x78ce8cb500
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6a8, Size: 0x10] 0x78ce8cb5a0
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6b8, Size: 0x10] 0x78ce8cb640
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6c8, Size: 0x10] 0x78ce8cb6e0
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x6d8, Size: 0x8] 0x78ce986080
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x6e0, Size: 0x18] 0x78ce986100
	Texture2D* BlueNoiseTexture;//[Offset: 0x6f8, Size: 0x8] 0x78ce986180
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x700, Size: 0x18] 0x78ce986200
	Texture2D* MiniFontTexture;//[Offset: 0x718, Size: 0x8] 0x78ce986280
	SoftObjectPath MiniFontTextureName;//[Offset: 0x720, Size: 0x18] 0x78ce986300
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x738, Size: 0x8] 0x78ce984280
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x740, Size: 0x18] 0x78ce984300
	Texture2D* LightMapDensityTexture;//[Offset: 0x758, Size: 0x8] 0x78ce984380
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x760, Size: 0x18] 0x78ce984400
	GameViewportClient* GameViewport;//[Offset: 0x780, Size: 0x8] 0x78ce984480
	FString[] DeferredCommands;//[Offset: 0x788, Size: 0x10] 0x78ce8cb780
	float NearClipPlane;//[Offset: 0x798, Size: 0x4] 0x78ce984580
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c, Size: 0x1] 0x78ce984600
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79c, Size: 0x1] 0x78ce984680
	int MaximumLoopIterationCount;//[Offset: 0x7a0, Size: 0x4] 0x78ce984700
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 0x1] 0x78ce984780
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a4, Size: 0x1] 0x78ce984800
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a4, Size: 0x1] 0x78ce984880
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a4, Size: 0x1] 0x78ce984900
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7a4, Size: 0x1] 0x78ce984980
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7a4, Size: 0x1] 0x78ce984a00
	float FixedFrameRate;//[Offset: 0x7a8, Size: 0x4] 0x78ce984a80
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7ac, Size: 0x10] 0x78ce984b00
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7c0, Size: 0x8] 0x78ce984b80
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x7e8, Size: 0x18] 0x78ce984c00
	TimecodeProvider* TimecodeProvider;//[Offset: 0x800, Size: 0x8] 0x78ce984c80
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x828, Size: 0x18] 0x78ce984d00
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1] 0x78ce984d80
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x844, Size: 0x8] 0x78ce984e00
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x84c, Size: 0x4] 0x78ce984e80
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x850, Size: 0x1] 0x78ce984f00
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x854, Size: 0x4] 0x78ce984f80
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x858, Size: 0x1] 0x78ce985000
	Color C_WorldBox;//[Offset: 0x85c, Size: 0x4] 0x78ce985080
	Color C_BrushWire;//[Offset: 0x860, Size: 0x4] 0x78ce985100
	Color C_AddWire;//[Offset: 0x864, Size: 0x4] 0x78ce985180
	Color C_SubtractWire;//[Offset: 0x868, Size: 0x4] 0x78ce985200
	Color C_SemiSolidWire;//[Offset: 0x86c, Size: 0x4] 0x78ce985280
	Color C_NonSolidWire;//[Offset: 0x870, Size: 0x4] 0x78ce983200
	Color C_WireBackground;//[Offset: 0x874, Size: 0x4] 0x78ce983280
	Color C_ScaleBoxHi;//[Offset: 0x878, Size: 0x4] 0x78ce983300
	Color C_VolumeCollision;//[Offset: 0x87c, Size: 0x4] 0x78ce983380
	Color C_BSPCollision;//[Offset: 0x880, Size: 0x4] 0x78ce983400
	Color C_OrthoBackground;//[Offset: 0x884, Size: 0x4] 0x78ce983480
	Color C_Volume;//[Offset: 0x888, Size: 0x4] 0x78ce983500
	Color C_BrushShape;//[Offset: 0x88c, Size: 0x4] 0x78ce983580
	float StreamingDistanceFactor;//[Offset: 0x890, Size: 0x4] 0x78ce983600
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x898, Size: 0x10] 0x78ce983680
	enum TransitionType;//[Offset: 0x8a8, Size: 0x1] 0x78ce8cb820
	FString TransitionDescription;//[Offset: 0x8b0, Size: 0x10] 0x78ce983780
	FString TransitionGameMode;//[Offset: 0x8c0, Size: 0x10] 0x78ce983800
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1] 0x78ce983880
	float CameraRotationThreshold;//[Offset: 0x8d4, Size: 0x4] 0x78ce983900
	float CameraTranslationThreshold;//[Offset: 0x8d8, Size: 0x4] 0x78ce983980
	float PrimitiveProbablyVisibleTime;//[Offset: 0x8dc, Size: 0x4] 0x78ce983a00
	float MaxOcclusionPixelsFraction;//[Offset: 0x8e0, Size: 0x4] 0x78ce983a80
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e4, Size: 0x1] 0x78ce983b00
	int MaxParticleResize;//[Offset: 0x8e8, Size: 0x4] 0x78ce983b80
	int MaxParticleResizeWarn;//[Offset: 0x8ec, Size: 0x4] 0x78ce983c00
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8f0, Size: 0x10] 0x78ce8cb8c0
	float NetClientTicksPerSecond;//[Offset: 0x900, Size: 0x4] 0x78ce983d00
	float DisplayGamma;//[Offset: 0x904, Size: 0x4] 0x78ce983d80
	float MinDesiredFrameRate;//[Offset: 0x908, Size: 0x4] 0x78ce983e00
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x90c, Size: 0x10] 0x78ce983e80
	LinearColor SelectedMaterialColor;//[Offset: 0x91c, Size: 0x10] 0x78ce983f00
	LinearColor SelectionOutlineColor;//[Offset: 0x92c, Size: 0x10] 0x78ce983f80
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x93c, Size: 0x10] 0x78ce984000
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x94c, Size: 0x10] 0x78ce984080
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1] 0x78ce984100
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95d, Size: 0x1] 0x78ce984180
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x95d, Size: 0x1] 0x78ce984200
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x95d, Size: 0x1] 0x78ce982180
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x95d, Size: 0x1] 0x78ce982200
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x960, Size: 0x4] 0x78ce982280
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x964, Size: 0x4] 0x78ce982300
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x968, Size: 0x1] 0x78ce982380
	FString ParticleEventManagerClassPath;//[Offset: 0x970, Size: 0x10] 0x78ce982400
	float SelectionHighlightIntensity;//[Offset: 0x980, Size: 0x4] 0x78ce982480
	float BSPSelectionHighlightIntensity;//[Offset: 0x984, Size: 0x4] 0x78ce982500
	float SelectionHighlightIntensityBillboards;//[Offset: 0x988, Size: 0x4] 0x78ce982580
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xbf8, Size: 0x10] 0x78ce8cb960
	FString[] ServerActors;//[Offset: 0xc08, Size: 0x10] 0x78ce8c90c0
	FString[] RuntimeServerActors;//[Offset: 0xc18, Size: 0x10] 0x78ce8c9160
	float NetErrorLogInterval;//[Offset: 0xc28, Size: 0x4] 0x78ce982780
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2c, Size: 0x1] 0x78ce982800
	int NextWorldContextHandle;//[Offset: 0xc40, Size: 0x4] 0x78ce982880

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce9b2500
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78ce9b2580
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4] 0x78ce9b2600
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4] 0x78ce9b2680
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4] 0x78ce9b2700
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4] 0x78ce9b2780
	int WindowPosX;//[Offset: 0x90, Size: 0x4] 0x78ce9b2800
	int WindowPosY;//[Offset: 0x94, Size: 0x4] 0x78ce9b2880
	int FullscreenMode;//[Offset: 0x98, Size: 0x4] 0x78ce9b2900
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4] 0x78ce9b2980
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4] 0x78ce9b2a00
	uint32 Version;//[Offset: 0xa4, Size: 0x4] 0x78ce9b2a80
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4] 0x78ce9b2b00
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4] 0x78ce9b2b80
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4] 0x78ce9b2c00
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4] 0x78ce9b2c80
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78ce9b2d00
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4] 0x78ce9b2d80
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4] 0x78ce9b2e00
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4] 0x78ce9b2e80
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4] 0x78ce9b2f00
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4] 0x78ce9b2f80
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4] 0x78ce9b3000
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4] 0x78ce9b3080
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10] 0x78ce8cde40
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10] 0x78ce8cdee0
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4] 0x78ce9b1100
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x78ce9b1180
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4] 0x78ce9b1200
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10] 0x78ce9b1280
	void ValidateSettings();// 0xafa3c1c 0x78ce99c2c0
	bool SupportsHDRDisplayOutput();// 0xafa37b8 0x78ce99c3a0
	void SetVSyncEnabled(bool bEnable);// 0xafa4dac 0x78ce99c480
	void SetVisualEffectQuality(int Value);// 0xafa3f40 0x78ce99c560
	void SetViewDistanceQuality(int Value);// 0xafa42b0 0x78ce99c640
	void SetToDefaults();// 0xafa3b10 0x78ce99c720
	void SetTextureQuality(int Value);// 0xafa401c 0x78ce99c800
	void SetShadowQuality(int Value);// 0xafa41d4 0x78ce99c8e0
	void SetShadingQuality(int Value);// 0xafa3cac 0x78ce99c9c0
	void SetScreenResolution(IntPoint Resolution);// 0xafa4fa0 0x78ce9990e0
	void SetResolutionScaleValueEx(float NewScaleValue);// 0xafa4400 0x78ce9991c0
	void SetResolutionScaleValue(int NewScaleValue);// 0xafa44a8 0x78ce9992a0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0xafa4358 0x78ce999380
	void SetPostProcessingQuality(int Value);// 0xafa3e64 0x78ce999460
	void SetOverallScalabilityLevel(int Value);// 0xafa4918 0x78ce999540
	void SetFullscreenMode(byte InFullscreenMode);// 0xafa4e90 0x78ce999620
	void SetFrameRateLimit(float NewLimit);// 0xafa49fc 0x78ce999700
	void SetFoliageQuality(int Value);// 0xafa3d88 0x78ce9997e0
	void SetDynamicResolutionEnabled(bool bEnable);// 0xafa4cc4 0x78ce9998c0
	void SetBenchmarkFallbackValues();// 0xafa4b68 0x78ce9999a0
	void SetAudioQualityLevel(int QualityLevel);// 0xafa4ac0 0x78ce999a80
	void SetAntiAliasingQuality(int Value);// 0xafa40f8 0x78ce999b60
	void SaveSettings();// 0xafa3b48 0x78ce999c40
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0xafa3814 0x78ce999d20
	void RevertVideoMode();// 0xafa4b7c 0x78ce999e00
	void ResetToCurrentSettings();// 0xafa3b2c 0x78ce999ee0
	void LoadSettings(bool bForceReload);// 0xafa3b64 0x78ce999fc0
	bool IsVSyncEnabled();// 0xafa4d74 0x78ce99a0a0
	bool IsVSyncDirty();// 0xafa4be4 0x78ce99a180
	bool IsScreenResolutionDirty();// 0xafa4c54 0x78ce99a260
	bool IsHDREnabled();// 0xafa365c 0x78ce99a340
	bool IsFullscreenModeDirty();// 0xafa4c1c 0x78ce99a420
	bool IsDynamicResolutionEnabled();// 0xafa4c8c 0x78ce99a500
	bool IsDynamicResolutionDirty();// 0xafa4bac 0x78ce99a5e0
	bool IsDirty();// 0xafa3c38 0x78ce99a6c0
	int GetVisualEffectQuality();// 0xafa3f0c 0x78ce99a7a0
	int GetViewDistanceQuality();// 0xafa427c 0x78ce99a880
	int GetTextureQuality();// 0xafa3fe8 0x78ce99a960
	static int GetSyncInterval();// 0xafa39c0 0x78ce99aa40
	int GetShadowQuality();// 0xafa41a0 0x78ce99ab20
	int GetShadingQuality();// 0xafa3c78 0x78ce99ac00
	IntPoint GetScreenResolution();// 0xafa50b4 0x78ce99ace0
	float GetResolutionScaleNormalized();// 0xafa4550 0x78ce997400
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0xafa4584 0x78ce9974e0
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0xafa4730 0x78ce9975c0
	float GetRecommendedResolutionScale();// 0xafa3a98 0x78ce9976a0
	byte GetPreferredFullscreenMode();// 0xafa4e5c 0x78ce997780
	int GetPostProcessingQuality();// 0xafa3e30 0x78ce997860
	int GetOverallScalabilityLevel();// 0xafa48dc 0x78ce997940
	IntPoint GetLastConfirmedScreenResolution();// 0xafa507c 0x78ce997a20
	byte GetLastConfirmedFullscreenMode();// 0xafa4f38 0x78ce997b00
	static GameUserSettings* GetGameUserSettings();// 0xafa3958 0x78ce997be0
	byte GetFullscreenMode();// 0xafa4f6c 0x78ce997cc0
	float GetFrameRateLimit();// 0xafa49c8 0x78ce997da0
	static int GetFramePace();// 0xafa398c 0x78ce997e80
	int GetFoliageQuality();// 0xafa3d54 0x78ce997f60
	IntPoint GetDesktopResolution();// 0xafa5044 0x78ce998040
	static IntPoint GetDefaultWindowPosition();// 0xafa3a28 0x78ce998120
	static byte GetDefaultWindowMode();// 0xafa39f4 0x78ce998200
	float GetDefaultResolutionScale();// 0xafa3ad4 0x78ce9982e0
	static IntPoint GetDefaultResolution();// 0xafa3a60 0x78ce9983c0
	int GetCurrentHDRDisplayNits();// 0xafa3694 0x78ce9984a0
	int GetAudioQualityLevel();// 0xafa4aa4 0x78ce998580
	int GetAntiAliasingQuality();// 0xafa40c4 0x78ce998660
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0xafa36c8 0x78ce998740
	void ConfirmVideoMode();// 0xafa4b90 0x78ce998820
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0xafa51b8 0x78ce998900
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0xafa50ec 0x78ce9989e0
	void ApplyNonResolutionSettings();// 0xafa519c 0x78ce998ac0
	void ApplyHardwareBenchmarkResults();// 0xafa37f8 0x78ce998ba0

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10] 0x78cf0a3a00
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10] 0x78cf082c20
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x78cf0a3c00

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4] 0x78cf0a3a80
	Color Out;//[Offset: 0x4, Size: 0x4] 0x78cf0a3b00

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8] 0x78cf0a4100
	FName NewGameName;//[Offset: 0x8, Size: 0x8] 0x78cf0a4180

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x78cf0a4200
	FName OldClassName;//[Offset: 0x8, Size: 0x8] 0x78cf0a2180
	FName NewClassName;//[Offset: 0x10, Size: 0x8] 0x78cf0a2200
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8] 0x78cf0a2280
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8] 0x78cf0a2300
	FName NewClassClass;//[Offset: 0x28, Size: 0x8] 0x78cf0a2380
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8] 0x78cf0a2400
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cf0a2480

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10] 0x78cf0a2600
	FString NewPluginName;//[Offset: 0x10, Size: 0x10] 0x78cf0a2680

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8] 0x78cf0a2500
	FName NewStructName;//[Offset: 0x8, Size: 0x8] 0x78cf0a2580

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78ea087700
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78ea087780

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78ea087800
	float Value;//[Offset: 0x4, Size: 0x4] 0x78ea084480

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4] 0x78ce78a780
	Timecode GetTimecode();// 0xb1bf544 0x78ce75a180
	enum GetSynchronizationState();// 0xb1bf460 0x78ce75a260
	QualifiedFrameTime GetQualifiedFrameTime();// 0xb1bf5e4 0x78ce75a340
	FrameRate GetFrameRate();// 0xb1bf49c 0x78ce75a420
	Timecode GetDelayedTimecode();// 0xb1bf4d8 0x78ce75a500
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0xb1bf5b0 0x78ce75a5e0
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0xb1bf63c 0x78ce75a6c0
	void FetchAndUpdate();// 0xb1bf620 0x78ce75a7a0

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4] 0x78ea087b00
	int Minutes;//[Offset: 0x4, Size: 0x4] 0x78ea087b80
	int Seconds;//[Offset: 0x8, Size: 0x4] 0x78ea087c00
	int Frames;//[Offset: 0xc, Size: 0x4] 0x78ea087c80
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78ea087d00

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8] 0x78ea087d80
	FrameRate Rate;//[Offset: 0x8, Size: 0x8] 0x78ea087e00

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cf0a3c80
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x78cf0a3d00
	FString Comment;//[Offset: 0x18, Size: 0x10] 0x78cf0a3d80

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8] 0x78cf0a4c00
	FName DriverClassName;//[Offset: 0x8, Size: 0x8] 0x78cf0a4c80
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8] 0x78cf0a4d00

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x28, Size: 0x580] 0x78ce943f00

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1] 0x78cefecf00
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88] 0x78cefecf80
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88] 0x78cefed000
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88] 0x78cefed080
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88] 0x78cefed100
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88] 0x78cefed180
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88] 0x78cefed200
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88] 0x78cefed280
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88] 0x78cefed300
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88] 0x78cefed380
	Margin Padding;//[Offset: 0x4d8, Size: 0x10] 0x78cefed400
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28] 0x78cefed480
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28] 0x78cefed500
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18] 0x78cefed580
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18] 0x78cefed600
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18] 0x78cefed680

--------------------------------
Class: GameMapsSettings.Object
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10] 0x78ce712080
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18] 0x78ce712100
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78ce710080
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1] 0x78ce710100
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1] 0x78ce710180
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1] 0x78ce7213c0
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78ce710280
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18] 0x78ce710300
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18] 0x78ce710380
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18] 0x78ce710400
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18] 0x78ce710480
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18] 0x78ce710500
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10] 0x78ce721460
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10] 0x78ceddf7e0
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0x90ff7e8 0x78ce704bc0
	bool GetSkipAssigningGamepadToPlayer1();// 0x90ff7b0 0x78ce704ca0
	static GameMapsSettings* GetGameMapsSettings();// 0x90ff898 0x78ce704d80

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cefee080
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18] 0x78cefee100

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10] 0x78ce8c7e00

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10] 0x78cf087540

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10] 0x78ce8c7d60
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce943c80

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10] 0x78ce943400
	FString HelpUsage;//[Offset: 0x38, Size: 0x10] 0x78ce943480
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10] 0x78ce943500
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10] 0x78ce8ca240
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10] 0x78ce8ca2e0
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce943680
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78ce943700
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78ce943780
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1] 0x78ce943800
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x78ce943880
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1] 0x78ce943900

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78ce8ca1a0

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8] 0x78cf09e600
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8] 0x78cf09e680
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x78cf09e700

--------------------------------
Class: ActorComponentInstanceDataTransientOuter.Object

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10] 0x78ce8ca060
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10] 0x78ce8ca100

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8] 0x78ce945100
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce945180
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce945200
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78ce945280
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10] 0x78ce943200

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10] 0x78ce8c9f20
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10] 0x78ce8c9fc0

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4] 0x78ce710800
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10] 0x78ceddf880
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10] 0x78ceddf920
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4] 0x78ce710980
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78ce710a00
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78ce710a80
	Color InputColor;//[Offset: 0x58, Size: 0x4] 0x78ce710b00
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4] 0x78ce710b80
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4] 0x78ce710c00
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4] 0x78ce710c80
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4] 0x78ce710d00

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10] 0x78cefee180
	FString Desc;//[Offset: 0x10, Size: 0x10] 0x78cefee200

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce944600
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78ce944680
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4] 0x78ce944700
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4] 0x78ce944780
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4] 0x78ce944800
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce944880
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78ce944900
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4] 0x78ce944980
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4] 0x78ce944a00
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4] 0x78ce944a80
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4] 0x78ce944b00
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4] 0x78ce944b80
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x60, Size: 0x4] 0x78ce944c00
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x64, Size: 0x4] 0x78ce944c80
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce944d00
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78ce944d80

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4] 0x78ce945f00
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78ce945f80
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78ce946000
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78ce946080
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78ce946100
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78ce946180
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78ce946200
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x78ce946280
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x78ce946300
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x78ce944280
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4] 0x78ce944300
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4] 0x78ce944380
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4] 0x78ce944400
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4] 0x78ce944480
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4] 0x78ce944500
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4] 0x78ce944580

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x258, Size: 0x10] 0x78ce8c9de0
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x78ce945e80

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4] 0x78cf09fd80
	float CullDistance;//[Offset: 0x4, Size: 0x4] 0x78cf09fe00

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	uint32 TextureSize;//[Offset: 0x100, Size: 0x4] 0x78ce946e80
	CurveLinearColor*[] GradientCurves;//[Offset: 0x108, Size: 0x10] 0x78ce8c9d40
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0xaf4c404 0x78ce92a6c0

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0xaf4cbc0 0x78ce92a420
	void GetCurves(out NamedCurveValue[] OutValues);// 0xaf4caf8 0x78ce92a500
	FName GetBindingName();// 0xaf4cc78 0x78ce92a5e0

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf09fb80
	float Value;//[Offset: 0x8, Size: 0x4] 0x78cf09fc00

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	static void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0xaf4ff94 0x78ce929ee0
	static bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0xaf50524 0x78ce929fc0
	static FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0xaf4fdf0 0x78ce92a0a0
	static void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0xaf50184 0x78ce92a180
	static bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0xaf50090 0x78ce92a260

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10] 0x78ce8c9ac0

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1] 0x78cf0a0180

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x220, Size: 0x8] 0x78ce949100
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xaf5278c 0x78ce929620
	MaterialInterface* GetDecalMaterial();// 0xaf52758 0x78ce929700
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xaf5271c 0x78ce9297e0

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 0x8] 0x78ce948580
	int SortOrder;//[Offset: 0x200, Size: 0x4] 0x78ce948600
	float FadeScreenSize;//[Offset: 0x204, Size: 0x4] 0x78ce948680
	float FadeStartDelay;//[Offset: 0x208, Size: 0x4] 0x78ce948700
	float FadeDuration;//[Offset: 0x20c, Size: 0x4] 0x78ce948780
	float FadeInDuration;//[Offset: 0x210, Size: 0x4] 0x78ce948800
	float FadeInStartDelay;//[Offset: 0x214, Size: 0x4] 0x78ce948880
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78ce948900
	Vector DecalSize;//[Offset: 0x21c, Size: 0xc] 0x78ce948980
	void SetSortOrder(int Value);// 0xaf58040 0x78ce92c640
	void SetFadeScreenSize(float NewFadeScreenSize);// 0xaf580e8 0x78ce92c720
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0xaf58280 0x78ce92c800
	void SetFadeIn(float StartDelay, float Duaration);// 0xaf58190 0x78ce92c8e0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xaf57f98 0x78ce92c9c0
	float GetFadeStartDelay();// 0xaf58460 0x78ce9290e0
	float GetFadeInStartDelay();// 0xaf583f8 0x78ce9291c0
	float GetFadeInDuration();// 0xaf583c4 0x78ce9292a0
	float GetFadeDuration();// 0xaf5842c 0x78ce929380
	MaterialInterface* GetDecalMaterial();// 0xaf57f64 0x78ce929460
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xaf57f28 0x78ce929540

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x138, Size: 0x4] 0x78ce98a800
	float Acceleration;//[Offset: 0x13c, Size: 0x4] 0x78ce98a880
	float Deceleration;//[Offset: 0x140, Size: 0x4] 0x78ce98a900
	float TurningBoost;//[Offset: 0x144, Size: 0x4] 0x78ce98a980
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78ce98aa00

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x78ce94a000
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8] 0x78ce94a080

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: DeviceProfileFragment.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10] 0x78ce364e80
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce364f00
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78ce364f80

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50] 0x78cee149c0

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9] 0x78ce710d80

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefee280
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cefee300
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cefee380
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cefee400
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cefee480
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78cefee500
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x78cefee580
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1] 0x78cefee600
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1] 0x78cefd6460

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1] 0x78ce949b80
	byte Plurality;//[Offset: 0x29, Size: 0x1] 0x78ce949c00
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10] 0x78ce949c80

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce949880
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78ce949900
	FString SpokenText;//[Offset: 0x30, Size: 0x10] 0x78ce949980
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10] 0x78ce949a00
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10] 0x78ce8c9700
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10] 0x78ce949b00

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18] 0x78cf0a1480
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x78cf0a1500
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10] 0x78cf0a1580
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8] 0x78cf0a1600

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8] 0x78cf0a1700
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10] 0x78cf0831c0

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x78ce94b300
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78ce94b380
	void ToggleEnabled();// 0xb055368 0x78ce92bae0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0xb05505c 0x78ce92bbc0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0xb055104 0x78ce92bca0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0xb054fb4 0x78ce92bd80
	void SetLightColor(LinearColor NewLightColor);// 0xb0551e4 0x78ce92be60
	void SetEnabled(bool bSetEnabled);// 0xb0553b4 0x78ce92bf40
	void SetCastShadows(bool bNewValue);// 0xb054f04 0x78ce92c020
	void SetBrightness(float NewBrightness);// 0xb0552c0 0x78ce92c100
	void SetAffectTranslucentLighting(bool bNewValue);// 0xb054e54 0x78ce92c1e0
	void OnRep_bEnabled();// 0xb055464 0x78ce92c2c0
	bool IsEnabled();// 0xb05537c 0x78ce92c3a0
	LinearColor GetLightColor();// 0xb0551ac 0x78ce92c480
	float GetBrightness();// 0xb05528c 0x78ce92c560

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x224, Size: 0x4] 0x78ce94c800
	float MaxDrawDistance;//[Offset: 0x228, Size: 0x4] 0x78ce94c880
	float MaxDistanceFadeRange;//[Offset: 0x22c, Size: 0x4] 0x78ce94c900
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x78ce94c980
	int ShadowMapChannel;//[Offset: 0x234, Size: 0x4] 0x78ce94ca00
	float MinRoughness;//[Offset: 0x23c, Size: 0x4] 0x78ce94ca80
	float SpecularScale;//[Offset: 0x240, Size: 0x4] 0x78ce94cb00
	float ShadowResolutionScale;//[Offset: 0x244, Size: 0x4] 0x78ce94cb80
	float ShadowBias;//[Offset: 0x248, Size: 0x4] 0x78ce94cc00
	float ShadowSlopeBias;//[Offset: 0x24c, Size: 0x4] 0x78ce94cc80
	float ShadowSharpen;//[Offset: 0x250, Size: 0x4] 0x78ce94cd00
	float ContactShadowLength;//[Offset: 0x254, Size: 0x4] 0x78ce94cd80
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x78ce94ce00
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1] 0x78ce94ce80
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1] 0x78ce94cf00
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1] 0x78ce94cf80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1] 0x78ce94d000
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 0x1] 0x78ce94d080
	LightingChannels LightingChannels;//[Offset: 0x259, Size: 0x1] 0x78ce94d100
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x260, Size: 0x8] 0x78ce94d180
	Vector LightFunctionScale;//[Offset: 0x268, Size: 0xc] 0x78ce94d200
	TextureLightProfile* IESTexture;//[Offset: 0x278, Size: 0x8] 0x78ce94d280
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x78ce94d300
	float IESBrightnessScale;//[Offset: 0x284, Size: 0x4] 0x78ce94d380
	float LightFunctionFadeDistance;//[Offset: 0x288, Size: 0x4] 0x78ce94d400
	float DisabledBrightness;//[Offset: 0x28c, Size: 0x4] 0x78ce94d480
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x78ce94d500
	float BloomScale;//[Offset: 0x294, Size: 0x4] 0x78ce94d580
	float BloomThreshold;//[Offset: 0x298, Size: 0x4] 0x78ce94d600
	float BloomMaxBrightness;//[Offset: 0x29c, Size: 0x4] 0x78ce94d680
	Color BloomTint;//[Offset: 0x2a0, Size: 0x4] 0x78ce94b600
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1] 0x78ce94b680
	float RayStartOffsetDepthScale;//[Offset: 0x2a8, Size: 0x4] 0x78ce94b700
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xb056e24 0x78ce92d7c0
	void SetUseIESBrightness(bool bNewValue);// 0xb05632c 0x78ce92d8a0
	void SetTransmission(bool bNewValue);// 0xb0567d0 0x78ce92d980
	void SetTemperature(float NewTemperature);// 0xb056c80 0x78ce92da60
	void SetSpecularScale(float NewValue);// 0xb05608c 0x78ce92db40
	void SetShadowSlopeBias(float NewValue);// 0xb056134 0x78ce92dc20
	void SetShadowBias(float NewValue);// 0xb0561dc 0x78ce92dd00
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xb055e94 0x78ce92dde0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0xb056b30 0x78ce92dec0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0xb056bd8 0x78ce92dfa0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0xb056a88 0x78ce92e080
	void SetLightFunctionDisabledBrightness(float NewValue);// 0xb0569e0 0x78ce92e160
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0xb056d28 0x78ce92e240
	void SetIntensity(float NewIntensity);// 0xb056f74 0x78ce92e320
	void SetIndirectLightingIntensity(float NewIntensity);// 0xb056ecc 0x78ce92e400
	void SetIESTexture(TextureLightProfile* NewValue);// 0xb0563dc 0x78ce92e4e0
	void SetIESBrightnessScale(float NewValue);// 0xb056284 0x78ce92e5c0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0xb055fdc 0x78ce92e6a0
	void SetEnableLightShaftBloom(bool bNewValue);// 0xb056720 0x78ce92adc0
	void SetBloomTint(Color NewValue);// 0xb056484 0x78ce92aea0
	void SetBloomThreshold(float NewValue);// 0xb0565d0 0x78ce92af80
	void SetBloomScale(float NewValue);// 0xb056678 0x78ce92b060
	void SetBloomMaxBrightness(float NewValue);// 0xb056528 0x78ce92b140
	void SetAffectTranslucentLighting(bool bNewValue);// 0xb056880 0x78ce92b220
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0xb056930 0x78ce92b300

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1f4, Size: 0x10] 0x78ce94a580
	float Brightness;//[Offset: 0x204, Size: 0x4] 0x78ce94a600
	float Intensity;//[Offset: 0x208, Size: 0x4] 0x78ce94a680
	Color LightColor;//[Offset: 0x20c, Size: 0x4] 0x78ce94a700
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x78ce94a780
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x78ce94a800
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x78ce94a880
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1] 0x78ce94a900
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1] 0x78ce94a980
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 0x1] 0x78ce94aa00
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 0x1] 0x78ce94aa80
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1] 0x78ce94ab00
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x78ce94ab80
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1] 0x78ce94ac00
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1] 0x78ce94ac80
	float DeepShadowLayerDistribution;//[Offset: 0x214, Size: 0x4] 0x78ce94ad00
	float IndirectLightingIntensity;//[Offset: 0x218, Size: 0x4] 0x78ce94ad80
	float VolumetricScatteringIntensity;//[Offset: 0x21c, Size: 0x4] 0x78ce94ae00
	int SamplesPerPixel;//[Offset: 0x220, Size: 0x4] 0x78ce94ae80
	void SetSamplesPerPixel(int NewValue);// 0xb057d44 0x78ce92b3e0
	void SetCastVolumetricShadow(bool bNewValue);// 0xb0580ac 0x78ce92b4c0
	void SetCastShadows(bool bNewValue);// 0xb058194 0x78ce92b5a0
	void SetCastRaytracedShadow(bool bNewValue);// 0xb057dec 0x78ce92b680
	void SetCastDeepShadow(bool bNewValue);// 0xb057ffc 0x78ce92b760
	void SetAffectReflection(bool bNewValue);// 0xb057f4c 0x78ce92b840
	void SetAffectGlobalIllumination(bool bNewValue);// 0xb057e9c 0x78ce92b920
	LinearColor GetLightColor();// 0xb05815c 0x78ce92ba00

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x100, Size: 0x4] 0x78ce3b2880
	float TextureMultiplier;//[Offset: 0x104, Size: 0x4] 0x78ce3b2900

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x31c, Size: 0x4] 0x78ce94f080
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1] 0x78ce94f100
	float OcclusionMaskDarkness;//[Offset: 0x324, Size: 0x4] 0x78ce94f180
	float OcclusionDepthRange;//[Offset: 0x328, Size: 0x4] 0x78ce94f200
	Vector LightShaftOverrideDirection;//[Offset: 0x32c, Size: 0xc] 0x78ce94f280
	float WholeSceneDynamicShadowRadius;//[Offset: 0x338, Size: 0x4] 0x78ce94f300
	float DynamicShadowDistanceMovableLight;//[Offset: 0x33c, Size: 0x4] 0x78ce94f380
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x340, Size: 0x4] 0x78ce94f400
	int DynamicShadowCascades;//[Offset: 0x344, Size: 0x4] 0x78ce94f480
	float CascadeDistributionExponent;//[Offset: 0x348, Size: 0x4] 0x78ce94f500
	float CascadeTransitionFraction;//[Offset: 0x34c, Size: 0x4] 0x78ce94f580
	float ShadowDistanceFadeoutFraction;//[Offset: 0x350, Size: 0x4] 0x78ce94f600
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1] 0x78ce94f680
	int FarShadowCascadeCount;//[Offset: 0x358, Size: 0x4] 0x78ce94f700
	float FarShadowDistance;//[Offset: 0x35c, Size: 0x4] 0x78ce94f780
	float DistanceFieldShadowDistance;//[Offset: 0x360, Size: 0x4] 0x78ce94d700
	float LightSourceAngle;//[Offset: 0x364, Size: 0x4] 0x78ce94d780
	float LightSourceSoftAngle;//[Offset: 0x368, Size: 0x4] 0x78ce94d800
	float ShadowSourceAngleFactor;//[Offset: 0x36c, Size: 0x4] 0x78ce94d880
	float TraceDistance;//[Offset: 0x370, Size: 0x4] 0x78ce94d900
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 0x1] 0x78ce94d980
	int AtmosphereSunLightIndex;//[Offset: 0x378, Size: 0x4] 0x78ce94da00
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x37c, Size: 0x10] 0x78ce94da80
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1] 0x78ce94db00
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1] 0x78ce94db80
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1] 0x78ce94dc00
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1] 0x78ce94dc80
	float CloudShadowStrength;//[Offset: 0x390, Size: 0x4] 0x78ce94dd00
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x394, Size: 0x4] 0x78ce94dd80
	float CloudShadowOnSurfaceStrength;//[Offset: 0x398, Size: 0x4] 0x78ce94de00
	float CloudShadowDepthBias;//[Offset: 0x39c, Size: 0x4] 0x78ce94de80
	float CloudShadowExtent;//[Offset: 0x3a0, Size: 0x4] 0x78ce94df00
	float CloudShadowMapResolutionScale;//[Offset: 0x3a4, Size: 0x4] 0x78ce94df80
	float CloudShadowRaySampleCountScale;//[Offset: 0x3a8, Size: 0x4] 0x78ce94e000
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x3ac, Size: 0x10] 0x78ce94e080
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3bc, Size: 0x10] 0x78ce94e100
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 0x1] 0x78ce94e180
	Color ModulatedShadowColor;//[Offset: 0x3d0, Size: 0x4] 0x78ce94e200
	float ShadowAmount;//[Offset: 0x3d4, Size: 0x4] 0x78ce94e280
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0xaf5cdc8 0x78ce92cd40
	void SetShadowAmount(float NewValue);// 0xaf5cb20 0x78ce92ce20
	void SetOcclusionMaskDarkness(float NewValue);// 0xaf5cc70 0x78ce92cf00
	void SetLightShaftOverrideDirection(Vector NewValue);// 0xaf5cbc8 0x78ce92cfe0
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0xaf5cd18 0x78ce92d0c0
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0xaf5d068 0x78ce92d1a0
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0xaf5d110 0x78ce92d280
	void SetDynamicShadowCascades(int NewValue);// 0xaf5cfc0 0x78ce92d360
	void SetCascadeTransitionFraction(float NewValue);// 0xaf5ce70 0x78ce92d440
	void SetCascadeDistributionExponent(float NewValue);// 0xaf5cf18 0x78ce92d520
	void SetAtmosphereSunLightIndex(int NewValue);// 0xaf5c9c8 0x78ce92d600
	void SetAtmosphereSunLight(bool bNewValue);// 0xaf5ca70 0x78ce92d6e0

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4] 0x78cf0a8e80

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4] 0x78cf0a8f00
	float ShadowExponent;//[Offset: 0x4, Size: 0x4] 0x78cf0a8f80
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf0a9000

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4] 0x78ce94ef00

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78ce94ee80

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10] 0x78ea07b640
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78ea085600
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78ea085680

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78ea085700
	float OutVal;//[Offset: 0x4, Size: 0x4] 0x78ea085780
	float ArriveTangent;//[Offset: 0x8, Size: 0x4] 0x78ea085800
	float LeaveTangent;//[Offset: 0xc, Size: 0x4] 0x78ea085880
	byte InterpMode;//[Offset: 0x10, Size: 0x1] 0x78ea085900

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8] 0x78ce94eb80
	float MinInput;//[Offset: 0x40, Size: 0x4] 0x78ce94ec00
	float MaxInput;//[Offset: 0x44, Size: 0x4] 0x78ce94ec80
	float MinOutput;//[Offset: 0x48, Size: 0x4] 0x78ce94ed00
	float MaxOutput;//[Offset: 0x4c, Size: 0x4] 0x78ce94ed80
	byte ParamMode;//[Offset: 0x50, Size: 0x1] 0x78ce94ee00

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x78ce94ea80
	float Max;//[Offset: 0x38, Size: 0x4] 0x78ce94eb00

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78ce94ea00

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10] 0x78ea07b5a0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78ea087300
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78ea087380

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78ea087400
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8] 0x78ea085380
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8] 0x78ea085400
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8] 0x78ea085480
	byte InterpMode;//[Offset: 0x1c, Size: 0x1] 0x78ea085500

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x34, Size: 0xc] 0x78ce94ff80
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78ce94e780
	byte LockedAxes;//[Offset: 0x41, Size: 0x1] 0x78ce94e800

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78ce94fe00
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce94fe80
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x78ce94ff00

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x44, Size: 0x8] 0x78ce94fb00
	Vector MinInput;//[Offset: 0x4c, Size: 0xc] 0x78ce94fb80
	Vector MaxInput;//[Offset: 0x58, Size: 0xc] 0x78ce94fc00
	Vector MinOutput;//[Offset: 0x64, Size: 0xc] 0x78ce94fc80
	Vector MaxOutput;//[Offset: 0x70, Size: 0xc] 0x78ce94fd00
	byte ParamModes;//[Offset: 0x7c, Size: 0x1] 0x78ce94fd80

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x34, Size: 0xc] 0x78ce94f800
	Vector Min;//[Offset: 0x40, Size: 0xc] 0x78ce94f880
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78ce94f900
	byte LockedAxes;//[Offset: 0x4d, Size: 0x1] 0x78ce94f980
	byte MirrorFlags;//[Offset: 0x4e, Size: 0x1] 0x78ce94fa00
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x78ce94fa80

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78ce980e00
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce980e80
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78ce980f00
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x78ce980f80
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1] 0x78ce981000
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x78ce981080

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10] 0x78ea07b500
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78ea086700
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78ea086780

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78ea086800
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18] 0x78ea086880
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18] 0x78ea086900
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18] 0x78ea086980
	byte InterpMode;//[Offset: 0x4c, Size: 0x1] 0x78ea086a00

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0xc] 0x78ea085100
	Vector v2;//[Offset: 0xc, Size: 0xc] 0x78ea085180

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8] 0x78ce8c95c0
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10] 0x78ce8c9660
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78ce980680
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x78ce980700
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1] 0x78ce980780

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: GraphNodeContextMenuContext.Object
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8] 0x78ce980400
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8] 0x78ce980480
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8] 0x78ce980500
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ce980580

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10] 0x78ce981c80
	FString Excerpt;//[Offset: 0xa8, Size: 0x10] 0x78ce981d00

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10] 0x78ce988780
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10] 0x78ce988800
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10] 0x78ce988880
	FString LeftMessage;//[Offset: 0x58, Size: 0x10] 0x78ce988900
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10] 0x78ce988980
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10] 0x78ce988a00
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10] 0x78ce988a80
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10] 0x78ce988b00

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x220, Size: 0x8] 0x78ce988680
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78ce988700
	void OnRep_bEnabled();// 0xaf859b8 0x78ce92f3c0

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x1f4, Size: 0x4] 0x78ce98b200
	float FogHeightFalloff;//[Offset: 0x1f8, Size: 0x4] 0x78ce98b280
	ExponentialHeightFogData SecondFogData;//[Offset: 0x1fc, Size: 0xc] 0x78ce98b300
	LinearColor FogInscatteringColor;//[Offset: 0x208, Size: 0x10] 0x78ce98b380
	TextureCube* InscatteringColorCubemap;//[Offset: 0x218, Size: 0x8] 0x78ce98b400
	float InscatteringColorCubemapAngle;//[Offset: 0x220, Size: 0x4] 0x78ce98b480
	LinearColor InscatteringTextureTint;//[Offset: 0x224, Size: 0x10] 0x78ce98b500
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x234, Size: 0x4] 0x78ce98b580
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x238, Size: 0x4] 0x78ce989500
	float DirectionalInscatteringExponent;//[Offset: 0x23c, Size: 0x4] 0x78ce989580
	float DirectionalInscatteringStartDistance;//[Offset: 0x240, Size: 0x4] 0x78ce989600
	LinearColor DirectionalInscatteringColor;//[Offset: 0x244, Size: 0x10] 0x78ce989680
	float FogMaxOpacity;//[Offset: 0x254, Size: 0x4] 0x78ce989700
	float StartDistance;//[Offset: 0x258, Size: 0x4] 0x78ce989780
	float FogCutoffDistance;//[Offset: 0x25c, Size: 0x4] 0x78ce989800
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78ce989880
	float VolumetricFogScatteringDistribution;//[Offset: 0x264, Size: 0x4] 0x78ce989900
	Color VolumetricFogAlbedo;//[Offset: 0x268, Size: 0x4] 0x78ce989980
	LinearColor VolumetricFogEmissive;//[Offset: 0x26c, Size: 0x10] 0x78ce989a00
	float VolumetricFogExtinctionScale;//[Offset: 0x27c, Size: 0x4] 0x78ce989a80
	float VolumetricFogDistance;//[Offset: 0x280, Size: 0x4] 0x78ce989b00
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x284, Size: 0x4] 0x78ce989b80
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x78ce989c00
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0xaf86384 0x78ce991820
	void SetVolumetricFogExtinctionScale(float NewValue);// 0xaf862dc 0x78ce991900
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0xaf86190 0x78ce9919e0
	void SetVolumetricFogDistance(float NewValue);// 0xaf860e8 0x78ce991ac0
	void SetVolumetricFogAlbedo(Color NewValue);// 0xaf86238 0x78ce991ba0
	void SetVolumetricFog(bool bNewValue);// 0xaf8642c 0x78ce991c80
	void SetStartDistance(float Value);// 0xaf86584 0x78ce92e780
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0xaf86a1c 0x78ce92e860
	void SetInscatteringTextureTint(LinearColor Value);// 0xaf86974 0x78ce92e940
	void SetInscatteringColorCubemapAngle(float Value);// 0xaf86b6c 0x78ce92ea20
	void SetInscatteringColorCubemap(TextureCube* Value);// 0xaf86c14 0x78ce92eb00
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0xaf86ac4 0x78ce92ebe0
	void SetFogMaxOpacity(float Value);// 0xaf8662c 0x78ce92ecc0
	void SetFogInscatteringColor(LinearColor Value);// 0xaf86cbc 0x78ce92eda0
	void SetFogHeightFalloff(float Value);// 0xaf866d4 0x78ce92ee80
	void SetFogDensity(float Value);// 0xaf86d64 0x78ce92ef60
	void SetFogCutoffDistance(float Value);// 0xaf864dc 0x78ce92f040
	void SetDirectionalInscatteringStartDistance(float Value);// 0xaf86824 0x78ce92f120
	void SetDirectionalInscatteringExponent(float Value);// 0xaf868cc 0x78ce92f200
	void SetDirectionalInscatteringColor(LinearColor Value);// 0xaf8677c 0x78ce92f2e0

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4] 0x78cf0a9d00
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4] 0x78cf0a9d80
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4] 0x78cf0a9e00

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10] 0x78ce98bf00
	enum Hinting;//[Offset: 0x40, Size: 0x1] 0x78ce8ccae0
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1] 0x78ce8ccb80
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1] 0x78ce8ccc20

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8] 0x78ce98be80

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xb0] 0x78ce98be00

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x1f8, Size: 0x8] 0x78ce98b600
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x78ce98b680
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x78ce98b700
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1] 0x78ce98b780
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1] 0x78ce98b800
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1] 0x78ce98b880
	float IntensityMultiplier;//[Offset: 0x204, Size: 0x4] 0x78ce98b900
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x208, Size: 0x8] 0x78ce98b980
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x210, Size: 0xb0] 0x78ce98ba00
	delegate OnForceFeedbackFinished;//[Offset: 0x2c0, Size: 0x10] 0x78ce98ba80
	void Stop();// 0xaf89bf0 0x78ce991040
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0xaf89b48 0x78ce991120
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0xaf89cbc 0x78ce991200
	void Play(float StartTime);// 0xaf89c0c 0x78ce9912e0
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0xaf89934 0x78ce9913c0
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0xaf89a48 0x78ce9914a0

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xdd8, Size: 0x4] 0x78ce98d480
	float ServerFlushLogInterval;//[Offset: 0xddc, Size: 0x4] 0x78ce98d500
	GameInstance* GameInstance;//[Offset: 0xde0, Size: 0x8] 0x78ce98d580

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 0x8] 0x78ce71ed80
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1] 0x78ce71ee00
	int NumSpectators;//[Offset: 0x2cc, Size: 0x4] 0x78ce71ee80
	int NumPlayers;//[Offset: 0x2d0, Size: 0x4] 0x78ce71ef00
	int NumBots;//[Offset: 0x2d4, Size: 0x4] 0x78ce71ef80
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 0x4] 0x78ce71f000
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 0x4] 0x78ce71f080
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 0x8] 0x78ce722ae0
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 0x10] 0x78ce722b80
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 0x4] 0x78ce71f180
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 0x4] 0x78ce71f200
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x78ce71f280
	void StartMatch();// 0xaf8ea90 0x78ce70f820
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0xaf8e850 0x78ce70f900
	void Say(FString Msg);// 0xaf8e900 0x78ce70f9e0
	void RestartGame();// 0xaf8ea58 0x78ce70fac0
	bool ReadyToStartMatch();// 0xaf8e9fc 0x78ce70fba0
	bool ReadyToEndMatch();// 0xaf8e9bc 0x78ce70fc80
	void K2_OnSetMatchState(FName newstate);// 0x8a873f8 0x78ce70fd60
	bool IsMatchInProgress();// 0xaf8eaac 0x78ce70fe40
	FName GetMatchState();// 0xaf8eaec 0x78ce70ff20
	void EndMatch();// 0xaf8ea74 0x78ce70caa0
	void AbortMatch();// 0xaf8ea3c 0x78ce70cb80

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	static void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0xaf9c4b4 0x78ce998c80
	static void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0xaf9c6c8 0x78ce998d60
	static bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector startPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0xaf930c0 0x78ce998e40
	static AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0xaf98400 0x78ce998f20
	static AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0xaf9882c 0x78ce999000
	static AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0xaf99164 0x78ce995720
	static Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0xaf9e52c 0x78ce995800
	static ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xaf96df0 0x78ce9958e0
	static ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xaf971d4 0x78ce9959c0
	static ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0xaf99f80 0x78ce995aa0
	static ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0xaf9a2d0 0x78ce995b80
	static AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xaf974d0 0x78ce995c60
	static AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0xaf97910 0x78ce995d40
	static AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0xaf97f6c 0x78ce995e20
	static DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0xaf95b78 0x78ce995f00
	static DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0xaf95e30 0x78ce995fe0
	static void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0xaf92f30 0x78ce9960c0
	static void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0xaf9b3b4 0x78ce9961a0
	static void SetSubtitlesEnabled(bool bEnabled);// 0xaf96d50 0x78ce996280
	static void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0xaf96940 0x78ce996360
	static void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0xaf999b0 0x78ce996440
	static void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0xaf9cc90 0x78ce996520
	static void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0xaf960f8 0x78ce996600
	static void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0xaf9ba1c 0x78ce9966e0
	static void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0xaf99b24 0x78ce9967c0
	static void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0xaf996c8 0x78ce9968a0
	static bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0xaf9b91c 0x78ce996980
	static void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0xaf9b784 0x78ce996a60
	static void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0xaf9b5ec 0x78ce996b40
	static void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0xaf96c38 0x78ce996c20
	static bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0xaf94c2c 0x78ce996d00
	static void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0xaf9ce1c 0x78ce996de0
	static Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0xaf92d48 0x78ce996ec0
	static Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0xaf92e3c 0x78ce996fa0
	static void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0xaf966e8 0x78ce997080
	static bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0xaf9288c 0x78ce997160
	static void PrimeSound(SoundBase* InSound);// 0xaf96ba0 0x78ce997240
	static void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0xaf96608 0x78ce997320
	static void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0xaf9a588 0x78ce993a40
	static void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0xaf98b78 0x78ce993b20
	static void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, Actor* OwningActor, bool bIsUISound);// 0xaf9941c 0x78ce993c00
	static void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0xaf97c6c 0x78ce993ce0
	static void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0xaf981e4 0x78ce993dc0
	static FString ParseOption(FString Options, FString Key);// 0xaf9230c 0x78ce993ea0
	static void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0xaf9bee8 0x78ce993f80
	static void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0xaf9c138 0x78ce994060
	static HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0xaf9505c 0x78ce994140
	static void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0xaf9c854 0x78ce994220
	static void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0xaf9cab0 0x78ce994300
	static SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0xaf94a28 0x78ce9943e0
	static bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0xaf9b6d8 0x78ce9944c0
	static bool IsGamePaused(const Object* WorldContextObject);// 0xaf9b870 0x78ce9945a0
	static bool HasOption(FString Options, FString InKey);// 0xaf921b4 0x78ce994680
	static bool HasLaunchOption(FString OptionToCheck);// 0xaf91fa4 0x78ce994760
	static int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0xaf92bc4 0x78ce994840
	static IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0xaf93010 0x78ce994920
	static float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0xaf9487c 0x78ce994a00
	static void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0xaf92610 0x78ce994ae0
	static enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0xaf9b498 0x78ce994bc0
	static float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0xaf9472c 0x78ce994ca0
	static float GetTimeSeconds(const Object* WorldContextObject);// 0xaf947d4 0x78ce994d80
	static byte GetSurfaceType(out const HitResult hit);// 0xaf94f8c 0x78ce994e60
	static LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0xaf9c3c4 0x78ce994f40
	static float GetRealTimeSeconds(const Object* WorldContextObject);// 0xaf94684 0x78ce995020
	static Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0xaf9d234 0x78ce995100
	static int GetPlayerControllerID(PlayerController* Player);// 0xaf9cd74 0x78ce9951e0
	static PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0xaf9d328 0x78ce9952c0
	static PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0xaf9d41c 0x78ce9953a0
	static Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0xaf9d140 0x78ce995480
	static PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0xaf9d04c 0x78ce995560
	static FString GetPlatformName();// 0xaf94344 0x78ce995640
	static class Object GetObjectClass(const Object* Object);// 0xaf9bba8 0x78ce991d60
	static int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0xaf96050 0x78ce991e40
	static void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0xaf924a4 0x78ce991f20
	static int GetIntOption(FString Options, FString Key, int DefaultValue);// 0xaf9205c 0x78ce992000
	static float GetGlobalTimeDilation(const Object* WorldContextObject);// 0xaf9bb00 0x78ce9920e0
	static GameStateBase* GetGameState(const Object* WorldContextObject);// 0xaf9bc50 0x78ce9921c0
	static GameModeBase* GetGameMode(const Object* WorldContextObject);// 0xaf9bcf8 0x78ce9922a0
	static GameInstance* GetGameInstance(const Object* WorldContextObject);// 0xaf9d510 0x78ce992380
	static bool GetEnableWorldRendering(const Object* WorldContextObject);// 0xaf9b540 0x78ce992460
	static ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0xaf961dc 0x78ce992540
	static FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0xaf9bda0 0x78ce992620
	static bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0xaf99c50 0x78ce992700
	static float GetAudioTimeSeconds(const Object* WorldContextObject);// 0xaf945dc 0x78ce9927e0
	static void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0xaf9d748 0x78ce9928c0
	static void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0xaf9d88c 0x78ce9929a0
	static void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0xaf9d5b8 0x78ce992a80
	static void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0xaf9d9d0 0x78ce992b60
	static Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0xaf9db14 0x78ce992c40
	static void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0xaf9dc04 0x78ce992d20
	static Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0xaf9ddb0 0x78ce992e00
	static void GetAccurateRealTime(const Object* WorldContextObject, out int Seconds, out float PartialSeconds);// 0xaf94494 0x78ce992ee0
	static void FlushLevelStreaming(const Object* WorldContextObject);// 0xaf9c32c 0x78ce992fc0
	static Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0xaf9de74 0x78ce9930a0
	static bool FindCollisionUV(out const HitResult hit, int UVChannel, out Vector2D UV);// 0xaf94e24 0x78ce993180
	static void EnableLiveStreaming(bool enable);// 0xaf943f4 0x78ce993260
	static bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0xaf94b28 0x78ce993340
	static bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0xaf92a28 0x78ce993420
	static bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0xaf94924 0x78ce993500
	static void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0xaf96284 0x78ce9935e0
	static AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0xaf98eac 0x78ce9936c0
	static SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0xaf94d7c 0x78ce9937a0
	static PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0xaf9cf08 0x78ce993880
	static void ClearSoundMixModifiers(const Object* WorldContextObject);// 0xaf96570 0x78ce993960
	static void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0xaf967c8 0x78ce990080
	static void CancelAsyncLoading();// 0xaf9c318 0x78ce990160
	static void BreakHitResult(out const HitResult hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0xaf955a0 0x78ce990240
	static bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector startLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0xaf93fe8 0x78ce990320
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector startPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0xaf934f8 0x78ce990400
	static bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector startPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0xaf93a68 0x78ce9904e0
	static bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0xaf932dc 0x78ce9905c0
	static Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0xaf9e184 0x78ce9906a0
	static Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0xaf9e37c 0x78ce990780
	static Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0xaf9df90 0x78ce990860
	static bool AreSubtitlesEnabled();// 0xaf96d18 0x78ce990940
	static bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0xaf99e40 0x78ce990a20
	static bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0xaf9ac58 0x78ce990b00
	static bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0xaf9b050 0x78ce990be0
	static float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0xaf9a9bc 0x78ce990cc0
	static float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0xaf9a7e8 0x78ce990da0
	static void AnnounceAccessibleString(FString AnnouncementString);// 0xaf91f00 0x78ce990e80
	static void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0xaf96364 0x78ce990f60

--------------------------------
Class: PredictProjectilePathParams
	Vector startLocation;//[Offset: 0x0, Size: 0xc] 0x78cf0abe80
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc] 0x78cf0abf00
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cf0abf80
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4] 0x78cf0ac000
	float MaxSimTime;//[Offset: 0x20, Size: 0x4] 0x78cf0ac080
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78cf0ac100
	byte TraceChannel;//[Offset: 0x25, Size: 0x1] 0x78cf0ac180
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10] 0x78cf084ac0
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10] 0x78cf084b60
	float SimFrequency;//[Offset: 0x48, Size: 0x4] 0x78cf0ac300
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4] 0x78cf0ac380
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1] 0x78cf0ac400
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4] 0x78cf0ac480
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cf0ac500

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10] 0x78cf084c00
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c] 0x78cf0aa680
	HitResult HitResult;//[Offset: 0x2c, Size: 0x8c] 0x78cf0aa700

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cf0ac600
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x78cf0aa580
	float Time;//[Offset: 0x18, Size: 0x4] 0x78cf0aa600

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x26c, Size: 0x8] 0x78ce71ea00
	FName PreviousMatchState;//[Offset: 0x274, Size: 0x8] 0x78ce71ea80
	int ElapsedTime;//[Offset: 0x27c, Size: 0x4] 0x78ce71eb00
	void OnRep_MatchState();// 0xafa24f0 0x78ce70f2e0
	void OnRep_ElapsedTime();// 0xafa24d4 0x78ce70f3c0

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x230, Size: 0x8] 0x78ce9b4180
	void SetOuterConeAngle(float NewOuterConeAngle);// 0xb1a5a50 0x78ce99be60
	void SetInnerConeAngle(float NewInnerConeAngle);// 0xb1a5af8 0x78ce99bf40

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x344, Size: 0x4] 0x78ce39cc80
	float OuterConeAngle;//[Offset: 0x348, Size: 0x4] 0x78ce39cd00
	void SetOuterConeAngle(float NewOuterConeAngle);// 0xb1a6088 0x78ce3a1120
	void SetInnerConeAngle(float NewInnerConeAngle);// 0xb1a6130 0x78ce3a1200

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x78ce387680
	float LightFalloffExponent;//[Offset: 0x334, Size: 0x4] 0x78ce387700
	float SourceRadius;//[Offset: 0x338, Size: 0x4] 0x78ce387780
	float SoftSourceRadius;//[Offset: 0x33c, Size: 0x4] 0x78ce387800
	float SourceLength;//[Offset: 0x340, Size: 0x4] 0x78ce387880
	void SetSourceRadius(float bNewValue);// 0xb127540 0x78ce3492a0
	void SetSourceLength(float NewValue);// 0xb1273f0 0x78ce349380
	void SetSoftSourceRadius(float bNewValue);// 0xb127498 0x78ce349460
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0xb1275e8 0x78ce349540

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x319, Size: 0x1] 0x78ce9d16e0
	float Radius;//[Offset: 0x31c, Size: 0x4] 0x78ce353080
	float AttenuationRadius;//[Offset: 0x320, Size: 0x4] 0x78ce353100
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x324, Size: 0xc] 0x78ce353180
	void SetIntensityUnits(enum NewIntensityUnits);// 0xb05c4d8 0x78ce340a20
	void SetAttenuationRadius(float NewRadius);// 0xb05c580 0x78ce340b00
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0xb05c398 0x78ce340be0

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10] 0x78ce8cdd00
	int SampleRate;//[Offset: 0x38, Size: 0x4] 0x78ce9b4100

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110] 0x78ce9b4000

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88] 0x78cf0abd00
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88] 0x78cf0abd80

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8] 0x78ce9b3f80

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void StopPerformanceSnapshots();// 0xafa97dc 0x78ce99bbc0
	static void StartPerformanceSnapshots();// 0xafa97f0 0x78ce99bca0
	static void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0xafa9694 0x78ce99bd80

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4d0, Size: 0x10] 0x78ce7259c0
	int NumCustomDataFloats;//[Offset: 0x4e0, Size: 0x4] 0x78ce74cc80
	float[] PerInstanceSMCustomData;//[Offset: 0x4e8, Size: 0x10] 0x78ce725a60
	int InstancingRandomSeed;//[Offset: 0x4f8, Size: 0x4] 0x78ce74cd80
	int InstanceStartCullDistance;//[Offset: 0x4fc, Size: 0x4] 0x78ce74ce00
	int InstanceEndCullDistance;//[Offset: 0x500, Size: 0x4] 0x78ce74ce80
	int[] InstanceReorderTable;//[Offset: 0x508, Size: 0x10] 0x78ce725b00
	int NumPendingLightmaps;//[Offset: 0x560, Size: 0x4] 0x78ce74cf80
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x568, Size: 0x10] 0x78ce725ba0
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xafb9f90 0x78ce758c80
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0xafba324 0x78ce758d60
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0xafb9924 0x78ce758e40
	bool RemoveInstance(int InstanceIndex);// 0xafb9a64 0x78ce758f20
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0xafba1ac 0x78ce759000
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0xafb9778 0x78ce755720
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0xafb9618 0x78ce755800
	int GetInstanceCount();// 0xafb9a14 0x78ce7558e0
	void ClearInstances();// 0xafb9a48 0x78ce7559c0
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xafb9d84 0x78ce755aa0
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xafb9b20 0x78ce755b80
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0xafba4c8 0x78ce755c60
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0xafba5ac 0x78ce755d40
	int AddInstance(out const Transform InstanceTransform);// 0xafba714 0x78ce755e20

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x78cf0ae500

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x588, Size: 0x10] 0x78ce7257e0
	int NumBuiltInstances;//[Offset: 0x598, Size: 0x4] 0x78ce74c680
	Box BuiltInstanceBounds;//[Offset: 0x5a0, Size: 0x1c] 0x78ce74c700
	Box UnbuiltInstanceBounds;//[Offset: 0x5bc, Size: 0x1c] 0x78ce74c780
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x5d8, Size: 0x10] 0x78ce725880
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 0x1] 0x78ce74c880
	int OcclusionLayerNumNodes;//[Offset: 0x5f0, Size: 0x4] 0x78ce74c900
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x5f4, Size: 0x1c] 0x78ce74c980
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1] 0x78ce74ca00
	int InstanceCountToRender;//[Offset: 0x614, Size: 0x4] 0x78ce74ca80
	bool RemoveInstances(out const int[] InstancesToRemove);// 0xafa9fb8 0x78ce758ba0

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10] 0x78ce8cdc60
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50] 0x78cee16280

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c] 0x78cf0ad400
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8] 0x78cf0ad480
	FName Key;//[Offset: 0x28, Size: 0x8] 0x78cf0ad500

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78ce352980
	<MaterialInterface*,InstancedStaticMeshComponent*> ImpostersStaticMeshComponents;//[Offset: 0x228, Size: 0x50] 0x78cee161c0
	HLODProxy* Proxy;//[Offset: 0x278, Size: 0x8] 0x78ce352b00
	FName Key;//[Offset: 0x280, Size: 0x8] 0x78ce352b80
	float LODDrawDistance;//[Offset: 0x288, Size: 0x4] 0x78ce352c00
	int LODLevel;//[Offset: 0x28c, Size: 0x4] 0x78ce352c80
	Actor*[] SubActors;//[Offset: 0x290, Size: 0x10] 0x78ce9d15a0
	byte CachedNumHLODLevels;//[Offset: 0x2a0, Size: 0x1] 0x78ce352d80

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	static float RandomSobolFloat(int index, int Dimension, float Seed);// 0xafafb8c 0x78ce99b3e0
	static Vector RandomSobolCell3D(int index, int NumCells, Vector Cell, Vector Seed);// 0xafaf620 0x78ce99b4c0
	static Vector2D RandomSobolCell2D(int index, int NumCells, Vector2D Cell, Vector2D Seed);// 0xafaf8d8 0x78ce99b5a0
	static float NextSobolFloat(int index, int Dimension, float PreviousValue);// 0xafafa50 0x78ce99b680
	static Vector NextSobolCell3D(int index, int NumCells, Vector PreviousValue);// 0xafaf4e4 0x78ce99b760
	static Vector2D NextSobolCell2D(int index, int NumCells, Vector2D PreviousValue);// 0xafaf7a4 0x78ce99b840
	static ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0xafaf338 0x78ce99b920
	static void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0xafaee80 0x78ce99ba00
	static void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0xafaf1a0 0x78ce99bae0

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8] 0x78cf0ad080
	int NumMips;//[Offset: 0x8, Size: 0x4] 0x78cf0ad100
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10] 0x78cf084840
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10] 0x78cf0848e0
	Color[] TextureData;//[Offset: 0x30, Size: 0x10] 0x78cf084980
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8] 0x78cf0ad300
	byte Weighting;//[Offset: 0x48, Size: 0x1] 0x78cf0ad380

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce9b4880
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10] 0x78ce8cdb20
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10] 0x78ce8cdbc0

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78ce8cd940

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8] 0x78cf0acb00
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1] 0x78cf0acb80
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x78cf0acc00

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0acc80
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0acd00
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0acd80

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78ce8cd8a0

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8] 0x78cf0aca00
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x78cf0aca80

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78ce8cd800

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18] 0x78cf0ac900
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8] 0x78cf0ac980

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78ce8cd6c0

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20] 0x78cf0ac700
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1] 0x78cf0ac780
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8] 0x78cf0ac800

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18] 0x78cee95380
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cee95400
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x78cee95480
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x78cee95500
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x78cee95580

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10] 0x78ce8cf600
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce9b6900
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78ce9b6980
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78ce9b6a00
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x78ce9b6a80
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x78ce9b6b00
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x78ce9b6b80
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x78ce9b6c00
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x78ce9b6c80
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78ce9b6d00
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x78ce9b6d80
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x78ce9b6e00
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10] 0x78ce8cf6a0
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10] 0x78ce8cf740
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10] 0x78ce8ccea0
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1] 0x78ce8ccf40
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1] 0x78ce8ccfe0
	float FOVScale;//[Offset: 0x74, Size: 0x4] 0x78ce9b7100
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4] 0x78ce9b7180
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10] 0x78ce8cd080
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10] 0x78ce8cd120
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10] 0x78ce8cd1c0
	class PlayerInput* DefaultPlayerInputClass;//[Offset: 0xb0, Size: 0x28] 0x78ce8cd260
	class InputComponent* DefaultInputComponentClass;//[Offset: 0xd8, Size: 0x28] 0x78ce8cd300
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x100, Size: 0x18] 0x78ce9b7380
	Key ConsoleKey;//[Offset: 0x118, Size: 0x18] 0x78ce9b5300
	Key[] ConsoleKeys;//[Offset: 0x130, Size: 0x10] 0x78ce8cd3a0
	void SaveKeyMappings();// 0xafb74a8 0x78ce99dc20
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xafb74bc 0x78ce99dd00
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xafb7a48 0x78ce99dde0
	static InputSettings* GetInputSettings();// 0xafb7fec 0x78ce99dec0
	void GetAxisNames(out FName[] AxisNames);// 0xafb7328 0x78ce99dfa0
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0xafb76b8 0x78ce99e080
	void GetActionNames(out FName[] ActionNames);// 0xafb73e8 0x78ce99e160
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0xafb7c50 0x78ce99e240
	void ForceRebuildKeymaps();// 0xafb7314 0x78ce99e320
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xafb784c 0x78ce99e400
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0xafb7de4 0x78ce99e4e0

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8] 0x78cf0d1500
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10] 0x78cf0d1780

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4] 0x78cf0d1580
	float Sensitivity;//[Offset: 0x4, Size: 0x4] 0x78cf0d1600
	float Exponent;//[Offset: 0x8, Size: 0x4] 0x78cf0d1680
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf0d1700

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x78cf0d1800
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0d1880
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78cf0d1900
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78cf0d1980
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78cf0d1a00
	Key Key;//[Offset: 0x10, Size: 0x18] 0x78cf0d1a80

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8] 0x78cf0d1b00
	float Scale;//[Offset: 0x8, Size: 0x4] 0x78cf0d1b80
	Key Key;//[Offset: 0x10, Size: 0x18] 0x78cf0d1c00

--------------------------------
Class: InputActionSpeechMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x78cf0d1c80
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8] 0x78cf0d1d00

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78ce8cf560

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1] 0x78cf0ae700
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8] 0x78cf0ac680

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: BoneReferenceSkeletonProvider.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10] 0x78ce9b8300

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8] 0x78ce9b7e00
	float CompressTolerance;//[Offset: 0x58, Size: 0x4] 0x78ce9b7e80

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xec, Size: 0x4] 0x78cf50f500
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x78cf50f580
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1] 0x78cf50f600
	enum TeleportType;//[Offset: 0xf2, Size: 0x1] 0x78cf2cc680
	enum BehaviourType;//[Offset: 0xf3, Size: 0x1] 0x78cf2cc720
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x78cf50f780
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x78cf50d700
	delegate OnInterpToReverse;//[Offset: 0xf8, Size: 0x10] 0x78cf50d780
	delegate OnInterpToStop;//[Offset: 0x108, Size: 0x10] 0x78cf50d800
	delegate OnWaitBeginDelegate;//[Offset: 0x118, Size: 0x10] 0x78cf50d880
	delegate OnWaitEndDelegate;//[Offset: 0x128, Size: 0x10] 0x78cf50d900
	delegate OnResetDelegate;//[Offset: 0x138, Size: 0x10] 0x78cf50d980
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 0x4] 0x78cf50da00
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 0x4] 0x78cf50da80
	InterpControlPoint[] ControlPoints;//[Offset: 0x150, Size: 0x10] 0x78cf2cc7c0
	void StopSimulating(out const HitResult HitResult);// 0xafc3bac 0x78cf522000
	void RestartMovement(float InitialDirection);// 0xafc3b04 0x78cf5220e0
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x8a873f8 0x78cf5221c0
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x8a873f8 0x78cf5222a0
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x8a873f8 0x78cf522380
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x8a873f8 0x78cf522460
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x8a873f8 0x78cf522540
	void FinaliseControlPoints();// 0xafc3af0 0x78cf522620

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc] 0x78cf50db00
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cf50db80

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18] 0x78ce9b7600
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78ce9b7680

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x8c, Size: 0x8] 0x78ce9b7480
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10] 0x78ce8cf060
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce9b7580

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4] 0x78cf0af200
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8] 0x78cf0af280
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4] 0x78cf0af300
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4] 0x78cf0af380
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4] 0x78cf0af400
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x78cf0af480
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x78cf0af500

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18] 0x78ce9b9480
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78ce9b7400

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10] 0x78ce8cefc0
	FName PropertyName;//[Offset: 0x80, Size: 0x8] 0x78ce9b9400

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0af100
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x78cf0af180

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78ce9b9300

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10] 0x78ce8cef20
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce9b9280

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0aef00
	float TransitionTime;//[Offset: 0x4, Size: 0x4] 0x78cf0aef80
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8] 0x78cf0af000
	int ShotNumber;//[Offset: 0x10, Size: 0x4] 0x78cf0af080

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10] 0x78ce8cee80
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce9b9000
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce9b9080
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78ce9b9100
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78ce9b9180

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0aee00
	FName EventName;//[Offset: 0x4, Size: 0x8] 0x78cf0aee80

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78ce9b8e00
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78ce9b8e80
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10] 0x78ce9b8f00

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x90, Size: 0x8] 0x78ce8ced40
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8] 0x78ce8cede0
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78ce9b8d80

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x78ce8ceca0
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78ce9b8d00

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8] 0x78ce9b8c00

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78ce9b8b80

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78ce9b8b00

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20] 0x78ce9b8a00
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8] 0x78ce9b8a80

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78ce9b8980

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x58, Size: 0x4] 0x78ce9b8900

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78ce9b8800

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8] 0x78ce9b8700
	float ResetFloat;//[Offset: 0x30, Size: 0x4] 0x78ce9b8780

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x78ce8ceac0
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10] 0x78ce8ceb60
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x78ce8cec00
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x78ce9b8680

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8] 0x78cf0a7d80
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8] 0x78cf0a7e00
	int ElementIndex;//[Offset: 0x10, Size: 0x4] 0x78cf0a7e80

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4] 0x78ce9b8480

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4] 0x78ce9ba500

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10] 0x78ce9ba480

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78ce9ba300

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4] 0x78ce9ba280

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78ce9ba180
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8] 0x78ce9ba200

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x78ce9ba000
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x78ce9ba080
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78ce9ba100

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x78ce8ce8e0
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10] 0x78ce8ce980
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x78ce8cea20
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x78ce9b9f80

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x78ce8ce660
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78ce9bad80

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x58, Size: 0xc] 0x78ce9b9d80

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x78ce9b9c80
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x78ce9b9d00

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18] 0x78ce9b9b80
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78ce9b9c00

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10] 0x78ea07b1e0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78ea088400
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78ea088480

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78ea086400
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10] 0x78ea086480
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10] 0x78ea086500
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10] 0x78ea086580
	byte InterpMode;//[Offset: 0x34, Size: 0x1] 0x78ea086600

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78ce9b9b00

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1] 0x78ce9bb480
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10] 0x78ce9bb500

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10] 0x78ce8ce840

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0aeb00
	float Duration;//[Offset: 0x4, Size: 0x4] 0x78cf0aeb80
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4] 0x78cf0aec00

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10] 0x78ce8ce7a0
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce9bb180
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78ce9bb200
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x78ce9bb280
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x78ce9bb300
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x78ce9bb380

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0ae900
	float Volume;//[Offset: 0x4, Size: 0x4] 0x78cf0ae980
	float Pitch;//[Offset: 0x8, Size: 0x4] 0x78cf0aea00
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8] 0x78cf0aea80

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10] 0x78ce8ce700
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce9bae80
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce9baf00
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78ce9baf80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78ce9bb000
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1] 0x78ce9bb080

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0ae800
	byte ToggleAction;//[Offset: 0x4, Size: 0x1] 0x78cf0ae880

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78ce9bac80

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10] 0x78ce8ce5c0
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce9bab00
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce9bab80
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78ce9bac00

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0aff00
	byte Action;//[Offset: 0x4, Size: 0x1] 0x78cf0aff80
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1] 0x78cf0ae780

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2] 0x78ce9ba680
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4] 0x78ce9ba700
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8] 0x78ce9ba780
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1] 0x78ce9ba800
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2] 0x78ce9ba880
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8] 0x78ce9ba900
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1] 0x78ce9ba980
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4] 0x78ce9baa00

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	static void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0xafd75bc 0x78ce99fd60
	static void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0xafd572c 0x78ce99fe40
	static void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0xafd745c 0x78ce99ff20
	static void Array_Shuffle(out const int[] TargetArray);// 0xafd73c4 0x78ce99caa0
	static void Array_Set(out const int[] TargetArray, int index, out const int Item, bool bSizeToFit);// 0xafd7180 0x78ce99cb80
	static void Array_Reverse(out const int[] TargetArray);// 0xafd70e8 0x78ce99cc60
	static void Array_Resize(out const int[] TargetArray, int Size);// 0xafd6fd0 0x78ce99cd40
	static bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0xafd6e08 0x78ce99ce20
	static void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0xafd6cf0 0x78ce99cf00
	static void Array_RandomFromStream(out const int[] TargetArray, out RandomStream RandomStream, out int OutItem, out int OutIndex);// 0xafd6b70 0x78ce99cfe0
	static void Array_Random(out const int[] TargetArray, out int OutItem, out int OutIndex);// 0xafd6a40 0x78ce99d0c0
	static int Array_Length(out const int[] TargetArray);// 0xafd699c 0x78ce99d1a0
	static int Array_LastIndex(out const int[] TargetArray);// 0xafd68f8 0x78ce99d280
	static bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0xafd67cc 0x78ce99d360
	static void Array_Insert(out const int[] TargetArray, out const int NewItem, int index);// 0xafd65d8 0x78ce99d440
	static bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0xafd64c0 0x78ce99d520
	static void Array_Get(out const int[] TargetArray, int index, out int Item);// 0xafd62a0 0x78ce99d600
	static int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0xafd60dc 0x78ce99d6e0
	static bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0xafd5f10 0x78ce99d7c0
	static void Array_Clear(out const int[] TargetArray);// 0xafd5e78 0x78ce99d8a0
	static void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0xafd5d70 0x78ce99d980
	static int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0xafd5bb8 0x78ce99da60
	static int Array_Add(out const int[] TargetArray, out const int NewItem);// 0xafd5a00 0x78ce99db40

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4] 0x78ea088100
	int Seed;//[Offset: 0x4, Size: 0x4] 0x78ea088180

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	static void Parse_StringToGuid(FString GuidString, out Guid OutGUID, out bool Success);// 0xafdc98c 0x78ce99f740
	static bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0xafdcd70 0x78ce99f820
	static Guid NewGuid();// 0xafdcbe0 0x78ce99f900
	static bool IsValid_Guid(out const Guid InGuid);// 0xafdccb8 0x78ce99f9e0
	static void Invalidate_Guid(out Guid InGuid);// 0xafdcc14 0x78ce99fac0
	static bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0xafdce78 0x78ce99fba0
	static FString Conv_GuidToString(out const Guid InGuid);// 0xafdcae0 0x78ce99fc80

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	static bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0xafdd9b0 0x78ce9e0240
	static bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0xafde2c0 0x78ce9e0320
	static float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0xafddf24 0x78ce9e0400
	static int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0xafdddc8 0x78ce9e04e0
	static int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0xafddb10 0x78ce9e05c0
	static Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0xafde808 0x78ce9e06a0
	static int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0xafddc6c 0x78ce9e0780
	static Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0xafde6ac 0x78ce9e0860
	static enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0xafdd854 0x78ce9e0940
	static Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0xafdd6f8 0x78ce9e0a20
	static Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0xafde080 0x78ce9e0b00
	static Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0xafde550 0x78ce9e0be0
	static bool Key_IsVectorAxis(out const Key Key);// 0xafe084c 0x78ce9e0cc0
	static bool Key_IsValid(out const Key Key);// 0xafe00c0 0x78ce9e0da0
	static bool Key_IsMouseButton(out const Key Key);// 0xafe0a74 0x78ce9e0e80
	static bool Key_IsModifierKey(out const Key Key);// 0xafe0c9c 0x78ce9e0f60
	static bool Key_IsKeyboardKey(out const Key Key);// 0xafe0960 0x78ce9e1040
	static bool Key_IsGamepadKey(out const Key Key);// 0xafe0b88 0x78ce9e1120
	static bool Key_IsDigital(out const Key Key);// 0xafe01d4 0x78ce9e1200
	static bool Key_IsButtonAxis(out const Key Key);// 0xafe03fc 0x78ce9e12e0
	static bool Key_IsAxis3D(out const Key Key);// 0xafe0510 0x78ce9e13c0
	static bool Key_IsAxis2D(out const Key Key);// 0xafe0624 0x78ce9e14a0
	static bool Key_IsAxis1D(out const Key Key);// 0xafe0738 0x78ce9e1580
	static bool Key_IsAnalog(out const Key Key);// 0xafe02e8 0x78ce9e1660
	static enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0xafdfd38 0x78ce9e1740
	static enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0xafdfbf4 0x78ce9e1820
	static enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0xafdfe74 0x78ce9e1900
	static enum Key_GetNavigationAction(out const Key InKey);// 0xafdffb0 0x78ce9e19e0
	static FText Key_GetDisplayName(out const Key Key);// 0xafdfa78 0x78ce9e1ac0
	static bool InputEvent_IsShiftDown(out const InputEvent Input);// 0xafdf8d0 0x78ce9e1ba0
	static bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0xafdf728 0x78ce9e1c80
	static bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0xafdf4ac 0x78ce99e780
	static bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0xafdefb4 0x78ce99e860
	static bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0xafdf230 0x78ce99e940
	static bool InputEvent_IsRepeat(out const InputEvent Input);// 0xafdf9a4 0x78ce99ea20
	static bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0xafdf7fc 0x78ce99eb00
	static bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0xafdf580 0x78ce99ebe0
	static bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0xafdf088 0x78ce99ecc0
	static bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0xafdf304 0x78ce99eda0
	static bool InputEvent_IsControlDown(out const InputEvent Input);// 0xafdf654 0x78ce99ee80
	static bool InputEvent_IsCommandDown(out const InputEvent Input);// 0xafdf15c 0x78ce99ef60
	static bool InputEvent_IsAltDown(out const InputEvent Input);// 0xafdf3d8 0x78ce99f040
	static FText InputChord_GetDisplayName(out const InputChord Key);// 0xafdee04 0x78ce99f120
	static int GetUserIndex(out const KeyEvent Input);// 0xafdeaa8 0x78ce99f200
	static Key GetKey(out const KeyEvent Input);// 0xafdebe4 0x78ce99f2e0
	static float GetAnalogValue(out const AnalogInputEvent Input);// 0xafde964 0x78ce99f3c0
	static bool EqualEqual_KeyKey(Key A, Key B);// 0xafe10d4 0x78ce99f4a0
	static bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0xafe0db0 0x78ce99f580
	static void CalibrateTilt();// 0xafe1378 0x78ce99f660

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	static bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0xafe3304 0x78ce9e2fc0
	static bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0xafe3148 0x78ce9e30a0
	static bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0xafe34c0 0x78ce9e3180
	static bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0xafe367c 0x78ce9e3260
	static bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0xafe2ff0 0x78ce9e3340
	static FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0xafe28fc 0x78ce9e3420
	static FString GetNativeCulture(const enum TextCategory);// 0xafe2d1c 0x78ce9e3500
	static FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0xafe2ad8 0x78ce9e35e0
	static FString GetCurrentLocale();// 0xafe3254 0x78ce9e36c0
	static FString GetCurrentLanguage();// 0xafe3410 0x78ce9e37a0
	static FString GetCurrentCulture();// 0xafe35cc 0x78ce9e3880
	static FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0xafe2efc 0x78ce9e3960
	static FString GetCultureDisplayName(FString Culture, const bool Localized);// 0xafe27b0 0x78ce9e0080
	static void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0xafe2e10 0x78ce9e0160

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	static void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0xafe45d4 0x78ce9e2b60
	static void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0xafe4750 0x78ce9e2c40
	static LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0xafe4358 0x78ce9e2d20
	static float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0xafe4498 0x78ce9e2e00
	static MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName, enum CreationFlags);// 0xafe41d0 0x78ce9e2ee0

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	static int Xor_IntInt(int A, int B);// 0xb00f1dc 0x78ce318ba0
	static int64 Xor_Int64Int64(int64 A, int64 B);// 0xb00da98 0x78ce318c80
	static int Wrap(int Value, int Min, int Max);// 0xb00e88c 0x78ce318d60
	static Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0xafe626c 0x78ce318e40
	static Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0xafe612c 0x78ce318f20
	static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0xafe63ac 0x78ce319000
	static float VSizeXYSquared(Vector A);// 0xb001508 0x78ce315720
	static float VSizeXY(Vector A);// 0xb0015b4 0x78ce315800
	static float VSizeSquared(Vector A);// 0xb001664 0x78ce3158e0
	static float VSize2DSquared(Vector2D A);// 0xb005834 0x78ce3159c0
	static float VSize2D(Vector2D A);// 0xb0058e0 0x78ce315aa0
	static float VSize(Vector A);// 0xb00171c 0x78ce315b80
	static Vector VLerp(Vector A, Vector B, float Alpha);// 0xb000930 0x78ce315c60
	static Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0xb0003cc 0x78ce315d40
	static Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0xb00056c 0x78ce315e20
	static Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0xb000148 0x78ce315f00
	static Vector Vector_Zero();// 0xb005808 0x78ce315fe0
	static Vector Vector_Up();// 0xb005758 0x78ce3160c0
	static void Vector_UnwindEuler(out Vector A);// 0xb00339c 0x78ce3161a0
	static Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0xb0021b4 0x78ce316280
	static Vector Vector_ToRadians(Vector A);// 0xb00236c 0x78ce316360
	static Vector Vector_ToDegrees(Vector A);// 0xb0022ac 0x78ce316440
	static Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0xafffbe4 0x78ce316520
	static void Vector_Set(out Vector A, float X, float Y, float Z);// 0xb0051dc 0x78ce316600
	static Vector Vector_Right();// 0xb005700 0x78ce3166e0
	static Vector Vector_Reciprocal(out const Vector A);// 0xb00005c 0x78ce3167c0
	static Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0xafff6c4 0x78ce3168a0
	static Vector Vector_One();// 0xb0057dc 0x78ce316980
	static Vector Vector_NormalUnsafe(out const Vector A);// 0xb000bac 0x78ce316a60
	static void Vector_Normalize(out Vector A, float Tolerance);// 0xb000a84 0x78ce316b40
	static Vector Vector_Normal2D(Vector A, float Tolerance);// 0xb000c90 0x78ce316c20
	static Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0xafffd10 0x78ce316d00
	static Vector Vector_Left();// 0xb0056d4 0x78ce316de0
	static bool Vector_IsZero(out const Vector A);// 0xb00130c 0x78ce316ec0
	static bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0xb000ff0 0x78ce316fa0
	static bool Vector_IsUniform(out const Vector A, float Tolerance);// 0xb001108 0x78ce317080
	static bool Vector_IsNormal(out const Vector A);// 0xb000f0c 0x78ce317160
	static bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0xb0013e4 0x78ce317240
	static bool Vector_IsNAN(out const Vector A);// 0xb001228 0x78ce317320
	static float Vector_HeadingAngle(Vector A);// 0xb0025ac 0x78ce313a40
	static Vector Vector_GetSignVector(Vector A);// 0xb002780 0x78ce313b20
	static Vector Vector_GetProjection(Vector A);// 0xb0026c8 0x78ce313c00
	static float Vector_GetAbsMin(Vector A);// 0xb002af8 0x78ce313ce0
	static float Vector_GetAbsMax(Vector A);// 0xb002bb8 0x78ce313dc0
	static Vector Vector_GetAbs(Vector A);// 0xb002a48 0x78ce313ea0
	static Vector Vector_Forward();// 0xb0057b0 0x78ce313f80
	static Vector Vector_Down();// 0xb00572c 0x78ce314060
	static float Vector_DistanceSquared(Vector v1, Vector v2);// 0xb0019cc 0x78ce314140
	static float Vector_Distance2DSquared(Vector v1, Vector v2);// 0xb0017d8 0x78ce314220
	static float Vector_Distance2D(Vector v1, Vector v2);// 0xb0018d0 0x78ce314300
	static float Vector_Distance(Vector v1, Vector v2);// 0xb001ad8 0x78ce3143e0
	static float Vector_CosineAngle2D(Vector A, Vector B);// 0xb00242c 0x78ce3144c0
	static Vector Vector_ComponentMin(Vector A, Vector B);// 0xb002948 0x78ce3145a0
	static Vector Vector_ComponentMax(Vector A, Vector B);// 0xb002848 0x78ce314680
	static Vector Vector_ClampSizeMax2D(Vector A, float Max);// 0xb002de0 0x78ce314760
	static Vector Vector_ClampSizeMax(Vector A, float Max);// 0xb002f20 0x78ce314840
	static Vector Vector_ClampSize2D(Vector A, float Min, float Max);// 0xb003070 0x78ce314920
	static Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0xafffac0 0x78ce314a00
	static Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0xafff7d4 0x78ce314ae0
	static Vector Vector_Backward();// 0xb005784 0x78ce314bc0
	static void Vector_Assign(out Vector A, out const Vector InVector);// 0xb00535c 0x78ce314ca0
	static void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0xafff93c 0x78ce314d80
	static Vector4 Vector4_Zero();// 0xaffe54c 0x78ce314e60
	static float Vector4_SizeSquared3(out const Vector4 A);// 0xaffc744 0x78ce314f40
	static float Vector4_SizeSquared(out const Vector4 A);// 0xaffc8f0 0x78ce315020
	static float Vector4_Size3(out const Vector4 A);// 0xaffc818 0x78ce315100
	static float Vector4_Size(out const Vector4 A);// 0xaffc9cc 0x78ce3151e0
	static void Vector4_Set(out Vector4 A, float X, float Y, float Z, float W);// 0xaffd17c 0x78ce3152c0
	static Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0xaffc2ec 0x78ce3153a0
	static void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0xaffc1a0 0x78ce315480
	static Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0xaffc3e0 0x78ce315560
	static Vector4 Vector4_Negated(out const Vector4 A);// 0xaffd45c 0x78ce315640
	static Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0xaffc064 0x78ce311d60
	static bool Vector4_IsZero(out const Vector4 A);// 0xaffcaac 0x78ce311e40
	static bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0xaffc620 0x78ce311f20
	static bool Vector4_IsNormal3(out const Vector4 A);// 0xaffc530 0x78ce312000
	static bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0xaffcb9c 0x78ce3120e0
	static bool Vector4_IsNAN(out const Vector4 A);// 0xaffcccc 0x78ce3121c0
	static float Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0xaffcdcc 0x78ce3122a0
	static float Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0xaffcefc 0x78ce312380
	static Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0xaffd034 0x78ce312460
	static void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0xaffd350 0x78ce312540
	static Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0xb006084 0x78ce312620
	static Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0xb006208 0x78ce312700
	static Vector2D Vector2D_Zero();// 0xb008198 0x78ce3127e0
	static Vector2D Vector2D_Unit45Deg();// 0xb0081bc 0x78ce3128c0
	static Vector2D Vector2D_One();// 0xb0081e0 0x78ce3129a0
	static Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xb00070c 0x78ce312a80
	static DateTime UtcNow();// 0xafef7d4 0x78ce312b60
	static Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0xaffbf3c 0x78ce312c40
	static Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0xafe9cb0 0x78ce312d20
	static Vector TransformLocation(out const Transform T, Vector Location);// 0xafe9f6c 0x78ce312e00
	static Vector TransformDirection(out const Transform T, Vector Direction);// 0xafe9dd4 0x78ce312ee0
	static float Transform_Determinant(out const Transform Transform);// 0xafe8c1c 0x78ce312fc0
	static Vector2D ToSign2D(Vector2D A);// 0xb005990 0x78ce3130a0
	static Vector2D ToRounded2D(Vector2D A);// 0xb005a48 0x78ce313180
	static void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out float OutLength);// 0xb005af4 0x78ce313260
	static DateTime Today();// 0xafef808 0x78ce313340
	static Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0xafe9174 0x78ce313420
	static Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0xafe8cf8 0x78ce313500
	static Timespan TimespanZeroValue();// 0xafef4b4 0x78ce3135e0
	static float TimespanRatio(Timespan A, Timespan B);// 0xafed698 0x78ce3136c0
	static Timespan TimespanMinValue();// 0xafef4cc 0x78ce3137a0
	static Timespan TimespanMaxValue();// 0xafef4e8 0x78ce313880
	static bool TimespanFromString(FString TimespanString, out Timespan Result);// 0xafed53c 0x78ce313960
	static Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xafe8ee8 0x78ce310080
	static float Tan(float A);// 0xb00be08 0x78ce310160
	static Vector Subtract_VectorVector(Vector A, Vector B);// 0xb0047b0 0x78ce310240
	static Vector Subtract_VectorInt(Vector A, int B);// 0xb0045ac 0x78ce310320
	static Vector Subtract_VectorFloat(Vector A, float B);// 0xb0046b0 0x78ce310400
	static Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xaffdd4c 0x78ce3104e0
	static Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0xb007b0c 0x78ce3105c0
	static Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0xb007a18 0x78ce3106a0
	static Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0xafeead4 0x78ce310780
	static Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0xaff5d98 0x78ce310860
	static LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xaff1788 0x78ce310940
	static IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0xb008900 0x78ce310a20
	static IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0xb00880c 0x78ce310b00
	static int Subtract_IntInt(int A, int B);// 0xb00fb50 0x78ce310be0
	static int64 Subtract_Int64Int64(int64 A, int64 B);// 0xb00e40c 0x78ce310cc0
	static float Subtract_FloatFloat(float A, float B);// 0xb00ccf4 0x78ce310da0
	static DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0xaff0ccc 0x78ce310e80
	static Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0xaff0b04 0x78ce310f60
	static byte Subtract_ByteByte(byte A, byte B);// 0xb0107ec 0x78ce311040
	static float Square(float A);// 0xb00b8cc 0x78ce311120
	static float Sqrt(float A);// 0xb00b974 0x78ce311200
	static Vector Spherical2DToUnitCartesian(Vector2D A);// 0xb005c88 0x78ce3112e0
	static float Sin(float A);// 0xb00c0d0 0x78ce3113c0
	static int64 SignOfInteger64(int64 A);// 0xb00d850 0x78ce3114a0
	static int SignOfInteger(int A);// 0xb00ef94 0x78ce311580
	static float SignOfFloat(float A);// 0xb0096c4 0x78ce311660
	static void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0xafe7830 0x78ce311740
	static void Set2D(out Vector2D A, float X, float Y);// 0xb006fa4 0x78ce311820
	static Vector SelectVector(Vector A, Vector B, bool bPickA);// 0xafebca0 0x78ce311900
	static Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0xafeb860 0x78ce3119e0
	static FString SelectString(FString A, FString B, bool bPickA);// 0xafec094 0x78ce311ac0
	static Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0xafebb3c 0x78ce311ba0
	static Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0xafeb718 0x78ce311c80
	static int SelectInt(int A, int B, bool bPickA);// 0xafebf4c 0x78ce2ee780
	static float SelectFloat(float A, float B, bool bPickA);// 0xafebe04 0x78ce2ee860
	static LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0xafeba00 0x78ce2ee940
	static class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0xafeb5d0 0x78ce2eea20
	static void SeedRandomStream(out RandomStream Stream);// 0xafe7920 0x78ce2eeb00
	static float SafeDivide(float A, float B);// 0xb00a990 0x78ce2eebe0
	static int64 Round64(float A);// 0xb009ac0 0x78ce2eecc0
	static int Round(float A);// 0xb009d6c 0x78ce2eeda0
	static Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0xb004c5c 0x78ce2eee80
	static Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0xb003548 0x78ce2eef60
	static Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0xaffa044 0x78ce2ef040
	static Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0xafe84e8 0x78ce2ef120
	static Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0xafe8688 0x78ce2ef200
	static void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0xaff2ac8 0x78ce2ef2e0
	static void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0xaff2bc4 0x78ce2ef3c0
	static LinearColor RGBLinearToHSV(LinearColor RGB);// 0xaff2a18 0x78ce2ef4a0
	static void ResetVectorSpringState(out VectorSpringState SpringState);// 0xafe811c 0x78ce2ef580
	static void ResetRandomStream(out const RandomStream Stream);// 0xafe79c4 0x78ce2ef660
	static void ResetFloatSpringState(out FloatSpringState SpringState);// 0xafe81dc 0x78ce2ef740
	static Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0xaff9dd8 0x78ce2ef820
	static Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0xafe73e8 0x78ce2ef900
	static Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0xaffe6b8 0x78ce2ef9e0
	static Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0xafe723c 0x78ce2efac0
	static Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0xaffe564 0x78ce2efba0
	static Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0xafe76e0 0x78ce2efc80
	static Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0xaffe90c 0x78ce2efd60
	static Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0xafe7580 0x78ce2efe40
	static Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0xaffe7f8 0x78ce2eff20
	static Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0xafe7b68 0x78ce2ecaa0
	static Vector RandomUnitVector();// 0xaffeb34 0x78ce2ecb80
	static Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0xafe7a68 0x78ce2ecc60
	static Rotator RandomRotator(bool bRoll);// 0xaffa1d8 0x78ce2ecd40
	static Vector RandomPointInBoundingBox(Vector Origin, Vector BoxExtent);// 0xaffea10 0x78ce2ece20
	static int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0xafe7ed4 0x78ce2ecf00
	static int RandomIntegerInRange(int Min, int Max);// 0xb00ed7c 0x78ce2ecfe0
	static int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0xafe801c 0x78ce2ed0c0
	static int64 RandomInteger64InRange(int64 Min, int64 Max);// 0xb00d630 0x78ce2ed1a0
	static int64 RandomInteger64(int64 Max);// 0xb00d76c 0x78ce2ed280
	static int RandomInteger(int Max);// 0xb00eeb4 0x78ce2ed360
	static float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0xafe7c20 0x78ce2ed440
	static float RandomFloatInRange(float Min, float Max);// 0xb00b76c 0x78ce2ed520
	static float RandomFloatFromStream(out const RandomStream Stream);// 0xafe7d68 0x78ce2ed600
	static float RandomFloat();// 0xb00b884 0x78ce2ed6e0
	static bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0xb011438 0x78ce2ed7c0
	static bool RandomBoolWithWeight(float Weight);// 0xb01153c 0x78ce2ed8a0
	static bool RandomBoolFromStream(out const RandomStream Stream);// 0xafe7e1c 0x78ce2ed980
	static bool RandomBool();// 0xb0115e8 0x78ce2eda60
	static float RadiansToDegrees(float A);// 0xb00b5c4 0x78ce2edb40
	static Vector Quat_VectorUp(out const Quat Q);// 0xaff4c24 0x78ce2edc20
	static Vector Quat_VectorRight(out const Quat Q);// 0xaff4d54 0x78ce2edd00
	static Vector Quat_VectorForward(out const Quat Q);// 0xaff4e84 0x78ce2edde0
	static Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0xaff3e50 0x78ce2edec0
	static float Quat_SizeSquared(out const Quat Q);// 0xaff4150 0x78ce2edfa0
	static float Quat_Size(out const Quat Q);// 0xaff4220 0x78ce2ee080
	static void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0xaff445c 0x78ce2ee160
	static void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0xaff4554 0x78ce2ee240
	static Rotator Quat_Rotator(out const Quat Q);// 0xaff42f4 0x78ce2ee320
	static Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0xaff3fd4 0x78ce2ee400
	static Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0xaff499c 0x78ce2ee4e0
	static void Quat_Normalize(out Quat Q, float Tolerance);// 0xaff4acc 0x78ce2ee5c0
	static Quat Quat_MakeFromEuler(out const Vector Euler);// 0xaff43a8 0x78ce2ee6a0
	static Quat Quat_Log(out const Quat Q);// 0xaff471c 0x78ce2eadc0
	static bool Quat_IsNormalized(out const Quat Q);// 0xaff59c0 0x78ce2eaea0
	static bool Quat_IsNonFinite(out const Quat Q);// 0xaff57d8 0x78ce2eaf80
	static bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0xaff5aac 0x78ce2eb060
	static bool Quat_IsFinite(out const Quat Q);// 0xaff58cc 0x78ce2eb140
	static Quat Quat_Inversed(out const Quat Q);// 0xaff47d0 0x78ce2eb220
	static Quat Quat_Identity();// 0xaff6380 0x78ce2eb300
	static Vector Quat_GetRotationAxis(out const Quat Q);// 0xaff4898 0x78ce2eb3e0
	static Vector Quat_GetAxisZ(out const Quat Q);// 0xaff4fb0 0x78ce2eb4c0
	static Vector Quat_GetAxisY(out const Quat Q);// 0xaff50e0 0x78ce2eb5a0
	static Vector Quat_GetAxisX(out const Quat Q);// 0xaff5210 0x78ce2eb680
	static float Quat_GetAngle(out const Quat Q);// 0xaff533c 0x78ce2eb760
	static Quat Quat_Exp(out const Quat Q);// 0xaff5408 0x78ce2eb840
	static Vector Quat_Euler(out const Quat Q);// 0xaff54bc 0x78ce2eb920
	static void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0xaff5570 0x78ce2eba00
	static float Quat_AngularDistance(out const Quat A, out const Quat B);// 0xaff56a0 0x78ce2ebae0
	static Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0xafff578 0x78ce2ebbc0
	static Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0xafff2ec 0x78ce2ebca0
	static Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0xafff408 0x78ce2ebd80
	static bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0xafe6da8 0x78ce2ebe60
	static float PerlinNoise1D(const float Value);// 0xafe7194 0x78ce2ebf40
	static int Percent_IntInt(int A, int B);// 0xb00fd30 0x78ce2ec020
	static float Percent_FloatFloat(float A, float B);// 0xb011930 0x78ce2ec100
	static byte Percent_ByteByte(byte A, byte B);// 0xb0109d4 0x78ce2ec1e0
	static int Or_IntInt(int A, int B);// 0xb00f0ec 0x78ce2ec2c0
	static int64 Or_Int64Int64(int64 A, int64 B);// 0xb00d9a8 0x78ce2ec3a0
	static DateTime Now();// 0xafef86c 0x78ce2ec480
	static bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0xb003b0c 0x78ce2ec560
	static bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xaffd6c8 0x78ce2ec640
	static bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0xb0072dc 0x78ce2ec720
	static bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0xb0039a4 0x78ce2ec800
	static bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0xaffd51c 0x78ce2ec8e0
	static bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0xb007188 0x78ce2ec9c0
	static bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0xafee70c 0x78ce2e90e0
	static bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0xaffab7c 0x78ce2e91c0
	static bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0xaff5f98 0x78ce2e92a0
	static bool NotEqual_ObjectObject(Object* A, Object* B);// 0xafeb3e8 0x78ce2e9380
	static bool NotEqual_NameName(FName A, FName B);// 0xafeaf24 0x78ce2e9460
	static bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0xaff9308 0x78ce2e9540
	static bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xaff1950 0x78ce2e9620
	static bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0xb008204 0x78ce2e9700
	static bool NotEqual_IntInt(int A, int B);// 0xb00f598 0x78ce2e97e0
	static bool NotEqual_Int64Int64(int64 A, int64 B);// 0xb00de54 0x78ce2e98c0
	static bool NotEqual_FloatFloat(float A, float B);// 0xb00c5f8 0x78ce2e99a0
	static bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xaff0934 0x78ce2e9a80
	static bool NotEqual_ClassClass(class Object A, class Object B);// 0xafeb200 0x78ce2e9b60
	static bool NotEqual_ByteByte(byte A, byte B);// 0xb01002c 0x78ce2e9c40
	static bool NotEqual_BoolBool(bool A, bool B);// 0xb01119c 0x78ce2e9d20
	static bool Not_PreBool(bool A);// 0xb01138c 0x78ce2e9e00
	static int64 Not_Int64(int64 A);// 0xb00d900 0x78ce2e9ee0
	static int Not_Int(int A);// 0xb00f044 0x78ce2e9fc0
	static Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0xb005f68 0x78ce2ea0a0
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0xb009588 0x78ce2ea180
	static Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0xaff9ce4 0x78ce2ea260
	static float NormalizeAxis(float Angle);// 0xaff9b94 0x78ce2ea340
	static void Normalize2D(out Vector2D A, float Tolerance);// 0xb005d68 0x78ce2ea420
	static Vector2D Normal2D(Vector2D A);// 0xb005e8c 0x78ce2ea500
	static Vector Normal(Vector A, float Tolerance);// 0xb000dd0 0x78ce2ea5e0
	static Vector NegateVector(Vector A);// 0xb003e94 0x78ce2ea6c0
	static Rotator NegateRotator(Rotator A);// 0xaffa7d4 0x78ce2ea7a0
	static Vector2D Negated2D(out const Vector2D A);// 0xb0070d4 0x78ce2ea880
	static bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0xafea850 0x78ce2ea960
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0xb00c6ec 0x78ce2eaa40
	static float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0xb00d164 0x78ce2eab20
	static float MultiplyByPi(float Value);// 0xb009134 0x78ce2eac00
	static Vector Multiply_VectorVector(Vector A, Vector B);// 0xb0044b4 0x78ce2eace0
	static Vector Multiply_VectorInt(Vector A, int B);// 0xb0042b8 0x78ce2e7400
	static Vector Multiply_VectorFloat(Vector A, float B);// 0xb0043b8 0x78ce2e74e0
	static Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xaffdc34 0x78ce2e75c0
	static Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0xb007934 0x78ce2e76a0
	static Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0xb007844 0x78ce2e7780
	static Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0xafee9d8 0x78ce2e7860
	static Rotator Multiply_RotatorInt(Rotator A, int B);// 0xaffa980 0x78ce2e7940
	static Rotator Multiply_RotatorFloat(Rotator A, float B);// 0xaffaa80 0x78ce2e7a20
	static Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0xaff5c58 0x78ce2e7b00
	static Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0xaff97c4 0x78ce2e7be0
	static Matrix Multiply_MatrixFloat(out const Matrix A, float B);// 0xaff95a4 0x78ce2e7cc0
	static LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xaff16a4 0x78ce2e7da0
	static LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0xaff15b4 0x78ce2e7e80
	static IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0xb008718 0x78ce2e7f60
	static IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0xb008624 0x78ce2e8040
	static int Multiply_IntInt(int A, int B);// 0xb00ff3c 0x78ce2e8120
	static float Multiply_IntFloat(int A, float B);// 0xb00cf80 0x78ce2e8200
	static int64 Multiply_Int64Int64(int64 A, int64 B);// 0xb00e6f0 0x78ce2e82e0
	static float Multiply_FloatFloat(float A, float B);// 0xb00d074 0x78ce2e83c0
	static byte Multiply_ByteByte(byte A, byte B);// 0xb010be0 0x78ce2e84a0
	static Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0xafffe44 0x78ce2e8580
	static void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0xb00a6e0 0x78ce2e8660
	static void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0xb00a430 0x78ce2e8740
	static void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0xb00a180 0x78ce2e8820
	static int64 MinInt64(int64 A, int64 B);// 0xb00d53c 0x78ce2e8900
	static void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0xafe6eb0 0x78ce2e89e0
	static int Min(int A, int B);// 0xb00ec88 0x78ce2e8ac0
	static void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0xb00a838 0x78ce2e8ba0
	static void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0xb00a588 0x78ce2e8c80
	static void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0xb00a2d8 0x78ce2e8d60
	static int64 MaxInt64(int64 A, int64 B);// 0xb00d448 0x78ce2e8e40
	static int Max(int A, int B);// 0xb00eb94 0x78ce2e8f20
	static Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0xaff91f0 0x78ce2e9000
	static Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0xaff8e8c 0x78ce2e5720
	static Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0xaff90e0 0x78ce2e5800
	static Quat Matrix_ToQuat(out const Matrix M);// 0xaff6e84 0x78ce2e58e0
	static void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0xaff7228 0x78ce2e59c0
	static void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0xaff6fec 0x78ce2e5aa0
	static void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0xaff7314 0x78ce2e5b80
	static Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0xaff7e18 0x78ce2e5c60
	static Matrix Matrix_RemoveTranslation(out const Matrix M);// 0xaff81fc 0x78ce2e5d40
	static void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0xaff8614 0x78ce2e5e20
	static Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0xaff63a4 0x78ce2e5f00
	static Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0xaff8d48 0x78ce2e5fe0
	static Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0xaff8fa4 0x78ce2e60c0
	static Matrix Matrix_Identity();// 0xaff993c 0x78ce2e61a0
	static Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0xaff7700 0x78ce2e6280
	static void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0xaff744c 0x78ce2e6360
	static Matrix Matrix_GetTransposed(out const Matrix M);// 0xaff8c60 0x78ce2e6440
	static Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0xaff87c8 0x78ce2e6520
	static Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0xaff82c0 0x78ce2e6600
	static Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0xaff7a78 0x78ce2e66e0
	static void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0xaff78ac 0x78ce2e67c0
	static float Matrix_GetRotDeterminant(out const Matrix M);// 0xaff89e4 0x78ce2e68a0
	static Rotator Matrix_GetRotator(out const Matrix M);// 0xaff6f38 0x78ce2e6980
	static Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0xaff9968 0x78ce2e6a60
	static float Matrix_GetMaximumAxisScale(out const Matrix M);// 0xaff7d04 0x78ce2e6b40
	static Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0xaff842c 0x78ce2e6c20
	static Matrix Matrix_GetInverse(out const Matrix M);// 0xaff8924 0x78ce2e6d00
	static bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0xaff6754 0x78ce2e6de0
	static bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0xaff68d0 0x78ce2e6ec0
	static bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0xaff6d24 0x78ce2e6fa0
	static bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0xaff6a44 0x78ce2e7080
	static bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0xaff6bb8 0x78ce2e7160
	static bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0xaff65d8 0x78ce2e7240
	static float Matrix_GetDeterminant(out const Matrix M);// 0xaff8ae0 0x78ce2e7320
	static Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0xaff7128 0x78ce2e3a40
	static bool Matrix_ContainsNaN(out const Matrix M);// 0xaff7f30 0x78ce2e3b20
	static Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0xaff80e4 0x78ce2e3c00
	static Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0xaff7bc0 0x78ce2e3ce0
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0xb0093b8 0x78ce2e3dc0
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0xb0091e8 0x78ce2e3ea0
	static Vector4 MakeVector4(float X, float Y, float Z, float W);// 0xaffe3c8 0x78ce2e3f80
	static Vector2D MakeVector2D(float X, float Y);// 0xb0080ac 0x78ce2e4060
	static Vector MakeVector(float X, float Y, float Z);// 0xb005598 0x78ce2e4140
	static Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0xafeadc4 0x78ce2e4220
	static Timespan MakeTimespan2(int days, int Hours, int Minutes, int Seconds, int FractionNano);// 0xafef114 0x78ce2e4300
	static Timespan MakeTimespan(int days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0xafef2e4 0x78ce2e43e0
	static Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0xaffb578 0x78ce2e44c0
	static Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0xaffb684 0x78ce2e45a0
	static Rotator MakeRotFromZ(out const Vector Z);// 0xaffbbc0 0x78ce2e4680
	static Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0xaffb790 0x78ce2e4760
	static Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0xaffb89c 0x78ce2e4840
	static Rotator MakeRotFromY(out const Vector Y);// 0xaffbc80 0x78ce2e4920
	static Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0xaffb9a8 0x78ce2e4a00
	static Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0xaffbab4 0x78ce2e4ae0
	static Rotator MakeRotFromX(out const Vector X);// 0xaffbd40 0x78ce2e4bc0
	static Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0xaffbe00 0x78ce2e4ca0
	static Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0xaffb434 0x78ce2e4d80
	static Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0xafe9694 0x78ce2e4e60
	static RandomStream MakeRandomStream(int InitialSeed);// 0xafec370 0x78ce2e4f40
	static QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0xafed400 0x78ce2e5020
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0xb008e74 0x78ce2e5100
	static Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0xaff13dc 0x78ce2e51e0
	static FrameRate MakeFrameRate(int Numerator, int Denominator);// 0xafed158 0x78ce2e52c0
	static DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int second, int Millisecond);// 0xaff1178 0x78ce2e53a0
	static LinearColor MakeColor(float R, float G, float B, float A);// 0xaff3bac 0x78ce2e5480
	static Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0xafec418 0x78ce2e5560
	static Box MakeBox(Vector Min, Vector Max);// 0xafec500 0x78ce2e5640
	static float Loge(float A);// 0xb00ba30 0x78ce2e1d60
	static float Log(float A, float Base);// 0xb00bad8 0x78ce2e1e40
	static bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0xafe64e8 0x78ce2e1f20
	static bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0xafe6720 0x78ce2e2000
	static LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0xaff1d0c 0x78ce2e20e0
	static LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0xaff1e4c 0x78ce2e21c0
	static LinearColor LinearColor_Yellow();// 0xaff3d54 0x78ce2e22a0
	static LinearColor LinearColor_White();// 0xaff3e2c 0x78ce2e2380
	static LinearColor LinearColor_Transparent();// 0xaff3d30 0x78ce2e2460
	static Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0xaff28c4 0x78ce2e2540
	static LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0xaff2360 0x78ce2e2620
	static void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0xaff3258 0x78ce2e2700
	static void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0xaff3710 0x78ce2e27e0
	static void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0xaff31a8 0x78ce2e28c0
	static void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0xaff3440 0x78ce2e29a0
	static void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0xaff3348 0x78ce2e2a80
	static void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0xaff3538 0x78ce2e2b60
	static void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0xaff38d8 0x78ce2e2c40
	static LinearColor LinearColor_Red();// 0xaff3dc0 0x78ce2e2d20
	static Color LinearColor_QuantizeRound(LinearColor InColor);// 0xaff266c 0x78ce2e2e00
	static Color LinearColor_Quantize(LinearColor InColor);// 0xaff2718 0x78ce2e2ee0
	static bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0xaff1b90 0x78ce2e2fc0
	static LinearColor LinearColor_Green();// 0xaff3d9c 0x78ce2e30a0
	static LinearColor LinearColor_Gray();// 0xaff3e08 0x78ce2e3180
	static float LinearColor_GetMin(LinearColor InColor);// 0xaff210c 0x78ce2e3260
	static float LinearColor_GetMax(LinearColor InColor);// 0xaff21c8 0x78ce2e3340
	static float LinearColor_GetLuminance(LinearColor InColor);// 0xaff2284 0x78ce2e3420
	static float LinearColor_Distance(LinearColor c1, LinearColor c2);// 0xaff2454 0x78ce2e3500
	static LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0xaff2570 0x78ce2e35e0
	static LinearColor LinearColor_Blue();// 0xaff3d78 0x78ce2e36c0
	static LinearColor LinearColor_Black();// 0xaff3de4 0x78ce2e37a0
	static Vector LessLess_VectorRotator(Vector A, Rotator B);// 0xb00343c 0x78ce2e3880
	static bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0xafee36c 0x78ce2e3960
	static bool LessEqual_IntInt(int A, int B);// 0xb00f874 0x78ce2e0080
	static bool LessEqual_Int64Int64(int64 A, int64 B);// 0xb00e130 0x78ce2e0160
	static bool LessEqual_FloatFloat(float A, float B);// 0xb00ca18 0x78ce2e0240
	static bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xaff0594 0x78ce2e0320
	static bool LessEqual_ByteByte(byte A, byte B);// 0xb010314 0x78ce2e0400
	static bool Less_TimespanTimespan(Timespan A, Timespan B);// 0xafee454 0x78ce2e04e0
	static bool Less_IntInt(int A, int B);// 0xb00fa5c 0x78ce2e05c0
	static bool Less_Int64Int64(int64 A, int64 B);// 0xb00e318 0x78ce2e06a0
	static bool Less_FloatFloat(float A, float B);// 0xb00cc00 0x78ce2e0780
	static bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0xaff067c 0x78ce2e0860
	static bool Less_ByteByte(byte A, byte B);// 0xb010504 0x78ce2e0940
	static float Lerp(float A, float B, float Alpha);// 0xb00a03c 0x78ce2e0a20
	static bool IsZero2D(out const Vector2D A);// 0xb00638c 0x78ce2e0b00
	static bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0xafe6b00 0x78ce2e0be0
	static bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0xafe6c64 0x78ce2e0cc0
	static bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0xb006450 0x78ce2e0da0
	static bool IsMorning(DateTime A);// 0xafefb40 0x78ce2e0e80
	static bool IsLeapYear(int Year);// 0xafef8e0 0x78ce2e0f60
	static bool IsAfternoon(DateTime A);// 0xafefc28 0x78ce2e1040
	static Transform InvertTransform(out const Transform T);// 0xafe9368 0x78ce2e1120
	static Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0xafe97f0 0x78ce2e1200
	static Vector InverseTransformLocation(out const Transform T, Vector Location);// 0xafe9ab4 0x78ce2e12e0
	static Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0xafe9914 0x78ce2e13c0
	static IntPoint IntPoint_Zero();// 0xb008d10 0x78ce2e14a0
	static IntPoint IntPoint_Up();// 0xb008cd8 0x78ce2e1580
	static IntPoint IntPoint_Right();// 0xb008c9c 0x78ce2e1660
	static IntPoint IntPoint_One();// 0xb008cf4 0x78ce2e1740
	static IntPoint IntPoint_Left();// 0xb008cbc 0x78ce2e1820
	static IntPoint IntPoint_Down();// 0xb008c7c 0x78ce2e1900
	static bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0xb00f3bc 0x78ce2e19e0
	static bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0xb00dc78 0x78ce2e1ac0
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0xb00c41c 0x78ce2e1ba0
	static float Hypotenuse(float Width, float Height);// 0xb00c32c 0x78ce2e1c80
	static LinearColor HSVToRGBLinear(LinearColor HSV);// 0xaff2dbc 0x78ce9ee780
	static void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0xaff2e6c 0x78ce9ee860
	static LinearColor HSVToRGB(float H, float S, float V, float A);// 0xaff2f68 0x78ce9ee940
	static float GridSnap_Float(float Location, float GridSize);// 0xb00c220 0x78ce9eea20
	static Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0xb003684 0x78ce9eeb00
	static bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0xafee53c 0x78ce9eebe0
	static bool GreaterEqual_IntInt(int A, int B);// 0xb00f780 0x78ce9eecc0
	static bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0xb00e03c 0x78ce9eeda0
	static bool GreaterEqual_FloatFloat(float A, float B);// 0xb00c924 0x78ce9eee80
	static bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xaff0764 0x78ce9eef60
	static bool GreaterEqual_ByteByte(byte A, byte B);// 0xb01021c 0x78ce9ef040
	static bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0xafee624 0x78ce9ef120
	static bool Greater_IntInt(int A, int B);// 0xb00f968 0x78ce9ef200
	static bool Greater_Int64Int64(int64 A, int64 B);// 0xb00e224 0x78ce9ef2e0
	static bool Greater_FloatFloat(float A, float B);// 0xb00cb0c 0x78ce9ef3c0
	static bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0xaff084c 0x78ce9ef4a0
	static bool Greater_ByteByte(byte A, byte B);// 0xb01040c 0x78ce9ef580
	static int GetYear(DateTime A);// 0xafefd10 0x78ce9ef660
	static void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0xb001f20 0x78ce9ef740
	static Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0xb001ca8 0x78ce9ef820
	static Vector GetUpVector(Rotator InRot);// 0xaffa5d0 0x78ce9ef900
	static float GetTotalSeconds(Timespan A);// 0xafedae0 0x78ce9ef9e0
	static float GetTotalMinutes(Timespan A);// 0xafedb98 0x78ce9efac0
	static float GetTotalMilliseconds(Timespan A);// 0xafedc50 0x78ce9efba0
	static float GetTotalHours(Timespan A);// 0xafedd08 0x78ce9efc80
	static float GetTotalDays(Timespan A);// 0xafeddbc 0x78ce9efd60
	static Timespan GetTimeOfDay(DateTime A);// 0xafefdbc 0x78ce9efe40
	static float GetTAU();// 0xb00b72c 0x78ce9eff20
	static void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0xafe6918 0x78ce9ecaa0
	static int GetSeconds(Timespan A);// 0xafede70 0x78ce9ecb80
	static int GetSecond(DateTime A);// 0xafefe8c 0x78ce9ecc60
	static Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0xb006564 0x78ce9ecd40
	static Vector GetRightVector(Rotator InRot);// 0xaffa67c 0x78ce9ece20
	static Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0xaffff50 0x78ce9ecf00
	static float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0xaffecc8 0x78ce9ecfe0
	static float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0xaffeb6c 0x78ce9ed0c0
	static float GetPI();// 0xb00b74c 0x78ce9ed1a0
	static int GetMonth(DateTime A);// 0xafeff70 0x78ce9ed280
	static int GetMinutes(Timespan A);// 0xafedf54 0x78ce9ed360
	static int GetMinute(DateTime A);// 0xaff001c 0x78ce9ed440
	static float GetMinElement(Vector A);// 0xb002d2c 0x78ce9ed520
	static float GetMin2D(Vector2D A);// 0xb0067d4 0x78ce9ed600
	static int GetMilliseconds(Timespan A);// 0xafee034 0x78ce9ed6e0
	static int GetMillisecond(DateTime A);// 0xaff00fc 0x78ce9ed7c0
	static float GetMaxElement(Vector A);// 0xb002c78 0x78ce9ed8a0
	static float GetMax2D(Vector2D A);// 0xb00687c 0x78ce9ed980
	static int GetHours(Timespan A);// 0xafee120 0x78ce9eda60
	static int GetHour12(DateTime A);// 0xaff01e0 0x78ce9edb40
	static int GetHour(DateTime A);// 0xaff028c 0x78ce9edc20
	static Vector GetForwardVector(Rotator InRot);// 0xaffa728 0x78ce9edd00
	static Timespan GetDuration(Timespan A);// 0xafee200 0x78ce9edde0
	static Vector GetDirectionUnitVector(Vector From, Vector To);// 0xb002068 0x78ce9edec0
	static int GetDays(Timespan A);// 0xafee2a8 0x78ce9edfa0
	static int GetDayOfYear(DateTime A);// 0xaff036c 0x78ce9ee080
	static int GetDay(DateTime A);// 0xaff0418 0x78ce9ee160
	static DateTime GetDate(DateTime A);// 0xaff04c4 0x78ce9ee240
	static void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0xb001d6c 0x78ce9ee320
	static void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0xaffa28c 0x78ce9ee400
	static float GetAbsMax2D(Vector2D A);// 0xb006924 0x78ce9ee4e0
	static Vector2D GetAbs2D(Vector2D A);// 0xb0069d4 0x78ce9ee5c0
	static float FWrap(float Value, float Min, float Max);// 0xb00aa80 0x78ce9ee6a0
	static IntVector FTruncVector(out const Vector InVector);// 0xb001be8 0x78ce9eadc0
	static int64 FTrunc64(float A);// 0xb009970 0x78ce9eaea0
	static int FTrunc(float A);// 0xb009c1c 0x78ce9eaf80
	static Timespan FromSeconds(float Seconds);// 0xafed798 0x78ce9eb060
	static Timespan FromMinutes(float Minutes);// 0xafed840 0x78ce9eb140
	static Timespan FromMilliseconds(float Milliseconds);// 0xafed8e8 0x78ce9eb220
	static Timespan FromHours(float Hours);// 0xafed990 0x78ce9eb300
	static Timespan FromDays(float days);// 0xafeda38 0x78ce9eb3e0
	static float Fraction(float A);// 0xb00ced4 0x78ce9eb4c0
	static int FMod(float Dividend, float Divisor, out float Remainder);// 0xb009780 0x78ce9eb5a0
	static float FMin(float A, float B);// 0xb00ae1c 0x78ce9eb680
	static float FMax(float A, float B);// 0xb00ad28 0x78ce9eb760
	static float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0xafe8280 0x78ce9eb840
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0xb008d38 0x78ce9eb920
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0xafe8828 0x78ce9eba00
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0xafe89ac 0x78ce9ebae0
	static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);// 0xb008fb0 0x78ce9ebbc0
	static void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0xafff0c8 0x78ce9ebca0
	static Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0xaffb308 0x78ce9ebd80
	static Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0xaffef68 0x78ce9ebe60
	static Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0xaffee24 0x78ce9ebf40
	static int64 FFloor64(float A);// 0xb009a18 0x78ce9ec020
	static int FFloor(float A);// 0xb009cc4 0x78ce9ec100
	static float FClamp(float Value, float Min, float Max);// 0xb00abe0 0x78ce9ec1e0
	static int64 FCeil64(float A);// 0xb0098c8 0x78ce9ec2c0
	static int FCeil(float A);// 0xb009b74 0x78ce9ec3a0
	static float Exp(float A);// 0xb00bbc8 0x78ce9ec480
	static bool EqualExactly_VectorVector(Vector A, Vector B);// 0xb003d84 0x78ce9ec560
	static bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xaffd9c8 0x78ce9ec640
	static bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0xb007528 0x78ce9ec720
	static bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0xb003c1c 0x78ce9ec800
	static bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0xaffd81c 0x78ce9ec8e0
	static bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0xb0073d4 0x78ce9ec9c0
	static bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0xafeaa80 0x78ce9e90e0
	static bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0xafee7f4 0x78ce9e91c0
	static bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0xaffadac 0x78ce9e92a0
	static bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0xaff618c 0x78ce9e9380
	static bool EqualEqual_ObjectObject(Object* A, Object* B);// 0xafeb4dc 0x78ce9e9460
	static bool EqualEqual_NameName(FName A, FName B);// 0xafeb018 0x78ce9e9540
	static bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0xaff9458 0x78ce9e9620
	static bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xaff1a70 0x78ce9e9700
	static bool EqualEqual_IntInt(int A, int B);// 0xb00f68c 0x78ce9e97e0
	static bool EqualEqual_Int64Int64(int64 A, int64 B);// 0xb00df48 0x78ce9e98c0
	static bool EqualEqual_FloatFloat(float A, float B);// 0xb00c830 0x78ce9e99a0
	static bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0xaff0a1c 0x78ce9e9a80
	static bool EqualEqual_ClassClass(class Object A, class Object B);// 0xafeb2f4 0x78ce9e9b60
	static bool EqualEqual_ByteByte(byte A, byte B);// 0xb010124 0x78ce9e9c40
	static bool EqualEqual_BoolBool(bool A, bool B);// 0xb011294 0x78ce9e9d20
	static bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0xb0082fc 0x78ce9e9e00
	static float Ease(float A, float B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0xb009e1c 0x78ce9e9ee0
	static Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float maxweight);// 0xafe5d84 0x78ce9e9fc0
	static Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float maxweight);// 0xafe5bac 0x78ce9ea0a0
	static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float maxweight);// 0xafe5f5c 0x78ce9ea180
	static float DotProduct2D(Vector2D A, Vector2D B);// 0xb006a78 0x78ce9ea260
	static float Dot_VectorVector(Vector A, Vector B);// 0xb0038a4 0x78ce9ea340
	static Vector Divide_VectorVector(Vector A, Vector B);// 0xb00418c 0x78ce9ea420
	static Vector Divide_VectorInt(Vector A, int B);// 0xb003f44 0x78ce9ea500
	static Vector Divide_VectorFloat(Vector A, float B);// 0xb004068 0x78ce9ea5e0
	static Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xaffdb1c 0x78ce9ea6c0
	static Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0xb007734 0x78ce9ea7a0
	static Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0xb007620 0x78ce9ea880
	static Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0xafee8dc 0x78ce9ea960
	static LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xaff14d0 0x78ce9eaa40
	static IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0xb00850c 0x78ce9eab20
	static IntPoint Divide_IntPointInt(IntPoint A, int B);// 0xb0083f4 0x78ce9eac00
	static int Divide_IntInt(int A, int B);// 0xb00fe38 0x78ce9eace0
	static int64 Divide_Int64Int64(int64 A, int64 B);// 0xb00e5ec 0x78ce9e7400
	static float Divide_FloatFloat(float A, float B);// 0xb0117b4 0x78ce9e74e0
	static byte Divide_ByteByte(byte A, byte B);// 0xb010adc 0x78ce9e75c0
	static float DistanceSquared2D(Vector2D v1, Vector2D v2);// 0xb006b68 0x78ce9e76a0
	static float Distance2D(Vector2D v1, Vector2D v2);// 0xb006c60 0x78ce9e7780
	static float DegTan(float A);// 0xb00b204 0x78ce9e7860
	static float DegSin(float A);// 0xb00b50c 0x78ce9e7940
	static float DegreesToRadians(float A);// 0xb00b678 0x78ce9e7a20
	static float DegCos(float A);// 0xb00b388 0x78ce9e7b00
	static float DegAtan2(float Y, float X);// 0xb00b04c 0x78ce9e7be0
	static float DegAtan(float A);// 0xb00b14c 0x78ce9e7cc0
	static float DegAsin(float A);// 0xb00b440 0x78ce9e7da0
	static float DegAcos(float A);// 0xb00b2bc 0x78ce9e7e80
	static int DaysInYear(int Year);// 0xafef98c 0x78ce9e7f60
	static int DaysInMonth(int Year, int Month);// 0xafefa34 0x78ce9e8040
	static DateTime DateTimeMinValue();// 0xafef8a0 0x78ce9e8120
	static DateTime DateTimeMaxValue();// 0xafef8b8 0x78ce9e8200
	static bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0xafef504 0x78ce9e82e0
	static bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0xafef660 0x78ce9e83c0
	static float CrossProduct2D(Vector2D A, Vector2D B);// 0xb006d5c 0x78ce9e84a0
	static Vector Cross_VectorVector(Vector A, Vector B);// 0xb003790 0x78ce9e8580
	static Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0xb005458 0x78ce9e8660
	static float Cos(float A);// 0xb00bf6c 0x78ce9e8740
	static Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0xafe9538 0x78ce9e8820
	static Vector2D Conv_VectorToVector2D(Vector InVector);// 0xb004e0c 0x78ce9e8900
	static Transform Conv_VectorToTransform(Vector InLocation);// 0xb004eac 0x78ce9e89e0
	static Rotator Conv_VectorToRotator(Vector InVec);// 0xb004d54 0x78ce9e8ac0
	static Quat Conv_VectorToQuaternion(Vector InVec);// 0xb004ba4 0x78ce9e8ba0
	static LinearColor Conv_VectorToLinearColor(Vector InVec);// 0xb004f88 0x78ce9e8c80
	static Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0xaffe0fc 0x78ce9e8d60
	static Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0xaffe03c 0x78ce9e8e40
	static Quat Conv_Vector4ToQuaternion(out const Vector4 InVec);// 0xaffdf7c 0x78ce9e8f20
	static Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0xb007e78 0x78ce9e9000
	static IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0xb007dc8 0x78ce9e5720
	static Matrix Conv_TransformToMatrix(out const Transform Transform);// 0xafe8b30 0x78ce9e5800
	static Vector Conv_RotatorToVector(Rotator InRot);// 0xaffa518 0x78ce9e58e0
	static Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0xaffa414 0x78ce9e59c0
	static Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0xaff9ad4 0x78ce9e5aa0
	static Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0xaff9a20 0x78ce9e5b80
	static Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0xaff2970 0x78ce9e5c60
	static Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0xaff27c4 0x78ce9e5d40
	static Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0xafec6a8 0x78ce9e5e20
	static IntVector Conv_IntToIntVector(int inInt);// 0xafecb7c 0x78ce9e5f00
	static int64 Conv_IntToInt64(int inInt);// 0xafece10 0x78ce9e5fe0
	static float Conv_IntToFloat(int inInt);// 0xafeceb4 0x78ce9e60c0
	static byte Conv_IntToByte(int inInt);// 0xafecd6c 0x78ce9e61a0
	static bool Conv_IntToBool(int inInt);// 0xafecad0 0x78ce9e6280
	static Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0xb008bd4 0x78ce9e6360
	static int Conv_Int64ToInt(int64 inInt);// 0xafeccc8 0x78ce9e6440
	static byte Conv_Int64ToByte(int64 inInt);// 0xafecc24 0x78ce9e6520
	static Vector Conv_FloatToVector(float InFloat);// 0xafec600 0x78ce9e6600
	static LinearColor Conv_FloatToLinearColor(float InFloat);// 0xaff30fc 0x78ce9e66e0
	static LinearColor Conv_ColorToLinearColor(Color InColor);// 0xafec76c 0x78ce9e67c0
	static int Conv_ByteToInt(byte InByte);// 0xafec820 0x78ce9e68a0
	static float Conv_ByteToFloat(byte InByte);// 0xafecf5c 0x78ce9e6980
	static int Conv_BoolToInt(bool InBool);// 0xafeca24 0x78ce9e6a60
	static float Conv_BoolToFloat(bool InBool);// 0xafec970 0x78ce9e6b40
	static byte Conv_BoolToByte(bool InBool);// 0xafec8c4 0x78ce9e6c20
	static Transform ComposeTransforms(out const Transform A, out const Transform B);// 0xafea12c 0x78ce9e6d00
	static Rotator ComposeRotators(Rotator A, Rotator B);// 0xaffa88c 0x78ce9e6de0
	static bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0xafeb10c 0x78ce9e6ec0
	static Vector ClampVectorSize(Vector A, float Min, float Max);// 0xb0031fc 0x78ce9e6fa0
	static int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0xb00d300 0x78ce9e7080
	static float ClampAxis(float Angle);// 0xaff9c3c 0x78ce9e7160
	static Vector2D ClampAxes2D(Vector2D A, float MinAxisVal, float MaxAxisVal);// 0xb006e4c 0x78ce9e7240
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0xb00af10 0x78ce9e7320
	static int Clamp(int Value, int Min, int Max);// 0xb00ea4c 0x78ce9e3a40
	static LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0xaff1f84 0x78ce9e3b20
	static void BreakVector4(out const Vector4 InVec, out float X, out float Y, out float Z, out float W);// 0xaffe1c0 0x78ce9e3c00
	static void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0xb007f68 0x78ce9e3ce0
	static void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0xb005044 0x78ce9e3dc0
	static void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0xafeabe4 0x78ce9e3ea0
	static void BreakTimespan2(Timespan InTimespan, out int days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0xafeec9c 0x78ce9e3f80
	static void BreakTimespan(Timespan InTimespan, out int days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0xafeeed8 0x78ce9e4060
	static void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0xaffafdc 0x78ce9e4140
	static void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0xaffb170 0x78ce9e4220
	static void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0xafec274 0x78ce9e4300
	static void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0xafed248 0x78ce9e43e0
	static void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0xafed004 0x78ce9e44c0
	static void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int second, out int Millisecond);// 0xaff0e94 0x78ce9e45a0
	static void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0xaff39bc 0x78ce9e4680
	static bool BooleanXOR(bool A, bool B);// 0xb010dc4 0x78ce9e4760
	static bool BooleanOR(bool A, bool B);// 0xb010ebc 0x78ce9e4840
	static bool BooleanNOR(bool A, bool B);// 0xb010cd4 0x78ce9e4920
	static bool BooleanNAND(bool A, bool B);// 0xb010fac 0x78ce9e4a00
	static bool BooleanAND(bool A, bool B);// 0xb0110a4 0x78ce9e4ae0
	static byte BMin(byte A, byte B);// 0xb0106f4 0x78ce9e4bc0
	static byte BMax(byte A, byte B);// 0xb0105fc 0x78ce9e4ca0
	static float Atan2(float Y, float X);// 0xb00bc70 0x78ce9e4d80
	static float Atan(float A);// 0xb00bd60 0x78ce9e4e60
	static float Asin(float A);// 0xb00c014 0x78ce9e4f40
	static int And_IntInt(int A, int B);// 0xb00f2cc 0x78ce9e5020
	static int64 And_Int64Int64(int64 A, int64 B);// 0xb00db88 0x78ce9e5100
	static Vector Add_VectorVector(Vector A, Vector B);// 0xb004aac 0x78ce9e51e0
	static Vector Add_VectorInt(Vector A, int B);// 0xb0048a8 0x78ce9e52c0
	static Vector Add_VectorFloat(Vector A, float B);// 0xb0049ac 0x78ce9e53a0
	static Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0xaffde64 0x78ce9e5480
	static Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0xb007ce4 0x78ce9e5560
	static Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0xb007bf0 0x78ce9e5640
	static Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0xafeebb8 0x78ce9e1d60
	static Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0xaff5e98 0x78ce9e1e40
	static Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0xaff96ac 0x78ce9e1f20
	static LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0xaff186c 0x78ce9e2000
	static IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0xb008ae4 0x78ce9e20e0
	static IntPoint Add_IntPointInt(IntPoint A, int B);// 0xb0089f0 0x78ce9e21c0
	static int Add_IntInt(int A, int B);// 0xb00fc40 0x78ce9e22a0
	static int64 Add_Int64Int64(int64 A, int64 B);// 0xb00e4fc 0x78ce9e2380
	static float Add_FloatFloat(float A, float B);// 0xb00cde4 0x78ce9e2460
	static DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0xaff0db0 0x78ce9e2540
	static DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0xaff0be8 0x78ce9e2620
	static byte Add_ByteByte(byte A, byte B);// 0xb0108e0 0x78ce9e2700
	static float Acos(float A);// 0xb00beb0 0x78ce9e27e0
	static int64 Abs_Int64(int64 A);// 0xb00d254 0x78ce9e28c0
	static int Abs_Int(int A);// 0xb00e7e0 0x78ce9e29a0
	static float Abs(float A);// 0xb00c178 0x78ce9e2a80

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: FloatSpringState

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	static void MarkBit(out int Data, int index);// 0xb020014 0x78ce318040
	static bool HasUnmarkedBit(int Data, int NumBits);// 0xb01fd8c 0x78ce318120
	static bool HasMarkedBit(int Data, int NumBits);// 0xb01fc98 0x78ce318200
	static byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0xb01f56c 0x78ce3182e0
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0xb01fb0c 0x78ce3183c0
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0xb01f9d0 0x78ce3184a0
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0xb01f894 0x78ce318580
	static byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0xb01f478 0x78ce318660
	static FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0xb01f660 0x78ce318740
	static FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0xb01f7a0 0x78ce318820
	static void ClearBit(out int Data, int index);// 0xb01ff24 0x78ce318900
	static void ClearAllBits(out int Data);// 0xb01fe80 0x78ce3189e0
	static bool BitIsMarked(int Data, int index);// 0xb020104 0x78ce318ac0

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	static void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0xb020b84 0x78ce31a7a0
	static Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0xb02223c 0x78ce31a880
	static void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0xb022554 0x78ce31a960
	static Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0xb021c74 0x78ce31aa40
	static LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0xb021964 0x78ce31ab20
	static LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0xb021aec 0x78ce31ac00
	static Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0xb021df8 0x78ce31ace0
	static SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0xb021020 0x78ce317400
	static Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0xb0216d0 0x78ce3174e0
	static Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0xb0215c4 0x78ce3175c0
	static void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0xb0217d0 0x78ce3176a0
	static void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0xb021f7c 0x78ce317780
	static void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0xb0212f8 0x78ce317860
	static void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0xb022428 0x78ce317940
	static TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0xb0225ec 0x78ce317a20
	static TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0xb02285c 0x78ce317b00
	static TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0xb022acc 0x78ce317be0
	static void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0xb022110 0x78ce317cc0
	static void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0xb022cf0 0x78ce317da0
	static void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0xb020cc0 0x78ce317e80
	static void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0xb0213e8 0x78ce317f60

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8] 0x78cf0afe80

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78ce3b4000
	int SizeY;//[Offset: 0xe4, Size: 0x4] 0x78ce3b4080
	int SizeZ;//[Offset: 0xe8, Size: 0x4] 0x78ce3b4100
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10] 0x78ce3b4180
	byte OverrideFormat;//[Offset: 0xfc, Size: 0x1] 0x78ce3b4200
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1] 0x78ce3b2180
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1] 0x78ce3b2200

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78ce3b2500
	int SizeY;//[Offset: 0xe4, Size: 0x4] 0x78ce3b2580
	int Slices;//[Offset: 0xe8, Size: 0x4] 0x78ce3b2600
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10] 0x78ce3b2680
	byte OverrideFormat;//[Offset: 0xfc, Size: 0x1] 0x78ce3b2700
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfd, Size: 0x1] 0x78ce3b2780
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfd, Size: 0x1] 0x78ce3b2800

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	static FString TrimTrailing(FString SourceString);// 0xb0248ac 0x78ce31e160
	static FString Trim(FString SourceString);// 0xb0249a0 0x78ce31e240
	static FString ToUpper(FString SourceString);// 0xb0252dc 0x78ce31e320
	static FString ToLower(FString SourceString);// 0xb0251e8 0x78ce31e400
	static FString TimeSecondsToString(float InSeconds);// 0xb0238cc 0x78ce31e4e0
	static bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0xb024d4c 0x78ce31e5c0
	static bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0xb02405c 0x78ce31e6a0
	static FString RightPad(FString SourceString, int ChCount);// 0xb024f60 0x78ce31adc0
	static FString RightChop(FString SourceString, int Count);// 0xb023b4c 0x78ce31aea0
	static FString Right(FString SourceString, int Count);// 0xb023c90 0x78ce31af80
	static FString Reverse(FString SourceString);// 0xb02466c 0x78ce31b060
	static int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0xb0242c4 0x78ce31b140
	static FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0xb024478 0x78ce31b220
	static FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0xb0256b0 0x78ce31b300
	static bool NotEqual_StrStr(FString A, FString B);// 0xb026160 0x78ce31b3e0
	static bool NotEqual_StriStri(FString A, FString B);// 0xb026050 0x78ce31b4c0
	static FString Mid(FString SourceString, int Start, int Count);// 0xb0239c0 0x78ce31b5a0
	static bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0xb024a94 0x78ce31b680
	static int Len(FString S);// 0xb025f9c 0x78ce31b760
	static FString LeftPad(FString SourceString, int ChCount);// 0xb0250a4 0x78ce31b840
	static FString LeftChop(FString SourceString, int Count);// 0xb023dd4 0x78ce31b920
	static FString Left(FString SourceString, int Count);// 0xb023f18 0x78ce31ba00
	static FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0xb02552c 0x78ce31bae0
	static bool IsNumeric(FString SourceString);// 0xb024ea8 0x78ce31bbc0
	static bool IsEmpty(FString inString);// 0xb025ee4 0x78ce31bca0
	static FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0xb025d58 0x78ce31bd80
	static int GetCharacterAsNumber(FString SourceString, int index);// 0xb0258bc 0x78ce31be60
	static FString[] GetCharacterArrayFromString(FString SourceString);// 0xb0253d0 0x78ce31bf40
	static int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0xb025b68 0x78ce31c020
	static bool EqualEqual_StrStr(FString A, FString B);// 0xb026380 0x78ce31c100
	static bool EqualEqual_StriStri(FString A, FString B);// 0xb026270 0x78ce31c1e0
	static bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0xb024bf0 0x78ce31c2c0
	static int CullArray(FString SourceString, out FString[] inArray);// 0xb024760 0x78ce31c3a0
	static FString Conv_VectorToString(Vector InVec);// 0xb028934 0x78ce31c480
	static FString Conv_Vector2dToString(Vector2D InVec);// 0xb028660 0x78ce31c560
	static FString Conv_TransformToString(out const Transform InTrans);// 0xb028444 0x78ce31c640
	static void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0xb027bb8 0x78ce31c720
	static void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0xb027d04 0x78ce31c800
	static void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0xb027a6c 0x78ce31c8e0
	static FName Conv_StringToName(FString inString);// 0xb027fb8 0x78ce31c9c0
	static int Conv_StringToInt(FString inString);// 0xb027f04 0x78ce3190e0
	static float Conv_StringToFloat(FString inString);// 0xb027e50 0x78ce3191c0
	static void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0xb027920 0x78ce3192a0
	static FString Conv_RotatorToString(Rotator InRot);// 0xb02856c 0x78ce319380
	static FString Conv_ObjectToString(Object* InObj);// 0xb028350 0x78ce319460
	static FString Conv_NameToString(FName InName);// 0xb028168 0x78ce319540
	static FString Conv_MatrixToString(out const Matrix InMatrix);// 0xb02806c 0x78ce319620
	static FString Conv_IntVectorToString(IntVector InIntVec);// 0xb028840 0x78ce319700
	static FString Conv_IntToString(int inInt);// 0xb028c18 0x78ce3197e0
	static FString Conv_IntPointToString(IntPoint InIntPoint);// 0xb028750 0x78ce3198c0
	static FString Conv_FloatToString(float InFloat);// 0xb028d0c 0x78ce3199a0
	static FString Conv_ColorToString(LinearColor InColor);// 0xb02825c 0x78ce319a80
	static FString Conv_ByteToString(byte InByte);// 0xb028b24 0x78ce319b60
	static FString Conv_BoolToString(bool InBool);// 0xb028a28 0x78ce319c40
	static bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0xb0259bc 0x78ce319d20
	static FString Concat_StrStr(FString A, FString B);// 0xb026490 0x78ce319e00
	static FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0xb026d94 0x78ce319ee0
	static FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0xb027168 0x78ce319fc0
	static FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0xb026ba8 0x78ce31a0a0
	static FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0xb0269b8 0x78ce31a180
	static FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0xb0265dc 0x78ce31a260
	static FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0xb026f7c 0x78ce31a340
	static FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0xb027540 0x78ce31a420
	static FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);// 0xb027730 0x78ce31a500
	static FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0xb0267cc 0x78ce31a5e0
	static FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0xb027354 0x78ce31a6c0

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	static bool IsRegisteredTableId(const FName TableId);// 0xb02b6b0 0x78ce31da60
	static bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0xb02b5ac 0x78ce31db40
	static FString GetTableNamespace(const FName TableId);// 0xb02b4b8 0x78ce31dc20
	static FString GetTableEntrySourceString(const FName TableId, FString Key);// 0xb02b378 0x78ce31dd00
	static FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0xb02b1e8 0x78ce31dde0
	static FName[] GetRegisteredStringTables();// 0xb02b138 0x78ce31dec0
	static FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0xb02ae9c 0x78ce31dfa0
	static FString[] GetKeysFromStringTable(const FName TableId);// 0xb02afdc 0x78ce31e080

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	static void UnregisterForRemoteNotifications();// 0xb02e1bc 0x78cf555640
	static void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0xb02c690 0x78cf551d60
	static void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0xb02c740 0x78cf551e40
	static void TransactObject(Object* Object);// 0xb02d7ac 0x78cf551f20
	static void StackTrace();// 0xb042a18 0x78cf552000
	static bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0360dc 0x78cf5520e0
	static bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb033bbc 0x78cf5521c0
	static bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0385e0 0x78cf5522a0
	static bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb035c48 0x78cf552380
	static bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb033738 0x78cf552460
	static bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb03815c 0x78cf552540
	static bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb03a328 0x78cf552620
	static bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb03a5d8 0x78cf552700
	static void SnapshotObject(Object* Object);// 0xb02d714 0x78cf5527e0
	static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0xb02ed88 0x78cf5528c0
	static void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0xb02ecf0 0x78cf5529a0
	static void ShowInterstitialAd();// 0xb02ee2c 0x78cf552a80
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0xb02efa4 0x78cf552b60
	static void SetWindowTitle(out const FText title);// 0xb03e86c 0x78cf552c40
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0xb02eacc 0x78cf552d20
	static void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0xb03aebc 0x78cf552e00
	static void SetUserActivity(out const UserActivity UserActivity);// 0xb02e108 0x78cf552ee0
	static void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0xb03a9d8 0x78cf552fc0
	static void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0xb03afec 0x78cf5530a0
	static void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0xb02e5bc 0x78cf553180
	static void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0xb0428f4 0x78cf553260
	static void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0xb03b17c 0x78cf553340
	static void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0xb03b400 0x78cf553420
	static void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0xb03b2b4 0x78cf553500
	static void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0xb03ad8c 0x78cf5535e0
	static void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0xb03b8e8 0x78cf5536c0
	static void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0xb03b54c 0x78cf5537a0
	static void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0xb03ac5c 0x78cf553880
	static void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0xb03becc 0x78cf553960
	static void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0xb03b684 0x78cf550080
	static void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0xb03bda0 0x78cf550160
	static void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0xb02e9f4 0x78cf550240
	static void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0xb03bb48 0x78cf550320
	static void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0xb03a888 0x78cf550400
	static void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0xb03ab2c 0x78cf5504e0
	static void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0xb0427d0 0x78cf5505c0
	static void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0xb03b7bc 0x78cf5506a0
	static void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0xb03bc74 0x78cf550780
	static void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0xb03ba14 0x78cf550860
	static void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xb03e118 0x78cf550940
	static void ResetGamepadAssignmentToController(int ControllerId);// 0xb02e948 0x78cf550a20
	static void ResetGamepadAssignments();// 0xb02e9e0 0x78cf550b00
	static void RegisterForRemoteNotifications();// 0xb02e1d0 0x78cf550be0
	static void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0xb03e390 0x78cf550cc0
	static void PrintWarning(FString inString);// 0xb03e974 0x78cf550da0
	static void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0xb03ea18 0x78cf550e80
	static void PrintString(const Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0xb03ed08 0x78cf550f60
	static bool ParseParamValue(FString inString, FString InParam, out FString OutValue);// 0xb02db64 0x78cf551040
	static bool ParseParam(FString inString, FString InParam);// 0xb02dcd8 0x78cf551120
	static void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0xb02dde8 0x78cf551200
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0x8a873f8 0x78cf52ee80
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0x8a873f8 0x78cf52ebe0
	static bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xb040428 0x78cf5512e0
	static bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xb03fe9c 0x78cf5513c0
	static bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xb02c7d8 0x78cf5514a0
	static bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xb02cb60 0x78cf551580
	static FString NormalizeFilename(FString InFilename);// 0xb0418cc 0x78cf551660
	static void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0xb03de18 0x78cf551740
	static SoftObjectPath MakeSoftObjectPath(FString PathString);// 0xb040ef4 0x78cf551820
	static SoftClassPath MakeSoftClassPath(FString PathString);// 0xb040b30 0x78cf551900
	static FText MakeLiteralText(FText Value);// 0xb03ef34 0x78cf5519e0
	static FString MakeLiteralString(FString Value);// 0xb03f128 0x78cf551ac0
	static FName MakeLiteralName(FName Value);// 0xb03f2e4 0x78cf551ba0
	static int MakeLiteralInt(int Value);// 0xb03f4d8 0x78cf551c80
	static float MakeLiteralFloat(float Value);// 0xb03f434 0x78cf52e780
	static byte MakeLiteralByte(byte Value);// 0xb03f240 0x78cf52e860
	static bool MakeLiteralBool(bool Value);// 0xb03f388 0x78cf52e940
	static void LoadInterstitialAd(int AdIdIndex);// 0xb02eeb0 0x78cf52ea20
	static class Object LoadClassAsset_Blocking(class Object AssetClass);// 0xb03fd78 0x78cf52eb00
	static void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xb03f57c 0x78cf52ecc0
	static Object* LoadAsset_Blocking(Object* Asset);// 0xb040304 0x78cf52eda0
	static void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xb03f784 0x78cf52ef60
	static bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0369bc 0x78cf52f040
	static bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb03447c 0x78cf52f120
	static bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb038e94 0x78cf52f200
	static bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb036574 0x78cf52f2e0
	static bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb034044 0x78cf52f3c0
	static bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb038a68 0x78cf52f4a0
	static void LaunchURL(FString URL);// 0xb02f158 0x78cf52f580
	static void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03d1ac 0x78cf52f660
	static void K2_UnPauseTimerDelegate(delegate Delegate);// 0xb03da40 0x78cf52f740
	static void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0xb03c6a8 0x78cf52f820
	static bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03ced0 0x78cf52f900
	static bool K2_TimerExistsDelegate(delegate Delegate);// 0xb03d80c 0x78cf52f9e0
	static bool K2_TimerExists(Object* Object, FString FunctionName);// 0xb03c2a0 0x78cf52fac0
	static TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xb03dc38 0x78cf52fba0
	static TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xb03ca74 0x78cf52fc80
	static void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03d28c 0x78cf52fd60
	static void K2_PauseTimerDelegate(delegate Delegate);// 0xb03dae8 0x78cf52fe40
	static void K2_PauseTimer(Object* Object, FString FunctionName);// 0xb03c7ec 0x78cf52ff20
	static bool K2_IsValidTimerHandle(TimerHandle Handle);// 0xb03d5f0 0x78cf52caa0
	static bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03cfc4 0x78cf52cb80
	static bool K2_IsTimerPausedDelegate(delegate Delegate);// 0xb03d8c8 0x78cf52cc60
	static bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0xb03c3f8 0x78cf52cd40
	static bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03d0b8 0x78cf52ce20
	static bool K2_IsTimerActiveDelegate(delegate Delegate);// 0xb03d984 0x78cf52cf00
	static bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0xb03c550 0x78cf52cfe0
	static TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0xb03d53c 0x78cf52d0c0
	static float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03ccf0 0x78cf52d1a0
	static float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0xb03d69c 0x78cf52d280
	static float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0xb03bff8 0x78cf52d360
	static float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03cde0 0x78cf52d440
	static float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0xb03d754 0x78cf52d520
	static float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0xb03c14c 0x78cf52d600
	static void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xb03d45c 0x78cf52d6e0
	static void K2_ClearTimerDelegate(delegate Delegate);// 0xb03db90 0x78cf52d7c0
	static void K2_ClearTimer(Object* Object, FString FunctionName);// 0xb03c930 0x78cf52d8a0
	static void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0xb03d36c 0x78cf52d980
	static bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0xb0407bc 0x78cf52da60
	static bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0xb040230 0x78cf52db40
	static bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0xb02cab4 0x78cf52dc20
	static bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xb02ce44 0x78cf52dd00
	static bool IsValidClass(class Object Class);// 0xb042484 0x78cf52dde0
	static bool IsValid(const Object* Object);// 0xb042570 0x78cf52dec0
	static bool IsUnattended();// 0xb02db2c 0x78cf52dfa0
	static bool IsStandalone(const Object* WorldContextObject);// 0xb0412e8 0x78cf52e080
	static bool IsSplitScreen(const Object* WorldContextObject);// 0xb04123c 0x78cf52e160
	static bool IsServer(const Object* WorldContextObject);// 0xb041440 0x78cf52e240
	static bool IsScreensaverEnabled();// 0xb02ec0c 0x78cf52e320
	static bool IsPackagedForDistribution();// 0xb041204 0x78cf52e400
	static bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0xb02ec44 0x78cf52e4e0
	static bool IsInterstitialAdRequested();// 0xb02ee40 0x78cf52e5c0
	static bool IsInterstitialAdAvailable();// 0xb02ee78 0x78cf52e6a0
	static bool IsDedicatedServer(const Object* WorldContextObject);// 0xb041394 0x78cf52adc0
	static bool IsControllerAssignedToGamepad(int ControllerId);// 0xb02e89c 0x78cf52aea0
	static void HideAdBanner();// 0xb02ef5c 0x78cf52af80
	static bool GetVolumeButtonsHandledBySystem();// 0xb02ea94 0x78cf52b060
	static FString GetUniqueDeviceId();// 0xb041154 0x78cf52b140
	static FString GetSystemPath(const Object* Object);// 0xb0421a8 0x78cf52b220
	static bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0xb02f328 0x78cf52b300
	static Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xb02d4a4 0x78cf52b3e0
	static class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xb02d384 0x78cf52b4c0
	static int GetRenderingMaterialQualityLevel();// 0xb02f3ec 0x78cf52b5a0
	static int GetRenderingDetailMode();// 0xb02f420 0x78cf52b680
	static FString GetProjectSavedDirectory();// 0xb041ba8 0x78cf52b760
	static FString GetProjectDirectory();// 0xb041d08 0x78cf52b840
	static FString GetProjectContentDirectory();// 0xb041c58 0x78cf52b920
	static void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xb02c31c 0x78cf52ba00
	static void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xb02cef0 0x78cf52bae0
	static PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0xb02d110 0x78cf52bbc0
	static PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0xb02cfec 0x78cf52bca0
	static PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0xb02d2dc 0x78cf52bd80
	static PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0xb02d234 0x78cf52be60
	static FString[] GetPreferredLanguages();// 0xb02e4a4 0x78cf52bf40
	static FString GetPlatformUserName();// 0xb04176c 0x78cf52c020
	static FString GetPlatformUserDir();// 0xb0416bc 0x78cf52c100
	static FString GetPathName(const Object* Object);// 0xb04229c 0x78cf52c1e0
	static Object* GetOuterObject(const Object* Object);// 0xb041f18 0x78cf52c2c0
	static FString GetObjectName(const Object* Object);// 0xb042390 0x78cf52c3a0
	static Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xb02d66c 0x78cf52c480
	static int GetMinYResolutionForUI();// 0xb02f230 0x78cf52c560
	static int GetMinYResolutionFor3DView();// 0xb02f1fc 0x78cf52c640
	static FString GetLocalCurrencySymbol();// 0xb02e1e4 0x78cf52c720
	static FString GetLocalCurrencyCode();// 0xb02e294 0x78cf52c800
	static float GetGameTimeInSeconds(const Object* WorldContextObject);// 0xb041520 0x78cf52c8e0
	static FString GetGamepadControllerName(int ControllerId);// 0xb02e7a8 0x78cf52c9c0
	static Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0xb02e6a8 0x78cf5290e0
	static FString GetGameName();// 0xb041db8 0x78cf5291c0
	static FString GetGameBundleId();// 0xb04181c 0x78cf5292a0
	static int64 GetFrameCount();// 0xb0414ec 0x78cf529380
	static FString GetEngineVersion();// 0xb041e68 0x78cf529460
	static FString GetDisplayName(const Object* Object);// 0xb0420b4 0x78cf529540
	static FString GetDeviceId();// 0xb0410a4 0x78cf529620
	static FString GetDefaultLocale();// 0xb02e344 0x78cf529700
	static FString GetDefaultLanguage();// 0xb02e3f4 0x78cf5297e0
	static bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0xb02c538 0x78cf5298c0
	static bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0xb02f264 0x78cf5299a0
	static int GetConsoleVariableIntValue(FString VariableName);// 0xb03e5c8 0x78cf529a80
	static float GetConsoleVariableFloatValue(FString VariableName);// 0xb03e67c 0x78cf529b60
	static bool GetConsoleVariableBoolValue(FString VariableName);// 0xb03e510 0x78cf529c40
	static void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0xb02f590 0x78cf529d20
	static FString GetCommandLine();// 0xb02e058 0x78cf529e00
	static class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xb02d5c4 0x78cf529ee0
	static FString GetClassDisplayName(class Object Class);// 0xb041fc0 0x78cf529fc0
	static int GetAdIDCount();// 0xb02ef70 0x78cf52a0a0
	static void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0xb03228c 0x78cf52a180
	static void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0xb02f454 0x78cf52a260
	static void ForceCloseAdBanner();// 0xb02ef48 0x78cf52a340
	static void FlushPersistentDebugLines(const Object* WorldContextObject);// 0xb0300d8 0x78cf52a420
	static void FlushDebugStrings(const Object* WorldContextObject);// 0xb030388 0x78cf52a500
	static void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0xb03e730 0x78cf52a5e0
	static bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xb040568 0x78cf52a6c0
	static bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xb03ffdc 0x78cf52a7a0
	static bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xb02c8cc 0x78cf52a880
	static bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xb02cc58 0x78cf52a960
	static int EndTransaction();// 0xb02d8dc 0x78cf52aa40
	static void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0xb030420 0x78cf52ab20
	static void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xb031224 0x78cf52ac00
	static void DrawDebugPoint(const Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0xb031b5c 0x78cf52ace0
	static void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0xb030170 0x78cf527400
	static void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0xb032074 0x78cf5274e0
	static void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0xb02feec 0x78cf5275c0
	static void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xb02fb64 0x78cf5276a0
	static void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xb02f92c 0x78cf527780
	static void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xb030f74 0x78cf527860
	static void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0xb031480 0x78cf527940
	static void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xb0308e4 0x78cf527a20
	static void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xb030c2c 0x78cf527b00
	static void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0xb031d20 0x78cf527be0
	static void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0xb030638 0x78cf527cc0
	static void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0xb02fdc0 0x78cf527da0
	static void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0xb03168c 0x78cf527e80
	static void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0xb0318f8 0x78cf527f60
	static bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0xb0415c8 0x78cf528040
	static void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xb03e254 0x78cf528120
	static void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0xb02f71c 0x78cf528200
	static FString ConvertToRelativePath(FString Filename);// 0xb041ab4 0x78cf5282e0
	static FString ConvertToAbsolutePath(FString Filename);// 0xb0419c0 0x78cf5283c0
	static Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0xb040c54 0x78cf5284a0
	static FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0xb0406a8 0x78cf528580
	static Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0xb03fca8 0x78cf528660
	static FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0xb04011c 0x78cf528740
	static class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0xb03fbd8 0x78cf528820
	static class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0xb040890 0x78cf528900
	static FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0xb02c9c0 0x78cf5289e0
	static FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0xb02cd50 0x78cf528ac0
	static Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0xb03fab8 0x78cf528ba0
	static Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0xb040ff0 0x78cf528c80
	static class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0xb03f98c 0x78cf528d60
	static void ControlScreensaver(bool bAllowScreenSaver);// 0xb02eb6c 0x78cf528e40
	static bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb0392d0 0x78cf528f20
	static bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb039558 0x78cf529000
	static void CollectGarbage();// 0xb02f08c 0x78cf525720
	static bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb034d94 0x78cf525800
	static bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0328b8 0x78cf5258e0
	static bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0372d8 0x78cf5259c0
	static bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0348b8 0x78cf525aa0
	static bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0323ec 0x78cf525b80
	static bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb036e08 0x78cf525c60
	static bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb0397e0 0x78cf525d40
	static bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb039ad8 0x78cf525e20
	static bool CanLaunchURL(FString URL);// 0xb02f0a0 0x78cf525f00
	static void CancelTransaction(const int index);// 0xb02d844 0x78cf525fe0
	static void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0xb040d90 0x78cf5260c0
	static void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0xb0409cc 0x78cf5261a0
	static bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb03575c 0x78cf526280
	static bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb033260 0x78cf526360
	static bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb037c80 0x78cf526440
	static bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb035274 0x78cf526520
	static bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb032d88 0x78cf526600
	static bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb0377a8 0x78cf5266e0
	static bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb039dd0 0x78cf5267c0
	static bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb03a07c 0x78cf5268a0
	static int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0xb02d910 0x78cf526980
	static DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0xb02f7b4 0x78cf526a60

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10] 0x78cf54c000

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4] 0x78cf54c600

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf549980

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8] 0x78cf542d00

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10] 0x78cf2cc360
	float MaxSamples;//[Offset: 0x10, Size: 0x4] 0x78cf532d00
	float MinValue;//[Offset: 0x14, Size: 0x4] 0x78cf532d80
	float MaxValue;//[Offset: 0x18, Size: 0x4] 0x78cf532e00
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cf532e80

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	static FText TextTrimTrailing(out const FText InText);// 0xb04bbe0 0x78ce31e860
	static FText TextTrimPrecedingAndTrailing(out const FText InText);// 0xb04ba64 0x78ce31e940
	static FText TextTrimPreceding(out const FText InText);// 0xb04bd5c 0x78ce31ea20
	static FText TextToUpper(out const FText InText);// 0xb04bed8 0x78ce31eb00
	static FText TextToLower(out const FText InText);// 0xb04c054 0x78ce31ebe0
	static bool TextIsTransient(out const FText InText);// 0xb04c2e4 0x78ce31ecc0
	static bool TextIsFromStringTable(out const FText text);// 0xb048e34 0x78ce31eda0
	static bool TextIsEmpty(out const FText InText);// 0xb04c3f8 0x78ce31ee80
	static bool TextIsCultureInvariant(out const FText InText);// 0xb04c1d0 0x78ce31ef60
	static FText TextFromStringTable(const FName TableId, FString Key);// 0xb048cc8 0x78ce31f040
	static bool StringTableIdAndKeyFromText(FText text, out FName OutTableId, out FString OutKey);// 0xb048a8c 0x78ce31f120
	static FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0xb048724 0x78ce31f200
	static bool NotEqual_TextText(out const FText A, out const FText B);// 0xb04b29c 0x78ce31f2e0
	static bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0xb04b0dc 0x78ce31f3c0
	static void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0xb048890 0x78ce31f4a0
	static FText GetEmptyText();// 0xb04b994 0x78ce31f580
	static FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0xb048f48 0x78ce31f660
	static bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0xb04b7dc 0x78ce31f740
	static bool EqualEqual_TextText(out const FText A, out const FText B);// 0xb04b61c 0x78ce31f820
	static bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0xb04b45c 0x78ce31f900
	static FText Conv_VectorToText(Vector InVec);// 0xb04ce28 0x78ce31f9e0
	static FText Conv_Vector2dToText(Vector2D InVec);// 0xb04cd18 0x78ce31fac0
	static FText Conv_TransformToText(out const Transform InTrans);// 0xb04cabc 0x78ce31fba0
	static FString Conv_TextToString(out const FText InText);// 0xb04c740 0x78ce31fc80
	static FText Conv_StringToText(FString inString);// 0xb04c620 0x78ce31fd60
	static FText Conv_RotatorToText(Rotator InRot);// 0xb04cc04 0x78ce31fe40
	static FText Conv_ObjectToText(Object* InObj);// 0xb04c9a8 0x78ce31ff20
	static FText Conv_NameToText(FName InName);// 0xb04c50c 0x78ce31caa0
	static FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0xb04ac6c 0x78ce31cb80
	static FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0xb04aa2c 0x78ce31cc60
	static FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0xb04a70c 0x78ce31cd40
	static FText Conv_ColorToText(LinearColor InColor);// 0xb04c894 0x78ce31ce20
	static FText Conv_ByteToText(byte Value);// 0xb04aeac 0x78ce31cf00
	static FText Conv_BoolToText(bool InBool);// 0xb04afc0 0x78ce31cfe0
	static FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xb0493f4 0x78ce31d0c0
	static FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xb04967c 0x78ce31d1a0
	static FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0xb049904 0x78ce31d280
	static FText AsTimespan_Timespan(out const Timespan InTimespan);// 0xb0492d8 0x78ce31d360
	static FText AsTime_DateTime(out const DateTime In);// 0xb049560 0x78ce31d440
	static FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0xb049b8c 0x78ce31d520
	static FText AsDateTime_DateTime(out const DateTime In);// 0xb0497e8 0x78ce31d600
	static FText AsDate_DateTime(out const DateTime InDateTime);// 0xb049a70 0x78ce31d6e0
	static FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0xb04a5a0 0x78ce31d7c0
	static FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0xb04a224 0x78ce31d8a0
	static FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0xb049eac 0x78ce31d980

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1] 0x78ea07b140
	FString NativeCulture;//[Offset: 0x8, Size: 0x10] 0x78ea088e00
	FString Namespace;//[Offset: 0x18, Size: 0x10] 0x78ea088e80
	FString Key;//[Offset: 0x28, Size: 0x10] 0x78ea088f00
	FString NativeString;//[Offset: 0x38, Size: 0x10] 0x78ea088f80
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50] 0x78ea096400
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78ea089100
	FText CachedText;//[Offset: 0xa0, Size: 0x18] 0x78ea089180

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10] 0x78cf506180
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1] 0x78cf506200
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18] 0x78cf506280
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4] 0x78cf506300
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4] 0x78cf504280
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1] 0x78cf2caa60

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x78ce33f400
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78ce33f480
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10] 0x78ce9d20e0

--------------------------------
Class: LayerActorStats
	class Object* Type;//[Offset: 0x0, Size: 0x8] 0x78cf084160
	int Total;//[Offset: 0x8, Size: 0x4] 0x78cf0afe00

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 0x8] 0x78ce33ff00
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78ce33ff80

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78ce351900
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x78ce351980
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0xb053b98 0x78ce340cc0
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0xb053e40 0x78ce340da0

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8] 0x78ce351600
	int[] Surfaces;//[Offset: 0x30, Size: 0x10] 0x78ce9d1a00

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x100, Size: 0x10] 0x78ce9d1960

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x220, Size: 0x8] 0x78ce351500

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x1f8, Size: 0x8] 0x78ce351480

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18] 0x78ce351400

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LODSyncComponent.ActorComponent.Object
	int NumLODs;//[Offset: 0xb0, Size: 0x4] 0x78ce352480
	int ForcedLOD;//[Offset: 0xb4, Size: 0x4] 0x78ce352500
	ComponentSync[] ComponentsToSync;//[Offset: 0xb8, Size: 0x10] 0x78ce9d3d00
	<FName,LODMappingData> CustomLODMapping;//[Offset: 0xc8, Size: 0x50] 0x78cee16100
	int CurrentLOD;//[Offset: 0x118, Size: 0x4] 0x78ce352700
	int CurrentNumLODs;//[Offset: 0x11c, Size: 0x4] 0x78ce352780
	PrimitiveComponent*[] DriveComponents;//[Offset: 0x120, Size: 0x10] 0x78ce9d3da0
	PrimitiveComponent*[] SubComponents;//[Offset: 0x130, Size: 0x10] 0x78ce9d1500
	FString GetLODSyncDebugText();// 0xb05ddec 0x78ce340940

--------------------------------
Class: ComponentSync
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0c1200
	enum SyncOption;//[Offset: 0x8, Size: 0x1] 0x78cf084020

--------------------------------
Class: LODMappingData
	int[] Mapping;//[Offset: 0x0, Size: 0x10] 0x78cf083ee0
	int[] InverseMapping;//[Offset: 0x10, Size: 0x10] 0x78cf083f80

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x440, Size: 0x10] 0x78ce9d3bc0
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0xb062b08 0x78ce340780
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0xb0628f0 0x78ce340860

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x78cf0c2e00
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8] 0x78cf0c2e80
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cf0c2f00
	float BaseSizeX;//[Offset: 0x14, Size: 0x4] 0x78cf0c2f80
	float BaseSizeY;//[Offset: 0x18, Size: 0x4] 0x78cf0c3000
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8] 0x78cf0c3080

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8] 0x78cf21ae80
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8] 0x78cf21af00
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78cf21af80

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce356c80

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce356a80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce356b00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78ce356b80
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78ce356c00

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8] 0x78cf21ae00

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0xc] 0x78cf21ad80

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x5c, Size: 0x8] 0x78cf21ac00
	Guid ExpressionGUID;//[Offset: 0x64, Size: 0x10] 0x78cf21ac80
	FName Group;//[Offset: 0x74, Size: 0x8] 0x78cf21ad00

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x7c, Size: 0x4] 0x78ce356980
	byte Channel;//[Offset: 0x80, Size: 0x1] 0x78ce356a00

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce356880
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce356900

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce356800

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce356780

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce356700

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce356680

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce356600

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x78ce356500
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x78ce356580

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x78ce356400
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x78ce356480

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce356380

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc] 0x78ce358400

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce358380

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0xc] 0x78ce358300

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x3c, Size: 0x10] 0x78ce358080
	MaterialAttributesInput B;//[Offset: 0x54, Size: 0x10] 0x78ce358100
	ExpressionInput Alpha;//[Offset: 0x6c, Size: 0xc] 0x78ce358180
	byte PixelAttributeBlendType;//[Offset: 0x80, Size: 0x1] 0x78ce358200
	byte VertexAttributeBlendType;//[Offset: 0x81, Size: 0x1] 0x78ce358280

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x10] 0x78ce358000

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x78ce357d00
	ExpressionInput Height;//[Offset: 0x50, Size: 0xc] 0x78ce357d80
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0xc] 0x78ce357e00
	float HeightRatio;//[Offset: 0x78, Size: 0x4] 0x78ce357e80
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4] 0x78ce357f00
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x78ce357f80

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce357c80

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78ce357b80
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x78ce357c00

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10] 0x78ce357a00
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78ce357a80
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1] 0x78ce357b00

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x66, Size: 0x1] 0x78ce357980

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce357680
	ExpressionInput Min;//[Offset: 0x50, Size: 0xc] 0x78ce357700
	ExpressionInput Max;//[Offset: 0x64, Size: 0xc] 0x78ce357780
	byte ClampMode;//[Offset: 0x78, Size: 0x1] 0x78ce357800
	float MinDefault;//[Offset: 0x7c, Size: 0x4] 0x78ce357880
	float MaxDefault;//[Offset: 0x80, Size: 0x4] 0x78ce357900

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce357600

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8] 0x78ce357480
	FName ParameterName;//[Offset: 0x48, Size: 0x8] 0x78ce357500
	Guid ParameterId;//[Offset: 0x50, Size: 0x10] 0x78ce357580

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4] 0x78ce359300
	int SizeY;//[Offset: 0x40, Size: 0x4] 0x78ce359380
	FString text;//[Offset: 0x48, Size: 0x10] 0x78ce359400
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10] 0x78ce359480
	int FontSize;//[Offset: 0x68, Size: 0x4] 0x78ce357400

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce359080
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce359100
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78ce359180
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x78ce359200
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x78ce359280

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x78ce359000

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x78ce358f00
	float G;//[Offset: 0x40, Size: 0x4] 0x78ce358f80

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x78ce358e80

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x78ce358e00

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce358c80
	float Bias;//[Offset: 0x50, Size: 0x4] 0x78ce358d00
	float Scale;//[Offset: 0x54, Size: 0x4] 0x78ce358d80

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce358b80
	float Period;//[Offset: 0x50, Size: 0x4] 0x78ce358c00

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce358a80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce358b00

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4] 0x78ce358900
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78ce358980
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1] 0x78ce358a00

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8] 0x78ce358780
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8] 0x78ce358800
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0xc] 0x78ce358880

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString code;//[Offset: 0x40, Size: 0x10] 0x78ce35a500
	byte OutputType;//[Offset: 0x50, Size: 0x1] 0x78ce358480
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78ce358500
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10] 0x78ce9d3940
	CustomOutput[] AdditionalOutputs;//[Offset: 0x78, Size: 0x10] 0x78ce9d39e0
	CustomDefine[] AdditionalDefines;//[Offset: 0x88, Size: 0x10] 0x78ce9d3a80
	FString[] IncludeFilePaths;//[Offset: 0x98, Size: 0x10] 0x78ce9d3b20

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8] 0x78cf0c3980
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc] 0x78cf0c3a00

--------------------------------
Class: CustomOutput
	FName OutputName;//[Offset: 0x0, Size: 0x8] 0x78cf0c3a80
	byte OutputType;//[Offset: 0x8, Size: 0x1] 0x78cf0c3b00

--------------------------------
Class: CustomDefine
	FString DefineName;//[Offset: 0x0, Size: 0x10] 0x78cf0c3b80
	FString DefineValue;//[Offset: 0x10, Size: 0x10] 0x78cf0c3c00

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x78ce35a480

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x78ce35a400

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0xc] 0x78ce35a280
	float ConstWidth;//[Offset: 0x50, Size: 0x4] 0x78ce35a300
	float ConstHeight;//[Offset: 0x54, Size: 0x4] 0x78ce35a380

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0xc] 0x78ce35a080
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0xc] 0x78ce35a100
	float OpacityDefault;//[Offset: 0x64, Size: 0x4] 0x78ce35a180
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4] 0x78ce35a200

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x39, Size: 0x1] 0x78ce359f80
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0xc] 0x78ce35a000

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0xc] 0x78ce359f00

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce359d80
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0xc] 0x78ce359e00
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10] 0x78ce359e80

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce359c80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce359d00

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78ce359c00

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78ce359b80

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce359980
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce359a00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78ce359a80
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78ce359b00

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce359880
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce359900

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10] 0x78ce9d38a0
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10] 0x78ce359780
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4] 0x78ce359800

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78ce359680

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce359600

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce359500
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce359580

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8] 0x78ce35b500
	int FontTexturePage;//[Offset: 0x48, Size: 0x4] 0x78ce35b580

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x4c, Size: 0x8] 0x78ce35b380
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10] 0x78ce35b400
	FName Group;//[Offset: 0x64, Size: 0x8] 0x78ce35b480

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce35b300

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0xc] 0x78ce35b080
	float Exponent;//[Offset: 0x50, Size: 0x4] 0x78ce35b100
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0xc] 0x78ce35b180
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4] 0x78ce35b200
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0xc] 0x78ce35b280

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0xc] 0x78ce35ac00
	FName InputName;//[Offset: 0x50, Size: 0x8] 0x78ce35ac80
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78ce35ad00
	Guid ID;//[Offset: 0x68, Size: 0x10] 0x78ce35ad80
	byte InputType;//[Offset: 0x78, Size: 0x1] 0x78ce35ae00
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x10] 0x78ce35ae80
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78ce35af00
	int SortPriority;//[Offset: 0x94, Size: 0x4] 0x78ce35af80
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x78ce35b000

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8] 0x78ce35a900
	FString Description;//[Offset: 0x48, Size: 0x10] 0x78ce35a980
	int SortPriority;//[Offset: 0x58, Size: 0x4] 0x78ce35aa00
	ExpressionInput A;//[Offset: 0x5c, Size: 0xc] 0x78ce35aa80
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78ce35ab00
	Guid ID;//[Offset: 0x74, Size: 0x10] 0x78ce35ab80

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x10] 0x78ce35a800
	Guid[] AttributeGetTypes;//[Offset: 0x58, Size: 0x10] 0x78ce9d3800

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78ce35a680
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0xc] 0x78ce35a700
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0xc] 0x78ce35a780

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78ce35a600

--------------------------------
Class: MaterialExpressionHairColor.MaterialExpression.Object
	ExpressionInput Melanin;//[Offset: 0x3c, Size: 0xc] 0x78ce35c580
	ExpressionInput Redness;//[Offset: 0x50, Size: 0xc] 0x78ce35c600
	ExpressionInput DyeColor;//[Offset: 0x64, Size: 0xc] 0x78ce35a580

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce35c180
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce35c200
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0xc] 0x78ce35c280
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0xc] 0x78ce35c300
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0xc] 0x78ce35c380
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4] 0x78ce35c400
	float ConstB;//[Offset: 0xa4, Size: 0x4] 0x78ce35c480
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4] 0x78ce35c500

--------------------------------
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce35be00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce35be80
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x78ce35bf00
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x78ce35bf80
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x78ce35c000
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x78ce35c080
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78ce35c100

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x78ce35bd00
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0xc] 0x78ce35bd80

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce35ba00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce35ba80
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0xc] 0x78ce35bb00
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x78ce35bb80
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x78ce35bc00
	float ConstAlpha;//[Offset: 0x80, Size: 0x4] 0x78ce35bc80

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x78ce35b980

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x78ce35b900

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc] 0x78ce35cf80
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0xc] 0x78ce35d000
	ExpressionInput Specular;//[Offset: 0x64, Size: 0xc] 0x78ce35d080
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0xc] 0x78ce35d100
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0xc] 0x78ce35d180
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0xc] 0x78ce35d200
	ExpressionInput Opacity;//[Offset: 0xb4, Size: 0xc] 0x78ce35d280
	ExpressionInput OpacityMask;//[Offset: 0xc8, Size: 0xc] 0x78ce35d300
	ExpressionInput Normal;//[Offset: 0xdc, Size: 0xc] 0x78ce35d380
	ExpressionInput Tangent;//[Offset: 0xf0, Size: 0xc] 0x78ce35d400
	ExpressionInput WorldPositionOffset;//[Offset: 0x104, Size: 0xc] 0x78ce35d480
	ExpressionInput WorldDisplacement;//[Offset: 0x118, Size: 0xc] 0x78ce35d500
	ExpressionInput TessellationMultiplier;//[Offset: 0x12c, Size: 0xc] 0x78ce35d580
	ExpressionInput SubsurfaceColor;//[Offset: 0x140, Size: 0xc] 0x78ce35d600
	ExpressionInput ClearCoat;//[Offset: 0x154, Size: 0xc] 0x78ce35d680
	ExpressionInput ClearCoatRoughness;//[Offset: 0x168, Size: 0xc] 0x78ce35b600
	ExpressionInput AmbientOcclusion;//[Offset: 0x17c, Size: 0xc] 0x78ce35b680
	ExpressionInput Refraction;//[Offset: 0x190, Size: 0xc] 0x78ce35b700
	ExpressionInput CustomizedUVs;//[Offset: 0x1a4, Size: 0xc] 0x78ce35b780
	ExpressionInput PixelDepthOffset;//[Offset: 0x244, Size: 0xc] 0x78ce35b800
	ExpressionInput ShadingModel;//[Offset: 0x258, Size: 0xc] 0x78ce35b880

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x78ce35cf00

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78ce35ca80
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x78ce35cb00
	MaterialAttributesInput Input;//[Offset: 0x54, Size: 0x10] 0x78ce35cb80
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x70, Size: 0x40] 0x78ce35cc00
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0xb0, Size: 0x10] 0x78ce9d36c0
	int NumActiveLayerCallers;//[Offset: 0xc0, Size: 0x4] 0x78ce35cd00
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0xc8, Size: 0x10] 0x78ce9d3760
	int NumActiveBlendCallers;//[Offset: 0xd8, Size: 0x4] 0x78ce35ce00
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1] 0x78ce35ce80

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8] 0x78ce35c980
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10] 0x78ce35ca00

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x78ce35c880
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0xc] 0x78ce35c900

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce35c680
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce35c700
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78ce35c780
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78ce35c800

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce35e580
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce35e600
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78ce35e680
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78ce35e700

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce35e380
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce35e400
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78ce35e480
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78ce35e500

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78ce35dd80
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0xc] 0x78ce35de00
	float Scale;//[Offset: 0x64, Size: 0x4] 0x78ce35de80
	int Quality;//[Offset: 0x68, Size: 0x4] 0x78ce35df00
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1] 0x78ce35df80
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x78ce35e000
	int Levels;//[Offset: 0x70, Size: 0x4] 0x78ce35e080
	float OutputMin;//[Offset: 0x74, Size: 0x4] 0x78ce35e100
	float OutputMax;//[Offset: 0x78, Size: 0x4] 0x78ce35e180
	float LevelScale;//[Offset: 0x7c, Size: 0x4] 0x78ce35e200
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce35e280
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4] 0x78ce35e300

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0xc] 0x78ce35dd00

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce35dc80

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x78ce35d900
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x78ce35d980
	ExpressionInput Speed;//[Offset: 0x64, Size: 0xc] 0x78ce35da00
	float SpeedX;//[Offset: 0x78, Size: 0x4] 0x78ce35da80
	float SpeedY;//[Offset: 0x7c, Size: 0x4] 0x78ce35db00
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x78ce35db80
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78ce35dc00

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x78ce35d880

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0xc] 0x78ce35d700
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4] 0x78ce35d780
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4] 0x78ce35d800

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x78ce35f680
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0xc] 0x78ce35f700
	float ConstExponent;//[Offset: 0x64, Size: 0x4] 0x78ce35f780

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0xc] 0x78ce35f580
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0xc] 0x78ce35f600

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78ce35f480
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x78ce35f500

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0xc] 0x78ce35f380
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0xc] 0x78ce35f400

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78ce35f280
	ExpressionInput Reflection;//[Offset: 0x50, Size: 0xc] 0x78ce35f300

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0xc] 0x78ce35f180
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce35f200

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce35f100

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0xc] 0x78ce35ee80
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0xc] 0x78ce35ef00
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0xc] 0x78ce35ef80
	ExpressionInput Position;//[Offset: 0x78, Size: 0xc] 0x78ce35f000
	float Period;//[Offset: 0x8c, Size: 0x4] 0x78ce35f080

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x78ce35eb80
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x78ce35ec00
	float CenterX;//[Offset: 0x64, Size: 0x4] 0x78ce35ec80
	float CenterY;//[Offset: 0x68, Size: 0x4] 0x78ce35ed00
	float Speed;//[Offset: 0x6c, Size: 0x4] 0x78ce35ed80
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4] 0x78ce35ee00

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce35eb00

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc] 0x78ce35e780
	ExpressionInput Specular;//[Offset: 0x50, Size: 0xc] 0x78ce35e800
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0xc] 0x78ce35e880
	ExpressionInput Normal;//[Offset: 0x78, Size: 0xc] 0x78ce35e900
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0xc] 0x78ce35e980
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0xc] 0x78ce35ea00
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0xc] 0x78ce35ea80

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78ce35ff00
	ExpressionInput VirtualTextureOutput;//[Offset: 0x50, Size: 0xc] 0x78ce35ff80

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x78ce35fa80
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0xc] 0x78ce35fb00
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0xc] 0x78ce35fb80
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8] 0x78ce35fc00
	enum MaterialType;//[Offset: 0x80, Size: 0x1] 0x78ce9d3620
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78ce35fd00
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1] 0x78ce35fd80
	byte MipValueMode;//[Offset: 0x83, Size: 0x1] 0x78ce35fe00
	byte TextureAddressMode;//[Offset: 0x84, Size: 0x1] 0x78ce35fe80

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x88, Size: 0x8] 0x78ce35f900
	Guid ExpressionGUID;//[Offset: 0x90, Size: 0x10] 0x78ce35f980
	FName Group;//[Offset: 0xa0, Size: 0x8] 0x78ce35fa00

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce35f880

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78ce360f80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce361000
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0xc] 0x78ce361080
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x78ce35f800

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78ce360d80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce360e00
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0xc] 0x78ce360e80
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x78ce360f00

--------------------------------
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78ce360b80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce360c00
	Vector2D ConstInput;//[Offset: 0x50, Size: 0x8] 0x78ce360c80
	float FallbackDepth;//[Offset: 0x58, Size: 0x4] 0x78ce360d00

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x78ce360a00
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1] 0x78ce360a80
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78ce360b00

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x78ce9d34e0
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10] 0x78ce9d3580

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object
	ExpressionInput PixelShader;//[Offset: 0x3c, Size: 0xc] 0x78ce360800
	ExpressionInput VertexShader;//[Offset: 0x50, Size: 0xc] 0x78ce360880

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object
	byte ShadingModel;//[Offset: 0x39, Size: 0x1] 0x78ce360780

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78ce360680
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x78ce360700

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x78ce360580
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0xc] 0x78ce360600

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce360500

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce360400
	float Period;//[Offset: 0x50, Size: 0x4] 0x78ce360480

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput ScatteringCoefficients;//[Offset: 0x3c, Size: 0xc] 0x78ce360200
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x50, Size: 0xc] 0x78ce360280
	ExpressionInput PhaseG;//[Offset: 0x64, Size: 0xc] 0x78ce360300
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x78, Size: 0xc] 0x78ce360380

--------------------------------
Class: MaterialExpressionSkinningVertexOffsets.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78ce360180

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78ce360080
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0xc] 0x78ce360100

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78ce362100

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc] 0x78ce362080

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x3c, Size: 0xc] 0x78ce361d80
	ExpressionInput Max;//[Offset: 0x50, Size: 0xc] 0x78ce361e00
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x78ce361e80
	float ConstMin;//[Offset: 0x78, Size: 0x4] 0x78ce361f00
	float ConstMax;//[Offset: 0x7c, Size: 0x4] 0x78ce361f80
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x78ce362000

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0xc] 0x78ce361b00
	ExpressionInput index;//[Offset: 0x50, Size: 0xc] 0x78ce361b80
	ExpressionInput Seed;//[Offset: 0x64, Size: 0xc] 0x78ce361c00
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4] 0x78ce361c80
	Vector2D ConstSeed;//[Offset: 0x7c, Size: 0x8] 0x78ce361d00

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0xc] 0x78ce361680
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0xc] 0x78ce361700
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0xc] 0x78ce361780
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0xc] 0x78ce361800
	byte GeometryType;//[Offset: 0x8c, Size: 0x1] 0x78ce361880
	byte WindType;//[Offset: 0x8d, Size: 0x1] 0x78ce361900
	byte LODType;//[Offset: 0x8e, Size: 0x1] 0x78ce361980
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4] 0x78ce361a00
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x78ce361a80

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce361380
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce361400
	ExpressionInput Radius;//[Offset: 0x64, Size: 0xc] 0x78ce361480
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0xc] 0x78ce361500
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4] 0x78ce361580
	float HardnessPercent;//[Offset: 0x90, Size: 0x4] 0x78ce361600

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x3c, Size: 0xc] 0x78ce361280
	float ConstantDensity;//[Offset: 0x50, Size: 0x4] 0x78ce361300

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce361200

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78ce361180

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78ce361100

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78ce363000
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78ce363080
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78ce363100
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78ce363180

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78ce362e00
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce362e80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce362f00
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x78ce362f80

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStep.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x78ce362c00
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x78ce362c80
	float ConstY;//[Offset: 0x64, Size: 0x4] 0x78ce362d00
	float ConstX;//[Offset: 0x68, Size: 0x4] 0x78ce362d80

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x78ce362a00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x78ce362a80
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78ce362b00
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78ce362b80

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce362900
	float Period;//[Offset: 0x50, Size: 0x4] 0x78ce362980

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce362880

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput index;//[Offset: 0x3c, Size: 0xc] 0x78ce362680
	ExpressionInput Seed;//[Offset: 0x50, Size: 0xc] 0x78ce362700
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4] 0x78ce362780
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x8] 0x78ce362800

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4] 0x78ce362400
	float UTiling;//[Offset: 0x40, Size: 0x4] 0x78ce362480
	float VTiling;//[Offset: 0x44, Size: 0x4] 0x78ce362500
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce362580
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78ce362600

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0xc] 0x78ce362300
	byte Property;//[Offset: 0x50, Size: 0x1] 0x78ce362380

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1] 0x78ce362280

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0xc] 0x78ce362200

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78ce364180
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x78ce364200
	float Period;//[Offset: 0x3c, Size: 0x4] 0x78ce362180

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce364000
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x78ce364080
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x78ce364100

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce363e80
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x78ce363f00
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x78ce363f80

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce363e00

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x78ce363b80
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1] 0x78ce363c00
	int Quality;//[Offset: 0x54, Size: 0x4] 0x78ce363c80
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78ce363d00
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4] 0x78ce363d80

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x78ce363b00

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1] 0x78ce363a80

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object
	ExpressionInput NO;//[Offset: 0x3c, Size: 0xc] 0x78ce363980
	ExpressionInput Yes;//[Offset: 0x50, Size: 0xc] 0x78ce363a00

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput PhaseG;//[Offset: 0x3c, Size: 0xc] 0x78ce365180
	ExpressionInput PhaseG2;//[Offset: 0x50, Size: 0xc] 0x78ce365200
	ExpressionInput PhaseBlend;//[Offset: 0x64, Size: 0xc] 0x78ce365280
	ExpressionInput MultiScatteringContribution;//[Offset: 0x78, Size: 0xc] 0x78ce363200
	ExpressionInput MultiScatteringOcclusion;//[Offset: 0x8c, Size: 0xc] 0x78ce363280
	ExpressionInput MultiScatteringEccentricity;//[Offset: 0xa0, Size: 0xc] 0x78ce363300
	ExpressionInput ConservativeDensity;//[Offset: 0xb4, Size: 0xc] 0x78ce363380
	float ConstPhaseG;//[Offset: 0xc8, Size: 0x4] 0x78ce363400
	float ConstPhaseG2;//[Offset: 0xcc, Size: 0x4] 0x78ce363480
	float ConstPhaseBlend;//[Offset: 0xd0, Size: 0x4] 0x78ce363500
	bool PerSamplePhaseEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x78ce363580
	uint32 MultiScatteringApproximationOctaveCount;//[Offset: 0xd8, Size: 0x4] 0x78ce363600
	float ConstMultiScatteringContribution;//[Offset: 0xdc, Size: 0x4] 0x78ce363680
	float ConstMultiScatteringOcclusion;//[Offset: 0xe0, Size: 0x4] 0x78ce363700
	float ConstMultiScatteringEccentricity;//[Offset: 0xe4, Size: 0x4] 0x78ce363780
	bool bGroundContribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78ce363800
	bool bGrayScaleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x78ce363880
	bool bRayMarchVolumeShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1] 0x78ce363900

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1] 0x78ce365100

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8] 0x78ce364a00
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8] 0x78ce364a80
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10] 0x78ce9d2fe0
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10] 0x78ce9d3080
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0x10] 0x78ce9d3120
	FontParameterValue[] FontParameterValues;//[Offset: 0x80, Size: 0x10] 0x78ce9d31c0
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0x90, Size: 0x10] 0x78ce9d3260
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xa0, Size: 0x10] 0x78ce9d3300
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xb0, Size: 0x10] 0x78ce9d33a0

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x220, Size: 0x10] 0x78ce9d2f40

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x360, Size: 0x8] 0x78ce788980
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xb0aa2dc 0x78ce75a960
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xb0aa390 0x78ce75aa40
	float K2_GetScalarParameterValue(FName ParameterName);// 0xb0aa440 0x78ce75ab20

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x2c8, Size: 0x8] 0x78ce366700

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78ce366680

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	static void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0xb0b4728 0x78ce3429a0
	static void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0xb0b4994 0x78ce342a80
	static void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0xb0b47c0 0x78ce342b60

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10] 0x78ce9d2ae0
	FString LastError;//[Offset: 0x48, Size: 0x10] 0x78ce368200
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10] 0x78ce368280

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10] 0x78cf0c7a00
	FString DisplayName;//[Offset: 0x10, Size: 0x10] 0x78cf0c7a80
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10] 0x78cf0c7b00
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10] 0x78cf0c7b80

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10] 0x78ce9d29a0
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10] 0x78ce9d2a40

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc] 0x78cf0caa00
	Vector Right;//[Offset: 0x3c, Size: 0xc] 0x78cf0caa80

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4] 0x78cf0cad00
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4] 0x78cf0cad80
	float SnapRadius;//[Offset: 0xc, Size: 0x4] 0x78cf0cae00
	float SnapHeight;//[Offset: 0x10, Size: 0x4] 0x78cf0cae80
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4] 0x78cf0caf00
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cf0caf80
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x78cf0cb000
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x78cf0cb080
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x78cf0cb100
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x78cf0cb180
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x78cf0cb200
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x78cf0cb280
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x78cf0cb300
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x78cf0cb380
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x78cf0cb400
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x78cf0cb480
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1] 0x78cf0cb500
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1] 0x78cf0cb580
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1] 0x78cf0c9500
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1] 0x78cf0c9580
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1] 0x78cf0c9600
	byte Direction;//[Offset: 0x1c, Size: 0x1] 0x78cf0c9680
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x78cf0c9700
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x78cf0c9780
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1] 0x78cf0c9800
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1] 0x78cf0c9880
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1] 0x78cf0c9900
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1] 0x78cf0c9980
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1] 0x78cf0c9a00
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1] 0x78cf0c9a80
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1] 0x78cf0c9b00
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1] 0x78cf0c9b80
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8] 0x78cf085420

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0xc] 0x78cf0cab00
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc] 0x78cf0cab80
	Vector RightStart;//[Offset: 0x48, Size: 0xc] 0x78cf0cac00
	Vector RightEnd;//[Offset: 0x54, Size: 0xc] 0x78cf0cac80

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object
	static void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0xb0c3798 0x78ce3427e0
	static void MarkPropertyDirty(Object* Object, FName PropertyName);// 0xb0c38c8 0x78ce3428c0

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce367580
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78ce367600
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4] 0x78ce367680
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4] 0x78ce367700
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10] 0x78ce9d5240

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10] 0x78cf0cbd00
	FString Tooltip;//[Offset: 0x10, Size: 0x10] 0x78cf0cbd80

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x28, Size: 0x8] 0x78ce9d5060
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78ce369000
	Object*[] Objects;//[Offset: 0x38, Size: 0x10] 0x78ce9d5100
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10] 0x78ce9d51a0
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78ce369180
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78ce369200

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10] 0x78ce9d4fc0

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x265, Size: 0x1] 0x78ce368c80
	float DamagePerSec;//[Offset: 0x268, Size: 0x4] 0x78ce368d00
	class DamageType* DamageType;//[Offset: 0x270, Size: 0x8] 0x78ce9d4f20
	float PainInterval;//[Offset: 0x278, Size: 0x4] 0x78ce368d80
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1] 0x78ce368e00
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 0x1] 0x78ce368e80
	Controller* DamageInstigator;//[Offset: 0x280, Size: 0x8] 0x78ce368f00

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce369800

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x48] 0x78ce369700
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce369780

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x2c, Size: 0xc] 0x78ce369680

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8] 0x78ce369580
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30] 0x78ce369600

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8] 0x78ce36b580
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x30] 0x78ce369500

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x48] 0x78ce36b500

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x2c, Size: 0xc] 0x78ce36b300
	Vector EndPoint1;//[Offset: 0x38, Size: 0xc] 0x78ce36b380
	RawDistributionFloat Range;//[Offset: 0x48, Size: 0x30] 0x78ce36b400
	RawDistributionFloat Strength;//[Offset: 0x78, Size: 0x30] 0x78ce36b480

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78ce36ae80
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30] 0x78ce36af00
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce36af80
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30] 0x78ce36b000
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce36b080
	byte SelectionMethod;//[Offset: 0xa1, Size: 0x1] 0x78ce36b100
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x78ce36b180
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x78ce36b200
	int LastSelIndex;//[Offset: 0xa4, Size: 0x4] 0x78ce36b280

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x78ce36a800
	RawDistributionFloat Range;//[Offset: 0x78, Size: 0x30] 0x78ce36a880
	RawDistributionFloat Strength;//[Offset: 0xa8, Size: 0x30] 0x78ce36a900
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78ce36a980
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x78ce36aa00
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1] 0x78ce36aa80
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1] 0x78ce36ab00
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1] 0x78ce36ab80
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1] 0x78ce36ac00
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1] 0x78ce36ac80
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1] 0x78ce36ad00
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1] 0x78ce36ad80
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1] 0x78ce36ae00

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x2c, Size: 0xc] 0x78ce36a600
	float Radius;//[Offset: 0x38, Size: 0x4] 0x78ce36a680
	DistributionFloat* Strength;//[Offset: 0x40, Size: 0x8] 0x78ce36a700
	RawDistributionFloat StrengthRaw;//[Offset: 0x48, Size: 0x30] 0x78ce36a780

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1] 0x78ce36c300
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4] 0x78ce36c380
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x78ce36c400
	BeamModifierOptions TangentOptions;//[Offset: 0x78, Size: 0x4] 0x78ce36c480
	RawDistributionVector Tangent;//[Offset: 0x80, Size: 0x48] 0x78ce36c500
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x78ce36c580
	BeamModifierOptions StrengthOptions;//[Offset: 0xcc, Size: 0x4] 0x78ce36c600
	RawDistributionFloat Strength;//[Offset: 0xd0, Size: 0x30] 0x78ce36a580

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0cd600
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0cd680
	bool Block;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0cb600

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce36b900
	int Frequency;//[Offset: 0x2c, Size: 0x4] 0x78ce36b980
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4] 0x78ce36ba00
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x48] 0x78ce36ba80
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x80, Size: 0x30] 0x78ce36bb00
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce36bb80
	RawDistributionVector NoiseSpeed;//[Offset: 0xb8, Size: 0x48] 0x78ce36bc00
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x78ce36bc80
	float NoiseLockRadius;//[Offset: 0x104, Size: 0x4] 0x78ce36bd00
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78ce36bd80
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x78ce36be00
	float NoiseLockTime;//[Offset: 0x10c, Size: 0x4] 0x78ce36be80
	float NoiseTension;//[Offset: 0x110, Size: 0x4] 0x78ce36bf00
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1] 0x78ce36bf80
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x118, Size: 0x30] 0x78ce36c000
	int NoiseTessellation;//[Offset: 0x148, Size: 0x4] 0x78ce36c080
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x78ce36c100
	float FrequencyDistance;//[Offset: 0x150, Size: 0x4] 0x78ce36c180
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1] 0x78ce36c200
	RawDistributionFloat NoiseScale;//[Offset: 0x158, Size: 0x30] 0x78ce36c280

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x78ce36d500
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x78ce36d580
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78ce36d600
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x48] 0x78ce36d680
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce36b600
	byte SourceTangentMethod;//[Offset: 0x81, Size: 0x1] 0x78ce36b680
	RawDistributionVector SourceTangent;//[Offset: 0x88, Size: 0x48] 0x78ce36b700
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x78ce36b780
	RawDistributionFloat SourceStrength;//[Offset: 0xd8, Size: 0x30] 0x78ce36b800
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78ce36b880

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1] 0x78ce36cf80
	FName TargetName;//[Offset: 0x2c, Size: 0x8] 0x78ce36d000
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x48] 0x78ce36d080
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce36d100
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce36d180
	byte TargetTangentMethod;//[Offset: 0x81, Size: 0x1] 0x78ce36d200
	RawDistributionVector TargetTangent;//[Offset: 0x88, Size: 0x48] 0x78ce36d280
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x78ce36d300
	RawDistributionFloat TargetStrength;//[Offset: 0xd8, Size: 0x30] 0x78ce36d380
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78ce36d400
	float LockRadius;//[Offset: 0x10c, Size: 0x4] 0x78ce36d480

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30] 0x78ce36ce00
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78ce36ce80
	byte UpdateMethod;//[Offset: 0x61, Size: 0x1] 0x78ce36cf00

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x48] 0x78ce36e680
	RawDistributionVector DampingFactorRotation;//[Offset: 0x78, Size: 0x48] 0x78ce36e700
	RawDistributionFloat MaxCollisions;//[Offset: 0xc0, Size: 0x30] 0x78ce36c680
	byte CollisionCompletionOption;//[Offset: 0xf0, Size: 0x1] 0x78ce36c700
	byte[] CollisionTypes;//[Offset: 0xf8, Size: 0x10] 0x78ce9d4980
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x78ce36c800
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x78ce36c880
	RawDistributionFloat ParticleMass;//[Offset: 0x118, Size: 0x30] 0x78ce36c900
	float DirScalar;//[Offset: 0x148, Size: 0x4] 0x78ce36c980
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x78ce36ca00
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1] 0x78ce36ca80
	float VerticalFudgeFactor;//[Offset: 0x150, Size: 0x4] 0x78ce36cb00
	RawDistributionFloat DelayAmount;//[Offset: 0x158, Size: 0x30] 0x78ce36cb80
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x78ce36cc00
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1] 0x78ce36cc80
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x188, Size: 0x1] 0x78ce36cd00
	float MaxCollisionDistance;//[Offset: 0x18c, Size: 0x4] 0x78ce36cd80

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30] 0x78ce36e200
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30] 0x78ce36e280
	float Friction;//[Offset: 0x90, Size: 0x4] 0x78ce36e300
	float RandomSpread;//[Offset: 0x94, Size: 0x4] 0x78ce36e380
	float RandomDistribution;//[Offset: 0x98, Size: 0x4] 0x78ce36e400
	float RadiusScale;//[Offset: 0x9c, Size: 0x4] 0x78ce36e480
	float RadiusBias;//[Offset: 0xa0, Size: 0x4] 0x78ce36e500
	byte Response;//[Offset: 0xa4, Size: 0x1] 0x78ce36e580
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1] 0x78ce36e600

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x48] 0x78ce36e080
	RawDistributionFloat StartAlpha;//[Offset: 0x78, Size: 0x30] 0x78ce36e100
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce36e180

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0, Size: 0x20] 0x78ce36e000

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf0cb780
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0cb800
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78cf0cb880
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78cf0cb900
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78cf0cb980
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10] 0x78cf087b80

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x48] 0x78ce36de80
	RawDistributionFloat AlphaOverLife;//[Offset: 0x78, Size: 0x30] 0x78ce36df00
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce36df80

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x48] 0x78ce36dd00
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x78, Size: 0x30] 0x78ce36dd80
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce36de00

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78ce36db00

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30] 0x78ce36d780
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce36d800
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78ce36d880
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78ce36d900
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x48] 0x78ce36d980
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xb8, Size: 0x10] 0x78ce9d4840
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x78ce36da80

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x48] 0x78ce36f600
	RawDistributionVector UpperRightCorner;//[Offset: 0x78, Size: 0x48] 0x78ce36f680
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78ce36f700
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78ce36f780
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78ce36d700

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30] 0x78ce36f400
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78ce36f480
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78ce36f500
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78ce36f580

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat Lifetime;//[Offset: 0x30, Size: 0x30] 0x78ce36f380

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78ce36f300

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x78ce36ed00
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78ce36ed80
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x78ce36ee00
	float SpawnFraction;//[Offset: 0x30, Size: 0x4] 0x78ce36ee80
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x48] 0x78ce36ef00
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x80, Size: 0x30] 0x78ce36ef80
	RawDistributionFloat RadiusScale;//[Offset: 0xb0, Size: 0x30] 0x78ce36f000
	RawDistributionFloat LightExponent;//[Offset: 0xe0, Size: 0x30] 0x78ce36f080
	LightingChannels LightingChannels;//[Offset: 0x110, Size: 0x1] 0x78ce36f100
	float VolumetricScatteringIntensity;//[Offset: 0x114, Size: 0x4] 0x78ce36f180
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78ce36f200
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78ce36f280

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x120, Size: 0x20] 0x78ce36ec80

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector startLocation;//[Offset: 0x30, Size: 0x48] 0x78ce36eb00
	float DistributeOverNPoints;//[Offset: 0x78, Size: 0x4] 0x78ce36eb80
	float DistributeThreshold;//[Offset: 0x7c, Size: 0x4] 0x78ce36ec00

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78ce36ea80

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x78ce36fe00
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x78ce36fe80
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x38, Size: 0x10] 0x78ce9d47a0
	byte SelectionMethod;//[Offset: 0x48, Size: 0x1] 0x78ce36ff80
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x78ce36e780
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1] 0x78ce36e800
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49, Size: 0x1] 0x78ce36e880
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4] 0x78ce36e900
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8] 0x78ce36e980
	int NumPreSelectedIndices;//[Offset: 0x58, Size: 0x4] 0x78ce36ea00

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8] 0x78cf0cd080
	Vector Offset;//[Offset: 0x8, Size: 0xc] 0x78cf0cd100

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x48] 0x78ce36fc00
	RawDistributionVector LocationOffset;//[Offset: 0x78, Size: 0x48] 0x78ce36fc80
	RawDistributionVector ScaleFactor;//[Offset: 0xc0, Size: 0x48] 0x78ce36fd00
	RawDistributionVector Direction;//[Offset: 0x108, Size: 0x48] 0x78ce36fd80

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78ce36f900
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1] 0x78ce36f980
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1] 0x78ce36fa00
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4] 0x78ce36fa80
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78ce36fb00
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4] 0x78ce36fb80

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78ce36f880

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce370c80
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78ce370d00
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78ce370d80
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x78ce370e00
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x78ce370e80
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x78ce370f00
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x78ce370f80
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x78ce371000
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30] 0x78ce371080
	RawDistributionVector startLocation;//[Offset: 0x60, Size: 0x48] 0x78ce36f800

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce370a80
	RawDistributionFloat StartRadius;//[Offset: 0xb0, Size: 0x30] 0x78ce370b00
	RawDistributionFloat StartHeight;//[Offset: 0xe0, Size: 0x30] 0x78ce370b80
	byte HeightAxis;//[Offset: 0x110, Size: 0x1] 0x78ce370c00

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x118, Size: 0x20] 0x78ce370a00

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xa8, Size: 0x30] 0x78ce370980

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xd8, Size: 0x20] 0x78ce370900

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x48] 0x78ce370700
	RawDistributionFloat Height;//[Offset: 0x78, Size: 0x30] 0x78ce370780
	RawDistributionFloat Angle;//[Offset: 0xa8, Size: 0x30] 0x78ce370800
	RawDistributionFloat Thickness;//[Offset: 0xd8, Size: 0x30] 0x78ce370880

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x78ce372000
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x78ce372080
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce372100
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78ce370080
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78ce370100
	float InheritVelocityScale;//[Offset: 0x3c, Size: 0x4] 0x78ce370180
	FName SkelMeshActorParamName;//[Offset: 0x40, Size: 0x8] 0x78ce370200
	FName[] ValidAssociatedBones;//[Offset: 0x48, Size: 0x10] 0x78ce9d4660
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78ce370300
	Vector NormalToCompare;//[Offset: 0x5c, Size: 0xc] 0x78ce370380
	float NormalCheckToleranceDegrees;//[Offset: 0x68, Size: 0x4] 0x78ce370400
	float NormalCheckTolerance;//[Offset: 0x6c, Size: 0x4] 0x78ce370480
	int[] ValidMaterialIndices;//[Offset: 0x70, Size: 0x10] 0x78ce9d4700
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce370580
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce370600
	uint32 InheritUVChannel;//[Offset: 0x84, Size: 0x4] 0x78ce370680

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78ce371f80

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10] 0x78ce9d45c0

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x48] 0x78ce371e00
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce371e80

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78ce371d80

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x48] 0x78ce371d00

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x78ce371c80

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x78ce371c00

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x48] 0x78ce371b00
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce371b80

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1] 0x78ce371680

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10] 0x78ce9d4520
	int UpdateFlags;//[Offset: 0x40, Size: 0x4] 0x78ce371580
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78ce371600

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78cf0ccc00
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0ccc80
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78cf0ccd00
	byte ValueMethod;//[Offset: 0x9, Size: 0x1] 0x78cf0ccd80
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x78cf0cce00
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30] 0x78cf0cce80

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20] 0x78ce371480

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x2c, Size: 0x8] 0x78ce371400

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30] 0x78ce373f00

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78ce373e80

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30] 0x78ce373d80
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78ce373e00

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30] 0x78ce373d00

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78ce373c80

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30] 0x78ce373c00

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x48] 0x78ce373b80

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x78ce373b00

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x78ce373900
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce373980
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78ce373a00
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78ce373a80

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x48] 0x78ce373700
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce373780
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78ce373800
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78ce373880

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x2c, Size: 0x8] 0x78ce373600
	Vector2D MaxScale;//[Offset: 0x34, Size: 0x8] 0x78ce373680

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x48] 0x78ce373580

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x2c, Size: 0x4] 0x78ce374e80
	float MovementTolerance;//[Offset: 0x30, Size: 0x4] 0x78ce374f00
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x38, Size: 0x30] 0x78ce374f80
	float MaxFrameDistance;//[Offset: 0x68, Size: 0x4] 0x78ce375000
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78ce375080
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x78ce375100
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x78ce375180
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x78ce375200

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8] 0x78ce374d00
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30] 0x78ce374d80
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce374e00

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8] 0x78ce3b1c80
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4] 0x78ce3b1d00
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4] 0x78ce3b1d80
	byte BoundingMode;//[Offset: 0x38, Size: 0x1] 0x78ce3b1e00
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1] 0x78ce3b1e80
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4] 0x78ce3b1f00

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78ce374b80
	RawDistributionFloat FrameRate;//[Offset: 0x70, Size: 0x30] 0x78ce374c00
	int StartingFrame;//[Offset: 0xa0, Size: 0x4] 0x78ce374c80

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x78ce374780
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x78ce374800
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30] 0x78ce374880
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce374900
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4] 0x78ce374980
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10] 0x78ce9d4200
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1] 0x78ce374a80
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x78ce374b00

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce374400
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78ce374480
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78ce374500
	float TilingDistance;//[Offset: 0x2c, Size: 0x4] 0x78ce374580
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4] 0x78ce374600
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4] 0x78ce374680
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4] 0x78ce374700

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1] 0x78ce375c00
	int TextureTile;//[Offset: 0x2c, Size: 0x4] 0x78ce375c80
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4] 0x78ce375d00
	int Sheets;//[Offset: 0x34, Size: 0x4] 0x78ce375d80
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4] 0x78ce375e00
	float Speed;//[Offset: 0x3c, Size: 0x4] 0x78ce375e80
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4] 0x78ce375f00
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78ce375f80
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4] 0x78ce376000
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8] 0x78ce376080
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30] 0x78ce376100
	byte TaperMethod;//[Offset: 0x88, Size: 0x1] 0x78ce376180
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30] 0x78ce376200
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30] 0x78ce376280
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x78ce376300
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x78ce374280
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x78ce374300
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x78ce374380

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x270] 0x78ce375a00
	GPUSpriteResourceData ResourceData;//[Offset: 0x2a0, Size: 0x160] 0x78ce375a80
	float CameraMotionBlurAmount;//[Offset: 0x400, Size: 0x4] 0x78ce375b00
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 0x1] 0x78ce375b80

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8] 0x78cf0cfd00
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8] 0x78cf0cfd80
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8] 0x78cf0cfe00
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10] 0x78cf087860
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0x70] 0x78cf0cec80
	FloatDistribution VectorFieldScale;//[Offset: 0xa0, Size: 0x20] 0x78cf0ced00
	FloatDistribution DragCoefficient;//[Offset: 0xc0, Size: 0x20] 0x78cf0ced80
	FloatDistribution PointAttractorStrength;//[Offset: 0xe0, Size: 0x20] 0x78cf0cee00
	FloatDistribution Resilience;//[Offset: 0x100, Size: 0x20] 0x78cf0cee80
	Vector ConstantAcceleration;//[Offset: 0x120, Size: 0xc] 0x78cf0cef00
	Vector PointAttractorPosition;//[Offset: 0x12c, Size: 0xc] 0x78cf0cef80
	float PointAttractorRadiusSq;//[Offset: 0x138, Size: 0x4] 0x78cf0cf000
	Vector OrbitOffsetBase;//[Offset: 0x13c, Size: 0xc] 0x78cf0cf080
	Vector OrbitOffsetRange;//[Offset: 0x148, Size: 0xc] 0x78cf0cf100
	Vector2D InvMaxSize;//[Offset: 0x154, Size: 0x8] 0x78cf0cf180
	float InvRotationRateScale;//[Offset: 0x15c, Size: 0x4] 0x78cf0cf200
	float MaxLifetime;//[Offset: 0x160, Size: 0x4] 0x78cf0cf280
	int MaxParticleCount;//[Offset: 0x164, Size: 0x4] 0x78cf0cf300
	byte ScreenAlignment;//[Offset: 0x168, Size: 0x1] 0x78cf0cf380
	byte LockAxisFlag;//[Offset: 0x169, Size: 0x1] 0x78cf0cf400
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16a, Size: 0x1] 0x78cf0cf480
	byte CollisionMode;//[Offset: 0x16b, Size: 0x1] 0x78cf0cf500
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1] 0x78cf0cf580
	float MinFacingCameraBlendDistance;//[Offset: 0x170, Size: 0x4] 0x78cf0cf600
	float MaxFacingCameraBlendDistance;//[Offset: 0x174, Size: 0x4] 0x78cf0cf680
	RawDistributionVector DynamicColor;//[Offset: 0x178, Size: 0x48] 0x78cf0cf700
	RawDistributionFloat DynamicAlpha;//[Offset: 0x1c0, Size: 0x30] 0x78cf0cf780
	RawDistributionVector DynamicColorScale;//[Offset: 0x1f0, Size: 0x48] 0x78cf0cd700
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x238, Size: 0x30] 0x78cf0cd780

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8] 0x78cf0cff00
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78cf0cff80
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc] 0x78cf0ce780
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc] 0x78cf0ce800
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc] 0x78cf0ce880
	float Intensity;//[Offset: 0x64, Size: 0x4] 0x78cf0ce900
	float Tightness;//[Offset: 0x68, Size: 0x4] 0x78cf0ce980
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78cf0cea00
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x78cf0cea80
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x78cf0ceb00
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x78cf0ceb80
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1] 0x78cf0cec00

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x1c] 0x78ce3b5400
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x78ce3b5480

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x78cf504680

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10] 0x78cf087900
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10] 0x78cf0879a0
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10] 0x78cf087a40
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10] 0x78cf0cd980
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10] 0x78cf0cda00
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10] 0x78cf0cda80
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10] 0x78cf0cdb00
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10] 0x78cf0cdb80
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10] 0x78cf0cdc00
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10] 0x78cf0cdc80
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10] 0x78cf0cdd00
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc] 0x78cf0cdd80
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc] 0x78cf0cde00
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc] 0x78cf0cde80
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc] 0x78cf0cdf00
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc] 0x78cf0cdf80
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc] 0x78cf0ce000
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc] 0x78cf0ce080
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4] 0x78cf0ce100
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4] 0x78cf0ce180
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4] 0x78cf0ce200
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4] 0x78cf0ce280
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4] 0x78cf0ce300
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4] 0x78cf0ce380
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4] 0x78cf0ce400
	float ResilienceBias;//[Offset: 0x120, Size: 0x4] 0x78cf0ce480
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4] 0x78cf0ce500
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4] 0x78cf0ce580
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4] 0x78cf0ce600
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4] 0x78cf0ce680
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4] 0x78cf0ce700
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4] 0x78cf0cc680
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4] 0x78cf0cc700
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4] 0x78cf0cc780
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1] 0x78cf0cc800
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1] 0x78cf0cc880
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8] 0x78cf0cc900
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78cf0cc980
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4] 0x78cf0cca00
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4] 0x78cf0cca80

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8] 0x78ce377280
	float LODSizeScale;//[Offset: 0x40, Size: 0x4] 0x78ce377300
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78ce377380
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x78ce375300
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x78ce375380
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1] 0x78ce375400
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1] 0x78ce375480
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1] 0x78ce375500
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1] 0x78ce375580
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x48] 0x78ce375600
	byte AxisLockOption;//[Offset: 0x90, Size: 0x1] 0x78ce375680
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x78ce375700
	byte CameraFacingUpAxisOption;//[Offset: 0x92, Size: 0x1] 0x78ce375780
	byte CameraFacingOption;//[Offset: 0x93, Size: 0x1] 0x78ce375800
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x78ce375880
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x78ce375900
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x78ce375980

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4] 0x78ce376880
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4] 0x78ce376900
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4] 0x78ce376980
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4] 0x78ce376a00
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78ce376a80
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78ce376b00
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78ce376b80
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78ce376c00
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78ce376c80
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78ce376d00
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1] 0x78ce376d80
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4] 0x78ce376e00
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78ce376e80
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x78ce376f00
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x78ce376f80
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x78ce377000
	float TilingDistance;//[Offset: 0x48, Size: 0x4] 0x78ce377080
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4] 0x78ce377100
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce377180
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4] 0x78ce377200

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce376700
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4] 0x78ce376780
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4] 0x78ce376800

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8] 0x78ce378280
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0xc] 0x78ce378300
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x78ce378380
	Vector RelativeScale3D;//[Offset: 0x50, Size: 0xc] 0x78ce378400
	float Intensity;//[Offset: 0x5c, Size: 0x4] 0x78ce376380
	float Tightness;//[Offset: 0x60, Size: 0x4] 0x78ce376400
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x78ce376480
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1] 0x78ce376500
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1] 0x78ce376580
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1] 0x78ce376600
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1] 0x78ce376680

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x2c, Size: 0xc] 0x78ce378180
	Vector MaxInitialRotation;//[Offset: 0x38, Size: 0xc] 0x78ce378200

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x2c, Size: 0xc] 0x78ce378100

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8] 0x78ce378000
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30] 0x78ce378080

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8] 0x78ce377f00
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30] 0x78ce377f80

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78ce377e00
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78ce377e80

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x48] 0x78ce377d00
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x78, Size: 0x30] 0x78ce377d80

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xa8, Size: 0x20] 0x78ce377c80

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x30] 0x78ce377b00
	RawDistributionFloat Velocity;//[Offset: 0x60, Size: 0x30] 0x78ce377b80
	Vector Direction;//[Offset: 0x90, Size: 0xc] 0x78ce377c00

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x48] 0x78ce377a80

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x48] 0x78ce377980
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce377a00

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce37d100
	Vector LastRemoteNoisePosition;//[Offset: 0xb4, Size: 0xc] 0x78ce37d180
	float NoiseLifetime;//[Offset: 0xc0, Size: 0x4] 0x78ce37d200
	float LastRemoteNoiseVolume;//[Offset: 0xc4, Size: 0x4] 0x78ce37d280
	float LastRemoteNoiseTime;//[Offset: 0xc8, Size: 0x4] 0x78ce37d300
	float LastLocalNoiseVolume;//[Offset: 0xcc, Size: 0x4] 0x78ce37d380
	float LastLocalNoiseTime;//[Offset: 0xd0, Size: 0x4] 0x78ce37d400
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0xb100790 0x78ce344ae0

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xb0, Size: 0x4] 0x78ce37c980
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xb8, Size: 0x8] 0x78ce37ca00
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0xb101924 0x78ce3445a0
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0xb101c30 0x78ce344680
	Transform GetBodyTargetTransform(FName BodyName);// 0xb1016d8 0x78ce344760
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0xb1019cc 0x78ce344840
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0xb101b24 0x78ce344920
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0xb101798 0x78ce344a00

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x220, Size: 0x8] 0x78ce37e080
	Actor* ConstraintActor1;//[Offset: 0x228, Size: 0x8] 0x78ce37e100
	Actor* ConstraintActor2;//[Offset: 0x230, Size: 0x8] 0x78ce37e180
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1] 0x78ce37e200

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x1f8, Size: 0x8] 0x78ce381000
	ConstrainComponentPropName ComponentName1;//[Offset: 0x200, Size: 0x8] 0x78ce381080
	Actor* ConstraintActor2;//[Offset: 0x208, Size: 0x8] 0x78ce37f800
	ConstrainComponentPropName ComponentName2;//[Offset: 0x210, Size: 0x8] 0x78ce37f880
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x228, Size: 0x8] 0x78ce37f900
	delegate OnConstraintBroken;//[Offset: 0x230, Size: 0x10] 0x78ce37f980
	ConstraintInstance ConstraintInstance;//[Offset: 0x240, Size: 0x1c0] 0x78ce37fa00
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xb104efc 0x78ce3461a0
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0xb104e4c 0x78ce346280
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0xb1042f0 0x78ce346360
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0xb1043e4 0x78ce346440
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0xb1044d8 0x78ce346520
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0xb1049a4 0x78ce346600
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xb1050ec 0x78ce3466e0
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0xb104a54 0x78ce3467c0
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xb105234 0x78ce3468a0
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xb104868 0x78ce346980
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0xb103f24 0x78ce346a60
	void SetDisableCollision(bool bDisableCollision);// 0xb103990 0x78ce346b40
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0xb103b84 0x78ce346c20
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0xb103a40 0x78ce346d00
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0xb103c7c 0x78ce346de0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0xb105390 0x78ce346ec0
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0xb104708 0x78ce346fa0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xb104c5c 0x78ce347080
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0xb104bac 0x78ce347160
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xb104d54 0x78ce347240
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0xb104014 0x78ce347320
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0xb104108 0x78ce343a40
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0xb1041fc 0x78ce343b20
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0xb1047b8 0x78ce343c00
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xb104ff4 0x78ce343ce0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xb1045cc 0x78ce343dc0
	void SetAngularDriveMode(byte DriveMode);// 0xb104b04 0x78ce343ea0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0xb103e34 0x78ce343f80
	bool IsBroken();// 0xb10385c 0x78ce344060
	float GetCurrentTwist();// 0xb103e00 0x78ce344140
	float GetCurrentSwing2();// 0xb103d98 0x78ce344220
	float GetCurrentSwing1();// 0xb103dcc 0x78ce344300
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0xb103894 0x78ce3443e0
	void BreakConstraint();// 0xb10537c 0x78ce3444c0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x78cf0a6080

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb0, Size: 0x8] 0x78ce381f80
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78ce382000
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78ce382080
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x78ce382100
	float LinearDamping;//[Offset: 0xc4, Size: 0x4] 0x78ce380080
	float LinearStiffness;//[Offset: 0xc8, Size: 0x4] 0x78ce380100
	float AngularDamping;//[Offset: 0xcc, Size: 0x4] 0x78ce380180
	float AngularStiffness;//[Offset: 0xd0, Size: 0x4] 0x78ce380200
	float InterpolationSpeed;//[Offset: 0x140, Size: 0x4] 0x78ce380280
	void SetTargetRotation(Rotator NewRotation);// 0xb109ed4 0x78ce348f20
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0xb109de4 0x78ce349000
	void SetTargetLocation(Vector NewLocation);// 0xb109f7c 0x78ce345720
	void SetLinearStiffness(float NewLinearStiffness);// 0xb109b98 0x78ce345800
	void SetLinearDamping(float NewLinearDamping);// 0xb109c40 0x78ce3458e0
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0xb1099a0 0x78ce3459c0
	void SetAngularStiffness(float NewAngularStiffness);// 0xb109a48 0x78ce345aa0
	void SetAngularDamping(float NewAngularDamping);// 0xb109af0 0x78ce345b80
	void ReleaseComponent();// 0xb10a058 0x78ce345c60
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0xb10a074 0x78ce345d40
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0xb10a1f4 0x78ce345e20
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0xb10a32c 0x78ce345f00
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0xb109ce8 0x78ce345fe0
	PrimitiveComponent* GetGrabbedComponent();// 0xb10a024 0x78ce3460c0

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x1f4, Size: 0x4] 0x78ce382f00
	float SpringDamping;//[Offset: 0x1f8, Size: 0x4] 0x78ce382f80
	float SpringLengthAtRest;//[Offset: 0x1fc, Size: 0x4] 0x78ce383000
	float SpringRadius;//[Offset: 0x200, Size: 0x4] 0x78ce383080
	byte SpringChannel;//[Offset: 0x204, Size: 0x1] 0x78ce383100
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 0x1] 0x78ce383180
	float SpringCompression;//[Offset: 0x208, Size: 0x4] 0x78ce381100
	Vector GetSpringRestingPoint();// 0xb10b760 0x78ce348ba0
	Vector GetSpringDirection();// 0xb10b6f0 0x78ce348c80
	Vector GetSpringCurrentEndPoint();// 0xb10b728 0x78ce348d60
	float GetNormalizedCompressionScalar();// 0xb10b798 0x78ce348e40

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x220, Size: 0x8] 0x78ce382e80

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x1f4, Size: 0x4] 0x78ce382e00

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x220, Size: 0x8] 0x78ce382d00
	SceneComponent* SceneComponent;//[Offset: 0x228, Size: 0x8] 0x78ce382d80

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x230, Size: 0x8] 0x78ce382b80
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78ce382c00
	void OnInterpToggle(bool bEnable);// 0xb10c790 0x78ce348ac0

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2a8, Size: 0x8] 0x78ce383900
	float NormalDistortionStrength;//[Offset: 0x2b0, Size: 0x4] 0x78ce383980
	float PrefilterRoughness;//[Offset: 0x2b4, Size: 0x4] 0x78ce383a00
	float PrefilterRoughnessDistance;//[Offset: 0x2b8, Size: 0x4] 0x78ce383a80
	int ScreenPercentage;//[Offset: 0x2bc, Size: 0x4] 0x78ce383b00
	float ExtraFOV;//[Offset: 0x2c0, Size: 0x4] 0x78ce383b80
	float DistanceFromPlaneFadeStart;//[Offset: 0x2c4, Size: 0x4] 0x78ce383c00
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2c8, Size: 0x4] 0x78ce383c80
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2cc, Size: 0x4] 0x78ce383d00
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2d0, Size: 0x4] 0x78ce383d80
	float AngleFromPlaneFadeStart;//[Offset: 0x2d4, Size: 0x4] 0x78ce383e00
	float AngleFromPlaneFadeEnd;//[Offset: 0x2d8, Size: 0x4] 0x78ce383e80
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78ce383f00
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1] 0x78ce383f80

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x1f1, Size: 0x1] 0x78ce9d5920
	byte CaptureSource;//[Offset: 0x1f2, Size: 0x1] 0x78ce384080
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1] 0x78ce384100
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 0x1] 0x78ce384180
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1] 0x78ce384200
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x1f8, Size: 0x10] 0x78ce9d59c0
	Actor*[] HiddenActors;//[Offset: 0x208, Size: 0x10] 0x78ce9d5a60
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x218, Size: 0x10] 0x78ce9d5b00
	Actor*[] ShowOnlyActors;//[Offset: 0x228, Size: 0x10] 0x78ce9d5ba0
	float LODDistanceFactor;//[Offset: 0x238, Size: 0x4] 0x78ce382380
	float MaxViewDistanceOverride;//[Offset: 0x23c, Size: 0x4] 0x78ce382400
	int CaptureSortPriority;//[Offset: 0x240, Size: 0x4] 0x78ce382480
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1] 0x78ce382500
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x248, Size: 0x10] 0x78ce9d5c40
	FString ProfilingEventName;//[Offset: 0x288, Size: 0x10] 0x78ce382600
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0xb153964 0x78ce3482e0
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xb153868 0x78ce3483c0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0xb1535f4 0x78ce3484a0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0xb1537c0 0x78ce348580
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xb1536c4 0x78ce348660
	void HideComponent(PrimitiveComponent* InComponent);// 0xb153b08 0x78ce348740
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xb153a0c 0x78ce348820
	void ClearShowOnlyComponents();// 0xb1536b0 0x78ce348900
	void ClearHiddenComponents();// 0xb15369c 0x78ce3489e0

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10] 0x78cf0d6500
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf0d6580

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x270, Size: 0x4] 0x78ce383780
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x278, Size: 0x8] 0x78ce383800
	BoxComponent* PreviewCaptureBox;//[Offset: 0x280, Size: 0x8] 0x78ce383880

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb0, Size: 0x10] 0x78cf50f280
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc0, Size: 0x10] 0x78cf50f300
	bool SupportsConvertibleLaptops();// 0xb10d894 0x78cf525640
	void PlatformEventDelegate__DelegateSignature();// 0x8a873f8 0x78cf521d60
	bool IsInTabletMode();// 0xb10d8cc 0x78cf521e40
	bool IsInLaptopMode();// 0xb10d904 0x78cf521f20

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10] 0x78ce383200
	int ResponseCode;//[Offset: 0x38, Size: 0x4] 0x78ce383280
	int Tag;//[Offset: 0x3c, Size: 0x4] 0x78ce383300
	FString StringResponse;//[Offset: 0x40, Size: 0x10] 0x78ce383380
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10] 0x78ce9d5880
	int GetNumHeaders();// 0xb10e8ac 0x78ce348040
	FString GetHeaderValue(FString HeaderName);// 0xb10e638 0x78ce348120
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0xb10e73c 0x78ce348200

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x244, Size: 0x8] 0x78ce387c80

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x230, Size: 0x8] 0x78ce387b00
	void SetRadius(float NewRadius);// 0xb126da0 0x78ce349620
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0xb126cf8 0x78ce349700

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0xb1287f8 0x78ce34c3a0
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0xb128444 0x78ce34c480
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0xb128580 0x78ce34c560
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0xb1286bc 0x78ce34c640
	void ResetBoneTransformByName(FName BoneName);// 0xb127f90 0x78ce34c720
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0xb128338 0x78ce34c800
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0xb128038 0x78ce34c8e0
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0xb128138 0x78ce34c9c0
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0xb128238 0x78ce3490e0
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0xb127ee8 0x78ce3491c0

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x90] 0x78ce388880
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78ce388900
	int BasePoseIndex;//[Offset: 0x114, Size: 0x4] 0x78ce388980
	FName RetargetSource;//[Offset: 0x118, Size: 0x8] 0x78ce388a00

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10] 0x78cf087180
	FName[] Tracks;//[Offset: 0x10, Size: 0x10] 0x78cf087220
	<FName,int> TrackMap;//[Offset: 0x20, Size: 0x50] 0x78cf0b9700
	PoseData[] Poses;//[Offset: 0x70, Size: 0x10] 0x78cf087400
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 0x10] 0x78cf0874a0

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10] 0x78cf0872c0
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 0x50] 0x78cf0b97c0
	float[] CurveData;//[Offset: 0x60, Size: 0x10] 0x78cf087360

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x28, Size: 0x8] 0x78ce388780
	Color PoseWatchColour;//[Offset: 0x30, Size: 0x4] 0x78ce388800

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 0x550] 0x78ce38a480
	float Priority;//[Offset: 0x750, Size: 0x4] 0x78ce38a500
	float BlendRadius;//[Offset: 0x754, Size: 0x4] 0x78ce388480
	float BlendWeight;//[Offset: 0x758, Size: 0x4] 0x78ce388500
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75c, Size: 0x1] 0x78ce388580
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75c, Size: 0x1] 0x78ce388600
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xb129b34 0x78ce34c2c0

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x260, Size: 0x550] 0x78ce38a080
	float Priority;//[Offset: 0x7b0, Size: 0x4] 0x78ce38a100
	float BlendRadius;//[Offset: 0x7b4, Size: 0x4] 0x78ce38a180
	float BlendWeight;//[Offset: 0x7b8, Size: 0x4] 0x78ce38a200
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7bc, Size: 0x1] 0x78ce38a280
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7bc, Size: 0x1] 0x78ce38a300
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xb12a18c 0x78ce34c1e0

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x258, Size: 0x10] 0x78ce9d7180
	Actor*[] OverrideInvisibleActors;//[Offset: 0x268, Size: 0x10] 0x78ce9d7220
	FName[] OverrideInvisibleLevels;//[Offset: 0x278, Size: 0x10] 0x78ce9d72c0

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x78ce389e00
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10] 0x78ce9d70e0

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28] 0x78cf0d2800

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0xc] 0x78ce389b80
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78ce389c00
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78ce389c80
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10] 0x78ce9d6f00
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10] 0x78ce9d7040
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8] 0x78ce389d80

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8] 0x78cf0a6280

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4] 0x78cf531e80
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4] 0x78cf531f00
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x78cf531f80
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1] 0x78cf532000
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1] 0x78cf532080
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1] 0x78cf532100
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1] 0x78cf530080
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1] 0x78cf530100
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1] 0x78cf530180
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1] 0x78cf530200
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x78cf530280
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1] 0x78cf530300
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1] 0x78cf530380
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1] 0x78cf530400
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4] 0x78cf530480
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc] 0x78cf530500
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4] 0x78cf530580
	float Buoyancy;//[Offset: 0x10c, Size: 0x4] 0x78cf530600
	float Bounciness;//[Offset: 0x110, Size: 0x4] 0x78cf530680
	float Friction;//[Offset: 0x114, Size: 0x4] 0x78cf530700
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4] 0x78cf530780
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4] 0x78cf530800
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10] 0x78cf530880
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10] 0x78cf530900
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4] 0x78cf530980
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8] 0x78cf530a00
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4] 0x78cf530a80
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4] 0x78cf530b00
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4] 0x78cf530b80
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4] 0x78cf530c00
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4] 0x78cf530c80
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4] 0x78cf530d00
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4] 0x78cf530d80
	void StopSimulating(out const HitResult HitResult);// 0xb13c394 0x78cf523dc0
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xb13c46c 0x78cf523ea0
	void SetInterpolatedComponent(SceneComponent* Component);// 0xb13c2e4 0x78cf523f80
	void ResetInterpolation();// 0xb13c1c4 0x78cf524060
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x8a873f8 0x78cf524140
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x8a873f8 0x78cf524220
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xb13c1e0 0x78cf524300
	Vector LimitVelocity(Vector NewVelocity);// 0xb13c0e4 0x78cf5243e0
	bool IsVelocityUnderSimulationThreshold();// 0xb13c51c 0x78cf5244c0
	bool IsInterpolationComplete();// 0xb13c198 0x78cf5245a0

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78ce389b00

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x220, Size: 0x8] 0x78ce389a80
	void ToggleForce();// 0xb13dcc4 0x78ce34be60
	void FireImpulse();// 0xb13dd18 0x78ce34bf40
	void EnableForce();// 0xb13dcfc 0x78ce34c020
	void DisableForce();// 0xb13dce0 0x78ce34c100

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x1f4, Size: 0x4] 0x78ce389580
	byte Falloff;//[Offset: 0x1f8, Size: 0x1] 0x78ce389600
	float ImpulseStrength;//[Offset: 0x1fc, Size: 0x4] 0x78ce389680
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x78ce389700
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x78ce389780
	float ForceStrength;//[Offset: 0x204, Size: 0x4] 0x78ce389800
	float DestructibleDamage;//[Offset: 0x208, Size: 0x4] 0x78ce389880
	byte[] ObjectTypesToAffect;//[Offset: 0x210, Size: 0x10] 0x78ce9d6e60
	void RemoveObjectTypeToAffect(byte ObjectType);// 0xb13e374 0x78ce34bbc0
	void FireImpulse();// 0xb13e4d4 0x78ce34bca0
	void AddObjectTypeToAffect(byte ObjectType);// 0xb13e424 0x78ce34bd80

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x230, Size: 0x8] 0x78ce389500

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x330, Size: 0x4] 0x78ce38b100
	float SourceHeight;//[Offset: 0x334, Size: 0x4] 0x78ce38b180
	float BarnDoorAngle;//[Offset: 0x338, Size: 0x4] 0x78ce38b200
	float BarnDoorLength;//[Offset: 0x33c, Size: 0x4] 0x78ce38b280
	Texture* SourceTexture;//[Offset: 0x340, Size: 0x8] 0x78ce38b300
	void SetSourceWidth(float bNewValue);// 0xb13f324 0x78ce34b760
	void SetSourceTexture(Texture* bNewValue);// 0xb13f3cc 0x78ce34b840
	void SetSourceHeight(float NewValue);// 0xb13f27c 0x78ce34b920
	void SetBarnDoorLength(float NewValue);// 0xb13f12c 0x78ce34ba00
	void SetBarnDoorAngle(float NewValue);// 0xb13f1d4 0x78ce34bae0

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce38db00
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4] 0x78ce38db80
	byte MobileMSAASampleCount;//[Offset: 0x40, Size: 0x1] 0x78ce38dc00
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78ce38dc80
	bool bMobileAllowSoftwareOcclusionCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x78ce38dd00
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1] 0x78ce38dd80
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1] 0x78ce38de00
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1] 0x78ce38de80
	float MinScreenRadiusForLights;//[Offset: 0x44, Size: 0x4] 0x78ce38df00
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x48, Size: 0x4] 0x78ce38df80
	float MinScreenRadiusForCSMdepth;//[Offset: 0x4c, Size: 0x4] 0x78ce38e000
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78ce38e080
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78ce38e100
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x78ce38e180
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x78ce38e200
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x50, Size: 0x1] 0x78ce38e280
	uint32 VirtualTextureTileSize;//[Offset: 0x54, Size: 0x4] 0x78ce38e300
	uint32 VirtualTextureTileBorderSize;//[Offset: 0x58, Size: 0x4] 0x78ce38e380
	uint32 VirtualTextureFeedbackFactor;//[Offset: 0x5c, Size: 0x4] 0x78ce38e400
	bool bVirtualTextureEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78ce38e480
	bool bVirtualTextureEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78ce38e500
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78ce38e580
	int ReflectionCaptureResolution;//[Offset: 0x64, Size: 0x4] 0x78ce38e600
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce38e680
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78ce38e700
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78ce38c680
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78ce38c700
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78ce38c780
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78ce38c800
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78ce38c880
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x78ce38c900
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78ce38c980
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x78ce38ca00
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x6c, Size: 0x4] 0x78ce38ca80
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78ce38cb00
	byte TranslucentSortPolicy;//[Offset: 0x71, Size: 0x1] 0x78ce38cb80
	Vector TranslucentSortAxis;//[Offset: 0x74, Size: 0xc] 0x78ce38cc00
	byte CustomDepthStencil;//[Offset: 0x80, Size: 0x1] 0x78ce38cc80
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x78ce38cd00
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0x82, Size: 0x1] 0x78ce38cd80
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1] 0x78ce38ce00
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1] 0x78ce38ce80
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1] 0x78ce38cf00
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83, Size: 0x1] 0x78ce38cf80
	byte DefaultFeatureAutoExposure;//[Offset: 0x84, Size: 0x1] 0x78ce38d000
	float DefaultFeatureAutoExposureBias;//[Offset: 0x88, Size: 0x4] 0x78ce38d080
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78ce38d100
	bool bUsePreExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78ce38d180
	bool bEnablePreExposureOnlyInTheEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1] 0x78ce38d200
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1] 0x78ce38d280
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c, Size: 0x1] 0x78ce38d300
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1] 0x78ce38d380
	bool bSSGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c, Size: 0x1] 0x78ce38d400
	byte DefaultFeatureAntiAliasing;//[Offset: 0x8d, Size: 0x1] 0x78ce38d480
	enum DefaultLightUnits;//[Offset: 0x8e, Size: 0x1] 0x78ce9d6d20
	byte DefaultBackBufferPixelFormat;//[Offset: 0x8f, Size: 0x1] 0x78ce38d580
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78ce38d600
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x78ce38d680
	byte EarlyZPass;//[Offset: 0x91, Size: 0x1] 0x78ce38b600
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1] 0x78ce38b680
	bool bEnableCSMCaching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1] 0x78ce38b700
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x92, Size: 0x1] 0x78ce38b780
	byte ClearSceneMethod;//[Offset: 0x93, Size: 0x1] 0x78ce38b800
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x78ce38b880
	bool bVertexDeformationOutputsVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x78ce38b900
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x78ce38b980
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1] 0x78ce38ba00
	int GPUSimulationTextureSizeX;//[Offset: 0x98, Size: 0x4] 0x78ce38ba80
	int GPUSimulationTextureSizeY;//[Offset: 0x9c, Size: 0x4] 0x78ce38bb00
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce38bb80
	byte GBufferFormat;//[Offset: 0xa1, Size: 0x1] 0x78ce38bc00
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x78ce38bc80
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x78ce38bd00
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa2, Size: 0x1] 0x78ce38bd80
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa2, Size: 0x1] 0x78ce38be00
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa2, Size: 0x1] 0x78ce38be80
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa2, Size: 0x1] 0x78ce38bf00
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa2, Size: 0x1] 0x78ce38bf80
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa2, Size: 0x1] 0x78ce38c000
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3, Size: 0x1] 0x78ce38c080
	float WireframeCullThreshold;//[Offset: 0xa4, Size: 0x4] 0x78ce38c100
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce38c180
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x78ce38c200
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1] 0x78ce38c280
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1] 0x78ce38c300
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1] 0x78ce38c380
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1] 0x78ce38c400
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1] 0x78ce38c480
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1] 0x78ce38c500
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x78ce38c580
	enum DefaultSkinCacheBehavior;//[Offset: 0xaa, Size: 0x1] 0x78ce9d6dc0
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xac, Size: 0x4] 0x78ce38a580
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce38a600
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78ce38a680
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78ce38a700
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78ce38a780
	uint32 MobileNumDynamicPointLights;//[Offset: 0xb4, Size: 0x4] 0x78ce38a800
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x78ce38a880
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x78ce38a900
	bool bMobileAllowMovableSpotlightShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x78ce38a980
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x78ce38aa00
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x78ce38aa80
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x78ce38ab00
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x78ce38ab80
	bool bLPV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 0x1] 0x78ce38ac00
	bool bMobileAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 0x1] 0x78ce38ac80
	bool bUseUnlimitedBoneInfluences;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb9, Size: 0x1] 0x78ce38ad00
	int UnlimitedBonInfluencesThreshold;//[Offset: 0xbc, Size: 0x4] 0x78ce38ad80
	byte MobilePlanarReflectionMode;//[Offset: 0xc0, Size: 0x1] 0x78ce38ae00
	PerPlatformBool bStreamSkeletalMeshLODs;//[Offset: 0xc1, Size: 0x1] 0x78ce38ae80
	PerPlatformBool bDiscardSkeletalMeshOptionalLODs;//[Offset: 0xc2, Size: 0x1] 0x78ce38af00
	SoftObjectPath VisualizeCalibrationColorMaterialPath;//[Offset: 0xc8, Size: 0x18] 0x78ce38af80
	SoftObjectPath VisualizeCalibrationCustomMaterialPath;//[Offset: 0xe0, Size: 0x18] 0x78ce38b000
	SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;//[Offset: 0xf8, Size: 0x18] 0x78ce38b080

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce38da00
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78ce38da80

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10] 0x78ce9d6be0
	Node[] Nodes;//[Offset: 0x40, Size: 0x10] 0x78ce9d6c80

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8] 0x78cf0d3a80
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10] 0x78cf0d3d00

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10] 0x78cf086d20

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1] 0x78cf0d3b00
	FName ParentSpace;//[Offset: 0x4, Size: 0x8] 0x78cf0d3b80
	float Weight;//[Offset: 0xc, Size: 0x4] 0x78cf0d3c00

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf0d3800
	FName ParentName;//[Offset: 0x8, Size: 0x8] 0x78cf0d3880
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x78cf0d3900
	FString DisplayName;//[Offset: 0x40, Size: 0x10] 0x78cf0d3980
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cf0d3a00

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0xec, Size: 0xc] 0x78ce38f180
	Vector PivotTranslation;//[Offset: 0xf8, Size: 0xc] 0x78ce38f200
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x78ce38f280

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x1f8, Size: 0x28] 0x78ce38f980
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78ce38fa00
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78ce38fa80
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x228, Size: 0x8] 0x78ce38fb00
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78ce38fb80
	uint32 ScalabilityGroup;//[Offset: 0x234, Size: 0x4] 0x78ce38fc00
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78ce38fc80
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x240, Size: 0x8] 0x78ce38fd00
	int StreamLowMips;//[Offset: 0x248, Size: 0x4] 0x78ce38fd80
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x78ce38fe00
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x78ce38fe80
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1] 0x78ce38ff00
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1] 0x78ce38ff80
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0xb1487bc 0x78ce34b220

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8] 0x78ce3b6400
	uint64 BuildHash;//[Offset: 0x30, Size: 0x8] 0x78ce3b6480

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x100, Size: 0xc] 0x78ce3b6500
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78ce3b6580
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x78ce3b6600

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4] 0x78cf0f8280
	int TileBorderSize;//[Offset: 0x4, Size: 0x4] 0x78cf0f8300
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf0f8380
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78cf0f8400

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x220, Size: 0x8] 0x78ce38f900

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x230, Size: 0x8] 0x78ce38f800
	void OnInterpToggle(bool bEnable);// 0xb152d94 0x78ce34b140

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2a8, Size: 0x1] 0x78ce390780
	float FOVAngle;//[Offset: 0x2ac, Size: 0x4] 0x78ce390800
	float OrthoWidth;//[Offset: 0x2b0, Size: 0x4] 0x78ce390880
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2b8, Size: 0x8] 0x78ce390900
	byte CompositeMode;//[Offset: 0x2c0, Size: 0x1] 0x78ce390980
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 0x550] 0x78ce390a00
	float PostProcessBlendWeight;//[Offset: 0x820, Size: 0x4] 0x78ce390a80
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x824, Size: 0x1] 0x78ce390b00
	float CustomNearClippingPlane;//[Offset: 0x828, Size: 0x4] 0x78ce390b80
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c, Size: 0x1] 0x78ce390c00
	Matrix CustomProjectionMatrix;//[Offset: 0x830, Size: 0x40] 0x78ce390c80
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1] 0x78ce390d00
	Vector ClipPlaneBase;//[Offset: 0x874, Size: 0xc] 0x78ce390d80
	Vector ClipPlaneNormal;//[Offset: 0x880, Size: 0xc] 0x78ce390e00
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 0x1] 0x78ce390e80
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88c, Size: 0x1] 0x78ce390f00
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88d, Size: 0x1] 0x78ce390f80
	void CaptureScene();// 0xb1544c4 0x78ce34af80
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0xb1544d8 0x78ce34b060

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x2a8, Size: 0x8] 0x78ce390480
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78ce390500
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x2b8, Size: 0x8] 0x78ce390580
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x2c0, Size: 0x8] 0x78ce390600
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x2c8, Size: 0x8] 0x78ce390680
	float IPD;//[Offset: 0x2d0, Size: 0x4] 0x78ce390700
	void CaptureScene();// 0xb154af8 0x78ce34aea0

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4] 0x78ce3b2280
	LinearColor ClearColor;//[Offset: 0xe4, Size: 0x10] 0x78ce3b2300
	byte OverrideFormat;//[Offset: 0xf4, Size: 0x1] 0x78ce3b2380
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x78ce3b2400
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1] 0x78ce3b2480

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x230, Size: 0x8] 0x78ce390380
	void OnInterpToggle(bool bEnable);// 0xb154fbc 0x78ce34adc0

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	byte ShadowmapFlags;//[Offset: 0x100, Size: 0x1] 0x78ce392780

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78ce392280
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78ce392300
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x230, Size: 0x8] 0x78ce392380
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x238, Size: 0x8] 0x78ce392400
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x240, Size: 0x8] 0x78ce392480
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x248, Size: 0x8] 0x78ce392500
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x250, Size: 0x8] 0x78ce392580
	void OnRep_ReplicatedPhysAsset();// 0xb164c98 0x78ce34e400
	void OnRep_ReplicatedMesh();// 0xb164cb4 0x78ce34e4e0
	void OnRep_ReplicatedMaterial1();// 0xb164c60 0x78ce34e5c0
	void OnRep_ReplicatedMaterial0();// 0xb164c7c 0x78ce34e6a0

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78ce393f80

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x1f1, Size: 0x1] 0x78ce9d8bc0
	float BottomRadius;//[Offset: 0x1f4, Size: 0x4] 0x78ce394300
	Color GroundAlbedo;//[Offset: 0x1f8, Size: 0x4] 0x78ce394380
	float AtmosphereHeight;//[Offset: 0x1fc, Size: 0x4] 0x78ce394400
	float MultiScatteringFactor;//[Offset: 0x200, Size: 0x4] 0x78ce394480
	float TraceSampleCountScale;//[Offset: 0x204, Size: 0x4] 0x78ce394500
	float RayleighScatteringScale;//[Offset: 0x208, Size: 0x4] 0x78ce394580
	LinearColor RayleighScattering;//[Offset: 0x20c, Size: 0x10] 0x78ce394600
	float RayleighExponentialDistribution;//[Offset: 0x21c, Size: 0x4] 0x78ce394680
	float MieScatteringScale;//[Offset: 0x220, Size: 0x4] 0x78ce394700
	LinearColor MieScattering;//[Offset: 0x224, Size: 0x10] 0x78ce394780
	float MieAbsorptionScale;//[Offset: 0x234, Size: 0x4] 0x78ce394800
	LinearColor MieAbsorption;//[Offset: 0x238, Size: 0x10] 0x78ce394880
	float MieAnisotropy;//[Offset: 0x248, Size: 0x4] 0x78ce394900
	float MieExponentialDistribution;//[Offset: 0x24c, Size: 0x4] 0x78ce394980
	float OtherAbsorptionScale;//[Offset: 0x250, Size: 0x4] 0x78ce394a00
	LinearColor OtherAbsorption;//[Offset: 0x254, Size: 0x10] 0x78ce394a80
	TentDistribution OtherTentDistribution;//[Offset: 0x264, Size: 0xc] 0x78ce394b00
	LinearColor SkyLuminanceFactor;//[Offset: 0x270, Size: 0x10] 0x78ce394b80
	float AerialPespectiveViewDistanceScale;//[Offset: 0x280, Size: 0x4] 0x78ce394c00
	float HeightFogContribution;//[Offset: 0x284, Size: 0x4] 0x78ce394c80
	float TransmittanceMinLightElevationAngle;//[Offset: 0x288, Size: 0x4] 0x78ce394d00
	float AerialPerspectiveStartDepth;//[Offset: 0x28c, Size: 0x4] 0x78ce394d80
	Guid bStaticLightingBuiltGUID;//[Offset: 0x2b4, Size: 0x10] 0x78ce394e00
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0xb179d74 0x78ce34d520
	void SetRayleighScatteringScale(float NewValue);// 0xb17a4ac 0x78ce34d600
	void SetRayleighScattering(LinearColor NewValue);// 0xb17a404 0x78ce34d6e0
	void SetRayleighExponentialDistribution(float NewValue);// 0xb17a35c 0x78ce34d7c0
	void SetOtherAbsorptionScale(float NewValue);// 0xb179ec4 0x78ce34d8a0
	void SetOtherAbsorption(LinearColor NewValue);// 0xb179e1c 0x78ce34d980
	void SetMieScatteringScale(float NewValue);// 0xb17a2b4 0x78ce34da60
	void SetMieScattering(LinearColor NewValue);// 0xb17a20c 0x78ce34db40
	void SetMieExponentialDistribution(float NewValue);// 0xb179f6c 0x78ce34dc20
	void SetMieAnisotropy(float NewValue);// 0xb17a014 0x78ce34dd00
	void SetMieAbsorptionScale(float NewValue);// 0xb17a164 0x78ce34dde0
	void SetMieAbsorption(LinearColor NewValue);// 0xb17a0bc 0x78ce34dec0
	void SetHeightFogContribution(float NewValue);// 0xb179c24 0x78ce34dfa0
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0xb179ccc 0x78ce34e080
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0xb17a554 0x78ce34e160

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4] 0x78cf0da700
	float TipValue;//[Offset: 0x4, Size: 0x4] 0x78cf0da780
	float Width;//[Offset: 0x8, Size: 0x4] 0x78cf0da800

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x220, Size: 0x8] 0x78ce396300

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x78ce71fb80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78ce71fc00
	void OnRep_bEnabled();// 0xb17b2c4 0x78ce70eda0

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x78ce397300
	byte SourceType;//[Offset: 0x225, Size: 0x1] 0x78ce397380
	TextureCube* Cubemap;//[Offset: 0x228, Size: 0x8] 0x78ce395300
	float SourceCubemapAngle;//[Offset: 0x230, Size: 0x4] 0x78ce395380
	int CubemapResolution;//[Offset: 0x234, Size: 0x4] 0x78ce395400
	float SkyDistanceThreshold;//[Offset: 0x238, Size: 0x4] 0x78ce395480
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78ce395500
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1] 0x78ce395580
	LinearColor LowerHemisphereColor;//[Offset: 0x240, Size: 0x10] 0x78ce395600
	float OcclusionMaxDistance;//[Offset: 0x250, Size: 0x4] 0x78ce395680
	float Contrast;//[Offset: 0x254, Size: 0x4] 0x78ce395700
	float OcclusionExponent;//[Offset: 0x258, Size: 0x4] 0x78ce395780
	float MinOcclusion;//[Offset: 0x25c, Size: 0x4] 0x78ce395800
	Color OcclusionTint;//[Offset: 0x260, Size: 0x4] 0x78ce395880
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78ce395900
	float CloudAmbientOcclusionStrength;//[Offset: 0x268, Size: 0x4] 0x78ce395980
	float CloudAmbientOcclusionExtent;//[Offset: 0x26c, Size: 0x4] 0x78ce395a00
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x270, Size: 0x4] 0x78ce395a80
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x274, Size: 0x4] 0x78ce395b00
	byte OcclusionCombineMode;//[Offset: 0x278, Size: 0x1] 0x78ce395b80
	TextureCube* BlendDestinationCubemap;//[Offset: 0x328, Size: 0x8] 0x78ce395c00
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xb17c024 0x78ce34caa0
	void SetOcclusionTint(out const Color InTint);// 0xb17bc38 0x78ce34cb80
	void SetOcclusionExponent(float InOcclusionExponent);// 0xb17bae8 0x78ce34cc60
	void SetOcclusionContrast(float InOcclusionContrast);// 0xb17bb90 0x78ce34cd40
	void SetMinOcclusion(float InMinOcclusion);// 0xb17ba40 0x78ce34ce20
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0xb17bce8 0x78ce34cf00
	void SetLightColor(LinearColor NewLightColor);// 0xb17bf7c 0x78ce34cfe0
	void SetIntensity(float NewIntensity);// 0xb17c174 0x78ce34d0c0
	void SetIndirectLightingIntensity(float NewIntensity);// 0xb17c0cc 0x78ce34d1a0
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0xb17bd98 0x78ce34d280
	void SetCubemap(TextureCube* NewCubemap);// 0xb17bed4 0x78ce34d360
	void RecaptureSky();// 0xb17ba2c 0x78ce34d440

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88] 0x78ce397280

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1] 0x78ce396a80
	SoundNode* FirstNode;//[Offset: 0x1c0, Size: 0x8] 0x78ce396b00
	float VolumeMultiplier;//[Offset: 0x1c8, Size: 0x4] 0x78ce396b80
	float PitchMultiplier;//[Offset: 0x1cc, Size: 0x4] 0x78ce396c00
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x1d0, Size: 0x3a0] 0x78ce396c80
	float SubtitlePriority;//[Offset: 0x570, Size: 0x4] 0x78ce396d00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578, Size: 0x1] 0x78ce396d80
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x578, Size: 0x1] 0x78ce396e00
	int CookedQualityIndex;//[Offset: 0x57c, Size: 0x4] 0x78ce396e80
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1] 0x78ce396f00

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10] 0x78ce9d8800

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10] 0x78ce9d8940

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1] 0x78cf0df300
	FString DisplayName;//[Offset: 0x8, Size: 0x10] 0x78cf0df380
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cf0df400
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4] 0x78cf0df480

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8] 0x78ce398400
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3a0] 0x78ce396380
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1] 0x78ce396400

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x44, Size: 0x8] 0x78ce398380

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x78ce9d8760

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x44, Size: 0x4] 0x78ce398200
	float DelayMax;//[Offset: 0x48, Size: 0x4] 0x78ce398280

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20] 0x78ce398100
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce398180

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8] 0x78cf0a1680
	DialogueContext Context;//[Offset: 0x8, Size: 0x18] 0x78cf0a1800

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10] 0x78ce9d86c0

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4] 0x78cf0dfe00
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4] 0x78cf0dfe80
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4] 0x78cf0dff00
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4] 0x78cf0dff80
	float Volume;//[Offset: 0x10, Size: 0x4] 0x78cf0de780

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4] 0x78ce397f00
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ce397f80
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x78ce398000

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x44, Size: 0x4] 0x78ce397800
	float LoopEnd;//[Offset: 0x48, Size: 0x4] 0x78ce397880
	float DurationAfterLoop;//[Offset: 0x4c, Size: 0x4] 0x78ce397900
	int LoopCount;//[Offset: 0x50, Size: 0x4] 0x78ce397980
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78ce397a00
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78ce397a80
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x58, Size: 0x8] 0x78ce397b00
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x60, Size: 0x8] 0x78ce397b80
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x68, Size: 0x88] 0x78ce397c00
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf0, Size: 0x88] 0x78ce397c80
	float PitchMin;//[Offset: 0x178, Size: 0x4] 0x78ce397d00
	float PitchMax;//[Offset: 0x17c, Size: 0x4] 0x78ce397d80
	float VolumeMin;//[Offset: 0x180, Size: 0x4] 0x78ce397e00
	float VolumeMax;//[Offset: 0x184, Size: 0x4] 0x78ce397e80

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10] 0x78ce9d8620

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x44, Size: 0x4] 0x78ce397680
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce397700

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x78ce9d8580

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x44, Size: 0x4] 0x78ce397400
	float PitchMax;//[Offset: 0x48, Size: 0x4] 0x78ce397480
	float VolumeMin;//[Offset: 0x4c, Size: 0x4] 0x78ce397500
	float VolumeMax;//[Offset: 0x50, Size: 0x4] 0x78ce397580

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x44, Size: 0x20] 0x78ce399400
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x64, Size: 0x20] 0x78ce399480

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf0dfa80
	float Default;//[Offset: 0x8, Size: 0x4] 0x78cf0dfb00
	float MinInput;//[Offset: 0xc, Size: 0x4] 0x78cf0dfb80
	float MaxInput;//[Offset: 0x10, Size: 0x4] 0x78cf0dfc00
	float MinOutput;//[Offset: 0x14, Size: 0x4] 0x78cf0dfc80
	float MaxOutput;//[Offset: 0x18, Size: 0x4] 0x78cf0dfd00
	byte ParamMode;//[Offset: 0x1c, Size: 0x1] 0x78cf0dfd80

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78ce398f00
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x78ce398f80
	float AmplitudeMin;//[Offset: 0x44, Size: 0x4] 0x78ce399000
	float AmplitudeMax;//[Offset: 0x48, Size: 0x4] 0x78ce399080
	float FrequencyMin;//[Offset: 0x4c, Size: 0x4] 0x78ce399100
	float FrequencyMax;//[Offset: 0x50, Size: 0x4] 0x78ce399180
	float OffsetMin;//[Offset: 0x54, Size: 0x4] 0x78ce399200
	float OffsetMax;//[Offset: 0x58, Size: 0x4] 0x78ce399280
	float CenterMin;//[Offset: 0x5c, Size: 0x4] 0x78ce399300
	float CenterMax;//[Offset: 0x60, Size: 0x4] 0x78ce399380

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8] 0x78ce398e80

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object
	int CookedQualityLevelIndex;//[Offset: 0x44, Size: 0x4] 0x78ce398e00

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10] 0x78ce9d8440
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10] 0x78ce9d84e0
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4] 0x78ce398b80
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4] 0x78ce398c00
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78ce398c80
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78ce398d00
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x78ce398d80

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8] 0x78ce398a00

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x44, Size: 0x8] 0x78ce398980

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x44, Size: 0x8] 0x78ce398900

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28] 0x78ce398780
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8] 0x78ce398800
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce398880

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x40, Size: 0x8] 0x78ce39b080
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x48, Size: 0x8] 0x78ce39b100
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x50, Size: 0x10] 0x78ce9d7cc0
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x60, Size: 0x8] 0x78ce9d7d60

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8] 0x78ce896380

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object
	FName EndpointType;//[Offset: 0x38, Size: 0x8] 0x78ce39af80
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x78ce9d7c20
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x78ce39b000

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object
	FName SoundfieldEndpointType;//[Offset: 0x38, Size: 0x8] 0x78ce39ad80
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x78ce9da380
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x78ce39ae00
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x50, Size: 0x8] 0x78ce9da420
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x58, Size: 0x8] 0x78ce39ae80
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x60, Size: 0x10] 0x78ce9da4c0

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1] 0x78ce39ad00

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x228, Size: 0x8] 0x78ce39ac80

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x270, Size: 0x4] 0x78ce39ab00
	float CaptureDistanceScale;//[Offset: 0x274, Size: 0x4] 0x78ce39ab80
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x278, Size: 0x8] 0x78ce39ac00

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x440, Size: 0x70] 0x78cea2f200
	InterpCurveVector SplineInfo;//[Offset: 0x4b0, Size: 0x18] 0x78cea2f280
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4c8, Size: 0x18] 0x78cea2f300
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4e0, Size: 0x18] 0x78cea2f380
	InterpCurveFloat SplineReparamTable;//[Offset: 0x4f8, Size: 0x18] 0x78cea2f400
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1] 0x78cea2f480
	int ReparamStepsPerSegment;//[Offset: 0x514, Size: 0x4] 0x78cea2f500
	float Duration;//[Offset: 0x518, Size: 0x4] 0x78cea2f580
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1] 0x78cea2f600
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 0x1] 0x78cea2f680
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 0x1] 0x78cea2f700
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51f, Size: 0x1] 0x78cea2f780
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1] 0x78cea2d700
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1] 0x78cea2d780
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x522, Size: 0x1] 0x78cea2d800
	float LoopPosition;//[Offset: 0x524, Size: 0x4] 0x78cea2d880
	Vector DefaultUpVector;//[Offset: 0x528, Size: 0xc] 0x78cea2d900
	void UpdateSpline();// 0xb19f4a4 0x78cea33c00
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0xb19d618 0x78cea33ce0
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0xb19d114 0x78cea33dc0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xb19e838 0x78cea33ea0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xb19d2a4 0x78cea33f80
	void SetTangentColor(out const LinearColor TangentColor);// 0xb19e6d8 0x78cea34060
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xb19d488 0x78cea34140
	void SetSplineWorldPoints(out const Vector[] Points);// 0xb19d970 0x78cea34220
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0xb19cc48 0x78cea34300
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0xb19da38 0x78cea343e0
	void SetSplineLocalPoints(out const Vector[] Points);// 0xb19d8a8 0x78cea344c0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xb19e788 0x78cea345a0
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0xb19ce40 0x78cea34680
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0xb19cf84 0x78cea34760
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0xb19d718 0x78cea34840
	void SetDrawDebug(bool bShow);// 0xb19e628 0x78cea34920
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0xb19b96c 0x78cea34a00
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0xb19e3ec 0x78cea34ae0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0xb19e530 0x78cea34bc0
	void RemoveSplinePoint(int index, bool bUpdateSpline);// 0xb19dd00 0x78cea34ca0
	bool IsClosedLoop();// 0xb19e3b4 0x78cea34d80
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0xb19b2e0 0x78cea34e60
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0xb19a3a4 0x78cea34f40
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0xb19b128 0x78cea35020
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0xb19a9b8 0x78cea35100
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0xb19ca28 0x78cea351e0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0xb19b650 0x78cea352c0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0xb19a758 0x78cea353a0
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0xb19b498 0x78cea35480
	Vector GetVectorPropertyAtSplinePoint(int index, FName PropertyName);// 0xb19ba94 0x78cea35560
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xb19e8e8 0x78cea35640
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xb19a250 0x78cea31d60
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c428 0x78cea31e40
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xb19efa4 0x78cea31f20
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xb19b028 0x78cea32000
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0xb199f4c 0x78cea320e0
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0xb19c018 0x78cea321c0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0xb19ed44 0x78cea322a0
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0xb19ac18 0x78cea32380
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xb19a604 0x78cea32460
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c828 0x78cea32540
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xb19f2a4 0x78cea32620
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xb19b398 0x78cea32700
	byte GetSplinePointType(int PointIndex);// 0xb19cd90 0x78cea327e0
	float GetSplineLength();// 0xb19ba60 0x78cea328c0
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0xb199cf4 0x78cea329a0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0xb19c178 0x78cea32a80
	Vector GetScaleAtSplineInputKey(float InKey);// 0xb19eb94 0x78cea32b60
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0xb19ad78 0x78cea32c40
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xb19a4b0 0x78cea32d20
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c528 0x78cea32e00
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xb19f0a4 0x78cea32ee0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xb19b1e0 0x78cea32fc0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xb199dfc 0x78cea330a0
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c22c 0x78cea33180
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xb19ec48 0x78cea33260
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xb19ae2c 0x78cea33340
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xb19a0fc 0x78cea33420
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c328 0x78cea33500
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xb19eea4 0x78cea335e0
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xb19af28 0x78cea336c0
	int GetNumberOfSplineSegments();// 0xb19cbe0 0x78cea337a0
	int GetNumberOfSplinePoints();// 0xb19cc14 0x78cea33880
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xb19aac4 0x78cea33960
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19cae0 0x78cea30080
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xb19f3a4 0x78cea30160
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xb19b708 0x78cea30240
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0xb19be88 0x78cea30320
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0xb19bd40 0x78cea30400
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c628 0x78cea304e0
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0xb19b808 0x78cea305c0
	float GetFloatPropertyAtSplinePoint(int index, FName PropertyName);// 0xb19bb94 0x78cea306a0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xb19e9e8 0x78cea30780
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0xb19bc90 0x78cea30860
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0xb19eae4 0x78cea30940
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xb19a864 0x78cea30a20
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c928 0x78cea30b00
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xb19f1a4 0x78cea30be0
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xb19b550 0x78cea30cc0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0xb19b8b8 0x78cea30da0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xb19c728 0x78cea30e80
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xb199714 0x78cea30f60
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0xb1992e4 0x78cea31040
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xb199924 0x78cea31120
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0xb19944c 0x78cea31200
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xb19981c 0x78cea312e0
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xb199508 0x78cea313c0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xb19960c 0x78cea314a0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xb199b34 0x78cea31580
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0xb199c3c 0x78cea31660
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xb199a2c 0x78cea31740
	void ClearSplinePoints(bool bUpdateSpline);// 0xb19e304 0x78cea31820
	void AddSplineWorldPoint(out const Vector Position);// 0xb19dc48 0x78cea31900
	void AddSplinePointAtIndex(out const Vector Position, int index, byte CoordinateSpace, bool bUpdateSpline);// 0xb19ddf8 0x78cea319e0
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0xb19df8c 0x78cea31ac0
	void AddSplineLocalPoint(out const Vector Position);// 0xb19db90 0x78cea31ba0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0xb19e0d4 0x78cea31c80
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0xb19e1e0 0x78cf1fe780

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18] 0x78cf0f0200
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18] 0x78cf0f0280
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18] 0x78cf0f0300
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18] 0x78cf0f0380
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8] 0x78cf0f0400
	uint32 Version;//[Offset: 0x68, Size: 0x4] 0x78cf0f0480

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10] 0x78ea07b3c0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78ea086b00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78ea086b80

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78ea086c00
	Quat OutVal;//[Offset: 0x10, Size: 0x10] 0x78ea086c80
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10] 0x78ea086d00
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10] 0x78ea086d80
	byte InterpMode;//[Offset: 0x40, Size: 0x1] 0x78ea086e00

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4] 0x78cf0f1e80
	Vector Position;//[Offset: 0x4, Size: 0xc] 0x78cf0f1f00
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x78cf0f1f80
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x78cf0f2000
	Rotator Rotation;//[Offset: 0x28, Size: 0xc] 0x78cf0f2080
	Vector Scale;//[Offset: 0x34, Size: 0xc] 0x78cf0f2100
	byte Type;//[Offset: 0x40, Size: 0x1] 0x78cf0f0080

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78ce39aa80

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x4d8, Size: 0x58] 0x78ce39ce80
	Vector SplineUpDir;//[Offset: 0x530, Size: 0xc] 0x78ce39cf00
	float SplineBoundaryMin;//[Offset: 0x53c, Size: 0x4] 0x78ce39cf80
	Guid CachedMeshBodySetupGuid;//[Offset: 0x540, Size: 0x10] 0x78ce39d000
	BodySetup* BodySetup;//[Offset: 0x550, Size: 0x8] 0x78ce39d080
	float SplineBoundaryMax;//[Offset: 0x558, Size: 0x4] 0x78ce39d100
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55c, Size: 0x1] 0x78ce39d180
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55c, Size: 0x1] 0x78ce39d200
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55c, Size: 0x1] 0x78ce39d280
	byte ForwardAxis;//[Offset: 0x55d, Size: 0x1] 0x78ce39d300
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x560, Size: 0x4] 0x78ce39d380
	void UpdateMesh();// 0xb1a4c9c 0x78ce3a12e0
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0xb1a4a34 0x78ce3a13c0
	void SetStartScale(Vector2D startScale, bool bUpdateMesh);// 0xb1a44bc 0x78ce3a14a0
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0xb1a438c 0x78ce3a1580
	void SetStartPosition(Vector startPos, bool bUpdateMesh);// 0xb1a4b68 0x78ce3a1660
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0xb1a4260 0x78ce3a1740
	void SetStartAndEnd(Vector startPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0xb1a45e8 0x78ce3a1820
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0xb1a3c74 0x78ce3a1900
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0xb1a3da8 0x78ce3a19e0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0xb1a47cc 0x78ce3a1ac0
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0xb1a4134 0x78ce3a1ba0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0xb1a4004 0x78ce3a1c80
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0xb1a4900 0x78ce34e780
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0xb1a3ed8 0x78ce34e860
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0xb1a3b44 0x78ce34e940
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0xb1a3a14 0x78ce34ea20
	Vector GetStartTangent();// 0xb1a4b30 0x78ce34eb00
	Vector2D GetStartScale();// 0xb1a45b4 0x78ce34ebe0
	float GetStartRoll();// 0xb1a4488 0x78ce34ecc0
	Vector GetStartPosition();// 0xb1a4c64 0x78ce34eda0
	Vector2D GetStartOffset();// 0xb1a4358 0x78ce34ee80
	Vector GetSplineUpDir();// 0xb1a3d70 0x78ce34ef60
	byte GetForwardAxis();// 0xb1a3ea4 0x78ce34f040
	Vector GetEndTangent();// 0xb1a48c8 0x78ce34f120
	Vector2D GetEndScale();// 0xb1a422c 0x78ce34f200
	float GetEndRoll();// 0xb1a4100 0x78ce34f2e0
	Vector GetEndPosition();// 0xb1a49fc 0x78ce34f3c0
	Vector2D GetEndOffset();// 0xb1a3fd0 0x78ce34f4a0
	float GetBoundaryMin();// 0xb1a3c40 0x78ce34f580
	float GetBoundaryMax();// 0xb1a3b10 0x78ce34f660

--------------------------------
Class: SplineMeshParams
	Vector startPos;//[Offset: 0x0, Size: 0xc] 0x78cf0f1780
	Vector StartTangent;//[Offset: 0xc, Size: 0xc] 0x78cf0f1800
	Vector2D startScale;//[Offset: 0x18, Size: 0x8] 0x78cf0f1880
	float StartRoll;//[Offset: 0x20, Size: 0x4] 0x78cf0f1900
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8] 0x78cf0f1980
	Vector EndPos;//[Offset: 0x2c, Size: 0xc] 0x78cf0f1a00
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8] 0x78cf0f1a80
	Vector EndTangent;//[Offset: 0x40, Size: 0xc] 0x78cf0f1b00
	float EndRoll;//[Offset: 0x4c, Size: 0x4] 0x78cf0f1b80
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8] 0x78cf0f1c00

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f4, Size: 0x4] 0x78ce39e300
	Vector SocketOffset;//[Offset: 0x1f8, Size: 0xc] 0x78ce39e380
	Vector TargetOffset;//[Offset: 0x204, Size: 0xc] 0x78ce39e400
	float ProbeSize;//[Offset: 0x210, Size: 0x4] 0x78ce39e480
	byte ProbeChannel;//[Offset: 0x214, Size: 0x1] 0x78ce39e500
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1] 0x78ce39e580
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1] 0x78ce39e600
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1] 0x78ce39e680
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1] 0x78ce39e700
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1] 0x78ce39c680
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1] 0x78ce39c700
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1] 0x78ce39c780
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1] 0x78ce39c800
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1] 0x78ce39c880
	float CameraLagSpeed;//[Offset: 0x218, Size: 0x4] 0x78ce39c900
	float CameraRotationLagSpeed;//[Offset: 0x21c, Size: 0x4] 0x78ce39c980
	float CameraLagMaxTimeStep;//[Offset: 0x220, Size: 0x4] 0x78ce39ca00
	float CameraLagMaxDistance;//[Offset: 0x224, Size: 0x4] 0x78ce39ca80
	bool IsCollisionFixApplied();// 0xb1a6608 0x78ce3a0e80
	Vector GetUnfixedCameraPosition();// 0xb1a6640 0x78ce3a0f60
	Rotator GetTargetRotation();// 0xb1a6678 0x78ce3a1040

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78ceb48c00
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78ceb48c80
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 0x1] 0x78ceaccae0
	void SetMobility(byte InMobility);// 0xb1aaf68 0x78ceb613c0

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4] 0x78ce39fe80
	float OverlayArc;//[Offset: 0x2c, Size: 0x4] 0x78ce39ff00
	int Height;//[Offset: 0x30, Size: 0x4] 0x78ce39ff80
	void SetRadius(float InRadius);// 0xb1adcac 0x78ce3a3960
	void SetOverlayArc(float InOverlayArc);// 0xb1adc04 0x78ce3a0080
	void SetHeight(int InHeight);// 0xb1adb5c 0x78ce3a0160

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x14] 0x78ce39fb00
	Box2D RightUVRect;//[Offset: 0x3c, Size: 0x14] 0x78ce39fb80
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x8] 0x78ce39fc00
	Vector2D RightScale;//[Offset: 0x58, Size: 0x8] 0x78ce39fc80
	Vector2D LeftBias;//[Offset: 0x60, Size: 0x8] 0x78ce39fd00
	Vector2D RightBias;//[Offset: 0x68, Size: 0x8] 0x78ce39fd80
	void SetEquirectProps(EquirectProps InScaleBiases);// 0xb1ae664 0x78ce3a3880

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x14] 0x78cf0f3900
	Box2D RightUVRect;//[Offset: 0x14, Size: 0x14] 0x78cf0f3980
	Vector2D LeftScale;//[Offset: 0x28, Size: 0x8] 0x78cf0f3a00
	Vector2D RightScale;//[Offset: 0x30, Size: 0x8] 0x78cf0f3a80
	Vector2D LeftBias;//[Offset: 0x38, Size: 0x8] 0x78cf0f3b00
	Vector2D RightBias;//[Offset: 0x40, Size: 0x8] 0x78cf0f3b80

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x78ce3b0680
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x78ce3b0700
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x78ce3b0780
	Texture* Texture;//[Offset: 0x1f8, Size: 0x8] 0x78ce3b0800
	Texture* LeftTexture;//[Offset: 0x200, Size: 0x8] 0x78ce3b0880
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78ce3b0900
	Vector2D QuadSize;//[Offset: 0x20c, Size: 0x8] 0x78ce3b0980
	Box2D UVRect;//[Offset: 0x214, Size: 0x14] 0x78ce3b0a00
	float CylinderRadius;//[Offset: 0x228, Size: 0x4] 0x78ce3b0a80
	float CylinderOverlayArc;//[Offset: 0x22c, Size: 0x4] 0x78ce3b0b00
	int CylinderHeight;//[Offset: 0x230, Size: 0x4] 0x78ce3b0b80
	EquirectProps EquirectProps;//[Offset: 0x234, Size: 0x48] 0x78ce3b0c00
	byte StereoLayerType;//[Offset: 0x27c, Size: 0x1] 0x78ce3b0c80
	byte StereoLayerShape;//[Offset: 0x27d, Size: 0x1] 0x78ce3b0d00
	StereoLayerShape* Shape;//[Offset: 0x280, Size: 0x8] 0x78ce3b0d80
	int Priority;//[Offset: 0x288, Size: 0x4] 0x78ce3b0e00
	void SetUVRect(Box2D InUVRect);// 0xb1aee08 0x78ce3a2e00
	void SetTexture(Texture* InTexture);// 0xb1af060 0x78ce3a2ee0
	void SetQuadSize(Vector2D InQuadSize);// 0xb1aeedc 0x78ce3a2fc0
	void SetPriority(int InPriority);// 0xb1aec54 0x78ce3a30a0
	void SetLeftTexture(Texture* InTexture);// 0xb1aefb8 0x78ce3a3180
	void SetEquirectProps(EquirectProps InScaleBiases);// 0xb1aecfc 0x78ce3a3260
	void MarkTextureForUpdate();// 0xb1aec24 0x78ce3a3340
	Box2D GetUVRect();// 0xb1aede0 0x78ce3a3420
	Texture* GetTexture();// 0xb1aef9c 0x78ce3a3500
	Vector2D GetQuadSize();// 0xb1aeebc 0x78ce3a35e0
	int GetPriority();// 0xb1aec38 0x78ce3a36c0
	Texture* GetLeftTexture();// 0xb1aef80 0x78ce3a37a0

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowSplashScreen();// 0xb1afa4c 0x78ce3a2a80
	static void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0xb1afa60 0x78ce3a2b60
	static void HideSplashScreen();// 0xb1afa38 0x78ce3a2c40
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0xb1af998 0x78ce3a2d20

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	static WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0xb1b4f28 0x78ce3a2620
	static LocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0xb1b4e38 0x78ce3a2700
	static LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0xb1b5018 0x78ce3a27e0
	static GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0xb1b5108 0x78ce3a28c0
	static EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0xb1b51f8 0x78ce3a29a0

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8] 0x78ce3b1b00
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78ce3b1b80
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78ce3b1c00

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18] 0x78ce3b1980
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18] 0x78ce3b1a00
	FText TransientText;//[Offset: 0x58, Size: 0x18] 0x78ce3b1a80

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x220, Size: 0x8] 0x78ce3b1900

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText text;//[Offset: 0x440, Size: 0x18] 0x78ce3b2b80
	MaterialInterface* TextMaterial;//[Offset: 0x458, Size: 0x8] 0x78ce3b2c00
	Font* Font;//[Offset: 0x460, Size: 0x8] 0x78ce3b2c80
	byte HorizontalAlignment;//[Offset: 0x468, Size: 0x1] 0x78ce3b2d00
	byte VerticalAlignment;//[Offset: 0x469, Size: 0x1] 0x78ce3b2d80
	Color TextRenderColor;//[Offset: 0x46c, Size: 0x4] 0x78ce3b2e00
	float XScale;//[Offset: 0x470, Size: 0x4] 0x78ce3b2e80
	float YScale;//[Offset: 0x474, Size: 0x4] 0x78ce3b2f00
	float WorldSize;//[Offset: 0x478, Size: 0x4] 0x78ce3b2f80
	float InvDefaultSize;//[Offset: 0x47c, Size: 0x4] 0x78ce3b3000
	float HorizSpacingAdjust;//[Offset: 0x480, Size: 0x4] 0x78ce3b3080
	float VertSpacingAdjust;//[Offset: 0x484, Size: 0x4] 0x78ce3b3100
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1] 0x78ce3b3180
	void SetYScale(float Value);// 0xb1b73c8 0x78ce3a53a0
	void SetXScale(float Value);// 0xb1b7470 0x78ce3a5480
	void SetWorldSize(float Value);// 0xb1b71d0 0x78ce3a5560
	void SetVertSpacingAdjust(float Value);// 0xb1b7278 0x78ce3a5640
	void SetVerticalAlignment(byte Value);// 0xb1b75bc 0x78ce3a1d60
	void SetTextRenderColor(Color Value);// 0xb1b7518 0x78ce3a1e40
	void SetTextMaterial(MaterialInterface* Material);// 0xb1b77b4 0x78ce3a1f20
	void SetText(FString Value);// 0xb1b796c 0x78ce3a2000
	void SetHorizSpacingAdjust(float Value);// 0xb1b7320 0x78ce3a20e0
	void SetHorizontalAlignment(byte Value);// 0xb1b7664 0x78ce3a21c0
	void SetFont(Font* Value);// 0xb1b770c 0x78ce3a22a0
	void K2_SetText(out const FText Value);// 0xb1b785c 0x78ce3a2380
	Vector GetTextWorldSize();// 0xb1b7160 0x78ce3a2460
	Vector GetTextLocalSize();// 0xb1b7198 0x78ce3a2540

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x130, Size: 0x1] 0x78ce3b2a00
	byte AddressY;//[Offset: 0x131, Size: 0x1] 0x78ce3b2a80
	byte AddressZ;//[Offset: 0x132, Size: 0x1] 0x78ce3b2b00

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xe0, Size: 0x1] 0x78ce3b2980

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98] 0x78ce3b3300
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78ce3b3380
	void Stop();// 0xb1c1068 0x78ce3a3f80
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0xb1c07c8 0x78ce3a4060
	void SetTimelineLengthMode(byte NewLengthMode);// 0xb1c0a90 0x78ce3a4140
	void SetTimelineLength(float NewLength);// 0xb1c0b38 0x78ce3a4220
	void SetPlayRate(float NewRate);// 0xb1c0cf0 0x78ce3a4300
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0xb1c0eb4 0x78ce3a43e0
	void SetNewTime(float NewTime);// 0xb1c0c14 0x78ce3a44c0
	void SetLooping(bool bNewLooping);// 0xb1c0dd0 0x78ce3a45a0
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0xb1c06d8 0x78ce3a4680
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0xb1c09e0 0x78ce3a4760
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0xb1c08b8 0x78ce3a4840
	void ReverseFromEnd();// 0xb1c107c 0x78ce3a4920
	void Reverse();// 0xb1c1090 0x78ce3a4a00
	void PlayFromStart();// 0xb1c10a4 0x78ce3a4ae0
	void Play();// 0xb1c10b8 0x78ce3a4bc0
	void OnRep_Timeline();// 0xb1c06c4 0x78ce3a4ca0
	bool IsReversing();// 0xb1c0ff8 0x78ce3a4d80
	bool IsPlaying();// 0xb1c1030 0x78ce3a4e60
	bool IsLooping();// 0xb1c0d98 0x78ce3a4f40
	float GetTimelineLength();// 0xb1c0be0 0x78ce3a5020
	float GetPlayRate();// 0xb1c0cbc 0x78ce3a5100
	float GetPlaybackPosition();// 0xb1c0e80 0x78ce3a51e0
	bool GetIgnoreTimeDilation();// 0xb1c09a8 0x78ce3a52c0

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1] 0x78cf0f7300
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cf0f7380
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78cf0f5300
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78cf0f5380
	float Length;//[Offset: 0x4, Size: 0x4] 0x78cf0f5400
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78cf0f5480
	float Position;//[Offset: 0xc, Size: 0x4] 0x78cf0f5500
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10] 0x78cf089de0
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10] 0x78cf089e80
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10] 0x78cf089f20
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10] 0x78cf089fc0
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10] 0x78cf0f5e80
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10] 0x78cf0f5f00
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8] 0x78cf0f5f80
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8] 0x78cf0f6000

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0f5580
	delegate EventFunc;//[Offset: 0x4, Size: 0x10] 0x78cf0f5600

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8] 0x78cf0f5700
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x78cf0f5780
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x78cf0f5800
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8] 0x78cf0f5880

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8] 0x78cf0f5980
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x78cf0f5a00
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x78cf0f5a80
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8] 0x78cf0f5b00

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8] 0x78cf0f5c00
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x78cf0f5c80
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x78cf0f5d00
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8] 0x78cf0f5d80

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x78ce3b4b80

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x220, Size: 0x8] 0x78cec08c00

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0xb1c8798 0x78ce3a7320
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0xb1c8b10 0x78ce3a3a40
	void Init();// 0xb1c8cc8 0x78ce3a3b20
	int GetNumAccounts();// 0xb1c8a94 0x78ce3a3c00
	FString GetAccountName(int AccountIndex);// 0xb1c8990 0x78ce3a3ce0
	bool CanShowTweetUI();// 0xb1c8c88 0x78ce3a3dc0
	bool AuthorizeAccounts();// 0xb1c8ad0 0x78ce3a3ea0

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50] 0x78cee15d40

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xc0, Size: 0x1] 0x78ce3b5f80
	Guid Guid;//[Offset: 0xc4, Size: 0x10] 0x78ce3b6000

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1] 0x78ce9d9700
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50] 0x78cee15bc0
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50] 0x78cee15c80
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18] 0x78ce3b5780
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18] 0x78ce3b5800
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18] 0x78ce3b5880
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18] 0x78ce3b5900
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18] 0x78ce3b5980
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18] 0x78ce3b5a00
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18] 0x78ce3b5a80
	float ApplicationScale;//[Offset: 0x188, Size: 0x4] 0x78ce3b5b00
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1] 0x78ce9d97a0
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18] 0x78ce3b5c00
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88] 0x78ce3b5c80
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78ce3b5d00
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8] 0x78ce3b5d80
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78ce3b5e00
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10] 0x78ce9d9840
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x250, Size: 0x8] 0x78ce9d98e0
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8] 0x78ce3b5f00

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8] 0x78cf0f6380
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8] 0x78cf0f6400

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x48, Size: 0x8] 0x78ce3b6e80
	byte ConstructionOp;//[Offset: 0x50, Size: 0x1] 0x78ce3b6f00
	int VolumeSizeX;//[Offset: 0x54, Size: 0x4] 0x78ce3b6f80
	int VolumeSizeY;//[Offset: 0x58, Size: 0x4] 0x78ce3b7000
	int VolumeSizeZ;//[Offset: 0x5c, Size: 0x4] 0x78ce3b7080
	int SubImagesX;//[Offset: 0x60, Size: 0x4] 0x78ce3b7100
	int SubImagesY;//[Offset: 0x64, Size: 0x4] 0x78ce3b7180
	int FrameCount;//[Offset: 0x68, Size: 0x4] 0x78ce3b7200
	float FramesPerSecond;//[Offset: 0x6c, Size: 0x4] 0x78ce3b7280
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78ce3b7300
	VectorFieldStatic* NoiseField;//[Offset: 0x78, Size: 0x8] 0x78ce3b7380
	float NoiseScale;//[Offset: 0x80, Size: 0x4] 0x78ce3b5300
	float NoiseMax;//[Offset: 0x84, Size: 0x4] 0x78ce3b5380

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x48, Size: 0x4] 0x78ce3b6a00
	int SizeY;//[Offset: 0x4c, Size: 0x4] 0x78ce3b6a80
	int SizeZ;//[Offset: 0x50, Size: 0x4] 0x78ce3b6b00
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78ce3b6b80

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x440, Size: 0x8] 0x78ce3b6c00
	float Intensity;//[Offset: 0x448, Size: 0x4] 0x78ce3b6c80
	float Tightness;//[Offset: 0x44c, Size: 0x4] 0x78ce3b6d00
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1] 0x78ce3b6d80
	void SetIntensity(float NewIntensity);// 0xb1caddc 0x78ce3a7240

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x220, Size: 0x8] 0x78ce3b6980

--------------------------------
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object
	void RemoveDisplayDelegate(const int IndexToRemove);// 0xb1cba34 0x78ce3a6fa0
	void AddTimedDisplay(FText text, LinearColor Color, float Duration);// 0xb1cbbb4 0x78ce3a7080
	int AddDisplayDelegate(out const delegate Delegate);// 0xb1cbadc 0x78ce3a7160

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexturePoolConfig.Object
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4] 0x78ce3b8400
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10] 0x78ce9d9660

--------------------------------
Class: VirtualTextureSpacePoolConfig
	int MinTileSize;//[Offset: 0x0, Size: 0x4] 0x78cf0f7f80
	int MaxTileSize;//[Offset: 0x4, Size: 0x4] 0x78cf0f8000
	byte[] Formats;//[Offset: 0x8, Size: 0x10] 0x78cf089ca0
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4] 0x78cf0f8100
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cf0f8180
	uint32 ScalabilityGroup;//[Offset: 0x20, Size: 0x4] 0x78cf0f8200

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	static void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0xb1ceca0 0x78ce3a6a60
	static void LogText(Object* WorldContextObject, FString text, FName LogCategory, bool bAddToMessageLog);// 0xb1ceab4 0x78ce3a6b40
	static void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0xb1ce1fc 0x78ce3a6c20
	static void LogLocation(Object* WorldContextObject, Vector Location, FString text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0xb1ce7d0 0x78ce3a6d00
	static void LogBox(Object* WorldContextObject, Box BoxShape, FString text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0xb1ce548 0x78ce3a6de0
	static void EnableRecording(bool bEnabled);// 0xb1ced80 0x78ce3a6ec0

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xb0, Size: 0x18] 0x78ce3b9400
	void RegisterWithPlayerState(PlayerState* OwningState);// 0xb1d3440 0x78ce3a6600
	float GetVoiceLevel();// 0xb1d340c 0x78ce3a66e0
	static VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0xb1d34e8 0x78ce3a67c0
	void BPOnTalkingEnd();// 0xb1d3340 0x78ce3a68a0
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0xb1d335c 0x78ce3a6980

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8] 0x78cf0f7e00
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8] 0x78cf0f7e80
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8] 0x78cf0f7f00

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	static void SetMicThreshold(float InThreshold);// 0xb1d3c24 0x78ce3a6520

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x1f4, Size: 0x4] 0x78ce3b8580
	float LayerHeight;//[Offset: 0x1f8, Size: 0x4] 0x78ce3b8600
	float TracingStartMaxDistance;//[Offset: 0x1fc, Size: 0x4] 0x78ce3b8680
	float TracingMaxDistance;//[Offset: 0x200, Size: 0x4] 0x78ce3b8700
	float PlanetRadius;//[Offset: 0x204, Size: 0x4] 0x78ce3b8780
	Color GroundAlbedo;//[Offset: 0x208, Size: 0x4] 0x78ce3b8800
	MaterialInterface* Material;//[Offset: 0x210, Size: 0x8] 0x78ce3b8880
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78ce3b8900
	float SkyLightCloudBottomOcclusion;//[Offset: 0x21c, Size: 0x4] 0x78ce3b8980
	float ViewSampleCountScale;//[Offset: 0x220, Size: 0x4] 0x78ce3b8a00
	float ReflectionSampleCountScale;//[Offset: 0x224, Size: 0x4] 0x78ce3b8a80
	float ShadowViewSampleCountScale;//[Offset: 0x228, Size: 0x4] 0x78ce3b8b00
	float ShadowReflectionSampleCountScale;//[Offset: 0x22c, Size: 0x4] 0x78ce3b8b80
	float ShadowTracingDistance;//[Offset: 0x230, Size: 0x4] 0x78ce3b8c00
	void SetViewSampleCountScale(float NewValue);// 0xb1d4b4c 0x78ce3a58e0
	void SetTracingStartMaxDistance(float NewValue);// 0xb1d4f40 0x78ce3a59c0
	void SetTracingMaxDistance(float NewValue);// 0xb1d4e98 0x78ce3a5aa0
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0xb1d4bf4 0x78ce3a5b80
	void SetShadowViewSampleCountScale(float NewValue);// 0xb1d49fc 0x78ce3a5c60
	void SetShadowTracingDistance(float NewValue);// 0xb1d48ac 0x78ce3a5d40
	void SetShadowReflectionSampleCountScale(float NewValue);// 0xb1d4954 0x78ce3a5e20
	void SetReflectionSampleCountScale(float NewValue);// 0xb1d4aa4 0x78ce3a5f00
	void SetPlanetRadius(float NewValue);// 0xb1d4df0 0x78ce3a5fe0
	void SetMaterial(MaterialInterface* NewValue);// 0xb1d4804 0x78ce3a60c0
	void SetLayerHeight(float NewValue);// 0xb1d4fe8 0x78ce3a61a0
	void SetLayerBottomAltitude(float NewValue);// 0xb1d5090 0x78ce3a6280
	void SetGroundAlbedo(Color NewValue);// 0xb1d4d4c 0x78ce3a6360
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0xb1d4c9c 0x78ce3a6440

--------------------------------
Class: VolumetricCloud.Info.Actor.Object
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x220, Size: 0x8] 0x78ce3b8500

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x258, Size: 0x8] 0x78ce3b8480

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4] 0x78ea089200
	int Max;//[Offset: 0x4, Size: 0x4] 0x78ea089280

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x220, Size: 0x8] 0x78ce3ba500

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x1f4, Size: 0x4] 0x78ce3b9f00
	float Speed;//[Offset: 0x1f8, Size: 0x4] 0x78ce3b9f80
	float MinGustAmount;//[Offset: 0x1fc, Size: 0x4] 0x78ce3ba000
	float MaxGustAmount;//[Offset: 0x200, Size: 0x4] 0x78ce3ba080
	float Radius;//[Offset: 0x204, Size: 0x4] 0x78ce3ba100
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78ce3ba180
	void SetWindType(enum InNewType);// 0xb1d6668 0x78ce3a8d60
	void SetStrength(float InNewStrength);// 0xb1d69b0 0x78ce3a8e40
	void SetSpeed(float InNewSpeed);// 0xb1d6908 0x78ce3a8f20
	void SetRadius(float InNewRadius);// 0xb1d6710 0x78ce3a9000
	void SetMinimumGustAmount(float InNewMinGust);// 0xb1d6860 0x78ce3a5720
	void SetMaximumGustAmount(float InNewMaxGust);// 0xb1d67b8 0x78ce3a5800

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10] 0x78ce9db820
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28] 0x78ce3bab80

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4] 0x78cf0f8e00
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4] 0x78cf0f8e80
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf0f8f00
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x78cf0f8f80
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x78cf0f9000
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x78cf0f9080
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x78cf0f9100
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xa8] 0x78cf0f9180
	MeshMergingSettings MergeSetting;//[Offset: 0xb4, Size: 0xa0] 0x78cf0f9200
	float DesiredBoundRadius;//[Offset: 0x154, Size: 0x4] 0x78cf0f9280
	float DesiredFillingPercentage;//[Offset: 0x158, Size: 0x4] 0x78cf0f9300
	int MinNumberOfActorsToBuild;//[Offset: 0x15c, Size: 0x4] 0x78cf0f9380

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4] 0x78cf0c6400
	float VoxelSize;//[Offset: 0x4, Size: 0x4] 0x78cf0c6480
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x88] 0x78cf0c6500
	float MergeDistance;//[Offset: 0x90, Size: 0x4] 0x78cf0c6580
	Color UnresolvedGeometryColor;//[Offset: 0x94, Size: 0x4] 0x78cf0c6600
	float MaxRayCastDist;//[Offset: 0x98, Size: 0x4] 0x78cf0c6680
	float HardAngleThreshold;//[Offset: 0x9c, Size: 0x4] 0x78cf0c6700
	int LightMapResolution;//[Offset: 0xa0, Size: 0x4] 0x78cf0c6780
	byte NormalCalculationMethod;//[Offset: 0xa4, Size: 0x1] 0x78cf0c6800
	byte LandscapeCullingPrecision;//[Offset: 0xa5, Size: 0x1] 0x78cf0c6880
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6, Size: 0x1] 0x78cf0c6900
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa6, Size: 0x1] 0x78cf0c6980
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1] 0x78cf0c6a00
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1] 0x78cf0c6a80
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa6, Size: 0x1] 0x78cf0c6b00
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa6, Size: 0x1] 0x78cf0c6b80
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa6, Size: 0x1] 0x78cf0c6c00
	bool bAllowAdjacency;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa6, Size: 0x1] 0x78cf0c6c80
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa7, Size: 0x1] 0x78cf0c6d00
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa7, Size: 0x1] 0x78cf0c6d80
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa7, Size: 0x1] 0x78cf0c6e00
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa7, Size: 0x1] 0x78cf0c6e80
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa7, Size: 0x1] 0x78cf0c6f00

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8] 0x78cf0c0080
	float GutterSpace;//[Offset: 0x8, Size: 0x4] 0x78cf0c0100
	float MetallicConstant;//[Offset: 0xc, Size: 0x4] 0x78cf0c0180
	float RoughnessConstant;//[Offset: 0x10, Size: 0x4] 0x78cf0c0200
	float AnisotropyConstant;//[Offset: 0x14, Size: 0x4] 0x78cf0c0280
	float SpecularConstant;//[Offset: 0x18, Size: 0x4] 0x78cf0c0300
	float OpacityConstant;//[Offset: 0x1c, Size: 0x4] 0x78cf0c0380
	float OpacityMaskConstant;//[Offset: 0x20, Size: 0x4] 0x78cf0c0400
	float AmbientOcclusionConstant;//[Offset: 0x24, Size: 0x4] 0x78cf0c0480
	byte TextureSizingType;//[Offset: 0x28, Size: 0x1] 0x78cf0c0500
	byte MaterialMergeType;//[Offset: 0x29, Size: 0x1] 0x78cf0c0580
	byte BlendMode;//[Offset: 0x2a, Size: 0x1] 0x78cf0c0600
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78cf0c0680
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78cf0c0700
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78cf0c0780
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x78cf0c0800
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x78cf0c0880
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x78cf0c0900
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x78cf0c0980
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x78cf0c0a00
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78cf0c0a80
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x78cf0c0b00
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x78cf0c0b80
	IntPoint DiffuseTextureSize;//[Offset: 0x30, Size: 0x8] 0x78cf0c0c00
	IntPoint NormalTextureSize;//[Offset: 0x38, Size: 0x8] 0x78cf0c0c80
	IntPoint TangentTextureSize;//[Offset: 0x40, Size: 0x8] 0x78cf0c0d00
	IntPoint MetallicTextureSize;//[Offset: 0x48, Size: 0x8] 0x78cf0c0d80
	IntPoint RoughnessTextureSize;//[Offset: 0x50, Size: 0x8] 0x78cf0c0e00
	IntPoint AnisotropyTextureSize;//[Offset: 0x58, Size: 0x8] 0x78cf0c0e80
	IntPoint SpecularTextureSize;//[Offset: 0x60, Size: 0x8] 0x78cf0c0f00
	IntPoint EmissiveTextureSize;//[Offset: 0x68, Size: 0x8] 0x78cf0c0f80
	IntPoint OpacityTextureSize;//[Offset: 0x70, Size: 0x8] 0x78cf0c1000
	IntPoint OpacityMaskTextureSize;//[Offset: 0x78, Size: 0x8] 0x78cf0c1080
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x80, Size: 0x8] 0x78cf0af800

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4] 0x78cf0c6f80
	enum OutputUVs;//[Offset: 0x4, Size: 0x1] 0x78cf085740
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x88] 0x78cf0c7080
	int GutterSize;//[Offset: 0x94, Size: 0x4] 0x78cf0c7100
	int SpecificLOD;//[Offset: 0x98, Size: 0x4] 0x78cf0c7180
	enum LODSelectionType;//[Offset: 0x9c, Size: 0x1] 0x78cf0857e0
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 0x1] 0x78cf0c7280
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d, Size: 0x1] 0x78cf0c7300
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d, Size: 0x1] 0x78cf0c7380
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9d, Size: 0x1] 0x78cf0c5300
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d, Size: 0x1] 0x78cf0c5380
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d, Size: 0x1] 0x78cf0c5400
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d, Size: 0x1] 0x78cf0c5480
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d, Size: 0x1] 0x78cf0c5500
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1] 0x78cf0c5580
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 0x1] 0x78cf0c5600
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9e, Size: 0x1] 0x78cf0c5680
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9e, Size: 0x1] 0x78cf0c5700
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9e, Size: 0x1] 0x78cf0c5780
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9e, Size: 0x1] 0x78cf0c5800

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: DestructibleActor.Actor.Object
	DestructibleComponent* DestructibleComponent;//[Offset: 0x220, Size: 0x8] 0x78cf166280
	delegate OnActorFracture;//[Offset: 0x228, Size: 0x10] 0x78cf166300

--------------------------------
Class: DestructibleComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFractureEffectOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x690, Size: 0x1] 0x78cf16a380
	FractureEffect[] FractureEffects;//[Offset: 0x698, Size: 0x10] 0x78cf08c400
	bool bEnableHardSleeping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1] 0x78cf16a480
	float LargeChunkThreshold;//[Offset: 0x6ac, Size: 0x4] 0x78cf16a500
	delegate OnComponentFracture;//[Offset: 0x6b0, Size: 0x10] 0x78cf168480
	void SetDestructibleMesh(DestructibleMesh* NewMesh);// 0x7142718 0x78cef77240
	DestructibleMesh* GetDestructibleMesh();// 0x71426e4 0x78cef77320
	void ApplyRadiusDamage(float BaseDamage, out const Vector HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);// 0x71427c0 0x78cef73a40
	void ApplyDamage(float DamageAmount, out const Vector HitLocation, out const Vector ImpulseDir, float ImpulseStrength);// 0x71429a0 0x78cef73b20

--------------------------------
Class: FractureEffect
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 0x8] 0x78cf0a8b00
	SoundBase* Sound;//[Offset: 0x8, Size: 0x8] 0x78cf0a8b80

--------------------------------
Class: DestructibleMesh.SkeletalMesh.StreamableRenderAsset.Object
	DestructibleParameters DefaultDestructibleParameters;//[Offset: 0x398, Size: 0x88] 0x78cf16c280
	FractureEffect[] FractureEffects;//[Offset: 0x420, Size: 0x10] 0x78cf08baa0

--------------------------------
Class: DestructibleParameters
	DestructibleDamageParameters DamageParameters;//[Offset: 0x0, Size: 0x1c] 0x78cef81a80
	DestructibleDebrisParameters DebrisParameters;//[Offset: 0x1c, Size: 0x2c] 0x78cef81d80
	DestructibleAdvancedParameters AdvancedParameters;//[Offset: 0x48, Size: 0x10] 0x78cef82000
	DestructibleSpecialHierarchyDepths SpecialHierarchyDepths;//[Offset: 0x58, Size: 0x14] 0x78cef80200
	DestructibleDepthParameters[] DepthParameters;//[Offset: 0x70, Size: 0x10] 0x78cee545c0
	DestructibleParametersFlag Flags;//[Offset: 0x80, Size: 0x4] 0x78cef80800

--------------------------------
Class: DestructibleDamageParameters
	float DamageThreshold;//[Offset: 0x0, Size: 0x4] 0x78cef81700
	float DamageSpread;//[Offset: 0x4, Size: 0x4] 0x78cef81780
	bool bEnableImpactDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cef81800
	float ImpactDamage;//[Offset: 0xc, Size: 0x4] 0x78cef81880
	int DefaultImpactDamageDepth;//[Offset: 0x10, Size: 0x4] 0x78cef81900
	bool bCustomImpactResistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78cef81980
	float ImpactResistance;//[Offset: 0x18, Size: 0x4] 0x78cef81a00

--------------------------------
Class: DestructibleDebrisParameters
	float DebrisLifetimeMin;//[Offset: 0x0, Size: 0x4] 0x78cef81b00
	float DebrisLifetimeMax;//[Offset: 0x4, Size: 0x4] 0x78cef81b80
	float DebrisMaxSeparationMin;//[Offset: 0x8, Size: 0x4] 0x78cef81c00
	float DebrisMaxSeparationMax;//[Offset: 0xc, Size: 0x4] 0x78cef81c80
	Box ValidBounds;//[Offset: 0x10, Size: 0x1c] 0x78cef81d00

--------------------------------
Class: DestructibleAdvancedParameters
	float DamageCap;//[Offset: 0x0, Size: 0x4] 0x78cef81e00
	float ImpactVelocityThreshold;//[Offset: 0x4, Size: 0x4] 0x78cef81e80
	float MaxChunkSpeed;//[Offset: 0x8, Size: 0x4] 0x78cef81f00
	float FractureImpulseScale;//[Offset: 0xc, Size: 0x4] 0x78cef81f80

--------------------------------
Class: DestructibleSpecialHierarchyDepths
	int SupportDepth;//[Offset: 0x0, Size: 0x4] 0x78cef82080
	int MinimumFractureDepth;//[Offset: 0x4, Size: 0x4] 0x78cef82100
	bool bEnableDebris;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cef80080
	int DebrisDepth;//[Offset: 0xc, Size: 0x4] 0x78cef80100
	int EssentialDepth;//[Offset: 0x10, Size: 0x4] 0x78cef80180

--------------------------------
Class: DestructibleDepthParameters
	byte ImpactDamageOverride;//[Offset: 0x0, Size: 0x1] 0x78cef80280

--------------------------------
Class: DestructibleParametersFlag
	bool bAccumulateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cef80380
	bool bAssetDefinedSupport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cef80400
	bool bWorldSupport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cef80480
	bool bDebrisTimeout;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cef80500
	bool bDebrisMaxSeparation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cef80580
	bool bCrumbleSmallestChunks;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cef80600
	bool bAccurateRaycasts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cef80680
	bool bUseValidBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cef80700
	bool bFormExtendedStructures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cef80780

--------------------------------
Class: DestructibleFractureSettings.Object
	int CellSiteCount;//[Offset: 0x28, Size: 0x4] 0x78cf16a000
	FractureMaterial FractureMaterialDesc;//[Offset: 0x2c, Size: 0x24] 0x78cf16a080
	int RandomSeed;//[Offset: 0x50, Size: 0x4] 0x78cf16a100
	Vector[] VoronoiSites;//[Offset: 0x58, Size: 0x10] 0x78cf08c220
	int OriginalSubmeshCount;//[Offset: 0x68, Size: 0x4] 0x78cf16a200
	MaterialInterface*[] Materials;//[Offset: 0x70, Size: 0x10] 0x78cf08c2c0
	DestructibleChunkParameters[] ChunkParameters;//[Offset: 0x80, Size: 0x10] 0x78cf08c360

--------------------------------
Class: FractureMaterial
	Vector2D UVScale;//[Offset: 0x0, Size: 0x8] 0x78cef80880
	Vector2D UVOffset;//[Offset: 0x8, Size: 0x8] 0x78cef80900
	Vector Tangent;//[Offset: 0x10, Size: 0xc] 0x78cef80980
	float UAngle;//[Offset: 0x1c, Size: 0x4] 0x78cef80a00
	int InteriorElementIndex;//[Offset: 0x20, Size: 0x4] 0x78cef80a80

--------------------------------
Class: DestructibleChunkParameters
	bool bIsSupportChunk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cef80b00
	bool bDoNotFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cef80b80
	bool bDoNotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cef80c00
	bool bDoNotCrumble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cef80c80

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10] 0x78cf08e2a0
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10] 0x78cf08ba00

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x78cef81500
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8] 0x78cef81580

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x78cef81600
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10] 0x78cef81680

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x8a873f8 0x78cef76520
	void OnMatchEnded(FString Match);// 0x8a873f8 0x78cef76600

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10] 0x78cf16be80

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	static bool CheckPermission(FString permission);// 0x726df04 0x78cef76280
	static AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0x726de10 0x78cef76360

--------------------------------
Class: ReplicationGraph.ReplicationDriver.Object
	class NetReplicationGraphConnection* ReplicationConnectionManagerClass;//[Offset: 0x28, Size: 0x8] 0x78cf08dda0
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x78cf16ba00
	NetReplicationGraphConnection*[] Connections;//[Offset: 0x38, Size: 0x10] 0x78cf08de40
	NetReplicationGraphConnection*[] PendingConnections;//[Offset: 0x48, Size: 0x10] 0x78cf08dee0
	ReplicationGraphNode*[] GlobalGraphNodes;//[Offset: 0x98, Size: 0x10] 0x78cf08df80
	ReplicationGraphNode*[] PrepareForReplicationNodes;//[Offset: 0xa8, Size: 0x10] 0x78cf08e020

--------------------------------
Class: NetReplicationGraphConnection.ReplicationConnectionDriver.Object
	NetConnection* NetConnection;//[Offset: 0x28, Size: 0x8] 0x78cf16d380
	ReplicationGraphDebugActor* DebugActor;//[Offset: 0x170, Size: 0x8] 0x78cf16d400
	LastLocationGatherInfo[] LastGatherLocations;//[Offset: 0x188, Size: 0x10] 0x78cf08d940
	ReplicationGraphNode*[] ConnectionGraphNodes;//[Offset: 0x1a0, Size: 0x10] 0x78cf08d9e0
	ReplicationGraphNode_TearOff_ForConnection* TearOffNode;//[Offset: 0x1b0, Size: 0x8] 0x78cf16d580

--------------------------------
Class: ReplicationGraphDebugActor.Actor.Object
	ReplicationGraph* ReplicationGraph;//[Offset: 0x220, Size: 0x8] 0x78cf16cf00
	NetReplicationGraphConnection* ConnectionManager;//[Offset: 0x228, Size: 0x8] 0x78cf16cf80
	void ServerStopDebugging();// 0x72a7d74 0x78cef75aa0
	void ServerStartDebugging();// 0x72a7d90 0x78cef75b80
	void ServerSetPeriodFrameForClass(class Object Class, int PeriodFrame);// 0x72a7aa4 0x78cef75c60
	void ServerSetCullDistanceForClass(class Object Class, float CullDistance);// 0x72a7ba0 0x78cef75d40
	void ServerSetConditionalActorBreakpoint(Actor* Actor);// 0x72a79f4 0x78cef75e20
	void ServerPrintCullDistances();// 0x72a79d8 0x78cef75f00
	void ServerPrintAllActorInfo(FString str);// 0x72a7c9c 0x78cef75fe0
	void ServerCellInfo();// 0x72a7d58 0x78cef760c0
	void ClientCellInfo(Vector CellLocation, Vector CellExtent, const Actor*[] Actors);// 0x72a7888 0x78cef761a0

--------------------------------
Class: LastLocationGatherInfo
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x78cef81180
	Vector LastLocation;//[Offset: 0x8, Size: 0xc] 0x78cef81200
	Vector LastOutOfRangeLocationCheck;//[Offset: 0x14, Size: 0xc] 0x78cef81280

--------------------------------
Class: ReplicationGraphNode.Object
	ReplicationGraphNode*[] AllChildNodes;//[Offset: 0x28, Size: 0x10] 0x78cf08dbc0

--------------------------------
Class: ReplicationGraphNode_TearOff_ForConnection.ReplicationGraphNode.Object
	TearOffActorInfo[] TearOffActors;//[Offset: 0x50, Size: 0x10] 0x78cf08da80

--------------------------------
Class: TearOffActorInfo
	Actor* Actor;//[Offset: 0x8, Size: 0x8] 0x78cef83180

--------------------------------
Class: BasicReplicationGraph.ReplicationGraph.ReplicationDriver.Object
	ReplicationGraphNode_GridSpatialization2D* GridNode;//[Offset: 0x498, Size: 0x8] 0x78cf16b800
	ReplicationGraphNode_ActorList* AlwaysRelevantNode;//[Offset: 0x4a0, Size: 0x8] 0x78cf16b880
	ConnectionAlwaysRelevantNodePair[] AlwaysRelevantForConnectionList;//[Offset: 0x4a8, Size: 0x10] 0x78cf08dc60
	Actor*[] ActorsWithoutNetConnection;//[Offset: 0x4b8, Size: 0x10] 0x78cf08dd00

--------------------------------
Class: ReplicationGraphNode_GridSpatialization2D.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ConnectionAlwaysRelevantNodePair
	NetConnection* NetConnection;//[Offset: 0x0, Size: 0x8] 0x78cef81300
	ReplicationGraphNode_AlwaysRelevant_ForConnection* Node;//[Offset: 0x8, Size: 0x8] 0x78cef81380

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant_ForConnection.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	AlwaysRelevantActorInfo[] PastRelevantActors;//[Offset: 0x110, Size: 0x10] 0x78cf08db20

--------------------------------
Class: AlwaysRelevantActorInfo
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x78cef83000
	Actor* LastViewer;//[Offset: 0x8, Size: 0x8] 0x78cef83080
	Actor* LastViewTarget;//[Offset: 0x10, Size: 0x8] 0x78cef83100

--------------------------------
Class: ReplicationGraphNode_ActorListFrequencyBuckets.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_DynamicSpatialFrequency.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_ConnectionDormancyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_DormancyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_GridCell.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	ReplicationGraphNode* DynamicNode;//[Offset: 0x140, Size: 0x8] 0x78cf16b680
	ReplicationGraphNode_DormancyNode* DormancyNode;//[Offset: 0x148, Size: 0x8] 0x78cf16b700

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant.ReplicationGraphNode.Object
	ReplicationGraphNode* ChildNode;//[Offset: 0x50, Size: 0x8] 0x78cf16b600

--------------------------------
Class: WebBrowser.Widget.Visual.Object
	delegate OnUrlChanged;//[Offset: 0x108, Size: 0x10] 0x78cf16c880
	delegate OnBeforePopup;//[Offset: 0x118, Size: 0x10] 0x78cf16c900
	FString InitialURL;//[Offset: 0x128, Size: 0x10] 0x78cf16c980
	bool bSupportsTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78cf16ca00
	void OnUrlChanged__DelegateSignature(out const FText text);// 0x8a873f8 0x78cef78e40
	void OnBeforePopup__DelegateSignature(FString URL, FString Frame);// 0x8a873f8 0x78cef78f20
	void LoadUrl(FString NewURL);// 0x72af5b0 0x78cef79000
	void LoadString(FString Contents, FString DummyURL);// 0x72af414 0x78cef75720
	FString GetUrl();// 0x72af1e0 0x78cef75800
	FText GetTitleText();// 0x72af290 0x78cef758e0
	void ExecuteJavascript(FString ScriptText);// 0x72af360 0x78cef759c0

--------------------------------
Class: WebBrowserAssetManager.Object
	Material* DefaultMaterial;//[Offset: 0x28, Size: 0x28] 0x78cf16c800

--------------------------------
Class: LocationServicesImpl.Object
	delegate OnLocationChanged;//[Offset: 0x28, Size: 0x10] 0x78cf16c780

--------------------------------
Class: LocationServicesAndroidImpl.LocationServicesImpl.Object

--------------------------------
Class: LocationServices.BlueprintFunctionLibrary.Object
	static bool StopLocationServices();// 0x72b2640 0x78cef78820
	static bool StartLocationServices();// 0x72b2678 0x78cef78900
	static bool IsLocationAccuracyAvailable(enum Accuracy);// 0x72b24f0 0x78cef789e0
	static bool InitLocationServices(enum Accuracy, float UpdateFrequency, float MinDistanceFilter);// 0x72b26b0 0x78cef78ac0
	static LocationServicesImpl* GetLocationServicesImpl();// 0x72b24cc 0x78cef78ba0
	static LocationServicesData GetLastKnownLocation();// 0x72b25d4 0x78cef78c80
	static bool AreLocationServicesEnabled();// 0x72b259c 0x78cef78d60

--------------------------------
Class: LocationServicesData
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x78cf93de80
	float Longitude;//[Offset: 0x4, Size: 0x4] 0x78cf93df00
	float Latitude;//[Offset: 0x8, Size: 0x4] 0x78cf93df80
	float HorizontalAccuracy;//[Offset: 0xc, Size: 0x4] 0x78cf93e000
	float VerticalAccuracy;//[Offset: 0x10, Size: 0x4] 0x78cf93e080
	float Altitude;//[Offset: 0x14, Size: 0x4] 0x78cf93e300

--------------------------------
Class: ThinkingAnalytics.Object
	static void UserUnset(FString Property);// 0x72cb224 0x78cef774e0
	static void UserSetOnce(FString Properties);// 0x72cb3b8 0x78cef775c0
	static void UserSet(FString Properties);// 0x72cb45c 0x78cef776a0
	static void UserDelete();// 0x72cb16c 0x78cef77780
	static void UserAppend(FString Properties);// 0x72cb180 0x78cef77860
	static void UserAdd(FString Property, const float Value);// 0x72cb2c8 0x78cef77940
	static void TrackUpdate(FString EventName, FString Properties, FString EventId);// 0x72cb6f8 0x78cef77a20
	static void TrackOverwrite(FString EventName, FString Properties, FString EventId);// 0x72cb5a4 0x78cef77b00
	static void TrackFirstWithId(FString EventName, FString Properties, FString FirstCheckId);// 0x72cb84c 0x78cef77be0
	static void TrackFirst(FString EventName, FString Properties);// 0x72cb9a0 0x78cef77cc0
	static void Track(FString EventName, FString Properties);// 0x72cba9c 0x78cef77da0
	static void TimeEvent(FString EventName);// 0x72cb500 0x78cef77e80
	static void OptOutTracking();// 0x72cafe8 0x78cef77f60
	static void OptInTracking();// 0x72cafd4 0x78cef78040
	static void Logout();// 0x72cb010 0x78cef78120
	static void Login(FString AccountId);// 0x72cb024 0x78cef78200
	static void Initialize();// 0x72cbc44 0x78cef782e0
	static void Identify(FString DistinctId);// 0x72cb0c8 0x78cef783c0
	static void Flush();// 0x72caffc 0x78cef784a0
	static void EnableTracking(bool bIsEnable);// 0x72caf34 0x78cef78580
	static void EnableAutoTrack();// 0x72cbb98 0x78cef78660
	static void CalibrateTime(int64 Timestamp);// 0x72cbbac 0x78cef78740

--------------------------------
Class: ThinkingAnalyticsFunction.Object
	static void StandaloneTaoLiTrackWindPointFly(FString WindPointName);// 0x72cd9e4 0x78cef7c560
	static void StandaloneTaoLiTrackTrajectory(int AreaID, bool bEnter, bool bFirst);// 0x72cda88 0x78cef7c640
	static void StandaloneLiteTrackWindPointFly(FString WindPointName);// 0x72cdbc4 0x78cef7c720
	static void StandaloneLiteTrackTrajectory(int AreaID, bool bEnter, bool bFirst);// 0x72cdc68 0x78cef7c800
	static void SendSubmitRealNameAuthenticationEvent(FString Name, FString IdCard);// 0x72cd6f4 0x78cef7c8e0
	static void SendStepGuideEvent(int GuideTypeIndex, int StepIndex);// 0x72ce35c 0x78cef7c9c0
	static void SendStartGuideEvent(int GuideTypeIndex);// 0x72ce4d4 0x78cef790e0
	static void SendRewardGuideEvent(int GuideTypeIndex);// 0x72ce604 0x78cef791c0
	static void SendReturnRealNameAuthenticationEvent(FString Result);// 0x72cd650 0x78cef792a0
	static void SendRequestTokenEvent();// 0x72cd560 0x78cef79380
	static void SendPrivacyLog(FString LogContext);// 0x72cc750 0x78cef79460
	static void SendOpenGameEvent(bool IsFirst);// 0x72cd5b0 0x78cef79540
	static void SendNewerGuide(int stepId, FString guideStartTime);// 0x72ceb08 0x78cef79620
	static void SendLoadingMap(FString DeviceName, FString mapName, float loadTime);// 0x72cde94 0x78cef79700
	static void SendHallShowEvent(FString SkinType, FString SkinChildType, int EquipId, int RemoveId);// 0x72cd22c 0x78cef797e0
	static void SendHallGvoiceJoinTeamVoiceRoom(FString TeamName, int SetModeRet, int JoinTeamRoomRet);// 0x72cc8e4 0x78cef798c0
	static void SendHallGvoiceExitTeamVoiceRoom(FString TeamName, int QuitRoomRet);// 0x72cc7f4 0x78cef799a0
	static void SendGvoiceOnQuitRoom(int code, FString TeamName, FString RoomName, FString RoomNameRet, int RoomVoiceId, int TeamVoiceId);// 0x72cca1c 0x78cef79a80
	static void SendGvoiceOnJoinRoom(int code, FString TeamName, FString RoomName, FString RoomNameRet, int RoomVoiceId, int TeamVoiceId);// 0x72ccc50 0x78cef79b60
	static void SendGvoiceJoinEvent(FString TeamName, FString RoomName, int SetModeRet, int EnableMultiRoomRet, int JoinTeamRoomRet, int JoinRangeRoomRet);// 0x72cce84 0x78cef79c40
	static void SendGvoiceInitializeEvent(FString Account, int SetAppInfoRet, int InitRet, int SetNotifyRet);// 0x72cd0a8 0x78cef79d20
	static void SendFinishRequestTokenEvent();// 0x72cd54c 0x78cef79e00
	static void SendFinishInitializeEvent();// 0x72cd588 0x78cef79ee0
	static void SendFinishHotUpdateEvent();// 0x72cd59c 0x78cef79fc0
	static void SendEquipSkinEvent(FString SkinType, FString SkinChildType, int EquipId, int RemoveId);// 0x72cd3bc 0x78cef7a0a0
	static void SendEnterRealNameAuthenticationEvent();// 0x72cd7f0 0x78cef7a180
	static void SendEnterGuideEvent(int GuideTypeIndex);// 0x72ce56c 0x78cef7a260
	static void SendEndMatch(int matchTime);// 0x72ce928 0x78cef7a340
	static void SendDeviceInfo(FString DeviceMake, FString DeviceName, FString CPUName, float cpuFrequency, int RecommendQualityLevel, FString macAddress);// 0x72ce080 0x78cef7a420
	static void SendChooseLoginTypeEvent();// 0x72cd574 0x78cef7a500
	static void SendChooseGuideEvent(bool bIsChooseGuide);// 0x72ce69c 0x78cef7a5e0
	static void SendChannel(FString Channel);// 0x72cdfdc 0x78cef7a6c0
	static void SendBreakGuideEvent(int GuideTypeIndex);// 0x72ce43c 0x78cef7a7a0
	static void SendBeginReady(FString GameMode, FString teammode, int TeamNum);// 0x72ce73c 0x78cef7a880
	static void SendBeginMatch(FString GameMode, FString teammode, int TeamNum);// 0x72ce9c0 0x78cef7a960
	static void SendBaseGuideEvent(int StageIndex);// 0x72ce2c4 0x78cef7aa40
	static void SendAvgFPS(FString DeviceName, float avgFPS);// 0x72cdda4 0x78cef7ab20
	static void LoginDeviceType(FString DeviceType);// 0x72ce884 0x78cef7ac00
	static void AdvancedGuideTrackWindPointFly(FString WindPointName);// 0x72cd804 0x78cef7ace0
	static void AdvancedGuideTrackTrajectory(int AreaID, bool bEnter, bool bFirst);// 0x72cd8a8 0x78cef77400

--------------------------------
Class: ThinkingAnalyticsSettings.Object
	FString ServerUrl;//[Offset: 0x28, Size: 0x10] 0x78cf1c1d00
	FString AppID;//[Offset: 0x38, Size: 0x10] 0x78cf1c1d80
	enum Mode;//[Offset: 0x48, Size: 0x1] 0x78cf08d580
	bool bEnableLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78cf1c1e80
	FString TimeZone;//[Offset: 0x50, Size: 0x10] 0x78cf1c1f00

--------------------------------
Class: AnalyticsBlueprintLibrary.BlueprintFunctionLibrary.Object
	static bool StartSessionWithAttributes(out const AnalyticsEventAttr[] Attributes);// 0x72d4ec4 0x78cef7e5c0
	static bool StartSession();// 0x72d4fcc 0x78cef7e6a0
	static void SetUserID(FString UserId);// 0x72d3c00 0x78cef7adc0
	static void SetSessionId(FString SessionId);// 0x72d3d54 0x78cef7aea0
	static void SetLocation(FString Location);// 0x72d3ac4 0x78cef7af80
	static void SetGender(FString Gender);// 0x72d3a20 0x78cef7b060
	static void SetBuildInfo(FString BuildInfo);// 0x72d397c 0x78cef7b140
	static void SetAge(int Age);// 0x72d3b68 0x78cef7b220
	static void RecordSimpleItemPurchaseWithAttributes(FString ItemId, int ItemQuantity, out const AnalyticsEventAttr[] Attributes);// 0x72d4730 0x78cef7b300
	static void RecordSimpleItemPurchase(FString ItemId, int ItemQuantity);// 0x72d48d0 0x78cef7b3e0
	static void RecordSimpleCurrencyPurchaseWithAttributes(FString GameCurrencyType, int GameCurrencyAmount, out const AnalyticsEventAttr[] Attributes);// 0x72d44a0 0x78cef7b4c0
	static void RecordSimpleCurrencyPurchase(FString GameCurrencyType, int GameCurrencyAmount);// 0x72d4640 0x78cef7b5a0
	static void RecordProgressWithFullHierarchyAndAttributes(FString ProgressType, out const FString[] ProgressNames, out const AnalyticsEventAttr[] Attributes);// 0x72d35a0 0x78cef7b680
	static void RecordProgressWithAttributes(FString ProgressType, FString ProgressName, out const AnalyticsEventAttr[] Attributes);// 0x72d33f4 0x78cef7b760
	static void RecordProgress(FString ProgressType, FString ProgressName);// 0x72d32f8 0x78cef7b840
	static void RecordItemPurchase(FString ItemId, FString Currency, int PerItemCost, int ItemQuantity);// 0x72d49c0 0x78cef7b920
	static void RecordEventWithAttributes(FString EventName, out const AnalyticsEventAttr[] Attributes);// 0x72d4b50 0x78cef7ba00
	static void RecordEventWithAttribute(FString EventName, FString AttributeName, FString AttributeValue);// 0x72d4ca4 0x78cef7bae0
	static void RecordEvent(FString EventName);// 0x72d4df8 0x78cef7bbc0
	static void RecordErrorWithAttributes(FString Error, out const AnalyticsEventAttr[] Attributes);// 0x72d3828 0x78cef7bca0
	static void RecordError(FString Error);// 0x72d3784 0x78cef7bd80
	static void RecordCurrencyPurchase(FString GameCurrencyType, int GameCurrencyAmount, FString RealCurrencyType, float RealMoneyCost, FString PaymentProvider);// 0x72d42b4 0x78cef7be60
	static void RecordCurrencyGivenWithAttributes(FString GameCurrencyType, int GameCurrencyAmount, out const AnalyticsEventAttr[] Attributes);// 0x72d4024 0x78cef7bf40
	static void RecordCurrencyGiven(FString GameCurrencyType, int GameCurrencyAmount);// 0x72d41c4 0x78cef7c020
	static AnalyticsEventAttr MakeEventAttribute(FString AttributeName, FString AttributeValue);// 0x72d3ea8 0x78cef7c100
	static FString GetUserID();// 0x72d3ca4 0x78cef7c1e0
	static FString GetSessionId();// 0x72d3df8 0x78cef7c2c0
	static void FlushEvents();// 0x72d4e9c 0x78cef7c3a0
	static void EndSession();// 0x72d4eb0 0x78cef7c480

--------------------------------
Class: AnalyticsEventAttr
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cef82b00
	FString Value;//[Offset: 0x10, Size: 0x10] 0x78cef82b80

--------------------------------
Class: FlibPakHelper.BlueprintFunctionLibrary.Object
	static bool UnMountPak(FString PakPath);// 0x7303f30 0x78cef7d8a0
	static bool SerializePakVersionToString(out const PakVersion InPakVersion, out FString OutString);// 0x7303a54 0x78cef7d980
	static bool ScanPlatformDirectory(FString InRelativePath, bool bIncludeFile, bool bIncludeDir, bool bRecursively, out FString[] OutResault);// 0x7303ba0 0x78cef7da60
	static FString[] ScanExtenPakFiles();// 0x73034f8 0x78cef7db40
	static bool ScanExtenFilesInDirectory(FString InRelativePath, FString InExtenPostfix, bool InRecursively, out FString[] OutFiles);// 0x7303728 0x78cef7dc20
	static FString[] ScanAllVersionDescribleFiles();// 0x7303610 0x78cef7dd00
	static bool MountPak(FString PakPath, int PakOrder, FString InMountPoint);// 0x7303fe8 0x78cef7dde0
	static bool LoadVersionInfoByPak(FString InPakFile, out PakVersion OutVersion);// 0x730326c 0x78cef7dec0
	static bool LoadFilesByPak(FString InPakFile, out FString[] OutFiles);// 0x73033a8 0x78cef7dfa0
	static bool LoadAssetRegistry(FString InAssetRegistryBin);// 0x7302fe8 0x78cef7e080
	static int GetPakOrderByPakPath(FString PakFile);// 0x73030a0 0x78cef7e160
	static FString[] GetAllMountedPaks();// 0x7303154 0x78cef7e240
	static void ExecMountPak(FString InPakPath, int InPakOrder, FString InMountPoint);// 0x7304144 0x78cef7e320
	static bool DeserializeStringToPakVersion(FString inString, out PakVersion OutPakVersion);// 0x7303918 0x78cef7e400
	static bool CreateFileByBytes(FString InFile, out const byte[] InBytes, int InWriteFlag);// 0x7303dd0 0x78cef7e4e0

--------------------------------
Class: PakVersion
	FString VersionId;//[Offset: 0x0, Size: 0x10] 0x78cef87280
	FString BaseVersionId;//[Offset: 0x10, Size: 0x10] 0x78cef87300
	FString Date;//[Offset: 0x20, Size: 0x10] 0x78cef87380
	FString CheckCode;//[Offset: 0x30, Size: 0x10] 0x78cef85300

--------------------------------
Class: FlibPakReader.BlueprintFunctionLibrary.Object
	static FString[] GetPakFileList(FString PakFilePath);// 0x7304cf8 0x78cef7d7c0

--------------------------------
Class: FlibPatchParserHelper.BlueprintFunctionLibrary.Object
	static void ReloadShaderbytecode();// 0x730557c 0x78cef7fd60
	static FString HashStringWithSHA1(FString inString);// 0x7305bb0 0x78cef7fe40
	static FString GetUnrealPakBinary();// 0x7306c70 0x78cef7ff20
	static FString GetUE4CmdBinary();// 0x7306bc0 0x78cef7caa0
	static FString GetProjectName();// 0x7306d20 0x78cef7cb80
	static FString[] GetProjectIniFiles(FString InProjectDir, FString InPlatformName);// 0x7305848 0x78cef7cc60
	static bool GetPakFileInfo(FString InFile, out PakFileInfo OutFileInfo);// 0x73062bc 0x78cef7cd40
	static FString[] GetIniConfigs(FString InSearchDir, FString InPlatformName);// 0x73059fc 0x78cef7ce20
	static FString[] GetEngineConfigs(FString InPlatformName);// 0x73056ec 0x78cef7cf00
	static FString[] GetEnabledPluginConfigs(FString InPlatformName);// 0x7305590 0x78cef7cfe0
	static bool GetCookedShaderBytecodeFiles(FString InProjectAbsDir, FString InProjectName, FString InPlatformName, bool InGalobalBytecode, bool InProjectBytecode, out FString[] OutFiles);// 0x7305ca4 0x78cef7d0c0
	static FString[] GetCookedGlobalShaderCacheFiles(FString InProjectDir, FString InPlatformName);// 0x7306108 0x78cef7d1a0
	static bool GetCookedAssetRegistryFiles(FString InProjectAbsDir, FString InProjectName, FString InPlatformName, out FString OutFiles);// 0x7305f3c 0x78cef7d280
	static FString[] GetAvailableMaps(FString GameName, bool IncludeEngineMaps, bool IncludePluginMaps, bool Sorted);// 0x7306dd0 0x78cef7d360
	static PlatformExternFiles GetAllExFilesByPlatform(out const PlatformExternAssets InPlatformConf, bool InGeneratedHash);// 0x73063dc 0x78cef7d440
	static AssetDetail[] GetAllAssetDependencyDetails(out const AssetDetail Asset, out const enum[] Types, FString AssetType);// 0x7305308 0x78cef7d520
	static bool DiffVersionAssets(out const AssetDependenciesInfo InNewVersion, out const AssetDependenciesInfo InBaseVersion, out AssetDependenciesInfo OutAddAsset, out AssetDependenciesInfo OutModifyAsset, out AssetDependenciesInfo OutDeleteAsset);// 0x7306844 0x78cef7d600
	static bool DiffVersionAllPlatformExFiles(out const HotPatcherVersion InBaseVersion, out const HotPatcherVersion InNewVersion, out <enum,PatchVersionExternDiff> OutDiff);// 0x73065d8 0x78cef7d6e0

--------------------------------
Class: PakFileInfo
	FString Filename;//[Offset: 0x0, Size: 0x10] 0x78cef85480
	FString Hash;//[Offset: 0x10, Size: 0x10] 0x78cef85500
	int FileSize;//[Offset: 0x20, Size: 0x4] 0x78cef85580

--------------------------------
Class: PlatformExternAssets
	enum TargetPlatform;//[Offset: 0x0, Size: 0x1] 0x78cee54340
	ExternFileInfo[] AddExternFileToPak;//[Offset: 0x8, Size: 0x10] 0x78cee543e0
	ExternDirectoryInfo[] AddExternDirectoryToPak;//[Offset: 0x18, Size: 0x10] 0x78cee54480

--------------------------------
Class: ExternFileInfo
	FilePath FilePath;//[Offset: 0x0, Size: 0x10] 0x78cef82280
	FString MountPath;//[Offset: 0x10, Size: 0x10] 0x78cef82300
	FString FileHash;//[Offset: 0x20, Size: 0x10] 0x78cef82380

--------------------------------
Class: ExternDirectoryInfo
	DirectoryPath DirectoryPath;//[Offset: 0x0, Size: 0x10] 0x78cef82580
	FString MountPoint;//[Offset: 0x10, Size: 0x10] 0x78cef82600

--------------------------------
Class: PlatformExternFiles
	enum platform;//[Offset: 0x0, Size: 0x1] 0x78cee575e0
	ExternFileInfo[] ExternFiles;//[Offset: 0x8, Size: 0x10] 0x78cee57680

--------------------------------
Class: AssetDetail
	FString mPackagePath;//[Offset: 0x0, Size: 0x10] 0x78cef85e00
	FString mAssetType;//[Offset: 0x10, Size: 0x10] 0x78cef85e80
	FString mGuid;//[Offset: 0x20, Size: 0x10] 0x78cef85f00

--------------------------------
Class: AssetDependenciesInfo
	<FString,AssetDependenciesDetail> AssetsDependenciesMap;//[Offset: 0x0, Size: 0x50] 0x78cf5e4cc0

--------------------------------
Class: AssetDependenciesDetail
	FString ModuleCategory;//[Offset: 0x0, Size: 0x10] 0x78cef85900
	<FString,AssetDetail> AssetDependencyDetails;//[Offset: 0x10, Size: 0x50] 0x78cf5e4b40

--------------------------------
Class: HotPatcherVersion
	FString VersionId;//[Offset: 0x0, Size: 0x10] 0x78cef85780
	FString BaseVersionId;//[Offset: 0x10, Size: 0x10] 0x78cef85800
	FString Date;//[Offset: 0x20, Size: 0x10] 0x78cef85880
	AssetDependenciesInfo AssetInfo;//[Offset: 0x78, Size: 0x50] 0x78cef85b80
	<enum,PlatformExternAssets> PlatformAssets;//[Offset: 0xc8, Size: 0x50] 0x78cf5e4e40

--------------------------------
Class: PatchVersionExternDiff
	enum platform;//[Offset: 0x0, Size: 0x1] 0x78cee57720
	ExternFileInfo[] AddExternalFiles;//[Offset: 0x8, Size: 0x10] 0x78cee577c0
	ExternFileInfo[] ModifyExternalFiles;//[Offset: 0x18, Size: 0x10] 0x78cee57860
	ExternFileInfo[] DeleteExternalFiles;//[Offset: 0x28, Size: 0x10] 0x78cee57900

--------------------------------
Class: MountListener.Object
	delegate OnMountPakDelegate;//[Offset: 0x28, Size: 0x10] 0x78cf1c7100
	delegate OnUnMountPakDelegate;//[Offset: 0x38, Size: 0x10] 0x78cf1c7180
	void Init();// 0x7309340 0x78cef7fc80

--------------------------------
Class: FLibAssetManageHelperEx.BlueprintFunctionLibrary.Object
	static FString SerializeAssetDetialArrayToString(out const AssetDetail[] InAssetDetialList);// 0x7322324 0x78cf1f1040
	static bool SerializeAssetDependenciesToJson(out const AssetDependenciesInfo InAssetDependencies, out FString OutJsonStr);// 0x73225c8 0x78cf1f1120
	static bool SaveStringToFile(FString InFile, FString inString);// 0x7322214 0x78cf1f1200
	static bool ModuleIsEnabled(FString InModuleName);// 0x7321d18 0x78cf1f12e0
	static bool LoadFileToString(FString InFile, out FString OutString);// 0x73220f8 0x78cf1f13c0
	static bool IsValidPlatform(FString PlatformName);// 0x7321a28 0x78cf1f14a0
	static bool GetSpecifyAssetDetail(FString InLongPackageName, out AssetDetail OutAssetDetail);// 0x73234b8 0x78cf1f1580
	static bool GetRedirectorList(out const FString[] InFilterPackagePaths, out AssetDetail[] OutRedirector);// 0x73235e8 0x78cf1f1660
	static bool GetPluginModuleAbsDir(FString InPluginModuleName, out FString OutPath);// 0x7321ae0 0x78cf1f1740
	static bool GetModuleNameByRelativePath(FString InRelativePath, out FString OutModuleName);// 0x7321dd0 0x78cf1f1820
	static bool GetModuleAssetsList(FString InModuleName, out const FString[] InExFilterPackagePaths, out const enum[] AssetRegistryDependencyTypes, out AssetDetail[] OutAssetList);// 0x73239e0 0x78cf1f1900
	static FString GetLongPackageNameFromPackagePath(FString InPackagePath);// 0x7325064 0x78cf1f19e0
	static bool GetEnableModuleAbsDir(FString InModuleName, out FString OutPath);// 0x7321bfc 0x78cf1f1ac0
	static bool GetAssetsList(out const FString[] InFilterPackagePaths, out const enum[] AssetRegistryDependencyTypes, out AssetDetail[] OutAssetList, bool bReTargetRedirector);// 0x732378c 0x78cf1f1ba0
	static bool GetAssetReferenceEx(out const AssetDetail InAsset, out const enum[] SearchAssetDepTypes, out AssetDetail[] OutRefAsset);// 0x7324010 0x78cf1f1c80
	static bool GetAssetPackageGUID(FString InPackagePath, out FString OutGUID);// 0x7324c1c 0x78cef7e780
	static FString GetAssetNameFromPackagePath(FString InPackagePath);// 0x7324f70 0x78cef7e860
	static void GetAssetListDependenciesForAssetDetail(out const AssetDetail[] InAssetsDetailList, out const enum[] AssetRegistryDependencyTypes, out AssetDependenciesInfo OutDependices);// 0x7323c40 0x78cef7e940
	static void GetAssetListDependencies(out const FString[] InLongPackageNameList, out const enum[] AssetRegistryDependencyTypes, out AssetDependenciesInfo OutDependices);// 0x7324660 0x78cef7ea20
	static bool GetAssetDependencyByDetail(out const AssetDetail InAsset, out const enum[] AssetRegistryDependencyTypes, out AssetDetail[] OutRefAsset, bool bRecursively);// 0x7324204 0x78cef7eb00
	static bool GetAssetDependency(FString InLongPackageName, out const enum[] AssetRegistryDependencyTypes, out AssetDetail[] OutRefAsset, bool bRecursively);// 0x7324444 0x78cef7ebe0
	static void GetAssetDependenciesForAssetDetail(out const AssetDetail InAssetDetail, out const enum[] AssetRegistryDependencyTypes, out AssetDependenciesInfo OutDependices);// 0x7323e40 0x78cef7ecc0
	static void GetAssetDependencies(FString InLongPackageName, out const enum[] AssetRegistryDependencyTypes, out AssetDependenciesInfo OutDependices);// 0x7324844 0x78cef7eda0
	static FString[] GetAllTargetPlatform();// 0x7321910 0x78cef7ee80
	static void GetAllEnabledModuleName(out <FString,FString> OutModules);// 0x7321eec 0x78cef7ef60
	static bool FindFilesRecursive(FString InStartDir, out FString[] OutFileList, bool InRecursive);// 0x7321774 0x78cef7f040
	static void FilterNoRefAssetsWithIgnoreFilter(out const AssetDetail[] InAssetsDetail, out const FString[] InIgnoreFilters, out AssetDetail[] OutHasRefAssetsDetail, out AssetDetail[] OutDontHasRefAssetsDetail);// 0x7322f60 0x78cef7f120
	static void FilterNoRefAssets(out const AssetDetail[] InAssetsDetail, out AssetDetail[] OutHasRefAssetsDetail, out AssetDetail[] OutDontHasRefAssetsDetail);// 0x7323258 0x78cef7f200
	static bool ExportCookPakCommandToFile(out const FString[] InCommand, FString InFile);// 0x7322728 0x78cef7f2e0
	static bool DeserializeAssetDependencies(FString InStream, out AssetDependenciesInfo OutAssetDependencies);// 0x7322478 0x78cef7f3c0
	static FString ConvVirtualToAbsPath(FString InPackagePath);// 0x7325274 0x78cef7f4a0
	static bool ConvRelativeDirToAbsDir(FString InRelativePath, out FString OutAbsPath);// 0x7321fdc 0x78cef7f580
	static bool ConvPackagePathToLongPackageName(FString InPackagePath, out FString OutLongPackageName);// 0x7324d38 0x78cef7f660
	static bool ConvLongPackageNameToPackagePath(FString InLongPackageName, out FString OutPackagePath);// 0x7324e54 0x78cef7f740
	static bool ConvLongPackageNameToCookedPath(FString InProjectAbsDir, FString InPlatformName, FString InLongPackageName, out FString[] OutCookedAssetPath, out FString[] OutCookedAssetRelativePath);// 0x7322b20 0x78cef7f820
	static bool ConvAbsToVirtualPath(FString InAbsPath, out FString OutPackagePath);// 0x7325158 0x78cef7f900
	static bool CombineCookedAssetCommand(out const FString[] InAbsPath, out const FString[] InRelativePath, out const FString[] InParams, out FString[] OutCommand);// 0x7322870 0x78cef7f9e0
	static bool CombineAssetsDetailAsFAssetDepenInfo(out const AssetDetail[] InAssetsDetailList, out AssetDependenciesInfo OutAssetInfo);// 0x7322db0 0x78cef7fac0
	static AssetDependenciesInfo CombineAssetDependencies(out const AssetDependenciesInfo A, out const AssetDependenciesInfo B);// 0x73249f0 0x78cef7fba0

--------------------------------
Class: UIParticle.Widget.Visual.Object
	UIParticleAsset* Asset;//[Offset: 0x108, Size: 0x8] 0x78cf1cb380
	delegate EventOnEnd;//[Offset: 0x110, Size: 0x10] 0x78cf1cb400
	bool bPlayParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78cf1cb480
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78cf1cb500
	void StopEmit();// 0x733ab44 0x78cf1f0cc0
	void Stop();// 0x733ab58 0x78cf1f0da0
	void SetPlayParticle(bool InPlayParticle);// 0x733aa94 0x78cf1f0e80
	void Play();// 0x733ab6c 0x78cf1f0f60

--------------------------------
Class: UIParticleAsset.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf1cb280
	UIParticleEmitterInfo[] Emitters;//[Offset: 0x30, Size: 0x10] 0x78cf1e0920

--------------------------------
Class: UIParticleEmitterInfo
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cef86580
	float ActiveDelay;//[Offset: 0x4, Size: 0x4] 0x78cef86600
	int ZOrder;//[Offset: 0x8, Size: 0x4] 0x78cef86680
	UIParticleEmitterAsset* Asset;//[Offset: 0x10, Size: 0x8] 0x78cef86700

--------------------------------
Class: UIParticleEmitterAsset.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf1cb900
	float StartTimeOffset;//[Offset: 0x2c, Size: 0x4] 0x78cf1cb980
	int SamplingTimes;//[Offset: 0x30, Size: 0x4] 0x78cf1cba00
	enum EmitterType;//[Offset: 0x34, Size: 0x1] 0x78cf1e04c0
	float EmitSeconds;//[Offset: 0x38, Size: 0x4] 0x78cf1cbb00
	UIParticleProperty MaxParticleCount;//[Offset: 0x40, Size: 0x7e8] 0x78cf1cbb80
	UIParticleProperty SpawnParticlePerSecond;//[Offset: 0x828, Size: 0x7e8] 0x78cf1cbc00
	UIParticleProperty ParticleEmitAngle;//[Offset: 0x1010, Size: 0x7e8] 0x78cf1cbc80
	Range_Vector2D EmitPosRange;//[Offset: 0x17f8, Size: 0x14] 0x78cf1cbd00
	Posotion_Vector2DCurve EmitPosition;//[Offset: 0x1810, Size: 0xfd0] 0x78cf1cbd80
	bool AutoEmitPosRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e0, Size: 0x1] 0x78cf1cbe00
	bool AutoScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e1, Size: 0x1] 0x78cf1cbe80
	bool ScaleByX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e2, Size: 0x1] 0x78cf1cbf00
	Vector2D DesignSize;//[Offset: 0x27e4, Size: 0x8] 0x78cf1cbf80
	bool EmitAngleByWidgetAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27ec, Size: 0x1] 0x78cf1cc000
	enum PositionType;//[Offset: 0x27ed, Size: 0x1] 0x78cf1e0560
	UIParticleProperty LifeSpan;//[Offset: 0x27f0, Size: 0x7e8] 0x78cf1cc100
	UIParticleProperty Size;//[Offset: 0x2fd8, Size: 0x7e8] 0x78cf1cc180
	UIParticleProperty Pivot;//[Offset: 0x37c0, Size: 0x7e8] 0x78cf1cc200
	UIParticleProperty RotationStart;//[Offset: 0x3fa8, Size: 0x7e8] 0x78cf1cc280
	UIParticleProperty RotationSpeed;//[Offset: 0x4790, Size: 0x7e8] 0x78cf1cc300
	UIParticleProperty Color;//[Offset: 0x4f78, Size: 0x7e8] 0x78cf1cc380
	Object* ResourceObject;//[Offset: 0x5760, Size: 0x8] 0x78cf1cc400
	bool RotationFollowSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5768, Size: 0x1] 0x78cf1cc480
	bool UseSeparateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5769, Size: 0x1] 0x78cf1cc500
	UIParticleProperty Gravity;//[Offset: 0x5770, Size: 0x7e8] 0x78cf1cc580
	UIParticleProperty StartSpeed;//[Offset: 0x5f58, Size: 0x7e8] 0x78cf1cc600
	UIParticleProperty AirResistance;//[Offset: 0x6740, Size: 0x7e8] 0x78cf1ca580
	UIParticleProperty RadialAcceleration;//[Offset: 0x6f28, Size: 0x7e8] 0x78cf1ca600
	UIParticleProperty TangentialAcceleration;//[Offset: 0x7710, Size: 0x7e8] 0x78cf1ca680
	UIParticleProperty Radius;//[Offset: 0x7ef8, Size: 0x7e8] 0x78cf1ca700
	UIParticleProperty DegreePerSecond;//[Offset: 0x86e0, Size: 0x7e8] 0x78cf1ca780
	UIParticleProperty PositionX;//[Offset: 0x8ec8, Size: 0x7e8] 0x78cf1ca800
	UIParticleProperty PositionY;//[Offset: 0x96b0, Size: 0x7e8] 0x78cf1ca880
	ChildEmitter[] ChildrenEmitters;//[Offset: 0x9e98, Size: 0x10] 0x78cf1e0600
	ScalarParamCurve[] ScalarParams;//[Offset: 0x9ea8, Size: 0x10] 0x78cf1e06a0
	ScalarParamCurve[] ScalarParamsWhenStart;//[Offset: 0x9eb8, Size: 0x10] 0x78cf1e0740
	enum DrawEffect;//[Offset: 0x9ec8, Size: 0x1] 0x78cf1e07e0
	bool UseScaleFollowSpeedDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec9, Size: 0x1] 0x78cf1cab00
	UIParticleProperty ScaleFollowSpeedDirection;//[Offset: 0x9ed0, Size: 0x7e8] 0x78cf1cab80
	bool UseScaleFollowSpeedVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6b8, Size: 0x1] 0x78cf1cac00
	UIParticleProperty ScaleFollowSpeedVertical;//[Offset: 0xa6c0, Size: 0x7e8] 0x78cf1cac80
	UIParticleProperty DirectionScale;//[Offset: 0xaea8, Size: 0x7e8] 0x78cf1cad00
	UIParticleProperty VerticalDirectionScale;//[Offset: 0xb690, Size: 0x7e8] 0x78cf1cad80
	UIParticleProperty SineDirectionStart;//[Offset: 0xbe78, Size: 0x7e8] 0x78cf1cae00
	UIParticleProperty SineDirectionSpeed;//[Offset: 0xc660, Size: 0x7e8] 0x78cf1cae80
	UIParticleProperty SineDirectionRange;//[Offset: 0xce48, Size: 0x7e8] 0x78cf1caf00
	UIParticleEmitterAsset*[] LevelOfDetail;//[Offset: 0xd630, Size: 0x10] 0x78cf1e0880

--------------------------------
Class: UIParticleProperty
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78cee57220
	float FloatValue;//[Offset: 0x4, Size: 0x4] 0x78cef89100
	Range_Float FloatRangeValue;//[Offset: 0x8, Size: 0x8] 0x78cef89280
	UIParticleFloatCurve FloatCurveValue;//[Offset: 0x10, Size: 0x88] 0x78cef89300
	Range_FloatCurve FloatCurveRangeValue;//[Offset: 0x98, Size: 0x110] 0x78cef87500
	Vector2D Vector2DValue;//[Offset: 0x1a8, Size: 0x8] 0x78cef87580
	Range_Vector2D Vector2DRangeValue;//[Offset: 0x1b0, Size: 0x14] 0x78cef87800
	UIParticleLinearColorCurve LinearColorCurveValue;//[Offset: 0x1c8, Size: 0x208] 0x78cef87880
	Range_LinearColorCurve LinearColorCurveRangeValue;//[Offset: 0x3d0, Size: 0x418] 0x78cef86480

--------------------------------
Class: Range_Float
	float Min;//[Offset: 0x0, Size: 0x4] 0x78cef89180
	float Max;//[Offset: 0x4, Size: 0x4] 0x78cef89200

--------------------------------
Class: UIParticleFloatCurve
	RichCurve CurveData;//[Offset: 0x0, Size: 0x80] 0x78cef89400
	enum CurveType;//[Offset: 0x80, Size: 0x1] 0x78cee572c0
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78cef87400

--------------------------------
Class: Range_FloatCurve
	UIParticleFloatCurve Min;//[Offset: 0x0, Size: 0x88] 0x78cef89380
	UIParticleFloatCurve Max;//[Offset: 0x88, Size: 0x88] 0x78cef87480

--------------------------------
Class: Range_Vector2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8] 0x78cef87600
	Vector2D Max;//[Offset: 0x8, Size: 0x8] 0x78cef87680
	bool RandomKey_X_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cef87700

--------------------------------
Class: UIParticleLinearColorCurve
	RichCurve ColorCurves;//[Offset: 0x0, Size: 0x80] 0x78cef88080
	enum CurveType;//[Offset: 0x200, Size: 0x1] 0x78cee57400
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x78cef88180

--------------------------------
Class: Range_LinearColorCurve
	UIParticleLinearColorCurve Min;//[Offset: 0x0, Size: 0x208] 0x78cef87900
	UIParticleLinearColorCurve Max;//[Offset: 0x208, Size: 0x208] 0x78cef88200
	bool RandomKey_R_G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x78cef88280
	bool RandomKey_R_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1] 0x78cef88300
	bool RandomKey_R_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1] 0x78cef88380
	bool RandomKey_G_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1] 0x78cef88400
	bool RandomKey_G_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x78cef86380
	bool RandomKey_B_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1] 0x78cef86400

--------------------------------
Class: Posotion_Vector2DCurve
	UIParticleProperty X;//[Offset: 0x0, Size: 0x7e8] 0x78cef88e00
	UIParticleProperty Y;//[Offset: 0x7e8, Size: 0x7e8] 0x78cef88e80

--------------------------------
Class: ChildEmitter
	float ActivityInParentLifeTime;//[Offset: 0x0, Size: 0x4] 0x78cef88a80
	bool FollowParentPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cef88b00
	float FollowParentSpeedPercent;//[Offset: 0x8, Size: 0x4] 0x78cef88b80
	int ZOrderOffset;//[Offset: 0xc, Size: 0x4] 0x78cef88c00
	UIParticleEmitterAsset* ChildrenAsset;//[Offset: 0x10, Size: 0x8] 0x78cef88c80

--------------------------------
Class: ScalarParamCurve
	FName ScalarParamName;//[Offset: 0x0, Size: 0x8] 0x78cef89000
	UIParticleProperty Value;//[Offset: 0x8, Size: 0x7e8] 0x78cef86500

--------------------------------
Class: UIParticleEmitter.Widget.Visual.Object
	UIParticleEmitterAsset* Asset;//[Offset: 0x108, Size: 0x8] 0x78cf1cb000
	delegate EventOnEnd;//[Offset: 0x110, Size: 0x10] 0x78cf1cb080
	bool bPlayParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78cf1cb100
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78cf1cb180
	void StopEmit();// 0x733b7d8 0x78cf1f0940
	void Stop();// 0x733b7ec 0x78cf1f0a20
	void SetPlayParticle(bool InPlayParticle);// 0x733b728 0x78cf1f0b00
	void Play();// 0x733b800 0x78cf1f0be0

--------------------------------
Class: UIParticleUtility.Object
	static void SetMultiThread(bool Value);// 0x733de48 0x78cf1f05c0
	static void SetLOD(int newlod);// 0x733df1c 0x78cf1f06a0
	static bool GetMultiThread();// 0x733de10 0x78cf1f0780
	static int GetLOD();// 0x733dee8 0x78cf1f0860

--------------------------------
Class: EasyParticle.Widget.Visual.Object
	EasyParticleAsset* Asset;//[Offset: 0x108, Size: 0x8] 0x78cf1cd580
	delegate EventOnEnd;//[Offset: 0x110, Size: 0x10] 0x78cf1cd600
	bool bPlayParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x78cf1cd680
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1] 0x78cf1cb600
	void StopEmit();// 0x7352654 0x78cf1f0240
	void Stop();// 0x7352668 0x78cf1f0320
	void SetPlayParticle(bool InPlayParticle);// 0x73525a4 0x78cf1f0400
	void Play();// 0x735267c 0x78cf1f04e0

--------------------------------
Class: EasyParticleAsset.Object
	EasyParticleEmitterAsset*[] Emitters;//[Offset: 0x28, Size: 0x10] 0x78cf1e0380

--------------------------------
Class: EasyParticleEmitterAsset.Object
	EasyParticleComponent*[] Components;//[Offset: 0x28, Size: 0x10] 0x78cf1e0420

--------------------------------
Class: EasyParticleComponent.Object
	bool Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf1cd180
	class EasyParticleComponentRuntime* RuntimeClass;//[Offset: 0x30, Size: 0x8] 0x78cf1e01a0
	FString TypeName;//[Offset: 0x38, Size: 0x10] 0x78cf1cd200
	enum Priority;//[Offset: 0x48, Size: 0x1] 0x78cf1e0240
	FString GetTypeName();// 0x73539a4 0x78cf1f3960
	enum GetPriority();// 0x735392c 0x78cf1f0080
	EasyParticleComponentRuntime* CreateRuntimeComponent();// 0x7353968 0x78cf1f0160

--------------------------------
Class: EasyParticleComponentRuntime.Object
	EasyParticleComponent* ParentAsset;//[Offset: 0x28, Size: 0x8] 0x78cf1cce00
	EasyParticleState* Owner;//[Offset: 0x30, Size: 0x8] 0x78cf1cce80
	void Tick(out const Geometry AllottedGeometry, const float InDeltaTime);// 0x735422c 0x78cf1f35e0
	void Reset();// 0x735410c 0x78cf1f36c0
	void PostTick(out const Geometry AllottedGeometry, const float InDeltaTime);// 0x7354128 0x78cf1f37a0
	void Init(out const Geometry AllottedGeometry);// 0x7354330 0x78cf1f3880

--------------------------------
Class: EasyParticleState.Object
	EasyParticleComponentRuntime*[] Components;//[Offset: 0x28, Size: 0x10] 0x78cf1e2900
	EasyParticleEmitterAsset* Asset;//[Offset: 0x38, Size: 0x8] 0x78cf1cf880
	EasyParticleStateRuntime InitialState;//[Offset: 0x40, Size: 0x50] 0x78cf1cf900
	EasyParticleStateRuntime CurrentState;//[Offset: 0x90, Size: 0x50] 0x78cf1cf980
	EasyParticleStateRuntime BackBufferState;//[Offset: 0xe0, Size: 0x50] 0x78cf1cfa00
	EasyParticleComponent_Child_Runtime* ParentComponent;//[Offset: 0x130, Size: 0x8] 0x78cf1cfa80
	enum State;//[Offset: 0x138, Size: 0x1] 0x78cf1e0060

--------------------------------
Class: EasyParticleStateRuntime
	float Lifetime;//[Offset: 0x0, Size: 0x4] 0x78cef8ac80
	Vector2D Velocity;//[Offset: 0x4, Size: 0x8] 0x78cef8ad00
	Vector2D Position;//[Offset: 0xc, Size: 0x8] 0x78cef8ad80
	Vector2D Size;//[Offset: 0x14, Size: 0x8] 0x78cef8ae00
	float Rotation;//[Offset: 0x1c, Size: 0x4] 0x78cef8ae80
	float RotationRate;//[Offset: 0x20, Size: 0x4] 0x78cef8af00
	LinearColor Color;//[Offset: 0x24, Size: 0x10] 0x78cef8af80
	float AutoSizeScale;//[Offset: 0x34, Size: 0x4] 0x78cef8b000
	Vector2D WidgetPositionAbsolute;//[Offset: 0x38, Size: 0x8] 0x78cef8b080
	Vector2D Pivot;//[Offset: 0x40, Size: 0x8] 0x78cef8b100
	float ZOrderOffset;//[Offset: 0x48, Size: 0x4] 0x78cef8b180
	float RootEmitterLifetime;//[Offset: 0x4c, Size: 0x4] 0x78cef8b200

--------------------------------
Class: EasyParticleComponent_Child_Runtime.EasyParticleComponentRuntime.Object
	EasyParticleComponentRuntime_Child_SubEmitter[] ChildEmitterArray;//[Offset: 0x38, Size: 0x10] 0x78cf1e0100
	bool StopCreateParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cf1ce580

--------------------------------
Class: EasyParticleComponentRuntime_Child_SubEmitter
	EasyParticleEmitterAsset* Asset;//[Offset: 0x0, Size: 0x8] 0x78cef8a380
	EasyParticleState*[] ChildArray;//[Offset: 0x8, Size: 0x10] 0x78cee57180
	EasyParticleComponent_Child_Runtime* ComponentOwner;//[Offset: 0x18, Size: 0x8] 0x78cef8a480
	UIParticleRandomFactor MaxParticleCountFactor;//[Offset: 0x20, Size: 0x4] 0x78cef8a500
	UIParticleRandomFactor SpawnRateFactor;//[Offset: 0x24, Size: 0x4] 0x78cef88480
	float DelayActive;//[Offset: 0x28, Size: 0x4] 0x78cef88500
	float Deadtime;//[Offset: 0x2c, Size: 0x4] 0x78cef88580
	int ChildLayer;//[Offset: 0x30, Size: 0x4] 0x78cef88600
	float ActiveParentLifePercent;//[Offset: 0x34, Size: 0x4] 0x78cef88680

--------------------------------
Class: UIParticleRandomFactor

--------------------------------
Class: EasyParticleComponent_Basic.EasyParticleComponent.Object
	Object* ResourceObject;//[Offset: 0x50, Size: 0x8] 0x78cf1cc780
	float EmitSeconds;//[Offset: 0x58, Size: 0x4] 0x78cf1cc800
	EasyParticlePropertyFloat MaxParticleCount;//[Offset: 0x60, Size: 0x1a8] 0x78cf1cc880
	EasyParticlePropertyFloat SpawnRate;//[Offset: 0x208, Size: 0x1a8] 0x78cf1cc900
	EasyParticlePropertyFloat Lifetime;//[Offset: 0x3b0, Size: 0x1a8] 0x78cf1cc980

--------------------------------
Class: EasyParticlePropertyFloat
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78cee56f00
	float FloatValue;//[Offset: 0x4, Size: 0x4] 0x78cef8b300
	UIParticleRange_Float FloatRangeValue;//[Offset: 0x8, Size: 0x8] 0x78cef8b480
	EasyParticleFloatCurve FloatCurveValue;//[Offset: 0x10, Size: 0x88] 0x78cef8b500
	UIParticleRange_FloatCurve FloatCurveRangeValue;//[Offset: 0x98, Size: 0x110] 0x78cef89700

--------------------------------
Class: UIParticleRange_Float
	float Min;//[Offset: 0x0, Size: 0x4] 0x78cef8b380
	float Max;//[Offset: 0x4, Size: 0x4] 0x78cef8b400

--------------------------------
Class: EasyParticleFloatCurve
	RichCurve CurveData;//[Offset: 0x0, Size: 0x80] 0x78cef89500
	enum CurveType;//[Offset: 0x80, Size: 0x1] 0x78cee56fa0
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78cef89600

--------------------------------
Class: UIParticleRange_FloatCurve
	EasyParticleFloatCurve Min;//[Offset: 0x0, Size: 0x88] 0x78cef8b580
	EasyParticleFloatCurve Max;//[Offset: 0x88, Size: 0x88] 0x78cef89680

--------------------------------
Class: EasyParticleComponent_Acceleration.EasyParticleComponent.Object
	EasyParticlePropertyFloat Acceleration;//[Offset: 0x50, Size: 0x1a8] 0x78cf1ccd80

--------------------------------
Class: EasyParticleComponent_Acceleration_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1ccd00

--------------------------------
Class: EasyParticleComponent_AdditionPositionOffset.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialTime;//[Offset: 0x50, Size: 0x1a8] 0x78cf1ccb80
	EasyParticlePropertyFloat Frequency;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1ccc00
	EasyParticlePropertyFloat Amplitude;//[Offset: 0x3a0, Size: 0x1a8] 0x78cf1ccc80

--------------------------------
Class: EasyParticleComponent_AdditionPositionOffset_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorInitialTime;//[Offset: 0x38, Size: 0x4] 0x78cf1cca00
	UIParticleRandomFactor FactorFrequency;//[Offset: 0x3c, Size: 0x4] 0x78cf1cca80
	UIParticleRandomFactor FactorAmplitude;//[Offset: 0x40, Size: 0x4] 0x78cf1ccb00

--------------------------------
Class: EasyParticleComponent_Basic_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor MaxParticleCountFactor;//[Offset: 0x38, Size: 0x4] 0x78cf1ce700
	UIParticleRandomFactor SpawnRateFactor;//[Offset: 0x3c, Size: 0x4] 0x78cf1cc680
	UIParticleRandomFactor LifetimeFactor;//[Offset: 0x40, Size: 0x4] 0x78cf1cc700

--------------------------------
Class: EasyParticleComponent_Child.EasyParticleComponent.Object
	EasyParticleAsset* Asset;//[Offset: 0x50, Size: 0x8] 0x78cf1ce600
	float ActiveParentLifePercent;//[Offset: 0x58, Size: 0x4] 0x78cf1ce680

--------------------------------
Class: EasyParticleComponent_Color.EasyParticleComponent.Object
	EasyParticlePropertyColor InitialColor;//[Offset: 0x50, Size: 0x660] 0x78cf1ce480

--------------------------------
Class: EasyParticlePropertyColor
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78cee57040
	LinearColor ColorValue;//[Offset: 0x4, Size: 0x10] 0x78cef89800
	UIParticleRange_Color ColorRangeValue;//[Offset: 0x14, Size: 0x28] 0x78cef89c80
	EasyParticleLinearColorCurve ColorCurveValue;//[Offset: 0x40, Size: 0x208] 0x78cef89d00
	UIParticleRange_LinearColorCurve ColorCurveRangeValue;//[Offset: 0x248, Size: 0x418] 0x78cef8a300

--------------------------------
Class: UIParticleRange_Color
	LinearColor Min;//[Offset: 0x0, Size: 0x10] 0x78cef89880
	LinearColor Max;//[Offset: 0x10, Size: 0x10] 0x78cef89900
	bool RandomKey_R_G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cef89980
	bool RandomKey_R_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78cef89a00
	bool RandomKey_R_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1] 0x78cef89a80
	bool RandomKey_G_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1] 0x78cef89b00
	bool RandomKey_G_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78cef89b80
	bool RandomKey_B_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x78cef89c00

--------------------------------
Class: EasyParticleLinearColorCurve
	RichCurve ColorCurves;//[Offset: 0x0, Size: 0x80] 0x78cef89e00
	enum CurveType;//[Offset: 0x200, Size: 0x1] 0x78cee570e0
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x78cef89f00

--------------------------------
Class: UIParticleRange_LinearColorCurve
	EasyParticleLinearColorCurve Min;//[Offset: 0x0, Size: 0x208] 0x78cef89d80
	EasyParticleLinearColorCurve Max;//[Offset: 0x208, Size: 0x208] 0x78cef89f80
	bool RandomKey_R_G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x78cef8a000
	bool RandomKey_R_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1] 0x78cef8a080
	bool RandomKey_R_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1] 0x78cef8a100
	bool RandomKey_G_B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1] 0x78cef8a180
	bool RandomKey_G_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x78cef8a200
	bool RandomKey_B_A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1] 0x78cef8a280

--------------------------------
Class: EasyParticleComponent_Color_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorR;//[Offset: 0x38, Size: 0x4] 0x78cf1ce280
	UIParticleRandomFactor FactorG;//[Offset: 0x3c, Size: 0x4] 0x78cf1ce300
	UIParticleRandomFactor FactorB;//[Offset: 0x40, Size: 0x4] 0x78cf1ce380
	UIParticleRandomFactor FactorA;//[Offset: 0x44, Size: 0x4] 0x78cf1ce400

--------------------------------
Class: EasyParticleComponent_DelayActive.EasyParticleComponent.Object
	EasyParticlePropertyFloat Value;//[Offset: 0x50, Size: 0x1a8] 0x78cf1ce200

--------------------------------
Class: EasyParticleComponent_DelayActive_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1ce180

--------------------------------
Class: EasyParticleComponent_FollowParentPosition.EasyParticleComponent.Object

--------------------------------
Class: EasyParticleComponent_FollowParentPosition_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_Gravity.EasyParticleComponent.Object
	EasyParticlePropertyFloat GravityX;//[Offset: 0x50, Size: 0x1a8] 0x78cf1ce080
	EasyParticlePropertyFloat GravityY;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1ce100

--------------------------------
Class: EasyParticleComponent_Gravity_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78cf1cdf80
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78cf1ce000

--------------------------------
Class: EasyParticleComponent_InheritParentVelocity.EasyParticleComponent.Object
	float percent;//[Offset: 0x50, Size: 0x4] 0x78cf1cdf00

--------------------------------
Class: EasyParticleComponent_InheritParentVelocity_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_InitialColor.EasyParticleComponent.Object
	EasyParticlePropertyColor InitialColor;//[Offset: 0x50, Size: 0x660] 0x78cf1cde80

--------------------------------
Class: EasyParticleComponent_InitialColor_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorR;//[Offset: 0x38, Size: 0x4] 0x78cf1cdc80
	UIParticleRandomFactor FactorG;//[Offset: 0x3c, Size: 0x4] 0x78cf1cdd00
	UIParticleRandomFactor FactorB;//[Offset: 0x40, Size: 0x4] 0x78cf1cdd80
	UIParticleRandomFactor FactorA;//[Offset: 0x44, Size: 0x4] 0x78cf1cde00

--------------------------------
Class: EasyParticleComponent_InitialPivot.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialPivotX;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cdb80
	EasyParticlePropertyFloat InitialPivotY;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1cdc00

--------------------------------
Class: EasyParticleComponent_InitialPivot_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78cf1cda80
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78cf1cdb00

--------------------------------
Class: EasyParticleComponent_InitialPosition.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialPositionX;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cd980
	EasyParticlePropertyFloat InitialPositionY;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1cda00

--------------------------------
Class: EasyParticleComponent_InitialPosition_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78cf1cd880
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78cf1cd900

--------------------------------
Class: EasyParticleComponent_InitialPosition_AutoSize.EasyParticleComponent.Object

--------------------------------
Class: EasyParticleComponent_InitialPosition_AutoSize_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78cf1cd780
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78cf1cd800

--------------------------------
Class: EasyParticleComponent_InitialRotation.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialRotation;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cd700

--------------------------------
Class: EasyParticleComponent_InitialRotation_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1cf780

--------------------------------
Class: EasyParticleComponent_InitialRotationRate.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialRotationRate;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cf700

--------------------------------
Class: EasyParticleComponent_InitialRotationRate_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1cf680

--------------------------------
Class: EasyParticleComponent_InitialSize.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialSize;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cf600

--------------------------------
Class: EasyParticleComponent_InitialSize_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1cf580

--------------------------------
Class: EasyParticleComponent_InitialSize_AutoSize.EasyParticleComponent.Object
	bool ScaleByX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cf1cf480
	Vector2D DesignSize;//[Offset: 0x54, Size: 0x8] 0x78cf1cf500

--------------------------------
Class: EasyParticleComponent_InitialSize_AutoSize_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_InitialSizeXY.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialSizeX;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cf380
	EasyParticlePropertyFloat InitialSizeY;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1cf400

--------------------------------
Class: EasyParticleComponent_InitialSizeXY_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78cf1cf280
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78cf1cf300

--------------------------------
Class: EasyParticleComponent_InitialVelocity.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialVelocity;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cf180
	EasyParticlePropertyFloat InitialVelocityDirection;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1cf200

--------------------------------
Class: EasyParticleComponent_InitialVelocity_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorSpeed;//[Offset: 0x38, Size: 0x4] 0x78cf1cf080
	UIParticleRandomFactor FactorDirection;//[Offset: 0x3c, Size: 0x4] 0x78cf1cf100

--------------------------------
Class: EasyParticleComponent_InitialZOrderOffset.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialZOrderOffset;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cf000

--------------------------------
Class: EasyParticleComponent_InitialZOrderOffset_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1cef80

--------------------------------
Class: EasyParticleComponent_Orbit.EasyParticleComponent.Object
	EasyParticlePropertyFloat InitialRotation;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cee00
	EasyParticlePropertyFloat Radius;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1cee80
	EasyParticlePropertyFloat RotationRate;//[Offset: 0x3a0, Size: 0x1a8] 0x78cf1cef00

--------------------------------
Class: EasyParticleComponent_Orbit_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorInitialRotation;//[Offset: 0x38, Size: 0x4] 0x78cf1cec80
	UIParticleRandomFactor FactorRadius;//[Offset: 0x3c, Size: 0x4] 0x78cf1ced00
	UIParticleRandomFactor FactorRotationRate;//[Offset: 0x40, Size: 0x4] 0x78cf1ced80

--------------------------------
Class: EasyParticleComponent_RadialAcceleration.EasyParticleComponent.Object
	EasyParticlePropertyFloat RadialAcceleration;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cec00

--------------------------------
Class: EasyParticleComponent_RadialAcceleration_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1ceb80

--------------------------------
Class: EasyParticleComponent_RotationRate.EasyParticleComponent.Object
	EasyParticlePropertyFloat RotationRate;//[Offset: 0x50, Size: 0x1a8] 0x78cf1ceb00

--------------------------------
Class: EasyParticleComponent_RotationRate_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1cea80

--------------------------------
Class: EasyParticleComponent_RotationToVelocityDirection.EasyParticleComponent.Object

--------------------------------
Class: EasyParticleComponent_RotationToVelocityDirection_Runtime.EasyParticleComponentRuntime.Object

--------------------------------
Class: EasyParticleComponent_ScalarParam.EasyParticleComponent.Object
	FName ScalarParamName;//[Offset: 0x50, Size: 0x8] 0x78cf1ce980
	EasyParticlePropertyFloat Value;//[Offset: 0x58, Size: 0x1a8] 0x78cf1cea00

--------------------------------
Class: EasyParticleComponent_ScalarParam_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1ce900

--------------------------------
Class: EasyParticleComponent_Size.EasyParticleComponent.Object
	EasyParticlePropertyFloat Size;//[Offset: 0x50, Size: 0x1a8] 0x78cf1ce880

--------------------------------
Class: EasyParticleComponent_Size_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1ce800

--------------------------------
Class: EasyParticleComponent_SizeScaleBySpeed.EasyParticleComponent.Object
	EasyParticlePropertyFloat ScaleX;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cff80
	EasyParticlePropertyFloat ScaleY;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1ce780

--------------------------------
Class: EasyParticleComponent_SizeScaleBySpeed_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78cf1cfe80
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78cf1cff00

--------------------------------
Class: EasyParticleComponent_SizeXY.EasyParticleComponent.Object
	EasyParticlePropertyFloat SizeX;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cfd80
	EasyParticlePropertyFloat SizeY;//[Offset: 0x1f8, Size: 0x1a8] 0x78cf1cfe00

--------------------------------
Class: EasyParticleComponent_SizeXY_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor FactorX;//[Offset: 0x38, Size: 0x4] 0x78cf1cfc80
	UIParticleRandomFactor FactorY;//[Offset: 0x3c, Size: 0x4] 0x78cf1cfd00

--------------------------------
Class: EasyParticleComponent_TangentialAcceleration.EasyParticleComponent.Object
	EasyParticlePropertyFloat TangentialAcceleration;//[Offset: 0x50, Size: 0x1a8] 0x78cf1cfc00

--------------------------------
Class: EasyParticleComponent_TangentialAcceleration_Runtime.EasyParticleComponentRuntime.Object
	UIParticleRandomFactor Factor;//[Offset: 0x38, Size: 0x4] 0x78cf1cfb80

--------------------------------
Class: EasyParticleRootState.EasyParticleState.Object
	EasyParticleComponent_Child* RootComponent;//[Offset: 0x1d0, Size: 0x8] 0x78cf211080

--------------------------------
Class: AnimationBudgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void SetAnimationBudgetParameters(Object* WorldContextObject, out const AnimationBudgetAllocatorParameters InParameters);// 0x7373814 0x78cf1f3420
	static void EnableAnimationBudget(Object* WorldContextObject, bool bEnabled);// 0x7373968 0x78cf1f3500

--------------------------------
Class: AnimationBudgetAllocatorParameters
	float BudgetInMs;//[Offset: 0x0, Size: 0x4] 0x78cef8c380
	float MinQuality;//[Offset: 0x4, Size: 0x4] 0x78cef8c400
	int MaxTickRate;//[Offset: 0x8, Size: 0x4] 0x78cef8c480
	float WorkUnitSmoothingSpeed;//[Offset: 0xc, Size: 0x4] 0x78cef8c500
	float AlwaysTickFalloffAggression;//[Offset: 0x10, Size: 0x4] 0x78cef8c580
	float InterpolationFalloffAggression;//[Offset: 0x14, Size: 0x4] 0x78cef8c600
	int InterpolationMaxRate;//[Offset: 0x18, Size: 0x4] 0x78cef8a580
	int MaxInterpolatedComponents;//[Offset: 0x1c, Size: 0x4] 0x78cef8a600
	float InterpolationTickMultiplier;//[Offset: 0x20, Size: 0x4] 0x78cef8a680
	float InitialEstimatedWorkUnitTimeMs;//[Offset: 0x24, Size: 0x4] 0x78cef8a700
	int MaxTickedOffsreenComponents;//[Offset: 0x28, Size: 0x4] 0x78cef8a780
	int StateChangeThrottleInFrames;//[Offset: 0x2c, Size: 0x4] 0x78cef8a800
	float BudgetFactorBeforeReducedWork;//[Offset: 0x30, Size: 0x4] 0x78cef8a880
	float BudgetFactorBeforeReducedWorkEpsilon;//[Offset: 0x34, Size: 0x4] 0x78cef8a900
	float BudgetPressureSmoothingSpeed;//[Offset: 0x38, Size: 0x4] 0x78cef8a980
	int ReducedWorkThrottleMinInFrames;//[Offset: 0x3c, Size: 0x4] 0x78cef8aa00
	int ReducedWorkThrottleMaxInFrames;//[Offset: 0x40, Size: 0x4] 0x78cef8aa80
	float BudgetFactorBeforeAggressiveReducedWork;//[Offset: 0x44, Size: 0x4] 0x78cef8ab00
	int ReducedWorkThrottleMaxPerFrame;//[Offset: 0x48, Size: 0x4] 0x78cef8ab80
	float BudgetPressureBeforeEmergencyReducedWork;//[Offset: 0x4c, Size: 0x4] 0x78cef8ac00

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xef0, Size: 0x1] 0x78cf217d00
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xef0, Size: 0x1] 0x78cf217d80
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xef0, Size: 0x1] 0x78cf217e00
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x7373f60 0x78cf1f5720

--------------------------------
Class: QuickSDKComponent.ActorComponent.Object
	delegate QuickLoginOrSwitchRes;//[Offset: 0xb0, Size: 0x10] 0x78cf217600
	delegate QuickLogoutRes;//[Offset: 0xc0, Size: 0x10] 0x78cf217680
	delegate QuickExitRes;//[Offset: 0xd0, Size: 0x10] 0x78cf217700
	delegate QuickPayRes;//[Offset: 0xe0, Size: 0x10] 0x78cf217780
	delegate QuickVerifyRes;//[Offset: 0xf0, Size: 0x10] 0x78cf217800

--------------------------------
Class: QuickSDKFunctions.Object
	static void QuickSDKVerify();// 0x7378cac 0x78cf1f8580
	static int64 QuickSDKSubChannel();// 0x7378cc0 0x78cf1f8660
	static void QuickSDKRoleInfo(FString Name, FString Uid, FString UserLevel, bool IsCreate);// 0x7378d50 0x78cf1f8740
	static void QuickSDKPay(FString Name, FString Uid, FString UserLevel, FString OrderId, int64 Price, int Amount, FString ProductId);// 0x7378fd8 0x78cf1f8820
	static void QuickSDKLogout();// 0x7378d3c 0x78cf1f8900
	static int64 QuickSDKLoginType();// 0x7378cf4 0x78cf1f89e0
	static void QuickSDKLogin();// 0x7379428 0x78cf1f8ac0
	static void QuickSDKExit();// 0x7378d28 0x78cf1f8ba0
	static int64 QuickSDKChannel();// 0x73793f4 0x78cf1f8c80

--------------------------------
Class: __Delegates__UInventorySlotWidget_C__pf2552836754.Object

--------------------------------
Class: __Delegates__UMainGameWidget_C__pf1489439355.Object

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78cf21aa80
	int AdditionalSlotIndex;//[Offset: 0x80, Size: 0x4] 0x78cf21ab00
	FText SlotDisplayName;//[Offset: 0x88, Size: 0x18] 0x78cf21ab80

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x4b8, Size: 0x8] 0x78cea23080

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x468, Size: 0x8] 0x78cea23700
	MaterialInterface* Material;//[Offset: 0x470, Size: 0x8] 0x78cea23780
	float PlayRate;//[Offset: 0x478, Size: 0x4] 0x78cea23800
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c, Size: 0x1] 0x78cea23880
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47c, Size: 0x1] 0x78cea23900
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47c, Size: 0x1] 0x78cea23980
	float AccumulatedTime;//[Offset: 0x480, Size: 0x4] 0x78cea23a00
	int CachedFrameIndex;//[Offset: 0x484, Size: 0x4] 0x78cea23a80
	LinearColor SpriteColor;//[Offset: 0x488, Size: 0x10] 0x78cea23b00
	BodySetup* CachedBodySetup;//[Offset: 0x498, Size: 0x8] 0x78cea23b80
	delegate OnFinishedPlaying;//[Offset: 0x4a0, Size: 0x10] 0x78cea23c00
	void Stop();// 0x7473528 0x78cf1ff3c0
	void SetSpriteColor(LinearColor NewColor);// 0x747358c 0x78cf1ff4a0
	void SetPlayRate(float NewRate);// 0x74730cc 0x78cf1ff580
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x74733c0 0x78cf1ff660
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x7473290 0x78cf1ff740
	void SetNewTime(float NewTime);// 0x7472ff0 0x78cf1ff820
	void SetLooping(bool bNewLooping);// 0x74731ac 0x78cf1ff900
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x7473690 0x78cf1ff9e0
	void ReverseFromEnd();// 0x747353c 0x78cf1ffac0
	void Reverse();// 0x7473550 0x78cf1ffba0
	void PlayFromStart();// 0x7473564 0x78cf1ffc80
	void Play();// 0x7473578 0x78cf1ffd60
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x7472eac 0x78cf1ffe40
	bool IsReversing();// 0x74734b8 0x78cf1fff20
	bool IsPlaying();// 0x74734f0 0x78cf1fcaa0
	bool IsLooping();// 0x7473174 0x78cf1fcb80
	LinearColor GetSpriteColor();// 0x7473634 0x78cf1fcc60
	float GetPlayRate();// 0x7473098 0x78cf1fcd40
	int GetPlaybackPositionInFrames();// 0x747338c 0x78cf1fce20
	float GetPlaybackPosition();// 0x747325c 0x78cf1fcf00
	int GetFlipbookLengthInFrames();// 0x7472f88 0x78cf1fcfe0
	float GetFlipbookLength();// 0x7472fbc 0x78cf1fd0c0
	float GetFlipbookFramerate();// 0x7472f54 0x78cf1fd1a0
	PaperFlipbook* GetFlipbook();// 0x7473654 0x78cf1fd280

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4] 0x78cea22800
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10] 0x78cf1e3260
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8] 0x78cea22900
	byte CollisionSource;//[Offset: 0x48, Size: 0x1] 0x78cea22980
	bool IsValidKeyFrameIndex(int index);// 0x74720bc 0x78cf1fd360
	float GetTotalDuration();// 0x7472450 0x78cf1fd440
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x7472248 0x78cf1fd520
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x7472198 0x78cf1fd600
	int GetNumKeyFrames();// 0x747217c 0x78cf1fd6e0
	int GetNumFrames();// 0x7472484 0x78cf1fd7c0
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x747234c 0x78cf1fd8a0

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8] 0x78cef8c080
	int FrameRun;//[Offset: 0x8, Size: 0x4] 0x78cef8c100

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x78cf1e2f40
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8] 0x78cea24400
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8] 0x78cea24480
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8] 0x78cea24500
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8] 0x78cea24580
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8] 0x78cea24600
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10] 0x78cf1e2fe0
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1] 0x78cea24700
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4] 0x78cea24780
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8] 0x78cea24800
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4] 0x78cea24880
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10] 0x78cf1e3080

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30] 0x78cef8bd80
	FName SocketName;//[Offset: 0x30, Size: 0x8] 0x78cef8be00

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78cea22780

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78cea23680

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x468, Size: 0x10] 0x78cf1e3120
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x478, Size: 0x10] 0x78cf1e31c0
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x7474bf4 0x78cf1fecc0
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x7474a9c 0x78cf1feda0
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x74748e8 0x78cf1fee80
	bool RemoveInstance(int InstanceIndex);// 0x74749e0 0x78cf1fef60
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x7474e10 0x78cf1ff040
	int GetInstanceCount();// 0x7474990 0x78cf1ff120
	void ClearInstances();// 0x74749c4 0x78cf1ff200
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x7474f88 0x78cf1ff2e0

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x78cef8be80
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x8] 0x78cef8bf00
	Color VertexColor;//[Offset: 0x48, Size: 0x4] 0x78cef8bf80
	int MaterialIndex;//[Offset: 0x4c, Size: 0x4] 0x78cef8c000

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cea24980
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cea24a00
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cea24a80

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78cea24300

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x468, Size: 0x8] 0x78cea25e80
	MaterialInterface* MaterialOverride;//[Offset: 0x470, Size: 0x8] 0x78cea25f00
	LinearColor SpriteColor;//[Offset: 0x478, Size: 0x10] 0x78cea25f80
	void SetSpriteColor(LinearColor NewColor);// 0x7477164 0x78cf1fe940
	bool SetSprite(PaperSprite* NewSprite);// 0x7477248 0x78cf1fea20
	PaperSprite* GetSprite();// 0x747720c 0x78cf1feb00

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x7476aa8 0x78cf1febe0

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x220, Size: 0x8] 0x78cea25d00
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x228, Size: 0x8] 0x78cea25d80
	PaperTerrainComponent* RenderComponent;//[Offset: 0x230, Size: 0x8] 0x78cea25e00

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x440, Size: 0x8] 0x78cea25700
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1] 0x78cea25780
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1] 0x78cea25800
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x450, Size: 0x8] 0x78cea25880
	int RandomSeed;//[Offset: 0x458, Size: 0x4] 0x78cea25900
	float SegmentOverlapAmount;//[Offset: 0x45c, Size: 0x4] 0x78cea25980
	LinearColor TerrainColor;//[Offset: 0x460, Size: 0x10] 0x78cea25a00
	int ReparamStepsPerSegment;//[Offset: 0x470, Size: 0x4] 0x78cea25a80
	byte SpriteCollisionDomain;//[Offset: 0x474, Size: 0x1] 0x78cea25b00
	float CollisionThickness;//[Offset: 0x478, Size: 0x4] 0x78cea25b80
	BodySetup* CachedBodySetup;//[Offset: 0x480, Size: 0x8] 0x78cea25c00
	void SetTerrainColor(LinearColor NewColor);// 0x7477cb8 0x78cf1fe860

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10] 0x78cf1e2e00
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8] 0x78cea25680

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8] 0x78cef8b680
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10] 0x78cee56e60
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8] 0x78cef8b780
	float MinimumAngle;//[Offset: 0x20, Size: 0x4] 0x78cef8b800
	float MaximumAngle;//[Offset: 0x24, Size: 0x4] 0x78cef8b880
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cef8b900
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4] 0x78cef8b980
	int DrawOrder;//[Offset: 0x30, Size: 0x4] 0x78cef8ba00

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18] 0x78cea2ea80
	int LayerWidth;//[Offset: 0x40, Size: 0x4] 0x78cea2eb00
	int LayerHeight;//[Offset: 0x44, Size: 0x4] 0x78cea2eb80
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78cea2ec00
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78cea2ec80
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x78cea2ed00
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x78cea2ed80
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4] 0x78cea2ee00
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4] 0x78cea2ee80
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10] 0x78cea2ef00
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4] 0x78cea2ef80
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4] 0x78cea2f000
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10] 0x78cf1e2a40
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8] 0x78cea2f100
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10] 0x78cf1e2ae0

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8] 0x78cef8d680
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4] 0x78cef8b600

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8] 0x78cea52c00
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8] 0x78cea52c80
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x78cf1e4fc0
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10] 0x78cea52d80
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8] 0x78cea52e00
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8] 0x78cea52e80
	int WidthInTiles;//[Offset: 0x68, Size: 0x4] 0x78cea52f00
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4] 0x78cea52f80
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4] 0x78cea53000
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4] 0x78cea53080
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10] 0x78cf1e5060
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10] 0x78cf1e5100
	int TileWidth;//[Offset: 0x98, Size: 0x4] 0x78cea51100
	int TileHeight;//[Offset: 0x9c, Size: 0x4] 0x78cea51180
	int Margin;//[Offset: 0xa0, Size: 0x4] 0x78cea51200
	int Spacing;//[Offset: 0xa4, Size: 0x4] 0x78cea51280

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4] 0x78cef8c180
	int Top;//[Offset: 0x4, Size: 0x4] 0x78cef8c200
	int Right;//[Offset: 0x8, Size: 0x4] 0x78cef8c280
	int Bottom;//[Offset: 0xc, Size: 0x4] 0x78cef8c300

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8] 0x78cef8cd00
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30] 0x78cef8d480
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1] 0x78cef8d500

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10] 0x78cee56dc0
	byte GeometryType;//[Offset: 0x10, Size: 0x1] 0x78cef8d100
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4] 0x78cef8d180
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4] 0x78cef8d200
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cef8d280
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4] 0x78cef8d300
	float DetailAmount;//[Offset: 0x24, Size: 0x4] 0x78cef8d380
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4] 0x78cef8d400

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1] 0x78cee56c80
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10] 0x78cee56d20
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x8] 0x78cef8ce80
	Vector2D BoxPosition;//[Offset: 0x20, Size: 0x8] 0x78cef8cf00
	float Rotation;//[Offset: 0x28, Size: 0x4] 0x78cef8cf80
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78cef8d000

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10] 0x78cef8d580
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4] 0x78cef8d600

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4] 0x78cea2fa80
	int MapHeight;//[Offset: 0x2c, Size: 0x4] 0x78cea2fb00
	int TileWidth;//[Offset: 0x30, Size: 0x4] 0x78cea2fb80
	int TileHeight;//[Offset: 0x34, Size: 0x4] 0x78cea2fc00
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4] 0x78cea2fc80
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4] 0x78cea2fd00
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4] 0x78cea2fd80
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4] 0x78cea2fe00
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28] 0x78cea2fe80
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8] 0x78cea2ff00
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10] 0x78cf1e29a0
	float CollisionThickness;//[Offset: 0x88, Size: 0x4] 0x78cea2e780
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1] 0x78cea2e800
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1] 0x78cea2e880
	int HexSideLength;//[Offset: 0x90, Size: 0x4] 0x78cea2e900
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x78cea2e980
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4] 0x78cea2ea00

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x78cea2fa00

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x464, Size: 0x4] 0x78cea51300
	int MapHeight;//[Offset: 0x468, Size: 0x4] 0x78cea51380
	int TileWidth;//[Offset: 0x46c, Size: 0x4] 0x78cea51400
	int TileHeight;//[Offset: 0x470, Size: 0x4] 0x78cea51480
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x478, Size: 0x8] 0x78cea51500
	MaterialInterface* Material;//[Offset: 0x480, Size: 0x8] 0x78cea51580
	PaperTileLayer*[] TileLayers;//[Offset: 0x488, Size: 0x10] 0x78cf1e51a0
	LinearColor TileMapColor;//[Offset: 0x498, Size: 0x10] 0x78cea51680
	int UseSingleLayerIndex;//[Offset: 0x4a8, Size: 0x4] 0x78cea51700
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1] 0x78cea51780
	PaperTileMap* TileMap;//[Offset: 0x4b0, Size: 0x8] 0x78cea51800
	void SetTileMapColor(LinearColor NewColor);// 0x747a2f4 0x78cea36520
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x747a920 0x78cea36600
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x747a4f8 0x78cea366e0
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x747a14c 0x78cea367c0
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x74798b0 0x78cea368a0
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x7479b24 0x78cea36980
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x747a408 0x78cea36a60
	void RebuildCollision();// 0x747989c 0x78cea36b40
	bool OwnsTileMap();// 0x747a9dc 0x78cea36c20
	void MakeTileMapEditable();// 0x747a138 0x78cea36d00
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x7479c20 0x78cea36de0
	LinearColor GetTileMapColor();// 0x747a39c 0x78cea36ec0
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x7479fa0 0x78cea36fa0
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x7479e08 0x78cea37080
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x747a67c 0x78cea37160
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x747a7c4 0x78cea37240
	LinearColor GetLayerColor(int Layer);// 0x747a240 0x78cea37320
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x747aa14 0x78cea33a40
	PaperTileLayer* AddNewLayer();// 0x747a3d4 0x78cea33b20

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	static PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x747c6c4 0x78cea361a0
	static FName GetTileUserData(PaperTileInfo Tile);// 0x747cbb0 0x78cea36280
	static Transform GetTileTransform(PaperTileInfo Tile);// 0x747caf0 0x78cea36360
	static void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x747c8a8 0x78cea36440

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78cf1e4f20

--------------------------------
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	NiagaraVariable Parameter;//[Offset: 0x88, Size: 0x20] 0x78cea54180

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10] 0x78cee56aa0

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cef8c800
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4] 0x78cef8c900

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4] 0x78cef8c880

--------------------------------
Class: MovieSceneNiagaraBoolParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraFloatParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraIntegerParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1] 0x78ce727ea0

--------------------------------
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object
	enum SectionStartBehavior;//[Offset: 0xdc, Size: 0x4] 0x78cf1e4ac0
	enum SectionEvaluateBehavior;//[Offset: 0xe0, Size: 0x4] 0x78cf1e4b60
	enum SectionEndBehavior;//[Offset: 0xe4, Size: 0x4] 0x78cf1e4c00
	enum AgeUpdateMode;//[Offset: 0xe8, Size: 0x1] 0x78cf1e4ca0

--------------------------------
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraVectorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int ChannelsUsed;//[Offset: 0xb0, Size: 0x4] 0x78cea55000

--------------------------------
Class: NiagaraActor.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x220, Size: 0x8] 0x78cea54e00
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78cea54e80
	void SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish);// 0x76daa98 0x78cea38ba0
	void OnNiagaraSystemFinished(NiagaraComponent* FinishedComponent);// 0x76da9f0 0x78cea38c80

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x440, Size: 0x8] 0x78cea57400
	enum TickBehavior;//[Offset: 0x448, Size: 0x1] 0x78cf1e4160
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x450, Size: 0xc8] 0x78cea57500
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1] 0x78cea57580
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x518, Size: 0x1] 0x78cea57600
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x541, Size: 0x1] 0x78cea57680
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x541, Size: 0x1] 0x78cea57700
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x541, Size: 0x1] 0x78cea57780
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x541, Size: 0x1] 0x78cea57800
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x544, Size: 0x4] 0x78cea57880
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x548, Size: 0x10] 0x78cf1e4200
	delegate OnSystemFinished;//[Offset: 0x560, Size: 0x10] 0x78cea57980
	SceneComponent* AutoAttachParent;//[Offset: 0x570, Size: 0x8] 0x78cea57a00
	FName AutoAttachSocketName;//[Offset: 0x578, Size: 0x8] 0x78cea57a80
	enum AutoAttachLocationRule;//[Offset: 0x580, Size: 0x1] 0x78cf1e42a0
	enum AutoAttachRotationRule;//[Offset: 0x581, Size: 0x1] 0x78cf1e4340
	enum AutoAttachScaleRule;//[Offset: 0x582, Size: 0x1] 0x78cf1e43e0
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0x76e541c 0x78cea3c560
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0x76e5034 0x78cea3c640
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0x76e4e50 0x78cea3c720
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0x76e42a4 0x78cea3c800
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0x76e5220 0x78cea3c8e0
	void SetVariableObject(FName InVariableName, Object* Object);// 0x76e4484 0x78cea3c9c0
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0x76e4394 0x78cea390e0
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0x76e5620 0x78cea391c0
	void SetVariableInt(FName InVariableName, int InValue);// 0x76e4a68 0x78cea392a0
	void SetVariableFloat(FName InVariableName, float InValue);// 0x76e4c5c 0x78cea39380
	void SetVariableBool(FName InVariableName, bool InValue);// 0x76e4864 0x78cea39460
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0x76e4674 0x78cea39540
	void SetTickBehavior(enum NewTickBehavior);// 0x76e5838 0x78cea39620
	void SetSeekDelta(float InSeekDelta);// 0x76e5a6c 0x78cea39700
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0x76e3e28 0x78cea397e0
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0x76e39b0 0x78cea398c0
	void SetPaused(bool bInPaused);// 0x76e3b94 0x78cea399a0
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0x76e5518 0x78cea39a80
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0x76e5124 0x78cea39b60
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0x76e4f3c 0x78cea39c40
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0x76e5318 0x78cea39d20
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0x76e4574 0x78cea39e00
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0x76e5718 0x78cea39ee0
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0x76e4b5c 0x78cea39fc0
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0x76e4d50 0x78cea3a0a0
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0x76e4960 0x78cea3a180
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0x76e4764 0x78cea3a260
	void SetMaxSimTime(float InMaxTime);// 0x76e5990 0x78cea3a340
	void SetGpuComputeDebug(bool bEnableDebug);// 0x76e5e58 0x78cea3a420
	void SetForceSolo(bool bInForceSolo);// 0x76e5f28 0x78cea3a500
	void SetDesiredAge(float InDesiredAge);// 0x76e5ca0 0x78cea3a5e0
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0x76e5b48 0x78cea3a6c0
	void SetAutoDestroy(bool bInAutoDestroy);// 0x76e58e0 0x78cea3a7a0
	void SetAsset(NiagaraSystem* InAsset);// 0x76e5ff4 0x78cea3a880
	void SetAllowScalability(bool bAllow);// 0x76e38d0 0x78cea3a960
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0x76e5d7c 0x78cea3aa40
	void SeekToDesiredAge(float InDesiredAge);// 0x76e5bf8 0x78cea3ab20
	void ResetSystem();// 0x76e3eec 0x78cea3ac00
	void ReinitializeSystem();// 0x76e3ed8 0x78cea3ace0
	bool IsPaused();// 0x76e3b5c 0x78cea37400
	enum GetTickBehavior();// 0x76e581c 0x78cea374e0
	float GetSeekDelta();// 0x76e5b14 0x78cea375c0
	bool GetPreviewLODDistanceEnabled();// 0x76e3998 0x78cea376a0
	int GetPreviewLODDistance();// 0x76e3980 0x78cea37780
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0x76e3f00 0x78cea37860
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0x76e4054 0x78cea37940
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0x76e41a8 0x78cea37a20
	float GetMaxSimTime();// 0x76e5a38 0x78cea37b00
	bool GetForceSolo();// 0x76e5f08 0x78cea37be0
	float GetDesiredAge();// 0x76e5d48 0x78cea37cc0
	NiagaraDataInterface* GetDataInterface(FString Name);// 0x76e3aa0 0x78cea37da0
	NiagaraSystem* GetAsset();// 0x76e5fd8 0x78cea37e80
	enum GetAgeUpdateMode();// 0x76e5e24 0x78cea37f60
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0x76e3c44 0x78cea38040
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0x76e3d34 0x78cea38120

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cea68600
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78cea68680
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x78cea68700
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33, Size: 0x1] 0x78cea68780
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 0x8] 0x78cea68800
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cea68880
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 0x10] 0x78cf1e8580
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 0x10] 0x78cea68980
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 0x10] 0x78cf1e8620
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 0x10] 0x78cf1e86c0
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 0x8] 0x78cea68b00
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 0x8] 0x78cea68b80
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 0x218] 0x78cea68c00
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 0xc8] 0x78cea68c80
	Box FixedBounds;//[Offset: 0x388, Size: 0x1c] 0x78cea68d00
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1] 0x78cea68d80
	float WarmupTime;//[Offset: 0x3a8, Size: 0x4] 0x78cea68e00
	int WarmupTickCount;//[Offset: 0x3ac, Size: 0x4] 0x78cea68e80
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 0x4] 0x78cea68f00
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1] 0x78cea68f80
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 0x10] 0x78cf1e8760

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 0x4] 0x78cf1e75e0
	enum CullReaction;//[Offset: 0x2c, Size: 0x4] 0x78cf1e7680
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 0x8] 0x78cea5e900
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x78cf1e7720
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 0x10] 0x78cea5ea00
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 0x10] 0x78cea5ea80

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x78cef92200
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78cef92280
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78cef92300
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78cef92380
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1] 0x78cef92400
	float MaxDistance;//[Offset: 0x34, Size: 0x4] 0x78cef92480
	int MaxInstances;//[Offset: 0x38, Size: 0x4] 0x78cef92500
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4] 0x78cef92580
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4] 0x78cef92600

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4] 0x78cef92800
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10] 0x78cee57d60
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10] 0x78cee57e00

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x78cef92880
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 0x4] 0x78cef92900
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 0x4] 0x78cef92980

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8] 0x78cef92a80
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cef92b00
	int MinInt;//[Offset: 0xc, Size: 0x4] 0x78cef92b80
	int MaxInt;//[Offset: 0x10, Size: 0x4] 0x78cef92c00
	float MinFloat;//[Offset: 0x14, Size: 0x4] 0x78cef92c80
	float MaxFloat;//[Offset: 0x18, Size: 0x4] 0x78cef92d00
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x78cef92d80
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x78cef92e00
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1] 0x78cef92e80
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1] 0x78cef92f00

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x78cee5a4c0

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x78cee57cc0

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x78cef93000
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78cef93080
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4] 0x78cef93100

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78cef94100
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x78cef94180
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x78cef94200
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x78cef92180

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x78cee57c20

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10] 0x78cef93380
	FName IdName;//[Offset: 0x10, Size: 0x8] 0x78cef93400
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cef93480
	FName Name;//[Offset: 0x1c, Size: 0x8] 0x78cef93500
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8] 0x78cef93580

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cea60880
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cea60900
	int RandomSeed;//[Offset: 0x2c, Size: 0x4] 0x78cea60980
	enum AllocationMode;//[Offset: 0x30, Size: 0x1] 0x78cf1e7180
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4] 0x78cea60a80
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28] 0x78cea60b00
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28] 0x78cea60b80
	enum SimTarget;//[Offset: 0x88, Size: 0x1] 0x78cf1e7220
	Box FixedBounds;//[Offset: 0x8c, Size: 0x1c] 0x78cea60c80
	int MinDetailLevel;//[Offset: 0xa8, Size: 0x4] 0x78cea60d00
	int MaxDetailLevel;//[Offset: 0xac, Size: 0x4] 0x78cea60d80
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 0x14] 0x78cea60e00
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 0x30] 0x78cea60e80
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 0x10] 0x78cea60f00
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78cea60f80
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x78cea61000
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1] 0x78cea61080
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1] 0x78cea5f800
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1] 0x78cea5f880
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1] 0x78cea5f900
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 0x1] 0x78cea5f980
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 0x4] 0x78cea5fa00
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 0x4] 0x78cea5fa80
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 0x4] 0x78cea5fb00
	<uint32> SpawnStages;//[Offset: 0x118, Size: 0x50] 0x78cf1e72c0
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1] 0x78cea5fc00
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1] 0x78cea5fc80
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 0x1] 0x78cea5fd00
	FString UniqueEmitterName;//[Offset: 0x170, Size: 0x10] 0x78cea5fd80
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 0x10] 0x78cf1e7360
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 0x10] 0x78cf1e7400
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 0x10] 0x78cf1e74a0
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 0x8] 0x78cea5ff80
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 0x10] 0x78cf1e7540

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8] 0x78cef93980
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10] 0x78cee5a380
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10] 0x78cee5a420

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1] 0x78cf1e8d00
	int UsageIndex;//[Offset: 0x2c, Size: 0x4] 0x78cea66a00
	Guid UsageId;//[Offset: 0x30, Size: 0x10] 0x78cea66a80
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x78] 0x78cea66b00
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 0x98] 0x78cea66b80
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 0x10] 0x78cf1e8da0
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 0x48] 0x78cea66c80
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1b8, Size: 0xe0] 0x78cea66d00
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x298, Size: 0x10] 0x78cf1e8e40
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2a8, Size: 0x10] 0x78cf1e8ee0
	void RaiseOnGPUCompilationComplete();// 0x7712ddc 0x78cea3cb80

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8] 0x78cef94d80
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10] 0x78cee59fc0
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10] 0x78cee5a060
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10] 0x78cee5a100
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10] 0x78cee5a1a0

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4] 0x78cef94e00

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 0x4] 0x78cef96f00
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 0x4] 0x78cef96f80
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 0x10] 0x78cee59160
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78cef97280

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2] 0x78cef97000
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2] 0x78cef97080
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2] 0x78cef97100
	uint16 DestSize;//[Offset: 0x6, Size: 0x2] 0x78cef97180

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x78cef94c00
	int SrcOffset;//[Offset: 0x20, Size: 0x4] 0x78cef94c80
	int DestOffset;//[Offset: 0x24, Size: 0x4] 0x78cef94d00

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10] 0x78cef95400
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1] 0x78cee59340
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10] 0x78cef95500
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x78cef95580
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x78cef95600
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x78cef95680
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10] 0x78cef95700
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10] 0x78cef95780

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10] 0x78cee56be0

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10] 0x78cee593e0
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 0x10] 0x78cee59480
	int NumTempRegisters;//[Offset: 0x20, Size: 0x4] 0x78cef95900
	int NumUserPtrs;//[Offset: 0x24, Size: 0x4] 0x78cef95980
	byte[] ScriptLiterals;//[Offset: 0x28, Size: 0x10] 0x78cee59520
	NiagaraVariable[] Attributes;//[Offset: 0x38, Size: 0x10] 0x78cee595c0
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x48, Size: 0x1] 0x78cef95b00
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x50, Size: 0x10] 0x78cee59660
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x60, Size: 0x10] 0x78cee59700
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x80, Size: 0x10] 0x78cee597a0
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0x90, Size: 0x10] 0x78cee59840
	NiagaraStatScope[] StatScopes;//[Offset: 0xa0, Size: 0x10] 0x78cee598e0
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xb0, Size: 0x10] 0x78cee59a20
	enum LastCompileStatus;//[Offset: 0xc0, Size: 0x1] 0x78cee59ac0
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xc8, Size: 0x10] 0x78cee59c00
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78cef94400

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cef90680

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cef8f980
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4] 0x78cef8fa00
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10] 0x78cef8fb80
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8] 0x78cef8fc00
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8] 0x78cef8fc80
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cef8fd00

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8] 0x78cef8fa80
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2] 0x78cef8fb00

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cef8fe80
	FName OwnerName;//[Offset: 0x8, Size: 0x8] 0x78cef8ff00
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10] 0x78cee589e0
	int NumOutputs;//[Offset: 0x20, Size: 0x4] 0x78cef8e780
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10] 0x78cee58a80

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8] 0x78cef8e800
	FName Value;//[Offset: 0x8, Size: 0x8] 0x78cef8e880

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cef90480
	enum Type;//[Offset: 0x8, Size: 0x1] 0x78cee58760

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc] 0x78cef90580
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10] 0x78cee58800

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8] 0x78cef8fd80
	FName FriendlyName;//[Offset: 0x8, Size: 0x8] 0x78cef8fe00

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10] 0x78cef95e00
	FString DIClassName;//[Offset: 0x10, Size: 0x10] 0x78cef95e80
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10] 0x78cee59980

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8] 0x78cef96080
	FName IterationSource;//[Offset: 0x8, Size: 0x8] 0x78cef96100
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cef96180
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78cef96200
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78cef96280
	FName[] OutputDestinations;//[Offset: 0x18, Size: 0x10] 0x78cee59b60
	int MinStage;//[Offset: 0x28, Size: 0x4] 0x78cef94280
	int MaxStage;//[Offset: 0x2c, Size: 0x4] 0x78cef94300

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8] 0x78cea64d80
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10] 0x78cf1e6b40
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8] 0x78cea64e80
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8] 0x78cea64f00
	Guid CompileId;//[Offset: 0x50, Size: 0x10] 0x78cea64f80

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8] 0x78cea65000
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10] 0x78cf1e6be0
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x78] 0x78cea65100
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0x77087bc 0x78cea3d360
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0x77086b4 0x78cea3d440
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0x77088b8 0x78cea3d520
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0x77084b4 0x78cea3d600
	void SetIntParameter(FString InVariableName, int InValue);// 0x77089b0 0x78cea3d6e0
	void SetFloatParameter(FString InVariableName, float InValue);// 0x7708ab0 0x78cea3d7c0
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0x77085b8 0x78cea3d8a0
	void SetBoolParameter(FString InVariableName, bool InValue);// 0x7708bb0 0x78cea3d980
	Vector GetVectorParameter(FString InVariableName);// 0x7708ef8 0x78cea3da60
	Vector4 GetVector4Parameter(FString InVariableName);// 0x7708e38 0x78cea3db40
	Vector2D GetVector2DParameter(FString InVariableName);// 0x7708fb8 0x78cea3dc20
	Quat GetQuatParameter(FString InVariableName);// 0x7708d78 0x78cea3dd00
	int GetIntParameter(FString InVariableName);// 0x7709074 0x78cea3dde0
	float GetFloatParameter(FString InVariableName);// 0x7709130 0x78cea3dec0
	LinearColor GetColorParameter(FString InVariableName);// 0x7708cb8 0x78cea3dfa0
	bool GetBoolParameter(FString InVariableName);// 0x77091ec 0x78cea3e080

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8] 0x78cef90f80
	FName Name;//[Offset: 0x8, Size: 0x8] 0x78cef91000
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4] 0x78cef91080
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10] 0x78cef8f800
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8] 0x78cef8f880
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8] 0x78cef8f900

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cef93a00
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8] 0x78cef93a80
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8] 0x78cef93b00

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4] 0x78cef93c00
	FName ID;//[Offset: 0x4, Size: 0x8] 0x78cef93c80
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40] 0x78cef93d00

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10] 0x78cee57f40
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10] 0x78cee583a0
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc] 0x78cef91880
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 0x4] 0x78cef91900
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 0x4] 0x78cef91980
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 0x4] 0x78cef91a00
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78cef91a80
	enum SimTarget;//[Offset: 0x39, Size: 0x1] 0x78cee58440

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 0x4] 0x78cef91300
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 0x4] 0x78cef91380
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 0x4] 0x78cef91400
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60] 0x78cef91780

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10] 0x78cee57fe0
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10] 0x78cee58080
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10] 0x78cee58120
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10] 0x78cee581c0
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10] 0x78cee58260
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10] 0x78cee58300

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4] 0x78cef93e00
	float Medium;//[Offset: 0x4, Size: 0x4] 0x78cef93e80
	float High;//[Offset: 0x8, Size: 0x4] 0x78cef93f00
	float Epic;//[Offset: 0xc, Size: 0x4] 0x78cef93f80
	float Cine;//[Offset: 0x10, Size: 0x4] 0x78cef94000

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x78cee57ea0

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78cef92780

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30] 0x78cea59200
	int SortOrderHint;//[Offset: 0x58, Size: 0x4] 0x78cea59280
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78cea59300
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1] 0x78cea59380

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1] 0x78cee5a2e0
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 0x4] 0x78cef93680
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 0x4] 0x78cef93700
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10] 0x78cef93780
	FName SourceEventName;//[Offset: 0x44, Size: 0x8] 0x78cef93800
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78cef93880
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 0x4] 0x78cef93900

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8] 0x78cea66480
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8] 0x78cea66500
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78cea66580

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x78] 0x78cef96580
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 0x40] 0x78cef96600
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 0x40] 0x78cef96680
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 0x40] 0x78cef96700
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 0x20] 0x78cef96780
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 0x20] 0x78cef96800
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 0x20] 0x78cef96880
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 0x10] 0x78cee5b780
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 0x20] 0x78cef96980
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 0x20] 0x78cef96a00
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 0x20] 0x78cef96a80
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 0x10] 0x78cee5b960

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10] 0x78cee5b820
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10] 0x78cee5b8c0

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4] 0x78cef96b80
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4] 0x78cef96c00

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 0x50] 0x78cf5ef040

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x78cef90300
	uint32 MaterialSubIndex;//[Offset: 0x8, Size: 0x4] 0x78cef90380
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 0x8] 0x78cef90400

--------------------------------
Class: NiagaraComponentPool.Object
	<NiagaraSystem*,NCPool> WorldParticleSystemPools;//[Offset: 0x28, Size: 0x50] 0x78cf156d00

--------------------------------
Class: NCPool
	NCPoolElement[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x78cee58580
	NiagaraComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10] 0x78cee58620
	NiagaraComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10] 0x78cee586c0

--------------------------------
Class: NCPoolElement
	NiagaraComponent* Component;//[Offset: 0x0, Size: 0x8] 0x78cef90100

--------------------------------
Class: NiagaraComponentRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	class SceneComponent* ComponentType;//[Offset: 0x80, Size: 0x8] 0x78cf1e4020
	uint32 ComponentCountLimit;//[Offset: 0x88, Size: 0x4] 0x78cea58f00
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x90, Size: 0x58] 0x78cea58f80
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78cea59000
	bool bOnlyCreateComponentsOnParticleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x78cea59080
	SceneComponent* TemplateComponent;//[Offset: 0xf0, Size: 0x8] 0x78cea59100
	NiagaraComponentPropertyBinding[] PropertyBindings;//[Offset: 0xf8, Size: 0x10] 0x78cf1e40c0

--------------------------------
Class: NiagaraVariableAttributeBinding
	NiagaraVariableBase ParamMapVariable;//[Offset: 0x0, Size: 0xc] 0x78cef8ed00
	NiagaraVariable DataSetVariable;//[Offset: 0x10, Size: 0x20] 0x78cef8ed80
	NiagaraVariable RootVariable;//[Offset: 0x30, Size: 0x20] 0x78cef8ee00
	byte BindingSourceMode;//[Offset: 0x50, Size: 0x1] 0x78cef8ee80
	bool bBindingExistsOnSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x78cef8ef00
	bool bIsCachedParticleValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1] 0x78cef8ef80

--------------------------------
Class: NiagaraComponentPropertyBinding
	NiagaraVariableAttributeBinding AttributeBinding;//[Offset: 0x0, Size: 0x58] 0x78cef91f80
	FName PropertyName;//[Offset: 0x58, Size: 0x8] 0x78cef92000
	NiagaraTypeDefinition PropertyType;//[Offset: 0x60, Size: 0x10] 0x78cef92080
	FName MetadataSetterName;//[Offset: 0x70, Size: 0x8] 0x78cef92100
	NiagaraVariable WritableValue;//[Offset: 0x78, Size: 0x20] 0x78cef90080

--------------------------------
Class: NiagaraComponentSettings.Object
	<FName> SuppressActivationList;//[Offset: 0x28, Size: 0x50] 0x78cf1e3e40
	<FName> ForceAutoPooolingList;//[Offset: 0x78, Size: 0x50] 0x78cf1e3ee0
	<NiagaraEmitterNameSettingsRef> SuppressEmitterList;//[Offset: 0xc8, Size: 0x50] 0x78cf1e3f80

--------------------------------
Class: NiagaraEmitterNameSettingsRef
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x78cef91e80
	FString EmitterName;//[Offset: 0x8, Size: 0x10] 0x78cef91f00

--------------------------------
Class: NiagaraConvertInPlaceUtilityBase.Object

--------------------------------
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture2DArray* Texture;//[Offset: 0x38, Size: 0x8] 0x78cea58d00

--------------------------------
Class: NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int MaxElements;//[Offset: 0x6c, Size: 0x4] 0x78cea58c80

--------------------------------
Class: NiagaraDataInterfaceArrayFloat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] FloatData;//[Offset: 0x78, Size: 0x10] 0x78cf1e66e0

--------------------------------
Class: NiagaraDataInterfaceArrayFloat2.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector2D[] FloatData;//[Offset: 0x78, Size: 0x10] 0x78cf1e6640

--------------------------------
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector[] FloatData;//[Offset: 0x78, Size: 0x10] 0x78cf1e65a0

--------------------------------
Class: NiagaraDataInterfaceArrayFloat4.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector4[] FloatData;//[Offset: 0x78, Size: 0x10] 0x78cf1e6500

--------------------------------
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	LinearColor[] ColorData;//[Offset: 0x78, Size: 0x10] 0x78cf1e6460

--------------------------------
Class: NiagaraDataInterfaceArrayQuat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Quat[] QuatData;//[Offset: 0x78, Size: 0x10] 0x78cf1e63c0

--------------------------------
Class: NiagaraDataInterfaceArrayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector4[] ArrayData);// 0x76edcb0 0x78cea3b760
	static void SetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector2D[] ArrayData);// 0x76edf38 0x78cea3b840
	static void SetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0x76eddf4 0x78cea3b920
	static void SetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Quat[] ArrayData);// 0x76eda28 0x78cea3ba00
	static void SetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName, out const int[] ArrayData);// 0x76ed8e4 0x78cea3bae0
	static void SetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const float[] ArrayData);// 0x76ee07c 0x78cea3bbc0
	static void SetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName, out const LinearColor[] ArrayData);// 0x76edb6c 0x78cea3bca0
	static void SetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName, out const bool[] ArrayData);// 0x76ed7a0 0x78cea3bd80
	static Vector4[] GetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ed2b0 0x78cea3be60
	static Vector2D[] GetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ed528 0x78cea3bf40
	static Vector[] GetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ed3ec 0x78cea3c020
	static Quat[] GetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ed038 0x78cea3c100
	static int[] GetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ecefc 0x78cea3c1e0
	static float[] GetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ed664 0x78cea3c2c0
	static LinearColor[] GetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ed174 0x78cea3c3a0
	static bool[] GetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x76ecdc0 0x78cea3c480

--------------------------------
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int[] IntData;//[Offset: 0x78, Size: 0x10] 0x78cf1e5920

--------------------------------
Class: NiagaraDataInterfaceArrayBool.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool[] BoolData;//[Offset: 0x78, Size: 0x10] 0x78cf1e5880

--------------------------------
Class: NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8] 0x78cea5b200

--------------------------------
Class: NiagaraDataInterfaceAudioOscilloscope.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8] 0x78cea5b080
	int Resolution;//[Offset: 0x40, Size: 0x4] 0x78cea5b100
	float ScopeInMilliseconds;//[Offset: 0x44, Size: 0x4] 0x78cea5b180

--------------------------------
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundBase* SoundToPlay;//[Offset: 0x38, Size: 0x8] 0x78cea5ad00
	SoundAttenuation* Attenuation;//[Offset: 0x40, Size: 0x8] 0x78cea5ad80
	SoundConcurrency* Concurrency;//[Offset: 0x48, Size: 0x8] 0x78cea5ae00
	FName[] ParameterNames;//[Offset: 0x50, Size: 0x10] 0x78cf1e57e0
	bool bLimitPlaysPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cea5af00
	int MaxPlaysPerTick;//[Offset: 0x64, Size: 0x4] 0x78cea5af80
	bool bStopWhenComponentIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78cea5b000

--------------------------------
Class: NiagaraDataInterfaceAudioSpectrum.NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Resolution;//[Offset: 0x40, Size: 0x4] 0x78cea5ab00
	float MinimumFrequency;//[Offset: 0x44, Size: 0x4] 0x78cea5ab80
	float MaximumFrequency;//[Offset: 0x48, Size: 0x4] 0x78cea5ac00
	float NoiseFloorDb;//[Offset: 0x4c, Size: 0x4] 0x78cea5ac80

--------------------------------
Class: NiagaraDataInterfaceCamera.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int PlayerControllerIndex;//[Offset: 0x34, Size: 0x4] 0x78cea5aa00
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cea5aa80

--------------------------------
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] ShaderLUT;//[Offset: 0x38, Size: 0x10] 0x78cf1e5740
	float LUTMinTime;//[Offset: 0x48, Size: 0x4] 0x78cea5a600
	float LUTMaxTime;//[Offset: 0x4c, Size: 0x4] 0x78cea5a680
	float LUTInvTimeRange;//[Offset: 0x50, Size: 0x4] 0x78cea5a700
	float LUTNumSamplesMinusOne;//[Offset: 0x54, Size: 0x4] 0x78cea5a780
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78cea5a800
	bool bExposeCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78cea5a880
	FName ExposedName;//[Offset: 0x5c, Size: 0x8] 0x78cea5a900
	Texture2D* ExposedTexture;//[Offset: 0x68, Size: 0x8] 0x78cea5a980

--------------------------------
Class: NiagaraDataInterfaceColorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve RedCurve;//[Offset: 0x70, Size: 0x80] 0x78cea5c480
	RichCurve GreenCurve;//[Offset: 0xf0, Size: 0x80] 0x78cea5c500
	RichCurve BlueCurve;//[Offset: 0x170, Size: 0x80] 0x78cea5c580
	RichCurve AlphaCurve;//[Offset: 0x1f0, Size: 0x80] 0x78cea5c600

--------------------------------
Class: NiagaraDataInterfaceCurlNoise.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 Seed;//[Offset: 0x34, Size: 0x4] 0x78cea5c400

--------------------------------
Class: NiagaraDataInterfaceCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve Curve;//[Offset: 0x70, Size: 0x80] 0x78cea5c380

--------------------------------
Class: NiagaraParticleCallbackHandler.Interface.Object
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem);// 0x76f1934 0x78cea3b680

--------------------------------
Class: BasicParticleData
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x78cef91d00
	float Size;//[Offset: 0xc, Size: 0x4] 0x78cef91d80
	Vector Velocity;//[Offset: 0x10, Size: 0xc] 0x78cef91e00

--------------------------------
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding CallbackHandlerParameter;//[Offset: 0x38, Size: 0x20] 0x78cea5c080
	enum GPUAllocationMode;//[Offset: 0x58, Size: 0x1] 0x78cf1e5600
	int GPUAllocationFixedSize;//[Offset: 0x5c, Size: 0x4] 0x78cea5c180
	float GPUAllocationPerParticleSize;//[Offset: 0x60, Size: 0x4] 0x78cea5c200

--------------------------------
Class: NiagaraUserParameterBinding
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x78cef8f300

--------------------------------
Class: NiagaraDataInterfaceGBuffer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<int> OutputShaderStages;//[Offset: 0x38, Size: 0x50] 0x78cf1e54c0
	<int> IterationShaderStages;//[Offset: 0x88, Size: 0x50] 0x78cf1e5560

--------------------------------
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumCellsX;//[Offset: 0xd8, Size: 0x4] 0x78cea5bc80
	int NumCellsY;//[Offset: 0xdc, Size: 0x4] 0x78cea5bd00
	int NumCellsMaxAxis;//[Offset: 0xe0, Size: 0x4] 0x78cea5bd80
	int NumAttributes;//[Offset: 0xe4, Size: 0x4] 0x78cea5be00
	bool SetGridFromMaxAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78cea5be80
	Vector2D WorldBBoxSize;//[Offset: 0xec, Size: 0x8] 0x78cea5bf00

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xf8, Size: 0x20] 0x78cea5d380
	enum OverrideBufferFormat;//[Offset: 0x118, Size: 0x1] 0x78cf1e5420
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119, Size: 0x1] 0x78cea5d480
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x170, Size: 0x50] 0x78cf156c40
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x76f27d8 0x78cea3b300
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x76f2930 0x78cea3b3e0
	bool FillTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, int AttributeIndex);// 0x76f2c3c 0x78cea3b4c0
	bool FillRawTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, out int TilesX, out int TilesY);// 0x76f2a88 0x78cea3b5a0

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollectionReader.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xf8, Size: 0x10] 0x78cea5d280
	FString DIName;//[Offset: 0x108, Size: 0x10] 0x78cea5d300

--------------------------------
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector NumCells;//[Offset: 0xd8, Size: 0xc] 0x78cea5d000
	float CellSize;//[Offset: 0xe4, Size: 0x4] 0x78cea5d080
	int NumCellsMaxAxis;//[Offset: 0xe8, Size: 0x4] 0x78cea5d100
	enum SetResolutionMethod;//[Offset: 0xec, Size: 0x4] 0x78cf1e5380
	Vector WorldBBoxSize;//[Offset: 0xf0, Size: 0xc] 0x78cea5d200

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0xfc, Size: 0x4] 0x78cea5e680
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x100, Size: 0x20] 0x78cea5e700
	enum BufferFormat;//[Offset: 0x120, Size: 0x1] 0x78cf1e52e0
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x76f371c 0x78cea3af80
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x76f38cc 0x78cea3b060
	bool FillVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, int AttributeIndex);// 0x76f3c80 0x78cea3b140
	bool FillRawVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, out int TilesX, out int TilesY, out int TileZ);// 0x76f3a7c 0x78cea3b220

--------------------------------
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* SourceLandscape;//[Offset: 0x38, Size: 0x8] 0x78cea5e600

--------------------------------
Class: NiagaraDataInterfaceNeighborGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 MaxNeighborsPerCell;//[Offset: 0xfc, Size: 0x4] 0x78cea5e580

--------------------------------
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceParticleRead.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xd8, Size: 0x10] 0x78cea5e500

--------------------------------
Class: NiagaraDataInterfacePlatformSet.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x38, Size: 0x30] 0x78cea5e480

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0xd8, Size: 0x8] 0x78cea5e180
	byte OverrideRenderTargetFormat;//[Offset: 0xe0, Size: 0x1] 0x78cea5e200
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe1, Size: 0x1] 0x78cea5e280
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20] 0x78cea5e300
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50] 0x78cf156b80

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2DArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc] 0x78cea5de80
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1] 0x78cea5df00
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1] 0x78cea5df80
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20] 0x78cea5e000
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50] 0x78cf156ac0

--------------------------------
Class: NiagaraDataInterfaceRenderTargetVolume.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc] 0x78cea5db80
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1] 0x78cea5dc00
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1] 0x78cea5dc80
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20] 0x78cea5dd00
	<uint64,TextureRenderTargetVolume*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50] 0x78cf156a00

--------------------------------
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceSkeletalMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1] 0x78cf1e7900
	Actor* Source;//[Offset: 0x38, Size: 0x8] 0x78cea5f700
	NiagaraUserParameterBinding MeshUserParameter;//[Offset: 0x40, Size: 0x20] 0x78cea5f780
	SkeletalMeshComponent* SourceComponent;//[Offset: 0x60, Size: 0x8] 0x78cea5d700
	enum SkinningMode;//[Offset: 0x68, Size: 0x1] 0x78cf1e79a0
	FName[] SamplingRegions;//[Offset: 0x70, Size: 0x10] 0x78cf1e7a40
	int WholeMeshLOD;//[Offset: 0x80, Size: 0x4] 0x78cea5d880
	FName[] FilteredBones;//[Offset: 0x88, Size: 0x10] 0x78cf1e7ae0
	FName[] FilteredSockets;//[Offset: 0x98, Size: 0x10] 0x78cf1e7b80
	FName ExcludeBoneName;//[Offset: 0xa8, Size: 0x8] 0x78cea5da00
	bool bExcludeBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78cea5da80
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x78cea5db00

--------------------------------
Class: NiagaraDataInterfaceSpline.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* Source;//[Offset: 0x38, Size: 0x8] 0x78cea5f600

--------------------------------
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1] 0x78cf1e77c0
	StaticMesh* DefaultMesh;//[Offset: 0x38, Size: 0x8] 0x78cea5f300
	Actor* Source;//[Offset: 0x40, Size: 0x8] 0x78cea5f380
	StaticMeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8] 0x78cea5f400
	NDIStaticMeshSectionFilter SectionFilter;//[Offset: 0x50, Size: 0x10] 0x78cea5f480
	bool bUsePhysicsBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cea5f500
	FName[] FilteredSockets;//[Offset: 0x68, Size: 0x10] 0x78cf1e7860

--------------------------------
Class: NDIStaticMeshSectionFilter
	int[] AllowedMaterialSlots;//[Offset: 0x0, Size: 0x10] 0x78cee584e0

--------------------------------
Class: NiagaraDataInterfaceTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture* Texture;//[Offset: 0x38, Size: 0x8] 0x78cea5f200

--------------------------------
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x78cea5f100
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x78cea5f180

--------------------------------
Class: NiagaraDataInterfaceVector4Curve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x78cea5ef00
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x78cea5ef80
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80] 0x78cea5f000
	RichCurve WCurve;//[Offset: 0x1f0, Size: 0x80] 0x78cea5f080

--------------------------------
Class: NiagaraDataInterfaceVectorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x78cea5ed80
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x78cea5ee00
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80] 0x78cea5ee80

--------------------------------
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VectorField* Field;//[Offset: 0x38, Size: 0x8] 0x78cea5eb80
	bool bTileX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cea5ec00
	bool bTileY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78cea5ec80
	bool bTileZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78cea5ed00

--------------------------------
Class: NiagaraDataInterfaceVolumeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VolumeTexture* Texture;//[Offset: 0x38, Size: 0x8] 0x78cea5eb00

--------------------------------
Class: NiagaraEditorDataBase.Object

--------------------------------
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSignificanceHandlerAge.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction_SpawnParticles.NiagaraEventReceiverEmitterAction.Object
	uint32 NumParticles;//[Offset: 0x28, Size: 0x4] 0x78cea60800

--------------------------------
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object
	static NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x7705c14 0x78cea3e160
	static NiagaraComponent* SpawnSystemAtLocation(const Object* WorldContextObject, NiagaraSystem* SystemTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x7705f64 0x78cea3e240
	static void SetVolumeTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, VolumeTexture* Texture);// 0x7705494 0x78cea3e320
	static void SetTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture* Texture);// 0x77055d0 0x78cea3e400
	static void SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraComponent* NiagaraSystem, FString OverrideName, out const FName[] SamplingRegions);// 0x770570c 0x78cea3e4e0
	static void OverrideSystemUserVariableStaticMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMeshComponent* StaticMeshComponent);// 0x7705ad8 0x78cea3e5c0
	static void OverrideSystemUserVariableStaticMesh(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMesh* StaticMesh);// 0x770599c 0x78cea3e6a0
	static void OverrideSystemUserVariableSkeletalMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, SkeletalMeshComponent* SkeletalMeshComponent);// 0x7705860 0x78cea3adc0
	static NiagaraParameterCollectionInstance* GetNiagaraParameterCollection(Object* WorldContextObject, NiagaraParameterCollection* Collection);// 0x77053a4 0x78cea3aea0

--------------------------------
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78cea63000
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78cea63080
	float RadiusScale;//[Offset: 0x84, Size: 0x4] 0x78cea63100
	Vector ColorAdd;//[Offset: 0x88, Size: 0xc] 0x78cea63180
	NiagaraVariableAttributeBinding LightRenderingEnabledBinding;//[Offset: 0x98, Size: 0x58] 0x78cea61100
	NiagaraVariableAttributeBinding LightExponentBinding;//[Offset: 0xf0, Size: 0x58] 0x78cea61180
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x148, Size: 0x58] 0x78cea61200
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x1a0, Size: 0x58] 0x78cea61280
	NiagaraVariableAttributeBinding RadiusBinding;//[Offset: 0x1f8, Size: 0x58] 0x78cea61300
	NiagaraVariableAttributeBinding VolumetricScatteringBinding;//[Offset: 0x250, Size: 0x58] 0x78cea61380

--------------------------------
Class: NiagaraMeshRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	StaticMesh* ParticleMesh;//[Offset: 0x80, Size: 0x8] 0x78cea64080
	enum SortMode;//[Offset: 0x88, Size: 0x1] 0x78cf1e6c80
	bool bOverrideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1] 0x78cea64180
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1] 0x78cea64200
	NiagaraMeshMaterialOverride[] OverrideMaterials;//[Offset: 0x90, Size: 0x10] 0x78cf1e6d20
	Vector2D SubImageSize;//[Offset: 0xa0, Size: 0x8] 0x78cea62200
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78cea62280
	enum FacingMode;//[Offset: 0xa9, Size: 0x1] 0x78cf1e6dc0
	bool bLockedAxisEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1] 0x78cea62380
	Vector LockedAxis;//[Offset: 0xac, Size: 0xc] 0x78cea62400
	enum LockedAxisSpace;//[Offset: 0xb8, Size: 0x1] 0x78cf1e6e60
	Vector PivotOffset;//[Offset: 0xbc, Size: 0xc] 0x78cea62500
	enum PivotOffsetSpace;//[Offset: 0xc8, Size: 0x1] 0x78cf1e6f00
	bool bEnableFrustumCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x78cea62600
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x78cea62680
	float MinCameraDistance;//[Offset: 0xcc, Size: 0x4] 0x78cea62700
	float MaxCameraDistance;//[Offset: 0xd0, Size: 0x4] 0x78cea62780
	uint32 RendererVisibility;//[Offset: 0xd4, Size: 0x4] 0x78cea62800
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xd8, Size: 0x58] 0x78cea62880
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x130, Size: 0x58] 0x78cea62900
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x188, Size: 0x58] 0x78cea62980
	NiagaraVariableAttributeBinding MeshOrientationBinding;//[Offset: 0x1e0, Size: 0x58] 0x78cea62a00
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x238, Size: 0x58] 0x78cea62a80
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x290, Size: 0x58] 0x78cea62b00
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x2e8, Size: 0x58] 0x78cea62b80
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x340, Size: 0x58] 0x78cea62c00
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x398, Size: 0x58] 0x78cea62c80
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x3f0, Size: 0x58] 0x78cea62d00
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x448, Size: 0x58] 0x78cea62d80
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x4a0, Size: 0x58] 0x78cea62e00
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x4f8, Size: 0x58] 0x78cea62e80
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x550, Size: 0x58] 0x78cea62f00
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x5a8, Size: 0x58] 0x78cea62f80

--------------------------------
Class: NiagaraMeshMaterialOverride
	MaterialInterface* ExplicitMat;//[Offset: 0x0, Size: 0x8] 0x78cef95100
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20] 0x78cef95180

--------------------------------
Class: NiagaraMessageDataBase.Object

--------------------------------
Class: NiagaraPrecompileContainer.Object
	NiagaraScript*[] Scripts;//[Offset: 0x28, Size: 0x10] 0x78cf1e6aa0
	NiagaraSystem* System;//[Offset: 0x38, Size: 0x8] 0x78cea64d00

--------------------------------
Class: NiagaraPreviewBase.Actor.Object
	void SetSystem(NiagaraSystem* InSystem);// 0x8a873f8 0x78cea3d1a0
	void SetLabelText(out const FText InXAxisText, out const FText InYAxisText);// 0x8a873f8 0x78cea3d280

--------------------------------
Class: NiagaraPreviewAxis.Object
	int Num();// 0x770e59c 0x78cea3cfe0
	void ApplyToPreview(NiagaraComponent* PreviewComponent, int PreviewIndex, bool bIsXAxis, out FString OutLabelText);// 0x770e3f4 0x78cea3d0c0

--------------------------------
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	FName Param;//[Offset: 0x28, Size: 0x8] 0x78cea64780
	int Count;//[Offset: 0x30, Size: 0x4] 0x78cea64800

--------------------------------
Class: NiagaraPreviewAxis_InterpParamInt32.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	int Min;//[Offset: 0x34, Size: 0x4] 0x78cea64680
	int Max;//[Offset: 0x38, Size: 0x4] 0x78cea64700

--------------------------------
Class: NiagaraPreviewAxis_InterpParamFloat.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x78cea64580
	float Max;//[Offset: 0x38, Size: 0x4] 0x78cea64600

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector2D Min;//[Offset: 0x34, Size: 0x8] 0x78cea64480
	Vector2D Max;//[Offset: 0x3c, Size: 0x8] 0x78cea64500

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector Min;//[Offset: 0x34, Size: 0xc] 0x78cea64380
	Vector Max;//[Offset: 0x40, Size: 0xc] 0x78cea64400

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector4.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector4 Min;//[Offset: 0x40, Size: 0x10] 0x78cea64280
	Vector4 Max;//[Offset: 0x50, Size: 0x10] 0x78cea64300

--------------------------------
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	LinearColor Min;//[Offset: 0x34, Size: 0x10] 0x78cea66280
	LinearColor Max;//[Offset: 0x44, Size: 0x10] 0x78cea66300

--------------------------------
Class: NiagaraPreviewGrid.Actor.Object
	NiagaraSystem* System;//[Offset: 0x220, Size: 0x8] 0x78cea65c80
	enum ResetMode;//[Offset: 0x228, Size: 0x1] 0x78cf1e6820
	NiagaraPreviewAxis* PreviewAxisX;//[Offset: 0x230, Size: 0x8] 0x78cea65d80
	NiagaraPreviewAxis* PreviewAxisY;//[Offset: 0x238, Size: 0x8] 0x78cea65e00
	class NiagaraPreviewBase* PreviewClass;//[Offset: 0x240, Size: 0x8] 0x78cf1e68c0
	float SpacingX;//[Offset: 0x248, Size: 0x4] 0x78cea65e80
	float SpacingY;//[Offset: 0x24c, Size: 0x4] 0x78cea65f00
	int NumX;//[Offset: 0x250, Size: 0x4] 0x78cea65f80
	int NumY;//[Offset: 0x254, Size: 0x4] 0x78cea66000
	ChildActorComponent*[] PreviewComponents;//[Offset: 0x258, Size: 0x10] 0x78cf1e6960
	void SetPaused(bool bPaused);// 0x77106e4 0x78cea3cc60
	void GetPreviews(out NiagaraComponent*[] OutPreviews);// 0x7710624 0x78cea3cd40
	void DeactivatePreviews();// 0x7710794 0x78cea3ce20
	void ActivatePreviews(bool bReset);// 0x77107a8 0x78cea3cf00

--------------------------------
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x80, Size: 0x8] 0x78cea66e80
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x88, Size: 0x20] 0x78cea66f00
	enum FacingMode;//[Offset: 0xa8, Size: 0x1] 0x78cf1e8f80
	NiagaraRibbonUVSettings UV0Settings;//[Offset: 0xac, Size: 0x24] 0x78cea67000
	NiagaraRibbonUVSettings UV1Settings;//[Offset: 0xd0, Size: 0x24] 0x78cea67080
	enum DrawDirection;//[Offset: 0xf4, Size: 0x1] 0x78cf1e9020
	float CurveTension;//[Offset: 0xf8, Size: 0x4] 0x78cea67180
	enum TessellationMode;//[Offset: 0xfc, Size: 0x1] 0x78cf1e6780
	int TessellationFactor;//[Offset: 0x100, Size: 0x4] 0x78cea67280
	bool bUseConstantFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x78cea67300
	float TessellationAngle;//[Offset: 0x108, Size: 0x4] 0x78cea67380
	bool bScreenSpaceTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78cea65300
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x110, Size: 0x58] 0x78cea65380
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x168, Size: 0x58] 0x78cea65400
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x1c0, Size: 0x58] 0x78cea65480
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x218, Size: 0x58] 0x78cea65500
	NiagaraVariableAttributeBinding RibbonTwistBinding;//[Offset: 0x270, Size: 0x58] 0x78cea65580
	NiagaraVariableAttributeBinding RibbonWidthBinding;//[Offset: 0x2c8, Size: 0x58] 0x78cea65600
	NiagaraVariableAttributeBinding RibbonFacingBinding;//[Offset: 0x320, Size: 0x58] 0x78cea65680
	NiagaraVariableAttributeBinding RibbonIdBinding;//[Offset: 0x378, Size: 0x58] 0x78cea65700
	NiagaraVariableAttributeBinding RibbonLinkOrderBinding;//[Offset: 0x3d0, Size: 0x58] 0x78cea65780
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x428, Size: 0x58] 0x78cea65800
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x480, Size: 0x58] 0x78cea65880
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x4d8, Size: 0x58] 0x78cea65900
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x530, Size: 0x58] 0x78cea65980
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x588, Size: 0x58] 0x78cea65a00
	NiagaraVariableAttributeBinding U0OverrideBinding;//[Offset: 0x5e0, Size: 0x58] 0x78cea65a80
	NiagaraVariableAttributeBinding V0RangeOverrideBinding;//[Offset: 0x638, Size: 0x58] 0x78cea65b00
	NiagaraVariableAttributeBinding U1OverrideBinding;//[Offset: 0x690, Size: 0x58] 0x78cea65b80
	NiagaraVariableAttributeBinding V1RangeOverrideBinding;//[Offset: 0x6e8, Size: 0x58] 0x78cea65c00

--------------------------------
Class: NiagaraRibbonUVSettings
	enum LeadingEdgeMode;//[Offset: 0x0, Size: 0x4] 0x78cee59d40
	enum TrailingEdgeMode;//[Offset: 0x4, Size: 0x4] 0x78cee59de0
	enum DistributionMode;//[Offset: 0x8, Size: 0x4] 0x78cee59e80
	float TilingLength;//[Offset: 0xc, Size: 0x4] 0x78cef94700
	Vector2D Offset;//[Offset: 0x10, Size: 0x8] 0x78cef94780
	Vector2D Scale;//[Offset: 0x18, Size: 0x8] 0x78cef94800
	bool bEnablePerParticleUOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cef94880
	bool bEnablePerParticleVRangeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78cef94900

--------------------------------
Class: NiagaraScriptSourceBase.Object

--------------------------------
Class: NiagaraSettings.DeveloperSettings.Object
	SoftObjectPath DefaultEffectType;//[Offset: 0x38, Size: 0x18] 0x78cea66600
	FText[] QualityLevels;//[Offset: 0x50, Size: 0x10] 0x78cf1e8bc0
	<FString,FText> ComponentRendererWarningsPerClass;//[Offset: 0x60, Size: 0x50] 0x78cf156940
	byte DefaultRenderTargetFormat;//[Offset: 0xb0, Size: 0x1] 0x78cea66800
	enum DefaultGridFormat;//[Offset: 0xb1, Size: 0x1] 0x78cf1e8c60
	NiagaraEffectType* DefaultEffectTypePtr;//[Offset: 0xb8, Size: 0x8] 0x78cea66900

--------------------------------
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object
	enum IterationSource;//[Offset: 0x39, Size: 0x1] 0x78cf1e8b20
	int Iterations;//[Offset: 0x3c, Size: 0x4] 0x78cea68380
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78cea68400
	bool bDisablePartialParticleUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x78cea66380
	NiagaraVariableDataInterfaceBinding DataInterface;//[Offset: 0x48, Size: 0x20] 0x78cea66400

--------------------------------
Class: NiagaraVariableDataInterfaceBinding
	NiagaraVariable BoundVariable;//[Offset: 0x0, Size: 0x20] 0x78cef8f200

--------------------------------
Class: NiagaraSpriteRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x80, Size: 0x8] 0x78cea69180
	enum SourceMode;//[Offset: 0x88, Size: 0x1] 0x78cf1e8800
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x90, Size: 0x20] 0x78cea69280
	enum Alignment;//[Offset: 0xb0, Size: 0x1] 0x78cf1e88a0
	enum FacingMode;//[Offset: 0xb1, Size: 0x1] 0x78cf1e8940
	Vector2D PivotInUVSpace;//[Offset: 0xb4, Size: 0x8] 0x78cea69400
	enum SortMode;//[Offset: 0xbc, Size: 0x1] 0x78cf1e89e0
	Vector2D SubImageSize;//[Offset: 0xc0, Size: 0x8] 0x78cea67400
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x78cea67480
	bool bRemoveHMDRollInVR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x78cea67500
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1] 0x78cea67580
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1] 0x78cea67600
	float MinFacingCameraBlendDistance;//[Offset: 0xcc, Size: 0x4] 0x78cea67680
	float MaxFacingCameraBlendDistance;//[Offset: 0xd0, Size: 0x4] 0x78cea67700
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1] 0x78cea67780
	float MinCameraDistance;//[Offset: 0xd8, Size: 0x4] 0x78cea67800
	float MaxCameraDistance;//[Offset: 0xdc, Size: 0x4] 0x78cea67880
	uint32 RendererVisibility;//[Offset: 0xe0, Size: 0x4] 0x78cea67900
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe8, Size: 0x58] 0x78cea67980
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x140, Size: 0x58] 0x78cea67a00
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x198, Size: 0x58] 0x78cea67a80
	NiagaraVariableAttributeBinding SpriteRotationBinding;//[Offset: 0x1f0, Size: 0x58] 0x78cea67b00
	NiagaraVariableAttributeBinding SpriteSizeBinding;//[Offset: 0x248, Size: 0x58] 0x78cea67b80
	NiagaraVariableAttributeBinding SpriteFacingBinding;//[Offset: 0x2a0, Size: 0x58] 0x78cea67c00
	NiagaraVariableAttributeBinding SpriteAlignmentBinding;//[Offset: 0x2f8, Size: 0x58] 0x78cea67c80
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x350, Size: 0x58] 0x78cea67d00
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x3a8, Size: 0x58] 0x78cea67d80
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x400, Size: 0x58] 0x78cea67e00
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x458, Size: 0x58] 0x78cea67e80
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x4b0, Size: 0x58] 0x78cea67f00
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x508, Size: 0x58] 0x78cea67f80
	NiagaraVariableAttributeBinding UVScaleBinding;//[Offset: 0x560, Size: 0x58] 0x78cea68000
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x5b8, Size: 0x58] 0x78cea68080
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x610, Size: 0x58] 0x78cea68100
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x668, Size: 0x58] 0x78cea68180
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x6c0, Size: 0x58] 0x78cea68200
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x718, Size: 0x10] 0x78cf1e8a80

--------------------------------
Class: NiagaraMaterialAttributeBinding
	FName MaterialParameterName;//[Offset: 0x0, Size: 0x8] 0x78cef8f000
	NiagaraVariableBase NiagaraVariable;//[Offset: 0x8, Size: 0xc] 0x78cef8f080
	NiagaraVariableBase ResolvedNiagaraVariable;//[Offset: 0x14, Size: 0xc] 0x78cef8f100
	NiagaraVariableBase NiagaraChildVariable;//[Offset: 0x20, Size: 0xc] 0x78cef8f180

--------------------------------
Class: AnimNotify_PlayNiagaraEffect.AnimNotify.Object
	NiagaraSystem* Template;//[Offset: 0x38, Size: 0x8] 0x78cea6a100
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78cea6a180
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78cea6a200
	Vector Scale;//[Offset: 0x58, Size: 0xc] 0x78cea6a280
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78cea6a300
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78cea6a380
	FName SocketName;//[Offset: 0x84, Size: 0x8] 0x78cea6a400
	FXSystemComponent* GetSpawnedEffect();// 0x77240b0 0x78cea3fe40

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	NiagaraSystem* Template;//[Offset: 0x30, Size: 0x8] 0x78cea69880
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x78cea69900
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78cea69980
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78cea69a00
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cea69a80

--------------------------------
Class: UltraDynamicSkyActor.Actor.Object
	bool ForMobileRenderer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78cea6ef00
	float TimeOfDay;//[Offset: 0x224, Size: 0x4] 0x78cea6ef80
	enum SkyMode;//[Offset: 0x228, Size: 0x1] 0x78cf1e8440
	bool OneCloudLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1] 0x78cea6f080
	bool UseCloudShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1] 0x78cea6f100
	float Saturation;//[Offset: 0x22c, Size: 0x4] 0x78cea6f180
	float Contrast;//[Offset: 0x230, Size: 0x4] 0x78cea6f200
	float CloudCoverage;//[Offset: 0x234, Size: 0x4] 0x78cea6f280
	float DawnTime;//[Offset: 0x238, Size: 0x4] 0x78cea6f300
	float DuskTime;//[Offset: 0x23c, Size: 0x4] 0x78cea6f380
	float Overcast_NightBrightness;//[Offset: 0x240, Size: 0x4] 0x78cea6f400
	float NightBrightness;//[Offset: 0x244, Size: 0x4] 0x78cea6f480
	float OverallIntensity;//[Offset: 0x248, Size: 0x4] 0x78cea6f500
	float Directional_Lights_Absent_Brightness;//[Offset: 0x24c, Size: 0x4] 0x78cea6f580
	float Fog;//[Offset: 0x250, Size: 0x4] 0x78cea6f600
	bool AnimateTimeOfDay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1] 0x78cea6f680
	SceneComponent* Root;//[Offset: 0x258, Size: 0x8] 0x78cea6f700
	ArrowComponent* Sun_root;//[Offset: 0x260, Size: 0x8] 0x78cea6f780
	ArrowComponent* Moon_root;//[Offset: 0x268, Size: 0x8] 0x78cea6d700
	StaticMeshComponent* Sky_Sphere;//[Offset: 0x270, Size: 0x8] 0x78cea6d780
	StaticMeshComponent* Cloud_Sphere;//[Offset: 0x278, Size: 0x8] 0x78cea6d800
	DirectionalLightComponent* Sun_Light;//[Offset: 0x280, Size: 0x8] 0x78cea6d880
	DirectionalLightComponent* Moon_Light;//[Offset: 0x288, Size: 0x8] 0x78cea6d900
	SkyAtmosphereComponent* Sky_Atmosphere;//[Offset: 0x290, Size: 0x8] 0x78cea6d980
	SkyLightComponent* Sky_Light;//[Offset: 0x298, Size: 0x8] 0x78cea6da00
	NiagaraComponent* Cloud_Niagara;//[Offset: 0x2a0, Size: 0x8] 0x78cea6da80
	PostProcessComponent* post_process;//[Offset: 0x2a8, Size: 0x8] 0x78cea6db00
	ExponentialHeightFogComponent* HeightFog;//[Offset: 0x2b0, Size: 0x8] 0x78cea6db80
	float DayLength;//[Offset: 0x2b8, Size: 0x4] 0x78cea6dc00
	float NightLength;//[Offset: 0x2bc, Size: 0x4] 0x78cea6dc80
	float SunriseEventTime;//[Offset: 0x2c0, Size: 0x4] 0x78cea6dd00
	float SunsetEventTime;//[Offset: 0x2c4, Size: 0x4] 0x78cea6dd80
	float TimeSpeed;//[Offset: 0x2c8, Size: 0x4] 0x78cea6de00
	float SunAngle;//[Offset: 0x2cc, Size: 0x4] 0x78cea6de80
	bool SunCastsShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x78cea6df00
	float SunDiskIntensity;//[Offset: 0x2d4, Size: 0x4] 0x78cea6df80
	float SunShaderIntensity;//[Offset: 0x2d8, Size: 0x4] 0x78cea6e000
	float SunRadius;//[Offset: 0x2dc, Size: 0x4] 0x78cea6e080
	float SunInclination;//[Offset: 0x2e0, Size: 0x4] 0x78cea6e100
	float Sun_Light_Intensity;//[Offset: 0x2e4, Size: 0x4] 0x78cea6e180
	float Sun_Volumetric_Scattering_Intensity;//[Offset: 0x2e8, Size: 0x4] 0x78cea6e200
	float ExtendDawnandDusk;//[Offset: 0x2ec, Size: 0x4] 0x78cea6e280
	float Sun_Vertical_Offset;//[Offset: 0x2f0, Size: 0x4] 0x78cea6e300
	float MoonAngle;//[Offset: 0x2f4, Size: 0x4] 0x78cea6e380
	bool MoonCastsShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x78cea6e400
	float MoonScale;//[Offset: 0x2fc, Size: 0x4] 0x78cea6e480
	float MoonInclination;//[Offset: 0x300, Size: 0x4] 0x78cea6e500
	float MoonPhase;//[Offset: 0x304, Size: 0x4] 0x78cea6e580
	bool ChangeMoonPhaseOnceaDay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x78cea6e600
	float MoonIntensity;//[Offset: 0x30c, Size: 0x4] 0x78cea6e680
	LinearColor MoonColor;//[Offset: 0x310, Size: 0x10] 0x78cea6e700
	float MoonOrbitOffset;//[Offset: 0x320, Size: 0x4] 0x78cea6c680
	float MoonlightIntensity;//[Offset: 0x324, Size: 0x4] 0x78cea6c700
	float MoonRotation;//[Offset: 0x328, Size: 0x4] 0x78cea6c780
	Texture2D* CustomMoonTexture;//[Offset: 0x330, Size: 0x8] 0x78cea6c800
	Texture2D* DefaultMoonTexture;//[Offset: 0x338, Size: 0x8] 0x78cea6c880
	bool UseCustomMoonTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x78cea6c900
	float MoonGlowIntensity;//[Offset: 0x344, Size: 0x4] 0x78cea6c980
	float Moon_Volumetric_Scattering_Intensity;//[Offset: 0x348, Size: 0x4] 0x78cea6ca00
	float MoonVerticalOffset;//[Offset: 0x34c, Size: 0x4] 0x78cea6ca80
	enum SkyLightMode;//[Offset: 0x350, Size: 0x1] 0x78cf1e84e0
	LinearColor SkyLightColor;//[Offset: 0x354, Size: 0x10] 0x78cea6cb80
	LinearColor SkyLightLowerHemisphereColor;//[Offset: 0x364, Size: 0x10] 0x78cea6cc00
	TextureCube* FlatSunnyCubemap;//[Offset: 0x378, Size: 0x8] 0x78cea6cc80
	TextureCube* FlatOvercastCubemap;//[Offset: 0x380, Size: 0x8] 0x78cea6cd00
	TextureCube* CustomCubemap;//[Offset: 0x388, Size: 0x8] 0x78cea6cd80
	float SkyLightIntensity;//[Offset: 0x390, Size: 0x4] 0x78cea6ce00
	float ScaleSkylightIntensitywhenCloudy;//[Offset: 0x394, Size: 0x4] 0x78cea6ce80
	float ScaleSkylightIntensityatNight;//[Offset: 0x398, Size: 0x4] 0x78cea6cf00
	CurveLinearColor* SkyLightDynamicTintingColorCurve;//[Offset: 0x3a0, Size: 0x8] 0x78cea6cf80
	float ShineVariation;//[Offset: 0x3a8, Size: 0x4] 0x78cea6d000
	float SunLightingIntensity;//[Offset: 0x3ac, Size: 0x4] 0x78cea6d080
	float SunHighlightRadius;//[Offset: 0x3b0, Size: 0x4] 0x78cea6d100
	float SoftenCloudLayer1;//[Offset: 0x3b4, Size: 0x4] 0x78cea6d180
	float SoftenCloudLayer2;//[Offset: 0x3b8, Size: 0x4] 0x78cea6d200
	float CloudOpacity;//[Offset: 0x3bc, Size: 0x4] 0x78cea6d280
	float CloudTiling_Layer1;//[Offset: 0x3c0, Size: 0x4] 0x78cea6d300
	float CloudTiling_Layer2;//[Offset: 0x3c4, Size: 0x4] 0x78cea6d380
	float CloudHeightLayer1;//[Offset: 0x3c8, Size: 0x4] 0x78cea6d400
	float CloudHeightLayer2;//[Offset: 0x3cc, Size: 0x4] 0x78cea6d480
	Texture* CustomNoiseTexture;//[Offset: 0x3d0, Size: 0x8] 0x78cea6d500
	float SharpenOuterEdge;//[Offset: 0x3d8, Size: 0x4] 0x78cea6d580
	float OvercastSwirlingTexture;//[Offset: 0x3dc, Size: 0x4] 0x78cea6d600
	CurveFloat* ShineIntensityCurve;//[Offset: 0x3e0, Size: 0x8] 0x78cea6d680
	CurveFloat* SunHighlightRadiusCurve;//[Offset: 0x3e8, Size: 0x8] 0x78cea6b600
	CurveFloat* Sun_Highlight_Intensity_Curve;//[Offset: 0x3f0, Size: 0x8] 0x78cea6b680
	float CloudDirection;//[Offset: 0x3f8, Size: 0x4] 0x78cea6b700
	float CloudSpeed;//[Offset: 0x3fc, Size: 0x4] 0x78cea6b780
	float CloudPhase;//[Offset: 0x400, Size: 0x4] 0x78cea6b800
	float CloudShadowsScale;//[Offset: 0x404, Size: 0x4] 0x78cea6b880
	float CloudShadowsIntensityWhenSunny;//[Offset: 0x408, Size: 0x4] 0x78cea6b900
	float CloudShadowsIntensityWhenOvercast;//[Offset: 0x40c, Size: 0x4] 0x78cea6b980
	float CloudShadowsSoftnessWhenSunny;//[Offset: 0x410, Size: 0x4] 0x78cea6ba00
	float CloudShadowsSoftnessWhenOvercast;//[Offset: 0x414, Size: 0x4] 0x78cea6ba80
	float Horizon_Density_Multiplier;//[Offset: 0x418, Size: 0x4] 0x78cea6bb00
	float Zenith_Density_Multiplier;//[Offset: 0x41c, Size: 0x4] 0x78cea6bb80
	float Latitude_Gradient_Position;//[Offset: 0x420, Size: 0x4] 0x78cea6bc00
	float Latitude_Gradient_Width;//[Offset: 0x424, Size: 0x4] 0x78cea6bc80
	float Around_Sun_Density_Multiplier;//[Offset: 0x428, Size: 0x4] 0x78cea6bd00
	float Around_Sun_Density_Exponent;//[Offset: 0x42c, Size: 0x4] 0x78cea6bd80
	float Around_Moon_Density_Multiplier;//[Offset: 0x430, Size: 0x4] 0x78cea6be00
	float Around_Moon_Density_Exponent;//[Offset: 0x434, Size: 0x4] 0x78cea6be80
	Texture2D* CloudWispsTexture;//[Offset: 0x438, Size: 0x8] 0x78cea6bf00
	float CloudWispsOpacity;//[Offset: 0x440, Size: 0x4] 0x78cea6bf80
	Texture2D* StarsTexture;//[Offset: 0x448, Size: 0x8] 0x78cea6c000
	float Stars_Tiling;//[Offset: 0x450, Size: 0x4] 0x78cea6c080
	float StarsSpeed;//[Offset: 0x454, Size: 0x4] 0x78cea6c100
	float StarsPhase;//[Offset: 0x458, Size: 0x4] 0x78cea6c180
	float StarsIntensity;//[Offset: 0x45c, Size: 0x4] 0x78cea6c200
	float NightSkyGlow;//[Offset: 0x460, Size: 0x4] 0x78cea6c280
	LinearColor NightSkyGlowColor;//[Offset: 0x464, Size: 0x10] 0x78cea6c300
	LinearColor Stars_Color;//[Offset: 0x474, Size: 0x10] 0x78cea6c380
	CurveFloat* StarsIntensityCurve;//[Offset: 0x488, Size: 0x8] 0x78cea6c400
	LinearColor AuroraColor1;//[Offset: 0x490, Size: 0x10] 0x78cea6c480
	LinearColor AuroraColor2;//[Offset: 0x4a0, Size: 0x10] 0x78cea6c500
	LinearColor AuroraColor3;//[Offset: 0x4b0, Size: 0x10] 0x78cea6c580
	float AuroraSpeed;//[Offset: 0x4c0, Size: 0x4] 0x78cea6c600
	float AuroraPhase;//[Offset: 0x4c4, Size: 0x4] 0x78cea6a580
	float AuroraIntensity;//[Offset: 0x4c8, Size: 0x4] 0x78cea6a600
	CurveFloat* AuroraIntensityCurve;//[Offset: 0x4d0, Size: 0x8] 0x78cea6a680
	CurveLinearColor* HorizonBaseColor;//[Offset: 0x4d8, Size: 0x8] 0x78cea6a700
	CurveLinearColor* ZenithBaseColor;//[Offset: 0x4e0, Size: 0x8] 0x78cea6a780
	CurveLinearColor* CloudLightColor;//[Offset: 0x4e8, Size: 0x8] 0x78cea6a800
	CurveLinearColor* CloudDarkColor;//[Offset: 0x4f0, Size: 0x8] 0x78cea6a880
	CurveLinearColor* SunColor;//[Offset: 0x4f8, Size: 0x8] 0x78cea6a900
	CurveLinearColor* SunCloudyColorCurve;//[Offset: 0x500, Size: 0x8] 0x78cea6a980
	CurveFloat* Directional_Intensity_Curve;//[Offset: 0x508, Size: 0x8] 0x78cea6aa00
	LinearColor Sun_Color;//[Offset: 0x510, Size: 0x10] 0x78cea6aa80
	bool UseVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1] 0x78cea6ab00
	float Fog_Density;//[Offset: 0x524, Size: 0x4] 0x78cea6ab80
	CurveLinearColor* Fog_Inscattering_Color_Curve;//[Offset: 0x528, Size: 0x8] 0x78cea6ac00
	CurveLinearColor* Fog_Directional_Inscattering_Color_Curve;//[Offset: 0x530, Size: 0x8] 0x78cea6ac80
	bool UseFogDensityCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1] 0x78cea6ad00
	CurveFloat* FogDensityCurve;//[Offset: 0x540, Size: 0x8] 0x78cea6ad80
	float FullCloudiness_Fog_Density;//[Offset: 0x548, Size: 0x4] 0x78cea6ae00
	float Fog_Density_Distribution;//[Offset: 0x54c, Size: 0x4] 0x78cea6ae80
	bool Use_Exposure_Range;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1] 0x78cea6af00
	float Exposure_Min;//[Offset: 0x554, Size: 0x4] 0x78cea6af80
	float Exposure_Max;//[Offset: 0x558, Size: 0x4] 0x78cea6b000
	MaterialInstanceDynamic* Sky_MID;//[Offset: 0x560, Size: 0x8] 0x78cea6b080
	MaterialInstanceDynamic* SunCloudShadowsMID;//[Offset: 0x568, Size: 0x8] 0x78cea6b100
	MaterialInstanceDynamic* MoonCloudShadowsMID;//[Offset: 0x570, Size: 0x8] 0x78cea6b180
	MaterialInstanceDynamic* StaticCloudsMID;//[Offset: 0x578, Size: 0x8] 0x78cea6b200
	Material* Cloud_Shadow_Material;//[Offset: 0x580, Size: 0x8] 0x78cea6b280
	Material* Stactic_Clouds_Material;//[Offset: 0x588, Size: 0x8] 0x78cea6b300
	MaterialInstance* Sky_Material;//[Offset: 0x590, Size: 0x8] 0x78cea6b380
	MaterialInstance* Sky_Material_One_Cloud;//[Offset: 0x598, Size: 0x8] 0x78cea6b400
	MaterialInstance* Ultra_Dynamic_Sky_Mat_no_auroras;//[Offset: 0x5a0, Size: 0x8] 0x78cea6b480
	MaterialInstance* Ultra_Dynamic_Sky_Mat_no_auroras_onecloudlayer;//[Offset: 0x5a8, Size: 0x8] 0x78cea6b500
	MaterialInstance* Ultra_Dynamic_Sky_Mat_SA_NDC_NA;//[Offset: 0x5b0, Size: 0x8] 0x78cea6b580
	MaterialInstance* Ultra_Dynamic_Sky_Mat_SA_NA_OCL;//[Offset: 0x5b8, Size: 0x8] 0x78cea69500
	MaterialInstance* Ultra_Dynamic_Sky_Mat_SA_NA;//[Offset: 0x5c0, Size: 0x8] 0x78cea69580
	Material* Volumetric_Cloud_Shadows_Material;//[Offset: 0x5c8, Size: 0x8] 0x78cea69600
	CurveFloat* NightFilterCurve;//[Offset: 0x5d0, Size: 0x8] 0x78cea69680
	void UpdateStaticVariables();// 0x77514f8 0x78cea3f4a0
	void UpdateActiveVariables();// 0x775150c 0x78cea3f580
	void SetSunAndMoonRotation();// 0x7751520 0x78cea3f660
	void SetLegacySettings();// 0x77514e4 0x78cea3f740
	void SetDayOrNight(bool isDay);// 0x7751384 0x78cea3f820
	void ConstructionScript_Function(bool RunByCounterpart);// 0x7751434 0x78cea3f900
	void ChangeTimeOfDay(float NewTime);// 0x7751534 0x78cea3f9e0

--------------------------------
Class: UltraDynamicSkyManager.Actor.Object
	enum EditorWeatherPresetType;//[Offset: 0x220, Size: 0x1] 0x78cf1e7fe0
	enum CurWeatherPresetType;//[Offset: 0x221, Size: 0x1] 0x78cf1e8080
	<enum,FString> SkyResMap;//[Offset: 0x228, Size: 0x50] 0x78cf156700
	<enum,FString> WeatherResMap;//[Offset: 0x278, Size: 0x50] 0x78cf1567c0
	<enum,int> WeatherProbability;//[Offset: 0x2c8, Size: 0x50] 0x78cf156880
	UltraDynamicSkyActor* SkyActor;//[Offset: 0x318, Size: 0x8] 0x78cea6ec00
	UltraDynamicWeatherActor* WeatherActor;//[Offset: 0x320, Size: 0x8] 0x78cea6ec80
	void SpawnSkyAndWeather();// 0x7752140 0x78cea3ee80
	void SetCurWeatherType(enum cur_type);// 0x7752058 0x78cea3ef60
	void RandomWeather();// 0x7752118 0x78cea3f040
	UltraDynamicWeatherActor* GetWeatherActor();// 0x7751ff0 0x78cea3f120
	UltraDynamicSkyActor* GetSkyActor();// 0x7752024 0x78cea3f200
	enum GetCurWeatherType();// 0x77520fc 0x78cea3f2e0
	void DestorySkyAndWeather();// 0x775212c 0x78cea3f3c0

--------------------------------
Class: UltraDynamicWeatherActor.Actor.Object
	enum WeatherType;//[Offset: 0x220, Size: 0x1] 0x78cf1e7cc0
	float WeatherIntensity;//[Offset: 0x224, Size: 0x4] 0x78cea71f00
	float CloudCoverage;//[Offset: 0x228, Size: 0x4] 0x78cea71f80
	float RainAndSnowIntensity;//[Offset: 0x22c, Size: 0x4] 0x78cea72000
	float WindIntensity;//[Offset: 0x230, Size: 0x4] 0x78cea72080
	float WindDirection;//[Offset: 0x234, Size: 0x4] 0x78cea72100
	float CloudSpeedMultiplier;//[Offset: 0x238, Size: 0x4] 0x78cea70080
	bool UseSoundEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78cea70100
	float RainVolume;//[Offset: 0x240, Size: 0x4] 0x78cea70180
	bool EnableRainAndSnowParticles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1] 0x78cea70200
	float MaxParticleSpawnRate;//[Offset: 0x248, Size: 0x4] 0x78cea70280
	float CameraForwardSpawnOffset;//[Offset: 0x24c, Size: 0x4] 0x78cea70300
	float CeilingCheckHeight;//[Offset: 0x250, Size: 0x4] 0x78cea70380
	float MaxSpawnDistance;//[Offset: 0x254, Size: 0x4] 0x78cea70400
	float MinimumParticleDistance;//[Offset: 0x258, Size: 0x4] 0x78cea70480
	bool ParticleCollisionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x78cea70500
	byte RainAndSnowParticleCollisionChannel;//[Offset: 0x25d, Size: 0x1] 0x78cea70580
	float SpawnBoxHeight;//[Offset: 0x260, Size: 0x4] 0x78cea70600
	float SplashFrequency;//[Offset: 0x264, Size: 0x4] 0x78cea70680
	float SpawnDistanceDistribution;//[Offset: 0x268, Size: 0x4] 0x78cea70700
	float RainDropsScale;//[Offset: 0x26c, Size: 0x4] 0x78cea70780
	float SnowFlakesScale;//[Offset: 0x270, Size: 0x4] 0x78cea70800
	float RainDropsAlpha;//[Offset: 0x274, Size: 0x4] 0x78cea70880
	float SnowFlakesAlpha;//[Offset: 0x278, Size: 0x4] 0x78cea70900
	bool SnowFlakesSticktoSurfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x78cea70980
	float FogParticleIntensityRain;//[Offset: 0x280, Size: 0x4] 0x78cea70a00
	float FogParticleIntensitySnow;//[Offset: 0x284, Size: 0x4] 0x78cea70a80
	float FogParticlesDrawDistance;//[Offset: 0x288, Size: 0x4] 0x78cea70b00
	float FogParticleCameraOffset;//[Offset: 0x28c, Size: 0x4] 0x78cea70b80
	float CurrentWeatherIntensity;//[Offset: 0x290, Size: 0x4] 0x78cea70c00
	float CurrentCloudCoverage;//[Offset: 0x294, Size: 0x4] 0x78cea70c80
	float CurrentRainAndSnowIntensity;//[Offset: 0x298, Size: 0x4] 0x78cea70d00
	float CurrentSnowPercentage;//[Offset: 0x29c, Size: 0x4] 0x78cea70d80
	float CurrentWindIntensity;//[Offset: 0x2a0, Size: 0x4] 0x78cea70e00
	float IntendedCloudCoverage;//[Offset: 0x2a4, Size: 0x4] 0x78cea70e80
	float IntendedCloudSpeed;//[Offset: 0x2a8, Size: 0x4] 0x78cea70f00
	float IntendedCloudDirection;//[Offset: 0x2ac, Size: 0x4] 0x78cea70f80
	SceneComponent* Root;//[Offset: 0x2b0, Size: 0x8] 0x78cea71000
	NiagaraComponent* RainAndSnow;//[Offset: 0x2b8, Size: 0x8] 0x78cea71080
	AudioComponent* RainEast;//[Offset: 0x2c0, Size: 0x8] 0x78cea6f800
	UltraDynamicSkyActor* UltraDynamicSky;//[Offset: 0x2c8, Size: 0x8] 0x78cea6f880
	<enum,float> WeatherIntensityPreset;//[Offset: 0x2d0, Size: 0x50] 0x78cf156340
	<enum,float> CloudinessPreset;//[Offset: 0x320, Size: 0x50] 0x78cf156400
	<enum,float> WindIntensityPreset;//[Offset: 0x370, Size: 0x50] 0x78cf1564c0
	<enum,float> RainAndSnowPreset;//[Offset: 0x3c0, Size: 0x50] 0x78cf156580
	float MaxCloudSpeed;//[Offset: 0x410, Size: 0x4] 0x78cea6fd00
	Rotator WindRotation;//[Offset: 0x414, Size: 0xc] 0x78cea6fd80
	CurveFloat* RainFadeCurve;//[Offset: 0x420, Size: 0x8] 0x78cea6fe00
	MaterialParameterCollection* FoliageMaterialCollection;//[Offset: 0x428, Size: 0x8] 0x78cea6fe80
	<FString,float> GlobalLeafScalarParaMap;//[Offset: 0x430, Size: 0x50] 0x78cf156640
	void UpdateStaticVariables();// 0x7752c00 0x78cea3eb00
	void UpdateAudio();// 0x7752bec 0x78cea3ebe0
	void UpdateActiveVariables();// 0x7752c14 0x78cea3ecc0
	void ConstructionScript_Function(bool RunByCounterpart);// 0x7752b3c 0x78cea3eda0

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0xa4056c8 0x78cea81ba0
	void SetMediaOptionString(out const FName Key, FString Value);// 0xa4052d4 0x78cea81c80
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0xa4053d8 0x78cea3e780
	void SetMediaOptionFloat(out const FName Key, float Value);// 0xa4054d0 0x78cea3e860
	void SetMediaOptionBool(out const FName Key, bool Value);// 0xa4055c8 0x78cea3e940
	FString GetUrl();// 0xa405708 0x78cea3ea20

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8] 0x78cea71900

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object
	FrameRate FrameRateOverride;//[Offset: 0x88, Size: 0x8] 0x78cea71600
	FString ProxyOverride;//[Offset: 0x90, Size: 0x10] 0x78cea71680
	DirectoryPath SequencePath;//[Offset: 0xa0, Size: 0x10] 0x78cea71700
	void SetSequencePath(FString Path);// 0x7761d3c 0x78cea81900
	FString GetSequencePath();// 0x7761df0 0x78cea819e0
	void GetProxies(out FString[] OutProxies);// 0x7761ea0 0x78cea81ac0

--------------------------------
Class: ImgMediaSettings.Object
	FrameRate DefaultFrameRate;//[Offset: 0x28, Size: 0x8] 0x78cea71100
	float CacheBehindPercentage;//[Offset: 0x30, Size: 0x4] 0x78cea71180
	float CacheSizeGB;//[Offset: 0x34, Size: 0x4] 0x78cea71200
	int CacheThreads;//[Offset: 0x38, Size: 0x4] 0x78cea71280
	int CacheThreadStackSizeKB;//[Offset: 0x3c, Size: 0x4] 0x78cea71300
	float GlobalCacheSizeGB;//[Offset: 0x40, Size: 0x4] 0x78cea71380
	bool UseGlobalCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78cea71400
	uint32 ExrDecoderThreads;//[Offset: 0x48, Size: 0x4] 0x78cea71480
	FString DefaultProxy;//[Offset: 0x50, Size: 0x10] 0x78cea71500
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cea71580

--------------------------------
Class: BuglySDKFunction.Object
	static void BuglySetUserId(FString UserId);// 0x7764a10 0x78cea81740
	static void BuglyInitialize();// 0x7764ab4 0x78cea81820

--------------------------------
Class: TrackingSDKFunctions.Object
	static void TrackingRegister(FString AccountId);// 0x77669d8 0x78cea81200
	static void TrackingInitialize();// 0x7766a7c 0x78cea812e0
	static void TrackingDeviceId(out FString DeviceID);// 0x7766928 0x78cea813c0
	static FString GetChannel();// 0x7766628 0x78cea814a0
	static void AdShow(FString AdPlatform, FString AdId, FString Fill);// 0x77667d4 0x78cea81580
	static void AdClick(FString AdPlatform, FString AdId);// 0x77666d8 0x78cea81660

--------------------------------
Class: UnLuaInterface.Interface.Object
	FString GetModuleName();// 0x786fafc 0x78cea81040

--------------------------------
Class: UnLuaLatentAction.Object
	delegate callback;//[Offset: 0x30, Size: 0x10] 0x78cea72800
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78cea72880
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x78702e8 0x78cea80b00
	void OnLegacyCallback(int InLinkage);// 0x7870240 0x78cea80be0
	void OnCompleted(int InLinkage);// 0x78704fc 0x78cea80cc0
	bool GetTickableWhenPaused();// 0x7870398 0x78cea80da0
	LatentActionInfo CreateInfoForLegacy();// 0x78703d0 0x78cea80e80
	LatentActionInfo CreateInfo(int Linkage);// 0x787043c 0x78cea80f60

--------------------------------
Class: UnLuaManager.Object
	void TriggerAnimNotify();// 0x8a873f8 0x78cea80400
	void OnLatentActionCompleted(int LinkID);// 0x7870c14 0x78cea804e0
	void OnActorDestroyed(Actor* Actor);// 0x7870cbc 0x78cea805c0
	void InputVectorAxis(out const Vector AxisValue);// 0x8a873f8 0x78cea806a0
	void InputTouch(byte FingerIndex, out const Vector Location);// 0x8a873f8 0x78cea80780
	void InputGesture(float Value);// 0x8a873f8 0x78cea80860
	void InputAxis(float AxisValue);// 0x8a873f8 0x78cea80940
	void InputAction(Key Key);// 0x8a873f8 0x78cea80a20

--------------------------------
Class: UnLuaPerformanceTestProxy.Actor.Object
	int MeshID;//[Offset: 0x228, Size: 0x4] 0x78cea73680
	FString MeshName;//[Offset: 0x230, Size: 0x10] 0x78cea73700
	Vector COM;//[Offset: 0x240, Size: 0xc] 0x78cea73780
	int[] Indices;//[Offset: 0x250, Size: 0x10] 0x78cf1e9e80
	Vector[] Positions;//[Offset: 0x260, Size: 0x10] 0x78cf1e9f20
	Vector[] PredictedPositions;//[Offset: 0x270, Size: 0x10] 0x78cf1e9fc0
	void UpdatePositions(out const Vector[] NewPositions);// 0x7871be0 0x78cea83180
	FString UpdateMeshName(FString NewName);// 0x7871ff0 0x78cea83260
	int UpdateMeshID(int NewID);// 0x78720ec 0x78cea83340
	void UpdateIndices(out const int[] NewIndices);// 0x7871d60 0x78cea83420
	void Simulate(float DeltaTime);// 0x7872294 0x78cea83500
	bool Raycast(out const Vector Origin, out const Vector Direction);// 0x7871ee0 0x78cea835e0
	void NOP();// 0x787233c 0x78cea836c0
	Vector[] GetPredictedPositions();// 0x7871b58 0x78cea837a0
	void GetPositions(out Vector[] OutPositions);// 0x7871ca0 0x78cea83880
	FString GetMeshName();// 0x78721dc 0x78cea83960
	bool GetMeshInfo(out int OutMeshID, out FString OutMeshName, out Vector OutCOM, out int[] OutIndices, out Vector[] OutPositions, out Vector[] OutPredictedPositions);// 0x78718c4 0x78cea80080
	int GetMeshID();// 0x7872260 0x78cea80160
	void GetIndices(out int[] OutIndices);// 0x7871e20 0x78cea80240
	Vector GetCOM();// 0x787219c 0x78cea80320

--------------------------------
Class: UnLuaTestStub.Object
	delegate SimpleEvent;//[Offset: 0x28, Size: 0x10] 0x78cea73400
	delegate SimpleHandler;//[Offset: 0x38, Size: 0x10] 0x78cea73480
	delegate Issue304Event;//[Offset: 0x48, Size: 0x10] 0x78cea73500
	delegate Issue362Delegate;//[Offset: 0x58, Size: 0x10] 0x78cea73580
	int Counter;//[Offset: 0x68, Size: 0x4] 0x78cea73600
	void AddCount();// 0x7876b94 0x78cea830a0

--------------------------------
Class: UnLuaTestActor.Actor.Object
	bool TestForIssue328();// 0x8a873f8 0x78cea82ee0
	int TestForIssue300();// 0x8a873f8 0x78cea82fc0

--------------------------------
Class: UnLuaTestFunctionLibrary.BlueprintFunctionLibrary.Object
	static void TestForIssue376(out UnLuaTestTableRow Struct);// 0x78775d8 0x78cea828c0
	static bool TestForIssue331(byte InEnum);// 0x78776d0 0x78cea829a0
	static bool TestForIssue323(Vector Location, Rotator Rotation, Vector2D Vector2D, LinearColor LinearColor, Color Color);// 0x787777c 0x78cea82a80
	static int TestForIssue294(FString A, int B, out const delegate Event, out const Color[] Array);// 0x7877a14 0x78cea82b60
	static int TestForIssue293(FString A, int B, out const Color[] C);// 0x7877cc4 0x78cea82c40
	static bool TestForBaseSpec2(int A, out int B, out int C);// 0x7877e20 0x78cea82d20
	static void TestForBaseSpec1(int A, out int B, out const int C, out FString D);// 0x7877f80 0x78cea82e00

--------------------------------
Class: UnLuaTestTableRow.TableRowBase
	FString title;//[Offset: 0x8, Size: 0x10] 0x78cef9a500
	int Level;//[Offset: 0x18, Size: 0x4] 0x78cef98480

--------------------------------
Class: LightPropagationVolumeBlendable.Object
	LightPropagationVolumeSettings Settings;//[Offset: 0x30, Size: 0x40] 0x78cea74600
	float BlendWeight;//[Offset: 0x70, Size: 0x4] 0x78cea74680

--------------------------------
Class: LightPropagationVolumeSettings
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf033b00
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf033b80
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf033c00
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf033c80
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf033d00
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cf033d80
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cf033e00
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cf033e80
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cf033f00
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78cf033f80
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78cf034000
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78cf034080
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78cf034100
	float LPVIntensity;//[Offset: 0x4, Size: 0x4] 0x78cf034180
	float LPVVplInjectionBias;//[Offset: 0x8, Size: 0x4] 0x78cf034200
	float LPVSize;//[Offset: 0xc, Size: 0x4] 0x78cf032180
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x10, Size: 0x4] 0x78cf032200
	float LPVSecondaryBounceIntensity;//[Offset: 0x14, Size: 0x4] 0x78cf032280
	float LPVGeometryVolumeBias;//[Offset: 0x18, Size: 0x4] 0x78cf032300
	float LPVEmissiveInjectionIntensity;//[Offset: 0x1c, Size: 0x4] 0x78cf032380
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x20, Size: 0x4] 0x78cf032400
	float LPVDirectionalOcclusionRadius;//[Offset: 0x24, Size: 0x4] 0x78cf032480
	float LPVDiffuseOcclusionExponent;//[Offset: 0x28, Size: 0x4] 0x78cf032500
	float LPVSpecularOcclusionExponent;//[Offset: 0x2c, Size: 0x4] 0x78cf032580
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x30, Size: 0x4] 0x78cf032600
	float LPVSpecularOcclusionIntensity;//[Offset: 0x34, Size: 0x4] 0x78cf032680
	float LPVFadeRange;//[Offset: 0x38, Size: 0x4] 0x78cf032700
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x3c, Size: 0x4] 0x78cf032780

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x2b8, Size: 0x8] 0x78cea7b500
	float PermutationTimeOffset;//[Offset: 0x2c0, Size: 0x4] 0x78cea7b580
	float PlayRate;//[Offset: 0x2c4, Size: 0x4] 0x78cea79500
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78cea79580
	AnimSharingInstance* Instance;//[Offset: 0x2d0, Size: 0x8] 0x78cea79600
	void GetInstancedActors(out Actor*[] Actors);// 0x7885dc0 0x78cea85800

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10] 0x78cf1e9340
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 0x8] 0x78cea7af00
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 0x10] 0x78cf1e93e0
	Enum* StateEnum;//[Offset: 0xe8, Size: 0x8] 0x78cea7b000
	Actor* SharingActor;//[Offset: 0xf0, Size: 0x8] 0x78cea7b080

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28] 0x78cea7c600
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x7888394 0x78cea88c80
	Enum* GetAnimationStateEnum();// 0x7888358 0x78cea88d60

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x2b8, Size: 0x8] 0x78cea7b300
	SkeletalMeshComponent* ToComponent;//[Offset: 0x2c0, Size: 0x8] 0x78cea7b380
	float BlendTime;//[Offset: 0x2c8, Size: 0x4] 0x78cea7b400
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x78cea7b480

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x2b8, Size: 0x8] 0x78cea7b100
	AnimSequence* AdditiveAnimation;//[Offset: 0x2c0, Size: 0x8] 0x78cea7b180
	float Alpha;//[Offset: 0x2c8, Size: 0x4] 0x78cea7b200
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x78cea7b280

--------------------------------
Class: AnimationSharingManager.Object
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10] 0x78cf1e9200
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10] 0x78cf1e92a0
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0x78870dc 0x78cea88e40
	static AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0x78872c0 0x78cea88f20
	static bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0x78871cc 0x78cea89000
	static bool AnimationSharingEnabled();// 0x78870a4 0x78cea85720

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10] 0x78cf1e9160
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x78cea7a900

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8] 0x78cef99900
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8] 0x78cef99980
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8] 0x78cee5ad80
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8] 0x78cee5ae20
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8] 0x78cee5aec0
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10] 0x78cee5b0a0

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1] 0x78cef99a00
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10] 0x78cee5b000
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cef99c80
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78cef99d00
	float BlendTime;//[Offset: 0x1c, Size: 0x4] 0x78cef99d80
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cef99e00
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x78cef99e80
	byte NextState;//[Offset: 0x22, Size: 0x1] 0x78cef99f00
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4] 0x78cef99f80
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4] 0x78cef9a000
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78cef9a080

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x78cef99a80
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8] 0x78cee5af60
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4] 0x78cef99b00
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1] 0x78cef99b80

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1] 0x78cef9a200
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4] 0x78cef9a280
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4] 0x78cef9a380
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4] 0x78cef9a480

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18] 0x78cea7c580

--------------------------------
Class: MyPluginObject.Object
	MyPluginStruct MyStruct;//[Offset: 0x28, Size: 0x10] 0x78cea7c500

--------------------------------
Class: MyPluginStruct
	FString TestString;//[Offset: 0x0, Size: 0x10] 0x78cef99880

--------------------------------
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object
	FName CurveSourceBindingName;//[Offset: 0x868, Size: 0x8] 0x78cea7f100
	float CurveSyncOffset;//[Offset: 0x870, Size: 0x4] 0x78cea7f180

--------------------------------
Class: DatasmithObjectTemplate.Object

--------------------------------
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object
	<FName> Layers;//[Offset: 0x30, Size: 0x50] 0x78cf1eb0a0
	<FName> Tags;//[Offset: 0x80, Size: 0x50] 0x78cf1eb140

--------------------------------
Class: DatasmithAdditionalData.Object

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object
	enum LightType;//[Offset: 0x220, Size: 0x1] 0x78cf1eaec0
	enum LightShape;//[Offset: 0x221, Size: 0x1] 0x78cf1eaf60
	Vector2D Dimensions;//[Offset: 0x224, Size: 0x8] 0x78cea7e900
	float Intensity;//[Offset: 0x22c, Size: 0x4] 0x78cea7e980
	enum IntensityUnits;//[Offset: 0x230, Size: 0x1] 0x78cf1eb000
	LinearColor Color;//[Offset: 0x234, Size: 0x10] 0x78cea7ea80
	float Temperature;//[Offset: 0x244, Size: 0x4] 0x78cea7eb00
	TextureLightProfile* IESTexture;//[Offset: 0x248, Size: 0x8] 0x78cea7eb80
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78cea7ec00
	float IESBrightnessScale;//[Offset: 0x254, Size: 0x4] 0x78cea7ec80
	Rotator Rotation;//[Offset: 0x258, Size: 0xc] 0x78cea7ed00
	float SourceRadius;//[Offset: 0x264, Size: 0x4] 0x78cea7ed80
	float SourceLength;//[Offset: 0x268, Size: 0x4] 0x78cea7ee00
	float AttenuationRadius;//[Offset: 0x26c, Size: 0x4] 0x78cea7ee80
	float SpotlightInnerAngle;//[Offset: 0x270, Size: 0x4] 0x78cea7ef00
	float SpotlightOuterAngle;//[Offset: 0x274, Size: 0x4] 0x78cea7ef80

--------------------------------
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object
	enum LightType;//[Offset: 0x29, Size: 0x1] 0x78cf1eace0
	enum LightShape;//[Offset: 0x2a, Size: 0x1] 0x78cf1ead80
	Vector2D Dimensions;//[Offset: 0x2c, Size: 0x8] 0x78cea7fa80
	LinearColor Color;//[Offset: 0x34, Size: 0x10] 0x78cea7fb00
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x78cea7fb80
	enum IntensityUnits;//[Offset: 0x48, Size: 0x1] 0x78cf1eae20
	float Temperature;//[Offset: 0x4c, Size: 0x4] 0x78cea7fc80
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x28] 0x78cea7fd00
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78cea7fd80
	float IESBrightnessScale;//[Offset: 0x7c, Size: 0x4] 0x78cea7fe00
	Rotator Rotation;//[Offset: 0x80, Size: 0xc] 0x78cea7fe80
	float SourceRadius;//[Offset: 0x8c, Size: 0x4] 0x78cea7ff00
	float SourceLength;//[Offset: 0x90, Size: 0x4] 0x78cea7ff80
	float AttenuationRadius;//[Offset: 0x94, Size: 0x4] 0x78cea7e780

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	FString Generator;//[Offset: 0x28, Size: 0x10] 0x78cea91000
	float Version;//[Offset: 0x38, Size: 0x4] 0x78cea91080
	FString Author;//[Offset: 0x40, Size: 0x10] 0x78cea7f800
	FString License;//[Offset: 0x50, Size: 0x10] 0x78cea7f880
	FString Source;//[Offset: 0x60, Size: 0x10] 0x78cea7f900

--------------------------------
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceMeshName;//[Offset: 0x28, Size: 0x10] 0x78cea90f80

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cea90d80
	FString TexturesDir;//[Offset: 0x30, Size: 0x10] 0x78cea90e00
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1] 0x78cea90e80
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78cea90f00

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78cea90880
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x78cea90900
	bool bRemoveInvisibleNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78cea90980
	bool bSimplifyNodeHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78cea90a00
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1] 0x78cea90a80
	FString VarPath;//[Offset: 0x48, Size: 0x10] 0x78cea90b00
	bool bImportPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cea90b80
	FString PosPath;//[Offset: 0x60, Size: 0x10] 0x78cea90c00
	bool bImportTml;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78cea90c80
	FString TmlPath;//[Offset: 0x78, Size: 0x10] 0x78cea90d00

--------------------------------
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78cea90300
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x78cea90380
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78cea90400
	FString MatsPath;//[Offset: 0x48, Size: 0x10] 0x78cea90480
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cea90500
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78cea90580
	FString VarPath;//[Offset: 0x60, Size: 0x10] 0x78cea90600
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78cea90680
	FString LightInfoPath;//[Offset: 0x78, Size: 0x10] 0x78cea90700
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78cea90780
	FString ClipInfoPath;//[Offset: 0x90, Size: 0x10] 0x78cea90800

--------------------------------
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceGlobalId;//[Offset: 0x28, Size: 0x10] 0x78cea90280

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50] 0x78cf159340

--------------------------------
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings;//[Offset: 0x30, Size: 0x30] 0x78cea90100

--------------------------------
Class: DatasmithCameraLookatTrackingSettingsTemplate
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cef99700
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cef99780
	Actor* ActorToTrack;//[Offset: 0x8, Size: 0x28] 0x78cef99800

--------------------------------
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraFilmbackSettingsTemplate FilmbackSettings;//[Offset: 0x2c, Size: 0x8] 0x78cea91f00
	DatasmithCameraLensSettingsTemplate LensSettings;//[Offset: 0x34, Size: 0x4] 0x78cea91f80
	DatasmithCameraFocusSettingsTemplate FocusSettings;//[Offset: 0x38, Size: 0x8] 0x78cea92000
	float CurrentFocalLength;//[Offset: 0x40, Size: 0x4] 0x78cea92080
	float CurrentAperture;//[Offset: 0x44, Size: 0x4] 0x78cea92100
	DatasmithPostProcessSettingsTemplate PostProcessSettings;//[Offset: 0x50, Size: 0x40] 0x78cea90080

--------------------------------
Class: DatasmithCameraFilmbackSettingsTemplate
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x78cef9ad80
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x78cef9ae00

--------------------------------
Class: DatasmithCameraLensSettingsTemplate
	float MaxFStop;//[Offset: 0x0, Size: 0x4] 0x78cef9ae80

--------------------------------
Class: DatasmithCameraFocusSettingsTemplate
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x78cee5ace0
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x78cef9af80

--------------------------------
Class: DatasmithPostProcessSettingsTemplate
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cef9b000
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cef9b080
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cef9b100
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cef9b180
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cef9b200
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cef9b280
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cef9b300
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cef9b380
	float WhiteTemp;//[Offset: 0x4, Size: 0x4] 0x78cef9b400
	float VignetteIntensity;//[Offset: 0x8, Size: 0x4] 0x78cef9b480
	LinearColor FilmWhitePoint;//[Offset: 0xc, Size: 0x10] 0x78cef9b500
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10] 0x78cef9b580
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1] 0x78cef99500
	float CameraISO;//[Offset: 0x34, Size: 0x4] 0x78cef99580
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4] 0x78cef99600
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4] 0x78cef99680

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0x78a5550 0x78cea8a5e0
	static void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0x78a5364 0x78cea8a6c0
	static DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0x78a568c 0x78cea8a7a0

--------------------------------
Class: DatasmithCustomActionBase.Object

--------------------------------
Class: DatasmithDecalComponentTemplate.DatasmithObjectTemplate.Object
	int SortOrder;//[Offset: 0x2c, Size: 0x4] 0x78cea91900
	Vector DecalSize;//[Offset: 0x30, Size: 0xc] 0x78cea91980
	MaterialInterface* Material;//[Offset: 0x40, Size: 0x8] 0x78cea91a00

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object
	LevelSequence*[] ImportedSequences;//[Offset: 0x220, Size: 0x10] 0x78cf1eab00
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0x78a63bc 0x78cea8a500

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8] 0x78ce8e2580
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50] 0x78ce8e2600
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0] 0x78ce8e2680
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50] 0x78cee13f40
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 0x8] 0x78ce8c1500
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10] 0x78ce8c15a0
	void RemoveMetaDataByClass(class Object InClass);// 0xa418e54 0x78ce8d89e0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0xa418f84 0x78ce8d8ac0
	Object* FindMetaDataByClass(class Object InClass);// 0xa419024 0x78ce8d8ba0
	Object* CopyMetaData(Object* InMetaData);// 0xa418ee4 0x78ce8d8c80

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50] 0x78cf0631c0
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50] 0x78cefdf060

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10] 0x78cefdefc0

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10] 0x78cf05e100
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18] 0x78cf05e180
	FString ObjectPath;//[Offset: 0x28, Size: 0x10] 0x78cf05e200

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c] 0x78cf05df80
	FString ComponentName;//[Offset: 0x20, Size: 0x10] 0x78cf05e000
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8] 0x78cf05e080

--------------------------------
Class: DatasmithOptionsBase.Object

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10] 0x78cea91780

--------------------------------
Class: DatasmithTessellationOptions
	float ChordTolerance;//[Offset: 0x0, Size: 0x4] 0x78cef9ab80
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4] 0x78cef9ac00
	float NormalTolerance;//[Offset: 0x8, Size: 0x4] 0x78cef9ac80
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1] 0x78cee5ac40

--------------------------------
Class: DatasmithImportOptions.DatasmithOptionsBase.Object
	enum SearchPackagePolicy;//[Offset: 0x28, Size: 0x1] 0x78cf1ea600
	enum MaterialConflictPolicy;//[Offset: 0x29, Size: 0x1] 0x78cf1ea6a0
	enum TextureConflictPolicy;//[Offset: 0x2a, Size: 0x1] 0x78cf1ea740
	enum StaticMeshActorImportPolicy;//[Offset: 0x2b, Size: 0x1] 0x78cf1ea7e0
	enum LightImportPolicy;//[Offset: 0x2c, Size: 0x1] 0x78cf1ea880
	enum CameraImportPolicy;//[Offset: 0x2d, Size: 0x1] 0x78cf1ea920
	enum OtherActorImportPolicy;//[Offset: 0x2e, Size: 0x1] 0x78cf1ea9c0
	enum MaterialQuality;//[Offset: 0x2f, Size: 0x1] 0x78cf1eaa60
	DatasmithImportBaseOptions BaseOptions;//[Offset: 0x34, Size: 0x14] 0x78cea91580
	DatasmithReimportOptions ReimportOptions;//[Offset: 0x48, Size: 0x2] 0x78cea91600
	FString Filename;//[Offset: 0x50, Size: 0x10] 0x78cea91680
	FString FilePath;//[Offset: 0x60, Size: 0x10] 0x78cea91700

--------------------------------
Class: DatasmithImportBaseOptions
	enum SceneHandling;//[Offset: 0x0, Size: 0x1] 0x78cee5a9c0
	bool bIncludeGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cef9c600
	bool bIncludeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cef9a580
	bool bIncludeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cef9a600
	bool bIncludeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cef9a680
	bool bIncludeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78cef9a700
	DatasmithAssetImportOptions AssetOptions;//[Offset: 0x8, Size: 0x8] 0x78cef9a800
	DatasmithStaticMeshImportOptions StaticMeshOptions;//[Offset: 0x10, Size: 0x4] 0x78cef9aa80

--------------------------------
Class: DatasmithAssetImportOptions
	FName PackagePath;//[Offset: 0x0, Size: 0x8] 0x78cef9a780

--------------------------------
Class: DatasmithStaticMeshImportOptions
	enum MinLightmapResolution;//[Offset: 0x0, Size: 0x1] 0x78cee5aa60
	enum MaxLightmapResolution;//[Offset: 0x1, Size: 0x1] 0x78cee5ab00
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cef9a980
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cef9aa00

--------------------------------
Class: DatasmithReimportOptions
	bool bUpdateActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cef9c480
	bool bRespawnDeletedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cef9c500

--------------------------------
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30, Size: 0x8] 0x78cea93180
	int StaticLightingLOD;//[Offset: 0x38, Size: 0x4] 0x78cea91100

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x78cea92c80
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x78cea92d00
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x78cea92d80
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x78cea92e00
	float Intensity;//[Offset: 0x2c, Size: 0x4] 0x78cea92e80
	float Temperature;//[Offset: 0x30, Size: 0x4] 0x78cea92f00
	float IESBrightnessScale;//[Offset: 0x34, Size: 0x4] 0x78cea92f80
	LinearColor LightColor;//[Offset: 0x38, Size: 0x10] 0x78cea93000
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x48, Size: 0x8] 0x78cea93080
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x8] 0x78cea93100

--------------------------------
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 0x28] 0x78cea92880
	<FName,float> ScalarParameterValues;//[Offset: 0x58, Size: 0x50] 0x78cf159100
	<FName,LinearColor> VectorParameterValues;//[Offset: 0xa8, Size: 0x50] 0x78cf1591c0
	<FName,Texture*> TextureParameterValues;//[Offset: 0xf8, Size: 0x50] 0x78cf159280
	DatasmithStaticParameterSetTemplate StaticParameters;//[Offset: 0x148, Size: 0x50] 0x78cea92c00

--------------------------------
Class: DatasmithStaticParameterSetTemplate
	<FName,bool> StaticSwitchParameters;//[Offset: 0x0, Size: 0x50] 0x78cf5efd00

--------------------------------
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object
	enum IntensityUnits;//[Offset: 0x29, Size: 0x1] 0x78cf1ea560
	float SourceRadius;//[Offset: 0x2c, Size: 0x4] 0x78cea92700
	float SourceLength;//[Offset: 0x30, Size: 0x4] 0x78cea92780
	float AttenuationRadius;//[Offset: 0x34, Size: 0x4] 0x78cea92800

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40] 0x78cea92500
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78cea92580
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78cea92600

--------------------------------
Class: DatasmithScene.Object

--------------------------------
Class: DatasmithSceneActor.Actor.Object
	DatasmithScene* Scene;//[Offset: 0x220, Size: 0x8] 0x78cea92380
	<FName,Actor*> RelatedActors;//[Offset: 0x228, Size: 0x50] 0x78cf159040

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30] 0x78cea94200
	byte Mobility;//[Offset: 0x60, Size: 0x1] 0x78cea92180
	SceneComponent* AttachParent;//[Offset: 0x68, Size: 0x28] 0x78cea92200
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78cea92280
	<FName> Tags;//[Offset: 0x98, Size: 0x50] 0x78cf1ece00

--------------------------------
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object
	byte SourceType;//[Offset: 0x29, Size: 0x1] 0x78cea94080
	int CubemapResolution;//[Offset: 0x2c, Size: 0x4] 0x78cea94100
	TextureCube* Cubemap;//[Offset: 0x30, Size: 0x8] 0x78cea94180

--------------------------------
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object
	float InnerConeAngle;//[Offset: 0x2c, Size: 0x4] 0x78cea93f80
	float OuterConeAngle;//[Offset: 0x30, Size: 0x4] 0x78cea94000

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8] 0x78cea93e80
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10] 0x78cf1ecd60

--------------------------------
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object
	DatasmithMeshSectionInfoMapTemplate SectionInfoMap;//[Offset: 0x30, Size: 0x50] 0x78cea93c00
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4] 0x78cea93c80
	int LightMapResolution;//[Offset: 0x84, Size: 0x4] 0x78cea93d00
	DatasmithMeshBuildSettingsTemplate[] BuildSettings;//[Offset: 0x88, Size: 0x10] 0x78cf1ecc20
	DatasmithStaticMaterialTemplate[] StaticMaterials;//[Offset: 0x98, Size: 0x10] 0x78cf1eccc0

--------------------------------
Class: DatasmithMeshSectionInfoMapTemplate
	<uint32,DatasmithMeshSectionInfoTemplate> Map;//[Offset: 0x0, Size: 0x50] 0x78cf5efb80

--------------------------------
Class: DatasmithMeshSectionInfoTemplate
	int MaterialIndex;//[Offset: 0x0, Size: 0x4] 0x78cef9c200

--------------------------------
Class: DatasmithMeshBuildSettingsTemplate
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cef9bb80
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cef9bc00
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cef9bc80
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cef9bd00
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cef9bd80
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cef9be00
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cef9be80
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cef9bf00
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4] 0x78cef9bf80
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4] 0x78cef9c000
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4] 0x78cef9c080

--------------------------------
Class: DatasmithStaticMaterialTemplate
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8] 0x78cef9c100
	MaterialInterface* MaterialInterface;//[Offset: 0x8, Size: 0x8] 0x78cef9c180

--------------------------------
Class: LevelVariantSets.Object
	class Object* DirectorClass;//[Offset: 0x28, Size: 0x8] 0x78cf1ecae0
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10] 0x78cf1ecb80
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0x78c7340 0x78cea8a260
	VariantSet* GetVariantSet(int VariantSetIndex);// 0x78c744c 0x78cea8a340
	int GetNumVariantSets();// 0x78c74fc 0x78cea8a420

--------------------------------
Class: VariantSet.Object
	FText DisplayText;//[Offset: 0x28, Size: 0x18] 0x78cea97180
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cea97200
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10] 0x78cf1ec2c0
	Texture2D* Thumbnail;//[Offset: 0x70, Size: 0x8] 0x78cea97300
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x78cd078 0x78cea8ba00
	void SetThumbnailFromFile(FString FilePath);// 0x78ccf7c 0x78cea8bae0
	void SetThumbnailFromEditorViewport();// 0x78ccd74 0x78cea8bbc0
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x78ccd88 0x78cea8bca0
	void SetDisplayText(out const FText NewDisplayText);// 0x78cd3e0 0x78cea8bd80
	Variant* GetVariantByName(FString VariantName);// 0x78cd120 0x78cea8be60
	Variant* GetVariant(int VariantIndex);// 0x78cd22c 0x78cea8bf40
	Texture2D* GetThumbnail();// 0x78ccd40 0x78cea8c020
	LevelVariantSets* GetParent();// 0x78cd4f0 0x78cea8c100
	int GetNumVariants();// 0x78cd2dc 0x78cea8c1e0
	FText GetDisplayText();// 0x78cd310 0x78cea8c2c0

--------------------------------
Class: Variant.Object
	VariantDependency[] Dependencies;//[Offset: 0x28, Size: 0x10] 0x78cf1ec4a0
	FText DisplayText;//[Offset: 0x38, Size: 0x18] 0x78cea95d80
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x68, Size: 0x10] 0x78cf1ec540
	Texture2D* Thumbnail;//[Offset: 0x78, Size: 0x8] 0x78cea95e80
	void SwitchOn();// 0x78cbda0 0x78cea8c3a0
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x78cbcc0 0x78cea8c480
	void SetThumbnailFromFile(FString FilePath);// 0x78cbbc4 0x78cea8c560
	void SetThumbnailFromEditorViewport();// 0x78cb9bc 0x78cea8c640
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x78cb9d0 0x78cea8c720
	void SetDisplayText(out const FText NewDisplayText);// 0x78cbf68 0x78cea8c800
	void SetDependency(int index, out VariantDependency Dependency);// 0x78cb548 0x78cea8c8e0
	bool IsActive();// 0x78cbd68 0x78cea8c9c0
	Texture2D* GetThumbnail();// 0x78cb988 0x78cea890e0
	VariantSet* GetParent();// 0x78cc078 0x78cea891c0
	int GetNumDependencies();// 0x78cb46c 0x78cea892a0
	int GetNumActors();// 0x78cbe64 0x78cea89380
	FText GetDisplayText();// 0x78cbe98 0x78cea89460
	Variant*[] GetDependents(LevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);// 0x78cb838 0x78cea89540
	VariantDependency GetDependency(int index);// 0x78cb680 0x78cea89620
	Actor* GetActor(int ActorIndex);// 0x78cbdb4 0x78cea89700
	void DeleteDependency(int index);// 0x78cb4a0 0x78cea897e0
	int AddDependency(out VariantDependency Dependency);// 0x78cb738 0x78cea898c0

--------------------------------
Class: VariantDependency
	VariantSet* VariantSet;//[Offset: 0x0, Size: 0x28] 0x78cef9b780
	Variant* Variant;//[Offset: 0x28, Size: 0x28] 0x78cef9b800
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cef9b880

--------------------------------
Class: VariantObjectBinding.Object
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10] 0x78cea95a80
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18] 0x78cea95b00
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c] 0x78cea95b80
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10] 0x78cf1ec360
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10] 0x78cf1ec400

--------------------------------
Class: PropertyValue.Object
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10] 0x78cf1ec720
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10] 0x78cf1ec7c0
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10] 0x78cf1ec860
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10] 0x78cea95000
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8] 0x78cea95080
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50] 0x78cf158f80
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78cea95200
	class Object* LeafPropertyClass;//[Offset: 0x128, Size: 0x8] 0x78cf1ec900
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10] 0x78cf1ec9a0
	enum PropCategory;//[Offset: 0x148, Size: 0x1] 0x78cf1eca40
	bool HasRecordedData();// 0x78c8b3c 0x78cea89c40
	FText GetPropertyTooltip();// 0x78c8bf8 0x78cea89d20
	FString GetFullDisplayString();// 0x78c8b74 0x78cea89e00

--------------------------------
Class: CapturedPropSegment
	FString PropertyName;//[Offset: 0x0, Size: 0x10] 0x78cef9b980
	int PropertyIndex;//[Offset: 0x10, Size: 0x4] 0x78cef9ba00
	FString ComponentName;//[Offset: 0x18, Size: 0x10] 0x78cef9ba80

--------------------------------
Class: FunctionCaller
	FName FunctionName;//[Offset: 0x0, Size: 0x8] 0x78cef9bb00

--------------------------------
Class: LevelVariantSetsActor.Actor.Object
	SoftObjectPath LevelVariantSets;//[Offset: 0x220, Size: 0x18] 0x78cea93400
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0x78c7c0c 0x78cea89ee0
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0x78c7b10 0x78cea89fc0
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0x78c7dbc 0x78cea8a0a0
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0x78c7e64 0x78cea8a180

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object

--------------------------------
Class: PropertyValueTransform.PropertyValue.Object

--------------------------------
Class: PropertyValueVisibility.PropertyValue.Object

--------------------------------
Class: PropertyValueColor.PropertyValue.Object

--------------------------------
Class: PropertyValueMaterial.PropertyValue.Object

--------------------------------
Class: PropertyValueOption.PropertyValue.Object

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object

--------------------------------
Class: SwitchActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8] 0x78cea94c00
	int LastSelectedOption;//[Offset: 0x240, Size: 0x4] 0x78cea94c80
	void SelectOption(int OptionIndex);// 0x78cab54 0x78cea899a0
	int GetSelectedOption();// 0x78cabfc 0x78cea89a80
	Actor*[] GetOptions();// 0x78cac30 0x78cea89b60

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10] 0x78cf1ec180
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10] 0x78cf1ec220
	int StartFrame;//[Offset: 0x60, Size: 0x4] 0x78cea97080
	int EndFrame;//[Offset: 0x64, Size: 0x4] 0x78cea97100

--------------------------------
Class: GeometryCacheTrack.Object
	float Duration;//[Offset: 0x28, Size: 0x4] 0x78cea97f80

--------------------------------
Class: GeometryCacheActor.Actor.Object
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x220, Size: 0x8] 0x78cea96e80
	GeometryCacheComponent* GetGeometryCacheComponent();// 0x78e853c 0x78cea8b920

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x468, Size: 0x8] 0x78cea98000
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1] 0x78cea98080
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1] 0x78cea98100
	float StartTimeOffset;//[Offset: 0x474, Size: 0x4] 0x78cea98180
	float PlaybackSpeed;//[Offset: 0x478, Size: 0x4] 0x78cea98200
	int NumTracks;//[Offset: 0x47c, Size: 0x4] 0x78cea98280
	float ElapsedTime;//[Offset: 0x480, Size: 0x4] 0x78cea98300
	float Duration;//[Offset: 0x4b4, Size: 0x4] 0x78cea98380
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1] 0x78cea98400
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0x78e96d4 0x78cea8e160
	void Stop();// 0x78e9cfc 0x78cea8e240
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0x78e9938 0x78cea8e320
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0x78e9ac8 0x78cea8e400
	void SetLooping(const bool bNewLooping);// 0x78e9ba4 0x78cea8e4e0
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0x78e9a14 0x78cea8e5c0
	void PlayReversedFromEnd();// 0x78e9d24 0x78cea8e6a0
	void PlayReversed();// 0x78e9d38 0x78cea8adc0
	void PlayFromStart();// 0x78e9d4c 0x78cea8aea0
	void Play();// 0x78e9d60 0x78cea8af80
	void Pause();// 0x78e9d10 0x78cea8b060
	bool IsPlayingReversed();// 0x78e9c8c 0x78cea8b140
	bool IsPlaying();// 0x78e9cc4 0x78cea8b220
	bool IsLooping();// 0x78e9c54 0x78cea8b300
	float GetStartTimeOffset();// 0x78e99e0 0x78cea8b3e0
	float GetPlaybackSpeed();// 0x78e9b70 0x78cea8b4c0
	float GetPlaybackDirection();// 0x78e98d0 0x78cea8b5a0
	int GetNumberOfFrames();// 0x78e9868 0x78cea8b680
	float GetDuration();// 0x78e989c 0x78cea8b760
	float GetAnimationTime();// 0x78e9904 0x78cea8b840

--------------------------------
Class: GeometryCacheCodecBase.Object
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10] 0x78cf1ec0e0

--------------------------------
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object
	int DummyProperty;//[Offset: 0x38, Size: 0x4] 0x78cea96d80

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object
	uint32 NumMeshSamples;//[Offset: 0x54, Size: 0x4] 0x78cea97e00
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0x78eaee8 0x78cea8e080

--------------------------------
Class: GeometryCacheMeshData

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8] 0x78cea97d00
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4] 0x78cea97d80

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x78eb850 0x78cea8dfa0

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x78ebdd8 0x78cea8dec0

--------------------------------
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCacheParams Params;//[Offset: 0xe0, Size: 0x40] 0x78cea97b80

--------------------------------
Class: MovieSceneGeometryCacheParams
	GeometryCache* GeometryCacheAsset;//[Offset: 0x0, Size: 0x8] 0x78cef9d400
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x78cef9d480
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x78cef9d500
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x78cef9d580
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x78cef9d600
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cef9d680
	float StartOffset;//[Offset: 0x1c, Size: 0x4] 0x78cef9b600
	float EndOffset;//[Offset: 0x20, Size: 0x4] 0x78cef9b680
	SoftObjectPath GeometryCache;//[Offset: 0x28, Size: 0x18] 0x78cef9b700

--------------------------------
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10] 0x78cf1ec040

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void TakeGameplayAutomationScreenshot(const FString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0x78f690c 0x78cea8dde0

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothConfig.ClothConfigCommon.ClothConfigBase.Object
	enum MassMode;//[Offset: 0x28, Size: 0x1] 0x78cf1ebf00
	float UniformMass;//[Offset: 0x2c, Size: 0x4] 0x78cea98a00
	float TotalMass;//[Offset: 0x30, Size: 0x4] 0x78cea98a80
	float Density;//[Offset: 0x34, Size: 0x4] 0x78cea98b00
	float MinPerParticleMass;//[Offset: 0x38, Size: 0x4] 0x78cea98b80
	float EdgeStiffness;//[Offset: 0x3c, Size: 0x4] 0x78cea98c00
	float BendingStiffness;//[Offset: 0x40, Size: 0x4] 0x78cea98c80
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78cea98d00
	float AreaStiffness;//[Offset: 0x48, Size: 0x4] 0x78cea98d80
	float VolumeStiffness;//[Offset: 0x4c, Size: 0x4] 0x78cea98e00
	float StrainLimitingStiffness;//[Offset: 0x50, Size: 0x4] 0x78cea98e80
	float LimitScale;//[Offset: 0x54, Size: 0x4] 0x78cea98f00
	enum TetherMode;//[Offset: 0x58, Size: 0x1] 0x78cf1ebfa0
	bool bUseGeodesicDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78cea99000
	float ShapeTargetStiffness;//[Offset: 0x5c, Size: 0x4] 0x78cea99080
	float CollisionThickness;//[Offset: 0x60, Size: 0x4] 0x78cea99100
	float FrictionCoefficient;//[Offset: 0x64, Size: 0x4] 0x78cea99180
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78cea99200
	float SelfCollisionThickness;//[Offset: 0x6c, Size: 0x4] 0x78cea99280
	bool bUseLegacyBackstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78cea99300
	float DampingCoefficient;//[Offset: 0x74, Size: 0x4] 0x78cea99380
	bool bUsePointBasedWindModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78cea99400
	float DragCoefficient;//[Offset: 0x7c, Size: 0x4] 0x78cea99480
	float LiftCoefficient;//[Offset: 0x80, Size: 0x4] 0x78cea97400
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78cea97480
	float GravityScale;//[Offset: 0x88, Size: 0x4] 0x78cea97500
	Vector Gravity;//[Offset: 0x8c, Size: 0xc] 0x78cea97580
	float AnimDriveSpringStiffness;//[Offset: 0x98, Size: 0x4] 0x78cea97600
	Vector LinearVelocityScale;//[Offset: 0x9c, Size: 0xc] 0x78cea97680
	float AngularVelocityScale;//[Offset: 0xa8, Size: 0x4] 0x78cea97700
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1] 0x78cea97780
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1] 0x78cea97800
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1] 0x78cea97880

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothSharedSimConfig.ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object
	int IterationCount;//[Offset: 0x28, Size: 0x4] 0x78cea9a500
	int SubdivisionCount;//[Offset: 0x2c, Size: 0x4] 0x78cea98480
	float SelfCollisionThickness;//[Offset: 0x30, Size: 0x4] 0x78cea98500
	float CollisionThickness;//[Offset: 0x34, Size: 0x4] 0x78cea98580
	bool bUseDampingOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cea98600
	float Damping;//[Offset: 0x3c, Size: 0x4] 0x78cea98680
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cea98700
	float GravityScale;//[Offset: 0x44, Size: 0x4] 0x78cea98780
	Vector Gravity;//[Offset: 0x48, Size: 0xc] 0x78cea98800
	bool bUseLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78cea98880
	bool bUseXPBDConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78cea98900

--------------------------------
Class: ChaosClothingSimulationFactory.ClothingSimulationFactory.Object

--------------------------------
Class: ChaosClothingSimulationInteractor.ClothingSimulationInteractor.Object

--------------------------------
Class: EditableMeshAdapter.Object

--------------------------------
Class: EditableGeometryCollectionAdapter.EditableMeshAdapter.Object
	GeometryCollection* GeometryCollection;//[Offset: 0x28, Size: 0x8] 0x78cea99f80
	GeometryCollection* OriginalGeometryCollection;//[Offset: 0x30, Size: 0x8] 0x78cea9a000
	int GeometryCollectionLODIndex;//[Offset: 0x38, Size: 0x4] 0x78cea9a080

--------------------------------
Class: GeometryCollection.Object
	GeometryCollectionSource[] GeometrySource;//[Offset: 0x30, Size: 0x10] 0x78ce3f3080
	MaterialInterface*[] Materials;//[Offset: 0x40, Size: 0x10] 0x78ce3f3120
	enum CollisionType;//[Offset: 0x50, Size: 0x1] 0x78ce3f31c0
	enum ImplicitType;//[Offset: 0x51, Size: 0x1] 0x78ce3f3260
	int MinLevelSetResolution;//[Offset: 0x54, Size: 0x4] 0x78ce41dc80
	int MaxLevelSetResolution;//[Offset: 0x58, Size: 0x4] 0x78ce41dd00
	int MinClusterLevelSetResolution;//[Offset: 0x5c, Size: 0x4] 0x78ce41dd80
	int MaxClusterLevelSetResolution;//[Offset: 0x60, Size: 0x4] 0x78ce41de00
	float CollisionObjectReductionPercentage;//[Offset: 0x64, Size: 0x4] 0x78ce41de80
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78ce41df00
	float Mass;//[Offset: 0x6c, Size: 0x4] 0x78ce41df80
	float MinimumMassClamp;//[Offset: 0x70, Size: 0x4] 0x78ce41e000
	float CollisionParticlesFraction;//[Offset: 0x74, Size: 0x4] 0x78ce41e080
	int MaximumCollisionParticles;//[Offset: 0x78, Size: 0x4] 0x78ce41e100
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0x80, Size: 0x10] 0x78ce3f3300
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78ce41e200
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0x98, Size: 0x10] 0x78ce3f33a0
	Guid PersistentGuid;//[Offset: 0xa8, Size: 0x10] 0x78ce41e300
	Guid StateGuid;//[Offset: 0xb8, Size: 0x10] 0x78ce41e380
	int BoneSelectedMaterialIndex;//[Offset: 0xc8, Size: 0x4] 0x78ce41e400

--------------------------------
Class: GeometryCollectionSource
	SoftObjectPath SourceGeometryObject;//[Offset: 0x0, Size: 0x18] 0x78cf164500
	Transform LocalTransform;//[Offset: 0x20, Size: 0x30] 0x78cf164580
	MaterialInterface*[] SourceMaterial;//[Offset: 0x50, Size: 0x10] 0x78cf08ca40

--------------------------------
Class: GeometryCollectionSizeSpecificData
	float MaxSize;//[Offset: 0x0, Size: 0x4] 0x78cf164680
	enum CollisionType;//[Offset: 0x4, Size: 0x1] 0x78cf08cae0
	enum ImplicitType;//[Offset: 0x5, Size: 0x1] 0x78cf08cb80
	int MinLevelSetResolution;//[Offset: 0x8, Size: 0x4] 0x78cf164800
	int MaxLevelSetResolution;//[Offset: 0xc, Size: 0x4] 0x78cf164880
	int MinClusterLevelSetResolution;//[Offset: 0x10, Size: 0x4] 0x78cf164900
	int MaxClusterLevelSetResolution;//[Offset: 0x14, Size: 0x4] 0x78cf164980
	int CollisionObjectReductionPercentage;//[Offset: 0x18, Size: 0x4] 0x78cf164a00
	float CollisionParticlesFraction;//[Offset: 0x1c, Size: 0x4] 0x78cf164a80
	int MaximumCollisionParticles;//[Offset: 0x20, Size: 0x4] 0x78cf164b00

--------------------------------
Class: EditableMesh.Object
	EditableMeshAdapter*[] Adapters;//[Offset: 0x3b8, Size: 0x10] 0x78cf1ef880
	int TextureCoordinateCount;//[Offset: 0x3d0, Size: 0x4] 0x78ceab1500
	int PendingCompactCounter;//[Offset: 0x51c, Size: 0x4] 0x78ceab1580
	int SubdivisionCount;//[Offset: 0x520, Size: 0x4] 0x78ceab1600
	void WeldVertices(out const VertexID[] VertexIDs, out VertexID OutNewVertexID);// 0x7be3150 0x78ceaa4220
	void TryToRemoveVertex(const VertexID VertexID, out bool bOutWasVertexRemoved, out EdgeID OutNewEdgeID);// 0x7be4518 0x78ceaa4300
	void TryToRemovePolygonEdge(const EdgeID EdgeID, out bool bOutWasEdgeRemoved, out PolygonID OutNewPolygonID);// 0x7be4678 0x78ceaa43e0
	void TriangulatePolygons(out const PolygonID[] PolygonIDs, out PolygonID[] OutNewTrianglePolygons);// 0x7be3588 0x78ceaa44c0
	void TessellatePolygons(out const PolygonID[] PolygonIDs, const enum TriangleTessellationMode, out PolygonID[] OutNewPolygonIDs);// 0x7be2fe8 0x78ceaa45a0
	void StartModification(const enum MeshModificationType, const enum MeshTopologyChange);// 0x7be9dbc 0x78ceaa4680
	void SplitPolygons(out const PolygonToSplit[] PolygonsToSplit, out EdgeID[] OutNewEdgeIDs);// 0x7be5c5c 0x78ceaa4760
	void SplitPolygonalMesh(out const Plane InPlane, out PolygonID[] PolygonIDs1, out PolygonID[] PolygonIDs2, out EdgeID[] BoundaryIDs);// 0x7be2bf4 0x78ceaa4840
	void SplitEdge(const EdgeID EdgeID, out const float[] Splits, out VertexID[] OutNewVertexIDs);// 0x7be5f28 0x78ceaa4920
	void SetVerticesCornerSharpness(out const VertexID[] VertexIDs, out const float[] VerticesNewCornerSharpness);// 0x7be3aa0 0x78ceaa4a00
	void SetVerticesAttributes(out const AttributesForVertex[] AttributesForVertices);// 0x7be4bc8 0x78ceaa4ae0
	void SetVertexInstancesAttributes(out const AttributesForVertexInstance[] AttributesForVertexInstances);// 0x7be4acc 0x78ceaa4bc0
	void SetTextureCoordinateCount(const int NumTexCoords);// 0x7be2f40 0x78ceaa4ca0
	void SetSubdivisionCount(const int NewSubdivisionCount);// 0x7be6274 0x78ceaa4d80
	void SetPolygonsVertexAttributes(out const VertexAttributesForPolygon[] VertexAttributesForPolygons);// 0x7be4914 0x78ceaa4e60
	void SetEdgesHardnessAutomatically(out const EdgeID[] EdgeIDs, const float MaxDotProductForSoftEdge);// 0x7be3764 0x78ceaa4f40
	void SetEdgesHardness(out const EdgeID[] EdgeIDs, out const bool[] EdgesNewIsHard);// 0x7be3868 0x78ceaa5020
	void SetEdgesCreaseSharpness(out const EdgeID[] EdgeIDs, out const float[] EdgesNewCreaseSharpness);// 0x7be3984 0x78ceaa5100
	void SetEdgesAttributes(out const AttributesForEdge[] AttributesForEdges);// 0x7be49d0 0x78ceaa51e0
	void SetAllowUndo(const bool bInAllowUndo);// 0x7be87b0 0x78ceaa52c0
	void SetAllowSpatialDatabase(const bool bInAllowSpatialDatabase);// 0x7be86e4 0x78ceaa53a0
	void SetAllowCompact(const bool bInAllowCompact);// 0x7be85e4 0x78ceaa5480
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane(out const Plane InPlane, out PolygonID[] OutPolygons);// 0x7be631c 0x78ceaa5560
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(const Vector LineSegmentStart, const Vector LineSegmentEnd, out PolygonID[] OutPolygons);// 0x7be6544 0x78ceaa5640
	void SearchSpatialDatabaseForPolygonsInVolume(out const Plane[] Planes, out PolygonID[] OutPolygons);// 0x7be6428 0x78ceaa1d60
	EditableMesh* RevertInstance();// 0x7be9b90 0x78ceaa1e40
	void Revert();// 0x7be9bc4 0x78ceaa1f20
	void RebuildRenderMesh();// 0x7be9eb0 0x78ceaa2000
	void QuadrangulateMesh(out PolygonID[] OutNewPolygonIDs);// 0x7be2e80 0x78ceaa20e0
	void PropagateInstanceChanges();// 0x7be9b7c 0x78ceaa21c0
	void MoveVertices(out const VertexToMove[] VerticesToMove);// 0x7be61b4 0x78ceaa22a0
	static VertexID MakeVertexID(const int VertexIndex);// 0x7be84b0 0x78ceaa2380
	static PolygonID MakePolygonID(const int PolygonIndex);// 0x7be82c4 0x78ceaa2460
	static PolygonGroupID MakePolygonGroupID(const int PolygonGroupIndex);// 0x7be8368 0x78ceaa2540
	static EdgeID MakeEdgeID(const int EdgeIndex);// 0x7be840c 0x78ceaa2620
	bool IsValidVertex(const VertexID VertexID);// 0x7be9a88 0x78ceaa2700
	bool IsValidPolygonGroup(const PolygonGroupID PolygonGroupID);// 0x7be90ac 0x78ceaa27e0
	bool IsValidPolygon(const PolygonID PolygonID);// 0x7be8df8 0x78ceaa28c0
	bool IsValidEdge(const EdgeID EdgeID);// 0x7be9464 0x78ceaa29a0
	bool IsUndoAllowed();// 0x7be885c 0x78ceaa2a80
	bool IsSpatialDatabaseAllowed();// 0x7be8794 0x78ceaa2b60
	bool IsPreviewingSubdivisions();// 0x7be81f0 0x78ceaa2c40
	bool IsOrphanedVertex(const VertexID VertexID);// 0x7be99c8 0x78ceaa2d20
	bool IsCompactAllowed();// 0x7be8690 0x78ceaa2e00
	bool IsCommittedAsInstance();// 0x7be9c9c 0x78ceaa2ee0
	bool IsCommitted();// 0x7be9cd4 0x78ceaa2fc0
	bool IsBeingModified();// 0x7be8878 0x78ceaa30a0
	static VertexID InvalidVertexID();// 0x7be85c0 0x78ceaa3180
	static PolygonID InvalidPolygonID();// 0x7be8554 0x78ceaa3260
	static PolygonGroupID InvalidPolygonGroupID();// 0x7be8578 0x78ceaa3340
	static EdgeID InvalidEdgeID();// 0x7be859c 0x78ceaa3420
	void InsetPolygons(out const PolygonID[] PolygonIDs, const float InsetFixedDistance, const float InsetProgressTowardCenter, const enum Mode, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x7be3dd0 0x78ceaa3500
	void InsertEdgeLoop(const EdgeID EdgeID, out const float[] Splits, out EdgeID[] OutNewEdgeIDs);// 0x7be5db4 0x78ceaa35e0
	void InitializeAdapters();// 0x7be9ec4 0x78ceaa36c0
	EdgeID GetVertexPairEdge(const VertexID VertexID, const VertexID NextVertexID, out bool bOutEdgeWindingIsReversed);// 0x7be7c30 0x78ceaa37a0
	VertexID GetVertexInstanceVertex(const VertexInstanceID VertexInstanceID);// 0x7be9718 0x78ceaa3880
	int GetVertexInstanceCount();// 0x7be97d4 0x78ceaa3960
	void GetVertexInstanceConnectedPolygons(const VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x7be7ea8 0x78ceaa0080
	int GetVertexInstanceConnectedPolygonCount(const VertexInstanceID VertexInstanceID);// 0x7be965c 0x78ceaa0160
	PolygonID GetVertexInstanceConnectedPolygon(const VertexInstanceID VertexInstanceID, const int ConnectedPolygonNumber);// 0x7be9558 0x78ceaa0240
	int GetVertexCount();// 0x7be9b48 0x78ceaa0320
	void GetVertexConnectedPolygons(const VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x7be7fc0 0x78ceaa0400
	void GetVertexConnectedEdges(const VertexID VertexID, out EdgeID[] OutConnectedEdgeIDs);// 0x7be80d8 0x78ceaa04e0
	int GetVertexConnectedEdgeCount(const VertexID VertexID);// 0x7be990c 0x78ceaa05c0
	EdgeID GetVertexConnectedEdge(const VertexID VertexID, const int ConnectedEdgeNumber);// 0x7be9808 0x78ceaa06a0
	void GetVertexAdjacentVertices(const VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x7be7d90 0x78ceaa0780
	int GetTextureCoordinateCount();// 0x7be825c 0x78ceaa0860
	SubdivisionLimitData GetSubdivisionLimitData();// 0x7be69e8 0x78ceaa0940
	int GetSubdivisionCount();// 0x7be8228 0x78ceaa0a20
	int GetPolygonTriangulatedTriangleCount(const PolygonID PolygonID);// 0x7be89bc 0x78ceaa0b00
	TriangleID GetPolygonTriangulatedTriangle(const PolygonID PolygonID, int PolygonTriangleNumber);// 0x7be88b8 0x78ceaa0be0
	void GetPolygonPerimeterVertices(const PolygonID PolygonID, out VertexID[] OutPolygonPerimeterVertexIDs);// 0x7be75cc 0x78ceaa0cc0
	void GetPolygonPerimeterVertexInstances(const PolygonID PolygonID, out VertexInstanceID[] OutPolygonPerimeterVertexInstanceIDs);// 0x7be74b4 0x78ceaa0da0
	VertexInstanceID GetPolygonPerimeterVertexInstance(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x7be8a78 0x78ceaa0e80
	int GetPolygonPerimeterVertexCount(const PolygonID PolygonID);// 0x7be8c80 0x78ceaa0f60
	VertexID GetPolygonPerimeterVertex(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x7be8b7c 0x78ceaa1040
	void GetPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutPolygonPerimeterEdgeIDs);// 0x7be7240 0x78ceaa1120
	int GetPolygonPerimeterEdgeCount(const PolygonID PolygonID);// 0x7be76e4 0x78ceaa1200
	EdgeID GetPolygonPerimeterEdge(const PolygonID PolygonID, const int PerimeterEdgeNumber, out bool bOutEdgeWindingIsReversedForPolygon);// 0x7be7358 0x78ceaa12e0
	PolygonID GetPolygonInGroup(const PolygonGroupID PolygonGroupID, const int PolygonNumber);// 0x7be8eec 0x78ceaa13c0
	int GetPolygonGroupCount();// 0x7be916c 0x78ceaa14a0
	int GetPolygonCountInGroup(const PolygonGroupID PolygonGroupID);// 0x7be8ff0 0x78ceaa1580
	int GetPolygonCount();// 0x7be8eb8 0x78ceaa1660
	void GetPolygonAdjacentPolygons(const PolygonID PolygonID, out PolygonID[] OutAdjacentPolygons);// 0x7be7128 0x78ceaa1740
	PolygonGroupID GetGroupForPolygon(const PolygonID PolygonID);// 0x7be8d3c 0x78ceaa1820
	PolygonGroupID GetFirstValidPolygonGroup();// 0x7be8290 0x78ceaa1900
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID OutEdgeVertexID0, out VertexID OutEdgeVertexID1);// 0x7be7ad8 0x78ceaa19e0
	VertexID GetEdgeVertex(const EdgeID EdgeID, const int EdgeVertexNumber);// 0x7be9360 0x78ceaa1ac0
	EdgeID GetEdgeThatConnectsVertices(const VertexID VertexID0, const VertexID VertexID1);// 0x7be77a0 0x78ceaa1ba0
	void GetEdgeLoopElements(const EdgeID EdgeID, out EdgeID[] EdgeLoopIDs);// 0x7be78a8 0x78ceaa1c80
	int GetEdgeCount();// 0x7be9524 0x78cea8e780
	void GetEdgeConnectedPolygons(const EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x7be79c0 0x78cea8e860
	int GetEdgeConnectedPolygonCount(const EdgeID EdgeID);// 0x7be92a4 0x78cea8e940
	PolygonID GetEdgeConnectedPolygon(const EdgeID EdgeID, const int ConnectedPolygonNumber);// 0x7be91a0 0x78cea8ea20
	void GeneratePolygonTangentsAndNormals(out const PolygonID[] PolygonIDs);// 0x7be2dc0 0x78cea8eb00
	void FlipPolygons(out const PolygonID[] PolygonIDs);// 0x7be36a4 0x78cea8ebe0
	int FindPolygonPerimeterVertexNumberForVertex(const PolygonID PolygonID, const VertexID VertexID);// 0x7be7020 0x78cea8ecc0
	int FindPolygonPerimeterEdgeNumberForVertices(const PolygonID PolygonID, const VertexID EdgeVertexID0, const VertexID EdgeVertexID1);// 0x7be6ed4 0x78cea8eda0
	void FindPolygonLoop(const EdgeID EdgeID, out EdgeID[] OutEdgeLoopEdgeIDs, out EdgeID[] OutFlippedEdgeIDs, out EdgeID[] OutReversedEdgeIDPathToTake, out PolygonID[] OutPolygonIDsToSplit);// 0x7be6698 0x78cea8ee80
	void ExtrudePolygons(out const PolygonID[] Polygons, const float ExtrudeDistance, const bool bKeepNeighborsTogether, out PolygonID[] OutNewExtrudedFrontPolygons);// 0x7be4360 0x78cea8ef60
	void ExtendVertices(out const VertexID[] VertexIDs, const bool bOnlyExtendClosestEdge, const Vector ReferencePosition, out VertexID[] OutNewExtendedVertexIDs);// 0x7be4030 0x78cea8f040
	void ExtendEdges(out const EdgeID[] EdgeIDs, const bool bWeldNeighbors, out EdgeID[] OutNewExtendedEdgeIDs);// 0x7be41f4 0x78cea8f120
	void EndModification(const bool bFromUndo);// 0x7be9d0c 0x78cea8f200
	void DeleteVertexInstances(out const VertexInstanceID[] VertexInstanceIDsToDelete, const bool bDeleteOrphanedVertices);// 0x7be56c0 0x78cea8f2e0
	void DeleteVertexAndConnectedEdgesAndPolygons(const VertexID VertexID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x7be588c 0x78cea8f3c0
	void DeletePolygons(out const PolygonID[] PolygonIDsToDelete, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x7be4cc4 0x78cea8f4a0
	void DeletePolygonGroups(out const PolygonGroupID[] PolygonGroupIDs);// 0x7be3378 0x78cea8f580
	void DeleteOrphanVertices(out const VertexID[] VertexIDsToDelete);// 0x7be57cc 0x78cea8f660
	void DeleteEdges(out const EdgeID[] EdgeIDsToDelete, const bool bDeleteOrphanedVertices);// 0x7be55b4 0x78cea8f740
	void DeleteEdgeAndConnectedPolygons(const EdgeID EdgeID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x7be5a74 0x78cea8f820
	void CreateVertices(out const VertexToCreate[] VerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x7be5358 0x78cea8f900
	void CreateVertexInstances(out const VertexInstanceToCreate[] VertexInstancesToCreate, out VertexInstanceID[] OutNewVertexInstanceIDs);// 0x7be5200 0x78cea8f9e0
	void CreatePolygons(out const PolygonToCreate[] PolygonsToCreate, out PolygonID[] OutNewPolygonIDs, out EdgeID[] OutNewEdgeIDs);// 0x7be4eb8 0x78cea8fac0
	void CreatePolygonGroups(out const PolygonGroupToCreate[] PolygonGroupsToCreate, out PolygonGroupID[] OutNewPolygonGroupIDs);// 0x7be3438 0x78cea8fba0
	void CreateMissingPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutNewEdgeIDs);// 0x7be609c 0x78cea8fc80
	void CreateEmptyVertexRange(const int NumVerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x7be54a8 0x78cea8fd60
	void CreateEdges(out const EdgeToCreate[] EdgesToCreate, out EdgeID[] OutNewEdgeIDs);// 0x7be50a8 0x78cea8fe40
	void ComputePolygonsSharedEdges(out const PolygonID[] PolygonIDs, out EdgeID[] OutSharedEdgeIDs);// 0x7be68cc 0x78cea8ff20
	Plane ComputePolygonPlane(const PolygonID PolygonID);// 0x7be6c7c 0x78cea8caa0
	Vector ComputePolygonNormal(const PolygonID PolygonID);// 0x7be6bbc 0x78cea8cb80
	Vector ComputePolygonCenter(const PolygonID PolygonID);// 0x7be6d3c 0x78cea8cc60
	BoxSphereBounds ComputeBoundingBoxAndSphere();// 0x7be6dfc 0x78cea8cd40
	Box ComputeBoundingBox();// 0x7be6e68 0x78cea8ce20
	EditableMesh* CommitInstance(PrimitiveComponent* ComponentToInstanceTo);// 0x7be9bd8 0x78cea8cf00
	void Commit();// 0x7be9c88 0x78cea8cfe0
	void ChangePolygonsVertexInstances(out const ChangeVertexInstancesForPolygon[] VertexInstancesForPolygons);// 0x7be47d8 0x78cea8d0c0
	void BevelPolygons(out const PolygonID[] PolygonIDs, const float BevelFixedDistance, const float BevelProgressTowardCenter, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x7be3bbc 0x78cea8d1a0
	void AssignPolygonsToPolygonGroups(out const PolygonGroupForPolygon[] PolygonGroupForPolygons, const bool bDeleteOrphanedPolygonGroups);// 0x7be326c 0x78cea8d280
	bool AnyChangesToUndo();// 0x7be86ac 0x78cea8d360

--------------------------------
Class: PolygonToSplit
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x78cef9e100
	VertexPair[] VertexPairsToSplitAt;//[Offset: 0x8, Size: 0x10] 0x78cee5cd60

--------------------------------
Class: VertexPair
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4] 0x78cef9e180
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4] 0x78cef9e200

--------------------------------
Class: AttributesForVertex
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x78cef9e300
	MeshElementAttributeList VertexAttributes;//[Offset: 0x8, Size: 0x10] 0x78cef9e380

--------------------------------
Class: MeshElementAttributeList
	MeshElementAttributeData[] Attributes;//[Offset: 0x0, Size: 0x10] 0x78cee5a880

--------------------------------
Class: MeshElementAttributeData
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x78cef9cb00
	int AttributeIndex;//[Offset: 0x8, Size: 0x4] 0x78cef9cb80
	MeshElementAttributeValue AttributeValue;//[Offset: 0x10, Size: 0x50] 0x78cef9cc00

--------------------------------
Class: MeshElementAttributeValue

--------------------------------
Class: AttributesForVertexInstance
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4] 0x78cef9e400
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10] 0x78cef9e480

--------------------------------
Class: VertexAttributesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x78cef9e600
	MeshElementAttributeList[] PerimeterVertexAttributeLists;//[Offset: 0x8, Size: 0x10] 0x78cee5ce00
	VertexAttributesForPolygonHole[] VertexAttributeListsForEachHole;//[Offset: 0x18, Size: 0x10] 0x78cee5a600

--------------------------------
Class: VertexAttributesForPolygonHole
	MeshElementAttributeList[] VertexAttributeList;//[Offset: 0x0, Size: 0x10] 0x78cee5a560

--------------------------------
Class: AttributesForEdge
	EdgeID EdgeID;//[Offset: 0x0, Size: 0x4] 0x78cef9e500
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10] 0x78cef9e580

--------------------------------
Class: VertexToMove
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x78cef9ca00
	Vector NewVertexPosition;//[Offset: 0x4, Size: 0xc] 0x78cef9ca80

--------------------------------
Class: SubdivisionLimitData
	Vector[] VertexPositions;//[Offset: 0x0, Size: 0x10] 0x78cee5c9a0
	SubdivisionLimitSection[] Sections;//[Offset: 0x10, Size: 0x10] 0x78cee5cae0
	SubdividedWireEdge[] SubdividedWireEdges;//[Offset: 0x20, Size: 0x10] 0x78cee5cb80

--------------------------------
Class: SubdivisionLimitSection
	SubdividedQuad[] SubdividedQuads;//[Offset: 0x0, Size: 0x10] 0x78cee5ca40

--------------------------------
Class: SubdividedQuad
	SubdividedQuadVertex QuadVertex0;//[Offset: 0x0, Size: 0x34] 0x78cef9f200
	SubdividedQuadVertex QuadVertex1;//[Offset: 0x34, Size: 0x34] 0x78cef9f280
	SubdividedQuadVertex QuadVertex2;//[Offset: 0x68, Size: 0x34] 0x78cef9f300
	SubdividedQuadVertex QuadVertex3;//[Offset: 0x9c, Size: 0x34] 0x78cef9f700

--------------------------------
Class: SubdividedQuadVertex
	int VertexPositionIndex;//[Offset: 0x0, Size: 0x4] 0x78cef9f380
	Vector2D TextureCoordinate0;//[Offset: 0x4, Size: 0x8] 0x78cef9f400
	Vector2D TextureCoordinate1;//[Offset: 0xc, Size: 0x8] 0x78cef9f480
	Color VertexColor;//[Offset: 0x14, Size: 0x4] 0x78cef9f500
	Vector VertexNormal;//[Offset: 0x18, Size: 0xc] 0x78cef9f580
	Vector VertexTangent;//[Offset: 0x24, Size: 0xc] 0x78cef9f600
	float VertexBinormalSign;//[Offset: 0x30, Size: 0x4] 0x78cef9f680

--------------------------------
Class: SubdividedWireEdge
	int EdgeVertex0PositionIndex;//[Offset: 0x0, Size: 0x4] 0x78cef9d780
	int EdgeVertex1PositionIndex;//[Offset: 0x4, Size: 0x4] 0x78cef9d800

--------------------------------
Class: VertexToCreate
	MeshElementAttributeList VertexAttributes;//[Offset: 0x0, Size: 0x10] 0x78cef9d900
	VertexID OriginalVertexID;//[Offset: 0x10, Size: 0x4] 0x78cef9d980

--------------------------------
Class: VertexInstanceToCreate
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x78cef9da00
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10] 0x78cef9da80
	VertexInstanceID OriginalVertexInstanceID;//[Offset: 0x18, Size: 0x4] 0x78cef9db00

--------------------------------
Class: PolygonToCreate
	PolygonGroupID PolygonGroupID;//[Offset: 0x0, Size: 0x4] 0x78cef9dd80
	VertexAndAttributes[] PerimeterVertices;//[Offset: 0x8, Size: 0x10] 0x78cee5cc20
	PolygonID OriginalPolygonID;//[Offset: 0x18, Size: 0x4] 0x78cef9e000
	enum PolygonEdgeHardness;//[Offset: 0x1c, Size: 0x1] 0x78cee5ccc0

--------------------------------
Class: VertexAndAttributes
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4] 0x78cef9de00
	VertexID VertexID;//[Offset: 0x4, Size: 0x4] 0x78cef9de80
	MeshElementAttributeList PolygonVertexAttributes;//[Offset: 0x8, Size: 0x10] 0x78cef9df00

--------------------------------
Class: PolygonGroupToCreate
	MeshElementAttributeList PolygonGroupAttributes;//[Offset: 0x0, Size: 0x10] 0x78cef9cd80
	PolygonGroupID OriginalPolygonGroupID;//[Offset: 0x10, Size: 0x4] 0x78cef9ce00

--------------------------------
Class: EdgeToCreate
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4] 0x78cef9db80
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4] 0x78cef9dc00
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10] 0x78cef9dc80
	EdgeID OriginalEdgeID;//[Offset: 0x18, Size: 0x4] 0x78cef9dd00

--------------------------------
Class: ChangeVertexInstancesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x78cef9c700
	VertexIndexAndInstanceID[] PerimeterVertexIndicesAndInstanceIDs;//[Offset: 0x8, Size: 0x10] 0x78cee5a6a0
	VertexInstancesForPolygonHole[] VertexIndicesAndInstanceIDsForEachHole;//[Offset: 0x18, Size: 0x10] 0x78cee5a7e0

--------------------------------
Class: VertexIndexAndInstanceID
	int ContourIndex;//[Offset: 0x0, Size: 0x4] 0x78cef9c800
	VertexInstanceID VertexInstanceID;//[Offset: 0x4, Size: 0x4] 0x78cef9c880

--------------------------------
Class: VertexInstancesForPolygonHole
	VertexIndexAndInstanceID[] VertexIndicesAndInstanceIDs;//[Offset: 0x0, Size: 0x10] 0x78cee5a740

--------------------------------
Class: PolygonGroupForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x78cef9ce80
	PolygonGroupID PolygonGroupID;//[Offset: 0x4, Size: 0x4] 0x78cef9cf00

--------------------------------
Class: EditableMeshFactory.Object
	static EditableMesh* MakeEditableMesh(PrimitiveComponent* PrimitiveComponent, const int LODIndex);// 0x7bef588 0x78ceaa4140

--------------------------------
Class: EditableStaticMeshAdapter.EditableMeshAdapter.Object
	StaticMesh* StaticMesh;//[Offset: 0x28, Size: 0x8] 0x78ceab1180
	StaticMesh* OriginalStaticMesh;//[Offset: 0x30, Size: 0x8] 0x78ceab1200
	int StaticMeshLODIndex;//[Offset: 0x38, Size: 0x4] 0x78ceab1280

--------------------------------
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCollectionParams Params;//[Offset: 0xe0, Size: 0x30] 0x78ceab1100

--------------------------------
Class: MovieSceneGeometryCollectionParams
	SoftObjectPath GeometryCollectionCache;//[Offset: 0x8, Size: 0x18] 0x78cef9ed00
	FrameNumber StartFrameOffset;//[Offset: 0x20, Size: 0x4] 0x78cef9ed80
	FrameNumber EndFrameOffset;//[Offset: 0x24, Size: 0x4] 0x78cef9ee00
	float PlayRate;//[Offset: 0x28, Size: 0x4] 0x78cef9ee80

--------------------------------
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10] 0x78cf1ef7e0

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	static void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0x7c0f298 0x78ceaa7240
	static void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x7c0f944 0x78ceaa7320
	static void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x7c0f4f8 0x78ceaa3a40
	static void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x7c106f0 0x78ceaa3b20
	static void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0x7c0ff00 0x78ceaa3c00
	static void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x7c10154 0x78ceaa3ce0
	static void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0x7c0fc54 0x78ceaa3dc0
	static void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0x7c0f7c0 0x78ceaa3ea0
	static void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x7c102e8 0x78ceaa3f80
	static void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0x7c104c0 0x78ceaa4060

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1] 0x78ceab5f00
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1] 0x78ceab5f80
	BodySetup* ProcMeshBodySetup;//[Offset: 0x478, Size: 0x8] 0x78ceab6000
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x480, Size: 0x10] 0x78ceac1780
	KConvexElem[] CollisionConvexElems;//[Offset: 0x490, Size: 0x10] 0x78ceac1820
	BoxSphereBounds LocalBounds;//[Offset: 0x4a0, Size: 0x1c] 0x78ceab6180
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x4c0, Size: 0x10] 0x78ceac18c0
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x7c11a10 0x78ceaa68a0
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x7c11db8 0x78ceaa6980
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x7c1185c 0x78ceaa6a60
	bool IsMeshSectionVisible(int SectionIndex);// 0x7c117a8 0x78ceaa6b40
	int GetNumSections();// 0x7c11774 0x78ceaa6c20
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x7c12060 0x78ceaa6d00
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x7c124bc 0x78ceaa6de0
	void ClearMeshSection(int SectionIndex);// 0x7c11968 0x78ceaa6ec0
	void ClearCollisionConvexMeshes();// 0x7c11660 0x78ceaa6fa0
	void ClearAllMeshSections();// 0x7c11954 0x78ceaa7080
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x7c11674 0x78ceaa7160

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc] 0x78cef9fd80
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cef9fe00

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10] 0x78cee5c7c0
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10] 0x78cee5c860
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c] 0x78cef9ea00
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78cef9ea80
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78cef9eb00

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x78cef9fc80
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x78cef9fd00
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10] 0x78cef9fe80
	Color Color;//[Offset: 0x28, Size: 0x4] 0x78cef9ff00
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8] 0x78cef9ff80
	Vector2D UV1;//[Offset: 0x34, Size: 0x8] 0x78cef9e780
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8] 0x78cef9e800
	Vector2D UV3;//[Offset: 0x44, Size: 0x8] 0x78cef9e880

--------------------------------
Class: MotoSynthPreset.Object
	MotoSynthRuntimeSettings Settings;//[Offset: 0x28, Size: 0x68] 0x78ceab5e80

--------------------------------
Class: MotoSynthRuntimeSettings
	bool bSynthToneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefb0a80
	float SynthToneVolume;//[Offset: 0x4, Size: 0x4] 0x78cefb0b00
	float SynthToneFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x78cefb0b80
	int SynthOctaveShift;//[Offset: 0xc, Size: 0x4] 0x78cefb0c00
	bool bGranularEngineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cefb0c80
	float GranularEngineVolume;//[Offset: 0x14, Size: 0x4] 0x78cefb0d00
	float GranularEnginePitchScale;//[Offset: 0x18, Size: 0x4] 0x78cefb0d80
	int NumSamplesToCrossfadeBetweenGrains;//[Offset: 0x1c, Size: 0x4] 0x78cefb0e00
	int NumGrainTableEntriesPerGrain;//[Offset: 0x20, Size: 0x4] 0x78cefb0e80
	int GrainTableRandomOffsetForConstantRPMs;//[Offset: 0x24, Size: 0x4] 0x78cefb0f00
	int GrainCrossfadeSamplesForConstantRPMs;//[Offset: 0x28, Size: 0x4] 0x78cefb0f80
	MotoSynthSource* AccelerationSource;//[Offset: 0x30, Size: 0x8] 0x78cefb1000
	MotoSynthSource* DecelerationSource;//[Offset: 0x38, Size: 0x8] 0x78cefb1080
	bool bStereoWidenerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cef9f800
	float StereoDelayMsec;//[Offset: 0x44, Size: 0x4] 0x78cef9f880
	float StereoFeedback;//[Offset: 0x48, Size: 0x4] 0x78cef9f900
	float StereoWidenerWetlevel;//[Offset: 0x4c, Size: 0x4] 0x78cef9f980
	float StereoWidenerDryLevel;//[Offset: 0x50, Size: 0x4] 0x78cef9fa00
	float StereoWidenerDelayRatio;//[Offset: 0x54, Size: 0x4] 0x78cef9fa80
	bool bStereoWidenerFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cef9fb00
	float StereoWidenerFilterFrequency;//[Offset: 0x5c, Size: 0x4] 0x78cef9fb80
	float StereoWidenerFilterQ;//[Offset: 0x60, Size: 0x4] 0x78cef9fc00

--------------------------------
Class: MotoSynthSource.Object
	bool bConvertTo8Bit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ceab5b00
	float DownSampleFactor;//[Offset: 0x2c, Size: 0x4] 0x78ceab5b80
	RuntimeFloatCurve RPMCurve;//[Offset: 0x30, Size: 0x88] 0x78ceab5c00
	float[] SourceData;//[Offset: 0xb8, Size: 0x10] 0x78ceac15a0
	int16[] SourceDataPCM;//[Offset: 0xc8, Size: 0x10] 0x78ceac1640
	int SourceSampleRate;//[Offset: 0xd8, Size: 0x4] 0x78ceab5d80
	GrainTableEntry[] GrainTable;//[Offset: 0xe0, Size: 0x10] 0x78ceac16e0

--------------------------------
Class: GrainTableEntry
	int SampleIndex;//[Offset: 0x0, Size: 0x4] 0x78cefb0980
	float RPM;//[Offset: 0x4, Size: 0x4] 0x78cefb0a00

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x78ceab6e00
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x78ceab6e80
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x78ceab6f00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1] 0x78ceab6f80
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1] 0x78ceab7000
	SoundAttenuation* AttenuationSettings;//[Offset: 0x1f8, Size: 0x8] 0x78ceab7080
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x200, Size: 0x3a0] 0x78ceab7100
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5a0, Size: 0x8] 0x78ceab7180
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5a8, Size: 0x50] 0x78ceac3c60
	SoundClass* SoundClass;//[Offset: 0x5f8, Size: 0x8] 0x78ceab7280
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x600, Size: 0x8] 0x78ceab7300
	SoundSubmixBase* SoundSubmix;//[Offset: 0x608, Size: 0x8] 0x78ceab7380
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x610, Size: 0x10] 0x78ceac3d00
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x620, Size: 0x10] 0x78ceac3da0
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x630, Size: 0x10] 0x78ceac1500
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x640, Size: 0x1] 0x78ceab5480
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x640, Size: 0x1] 0x78ceab5500
	int EnvelopeFollowerAttackTime;//[Offset: 0x644, Size: 0x4] 0x78ceab5580
	int EnvelopeFollowerReleaseTime;//[Offset: 0x648, Size: 0x4] 0x78ceab5600
	delegate OnAudioEnvelopeValue;//[Offset: 0x650, Size: 0x10] 0x78ceab5680
	SynthSound* Synth;//[Offset: 0x680, Size: 0x8] 0x78ceab5700
	AudioComponent* AudioComponent;//[Offset: 0x688, Size: 0x8] 0x78ceab5780
	void Stop();// 0xa28b55c 0x78ceaa6280
	void Start();// 0xa28b570 0x78ceaa6360
	void SetVolumeMultiplier(float VolumeMultiplier);// 0xa28b47c 0x78ceaa6440
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0xa28b388 0x78ceaa6520
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xa28b228 0x78ceaa6600
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xa28b2d8 0x78ceaa66e0
	bool IsPlaying();// 0xa28b524 0x78ceaa67c0

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x3c0, Size: 0x8] 0x78ce89d800

--------------------------------
Class: SynthComponentMoto.SynthComponent.SceneComponent.ActorComponent.Object
	MotoSynthPreset* MotoSynthPreset;//[Offset: 0x6c0, Size: 0x8] 0x78ceab6a00
	float RPM;//[Offset: 0x6c8, Size: 0x4] 0x78ceab6a80
	void SetSettings(out const MotoSynthRuntimeSettings InSettings);// 0x7c1a59c 0x78ceaa5f00
	void SetRPM(float InRPM, float InTimeSec);// 0x7c1a6a8 0x78ceaa5fe0
	bool IsEnabled();// 0x7c1a460 0x78ceaa60c0
	void GetRPMRange(out float OutMinRPM, out float OutMaxRPM);// 0x7c1a498 0x78ceaa61a0

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ceab6980

--------------------------------
Class: MovieSceneMediaPlayerPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8] 0x78ceab6880
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78ceab6900

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x78, Size: 0x8] 0x78ceab6700
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x80, Size: 0x14] 0x78ceab6780
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x78ceac3bc0

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x78cf036600
	FName PropertyPath;//[Offset: 0x8, Size: 0x8] 0x78cf036680
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf036700

--------------------------------
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8] 0x78ceab6380
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78ceab6400
	FrameNumber StartFrameOffset;//[Offset: 0xec, Size: 0x4] 0x78ceab6480
	MediaTexture* MediaTexture;//[Offset: 0xf0, Size: 0x8] 0x78ceab6500
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0xf8, Size: 0x8] 0x78ceab6580
	bool bUseExternalMediaPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x78ceab6600
	MediaPlayer* ExternalMediaPlayer;//[Offset: 0x108, Size: 0x8] 0x78ceab6680

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0xd8, Size: 0x1] 0x78ce8e2f00
	byte AddressY;//[Offset: 0xd9, Size: 0x1] 0x78ce8e2f80
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x78ce8e3000
	LinearColor ClearColor;//[Offset: 0xdc, Size: 0x10] 0x78ce8e3080
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1] 0x78ce8e3100
	byte NumMips;//[Offset: 0xed, Size: 0x1] 0x78ce8e3180
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1] 0x78ce8e1100
	byte OutputFormat;//[Offset: 0xef, Size: 0x1] 0x78ce8e1180
	float CurrentAspectRatio;//[Offset: 0xf0, Size: 0x4] 0x78ce8e1200
	byte CurrentOrientation;//[Offset: 0xf4, Size: 0x1] 0x78ce8e1280
	MediaPlayer* MediaPlayer;//[Offset: 0xf8, Size: 0x8] 0x78ce8e1300
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xa405e9c 0x78ce8d8d60
	int GetWidth();// 0xa405f44 0x78ce8d8e40
	MediaPlayer* GetMediaPlayer();// 0xa405f78 0x78ce8d8f20
	int GetHeight();// 0xa405fac 0x78ce8d9000
	float GetAspectRatio();// 0xa405fe0 0x78ce8d5720

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10] 0x78ce8e0a80
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10] 0x78ce8e0b00
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10] 0x78ce8e0b80
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10] 0x78ce8e0c00
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10] 0x78ce8e0c80
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10] 0x78ce8e0d00
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10] 0x78ce8e0d80
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10] 0x78ce8e0e00
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8] 0x78ce8e0e80
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8] 0x78ce8e0f00
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8] 0x78ce8e0f80
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78ce8e1000
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78ce8e1080
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x78ce8bf800
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x78ce8bf880
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8] 0x78ce8bf900
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4] 0x78ce8bf980
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8] 0x78ce8bfa00
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4] 0x78ce8bfa80
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4] 0x78ce8bfb00
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc] 0x78ce8bfb80
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10] 0x78ce8bfc00
	bool SupportsSeeking();// 0xa3fe6e4 0x78ce8d6b40
	bool SupportsScrubbing();// 0xa3fe71c 0x78ce8d6c20
	bool SupportsRate(float Rate, bool Unthinned);// 0xa3fe754 0x78ce8d6d00
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0xa3fe900 0x78ce8d6de0
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0xa3fea10 0x78ce8d6ec0
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0xa3feb60 0x78ce8d6fa0
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0xa3feca8 0x78ce8d7080
	void SetTimeDelay(Timespan TimeDelay);// 0xa3fe85c 0x78ce8d7160
	bool SetRate(float Rate);// 0xa3feea4 0x78ce8d7240
	bool SetNativeVolume(float Volume);// 0xa3fedf0 0x78ce8d7320
	void SetMediaOptions(const MediaSource* Options);// 0xa3fef58 0x78ce8d3a40
	bool SetLooping(bool Looping);// 0xa3ff000 0x78ce8d3b20
	void SetDesiredPlayerName(FName PlayerName);// 0xa3ff0bc 0x78ce8d3c00
	void SetBlockOnTime(out const Timespan Time);// 0xa3ff164 0x78ce8d3ce0
	bool SelectTrack(enum TrackType, int TrackIndex);// 0xa3ff214 0x78ce8d3dc0
	bool Seek(out const Timespan Time);// 0xa3ff314 0x78ce8d3ea0
	bool Rewind();// 0xa3ff3d0 0x78ce8d3f80
	bool Reopen();// 0xa3ff408 0x78ce8d4060
	bool Previous();// 0xa3ff440 0x78ce8d4140
	void PlayAndSeek();// 0xa3ff478 0x78ce8d4220
	bool Play();// 0xa3ff48c 0x78ce8d4300
	bool Pause();// 0xa3ff4c4 0x78ce8d43e0
	bool OpenUrl(FString URL);// 0xa3ff4fc 0x78ce8d44c0
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0xa3ff7bc 0x78ce8d45a0
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0xa3ff5bc 0x78ce8d4680
	bool OpenSource(MediaSource* MediaSource);// 0xa3ff8d8 0x78ce8d4760
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int index);// 0xa3ff98c 0x78ce8d4840
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0xa3ffa8c 0x78ce8d4920
	bool OpenFile(FString FilePath);// 0xa3ffb44 0x78ce8d4a00
	bool Next();// 0xa3ffc04 0x78ce8d4ae0
	bool IsReady();// 0xa3ffc3c 0x78ce8d4bc0
	bool IsPreparing();// 0xa3ffcac 0x78ce8d4ca0
	bool IsPlaying();// 0xa3ffce4 0x78ce8d4d80
	bool IsPaused();// 0xa3ffd1c 0x78ce8d4e60
	bool IsLooping();// 0xa3ffd54 0x78ce8d4f40
	bool IsConnecting();// 0xa3ffd8c 0x78ce8d5020
	bool IsClosed();// 0xa3ffc74 0x78ce8d5100
	bool IsBuffering();// 0xa3ffdc4 0x78ce8d51e0
	bool HasError();// 0xa3ffdfc 0x78ce8d52c0
	Rotator GetViewRotation();// 0xa3ffe68 0x78ce8d53a0
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0xa3ffea0 0x78ce8d5480
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0xa3fffe4 0x78ce8d5560
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0xa4000dc 0x78ce8d5640
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0xa4001d4 0x78ce8d1d60
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0xa4002d0 0x78ce8d1e40
	float GetVerticalFieldOfView();// 0xa4003c8 0x78ce8d1f20
	FString GetUrl();// 0xa4003fc 0x78ce8d2000
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0xa400480 0x78ce8d20e0
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0xa4005c8 0x78ce8d21c0
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0xa4006c4 0x78ce8d22a0
	MediaTimeStampInfo* GetTimeStamp();// 0xa40082c 0x78ce8d2380
	Timespan GetTimeDelay();// 0xa3ffe34 0x78ce8d2460
	Timespan GetTime();// 0xa400860 0x78ce8d2540
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0xa400894 0x78ce8d2620
	int GetSelectedTrack(enum TrackType);// 0xa4009a0 0x78ce8d2700
	float GetRate();// 0xa400a50 0x78ce8d27e0
	int GetPlaylistIndex();// 0xa400a84 0x78ce8d28c0
	MediaPlaylist* GetPlaylist();// 0xa400aa0 0x78ce8d29a0
	FName GetPlayerName();// 0xa400abc 0x78ce8d2a80
	int GetNumTracks(enum TrackType);// 0xa400bec 0x78ce8d2b60
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0xa400af0 0x78ce8d2c40
	FText GetMediaName();// 0xa400c9c 0x78ce8d2d20
	float GetHorizontalFieldOfView();// 0xa400d74 0x78ce8d2e00
	Timespan GetDuration();// 0xa400da8 0x78ce8d2ee0
	FName GetDesiredPlayerName();// 0xa400ddc 0x78ce8d2fc0
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0xa400e10 0x78ce8d30a0
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0xa400f54 0x78ce8d3180
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0xa40104c 0x78ce8d3260
	void Close();// 0xa401144 0x78ce8d3340
	bool CanPlayUrl(FString URL);// 0xa401158 0x78ce8d3420
	bool CanPlaySource(MediaSource* MediaSource);// 0xa401218 0x78ce8d3500
	bool CanPause();// 0xa4012cc 0x78ce8d35e0

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c] 0x78cf05c080
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8] 0x78cf05c100
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1] 0x78cefdf2e0
	enum Loop;//[Offset: 0x29, Size: 0x1] 0x78cefdf380

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4] 0x78cf05bd00
	int Caption;//[Offset: 0x4, Size: 0x4] 0x78cf05bd80
	int MetaData;//[Offset: 0x8, Size: 0x4] 0x78cf05be00
	int Script;//[Offset: 0xc, Size: 0x4] 0x78cf05be80
	int Subtitle;//[Offset: 0x10, Size: 0x4] 0x78cf05bf00
	int text;//[Offset: 0x14, Size: 0x4] 0x78cf05bf80
	int Video;//[Offset: 0x18, Size: 0x4] 0x78cf05c000

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] items;//[Offset: 0x28, Size: 0x10] 0x78ce8c1b40
	bool Replace(int index, MediaSource* Replacement);// 0xa402fa4 0x78ce8d60c0
	bool RemoveAt(int index);// 0xa4030a4 0x78ce8d61a0
	bool Remove(MediaSource* MediaSource);// 0xa403158 0x78ce8d6280
	int Num();// 0xa40320c 0x78ce8d6360
	void Insert(MediaSource* MediaSource, int index);// 0xa403228 0x78ce8d6440
	MediaSource* GetRandom(out int OutIndex);// 0xa40331c 0x78ce8d6520
	MediaSource* GetPrevious(out int InOutIndex);// 0xa4033d8 0x78ce8d6600
	MediaSource* GetNext(out int InOutIndex);// 0xa403494 0x78ce8d66e0
	MediaSource* Get(int index);// 0xa403550 0x78ce8d67c0
	bool AddUrl(FString URL);// 0xa403600 0x78ce8d68a0
	bool AddFile(FString FilePath);// 0xa4036c0 0x78ce8d6980
	bool Add(MediaSource* MediaSource);// 0xa403780 0x78ce8d6a60

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8] 0x78ce8bc200
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8] 0x78ce8bc280

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x6c0, Size: 0x4] 0x78ce8c1820
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1] 0x78ce8e1680
	float RateAdjustmentFactor;//[Offset: 0x6c8, Size: 0x4] 0x78ce8e1700
	FloatRange RateAdjustmentRange;//[Offset: 0x6cc, Size: 0x10] 0x78ce8e1780
	MediaPlayer* MediaPlayer;//[Offset: 0x6e0, Size: 0x8] 0x78ce8e1800
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0xa4046c8 0x78ce8d5800
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xa4048c0 0x78ce8d58e0
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0xa4043c8 0x78ce8d59c0
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0xa404810 0x78ce8d5aa0
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0xa4044b8 0x78ce8d5b80
	MediaSoundComponentSpectralData[] GetSpectralData();// 0xa404618 0x78ce8d5c60
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0xa404568 0x78ce8d5d40
	MediaPlayer* GetMediaPlayer();// 0xa404968 0x78ce8d5e20
	float GetEnvelopeValue();// 0xa404394 0x78ce8d5f00
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xa40499c 0x78ce8d5fe0

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x78cf05bb00
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x78cf05bb80

--------------------------------
Class: MovieSceneMediaTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] MediaSections;//[Offset: 0x80, Size: 0x10] 0x78ceac3b20

--------------------------------
Class: TcpMessagingSettings.Object
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ceab8180
	FString ListenEndpoint;//[Offset: 0x30, Size: 0x10] 0x78ceab8200
	FString[] ConnectToEndpoints;//[Offset: 0x40, Size: 0x10] 0x78ceac3a80
	int ConnectionRetryDelay;//[Offset: 0x50, Size: 0x4] 0x78ceab8300
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78ceab8380

--------------------------------
Class: UdpMessagingSettings.Object
	bool EnabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ceab7b00
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78ceab7b80
	bool bAutoRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78ceab7c00
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x78ceab7c80
	FString UnicastEndpoint;//[Offset: 0x30, Size: 0x10] 0x78ceab7d00
	FString MulticastEndpoint;//[Offset: 0x40, Size: 0x10] 0x78ceab7d80
	enum MessageFormat;//[Offset: 0x50, Size: 0x1] 0x78ceac38a0
	byte MulticastTimeToLive;//[Offset: 0x51, Size: 0x1] 0x78ceab7e80
	FString[] StaticEndpoints;//[Offset: 0x58, Size: 0x10] 0x78ceac3940
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78ceab7f80
	FString TunnelUnicastEndpoint;//[Offset: 0x70, Size: 0x10] 0x78ceab8000
	FString TunnelMulticastEndpoint;//[Offset: 0x80, Size: 0x10] 0x78ceab8080
	FString[] RemoteTunnelEndpoints;//[Offset: 0x90, Size: 0x10] 0x78ceac39e0

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78ceab7580
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x68, Size: 0x20] 0x78ceab7600

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10] 0x78cee5c4a0
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10] 0x78cee5c680

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10] 0x78cee5c5e0

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78cee5c540
	Guid ActorId;//[Offset: 0x4, Size: 0x10] 0x78cefb2080
	FString PathToComponent;//[Offset: 0x18, Size: 0x10] 0x78cefb2100

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb0, Size: 0x14] 0x78ceab7400
	ActorSequence* Sequence;//[Offset: 0xc8, Size: 0x8] 0x78ceab7480
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd0, Size: 0x8] 0x78ceab7500

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf03cc00
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4] 0x78cf03cd00
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78cf03cd80
	float StartTime;//[Offset: 0xc, Size: 0x4] 0x78cf03ce00
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cf03ce80
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78cf03cf00
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78cf03cf80
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78cf03d000
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78cf03d080
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78cf03d100
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78cf03d180
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x78cf03d200

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4] 0x78cf03cc80

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x410, Size: 0x10] 0x78ceab9800
	delegate OnPlayReverse;//[Offset: 0x420, Size: 0x10] 0x78ceab9880
	delegate OnStop;//[Offset: 0x430, Size: 0x10] 0x78ceab9900
	delegate OnPause;//[Offset: 0x440, Size: 0x10] 0x78ceab9980
	delegate OnFinished;//[Offset: 0x450, Size: 0x10] 0x78ceab9a00
	byte Status;//[Offset: 0x460, Size: 0x1] 0x78ceab9a80
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x461, Size: 0x1] 0x78ceab9b00
	MovieSceneSequence* Sequence;//[Offset: 0x468, Size: 0x8] 0x78ceab9b80
	FrameNumber StartTime;//[Offset: 0x470, Size: 0x4] 0x78ceab9c00
	int DurationFrames;//[Offset: 0x474, Size: 0x4] 0x78ceab9c80
	float DurationSubFrames;//[Offset: 0x478, Size: 0x4] 0x78ceab9d00
	int CurrentNumLoops;//[Offset: 0x47c, Size: 0x4] 0x78ceab9d80
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x480, Size: 0x14] 0x78ceab9e00
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x498, Size: 0xe8] 0x78ceab9e80
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x5e8, Size: 0x10] 0x78ceab9f00
	interface class None* PlaybackClient;//[Offset: 0x5f8, Size: 0x10] 0x78ceab9f80
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x608, Size: 0x8] 0x78ceaba000
	void StopAtCurrentTime();// 0x9e9e8c0 0x78ceaa7400
	void Stop();// 0x9e9e8d4 0x78ceaa74e0
	void SetTimeRange(float StartTime, float Duration);// 0x9e9e4d0 0x78ceaa75c0
	void SetPlayRate(float PlayRate);// 0x9e9d8d4 0x78ceaa76a0
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x9e9e288 0x78ceaa7780
	void SetFrameRate(FrameRate FrameRate);// 0x9e9e744 0x78ceaa7860
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x9e9e5c0 0x78ceaa7940
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x9e9d81c 0x78ceaa7a20
	void ScrubToSeconds(float TimeInSeconds);// 0x9e9de90 0x78ceaa7b00
	bool ScrubToMarkedFrame(FString InLabel);// 0x9e9db7c 0x78ceaa7be0
	void ScrubToFrame(FrameTime NewPosition);// 0x9e9e0f4 0x78ceaa7cc0
	void Scrub();// 0x9e9e8e8 0x78ceaa7da0
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x9e9d434 0x78ceaa7e80
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x9e9d4e4 0x78ceaa7f60
	void PlayToSeconds(float TimeInSeconds);// 0x9e9df5c 0x78ceaa8040
	bool PlayToMarkedFrame(FString InLabel);// 0x9e9dca0 0x78ceaa8120
	void PlayToFrame(FrameTime NewPosition);// 0x9e9e1c0 0x78ceaa8200
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0x9e9e3ac 0x78ceaa82e0
	void PlayReverse();// 0x9e9e9cc 0x78ceaa83c0
	void PlayLooping(int NumLoops);// 0x9e9e910 0x78ceaa84a0
	void Play();// 0x9e9e9e0 0x78ceaa8580
	void Pause();// 0x9e9e8fc 0x78ceaa8660
	void JumpToSeconds(float TimeInSeconds);// 0x9e9ddc4 0x78ceaa8740
	bool JumpToMarkedFrame(FString InLabel);// 0x9e9da58 0x78ceaa8820
	void JumpToFrame(FrameTime NewPosition);// 0x9e9e028 0x78ceaa8900
	bool IsReversed();// 0x9e9d9b0 0x78ceaa89e0
	bool IsPlaying();// 0x9e9da20 0x78ceaa8ac0
	bool IsPaused();// 0x9e9d9e8 0x78ceaa8ba0
	void GoToEndAndStop();// 0x9e9e8ac 0x78ceaa8c80
	QualifiedFrameTime GetStartTime();// 0x9e9e724 0x78ceaa8d60
	float GetPlayRate();// 0x9e9d97c 0x78ceaa8e40
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x9e9d5e0 0x78ceaa8f20
	FrameRate GetFrameRate();// 0x9e9e7f4 0x78ceaa9000
	int GetFrameDuration();// 0x9e9e810 0x78ceaa5720
	QualifiedFrameTime GetEndTime();// 0x9e9e6fc 0x78ceaa5800
	QualifiedFrameTime GetDuration();// 0x9e9e844 0x78ceaa58e0
	bool GetDisableCameraCuts();// 0x9e9d7fc 0x78ceaa59c0
	QualifiedFrameTime GetCurrentTime();// 0x9e9e878 0x78ceaa5aa0
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x9e9d6dc 0x78ceaa5b80
	void ChangePlaybackDirection();// 0x9e9e9b8 0x78ceaa5c60

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8] 0x78cf03d280
	float Time;//[Offset: 0x8, Size: 0x4] 0x78cf03d300
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10] 0x78cf03d380
	enum PositionType;//[Offset: 0x20, Size: 0x1] 0x78cefd86c0
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1] 0x78cefd8760

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8] 0x78cf03ca80
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1] 0x78cf03cb00
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4] 0x78cf03cb80

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	Actor*[] SequenceActors;//[Offset: 0x28, Size: 0x10] 0x78ce727c20
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x78ce78d800

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78ceab9600
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28] 0x78ceac3440
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28] 0x78ceab9680
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50] 0x78cf158ec0

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4] 0x78ceab9580

--------------------------------
Class: SequenceCameraShake.CameraShakeBase.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x98, Size: 0x8] 0x78ceabb080
	float PlayRate;//[Offset: 0xa0, Size: 0x4] 0x78ceabb100
	float Scale;//[Offset: 0xa4, Size: 0x4] 0x78ceabb180
	float BlendInTime;//[Offset: 0xa8, Size: 0x4] 0x78ceabb200
	float BlendOutTime;//[Offset: 0xac, Size: 0x4] 0x78ceabb280
	float RandomSegmentDuration;//[Offset: 0xb0, Size: 0x4] 0x78ceabb300
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x78ceabb380
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0xb8, Size: 0x8] 0x78ceabb400
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0xc0, Size: 0x8] 0x78ceabb480

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x480, Size: 0x8] 0x78ceabaf00
	MovieSceneSequence* Sequence;//[Offset: 0x488, Size: 0x8] 0x78ceabaf80
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x490, Size: 0xe8] 0x78ceabb000

--------------------------------
Class: TemplateSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x228, Size: 0x14] 0x78ceabaa80
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x240, Size: 0x8] 0x78ceabab00
	SoftObjectPath TemplateSequence;//[Offset: 0x248, Size: 0x18] 0x78ceabab80
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x260, Size: 0xc] 0x78ceabac00
	void SetSequence(TemplateSequence* InSequence);// 0x7c649cc 0x78ceaaa960
	void SetBinding(Actor* Actor);// 0x7c648f0 0x78ceaaaa40
	TemplateSequence* LoadSequence();// 0x7c64a74 0x78ceaaab20
	TemplateSequencePlayer* GetSequencePlayer();// 0x7c64998 0x78ceaaac00
	TemplateSequence* GetSequence();// 0x7c64aa8 0x78ceaaace0

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object
	static TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0x7c6520c 0x78ceaaa880

--------------------------------
Class: TemplateSequenceBindingOverrideData
	Object* Object;//[Offset: 0x0, Size: 0x8] 0x78cefb1e80
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cefb1f00

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xdc, Size: 0x24] 0x78ceabc400
	float StartOffset;//[Offset: 0x100, Size: 0x4] 0x78ceabc480
	float TimeScale;//[Offset: 0x104, Size: 0x4] 0x78ceabc500
	float PrerollTime;//[Offset: 0x108, Size: 0x4] 0x78ceabc580
	MovieSceneSequence* SubSequence;//[Offset: 0x110, Size: 0x8] 0x78ceabc600
	Actor* ActorToRecord;//[Offset: 0x118, Size: 0x1c] 0x78ceaba580
	FString TargetSequenceName;//[Offset: 0x138, Size: 0x10] 0x78ceaba600
	DirectoryPath TargetPathToRecordTo;//[Offset: 0x148, Size: 0x10] 0x78ceaba680
	void SetSequence(MovieSceneSequence* Sequence);// 0x9ea6498 0x78ceaaa6c0
	MovieSceneSequence* GetSequence();// 0x9ea6540 0x78ceaaa7a0

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4] 0x78cf03c480
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cf03c500
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4] 0x78cf03c580
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x78cf03c600
	float TimeScale;//[Offset: 0x10, Size: 0x4] 0x78cf03a580
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4] 0x78cf03a600
	float StartOffset;//[Offset: 0x18, Size: 0x4] 0x78cf03a680
	float PrerollTime;//[Offset: 0x1c, Size: 0x4] 0x78cf03a700
	float PostrollTime;//[Offset: 0x20, Size: 0x4] 0x78cf03a780

--------------------------------
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8] 0x78ceabc380

--------------------------------
Class: TemplateSequenceSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78ceac33a0

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementId, out bool bFoundID, out float progress);// 0x7cdc078 0x78ceaaa500
	static void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementId, out bool bFoundID, out FText title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0x7cdbc90 0x78ceaaa5e0

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabb880
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabb900
	static AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0x7cdc83c 0x78ceaaa340
	static AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0x7cdc74c 0x78ceaaa420

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabd580
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabd600
	static AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float progress, int UserTag);// 0x7cdce60 0x78ceaaa260

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabd300
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabd380
	static ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0x7cdd528 0x78ceaaa180

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabcf80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabd000
	static CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x7cddabc 0x78ceaaa0a0

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabcd00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabcd80
	static DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x7cde100 0x78ceaa9fc0

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabc880
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabc900
	static EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0x7cde694 0x78ceaa9ee0

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabe600
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabe680
	static EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0x7cdedd8 0x78ceaa9e00

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabde80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabdf00
	static FString GetServerName(out const BlueprintSessionResult Result);// 0x7cdfa40 0x78ceaa99a0
	static int GetPingInMs(out const BlueprintSessionResult Result);// 0x7cdfca0 0x78ceaa9a80
	static int GetMaxPlayers(out const BlueprintSessionResult Result);// 0x7cdf620 0x78ceaa9b60
	static int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0x7cdf830 0x78ceaa9c40
	static FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x7cdfeb0 0x78ceaa9d20

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ceabd980
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78ceabda00
	static FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0x7ce066c 0x78ceaa98c0

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78ceabd700
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78ceabd780
	static InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0x7ce0f38 0x78ceaa97e0

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x78cef81400
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cef81480

--------------------------------
Class: InAppPurchaseCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78ceabf380
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78ceabf400
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController* PlayerController);// 0x7ce1a88 0x78ceaa9540
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController* PlayerController);// 0x7ce19e0 0x78ceaa9620
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest2 ProductRequest);// 0x7ce1b30 0x78ceaa9700

--------------------------------
Class: InAppPurchaseProductRequest2
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x78cefb1580
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cefb1600

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78ceabf100
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78ceabf180
	static InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x7ce21a8 0x78ceaa9460

--------------------------------
Class: InAppPurchaseQueryCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78ceabee80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78ceabef00
	static InAppPurchaseQueryCallbackProxy2* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x7ce29f4 0x78ceaa9380

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78ceabec00
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78ceabec80
	static InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0x7ce2ff8 0x78ceaa92a0

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78ceabe980
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78ceabea00
	static InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0x7ce3744 0x78ceaa91c0

--------------------------------
Class: IpConnection.NetConnection.Player.Object
	float SocketErrorDisconnectDelay;//[Offset: 0x1b40, Size: 0x4] 0x78ceabf980

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x746, Size: 0x1] 0x78cead2000
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x746, Size: 0x1] 0x78cead2080
	uint32 MaxPortCountToTry;//[Offset: 0x748, Size: 0x4] 0x78cead2100
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x75c, Size: 0x4] 0x78cead0080
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x760, Size: 0x4] 0x78cead0100
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x764, Size: 0x4] 0x78cead0180
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x768, Size: 0x4] 0x78cead0200
	double MaxSecondsInReceive;//[Offset: 0x770, Size: 0x8] 0x78cead0280
	int NbPacketsBetweenReceiveTimeTest;//[Offset: 0x778, Size: 0x4] 0x78cead0300
	float ResolutionConnectionTimeout;//[Offset: 0x77c, Size: 0x4] 0x78cead0380

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78cead1d00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78cead1d80
	static JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x7ce77f4 0x78ceaa90e0

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	static bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0x7ce7fbc 0x78ceaac9c0

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78cead1880
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78cead1900
	static LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0x7ce85dc 0x78ceaac8e0

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78cead1600
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x78cead1680
	static LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0x7ce8b8c 0x78ceaac800

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78cead1380
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78cead1400
	static LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0x7ce9150 0x78ceaac720

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x228, Size: 0x4] 0x78cead1200
	float BeaconConnectionTimeout;//[Offset: 0x22c, Size: 0x4] 0x78cead1280
	NetDriver* NetDriver;//[Offset: 0x230, Size: 0x8] 0x78cead1300

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x250, Size: 0x8] 0x78cead3180
	NetConnection* BeaconConnection;//[Offset: 0x258, Size: 0x8] 0x78cead1100
	enum ConnectionState;//[Offset: 0x260, Size: 0x1] 0x78ceac2a40
	void ClientOnConnected();// 0x7ce9bc0 0x78ceaac640

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x220, Size: 0x10] 0x78cead2f80
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x230, Size: 0x8] 0x78ceac51a0
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x238, Size: 0x10] 0x78ceac5240

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x250, Size: 0x4] 0x78cead3080
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x258, Size: 0x10] 0x78ceac29a0

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	FName VoiceSubsystemNameOverride;//[Offset: 0x28, Size: 0x8] 0x78cead2f00

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cead2e00
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10] 0x78ceac5100

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0x10] 0x78cefb3180
	FString token;//[Offset: 0x10, Size: 0x10] 0x78cefb1100
	FString Type;//[Offset: 0x20, Size: 0x10] 0x78cefb1180
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10] 0x78cee5c360

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1] 0x78cead2d00
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1] 0x78cead2d80

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x2e0, Size: 0x10] 0x78cead2580
	PartyReservation PendingReservation;//[Offset: 0x2f0, Size: 0x50] 0x78cead2600
	enum RequestType;//[Offset: 0x340, Size: 0x1] 0x78ceac5060
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x78cead2700
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1] 0x78cead2780
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x7cebc84 0x78ceaabf40
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x7cebe64 0x78ceaac020
	void ServerRemoveMemberFromReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x7cebaa4 0x78ceaac100
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0x7ceb92c 0x78ceaac1e0
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x7cec060 0x78ceaac2c0
	void ClientSendReservationFull();// 0x7cec044 0x78ceaac3a0
	void ClientReservationResponse(byte ReservationResponse);// 0x7cec1c0 0x78ceaac480
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x7cec110 0x78ceaac560

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4] 0x78cefb2f80
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x28] 0x78cefb3000
	PlayerReservation[] PartyMembers;//[Offset: 0x30, Size: 0x10] 0x78cee5c220
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x40, Size: 0x10] 0x78cee5c2c0

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0x28] 0x78cefb1300
	FString ValidationStr;//[Offset: 0x28, Size: 0x10] 0x78cefb1380
	FString platform;//[Offset: 0x38, Size: 0x10] 0x78cefb1400
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cefb1480
	float ElapsedTime;//[Offset: 0x4c, Size: 0x4] 0x78cefb1500

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x248, Size: 0x8] 0x78cead2380
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78cead2400
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 0x4] 0x78cead2480
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 0x4] 0x78cead2500

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x78cead3f00
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x78cead3f80
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x78cead4000
	int NumTeams;//[Offset: 0x38, Size: 0x4] 0x78cead4080
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4] 0x78cead4100
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8] 0x78cead4180
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4] 0x78cead4200
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4] 0x78cead2180
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cead2200
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78cead2280
	PartyReservation[] Reservations;//[Offset: 0x58, Size: 0x10] 0x78ceac4fc0

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78cead3b00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78cead3b80
	static QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0x7cedbd8 0x78ceaabe60

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78cead3880
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78cead3900
	static ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0x7cee2ac 0x78ceaabd80

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x2e0, Size: 0x10] 0x78cead3300
	SpectatorReservation PendingReservation;//[Offset: 0x2f0, Size: 0x78] 0x78cead3380
	enum RequestType;//[Offset: 0x368, Size: 0x1] 0x78ceac4f20
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1] 0x78cead3480
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1] 0x78cead3500
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0x7ceeae4 0x78ceaab840
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0x7cee96c 0x78ceaab920
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x7ceed6c 0x78ceaaba00
	void ClientSendReservationFull();// 0x7ceed50 0x78ceaabae0
	void ClientReservationResponse(byte ReservationResponse);// 0x7ceeecc 0x78ceaabbc0
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x7ceee1c 0x78ceaabca0

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x28] 0x78cefb2e80
	PlayerReservation Spectator;//[Offset: 0x28, Size: 0x50] 0x78cefb2f00

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object
	SpectatorBeaconState* State;//[Offset: 0x248, Size: 0x8] 0x78cead5200
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78cead5280
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 0x4] 0x78cead3200
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 0x4] 0x78cead3280

--------------------------------
Class: SpectatorBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x78cead4f80
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x78cead5000
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x78cead5080
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cead5100
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 0x10] 0x78ceac4e80

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0x7cf0520 0x78ceaab680
	void ClientPing();// 0x7cf057c 0x78ceaab760

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0x7cf3d64 0x78ceaab300
	static void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0x7cf3b18 0x78ceaab3e0
	static void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0x7cf3e90 0x78ceaab4c0
	static void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0x7cf4084 0x78ceaab5a0

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	bool IsIdling();// 0x7cf47f0 0x78ceaab220

--------------------------------
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RemoveActorFromLayer(Actor* InActor, out const ActorLayer Layer);// 0x7cf5a80 0x78ceaaaf80
	static Actor*[] GetActors(Object* WorldContextObject, out const ActorLayer ActorLayer);// 0x7cf5c60 0x78ceaab060
	static void AddActorToLayer(Actor* InActor, out const ActorLayer Layer);// 0x7cf5b70 0x78ceaab140

--------------------------------
Class: ActorLayer
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cefb2e00

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78cead5600
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x78cead5680
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20] 0x78cead5700
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x7cfd948 0x78ceaae5c0
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x7cfd770 0x78ceaae6a0
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x7cfdd44 0x78ceaaadc0
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x7cfdb20 0x78ceaaaea0

--------------------------------
Class: AppleImageUtilsImageConversionResult
	FString Error;//[Offset: 0x0, Size: 0x10] 0x78cf501000
	byte[] ImageData;//[Offset: 0x10, Size: 0x10] 0x78cf2c95c0

--------------------------------
Class: AppleImageInterface.Interface.Object

--------------------------------
Class: ArchVisCharacter.Character.Pawn.Actor.Object
	FString LookUpAxisName;//[Offset: 0x4b8, Size: 0x10] 0x78cead7300
	FString LookUpAtRateAxisName;//[Offset: 0x4c8, Size: 0x10] 0x78cead7380
	FString TurnAxisName;//[Offset: 0x4d8, Size: 0x10] 0x78cead5300
	FString TurnAtRateAxisName;//[Offset: 0x4e8, Size: 0x10] 0x78cead5380
	FString MoveForwardAxisName;//[Offset: 0x4f8, Size: 0x10] 0x78cead5400
	FString MoveRightAxisName;//[Offset: 0x508, Size: 0x10] 0x78cead5480
	float MouseSensitivityScale_Pitch;//[Offset: 0x518, Size: 0x4] 0x78cead5500
	float MouseSensitivityScale_Yaw;//[Offset: 0x51c, Size: 0x4] 0x78cead5580

--------------------------------
Class: ArchVisCharMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationalAcceleration;//[Offset: 0xb00, Size: 0xc] 0x78ceade480
	Rotator RotationalDeceleration;//[Offset: 0xb0c, Size: 0xc] 0x78ceade500
	Rotator MaxRotationalVelocity;//[Offset: 0xb18, Size: 0xc] 0x78ceade580
	float MinPitch;//[Offset: 0xb24, Size: 0x4] 0x78ceade600
	float MaxPitch;//[Offset: 0xb28, Size: 0x4] 0x78ceade680
	float WalkingFriction;//[Offset: 0xb2c, Size: 0x4] 0x78ceade700
	float WalkingSpeed;//[Offset: 0xb30, Size: 0x4] 0x78ceadc680
	float WalkingAcceleration;//[Offset: 0xb34, Size: 0x4] 0x78ceadc700

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0x7d04674 0x78ceaae860
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0x7d04770 0x78ceaae940
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0x7d048e0 0x78ceaaea20
	FName[] GetCollections();// 0x7d04bf8 0x78ceaaeb00
	AssetData[] GetAssetsInCollection(const FName Name);// 0x7d049dc 0x78ceaaebe0
	bool CollectionExists(const FName Name);// 0x7d04ca8 0x78ceaaecc0

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8] 0x78ea08a180
	FName PackageName;//[Offset: 0x8, Size: 0x8] 0x78ea08a200
	FName PackagePath;//[Offset: 0x10, Size: 0x8] 0x78ea08a280
	FName AssetName;//[Offset: 0x18, Size: 0x8] 0x78ea08a300
	FName AssetClass;//[Offset: 0x20, Size: 0x8] 0x78ea08a380

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioCapture.AudioGenerator.Object
	void StopCapturingAudio();// 0x7d06888 0x78ceae1ac0
	void StartCapturingAudio();// 0x7d0689c 0x78ceae1ba0
	bool IsCapturingAudio();// 0x7d06850 0x78ceae1c80
	bool GetAudioCaptureDeviceInfo(out AudioCaptureDeviceInfo outInfo);// 0x7d068b0 0x78ceaae780

--------------------------------
Class: AudioCaptureDeviceInfo
	FName DeviceName;//[Offset: 0x0, Size: 0x8] 0x78cefb2c80
	int NumInputChannels;//[Offset: 0x8, Size: 0x4] 0x78cefb2d00
	int SampleRate;//[Offset: 0xc, Size: 0x4] 0x78cefb2d80

--------------------------------
Class: AudioCaptureFunctionLibrary.BlueprintFunctionLibrary.Object
	static AudioCapture* CreateAudioCapture();// 0x7d06ef4 0x78ceae19e0

--------------------------------
Class: AudioCaptureComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int JitterLatencyFrames;//[Offset: 0x6c0, Size: 0x4] 0x78ceaddc80

--------------------------------
Class: CableActor.Actor.Object
	CableComponent* CableComponent;//[Offset: 0x220, Size: 0x8] 0x78ceaddc00

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1] 0x78ceadef00
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 0x1] 0x78ceadef80
	ComponentReference AttachEndTo;//[Offset: 0x468, Size: 0x28] 0x78ceadf000
	FName AttachEndToSocketName;//[Offset: 0x490, Size: 0x8] 0x78ceadf080
	Vector EndLocation;//[Offset: 0x498, Size: 0xc] 0x78ceadf100
	float CableLength;//[Offset: 0x4a4, Size: 0x4] 0x78ceadf180
	int NumSegments;//[Offset: 0x4a8, Size: 0x4] 0x78ceadf200
	float SubstepTime;//[Offset: 0x4ac, Size: 0x4] 0x78ceadf280
	int SolverIterations;//[Offset: 0x4b0, Size: 0x4] 0x78ceadf300
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1] 0x78ceadf380
	bool bUseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 0x1] 0x78ceadf400
	bool bSkipCableUpdateWhenNotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b6, Size: 0x1] 0x78ceadf480
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b7, Size: 0x1] 0x78ceadf500
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1] 0x78ceadf580
	float CollisionFriction;//[Offset: 0x4bc, Size: 0x4] 0x78ceadf600
	Vector CableForce;//[Offset: 0x4c0, Size: 0xc] 0x78ceadf680
	float CableGravityScale;//[Offset: 0x4cc, Size: 0x4] 0x78ceadf700
	float CableWidth;//[Offset: 0x4d0, Size: 0x4] 0x78ceadf780
	int NumSides;//[Offset: 0x4d4, Size: 0x4] 0x78ceadd700
	float TileMaterial;//[Offset: 0x4d8, Size: 0x4] 0x78ceadd780
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x7d0c434 0x78ceae1580
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0x7d0c2f8 0x78ceae1660
	void GetCableParticleLocations(out Vector[] locations);// 0x7d0c1d0 0x78ceae1740
	SceneComponent* GetAttachedComponent();// 0x7d0c290 0x78ceae1820
	Actor* GetAttachedActor();// 0x7d0c2c4 0x78ceae1900

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8] 0x78cf0a6100
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8] 0x78cf0a6180
	FString PathToComponent;//[Offset: 0x10, Size: 0x10] 0x78cf0a6200

--------------------------------
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool SetCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x7d23308 0x78ceae12e0
	void ClearCustomMeshTriangles();// 0x7d23234 0x78ceae13c0
	void AddCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x7d23248 0x78ceae14a0

--------------------------------
Class: CustomMeshTriangle
	Vector Vertex0;//[Offset: 0x0, Size: 0xc] 0x78cefb2b00
	Vector Vertex1;//[Offset: 0xc, Size: 0xc] 0x78cefb2b80
	Vector Vertex2;//[Offset: 0x18, Size: 0xc] 0x78cefb2c00

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object
	static enum ShowCellularDataConfirmation();// 0x7d273ec 0x78ceae05c0
	static enum RequestRemoval(FString Name);// 0x7d27420 0x78ceae06a0
	static enum RequestInfo(const FString[] AssetPacks);// 0x7d27bd8 0x78ceae0780
	static enum RequestDownload(const FString[] AssetPacks);// 0x7d27a24 0x78ceae0860
	static void ReleaseDownloadState(const int State);// 0x7d276cc 0x78ceae0940
	static void ReleaseAssetPackLocation(const int Location);// 0x7d27194 0x78ceae0a20
	static int GetTotalBytesToDownload(const int State);// 0x7d274d4 0x78ceae0b00
	static enum GetStorageMethod(const int Location);// 0x7d270ec 0x78ceae0be0
	static enum GetShowCellularDataConfirmationStatus(out enum Status);// 0x7d27338 0x78ceae0cc0
	static enum GetDownloadStatus(const int State);// 0x7d27624 0x78ceae0da0
	static enum GetDownloadState(FString Name, out int State);// 0x7d27764 0x78ceae0e80
	static int GetBytesDownloaded(const int State);// 0x7d2757c 0x78ceae0f60
	static FString GetAssetsPath(const int Location);// 0x7d26ff8 0x78ceae1040
	static enum GetAssetPackLocation(FString Name, out int Location);// 0x7d2722c 0x78ceae1120
	static enum CancelDownload(const FString[] AssetPacks);// 0x7d27870 0x78ceae1200

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0x7d2cf0c 0x78ceae3960
	float GetInstalledContentSize();// 0x7d2d018 0x78ceae0080
	float GetDiskFreeSpace();// 0x7d2d04c 0x78ceae0160

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x7d2d5c4 0x78ceae3340
	float GetTotalDownloadedSize();// 0x7d2d804 0x78ceae3420
	float GetRequiredDiskSpace();// 0x7d2d838 0x78ceae3500
	float GetInstallProgress();// 0x7d2d6cc 0x78ceae35e0
	FText GetDownloadStatusText();// 0x7d2d700 0x78ceae36c0
	float GetDownloadSpeed();// 0x7d2d7d0 0x78ceae37a0
	float GetDownloadSize();// 0x7d2d86c 0x78ceae3880

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	static void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x7d2e094 0x78ceae2ee0
	static bool HasActiveWiFiConnection();// 0x7d2e05c 0x78ceae2fc0
	static FString[] GetSupportedPlatformNames();// 0x7d2de94 0x78ceae30a0
	static MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x7d2e288 0x78ceae3180
	static FString GetActiveDeviceProfileName();// 0x7d2dfac 0x78ceae3260

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1] 0x78ceb03d00
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1] 0x78ceb03d80
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1] 0x78ceb03e00
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1] 0x78ceb03e80
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 0x1] 0x78ceb03f00
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1] 0x78ceb03f80
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x140, Size: 0x1] 0x78ceb04000
	float Mass;//[Offset: 0x144, Size: 0x4] 0x78ceb04080
	WheelSetup[] WheelSetups;//[Offset: 0x148, Size: 0x10] 0x78ceac6460
	float DragCoefficient;//[Offset: 0x158, Size: 0x4] 0x78ceb04180
	float ChassisWidth;//[Offset: 0x15c, Size: 0x4] 0x78ceb04200
	float ChassisHeight;//[Offset: 0x160, Size: 0x4] 0x78ceb02180
	float DragArea;//[Offset: 0x164, Size: 0x4] 0x78ceb02200
	float EstimatedMaxEngineSpeed;//[Offset: 0x168, Size: 0x4] 0x78ceb02280
	float MaxEngineRPM;//[Offset: 0x16c, Size: 0x4] 0x78ceb02300
	float DebugDragMagnitude;//[Offset: 0x170, Size: 0x4] 0x78ceb02380
	Vector InertiaTensorScale;//[Offset: 0x174, Size: 0xc] 0x78ceb02400
	float MinNormalizedTireLoad;//[Offset: 0x180, Size: 0x4] 0x78ceb02480
	float MinNormalizedTireLoadFiltered;//[Offset: 0x184, Size: 0x4] 0x78ceb02500
	float MaxNormalizedTireLoad;//[Offset: 0x188, Size: 0x4] 0x78ceb02580
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x18c, Size: 0x4] 0x78ceb02600
	float ThresholdLongitudinalSpeed;//[Offset: 0x190, Size: 0x4] 0x78ceb02680
	int LowForwardSpeedSubStepCount;//[Offset: 0x194, Size: 0x4] 0x78ceb02700
	int HighForwardSpeedSubStepCount;//[Offset: 0x198, Size: 0x4] 0x78ceb02780
	VehicleWheel*[] Wheels;//[Offset: 0x1a0, Size: 0x10] 0x78ceac6500
	float RVOAvoidanceRadius;//[Offset: 0x1c8, Size: 0x4] 0x78ceb02880
	float RVOAvoidanceHeight;//[Offset: 0x1cc, Size: 0x4] 0x78ceb02900
	float AvoidanceConsiderationRadius;//[Offset: 0x1d0, Size: 0x4] 0x78ceb02980
	float RVOSteeringStep;//[Offset: 0x1d4, Size: 0x4] 0x78ceb02a00
	float RVOThrottleStep;//[Offset: 0x1d8, Size: 0x4] 0x78ceb02a80
	int AvoidanceUID;//[Offset: 0x1dc, Size: 0x4] 0x78ceb02b00
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1e0, Size: 0x4] 0x78ceb02b80
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1e4, Size: 0x4] 0x78ceb02c00
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1e8, Size: 0x4] 0x78ceb02c80
	float AvoidanceWeight;//[Offset: 0x1ec, Size: 0x4] 0x78ceb02d00
	Vector PendingLaunchVelocity;//[Offset: 0x1f0, Size: 0xc] 0x78ceb02d80
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1fc, Size: 0x14] 0x78ceb02e00
	float RawSteeringInput;//[Offset: 0x214, Size: 0x4] 0x78ceb02e80
	float RawThrottleInput;//[Offset: 0x218, Size: 0x4] 0x78ceb02f00
	float RawBrakeInput;//[Offset: 0x21c, Size: 0x4] 0x78ceb02f80
	float SteeringInput;//[Offset: 0x220, Size: 0x4] 0x78ceb03000
	float ThrottleInput;//[Offset: 0x224, Size: 0x4] 0x78ceb03080
	float BrakeInput;//[Offset: 0x228, Size: 0x4] 0x78ceb03100
	float HandbrakeInput;//[Offset: 0x22c, Size: 0x4] 0x78ceb03180
	float IdleBrakeInput;//[Offset: 0x230, Size: 0x4] 0x78ceb01100
	float StopThreshold;//[Offset: 0x234, Size: 0x4] 0x78ceb01180
	float WrongDirectionThreshold;//[Offset: 0x238, Size: 0x4] 0x78ceb01200
	VehicleInputRate ThrottleInputRate;//[Offset: 0x23c, Size: 0x8] 0x78ceb01280
	VehicleInputRate BrakeInputRate;//[Offset: 0x244, Size: 0x8] 0x78ceb01300
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x24c, Size: 0x8] 0x78ceb01380
	VehicleInputRate SteeringInputRate;//[Offset: 0x254, Size: 0x8] 0x78ceb01400
	Controller* OverrideController;//[Offset: 0x280, Size: 0x8] 0x78ceb01480
	void SetUseAutoGears(bool bUseAuto);// 0x7d42844 0x78ceae5560
	void SetThrottleInput(float Throttle);// 0x7d42d4c 0x78ceae5640
	void SetTargetGear(int GearNum, bool bImmediate);// 0x7d428f4 0x78ceae1d60
	void SetSteeringInput(float Steering);// 0x7d42bfc 0x78ceae1e40
	void SetHandbrakeInput(bool bNewHandbrake);// 0x7d42b4c 0x78ceae1f20
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x7d42300 0x78ceae2000
	void SetGroupsToIgnore(int GroupFlags);// 0x7d423b0 0x78ceae20e0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x7d42458 0x78ceae21c0
	void SetGroupsToAvoid(int GroupFlags);// 0x7d42508 0x78ceae22a0
	void SetGearUp(bool bNewGearUp);// 0x7d42a9c 0x78ceae2380
	void SetGearDown(bool bNewGearDown);// 0x7d429ec 0x78ceae2460
	void SetBrakeInput(float Brake);// 0x7d42ca4 0x78ceae2540
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x7d425b0 0x78ceae2620
	void SetAvoidanceGroup(int GroupFlags);// 0x7d42660 0x78ceae2700
	void SetAvoidanceEnabled(bool bEnable);// 0x7d42250 0x78ceae27e0
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x7d42038 0x78ceae28c0
	bool GetUseAutoGears();// 0x7d42708 0x78ceae29a0
	int GetTargetGear();// 0x7d42740 0x78ceae2a80
	float GetForwardSpeed();// 0x7d42810 0x78ceae2b60
	float GetEngineRotationSpeed();// 0x7d427dc 0x78ceae2c40
	float GetEngineMaxRotationSpeed();// 0x7d427a8 0x78ceae2d20
	int GetCurrentGear();// 0x7d42774 0x78ceae2e00

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8] 0x78cee5bfa0
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x78cefb3480
	Vector AdditionalOffset;//[Offset: 0x10, Size: 0xc] 0x78cefb3500
	bool bDisableSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cefb3580

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 0x8] 0x78ceb04600
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78ceb04680
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78ceb04700
	Vector Offset;//[Offset: 0x34, Size: 0xc] 0x78ceb04780
	float ShapeRadius;//[Offset: 0x40, Size: 0x4] 0x78ceb04800
	float ShapeWidth;//[Offset: 0x44, Size: 0x4] 0x78ceb04880
	float Mass;//[Offset: 0x48, Size: 0x4] 0x78ceb04900
	float DampingRate;//[Offset: 0x4c, Size: 0x4] 0x78ceb04980
	float SteerAngle;//[Offset: 0x50, Size: 0x4] 0x78ceb04a00
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78ceb04a80
	TireType* TireType;//[Offset: 0x58, Size: 0x8] 0x78ceb04b00
	TireConfig* TireConfig;//[Offset: 0x60, Size: 0x8] 0x78ceb04b80
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 0x4] 0x78ceb04c00
	float LatStiffValue;//[Offset: 0x6c, Size: 0x4] 0x78ceb04c80
	float LongStiffValue;//[Offset: 0x70, Size: 0x4] 0x78ceb04d00
	float SuspensionForceOffset;//[Offset: 0x74, Size: 0x4] 0x78ceb04d80
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 0x4] 0x78ceb04e00
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 0x4] 0x78ceb04e80
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 0x4] 0x78ceb04f00
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 0x4] 0x78ceb04f80
	byte SweepType;//[Offset: 0x88, Size: 0x1] 0x78ceb05000
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 0x4] 0x78ceb05080
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 0x4] 0x78ceb05100
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 0x8] 0x78ceb05180
	int WheelIndex;//[Offset: 0xa0, Size: 0x4] 0x78ceb05200
	float DebugLongSlip;//[Offset: 0xa4, Size: 0x4] 0x78ceb05280
	float DebugLatSlip;//[Offset: 0xa8, Size: 0x4] 0x78ceb03200
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 0x4] 0x78ceb03280
	float DebugWheelTorque;//[Offset: 0xb4, Size: 0x4] 0x78ceb03300
	float DebugLongForce;//[Offset: 0xb8, Size: 0x4] 0x78ceb03380
	float DebugLatForce;//[Offset: 0xbc, Size: 0x4] 0x78ceb03400
	Vector Location;//[Offset: 0xc0, Size: 0xc] 0x78ceb03480
	Vector OldLocation;//[Offset: 0xcc, Size: 0xc] 0x78ceb03500
	Vector Velocity;//[Offset: 0xd8, Size: 0xc] 0x78ceb03580
	bool IsInAir();// 0x7d41274 0x78ceae4e60
	float GetSuspensionOffset();// 0x7d412ac 0x78ceae4f40
	float GetSteerAngle();// 0x7d41314 0x78ceae5020
	float GetRotationAngle();// 0x7d412e0 0x78ceae5100

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x78ceb03900
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 0x10] 0x78ceac63c0

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8] 0x78cefb3980
	float FrictionScale;//[Offset: 0x8, Size: 0x4] 0x78cefb3a00

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 0x4] 0x78cefb3600
	float ThrottleInput;//[Offset: 0x4, Size: 0x4] 0x78cefb3680
	float BrakeInput;//[Offset: 0x8, Size: 0x4] 0x78cefb3700
	float HandbrakeInput;//[Offset: 0xc, Size: 0x4] 0x78cefb3780
	int CurrentGear;//[Offset: 0x10, Size: 0x4] 0x78cefb3800

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4] 0x78cefb3880
	float FallRate;//[Offset: 0x4, Size: 0x4] 0x78cefb3900

--------------------------------
Class: SimpleWheeledVehicleMovementComponent.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	void SetSteerAngle(float SteerAngle, int WheelIndex);// 0x7d3fa58 0x78ceae52c0
	void SetDriveTorque(float DriveTorque, int WheelIndex);// 0x7d3fb4c 0x78ceae53a0
	void SetBrakeTorque(float BrakeTorque, int WheelIndex);// 0x7d3fc40 0x78ceae5480

--------------------------------
Class: VehicleAnimInstance.AnimInstance.Object
	WheeledVehicleMovementComponent* WheeledVehicleMovementComponent;//[Offset: 0xa40, Size: 0x8] 0x78ceb03800
	WheeledVehicle* GetVehicle();// 0x7d40ac0 0x78ceae51e0

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 0x8] 0x78ceb04500
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x288, Size: 0x8] 0x78ceb04580

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10] 0x78ce9dbe60
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10] 0x78ce9dbf00
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8] 0x78ce9dbfa0
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78ce3d4100
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x78ce3d4180

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x78cf0fef00
	float Radius;//[Offset: 0xc, Size: 0x4] 0x78cf0fef80
	float Height;//[Offset: 0x10, Size: 0x4] 0x78cf0ff000

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x78cf0ff080
	Vector Extent;//[Offset: 0xc, Size: 0xc] 0x78cf0ff100

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4] 0x78ce3d4200
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4] 0x78ce3d2180
	Color DrawColor;//[Offset: 0x34, Size: 0x4] 0x78ce3d2200
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4] 0x78ce3d2280
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78ce3d2300
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78ce3d2380
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78ce3d2400
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78ce3d2480
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78ce3d2500
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78ce3d2580
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x78ce3d2600
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x78ce3d2680
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x78ce3d2700
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x78ce3d2780
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x78ce3d2800
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x78ce3d2880
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x78ce3d2900
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x78ce3d2980
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x78ce3d2a00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x78ce3d2a80

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x288, Size: 0xa0] 0x78ceb04280
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x328, Size: 0x1c] 0x78ceb04300
	float AckermannAccuracy;//[Offset: 0x344, Size: 0x4] 0x78ceb04380
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x348, Size: 0x30] 0x78ceb04400
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x378, Size: 0x88] 0x78ceb04480

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 0x88] 0x78cefb4c80
	float MaxRPM;//[Offset: 0x88, Size: 0x4] 0x78cefb4d00
	float MOI;//[Offset: 0x8c, Size: 0x4] 0x78cefb4d80
	float DampingRateFullThrottle;//[Offset: 0x90, Size: 0x4] 0x78cefb4e00
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x94, Size: 0x4] 0x78cefb4e80
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x98, Size: 0x4] 0x78cefb4f00

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 0x1] 0x78cefb4800
	float FrontRearSplit;//[Offset: 0x4, Size: 0x4] 0x78cefb4880
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 0x4] 0x78cefb4900
	float RearLeftRightSplit;//[Offset: 0xc, Size: 0x4] 0x78cefb4980
	float CentreBias;//[Offset: 0x10, Size: 0x4] 0x78cefb4a00
	float FrontBias;//[Offset: 0x14, Size: 0x4] 0x78cefb4a80
	float RearBias;//[Offset: 0x18, Size: 0x4] 0x78cefb4b00

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefb5000
	float GearSwitchTime;//[Offset: 0x4, Size: 0x4] 0x78cefb5080
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 0x4] 0x78cefb5100
	float FinalRatio;//[Offset: 0xc, Size: 0x4] 0x78cefb5180
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 0x10] 0x78cee5bf00
	float ReverseGearRatio;//[Offset: 0x20, Size: 0x4] 0x78cefb3300
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 0x4] 0x78cefb3380
	float ClutchStrength;//[Offset: 0x28, Size: 0x4] 0x78cefb3400

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 0x4] 0x78cefb5200
	float DownRatio;//[Offset: 0x4, Size: 0x4] 0x78cefb5280
	float UpRatio;//[Offset: 0x8, Size: 0x4] 0x78cefb3200

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4] 0x78ceb06300

--------------------------------
Class: ModularSynthPresetBank.Object
	ModularSynthPresetBankEntry[] Presets;//[Offset: 0x28, Size: 0x10] 0x78ceac6320

--------------------------------
Class: ModularSynthPresetBankEntry
	FString PresetName;//[Offset: 0x0, Size: 0x10] 0x78cefb6980
	ModularSynthPreset Preset;//[Offset: 0x10, Size: 0xd0] 0x78cefb4780

--------------------------------
Class: ModularSynthPreset.TableRowBase
	bool bEnablePolyphony;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cefb6a00
	enum Osc1Type;//[Offset: 0x9, Size: 0x1] 0x78cee5dda0
	float Osc1Gain;//[Offset: 0xc, Size: 0x4] 0x78cefb6b00
	float Osc1Octave;//[Offset: 0x10, Size: 0x4] 0x78cefb6b80
	float Osc1Semitones;//[Offset: 0x14, Size: 0x4] 0x78cefb6c00
	float Osc1Cents;//[Offset: 0x18, Size: 0x4] 0x78cefb6c80
	float Osc1PulseWidth;//[Offset: 0x1c, Size: 0x4] 0x78cefb6d00
	enum Osc2Type;//[Offset: 0x20, Size: 0x1] 0x78cee5de40
	float Osc2Gain;//[Offset: 0x24, Size: 0x4] 0x78cefb6e00
	float Osc2Octave;//[Offset: 0x28, Size: 0x4] 0x78cefb6e80
	float Osc2Semitones;//[Offset: 0x2c, Size: 0x4] 0x78cefb6f00
	float Osc2Cents;//[Offset: 0x30, Size: 0x4] 0x78cefb6f80
	float Osc2PulseWidth;//[Offset: 0x34, Size: 0x4] 0x78cefb7000
	float Portamento;//[Offset: 0x38, Size: 0x4] 0x78cefb7080
	bool bEnableUnison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78cefb7100
	bool bEnableOscillatorSync;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78cefb7180
	float Spread;//[Offset: 0x40, Size: 0x4] 0x78cefb7200
	float Pan;//[Offset: 0x44, Size: 0x4] 0x78cefb7280
	float LFO1Frequency;//[Offset: 0x48, Size: 0x4] 0x78cefb7300
	float LFO1Gain;//[Offset: 0x4c, Size: 0x4] 0x78cefb7380
	enum LFO1Type;//[Offset: 0x50, Size: 0x1] 0x78cee5dee0
	enum LFO1Mode;//[Offset: 0x51, Size: 0x1] 0x78cee5df80
	enum LFO1PatchType;//[Offset: 0x52, Size: 0x1] 0x78cee5e020
	float LFO2Frequency;//[Offset: 0x54, Size: 0x4] 0x78cefb5480
	float LFO2Gain;//[Offset: 0x58, Size: 0x4] 0x78cefb5500
	enum LFO2Type;//[Offset: 0x5c, Size: 0x1] 0x78cee5e0c0
	enum LFO2Mode;//[Offset: 0x5d, Size: 0x1] 0x78cee5e160
	enum LFO2PatchType;//[Offset: 0x5e, Size: 0x1] 0x78cee5e200
	float GainDb;//[Offset: 0x60, Size: 0x4] 0x78cefb5700
	float AttackTime;//[Offset: 0x64, Size: 0x4] 0x78cefb5780
	float DecayTime;//[Offset: 0x68, Size: 0x4] 0x78cefb5800
	float SustainGain;//[Offset: 0x6c, Size: 0x4] 0x78cefb5880
	float ReleaseTime;//[Offset: 0x70, Size: 0x4] 0x78cefb5900
	enum ModEnvPatchType;//[Offset: 0x74, Size: 0x1] 0x78cee5e2a0
	enum ModEnvBiasPatchType;//[Offset: 0x75, Size: 0x1] 0x78cee5ba00
	bool bInvertModulationEnvelope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76, Size: 0x1] 0x78cefb5a80
	bool bInvertModulationEnvelopeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76, Size: 0x1] 0x78cefb5b00
	float ModulationEnvelopeDepth;//[Offset: 0x78, Size: 0x4] 0x78cefb5b80
	float ModulationEnvelopeAttackTime;//[Offset: 0x7c, Size: 0x4] 0x78cefb5c00
	float ModulationEnvelopeDecayTime;//[Offset: 0x80, Size: 0x4] 0x78cefb5c80
	float ModulationEnvelopeSustainGain;//[Offset: 0x84, Size: 0x4] 0x78cefb5d00
	float ModulationEnvelopeReleaseTime;//[Offset: 0x88, Size: 0x4] 0x78cefb5d80
	bool bLegato;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78cefb5e00
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78cefb5e80
	float FilterFrequency;//[Offset: 0x90, Size: 0x4] 0x78cefb5f00
	float FilterQ;//[Offset: 0x94, Size: 0x4] 0x78cefb5f80
	enum FilterType;//[Offset: 0x98, Size: 0x1] 0x78cee5baa0
	enum FilterAlgorithm;//[Offset: 0x99, Size: 0x1] 0x78cee5bb40
	bool bStereoDelayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1] 0x78cefb6100
	enum StereoDelayMode;//[Offset: 0x9b, Size: 0x1] 0x78cee5bbe0
	float StereoDelayTime;//[Offset: 0x9c, Size: 0x4] 0x78cefb6200
	float StereoDelayFeedback;//[Offset: 0xa0, Size: 0x4] 0x78cefb6280
	float StereoDelayWetlevel;//[Offset: 0xa4, Size: 0x4] 0x78cefb6300
	float StereoDelayRatio;//[Offset: 0xa8, Size: 0x4] 0x78cefb4280
	bool bChorusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78cefb4300
	float ChorusDepth;//[Offset: 0xb0, Size: 0x4] 0x78cefb4380
	float ChorusFeedback;//[Offset: 0xb4, Size: 0x4] 0x78cefb4400
	float ChorusFrequency;//[Offset: 0xb8, Size: 0x4] 0x78cefb4480
	EpicSynth1Patch[] Patches;//[Offset: 0xc0, Size: 0x10] 0x78cee5be60

--------------------------------
Class: EpicSynth1Patch
	enum PatchSource;//[Offset: 0x0, Size: 0x1] 0x78cee5bc80
	Synth1PatchCable[] PatchCables;//[Offset: 0x8, Size: 0x10] 0x78cee5bdc0

--------------------------------
Class: Synth1PatchCable
	float Depth;//[Offset: 0x0, Size: 0x4] 0x78cefb4580
	enum Destination;//[Offset: 0x4, Size: 0x1] 0x78cee5bd20

--------------------------------
Class: ModularSynthLibrary.BlueprintFunctionLibrary.Object
	static void AddModularSynthPresetToBankAsset(ModularSynthPresetBank* InBank, out const ModularSynthPreset Preset, FString PresetName);// 0x7d98590 0x78ceae4d80

--------------------------------
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int VoiceCount;//[Offset: 0x6c0, Size: 0x4] 0x78ceb07900
	void SetSynthPreset(out const ModularSynthPreset SynthPreset);// 0x7d98f5c 0x78ceae8d60
	void SetSustainGain(float SustainGain);// 0x7d9a3d0 0x78ceae8e40
	void SetStereoDelayWetlevel(float DelayWetlevel);// 0x7d99490 0x78ceae8f20
	void SetStereoDelayTime(float DelayTimeMsec);// 0x7d995e0 0x78ceae9000
	void SetStereoDelayRatio(float DelayRatio);// 0x7d993e8 0x78ceae5720
	void SetStereoDelayMode(enum StereoDelayMode);// 0x7d99688 0x78ceae5800
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);// 0x7d99730 0x78ceae58e0
	void SetStereoDelayFeedback(float DelayFeedback);// 0x7d99538 0x78ceae59c0
	void SetSpread(float Spread);// 0x7d9ad1c 0x78ceae5aa0
	void SetReleaseTime(float ReleaseTimeMsec);// 0x7d9a328 0x78ceae5b80
	void SetPortamento(float Portamento);// 0x7d9b0c0 0x78ceae5c60
	void SetPitchBend(float PitchBend);// 0x7d9b168 0x78ceae5d40
	void SetPan(float Pan);// 0x7d9adc4 0x78ceae5e20
	void SetOscType(int OscIndex, enum OscType);// 0x7d9b4ec 0x78ceae5f00
	void SetOscSync(const bool bIsSynced);// 0x7d9ae6c 0x78ceae5fe0
	void SetOscSemitones(int OscIndex, float Semitones);// 0x7d9b304 0x78ceae60c0
	void SetOscPulsewidth(int OscIndex, float Pulsewidth);// 0x7d9afcc 0x78ceae61a0
	void SetOscOctave(int OscIndex, float Octave);// 0x7d9b3f8 0x78ceae6280
	void SetOscGainMod(int OscIndex, float OscGainMod);// 0x7d9b6d4 0x78ceae6360
	void SetOscGain(int OscIndex, float OscGain);// 0x7d9b7c8 0x78ceae6440
	void SetOscFrequencyMod(int OscIndex, float OscFreqMod);// 0x7d9b5e0 0x78ceae6520
	void SetOscCents(int OscIndex, float Cents);// 0x7d9b210 0x78ceae6600
	void SetModEnvSustainGain(const float SustainGain);// 0x7d99dd8 0x78ceae66e0
	void SetModEnvReleaseTime(const float Release);// 0x7d99d30 0x78ceae67c0
	void SetModEnvPatch(const enum InPatchType);// 0x7d9a280 0x78ceae68a0
	void SetModEnvInvert(const bool bInvert);// 0x7d9a128 0x78ceae6980
	void SetModEnvDepth(const float Depth);// 0x7d99fd0 0x78ceae6a60
	void SetModEnvDecayTime(const float DecayTimeMsec);// 0x7d99e80 0x78ceae6b40
	void SetModEnvBiasPatch(const enum InPatchType);// 0x7d9a1d8 0x78ceae6c20
	void SetModEnvBiasInvert(const bool bInvert);// 0x7d9a078 0x78ceae6d00
	void SetModEnvAttackTime(const float AttackTimeMsec);// 0x7d99f28 0x78ceae6de0
	void SetLFOType(int LFOIndex, enum LFOType);// 0x7d9a858 0x78ceae6ec0
	void SetLFOPatch(int LFOIndex, enum LFOPatchType);// 0x7d9a670 0x78ceae6fa0
	void SetLFOMode(int LFOIndex, enum LFOMode);// 0x7d9a764 0x78ceae7080
	void SetLFOGainMod(int LFOIndex, float GainMod);// 0x7d9a94c 0x78ceae7160
	void SetLFOGain(int LFOIndex, float Gain);// 0x7d9aa40 0x78ceae7240
	void SetLFOFrequencyMod(int LFOIndex, float FrequencyModHz);// 0x7d9ab34 0x78ceae7320
	void SetLFOFrequency(int LFOIndex, float FrequencyHz);// 0x7d9ac28 0x78ceae3a40
	void SetGainDb(float GainDb);// 0x7d9a5c8 0x78ceae3b20
	void SetFilterType(enum FilterType);// 0x7d99888 0x78ceae3c00
	void SetFilterQMod(float FilterQ);// 0x7d99930 0x78ceae3ce0
	void SetFilterQ(float FilterQ);// 0x7d999d8 0x78ceae3dc0
	void SetFilterFrequencyMod(float FilterFrequencyHz);// 0x7d99a80 0x78ceae3ea0
	void SetFilterFrequency(float FilterFrequencyHz);// 0x7d99b28 0x78ceae3f80
	void SetFilterAlgorithm(enum FilterAlgorithm);// 0x7d997e0 0x78ceae4060
	void SetEnableUnison(bool EnableUnison);// 0x7d9af1c 0x78ceae4140
	void SetEnableRetrigger(bool RetriggerEnabled);// 0x7d99bd0 0x78ceae4220
	void SetEnablePolyphony(bool bEnablePolyphony);// 0x7d9b8bc 0x78ceae4300
	bool SetEnablePatch(const PatchId PatchId, const bool bIsEnabled);// 0x7d98cec 0x78ceae43e0
	void SetEnableLegato(bool LegatoEnabled);// 0x7d99c80 0x78ceae44c0
	void SetDecayTime(float DecayTimeMsec);// 0x7d9a478 0x78ceae45a0
	void SetChorusFrequency(float Frequency);// 0x7d99140 0x78ceae4680
	void SetChorusFeedback(float Feedback);// 0x7d991e8 0x78ceae4760
	void SetChorusEnabled(bool EnableChorus);// 0x7d99338 0x78ceae4840
	void SetChorusDepth(float Depth);// 0x7d99290 0x78ceae4920
	void SetAttackTime(float AttackTimeMsec);// 0x7d9a520 0x78ceae4a00
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x7d9bab0 0x78ceae4ae0
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);// 0x7d9b96c 0x78ceae4bc0
	PatchId CreatePatch(const enum PatchSource, out const Synth1PatchCable[] PatchCables, const bool bEnableByDefault);// 0x7d98df4 0x78ceae4ca0

--------------------------------
Class: PatchId
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefb6900

--------------------------------
Class: SourceEffectBitCrusherPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectBitCrusherSettings Settings;//[Offset: 0xc0, Size: 0x30] 0x78ceb07580
	void SetSettings(out const SourceEffectBitCrusherBaseSettings Settings);// 0x7d9f808 0x78ceae8820
	void SetSampleRateModulator(const SoundModulatorBase* Modulator);// 0x7d9f8c4 0x78ceae8900
	void SetSampleRate(float SampleRate);// 0x7d9f96c 0x78ceae89e0
	void SetModulationSettings(out const SourceEffectBitCrusherSettings ModulationSettings);// 0x7d9f738 0x78ceae8ac0
	void SetBits(float Bits);// 0x7d9fabc 0x78ceae8ba0
	void SetBitModulator(const SoundModulatorBase* Modulator);// 0x7d9fa14 0x78ceae8c80

--------------------------------
Class: SourceEffectBitCrusherBaseSettings
	float SampleRate;//[Offset: 0x0, Size: 0x4] 0x78cefb6500
	float BitDepth;//[Offset: 0x4, Size: 0x4] 0x78cefb6580

--------------------------------
Class: SourceEffectBitCrusherSettings
	float CrushedSampleRate;//[Offset: 0x0, Size: 0x4] 0x78cefb6600
	SoundModulationDestinationSettings SampleRateModulation;//[Offset: 0x8, Size: 0x10] 0x78cefb6680
	float CrushedBits;//[Offset: 0x18, Size: 0x4] 0x78cefb6700
	SoundModulationDestinationSettings BitModulation;//[Offset: 0x20, Size: 0x10] 0x78cefb6880

--------------------------------
Class: SourceEffectChorusPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectChorusSettings Settings;//[Offset: 0x108, Size: 0x78] 0x78ceb08f00
	void SetWetModulator(const SoundModulatorBase* Modulator);// 0x7da09a4 0x78ceae7be0
	void SetWet(float WetAmount);// 0x7da0a4c 0x78ceae7cc0
	void SetSpreadModulator(const SoundModulatorBase* Modulator);// 0x7da0704 0x78ceae7da0
	void SetSpread(float Spread);// 0x7da07ac 0x78ceae7e80
	void SetSettings(out const SourceEffectChorusBaseSettings Settings);// 0x7da0640 0x78ceae7f60
	void SetModulationSettings(out const SourceEffectChorusSettings ModulationSettings);// 0x7da053c 0x78ceae8040
	void SetFrequencyModulator(const SoundModulatorBase* Modulator);// 0x7da0af4 0x78ceae8120
	void SetFrequency(float Frequency);// 0x7da0b9c 0x78ceae8200
	void SetFeedbackModulator(const SoundModulatorBase* Modulator);// 0x7da0c44 0x78ceae82e0
	void SetFeedback(float Feedback);// 0x7da0cec 0x78ceae83c0
	void SetDryModulator(const SoundModulatorBase* Modulator);// 0x7da0854 0x78ceae84a0
	void SetDry(float DryAmount);// 0x7da08fc 0x78ceae8580
	void SetDepthModulator(const SoundModulatorBase* Modulator);// 0x7da0d94 0x78ceae8660
	void SetDepth(float Depth);// 0x7da0e3c 0x78ceae8740

--------------------------------
Class: SourceEffectChorusSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x78cefb8000
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78cefb8080
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78cefb8100
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x78cefb8180
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x78cefb8200
	float Spread;//[Offset: 0x14, Size: 0x4] 0x78cefb8280
	SoundModulationDestinationSettings DepthModulation;//[Offset: 0x18, Size: 0x10] 0x78cefb8300
	SoundModulationDestinationSettings FrequencyModulation;//[Offset: 0x28, Size: 0x10] 0x78cefb8380
	SoundModulationDestinationSettings FeedbackModulation;//[Offset: 0x38, Size: 0x10] 0x78cefb8400
	SoundModulationDestinationSettings WetModulation;//[Offset: 0x48, Size: 0x10] 0x78cefb6380
	SoundModulationDestinationSettings DryModulation;//[Offset: 0x58, Size: 0x10] 0x78cefb6400
	SoundModulationDestinationSettings SpreadModulation;//[Offset: 0x68, Size: 0x10] 0x78cefb6480

--------------------------------
Class: SourceEffectChorusBaseSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x78cefb7d00
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78cefb7d80
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78cefb7e00
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x78cefb7e80
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x78cefb7f00
	float Spread;//[Offset: 0x14, Size: 0x4] 0x78cefb7f80

--------------------------------
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectDynamicsProcessorSettings Settings;//[Offset: 0xb4, Size: 0x28] 0x78ceb08e00
	void SetSettings(out const SourceEffectDynamicsProcessorSettings InSettings);// 0x7da1c88 0x78ceae7b00

--------------------------------
Class: SourceEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78cee5dc60
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78cee5dd00
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x78cefb7800
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78cefb7880
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x78cefb7900
	float ThresholdDb;//[Offset: 0x10, Size: 0x4] 0x78cefb7980
	float Ratio;//[Offset: 0x14, Size: 0x4] 0x78cefb7a00
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4] 0x78cefb7a80
	float InputGainDb;//[Offset: 0x1c, Size: 0x4] 0x78cefb7b00
	float OutputGainDb;//[Offset: 0x20, Size: 0x4] 0x78cefb7b80
	bool bStereoLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x78cefb7c00
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x78cefb7c80

--------------------------------
Class: EnvelopeFollowerListener.ActorComponent.Object
	delegate OnEnvelopeFollowerUpdate;//[Offset: 0xb0, Size: 0x10] 0x78ceb08d80

--------------------------------
Class: SourceEffectEnvelopeFollowerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEnvelopeFollowerSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78ceb08b80
	void UnregisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x7da29d8 0x78ceae7860
	void SetSettings(out const SourceEffectEnvelopeFollowerSettings InSettings);// 0x7da2b28 0x78ceae7940
	void RegisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x7da2a80 0x78ceae7a20

--------------------------------
Class: SourceEffectEnvelopeFollowerSettings
	float AttackTime;//[Offset: 0x0, Size: 0x4] 0x78cefb7500
	float ReleaseTime;//[Offset: 0x4, Size: 0x4] 0x78cefb7580
	enum PeakMode;//[Offset: 0x8, Size: 0x1] 0x78cee5dbc0
	bool bIsAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78cefb7680

--------------------------------
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x78ceb08a80
	void SetSettings(out const SourceEffectEQSettings InSettings);// 0x7da34a8 0x78ceae7780

--------------------------------
Class: SourceEffectEQSettings
	SourceEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x78cee5db20

--------------------------------
Class: SourceEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x78cefb9380
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x78cefb9400
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x78cefb9480
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cefb7400

--------------------------------
Class: SourceEffectFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFilterSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x78ceb08980
	void SetSettings(out const SourceEffectFilterSettings InSettings);// 0x7da403c 0x78ceae76a0

--------------------------------
Class: SourceEffectFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1] 0x78cee5d8a0
	enum FilterType;//[Offset: 0x1, Size: 0x1] 0x78cee5d940
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4] 0x78cefb8d80
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x78cefb8e00
	SourceEffectFilterAudioBusModulationSettings[] AudioBusModulation;//[Offset: 0x10, Size: 0x10] 0x78cee5da80

--------------------------------
Class: SourceEffectFilterAudioBusModulationSettings
	AudioBus* AudioBus;//[Offset: 0x0, Size: 0x8] 0x78cefb8e80
	int EnvelopeFollowerAttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78cefb8f00
	int EnvelopeFollowerReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x78cefb8f80
	float EnvelopeGainMultiplier;//[Offset: 0x10, Size: 0x4] 0x78cefb9000
	enum FilterParam;//[Offset: 0x14, Size: 0x1] 0x78cee5d9e0
	float MinFrequencyModulation;//[Offset: 0x18, Size: 0x4] 0x78cefb9100
	float MaxFrequencyModulation;//[Offset: 0x1c, Size: 0x4] 0x78cefb9180
	float MinResonanceModulation;//[Offset: 0x20, Size: 0x4] 0x78cefb9200
	float MaxResonanceModulation;//[Offset: 0x24, Size: 0x4] 0x78cefb9280

--------------------------------
Class: SourceEffectFoldbackDistortionPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFoldbackDistortionSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78ceb08880
	void SetSettings(out const SourceEffectFoldbackDistortionSettings InSettings);// 0x7da4800 0x78ceae75c0

--------------------------------
Class: SourceEffectFoldbackDistortionSettings
	float InputGainDb;//[Offset: 0x0, Size: 0x4] 0x78cefb8b00
	float ThresholdDb;//[Offset: 0x4, Size: 0x4] 0x78cefb8b80
	float OutputGainDb;//[Offset: 0x8, Size: 0x4] 0x78cefb8c00

--------------------------------
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMidSideSpreaderSettings Settings;//[Offset: 0x94, Size: 0x8] 0x78ceb08780
	void SetSettings(out const SourceEffectMidSideSpreaderSettings InSettings);// 0x7da5090 0x78ceae74e0

--------------------------------
Class: SourceEffectMidSideSpreaderSettings
	float SpreadAmount;//[Offset: 0x0, Size: 0x4] 0x78cefb8900
	enum InputMode;//[Offset: 0x4, Size: 0x1] 0x78cee5d760
	enum OutputMode;//[Offset: 0x5, Size: 0x1] 0x78cee5d800
	bool bEqualPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x78cefb8a80

--------------------------------
Class: SourceEffectPannerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPannerSettings Settings;//[Offset: 0x94, Size: 0x8] 0x78ceb08680
	void SetSettings(out const SourceEffectPannerSettings InSettings);// 0x7da582c 0x78ceae7400

--------------------------------
Class: SourceEffectPannerSettings
	float Spread;//[Offset: 0x0, Size: 0x4] 0x78cefb8800
	float Pan;//[Offset: 0x4, Size: 0x4] 0x78cefb8880

--------------------------------
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPhaserSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x78ceb08580
	void SetSettings(out const SourceEffectPhaserSettings InSettings);// 0x7da609c 0x78ceaeace0

--------------------------------
Class: SourceEffectPhaserSettings
	float WetLevel;//[Offset: 0x0, Size: 0x4] 0x78cefb8580
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78cefb8600
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78cefb8680
	enum LFOType;//[Offset: 0xc, Size: 0x1] 0x78cee5d6c0
	bool UseQuadraturePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x78cefb8780

--------------------------------
Class: SourceEffectRingModulationPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectRingModulationSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x78ceb08480
	void SetSettings(out const SourceEffectRingModulationSettings InSettings);// 0x7da6948 0x78ceaeac00

--------------------------------
Class: SourceEffectRingModulationSettings
	enum ModulatorType;//[Offset: 0x0, Size: 0x1] 0x78cee5d620
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x78cefba400
	float Depth;//[Offset: 0x8, Size: 0x4] 0x78cefba480
	float DryLevel;//[Offset: 0xc, Size: 0x4] 0x78cefba500
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x78cefb8480
	AudioBus* AudioBusModulator;//[Offset: 0x18, Size: 0x8] 0x78cefb8500

--------------------------------
Class: SourceEffectSimpleDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectSimpleDelaySettings Settings;//[Offset: 0xa4, Size: 0x18] 0x78ceb0a480
	void SetSettings(out const SourceEffectSimpleDelaySettings InSettings);// 0x7dad6f4 0x78ceaeab20

--------------------------------
Class: SourceEffectSimpleDelaySettings
	float SpeedOfSound;//[Offset: 0x0, Size: 0x4] 0x78cefba080
	float DelayAmount;//[Offset: 0x4, Size: 0x4] 0x78cefba100
	float DryAmount;//[Offset: 0x8, Size: 0x4] 0x78cefba180
	float WetAmount;//[Offset: 0xc, Size: 0x4] 0x78cefba200
	float Feedback;//[Offset: 0x10, Size: 0x4] 0x78cefba280
	bool bDelayBasedOnDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x78cefba300

--------------------------------
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x78ceb0a380
	void SetSettings(out const SourceEffectStereoDelaySettings InSettings);// 0x7dae0b0 0x78ceaeaa40

--------------------------------
Class: SourceEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x78cee5d4e0
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78cefb9c00
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78cefb9c80
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x78cefb9d00
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x78cefb9d80
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x78cefb9e00
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cefb9e80
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x78cee5d580
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x78cefb9f80
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x78cefba000

--------------------------------
Class: SourceEffectWaveShaperPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectWaveShaperSettings Settings;//[Offset: 0x94, Size: 0x8] 0x78ceb0a280
	void SetSettings(out const SourceEffectWaveShaperSettings InSettings);// 0x7dae8a4 0x78ceaea960

--------------------------------
Class: SourceEffectWaveShaperSettings
	float Amount;//[Offset: 0x0, Size: 0x4] 0x78cefb9a80
	float OutputGainDb;//[Offset: 0x4, Size: 0x4] 0x78cefb9b00

--------------------------------
Class: AudioImpulseResponse.Object
	float[] ImpulseResponse;//[Offset: 0x28, Size: 0x10] 0x78ceac5b00
	int NumChannels;//[Offset: 0x38, Size: 0x4] 0x78ceb0a000
	int SampleRate;//[Offset: 0x3c, Size: 0x4] 0x78ceb0a080
	float NormalizationVolumeDb;//[Offset: 0x40, Size: 0x4] 0x78ceb0a100
	bool bTrueStereo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78ceb0a180
	float[] IRData;//[Offset: 0x48, Size: 0x10] 0x78ceac5ba0

--------------------------------
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x68, Size: 0x8] 0x78ceb09c80
	SubmixEffectConvolutionReverbSettings Settings;//[Offset: 0x70, Size: 0x28] 0x78ceb09d00
	enum BlockSize;//[Offset: 0x98, Size: 0x1] 0x78ceac5a60
	bool bEnableHardwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x78ceb09e00
	void SetSettings(out const SubmixEffectConvolutionReverbSettings InSettings);// 0x7daf56c 0x78ceaea7a0
	void SetImpulseResponse(AudioImpulseResponse* InImpulseResponse);// 0x7daf4c4 0x78ceaea880

--------------------------------
Class: SubmixEffectConvolutionReverbSettings
	float NormalizationVolumeDb;//[Offset: 0x0, Size: 0x4] 0x78cefb9580
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cefb9600
	bool bMixInputChannelFormatToImpulseResponseFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78cefb9680
	bool bMixReverbOutputToOutputChannelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x78cefb9700
	float SurroundRearChannelBleedDb;//[Offset: 0x8, Size: 0x4] 0x78cefb9780
	bool bInvertRearChannelBleedPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cefb9800
	bool bSurroundRearChannelFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x78cefb9880
	float SurroundRearChannelBleedAmount;//[Offset: 0x10, Size: 0x4] 0x78cefb9900
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x18, Size: 0x8] 0x78cefb9980
	bool AllowHArdwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cefb9a00

--------------------------------
Class: SubmixEffectDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDelaySettings Settings;//[Offset: 0x98, Size: 0xc] 0x78ceb09980
	SubmixEffectDelaySettings DynamicSettings;//[Offset: 0xa4, Size: 0xc] 0x78ceb09a00
	void SetSettings(out const SubmixEffectDelaySettings InSettings);// 0x7dafe24 0x78ceaea420
	void SetInterpolationTime(float Time);// 0x7dafd60 0x78ceaea500
	void SetDelay(float Length);// 0x7dafcb8 0x78ceaea5e0
	float GetMaxDelayInMilliseconds();// 0x7dafe08 0x78ceaea6c0

--------------------------------
Class: SubmixEffectDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x78cefbb500
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x78cefbb580
	float DelayLength;//[Offset: 0x8, Size: 0x4] 0x78cefb9500

--------------------------------
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFilterSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78ceb09500
	void SetSettings(out const SubmixEffectFilterSettings InSettings);// 0x7db0c84 0x78ceae9e00
	void SetFilterType(enum InType);// 0x7db0bdc 0x78ceae9ee0
	void SetFilterQMod(float InQ);// 0x7db0894 0x78ceae9fc0
	void SetFilterQ(float InQ);// 0x7db093c 0x78ceaea0a0
	void SetFilterCutoffFrequencyMod(float InFrequency);// 0x7db09e4 0x78ceaea180
	void SetFilterCutoffFrequency(float InFrequency);// 0x7db0a8c 0x78ceaea260
	void SetFilterAlgorithm(enum InAlgorithm);// 0x7db0b34 0x78ceaea340

--------------------------------
Class: SubmixEffectFilterSettings
	enum FilterType;//[Offset: 0x0, Size: 0x1] 0x78cee5d3a0
	enum FilterAlgorithm;//[Offset: 0x1, Size: 0x1] 0x78cee5d440
	float FilterFrequency;//[Offset: 0x4, Size: 0x4] 0x78cefbb400
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x78cefbb480

--------------------------------
Class: SubmixEffectFlexiverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFlexiverbSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x78ceb0b500
	void SetSettings(out const SubmixEffectFlexiverbSettings InSettings);// 0x7db15d4 0x78ceae9d20

--------------------------------
Class: SubmixEffectFlexiverbSettings
	float PreDelay;//[Offset: 0x0, Size: 0x4] 0x78cefbb100
	float DecayTime;//[Offset: 0x4, Size: 0x4] 0x78cefbb180
	float RoomDampening;//[Offset: 0x8, Size: 0x4] 0x78cefbb200
	int Complexity;//[Offset: 0xc, Size: 0x4] 0x78cefbb280

--------------------------------
Class: SubmixEffectMultibandCompressorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectMultibandCompressorSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x78ceb0b400
	void SetSettings(out const SubmixEffectMultibandCompressorSettings InSettings);// 0x7db1edc 0x78ceae9c40

--------------------------------
Class: SubmixEffectMultibandCompressorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78cee5d1c0
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78cee5d260
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x78cefbaa80
	bool bLinkChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cefbab00
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78cefbab80
	bool bFourPole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78cefbac00
	DynamicsBandSettings[] Bands;//[Offset: 0x10, Size: 0x10] 0x78cee5d300

--------------------------------
Class: DynamicsBandSettings
	float CrossoverTopFrequency;//[Offset: 0x0, Size: 0x4] 0x78cefbac80
	float AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78cefbad00
	float ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x78cefbad80
	float ThresholdDb;//[Offset: 0xc, Size: 0x4] 0x78cefbae00
	float Ratio;//[Offset: 0x10, Size: 0x4] 0x78cefbae80
	float KneeBandwidthDb;//[Offset: 0x14, Size: 0x4] 0x78cefbaf00
	float InputGainDb;//[Offset: 0x18, Size: 0x4] 0x78cefbaf80
	float OutputGainDb;//[Offset: 0x1c, Size: 0x4] 0x78cefbb000

--------------------------------
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x78ceb0b300
	void SetSettings(out const SubmixEffectStereoDelaySettings InSettings);// 0x7db26e0 0x78ceae9b60

--------------------------------
Class: SubmixEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x78cee5d080
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x78cefbc600
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x78cefba580
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x78cefba600
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x78cefba680
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x78cefba700
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cefba780
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x78cee5d120
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x78cefba880
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x78cefba900

--------------------------------
Class: SubmixEffectTapDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectTapDelaySettings Settings;//[Offset: 0xa8, Size: 0x18] 0x78ceb0ad80
	void SetTap(int TapId, out const TapDelayInfo TapInfo);// 0x7db338c 0x78ceae9460
	void SetSettings(out const SubmixEffectTapDelaySettings InSettings);// 0x7db35e0 0x78ceae9540
	void SetInterpolationTime(float Time);// 0x7db3110 0x78ceae9620
	void RemoveTap(int TapId);// 0x7db3484 0x78ceae9700
	void GetTapIds(out int[] TapIds);// 0x7db31d4 0x78ceae97e0
	void GetTap(int TapId, out TapDelayInfo TapInfo);// 0x7db3294 0x78ceae98c0
	float GetMaxDelayInMilliseconds();// 0x7db31b8 0x78ceae99a0
	void AddTap(out int TapId);// 0x7db352c 0x78ceae9a80

--------------------------------
Class: TapDelayInfo
	enum TapLineMode;//[Offset: 0x0, Size: 0x1] 0x78cee5cf40
	float DelayLength;//[Offset: 0x4, Size: 0x4] 0x78cefbc280
	float Gain;//[Offset: 0x8, Size: 0x4] 0x78cefbc300
	int OutputChannel;//[Offset: 0xc, Size: 0x4] 0x78cefbc380
	float PanInDegrees;//[Offset: 0x10, Size: 0x4] 0x78cefbc400
	int TapId;//[Offset: 0x14, Size: 0x4] 0x78cefbc480

--------------------------------
Class: SubmixEffectTapDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x78cefbc100
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x78cefbc180
	TapDelayInfo[] Taps;//[Offset: 0x8, Size: 0x10] 0x78cee5cfe0

--------------------------------
Class: Synth2DSlider.Widget.Visual.Object
	float ValueX;//[Offset: 0x108, Size: 0x4] 0x78ceb0c380
	float ValueY;//[Offset: 0x10c, Size: 0x4] 0x78ceb0c400
	delegate ValueXDelegate;//[Offset: 0x110, Size: 0x10] 0x78ceb0c480
	delegate ValueYDelegate;//[Offset: 0x120, Size: 0x10] 0x78ceb0c500
	Synth2DSliderStyle WidgetStyle;//[Offset: 0x130, Size: 0x2b8] 0x78ceb0c580
	LinearColor SliderHandleColor;//[Offset: 0x3e8, Size: 0x10] 0x78ceb0c600
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1] 0x78ceb0a580
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1] 0x78ceb0a600
	float StepSize;//[Offset: 0x3fc, Size: 0x4] 0x78ceb0a680
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1] 0x78ceb0a700
	delegate OnMouseCaptureBegin;//[Offset: 0x408, Size: 0x10] 0x78ceb0a780
	delegate OnMouseCaptureEnd;//[Offset: 0x418, Size: 0x10] 0x78ceb0a800
	delegate OnControllerCaptureBegin;//[Offset: 0x428, Size: 0x10] 0x78ceb0a880
	delegate OnControllerCaptureEnd;//[Offset: 0x438, Size: 0x10] 0x78ceb0a900
	delegate OnValueChangedX;//[Offset: 0x448, Size: 0x10] 0x78ceb0a980
	delegate OnValueChangedY;//[Offset: 0x458, Size: 0x10] 0x78ceb0aa00
	void SetValue(Vector2D InValue);// 0x7db4280 0x78ceaec8e0
	void SetStepSize(float InValue);// 0x7db4078 0x78ceaec9c0
	void SetSliderHandleColor(LinearColor InValue);// 0x7db3fd0 0x78ceae90e0
	void SetLocked(bool InValue);// 0x7db4120 0x78ceae91c0
	void SetIndentHandle(bool InValue);// 0x7db41d0 0x78ceae92a0
	Vector2D GetValue();// 0x7db4324 0x78ceae9380

--------------------------------
Class: Synth2DSliderStyle.SlateWidgetStyle
	SlateBrush NormalThumbImage;//[Offset: 0x8, Size: 0x88] 0x78cefbbe00
	SlateBrush DisabledThumbImage;//[Offset: 0x90, Size: 0x88] 0x78cefbbe80
	SlateBrush NormalBarImage;//[Offset: 0x118, Size: 0x88] 0x78cefbbf00
	SlateBrush DisabledBarImage;//[Offset: 0x1a0, Size: 0x88] 0x78cefbbf80
	SlateBrush BackgroundImage;//[Offset: 0x228, Size: 0x88] 0x78cefbc000
	float BarThickness;//[Offset: 0x2b0, Size: 0x4] 0x78cefbc080

--------------------------------
Class: GranularSynth.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* GranulatedSoundWave;//[Offset: 0x6c0, Size: 0x8] 0x78ceb0d480
	void SetSustainGain(const float SustainGain);// 0x7dba2c0 0x78ceaeb760
	void SetSoundWave(SoundWave* InSoundWave);// 0x7dba4b8 0x78ceaeb840
	void SetScrubMode(const bool bScrubMode);// 0x7db98a8 0x78ceaeb920
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);// 0x7dba218 0x78ceaeba00
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, enum SeekType);// 0x7db976c 0x78ceaebae0
	void SetPlaybackSpeed(const float InPlayheadRate);// 0x7db9d3c 0x78ceaebbc0
	void SetGrainVolume(const float BaseVolume, const Vector2D VolumeRange);// 0x7db9b64 0x78ceaebca0
	void SetGrainsPerSecond(const float InGrainsPerSecond);// 0x7db9f34 0x78ceaebd80
	void SetGrainProbability(const float InGrainProbability);// 0x7db9e8c 0x78ceaebe60
	void SetGrainPitch(const float BasePitch, const Vector2D PitchRange);// 0x7db9c50 0x78ceaebf40
	void SetGrainPan(const float BasePan, const Vector2D PanRange);// 0x7db9a78 0x78ceaec020
	void SetGrainEnvelopeType(const enum EnvelopeType);// 0x7db9de4 0x78ceaec100
	void SetGrainDuration(const float BaseDurationMsec, const Vector2D DurationRange);// 0x7db998c 0x78ceaec1e0
	void SetDecayTime(const float DecayTimeMsec);// 0x7dba368 0x78ceaec2c0
	void SetAttackTime(const float AttackTimeMsec);// 0x7dba410 0x78ceaec3a0
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x7dba0d8 0x78ceaec480
	void NoteOff(const float Note, const bool bKill);// 0x7db9fdc 0x78ceaec560
	bool IsLoaded();// 0x7db9700 0x78ceaec640
	float GetSampleDuration();// 0x7db9958 0x78ceaec720
	float GetCurrentPlayheadTime();// 0x7db9738 0x78ceaec800

--------------------------------
Class: MonoWaveTableSynthPreset.Object
	FString PresetName;//[Offset: 0x28, Size: 0x10] 0x78ceb0d180
	bool bLockKeyframesToGridBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ceb0d200
	int LockKeyframesToGrid;//[Offset: 0x3c, Size: 0x4] 0x78ceb0d280
	int WaveTableResolution;//[Offset: 0x40, Size: 0x4] 0x78ceb0d300
	RuntimeFloatCurve[] WaveTable;//[Offset: 0x48, Size: 0x10] 0x78ceac56a0
	bool bNormalizeWaveTables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78ceb0d400

--------------------------------
Class: SynthComponentMonoWaveTable.SynthComponent.SceneComponent.ActorComponent.Object
	delegate OnTableAltered;//[Offset: 0x6c0, Size: 0x10] 0x78ceb0f680
	delegate OnNumTablesChanged;//[Offset: 0x6d0, Size: 0x10] 0x78ceb0f700
	MonoWaveTableSynthPreset* CurrentPreset;//[Offset: 0x6e0, Size: 0x8] 0x78ceb0f780
	void SetWaveTablePosition(float InPosition);// 0x7dbcdd0 0x78ceaecaa0
	void SetSustainPedalState(bool InSustainPedalState);// 0x7dbd070 0x78ceaecb80
	void SetPosLfoType(const enum InLfoType);// 0x7dbcb1c 0x78ceaecc60
	void SetPosLfoFrequency(const float InLfoFrequency);// 0x7dbcc6c 0x78ceaecd40
	void SetPosLfoDepth(const float InLfoDepth);// 0x7dbcbc4 0x78ceaece20
	void SetPositionEnvelopeSustainGain(const float InSustainGain);// 0x7dbbddc 0x78ceaecf00
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x7dbbd34 0x78ceaecfe0
	void SetPositionEnvelopeInvert(const bool bInInvert);// 0x7dbbc84 0x78ceaed0c0
	void SetPositionEnvelopeDepth(const float InDepth);// 0x7dbbb2c 0x78ceaed1a0
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);// 0x7dbbe84 0x78ceaed280
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);// 0x7dbbbd4 0x78ceaed360
	void SetPositionEnvelopeBiasDepth(const float InDepth);// 0x7dbba84 0x78ceaed440
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);// 0x7dbbf2c 0x78ceaed520
	void SetLowPassFilterResonance(float InNewQ);// 0x7dbca74 0x78ceaed600
	void SetFrequencyWithMidiNote(const float InMidiNote);// 0x7dbce78 0x78ceaed6e0
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);// 0x7dbcf20 0x78ceaed7c0
	void SetFrequency(const float FrequencyHz);// 0x7dbcfc8 0x78ceaed8a0
	void SetFilterEnvelopeSustainGain(const float InSustainGain);// 0x7dbc32c 0x78ceaed980
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x7dbc284 0x78ceaeda60
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);// 0x7dbc3d4 0x78ceaedb40
	void SetFilterEnvelopeInvert(const bool bInInvert);// 0x7dbc1d4 0x78ceaedc20
	void SetFilterEnvelopeDepth(const float InDepth);// 0x7dbc07c 0x78ceaedd00
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);// 0x7dbc124 0x78ceaedde0
	void SetFilterEnvelopeBiasDepth(const float InDepth);// 0x7dbbfd4 0x78ceaedec0
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);// 0x7dbc47c 0x78ceaedfa0
	bool SetCurveValue(int TableIndex, int KeyframeIndex, const float NewValue);// 0x7dbb908 0x78ceaee080
	bool SetCurveTangent(int TableIndex, float InNewTangent);// 0x7dbb708 0x78ceaee160
	bool SetCurveInterpolationType(enum InterpolationType, int TableIndex);// 0x7dbb808 0x78ceaee240
	void SetAmpEnvelopeSustainGain(const float InSustainGain);// 0x7dbc87c 0x78ceaee320
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x7dbc7d4 0x78ceaee400
	void SetAmpEnvelopeInvert(const bool bInInvert);// 0x7dbc724 0x78ceaee4e0
	void SetAmpEnvelopeDepth(const float InDepth);// 0x7dbc5cc 0x78ceaee5c0
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);// 0x7dbc924 0x78ceaee6a0
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);// 0x7dbc674 0x78ceaeadc0
	void SetAmpEnvelopeBiasDepth(const float InDepth);// 0x7dbc524 0x78ceaeaea0
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);// 0x7dbc9cc 0x78ceaeaf80
	void RefreshWaveTable(int index);// 0x7dbcd28 0x78ceaeb060
	void RefreshAllWaveTables();// 0x7dbcd14 0x78ceaeb140
	void NoteOn(const float InMidiNote, const float InVelocity);// 0x7dbd1c8 0x78ceaeb220
	void NoteOff(const float InMidiNote);// 0x7dbd120 0x78ceaeb300
	int GetNumTableEntries();// 0x7dbd2b8 0x78ceaeb3e0
	int GetMaxTableIndex();// 0x7dbba50 0x78ceaeb4c0
	float[] GetKeyFrameValuesForTable(float TableIndex);// 0x7dbb55c 0x78ceaeb5a0
	float GetCurveTangent(int TableIndex);// 0x7dbb658 0x78ceaeb680

--------------------------------
Class: SynthComponentToneGenerator.SynthComponent.SceneComponent.ActorComponent.Object
	float Frequency;//[Offset: 0x6c0, Size: 0x4] 0x78ceb0f480
	float Volume;//[Offset: 0x6c4, Size: 0x4] 0x78ceb0f500
	void SetVolume(float InVolume);// 0x7dbe4dc 0x78ceaefe40
	void SetFrequency(float InFrequency);// 0x7dbe584 0x78ceaeff20

--------------------------------
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* SoundWave;//[Offset: 0x6c0, Size: 0x8] 0x78ceb0ed00
	delegate OnSampleLoaded;//[Offset: 0x6c8, Size: 0x10] 0x78ceb0ed80
	delegate OnSamplePlaybackProgress;//[Offset: 0x6d8, Size: 0x10] 0x78ceb0ee00
	void SetSoundWave(SoundWave* InSoundWave);// 0x7dbf15c 0x78ceaef660
	void SetScrubTimeWidth(float InScrubTimeWidthSec);// 0x7dbedcc 0x78ceaef740
	void SetScrubMode(bool bScrubMode);// 0x7dbee74 0x78ceaef820
	void SetPitch(float InPitch, float TimeSec);// 0x7dbf06c 0x78ceaef900
	void SeekToTime(float TimeSec, enum SeekType, bool bWrap);// 0x7dbef24 0x78ceaef9e0
	bool IsLoaded();// 0x7dbecf8 0x78ceaefac0
	float GetSampleDuration();// 0x7dbed98 0x78ceaefba0
	float GetCurrentPlaybackProgressTime();// 0x7dbed64 0x78ceaefc80
	float GetCurrentPlaybackProgressPercent();// 0x7dbed30 0x78ceaefd60

--------------------------------
Class: SynthesisUtilitiesBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x7dbfb28 0x78ceaef4a0
	static float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x7dbf958 0x78ceaef580

--------------------------------
Class: SynthKnob.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78ceb10e80
	float StepSize;//[Offset: 0x10c, Size: 0x4] 0x78ceb10f00
	float MouseSpeed;//[Offset: 0x110, Size: 0x4] 0x78ceb10f80
	float MouseFineTuneSpeed;//[Offset: 0x114, Size: 0x4] 0x78ceb11000
	bool ShowTooltipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x78ceb11080
	FText ParameterName;//[Offset: 0x120, Size: 0x18] 0x78ceb0f800
	FText ParameterUnits;//[Offset: 0x138, Size: 0x18] 0x78ceb0f880
	delegate ValueDelegate;//[Offset: 0x150, Size: 0x10] 0x78ceb0f900
	SynthKnobStyle WidgetStyle;//[Offset: 0x160, Size: 0x238] 0x78ceb0f980
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1] 0x78ceb0fa00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1] 0x78ceb0fa80
	delegate OnMouseCaptureBegin;//[Offset: 0x3a0, Size: 0x10] 0x78ceb0fb00
	delegate OnMouseCaptureEnd;//[Offset: 0x3b0, Size: 0x10] 0x78ceb0fb80
	delegate OnControllerCaptureBegin;//[Offset: 0x3c0, Size: 0x10] 0x78ceb0fc00
	delegate OnControllerCaptureEnd;//[Offset: 0x3d0, Size: 0x10] 0x78ceb0fc80
	delegate OnValueChanged;//[Offset: 0x3e0, Size: 0x10] 0x78ceb0fd00
	void SetValue(float InValue);// 0x7dc116c 0x78ceaef120
	void SetStepSize(float InValue);// 0x7dc1014 0x78ceaef200
	void SetLocked(bool InValue);// 0x7dc10bc 0x78ceaef2e0
	float GetValue();// 0x7dc1214 0x78ceaef3c0

--------------------------------
Class: SynthKnobStyle.SlateWidgetStyle
	SlateBrush LargeKnob;//[Offset: 0x8, Size: 0x88] 0x78cefbba80
	SlateBrush LargeKnobOverlay;//[Offset: 0x90, Size: 0x88] 0x78cefbbb00
	SlateBrush MediumKnob;//[Offset: 0x118, Size: 0x88] 0x78cefbbb80
	SlateBrush MediumKnobOverlay;//[Offset: 0x1a0, Size: 0x88] 0x78cefbbc00
	float MinValueAngle;//[Offset: 0x228, Size: 0x4] 0x78cefbbc80
	float MaxValueAngle;//[Offset: 0x22c, Size: 0x4] 0x78cefbbd00
	enum KnobSize;//[Offset: 0x230, Size: 0x1] 0x78cee5cea0

--------------------------------
Class: AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	SoundWave* Sound;//[Offset: 0x28, Size: 0x8] 0x78ceb10d80
	float DurationInSeconds;//[Offset: 0x30, Size: 0x4] 0x78ceb10e00

--------------------------------
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object

--------------------------------
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float StartingFrequency;//[Offset: 0x28, Size: 0x4] 0x78ceb10800
	int NumBands;//[Offset: 0x2c, Size: 0x4] 0x78ceb10880
	float NumBandsPerOctave;//[Offset: 0x30, Size: 0x4] 0x78ceb10900
	float AnalysisPeriod;//[Offset: 0x34, Size: 0x4] 0x78ceb10980
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ceb10a00
	enum FFTSize;//[Offset: 0x39, Size: 0x1] 0x78ceac7ae0
	enum WindowType;//[Offset: 0x3a, Size: 0x1] 0x78ceac7b80
	enum SpectrumType;//[Offset: 0x3b, Size: 0x1] 0x78ceac52e0
	float BandWidthStretch;//[Offset: 0x3c, Size: 0x4] 0x78ceb10c00
	enum CQTNormalization;//[Offset: 0x40, Size: 0x1] 0x78ceac5380
	float NoiseFloorDb;//[Offset: 0x44, Size: 0x4] 0x78ceb10d00

--------------------------------
Class: ConstantQNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	ConstantQNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x78ceb10480
	void GetNormalizedChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x7dd77d4 0x78ceaeef60
	void GetChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x7dd792c 0x78ceaef040

--------------------------------
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x78ceb10200
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4] 0x78ceb10280
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4] 0x78ceb10300
	enum CurveType;//[Offset: 0x34, Size: 0x1] 0x78ceac7900
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4] 0x78ceb10400

--------------------------------
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	LoudnessNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x78ceb11d80
	void GetNormalizedLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x7dd8558 0x78ceaeebe0
	void GetNormalizedChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x7dd840c 0x78ceaeecc0
	void GetLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x7dd87a4 0x78ceaeeda0
	void GetChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x7dd8658 0x78ceaeee80

--------------------------------
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ceb11b00
	float GranularityInSeconds;//[Offset: 0x2c, Size: 0x4] 0x78ceb11b80
	float Sensitivity;//[Offset: 0x30, Size: 0x4] 0x78ceb11c00
	float MinimumFrequency;//[Offset: 0x34, Size: 0x4] 0x78ceb11c80
	float MaximumFrequency;//[Offset: 0x38, Size: 0x4] 0x78ceb11d00

--------------------------------
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	OnsetNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x78ceb11580
	void GetNormalizedChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x7dd9198 0x78ceaeea20
	void GetChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x7dd9398 0x78ceaeeb00

--------------------------------
Class: UserWidgetBase.UserWidget.Widget.Visual.Object
	bool HideUserHallAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78ceb19400
	FString CharacterShowType;//[Offset: 0x288, Size: 0x10] 0x78ceb19480
	FString CameraShowType;//[Offset: 0x298, Size: 0x10] 0x78ceb17400
	bool bNeedLoadSubLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x78ceb17480
	FString SubLevelName;//[Offset: 0x2b0, Size: 0x10] 0x78ceb17500
	bool bCharacterShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78ceb17580
	bool bDisplayActorShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78ceb17600
	FString CharacterShowBackGroundType;//[Offset: 0x2c8, Size: 0x10] 0x78ceb17680
	int CharacterShowHeroID;//[Offset: 0x2d8, Size: 0x4] 0x78ceb17700
	int CharacterShowSkinID;//[Offset: 0x2dc, Size: 0x4] 0x78ceb17780
	FString DisplayActorShowType;//[Offset: 0x2e0, Size: 0x10] 0x78ceb17800
	FString DisplayActorPath;//[Offset: 0x2f0, Size: 0x10] 0x78ceb17880
	enum[] CurrencyUIData;//[Offset: 0x300, Size: 0x10] 0x78ceac7180
	int CurrencyUIType;//[Offset: 0x310, Size: 0x4] 0x78ceb17980
	bool bReturnParentWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1] 0x78ceb17a00
	UserWidgetBase*[] childs;//[Offset: 0x318, Size: 0x10] 0x78ceac7220
	UserWidgetBase* ParentWidget;//[Offset: 0x328, Size: 0x8] 0x78ceb17b00
	void SetParentWidget(UserWidgetBase* ParentWidget);// 0x84e032c 0x78ceb23ea0
	void OnWidgetVisibilityChanged();// 0x8a873f8 0x78ceb23f80
	void OnOpened();// 0x84e03f0 0x78ceb24060
	void OnClosed();// 0x84e03d4 0x78ceb24140
	WuXiaXCharacter* GetOwningCharacter();// 0x84e040c 0x78ceb24220
	void DestroyPanel(UserWidgetBase* widget_point);// 0x84e0448 0x78ceb24300

--------------------------------
Class: WuXiaXCharacter.WuXiaXNpcCharacter.WuXiaXBaseCharacter.Character.Pawn.Actor.Object
	float base_turn_rate_;//[Offset: 0x658, Size: 0x4] 0x78ce675400
	float base_lookup_rate_;//[Offset: 0x65c, Size: 0x4] 0x78ce675480
	int PostRenderStencil;//[Offset: 0x660, Size: 0x4] 0x78ce675500
	FString password_;//[Offset: 0x668, Size: 0x10] 0x78ce675580
	FString game_room_name_;//[Offset: 0x678, Size: 0x10] 0x78ce675600
	FString game_team_name_;//[Offset: 0x688, Size: 0x10] 0x78ce675680
	bool has_balance_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1] 0x78ce675700
	bool is_plane_landed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 0x1] 0x78ce675780
	bool is_plane_jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69b, Size: 0x1] 0x78ce675800
	bool bShowTeachingMission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1] 0x78ce675880
	SphereComponent* player_dying_collision;//[Offset: 0x6a0, Size: 0x8] 0x78ce675900
	int animus_index_;//[Offset: 0x6a8, Size: 0x4] 0x78ce675980
	int animus_index_self_;//[Offset: 0x6ac, Size: 0x4] 0x78ce675a00
	bool need_guide_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1] 0x78ce675a80
	enum TeachingType;//[Offset: 0x6b1, Size: 0x1] 0x78cedd7f40
	bool jail_chance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1] 0x78ce675b80
	int last_dead_box_id;//[Offset: 0x844, Size: 0x4] 0x78ce675c00
	bool bFirstEnterArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1] 0x78ce675c80
	bool bIsInRangeWeaponState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86a, Size: 0x1] 0x78ce675d00
	FString player_name_;//[Offset: 0x878, Size: 0x10] 0x78ce675d80
	bool is_autospriting_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1] 0x78ce675e00
	GameItemInfo[] equip_array_;//[Offset: 0x890, Size: 0x10] 0x78cedd7fe0
	Actor* m_InteractiveObject;//[Offset: 0x8a8, Size: 0x8] 0x78ce675f00
	int[] expression_array_;//[Offset: 0x8b0, Size: 0x10] 0x78cedd8080
	int[] action_array_;//[Offset: 0x8c0, Size: 0x10] 0x78cedd8120
	bool is_free_view_net_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1] 0x78ce676080
	int kill_num_;//[Offset: 0x8f4, Size: 0x4] 0x78ce676100
	bool is_open_talk_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1] 0x78ce676180
	bool is_first_land;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 0x1] 0x78ce676200
	<int,BuffPointInfo> buff_state_;//[Offset: 0x900, Size: 0x50] 0x78cee10880
	SpringArmComponent* third_person_camera_boom_;//[Offset: 0x950, Size: 0x8] 0x78ce674280
	CameraComponent* third_person_camera_;//[Offset: 0x958, Size: 0x8] 0x78ce674300
	Rotator free_view_old_rotator_;//[Offset: 0x970, Size: 0xc] 0x78ce674380
	Rotator free_view_back_rotator_;//[Offset: 0x97c, Size: 0xc] 0x78ce674400
	bool is_in_free_view_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 0x1] 0x78ce674480
	bool is_in_free_view_back_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x989, Size: 0x1] 0x78ce674500
	float back_control_time_;//[Offset: 0x98c, Size: 0x4] 0x78ce674580
	float target_delay_speed_;//[Offset: 0x990, Size: 0x4] 0x78ce674600
	Rotator trace_target_view_rotator_;//[Offset: 0x994, Size: 0xc] 0x78ce674680
	float trace_target_view_time_;//[Offset: 0x9a0, Size: 0x4] 0x78ce674700
	bool is_trace_target_view_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1] 0x78ce674780
	bool ride_trace_view_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a5, Size: 0x1] 0x78ce674800
	float ride_trace_view_time_;//[Offset: 0x9a8, Size: 0x4] 0x78ce674880
	Rotator camera_collision_view_rotator_;//[Offset: 0x9ac, Size: 0xc] 0x78ce674900
	float camera_collision_view_time_;//[Offset: 0x9b8, Size: 0x4] 0x78ce674980
	bool is_in_lian_tiao_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 0x1] 0x78ce674a00
	int lian_tiao_index_;//[Offset: 0x9f4, Size: 0x4] 0x78ce674a80
	float move_distance_;//[Offset: 0x9fc, Size: 0x4] 0x78ce674b00
	bool is_camera_collision_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0b, Size: 0x1] 0x78ce674b80
	SkeletalMeshComponent*[] player_show_mesh_component_callback_;//[Offset: 0xa88, Size: 0x10] 0x78cedd81c0
	int idle_npc_num_;//[Offset: 0xab0, Size: 0x4] 0x78ce674c80
	float NpcSpawnCdTime;//[Offset: 0xab4, Size: 0x4] 0x78ce674d00
	WuXiaXCharacter* SmashModeVisionPlayer;//[Offset: 0xacc, Size: 0x8] 0x78ce674d80
	void WaistTokenPickUp();// 0x85136a0 0x78ce66dfa0
	void UpdateShowWeapon(bool bShow);// 0x8a873f8 0x78ce66e080
	void UpdateHudExpression(const int[] items);// 0x8516a10 0x78ce66e160
	void UpdateHudAction(const int[] items);// 0x8516954 0x78ce66e240
	void UpdateAccomplishmentInfo(const int64[] AccomplishmentIdArray, int curLv, int CurPoint);// 0x850fb10 0x78ce66e320
	void TreasureOpenSuccess();// 0x8514b88 0x78ce66e400
	SpringArmComponent* ThirdPersonCameraBoom();// 0x8516b74 0x78ce66e4e0
	void SyncResurrectionInfoFromConfig(enum GameMode);// 0x85141ec 0x78ce66e5c0
	void SwitchStealth(bool State);// 0x8513b2c 0x78ce66e6a0
	void SwitchSprinting();// 0x8513b18 0x78ce66adc0
	void Suicide(int Type);// 0x851771c 0x78ce66aea0
	void StartStatistic();// 0x850fc60 0x78ce66af80
	void SpawnSky(enum SkyType);// 0x8515ed8 0x78ce66b060
	void SpawnItemRPC(int ItemId, int Num);// 0x85177e0 0x78ce66b140
	void SpawnAIPlayerOnServer(int Number);// 0x8a873f8 0x78ce66b220
	void SmashModeUpdateVision(float DeltaTime);// 0x850e8a4 0x78ce66b300
	void SmashModeClearVision();// 0x850e960 0x78ce66b3e0
	void SmashModeChangeVision();// 0x850e94c 0x78ce66b4c0
	void SkeletalMeshComponentCreate(enum Type);// 0x8516acc 0x78ce66b5a0
	void ShowLockTargetUI(Actor* Target, bool Control);// 0x8a873f8 0x78ce66b680
	void ShowAssassinationTipUI(Actor* Target);// 0x8a873f8 0x78ce66b760
	void ShowAnimus(int index);// 0x8a873f8 0x78ce66b840
	void ShowAllDragonRockUI();// 0x85114f8 0x78ce66b920
	void SetVerticalAxis(float Axis);// 0x851048c 0x78ce66ba00
	void SetInteractive(bool State);// 0x851383c 0x78ce66bae0
	void SetHorizontalAxis(float Axis);// 0x8510534 0x78ce66bbc0
	void SetCollisonMoveEnable(bool Value);// 0x8515db8 0x78ce66bca0
	void SetCameraLocation(Vector NewLocation);// 0x8513bdc 0x78ce66bd80
	void SetBlockState(bool State);// 0x85139b8 0x78ce66be60
	void SetBlackScreenState(bool State);// 0x8a873f8 0x78ce66bf40
	void SetAutoSprinting(bool autospriting);// 0x8513a68 0x78ce66c020
	void SetAimState(bool State);// 0x85138ec 0x78ce66c100
	void ServerTeleport(Vector Loc);// 0x85170c4 0x78ce66c1e0
	void Server_WinActorInteractive(bool bConifrm);// 0x8511a4c 0x78ce66c2c0
	void Server_TrainCloseMission();// 0x8511234 0x78ce66c3a0
	void Server_StartGuide();// 0x8511b90 0x78ce66c480
	void Server_SpawnItem(int ItemId, Vector Location, Rotator Rotation);// 0x85157b4 0x78ce66c560
	void Server_SmashModeUpdateInfo();// 0x850ea24 0x78ce66c640
	void Server_SmashModeAdvPoolSelectItem(int RaffleItemIndex);// 0x850e974 0x78ce66c720
	void Server_SetResurrectionInfo(const ResurrectionInfo Info);// 0x8514374 0x78ce66c800
	void Server_ResetTeaching();// 0x8510088 0x78ce66c8e0
	void Server_PlayerWinLeave();// 0x85136b4 0x78ce66c9c0
	void Server_PlayerLeaveTrainForceGuide(enum Type);// 0x85155ac 0x78ce6690e0
	void Server_PlayerJumpStepOn(float Height);// 0x85103a4 0x78ce6691c0
	void Server_PlayerExpression(int ID);// 0x8511884 0x78ce6692a0
	void Server_PlayerAction(int ID);// 0x8511724 0x78ce669380
	void Server_OpenParachute();// 0x8515218 0x78ce669460
	void Server_LianTiao(bool is_in_lian_tiao, int lian_tiao_index);// 0x8515fa4 0x78ce669540
	void Server_JumPlane(int Yaw);// 0x8515274 0x78ce669620
	void Server_GivePlayerEquip(const GameItemInfo[] equip_items, const int[] skills);// 0x8510d34 0x78ce669700
	void Server_GetDamageFullTime();// 0x8511a30 0x78ce6697e0
	void Server_CreateTeachingCharacter(enum Type, const Vector[] Points, const Rotator Rot, float Duration);// 0x85100a4 0x78ce6698c0
	void Server_CloseParachute();// 0x85151bc 0x78ce6699a0
	void Server_ChooseWin();// 0x8511b04 0x78ce669a80
	void Server_ChooseTrainNpc(int npc_id, bool bCanBlock, int PosIndex);// 0x85158f4 0x78ce669b60
	void Server_CheckAddDefaultSkillsAfterHUDBind();// 0x85114dc 0x78ce669c40
	void Server_ChangeHero(int NewHeroId);// 0x85154fc 0x78ce669d20
	void Server_AskVoiceChannel();// 0x8515bf8 0x78ce669e00
	void SendDeviceInfo();// 0x850fc74 0x78ce669ee0
	void SendBuffPointToHUD();// 0x8513d5c 0x78ce669fc0
	void RunServerAI();// 0x8a873f8 0x78ce66a0a0
	void RotateSpringArm_Client(Rotator roation);// 0x850fa60 0x78ce66a180
	void ReconnectUpdate();// 0x8514b2c 0x78ce66a260
	void PlayJumpStepUp(float steph, float Height);// 0x8a873f8 0x78ce66a340
	void PlayJumpStepOn(float steph, float Height);// 0x8a873f8 0x78ce66a420
	void PlayJumpStep(float Height);// 0x8a873f8 0x78ce66a500
	void PlayerLeaveTrainForceGuide(enum Type);// 0x851565c 0x78ce66a5e0
	void PlayerKillByTrap(enum reason);// 0x8514c10 0x78ce66a6c0
	void PlayerInitLocation();// 0x8515e7c 0x78ce66a7a0
	void PlayerExpression(int ID);// 0x8a873f8 0x78ce66a880
	void PlayerEnterJailState(enum State, float continus);// 0x8510c38 0x78ce66a960
	CameraComponent* PlayerCurrentCamera();// 0x8516b90 0x78ce66aa40
	void PlayerBlockBeAttack();// 0x8a873f8 0x78ce66ab20
	bool PlayerAction(int ID);// 0x85115c0 0x78ce66ac00
	void PlayAnimation(FString anim);// 0x851150c 0x78ce66ace0
	void PickItemOut(Actor* val);// 0x8a873f8 0x78ce667400
	void PickItemEnter(Actor* val);// 0x8a873f8 0x78ce6674e0
	void OnRepPlayerName();// 0x8510060 0x78ce6675c0
	void OnRepAnimusIndexSelf();// 0x8513d34 0x78ce6676a0
	void OnRepAnimusIndex();// 0x8513d48 0x78ce667780
	void OnPlayNetNotice();// 0x8510074 0x78ce667860
	void OnPlayerTargetSwitchOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x85160dc 0x78ce667940
	void OnPlayerTargetSwitchOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8516264 0x78ce667a20
	void OnPlayerAroundOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x85164a8 0x78ce667b00
	void OnPlayerAroundOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8516630 0x78ce667be0
	void OnMontageBlendOut(AnimMontage* anim, bool bInterrupted);// 0x851023c 0x78ce667cc0
	void OnCollision(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult hit);// 0x8517b60 0x78ce667da0
	void Mult_PlayerEnterTrainForceGuide(enum Type);// 0x8515704 0x78ce667e80
	void MoveRight(float Value);// 0x85110bc 0x78ce667f60
	void MoveForward(float Value);// 0x8511164 0x78ce668040
	void MissileHitTarget();// 0x8515d9c 0x78ce668120
	void KnockDowned();// 0x8a873f8 0x78ce668200
	bool IsPressKeyAction(out const FName key_name, out bool can_input);// 0x8514fdc 0x78ce6682e0
	bool IsLaunchingWithAIFlag();// 0x8516c5c 0x78ce6683c0
	bool IsDeath();// 0x8514bd8 0x78ce6684a0
	bool IsCurrentRangeWeapon();// 0x8513d8c 0x78ce668580
	bool Is_free_view_net();// 0x8513710 0x78ce668660
	bool InteractiveUITips(WuXiaXBaseCharacter* Player, out FText text);// 0x8514d70 0x78ce668740
	void InteractiveButtonDown();// 0x85151a8 0x78ce668820
	void InPoisonFog(bool infog);// 0x8a873f8 0x78ce668900
	void InitHeroSkill(int HeroId);// 0x8511d8c 0x78ce6689e0
	void InitBuffPoint(const int[] Indexs, const BuffPointInfo[] Info);// 0x85140d8 0x78ce668ac0
	void HideLockTargetUI();// 0x8a873f8 0x78ce668ba0
	void HideAssassinationTipUI();// 0x8a873f8 0x78ce668c80
	bool HasTarget();// 0x85168c0 0x78ce668d60
	bool GuideCanInteractive();// 0x8510338 0x78ce668e40
	Rotator GetTargetRotator();// 0x8516888 0x78ce668f20
	float GetSprintValue();// 0x8510370 0x78ce669000
	void GetServerSkyType();// 0x8515f88 0x78ce665720
	bool GetNeedPressHabit(const FString Name);// 0x851372c 0x78ce665800
	enum GetInteractiveType(WuXiaXBaseCharacter* Player);// 0x8514cb8 0x78ce6658e0
	FString GetHostIP();// 0x8516bac 0x78ce6659c0
	int GetEquipWeaponMode(enum Slot);// 0x8513f00 0x78ce665aa0
	bool GetEquipWeaponInfo(enum Slot, out WeaponItemInfo weaponInfo);// 0x8513df8 0x78ce665b80
	int GetCurrentWeaponMode();// 0x8513fb0 0x78ce665c60
	int GetCurrentWeaponID();// 0x8514ba4 0x78ce665d40
	int GetCurrentWeaponAmmoNum();// 0x8513dc4 0x78ce665e20
	void GameReady();// 0x8a873f8 0x78ce665f00
	void FreeViewTurnBack();// 0x8a873f8 0x78ce665fe0
	void FreeViewStopTurnBack();// 0x8a873f8 0x78ce6660c0
	void ForcedDodge();// 0x8a873f8 0x78ce6661a0
	void EndTeaching(enum Type);// 0x8511250 0x78ce666280
	void EndGameUpdateAchievement(uint32 MatchRank, enum GameSquadMode, HPChangeInfo HPChangeInfo);// 0x850f90c 0x78ce666360
	void DestroyTeachingCharacter();// 0x8a873f8 0x78ce666440
	void DestroyPlane();// 0x8515a98 0x78ce666520
	void CreateTeachingCharacter(enum Type, out const Vector[] Points, out const Rotator Rot, float Duration);// 0x8a873f8 0x78ce666600
	void CreatePlane(Vector beginlocation, Vector EndLocation, int64 begintime);// 0x8515ab4 0x78ce6666e0
	void Control_OutJamming();// 0x8510e48 0x78ce6667c0
	void Control_LookForward();// 0x8510e5c 0x78ce6668a0
	void Control_Jump();// 0x8511220 0x78ce666980
	void Control_Interactive();// 0x8510fd0 0x78ce666a60
	void Control_FreeView(bool isPress);// 0x8510ff8 0x78ce666b40
	void Control_Dodge();// 0x851120c 0x78ce666c20
	void Control_ClearTarget();// 0x8515e68 0x78ce666d00
	void Control_ChangeTarget(bool Control);// 0x8510f20 0x78ce666de0
	void Control_BlockAction();// 0x8510fe4 0x78ce666ec0
	void Control_AutoSprinting();// 0x85110a8 0x78ce666fa0
	void CmdTestReconnect();// 0x8516f44 0x78ce667080
	void CmdTeleport(Vector Loc);// 0x8517174 0x78ce667160
	void CmdSuicide();// 0x85177cc 0x78ce667240
	void CmdSpawnSpecificNPCInDistanceRPC(int NPCId, float Distance);// 0x85174fc 0x78ce667320
	void CmdSpawnSpecificNPCInDistance(int NPCId, float Distance);// 0x85175f8 0x78ce663a40
	void CmdSpawnItem(int ItemId, int Num);// 0x85178d8 0x78ce663b20
	static void CmdResetShowStoreReviewAlert();// 0x85170b0 0x78ce663c00
	void CmdPlayFearlessRPC(int skillid);// 0x8516f58 0x78ce663ce0
	void CmdPlayFearless(int skillid);// 0x8517008 0x78ce663dc0
	void CmdKillAllAroundNpcRPC();// 0x851721c 0x78ce663ea0
	void CmdKillAllAroundNpc();// 0x8517238 0x78ce663f80
	void CmdClearJailChance();// 0x8517708 0x78ce664060
	void CmdChangeHeroAndSkin(int HeroId, int SkinId);// 0x85179c8 0x78ce664140
	void CmdChangeHero(int hero_id);// 0x8517ab8 0x78ce664220
	void CmdAdvPoolTestRaffleItemsRPC(int RaffleNum);// 0x8516c94 0x78ce664300
	void CmdAdvPoolTestRaffleItems(int RaffleNum);// 0x8516d44 0x78ce6643e0
	void CmdAddSmashModePlayerExpRPC(int AddExp);// 0x8516dec 0x78ce6644c0
	void CmdAddSmashModePlayerExp(int AddExp);// 0x8516e9c 0x78ce6645a0
	void CmdAddSkillRPC(int skillid);// 0x851724c 0x78ce664680
	void CmdAddSkill(int skillid);// 0x85172fc 0x78ce664760
	void CmdAddBuffRPC(int buffID);// 0x85173a4 0x78ce664840
	void CmdAddBuff(int buffID);// 0x8517454 0x78ce664920
	void Clinet_OutJail(Rotator Rotation);// 0x8513c84 0x78ce664a00
	void Clinet_OffThePlane(Vector Location, Rotator Rotation);// 0x851535c 0x78ce664ae0
	void ClientRecordPlayerAttack(int TargetId, bool kill);// 0x850fc88 0x78ce664bc0
	void ClientRecordBeAttacked(bool kill);// 0x850fd88 0x78ce664ca0
	void Client_UpdateTouTuoUI(int ID, bool bActive);// 0x85120d4 0x78ce664d80
	void Client_UpdateSacrificeUI(int ID, bool bIsBroken);// 0x85127ac 0x78ce664e60
	void Client_UpdateResourcePoint(int ID, int TeamId);// 0x8511e34 0x78ce664f40
	void Client_UpdateParadropUI(int ID, bool openstate);// 0x8512320 0x78ce665020
	void Client_UpdateMoWenUI(int ID, bool bIsOpen, bool bIsPulled);// 0x85131ac 0x78ce665100
	void Client_UpdateEffectPointInfo(const EffectPointInfo EffectPointInfo);// 0x8512020 0x78ce6651e0
	void Client_UpdateDyingState();// 0x8514580 0x78ce6652c0
	void Client_UpdateDragonRockUI(int ID, bool bShow, bool bOpen);// 0x85129a4 0x78ce6653a0
	void Client_UpdateDamageCircle(int64 begintime, enum CurrentState, int64 waittingtime, int64 shringkingtime, int64 currentradius, int64 nextradius, int64 clocationX, int64 clocationY, int64 clocationZ, int64 nlocationX, int64 nlocationY, int64 nlocationZ, bool islastcircle);// 0x851459c 0x78ce665480
	void Client_UpdateAltarUIData(int ID, int Num);// 0x851343c 0x78ce665560
	void Client_UpdateAdDrugUI(int world_id, bool exist);// 0x8512ee8 0x78ce665640
	void Client_SwichWeapon(int index);// 0x8511be4 0x78ce661d60
	void Client_StartGuide();// 0x8511bac 0x78ce661e40
	void Client_SmashModeUpdateTeamScore(int TeamId, int NewTeamScore);// 0x850ebdc 0x78ce661f20
	void Client_SmashModeUpdateRaffleItemInfoGroup(const AdvPoolRaffleItemInfoGroup NewRaffleItemInfoGroup);// 0x850eda4 0x78ce662000
	void Client_SmashModeUpdateLevel(const int NewLevel);// 0x850eebc 0x78ce6620e0
	void Client_SmashModeUpdateKillNum(int PlayerID, int TeamId, FString PlayerName, int NewKillNum);// 0x850ea40 0x78ce6621c0
	void Client_SmashModeUpdateExpProgress(const float NewExpProgress);// 0x850ef6c 0x78ce6622a0
	void Client_SmashModeUpdateAdvPoolEffectInfo(const AdvPoolEffectInfo NewAdvPoolEffectInfo);// 0x850ecd4 0x78ce662380
	void Client_ShowWinDialog();// 0x8511b3c 0x78ce662460
	void Client_ShowWinButton();// 0x8511b58 0x78ce662540
	void Client_ShowTeachingMission(FString title, const FString[] items, bool bShowCloseButton);// 0x850f038 0x78ce662620
	void Client_ShowNearbyEnemyNum(bool Show, int Num);// 0x8511c94 0x78ce662700
	void Client_ShowMapWidget();// 0x8510938 0x78ce6627e0
	void Client_SetSkillHotKey(enum slottype, int index, int skill_id, bool canuse);// 0x8510970 0x78ce6628c0
	void Client_SetResurrectionInfo(const ResurrectionInfo Info);// 0x851429c 0x78ce6629a0
	void Client_SetOutJammingOpened(bool bNewIsOutJammingOpened);// 0x850fef8 0x78ce662a80
	void Client_SetOutJammingEnabled(bool bNewIsOutJammingEnabled);// 0x850fe40 0x78ce662b60
	void Client_SetGameMode(enum Mode);// 0x85105dc 0x78ce662c40
	void Client_SetDamageFullTime(int64 StartTime, float fulltime);// 0x8511934 0x78ce662d20
	void Client_Record(int64 kill_time);// 0x850ffb0 0x78ce662e00
	void Client_ReconnectUpdate();// 0x8514b10 0x78ce662ee0
	void Client_ReconnectSpawnParadrop(const Vector[] locations, const int[] IDs);// 0x85149e0 0x78ce662fc0
	void Client_RecieveEndGame();// 0x8515a7c 0x78ce6630a0
	void Client_QuitServerGame();// 0x8511bc8 0x78ce663180
	void Client_PostLoginManuallyUpdate();// 0x8514af4 0x78ce663260
	void Client_PlayerExpression(int ID);// 0x85117d4 0x78ce663340
	void Client_PlayerAction(int ID);// 0x8511674 0x78ce663420
	void Client_ParadropReconnect(float lefttime, Vector Location);// 0x8512420 0x78ce663500
	void Client_NotifyPickAdDrug(FString Message);// 0x8512e2c 0x78ce6635e0
	void Client_NotifyJailQueueNum(int Num, int queuenum);// 0x8510b24 0x78ce6636c0
	void Client_NotifyJailClosed();// 0x8510c1c 0x78ce6637a0
	void Client_LoadWeaponSkillConfig();// 0x8513d70 0x78ce663880
	void Client_KnockDowned();// 0x8510818 0x78ce663960
	void Client_JailStartAutoFight(int JailPlayerId);// 0x851086c 0x78ce660080
	void Client_JailQueueRebirth();// 0x8510b08 0x78ce660160
	void Client_InPoisonFog(bool infog);// 0x851068c 0x78ce660240
	void Client_InitVoiceChannel(FString lpChannelName, FString TeamName, const int[] teams);// 0x8515c14 0x78ce660320
	void Client_InitTouTuoUI(int ID, Vector Location, bool bIsInCave);// 0x85121d4 0x78ce660400
	void Client_InitTouGongUI(int ID, Vector Location, bool bIsInCave);// 0x8512be8 0x78ce6604e0
	void Client_InitSacrificeUI(int ID, Vector Location);// 0x85128ac 0x78ce6605c0
	void Client_InitResourcePoint(int ID, const Vector Location);// 0x8511f2c 0x78ce6606a0
	void Client_InitParadropUI(int ID, Vector Location, bool openstate);// 0x8512514 0x78ce660780
	void Client_InitMoWenUI(int ID, Vector Location, float WaitTime);// 0x85132f8 0x78ce660860
	void Client_InitKeyBoxUI(int ID, Vector Location, bool bIsInCave);// 0x8512660 0x78ce660940
	void Client_InitFlyPointUI(int ID, Vector Location);// 0x8512d34 0x78ce660a20
	void Client_InitDragonRockUI(int ID, Vector Location);// 0x8512af0 0x78ce660b00
	void Client_InitAltarUIData(const int[] IDs, const Vector[] locations, const int[] nums);// 0x8513534 0x78ce660be0
	void Client_InitAdDrugUI(const int[] worldids, const int[] itemIDs, const Vector[] locations, const bool[] bIsInCaves);// 0x8512fe8 0x78ce660cc0
	void Client_HideMapWidget();// 0x851091c 0x78ce660da0
	void Client_GameStart();// 0x8510954 0x78ce660e80
	void Client_ForcedDodge();// 0x8510744 0x78ce660f60
	void Client_ForcedCancelBlock();// 0x851399c 0x78ce661040
	void Client_EndGuide();// 0x8511b74 0x78ce661120
	void Client_CloseTeachingMission();// 0x850f01c 0x78ce661200
	void Client_CloseChooseWinMessgae();// 0x8511b20 0x78ce6612e0
	void Client_ClearTarget();// 0x85168f8 0x78ce6613c0
	void Client_CharacterConnectFinish();// 0x8515d80 0x78ce6614a0
	void Client_ChangeTarget(int64 TargetId);// 0x8510e70 0x78ce661580
	void Client_CancelJailStartAutoFight();// 0x8510850 0x78ce661660
	void Client_BlockBreaked();// 0x8510834 0x78ce661740
	void Client_Block(bool bIsForcedBlock);// 0x8510760 0x78ce661820
	void Client_AppendTipMessage(enum TipMessageType, FString Content);// 0x850f4ac 0x78ce661900
	void Client_AppendTeamMessage(FString TeammateName, FString OtherName, const enum TeamMessageType, const enum CauseDyingType, const int causeID);// 0x850f714 0x78ce6619e0
	void Client_AppendPickedMessage(int PickedItemId);// 0x850f664 0x78ce661ac0
	void Client_AppendLearnedMessage(int LearnedItemId);// 0x850f5b4 0x78ce661ba0
	void Client_AppendKnockOutMessage(FString PlayerIconPath, FString DeadName, FString DeadIconPath);// 0x850f340 0x78ce661c80
	void Client_AppendKilledMessage(FString PlayerIconPath, FString KillerName, FString KillerIconPath);// 0x850f1d4 0x78ce63e780
	void Client_AddLoadMap(bool isloadmap, const FName[] Maps);// 0x851447c 0x78ce63e860
	void ClearJailChance();// 0x85176ec 0x78ce63e940
	void CheckLockPointDeath(Actor* Enemy);// 0x8a873f8 0x78ce63ea20
	void CharDestroy();// 0x8516874 0x78ce63eb00
	void ChangeHero(int NewHeroId);// 0x8515454 0x78ce63ebe0
	void ChangeBuffState(int buff_index, BuffPointInfo buff_state);// 0x8513fe4 0x78ce63ecc0
	bool CanInteractive(WuXiaXBaseCharacter* Player, enum Trigger);// 0x8514ed4 0x78ce63eda0
	bool CanInput(enum input_type);// 0x85150f4 0x78ce63ee80
	void Bom_Montage_Play(SkeletalMeshComponent* SkeletalMesh, AnimMontage* MontageToPlay, float delay_time, FName section_name);// 0x8a873f8 0x78ce63ef60
	void BlockBreaked();// 0x8a873f8 0x78ce63f040
	void Block(bool bIsForcedBlock);// 0x8a873f8 0x78ce63f120
	void BeginTeaching(enum Type, FString title, out const FString[] items, bool bShowCloseButton);// 0x85112f8 0x78ce63f200
	void Anim_EndParachuteGliding();// 0x8a873f8 0x78ce63f2e0
	void Anim_EndEffect(int EffectType);// 0x8a873f8 0x78ce63f3c0
	void Anim_BeginParachuteGliding();// 0x8a873f8 0x78ce63f4a0
	void Anim_BeginParachueJump();// 0x8a873f8 0x78ce63f580
	void Anim_BeginEffect(int EffectType);// 0x8a873f8 0x78ce63f660
	void AI_MoveTargetCharacter(int Target, float nearby);// 0x8a873f8 0x78ce63f740
	void AI_MoveCharacter(out const Vector posc, float nearby);// 0x8a873f8 0x78ce63f820
	void AI_LookAt(Vector posc);// 0x8a873f8 0x78ce63f900
	void AI_GetAllHorse(out Vector[] posc);// 0x8a873f8 0x78ce63f9e0
	void AI_CancelMove();// 0x8a873f8 0x78ce63fac0

--------------------------------
Class: WuXiaXNpcCharacter.WuXiaXBaseCharacter.Character.Pawn.Actor.Object
	bool in_jail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1] 0x78cecb2780
	bool jail_fighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1] 0x78cecb2800

--------------------------------
Class: WuXiaXBaseCharacter.Character.Pawn.Actor.Object
	enum CharacterStealthType;//[Offset: 0x4c8, Size: 0x1] 0x78cebcbd20
	ComponentMiddle* middle_component_;//[Offset: 0x4d0, Size: 0x8] 0x78cecb2900
	DeadlyInfo m_FinallyKiller;//[Offset: 0x4d8, Size: 0x18] 0x78cecb2980
	class BuffTipActor* BuffTipActorClass;//[Offset: 0x4f0, Size: 0x8] 0x78cebcbdc0
	ActorComponent*[] game_component_array_;//[Offset: 0x528, Size: 0x10] 0x78cebcbe60
	int player_unique_id_;//[Offset: 0x538, Size: 0x4] 0x78cecb2a80
	enum waist_token_state;//[Offset: 0x53c, Size: 0x1] 0x78cebcbf00
	enum player_type_;//[Offset: 0x53d, Size: 0x1] 0x78cebcbfa0
	AcupointProp[] jingmai_prop_;//[Offset: 0x540, Size: 0x10] 0x78cebcc040
	QuenSkillCD[] quen_skillcd_;//[Offset: 0x550, Size: 0x10] 0x78cebcc0e0
	<int64,int> quen_weaponatk_map_;//[Offset: 0x560, Size: 0x50] 0x78cf15b080
	<int64,int64> quen_buff_map_;//[Offset: 0x5b0, Size: 0x50] 0x78cf15b140
	Rotator SyncServerRotation;//[Offset: 0x600, Size: 0xc] 0x78cecb2f00
	bool player_marked_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1] 0x78cecb2f80
	int hero_id_;//[Offset: 0x610, Size: 0x4] 0x78cecb3000
	enum hero_type_;//[Offset: 0x614, Size: 0x1] 0x78cebcc180
	void UpdatePlayerMarkedState(bool marked);// 0x8a873f8 0x78ceca89e0
	void StealthTakeWeapon(SkeletalMeshComponent* comp);// 0x8a873f8 0x78ceca8ac0
	void SetPlayerWaistTokenState(enum val);// 0x84f5cc0 0x78ceca8ba0
	void SetPlayerUniqueId(int val);// 0x84f5d84 0x78ceca8c80
	void SetPlayerType(enum val);// 0x84f5c00 0x78ceca8d60
	void SetKiller(out const DeadlyInfo Target);// 0x84f5830 0x78ceca8e40
	void SetHeroType(enum val);// 0x84f5a80 0x78ceca8f20
	void SetHeroId(int val);// 0x84f5b40 0x78ceca9000
	void SetGSLimited(Vector Center, float Range);// 0x84f4fd0 0x78ceca5720
	void Server_TestQuenData(int handheldtype, int quenlv, bool Reset);// 0x84f54c8 0x78ceca5800
	void RemoveBuffTip(BuffTipActor* BuffTipActor);// 0x84f4dd8 0x78ceca58e0
	void PlayWeakChangeEffect(bool isweak);// 0x8a873f8 0x78ceca59c0
	void PlayKillerTrace(WuXiaXBaseCharacter* killer);// 0x8a873f8 0x78ceca5aa0
	void PlayClientAttackEffect(float Angle);// 0x8a873f8 0x78ceca5b80
	void PlayBlockEffect();// 0x8a873f8 0x78ceca5c60
	void PlayBeAttackEffect();// 0x8a873f8 0x78ceca5d40
	void PlayAttackEffect();// 0x8a873f8 0x78ceca5e20
	void OnRep_SyncServerRotation();// 0x84f4d94 0x78ceca5f00
	void OnPlayUNIDNotice();// 0x84f4da8 0x78ceca5fe0
	void OnPlayTypeNotice();// 0x84f4d80 0x78ceca60c0
	void OnPlayerLeaveState(enum State);// 0x8a873f8 0x78ceca61a0
	void OnPlayerHpChanged(int currentHP, int maxHP);// 0x8a873f8 0x78ceca6280
	void OnPlayerEnterState(enum State);// 0x8a873f8 0x78ceca6360
	void OnPlayerArmorChanged(float CurrentArmor, float MaxArmor);// 0x8a873f8 0x78ceca6440
	void OnActorChangeVisible();// 0x8a873f8 0x78ceca6520
	void MeshOutOfInvaisibleState();// 0x8a873f8 0x78ceca6600
	void MeshEnterInvaisibleState(enum StealthType);// 0x8a873f8 0x78ceca66e0
	bool IsInCameraView();// 0x84f57f8 0x78ceca67c0
	void InitQuenData(int handheldtype, int quenlv);// 0x84f5614 0x78ceca68a0
	bool GetSimulatePhysicsEnabled();// 0x84f4f7c 0x78ceca6980
	enum GetPlayerWaistTokenState();// 0x84f5d68 0x78ceca6a60
	int GetPlayerUniqueId();// 0x84f5e28 0x78ceca6b40
	enum GetPlayerType();// 0x84f5ca4 0x78ceca6c20
	ComponentMiddle* GetMiddleComponent();// 0x84f5e44 0x78ceca6d00
	DeadlyInfo GetKiller();// 0x84f58f8 0x78ceca6de0
	enum GetHeroType();// 0x84f5b24 0x78ceca6ec0
	int GetHeroId();// 0x84f5be4 0x78ceca6fa0
	ActorComponent* GetGameComponent(enum Type);// 0x84f5e78 0x78ceca7080
	void CustomShowGhostTrails(int TrailNum, float TimeInterval, LinearColor TrailColor);// 0x8a873f8 0x78ceca7160
	void ClientSetRotation(Rotator Rotation);// 0x84f5920 0x78ceca7240
	void ClientSetLocation(Vector Location);// 0x84f59d0 0x78ceca7320
	void Client_UpdateSelfMarkedState(bool marked);// 0x84f50cc 0x78ceca3a40
	void Client_UpdatePlayerMarkedState(int ID, bool marked);// 0x84f5184 0x78ceca3b20
	void Client_UpdateOutLine(bool vis, float Delay);// 0x8a873f8 0x78ceca3c00
	void Client_UpdateMarkedPlayerPos(int ID, int64 markedpos, enum Type);// 0x84f5380 0x78ceca3ce0
	void Client_RemoveMarkedPlayer(int ID, enum Type);// 0x84f5284 0x78ceca3dc0
	void Client_BroadCastAddBuffTip(enum BuffTipType, int BindPlayerId);// 0x84f4e80 0x78ceca3ea0
	void ClearBuffTips();// 0x84f4dc4 0x78ceca3f80
	void CheckHealthBarVisible();// 0x8a873f8 0x78ceca4060
	void AddJingMaiPropValue(int Type, float Value);// 0x84f5704 0x78ceca4140
	void ActiveSettlementCalculate();// 0x84f4fb4 0x78ceca4220

--------------------------------
Class: DeadlyInfo
	int64 m_ReasonID;//[Offset: 0x0, Size: 0x8] 0x78cefcdc00
	enum m_Reason;//[Offset: 0x8, Size: 0x1] 0x78cefd18c0
	int m_Attacker;//[Offset: 0xc, Size: 0x4] 0x78cefcdd00
	int m_UseItem;//[Offset: 0x10, Size: 0x4] 0x78cefcdd80

--------------------------------
Class: ComponentMiddle.ActorComponent.Object
	void View_UpdateOutline(bool vis);// 0x835be10 0x78cebd4680
	void View_ResetPhysicsAsset();// 0x835bdfc 0x78cebd4760
	SkeletalMeshComponentBudgeted* View_GetWeaponComponent(int Key);// 0x835bef8 0x78cebd4840
	Rotator View_GetCharacterSkillRotator();// 0x835bec0 0x78cebd4920
	void Team_SetMark(Vector Location, bool HasMark);// 0x835f264 0x78cebd4a00
	bool Team_HasLifePlayer();// 0x835f4d0 0x78cebd4ae0
	void Team_GetSquadWaistTokenPickUpedPlayerIDs(out int[] IDs);// 0x835f360 0x78cebd4bc0
	FString Team_GetSquadID();// 0x835f420 0x78cebd4ca0
	int Team_GetCurrentVisionPlayerID();// 0x835f230 0x78cebd4d80
	int Team_GetCurrentFollowPlayerID();// 0x835f1fc 0x78cebd4e60
	void Team_ChangeVision(bool isnext);// 0x835f14c 0x78cebd4f40
	void State_SetPlayerTrainExercieseForceGuideType(enum Type);// 0x835f6f4 0x78cebd5020
	void State_SetPlayerEnterDragonRockRange(bool bEnter, Vector Loc);// 0x835f5c4 0x78cebd5100
	enum State_GetPlayerTrainExercieseForceGuideType();// 0x835f6c0 0x78cebd51e0
	bool State_GetPlayerStealthState();// 0x835f79c 0x78cebd52c0
	enum State_GetPlayerMoveState();// 0x835f7d4 0x78cebd53a0
	enum State_GetPlayerMotionState();// 0x835f8bc 0x78cebd5480
	enum State_GetPlayerMainState();// 0x835fb40 0x78cebd5560
	bool State_GetPlayerEnterDragonRockRange(out Vector Loc);// 0x835f508 0x78cebd5640
	enum State_GetPlayerChildState();// 0x835fa58 0x78cebd1d60
	bool State_ChangePlayerState(enum val);// 0x835fa8c 0x78cebd1e40
	bool State_ChangePlayerMoveState(enum val);// 0x835f8f0 0x78cebd1f20
	bool State_ChangePlayerMotionState(enum val);// 0x835f808 0x78cebd2000
	bool State_ChangePlayerChildState(enum val);// 0x835f9a4 0x78cebd20e0
	void Skill_SetPassiveSkill(int64 skillid);// 0x835d5f8 0x78cebd21c0
	void Skill_Server_ClearAllSkill();// 0x835d5e4 0x78cebd22a0
	bool Skill_IsHasSkill(int64 skillid);// 0x835d7fc 0x78cebd2380
	bool Skill_CanUseSkillBook(int ItemId);// 0x835d748 0x78cebd2460
	void Skill_AddSkill(int64 skillid);// 0x835d6a0 0x78cebd2540
	void Sign_SingSelf();// 0x835eac0 0x78cebd2620
	void Sign_SignItem(int itemXlsId);// 0x835e838 0x78cebd2700
	void Sign_SetShield(bool isShowIcon_1_, bool isShowIcon_2_);// 0x835e8e0 0x78cebd27e0
	int Sign_GetTeamPlayerCount();// 0x835e804 0x78cebd28c0
	bool Sign_GetShield(int tempIndex);// 0x835e9d8 0x78cebd29a0
	int Sign_GetSelfPlayerIdIndex();// 0x835ea8c 0x78cebd2a80
	void Sign_ClearSelfData();// 0x835ead4 0x78cebd2b60
	int Property_GetCurrentPlayerSP();// 0x835fba8 0x78cebd2c40
	int Property_GetCurrentPlayerMP();// 0x835fbdc 0x78cebd2d20
	int Property_GetCurrentPlayerMaxHP();// 0x835fc10 0x78cebd2e00
	int Property_GetCurrentPlayerHP();// 0x835fc44 0x78cebd2ee0
	float Property_GetCurrentInjury();// 0x835fb74 0x78cebd2fc0
	bool Property_ChangeCurrentHP(int HP, enum reason, int cause_player, int64 cause_id, enum dying_reason, int item_id);// 0x835fc78 0x78cebd30a0
	void Player_UpdateArrowVisibility(bool Visibility);// 0x835febc 0x78cebd3180
	bool Player_CanInput(enum input_type);// 0x835ff6c 0x78cebd3260
	void Npc_ClearTarget();// 0x835fea8 0x78cebd3340
	void Move_UpdateInput(enum Type, bool Value);// 0x835da60 0x78cebd3420
	bool Move_SwitchMovementModeEvent(byte Mode);// 0x835db5c 0x78cebd3500
	float Move_Parachute_input_right();// 0x835d984 0x78cebd35e0
	float Move_Parachute_input_forward();// 0x835d950 0x78cebd36c0
	bool Move_Can_open_parachute();// 0x835d9f0 0x78cebd37a0
	bool Move_Can_jump_plane();// 0x835da28 0x78cebd3880
	bool Move_Can_close_parachute();// 0x835d9b8 0x78cebd3960
	void ItemCtrl_UI_UseSkillBook(enum bag_type, int index);// 0x835cf44 0x78cebd0080
	void ItemCtrl_UI_UseItem(enum bag_type, int index, int Num);// 0x835d038 0x78cebd0160
	void ItemCtrl_UI_SwapItemToSlot(enum source_bag_type, int source_index, int Num, enum target_bag_type, int target_index);// 0x835d174 0x78cebd0240
	void ItemCtrl_UI_SwapItemToBag(enum source_bag_type, int source_index, int Num, enum target_bag_type);// 0x835d348 0x78cebd0320
	void ItemCtrl_UI_SwapItemHotKey(int SourceIndex, int targetindex);// 0x835cb34 0x78cebd0400
	void ItemCtrl_UI_SetItemHotKey(enum bag_type, int index, int hotkeyindex);// 0x835cccc 0x78cebd04e0
	void ItemCtrl_UI_RemoveItemHotKey(int index);// 0x835cc24 0x78cebd05c0
	void ItemCtrl_UI_DropItem(enum bag_type, int index, int Num);// 0x835ce08 0x78cebd06a0
	void ItemCtrl_UI_AddItemByIndex(int world_id);// 0x835d4d0 0x78cebd0780
	void ItemCtrl_ShowItemDetial(enum bagtype, int index);// 0x835ca40 0x78cebd0860
	void ItemCtrl_Server_AddItem(out const GameItemInfo Item, out int Num);// 0x835c438 0x78cebd0940
	bool ItemCtrl_IsUsingItem();// 0x835c254 0x78cebd0a20
	int ItemCtrl_GetWeaponId(int index);// 0x835c928 0x78cebd0b00
	enum ItemCtrl_GetUseItemState();// 0x835ca0c 0x78cebd0be0
	float ItemCtrl_GetUseItemFullTime();// 0x835c9d8 0x78cebd0cc0
	int ItemCtrl_GetTargetAccIndex(int weaponidx, int acc_item_id, int tar_acc_idx);// 0x835c2f4 0x78cebd0da0
	int ItemCtrl_GetMissileNumByWeaponItemId(int WeaponItemId);// 0x835c1a4 0x78cebd0e80
	int ItemCtrl_GetMaxArmor();// 0x835c28c 0x78cebd0f60
	int ItemCtrl_GetItemShowLevel(enum bagtype, int BagIndex);// 0x835c668 0x78cebd1040
	int ItemCtrl_GetItemNumById(int item_id);// 0x835c878 0x78cebd1120
	GameItemInfo ItemCtrl_GetItemInfo(enum bag_type, int index);// 0x835c764 0x78cebd1200
	int ItemCtrl_GetItemBagTypeAndIndex(int ItemId, out enum bagtype);// 0x835c560 0x78cebd12e0
	int ItemCtrl_GetCurrentArmor();// 0x835c2c0 0x78cebd13c0
	void ItemCtrl_AddItemByItemId(int ItemId, int ItemNum);// 0x835c0b4 0x78cebd14a0
	enum Interactive_GetKeeyInteractiveType();// 0x835c080 0x78cebd1580
	float Interactive_GetKeepingFullTime();// 0x835c018 0x78cebd1660
	float Interactive_GetKeepingCurrentTime();// 0x835c04c 0x78cebd1740
	bool HUD_SwitchToThrowWeapon();// 0x835bfa8 0x78cebd1820
	bool HUD_SwitchToRangeWeapon();// 0x835bfe0 0x78cebd1900
	void HUD_PlayerSetTalkUI(bool visible);// 0x835bd4c 0x78cebd19e0
	enum Horse_Ride_state_net();// 0x835d8b0 0x78cebd1ac0
	WuXiaXHorse* Horse_Ride_horse_net();// 0x835d91c 0x78cebd1ba0
	bool Horse_CallForHorse();// 0x835d8e4 0x78cebd1c80
	bool Fight_Weak_flag();// 0x835edc0 0x78ceb9e780
	enum Fight_TakeWeaponState();// 0x835dfd8 0x78ceb9e860
	void Fight_TakeWeapon(int index, bool take_change, bool send_server, bool is_design);// 0x835e580 0x78ceb9e940
	void Fight_SwitchWeapon(int Value);// 0x835e0f0 0x78ceb9ea20
	void Fight_SwitchThrowWeapon();// 0x835e020 0x78ceb9eb00
	void Fight_SwitchNearWeapon();// 0x835e034 0x78ceb9ebe0
	void Fight_Server_TakeWeapon(int index, bool take_change);// 0x835ecc8 0x78ceb9ecc0
	void Fight_Server_LaunchMissile();// 0x835eb1c 0x78ceb9eda0
	void Fight_ResetBreakBlockTimes();// 0x835dd50 0x78ceb9ee80
	void Fight_ResetBlockSuccessTimes();// 0x835dd98 0x78ceb9ef60
	void Fight_RecordCrosshairTarget();// 0x835dc44 0x78ceb9f040
	void Fight_PlayWuDi();// 0x835e1c0 0x78ceb9f120
	void Fight_PlayShanBi(enum index);// 0x835e454 0x78ceb9f200
	void Fight_PlayQiShen();// 0x835e4fc 0x78ceb9f2e0
	void Fight_NpcSwitchWeapon(int index);// 0x835df30 0x78ceb9f3c0
	void Fight_NpcSetTarget(int index);// 0x835de88 0x78ceb9f4a0
	void Fight_NPCAttackBySkillID(int skill_id);// 0x835ddac 0x78ceb9f580
	void Fight_NormalAttacRelease();// 0x835e1ac 0x78ceb9f660
	void Fight_NormalAttack();// 0x835e7f0 0x78ceb9f740
	void Fight_LaunchMissile(bool bIsAuto);// 0x835eb30 0x78ceb9f820
	bool Fight_Is_in_block();// 0x835ee60 0x78ceb9f900
	void Fight_HeavyAttack();// 0x835e198 0x78ceb9f9e0
	int Fight_GetWuDiId();// 0x835dc10 0x78ceb9fac0
	WuXiaXBaseCharacter* Fight_GetTarget();// 0x835eae8 0x78ceb9fba0
	int Fight_GetSkillLeftCD(int skill_id);// 0x835ebe0 0x78ceb9fc80
	WuXiaXBaseCharacter* Fight_GetSimulatorTarget();// 0x835e714 0x78ceb9fd60
	int Fight_GetCurrentWeaponMode();// 0x835edf8 0x78ceb9fe40
	int Fight_GetCurrentWeapon();// 0x835ee2c 0x78ceb9ff20
	int Fight_GetCurrentSkillId();// 0x835de54 0x78ceb9caa0
	int Fight_GetBreakBlockTimes();// 0x835dd1c 0x78ceb9cb80
	int Fight_GetBlockSuccessTimes();// 0x835dd64 0x78ceb9cc60
	int64 Fight_GetActionLastTime(enum EndActionState);// 0x835e2f4 0x78ceb9cd40
	int Fight_CurrentWeaponType();// 0x835e1d4 0x78ceb9ce20
	void Fight_ClearRangeStateAndSwitchToMainWeapon(bool bChangeToCancel);// 0x835dc6c 0x78ceb9cf00
	void Fight_CheckSound();// 0x835e00c 0x78ceb9cfe0
	bool Fight_CheckIsInSkill();// 0x835e208 0x78ceb9d0c0
	bool Fight_CheckIsInRangeWeaponState();// 0x835e548 0x78ceb9d1a0
	bool Fight_CheckIsInAim();// 0x835ec90 0x78ceb9d280
	bool Fight_CanUseAction(enum ActionCheckType);// 0x835e240 0x78ceb9d360
	bool Fight_CanPlayQiShen();// 0x835e510 0x78ceb9d440
	void Fight_BlockPlay(bool flag);// 0x835e3a4 0x78ceb9d520
	void Fight_AttackByIndexRelease(enum index);// 0x835e048 0x78ceb9d600
	void Fight_AttackByIndex(int index);// 0x835e748 0x78ceb9d6e0
	void Fight_AimCrosshairTarget();// 0x835dc58 0x78ceb9d7c0
	bool Buff_RemoveBuff(int64 buffID, int layer_num);// 0x835ef4c 0x78ceb9d8a0
	bool Buff_CheckBuffExist(int64 buffID);// 0x835ee98 0x78ceb9d980
	bool Buff_BP_AddBuff(int64 buffID, int Num);// 0x835f04c 0x78ceb9da60
	bool Assassin_GetIsFallKill();// 0x835d5ac 0x78ceb9db40
	int Assassin_GetFullActionTime();// 0x835d578 0x78ceb9dc20

--------------------------------
Class: GameItemInfo
	int world_id_;//[Offset: 0x0, Size: 0x4] 0x78cf504e00
	int item_id_;//[Offset: 0x4, Size: 0x4] 0x78cf504e80
	int num_;//[Offset: 0x8, Size: 0x4] 0x78cf504f00
	enum bag_type_;//[Offset: 0xc, Size: 0x1] 0x78cf2cad80
	int bag_index_;//[Offset: 0x10, Size: 0x4] 0x78cf505000
	WeaponItemInfo weapon_iteminfo_;//[Offset: 0x14, Size: 0x38] 0x78cf503680

--------------------------------
Class: WeaponItemInfo
	int item_world_id_;//[Offset: 0x0, Size: 0x4] 0x78cf505080
	int weapon_id_;//[Offset: 0x4, Size: 0x4] 0x78cf505100
	int mode_;//[Offset: 0x8, Size: 0x4] 0x78cf505180
	float attack_;//[Offset: 0xc, Size: 0x4] 0x78cf505200
	float maxdurability_;//[Offset: 0x10, Size: 0x4] 0x78cf505280
	float breakvalue_;//[Offset: 0x14, Size: 0x4] 0x78cf503200
	float bebreakvalue_;//[Offset: 0x18, Size: 0x4] 0x78cf503280
	float speed_;//[Offset: 0x1c, Size: 0x4] 0x78cf503300
	float range_;//[Offset: 0x20, Size: 0x4] 0x78cf503380
	int buff_id_;//[Offset: 0x24, Size: 0x4] 0x78cf503400
	float buff_attack_;//[Offset: 0x28, Size: 0x4] 0x78cf503480
	int durable_;//[Offset: 0x2c, Size: 0x4] 0x78cf503500
	int buff_number_;//[Offset: 0x30, Size: 0x4] 0x78cf503580
	int max_buff_number_;//[Offset: 0x34, Size: 0x4] 0x78cf503600

--------------------------------
Class: WuXiaXHorse.Character.Pawn.Actor.Object
	SceneComponent* horse_offset_component_;//[Offset: 0x4c0, Size: 0x8] 0x78ce6d0b80
	SceneComponent* horse_center_component_;//[Offset: 0x4c8, Size: 0x8] 0x78ce6d0c00
	BoxComponent* hit_box_component_;//[Offset: 0x4d0, Size: 0x8] 0x78ce6d0c80
	BoxComponent* collision_component_;//[Offset: 0x4d8, Size: 0x8] 0x78ce6d0d00
	int64 horse_id_;//[Offset: 0x4e0, Size: 0x8] 0x78ce6d0d80
	WuXiaXBaseCharacter*[] players;//[Offset: 0x4e8, Size: 0x10] 0x78ceddcfe0
	float endurance_;//[Offset: 0x4f8, Size: 0x4] 0x78ce6d0e80
	int64 endurance_net_;//[Offset: 0x500, Size: 0x8] 0x78ce6d0f00
	float rotate_speed_;//[Offset: 0x508, Size: 0x4] 0x78ce6d0f80
	int64 rotate_speed_net_;//[Offset: 0x510, Size: 0x8] 0x78ce6d1000
	int horse_net_id_;//[Offset: 0x518, Size: 0x4] 0x78ce6d1080
	int CustomDepth;//[Offset: 0x51c, Size: 0x4] 0x78ce6af800
	class AnimInstance* anim_instance_class_;//[Offset: 0x520, Size: 0x8] 0x78ceddd080
	class AnimInstance* anim_horse_class_;//[Offset: 0x528, Size: 0x8] 0x78ceddd120
	class AnimInstance* anim_hu_class_;//[Offset: 0x530, Size: 0x8] 0x78ceddd1c0
	PhysicsAsset* physics_horse_;//[Offset: 0x538, Size: 0x8] 0x78ce6af880
	PhysicsAsset* physics_hu_;//[Offset: 0x540, Size: 0x8] 0x78ce6af900
	<int,FXSystemComponent*> PlayerShowWeaponEffectFXComponent;//[Offset: 0x570, Size: 0x50] 0x78cee11cc0
	void UpdateEffect(SkeletalMeshComponent* InMesh, int index, FString EffectRes, FString EffectSocket);// 0x855fdb8 0x78ce6b6d00
	bool Ride(WuXiaXBaseCharacter* Driver, out enum ridestate, int index);// 0x8560098 0x78ce6b6de0
	void OnRepRotate();// 0x855fa00 0x78ce6b6ec0
	void OnRepPlayers();// 0x855fa28 0x78ce6b6fa0
	void OnRepHorseNetID();// 0x855f9ec 0x78ce6b7080
	void OnRepHorseID();// 0x855fa3c 0x78ce6b7160
	void OnRepEndurance();// 0x855fa14 0x78ce6b7240
	void Mul_PlayFallMontage();// 0x855fd88 0x78ce6b7320
	void MeshSetRelativeTransform();// 0x855fa50 0x78ce6b3a40
	bool InteractiveUITips(WuXiaXBaseCharacter* Player, out FText text);// 0x855fb1c 0x78ce6b3b20
	float GetRotationSpeed();// 0x8560030 0x78ce6b3c00
	WuXiaXBaseCharacter* GetRider();// 0x855fffc 0x78ce6b3ce0
	enum GetInteractiveType(WuXiaXBaseCharacter* Player);// 0x855fa64 0x78ce6b3dc0
	float GetCurrentFSpeed();// 0x8560064 0x78ce6b3ea0
	void DisableEffect();// 0x855fda4 0x78ce6b3f80
	bool CanInteractive(WuXiaXBaseCharacter* Player, enum Trigger);// 0x855fc80 0x78ce6b4060

--------------------------------
Class: BuffTipActor.Actor.Object
	enum BuffTipType;//[Offset: 0x220, Size: 0x1] 0x78ceacb000
	void Show();// 0x8a873f8 0x78ceb2f4a0
	void Initialize(enum NewBuffTipType);// 0x832dc48 0x78ceb2f580

--------------------------------
Class: BuffPointInfo
	Vector location_;//[Offset: 0x0, Size: 0xc] 0x78cefc2e00
	int state_;//[Offset: 0xc, Size: 0x4] 0x78cefc2e80

--------------------------------
Class: ResurrectionInfo
	int[] skills_;//[Offset: 0x0, Size: 0x10] 0x78cf2cb140
	int[] weapons_;//[Offset: 0x10, Size: 0x10] 0x78cf2cb1e0
	int[] items_;//[Offset: 0x20, Size: 0x10] 0x78cf2cb280

--------------------------------
Class: HPChangeInfo

--------------------------------
Class: EffectPointInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefc7100
	enum Type;//[Offset: 0x4, Size: 0x1] 0x78cefd0ba0
	int TeamId;//[Offset: 0x8, Size: 0x4] 0x78cefc7200
	Vector Location;//[Offset: 0xc, Size: 0xc] 0x78cefc7280

--------------------------------
Class: AdvPoolRaffleItemInfoGroup
	int RaffleIndex;//[Offset: 0x0, Size: 0x4] 0x78cefc6d80
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cefc6e00
	AdvPoolRaffleItemInfo[] RaffleItemInfos;//[Offset: 0x8, Size: 0x10] 0x78cefd0b00

--------------------------------
Class: AdvPoolRaffleItemInfo
	enum PoolType;//[Offset: 0x0, Size: 0x1] 0x78cefd09c0
	enum BoxQuality;//[Offset: 0x1, Size: 0x1] 0x78cefd0a60
	AdvPoolItemInfo iteminfo;//[Offset: 0x8, Size: 0x40] 0x78cefc6f80
	int ItemNum;//[Offset: 0x48, Size: 0x4] 0x78cefc7000

--------------------------------
Class: AdvPoolItemInfo
	int ItemId;//[Offset: 0x4, Size: 0x4] 0x78cf576e00
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cf576e80
	FString Desc;//[Offset: 0x18, Size: 0x10] 0x78cf576f00
	FString icon;//[Offset: 0x28, Size: 0x10] 0x78cf576f80

--------------------------------
Class: AdvPoolEffectInfo
	int RangeWeaponLevel;//[Offset: 0x0, Size: 0x4] 0x78cefc6700
	int WeaponLevel;//[Offset: 0x4, Size: 0x4] 0x78cefc6780
	int HatLevel;//[Offset: 0x8, Size: 0x4] 0x78cefc6800
	int ArmorLevel;//[Offset: 0xc, Size: 0x4] 0x78cefc6880
	int InternalLevel;//[Offset: 0x10, Size: 0x4] 0x78cefc6900
	int[] itemIDs;//[Offset: 0x18, Size: 0x10] 0x78cefd0600
	AdvPoolBuffInfo[] BuffInfos;//[Offset: 0x28, Size: 0x10] 0x78cefd07e0
	int[] PassiveSkillIds;//[Offset: 0x38, Size: 0x10] 0x78cefd0880
	int GeneralSkillId;//[Offset: 0x48, Size: 0x4] 0x78cefc6c80
	AdvPoolRaffleItemInfo[] SelectItemInfos;//[Offset: 0x50, Size: 0x10] 0x78cefd0920

--------------------------------
Class: AdvPoolBuffInfo
	enum BuffType;//[Offset: 0x0, Size: 0x1] 0x78cefd06a0
	int[] BuffIds;//[Offset: 0x8, Size: 0x10] 0x78cefd0740
	int AddBonuses;//[Offset: 0x18, Size: 0x4] 0x78cefc6b00

--------------------------------
Class: AcupointProp
	int Type;//[Offset: 0x0, Size: 0x4] 0x78cefc9780
	float Value;//[Offset: 0x4, Size: 0x4] 0x78cefc9800

--------------------------------
Class: QuenSkillCD
	int64 skill_id;//[Offset: 0x0, Size: 0x8] 0x78cefca080
	float Value;//[Offset: 0x8, Size: 0x4] 0x78cefca100

--------------------------------
Class: AccomplishmentCompleteHallUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	int64[] AccomplishmentIdArray;//[Offset: 0x330, Size: 0x10] 0x78ceac7040
	FString AccomplishmentImage;//[Offset: 0x340, Size: 0x10] 0x78ceb19280
	FString AccomplishmentName;//[Offset: 0x350, Size: 0x10] 0x78ceb19300
	bool ShowFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1] 0x78ceb19380
	void UpdateAccomplishmentInfoUI();// 0x8a873f8 0x78ceb23c00
	void ShowAccomplishment();// 0x8a873f8 0x78ceb23ce0
	void NextAccomplishment();// 0x83037e4 0x78ceb23dc0

--------------------------------
Class: AccomplishmentCompleteUI.UserWidget.Widget.Visual.Object
	int64[] AccomplishmentIdArray;//[Offset: 0x260, Size: 0x10] 0x78ceac6fa0
	int CurAccomplishmentIndex;//[Offset: 0x270, Size: 0x4] 0x78ceb18d00
	int CurAccomplishmentPoint;//[Offset: 0x274, Size: 0x4] 0x78ceb18d80
	FString CurAccomplishmentName;//[Offset: 0x278, Size: 0x10] 0x78ceb18e00
	FString CurAccomplishmentStatement;//[Offset: 0x288, Size: 0x10] 0x78ceb18e80
	FString CurAccomplishmentImagePath;//[Offset: 0x298, Size: 0x10] 0x78ceb18f00
	int TotalPoint;//[Offset: 0x2a8, Size: 0x4] 0x78ceb18f80
	int CurPoint;//[Offset: 0x2ac, Size: 0x4] 0x78ceb19000
	int CurLevel;//[Offset: 0x2b0, Size: 0x4] 0x78ceb19080
	int CurLevelMaxPoint;//[Offset: 0x2b4, Size: 0x4] 0x78ceb19100
	FString CurLevelImagePath;//[Offset: 0x2b8, Size: 0x10] 0x78ceb19180
	void UpdateLevelProgressUI();// 0x8a873f8 0x78ceb26fa0
	void UpdateLevelInfoUI();// 0x8a873f8 0x78ceb27080
	void UpdateCurPoint();// 0x8303e30 0x78ceb27160
	void UpdateCurLevelInfo();// 0x8303e08 0x78ceb27240
	void UpdateCurAccomplishmentInfo();// 0x8303e1c 0x78ceb27320
	void UpdateAccomplishmentInfoUI();// 0x8a873f8 0x78ceb23a40
	void NextAccomplishment();// 0x8303df4 0x78ceb23b20

--------------------------------
Class: AChievementDetailInfoUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78ceb18a00
	void UpdateItem(out const <int,DateTime> AChievementInfo, out const <int,int> experience);// 0x8a873f8 0x78ceb26ec0

--------------------------------
Class: UserHallUI.GVoiceHallWidget.GVoiceGameWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	delegate on_item_change_;//[Offset: 0x3e0, Size: 0x10] 0x78cede7c80
	bool IsFirstEnterHall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1] 0x78cede7d00
	CanvasPanel* PopFullPanel;//[Offset: 0x3f8, Size: 0x8] 0x78cede7d80
	WidgetSwitcher* PopFullWidget;//[Offset: 0x400, Size: 0x8] 0x78cede7e00
	Image* Background;//[Offset: 0x408, Size: 0x8] 0x78cede7e80
	PlayerEquipUI* CharacterEquipUI;//[Offset: 0x410, Size: 0x8] 0x78cede7f00
	RetainWidget* RetainUI;//[Offset: 0x418, Size: 0x8] 0x78cede7f80
	QuickInviteUI* QuickInviteUI;//[Offset: 0x420, Size: 0x8] 0x78cede8000
	CheckinWidget* CheckinPanel;//[Offset: 0x428, Size: 0x8] 0x78cede8080
	BuyAdvanceCulWidget* BuyAdvancePanel;//[Offset: 0x430, Size: 0x8] 0x78cede8100
	RoomInfoWidget* RoomInfoUI;//[Offset: 0x438, Size: 0x8] 0x78cede8180
	TeachVideoUI* TeachVideoUI;//[Offset: 0x440, Size: 0x8] 0x78cede8200
	OtherPersonalUI* OtherPersonalUI;//[Offset: 0x448, Size: 0x8] 0x78cede8280
	CharacterConfigUI* CharacterConfigUI;//[Offset: 0x450, Size: 0x8] 0x78cede8300
	UI_MobileSetting* MobileSettingUI;//[Offset: 0x458, Size: 0x8] 0x78cede8380
	TianYiGeWidget* TianYiGeUI;//[Offset: 0x460, Size: 0x8] 0x78cede8400
	RankUI* RankUI;//[Offset: 0x468, Size: 0x8] 0x78cede6380
	RankEntranceUI* RankEntranceUI;//[Offset: 0x470, Size: 0x8] 0x78cede6400
	MeridianUI* MeridianUI;//[Offset: 0x478, Size: 0x8] 0x78cede6480
	SeasonPanelUI* SeasonUI;//[Offset: 0x480, Size: 0x8] 0x78cede6500
	FindCombatUI* FindCombatUI;//[Offset: 0x488, Size: 0x8] 0x78cede6580
	CombatTeamUI* CombatTeamUI;//[Offset: 0x490, Size: 0x8] 0x78cede6600
	AChievementDetailInfoUI* AChievementDetailInfo;//[Offset: 0x498, Size: 0x8] 0x78cede6680
	HeroPanelUI* HeroUI;//[Offset: 0x4a0, Size: 0x8] 0x78cede6700
	HeroInfoPanel* HeroInfoUI;//[Offset: 0x4a8, Size: 0x8] 0x78cede6780
	PlayAnimUI* PlayAnimUI;//[Offset: 0x4b0, Size: 0x8] 0x78cede6800
	HeroChangeCloth* HeroChangeClothUI;//[Offset: 0x4b8, Size: 0x8] 0x78cede6880
	HeroSelectUI* HeroSelectUI;//[Offset: 0x4c0, Size: 0x8] 0x78cede6900
	CreateGuildUI* CreateGuildUI;//[Offset: 0x4c8, Size: 0x8] 0x78cede6980
	AccomplishmentCompleteHallUI* AccomplishmentCompleteHallUI;//[Offset: 0x4d0, Size: 0x8] 0x78cede6a00
	ShopPanelUI* ShopUI;//[Offset: 0x4d8, Size: 0x8] 0x78cede6a80
	ShopBuy* ShopBuy;//[Offset: 0x4e0, Size: 0x8] 0x78cede6b00
	CanvasPanel* HallCanvasPanelUI;//[Offset: 0x4e8, Size: 0x8] 0x78cede6b80
	CanvasPanel* CanvasPanelUI;//[Offset: 0x4f0, Size: 0x8] 0x78cede6c00
	GiveGiftUI* GiveGiftUI;//[Offset: 0x4f8, Size: 0x8] 0x78cede6c80
	GiftShowUI* GiftShowUI;//[Offset: 0x500, Size: 0x8] 0x78cede6d00
	int[] FullWidgetRecords;//[Offset: 0x508, Size: 0x10] 0x78cedd3760
	void ZeroAllHat();// 0x8a873f8 0x78cee03ea0
	void ZeroAllEquip();// 0x8a873f8 0x78cee03f80
	void UserRecharge(enum Type, FString Data, enum TradeType);// 0x84ce684 0x78cee04060
	void UpdateUserMoney(int Money);// 0x8a873f8 0x78cee04140
	void UpdateTaskTip();// 0x8a873f8 0x78cee04220
	void UpdateSignalStrength(float ms);// 0x8a873f8 0x78cee04300
	void UpdateServerPackMap(out const BagItemInfo[] allId, out const int[] recentId);// 0x84ce188 0x78cee043e0
	void UpdateSeasonRedPoint(bool bVisible);// 0x8a873f8 0x78cee044c0
	void UpdateSeasonPassInfo();// 0x8a873f8 0x78cee045a0
	void UpdatePackItemNum(int ID, int Num);// 0x84ce098 0x78cee04680
	void UpdateNewName(FString Name);// 0x8a873f8 0x78cee04760
	void UpdateHomePageInfo();// 0x8a873f8 0x78cee04840
	void UpdateHallHeroNewState(bool State);// 0x8a873f8 0x78cee04920
	void UpdateHallBagNewState(bool State);// 0x8a873f8 0x78cee04a00
	void UpdateHallAvatarBorder(PaperSprite* icon);// 0x8a873f8 0x78cee04ae0
	void UpdateHallAvatar(PaperSprite* icon);// 0x8a873f8 0x78cee04bc0
	void UpdateGoldToSilver(int proportion);// 0x8a873f8 0x78cee04ca0
	void UpdateFriendTip();// 0x84ce960 0x78cee04d80
	void UpdateFriendDataList(enum friendDataType);// 0x84ce8b8 0x78cee04e60
	void UpdateFriendChatTip(int Num);// 0x8a873f8 0x78cee04f40
	void UpdateChatNum(int Num);// 0x8a873f8 0x78cee05020
	void UpdateChatChannel(int channel_num);// 0x8a873f8 0x78cee05100
	void UpdateBattleTreasureInfo(int OldChipNum);// 0x8a873f8 0x78cee051e0
	void UpdateActivityRedPinIsShow(bool isShow);// 0x8a873f8 0x78cee052c0
	void Update(FString tipInfo);// 0x8a873f8 0x78cee053a0
	void TeamPlayerTalk(int player_id);// 0x8a873f8 0x78cee05480
	void TeamPlayerEquipChange(int old_item_id, int new_item_id, int user_id);// 0x8a873f8 0x78cee05560
	void TeamEvent(bool hasTeam);// 0x8a873f8 0x78cee05640
	void TeamChangeLook(int player_id, enum sex, FString Name, int user_face, int skin_color, int user_hair, int user_haircolor, PaperSprite* icon);// 0x8a873f8 0x78cee01d60
	void SyncLineUp();// 0x8a873f8 0x78cee01e40
	void StopWaiting();// 0x8a873f8 0x78cee01f20
	void StartWaiting(const float Time);// 0x8a873f8 0x78cee02000
	void StartRoomTick();// 0x8a873f8 0x78cee020e0
	void SoldItemComplete();// 0x8a873f8 0x78cee021c0
	void SoldEquip(int ID, int Num);// 0x8a873f8 0x78cee022a0
	void ShowTsfCandidate(out const FString[] candidateArr);// 0x8a873f8 0x78cee02380
	void ShowTianYiGe();// 0x84ce37c 0x78cee02460
	void ShowSorting();// 0x8a873f8 0x78cee02540
	void ShowShopRedPin(bool bShow);// 0x84ce7d0 0x78cee02620
	void ShowRemindText(out const FText remind);// 0x8a873f8 0x78cee02700
	void ShowReconnect(bool Start);// 0x8a873f8 0x78cee027e0
	void ShowRechargeTip(FString tipInfo);// 0x8a873f8 0x78cee028c0
	void ShowPopTip(FString tipInfo);// 0x8a873f8 0x78cee029a0
	void ShowNewApplyTip(bool tipSwitch);// 0x8a873f8 0x78cee02a80
	void ShowMoneyExchangePanel();// 0x8a873f8 0x78cee02b60
	void ShowMailNewTip(bool isShow);// 0x8a873f8 0x78cee02c40
	void ShowInputName();// 0x8a873f8 0x78cee02d20
	void ShowHeroSelectUI();// 0x8a873f8 0x78cee02e00
	void ShowHeroSelectLayer();// 0x84cde6c 0x78cee02ee0
	void ShowHallTip(enum tipType);// 0x8a873f8 0x78cee02fc0
	void ShowFriendPanel();// 0x8a873f8 0x78cee030a0
	void ShowCTTip(bool Show);// 0x8a873f8 0x78cee03180
	void ShowCreateGuildUI();// 0x84cde58 0x78cee03260
	void ShowCreateCharacter();// 0x8a873f8 0x78cee03340
	void ShowCombatReadinessUI();// 0x8a873f8 0x78cee03420
	void SetWorldTalk(FString Name, FString Info);// 0x8a873f8 0x78cee03500
	void SetWeaponPreview(enum Type, int item_id);// 0x8a873f8 0x78cee035e0
	void SetUserRank(PersonalGameData Rank, int player_id);// 0x8a873f8 0x78cee036c0
	void SetUnlockSystemClicked(enum typr);// 0x8a873f8 0x78cee037a0
	void SetTeamMode(int Mode);// 0x8a873f8 0x78cee03880
	void SetSkinPreview(enum Type, int skin_id);// 0x8a873f8 0x78cee03960
	void SetShowPerson(enum sex_type, int face_id, int skin_color_id, int hair_id, int hair_color_id, out const int[] Equips);// 0x8a873f8 0x78cee00080
	void SetShowHero(int hero_id);// 0x8a873f8 0x78cee00160
	void SetServerMode(int server_id);// 0x8a873f8 0x78cee00240
	void SetPreviewSkin(int player_id, enum Type, int skin_id);// 0x8a873f8 0x78cee00320
	void SetPlayModeState(int Mode, int State);// 0x8a873f8 0x78cee00400
	void SetPlayModeEndTime(int Mode, int days, int Hours, int Minutes, bool is_start);// 0x8a873f8 0x78cee004e0
	void SetPlayMode(int Mode);// 0x8a873f8 0x78cee005c0
	void SetPLayerLoginState(int user_id, int login_state);// 0x8a873f8 0x78cee006a0
	void SetPlayerCapatureVisible(bool flag);// 0x8a873f8 0x78cee00780
	void SetPayGiftNoticeIsShow(bool bIsShow);// 0x8a873f8 0x78cee00860
	void SetPayGiftEntranceIsShow(bool isShow);// 0x8a873f8 0x78cee00940
	void SetPageNum(int Num);// 0x8a873f8 0x78cee00a20
	void SetOnlineType(int online_type);// 0x8a873f8 0x78cee00b00
	void SetMaxPage(int page);// 0x8a873f8 0x78cee00be0
	void SetLeaveTeamButtonValid(bool State);// 0x8a873f8 0x78cee00cc0
	void SetIsMasterMode(bool State);// 0x8a873f8 0x78cee00da0
	void SetFriendYSState(int user_id, int login_state);// 0x8a873f8 0x78cee00e80
	void SetFriendInfo(int ID, FString Name, int login_state, int ys_state, PaperSprite* icon);// 0x8a873f8 0x78cee00f60
	void SetFangChenMiResult(int Type, out const RewardItem[] items);// 0x8a873f8 0x78cee01040
	void SetFangChenMiInfo(out const RewardItem[] items);// 0x8a873f8 0x78cee01120
	void SetEquipPreview(enum Type, int item_id);// 0x8a873f8 0x78cee01200
	void SetDisplayPlayerSkin(enum Type, int ID);// 0x8a873f8 0x78cee012e0
	void SetBattleRewardNoticeIsShow(bool bIsShow);// 0x8a873f8 0x78cee013c0
	void SetBattleRewardEntranceIsShow(bool isShow);// 0x8a873f8 0x78cee014a0
	void SetBatteryPercent(float percent);// 0x8a873f8 0x78cee01580
	void RotatePlayerCapture(float Offset);// 0x8a873f8 0x78cee01660
	void RotateDisplayPlayer(float Offset);// 0x8a873f8 0x78cee01740
	void RestartAdvGuideMessageTips(bool bConfirm);// 0x84ce2b8 0x78cee01820
	void ResetVicRank(out const VictoryRank[] vic_rank);// 0x8a873f8 0x78cee01900
	void ResetTotalRank(out const TotalRank[] total_rank);// 0x8a873f8 0x78cee019e0
	void ResetServerListLanguageInfo();// 0x8a873f8 0x78cee01ac0
	void ResetHallItemLanguageInfo();// 0x8a873f8 0x78cee01ba0
	void ResetGoodsLanguage();// 0x8a873f8 0x78cee01c80
	void ResetFightRank(out const FightRank[] fight_rank);// 0x8a873f8 0x78cedbe780
	void ResetCharacterRotation();// 0x84cdf48 0x78cedbe860
	void RemoveShopUI();// 0x84cddb4 0x78cedbe940
	void RemoveShopBuy();// 0x84cdd6c 0x78cedbea20
	void RemoveGiveGiftUI();// 0x84cdd24 0x78cedbeb00
	void RemoveGiftShowUI();// 0x84cdcdc 0x78cedbebe0
	void RemoveAccomplishmentCompleteHallUI();// 0x84cddfc 0x78cedbecc0
	void RefreshCycleEventEntry();// 0x8a873f8 0x78cedbeda0
	void ReCalculateBoxPrice(int item_id, int Times);// 0x8a873f8 0x78cedbee80
	void ReadyGame();// 0x8a873f8 0x78cedbef60
	void QuitRoomTick();// 0x8a873f8 0x78cedbf040
	void QuitFromRoom();// 0x8a873f8 0x78cedbf120
	void PlayShowHall(byte Mode);// 0x8a873f8 0x78cedbf200
	void PlayHallBG(bool Play);// 0x8a873f8 0x78cedbf2e0
	void PlayerQuitTeam();// 0x8a873f8 0x78cedbf3c0
	void PlayerOtherEquipChange(enum Type, int item_id);// 0x84ce974 0x78cedbf4a0
	void PlayerNameRepeat();// 0x8a873f8 0x78cedbf580
	void PlayerLevelUpdate();// 0x8a873f8 0x78cedbf660
	void PlayerJoinTeam(int invite_id, FString Name, int head_id, int border_id, enum sex, int Level, int seg);// 0x8a873f8 0x78cedbf740
	void PlayerJoinedRoom(out const UIRoomInfo room, int master_id, out const RoomUser[] users, FString pwd);// 0x8a873f8 0x78cedbf820
	void PlayerInviteResponse(FString Name, int Result);// 0x8a873f8 0x78cedbf900
	void PlayerInviteFriendResponse(FString Name, int Result);// 0x8a873f8 0x78cedbf9e0
	void PlayerEquipChange(int item_id, int item_num);// 0x8a873f8 0x78cedbfac0
	void PlayerEquip(out const int[] Equips);// 0x8a873f8 0x78cedbfba0
	void PlayerChangeHero(int hero_id, int skin_id);// 0x8a873f8 0x78cedbfc80
	void PlayerBeInvite(int invite_id, FString Name, int head_id, int border_id, enum sex, int Level, int seg);// 0x8a873f8 0x78cedbfd60
	void PersonalUIClosed(int idx);// 0x8a873f8 0x78cedbfe40
	void OpenPersonal();// 0x8a873f8 0x78cedbff20
	void OpenCombatTeamEntrance();// 0x8a873f8 0x78cedbcaa0
	void OpenAntiAddictionKitTimer();// 0x8a873f8 0x78cedbcb80
	void OnExchangeMoneySuccess();// 0x8a873f8 0x78cedbcc60
	void ObtainNewItems(out const RewardItem[] items);// 0x8a873f8 0x78cedbcd40
	void ObtainNewItem(FString Name, Texture2D* icon);// 0x8a873f8 0x78cedbce20
	void ObtainNewHero(int HeroId);// 0x8a873f8 0x78cedbcf00
	void ObtainNewBox(int item_id, FString Name, FString IconPath, bool is_need_key);// 0x8a873f8 0x78cedbcfe0
	void MoveCharacterToTryLoc();// 0x8a873f8 0x78cedbd0c0
	void MailNewTip();// 0x8a873f8 0x78cedbd1a0
	void LoginCharacterMoveComplete();// 0x8a873f8 0x78cedbd280
	void LoadUrl(FString URL);// 0x8a873f8 0x78cedbd360
	void JiHuoMaItems(out const RewardItem[] JHMrewards);// 0x8a873f8 0x78cedbd440
	void JiHuoMaItemAppend(FString Name, PaperSprite* Texture);// 0x8a873f8 0x78cedbd520
	void InitTeamInfo();// 0x8a873f8 0x78cedbd600
	void InitServerList(out const int[] server_list);// 0x8a873f8 0x78cedbd6e0
	void InitCharacterInfo(enum sex_type, FString Name, int face_id, int skin_color_id, int hair_id, int hair_color_id, int Money, int rank_score);// 0x8a873f8 0x78cedbd7c0
	void Init();// 0x8a873f8 0x78cedbd8a0
	void HideUrl();// 0x8a873f8 0x78cedbd980
	void HideSorting();// 0x8a873f8 0x78cedbda60
	void HideReconnect();// 0x8a873f8 0x78cedbdb40
	void HideAdLoad();// 0x8a873f8 0x78cedbdc20
	void HandleFirstLoginFlow();// 0x84ce368 0x78cedbdd00
	void HallRemind(out const FText remind);// 0x8a873f8 0x78cedbdde0
	void GetWeReqData(FString Data, out FString rid, out FString yid, out FString str, out FString tmp, out FString ign, out FString wel);// 0x84ce390 0x78cedbdec0
	void GetPackItemRequest(out const <int,int> Item);// 0x84cdf5c 0x78cedbdfa0
	void GetOriginPlayerDecoration(out <enum,int> PreviewMap, out int[] Equips);// 0x8a873f8 0x78cedbe080
	void GetHallCanvasPanelUI();// 0x8a873f8 0x78cedbe160
	FindCombatUI* GetFindCombatUI();// 0x8a873f8 0x78cedbe240
	CombatTeamUI* GetCombatTeamUI();// 0x8a873f8 0x78cedbe320
	void GetCanvasPanelUI();// 0x8a873f8 0x78cedbe400
	void FightTask();// 0x8a873f8 0x78cedbe4e0
	void DoubleItemIsExpired();// 0x8a873f8 0x78cedbe5c0
	void DestroyVideoPanel();// 0x8a873f8 0x78cedbe6a0
	void DestroyShopPanel();// 0x8a873f8 0x78cedbadc0
	void DestroySeasonPanel();// 0x8a873f8 0x78cedbaea0
	void DestroyOtherPersonalPanel();// 0x8a873f8 0x78cedbaf80
	void DestroyHeroSelectPanel();// 0x8a873f8 0x78cedbb060
	void DestroyHeroPanel();// 0x8a873f8 0x78cedbb140
	void DestroyCombatReadinessPanel();// 0x8a873f8 0x78cedbb220
	void DestoryCreateGuildUI();// 0x84cde44 0x78cedbb300
	void DeleteRoomDispatch(UIRoomInfo room);// 0x8a873f8 0x78cedbb3e0
	void DeleteRoomComplete();// 0x8a873f8 0x78cedbb4c0
	void DecoratePlayer(int ID, int index);// 0x8a873f8 0x78cedbb5a0
	void CreateTeachVideoUI();// 0x84cdf20 0x78cedbb680
	ShopPanelUI* CreateShopUI();// 0x84cddc8 0x78cedbb760
	ShopBuy* CreateShopBuy();// 0x84cdd80 0x78cedbb840
	void CreateSeasonUI();// 0x84cdee4 0x78cedbb920
	void CreateRooms(out const UIRoomInfo[] rooms);// 0x8a873f8 0x78cedbba00
	void CreateRoomInfoUI();// 0x84cdf34 0x78cedbbae0
	void CreateRoomComplete();// 0x8a873f8 0x78cedbbbc0
	bool CreatePopFullWidgets();// 0x84ce880 0x78cedbbca0
	void CreatePlayAnimUI();// 0x84cdea8 0x78cedbbd80
	void CreateOtherPersonalUI();// 0x84cdf0c 0x78cedbbe60
	void CreateHeroUI();// 0x84cded0 0x78cedbbf40
	void CreateHeroSelectUI();// 0x84cde80 0x78cedbc020
	void CreateHeroInfoPanel();// 0x84cdebc 0x78cedbc100
	void CreateHeroChangeCloth();// 0x84cde94 0x78cedbc1e0
	GiveGiftUI* CreateGiveGiftUI();// 0x84cdd38 0x78cedbc2c0
	GiftShowUI* CreateGiftShowUI();// 0x84cdcf0 0x78cedbc3a0
	void CreateCharacterConfigUI();// 0x84cdef8 0x78cedbc480
	void CreateBuyBox(int random_box, int fixed_box, out const int[] others);// 0x8a873f8 0x78cedbc560
	void CreateAChievementDetailInfoUI();// 0x84ce2a4 0x78cedbc640
	AccomplishmentCompleteHallUI* CreateAccomplishmentCompleteHallUI();// 0x84cde10 0x78cedbc720
	void ComfirmMaster(int master_id);// 0x8a873f8 0x78cedbc800
	void CombatReadinessChangeHero(int user_id, int hero_id, int skin_id, out const int[] skin_list);// 0x8a873f8 0x78cedbc8e0
	void ClickBlank();// 0x8a873f8 0x78cedbc9c0
	void ClearTeam();// 0x8a873f8 0x78cedb90e0
	void ClearAllEquip();// 0x8a873f8 0x78cedb91c0
	void CheckShowStoreReviewAlert();// 0x84cdcc8 0x78cedb92a0
	void CheckResetSortState();// 0x8a873f8 0x78cedb9380
	void CheckLockedSystemsShowOrHide();// 0x8a873f8 0x78cedb9460
	bool CheckIsMaster();// 0x8a873f8 0x78cedb9540
	bool CheckIsInTeam();// 0x8a873f8 0x78cedb9620
	void CharacterUpdateSkinColor(int ColorId);// 0x8a873f8 0x78cedb9700
	void CharacterUpdateSex(enum sex);// 0x8a873f8 0x78cedb97e0
	void CharacterUpdateHead(int FaceID);// 0x8a873f8 0x78cedb98c0
	void CharacterUpdateHairColor(int ColorId);// 0x8a873f8 0x78cedb99a0
	void CharacterUpdateHair(int HairID);// 0x8a873f8 0x78cedb9a80
	void ChangeSkinEquip(out const int[] ID);// 0x8a873f8 0x78cedb9b60
	void ChangeHeroInfoPosition(float X, float Y, float Z);// 0x8a873f8 0x78cedb9c40
	void ChangeClothEquip(out const int[] ID);// 0x8a873f8 0x78cedb9d20
	void ChangeBagTopic(int cur_topic);// 0x8a873f8 0x78cedb9e00
	void BuyKeyResponse(int item_id, PaperSprite* Texture);// 0x8a873f8 0x78cedb9ee0
	void BP_PlayVoiceMessage(FString FieldId);// 0x8a873f8 0x78cedb9fc0
	void BackToHall();// 0x8a873f8 0x78cedba0a0
	void AutoToLine(int Mode);// 0x8a873f8 0x78cedba180
	void AppendGongGao(enum Type, out const FText Info);// 0x8a873f8 0x78cedba260

--------------------------------
Class: GVoiceHallWidget.GVoiceGameWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	VoiceMessageMeta[] m_MessagePool;//[Offset: 0x368, Size: 0x10] 0x78cebc5d80
	FString[] m_MessagePlayList;//[Offset: 0x380, Size: 0x10] 0x78cebc5e20
	FString[] m_PrepareDownloadList;//[Offset: 0x390, Size: 0x10] 0x78cebc5ec0
	FString[] m_DownloadingList;//[Offset: 0x3a0, Size: 0x10] 0x78cebc5f60
	FString m_PlayingMessage;//[Offset: 0x3b0, Size: 0x10] 0x78cec00980
	FString m_ReadyToPlay;//[Offset: 0x3c0, Size: 0x10] 0x78cec00a00
	FString m_DownloadingMessage;//[Offset: 0x3d0, Size: 0x10] 0x78cec00a80
	void UploadRecordMessage();// 0x8390724 0x78cebf22a0
	void StopRecordMessage();// 0x83907e8 0x78cebf2380
	void StartRecordMessage();// 0x83907fc 0x78cebf2460
	void ReadyToTranslate();// 0x83904a0 0x78cebf2540
	void ReadyToMessage();// 0x8390810 0x78cebf2620
	bool PlayMessage(FString fileID);// 0x83904b4 0x78cebf2700
	void JoinTeamVoiceRoom();// 0x8390838 0x78cebf27e0
	FString GetValidDownloadPath(FString fileID);// 0x8390574 0x78cebf28c0
	FString GetRecordMessagePath();// 0x8390738 0x78cebf29a0
	void ExitTeamVoiceRoom();// 0x8390824 0x78cebf2a80
	void DownloadMessage(FString fileID);// 0x8390670 0x78cebf2b60
	void BP_StopPlayMessage(FString fileID);// 0x8a873f8 0x78cebf2c40

--------------------------------
Class: GVoiceGameWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void SetWorldSpeaker(bool enable);// 0x838d594 0x78cebf2d20
	void SetWorldMic(bool enable);// 0x838d644 0x78cebf2e00
	void SetTeamSpeaker(bool enable);// 0x838d6f4 0x78cebf2ee0
	void SetTeamMic(bool enable);// 0x838d7a4 0x78cebf2fc0
	void RequestTeamPlayerMemBerId();// 0x838d3e4 0x78cebf30a0
	void OpenSpeaker();// 0x838d868 0x78cebf3180
	void OpenMic();// 0x838d890 0x78cebf3260
	bool IsInTeam();// 0x838d42c 0x78cebf3340
	bool IsInRoom();// 0x838d464 0x78cebf3420
	FString GetTeamName();// 0x838d02c 0x78cebf3500
	int GetTeamIDByPlayerID(int PlayerID);// 0x838d334 0x78cebf35e0
	int GetRoomIDByPlayerID(int PlayerID);// 0x838d284 0x78cebf36c0
	int GetMicLevel();// 0x838d3f8 0x78cebf37a0
	void ForbidPlayer(int ID, bool enable);// 0x838d49c 0x78cebf3880
	void DispatchPlayerVoiceStatus(int PlayerID, bool chatting);// 0x838d18c 0x78cebf3960
	void CloseSpeaker();// 0x838d854 0x78cebf0080
	void CloseMic();// 0x838d87c 0x78cebf0160
	void BP_OnUploadFile(int code, FString FilePath, FString fileID);// 0x8a873f8 0x78cebf0240
	void BP_OnTextToSpeech(int nCode, FString text, int lang, FString fileID);// 0x8a873f8 0x78cebf0320
	void BP_OnStreamSpeechToText(int code, int Error, FString Result, FString voicePath);// 0x8a873f8 0x78cebf0400
	void BP_OnStatusUpdate(int Status, FString RoomName, int memberID);// 0x8a873f8 0x78cebf04e0
	void BP_OnSpeechTranslate(int nCode, FString srcText, FString targetText, FString targetFileID, int srcFileDuration);// 0x8a873f8 0x78cebf05c0
	void BP_OnSpeechToText(int code, FString fileID, FString Result);// 0x8a873f8 0x78cebf06a0
	void BP_OnSaveRecFileIndex(int code, FString fileID, int fileindex);// 0x8a873f8 0x78cebf0780
	void BP_OnRSTS(int nCode, int srcLang, int targetLang, FString srcText, FString targetText, FString targetFileID, int srcFileDuration);// 0x8a873f8 0x78cebf0860
	void BP_OnRoomMemberInfo(int code, FString RoomName, int memid, FString openID);// 0x8a873f8 0x78cebf0940
	void BP_OnRoleChanged(int code, FString RoomName, int memberID, int Role);// 0x8a873f8 0x78cebf0a20
	void BP_OnReportPlayer(int nCode, FString cszInfo);// 0x8a873f8 0x78cebf0b00
	void BP_OnRecording(FString pAudioData, int dataLength);// 0x8a873f8 0x78cebf0be0
	void BP_OnRealTimeTranslateText(FString RoomName, int memberID, FString SessionId, int seq, FString text);// 0x8a873f8 0x78cebf0cc0
	void BP_OnQuitRoom(int code, FString RoomName);// 0x8a873f8 0x78cebf0da0
	void BP_OnPlayRecordedFile(int code, FString FilePath);// 0x8a873f8 0x78cebf0e80
	void BP_OnMuteSwitchResult(int nState);// 0x8a873f8 0x78cebf0f60
	void BP_OnMemberVoice_status(FString RoomName, int member, int Status);// 0x8a873f8 0x78cebf1040
	void BP_OnMemberVoice_list(out const <int,int> members);// 0x8a873f8 0x78cebf1120
	void BP_OnJoinRoom(int code, FString RoomName, int memberID);// 0x8a873f8 0x78cebf1200
	void BP_OnEvent(int Event, FString Info);// 0x8a873f8 0x78cebf12e0
	void BP_OnEnableTranslate(int code, FString RoomName, int transType);// 0x8a873f8 0x78cebf13c0
	void BP_OnEnableMagicVoice(int code, FString RoomName, FString magicType, bool enable);// 0x8a873f8 0x78cebf14a0
	void BP_OnDownloadFile(int code, FString FilePath, FString fileID);// 0x8a873f8 0x78cebf1580
	void BP_OnApplyMessageKey(int code);// 0x8a873f8 0x78cebf1660
	void BP_Join();// 0x838d8a4 0x78cebf1740
	void BP_InitializeSDK();// 0x838d8b8 0x78cebf1820
	int BP_GetTeamMemberPlayerID(int memberID);// 0x838d0dc 0x78cebf1900

--------------------------------
Class: VoiceMessageMeta
	FString localID;//[Offset: 0x0, Size: 0x10] 0x78cefbf580
	FString fileID;//[Offset: 0x10, Size: 0x10] 0x78cefbf600

--------------------------------
Class: BagItemInfo
	int item_id;//[Offset: 0x0, Size: 0x4] 0x78cf578180
	int item_num;//[Offset: 0x4, Size: 0x4] 0x78cf578200
	bool is_new;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf578280
	int64 time_limit;//[Offset: 0x10, Size: 0x8] 0x78cf578300

--------------------------------
Class: PersonalGameData
	int64 user_id;//[Offset: 0x0, Size: 0x8] 0x78cf59ad80
	enum team_mode;//[Offset: 0x8, Size: 0x1] 0x78cf5654c0
	int season_id;//[Offset: 0xc, Size: 0x4] 0x78cf59ae80
	float kill_point;//[Offset: 0x10, Size: 0x4] 0x78cf59af00
	float top_five_point;//[Offset: 0x14, Size: 0x4] 0x78cf59af80
	float hurt_point;//[Offset: 0x18, Size: 0x4] 0x78cf59b000
	float equipment_point;//[Offset: 0x1c, Size: 0x4] 0x78cf59b080
	float total_point;//[Offset: 0x20, Size: 0x4] 0x78cf59b100
	int total_evaluate_score;//[Offset: 0x24, Size: 0x4] 0x78cf59b180
	int game_times;//[Offset: 0x28, Size: 0x4] 0x78cf59b200
	int top_one_times;//[Offset: 0x2c, Size: 0x4] 0x78cf59b280
	int top_five_times;//[Offset: 0x30, Size: 0x4] 0x78cf59b300
	int kill_num;//[Offset: 0x34, Size: 0x4] 0x78cf59b380
	int max_live_time;//[Offset: 0x38, Size: 0x4] 0x78cf59b400
	int avarage_live_time;//[Offset: 0x3c, Size: 0x4] 0x78cf59b480
	int get_treasure_num;//[Offset: 0x40, Size: 0x4] 0x78cf59b500
	int rescue_count;//[Offset: 0x44, Size: 0x4] 0x78cf59b580
	int resurgence_count;//[Offset: 0x48, Size: 0x4] 0x78cf599500
	int max_kill_num;//[Offset: 0x4c, Size: 0x4] 0x78cf599580
	int range_kill_num;//[Offset: 0x50, Size: 0x4] 0x78cf599600
	int assassinate_num;//[Offset: 0x54, Size: 0x4] 0x78cf599680
	int shoot_kill_num;//[Offset: 0x58, Size: 0x4] 0x78cf599700
	int max_add_hp;//[Offset: 0x5c, Size: 0x4] 0x78cf599780
	int max_hurt_num;//[Offset: 0x60, Size: 0x4] 0x78cf599800
	int win_altar_num;//[Offset: 0x64, Size: 0x4] 0x78cf599880
	int max_rescue_count;//[Offset: 0x68, Size: 0x4] 0x78cf599900

--------------------------------
Class: RewardItem
	int id_;//[Offset: 0x0, Size: 0x4] 0x78cf575b00
	int num_;//[Offset: 0x4, Size: 0x4] 0x78cf575b80
	int percent_;//[Offset: 0x8, Size: 0x4] 0x78cf575c00
	int time_limt_;//[Offset: 0xc, Size: 0x4] 0x78cf575c80
	FString name_;//[Offset: 0x10, Size: 0x10] 0x78cf575d00
	FString desc_;//[Offset: 0x20, Size: 0x10] 0x78cf575d80
	FString iconPath_;//[Offset: 0x30, Size: 0x10] 0x78cf575e00
	enum TableType;//[Offset: 0x40, Size: 0x1] 0x78cf561d20
	FString iconpath_big_;//[Offset: 0x48, Size: 0x10] 0x78cf575f00
	enum rewardPinZhi_;//[Offset: 0x58, Size: 0x1] 0x78cf561dc0
	FString signpath_;//[Offset: 0x60, Size: 0x10] 0x78cf576000
	int RealId;//[Offset: 0x70, Size: 0x4] 0x78cf576080

--------------------------------
Class: VictoryRank
	int sort_;//[Offset: 0x0, Size: 0x4] 0x78cefce180
	int player_id;//[Offset: 0x4, Size: 0x4] 0x78cefce200
	FString player_name;//[Offset: 0x8, Size: 0x10] 0x78cefce280
	int Score;//[Offset: 0x18, Size: 0x4] 0x78cefce300
	int victory_num;//[Offset: 0x1c, Size: 0x4] 0x78cefce380
	int front_ten_num;//[Offset: 0x20, Size: 0x4] 0x78cefce400
	float victory_rate;//[Offset: 0x24, Size: 0x4] 0x78cefce480

--------------------------------
Class: TotalRank
	int sort_;//[Offset: 0x0, Size: 0x4] 0x78cefcde00
	int player_id;//[Offset: 0x4, Size: 0x4] 0x78cefcde80
	FString player_name;//[Offset: 0x8, Size: 0x10] 0x78cefcdf00
	int Score;//[Offset: 0x18, Size: 0x4] 0x78cefcdf80
	int Time;//[Offset: 0x1c, Size: 0x4] 0x78cefce000
	int victory_score;//[Offset: 0x20, Size: 0x4] 0x78cefce080
	int fight_score;//[Offset: 0x24, Size: 0x4] 0x78cefce100

--------------------------------
Class: FightRank
	int sort_;//[Offset: 0x0, Size: 0x4] 0x78cefce500
	int player_id;//[Offset: 0x4, Size: 0x4] 0x78cefce580
	FString player_name;//[Offset: 0x8, Size: 0x10] 0x78cefce600
	int Score;//[Offset: 0x18, Size: 0x4] 0x78cefce680
	int kill_num;//[Offset: 0x1c, Size: 0x4] 0x78cefce700
	int max_kill;//[Offset: 0x20, Size: 0x4] 0x78cefcc680
	float kill_rate;//[Offset: 0x24, Size: 0x4] 0x78cefcc700

--------------------------------
Class: UIRoomInfo
	int play_mode_;//[Offset: 0x0, Size: 0x4] 0x78cefcf900
	int map_id_;//[Offset: 0x4, Size: 0x4] 0x78cefcf980
	FString room_title_;//[Offset: 0x8, Size: 0x10] 0x78cefcfa00
	int room_current_player_num_;//[Offset: 0x18, Size: 0x4] 0x78cefcfa80
	int room_max_player_num_;//[Offset: 0x1c, Size: 0x4] 0x78cefcfb00
	int team_player_num_;//[Offset: 0x20, Size: 0x4] 0x78cefcfb80
	bool watch_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x78cefcfc00
	int preinstall_mode_;//[Offset: 0x28, Size: 0x4] 0x78cefcfc80
	int server_id_;//[Offset: 0x2c, Size: 0x4] 0x78cefcfd00
	bool secret_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cefcfd80
	bool event_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78cefcfe00
	bool add_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x78cefcfe80
	bool pwd_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x78cefcff00
	int view_num_;//[Offset: 0x34, Size: 0x4] 0x78cefcff80
	int season_;//[Offset: 0x38, Size: 0x4] 0x78cefce780
	FString creater_;//[Offset: 0x40, Size: 0x10] 0x78cefce800
	uint64 start_time_;//[Offset: 0x50, Size: 0x8] 0x78cefce880
	int room_state_;//[Offset: 0x70, Size: 0x4] 0x78cefce900
	bool can_orp_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78cefce980
	uint32 index_;//[Offset: 0x78, Size: 0x4] 0x78cefcea00

--------------------------------
Class: RoomUser
	FString name_;//[Offset: 0x0, Size: 0x10] 0x78cefcea80
	int id_;//[Offset: 0x10, Size: 0x4] 0x78cefceb00
	enum user_type_;//[Offset: 0x14, Size: 0x1] 0x78cefd3c60
	int team_id_;//[Offset: 0x18, Size: 0x4] 0x78cefcec00

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0xa1738b8 0x78ce75f660

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28] 0x78ce79b480
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78ce79b500
	int ZOrder;//[Offset: 0x64, Size: 0x4] 0x78ce79b580
	void SetZOrder(int InZOrder);// 0xa174174 0x78ce7c1c80
	void SetSize(Vector2D InSize);// 0xa1745d8 0x78ce75e780
	void SetPosition(Vector2D InPosition);// 0xa1746b0 0x78ce75e860
	void SetOffsets(Margin InOffset);// 0xa1744f8 0x78ce75e940
	void SetMinimum(Vector2D InMinimumAnchors);// 0xa17409c 0x78ce75ea20
	void SetMaximum(Vector2D InMaximumAnchors);// 0xa173ff8 0x78ce75eb00
	void SetLayout(out const AnchorData InLayoutData);// 0xa1747c0 0x78ce75ebe0
	void SetAutoSize(bool InbAutoSize);// 0xa174254 0x78ce75ecc0
	void SetAnchors(Anchors InAnchors);// 0xa174414 0x78ce75eda0
	void SetAlignment(Vector2D InAlignment);// 0xa174338 0x78ce75ee80
	int GetZOrder();// 0xa174140 0x78ce75ef60
	Vector2D GetSize();// 0xa1745a4 0x78ce75f040
	Vector2D GetPosition();// 0xa17467c 0x78ce75f120
	Margin GetOffsets();// 0xa1744c0 0x78ce75f200
	AnchorData GetLayout();// 0xa174754 0x78ce75f2e0
	bool GetAutoSize();// 0xa17421c 0x78ce75f3c0
	Anchors GetAnchors();// 0xa1743dc 0x78ce75f4a0
	Vector2D GetAlignment();// 0xa174304 0x78ce75f580

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10] 0x78cf053680
	Anchors Anchors;//[Offset: 0x10, Size: 0x10] 0x78cf053700
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8] 0x78cf053780

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x11c, Size: 0x4] 0x78ce893980
	void SetActiveWidgetIndex(int index);// 0xa1cbe9c 0x78ce882700
	void SetActiveWidget(Widget* Widget);// 0xa1cbdec 0x78ce8827e0
	Widget* GetWidgetAtIndex(int index);// 0xa1cbd3c 0x78ce8828c0
	int GetNumWidgets();// 0xa1cbf80 0x78ce8829a0
	int GetActiveWidgetIndex();// 0xa1cbf4c 0x78ce882a80
	Widget* GetActiveWidget();// 0xa1cbd08 0x78ce882b60

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 0x88] 0x78ce79ee80
	delegate BrushDelegate;//[Offset: 0x190, Size: 0x10] 0x78ce79ef00
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 0x10] 0x78ce79ef80
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10] 0x78ce79f000
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x78ce79f080
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 0x10] 0x78ce79f100
	void SetOpacity(float InOpacity);// 0xa183380 0x78ce7c21c0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xa183428 0x78ce7c22a0
	void SetBrushTintColor(SlateColor TintColor);// 0xa183144 0x78ce7c2380
	void SetBrushSize(Vector2D DesiredSize);// 0xa1832dc 0x78ce7c2460
	void SetBrushResourceObject(Object* ResourceObject);// 0xa18309c 0x78ce7c2540
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0xa182aec 0x78ce7c2620
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0xa182d14 0x78ce7c2700
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0xa1828b4 0x78ce7c27e0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0xa182788 0x78ce7c28c0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xa182a3c 0x78ce7c29a0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0xa182bf0 0x78ce7c2a80
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xa182e18 0x78ce7c2b60
	void SetBrush(out const SlateBrush InBrush);// 0xa182ec8 0x78ce7c2c40
	MaterialInstanceDynamic* GetDynamicMaterial();// 0xa182754 0x78ce7c2d20

--------------------------------
Class: PlayerEquipUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	CharacterConfigUI* CharacterConfigUI;//[Offset: 0x330, Size: 0x8] 0x78ced3b000
	DisplayActor* DisplayActor;//[Offset: 0x338, Size: 0x8] 0x78ced3b080
	int[] server_recentGetId;//[Offset: 0x340, Size: 0x10] 0x78ced233a0
	void UpdateServerPackItemMap(out const BagItemInfo[] allId, out const int[] recentId);// 0x844c9d8 0x78ced43500
	void UpdateSelectedNum(int ID);// 0x8a873f8 0x78ced435e0
	void UpdateItemNum(int ID, int Num);// 0x8a873f8 0x78ced436c0
	void UpdateHallItemTime(int item_id, int64 item_time);// 0x8a873f8 0x78ced437a0
	void UpdateCurrency();// 0x8a873f8 0x78ced43880
	void UpdateAllItem(out const BagItemInfo[] allId, out const int[] recentId);// 0x8a873f8 0x78ced43960
	void SwitchBagTopic(int cur_topic);// 0x8a873f8 0x78ced40080
	void SetSkinPreview(int skin_id, enum Type);// 0x8a873f8 0x78ced40160
	void SetSkinEquip(int skin_id, int Type);// 0x8a873f8 0x78ced40240
	void SetSellAndUse(bool use, bool sell);// 0x8a873f8 0x78ced40320
	void SetSelectedByScrollBoxIndex(int ID, int Num, int index);// 0x8a873f8 0x78ced40400
	void SetPackEquipInfo(FString Name, int Num, FString Desc);// 0x8a873f8 0x78ced404e0
	void SetNewItemState(int item_id, bool flag);// 0x8a873f8 0x78ced405c0
	void SetModelVisible(bool flag);// 0x844c664 0x78ced406a0
	void SetModelByID(enum Type, int ID);// 0x844c828 0x78ced40780
	void SetImage(FString IconPath);// 0x8a873f8 0x78ced40860
	void SetEquip(enum Type, int ID);// 0x8a873f8 0x78ced40940
	void SetCurSelectedScrollBoxId(int ID, int Num);// 0x8a873f8 0x78ced40a20
	void RemoveHallItem(int item_id, enum Type);// 0x8a873f8 0x78ced40b00
	void PrintUsedText(out const <int,int> Item);// 0x8a873f8 0x78ced40be0
	void PlayerOtherEquipChange(enum Type, int item_id);// 0x8a873f8 0x78ced40cc0
	void InsertRecentId(int ID);// 0x844c91c 0x78ced40da0
	void InitEquip(out const int[] Equips);// 0x8a873f8 0x78ced40e80
	void Init_Test();// 0x844c9c4 0x78ced40f60
	void Init(out const BagItemInfo[] allId, out const int[] recentId);// 0x844caf4 0x78ced41040
	void HallRemind(out const FText Name);// 0x8a873f8 0x78ced41120
	PaperSprite* GetSkinIcon(int item_id);// 0x844cc24 0x78ced41200
	void GetSkinDetail(int skin_id, out FString Name, out FString detail, out int Type, out int Level, out enum sex);// 0x844d280 0x78ced412e0
	void GetOpenBoxIcon(int item_id, out PaperSprite* openIcon, out PaperSprite* ItemIcon);// 0x844cd84 0x78ced413c0
	PaperSprite* GetItemIcon(int item_id);// 0x844ccd4 0x78ced414a0
	enum GetItemHallTypeById(int item_id);// 0x844c5b4 0x78ced41580
	void GetItemDetail(int item_id, out FString Name, out FString detail, out enum Type, out int Level, out enum sex);// 0x844d4e8 0x78ced41660
	enum GetHallItemTypeById(int ID);// 0x844c504 0x78ced41740
	void GetHallItemInfo(int item_id, out FString Name, out PaperSprite* icon, out enum Type, out int Level);// 0x844d07c 0x78ced41820
	int GetHallIdNum(int ID, out const BagItemInfo[] allId);// 0x844c714 0x78ced41900
	void GetConsumeInfo(int item_id, out bool valid_item, out int consume_id, out bool need_consume);// 0x844ced4 0x78ced419e0
	void DestroyCharacterConfigUI();// 0x8a873f8 0x78ced41ac0
	void CreateRecentItem(int ID, int Num);// 0x8a873f8 0x78ced41ba0
	void CreateItemByType(int ID, int Num, enum Type);// 0x8a873f8 0x78ced41c80
	void CreateItem(int ID, int Num);// 0x8a873f8 0x78cecfe780
	void CreateHallItem(int item_id, int Num, enum Typ, int64 limitTime);// 0x8a873f8 0x78cecfe860
	void CreateCharacterConfigUI();// 0x844cc10 0x78cecfe940
	void CloseBagPop(int ID, int curnum, int Num);// 0x8a873f8 0x78cecfea20
	void ClearCurrentSelected(int ID);// 0x8a873f8 0x78cecfeb00
	void ClearAllSelected();// 0x8a873f8 0x78cecfebe0
	void ClearAllItem();// 0x8a873f8 0x78cecfecc0
	void ClearAllEquip();// 0x8a873f8 0x78cecfeda0
	void CharacterUpdateSkinColor(int ColorId);// 0x8a873f8 0x78cecfee80
	void CharacterUpdateSex(enum sex);// 0x8a873f8 0x78cecfef60
	void CharacterUpdateHead(int FaceID);// 0x8a873f8 0x78cecff040
	void CharacterUpdateHairColor(int ColorId);// 0x8a873f8 0x78cecff120
	void CharacterUpdateHair(int HairID);// 0x8a873f8 0x78cecff200
	void ChangeBagTopic(int cur_topic);// 0x8a873f8 0x78cecff2e0
	void AppendHallItem(int item_id, int Num, enum Type);// 0x8a873f8 0x78cecff3c0

--------------------------------
Class: CharacterConfigUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78ceb47a80
	PlayerBagUI* PlayerBagUI;//[Offset: 0x338, Size: 0x8] 0x78ceb47b00
	PlayerEquipUI* PlayerEquipUI;//[Offset: 0x340, Size: 0x8] 0x78ceb47b80
	FString PlayerName;//[Offset: 0x348, Size: 0x10] 0x78ceb47c00
	bool IsReConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x78ceb47c80
	int default_hero_id_a_;//[Offset: 0x35c, Size: 0x4] 0x78ceb47d00
	int default_hero_id_b_;//[Offset: 0x360, Size: 0x4] 0x78ceb47d80
	void UpdateMoney(int Money);// 0x8a873f8 0x78ceb61ba0
	void ReversePlayerName();// 0x8a873f8 0x78ceb61c80
	void ResetCharShow();// 0x8a873f8 0x78ceb2e780
	void InitName(FString Name);// 0x8a873f8 0x78ceb2e860
	void InitData();// 0x832f4e0 0x78ceb2e940
	void InitCharacterData(enum sex, int FaceID, int SkinColorId, int HairID, int HairColorID);// 0x8a873f8 0x78ceb2ea20
	PlayerEquipUI* GetUPlayerEquipUI();// 0x832f4c4 0x78ceb2eb00
	void CreateModel(int ID, out const enum sex_type, out const enum model_type, PaperSprite* normal_texture);// 0x8a873f8 0x78ceb2ebe0
	void CreateColor(int ID, out const enum Type, out const LinearColor Color);// 0x8a873f8 0x78ceb2ecc0
	void CreateCharacter();// 0x8a873f8 0x78ceb2eda0
	void CheckPlayerChange();// 0x8a873f8 0x78ceb2ee80
	void ChangeHero(int hero_id);// 0x8a873f8 0x78ceb2ef60

--------------------------------
Class: PlayerBagUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	CharacterConfigUI* CharacterConfigUI;//[Offset: 0x330, Size: 0x8] 0x78ceceb100
	DisplayActor* DisplayActor;//[Offset: 0x338, Size: 0x8] 0x78ceceb180
	void UpdateHallItemTime(int item_id, int64 item_time);// 0x8a873f8 0x78cecf6440
	void SwitchBagTopic(int cur_topic);// 0x8a873f8 0x78cecf6520
	void SetSkinPreview(int skin_id, enum Type);// 0x8a873f8 0x78cecf6600
	void SetSkinEquip(int skin_id, int Type);// 0x8a873f8 0x78cecf66e0
	void SetNewItemState(int item_id, bool flag);// 0x8a873f8 0x78cecf67c0
	void SetModelVisible(bool flag);// 0x83fe2a8 0x78cecf68a0
	void SetModelByID(enum Type, int ID);// 0x83fe358 0x78cecf6980
	void SetEquipItem(int item_id, int item_num);// 0x8a873f8 0x78cecf6a60
	void SetEquip(enum Type, int ID);// 0x8a873f8 0x78cecf6b40
	void RemoveHallItem(int item_id, enum Type);// 0x8a873f8 0x78cecf6c20
	void PlayerOtherEquipChange(enum Type, int item_id);// 0x8a873f8 0x78cecf6d00
	void InitEquip(out const int[] Equips);// 0x8a873f8 0x78cecf6de0
	void InitAllEquip();// 0x83fef8c 0x78cecf6ec0
	void HallRemind(out const FText Name);// 0x8a873f8 0x78cecf6fa0
	PaperSprite* GetSkinIcon(int item_id);// 0x83fe460 0x78cecf7080
	void GetSkinDetail(int skin_id, out FString Name, out FString detail, out int Type, out int Level, out enum sex);// 0x83feabc 0x78cecf7160
	void GetOpenBoxIcon(int item_id, out PaperSprite* openIcon, out PaperSprite* ItemIcon);// 0x83fe5c0 0x78cecf7240
	PaperSprite* GetItemIcon(int item_id);// 0x83fe510 0x78cecf7320
	enum GetItemHallTypeById(int item_id);// 0x83fe1f8 0x78cecf3a40
	void GetItemDetail(int item_id, out FString Name, out FString detail, out enum Type, out int Level, out enum sex);// 0x83fed24 0x78cecf3b20
	void GetHallItemInfo(int item_id, out FString Name, out PaperSprite* icon, out enum Type, out int Level);// 0x83fe8b8 0x78cecf3c00
	void GetConsumeInfo(int item_id, out bool valid_item, out int consume_id, out bool need_consume);// 0x83fe710 0x78cecf3ce0
	BagItemInfo[] GetAllBagItems();// 0x83fefa0 0x78cecf3dc0
	void DestroyCharacterConfigUI();// 0x8a873f8 0x78cecf3ea0
	void CreateHallItem(int item_id, int Num, enum Typ, int64 limitTime);// 0x8a873f8 0x78cecf3f80
	void CreateCharacterConfigUI();// 0x83fe44c 0x78cecf4060
	void ClearAllItem();// 0x8a873f8 0x78cecf4140
	void ClearAllEquip();// 0x8a873f8 0x78cecf4220
	void CharacterUpdateSkinColor(int ColorId);// 0x8a873f8 0x78cecf4300
	void CharacterUpdateSex(enum sex);// 0x8a873f8 0x78cecf43e0
	void CharacterUpdateHead(int FaceID);// 0x8a873f8 0x78cecf44c0
	void CharacterUpdateHairColor(int ColorId);// 0x8a873f8 0x78cecf45a0
	void CharacterUpdateHair(int HairID);// 0x8a873f8 0x78cecf4680
	void ChangeBagTopic(int cur_topic);// 0x8a873f8 0x78cecf4760
	void AppendHallItem(int item_id, int Num, enum Type);// 0x8a873f8 0x78cecf4840

--------------------------------
Class: DisplayActor.Actor.Object
	SkeletalMeshComponent* Weapon_;//[Offset: 0x220, Size: 0x8] 0x78cebe4180
	SkeletalMeshComponent* Sheath_;//[Offset: 0x228, Size: 0x8] 0x78cebe4200
	StaticMeshComponent* StataicMesh_;//[Offset: 0x230, Size: 0x8] 0x78cebe2180
	class AnimInstance* anim_horse_class_;//[Offset: 0x238, Size: 0x8] 0x78cebc3440
	class AnimInstance* anim_tiger_class_;//[Offset: 0x240, Size: 0x8] 0x78cebc34e0
	<int,NiagaraComponent*> PlayerShowWeaponEffectFXComponent;//[Offset: 0x248, Size: 0x50] 0x78cf1597c0
	int WeaponSkinID;//[Offset: 0x298, Size: 0x4] 0x78cebe2300
	int PosIndex;//[Offset: 0x29c, Size: 0x4] 0x78cebe2380
	FString PresetName;//[Offset: 0x2a0, Size: 0x10] 0x78cebe2400
	void UpdateEffect(SkeletalMeshComponent* Mesh, int index, FString EffectRes, FString EffectSocket);// 0x836fc08 0x78cebdc720
	void SetWeaponRelativeLocationAndRotation(Vector Location, Rotator Rotation);// 0x836ffe4 0x78cebdc800
	void SetWeaponMaterialInstance(SkeletalMeshComponent* Mesh, int SkinId, int index);// 0x836fab8 0x78cebdc8e0
	void SetSkinID(int SkinId);// 0x836fe4c 0x78cebdc9c0
	void SetShealthRelativeLocationAndRotation(Vector Location, Rotator Rotation);// 0x836fef4 0x78cebd90e0
	void SetRotate(Vector2D Offset);// 0x8a873f8 0x78cebd91c0
	void SetMeshRelativePosition();// 0x8a873f8 0x78cebd92a0
	void SetMainMeshOffset(Vector Offset, bool isMainMesh);// 0x8a873f8 0x78cebd9380
	void SetHorseMaterialInstance(SkeletalMeshComponent* Mesh, int SkinId);// 0x836f8d0 0x78cebd9460
	void SetFlyToolMaterialInstance(SkeletalMeshComponent* Mesh, int SkinId);// 0x836f9c4 0x78cebd9540
	void SetAutoRotator(Rotator Rotator);// 0x8a873f8 0x78cebd9620
	void SetAnimation(FString Path);// 0x8a873f8 0x78cebd9700
	void RotateStart();// 0x8a873f8 0x78cebd97e0
	void RotateEnd();// 0x8a873f8 0x78cebd98c0
	void ResetRotate();// 0x8a873f8 0x78cebd99a0
	void PlayHorseAnimation();// 0x8a873f8 0x78cebd9a80
	class Object LoadAnimBlueprint(FString Path);// 0x83700d4 0x78cebd9b60
	void DisableEffect();// 0x836fbf4 0x78cebd9c40
	void DisableAutoRotate();// 0x8a873f8 0x78cebd9d20

--------------------------------
Class: RetainWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	WidgetSwitcher* RetainSwitcher;//[Offset: 0x348, Size: 0x8] 0x78ced77a80
	ActiviyWidget* ActivityPanel;//[Offset: 0x350, Size: 0x8] 0x78ced77b00
	PlayerLvWidget* PlayerLvPanel;//[Offset: 0x358, Size: 0x8] 0x78ced77b80
	RetainBaseWidget* CheckinInnerPanel;//[Offset: 0x360, Size: 0x8] 0x78ced77c00
	CultivateRewardWidget* CultivateRewardPanel;//[Offset: 0x368, Size: 0x8] 0x78ced77c80
	CultivateTaskWidget* CultivateTaskPanel;//[Offset: 0x370, Size: 0x8] 0x78ced77d00
	CultivateExchangeWidget* CultivateExchangeWidget;//[Offset: 0x378, Size: 0x8] 0x78ced77d80
	void UpdateTaskOnlineTime(int Time);// 0x8483a04 0x78ced6b920
	void UpdatePlayerMoney(int Num, enum Type);// 0x8a873f8 0x78ced6ba00
	void ShowTaskRedTip();// 0x8a873f8 0x78ced6bae0
	void OpenSeason();// 0x8a873f8 0x78ced6bbc0
	void OpenRetain();// 0x8a873f8 0x78ced6bca0
	bool CreateRetainChildWidgets();// 0x8483ac0 0x78ced6bd80
	void CreateCurrencyItems();// 0x8483aac 0x78ced6be60

--------------------------------
Class: RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	ClientLoginHUD* ClientLoginHUD;//[Offset: 0x330, Size: 0x8] 0x78ceb1a900
	ClientNetMessageHandle* ClientNetMessageHandle;//[Offset: 0x338, Size: 0x8] 0x78ceb1a980
	ClientNetMessageHandle* GetClientNetMsgHandle();// 0x848357c 0x78ceb25720
	ClientLoginHUD* GetClientLoginHUD();// 0x84835b0 0x78ceb25800

--------------------------------
Class: ClientNetMessageHandle.BaseNetHandle.Actor.Object
	bool is_sorting_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78ceba5400
	FString tencent_map_key;//[Offset: 0x270, Size: 0x10] 0x78ceba5480
	bool IsReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78ceba5500
	bool is_ping_net_callback_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1] 0x78ceba5580
	bool is_connected_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1] 0x78ceba5600
	int connect_counter_;//[Offset: 0x284, Size: 0x4] 0x78ceba5680
	FString connect_str_;//[Offset: 0x288, Size: 0x10] 0x78ceba5700
	FString ip_;//[Offset: 0x2c8, Size: 0x10] 0x78ceba5780
	int port_;//[Offset: 0x2d8, Size: 0x4] 0x78ceba5800
	FString user_name_;//[Offset: 0x2e0, Size: 0x10] 0x78ceba5880
	int money_;//[Offset: 0x2f0, Size: 0x4] 0x78ceba5900
	int64 login_gateway_session_id_;//[Offset: 0x2f8, Size: 0x8] 0x78ceba5980
	FString login_gateway_passwd_;//[Offset: 0x300, Size: 0x10] 0x78ceba5a00
	enum user_sex_;//[Offset: 0x310, Size: 0x1] 0x78cebc10a0
	int face_id_;//[Offset: 0x314, Size: 0x4] 0x78ceba5b00
	int hair_id_;//[Offset: 0x318, Size: 0x4] 0x78ceba5b80
	int skin_color_id_;//[Offset: 0x31c, Size: 0x4] 0x78ceba5c00
	int hair_color_id_;//[Offset: 0x320, Size: 0x4] 0x78ceba5c80
	int buy_key_id_;//[Offset: 0x324, Size: 0x4] 0x78ceba5d00
	int play_mode_;//[Offset: 0x328, Size: 0x4] 0x78ceba5d80
	int server_id_;//[Offset: 0x32c, Size: 0x4] 0x78ceba5e00
	int master_id_;//[Offset: 0x330, Size: 0x4] 0x78ceba5e80
	int avatar_id_;//[Offset: 0x334, Size: 0x4] 0x78ceba5f00
	int avatar_border_id_;//[Offset: 0x338, Size: 0x4] 0x78ceba5f80
	int CurHeroID;//[Offset: 0x33c, Size: 0x4] 0x78ceba6000
	bool has_remind_fangchenmi_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x78ceba6080
	<int,bool> player_items_state_;//[Offset: 0x360, Size: 0x50] 0x78cf15a000
	<int,BagItemInfo> bag_item_map_;//[Offset: 0x3b0, Size: 0x50] 0x78cf15a0c0
	<int,BagItemInfo> bag_skin_map_;//[Offset: 0x400, Size: 0x50] 0x78cf15a180
	<int,BagItemInfo> bag_horse_map_;//[Offset: 0x450, Size: 0x50] 0x78cf15a240
	<int,BagItemInfo> bag_itemtool_map_;//[Offset: 0x4a0, Size: 0x50] 0x78cf15a300
	<int,BagItemData> item_topic_map_;//[Offset: 0x4f0, Size: 0x50] 0x78cf15a3c0
	<int,int> shop_item_limit_map;//[Offset: 0x540, Size: 0x50] 0x78cf15a480
	int current_topic;//[Offset: 0x590, Size: 0x4] 0x78ceba4700
	int current_season_id;//[Offset: 0x594, Size: 0x4] 0x78ceba4780
	SeasonInfoData[] season_data;//[Offset: 0x598, Size: 0x10] 0x78cebc1140
	SeasonTaskData[] season_task_data;//[Offset: 0x5a8, Size: 0x10] 0x78cebc11e0
	<int,RegionTree> region_tree;//[Offset: 0x5c8, Size: 0x50] 0x78cf15a540
	int finished_op_task_id;//[Offset: 0x618, Size: 0x4] 0x78ceba4a00
	int finished_ns_task_id;//[Offset: 0x61c, Size: 0x4] 0x78ceba4a80
	YaPaiInfo ShowingYaPaiInfo;//[Offset: 0x620, Size: 0x68] 0x78ceba4b00
	int hisrec_rank;//[Offset: 0x688, Size: 0x4] 0x78ceba4b80
	enum hisrec_team_mode;//[Offset: 0x68c, Size: 0x1] 0x78cebc1280
	enum hisrec_mode;//[Offset: 0x68d, Size: 0x1] 0x78cebc1320
	void WishingRequest(int LotteryID, int DrawType, enum WishingType);// 0x8349220 0x78ceb9af80
	void WeChatRefreshToken(FString refresh_token);// 0x834f198 0x78ceb9b060
	void WeChatGetToken(FString code);// 0x834f294 0x78ceb9b140
	void WatchADSucRequst(int sort_id);// 0x834fa88 0x78ceb9b220
	void UserSetReceiptDataRequest(int Type, FString receipt_data, int user_id, bool issandbox, FString product_id, int State);// 0x834e8d8 0x78ceb9b300
	void UserRechargeResultRequest(enum Type, FString order_id);// 0x834eb10 0x78ceb9b3e0
	void UserRechargeRequest(enum Type, int recharge_id, enum TradeType);// 0x834ec10 0x78ceb9b4c0
	bool TeamIsAllReady();// 0x8353380 0x78ceb9b5a0
	void SwitchGiftStateRequest(int gift_id, enum Result, int bg_type, FString words);// 0x835221c 0x78ceb9b680
	void SubmitFeedbackRequest(int FeedbackType, FString FeedbackContent);// 0x8348d2c 0x78ceb9b760
	void StartTick(out const UIRoomInfo room);// 0x834f730 0x78ceb9b840
	void StartGame(out const UIRoomInfo room);// 0x834f538 0x78ceb9b920
	void ShopRequestOtherData();// 0x834ed50 0x78ceb9ba00
	void ShopRequestBuyItems(ShopBuyInfo[] ShopBuyInfoArray);// 0x834ed64 0x78ceb9bae0
	void ShopDiscountRequest();// 0x834e8c4 0x78ceb9bbc0
	void ShopDiscountBuyRequest(int shop_discountId, int shop_id);// 0x834e7d4 0x78ceb9bca0
	void SetOnlineState(int State);// 0x8350e1c 0x78ceb9bd80
	void SendTeamModeChange(int team_mode, int play_mode);// 0x8353c14 0x78ceb9be60
	void SendTeamIsReady(bool IsReady);// 0x8353d04 0x78ceb9bf40
	void SendTeamInviteResponse(int send_id, int Result);// 0x83535bc 0x78ceb9c020
	void SendTeamInviteList(out const FString[] Name);// 0x8353a10 0x78ceb9c100
	void SendTeamInvite(const FString Name);// 0x8353b04 0x78ceb9c1e0
	void SendTeamDataRequest();// 0x8353e70 0x78ceb9c2c0
	void SendSeasonPassBuySenior(int BuyInfo);// 0x834913c 0x78ceb9c3a0
	void SendSeasonPassBuyLevel(int Level);// 0x8349094 0x78ceb9c480
	void SendSearchPlayerByName(FString Name);// 0x8352d10 0x78ceb9c560
	void SendReviewedItem(int item_id);// 0x8351658 0x78ceb9c640
	void SendRegisterMsg(FString account_name, FString PassWord, const FString active_code, int Type);// 0x83548b4 0x78ceb9c720
	void SendReconstructCharacterCreateInfo(FString user_name, int user_hair, int user_face, enum user_sex, int user_skin, int user_hairco);// 0x8353fc0 0x78ceb9c800
	void SendReconnect();// 0x8354390 0x78ceb9c8e0
	void SendRechargeItemRequest(int LotteryID, int ShopId, int ItemCount);// 0x834935c 0x78ceb9c9c0
	void SendRecentTeamerRequest();// 0x8352ef4 0x78ceb990e0
	void SendQuitTeamRequest();// 0x8353c00 0x78ceb991c0
	void SendPlayerReconnectGame(bool isRoom, bool Result);// 0x834f440 0x78ceb992a0
	void SendPlayerName(FString Name, enum sex);// 0x8353ec0 0x78ceb99380
	void SendPlayerAccountState(enum State);// 0x8348e2c 0x78ceb99460
	void SendNeedNotTrain(int Mode);// 0x834f82c 0x78ceb99540
	void SendLoginMsg(FString user_name, FString PassWord, int Type);// 0x8354508 0x78ceb99620
	void SendLineUp(int line_mode, int server_mode, int play_mode);// 0x83543b8 0x78ceb99700
	void SendKickTeamer(int ID);// 0x8353514 0x78ceb997e0
	void SendJoinTeamResponse(FString Name, int Type);// 0x8353814 0x78ceb998c0
	void SendJoinTeamByChannel(FString Name);// 0x8353760 0x78ceb999a0
	void SendJoinTeam(FString Name);// 0x835395c 0x78ceb99a80
	void SendItemRequest();// 0x8353e98 0x78ceb99b60
	void SendGoodsItemRequest();// 0x8353e5c 0x78ceb99c40
	void SendGiveMaster(int ID);// 0x835346c 0x78ceb99d20
	void SendFriendRequest();// 0x8353e84 0x78ceb99e00
	void SendFiveMinutesRefuse(FString Name);// 0x83533b8 0x78ceb99ee0
	void SendFangChenMi(FString Name, FString ID, bool is_send);// 0x83510c8 0x78ceb99fc0
	void SendEquipChange(int origin_item_id, int new_item_id, int item_num);// 0x8351a20 0x78ceb9a0a0
	void SendCoinRequest();// 0x8351644 0x78ceb9a180
	void SendChooseHero(int HeroId);// 0x83542e8 0x78ceb9a260
	void SendCharacterInfoRequest();// 0x8353eac 0x78ceb9a340
	void SendCharacterCreateInfo(FString Name, enum sex);// 0x83541e8 0x78ceb9a420
	void SendChangeThemeEquipRequest(enum Type, int old_id, int new_id);// 0x8351700 0x78ceb9a500
	void SendChangeEquipTopicRequest(int new_topic);// 0x8351b5c 0x78ceb9a5e0
	void SendChangeAccountPWRequest(FString account_name, FString old_password, const FString new_password);// 0x8354708 0x78ceb9a6c0
	void SendCancelLineUp();// 0x83543a4 0x78ceb9a7a0
	void SendAllocAccountRequest(int login_type);// 0x8354660 0x78ceb9a880
	void SendAdvanceSearchPlayer(enum findrel, enum time1, enum time2, enum segtype, enum sex, int RegionCode);// 0x8352aec 0x78ceb9a960
	void SellItem(int item_id);// 0x8350ec4 0x78ceb9aa40
	void SaveMobileLocationRequest(float Longitude, float Latitude);// 0x835245c 0x78ceb9ab20
	void ResetPlayerPreviewWeapon();// 0x834de9c 0x78ceb9ac00
	void ResetPlayerPreviewTheme();// 0x834de74 0x78ceb9ace0
	void ResetPlayerPreviewSkin();// 0x834de88 0x78ceb97400
	void ResetPlayerPreviewEquip();// 0x834deb0 0x78ceb974e0
	void ResetPlayerEquipedAll(int cur_topic);// 0x834dec4 0x78ceb975c0
	void ResetPlayerEquiped();// 0x834df6c 0x78ceb976a0
	void RequestYapaiInfoRequest(int user_id);// 0x834d6b0 0x78ceb97780
	void RequestVoiceMemberID(int[] player_id_list);// 0x834a8b4 0x78ceb97860
	void RequestUserSeasonInfo(int UserId, int seasonId);// 0x834d948 0x78ceb97940
	void RequestUserAcuData();// 0x834cc54 0x78ceb97a20
	void RequestUsePackItem(int ID, int Num, FString ChangeName);// 0x834d758 0x78ceb97b00
	void RequestUseOfficialPlan(int planId, int offiId);// 0x834c56c 0x78ceb97be0
	void RequestUseActionOrEmojiRequest(bool is_action, int use_id);// 0x8349e24 0x78ceb97cc0
	void RequestSuiPianNum();// 0x834c1f8 0x78ceb97da0
	void RequestStageItemAndItem();// 0x834bbe8 0x78ceb97e80
	void RequestStagehopItem(int64 ItemId, int ItemCount);// 0x834baf4 0x78ceb97f60
	void RequestShopScoreOpenBox();// 0x834e124 0x78ceb98040
	void RequestSellPackItem(int ID, int Num);// 0x834a614 0x78ceb98120
	void RequestSeasonTask();// 0x834ef0c 0x78ceb98200
	void RequestSeasonReward(int task_id);// 0x834ee64 0x78ceb982e0
	void RequestSeasonPassWeekTask();// 0x83491f8 0x78ceb983c0
	void RequestSeasonPassTaskComplete(int ActivityId, int Type);// 0x8348fa4 0x78ceb984a0
	void RequestSeasonPassReward();// 0x83491e4 0x78ceb98580
	void RequestSeasonData();// 0x834ef20 0x78ceb98660
	void RequestResetSkinColorRequest(int suit_id);// 0x834a04c 0x78ceb98740
	void RequestResetQuen(int weapontype);// 0x8348bc8 0x78ceb98820
	void RequestResetAcuLevel(int[] acuId);// 0x834c65c 0x78ceb98900
	void RequestRecommondItemAndItem();// 0x834bae0 0x78ceb989e0
	void RequestRecommondhopItem(int64 ItemId, int ItemCount);// 0x834b9ec 0x78ceb98ac0
	void RequestRecieveOpReward(int task_id);// 0x834c058 0x78ceb98ba0
	void RequestRecieveNSReward(int task_id);// 0x834bf88 0x78ceb98c80
	void RequestRecieveNSProReward(int task_id);// 0x834bee0 0x78ceb98d60
	void RequestRecieveNewbieReward(int ID);// 0x8349540 0x78ceb98e40
	void RequestRecieveGlobalActReward(int act_id, int pro);// 0x834bdc8 0x78ceb98f20
	void RequestRechargeState();// 0x834a9c4 0x78ceb99000
	void RequestRecentTeamListForInvite();// 0x8352ecc 0x78ceb95720
	void RequestRecentTeamData();// 0x8352ee0 0x78ceb95800
	void RequestReceiveProficiencyReward(int64 hero_id, int proficiency_level);// 0x8349b08 0x78ceb958e0
	void RequestRankRewardReceive(int RewardId);// 0x8349624 0x78ceb959c0
	void RequestRankRewardInfo();// 0x83496cc 0x78ceb95aa0
	void RequestRankInfo(int sort_type, int rank_type, int server_type);// 0x8351228 0x78ceb95b80
	void RequestQuickLevelUp(<int,int> Map);// 0x834c758 0x78ceb95c60
	void RequestQuenWeapon(int weapontype);// 0x8348c70 0x78ceb95d40
	void RequestPrivacySettings();// 0x834df80 0x78ceb95e20
	void RequestPrefrentialRedPoint();// 0x834bcf0 0x78ceb95f00
	void RequestPreferentialShopItem(int64 ItemId, int ItemCount);// 0x834bbfc 0x78ceb95fe0
	void RequestPreferentialItemAndItem();// 0x834bd04 0x78ceb960c0
	void RequestPraise(int user_id);// 0x834d8a0 0x78ceb961a0
	void RequestPlayerRankInfo(int player_id, int sort_type, int season_id);// 0x8351364 0x78ceb96280
	void RequestPlayerAttribute();// 0x834e0fc 0x78ceb96360
	void RequestPickSui(int Type);// 0x834c2c8 0x78ceb96440
	void RequestPersonalBase(int user_id);// 0x834da38 0x78ceb96520
	void RequestOtherTeamState(FString Name);// 0x83536ac 0x78ceb96600
	void RequestOpActData();// 0x834c2b4 0x78ceb966e0
	void RequestNewServerOpening();// 0x834c044 0x78ceb967c0
	void RequestNewServerData();// 0x834c030 0x78ceb968a0
	void RequestNewbieData();// 0x83495e8 0x78ceb96980
	void RequestMultiPlayerBaseInfo(out int64[] userList);// 0x8352e0c 0x78ceb96a60
	void RequestMeridianPlanData();// 0x834cc40 0x78ceb96b40
	void RequestMallItemData();// 0x834e110 0x78ceb96c20
	void RequestLvData();// 0x834efac 0x78ceb96d00
	void RequestLvConfig();// 0x834efc0 0x78ceb96de0
	void RequestLoc(FString lng, FString lat);// 0x834dae0 0x78ceb96ec0
	void RequestLeaveCT(int ct_id);// 0x834b0f0 0x78ceb96fa0
	void RequestKickCTMember(int user_id);// 0x834b198 0x78ceb97080
	void RequestJoinCT(int ct_id);// 0x834b888 0x78ceb97160
	void RequestHotReloadConfig(enum[] Types);// 0x834e000 0x78ceb97240
	void RequestHistoryRecord(int ID);// 0x834d04c 0x78ceb97320
	void RequestHeadIcons();// 0x83496f4 0x78ceb93a40
	void RequestHeadBorder();// 0x83496e0 0x78ceb93b20
	void RequestGlobalActOpening();// 0x834becc 0x78ceb93c00
	void RequestGlobalActData();// 0x834beb8 0x78ceb93ce0
	void RequestGetHeroSkinList();// 0x8349dfc 0x78ceb93dc0
	void RequestGetHeroList();// 0x8349e10 0x78ceb93ea0
	void RequestGetHeroInfo(int hero_id);// 0x8349c10 0x78ceb93f80
	void RequestGetConveneData();// 0x834a8a0 0x78ceb94060
	void RequestGetAllHeroProficiency();// 0x8349bfc 0x78ceb94140
	void RequestGetAllAChievementData(int player_id);// 0x834ab3c 0x78ceb94220
	void RequestGetAccomplishmentLevel(int player_id);// 0x834aa94 0x78ceb94300
	void RequestFriendCTMembers(int ct_id);// 0x834b930 0x78ceb943e0
	void RequestFriendCombatTeamData();// 0x834b9d8 0x78ceb944c0
	void RequestExchangeMoney(int Num, enum Type);// 0x834e138 0x78ceb945a0
	void RequestEquipActionOrEmojiRequest(bool is_action, int equip_id, int Position);// 0x8349f14 0x78ceb94680
	void RequestDisbandCT(int ct_id);// 0x834b048 0x78ceb94760
	void RequestCUseHeroList(int PlayerID);// 0x834cfa4 0x78ceb94840
	void RequestCultivateTaskConfig();// 0x834ef48 0x78ceb94920
	void RequestCultivateRewardConfig();// 0x834ef70 0x78ceb94a00
	void RequestCulTaskData();// 0x834ef34 0x78ceb94ae0
	void RequestCulShopLimitNum();// 0x834e40c 0x78ceb94bc0
	void RequestCulRewardData();// 0x834ef5c 0x78ceb94ca0
	void RequestCulExchange(enum Type);// 0x834e578 0x78ceb94d80
	void RequestCTFriendRec();// 0x834af3c 0x78ceb94e60
	void RequestCTData();// 0x834b778 0x78ceb94f40
	void RequestCreateCT(FString ctname);// 0x834b78c 0x78ceb95020
	void RequestConveneRaffleExternalReward(enum Type, int ID);// 0x834a704 0x78ceb95100
	void RequestConveneRaffle(int ID);// 0x834a7f8 0x78ceb951e0
	void RequestCombatReadinessLock(bool lock);// 0x8349858 0x78ceb952c0
	void RequestCombatReadinessChangeSkin(int hero_id, int64 suit_id, out int64[] skin_list);// 0x8349908 0x78ceb953a0
	void RequestCombatReadinessChangeHero(int hero_id);// 0x8349a60 0x78ceb95480
	void RequestChengjiuRewardData();// 0x834aa80 0x78ceb95560
	void RequestCheckinData();// 0x834ef84 0x78ceb95640
	void RequestCheckinConfig();// 0x834ef98 0x78ceb91d60
	void RequestCheckAct(int act_id);// 0x834c20c 0x78ceb91e40
	void RequestChangeUsingPlan(int ID);// 0x834cb98 0x78ceb91f20
	void RequestChangeSkinColorRequest(<int,int> skin_color_map);// 0x834a0f4 0x78ceb92000
	void RequestChangeRemind(int task_id, bool remind);// 0x834c100 0x78ceb920e0
	void RequestChangePlanName(int planId, FString Name);// 0x834c370 0x78ceb921c0
	void RequestChangeHeroSkin(int hero_id, int suit_id, int skin_id, int show_weapon_skin_id, int show_remote_weapon_skin_id, int hall_item_id, int Operation);// 0x834a308 0x78ceb922a0
	void RequestChangeHero(int hero_id);// 0x834a56c 0x78ceb92380
	void RequestChangeHeadIcon(int headId);// 0x83497b0 0x78ceb92460
	void RequestChangeHeadBorder(int borderId);// 0x8349708 0x78ceb92540
	void RequestChangeHead(int ID);// 0x834dd24 0x78ceb92620
	void RequestChangeCTName(int ct_id, FString Name);// 0x834b534 0x78ceb92700
	void RequestChangeCTFlag(int ct_id, int icon_id);// 0x834b688 0x78ceb927e0
	void RequestChangeCTAnn(int ct_id, FString ann);// 0x834b3e0 0x78ceb928c0
	void RequestChangeBorder(int ID);// 0x834dc7c 0x78ceb929a0
	void RequestChangeAcupoint(int planId, int oldId, int NewID);// 0x834ca5c 0x78ceb92a80
	void RequestCertainHistoryRecord(FString game_id, int his_rank, enum his_team_mode, enum his_mode);// 0x834cdc4 0x78ceb92b60
	void RequestBuyGoods(int goodsID, int goodsNum);// 0x834e22c 0x78ceb92c40
	void RequestBuyCultivateLv(int Num);// 0x834e420 0x78ceb92d20
	void RequestBuyCulShopItem(int ShopId, int Num);// 0x834e31c 0x78ceb92e00
	void RequestBuyAdvanceCul(bool bSenior);// 0x834e4c8 0x78ceb92ee0
	void RequestBoxNotify(int Level);// 0x8349498 0x78ceb92fc0
	void RequestAcuLevelUp(int acuId, int aimLevel);// 0x834c96c 0x78ceb930a0
	void RequestActivitySubmit(int ActID, enum ActType);// 0x834efd4 0x78ceb93180
	void RequestActivityDataByType(enum Type);// 0x834f0dc 0x78ceb93260
	void RequestActivityData();// 0x834f184 0x78ceb93340
	void RequestActivityConfig();// 0x834f0c8 0x78ceb93420
	void ReportVoice();// 0x834a9b0 0x78ceb93500
	void ReportCT(int ct_id, int[] report_id, FString reason);// 0x834ad48 0x78ceb935e0
	void RedeemCodeRequest(FString RedeemCode);// 0x834f8d4 0x78ceb936c0
	void ReceiveChengjiuRewardRequest(int ID);// 0x834a9d8 0x78ceb937a0
	void QuitTick(out const UIRoomInfo room);// 0x834f634 0x78ceb93880
	void Port(int val);// 0x8350f6c 0x78ceb93960
	void PlayerReconnectOB(bool ok);// 0x83500dc 0x78ceb90080
	void PlayerLeaveRoom(enum Type, int player_id, out const UIRoomInfo room);// 0x835045c 0x78ceb90160
	void PingCallBack();// 0x8348bb4 0x78ceb90240
	void OpenBox(int item_id, int item_num);// 0x8351554 0x78ceb90320
	void NotifyServerHeroOrHeroSkinExpire(int64 hero_id, int64 heroSkin_id, bool is_public_skin);// 0x8349cb8 0x78ceb90400
	void NotifyDoubleExpOrCoinExpire(int DoubleItemId);// 0x8348ed4 0x78ceb904e0
	void JoinRoom(out const UIRoomInfo room, FString PassWord);// 0x83505e4 0x78ceb905c0
	void JiHuoMa(FString ma);// 0x83514a0 0x78ceb906a0
	void Ip(FString val);// 0x8351014 0x78ceb90780
	void InviteJoinCT(int user_id);// 0x834b240 0x78ceb90860
	void GiveFriendMoneyRequest(int player_id);// 0x8352f08 0x78ceb90940
	void GiftRequest(int friend_id, <int,int> item_map, int bg_type, FString words, enum gain_gift, enum gift_operation);// 0x8351d8c 0x78ceb90a20
	void GiftCheckPlayerWhetherHaveRequest(int shop_id, int friend_id, int gift_id, enum GiftOperation);// 0x8351c04 0x78ceb90b00
	int GetTeamPlayerNums();// 0x834df94 0x78ceb90be0
	void GetRooms(int room_type, FString Tile, int play_mode, int server_id, int min_player_num, int max_player_num, int sort_type, int sort_direction);// 0x83507d8 0x78ceb90cc0
	void GetPage(int page);// 0x8350730 0x78ceb90da0
	void GetMailList();// 0x834fca8 0x78ceb90e80
	void GetMailItemRequst(int mail_id);// 0x834fb58 0x78ceb90f60
	void GetMailDetailRequst(int mail_id);// 0x834fc00 0x78ceb91040
	int GetLimitItemBuyNum(int shop_id);// 0x834bd18 0x78ceb91120
	void GetHisRec(out int his_rank, out enum his_teamnum, out enum Mode);// 0x834cc68 0x78ceb91200
	void GetGiftInfoRequest(int gift_id, enum gift_operation);// 0x8352128 0x78ceb912e0
	FString[] GetCitiesByOption(int Option, out int province_code);// 0x834d2a0 0x78ceb913c0
	int GetBagHallItemNum(int item_id);// 0x834ac98 0x78ceb914a0
	FString[] GetAreasByOption(int Option, int province_code);// 0x834d0f4 0x78ceb91580
	FString[] GetAllProvince();// 0x834d45c 0x78ceb91660
	void GetAllMailItemRequst();// 0x834fb44 0x78ceb91740
	void GameReconnectCallBack(bool Result);// 0x834f390 0x78ceb91820
	void FriendDataListRequest(enum friendDataType);// 0x83532d8 0x78ceb91900
	void FirstPayStateRequest();// 0x8348f90 0x78ceb919e0
	void FirstPayRewardRequest();// 0x8348f7c 0x78ceb91ac0
	void FindTeacherRequest(FString user_name, enum sex_type, enum segment_type);// 0x8352864 0x78ceb91ba0
	void FindStudentRequest(FString user_name, enum sex_type);// 0x835271c 0x78ceb91c80
	void FindAroundPlayerRequest(enum sex_type, enum segment_type);// 0x83529f8 0x78ceb6e780
	void EquipItemRemoved(int item_id);// 0x834ddcc 0x78ceb6e860
	void EmptyCurPlan(int planId);// 0x834c4c4 0x78ceb6e940
	void DSReConnectRequest();// 0x8349610 0x78ceb6ea20
	void DrawBattleTreasureRequest();// 0x8348d18 0x78ceb6eb00
	void DeleteRoom(out const UIRoomInfo room);// 0x8350360 0x78ceb6ebe0
	void DeleteRelationRequest(int player_id, enum relationType);// 0x8352fb0 0x78ceb6ecc0
	void DelAllMailItemRequst();// 0x834fb30 0x78ceb6eda0
	void DealJoinCTRequest(int user_id, bool agree);// 0x834b2e8 0x78ceb6ee80
	void CurrentServerChange();// 0x8350e08 0x78ceb6ef60
	void CreateRoom(int play_mode, int map_id, FString room_tile, FString PassWord, int max_player_num, int team_player_num, int max_watch_num, int preset_mode, int server_id, bool add_flag);// 0x8350a98 0x78ceb6f040
	void CreateNewConnect();// 0x8354aac 0x78ceb6f120
	void ConfirmTASRejected(int player_id);// 0x83523b4 0x78ceb6f200
	void CommitYaPaiEdit(YaPaiInfo Info);// 0x834d574 0x78ceb6f2e0
	void ClientDSConnectRequest();// 0x83495fc 0x78ceb6f3c0
	bool CheckItemCanBuy(int item_id);// 0x834abe4 0x78ceb6f4a0
	void ChangeShowSkinIndex(int skin_id, enum Type);// 0x835183c 0x78ceb6f580
	void ChangeRoomInfo(int game_mode, int map_id, FString Tile, FString pwd, int max_playernum, int team_playernum, int watch_num, int preset_mode, int server_id, bool add_flag);// 0x834fd6c 0x78ceb6f660
	void ChangePlayerRoomOperate(bool can_orprate);// 0x834fcbc 0x78ceb6f740
	void ChangePlayerRole(int player_id, enum new_type, int team_index, out const UIRoomInfo room);// 0x835018c 0x78ceb6f820
	void ChangeEquipSkin(int skin_id, int Type);// 0x8351930 0x78ceb6f900
	void ChangeAllowCTApply(int ct_id, bool allow);// 0x834af50 0x78ceb6f9e0
	bool CanLineUp();// 0x834dfc8 0x78ceb6fac0
	void CancelLogin();// 0x83544f4 0x78ceb6fba0
	void BuyItem(int item_id);// 0x8353db4 0x78ceb6fc80
	void BegSignCountRequest();// 0x834920c 0x78ceb6fd60
	void AntiAddictionTokenRequst(FString token, int State);// 0x834f988 0x78ceb6fe40
	void AllowTeacherApplyUpdate(int Type, bool allow);// 0x835254c 0x78ceb6ff20
	void AllowTeacherApplyRequest();// 0x8352644 0x78ceb6caa0
	void AllowFriendApplyUpdate(bool allow);// 0x8352658 0x78ceb6cb80
	void AllowFriendApplyRequest();// 0x8352708 0x78ceb6cc60
	void AddRelationResponse(int player_id, enum relationType, enum Result);// 0x83530a4 0x78ceb6cd40
	void AddRelationRequest(int player_id, enum relationType);// 0x83531e4 0x78ceb6ce20
	void ActivityTodayDontShowRequest(bool IsTodayDontShow);// 0x834e710 0x78ceb6cf00
	void ActivitySignInRequest(int Day, int ActivityId);// 0x834e620 0x78ceb6cfe0
	void ActivityInfoDataRequest();// 0x834e7c0 0x78ceb6d0c0

--------------------------------
Class: BaseNetHandle.Actor.Object
	FString report_name_;//[Offset: 0x238, Size: 0x10] 0x78ceb44a80
	FString[] report_reasons_;//[Offset: 0x248, Size: 0x10] 0x78ceac9160
	FString report_detail_;//[Offset: 0x258, Size: 0x10] 0x78ceb44b80
	void SendReportInfo(FString Name, FString[] reason, FString detail);// 0x8328a38 0x78ceb2dd00

--------------------------------
Class: ShopBuyInfo
	int ShopId;//[Offset: 0x0, Size: 0x4] 0x78cefc7400
	int Num;//[Offset: 0x4, Size: 0x4] 0x78cefc7480
	enum MoneyType;//[Offset: 0x8, Size: 0x1] 0x78cefd27c0

--------------------------------
Class: YaPaiInfo
	enum userSex;//[Offset: 0x0, Size: 0x1] 0x78cefd15a0
	enum findRelation;//[Offset: 0x1, Size: 0x1] 0x78cefd1640
	enum weekOnline;//[Offset: 0x2, Size: 0x1] 0x78cefd16e0
	enum dayOnline;//[Offset: 0x3, Size: 0x1] 0x78cefd1780
	int UserId;//[Offset: 0x4, Size: 0x4] 0x78cefcf480
	int userLv;//[Offset: 0x8, Size: 0x4] 0x78cefcf500
	int userSegment;//[Offset: 0xc, Size: 0x4] 0x78cefcf580
	int headId;//[Offset: 0x10, Size: 0x4] 0x78cefcf600
	int borderId;//[Offset: 0x14, Size: 0x4] 0x78cefcf680
	int AchievementId;//[Offset: 0x18, Size: 0x4] 0x78cefcf700
	int GoodAtFirstId;//[Offset: 0x1c, Size: 0x4] 0x78cefcf780
	int GoodAtSecId;//[Offset: 0x20, Size: 0x4] 0x78cefcd700
	int RegionCode;//[Offset: 0x24, Size: 0x4] 0x78cefcd780
	FString Signature;//[Offset: 0x28, Size: 0x10] 0x78cefcd800
	FString region;//[Offset: 0x38, Size: 0x10] 0x78cefcd880
	FString UserName;//[Offset: 0x48, Size: 0x10] 0x78cefcd900
	int[] Labels;//[Offset: 0x58, Size: 0x10] 0x78cefd1820

--------------------------------
Class: BagItemData
	int theme_equip_;//[Offset: 0x0, Size: 0x4] 0x78cefe6200
	int horse_equip_;//[Offset: 0x4, Size: 0x4] 0x78cefe6280
	int flytools_equip_;//[Offset: 0x8, Size: 0x4] 0x78cefe6300
	BagItemInfo[] item_equips_;//[Offset: 0x10, Size: 0x10] 0x78cefd2b80
	<int,int> skin_equip_map_;//[Offset: 0x20, Size: 0x50] 0x78cefac940
	<enum,int> skin_preview_map_;//[Offset: 0x70, Size: 0x50] 0x78cefaca00

--------------------------------
Class: SeasonInfoData
	int season_id;//[Offset: 0x0, Size: 0x4] 0x78cefcb680
	SeasonModeData[] season_data_list;//[Offset: 0x8, Size: 0x10] 0x78cefd1aa0

--------------------------------
Class: SeasonModeData
	enum season_mode;//[Offset: 0x0, Size: 0x1] 0x78cefd1a00
	int Score;//[Offset: 0x4, Size: 0x4] 0x78cefcb780
	int rank_score;//[Offset: 0x8, Size: 0x4] 0x78cefcb800
	int kill_num;//[Offset: 0xc, Size: 0x4] 0x78cefcb880
	int death_num;//[Offset: 0x10, Size: 0x4] 0x78cefcb900
	int game_num;//[Offset: 0x14, Size: 0x4] 0x78cefcb980
	int win_num;//[Offset: 0x18, Size: 0x4] 0x78cefcba00

--------------------------------
Class: SeasonTaskData
	int task_id;//[Offset: 0x0, Size: 0x4] 0x78cefcbb00
	int task_arg;//[Offset: 0x4, Size: 0x4] 0x78cefcbb80
	bool is_receive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cefcbc00

--------------------------------
Class: RegionTree
	int code;//[Offset: 0x0, Size: 0x4] 0x78cefcb080
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cefcb100

--------------------------------
Class: ClientLoginHUD.WuXiaXHUDBase.HUD.Actor.Object
	bool PlayerInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x78ceb7a200
	delegate OnStartTYGAction;//[Offset: 0x340, Size: 0x10] 0x78ceb7a280
	delegate OnContinueTYGAction;//[Offset: 0x350, Size: 0x10] 0x78ceb7a300
	delegate OnReplayTYGAction;//[Offset: 0x360, Size: 0x10] 0x78ceb7a380
	delegate OnPauseTYGAction;//[Offset: 0x370, Size: 0x10] 0x78ceb7a400
	delegate OnTYGActionJump;//[Offset: 0x380, Size: 0x10] 0x78ceb7a480
	delegate OnStopTYGAction;//[Offset: 0x390, Size: 0x10] 0x78ceb7a500
	int chatting_friend_id;//[Offset: 0x3a0, Size: 0x4] 0x78ceb78480
	int showing_rank_sort;//[Offset: 0x3a4, Size: 0x4] 0x78ceb78500
	int showing_ct_id;//[Offset: 0x3a8, Size: 0x4] 0x78ceb78580
	bool sign_check_request;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1] 0x78ceb78600
	MainLoginUI* MianLoginUI;//[Offset: 0x3b0, Size: 0x8] 0x78ceb78680
	UserHallUI* UserHallUI;//[Offset: 0x3b8, Size: 0x8] 0x78ceb78700
	ItemTipUI* ItemTipUI;//[Offset: 0x3c0, Size: 0x8] 0x78ceb78780
	PlayerBagUI* PlayerBagUI;//[Offset: 0x3c8, Size: 0x8] 0x78ceb78800
	LoadingUI* LoadingUI;//[Offset: 0x3d0, Size: 0x8] 0x78ceb78880
	class LoadingUI* loading_class_;//[Offset: 0x3d8, Size: 0x8] 0x78ceacd1c0
	StreamableRenderAsset*[] PreLoadAsset;//[Offset: 0x3e0, Size: 0x10] 0x78ceacd260
	FString[] WrongfulNames;//[Offset: 0x3f0, Size: 0x10] 0x78ceacd300
	<int,ApplyRelationInfo> apply_ct_map;//[Offset: 0x400, Size: 0x50] 0x78cf15a840
	void UpdateUserHallBGAlpha(float Alpha);// 0x834444c 0x78ceb6d1a0
	void UpdateSeasonRedPoint(bool bVisible);// 0x8343034 0x78ceb6d280
	void UpdateFriendChatTip();// 0x8342e24 0x78ceb6d360
	void UpdateBattleTreasureInfo(int OldChipNum);// 0x8342534 0x78ceb6d440
	void UpdateAChievementDetailInfoUIItem(out const <int,DateTime> AChievementInfo, const <int,int> experience);// 0x834379c 0x78ceb6d520
	void TYGActionJump(float percent);// 0x83431b4 0x78ceb6d600
	void TaskJump(enum Type);// 0x8342880 0x78ceb6d6e0
	void StopWaiting();// 0x83433b0 0x78ceb6d7c0
	void StopTYGAction();// 0x83431a0 0x78ceb6d8a0
	void StartWaiting(float Time);// 0x83433c4 0x78ceb6d980
	void StartTYGAction(float Start, float Duration);// 0x8343298 0x78ceb6da60
	void ShowTsfCandidate(out const FString[] candidateArr);// 0x8344920 0x78ceb6db40
	void ShowTryOnPanel(MallItemInfo Info);// 0x8343b7c 0x78ceb6dc20
	void ShowTrainDialog();// 0x8a873f8 0x78ceb6dd00
	void ShowTianYiGe(bool Show);// 0x8a873f8 0x78ceb6dde0
	void ShowSorting();// 0x8a873f8 0x78ceb6dec0
	void ShowRemindText(out const FText remind);// 0x8344004 0x78ceb6dfa0
	void ShowReconnect(bool State);// 0x8a873f8 0x78ceb6e080
	void ShowRechargeTip(FString tipInfo);// 0x8343f50 0x78ceb6e160
	void ShowPopTip(FString tipInfo);// 0x8343e9c 0x78ceb6e240
	void ShowPersonalInfo(bool Show);// 0x8a873f8 0x78ceb6e320
	void ShowMoneyExchangePanel();// 0x8343e18 0x78ceb6e400
	void ShowLogoUI();// 0x8a873f8 0x78ceb6e4e0
	void ShowLoginUI();// 0x8a873f8 0x78ceb6e5c0
	void ShowLoadingUI();// 0x8342604 0x78ceb6e6a0
	void ShowHallWidget(FString player_name);// 0x8a873f8 0x78ceb6adc0
	void ShowFriendPanel();// 0x8343388 0x78ceb6aea0
	void ShowCombatReadiness();// 0x834262c 0x78ceb6af80
	void ShowCharacterBagUI();// 0x8a873f8 0x78ceb6b060
	void ShowBuyAdvanceCulPanel();// 0x8343e2c 0x78ceb6b140
	void SetWeaponPreview(enum Type, int item_id);// 0x83444f4 0x78ceb6b220
	void SetSkinPreview(enum Type, int skin_id);// 0x83446dc 0x78ceb6b300
	void SetServerMode(int server_id);// 0x83447d0 0x78ceb6b3e0
	void SetPlayMode(int Mode);// 0x8344878 0x78ceb6b4c0
	void SetPlayerBagUI(PlayerBagUI* BagUI);// 0x83427d8 0x78ceb6b5a0
	void SetEquipPreview(enum Type, int item_id);// 0x83445e8 0x78ceb6b680
	void SaveHasAgreeItems(bool bHasAgreeItems);// 0x8a873f8 0x78ceb6b760
	void RotatePlayerCapture(float Offset);// 0x8343514 0x78ceb6b840
	void RotateDisplayPlayer(float Offset);// 0x834346c 0x78ceb6b920
	void RequestOpenPlayerChatInfo(FString Name, Vector2D pos, int ID);// 0x8342ea8 0x78ceb6ba00
	void ReplayTYGAction();// 0x834325c 0x78ceb6bae0
	void RegisterResponse(enum register_type);// 0x8a873f8 0x78ceb6bbc0
	void ReadyGame();// 0x8a873f8 0x78ceb6bca0
	void PlayShowCharacter(bool Show);// 0x8a873f8 0x78ceb6bd80
	void PersonalUIClosed(int idx);// 0x83430e4 0x78ceb6be60
	void PauseTYGAction();// 0x8343270 0x78ceb6bf40
	void OpenRuleIntroWidget(int Type);// 0x8342d7c 0x78ceb6c020
	bool OpenPopFullWidget(int NewIdx);// 0x83436e8 0x78ceb6c100
	void OnShowTrain();// 0x8343e40 0x78ceb6c1e0
	void OnHideLoadingUI();// 0x8a873f8 0x78ceb6c2c0
	void OnBagThemeChangeDele(int index);// 0x8a873f8 0x78ceb6c3a0
	void OnAcuSlotClicked(enum Type);// 0x8342a50 0x78ceb6c480
	void ObtainItem(<int,BagItemInfo> items);// 0x8344224 0x78ceb6c560
	void LoginResponse(enum login_state, FString player_name);// 0x8a873f8 0x78ceb6c640
	void LoginCharacterMoveComplete();// 0x8344438 0x78ceb6c720
	void HideSorting();// 0x8a873f8 0x78ceb6c800
	void HideReconnect();// 0x8a873f8 0x78ceb6c8e0
	void HideLogoUI();// 0x8a873f8 0x78ceb6c9c0
	void HideLoginUI();// 0x8a873f8 0x78ceb690e0
	void HideLoadingUI();// 0x83425f0 0x78ceb691c0
	void HideItemTipUI();// 0x8343e54 0x78ceb692a0
	void HideAdLoad();// 0x83435bc 0x78ceb69380
	void HallRemind(out const FText remind);// 0x8344114 0x78ceb69460
	FString[] GetWrongfulNames();// 0x83435d0 0x78ceb69540
	void GetOriginPlayerDecoration(out <enum,int> PreviewMap, out int[] Equips);// 0x8343c80 0x78ceb69620
	FText GetLeaveTime(int64 Timestamp);// 0x8342af8 0x78ceb69700
	ItemTipUI* GetItemTipUI();// 0x8343e68 0x78ceb697e0
	FText GetDeltaTimeFromTimeStamp(enum State, int64 Timestamp);// 0x8342c14 0x78ceb698c0
	ApplyRelationInfo[] GetApplyCTData();// 0x8342928 0x78ceb699a0
	void DecoratePlayer(int ID, int index);// 0x8343a8c 0x78ceb69a80
	void CreateMainLoginUI();// 0x8a873f8 0x78ceb69b60
	void CreateLoadingUI();// 0x8342618 0x78ceb69c40
	void ContinueTYGAction();// 0x8343284 0x78ceb69d20
	void CompeletAndHideLoadingUI();// 0x83425dc 0x78ceb69e00
	void ClosePopFullWidget();// 0x83436d4 0x78ceb69ee0
	void CloseCharacterBagUI();// 0x834318c 0x78ceb69fc0
	bool CheckIsMaster();// 0x8342e38 0x78ceb6a0a0
	bool CheckIsInTeam();// 0x8342e70 0x78ceb6a180
	bool CheckCanLogin();// 0x8a873f8 0x78ceb6a260
	bool CheckAgreeItems();// 0x8a873f8 0x78ceb6a340
	void ChangePswResponse(enum result_type);// 0x8a873f8 0x78ceb6a420
	void ChangeHeroSkin(int hero_id, int heroSkin_id);// 0x8342640 0x78ceb6a500
	void ChangeHero(int hero_id);// 0x8342730 0x78ceb6a5e0
	void CallChangeLoginTyoe(int Type);// 0x8a873f8 0x78ceb6a6c0
	void BackToHall();// 0x834339c 0x78ceb6a7a0
	void AutoLogin();// 0x8a873f8 0x78ceb6a880

--------------------------------
Class: WuXiaXHUDBase.HUD.Actor.Object
	UserWidget*[] widgets_array;//[Offset: 0x310, Size: 0x10] 0x78ceacdc60
	enum current_interactive_type_;//[Offset: 0x320, Size: 0x1] 0x78ceacdd00
	class UserWidget* replay_load_class_;//[Offset: 0x328, Size: 0x8] 0x78ceacdda0
	UserWidget* replay_loading_widget_;//[Offset: 0x330, Size: 0x8] 0x78ceb76d80
	void ShowMessage(enum Type, FString Message, bool showCancel);// 0x8573a44 0x78ceb6a960
	void ShowLoadingReplayWidget();// 0x85739f8 0x78ceb6aa40
	void SetInteractiveType(enum Type);// 0x8573c4c 0x78ceb6ab20
	void ReUMGEffect();// 0x8573a14 0x78ceb6ac00
	void KickNotice();// 0x8573a30 0x78ceb6ace0
	void DestroyPanel(UserWidget* widget_point);// 0x8573844 0x78ceb67400
	UserWidget* CreatePanel(FString widgetPath);// 0x85738ec 0x78ceb674e0
	void CheckResetFocus();// 0x8573cf4 0x78ceb675c0
	void CheckFullScreenToWindowFullScreen();// 0x8a873f8 0x78ceb676a0
	bool CanUseInteractive(enum Type);// 0x8573b98 0x78ceb67780

--------------------------------
Class: MallItemInfo
	int MallItemID;//[Offset: 0x0, Size: 0x4] 0x78cf5d0180
	enum MallItemMainType;//[Offset: 0x4, Size: 0x1] 0x78cf56aec0
	enum MallItemSecType;//[Offset: 0x5, Size: 0x1] 0x78cf56af60
	int PropID;//[Offset: 0x8, Size: 0x4] 0x78cf5d0300
	int MaxBuy;//[Offset: 0xc, Size: 0x4] 0x78cf5d0380
	FString PropName;//[Offset: 0x10, Size: 0x10] 0x78cf5d0400
	FString PropDesc;//[Offset: 0x20, Size: 0x10] 0x78cf5d0480
	FString PropIconpath;//[Offset: 0x30, Size: 0x10] 0x78cf5d0500
	<enum,int> CostData;//[Offset: 0x40, Size: 0x50] 0x78cf33f640

--------------------------------
Class: MainLoginUI.UserWidget.Widget.Visual.Object
	bool is_debug_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78cec97000
	FString connect_str_;//[Offset: 0x268, Size: 0x10] 0x78cec97080
	void UpdateVersion();// 0x8a873f8 0x78cec8b680
	void UpdateSwitchAccountPage(FString UName, FString UPassword, int LoginType);// 0x8a873f8 0x78cec8b760
	void ShowLoginWidget();// 0x8a873f8 0x78cec8b840
	void SetPingTaiLogin(FString user_name, FString PassWord, int Type, enum showCancle);// 0x8a873f8 0x78cec8b920
	void SetHasLoginCompleted(bool complete);// 0x8a873f8 0x78cec8ba00
	void SendDeviceInfo();// 0x83c45a8 0x78cec8bae0
	void SaveUserName(FString Value);// 0x83c4c44 0x78cec8bbc0
	void SaveUserInfo(FString UserName, FString PassWord);// 0x83c4a84 0x78cec8bca0
	void SaveSDKInfo(FString UserName, FString PassWord, FString refreshToken, FString LoginType);// 0x83c48c8 0x78cec8bd80
	void SavePassWord(FString Value);// 0x83c4b90 0x78cec8be60
	void SaveHasAgreeItems(bool bHasAgreeItems);// 0x8a873f8 0x78cec8bf40
	void RequestWebConfigData();// 0x83c45f4 0x78cec8c020
	void RegisterResponse(enum RegisterType);// 0x8a873f8 0x78cec8c100
	void PopVerifySucceededTips();// 0x8a873f8 0x78cec8c1e0
	void OpenLoginWidget();// 0x8a873f8 0x78cec8c2c0
	void LoginResponse(enum LoginResponse, FString player_name);// 0x8a873f8 0x78cec8c3a0
	void LoginComplete();// 0x8a873f8 0x78cec8c480
	bool IsChannelLogin();// 0x83c4570 0x78cec8c560
	void Init(ClientNetMessageHandle* Net_actor);// 0x8a873f8 0x78cec8c640
	FString GetWechatRefreshToken();// 0x83c4608 0x78cec8c720
	FString GetSaveUserName();// 0x83c4da8 0x78cec8c800
	FString GetSaveSdkUserId();// 0x83c4818 0x78cec8c8e0
	FString GetSaveSdkToken();// 0x83c4768 0x78cec8c9c0
	FString GetSaveSdkLoginType();// 0x83c46b8 0x78cec890e0
	FString GetSavePassWord();// 0x83c4cf8 0x78cec891c0
	void GetLoginTokenAgain();// 0x8a873f8 0x78cec892a0
	bool GetHasLoginCompleted();// 0x8a873f8 0x78cec89380
	void ConfigLogin();// 0x8a873f8 0x78cec89460
	bool CheckIosAutoLogin();// 0x83c45bc 0x78cec89540
	bool CheckCanLogin();// 0x8a873f8 0x78cec89620
	bool CheckAgreeItems();// 0x8a873f8 0x78cec89700
	void ChangePswResponse(enum Result);// 0x8a873f8 0x78cec897e0

--------------------------------
Class: ItemTipUI.UserWidget.Widget.Visual.Object
	void SetInfo(RewardItem Info);// 0x8a873f8 0x78cebf74e0

--------------------------------
Class: ApplyRelationInfo
	enum userSex;//[Offset: 0x0, Size: 0x1] 0x78cefd3d00
	enum userState;//[Offset: 0x1, Size: 0x1] 0x78cefd3da0
	enum userApplyType;//[Offset: 0x2, Size: 0x1] 0x78cefd1500
	int UserId;//[Offset: 0x4, Size: 0x4] 0x78cefcef00
	int userLv;//[Offset: 0x8, Size: 0x4] 0x78cefcef80
	int userSegment;//[Offset: 0xc, Size: 0x4] 0x78cefcf000
	int headId;//[Offset: 0x10, Size: 0x4] 0x78cefcf080
	int borderId;//[Offset: 0x14, Size: 0x4] 0x78cefcf100
	int64 Timestamp;//[Offset: 0x18, Size: 0x8] 0x78cefcf180
	FString UserName;//[Offset: 0x20, Size: 0x10] 0x78cefcf200

--------------------------------
Class: LoadingUI.UserWidget.Widget.Visual.Object
	bool bAutoRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78cec09580
	float AutoRemoveTime;//[Offset: 0x264, Size: 0x4] 0x78cec09600
	float CurCountdownTime;//[Offset: 0x268, Size: 0x4] 0x78cec09680
	void StartAutoRemove(float DelayTime);// 0x83b1cb4 0x78cebfb920
	void SetPercent(float percent);// 0x8a873f8 0x78cebfba00
	void CompleteAndRemoveSelf();// 0x8a873f8 0x78cebfbae0

--------------------------------
Class: ActiviyWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	int DailyActivityNum;//[Offset: 0x340, Size: 0x4] 0x78ceb1cd80
	int WeeklyActivityNum;//[Offset: 0x344, Size: 0x4] 0x78ceb1ce00
	ActiviyBoxWidget*[] DailyActiviyBoxs;//[Offset: 0x348, Size: 0x10] 0x78ceac8620
	ActiviyBoxWidget*[] WeeklyActiviyBoxs;//[Offset: 0x358, Size: 0x10] 0x78ceac86c0
	TextBlock* DailyActText;//[Offset: 0x368, Size: 0x8] 0x78ceb1cf80
	TextBlock* WeeklyActText;//[Offset: 0x370, Size: 0x8] 0x78ceb1d000
	ProgressBar* DailyActProgressBar;//[Offset: 0x378, Size: 0x8] 0x78ceb1d080
	void UpdateWeekAwardData();// 0x8a873f8 0x78ceb2a7a0
	void UpdateGetAwardTaskState(out const int[] UpdateTaskArray);// 0x8a873f8 0x78ceb2a880
	void UpdateDailyTaskOnlineTime(int Time);// 0x8a873f8 0x78ceb2a960
	void UpdateDailyAwardData();// 0x8a873f8 0x78ceb2aa40
	void UpdateAllByInstanceData();// 0x8a873f8 0x78ceb2ab20
	void UpdateActivityBoxes(int ActID, enum BoxType);// 0x830b404 0x78ceb2ac00
	void SetWeeklyBoxesData(out const ActivityState[] WeeklyBoxData);// 0x8a873f8 0x78ceb2ace0
	void SetDailyTasksData(out const ActivityState[] DailyTaskData);// 0x8a873f8 0x78ceb27400
	void SetDailyBoxesData(out const ActivityState[] DailyBoxData);// 0x8a873f8 0x78ceb274e0
	void ReUpdateWeekState(out const ActiveBoxInfo[] TaskInfos);// 0x8a873f8 0x78ceb275c0
	void InitWeeklyBoxs(out const ActiveBoxInfo[] WeeklyBoxInfos);// 0x8a873f8 0x78ceb276a0
	void InitPanelItemBox();// 0x830b3f0 0x78ceb27780
	void InitDailyTask(out const DailyTaskInfo[] TaskInfos);// 0x8a873f8 0x78ceb27860
	void InitDailyBoxs(out const ActiveBoxInfo[] BoxInfos);// 0x8a873f8 0x78ceb27940
	void CreateCurrencyItems();// 0x8a873f8 0x78ceb27a20

--------------------------------
Class: ActivityState
	int ActID;//[Offset: 0x0, Size: 0x4] 0x78cf57c700
	enum TaskType;//[Offset: 0x4, Size: 0x1] 0x78cf5651a0
	int ActProgress;//[Offset: 0x8, Size: 0x4] 0x78cf57c800
	enum ActType;//[Offset: 0xc, Size: 0x1] 0x78cf565240
	enum ActStatus;//[Offset: 0xd, Size: 0x1] 0x78cf5629a0
	enum ActJumpFlag;//[Offset: 0xe, Size: 0x1] 0x78cf562a40

--------------------------------
Class: ActiveBoxInfo
	int ActiveboxID;//[Offset: 0x0, Size: 0x4] 0x78cf5b5b00
	int DesiredActivityNum;//[Offset: 0x4, Size: 0x4] 0x78cf5b5b80
	FString BoxDesc;//[Offset: 0x8, Size: 0x10] 0x78cf5b5c00
	FString BoxName;//[Offset: 0x18, Size: 0x10] 0x78cf5b5c80
	FString Box_Openpath;//[Offset: 0x28, Size: 0x10] 0x78cf5b5d00
	FString Box_Lockedpath;//[Offset: 0x38, Size: 0x10] 0x78cf5b5d80
	RewardItem[] rewards;//[Offset: 0x48, Size: 0x10] 0x78cf567d60

--------------------------------
Class: DailyTaskInfo
	int TaskID;//[Offset: 0x0, Size: 0x4] 0x78cf5d2b80
	int TaskType;//[Offset: 0x4, Size: 0x4] 0x78cf5d2c00
	int TaskDesiredNum;//[Offset: 0x8, Size: 0x4] 0x78cf5d2c80
	FString taskName;//[Offset: 0x10, Size: 0x10] 0x78cf5d2d00
	FString TaskDesc;//[Offset: 0x20, Size: 0x10] 0x78cf5d2d80
	FString TaskIconpath;//[Offset: 0x30, Size: 0x10] 0x78cf5d2e00
	FString TaskSmallIconpath;//[Offset: 0x40, Size: 0x10] 0x78cf5d2e80
	RewardItem[] DailyTaskRewards;//[Offset: 0x50, Size: 0x10] 0x78cf56ac40

--------------------------------
Class: ActiviyBoxWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	ActiveBoxInfo BoxInfo;//[Offset: 0x340, Size: 0x58] 0x78ceb1c380
	delegate OnShowDesc;//[Offset: 0x398, Size: 0x10] 0x78ceb1c400
	delegate OnHideDesc;//[Offset: 0x3a8, Size: 0x10] 0x78ceb1c480
	enum BoxType;//[Offset: 0x3b8, Size: 0x1] 0x78ceac6780
	Image* BoxIcon;//[Offset: 0x3c0, Size: 0x8] 0x78ceb1c580
	Image* HighLightImage;//[Offset: 0x3c8, Size: 0x8] 0x78ceb1c600
	TextBlock* DesiredText;//[Offset: 0x3d0, Size: 0x8] 0x78ceb1a580
	TextBlock* rewardCount;//[Offset: 0x3d8, Size: 0x8] 0x78ceb1a600
	void UpdateOnlineTimeText(int64 onlinetime);// 0x8a873f8 0x78ceb289e0
	void UpdateHighImgState(enum StateId);// 0x8a873f8 0x78ceb28ac0
	void ShowWeeklyDesc();// 0x8307da8 0x78ceb28ba0
	void ShowDesc();// 0x8a873f8 0x78ceb28c80
	void SetBoxInfo(ActivityState Status);// 0x8307dbc 0x78ceb28d60
	void InitBoxInfo(ActiveBoxInfo inBoxInfo, int ActNum);// 0x8307e70 0x78ceb28e40
	void HideWeeklyDesc();// 0x8307d94 0x78ceb28f20
	void HideRewardPanel();// 0x8a873f8 0x78ceb29000

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText text;//[Offset: 0x128, Size: 0x18] 0x78ce85b500
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10] 0x78ce85b580
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28] 0x78ce859500
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10] 0x78ce859580
	SlateFontInfo Font;//[Offset: 0x188, Size: 0x58] 0x78ce859600
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 0x88] 0x78ce859680
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 0x8] 0x78ce859700
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 0x10] 0x78ce859780
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 0x10] 0x78ce859800
	float MinDesiredWidth;//[Offset: 0x290, Size: 0x4] 0x78ce859880
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1] 0x78ce859900
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1] 0x78ce859980
	enum TextTransformPolicy;//[Offset: 0x296, Size: 0x1] 0x78ce72c400
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 0x1] 0x78ce859a80
	void SetTextTransformPolicy(enum InTransformPolicy);// 0xa1a43e0 0x78ce7cb4c0
	void SetText(FText InText);// 0xa1a411c 0x78ce7cb5a0
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0xa1a45e0 0x78ce7cb680
	void SetShadowOffset(Vector2D InShadowOffset);// 0xa1a4a90 0x78ce7cb760
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0xa1a4b34 0x78ce7cb840
	void SetOpacity(float InOpacity);// 0xa1a4bdc 0x78ce7cb920
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xa1a4538 0x78ce7cba00
	void SetFont(SlateFontInfo InFontInfo);// 0xa1a48f4 0x78ce7cbae0
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0xa1a4c84 0x78ce7cbbc0
	void SetAutoWrapText(bool InAutoTextWrap);// 0xa1a4488 0x78ce7cbca0
	FText GetText();// 0xa1a42a8 0x78ce7cbd80
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0xa1a4378 0x78ce7cbe60
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0xa1a43ac 0x78ce7cbf40

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 0x3] 0x78cee98c00
	byte Justification;//[Offset: 0x10b, Size: 0x1] 0x78cee98c80
	enum WrappingPolicy;//[Offset: 0x10c, Size: 0x1] 0x78cee539e0
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1] 0x78cee98d80
	float WrapTextAt;//[Offset: 0x110, Size: 0x4] 0x78cee98e00
	Margin Margin;//[Offset: 0x114, Size: 0x10] 0x78cee98e80
	float LineHeightPercentage;//[Offset: 0x124, Size: 0x4] 0x78cee98f00
	void SetJustification(byte InJustification);// 0xa1a5970 0x78cee87240

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cee92280
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cee92300
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1] 0x78cee51780
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1] 0x78cee51820

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8] 0x78cee91e80
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8] 0x78cee91f00
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20] 0x78cee90100
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8] 0x78cee90180
	int Size;//[Offset: 0x48, Size: 0x4] 0x78cee90200
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4] 0x78cee90280

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4] 0x78cee91f80
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cee92000
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78cee92080
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8] 0x78cee92100
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10] 0x78cee90080

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x1a0] 0x78ce852e80
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 0x8] 0x78ce852f00
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 0x8] 0x78ce852f80
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 0x8] 0x78ce853000
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 0x8] 0x78ce853080
	float percent;//[Offset: 0x2c8, Size: 0x4] 0x78ce853100
	byte BarFillType;//[Offset: 0x2cc, Size: 0x1] 0x78ce853180
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1] 0x78ce851100
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 0x8] 0x78ce851180
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 0x10] 0x78ce851200
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 0x10] 0x78ce851280
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10] 0x78ce851300
	void SetPercent(float InPercent);// 0xa191fc0 0x78ce7c67c0
	void SetIsMarquee(bool InbIsMarquee);// 0xa191e68 0x78ce7c68a0
	void SetFillColorAndOpacity(LinearColor InColor);// 0xa191f18 0x78ce7c6980

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88] 0x78cefeb880
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88] 0x78cefeb900
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88] 0x78cefeb980

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8] 0x78ce6dfd80

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: PlayerLvWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	PlayerLvRewardInfo[] LvRewardInfos;//[Offset: 0x340, Size: 0x10] 0x78ced25c40
	<int,PlayerLvItemWidget*> IDItemMap;//[Offset: 0x350, Size: 0x50] 0x78cf15ec80
	int ActiveboxID;//[Offset: 0x3a0, Size: 0x4] 0x78ced55080
	WidgetSwitcher* RecieveSwitch;//[Offset: 0x3a8, Size: 0x8] 0x78ced55100
	void ToggleLvItem(int BoxID);// 0x8460c34 0x78ced491c0
	void ShowBottom(PlayerLvRewardInfo Info);// 0x8a873f8 0x78ced492a0
	void ScrollToPlayerLv(int lv);// 0x8a873f8 0x78ced49380
	void RequestRecieveLvReward(int BoxID);// 0x8460cdc 0x78ced49460
	void InitLvItems(out const PlayerLvRewardInfo[] RewardInfos);// 0x8a873f8 0x78ced49540

--------------------------------
Class: PlayerLvRewardInfo
	int BoxID;//[Offset: 0x0, Size: 0x4] 0x78cf5d1180
	RewardItem[] LvRewardsInfo;//[Offset: 0x8, Size: 0x10] 0x78cf56ace0

--------------------------------
Class: PlayerLvItemWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	int ItemId;//[Offset: 0x340, Size: 0x4] 0x78ced53300
	ActivityState Status;//[Offset: 0x344, Size: 0x10] 0x78ced53380
	delegate NotifyShowBottom;//[Offset: 0x358, Size: 0x10] 0x78ced53400
	void UpdateStatus();// 0x8a873f8 0x78ced49620
	void UpdateBox(ActivityState State);// 0x8a873f8 0x78ced49700
	void ToggleBottomInfo();// 0x84604fc 0x78ced497e0
	void HighLightBox(bool isHighLight);// 0x8a873f8 0x78ced498c0

--------------------------------
Class: CultivateRewardWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	CultivateRewardItemWidget*[] CulRewardBoxs;//[Offset: 0x340, Size: 0x10] 0x78cebc1c80
	<int,CultivateRewardItemWidget*> CulNRewardBoxMap;//[Offset: 0x350, Size: 0x50] 0x78cf159c40
	<int,CultivateRewardItemWidget*> CulARewardBoxMap;//[Offset: 0x3a0, Size: 0x50] 0x78cf159d00
	CultivateNormalRewardInfo[] TenPopNRewardInfos;//[Offset: 0x3f0, Size: 0x10] 0x78cebc1d20
	CultivateAdvanceRewardInfo[] TenPopARewardInfos;//[Offset: 0x400, Size: 0x10] 0x78cebc1dc0
	void UpdateSeasonWeek(DateTime Start, DateTime End);// 0x8a873f8 0x78cebd66e0
	void UpdatePlayerCulLv(int lv, int Exp);// 0x8a873f8 0x78cebd67c0
	void UnLockAdvance();// 0x8a873f8 0x78cebd68a0
	void InitTenRewardPanel();// 0x8a873f8 0x78cebd6980

--------------------------------
Class: CultivateRewardItemWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	CultivateNormalRewardInfo NRewardInfo;//[Offset: 0x340, Size: 0x80] 0x78cebae400
	CultivateAdvanceRewardInfo ARewardInfo;//[Offset: 0x3c0, Size: 0x18] 0x78cebae480
	void UpdateLvNRewardData(ActivityState NActState);// 0x8a873f8 0x78cebd6a60
	void UpdateLvARewardData(ActivityState AActState);// 0x8a873f8 0x78cebd6b40
	void NotifyLvNRewardRecieved();// 0x8a873f8 0x78cebd6c20
	void NotifyLvARewardRecieved();// 0x8a873f8 0x78cebd6d00
	void InitLvNReward(CultivateNormalRewardInfo NorRewardInfo);// 0x8a873f8 0x78cebd6de0
	void InitLvAReward(CultivateAdvanceRewardInfo AdRewardInfo);// 0x8a873f8 0x78cebd6ec0

--------------------------------
Class: CultivateNormalRewardInfo
	int CulRewardID;//[Offset: 0x0, Size: 0x4] 0x78cf5d1380
	RewardItem NormalReward;//[Offset: 0x8, Size: 0x78] 0x78cf5d1400

--------------------------------
Class: CultivateAdvanceRewardInfo
	int CulRewardID;//[Offset: 0x0, Size: 0x4] 0x78cf5d1580
	RewardItem[] AdvanceRewards;//[Offset: 0x8, Size: 0x10] 0x78cf56ad80

--------------------------------
Class: CultivateTaskWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	int weekNum;//[Offset: 0x340, Size: 0x4] 0x78cebaf200
	int ActiveWeek;//[Offset: 0x344, Size: 0x4] 0x78cebaf280
	int CurWeek;//[Offset: 0x348, Size: 0x4] 0x78cebaf300
	int ActiveWeekDay;//[Offset: 0x34c, Size: 0x4] 0x78cebaf380
	<int,int> IDWeekMap;//[Offset: 0x350, Size: 0x50] 0x78cf159ac0
	<int,int> IDWeekDayMap;//[Offset: 0x3a0, Size: 0x50] 0x78cf159b80
	void UpdateSeasonWeek(DateTime Start, DateTime End);// 0x8a873f8 0x78cebd5d40
	void UpdateCulWeekTaskReward(int ActID, enum ActType);// 0x8a873f8 0x78cebd5e20
	void UpdateCulTaskData(out const ActivityState[] DailyData);// 0x8a873f8 0x78cebd5f00
	void UpdateCulTaskBox(int ActID, enum ActType);// 0x8a873f8 0x78cebd5fe0
	void UnLockAdvanceTasks();// 0x8a873f8 0x78cebd60c0
	void InitCulWeekRewardTask(out const CultivateTaskInfo[] CulWeekRewardTaskInfo);// 0x8a873f8 0x78cebd61a0
	void InitCulTaskBoxes(out const CultivateTaskInfo[] CulDayTaskInfos, out const CultivateTaskInfo[] CulWeekTaskInfos, int weekNum);// 0x8a873f8 0x78cebd6280
	int GetWeekthByID(int ID);// 0x8367474 0x78cebd6360
	int GetWeekDayByID(int ID);// 0x83673c4 0x78cebd6440
	void AddIDWeekMap(int ID, int Week);// 0x8367614 0x78cebd6520
	void AddIDDayMap(int ID, int WeekDay);// 0x8367524 0x78cebd6600

--------------------------------
Class: CultivateTaskInfo
	int TaskID;//[Offset: 0x0, Size: 0x4] 0x78cf5d1980
	int TaskDesiredNum;//[Offset: 0x4, Size: 0x4] 0x78cf5d1a00
	byte Weekth;//[Offset: 0x8, Size: 0x1] 0x78cf5d1a80
	bool isAdvanceTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78cf5d1b00
	bool isWeekTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x78cf5d1b80
	FString taskName;//[Offset: 0x10, Size: 0x10] 0x78cf5d1c00
	FString TaskDesc;//[Offset: 0x20, Size: 0x10] 0x78cf5d1c80
	RewardItem[] TaskRewards;//[Offset: 0x30, Size: 0x10] 0x78cf56ae20

--------------------------------
Class: CultivateExchangeWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateCulShopBuyNum(out const <int,int> idnum_map);// 0x8a873f8 0x78cebd6fa0
	void UpdateCulRewardPool(out const LotteryItem[] CulLotteries);// 0x8a873f8 0x78cebd7080
	void UpdateCulExConfig(int Type, LotteryItem Item);// 0x8a873f8 0x78cebd7160
	void CreateCulShopItems(out const CulShopItemData[] ShopItems);// 0x8a873f8 0x78cebd7240
	void BuyCulShopItemSuccess(int ShopId, int Num);// 0x8a873f8 0x78cebd7320

--------------------------------
Class: LotteryItem
	int LotteryID;//[Offset: 0x0, Size: 0x4] 0x78cf5d1f80
	int Num;//[Offset: 0x4, Size: 0x4] 0x78cf5d2000
	int Weight;//[Offset: 0x8, Size: 0x4] 0x78cf5d2080
	FString IconPath;//[Offset: 0x10, Size: 0x10] 0x78cf5d2100

--------------------------------
Class: CulShopItemData
	int ShopId;//[Offset: 0x0, Size: 0x4] 0x78cefca800
	int ItemId;//[Offset: 0x4, Size: 0x4] 0x78cefca880
	int ItemPrice;//[Offset: 0x8, Size: 0x4] 0x78cefca900
	int LimitNum;//[Offset: 0xc, Size: 0x4] 0x78cefca980
	int LimitLv;//[Offset: 0x10, Size: 0x4] 0x78cefcaa00
	bool LimitAdvance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78cefcaa80
	enum TableType;//[Offset: 0x15, Size: 0x1] 0x78cefd1dc0

--------------------------------
Class: QuickInviteUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateTeamDataList(out const FriendBaseInfo[] infoArr);// 0x8a873f8 0x78ced68820
	void UpdateRecentDataList(out const FriendBaseInfo[] infoArr);// 0x8a873f8 0x78ced68900
	void UpdatePartyDataList(out const FriendBaseInfo[] infoArr);// 0x8a873f8 0x78ced689e0
	void UpdateFriendDataList(out const FriendBaseInfo[] infoArr);// 0x8a873f8 0x78ced68ac0
	void ShowListSort(enum Type, out FriendBaseInfo[] sortList);// 0x847b02c 0x78ced68ba0
	void RefreshCurrentListUI();// 0x8a873f8 0x78ced68c80

--------------------------------
Class: FriendBaseInfo
	enum userState;//[Offset: 0x0, Size: 0x1] 0x78cf5645c0
	enum userSex;//[Offset: 0x1, Size: 0x1] 0x78cf564660
	enum menterRelation;//[Offset: 0x2, Size: 0x1] 0x78cf564700
	enum intimacyRelation;//[Offset: 0x3, Size: 0x1] 0x78cf5647a0
	enum intimacyApplyRelation;//[Offset: 0x4, Size: 0x1] 0x78cf564840
	enum giftState;//[Offset: 0x5, Size: 0x1] 0x78cf5648e0
	enum blackRelation;//[Offset: 0x6, Size: 0x1] 0x78cf564980
	int UserId;//[Offset: 0x8, Size: 0x4] 0x78cf590780
	int userLv;//[Offset: 0xc, Size: 0x4] 0x78cf590800
	int userSegment;//[Offset: 0x10, Size: 0x4] 0x78cf590880
	int intimacy;//[Offset: 0x14, Size: 0x4] 0x78cf590900
	int giftId;//[Offset: 0x18, Size: 0x4] 0x78cf590980
	int headId;//[Offset: 0x1c, Size: 0x4] 0x78cf590a00
	int borderId;//[Offset: 0x20, Size: 0x4] 0x78cf590a80
	int64 Timestamp;//[Offset: 0x28, Size: 0x8] 0x78cf590b00
	int Distance;//[Offset: 0x30, Size: 0x4] 0x78cf590b80
	bool giveMoney;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78cf590c00
	FString UserName;//[Offset: 0x38, Size: 0x10] 0x78cf590c80
	int ServerSortNumber;//[Offset: 0x48, Size: 0x4] 0x78cf590d00
	bool IsGained;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78cf590d80
	int StudentTaskLevel;//[Offset: 0x50, Size: 0x4] 0x78cf590e00

--------------------------------
Class: CheckinWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	CheckinBoxWidget*[] CheckinBoxs;//[Offset: 0x340, Size: 0x10] 0x78ceacbbe0
	<int,CheckinBoxWidget*> IDBoxMap;//[Offset: 0x350, Size: 0x50] 0x78cf157c00
	int curday_box_id;//[Offset: 0x3a0, Size: 0x4] 0x78ceb71700
	bool ActTipChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1] 0x78ceb71780

--------------------------------
Class: CheckinBoxWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	CheckinInfo CheckinInfo;//[Offset: 0x340, Size: 0x100] 0x78ceb71800
	Image* RewardIcon;//[Offset: 0x440, Size: 0x8] 0x78ceb71880
	Image* HighLightImage;//[Offset: 0x448, Size: 0x8] 0x78ceb71900
	Image* RecievedImage;//[Offset: 0x450, Size: 0x8] 0x78ceb71980
	TextBlock* RewardDesc;//[Offset: 0x458, Size: 0x8] 0x78ceb71a00
	TextBlock* DayText;//[Offset: 0x460, Size: 0x8] 0x78ceb71a80
	void SetCheckinBoxData(ActivityState ActState);// 0x8a873f8 0x78ceb65aa0
	void RequestCheckin();// 0x8a873f8 0x78ceb65b80
	void OnRewardRecieved();// 0x8a873f8 0x78ceb65c60
	void InitCheckinBoxInfo(CheckinInfo inCheckinInfo);// 0x83403e0 0x78ceb65d40
	void InitCheckinBoxIcon(FString Path);// 0x8a873f8 0x78ceb65e20
	void HighLightCurDay();// 0x8a873f8 0x78ceb65f00

--------------------------------
Class: CheckinInfo
	int CheckinID;//[Offset: 0x0, Size: 0x4] 0x78cf5d3d00
	int RewardItemID;//[Offset: 0x4, Size: 0x4] 0x78cf5d3d80
	int CostItemID;//[Offset: 0x8, Size: 0x4] 0x78cf5d3e00
	byte DayNum;//[Offset: 0xc, Size: 0x1] 0x78cf5d3e80
	RewardItem Reward;//[Offset: 0x10, Size: 0x78] 0x78cf5d3f00
	RewardItem Cost;//[Offset: 0x88, Size: 0x78] 0x78cf5d3f80

--------------------------------
Class: BuyAdvanceCulWidget.RetainBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateState(int State);// 0x8a873f8 0x78ceb2f040
	void UpdatePlayerMoney(int Num, enum Type);// 0x8a873f8 0x78ceb2f120
	void UpdateMoney(int Gold, int Silver, int Copper);// 0x8a873f8 0x78ceb2f200
	void InitNormalBuy(out const BuyCultivateRewardInfo[] RewardsInfo, int Value, int Price);// 0x8a873f8 0x78ceb2f2e0
	void InitAdvanceBuy(out const BuyCultivateRewardInfo[] RewardsInfo, int Value, int Price);// 0x8a873f8 0x78ceb2f3c0

--------------------------------
Class: BuyCultivateRewardInfo
	bool bAdvance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefca680
	FString Desc;//[Offset: 0x8, Size: 0x10] 0x78cefca700
	FString IconPath;//[Offset: 0x18, Size: 0x10] 0x78cefca780

--------------------------------
Class: RoomInfoWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	UIRoomInfo room_info_;//[Offset: 0x330, Size: 0x80] 0x78ced78800
	int master_id_;//[Offset: 0x3b0, Size: 0x4] 0x78ced78880
	RoomUser[] userinfos_;//[Offset: 0x3b8, Size: 0x10] 0x78ced2be60
	FString pwd_;//[Offset: 0x3c8, Size: 0x10] 0x78ced78980
	bool is_master_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x78ced78a00
	RoomTeamPlayerUI* select_player_;//[Offset: 0x3e0, Size: 0x8] 0x78ced78a80
	int taosha_min_player_num_;//[Offset: 0x3e8, Size: 0x4] 0x78ced78b00
	int luandou_player_num_;//[Offset: 0x3ec, Size: 0x4] 0x78ced78b80
	int taosha_max_team_player_num_;//[Offset: 0x3f0, Size: 0x4] 0x78ced78c00
	int luandou_team_player_num_;//[Offset: 0x3f4, Size: 0x4] 0x78ced78c80
	bool taosha_viewer_state_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1] 0x78ced78d00
	bool luandou_viewer_state_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1] 0x78ced78d80
	UserHallUI* UserHallUI;//[Offset: 0x400, Size: 0x8] 0x78ced78e00
	void WidgetGetRoomInfos();// 0x8a873f8 0x78ced6dde0
	void UpdatePlayerOperate(bool can_operate);// 0x8487db8 0x78ced6dec0
	void UpdatePlayer(out const RoomUser Player);// 0x8487bf4 0x78ced6dfa0
	void SetSelectPlayer(out const RoomUser Player);// 0x8a873f8 0x78ced6e080
	void SetRoomTalk(FString Name, FString Info);// 0x8a873f8 0x78ced6e160
	void SetRoomInfo(out const UIRoomInfo room_info, int master_id, out const RoomUser[] userinfos, FString pwd);// 0x8487e68 0x78ced6e240
	void ResetLanguage();// 0x8a873f8 0x78ced6e320
	void RemovePlayer(out const RoomUser Player);// 0x8a873f8 0x78ced6e400
	void QuitTick();// 0x8a873f8 0x78ced6e4e0
	void PlayerBeenRemove(out const RoomUser Player);// 0x8a873f8 0x78ced6e5c0
	void PlayerBeenCreate(out const RoomUser Player);// 0x8a873f8 0x78ced6e6a0
	void MasterStartGame();// 0x8a873f8 0x78ced6adc0
	void IsReadyGame(bool State);// 0x8a873f8 0x78ced6aea0
	void InitServerList(out const int[] server);// 0x8a873f8 0x78ced6af80
	FString GetMapName(int map_id);// 0x8487cbc 0x78ced6b060
	void DeletePlayer(int player_id);// 0x8487b4c 0x78ced6b140
	void CreateTeamWidget(int index, int Num, bool is_team);// 0x8a873f8 0x78ced6b220
	void CreatePlayerComplete();// 0x8a873f8 0x78ced6b300
	void CreatePlayer(out const RoomUser Player);// 0x8a873f8 0x78ced6b3e0
	void ClearAll();// 0x8a873f8 0x78ced6b4c0
	void CheckRoomOpen();// 0x8a873f8 0x78ced6b5a0
	void CheckPlayerOperate();// 0x8a873f8 0x78ced6b680
	void ChangeRoomInfoComplete();// 0x8a873f8 0x78ced6b760

--------------------------------
Class: RoomTeamPlayerUI.UserWidget.Widget.Visual.Object
	RoomUser player_;//[Offset: 0x260, Size: 0x20] 0x78ced7a400
	bool is_select_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78ced7a480
	int team_index_;//[Offset: 0x284, Size: 0x4] 0x78ced7a500
	enum type_;//[Offset: 0x288, Size: 0x1] 0x78ced2bd20
	void UpdatePlayerInfo(out const RoomUser Player, int master_id, bool is_master);// 0x8a873f8 0x78ced6d980
	void SetSelectState(bool State);// 0x8a873f8 0x78ced6da60
	void ResetUserInfo();// 0x8489718 0x78ced6db40
	void Remove();// 0x8a873f8 0x78ced6dc20
	void Init(int team_index, enum Type);// 0x848972c 0x78ced6dd00

--------------------------------
Class: TeachVideoUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78ceda7000
	void StartInto();// 0x8a873f8 0x78cedb0860

--------------------------------
Class: OtherPersonalUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78cece3b00
	void SetMode(int Sort, int server, int PlayerID);// 0x8a873f8 0x78cecf0a20
	void SetInfo(PersonalGameData Rank);// 0x8a873f8 0x78cecf0b00
	void ResetLanguage();// 0x8a873f8 0x78cecf0be0
	void InitServerList(out const int[] server);// 0x8a873f8 0x78cecf0cc0
	void CloseSelect();// 0x8a873f8 0x78cecf0da0
	void Clear();// 0x8a873f8 0x78cecf0e80

--------------------------------
Class: UI_MobileSetting.UserWidgetBase.UserWidget.Widget.Visual.Object
	MobileOperationSettingUI* OperationSettingUI;//[Offset: 0x330, Size: 0x8] 0x78cedace80
	<enum,PVPSelectUI*> PVPSelectUIs;//[Offset: 0x338, Size: 0x50] 0x78cf15fa00
	void ShowPVPSelectUI(UserWidgetBase* DefaultPVPSelectUI, enum GameMode);// 0x84c70c4 0x78cedb5e20
	void SetVolumeQuality(int Level);// 0x84c78d0 0x78cedb5f00
	void SetUserQuickMsgIDs(int[] IDs);// 0x84c7430 0x78cedb5fe0
	void SetSensitivityType(int Type);// 0x8a873f8 0x78cedb60c0
	void SetLocalVoiceRecordVolume(float percent);// 0x84c7ddc 0x78cedb61a0
	void SetLocalVoicePlayVolume(float percent);// 0x84c7d00 0x78cedb6280
	void SetLanguage(int Value);// 0x84c75d4 0x78cedb6360
	void SetIsInGame(bool ingame);// 0x8a873f8 0x78cedb6440
	void SetGamma(int Value);// 0x84c7200 0x78cedb6520
	void SetGameVolumeValid(enum Type, bool Value);// 0x84c79ac 0x78cedb6600
	void SetGameVolumeMultiplier(enum Type, float Value);// 0x84c7b5c 0x78cedb66e0
	void SetBaseSetting(enum Type, int Num);// 0x84c77dc 0x78cedb67c0
	void Open();// 0x8a873f8 0x78cedb68a0
	void InitSprintingRange();// 0x8a873f8 0x78cedb6980
	void InitQuickMsgUI();// 0x84c741c 0x78cedb6a60
	void InitPrivacySettings(out const bool[] Settings);// 0x8a873f8 0x78cedb6b40
	void InitDefaultQuickMsgs(out const QuickMsgInfo Info, int index);// 0x8a873f8 0x78cedb6c20
	void InitAllQuickMsgs(out const QuickMsgInfo Info, bool IsUsing);// 0x8a873f8 0x78cedb6d00
	void HidePVPSelectUI(enum GameMode);// 0x84c752c 0x78cedb6de0
	int GetVolumeQuality();// 0x84c7978 0x78cedb6ec0
	float GetLocalVoiceRecordVolumePercent();// 0x84c7e84 0x78cedb6fa0
	float GetLocalVoicePlayVolumePercent();// 0x84c7da8 0x78cedb7080
	int GetGamma();// 0x84c71cc 0x78cedb7160
	bool GetGameVolumeValid(enum Type);// 0x84c7aa8 0x78cedb7240
	FString GetGameVolumeTypeName(enum Type);// 0x8a873f8 0x78cedb7320
	float GetGameVolumeMultiplier(enum Type);// 0x84c7c50 0x78cedb3a40
	int[] GetDefaultQuickMsgIDs();// 0x84c736c 0x78cedb3b20
	FString GetBaseSettingTypeName(enum Type);// 0x8a873f8 0x78cedb3c00
	int GetBaseSettingMaxNum(enum Type);// 0x84c767c 0x78cedb3ce0
	int GetBaseSetting(enum Type);// 0x84c772c 0x78cedb3dc0
	void DestroyOperationSettingUI();// 0x8a873f8 0x78cedb3ea0
	void CreateOperationSettingUI();// 0x84c71b8 0x78cedb3f80
	void Close();// 0x8a873f8 0x78cedb4060
	void ClearFeedbackContext();// 0x8a873f8 0x78cedb4140
	void CheckSensitivity();// 0x84c7358 0x78cedb4220
	float ChangeSensitivity(int Type);// 0x84c72a8 0x78cedb4300

--------------------------------
Class: QuickMsgInfo
	int msgID;//[Offset: 0x0, Size: 0x4] 0x78cf5d2500
	int msgType;//[Offset: 0x4, Size: 0x4] 0x78cf5d2580
	FString msgContent;//[Offset: 0x8, Size: 0x10] 0x78cf5d2600
	FString msgSoundPath;//[Offset: 0x18, Size: 0x10] 0x78cf5d2680

--------------------------------
Class: MobileOperationSettingUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UI_MobileSetting* MobileSetting;//[Offset: 0x330, Size: 0x8] 0x78cec9bc00

--------------------------------
Class: PVPSelectUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UI_MobileSetting* MobileSetting;//[Offset: 0x338, Size: 0x8] 0x78ced73980
	FString[] weapons_icons_;//[Offset: 0x3a0, Size: 0x10] 0x78ced2ac40
	int[] weapons_ids_;//[Offset: 0x3b0, Size: 0x10] 0x78ced2ace0
	FString[] weapons_names_;//[Offset: 0x3c0, Size: 0x10] 0x78ced2ad80
	FString[] weapons_descs_;//[Offset: 0x3d0, Size: 0x10] 0x78ced2ae20
	FString[] range_weapons_icons_;//[Offset: 0x3e0, Size: 0x10] 0x78ced2aec0
	int[] range_weapons_ids_;//[Offset: 0x3f0, Size: 0x10] 0x78ced2af60
	FString[] range_weapons_names_;//[Offset: 0x400, Size: 0x10] 0x78ced2b000
	FString[] range_weapons_descs_;//[Offset: 0x410, Size: 0x10] 0x78ced2b0a0
	FString[] range_consumables_icons_;//[Offset: 0x420, Size: 0x10] 0x78ced2b140
	int[] range_consumables_number_;//[Offset: 0x430, Size: 0x10] 0x78ced2b1e0
	FString[] missile_icons_;//[Offset: 0x440, Size: 0x10] 0x78ced2b280
	int[] missile_ids_;//[Offset: 0x450, Size: 0x10] 0x78ced2b320
	FString[] missile_names_;//[Offset: 0x460, Size: 0x10] 0x78ced2b3c0
	FString[] missile_descs_;//[Offset: 0x470, Size: 0x10] 0x78ced2b460
	int[] missile_number_;//[Offset: 0x480, Size: 0x10] 0x78ced2b500
	FString[] items_icons_;//[Offset: 0x490, Size: 0x10] 0x78ced2b5a0
	int[] items_ids_;//[Offset: 0x4a0, Size: 0x10] 0x78ced2b640
	FString[] items_names_;//[Offset: 0x4b0, Size: 0x10] 0x78ced2b6e0
	FString[] items_descs_;//[Offset: 0x4c0, Size: 0x10] 0x78ced2b780
	int[] items_numbers_;//[Offset: 0x4d0, Size: 0x10] 0x78ced2b820
	FString[] xinfa_icons_;//[Offset: 0x4e0, Size: 0x10] 0x78ced2b8c0
	int[] xinfa_ids_;//[Offset: 0x4f0, Size: 0x10] 0x78ced2b960
	FString[] xinfa_names_;//[Offset: 0x500, Size: 0x10] 0x78ced290c0
	FString[] xinfa_descs_;//[Offset: 0x510, Size: 0x10] 0x78ced29160
	FString[] tongyong_icons_;//[Offset: 0x520, Size: 0x10] 0x78ced29200
	int[] tongyong_ids_;//[Offset: 0x530, Size: 0x10] 0x78ced292a0
	FString[] tongyong_names_;//[Offset: 0x540, Size: 0x10] 0x78ced29340
	FString[] tongyong_descs_;//[Offset: 0x550, Size: 0x10] 0x78ced293e0
	void UpdateEffectInfo(out const AdvPoolEffectInfo NewEffectInfo);// 0x847746c 0x78ced68d60
	void SetWeapon(int index, int WeaponItemId);// 0x8477a08 0x78ced68e40
	void SetUIWeapon(int index, int ID, const PaperSprite* icon, out const int[] skillids, out const FString[] skillnames, out const FString[] skilldescs, out const FString[] skillicons);// 0x8a873f8 0x78ced68f20
	void SetUISkill(int Type, int index, int ID);// 0x8a873f8 0x78ced69000
	void SetUIRangeWeapon(int ID, const PaperSprite* icon, const PaperSprite* consumablesicon, int Number);// 0x8a873f8 0x78ced65720
	void SetUIMissile(int ID, const PaperSprite* icon, int Number);// 0x8a873f8 0x78ced65800
	void SetUIItem(int index, int ID, const PaperSprite* icon, int Number);// 0x8a873f8 0x78ced658e0
	void SetSkillHotKey(int index, out const FText hotkeyname);// 0x8a873f8 0x78ced659c0
	void SetSkill(int TypeIndex, int index, int skillid);// 0x84778cc 0x78ced65aa0
	void SetResurrectionInfo(out const ResurrectionInfo Info);// 0x84776c4 0x78ced65b80
	void SetItemHotKey(int index, out const FText hotkeyname);// 0x8a873f8 0x78ced65c60
	void SetItem(int index, int ItemId);// 0x84777dc 0x78ced65d40
	void SetHandSkills(out const int[] skillids, out const FString[] skillnames, out const FString[] skilldescs, out const FString[] icons);// 0x8a873f8 0x78ced65e20
	void SaveToConfig();// 0x8477540 0x78ced65f00
	void SaveChange();// 0x84777c8 0x78ced65fe0
	void RandomSelect();// 0x84777a0 0x78ced660c0
	void InitIcons(out const int[] SkinIds);// 0x8477604 0x78ced661a0
	void InitHotKeys();// 0x8477af8 0x78ced66280
	void InitFromConfig(enum NewGameMode);// 0x8477554 0x78ced66360
	void InitByInfo(out const ResurrectionInfo Info);// 0x8477b0c 0x78ced66440
	void InitAllEvents();// 0x8a873f8 0x78ced66520
	void CancelChange();// 0x84777b4 0x78ced66600

--------------------------------
Class: TianYiGeWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	int[] normalWeaponIds;//[Offset: 0x330, Size: 0x10] 0x78ced2fb00
	enum CurWeaponType;//[Offset: 0x340, Size: 0x1] 0x78ced2fba0
	int SkinId;//[Offset: 0x344, Size: 0x4] 0x78ceda9080
	int SkinType;//[Offset: 0x348, Size: 0x4] 0x78ceda9100
	int SkinBtnIdex;//[Offset: 0x34c, Size: 0x4] 0x78ceda9180
	DisplayActor* DisplayActor;//[Offset: 0x350, Size: 0x8] 0x78ceda9200
	bool showSheath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x78ceda9280
	<int,FString> heart_skill_map;//[Offset: 0x360, Size: 0x50] 0x78cf15fd00
	<int,FString> body_skill_map;//[Offset: 0x3b0, Size: 0x50] 0x78cf15fdc0
	<int,FString> mass_skill_map;//[Offset: 0x400, Size: 0x50] 0x78cf15fe80
	<int,FString> secret_skill_map;//[Offset: 0x450, Size: 0x50] 0x78cf15ff40
	int CurSkillId;//[Offset: 0x4a0, Size: 0x4] 0x78ceda7600
	int[] WeaponSkillIds;//[Offset: 0x4a8, Size: 0x10] 0x78ced2fc40
	float base_damage;//[Offset: 0x4b8, Size: 0x4] 0x78ceda7700
	int[] NoResSkinIds;//[Offset: 0x4c0, Size: 0x10] 0x78ced2fce0
	void ShowTianYiGe();// 0x8a873f8 0x78cedb2d20
	void SetWeaponTypeName(enum Type);// 0x8a873f8 0x78cedb2e00
	void SetWeaponSkillDetail(out const FText title, out const FText Content, float damage, float cd, float Range, float tough, float cuttough);// 0x8a873f8 0x78cedb2ee0
	void SetTYGSkinBtnInfo(out const int ID, FString Name, enum Type, out const int skinIdx);// 0x8a873f8 0x78cedb2fc0
	void SetTopWeaponSkillContent(PaperSprite* icon, int Order);// 0x8a873f8 0x78cedb30a0
	void SetSecretSkillDetail(out const FText title, out const FText Content, float damage, float cd, float Range, float tough, float cuttough, float neili, PaperSprite* icon);// 0x8a873f8 0x78cedb3180
	void SetOtherSkillDetail(out const FText title, out const FText Content, PaperSprite* icon);// 0x8a873f8 0x78cedb3260
	void SetModelShowType();// 0x84bec74 0x78cedb3340
	void SetModelByID(int Type, int ID);// 0x84bec88 0x78cedb3420
	void SetDetail(FString Name, FString Desc);// 0x8a873f8 0x78cedb3500
	void SetATKDetail(out const float damge, out const float Speed, out const float Range);// 0x8a873f8 0x78cedb35e0
	void ResetSkinBtnsView();// 0x8a873f8 0x78cedb36c0
	void ResetCurView();// 0x8a873f8 0x78cedb37a0
	void RequestWeaponSkillDetail(int Order);// 0x84beb24 0x78cedb3880
	void RequestWeaponSkill(int Order);// 0x84bebcc 0x78cedb3960
	void RequestSecretSkillDetail(int ID);// 0x84bea7c 0x78cedb0080
	void RequestOtherSkillDetail(int ID);// 0x84be9d4 0x78cedb0160
	void ReadWeaponIDs();// 0x84bef24 0x78cedb0240
	void ReadSkillMaps();// 0x84bef10 0x78cedb0320
	void GetInfoForSkinBtn(enum Type);// 0x84bed78 0x78cedb0400
	void GetDetail(int ID, int Type);// 0x84bee20 0x78cedb04e0
	void CreateTYGWeaponBtn(int ID, enum Type);// 0x8a873f8 0x78cedb05c0
	void CreateNoResSkinIds();// 0x84be9c0 0x78cedb06a0
	void CloseSkinShow();// 0x8a873f8 0x78cedb0780

--------------------------------
Class: RankUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	enum CurRankType;//[Offset: 0x330, Size: 0x1] 0x78ced2a560
	int LeftButtonIdx;//[Offset: 0x334, Size: 0x4] 0x78ced74580
	int TopSelectIdx;//[Offset: 0x338, Size: 0x4] 0x78ced74600
	int PlayerNum;//[Offset: 0x33c, Size: 0x4] 0x78ced74680
	<FString,RankInfo> local_self_record_map;//[Offset: 0x340, Size: 0x50] 0x78cf15e440
	<FString,DateTime> time_record_map;//[Offset: 0x3e0, Size: 0x50] 0x78cf15e500
	void SetSelfRankInfo(out const RankInfo Info);// 0x8a873f8 0x78ced67b00
	void SetRankInfo(out const RankInfo[] arr);// 0x8a873f8 0x78ced67be0
	void RequestRankInfo();// 0x847cf94 0x78ced67cc0
	void RequestRankDetail(int ID);// 0x847ce84 0x78ced67da0
	void OpenRank(enum Type);// 0x8a873f8 0x78ced67e80
	ClientNetMessageHandle* GetNetHandle();// 0x847cf2c 0x78ced67f60
	FString GetMapKey();// 0x847cfa8 0x78ced68040
	ClientLoginHUD* GetHUD();// 0x847cf60 0x78ced68120

--------------------------------
Class: RankInfo
	enum sex;//[Offset: 0x0, Size: 0x1] 0x78cefd1fa0
	int sort_id;//[Offset: 0x4, Size: 0x4] 0x78cefcb200
	int ID;//[Offset: 0x8, Size: 0x4] 0x78cefcb280
	int icon_id;//[Offset: 0xc, Size: 0x4] 0x78cefcb300
	int border_id;//[Offset: 0x10, Size: 0x4] 0x78cefcb380
	int rank_score;//[Offset: 0x14, Size: 0x4] 0x78cefcb400
	int Level;//[Offset: 0x18, Size: 0x4] 0x78cefcb480
	int Point;//[Offset: 0x1c, Size: 0x4] 0x78cefcb500
	int region_code;//[Offset: 0x20, Size: 0x4] 0x78cefcb580
	FString Name;//[Offset: 0x28, Size: 0x10] 0x78cefc9500
	FString extra_name;//[Offset: 0x38, Size: 0x10] 0x78cefc9580

--------------------------------
Class: RankEntranceUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	delegate OnOpenRank;//[Offset: 0x330, Size: 0x10] 0x78ced74f00
	void Show();// 0x8a873f8 0x78ced683c0
	void OpenRank(enum Type);// 0x847c27c 0x78ced684a0

--------------------------------
Class: MeridianUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	int planId;//[Offset: 0x330, Size: 0x4] 0x78cec98880
	int SuiNum;//[Offset: 0x334, Size: 0x4] 0x78cec98900
	int old_acu_id;//[Offset: 0x338, Size: 0x4] 0x78cec98980
	int new_acu_id;//[Offset: 0x33c, Size: 0x4] 0x78cec98a00
	<enum,int> Plan1MeridianMap;//[Offset: 0x340, Size: 0x50] 0x78cf15b440
	<enum,int> Plan2MeridianMap;//[Offset: 0x390, Size: 0x50] 0x78cf15b500
	<enum,int> Plan3MeridianMap;//[Offset: 0x3e0, Size: 0x50] 0x78cf15b5c0
	<int,AcupointInfo> acu_map;//[Offset: 0x430, Size: 0x50] 0x78cf15b680
	<int,OfficialMeriInfo> official_map;//[Offset: 0x480, Size: 0x50] 0x78cf15b740
	<int,int> lv_up_map;//[Offset: 0x4d0, Size: 0x50] 0x78cf15b800
	<int,int> lv_one_map;//[Offset: 0x520, Size: 0x50] 0x78cf15b8c0
	<enum,AcuPropInfo> acu_prop_map;//[Offset: 0x570, Size: 0x50] 0x78cf15b980
	void UseOfficialPlanSuccess(int ID);// 0x8a873f8 0x78cec8cd40
	void UpdateSuiNum(int Num);// 0x8a873f8 0x78cec8ce20
	void UpdatePlanCont(int ID, int planId);// 0x83c7f8c 0x78cec8cf00
	void SwitchToAcuChangePanel(enum Type, out const int[] IDs);// 0x8a873f8 0x78cec8cfe0
	void ShowOfficialLeft(out const int[] IDs);// 0x8a873f8 0x78cec8d0c0
	void ShowAcu(out const AcupointInfo[] arr, out const int[] lvs);// 0x8a873f8 0x78cec8d1a0
	void SetQuickLvUpMap(out const <int,int> Map, int costNum);// 0x8a873f8 0x78cec8d280
	void SetPlanProps(out const <enum,float> Map);// 0x8a873f8 0x78cec8d360
	void SetOfficialProps(out const <enum,float> Map);// 0x8a873f8 0x78cec8d440
	void RequestShowAcuDown(enum main_type, int lv);// 0x83c8540 0x78cec8d520
	void RequestShowAcu(enum main_type, enum meri_type);// 0x83c8634 0x78cec8d600
	int[] RequestRefreshOfficialPlan(enum offi_type);// 0x83c8444 0x78cec8d6e0
	void RemoveOldAcu();// 0x83c7e20 0x78cec8d7c0
	void QuickUpSure(out const <int,int> Map);// 0x8a873f8 0x78cec8d8a0
	void PickSuiResult(int Type, out const int[] rewards);// 0x8a873f8 0x78cec8d980
	void ParseMeridianData();// 0x83c8728 0x78cec8da60
	void Open();// 0x8a873f8 0x78cec8db40
	void InitMeriRewardPool(int Type, int consume_type, int consume, int min_reward, int max_reward);// 0x8a873f8 0x78cec8dc20
	int GetToMaxExp(int lv);// 0x83c7edc 0x78cec8dd00
	void GetPropDetailByAcuType(enum Type, out FString Name, out int valuetype);// 0x83c80dc 0x78cec8dde0
	void GenerateDefaultPlan();// 0x83c80c8 0x78cec8dec0
	void EmptyCurPlanSuccess();// 0x8a873f8 0x78cec8dfa0
	void EmptyCurPlan();// 0x83c80b4 0x78cec8e080
	void CreatePlans(out const FString[] names);// 0x8a873f8 0x78cec8e160
	void CollectAcuArr(int[] acuIds, bool official);// 0x83c8238 0x78cec8e240
	bool CheckIsEquiping(int ID);// 0x83c8390 0x78cec8e320
	bool CheckCurPlanEmpty();// 0x83c807c 0x78cec8e400
	void ChangePlanSure(int ID);// 0x8a873f8 0x78cec8e4e0
	void ChangePlanName(int planId, FString Name);// 0x8a873f8 0x78cec8e5c0
	void ChangeAcuSure(int old_id, int new_id);// 0x8a873f8 0x78cec8e6a0
	void CannotQuickLvUp();// 0x8a873f8 0x78cec8adc0
	void AcuUpSure(int ID, int Level);// 0x8a873f8 0x78cec8aea0
	void AcuSlotClicked(enum Type);// 0x83c7e34 0x78cec8af80
	void AcuDownSure(out const int[] ID);// 0x8a873f8 0x78cec8b060

--------------------------------
Class: AcupointInfo
	enum main_type;//[Offset: 0x0, Size: 0x1] 0x78cefd20e0
	enum meri_type;//[Offset: 0x1, Size: 0x1] 0x78cefd2180
	enum acu_type1;//[Offset: 0x2, Size: 0x1] 0x78cefd2220
	enum acu_type2;//[Offset: 0x3, Size: 0x1] 0x78cefd22c0
	int acu_id;//[Offset: 0x4, Size: 0x4] 0x78cefc9a80
	int prop1_type;//[Offset: 0x8, Size: 0x4] 0x78cefc9b00
	int prop2_type;//[Offset: 0xc, Size: 0x4] 0x78cefc9b80
	int effect_type;//[Offset: 0x10, Size: 0x4] 0x78cefc9c00
	float[] props1;//[Offset: 0x18, Size: 0x10] 0x78cefd2360
	float[] props2;//[Offset: 0x28, Size: 0x10] 0x78cefd2400
	float[] effects;//[Offset: 0x38, Size: 0x10] 0x78cefd24a0
	FString acu_name;//[Offset: 0x48, Size: 0x10] 0x78cefc9e00
	FString prop1_name;//[Offset: 0x58, Size: 0x10] 0x78cefc9e80
	FString prop2_name;//[Offset: 0x68, Size: 0x10] 0x78cefc9f00
	FString effect_name;//[Offset: 0x78, Size: 0x10] 0x78cefc9f80
	FString icon_path;//[Offset: 0x88, Size: 0x10] 0x78cefca000

--------------------------------
Class: OfficialMeriInfo
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cefc9600
	FString Desc;//[Offset: 0x10, Size: 0x10] 0x78cefc9680
	int[] acu_arr;//[Offset: 0x20, Size: 0x10] 0x78cefd2040

--------------------------------
Class: AcuPropInfo

--------------------------------
Class: SeasonPanelUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78ced7f400
	void UpdateSeasonTask(SeasonTaskData season_task);// 0x8a873f8 0x78ced828c0
	void RefreshSeasonTask(out const SeasonTaskData[] season_tasks);// 0x8a873f8 0x78ced829a0
	void InitSeasonTask(out const SeasonTaskData[] season_tasks);// 0x8a873f8 0x78ced82a80
	void InitSeasonData(int cur_season_id, out const SeasonInfoData[] season_data);// 0x8a873f8 0x78ced82b60

--------------------------------
Class: FindCombatUI.UserWidget.Widget.Visual.Object
	void UpdatePlayerMoney(int Num, enum Type);// 0x8a873f8 0x78cebdb140
	void ShowFindCTResult(out const FindCTData[] arr);// 0x8a873f8 0x78cebdb220
	void OpenFindCombatUI();// 0x8a873f8 0x78cebdb300
	void JoinCTRequestSuccess();// 0x8a873f8 0x78cebdb3e0

--------------------------------
Class: FindCTData
	int ct_id;//[Offset: 0x0, Size: 0x4] 0x78cefc8680
	int ct_lv;//[Offset: 0x4, Size: 0x4] 0x78cefc8700
	int ct_memnum;//[Offset: 0x8, Size: 0x4] 0x78cefc8780
	int ct_icon;//[Offset: 0xc, Size: 0x4] 0x78cefc8800
	FString ct_name;//[Offset: 0x10, Size: 0x10] 0x78cefc8880
	bool ct_friend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cefc8900

--------------------------------
Class: CombatTeamUI.BaseWidget.UserWidget.Widget.Visual.Object
	int ct_id;//[Offset: 0x260, Size: 0x4] 0x78ceba6800
	int FlagID;//[Offset: 0x264, Size: 0x4] 0x78ceba6880
	int task_aim;//[Offset: 0x268, Size: 0x4] 0x78ceba6900
	enum Status;//[Offset: 0x26c, Size: 0x1] 0x78cebc0d80
	int cur_task_id;//[Offset: 0x270, Size: 0x4] 0x78ceba6a00
	ApplyRelationInfo[] FriendRecData;//[Offset: 0x278, Size: 0x10] 0x78cebc0e20
	void UpdateCTTaskData(out const CTTaskData[] arr);// 0x8a873f8 0x78ceb9dd00
	void UpdateCTRecNum(int Num);// 0x8a873f8 0x78ceb9dde0
	void UpdateCTName(FString Name);// 0x8a873f8 0x78ceb9dec0
	void UpdateCTMembers(out const CTMemberInfo[] members);// 0x8a873f8 0x78ceb9dfa0
	void UpdateCTLvInfo(int ct_lv, int cur_exp, int max_exp, float Extra);// 0x8a873f8 0x78ceb9e080
	void UpdateCTFlagIcon(PaperSprite* icon);// 0x8a873f8 0x78ceb9e160
	void UpdateCTAnn(FString ann);// 0x8a873f8 0x78ceb9e240
	void ShowCTFriendRec();// 0x8a873f8 0x78ceb9e320
	void ShowApplyCT();// 0x8a873f8 0x78ceb9e400
	void PlayerIsCTLeader(int ct_id, bool leader);// 0x8a873f8 0x78ceb9e4e0
	void OpenCombatTeamUI();// 0x8a873f8 0x78ceb9e5c0
	void AddCTTalk(FString Name, FString Info);// 0x8a873f8 0x78ceb9e6a0

--------------------------------
Class: BaseWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: CTTaskData
	int task_id;//[Offset: 0x0, Size: 0x4] 0x78cefc8c00
	int task_pro;//[Offset: 0x4, Size: 0x4] 0x78cefc8c80

--------------------------------
Class: CTMemberInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefc8980
	int headId;//[Offset: 0x4, Size: 0x4] 0x78cefc8a00
	int borderId;//[Offset: 0x8, Size: 0x4] 0x78cefc8a80
	int lv;//[Offset: 0xc, Size: 0x4] 0x78cefc8b00
	FString Name;//[Offset: 0x10, Size: 0x10] 0x78cefc8b80

--------------------------------
Class: HeroPanelUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	int CurLeftTab;//[Offset: 0x330, Size: 0x4] 0x78cec05080
	int CurActionTab;//[Offset: 0x334, Size: 0x4] 0x78cec05100
	int CurWeaponTab;//[Offset: 0x338, Size: 0x4] 0x78cec05180
	int CurRemoteTab;//[Offset: 0x33c, Size: 0x4] 0x78cec05200
	int CurItemID;//[Offset: 0x340, Size: 0x4] 0x78cec05280
	WeaponPosInfo[] WeaponPosList;//[Offset: 0x348, Size: 0x10] 0x78cebc77c0
	int QuenWeaponType;//[Offset: 0x358, Size: 0x4] 0x78cec03280
	<int,int> QuenLevelNumMap;//[Offset: 0x360, Size: 0x50] 0x78cf15bf80
	void UpdateSkinInfo(int ForceSkinId);// 0x8a873f8 0x78cebf6280
	void UpdateShopInfoByType(enum ShopInfoType);// 0x8a873f8 0x78cebf6360
	void UpdateActionOrEmoji(int EquipId);// 0x8a873f8 0x78cebf6440
	void SortItemArray(out const int[] ItemArray, out int[] sortArray, int Type);// 0x83990c0 0x78cebf6520
	void SetDisplayActorPosAndRot();// 0x83990ac 0x78cebf6600
	void ReadQuenLevelTable();// 0x8399098 0x78cebf66e0
	void OnSkipUI(int TableIndex, int SelectIndex, int ItemId);// 0x8a873f8 0x78cebf67c0
	bool IsEquip(int ID);// 0x8399228 0x78cebf68a0
	void HandleBuyHero(int HeroId);// 0x8a873f8 0x78cebf6980
	void GetQuenReset(out int weaponchip, out int Silver);// 0x8398c3c 0x78cebf6a60
	int GetQuenLevel(int weapontype);// 0x8398fe8 0x78cebf6b40
	void GetQuenDetail(int weapontype, int Level, out int quen_type, out FString quen_desc);// 0x8398e44 0x78cebf6c20
	void GetQuenConsume(out int weaponchip, out int Silver);// 0x8398d40 0x78cebf6d00
	void BP_UpdateQuenData(int Level);// 0x8a873f8 0x78cebf6de0
	void BP_ShowQuenSuccess(int Level);// 0x8a873f8 0x78cebf6ec0
	void BlueprintNavigateToItem(out const ShopItemInfo Info, enum SkinType, int HeroId);// 0x8a873f8 0x78cebf6fa0

--------------------------------
Class: WeaponPosInfo
	enum[] Type;//[Offset: 0x0, Size: 0x10] 0x78cee5ec00
	Vector GlobalPos;//[Offset: 0x10, Size: 0xc] 0x78cefbee80
	Rotator GlobalRot;//[Offset: 0x1c, Size: 0xc] 0x78cefbef00
	Vector WeaponPos;//[Offset: 0x28, Size: 0xc] 0x78cefbef80
	Rotator WeaponRot;//[Offset: 0x34, Size: 0xc] 0x78cefbf000
	Vector ShealthPos;//[Offset: 0x40, Size: 0xc] 0x78cefbf080
	Rotator ShealthRot;//[Offset: 0x4c, Size: 0xc] 0x78cefbf100
	SpecifyWeaponPosInfo[] SpeciyWeaponPosList;//[Offset: 0x58, Size: 0x10] 0x78cee5ed40

--------------------------------
Class: SpecifyWeaponPosInfo
	int[] ID;//[Offset: 0x0, Size: 0x10] 0x78cee5eca0
	Vector GlobalPos;//[Offset: 0x10, Size: 0xc] 0x78cefbf200
	Rotator GlobalRot;//[Offset: 0x1c, Size: 0xc] 0x78cefbf280
	Vector WeaponPos;//[Offset: 0x28, Size: 0xc] 0x78cefbf300
	Rotator WeaponRot;//[Offset: 0x34, Size: 0xc] 0x78cefbf380
	Vector ShealthPos;//[Offset: 0x40, Size: 0xc] 0x78cefbf400
	Rotator ShealthRot;//[Offset: 0x4c, Size: 0xc] 0x78cefbf480

--------------------------------
Class: ShopItemInfo
	int ShopId;//[Offset: 0x0, Size: 0x4] 0x78cf574e00
	int ConnectID;//[Offset: 0x4, Size: 0x4] 0x78cf574e80
	enum TableType;//[Offset: 0x8, Size: 0x1] 0x78cf5620e0
	FString Name;//[Offset: 0x10, Size: 0x10] 0x78cf574f80
	FString icon;//[Offset: 0x20, Size: 0x10] 0x78cf575000
	FString Desc;//[Offset: 0x30, Size: 0x10] 0x78cf575080
	ShopItemPrice[] ShopItemPrices;//[Offset: 0x40, Size: 0x10] 0x78cf562220
	int HoldNum;//[Offset: 0x50, Size: 0x4] 0x78cf575280
	int HoldLimit;//[Offset: 0x54, Size: 0x4] 0x78cf573200
	int AddIntimacy;//[Offset: 0x58, Size: 0x4] 0x78cf573280
	enum Quality;//[Offset: 0x5c, Size: 0x1] 0x78cf5622c0
	bool bCanSell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1] 0x78cf573380
	int DiscountType;//[Offset: 0x60, Size: 0x4] 0x78cf573400
	FString Sign;//[Offset: 0x68, Size: 0x10] 0x78cf573480

--------------------------------
Class: ShopItemPrice
	enum MoneyType;//[Offset: 0x0, Size: 0x1] 0x78cf562180
	int Num;//[Offset: 0x4, Size: 0x4] 0x78cf575180

--------------------------------
Class: HeroInfoPanel.UserWidgetBase.UserWidget.Widget.Visual.Object
	LevelSequenceActor* currentLevelSequenceActor;//[Offset: 0x330, Size: 0x8] 0x78cec04180
	void UpdateHeroSkin(int HeroId);// 0x8a873f8 0x78cebf7080
	void UpdateHeroMasteryUI();// 0x8a873f8 0x78cebf7160
	void UpdateHeroMasteryListUI();// 0x8a873f8 0x78cebf7240
	void UpdateHeroInfo();// 0x8a873f8 0x78cebf7320
	void ShowUIAfterAnim();// 0x8a873f8 0x78cebf3a40
	void SetInfo(int HeroId, enum ReturnToUI);// 0x8a873f8 0x78cebf3b20
	void PlayHeroSkinSquence(int SkinId, int ColorId);// 0x8397e0c 0x78cebf3c00
	void OnSequenceFinished();// 0x8397df8 0x78cebf3ce0
	void HandleBuyHero(int HeroId);// 0x8a873f8 0x78cebf3dc0
	void ChangeCharacterHidden(bool HiddenFlag);// 0x8397d48 0x78cebf3ea0

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x230, Size: 0x14] 0x78cf05c680
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x248, Size: 0x8] 0x78cf05c700
	SoftObjectPath LevelSequence;//[Offset: 0x250, Size: 0x18] 0x78cf05c780
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x268, Size: 0x2] 0x78cf05c900
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x270, Size: 0x8] 0x78cf05c980
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x278, Size: 0x8] 0x78cf05ca00
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x78cf05ca80
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x78cf05cb00
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x78cf05cb80
	Object* DefaultInstanceData;//[Offset: 0x288, Size: 0x8] 0x78cf05cc00
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x290, Size: 0x8] 0x78cf05cc80
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78cf05cd00
	void ShowBurnin();// 0xa41ad44 0x78cef72540
	void SetSequence(LevelSequence* InSequence);// 0xa41ae50 0x78cef72620
	void SetReplicatePlayback(bool ReplicatePlayback);// 0xa41ada0 0x78cef72700
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0xa41aa70 0x78cef727e0
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0xa41abc8 0x78cef728c0
	void ResetBindings();// 0xa41a4d8 0x78cef729a0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0xa41a4ec 0x78cef72a80
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0xa41a5b8 0x78cef72b60
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0xa41a6a8 0x78cef72c40
	void OnLevelSequenceLoaded__DelegateSignature();// 0x8a873f8 0x78cef72d20
	LevelSequence* LoadSequence();// 0xa41aef8 0x78cef72e00
	void HideBurnin();// 0xa41ad58 0x78cef72ee0
	LevelSequencePlayer* GetSequencePlayer();// 0xa41ad6c 0x78cef72fc0
	LevelSequence* GetSequence();// 0xa41af2c 0x78cef730a0
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0xa41a310 0x78cef73180
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0xa41a410 0x78cef73260
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0xa41a7c0 0x78cef73340
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0xa41a904 0x78cef73500

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x680, Size: 0x10] 0x78ce8e3880
	CameraComponent* GetActiveCameraComponent();// 0xa41db40 0x78ce8d84a0
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0xa41db78 0x78ce8d8580

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf05c800
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1] 0x78cf05c880

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce8e2380
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18] 0x78ce8e2400
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8] 0x78ce8e2480
	void SetBurnIn(SoftClassPath InBurnInClass);// 0xa419d88 0x78ce8d8900

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10] 0x78ce728080

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18] 0x78cf037980
	Object* Object;//[Offset: 0x18, Size: 0x8] 0x78cf037a00
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cf037a80

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 0xb8] 0x78ce8e2180
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 0x8] 0x78ce8e2200
	void SetSettings(Object* InSettings);// 0x8a873f8 0x78ce8d8740
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0xa41c4d0 0x78ce8d8820

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10] 0x78cf05d900
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10] 0x78cf05d980
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10] 0x78cf05da00
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10] 0x78cf05da80
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10] 0x78cf05db00
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10] 0x78cf05db80
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10] 0x78cf05dc00
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28] 0x78cf05dc80
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc] 0x78cf05de00
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8] 0x78cf05de80
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4] 0x78cf05df00

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1] 0x78cf05dd00
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8] 0x78cf05dd80

--------------------------------
Class: PlayAnimUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78cece7500

--------------------------------
Class: HeroChangeCloth.UserWidgetBase.UserWidget.Widget.Visual.Object
	int HeroId;//[Offset: 0x330, Size: 0x4] 0x78cec02480
	int CurLeftTab;//[Offset: 0x334, Size: 0x4] 0x78cec02500
	int CurRightTab;//[Offset: 0x338, Size: 0x4] 0x78cec02580
	int CurWeaponTab;//[Offset: 0x33c, Size: 0x4] 0x78cec02600
	int CurSkinTab;//[Offset: 0x340, Size: 0x4] 0x78cec02680
	int CurPartsTab;//[Offset: 0x344, Size: 0x4] 0x78cec02700
	void UpdateSuitInfo();// 0x8a873f8 0x78cebf3f80
	void UpdateSkinInfo();// 0x8a873f8 0x78cebf4060
	void UpdateDyeInfo();// 0x8a873f8 0x78cebf4140
	void SortItemArray(out const int[] ItemArray, out int[] sortArray, int Type);// 0x8396ed4 0x78cebf4220
	void ShowUIAfterAnim();// 0x8a873f8 0x78cebf4300
	void SetInfo(int hero_id, enum ReturnToUI);// 0x8a873f8 0x78cebf43e0
	void SetCurSuitId(int SuitId);// 0x8a873f8 0x78cebf44c0
	void ResetSkinColor();// 0x8a873f8 0x78cebf45a0
	void OnSkipUI(FString Keys);// 0x8a873f8 0x78cebf4680
	bool IsEquip(int ID);// 0x839703c 0x78cebf4760
	void HandleBuySuitSuccess(int SuitId);// 0x8a873f8 0x78cebf4840
	int64[] GetPartsIds(int CurParts);// 0x83970f0 0x78cebf4920

--------------------------------
Class: HeroSelectUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78cec04600
	HeroData[] HeroDataMap;//[Offset: 0x338, Size: 0x10] 0x78cebc7540
	void SetHeroItemSelected(int index);// 0x8a873f8 0x78cebf8f20
	void InitElmsData();// 0x839b788 0x78cebf9000
	int GetItemIndexByHeroID(int hero_id);// 0x839b6d8 0x78cebf5720
	void ChangeCurSelHero(int hero_id);// 0x8a873f8 0x78cebf5800

--------------------------------
Class: HeroData
	int HeroId;//[Offset: 0x0, Size: 0x4] 0x78cf592b00
	int SkinId;//[Offset: 0x4, Size: 0x4] 0x78cf592b80
	FString HeroName;//[Offset: 0x8, Size: 0x10] 0x78cf592c00
	FString HeroIconpath;//[Offset: 0x18, Size: 0x10] 0x78cf592c80
	bool IsFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf592d00
	enum HeroType;//[Offset: 0x29, Size: 0x1] 0x78cf5640c0
	int ShopId;//[Offset: 0x2c, Size: 0x4] 0x78cf592e00
	int skillid;//[Offset: 0x30, Size: 0x4] 0x78cf592e80
	FString skillname;//[Offset: 0x38, Size: 0x10] 0x78cf592f00
	FString SkillIconpath;//[Offset: 0x48, Size: 0x10] 0x78cf592f80
	FString SkillDescript;//[Offset: 0x58, Size: 0x10] 0x78cf593000
	int PassiveSkillID;//[Offset: 0x68, Size: 0x4] 0x78cf593080
	FString PassiveSkillName;//[Offset: 0x70, Size: 0x10] 0x78cf593100
	FString PassiveSkillIconpath;//[Offset: 0x80, Size: 0x10] 0x78cf593180
	FString PassiveSkillDescript;//[Offset: 0x90, Size: 0x10] 0x78cf591100
	int weaponid;//[Offset: 0xa0, Size: 0x4] 0x78cf591180
	int SortValue;//[Offset: 0xa4, Size: 0x4] 0x78cf591200
	FString Story;//[Offset: 0xa8, Size: 0x10] 0x78cf591280
	int[] EquipSkinId;//[Offset: 0xb8, Size: 0x10] 0x78cf564160
	int FaceID;//[Offset: 0xc8, Size: 0x4] 0x78cf591380
	int HairID;//[Offset: 0xcc, Size: 0x4] 0x78cf591400
	int HairColorID;//[Offset: 0xd0, Size: 0x4] 0x78cf591480
	int[] ColorSkinArray;//[Offset: 0xd8, Size: 0x10] 0x78cf564200
	int[] ColorArray;//[Offset: 0xe8, Size: 0x10] 0x78cf5642a0

--------------------------------
Class: CreateGuildUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	int CurPageIndex;//[Offset: 0x390, Size: 0x4] 0x78cebacc80
	int64 CurDivisionCode;//[Offset: 0x398, Size: 0x8] 0x78cebacd00
	int CurSelGuildItemIndex;//[Offset: 0x3a0, Size: 0x4] 0x78cebacd80
	void UpdateLevelBtnState();// 0x8a873f8 0x78cebd3c00
	void SetCreateGuildMoneyType(enum MoneyType);// 0x8a873f8 0x78cebd3ce0
	void SelGuildListItem(int index);// 0x83649d0 0x78cebd3dc0
	void SelectCurPage(int index);// 0x8364a8c 0x78cebd3ea0
	void RefreshGuildList();// 0x8364988 0x78cebd3f80
	void InitCreateGuildPage();// 0x8364a78 0x78cebd4060
	int64 GetCurSelDivisionCode();// 0x836499c 0x78cebd4140

--------------------------------
Class: ShopPanelUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	enum CurShopTabType;//[Offset: 0x330, Size: 0x1] 0x78ced2d4e0
	ShopDiscountUI* ShopDiscountUI;//[Offset: 0x338, Size: 0x8] 0x78ced93e80
	ShopRecommondWidget* ShopRecommondWidget;//[Offset: 0x340, Size: 0x8] 0x78ced93f00
	PreferentialWidget* PreferentialWidget;//[Offset: 0x348, Size: 0x8] 0x78ced93f80
	ItemShowWidget* ItemShowWidget;//[Offset: 0x350, Size: 0x8] 0x78ced94000
	float DelayShowWidget;//[Offset: 0x358, Size: 0x4] 0x78ced94080
	bool bShopDisplayState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1] 0x78ced94100
	WeaponPosInfo[] WeaponPosList;//[Offset: 0x368, Size: 0x10] 0x78ced2d580
	Vector DefaultLocation;//[Offset: 0x378, Size: 0xc] 0x78ced94200
	void RefreshWidgetSize();// 0x8a873f8 0x78ced88ac0
	void RefreshRedPoint(enum ShopTabType, bool IsVisiable);// 0x8a873f8 0x78ced88ba0
	void RefreshModelPosition(int64 ItemId);// 0x849e21c 0x78ced88c80
	void RefreshModel(int TypeIndex, int HeroId, int SkinId);// 0x8a873f8 0x78ced88d60
	void RefreshLevelFundUI();// 0x8a873f8 0x78ced88e40
	void RefreshLevel(FString LevelId, FString CameraFlag);// 0x8a873f8 0x78ced88f20
	void RefreshCameraById(int ID);// 0x849dedc 0x78ced89000
	void OnSkipUI(int TableIndex);// 0x8a873f8 0x78ced85720
	void OnShopSuccessBP(out const RewardInfo[] ItemArray, out const int[] SkinArray);// 0x8a873f8 0x78ced85800
	void OnShopSuccess(enum Type);// 0x849df84 0x78ced858e0
	void OnShopItem(int64 ItemId, int MoneyType, int ItemCount);// 0x849e0e0 0x78ced859c0
	bool OnCanSkipUI(int64 ItemId);// 0x849e02c 0x78ced85aa0
	Vector GetCharacterLocation(int64 SkinId);// 0x849e2c4 0x78ced85b80
	void BP_UpdatePlayerAttr(enum Type, int Num);// 0x8a873f8 0x78ced85c60
	void BeforePlayMontage();// 0x849e378 0x78ced85d40

--------------------------------
Class: RewardInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf595400
	int Num;//[Offset: 0x4, Size: 0x4] 0x78cf595480

--------------------------------
Class: ShopDiscountUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	int DiscountId;//[Offset: 0x330, Size: 0x4] 0x78ced93000
	int[] AlreadyBoughtShopIdArray;//[Offset: 0x338, Size: 0x10] 0x78ced2d9e0
	void UpdateInfo();// 0x8a873f8 0x78ced861a0
	void SetInfo(int NewDiscountId, int[] NewAlreadyBoughtShopIdArray);// 0x849cef4 0x78ced86280
	void GetRemainTime(out int Hour, out int Minute, out int second);// 0x849ccf0 0x78ced86360
	void AddBuyShopId(int ShopId);// 0x849ce4c 0x78ced86440

--------------------------------
Class: ShopRecommondWidget.UserWidget.Widget.Visual.Object
	TileView* TileView_ShopItem;//[Offset: 0x260, Size: 0x8] 0x78ced94880
	ScrollBox* ScrollBox_Base;//[Offset: 0x268, Size: 0x8] 0x78ced94900
	VerticalBox* VerticalBox_ShopPack;//[Offset: 0x270, Size: 0x8] 0x78ced94980
	UniformGridPanel* UniformGridPanel_ShopPack;//[Offset: 0x278, Size: 0x8] 0x78ced94a00
	float DelayShowWidget;//[Offset: 0x280, Size: 0x4] 0x78ced94a80
	FString DefaultLevel;//[Offset: 0x288, Size: 0x10] 0x78ced94b00
	FString DefaultCameraFlag;//[Offset: 0x298, Size: 0x10] 0x78ced94b80
	FString DefaultRoleFlag;//[Offset: 0x2a8, Size: 0x10] 0x78ced94c00
	void RefreshShopButton(int64 PackId, int itemindex, int DebugIndex);// 0x84a2998 0x78ced87cc0
	void RefreshPackListAnimation(bool IsAnim, int Show1Count);// 0x8a873f8 0x78ced87da0
	void RefreshPackItemList(int64 PackId, int SelectIndex);// 0x84a28a4 0x78ced87e80
	void OnShopPackClick(int64 PackId);// 0x84a239c 0x78ced87f60
	void OnShopItemClick(Object* Item);// 0x84a2444 0x78ced88040
	void OnRefreshPackButton(int64 PackId, FString PackName, FString ItemName, out const int[] MoneyTypes, out const int[] MoneyCounts);// 0x8a873f8 0x78ced88120
	bool IsHavePackItemList(int64 PackId);// 0x84a2c38 0x78ced88200
	bool IsHavePack(int64 PackId);// 0x84a2b84 0x78ced882e0
	int IsCanShopPack(int64 PackId);// 0x84a2ad4 0x78ced883c0
	int64 GetRealreciate(int64 PackId);// 0x84a2cec 0x78ced884a0
	FString GetPackDesc(int64 PackId);// 0x84a24ec 0x78ced88580
	int64 GetDepreciate(int64 PackId);// 0x84a2d9c 0x78ced88660
	int64 GetCurrentPackId();// 0x84a2870 0x78ced88740
	ShopRecommondItem GetCurrentPackData();// 0x84a25e8 0x78ced88820
	ShopItem*[] CreatePackItemList(int64 PackId);// 0x84a2774 0x78ced88900
	void AddPack(out const ShopRecommondItem ItemData, int Row, int Column);// 0x8a873f8 0x78ced889e0

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x368, Size: 0x4] 0x78ce85ac00
	float EntryWidth;//[Offset: 0x36c, Size: 0x4] 0x78ce85ac80
	enum TileAlignment;//[Offset: 0x370, Size: 0x1] 0x78ce72c360
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1] 0x78ce85ad80
	void SetEntryWidth(float NewWidth);// 0xa1a66ac 0x78ce7cadc0
	void SetEntryHeight(float NewHeight);// 0xa1a6754 0x78ce7caea0
	float GetEntryWidth();// 0xa1a6674 0x78ce7caf80
	float GetEntryHeight();// 0xa1a6690 0x78ce7cb060

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x2d8, Size: 0x1] 0x78ce851f00
	byte SelectionMode;//[Offset: 0x2d9, Size: 0x1] 0x78ce851f80
	enum ConsumeMouseWheel;//[Offset: 0x2da, Size: 0x1] 0x78ce72a600
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1] 0x78ce852080
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78ce852100
	float EntrySpacing;//[Offset: 0x2e0, Size: 0x4] 0x78ce850080
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1] 0x78ce850100
	Object*[] ListItems;//[Offset: 0x2e8, Size: 0x10] 0x78ce72a6a0
	delegate BP_OnEntryInitialized;//[Offset: 0x308, Size: 0x10] 0x78ce850200
	delegate BP_OnItemClicked;//[Offset: 0x318, Size: 0x10] 0x78ce850280
	delegate BP_OnItemDoubleClicked;//[Offset: 0x328, Size: 0x10] 0x78ce850300
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x338, Size: 0x10] 0x78ce850380
	delegate BP_OnItemSelectionChanged;//[Offset: 0x348, Size: 0x10] 0x78ce850400
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x358, Size: 0x10] 0x78ce850480
	void SetSelectionMode(byte SelectionMode);// 0xa187a28 0x78ce7c6fa0
	void SetSelectedIndex(int index);// 0xa1878a0 0x78ce7c7080
	void ScrollIndexIntoView(int index);// 0xa187948 0x78ce7c7160
	void RemoveItem(Object* Item);// 0xa187c78 0x78ce7c7240
	void NavigateToIndex(int index);// 0xa1877f8 0x78ce7c7320
	bool IsRefreshPending();// 0xa1879f0 0x78ce7c3a40
	int GetNumItems();// 0xa187b94 0x78ce7c3b20
	Object*[] GetListItems();// 0xa187dc8 0x78ce7c3c00
	Object* GetItemAt(int index);// 0xa187bc8 0x78ce7c3ce0
	int GetIndexForItem(Object* Item);// 0xa187ae4 0x78ce7c3dc0
	void ClearListItems();// 0xa187ad0 0x78ce7c3ea0
	void BP_SetSelectedItem(Object* Item);// 0xa187750 0x78ce7c3f80
	void BP_SetListItems(out const Object*[] InListItems);// 0xa187268 0x78ce7c4060
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0xa187654 0x78ce7c4140
	void BP_ScrollItemIntoView(Object* Item);// 0xa18733c 0x78ce7c4220
	void BP_NavigateToItem(Object* Item);// 0xa1873e4 0x78ce7c4300
	bool BP_IsItemVisible(Object* Item);// 0xa18748c 0x78ce7c43e0
	bool BP_GetSelectedItems(out Object*[] items);// 0xa187540 0x78ce7c44c0
	Object* BP_GetSelectedItem();// 0xa187234 0x78ce7c45a0
	int BP_GetNumItemsSelected();// 0xa18760c 0x78ce7c4680
	void BP_ClearSelection();// 0xa187640 0x78ce7c4760
	void BP_CancelScrollIntoView();// 0xa187328 0x78ce7c4840
	void AddItem(Object* Item);// 0xa187d20 0x78ce7c4920

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 0x8] 0x78ce72a920
	float WheelScrollMultiplier;//[Offset: 0x110, Size: 0x4] 0x78ce79f980
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1] 0x78ce79fa00
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1] 0x78ce79fa80
	float FixedLineScrollOffset;//[Offset: 0x118, Size: 0x4] 0x78ce79fb00
	delegate BP_OnEntryGenerated;//[Offset: 0x120, Size: 0x10] 0x78ce79fb80
	delegate BP_OnEntryReleased;//[Offset: 0x130, Size: 0x10] 0x78ce79fc00
	UserWidgetPool EntryWidgetPool;//[Offset: 0x140, Size: 0x80] 0x78ce79fc80
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0xa188e4c 0x78ce7c4a00
	void SetScrollOffset(const float InScrollOffset);// 0xa188ef4 0x78ce7c4ae0
	void SetScrollbarVisibility(enum InVisibility);// 0xa188da4 0x78ce7c4bc0
	void ScrollToTop();// 0xa188fb0 0x78ce7c4ca0
	void ScrollToBottom();// 0xa188f9c 0x78ce7c4d80
	void RequestRefresh();// 0xa188d90 0x78ce7c4e60
	void RegenerateAllEntries();// 0xa188fc4 0x78ce7c4f40
	UserWidget*[] GetDisplayedEntryWidgets();// 0xa188fd8 0x78ce7c5020

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10] 0x78cefde200
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10] 0x78cefde2a0

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x228] 0x78ce855c00
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 0x4d0] 0x78ce855c80
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 0x8] 0x78ce855d00
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 0x8] 0x78ce855d80
	byte Orientation;//[Offset: 0x828, Size: 0x1] 0x78ce855e00
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 0x1] 0x78ce72c680
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 0x1] 0x78ce72c720
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 0x8] 0x78ce855f80
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 0x10] 0x78ce856000
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1] 0x78ce856080
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1] 0x78ce856100
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 0x1] 0x78ce856180
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 0x1] 0x78ce856200
	enum NavigationDestination;//[Offset: 0x848, Size: 0x1] 0x78ce72c7c0
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 0x4] 0x78ce856300
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 0x1] 0x78ce72c860
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 0x1] 0x78ce854300
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 0x4] 0x78ce854380
	delegate OnUserScrolled;//[Offset: 0x858, Size: 0x10] 0x78ce854400
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0xa199af8 0x78ce7c7940
	void SetScrollOffset(float NewScrollOffset);// 0xa199a3c 0x78ce7c7a20
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0xa199f14 0x78ce7c7b00
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0xa199e64 0x78ce7c7be0
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0xa199db0 0x78ce7c7cc0
	void SetOrientation(byte NewOrientation);// 0xa199fbc 0x78ce7c7da0
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0xa19a064 0x78ce7c7e80
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0xa199ba0 0x78ce7c7f60
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0xa199d00 0x78ce7c8040
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0xa199c50 0x78ce7c8120
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0xa1997f0 0x78ce7c8200
	void ScrollToStart();// 0xa19998c 0x78ce7c82e0
	void ScrollToEnd();// 0xa199978 0x78ce7c83c0
	float GetViewOffsetFraction();// 0xa1999a0 0x78ce7c84a0
	float GetScrollOffsetOfEnd();// 0xa1999d4 0x78ce7c8580
	float GetScrollOffset();// 0xa199a08 0x78ce7c8660
	void EndInertialScrolling();// 0xa199ae4 0x78ce7c8740

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88] 0x78cefeb400
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88] 0x78cefeb480
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88] 0x78cefeb500
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88] 0x78cefeb580

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88] 0x78cee95e80
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88] 0x78cee95f00
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88] 0x78cee95f80
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88] 0x78cee96000
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88] 0x78cee96080
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88] 0x78cee96100
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88] 0x78cee96180
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88] 0x78cee96200
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88] 0x78cee96280

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0xa1b55dc 0x78ce7cdb40

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8] 0x78ce85ba00
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78ce85ba80
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78ce85bb00
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78ce85bb80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa1b5c94 0x78ce7cd7c0
	void SetSize(SlateChildSize InSize);// 0xa1b5de4 0x78ce7cd8a0
	void SetPadding(Margin InPadding);// 0xa1b5e98 0x78ce7cd980
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa1b5d3c 0x78ce7cda60

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4] 0x78cf054c80
	byte SizeRule;//[Offset: 0x4, Size: 0x1] 0x78cf054d00

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x11c, Size: 0x10] 0x78ce85c300
	float MinDesiredSlotWidth;//[Offset: 0x12c, Size: 0x4] 0x78ce85c380
	float MinDesiredSlotHeight;//[Offset: 0x130, Size: 0x4] 0x78ce85c400
	void SetSlotPadding(Margin InSlotPadding);// 0xa1a9bac 0x78ce7cdfa0
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0xa1a9b04 0x78ce7ce080
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0xa1a9a5c 0x78ce7ce160
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0xa1a9918 0x78ce7ce240

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1] 0x78ce85bf00
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1] 0x78ce85bf80
	int Row;//[Offset: 0x3c, Size: 0x4] 0x78ce85c000
	int Column;//[Offset: 0x40, Size: 0x4] 0x78ce85c080
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa1aa294 0x78ce7cdc20
	void SetRow(int InRow);// 0xa1aa48c 0x78ce7cdd00
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa1aa33c 0x78ce7cdde0
	void SetColumn(int InColumn);// 0xa1aa3e4 0x78ce7cdec0

--------------------------------
Class: ShopRecommondItem
	int64 PackId;//[Offset: 0x0, Size: 0x8] 0x78cefe6600
	FString ItemName;//[Offset: 0x8, Size: 0x10] 0x78cefe6680
	int ItemShopType;//[Offset: 0x18, Size: 0x4] 0x78cefe6700
	int[] MoneyTypes;//[Offset: 0x20, Size: 0x10] 0x78cefd4c00
	int[] MoneyCounts;//[Offset: 0x30, Size: 0x10] 0x78cefd4ca0
	FString IconPath;//[Offset: 0x40, Size: 0x10] 0x78cefe6880
	FString PackDesc;//[Offset: 0x50, Size: 0x10] 0x78cefe6900
	bool IsCanShop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cefe6980
	int LessTime;//[Offset: 0x64, Size: 0x4] 0x78cefe6a00
	int ShopCount;//[Offset: 0x68, Size: 0x4] 0x78cefe6a80
	bool IsFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x78cefe6b00
	bool IsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1] 0x78cefe6b80

--------------------------------
Class: ShopItem.Object
	FString ItemName;//[Offset: 0x28, Size: 0x10] 0x78ced71f00
	int64 IndexId;//[Offset: 0x38, Size: 0x8] 0x78ced71f80
	int64 ItemId;//[Offset: 0x40, Size: 0x8] 0x78ced72000
	FString ItemDiscount;//[Offset: 0x48, Size: 0x10] 0x78ced72080
	int ShoppingCount;//[Offset: 0x58, Size: 0x4] 0x78ced72100
	int HaveCount;//[Offset: 0x5c, Size: 0x4] 0x78ced70080
	FString IconPath;//[Offset: 0x60, Size: 0x10] 0x78ced70100
	int CurrencyType;//[Offset: 0x70, Size: 0x4] 0x78ced70180
	int RealCurrencyAmount;//[Offset: 0x74, Size: 0x4] 0x78ced70200
	int FalseCurrencyAmount;//[Offset: 0x78, Size: 0x4] 0x78ced70280
	bool ItemIsCanFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78ced70300
	bool IsVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1] 0x78ced70380
	int LessTime;//[Offset: 0x80, Size: 0x4] 0x78ced70400

--------------------------------
Class: PreferentialWidget.UserWidget.Widget.Visual.Object
	TileView* TileView_Base;//[Offset: 0x260, Size: 0x8] 0x78ced71b80
	float CurrentTime;//[Offset: 0x268, Size: 0x4] 0x78ced71c00
	void RefreshTimeBP(float second);// 0x8a873f8 0x78ced666e0
	void RefreshItemListP(int WidgetSize);// 0x8a873f8 0x78ced667c0
	void OnItemClick(Object* Object);// 0x8476cb4 0x78ced668a0
	UserWidget* GetChindAt(int index);// 0x8476d5c 0x78ced66980

--------------------------------
Class: ItemShowWidget.UserWidget.Widget.Visual.Object
	TileView* TileView_Base;//[Offset: 0x260, Size: 0x8] 0x78cec06c00
	float DelayShowWidget;//[Offset: 0x268, Size: 0x4] 0x78cec06c80
	void RefreshItemListBP(int WidgetSize);// 0x8a873f8 0x78cebf75c0
	void OnItemClick(Object* Object);// 0x83a7934 0x78cebf76a0
	int GetChindAt(int index);// 0x83a79dc 0x78cebf7780

--------------------------------
Class: ShopBuy.UserWidgetBase.UserWidget.Widget.Visual.Object
	void ShopBuy_SetInfo(out const ShopItemInfo Info);// 0x8a873f8 0x78ced86520

--------------------------------
Class: GiveGiftUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	FriendBaseInfo[] FriendArray;//[Offset: 0x330, Size: 0x10] 0x78cebc4a20
	enum GainGift;//[Offset: 0x340, Size: 0x1] 0x78cebc4ac0
	enum GiftOperation;//[Offset: 0x341, Size: 0x1] 0x78cebc4b60
	int ItemId;//[Offset: 0x344, Size: 0x4] 0x78cebe7900
	int ItemNum;//[Offset: 0x348, Size: 0x4] 0x78cebe7980
	void SetInfo(enum gain_gift, enum gift_operation, int item_id, int item_num);// 0x8a873f8 0x78cebdf900
	void SearchFriend(FString Name);// 0x8a873f8 0x78cebdf9e0

--------------------------------
Class: GiftShowUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void ShowGiftGive(out const <int,int> shop_map, int gift_id, int friend_id, enum gift_operation);// 0x8a873f8 0x78cebdfc80
	void ShowGift(out const <int,int> shop_map, int friend_id, FString words, int bg_type);// 0x8a873f8 0x78cebdfd60

--------------------------------
Class: AChievementInfoUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	int Level;//[Offset: 0x330, Size: 0x4] 0x78ceb18880
	void SetLevel(int level_);// 0x8304c4c 0x78ceb26c20
	void Init();// 0x8304cf4 0x78ceb26d00
	void CreateItem(int ID);// 0x8a873f8 0x78ceb26de0

--------------------------------
Class: AChievementUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78ceb19a80
	void UpdateRewardUI(int ID);// 0x8a873f8 0x78ceb260c0
	void UpdateItem(out const <int,DateTime> AChievementInfo);// 0x8a873f8 0x78ceb261a0
	void UpdateAccomplishmentLevelItem(int Level, int experience);// 0x8a873f8 0x78ceb26280
	void RemoveFaterInServer(out <int,DateTime> ID);// 0x83058c0 0x78ceb26360
	void RemoveFater(out int[] ID);// 0x83059fc 0x78ceb26440
	bool IsCurrentIdFatherId(out int[] ID, int test_id);// 0x83057a8 0x78ceb26520
	void Init_Type(enum Type);// 0x8305abc 0x78ceb26600
	void Init(out const <int,DateTime> AChievementInfo);// 0x8305b64 0x78ceb266e0
	int GetCurrentFatherIdMax(int ID, const <int,DateTime> server);// 0x83052d4 0x78ceb267c0
	void GetAllReward(out const int[] ID);// 0x8a873f8 0x78ceb268a0
	void ExchangeMax(int Value, out <int,DateTime> ID, out const <int,DateTime> server);// 0x8305548 0x78ceb26980
	void CreateItemByType(int ID, enum Type, DateTime Time);// 0x8a873f8 0x78ceb26a60
	void CreateItem(int ID, DateTime Time);// 0x8a873f8 0x78ceb26b40

--------------------------------
Class: ActivityAllPayItemWidget.UserWidget.Widget.Visual.Object
	TextBlock* TBItemDescription;//[Offset: 0x2e0, Size: 0x8] 0x78ceb19580
	TextBlock* TBProgress;//[Offset: 0x2e8, Size: 0x8] 0x78ceb19600
	ProgressBar* progress;//[Offset: 0x2f0, Size: 0x8] 0x78ceb19680
	PanelWidget* RewardBox;//[Offset: 0x2f8, Size: 0x8] 0x78ceb19700
	WidgetSwitcher* BTNSwitcher;//[Offset: 0x300, Size: 0x8] 0x78ceb19780
	Button* BTNReceive;//[Offset: 0x308, Size: 0x8] 0x78ceb19800
	Button* BTNPay;//[Offset: 0x310, Size: 0x8] 0x78ceb19880
	Button* BTNReceived;//[Offset: 0x318, Size: 0x8] 0x78ceb19900
	class ActivityAllPayRewardItemWidget* RewardWidgetClass;//[Offset: 0x320, Size: 0x8] 0x78ceac6b40
	<enum,ButtonStyle> StyleMap;//[Offset: 0x328, Size: 0x50] 0x78cf158740
	void OnButtonClickedEvent();// 0x8306944 0x78ceb25fe0

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8] 0x78ced91580
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278] 0x78ced91600
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10] 0x78ced91680
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10] 0x78ced91700
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1] 0x78ced91780
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1] 0x78ced91800
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1] 0x78ced91880
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1] 0x78ced91900
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10] 0x78ced91980
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10] 0x78ced91a00
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10] 0x78ced91a80
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10] 0x78ced91b00
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10] 0x78ced91b80
	void SetTouchMethod(byte InTouchMethod);// 0xa172834 0x78ced867c0
	void SetStyle(out const ButtonStyle InStyle);// 0xa172b0c 0x78ced868a0
	void SetPressMethod(byte InPressMethod);// 0xa17278c 0x78ced86980
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xa172a64 0x78ced86a60
	void SetClickMethod(byte InClickMethod);// 0xa1728dc 0x78ced86b40
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0xa1729bc 0x78ced86c20
	bool IsPressed();// 0xa172984 0x78ced86d00

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0xa179d88 0x78cee84220
	PanelSlot* GetContentSlot();// 0xa179e38 0x78cee84300
	Widget* GetContent();// 0xa179d54 0x78cee843e0

--------------------------------
Class: ActivityAllPayRewardItemWidget.UserWidget.Widget.Visual.Object
	Button* ItemBTN;//[Offset: 0x260, Size: 0x8] 0x78ceb1b100
	Image* ItemBG;//[Offset: 0x268, Size: 0x8] 0x78ceb1b180
	Image* ItemIcon;//[Offset: 0x270, Size: 0x8] 0x78ceb1b200
	Image* ItemSign;//[Offset: 0x278, Size: 0x8] 0x78ceb1b280
	TextBlock* TBNum;//[Offset: 0x280, Size: 0x8] 0x78ceb1b300
	PanelWidget* CanReceiveEffectBox;//[Offset: 0x288, Size: 0x8] 0x78ceb1b380
	Image* Mask;//[Offset: 0x290, Size: 0x8] 0x78ceb1b400
	<enum,PaperSprite*> PinZhiMap;//[Offset: 0x298, Size: 0x50] 0x78cf158680
	RewardItem Item;//[Offset: 0x2e8, Size: 0x78] 0x78ceb1b580
	float GoToPageSecond;//[Offset: 0x360, Size: 0x4] 0x78ceb19500
	void OnItemReleased();// 0x8306f60 0x78ceb25e20
	void OnItemPressed();// 0x8306f74 0x78ceb25f00

--------------------------------
Class: ActivityTemplateWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	ActivityInfo ActivityInfo;//[Offset: 0x330, Size: 0x60] 0x78ceb1ad80
	ActivityDataInfo ActivityDataInfo;//[Offset: 0x390, Size: 0x20] 0x78ceb1ae00
	FString JumpUrl;//[Offset: 0x3b0, Size: 0x10] 0x78ceb1ae80
	void UpdateActivityJumpUrl(FString NewJumpUrl);// 0x830abe4 0x78ceb259c0
	void UpdateActivityData(ActivityInfo NewActivityInfo, ActivityDataInfo NewActivityDataInfo);// 0x830acd4 0x78ceb25aa0
	void DeActive();// 0x830abc8 0x78ceb25b80
	enum CheckActivityStateType();// 0x830ac98 0x78ceb25c60
	void BP_UpdateActivityData();// 0x8a873f8 0x78ceb25d40

--------------------------------
Class: ActivityInfo
	int ActivityId;//[Offset: 0x0, Size: 0x4] 0x78cf577280
	FString ActivityName;//[Offset: 0x8, Size: 0x10] 0x78cf577300
	int ActivitySort;//[Offset: 0x18, Size: 0x4] 0x78cf577380
	enum ActivityGroupType;//[Offset: 0x1c, Size: 0x1] 0x78cf561be0
	DateTime StartTime;//[Offset: 0x20, Size: 0x8] 0x78cf575380
	DateTime EndTime;//[Offset: 0x28, Size: 0x8] 0x78cf575400
	int64 DurationTime;//[Offset: 0x30, Size: 0x8] 0x78cf575480
	FString bg;//[Offset: 0x38, Size: 0x10] 0x78cf575500
	bool IsStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cf575580
	FString JumpUrl;//[Offset: 0x50, Size: 0x10] 0x78cf575600

--------------------------------
Class: ActivityDataInfo
	enum ActivityGroupType;//[Offset: 0x0, Size: 0x1] 0x78cf56ca40
	ActivityData[] ActivityDataArray;//[Offset: 0x8, Size: 0x10] 0x78cf56cae0
	int64 ConfigVersion;//[Offset: 0x18, Size: 0x8] 0x78cf5d4a80

--------------------------------
Class: ActivityData
	int ActivityId;//[Offset: 0x0, Size: 0x4] 0x78cf5b3a00
	enum ActivityType;//[Offset: 0x4, Size: 0x1] 0x78cf568760
	enum ActivityStatus;//[Offset: 0x5, Size: 0x1] 0x78cf568800
	int ActivityCurNum;//[Offset: 0x8, Size: 0x4] 0x78cf5b3b80

--------------------------------
Class: ActivityAllPayWidget.ActivityTemplateWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TBActivityTime;//[Offset: 0x3c0, Size: 0x8] 0x78ceb1ab00
	PanelWidget* ItemContainer;//[Offset: 0x3c8, Size: 0x8] 0x78ceb1ab80
	class ActivityAllPayItemWidget* ItemClass;//[Offset: 0x3d0, Size: 0x8] 0x78ceac68c0
	ActivityAllPayItemWidget*[] ItemWidgets;//[Offset: 0x3d8, Size: 0x10] 0x78ceac6960
	void NativeUpdateActivityData(ActivityInfo NewActivityInfo, ActivityDataInfo NewActivityDataInfo);// 0x830749c 0x78ceb258e0

--------------------------------
Class: ActivityManager.Object

--------------------------------
Class: ActivityNameWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateTitle(out const FText title);// 0x8a873f8 0x78ceb28900

--------------------------------
Class: ActivityPrimeAccessWidget.UserWidget.Widget.Visual.Object
	TextBlock* MonthlyStatusText;//[Offset: 0x260, Size: 0x8] 0x78ceb1b680
	TextBlock* WeeklyStatusText;//[Offset: 0x268, Size: 0x8] 0x78ceb1b700
	Button* PurchasePrimeAccessWeekly;//[Offset: 0x270, Size: 0x8] 0x78ceb1b780
	Button* PurchasePrimeAccessMonthly;//[Offset: 0x278, Size: 0x8] 0x78ceb1b800
	FText Received;//[Offset: 0x280, Size: 0x18] 0x78ceb1b880
	FText Receivable;//[Offset: 0x298, Size: 0x18] 0x78ceb1b900
	FText TipToMessageBox;//[Offset: 0x2b0, Size: 0x18] 0x78ceb1b980
	void UpdateActivityStatus();// 0x830982c 0x78ceb27be0
	void OnToppedUpResponded(int ID, bool bIsSuccessful);// 0x8309734 0x78ceb27cc0
	void OnReceiveRewardResponded(bool Result);// 0x8309684 0x78ceb27da0
	void OnPingServerResponded(int64 ServerTime);// 0x83095b4 0x78ceb27e80
	void OnClickedPrimeAccessWeekly();// 0x8309670 0x78ceb27f60
	void OnClickedPrimeAccessMonthly();// 0x830965c 0x78ceb28040
	void K2_UpdateRemainDay(enum PrimeAccessType, int CurrentProgress);// 0x8a873f8 0x78ceb28120
	void K2_UpdatePurchaseStatus(enum PrimeAccessType, bool bIsPurchased);// 0x8a873f8 0x78ceb28200
	void K2_TopUpIOS(enum PrimeAccessType);// 0x8a873f8 0x78ceb282e0
	void K2_TopUpAndroid(enum PrimeAccessType);// 0x8a873f8 0x78ceb283c0
	void K2_SetWeeklyRewardItemInfo(int ID, int Count);// 0x8a873f8 0x78ceb284a0
	void K2_SetRedDotVisibility(enum PrimeAccessType, bool bVisibility);// 0x8a873f8 0x78ceb28580
	void K2_SetMonthlyRewardItemInfo(int ID, int Count);// 0x8a873f8 0x78ceb28660
	void K2_RefreshShopPrimeAccessRedPoint(bool bIsShow);// 0x8a873f8 0x78ceb28740
	void K2_PopMessageBox(enum PrimeAccessType);// 0x8a873f8 0x78ceb28820

--------------------------------
Class: ActivitySignInWidget.ActivityTemplateWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void GetActivityTime(out DateTime StartTime, out DateTime EndTime);// 0x830a5c0 0x78ceb27b00

--------------------------------
Class: AdvancedDrugArea.Actor.Object
	SphereComponent* collision_component_;//[Offset: 0x220, Size: 0x8] 0x78ceb1c800
	int world_id_;//[Offset: 0x228, Size: 0x4] 0x78ceb1c880
	int item_id_;//[Offset: 0x22c, Size: 0x4] 0x78ceb1c900
	int[] ignores_;//[Offset: 0x230, Size: 0x10] 0x78ceac8580
	bool bIsInCave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78ceb1ca00
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x830ed78 0x78ceb2a6c0

--------------------------------
Class: AdvPoolObjectBase.Object

--------------------------------
Class: AdvPoolObject.AdvPoolObjectBase.Object
	<int,AdvPoolObjectBase*> SubObjects;//[Offset: 0x48, Size: 0x50] 0x78cf1585c0

--------------------------------
Class: AdvPool.AdvPoolObject.AdvPoolObjectBase.Object

--------------------------------
Class: AdvPoolBox.AdvPoolObject.AdvPoolObjectBase.Object

--------------------------------
Class: AdvPoolGroup.AdvPoolObject.AdvPoolObjectBase.Object

--------------------------------
Class: AdvPoolItem.AdvPoolObjectBase.Object

--------------------------------
Class: AdvPoolManager.Object
	<int,AdvPoolGroup*> PoolGroups;//[Offset: 0x28, Size: 0x50] 0x78cf158440
	<int,AdvPoolEffectInfo> EffectInfos;//[Offset: 0x78, Size: 0x50] 0x78cf158500

--------------------------------
Class: AdvPoolUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateRaffleItemInfoGroup(out const AdvPoolRaffleItemInfoGroup NewRaffleItemInfoGroup);// 0x8311168 0x78ceb2a0a0
	void UpdateLevel(const int NewLevel);// 0x8a873f8 0x78ceb2a180
	void UpdateExpProgress(const float NewExpProgress);// 0x8a873f8 0x78ceb2a260
	void UpdateEffectInfo(out const AdvPoolEffectInfo NewEffectInfo);// 0x8a873f8 0x78ceb2a340
	void SelectRaffleItem(int RaffleItemIndex);// 0x831103c 0x78ceb2a420
	bool IsRaffleItemSelected();// 0x83110e4 0x78ceb2a500
	AdvPoolRaffleItemInfoGroup GetRaffleItemInfoGroup();// 0x831111c 0x78ceb2a5e0

--------------------------------
Class: AgoraUI.UserWidget.Widget.Visual.Object
	void ChangeSpeakerMode(PlayerController* PC, int speakerMode);// 0x8311c38 0x78ceb29ee0
	void ChangeMicMode(PlayerController* PC, int micMode);// 0x8311d2c 0x78ceb29fc0

--------------------------------
Class: AIAutoRunHandle.Object
	FString AIPlayerName;//[Offset: 0x28, Size: 0x10] 0x78ceb1df00
	FString GetAIPlayerIDHttpIP;//[Offset: 0x38, Size: 0x10] 0x78ceb1df80
	bool bCanLineUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ceb1e000
	void SendGetAIPlayerIDRequest();// 0x8312344 0x78ceb29d20
	void LineUp();// 0x8312330 0x78ceb29e00

--------------------------------
Class: AINetMessageHandle.Actor.Object
	Actor* Horse_class;//[Offset: 0x220, Size: 0x8] 0x78ceb1d980
	FString ai_ip_;//[Offset: 0x228, Size: 0x10] 0x78ceb1da00
	int ai_port_;//[Offset: 0x238, Size: 0x4] 0x78ceb1da80
	FString server_ip_;//[Offset: 0x240, Size: 0x10] 0x78ceb1db00
	int server_port_;//[Offset: 0x250, Size: 0x4] 0x78ceb1db80
	WuXiaXCharacter* player_obj_;//[Offset: 0x258, Size: 0x8] 0x78ceb1dc00
	void SendPickItemReponse();// 0x83129c0 0x78ceb29700
	void SendPickItem();// 0x83129d4 0x78ceb297e0
	void SendAllPickItem();// 0x83129e8 0x78ceb298c0
	void SendActorInfo();// 0x83129fc 0x78ceb299a0
	void OnItemGetResult(int Type, bool Result);// 0x83128c8 0x78ceb29a80
	bool ConnectServer();// 0x8a873f8 0x78ceb29b60
	bool ConnectAIServer(WuXiaXCharacter* Obj);// 0x8312a10 0x78ceb29c40

--------------------------------
Class: WuXiaInteractiveActor.Actor.Object
	InteractiveInfo interactive_info_;//[Offset: 0x228, Size: 0x60] 0x78ceb1eb00
	int interactive_player_id_;//[Offset: 0x288, Size: 0x4] 0x78ceb1eb80
	int[] interactive_player_ids_;//[Offset: 0x290, Size: 0x10] 0x78ceac83a0
	int interactive_actor_id_;//[Offset: 0x2a0, Size: 0x4] 0x78ceb1ec80
	int interactive_state_;//[Offset: 0x2a4, Size: 0x4] 0x78ceb1ed00
	bool finish_spawn_items_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x78ceb1ed80
	bool bFinishInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1] 0x78ceb1ee00
	float KeepInteractDuration;//[Offset: 0x2ac, Size: 0x4] 0x78ceb1ee80
	void OnStateUpdate();// 0x8a873f8 0x78ceb2c3a0
	void OnRep_InteractiveState();// 0x84ed758 0x78ceb2c480
	void OnPlayerKeepInteractionFinished(WuXiaXBaseCharacter* Character);// 0x8a873f8 0x78ceb2c560
	bool IsFinishInteractive();// 0x84ed76c 0x78ceb2c640
	bool InteractiveUITips(WuXiaXBaseCharacter* Player, out FText text);// 0x84ed894 0x78ceb2c720
	int InteractiveActorId();// 0x84ed7c0 0x78ceb2c800
	void Interactive(int PlayerID);// 0x8a873f8 0x78ceb2c8e0
	bool GetStandAndLookLocation(Vector playerlocation, out Vector standlocation, out Vector LookAtLocation);// 0x8a873f8 0x78ceb2c9c0
	Transform GetSpawnTargetTransform();// 0x8a873f8 0x78ceb290e0
	bool GetMovePassInfo(Vector playerlocation, Vector playervelocity, out Vector beginlocation, out Vector EndLocation);// 0x8a873f8 0x78ceb291c0
	bool GetIsInCave();// 0x84ed788 0x78ceb292a0
	enum GetInteractiveType(WuXiaXBaseCharacter* Player);// 0x84ed7dc 0x78ceb29380
	bool CanInteractive(WuXiaXBaseCharacter* Player, enum Trigger);// 0x84ed9f8 0x78ceb29460
	void BreakKeepInteractive();// 0x8a873f8 0x78ceb29540
	void BeginKeepInteractive();// 0x8a873f8 0x78ceb29620

--------------------------------
Class: InteractiveInfo
	enum interactive_type_;//[Offset: 0x0, Size: 0x1] 0x78cefd3300
	float interactive_keep_time_;//[Offset: 0x4, Size: 0x4] 0x78cefe2f80
	int interactive_times_;//[Offset: 0x8, Size: 0x4] 0x78cefe3000
	enum keep_interactive_type_;//[Offset: 0xc, Size: 0x1] 0x78cefd33a0
	enum requirement_type_;//[Offset: 0xd, Size: 0x1] 0x78cefd3440
	int requirement_id_;//[Offset: 0x10, Size: 0x4] 0x78cefe3180
	int requirement_number_;//[Offset: 0x14, Size: 0x4] 0x78cefe1100
	int[] spawn_group_Ids;//[Offset: 0x18, Size: 0x10] 0x78cefd34e0
	int sword_id_;//[Offset: 0x28, Size: 0x4] 0x78cefe1200
	bool need_move_to_begin_location_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78cefe1280
	bool is_use_curve_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x78cefe1300
	CurveVector* move_curve_;//[Offset: 0x30, Size: 0x8] 0x78cefe1380
	bool is_need_radio_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cefe1400
	FText radio_text_;//[Offset: 0x40, Size: 0x18] 0x78cefe1480
	bool is_in_cave_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cefe1500

--------------------------------
Class: Altar.WuXiaInteractiveActor.Actor.Object
	GameItemInfo[] guaranteed_items;//[Offset: 0x2b8, Size: 0x10] 0x78ceac8300
	int open_state_;//[Offset: 0x2c8, Size: 0x4] 0x78ceb1ea80
	void OnRep_OpenState();// 0x83131dc 0x78ceb2c100
	void OnReconnect();// 0x8a873f8 0x78ceb2c1e0
	void OnOpenStateUpdate();// 0x8a873f8 0x78ceb2c2c0

--------------------------------
Class: AltarDuelArena.Actor.Object

--------------------------------
Class: AltarManager.Actor.Object
	Altar*[] Altars;//[Offset: 0x220, Size: 0x10] 0x78ceac7ea0
	float[] open_delta;//[Offset: 0x230, Size: 0x10] 0x78ceac7f40
	float match_wait;//[Offset: 0x250, Size: 0x4] 0x78ceb40e80
	float match_prepare;//[Offset: 0x254, Size: 0x4] 0x78ceb40f00
	float match_fight;//[Offset: 0x258, Size: 0x4] 0x78ceb40f80
	float match_end;//[Offset: 0x25c, Size: 0x4] 0x78ceb41000
	float jail_continus;//[Offset: 0x260, Size: 0x4] 0x78ceb41080
	DuelArenaBirthPoint[] DuelArenaBirthPoints;//[Offset: 0x268, Size: 0x10] 0x78ceac7fe0
	float TransferDis;//[Offset: 0x278, Size: 0x4] 0x78ceb1f880
	float TransferHeight;//[Offset: 0x27c, Size: 0x4] 0x78ceb1f900
	bool manager_working;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78ceb1f980
	bool jail_open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x78ceb1fa00
	int openaltar_times;//[Offset: 0x29c, Size: 0x4] 0x78ceb1fa80
	int[] altar_rand_idx;//[Offset: 0x2a0, Size: 0x10] 0x78ceac8080
	enum match_state;//[Offset: 0x2b0, Size: 0x1] 0x78ceac8120
	uint32 match_waiter;//[Offset: 0x2b4, Size: 0x4] 0x78ceb1fc00
	uint32 match_challenger;//[Offset: 0x2b8, Size: 0x4] 0x78ceb1fc80
	uint32[] wait_queue;//[Offset: 0x2c0, Size: 0x10] 0x78ceac81c0
	uint32 winner_id;//[Offset: 0x2d0, Size: 0x4] 0x78ceb1fd80
	Vector winner_teamer_loc;//[Offset: 0x2d4, Size: 0xc] 0x78ceb1fe00
	uint32 loser_id;//[Offset: 0x2e0, Size: 0x4] 0x78ceb1fe80
	bool fight_timeup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1] 0x78ceb1ff00
	uint32[] JailPlayerArray;//[Offset: 0x2e8, Size: 0x10] 0x78ceac8260
	<int,AlatrPlayerInfo> JailPlayerMap;//[Offset: 0x2f8, Size: 0x50] 0x78cf1582c0
	<int,AltarDuelArena*> DuelArenaMap;//[Offset: 0x348, Size: 0x50] 0x78cf158380
	float CheckAltarTime;//[Offset: 0x398, Size: 0x4] 0x78ceb1e980

--------------------------------
Class: DuelArenaBirthPoint
	GameRebirthActor* BirthActor1;//[Offset: 0x0, Size: 0x28] 0x78cefbd400
	GameRebirthActor* BirthActor2;//[Offset: 0x28, Size: 0x28] 0x78cefbd480

--------------------------------
Class: GameRebirthActor.Actor.Object
	Vector point_offest_;//[Offset: 0x220, Size: 0xc] 0x78cebe6b00
	enum Type;//[Offset: 0x22c, Size: 0x1] 0x78cebc2a40
	int index;//[Offset: 0x230, Size: 0x4] 0x78cebe6c00
	bool loc_used;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1] 0x78cebe6c80

--------------------------------
Class: AlatrPlayerInfo
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefe3600
	enum PlayerState;//[Offset: 0x4, Size: 0x1] 0x78cefd2f40
	int DuelPlayerId;//[Offset: 0x8, Size: 0x4] 0x78cefe3700
	int DuelArenaId;//[Offset: 0xc, Size: 0x4] 0x78cefe3780
	float PlayerTime;//[Offset: 0x10, Size: 0x4] 0x78cefe3800
	bool bIsNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78cefe3880

--------------------------------
Class: AN_PlayNiagaraDuYan.AnimNotify_PlayNiagaraEffect.AnimNotify.Object
	FName FloatParamName;//[Offset: 0x8c, Size: 0x8] 0x78ceb40c00
	float FloatParam;//[Offset: 0x94, Size: 0x4] 0x78ceb40c80
	int SummonId;//[Offset: 0x98, Size: 0x4] 0x78ceb40d00

--------------------------------
Class: AntiAddictionKitTips.UserWidgetBase.UserWidget.Widget.Visual.Object
	void OnOpenedBP();// 0x8a873f8 0x78ceb2c020

--------------------------------
Class: AntiAddictionKitWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void OnOpenedBP();// 0x8a873f8 0x78ceb2bf40

--------------------------------
Class: AreaBox.Actor.Object
	int area_index_;//[Offset: 0x220, Size: 0x4] 0x78ceb40800
	float area_min_chance_;//[Offset: 0x224, Size: 0x4] 0x78ceb40880
	float area_max_chance_;//[Offset: 0x228, Size: 0x4] 0x78ceb40900
	bool is_in_cave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x78ceb40980
	BoxComponent* box_collision_;//[Offset: 0x230, Size: 0x8] 0x78ceb40a00
	PickList*[] pick_list_array_;//[Offset: 0x238, Size: 0x10] 0x78ceac7e00
	<int,int> pick_group_id_;//[Offset: 0x248, Size: 0x50] 0x78cf158200

--------------------------------
Class: PickList.Actor.Object
	int pick_list_id_;//[Offset: 0x220, Size: 0x4] 0x78cece7800
	int build_index_;//[Offset: 0x224, Size: 0x4] 0x78cece7880
	float build_min_chance_;//[Offset: 0x228, Size: 0x4] 0x78cece7900
	float build_max_chance_;//[Offset: 0x22c, Size: 0x4] 0x78cece7980
	bool spawn_group_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78cece7a00
	enum pick_quality_;//[Offset: 0x231, Size: 0x1] 0x78ced21140
	int area_index_;//[Offset: 0x234, Size: 0x4] 0x78cece7b00
	float spawn_radius_;//[Offset: 0x238, Size: 0x4] 0x78cece7b80

--------------------------------
Class: AreaTrack.Actor.Object
	int area_index_;//[Offset: 0x220, Size: 0x4] 0x78ceb40700
	BoxComponent* box_collision_;//[Offset: 0x228, Size: 0x8] 0x78ceb40780

--------------------------------
Class: AutoScaleScrollView.UserWidget.Widget.Visual.Object
	class UserWidget* m_cellClass;//[Offset: 0x260, Size: 0x8] 0x78ceac7c20
	delegate OnUpdateItem;//[Offset: 0x268, Size: 0x10] 0x78ceb41a80
	int Elm_num;//[Offset: 0x278, Size: 0x4] 0x78ceb41b00
	float Elm_offsetX;//[Offset: 0x27c, Size: 0x4] 0x78ceb41b80
	float Elm_scale_num;//[Offset: 0x280, Size: 0x4] 0x78ceb41c00
	float Elm_suit_speed;//[Offset: 0x284, Size: 0x4] 0x78ceb41c80
	UserWidget*[] Elms_array;//[Offset: 0x288, Size: 0x10] 0x78ceac7cc0
	float CurOffsetX;//[Offset: 0x298, Size: 0x4] 0x78ceb41d80
	bool bSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x78ceb41e00
	float ScrollAreaWidth;//[Offset: 0x2a0, Size: 0x4] 0x78ceb41e80
	float SuitTargetOffset;//[Offset: 0x2a4, Size: 0x4] 0x78ceb41f00
	void UpdateElmPosAndScale(float OffsetX);// 0x83158b8 0x78ceb2b5a0
	void TickSuitElm(float InDeltaTime);// 0x8315810 0x78ceb2b680
	void SuitElmPosition();// 0x8315ca4 0x78ceb2b760
	void StopSuitElm();// 0x83157fc 0x78ceb2b840
	void SelectItem(int itemindex);// 0x8315960 0x78ceb2b920
	void ResetElements(int Count);// 0x8315a08 0x78ceb2ba00
	void Init(class UserWidget cellClass, int cellNum, delegate refreshItemEvent);// 0x8315ab0 0x78ceb2bae0
	float CalcInitOffset(int data_index);// 0x8315bf4 0x78ceb2bbc0
	float CalcElmScale(int index, float Offset);// 0x8315db4 0x78ceb2bca0
	float CalcElmOpacity(int index, float Offset);// 0x8315cb8 0x78ceb2bd80
	float CalcElmLocation(int index, float Offset);// 0x8315eb0 0x78ceb2be60

--------------------------------
Class: GuideAction.Object
	enum ActionType;//[Offset: 0x28, Size: 0x1] 0x78ceaca4c0

--------------------------------
Class: GuideActionShowRemind.GuideAction.Object
	enum RemindContent;//[Offset: 0x29, Size: 0x1] 0x78ceaca420
	float HideDelay;//[Offset: 0x2c, Size: 0x4] 0x78ceb41980

--------------------------------
Class: GuideActionHideWidget.GuideAction.Object
	enum HideWidgetType;//[Offset: 0x29, Size: 0x1] 0x78ceaca380

--------------------------------
Class: GuideActionShowWidget.GuideAction.Object
	enum ShowWidgetType;//[Offset: 0x29, Size: 0x1] 0x78ceaca2e0

--------------------------------
Class: GuideActionLockWidget.GuideAction.Object
	enum LockWidgetType;//[Offset: 0x29, Size: 0x1] 0x78ceaca240

--------------------------------
Class: GuideActionUnlockWidget.GuideAction.Object
	enum UnlockWidgetType;//[Offset: 0x29, Size: 0x1] 0x78ceaca1a0

--------------------------------
Class: GuideActionShowGuideWidget.GuideAction.Object
	enum BindWidgetType;//[Offset: 0x29, Size: 0x1] 0x78ceaca060
	enum GuideWidgetType;//[Offset: 0x2a, Size: 0x1] 0x78ceaca100
	bool bIsAutoHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x78ceb41580
	bool bIsForceGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78ceb41600
	bool bIsPauseGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x78ceb41680

--------------------------------
Class: GuideActionHideGuideWidget.GuideAction.Object
	enum BindWidgetType;//[Offset: 0x29, Size: 0x1] 0x78ceac9fc0

--------------------------------
Class: GuideActionShowTeachMap.GuideAction.Object
	enum TeachMapType;//[Offset: 0x29, Size: 0x1] 0x78ceac9f20

--------------------------------
Class: GuideActionTeachAnim.GuideAction.Object
	enum TeachAnimType;//[Offset: 0x29, Size: 0x1] 0x78ceac9e80

--------------------------------
Class: GuideActionFocusActor.GuideAction.Object
	Actor* FocusActor;//[Offset: 0x30, Size: 0x8] 0x78ceb43100
	Actor* FocusCompleteLookAtActor;//[Offset: 0x38, Size: 0x8] 0x78ceb43180
	float FocusBlendTime;//[Offset: 0x40, Size: 0x4] 0x78ceb41100
	float FocusStopTime;//[Offset: 0x44, Size: 0x4] 0x78ceb41180
	float FocusTimeDilation;//[Offset: 0x48, Size: 0x4] 0x78ceb41200
	float RecoverBlendTime;//[Offset: 0x4c, Size: 0x4] 0x78ceb41280

--------------------------------
Class: GuideActionTriggerAirWall.GuideAction.Object
	Actor* AirWallActor;//[Offset: 0x30, Size: 0x8] 0x78ceb43080

--------------------------------
Class: GuideActionInitNpc.GuideAction.Object
	int NPCId;//[Offset: 0x2c, Size: 0x4] 0x78ceb42f80
	Actor* SpawnActor;//[Offset: 0x30, Size: 0x8] 0x78ceb43000

--------------------------------
Class: GuideActionInitTasks.GuideAction.Object

--------------------------------
Class: GuideActionNpcUseSkill.GuideAction.Object
	int NPCId;//[Offset: 0x2c, Size: 0x4] 0x78ceb42e80
	int skillid;//[Offset: 0x30, Size: 0x4] 0x78ceb42f00

--------------------------------
Class: GuideActionHideAllShowingWidget.GuideAction.Object

--------------------------------
Class: GuideActionShowAllShowingWidget.GuideAction.Object

--------------------------------
Class: GuideActionNpcAddBuff.GuideAction.Object
	int NPCId;//[Offset: 0x2c, Size: 0x4] 0x78ceb42d80
	int buffID;//[Offset: 0x30, Size: 0x4] 0x78ceb42e00

--------------------------------
Class: GuideActionNpcRemoveBuff.GuideAction.Object
	int NPCId;//[Offset: 0x2c, Size: 0x4] 0x78ceb42c80
	int buffID;//[Offset: 0x30, Size: 0x4] 0x78ceb42d00

--------------------------------
Class: GuideActionAddBuff.GuideAction.Object
	int buffID;//[Offset: 0x2c, Size: 0x4] 0x78ceb42c00

--------------------------------
Class: GuideActionRemoveBuff.GuideAction.Object
	int buffID;//[Offset: 0x2c, Size: 0x4] 0x78ceb42b80

--------------------------------
Class: GuideTask.Object
	FText taskName;//[Offset: 0x30, Size: 0x18] 0x78ceb42880
	bool bAddToTaskPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ceb42900
	enum TaskType;//[Offset: 0x49, Size: 0x1] 0x78ceac9c00
	GuideAction*[] StartActions;//[Offset: 0x50, Size: 0x10] 0x78ceac9ca0
	GuideAction*[] EndActions;//[Offset: 0x60, Size: 0x10] 0x78ceac9d40
	GuideTask*[] KeepingTasks;//[Offset: 0x70, Size: 0x10] 0x78ceac9de0

--------------------------------
Class: GuideTaskDelay.GuideTask.Object
	float IntervalTime;//[Offset: 0x80, Size: 0x4] 0x78ceb42800

--------------------------------
Class: GuideTaskTurn.GuideTask.Object
	float IntervalYaw;//[Offset: 0x80, Size: 0x4] 0x78ceb42780

--------------------------------
Class: GuideTaskMove.GuideTask.Object
	Actor* StartActor;//[Offset: 0x80, Size: 0x8] 0x78ceb42680
	WalkGuideTargetInfo[] WalkGuideTargetInfos;//[Offset: 0x88, Size: 0x10] 0x78ceac9b60

--------------------------------
Class: WalkGuideTargetInfo
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8] 0x78cefbd200
	bool bNeedFootStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cefbd280

--------------------------------
Class: GuideTaskLockNpc.GuideTask.Object
	int NPCId;//[Offset: 0x80, Size: 0x4] 0x78ceb42600

--------------------------------
Class: GuideTaskPick.GuideTask.Object
	bool bIsNeedPickAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x78ceb42300
	bool bIgnoreStartNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78ceb42380
	<int,int> ItemInfos;//[Offset: 0x88, Size: 0x50] 0x78cf158140
	Actor* StartActor;//[Offset: 0xd8, Size: 0x8] 0x78ceb42500
	WalkGuideTargetInfo[] WalkGuideTargetInfos;//[Offset: 0xe0, Size: 0x10] 0x78ceac9ac0

--------------------------------
Class: GuideTaskEquip.GuideTask.Object
	int EquipItemId;//[Offset: 0x80, Size: 0x4] 0x78ceb42280

--------------------------------
Class: GuideTaskSkill.GuideTask.Object
	int[] skillid;//[Offset: 0x80, Size: 0x10] 0x78ceac9a20

--------------------------------
Class: GuideTaskInjury.GuideTask.Object
	float Injury;//[Offset: 0x80, Size: 0x4] 0x78ceb42180

--------------------------------
Class: GuideTaskNpcState.GuideTask.Object
	int NPCId;//[Offset: 0x80, Size: 0x4] 0x78ceb44180
	enum State;//[Offset: 0x84, Size: 0x1] 0x78ceac9980

--------------------------------
Class: GuideTaskTeachMapClose.GuideTask.Object

--------------------------------
Class: GuideTaskGuideWidgetHide.GuideTask.Object
	enum BindWidgetType;//[Offset: 0x80, Size: 0x1] 0x78ceac98e0

--------------------------------
Class: GuideTaskNpcBlockSuccess.GuideTask.Object
	int NPCId;//[Offset: 0x80, Size: 0x4] 0x78ceb44000
	int NpcBlockSuccessTime;//[Offset: 0x84, Size: 0x4] 0x78ceb44080

--------------------------------
Class: GuideTaskBreakSuccess.GuideTask.Object
	int BreakSuccessTime;//[Offset: 0x80, Size: 0x4] 0x78ceb43f80

--------------------------------
Class: GuideTaskCost.GuideTask.Object
	bool bIsNeedCostAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x78ceb43e00
	<int,int> ItemInfos;//[Offset: 0x88, Size: 0x50] 0x78cf158080

--------------------------------
Class: GuideTaskKeepingAction.GuideTask.Object
	enum KeepingActionType;//[Offset: 0x80, Size: 0x1] 0x78ceac9840

--------------------------------
Class: GuideTaskStage.Object
	FText TaskStageName;//[Offset: 0x30, Size: 0x18] 0x78ceb43b00
	Actor* RebirthActor;//[Offset: 0x48, Size: 0x8] 0x78ceb43b80
	GuideAction*[] StartActions;//[Offset: 0x50, Size: 0x10] 0x78ceac9660
	GuideAction*[] EndActions;//[Offset: 0x60, Size: 0x10] 0x78ceac9700
	GuideTask*[] Tasks;//[Offset: 0x78, Size: 0x10] 0x78ceac97a0

--------------------------------
Class: BaseGuideActor.Actor.Object
	World* World;//[Offset: 0x220, Size: 0x8] 0x78ceb44d80
	WuXiaXPlayerController* PlayerController;//[Offset: 0x228, Size: 0x8] 0x78ceb44e00
	WuXiaXCharacter* Character;//[Offset: 0x230, Size: 0x8] 0x78ceb44e80
	ComponentMiddle* MiddleComponent;//[Offset: 0x238, Size: 0x8] 0x78ceb44f00
	MainGameUI* MainGameUI;//[Offset: 0x240, Size: 0x8] 0x78ceb44f80
	WuXiaXGameInstance* GameInstance;//[Offset: 0x248, Size: 0x8] 0x78ceb45000
	NpcManager* NpcManager;//[Offset: 0x250, Size: 0x8] 0x78ceb45080
	WuXiaXGameStateBase* GameState;//[Offset: 0x258, Size: 0x8] 0x78ceb45100
	float StartDelay;//[Offset: 0x3d8, Size: 0x4] 0x78ceb45180
	GuideTaskStage*[] TaskStages;//[Offset: 0x3e0, Size: 0x10] 0x78ceac92a0
	void UnlockWidget(enum WidgetType);// 0x8a873f8 0x78ceb2dde0
	void TriggerAirWall(GuideActionTriggerAirWall* GuideActionTriggerAirWall);// 0x8a873f8 0x78ceb2dec0
	void TaskPanelInitTasks(out const FText StageTaskName, out const FText[] TaskNames);// 0x8a873f8 0x78ceb2dfa0
	bool TaskPanelFinishTask(out const FText taskName);// 0x8a873f8 0x78ceb2e080
	void ShowTeachMap(GuideActionShowTeachMap* GuideActionShowTeachMap);// 0x8a873f8 0x78ceb2e160
	void ShowRemind(GuideActionShowRemind* GuideActionShowRemind);// 0x8a873f8 0x78ceb2e240
	void ShowGuideWidget(GuideActionShowGuideWidget* GuideActionShowGuideWidget);// 0x8a873f8 0x78ceb2e320
	void ShowAllShowingWidget();// 0x831fe98 0x78ceb2e400
	void ResetWalkGuide(Actor* StartActor, out const WalkGuideTargetInfo[] WalkGuideTargetInfos);// 0x8a873f8 0x78ceb2e4e0
	void ResetTransform();// 0x831fec0 0x78ceb2e5c0
	void LockWidget(enum WidgetType);// 0x8a873f8 0x78ceb2e6a0
	bool IsWalkGuideArrived();// 0x8a873f8 0x78ceb2adc0
	bool IsTeachMapClosed();// 0x8a873f8 0x78ceb2aea0
	bool IsGuideWidgetHided(enum BindWidgetType);// 0x8a873f8 0x78ceb2af80
	void HideGuideWidget(GuideActionHideGuideWidget* GuideActionHideGuideWidget);// 0x8a873f8 0x78ceb2b060
	void HideAllShowingWidget();// 0x831feac 0x78ceb2b140
	void ExitGuide();// 0x8a873f8 0x78ceb2b220
	void CreateGuidePanel();// 0x8a873f8 0x78ceb2b300
	void ClearWalkGuide();// 0x8a873f8 0x78ceb2b3e0
	void ClearStageInfo();// 0x831fed4 0x78ceb2b4c0

--------------------------------
Class: WuXiaXPlayerController.WuXiaXPawnController.PlayerController.Controller.Actor.Object
	int64 time_seconds_;//[Offset: 0x698, Size: 0x8] 0x78ce6df300
	int64 time_net_delay_;//[Offset: 0x6a0, Size: 0x8] 0x78ce6df380
	int64 time_client_server_add_;//[Offset: 0x6a8, Size: 0x8] 0x78ce6df400
	int64 ClientPingTime;//[Offset: 0x6b0, Size: 0x8] 0x78ce6df480
	int64 ReConnectInterval;//[Offset: 0x6b8, Size: 0x8] 0x78ce6df500
	bool is_camera_change_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1] 0x78ce6df580
	bool bIsDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 0x1] 0x78ce6df600
	float KilledTraceDistance;//[Offset: 0x6c4, Size: 0x4] 0x78ce6df680
	Vector KilledCameraLocation;//[Offset: 0x6c8, Size: 0xc] 0x78ce6df700
	Rotator KilledCameraRotation;//[Offset: 0x6d4, Size: 0xc] 0x78ce6df780
	Vector KilledTraceDirection;//[Offset: 0x6e0, Size: 0xc] 0x78ce6dd700
	Rotator KilledTraceMaxOffset;//[Offset: 0x6ec, Size: 0xc] 0x78ce6dd780
	TimerHandle timer_handle_;//[Offset: 0x770, Size: 0x8] 0x78ce6dd800
	TimerHandle check_has_character_timer_handle_;//[Offset: 0x778, Size: 0x8] 0x78ce6dd880
	TimerHandle client_timer_handle_;//[Offset: 0x780, Size: 0x8] 0x78ce6dd900
	int64 cur_ping_index_;//[Offset: 0x798, Size: 0x8] 0x78ce6dd980
	void TimeSyncStart();// 0x857c798 0x78ce7021c0
	void SetZeroCounter(int64 StartTime);// 0x857bef8 0x78ce7022a0
	void SetTrainCounter(int64 StartTime);// 0x857be48 0x78ce702380
	void SetTraceLocation(Vector NewLocation);// 0x857b0c4 0x78ce702460
	void SetPVPGameTime(int64 StartTime);// 0x857bfa8 0x78ce702540
	void SetPlayerTeamStastics(const StasticsInfo[] reds, const StasticsInfo[] greens, const StasticsInfo[] blues);// 0x857bc40 0x78ce702620
	void Server_StartPing(int64 index, int64 Time);// 0x857c8f4 0x78ce702700
	void Server_ReportClientBug_Debug(FString Info);// 0x857c7ac 0x78ce7027e0
	void Server_PlayerQuitGame();// 0x857c898 0x78ce7028c0
	void SendQuickMessage(FString Message);// 0x857afc8 0x78ce7029a0
	void PlayKillerTrace(WuXiaXBaseCharacter* killer);// 0x8a873f8 0x78ce702a80
	void InputAnyKey(Key Key);// 0x857b2f0 0x78ce702b60
	void HandleKilledTraceTouch(Vector2D Delta);// 0x857af24 0x78ce702c40
	FText GetKeyText(FName Name);// 0x857ca24 0x78ce702d20
	void DeleteMark();// 0x857c058 0x78ce702e00
	void DebugPrintTimeMS(int sencond);// 0x857c5ac 0x78ce702ee0
	void ClientReportServerTime(int64 index, int64 cTime, int64 sTime);// 0x857c654 0x78ce702fc0
	void Client_UpdateKillLive(int killnumber, int livenumber);// 0x857b954 0x78ce7030a0
	void Client_UpdateKill(int killnumber, int ItemId);// 0x857b85c 0x78ce703180
	void Client_TeamPointInfo(int red, int blue, int green);// 0x857bafc 0x78ce703260
	void Client_StatisticSetAllPlayerData(const SimplePlayerData[] AllPlayerDataArray);// 0x857b474 0x78ce703340
	void Client_ShowStatisticUI(GameStatisticInfo GameStatisticInfo);// 0x857b57c 0x78ce703420
	void Client_SetResurrectionTime(int64 Time);// 0x857ba4c 0x78ce703500
	void Client_SetDebugMode(bool bIsDebug);// 0x857b21c 0x78ce7035e0
	void Client_PlayKilledTrace(int KillerPlayer);// 0x857b16c 0x78ce7036c0
	void Client_ControllerConnectFinish();// 0x857b2d4 0x78ce7037a0
	bool BP_InputKey(Key Key, byte EventType, float AmountDepressed, bool bGamepad);// 0x857c330 0x78ce703880
	bool BP_InputAxis(Key Key, float Delta, float DeltaTime, int NumSamples, bool bGamepad);// 0x857c06c 0x78ce703960
	void BackToKilledPos();// 0x857af10 0x78ce700080

--------------------------------
Class: WuXiaXPawnController.PlayerController.Controller.Actor.Object
	Vector item_sync_location;//[Offset: 0x570, Size: 0xc] 0x78ce6db300
	<int64,SpawnItemData> sync_items;//[Offset: 0x580, Size: 0x50] 0x78cee11a80
	<int64,SpawnItemData> spawn_items;//[Offset: 0x5d0, Size: 0x50] 0x78cee11b40
	<int64,SpawnItemData> update_items;//[Offset: 0x620, Size: 0x50] 0x78cee11c00
	int64 player_net_id_;//[Offset: 0x678, Size: 0x8] 0x78ce6d9580
	FString player_name_;//[Offset: 0x680, Size: 0x10] 0x78ce6d9600
	int game_room_id_;//[Offset: 0x690, Size: 0x4] 0x78ce6d9680
	void UpdatePickItems();// 0x85794dc 0x78ce6bcb80
	void SyncPickItems();// 0x85794f0 0x78ce6bcc60
	void SetGameRoomId(int val);// 0x857985c 0x78ce6bcd40
	void Server_StartSync();// 0x8579774 0x78ce6bce20
	void Server_Sign(int makePlayerId, const int[] otherPlayerList, SignPlayerInfo Info);// 0x8579008 0x78ce6bcf00
	void RemovePickItem(PickItem* PickItem);// 0x8579264 0x78ce6bcfe0
	void OnRep_PlayerNetID();// 0x8578ab0 0x78ce6bd0c0
	void OnRep_GameRoomID();// 0x8578a9c 0x78ce6bd1a0
	bool IsObController();// 0x8579808 0x78ce6bd280
	Vector GetPawnLocation();// 0x85797d0 0x78ce6bd360
	int GetGameRoomId();// 0x8579840 0x78ce6bd440
	void Client_UpdatePickItems(const ItemNumberData[] pickitems);// 0x857930c 0x78ce6bd520
	void Client_SyncPickItems(const SpawnItemData[] pickitems, const WeaponItemInfo[] weaponinfos);// 0x85793c8 0x78ce6bd600
	void Client_SignAuto(FString Name, const Vector Location, enum mainType, enum childType);// 0x8578b6c 0x78ce6bd6e0
	void Client_Sign(int makePlayerId, const int[] otherPlayerList, SignPlayerInfo Info);// 0x8578dac 0x78ce6bd7c0
	void Client_SetEnterDungeon(bool isJoin);// 0x8578cfc 0x78ce6bd8a0
	void Client_ClearSignAuto(enum mainType);// 0x8578ac4 0x78ce6bd980
	bool CheckNeedSyncItems();// 0x857973c 0x78ce6bda60
	void AddSyncUpdateItem(SpawnItemData Item);// 0x8579504 0x78ce6bdb40
	void AddSyncSpawnItem(SpawnItemData Item);// 0x8579620 0x78ce6bdc20

--------------------------------
Class: SignPlayerInfo
	enum operateType;//[Offset: 0x0, Size: 0x1] 0x78cefd5100
	enum mainType;//[Offset: 0x1, Size: 0x1] 0x78cefd51a0
	bool isShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cefe7200
	int PlayerID;//[Offset: 0x4, Size: 0x4] 0x78cefe7280
	SignPointInfo pointItem;//[Offset: 0x8, Size: 0x28] 0x78cefe7300
	SignPointInfo pointEnemy;//[Offset: 0x30, Size: 0x28] 0x78cefe7380
	SignPointInfo pointArea;//[Offset: 0x58, Size: 0x28] 0x78cefe5300
	SignPointInfo pointAutoDragonRock;//[Offset: 0x80, Size: 0x28] 0x78cefe5380
	SignPointInfo pointAutoTouTuo;//[Offset: 0xa8, Size: 0x28] 0x78cefe5400
	SignPointInfo pointAutoParadrop;//[Offset: 0xd0, Size: 0x28] 0x78cefe5480
	SignPointInfo TargetSignPointInfo;//[Offset: 0xf8, Size: 0x28] 0x78cefe5700

--------------------------------
Class: SignPointInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cefe5500
	FString str;//[Offset: 0x10, Size: 0x10] 0x78cefe5580
	enum childType;//[Offset: 0x20, Size: 0x1] 0x78cefd5240
	int Quality;//[Offset: 0x24, Size: 0x4] 0x78cefe5680

--------------------------------
Class: StasticsInfo
	FString name_;//[Offset: 0x0, Size: 0x10] 0x78cefe4800
	int kill_;//[Offset: 0x10, Size: 0x4] 0x78cefe4880
	int dead_;//[Offset: 0x14, Size: 0x4] 0x78cefe4900
	int assist_;//[Offset: 0x18, Size: 0x4] 0x78cefe4980
	int resource_;//[Offset: 0x1c, Size: 0x4] 0x78cefe4a00

--------------------------------
Class: SpawnItemData
	int world_id_;//[Offset: 0x0, Size: 0x4] 0x78cefe3d00
	int64 spawn_item_id_;//[Offset: 0x8, Size: 0x8] 0x78cefe3d80
	int spawn_number_;//[Offset: 0x10, Size: 0x4] 0x78cefe3e00
	Vector spawn_location_;//[Offset: 0x14, Size: 0xc] 0x78cefe3e80
	Rotator spawn_rotator_;//[Offset: 0x20, Size: 0xc] 0x78cefe3f00
	int spawn_uid_;//[Offset: 0x2c, Size: 0x4] 0x78cefe3f80
	enum spawn_type_;//[Offset: 0x30, Size: 0x1] 0x78cefd2fe0
	int spawn_skin_id;//[Offset: 0x34, Size: 0x4] 0x78cefe4080
	bool is_in_cave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cefe4100
	bool bIsParadropSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78cefe4180

--------------------------------
Class: SimplePlayerData
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cf592600
	FString PlayerName;//[Offset: 0x8, Size: 0x10] 0x78cf592680
	HeroData HeroData;//[Offset: 0x18, Size: 0xf8] 0x78cf592700
	int TotalDamageAmount;//[Offset: 0x110, Size: 0x4] 0x78cf592780
	int TotalGetHurtAmount;//[Offset: 0x114, Size: 0x4] 0x78cf592800
	int TotalHealAmount;//[Offset: 0x118, Size: 0x4] 0x78cf592880
	int SurviveTime;//[Offset: 0x11c, Size: 0x4] 0x78cf592900
	int KillNum;//[Offset: 0x120, Size: 0x4] 0x78cf592980
	int Score;//[Offset: 0x124, Size: 0x4] 0x78cf592a00

--------------------------------
Class: GameStatisticInfo
	enum GameMode;//[Offset: 0x0, Size: 0x1] 0x78cf563ee0
	enum SquadMode;//[Offset: 0x1, Size: 0x1] 0x78cf563f80
	int MatchRank;//[Offset: 0x4, Size: 0x4] 0x78cf592300
	bool bIsChooseWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf592380
	int KillNum;//[Offset: 0xc, Size: 0x4] 0x78cf592400
	int RescueNum;//[Offset: 0x10, Size: 0x4] 0x78cf592480
	int ResurrectionNum;//[Offset: 0x14, Size: 0x4] 0x78cf592500
	int ResurrectedNum;//[Offset: 0x18, Size: 0x4] 0x78cf592580
	SimplePlayerData[] TeammateDataArray;//[Offset: 0x20, Size: 0x10] 0x78cf564020
	HeroData HeroData;//[Offset: 0x30, Size: 0xf8] 0x78cf591600
	int ProficiencyBefore;//[Offset: 0x128, Size: 0x4] 0x78cf591680
	int ProficiencyAfter;//[Offset: 0x12c, Size: 0x4] 0x78cf591700
	int AddProficiency;//[Offset: 0x130, Size: 0x4] 0x78cf591780
	int BasicScore;//[Offset: 0x134, Size: 0x4] 0x78cf591800
	int VictoryScore;//[Offset: 0x138, Size: 0x4] 0x78cf591880
	int RescueScore;//[Offset: 0x13c, Size: 0x4] 0x78cf591900
	int SessionScoreBefore;//[Offset: 0x140, Size: 0x4] 0x78cf591980
	int SessionScoreAfter;//[Offset: 0x144, Size: 0x4] 0x78cf591a00
	int AddSessionScore;//[Offset: 0x148, Size: 0x4] 0x78cf591a80
	int RewardMoney;//[Offset: 0x14c, Size: 0x4] 0x78cf591b00
	int RewardExperience;//[Offset: 0x150, Size: 0x4] 0x78cf591b80
	int MutilMoney;//[Offset: 0x154, Size: 0x4] 0x78cf591c00
	int MutilExperience;//[Offset: 0x158, Size: 0x4] 0x78cf591c80
	int TotalDamageAmount;//[Offset: 0x15c, Size: 0x4] 0x78cf591d00
	int TotalGetHurtAmount;//[Offset: 0x160, Size: 0x4] 0x78cf591d80
	int TotalHealAmount;//[Offset: 0x164, Size: 0x4] 0x78cf591e00
	int SurviveTime;//[Offset: 0x168, Size: 0x4] 0x78cf591e80
	FString PlayerName;//[Offset: 0x170, Size: 0x10] 0x78cf591f00
	int PlayerID;//[Offset: 0x180, Size: 0x4] 0x78cf591f80
	int EvaluateScore;//[Offset: 0x184, Size: 0x4] 0x78cf592000
	int RewardTreasureChip;//[Offset: 0x188, Size: 0x4] 0x78cf592080

--------------------------------
Class: PickItem.Actor.Object
	BoxComponent* check_box_component;//[Offset: 0x228, Size: 0x8] 0x78cece8380
	BoxComponent* collision_component_;//[Offset: 0x230, Size: 0x8] 0x78cece8400
	int world_id_;//[Offset: 0x238, Size: 0x4] 0x78cece6380
	MeshComponent* meshcomp_;//[Offset: 0x240, Size: 0x8] 0x78cece6400
	enum pick_type_;//[Offset: 0x248, Size: 0x1] 0x78cebcf7e0
	GameItemInfo item_info_;//[Offset: 0x24c, Size: 0x4c] 0x78cece6500
	int ItemLevel;//[Offset: 0x298, Size: 0x4] 0x78cece6580
	WuXiaXCharacter* player_;//[Offset: 0x2a0, Size: 0x8] 0x78cece6600
	Vector collision_scale_;//[Offset: 0x2a8, Size: 0xc] 0x78cece6680
	PickItemRotate[] PickItemRotateInfo;//[Offset: 0x2b8, Size: 0x10] 0x78cebcf880
	void ShowSpecialEffect();// 0x8a873f8 0x78cecf51e0
	bool InteractiveUITips(WuXiaXBaseCharacter* Player, out FText text);// 0x83f85c8 0x78cecf52c0
	void HideSpecialEffect();// 0x8a873f8 0x78cecf53a0
	enum GetInteractiveType(WuXiaXBaseCharacter* Player);// 0x83f8510 0x78cecf5480
	bool CanInteractive(WuXiaXBaseCharacter* Player, enum Trigger);// 0x83f872c 0x78cecf5560
	void BoxItemBeginShow();// 0x8a873f8 0x78cecf5640

--------------------------------
Class: PickItemRotate
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78cefd0ec0
	Rotator Rot;//[Offset: 0x4, Size: 0xc] 0x78cefc5c80
	Vector Loc;//[Offset: 0x10, Size: 0xc] 0x78cefc5d00

--------------------------------
Class: ItemNumberData
	int64 world_id_;//[Offset: 0x0, Size: 0x8] 0x78cefe4200
	int number_;//[Offset: 0x8, Size: 0x4] 0x78cefe2180

--------------------------------
Class: MainGameUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	CanvasPanel* mainCanvasPanel;//[Offset: 0x348, Size: 0x8] 0x78cec96180
	UI_MobileBag* BagUI;//[Offset: 0x350, Size: 0x8] 0x78cec96200
	FString[] ZeroTimerMapsToIgnore;//[Offset: 0x358, Size: 0x10] 0x78cebc9840
	UserSettingWidget* usersetting_UI_;//[Offset: 0x368, Size: 0x8] 0x78cec96300
	StatisticsWidget* userstatistics_UI_;//[Offset: 0x370, Size: 0x8] 0x78cec94280
	enum current_ui_state_;//[Offset: 0x378, Size: 0x1] 0x78cebc98e0
	CanUsedRangeWeaponInfo m_CanUsedRangeWeaponInfo;//[Offset: 0x380, Size: 0x18] 0x78cec94380
	CanUsedRangeWeaponInfo m_CanUsedThrowWeaponInfo;//[Offset: 0x398, Size: 0x18] 0x78cec94400
	WuXiaMiniMapWidget* mini_map_;//[Offset: 0x3c0, Size: 0x8] 0x78cec94480
	UI_MobileSetting* MobileSettingUI;//[Offset: 0x3c8, Size: 0x8] 0x78cec94500
	bool AllowOpenSettingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1] 0x78cec94580
	NewGuideUI* GuideUI;//[Offset: 0x3d8, Size: 0x8] 0x78cec94600
	TrainOutlineUI* TrainOutlineUI;//[Offset: 0x3e0, Size: 0x8] 0x78cec94680
	PickBagUI* AutoPickUI;//[Offset: 0x3e8, Size: 0x8] 0x78cec94700
	PickBagUI* PickBagUI;//[Offset: 0x3f0, Size: 0x8] 0x78cec94780
	void ZeroTextState(bool State);// 0x8a873f8 0x78cec898c0
	void WearHat(int Level, int MaxDurable);// 0x8a873f8 0x78cec899a0
	void WearArmor(int Level, int MaxDurable);// 0x8a873f8 0x78cec89a80
	void ValidGuideType(enum Type);// 0x83b690c 0x78cec89b60
	void UpdateWeaponStateEffect(int weaponindex, PaperSprite* effecticon, int Value);// 0x8a873f8 0x78cec89c40
	void UpdateThrowWeapon();// 0x8a873f8 0x78cec89d20
	void UpdateTeamPlayerWaistTokenState(int Num, enum new_state);// 0x8a873f8 0x78cec89e00
	void UpdateTeamPlayerState(int Num, enum new_state);// 0x8a873f8 0x78cec89ee0
	void UpdateTeamPlayerSPPercent(int Num, float Value);// 0x8a873f8 0x78cec89fc0
	void UpdateTeamPlayerHPPercent(int Num, float Value);// 0x8a873f8 0x78cec8a0a0
	void UpdateTeamPlayerDyingHPPercent(int Num, float Value);// 0x8a873f8 0x78cec8a180
	void UpdateSoundLocation(int ID, Vector NewLocation);// 0x8a873f8 0x78cec8a260
	void UpdateSatiety(float satietyvalue);// 0x8a873f8 0x78cec8a340
	void UpdateRangeWeapon();// 0x8a873f8 0x78cec8a420
	void UpdateRangeChargeNum(int NewRangeChargeNum, int NewMaxRangeChargeNum);// 0x8a873f8 0x78cec8a500
	void UpdateProjectilePath(out const Vector startLocation, out const Vector[] LocalPoints);// 0x8a873f8 0x78cec8a5e0
	void UpdatePlayerState(enum new_state);// 0x8a873f8 0x78cec8a6c0
	void UpdatePlayerRotator(int Num, float Yaw);// 0x8a873f8 0x78cec8a7a0
	void UpdatePlayerMark3DLocation(int Num, Vector Location);// 0x8a873f8 0x78cec8a880
	void UpdatePlayerLocation(int Num, Vector Location);// 0x8a873f8 0x78cec8a960
	void UpdateOxygen(float oxygen);// 0x8a873f8 0x78cec8aa40
	void UpdateMp(float currentMP, float currentmaxMP, float maxMP);// 0x8a873f8 0x78cec8ab20
	void UpdateMoisture(float moisture);// 0x8a873f8 0x78cec8ac00
	void UpdateLiveData(int LIVE, int MaxPlayerNum);// 0x8a873f8 0x78cec8ace0
	void UpdateKiteSpeed(float Speed);// 0x8a873f8 0x78cec87400
	void UpdateKillData(int kill);// 0x8a873f8 0x78cec874e0
	void UpdateItemNumber(int index, int Number);// 0x8a873f8 0x78cec875c0
	void UpdateInjury(float Injury);// 0x8a873f8 0x78cec876a0
	void UpdateHorseSpeed(float current_speed, float max_speed);// 0x8a873f8 0x78cec87780
	void UpdateHorsePower(float current_power, float max_power);// 0x8a873f8 0x78cec87860
	void UpdateFightSp(float currentSP, float maxSP);// 0x8a873f8 0x78cec87940
	void UpdateFightHp(float currentHP, float maxHP);// 0x8a873f8 0x78cec87a20
	void UpdateExpression(out const int[] items);// 0x8a873f8 0x78cec87b00
	void UpdateEagleItemEffect(int ID, int Level, bool Add);// 0x8a873f8 0x78cec87be0
	void UpdateEagleEffect(int ID, bool Add);// 0x8a873f8 0x78cec87cc0
	void UpdateDyingHp(float currentHP, float maxHP);// 0x8a873f8 0x78cec87da0
	void UpdateDrugValue(float drugvalue);// 0x8a873f8 0x78cec87e80
	void UpdateCrosshairType(enum NewCrosshairType, int NewCrosshairNum);// 0x8a873f8 0x78cec87f60
	void UpdateCrosshairLockedInfosAndProjectileLocations(out const CrosshairLockedInfo[] NewCrosshairLockedInfos, out const Vector[] NewProjectileLocations);// 0x8a873f8 0x78cec88040
	void UpdateCompass(float Angle);// 0x8a873f8 0x78cec88120
	void UpdateCheckSoundCD(float current_cd, float max_cd);// 0x8a873f8 0x78cec88200
	void UpdateCDBuff(int64 buffID, float Time);// 0x8a873f8 0x78cec882e0
	void UpdateBlockColdProgress(float ColdProgress);// 0x8a873f8 0x78cec883c0
	void UpdateAction(out const int[] items);// 0x8a873f8 0x78cec884a0
	void TrainTextState(bool State);// 0x8a873f8 0x78cec88580
	void TeamQuickMessage(int PlayerID, FString Message);// 0x8a873f8 0x78cec88660
	void TakeOffHat();// 0x8a873f8 0x78cec88740
	void TakeOffArmor();// 0x8a873f8 0x78cec88820
	bool SwitchToThrowWeapon();// 0x83b6860 0x78cec88900
	bool SwitchToRangeWeapon();// 0x83b6898 0x78cec889e0
	void SwitchToMainWeapon();// 0x83b68d0 0x78cec88ac0
	void SkillAttack(int index);// 0x83b69c8 0x78cec88ba0
	void SkillAlertTip(enum skill_type);// 0x8a873f8 0x78cec88c80
	void ShowTrainMainUI();// 0x8a873f8 0x78cec88d60
	void ShowTeachingMission(FString title, out const FString[] items, bool bShowCloseButton);// 0x8a873f8 0x78cec88e40
	void ShowOxygen();// 0x8a873f8 0x78cec88f20
	void ShowNearbyEnemyNum(bool Show, int Num);// 0x8a873f8 0x78cec89000
	void ShowMapPanel();// 0x8a873f8 0x78cec85720
	void ShowMainInterfaceUI();// 0x8a873f8 0x78cec85800
	void ShowLastPlayerCountDown(float Time);// 0x8a873f8 0x78cec858e0
	void ShowInteractive(enum Type, out const FText text);// 0x8a873f8 0x78cec859c0
	void ShowGuideWidget(enum BindWidgetType, enum GuideWidgetType, bool bIsAutoHide, bool bIsForceGuide, bool bIsShowReturnBtn);// 0x8a873f8 0x78cec85aa0
	void ShowGameCountDownTime();// 0x8a873f8 0x78cec85b80
	void ShowEndGameTip(int MatchRank, int KillNum);// 0x8a873f8 0x78cec85c60
	void ShowDamageCircle();// 0x8a873f8 0x78cec85d40
	void ShowCheckSoundLocation(int IDs, Vector Location);// 0x8a873f8 0x78cec85e20
	void SetZeroTimer(int Timer);// 0x8a873f8 0x78cec85f00
	void SetWuXueEnable(bool bIsEnable);// 0x8a873f8 0x78cec85fe0
	void SetWhetStoneEnable(bool bIsEnable);// 0x8a873f8 0x78cec860c0
	void SetWeaponState(enum WeaponEquipType, int WeaponLevel, int BufferNumber, int MaxBufferNumber, PaperSprite* WeaponIcon);// 0x8a873f8 0x78cec861a0
	void SetTwoSkillEnable(bool bIsEnable);// 0x8a873f8 0x78cec86280
	void SetTrainTimer(int Timer);// 0x8a873f8 0x78cec86360
	void SetThrowSkillInfo(PaperSprite* Sprite, int skillid, float maxCD);// 0x8a873f8 0x78cec86440
	void SetThreeSkillEnable(bool bIsEnable);// 0x8a873f8 0x78cec86520
	void SetTeamPlayerShowMode(int teammode);// 0x8a873f8 0x78cec86600
	void SetTeamInfoEnable(bool bIsEnable);// 0x8a873f8 0x78cec866e0
	void SetTalkButtonState(bool visible);// 0x8a873f8 0x78cec867c0
	void SetSplitItemButton(bool isbottondown);// 0x8a873f8 0x78cec868a0
	void SetSkillState(int skill_slot, bool enable);// 0x8a873f8 0x78cec86980
	void SetSkillHotKey(int index, int skill_id, PaperSprite* icon, float skillcd, bool canuse, int skillprop);// 0x8a873f8 0x78cec86a60
	void SetSkillCurrentCD(int skill_id, float skillcd);// 0x8a873f8 0x78cec86b40
	void SetSignEnable(bool bIsEnable);// 0x8a873f8 0x78cec86c20
	void SetSignal(int signal);// 0x8a873f8 0x78cec86d00
	void SetSettingEnable(bool bIsEnable);// 0x8a873f8 0x78cec86de0
	void SetRangeThrowSkillIconState(enum IconState);// 0x8a873f8 0x78cec86ec0
	void SetRangeThrowSkillEnable(bool bIsEnable);// 0x8a873f8 0x78cec86fa0
	void SetRangeSkillInfo(PaperSprite* Sprite, int skillid, float maxCD);// 0x8a873f8 0x78cec87080
	void SetQuickMsgEnable(bool bIsEnable);// 0x8a873f8 0x78cec87160
	void SetPassiveSkill(out const UISkillInfo[] Info);// 0x8a873f8 0x78cec87240
	void SetOperationEnable(bool bIsEnable);// 0x8a873f8 0x78cec87320
	void SetOneSkillEnable(bool bIsEnable);// 0x8a873f8 0x78cec83a40
	void SetMapEnable(bool bIsEnable);// 0x8a873f8 0x78cec83b20
	void SetMainInterfaceState(bool State);// 0x8a873f8 0x78cec83c00
	void SetLockEnable(bool bIsEnable);// 0x8a873f8 0x78cec83ce0
	void SetLifeInfoState(bool State);// 0x8a873f8 0x78cec83dc0
	void SetKiteState(bool new_state);// 0x8a873f8 0x78cec83ea0
	void SetKillNumInfoEnable(bool bIsEnable);// 0x8a873f8 0x78cec83f80
	void SetKeepActionTime(float current_time);// 0x8a873f8 0x78cec84060
	void SetJumpEnable(bool bIsEnable);// 0x8a873f8 0x78cec84140
	void SetJoystickEnable(bool bIsEnable);// 0x8a873f8 0x78cec84220
	void SetItemHotKey(int index, PaperSprite* icon, int Number);// 0x8a873f8 0x78cec84300
	void SetItem(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon);// 0x83b6ec0 0x78cec843e0
	void SetIsThrowSkillVisible(bool bIsThrowSkillVisible);// 0x8a873f8 0x78cec844c0
	void SetIsSpring(bool bNewIsSpring);// 0x8a873f8 0x78cec845a0
	void SetIsRangeSkillVisible(bool bIsRangeSkillVisible);// 0x8a873f8 0x78cec84680
	void SetHorseState(bool new_state);// 0x8a873f8 0x78cec84760
	void SetHorseEnable(bool bIsEnable);// 0x8a873f8 0x78cec84840
	void SetHatDurable(int Durable);// 0x8a873f8 0x78cec84920
	void SetGeneralState(bool State);// 0x8a873f8 0x78cec84a00
	void SetGeneralSkillEnable(bool bIsEnable);// 0x8a873f8 0x78cec84ae0
	void SetGeneralInfo(PaperSprite* icon, int ID, float max_cd);// 0x8a873f8 0x78cec84bc0
	void SetGameCountDownTime(float Time);// 0x8a873f8 0x78cec84ca0
	void SetFreeViewEnable(bool bIsEnable);// 0x8a873f8 0x78cec84d80
	void SetExplosionEnable(bool bIsEnable);// 0x8a873f8 0x78cec84e60
	void SetDropItemEnable(bool bIsEnable);// 0x8a873f8 0x78cec84f40
	void SetDodgeEnable(bool bIsEnable);// 0x8a873f8 0x78cec85020
	void SetDamageCircleWaitingTime(float Time);// 0x8a873f8 0x78cec85100
	void SetDamageCircleState(enum State);// 0x8a873f8 0x78cec851e0
	void SetDamageCircleShringkingTime(float CurrentTime, float alltime);// 0x8a873f8 0x78cec852c0
	void SetCountDownEnable(bool bIsEnable);// 0x8a873f8 0x78cec853a0
	void SetCheckSoundSkillState(bool State);// 0x8a873f8 0x78cec85480
	void SetChangeWeaponEnable(bool bIsEnable);// 0x8a873f8 0x78cec85560
	void SetBuff(int buffID, int numberoflayer, float Time, PaperSprite* icon, float maxCD);// 0x8a873f8 0x78cec85640
	void SetBlockEnable(bool bIsEnable);// 0x8a873f8 0x78cec81d60
	void SetBatteryPercent(float percent);// 0x8a873f8 0x78cec81e40
	void SetBagLevel(int Level);// 0x8a873f8 0x78cec81f20
	void SetBagEnable(bool bIsEnable);// 0x8a873f8 0x78cec82000
	void SetAutoRunEnable(bool bIsEnable);// 0x8a873f8 0x78cec820e0
	void SetAutoPickEnable(bool bIsEnable);// 0x8a873f8 0x78cec821c0
	void SetAttackEnable(bool bIsEnable);// 0x8a873f8 0x78cec822a0
	void SetArmorEnable(bool bIsEnable);// 0x8a873f8 0x78cec82380
	void SetArmorDurable(int Durable);// 0x8a873f8 0x78cec82460
	void SetActiveSkill(out const UISkillInfo[] Info);// 0x8a873f8 0x78cec82540
	void SetActionEnable(bool bIsEnable);// 0x8a873f8 0x78cec82620
	void ResetLanguage();// 0x8a873f8 0x78cec82700
	void ResetCheckRangeThrowSkillIconState();// 0x8a873f8 0x78cec827e0
	void ReportVoiceResponse(int Value);// 0x8a873f8 0x78cec828c0
	void RemoveWeaponState(int weaponindex);// 0x8a873f8 0x78cec829a0
	void RemoveSound(int ID);// 0x8a873f8 0x78cec82a80
	void RemoveBuff(int buffID);// 0x8a873f8 0x78cec82b60
	void ReLoadConfigShow();// 0x8a873f8 0x78cec82c40
	void RangeAttack();// 0x83b6b20 0x78cec82d20
	void PlayerUnLockToOther();// 0x8a873f8 0x78cec82e00
	void PlayerTalk(int player_id, bool chatting);// 0x8a873f8 0x78cec82ee0
	void PlayerRebirthUpdateUI();// 0x8a873f8 0x78cec82fc0
	void PlayerLockToOther();// 0x8a873f8 0x78cec830a0
	void PlayerInsideCircle(bool inside);// 0x8a873f8 0x78cec83180
	void PlayerInitHorseInfoUI(int horse_skin_id, float horse_cd, float cur_cd);// 0x8a873f8 0x78cec83260
	void PlayerCallHorseFinishedUI();// 0x8a873f8 0x78cec83340
	void PickUpOverWeight();// 0x8a873f8 0x78cec83420
	void PickGetItem(bool State, PaperSprite* Texture, int Level, bool Learned);// 0x8a873f8 0x78cec83500
	void OnVisionPlayerIDUpdate();// 0x8a873f8 0x78cec835e0
	void OnSpawnMissile();// 0x8a873f8 0x78cec836c0
	void OnPlayerGameStateUpdate();// 0x8a873f8 0x78cec837a0
	void OnPlaneLandedUpdate();// 0x8a873f8 0x78cec83880
	void OnPlaneJumpedUpdate();// 0x8a873f8 0x78cec83960
	void OnItemChanged();// 0x83b69b4 0x78cec80080
	void OnHorseRideStateUpdate();// 0x8a873f8 0x78cec80160
	void OnFollowPlayerIDUpdate();// 0x8a873f8 0x78cec80240
	void OnDragToBag(enum sbagtype, int index, int Num, enum tbagtype, bool isbreakbuttondown);// 0x8a873f8 0x78cec80320
	void OnCurrentWeaponUpdate();// 0x8a873f8 0x78cec80400
	void OnCanOpenParachuteUpdate();// 0x8a873f8 0x78cec804e0
	void OnCanJumpPlaneUpdate();// 0x8a873f8 0x78cec805c0
	void NormalAttack(bool press);// 0x83b6a70 0x78cec806a0
	void MissileHitTarget();// 0x8a873f8 0x78cec80780
	void LockCD(bool lock, out const int64[] skills);// 0x8a873f8 0x78cec80860
	bool IsInitTeamPlayer(int PlayerID);// 0x8a873f8 0x78cec80940
	void InitTeamPlayer(int PlayerID, FString Name, int index, int teammode);// 0x8a873f8 0x78cec80a20
	void InitCheckSoundSkill(int skill_id, PaperSprite* icon, float max_cd);// 0x8a873f8 0x78cec80b00
	void InitCheckSound();// 0x83b6eac 0x78cec80be0
	void Init();// 0x8a873f8 0x78cec80cc0
	void HideOxygen();// 0x8a873f8 0x78cec80da0
	void HideMapPanel();// 0x8a873f8 0x78cec80e80
	void HideMainInterfaceUI();// 0x8a873f8 0x78cec80f60
	void HideInteractive();// 0x8a873f8 0x78cec81040
	void HideGuideWidget(enum BindWidgetType);// 0x8a873f8 0x78cec81120
	void HideGameCountDownTime();// 0x8a873f8 0x78cec81200
	void HideDamageCircle();// 0x8a873f8 0x78cec812e0
	PaperSprite* GetWeaponStateTexture(int ID);// 0x83b6b34 0x78cec813c0
	bool GetWeaponShowState();// 0x83b67f0 0x78cec814a0
	void GetSlotItemInfo(enum bagtype, int index, out UIItemInfo slotiteminfo);// 0x83b6c8c 0x78cec81580
	int GetPostColorType();// 0x83b6784 0x78cec81660
	CanUsedRangeWeaponInfo GetOneThrowWeapon();// 0x83b6c0c 0x78cec81740
	CanUsedRangeWeaponInfo GetOneRangeWeapon();// 0x83b6c4c 0x78cec81820
	bool GetIsShowEyclopdia(FString Level);// 0x83b6dec 0x78cec81900
	bool GetGeneralState();// 0x8a873f8 0x78cec819e0
	bool GetDressShowState();// 0x83b67b8 0x78cec81ac0
	Vector2D GetCrosshairScreenPos();// 0x8a873f8 0x78cec81ba0
	void GameStart();// 0x8a873f8 0x78cec81c80
	void EndKeepAction();// 0x8a873f8 0x78cebfe780
	void DestroyTrainMainUI();// 0x8a873f8 0x78cebfe860
	void DestroyGuidePanel();// 0x8a873f8 0x78cebfe940
	void DeleteTeamPlayerMarkState(int Num);// 0x8a873f8 0x78cebfea20
	void CreateTrainMainUI();// 0x83b68f8 0x78cebfeb00
	void CreateGuideUI();// 0x83b6770 0x78cebfebe0
	void CloseTeachingMission();// 0x8a873f8 0x78cebfecc0
	void ClearTeamPlayerName(int index);// 0x8a873f8 0x78cebfeda0
	void ClearSkillHotKey(int index);// 0x8a873f8 0x78cebfee80
	void ClearItemHotKey(int index);// 0x8a873f8 0x78cebfef60
	void ClearBuffs();// 0x8a873f8 0x78cebff040
	void ChooseWin();// 0x83b68e4 0x78cebff120
	void CheckRangeThrowSkillIconState();// 0x8a873f8 0x78cebff200
	bool CheckIgnoreZeroTimerMap();// 0x83b6828 0x78cebff2e0
	void ChangeThrowWeapon();// 0x83b6be4 0x78cebff3c0
	void ChangeRangeWeapon();// 0x83b6bf8 0x78cebff4a0
	void ChangeCurrentWeapon(int weaponindex);// 0x8a873f8 0x78cebff580
	void CanNotShooter();// 0x8a873f8 0x78cebff660
	void CanNotEquipItem();// 0x8a873f8 0x78cebff740
	void BP_Main_GameReady();// 0x8a873f8 0x78cebff820
	void BlueprintCloseSubWidget(enum Type);// 0x8a873f8 0x78cebff900
	void BeginKeepUseItemAction(enum Type, float actiontime);// 0x8a873f8 0x78cebff9e0
	void BeginKeepInterSceneAction(enum Type, float actiontime);// 0x8a873f8 0x78cebffac0
	void BeginKeepInterActorAction(enum Type, float actiontime);// 0x8a873f8 0x78cebffba0
	void BeginKeepAction(float actiontime);// 0x8a873f8 0x78cebffc80
	void BagLevelOverWeight();// 0x8a873f8 0x78cebffd60
	void AppendTipMessage(enum TipMessageType, FString Content);// 0x8a873f8 0x78cebffe40
	void AppendTeamMessage(FString TeammateName, FString OtherName, enum TeamMessageType, enum CauseDyingType, int causeID);// 0x8a873f8 0x78cebfff20
	void AppendSandstormMessage(float WaitTime, bool bIsForceShow);// 0x8a873f8 0x78cebfcaa0
	void AppendPickedMessage(int PickedItemId);// 0x8a873f8 0x78cebfcb80
	void AppendLearnedMessage(int LearnedItemId);// 0x8a873f8 0x78cebfcc60
	void AppendKnockOutMessage(FString PlayerIconPath, FString DeadName, FString DeadIconPath);// 0x8a873f8 0x78cebfcd40
	void AppendKillInfo(FString attack_player_name, FString dead_player_name, out const int cause_id, enum reason);// 0x8a873f8 0x78cebfce20
	void AppendKilledMessage(FString PlayerIconPath, FString KillerName, FString KillerIconPath);// 0x8a873f8 0x78cebfcf00
	void AppendGlobalMessage(enum GlobalMessageType, FString Content);// 0x8a873f8 0x78cebfcfe0
	void AltarUpdateNum(int ID, int Num);// 0x8a873f8 0x78cebfd0c0
	void AltarInitTag(int ID, Vector Location, int Num);// 0x8a873f8 0x78cebfd1a0
	void ActiveComplain();// 0x8a873f8 0x78cebfd280

--------------------------------
Class: CrosshairLockedInfo
	int CrosshairIndex;//[Offset: 0x0, Size: 0x4] 0x78cf570b80
	int ID;//[Offset: 0x4, Size: 0x4] 0x78cf570c00
	Vector Location;//[Offset: 0x8, Size: 0xc] 0x78cf570c80

--------------------------------
Class: UISkillInfo
	bool isskillgroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefe4e80
	int id_;//[Offset: 0x4, Size: 0x4] 0x78cefe4f00
	int weapontype_;//[Offset: 0x8, Size: 0x4] 0x78cefe4f80
	int skilltype_;//[Offset: 0xc, Size: 0x4] 0x78cefe5000
	int skillprop_;//[Offset: 0x10, Size: 0x4] 0x78cefe5080
	FString name_;//[Offset: 0x18, Size: 0x10] 0x78cefe5100
	FString description_;//[Offset: 0x28, Size: 0x10] 0x78cefe5180
	int Level;//[Offset: 0x38, Size: 0x4] 0x78cefe5200
	FString skillicon_;//[Offset: 0x40, Size: 0x10] 0x78cefe5280
	FString[] skilleffectsicon_;//[Offset: 0x50, Size: 0x10] 0x78cefd2d60
	int[] skilleffectstype_;//[Offset: 0x60, Size: 0x10] 0x78cefd2e00
	float qiangren;//[Offset: 0x70, Size: 0x4] 0x78cefe3300
	float gangren;//[Offset: 0x74, Size: 0x4] 0x78cefe3380

--------------------------------
Class: UIItemInfo
	int itemid_;//[Offset: 0x0, Size: 0x4] 0x78cf502a80
	int type_;//[Offset: 0x4, Size: 0x4] 0x78cf502b00
	int childtype_;//[Offset: 0x8, Size: 0x4] 0x78cf502b80
	int worldid_;//[Offset: 0xc, Size: 0x4] 0x78cf502c00
	FString name_;//[Offset: 0x10, Size: 0x10] 0x78cf502c80
	FString description_;//[Offset: 0x20, Size: 0x10] 0x78cf502d00
	float weight_;//[Offset: 0x30, Size: 0x4] 0x78cf502d80
	PaperSprite* itemicon_;//[Offset: 0x38, Size: 0x8] 0x78cf502e00
	int number_;//[Offset: 0x40, Size: 0x4] 0x78cf502e80
	float attack_;//[Offset: 0x44, Size: 0x4] 0x78cf502f00
	float maxdurability_;//[Offset: 0x48, Size: 0x4] 0x78cf502f80
	int currentdurability_;//[Offset: 0x4c, Size: 0x4] 0x78cf503000
	float breakvalue_;//[Offset: 0x50, Size: 0x4] 0x78cf503080
	float bebreakvalue_;//[Offset: 0x54, Size: 0x4] 0x78cf503100
	float speed_;//[Offset: 0x58, Size: 0x4] 0x78cf503180
	float range_;//[Offset: 0x5c, Size: 0x4] 0x78cf501100
	int xueren_;//[Offset: 0x60, Size: 0x4] 0x78cf501180
	int qiangren_;//[Offset: 0x64, Size: 0x4] 0x78cf501200

--------------------------------
Class: CanUsedRangeWeaponInfo
	int ItemId;//[Offset: 0x0, Size: 0x4] 0x78cefcce00
	int TypeIndex;//[Offset: 0x4, Size: 0x4] 0x78cefcce80
	bool bCanTakeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cefccf00
	PaperSprite* icon;//[Offset: 0x10, Size: 0x8] 0x78cefccf80

--------------------------------
Class: UI_MobileBag.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserWidget*[] m_SlotPool;//[Offset: 0x330, Size: 0x10] 0x78cedd1280
	<int,UserWidget*> m_UsingSlot;//[Offset: 0x340, Size: 0x50] 0x78cf15fac0
	class UserWidget* m_BagSlotTemplate;//[Offset: 0x390, Size: 0x8] 0x78cedd1320
	UniformGridPanel* m_BagGrid;//[Offset: 0x398, Size: 0x8] 0x78cedaa680
	int m_BagIndex;//[Offset: 0x3a0, Size: 0x4] 0x78cedaa700
	<UserWidget*,int> m_SlotItemIdMap;//[Offset: 0x3a8, Size: 0x50] 0x78cf15fb80
	void UpdateWeaponSkillsState(int Type);// 0x84c3084 0x78cedb45a0
	void UpdateSlotItemIdMap(UserWidget* itemUi, int itemindex);// 0x84c337c 0x78cedb4680
	void ShowItemDetail(out const UIItemInfo UIItemInfo);// 0x8a873f8 0x78cedb4760
	void SetWeight(FString maxweight, FString Weight);// 0x8a873f8 0x78cedb4840
	void SetWeaponSkillsState(int index, out const bool[] weaponskills);// 0x8a873f8 0x78cedb4920
	void SetSplitItemButton(bool isbottondown);// 0x8a873f8 0x78cedb4a00
	void SetSelectItem(UserWidget* Item);// 0x8a873f8 0x78cedb4ae0
	void SetPlayerName(FString Name);// 0x8a873f8 0x78cedb4bc0
	void SetItemHotKey(int index, PaperSprite* icon, int Number);// 0x8a873f8 0x78cedb4ca0
	void SetItem(enum bagtype, int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78cedb4d80
	void SetDurableValue(enum bag_type, int index, int armor);// 0x8a873f8 0x78cedb4e60
	void SetDragItemInfo(int itemnumber, int pickid);// 0x8a873f8 0x78cedb4f40
	void RemoveItem(enum bagtype, int index);// 0x8a873f8 0x78cedb5020
	void RefreshBagUI();// 0x84c3368 0x78cedb5100
	UserWidget* RecyclingBagSlotNode(int index);// 0x84c3470 0x78cedb51e0
	void PutItemToFirstGrid(int index);// 0x84c32c0 0x78cedb52c0
	int GetItemIndex(int ItemId);// 0x84c2fd4 0x78cedb53a0
	int GetItemBagTypeAndIndex(int ItemId, out enum bagtype);// 0x84c2ecc 0x78cedb5480
	int GetDrugSortIndex(int drugid);// 0x84c2e1c 0x78cedb5560
	UserWidget* GetBagSlotNode(int index);// 0x84c3520 0x78cedb5640
	int GetBagItemSlotIndex(UserWidget* Item);// 0x84c31dc 0x78cedb1d60
	UserWidget* GetBagItemSlot(int slotindex);// 0x84c312c 0x78cedb1e40
	int GetBagItemNum();// 0x84c328c 0x78cedb1f20
	void ClearItemHotKey(int index);// 0x8a873f8 0x78cedb2000
	void ClearInventory();// 0x8a873f8 0x78cedb20e0

--------------------------------
Class: UserSettingWidget.UserWidget.Widget.Visual.Object
	PlayerController* player_ctrl_;//[Offset: 0x260, Size: 0x8] 0x78cedeaa00
	bool save_talk_need_press_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78cedeaa80
	bool save_squat_need_press_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1] 0x78cedeab00
	bool save_walk_need_press_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1] 0x78cedeab80
	bool save_sprinting_need_press_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1] 0x78cedeac00
	bool save_lookaround_need_press_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1] 0x78cedeac80
	bool save_minimap_need_press_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1] 0x78cedead00
	delegate OnTalkModeChange_;//[Offset: 0x270, Size: 0x10] 0x78cedead80
	delegate OnAudioChannelChange_;//[Offset: 0x280, Size: 0x10] 0x78cedeae00
	delegate OnOutputVolumnChange_;//[Offset: 0x290, Size: 0x10] 0x78cedeae80
	delegate OnInputVolumnChange_;//[Offset: 0x2a0, Size: 0x10] 0x78cedeaf00
	delegate OnCharacterRenderChange_;//[Offset: 0x2b0, Size: 0x10] 0x78cedeaf80
	delegate OnPostColorChange_;//[Offset: 0x2c0, Size: 0x10] 0x78cedeb000
	delegate OnDressShowChange_;//[Offset: 0x2d0, Size: 0x10] 0x78cedeb080
	delegate OnWeaponShowChange_;//[Offset: 0x2e0, Size: 0x10] 0x78cedeb100
	void SetVoiceMode(int Mode);// 0x84dbb7c 0x78cee09ee0
	void SetVoiceMicVolume(int Volume);// 0x84dbc24 0x78cee09fc0
	void SetMicMode(int micMode);// 0x84dbad4 0x78cee0a0a0
	void SetGamma(int Value);// 0x84de1dc 0x78cee0a180
	void SaveWeaponShow(int Value);// 0x84dcdd0 0x78cee0a260
	void SaveWalkSlowHabit(int Value);// 0x84dcc18 0x78cee0a340
	void SaveWalkQuickHabit(int Value);// 0x84dcb3c 0x78cee0a420
	void SaveTotalQuality(int Quality);// 0x84de024 0x78cee0a500
	void SaveTalkMode(int Value);// 0x84dd2f8 0x78cee0a5e0
	void SaveSquatHabit(int Value);// 0x84dccf4 0x78cee0a6c0
	void SaveSoundEffectVolumn(float Value);// 0x84ddae4 0x78cee0a7a0
	void SaveSoundEffectValid(bool Value);// 0x84ddbc0 0x78cee0a880
	void SaveScreenScale(int Value);// 0x84dde6c 0x78cee0a960
	void SaveResolutionMode(int Value);// 0x84de284 0x78cee0aa40
	void SavePostColorType(int Value);// 0x84dcf88 0x78cee0ab20
	void SaveOutputVolumn(float Value);// 0x84dd598 0x78cee0ac00
	void SaveOutputValid(bool Value);// 0x84dd674 0x78cee0ace0
	void SaveMotionBlurMode(int Value);// 0x84dc8a8 0x78cee07400
	void SaveMapHabit(int Value);// 0x84dc984 0x78cee074e0
	void SaveMainSoundVolumn(float Value);// 0x84ddca8 0x78cee075c0
	void SaveMainSoundValid(bool Value);// 0x84ddd84 0x78cee076a0
	void SaveLookAroundHabit(int Value);// 0x84dca60 0x78cee07780
	void SaveLanguage(int Value);// 0x84de360 0x78cee07860
	void SaveKeyStr(FString key_name, out const InputChord Key);// 0x84dbe5c 0x78cee07940
	void SaveInterfaceVolumn(float Value);// 0x84dd920 0x78cee07a20
	void SaveInterfaceValid(bool Value);// 0x84dd9fc 0x78cee07b00
	void SaveInputVolumn(float Value);// 0x84dd3d4 0x78cee07be0
	void SaveInputValid(bool Value);// 0x84dd4b0 0x78cee07cc0
	void SaveGamma(int Gamma);// 0x84de100 0x78cee07da0
	void SaveFoliageQuality(int Quality);// 0x84ddf48 0x78cee07e80
	void SaveDressShow(int Value);// 0x84dceac 0x78cee07f60
	void SaveCharacterRender(int Value);// 0x84dd140 0x78cee08040
	void SaveCameraChangeMode(int Value);// 0x84dc7cc 0x78cee08120
	void SaveBgSoundVolumn(float Value);// 0x84dd75c 0x78cee08200
	void SaveBgSoundValid(bool Value);// 0x84dd838 0x78cee082e0
	void SaveAudioChannel(int Value);// 0x84dd21c 0x78cee083c0
	void SaveAchromatopsiaMode(int Value);// 0x84dd064 0x78cee084a0
	void ResetWindowPosition();// 0x84dba88 0x78cee08580
	int GetWeaponShow();// 0x84dce78 0x78cee08660
	int GetWalkSlowHabit();// 0x84dccc0 0x78cee08740
	int GetWalkQuickHabit();// 0x84dcbe4 0x78cee08820
	int GetTotalQuality();// 0x84de0cc 0x78cee08900
	int GetTalkMode();// 0x84dd3a0 0x78cee089e0
	int GetSquatHabit();// 0x84dcd9c 0x78cee08ac0
	float GetSoundEffectVolumn();// 0x84ddb8c 0x78cee08ba0
	bool GetSoundEffectValid();// 0x84ddc70 0x78cee08c80
	int GetScreenScale();// 0x84ddf14 0x78cee08d60
	FString GetSaveKeyStr(FString Value);// 0x84dbfec 0x78cee08e40
	int GetResolutionMode();// 0x84de32c 0x78cee08f20
	int GetPostColorType();// 0x84dd030 0x78cee09000
	float GetOutputVolumn();// 0x84dd640 0x78cee05720
	bool GetOutputValid();// 0x84dd724 0x78cee05800
	int GetMotionBlurMode();// 0x84dc950 0x78cee058e0
	int GetMapHabit();// 0x84dca2c 0x78cee059c0
	float GetMainSoundVolumn();// 0x84ddd50 0x78cee05aa0
	bool GetMainSoundValid();// 0x84dde34 0x78cee05b80
	IntPoint GetMainMonitorResolution();// 0x84dba9c 0x78cee05c60
	int GetLookAroundHabit();// 0x84dcb08 0x78cee05d40
	int GetLanguage();// 0x84de4b0 0x78cee05e20
	FString GetKeyString(out const InputChord Key);// 0x84dbccc 0x78cee05f00
	float GetInterfaceVolumn();// 0x84dd9c8 0x78cee05fe0
	bool GetInterfaceValid();// 0x84ddaac 0x78cee060c0
	float GetInputVolumn();// 0x84dd47c 0x78cee061a0
	bool GetInputValid();// 0x84dd560 0x78cee06280
	int GetGamma();// 0x84de1a8 0x78cee06360
	int GetFoliageQuality();// 0x84ddff0 0x78cee06440
	FString GetEasyKeyStr(out const InputChord Key);// 0x84dc0e8 0x78cee06520
	int GetDressShow();// 0x84dcf54 0x78cee06600
	int GetCharacterRender();// 0x84dd1e8 0x78cee066e0
	int GetCameraChangeMode();// 0x84dc874 0x78cee067c0
	float GetBgSoundVolumn();// 0x84dd804 0x78cee068a0
	bool GetBgSoundValid();// 0x84dd8e8 0x78cee06980
	int GetAudioChannel();// 0x84dd2c4 0x78cee06a60
	int GetAchromatopsiaMode();// 0x84dd10c 0x78cee06b40
	void EffectLanguage(int Value);// 0x84de408 0x78cee06c20
	void CallWeaponShow(bool Value);// 0x84dc278 0x78cee06d00
	void CallTalkMode(int Value);// 0x84dc724 0x78cee06de0
	void CallPostColor(Color Value);// 0x84dc3d8 0x78cee06ec0
	void CallOutputVolumn(float Value);// 0x84dc5d4 0x78cee06fa0
	void CallInputVolumn(float Value);// 0x84dc52c 0x78cee07080
	void CallDressShow(bool Value);// 0x84dc328 0x78cee07160
	void CallCharacterRender(bool Value);// 0x84dc47c 0x78cee07240
	void CallAudioChannel(int Value);// 0x84dc67c 0x78cee07320

--------------------------------
Class: StatisticsWidget.UserWidget.Widget.Visual.Object
	GameStatisticInfo GameStatisticInfo;//[Offset: 0x260, Size: 0x190] 0x78ced96800
	void StartAnimation();// 0x8a873f8 0x78ced89540
	void SortPlayer();// 0x84a7f64 0x78ced89620
	void SetView(Vector CameraPos, Rotator CameraRot, float BlendTime);// 0x84a7f78 0x78ced89700
	void SetReportInfo(out const FString[] Name);// 0x8a873f8 0x78ced897e0
	void SetAllPlayerData(out const SimplePlayerData[] AllPlayerDataArray);// 0x8a873f8 0x78ced898c0
	int SendComplainVideo();// 0x84a84a4 0x78ced899a0
	int SendComplain(FString player_name, out const int[] Select, FString player_text);// 0x84a84d8 0x78ced89a80
	void ReportVoiceResponse(int Value);// 0x8a873f8 0x78ced89b60
	void ReportComplete();// 0x8a873f8 0x78ced89c40
	void RecordVideo();// 0x84a8650 0x78ced89d20
	void ReConnect();// 0x84a8490 0x78ced89e00
	void OpenSummary();// 0x84a8664 0x78ced89ee0
	void Init(out const GameStatisticInfo StatisticInfo);// 0x8a873f8 0x78ced89fc0
	void GetSwordItem(PaperSprite* Texture, int Level, FString item_name);// 0x8a873f8 0x78ced8a0a0
	int GetSendedCount();// 0x84a845c 0x78ced8a180
	GameStatisticInfo GetGameStatisticInfo();// 0x84a80b4 0x78ced8a260
	int GetFCMReward(int Origin);// 0x84a83ac 0x78ced8a340
	<int,int> GetCharacterColorMap(out const int[] SkinArray, out const int[] ColorArray);// 0x84a7d68 0x78ced8a420
	void ActiveComplain();// 0x8a873f8 0x78ced8a500

--------------------------------
Class: WuXiaMiniMapWidget.UserWidget.Widget.Visual.Object
	Image* base_background_;//[Offset: 0x260, Size: 0x8] 0x78ce629d00
	Image* base_player_;//[Offset: 0x268, Size: 0x8] 0x78ce629d80
	bool b_is_player_center_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x78ce629e00
	FightAlertWidget* FightAlertWidget;//[Offset: 0x278, Size: 0x8] 0x78ce629e80
	Vector2D original_level_size_;//[Offset: 0x280, Size: 0x8] 0x78ce629f00
	Vector2D original_map_size_;//[Offset: 0x288, Size: 0x8] 0x78ce629f80
	Vector2D show_map_size_;//[Offset: 0x290, Size: 0x8] 0x78ce62a000
	Vector vector_pos;//[Offset: 0x298, Size: 0xc] 0x78ce62a080
	LinearColor Color;//[Offset: 0x2a4, Size: 0x10] 0x78ce62a100
	Vector2D[] cricle_point_1_;//[Offset: 0x2b8, Size: 0x10] 0x78cedd4020
	Vector vector_pos;//[Offset: 0x2c8, Size: 0xc] 0x78ce62a200
	LinearColor Color;//[Offset: 0x2d4, Size: 0x10] 0x78ce62a280
	Vector2D[] cricle_point_2_;//[Offset: 0x2e8, Size: 0x10] 0x78cedd40c0
	Vector center_;//[Offset: 0x2f8, Size: 0xc] 0x78ce62a380
	bool bIsBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x78ce62a400
	UserWidget* SelfMark;//[Offset: 0x308, Size: 0x8] 0x78ce62a480
	VerticalBox* Player1Panel;//[Offset: 0x310, Size: 0x8] 0x78ce62a500
	Image* DashedLineImage;//[Offset: 0x318, Size: 0x8] 0x78ce628480
	MaterialInstanceDynamic* Dashedline;//[Offset: 0x320, Size: 0x8] 0x78ce628500
	Image* BpPlayer1;//[Offset: 0x328, Size: 0x8] 0x78ce628580
	Vector CurrentDamageLocation;//[Offset: 0x330, Size: 0xc] 0x78ce628600
	Vector NextDamageLocation;//[Offset: 0x33c, Size: 0xc] 0x78ce628680
	Vector FinalDamageLocation;//[Offset: 0x348, Size: 0xc] 0x78ce628700
	DrawCircleUI* CurrentDamageDraw;//[Offset: 0x358, Size: 0x8] 0x78ce628780
	DrawCircleUI* NextDamageDraw;//[Offset: 0x360, Size: 0x8] 0x78ce628800
	DrawCircleUI* DrawCircleExtendWidget;//[Offset: 0x368, Size: 0x8] 0x78ce628880
	DrawCircleUI* FinalDamageDraw;//[Offset: 0x370, Size: 0x8] 0x78ce628900
	UserWidget* VirtualLineDraw;//[Offset: 0x378, Size: 0x8] 0x78ce628980
	Vector2D PlayerRelativeLocation;//[Offset: 0x380, Size: 0x8] 0x78ce628a00
	FoTouUI* fotou;//[Offset: 0x388, Size: 0x8] 0x78ce628a80
	Vector2D PlayerLocation2D;//[Offset: 0x390, Size: 0x8] 0x78ce628b00
	bool bIsFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1] 0x78ce628b80
	DrawFlyLineUI* DrawFlyLineUI;//[Offset: 0x3a0, Size: 0x8] 0x78ce628c00
	Overlay* PlanesUI;//[Offset: 0x3a8, Size: 0x8] 0x78ce628c80
	Image* FlyStartPointUI;//[Offset: 0x3b0, Size: 0x8] 0x78ce628d00
	Image* FlyEndPointUI;//[Offset: 0x3b8, Size: 0x8] 0x78ce628d80
	Vector FlyStart;//[Offset: 0x3c0, Size: 0xc] 0x78ce628e00
	Vector FlyEnd;//[Offset: 0x3cc, Size: 0xc] 0x78ce628e80
	MapPointBaseUI*[] players;//[Offset: 0x3d8, Size: 0x10] 0x78cedd4160
	MapPointBaseUI*[] Marks;//[Offset: 0x3e8, Size: 0x10] 0x78cedd4200
	MapPointBaseUI*[] ErYiItems;//[Offset: 0x3f8, Size: 0x10] 0x78cedd42a0
	MapPointBaseUI*[] Resources;//[Offset: 0x408, Size: 0x10] 0x78cedd4340
	MapPointBaseUI*[] BuffInfoPoint;//[Offset: 0x418, Size: 0x10] 0x78cedd43e0
	MapPointBaseUI*[] AltarList;//[Offset: 0x428, Size: 0x10] 0x78cedd4480
	MapPointBaseUI*[] WaistList;//[Offset: 0x438, Size: 0x10] 0x78cedd4520
	MapPointBaseUI*[] MarkedList;//[Offset: 0x448, Size: 0x10] 0x78cedd45c0
	<int,MapPointBaseUI*> AdDrugUIMap;//[Offset: 0x458, Size: 0x50] 0x78cee10d00
	<int,MapPointBaseUI*> FlyPointUIMap;//[Offset: 0x4a8, Size: 0x50] 0x78cee10dc0
	<int,MapPointBaseUI*> TouGongUIMap;//[Offset: 0x4f8, Size: 0x50] 0x78cee10e80
	<int,MapPointBaseUI*> MoWenUIMap;//[Offset: 0x548, Size: 0x50] 0x78cee10f40
	<int,MapPointBaseUI*> DragonRockUIMap;//[Offset: 0x598, Size: 0x50] 0x78cee11000
	<int,MapPointBaseUI*> SacrificeUIMap;//[Offset: 0x5e8, Size: 0x50] 0x78cee110c0
	<int,MapPointBaseUI*> KeyBoxUIMap;//[Offset: 0x638, Size: 0x50] 0x78cee11180
	<int,MapPointBaseUI*> ParadropUIMap;//[Offset: 0x688, Size: 0x50] 0x78cee11240
	<int,MapPointBaseUI*> SingWightMap;//[Offset: 0x6d8, Size: 0x50] 0x78cee11300
	<int,MapPointBaseUI*> TouTuoUIMap;//[Offset: 0x728, Size: 0x50] 0x78cee113c0
	MapPointBaseUI*[] EffectPointUIs;//[Offset: 0x778, Size: 0x10] 0x78cedd4660
	void WidgetTick();// 0x84eebbc 0x78ce6337a0
	void WaistPickedUp(int ID);// 0x8a873f8 0x78ce633880
	void WaistInitLoc(int ID, Vector Location, int Num);// 0x8a873f8 0x78ce633960
	void UpdateTouTuoUI(int ID, bool bActive);// 0x8a873f8 0x78ce630080
	void UpdateSacrificeUI(int ID, bool bIsBroken);// 0x8a873f8 0x78ce630160
	void UpdateResourcePoint(int ID, int TeamId);// 0x8a873f8 0x78ce630240
	void UpdatePointLocation(out const MapPointBaseUI*[] Points);// 0x8a873f8 0x78ce630320
	void UpdatePlayerRotator(int Num, float Yaw);// 0x8a873f8 0x78ce630400
	void UpdatePlayerMark3DLocation(int Num, Vector Location);// 0x8a873f8 0x78ce6304e0
	void UpdatePlayerLocation(int Num, Vector Location);// 0x8a873f8 0x78ce6305c0
	void UpdateParadropUI(int ID, bool openstate);// 0x8a873f8 0x78ce6306a0
	void UpdateMoWenUI(int ID, bool bIsOpen, bool bIsPulled);// 0x8a873f8 0x78ce630780
	void UpdateMarkLine();// 0x84eeba8 0x78ce630860
	void UpdateMarkedPlayerPos(int ID, Vector markedpos, enum Type);// 0x8a873f8 0x78ce630940
	void UpdateEffectPointInfo(out const EffectPointInfo EffectPointInfo);// 0x8a873f8 0x78ce630a20
	void UpdateDragonRockUI(int ID, bool bShow, bool bOpen);// 0x8a873f8 0x78ce630b00
	void UpdateAdDrugUI(int ID, bool bIsExisted);// 0x8a873f8 0x78ce630be0
	void StartFly(out const Vector Start, out const Vector End);// 0x8a873f8 0x78ce630cc0
	void SetBasebackGround();// 0x84ef028 0x78ce630da0
	void SetAllMaskUIVisible(bool bIsVisible);// 0x8a873f8 0x78ce630e80
	void RemoveMarkedPlayer(int ID, enum Type);// 0x8a873f8 0x78ce630f60
	void RemoveActorLocation(int ID);// 0x8a873f8 0x78ce631040
	void PrepareForDrawing();// 0x84ef03c 0x78ce631120
	void InitTouTuoUI(int ID, Vector Location, bool bIsInCave);// 0x8a873f8 0x78ce631200
	void InitTouGongUI(int ID, Vector Location, bool bIsInCave);// 0x8a873f8 0x78ce6312e0
	void InitTeamPlayer(int PlayerID, FString Name, int index, int teammode);// 0x8a873f8 0x78ce6313c0
	void InitSacrificeUI(int ID, Vector Location);// 0x8a873f8 0x78ce6314a0
	void InitResourcePoint(int ID, out const Vector Location);// 0x8a873f8 0x78ce631580
	void InitParadropUI(int ID, Vector Location, bool openstate);// 0x8a873f8 0x78ce631660
	void InitMoWenUI(int ID, Vector Location, float WaitTime);// 0x8a873f8 0x78ce631740
	void InitKeyBoxUI(int ID, Vector Location, bool bIsInCave);// 0x8a873f8 0x78ce631820
	void InitFlyPointUI(int ID, Vector Location);// 0x8a873f8 0x78ce631900
	void InitDragonRockUI(int ID, Vector Location);// 0x8a873f8 0x78ce6319e0
	void InitAdDrugUI(int ID, Vector Location, int SortPriority, bool bIsInCave);// 0x8a873f8 0x78ce631ac0
	void Init(Vector2D original_level_size, Vector2D original_map_size, Vector2D show_map_size, Vector Center, Texture2D* chinese_map, Texture2D* english_map, bool can_mark);// 0x8a873f8 0x78ce631ba0
	Vector2D GetPositionByVector3(Vector Location);// 0x84eed1c 0x78ce631c80
	Vector GetPosition3D(Vector2D Location);// 0x84eec38 0x78cee0e780
	Vector2D GetPlayerPositionInMiniMap();// 0x84eece8 0x78cee0e860
	Vector2D GetPlayerPosition();// 0x84eedcc 0x78cee0e940
	float GetPlaneRotatorYaw();// 0x84eebd0 0x78cee0ea20
	Vector2D GetPlanePosition();// 0x84eec04 0x78cee0eb00
	void ForeachBuffInfoMap(const <int,BuffPointInfo> BuffInfos);// 0x84eee14 0x78cee0ebe0
	void EndFly();// 0x8a873f8 0x78cee0ecc0
	void DeleteTeamPlayerMarkState(int Num);// 0x8a873f8 0x78cee0eda0
	void ClearTeamPlayer(int index);// 0x8a873f8 0x78cee0ee80
	void CheckActorLocation(int ID, out const Vector Location);// 0x8a873f8 0x78cee0ef60
	void CallDrawCricle();// 0x84eee00 0x78cee0f040
	void BuffInfoMapElement(const int Key, const BuffPointInfo Value);// 0x8a873f8 0x78cee0f120
	void AltarUpdateNum(int ID, int Num);// 0x8a873f8 0x78cee0f200
	void AltarInitTag(int ID, Vector Location, int Num);// 0x8a873f8 0x78cee0f2e0

--------------------------------
Class: MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Vector Position;//[Offset: 0x330, Size: 0xc] 0x78cec96b00

--------------------------------
Class: FightAlertWidget.UserWidget.Widget.Visual.Object
	int MaxCount;//[Offset: 0x260, Size: 0x4] 0x78cebe4600
	float RefreshTime;//[Offset: 0x264, Size: 0x4] 0x78cebe4680
	float JoinInteractTime;//[Offset: 0x268, Size: 0x4] 0x78cebe4700
	float DelayTime;//[Offset: 0x26c, Size: 0x4] 0x78cebe4780
	float Radius;//[Offset: 0x270, Size: 0x4] 0x78cebe4800
	void SetOriginPos(Vector2D OriginPos);// 0x83735d0 0x78cebdb4c0
	void HideFlat(int ControlIndex);// 0x83734e0 0x78cebdb5a0
	Vector2D GetOriginPos();// 0x837359c 0x78cebdb680
	void ControlAnimHide(int IndexControl);// 0x8a873f8 0x78cebdb760
	void ClearFlat();// 0x8373588 0x78cebdb840
	void BeAttacked(int64 AttackId, int64 skillid, float Angle, Vector AttackPos, Vector SelfPos);// 0x8373318 0x78cebdb920

--------------------------------
Class: DrawCircleUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void Init(WuXiaMiniMapWidget* Parent);// 0x8a873f8 0x78cebdc640

--------------------------------
Class: FoTouUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Vector Loc;//[Offset: 0x330, Size: 0xc] 0x78cebe5f00

--------------------------------
Class: DrawFlyLineUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	bool bIsFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78cebe3d80
	Vector2D Start;//[Offset: 0x334, Size: 0x8] 0x78cebe3e00
	Vector2D Mid;//[Offset: 0x33c, Size: 0x8] 0x78cebe3e80
	Vector2D End;//[Offset: 0x344, Size: 0x8] 0x78cebe3f00
	void StartDraw();// 0x8a873f8 0x78cebdc2c0
	void MidDraw(Vector2D MidPos);// 0x8a873f8 0x78cebdc3a0
	void EndDraw();// 0x8a873f8 0x78cebdc480
	void Draw(Vector2D startPos, Vector2D EndPos);// 0x8a873f8 0x78cebdc560

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0xa190318 0x78ce7c6d00

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78ce851500
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78ce851580
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78ce851600
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa190994 0x78ce7c6a60
	void SetPadding(Margin InPadding);// 0xa190ae4 0x78ce7c6b40
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa190a3c 0x78ce7c6c20

--------------------------------
Class: NewGuideUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	MainGameUI* MainGameUI;//[Offset: 0x330, Size: 0x8] 0x78cec9cb00
	enum curType;//[Offset: 0x338, Size: 0x1] 0x78cebccd60
	GuideData curData;//[Offset: 0x340, Size: 0x18] 0x78cec9cc00
	enum[] guide_types;//[Offset: 0x358, Size: 0x10] 0x78cebca560
	GuideData[] guide_datas;//[Offset: 0x368, Size: 0x10] 0x78cebca600
	FString guide_start_time;//[Offset: 0x378, Size: 0x10] 0x78cec9cd80
	<int,NewGuideData> guidedata_map_;//[Offset: 0x388, Size: 0x50] 0x78cf15b200
	FString Section_;//[Offset: 0x3d8, Size: 0x10] 0x78cec9cf00
	void TryTrigGuide(enum Type);// 0x83d3fa4 0x78ceca36c0
	void TryFinishGuide(enum Type);// 0x83d3efc 0x78ceca37a0
	void StartGuide(enum Type);// 0x8a873f8 0x78ceca3880
	void InitGuideData();// 0x83d404c 0x78ceca3960
	void GuideInterClosed();// 0x8a873f8 0x78ceca0080
	void CompeleteCurGuide();// 0x83d4060 0x78ceca0160
	void CloseGuide(enum Type);// 0x8a873f8 0x78ceca0240
	bool CheckTopGuide();// 0x83d4074 0x78ceca0320
	bool CheckGuideCondition(enum Type);// 0x8a873f8 0x78ceca0400
	void AfterAddGuideType();// 0x8a873f8 0x78ceca04e0
	void AddGuideType(enum Type, out const GuideData Data);// 0x83d40ac 0x78ceca05c0

--------------------------------
Class: GuideData
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefcae00
	PaperSprite* SpriteIcon;//[Offset: 0x8, Size: 0x8] 0x78cefcae80
	Texture2D* ImgIcon;//[Offset: 0x10, Size: 0x8] 0x78cefcaf00

--------------------------------
Class: NewGuideData
	enum guide_type_;//[Offset: 0x0, Size: 0x1] 0x78cefd1e60
	bool guide_finished_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cefcac00
	int guide_aim_;//[Offset: 0x4, Size: 0x4] 0x78cefcac80
	int guide_pro_;//[Offset: 0x8, Size: 0x4] 0x78cefcad00
	int guide_tiptype_;//[Offset: 0xc, Size: 0x4] 0x78cefcad80

--------------------------------
Class: TrainOutlineUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	MainGameUI* MainGameUI;//[Offset: 0x330, Size: 0x8] 0x78ceda8600

--------------------------------
Class: PickBagUI.UserWidget.Widget.Visual.Object
	bool GetIsOpened();// 0x8a873f8 0x78cecf2000
	void BP_UpdateItem(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon);// 0x8a873f8 0x78cecf20e0

--------------------------------
Class: WuXiaXGameInstance.GameInstance.Object
	Actor* sdkLoginActor;//[Offset: 0x1a8, Size: 0x8] 0x78cf5dbb00
	int HotUpdateVersion;//[Offset: 0x1b0, Size: 0x4] 0x78cf5dbb80
	int CurRank;//[Offset: 0x1160, Size: 0x4] 0x78cf5dbc00
	int UpRank;//[Offset: 0x1164, Size: 0x4] 0x78cf5dbc80
	bool IsTaskAutoLineUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1169, Size: 0x1] 0x78cf5dbd00
	AIAutoRunHandle* AIAutoPtr;//[Offset: 0x1170, Size: 0x8] 0x78cf5dbd80
	int OnlineTotalTime;//[Offset: 0x1178, Size: 0x4] 0x78cf5dbe00
	<int,int> absolute_item_map_;//[Offset: 0x1180, Size: 0x50] 0x78cf5e0940
	enum current_game_state_;//[Offset: 0x11d0, Size: 0x1] 0x78cf56dbc0
	bool game_fight_started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d1, Size: 0x1] 0x78cf5dc000
	<int,PlayModeTime> play_mode_end_time_;//[Offset: 0x11e8, Size: 0x50] 0x78cf5e0a00
	<int,PlayModeTime> play_mode_start_time_;//[Offset: 0x1238, Size: 0x50] 0x78cf5e0c40
	<int,PlayModeState> play_mode_state_;//[Offset: 0x1288, Size: 0x50] 0x78cf5e0e80
	FString client_connect_ip_;//[Offset: 0x12d8, Size: 0x10] 0x78cf5dc580
	FString client_steam_connect_ip_;//[Offset: 0x12e8, Size: 0x10] 0x78cf5dc600
	FString server_connect_ip_;//[Offset: 0x12f8, Size: 0x10] 0x78cf5da580
	int client_connect_port_;//[Offset: 0x1308, Size: 0x4] 0x78cf5da600
	FString chat_connect_ip_;//[Offset: 0x1310, Size: 0x10] 0x78cf5da680
	int chat_connect_port_;//[Offset: 0x1320, Size: 0x4] 0x78cf5da700
	FString complain_connect_ip_;//[Offset: 0x1328, Size: 0x10] 0x78cf5da780
	int complain_connect_port_;//[Offset: 0x1338, Size: 0x4] 0x78cf5da800
	float load_mesh_dt;//[Offset: 0x133c, Size: 0x4] 0x78cf5da880
	bool load_mesh_flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1340, Size: 0x1] 0x78cf5da900
	bool bIsAIMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1341, Size: 0x1] 0x78cf5da980
	int TestAIType;//[Offset: 0x1344, Size: 0x4] 0x78cf5daa00
	bool bTestSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1348, Size: 0x1] 0x78cf5daa80
	bool bTestMergeSkeletalMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1349, Size: 0x1] 0x78cf5dab00
	FString AntiaddictionStr;//[Offset: 0x1350, Size: 0x10] 0x78cf5dab80
	int server_connect_port_;//[Offset: 0x1360, Size: 0x4] 0x78cf5dac00
	FString gateway_connect_ip_;//[Offset: 0x1368, Size: 0x10] 0x78cf5dac80
	int gateway_connect_port_;//[Offset: 0x1378, Size: 0x4] 0x78cf5dad00
	FString player_name_;//[Offset: 0x1380, Size: 0x10] 0x78cf5dad80
	FString character_name_;//[Offset: 0x1390, Size: 0x10] 0x78cf5dae00
	FString user_name_;//[Offset: 0x13a0, Size: 0x10] 0x78cf5dae80
	FString password_;//[Offset: 0x13b0, Size: 0x10] 0x78cf5daf00
	FString device_id_;//[Offset: 0x13c0, Size: 0x10] 0x78cf5daf80
	FString user_antiaddictionkit_name_;//[Offset: 0x13d0, Size: 0x10] 0x78cf5db000
	FString user_antiaddictionkit_idcard_;//[Offset: 0x13e0, Size: 0x10] 0x78cf5db080
	int64 login_gateway_session_id_;//[Offset: 0x13f0, Size: 0x8] 0x78cf5db100
	FString login_gateway_passwd_;//[Offset: 0x13f8, Size: 0x10] 0x78cf5db180
	bool is_valid_game_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1408, Size: 0x1] 0x78cf5db200
	int pingtai_type_;//[Offset: 0x140c, Size: 0x4] 0x78cf5db280
	FString wechat_openid_;//[Offset: 0x1410, Size: 0x10] 0x78cf5db300
	FString wechat_access_token_;//[Offset: 0x1420, Size: 0x10] 0x78cf5db380
	FString wechat_refresh_token_;//[Offset: 0x1430, Size: 0x10] 0x78cf5db400
	<int,bool> UserRechargeState;//[Offset: 0x1440, Size: 0x50] 0x78cf5e1000
	FString dedicated_server_ip_;//[Offset: 0x1490, Size: 0x10] 0x78cf5db580
	int dedicated_server_port_;//[Offset: 0x14a0, Size: 0x4] 0x78cf5d9500
	FString dedicated_server_password_;//[Offset: 0x14a8, Size: 0x10] 0x78cf5d9580
	bool has_login_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b8, Size: 0x1] 0x78cf5d9600
	bool has_chat_login_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b9, Size: 0x1] 0x78cf5d9680
	<enum,ChatCellInfoArr> chat_buffer_map;//[Offset: 0x14c0, Size: 0x50] 0x78cf5e10c0
	<enum,ChatFriendInfo> chat_friend_map;//[Offset: 0x1510, Size: 0x50] 0x78cf5e1240
	enum fcm_state_;//[Offset: 0x1560, Size: 0x1] 0x78cf56de40
	FString AntiaddictionToken;//[Offset: 0x1570, Size: 0x10] 0x78cf5d9a00
	bool AntiaddictionIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1580, Size: 0x1] 0x78cf5d9a80
	int client_player_id_;//[Offset: 0x1584, Size: 0x4] 0x78cf5d9b00
	bool client_module_state;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1588, Size: 0x1] 0x78cf5d9b80
	enum grt_;//[Offset: 0x1589, Size: 0x1] 0x78cf56dee0
	bool need_guide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158a, Size: 0x1] 0x78cf5d9c80
	bool guide_show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158b, Size: 0x1] 0x78cf5d9d00
	bool need_newguide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158c, Size: 0x1] 0x78cf5d9d80
	FString cur_loading_img_;//[Offset: 0x1590, Size: 0x10] 0x78cf5d9e00
	FString[] reports_;//[Offset: 0x15a0, Size: 0x10] 0x78cf56df80
	int killerID;//[Offset: 0x15b0, Size: 0x4] 0x78cf5d9f00
	FString kill_player_;//[Offset: 0x15b8, Size: 0x10] 0x78cf5d9f80
	int64 client_session_id_;//[Offset: 0x15c8, Size: 0x8] 0x78cf5da000
	enum current_sex_;//[Offset: 0x15d0, Size: 0x1] 0x78cf56e020
	int game_fight_delay_time_;//[Offset: 0x15d4, Size: 0x4] 0x78cf5da100
	int game_login_delay_time_;//[Offset: 0x15d8, Size: 0x4] 0x78cf5da180
	int game_mode_accept_max_time_;//[Offset: 0x15dc, Size: 0x4] 0x78cf5da200
	int train_each_time_;//[Offset: 0x15e0, Size: 0x4] 0x78cf5da280
	FString crash_ip_;//[Offset: 0x15e8, Size: 0x10] 0x78cf5da300
	int crash_ip_port_;//[Offset: 0x15f8, Size: 0x4] 0x78cf5da380
	FString game_node_;//[Offset: 0x1600, Size: 0x10] 0x78cf5da400
	int game_max_num_;//[Offset: 0x1610, Size: 0x4] 0x78cf5da480
	bool cf_Wetest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1614, Size: 0x1] 0x78cf5da500
	FString cf_Web_Config;//[Offset: 0x1618, Size: 0x10] 0x78cf5d8480
	FString cf_Web_Device_Statistic;//[Offset: 0x1628, Size: 0x10] 0x78cf5d8500
	FString _game_version_flag;//[Offset: 0x1638, Size: 0x10] 0x78cf5d8580
	FString version_download_url;//[Offset: 0x1648, Size: 0x10] 0x78cf5d8600
	FString _debug_devicecpu;//[Offset: 0x1658, Size: 0x10] 0x78cf5d8680
	FString _debug_device_make;//[Offset: 0x1668, Size: 0x10] 0x78cf5d8700
	FString _debug_device_mode;//[Offset: 0x1678, Size: 0x10] 0x78cf5d8780
	FString bulletin_connect_ip;//[Offset: 0x1688, Size: 0x10] 0x78cf5d8800
	bool OpenHotUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1698, Size: 0x1] 0x78cf5d8880
	FString hotupdate_type;//[Offset: 0x16a0, Size: 0x10] 0x78cf5d8900
	FString hotupdate_download_url_taptap;//[Offset: 0x16b0, Size: 0x10] 0x78cf5d8980
	FString hotupdate_download_url_official_web;//[Offset: 0x16c0, Size: 0x10] 0x78cf5d8a00
	FString official_web_package_download_url;//[Offset: 0x16d0, Size: 0x10] 0x78cf5d8a80
	enum download_source_type;//[Offset: 0x16e0, Size: 0x1] 0x78cf56e0c0
	int ver_num_;//[Offset: 0x16e4, Size: 0x4] 0x78cf5d8b80
	bool ver_cheat_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e8, Size: 0x1] 0x78cf5d8c00
	bool is_bureau_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e9, Size: 0x1] 0x78cf5d8c80
	int _bureauGameTime;//[Offset: 0x16ec, Size: 0x4] 0x78cf5d8d00
	bool bForceActivateCodeLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f0, Size: 0x1] 0x78cf5d8d80
	bool close_redeemcode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f1, Size: 0x1] 0x78cf5d8e00
	bool bCloseInfoByAudit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f2, Size: 0x1] 0x78cf5d8e80
	bool bIsAuditMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f3, Size: 0x1] 0x78cf5d8f00
	int hotupdate_ver_num;//[Offset: 0x16f4, Size: 0x4] 0x78cf5d8f80
	FString taptap_store_id;//[Offset: 0x16f8, Size: 0x10] 0x78cf5d9000
	FString ios_store_id;//[Offset: 0x1708, Size: 0x10] 0x78cf5d9080
	bool bIsOldQingGong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1718, Size: 0x1] 0x78cf5d9100
	float TempValue;//[Offset: 0x171c, Size: 0x4] 0x78cf5d9180
	bool is_showing_statistics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1722, Size: 0x1] 0x78cf5d9200
	int debug_login_type_;//[Offset: 0x1724, Size: 0x4] 0x78cf5d9280
	enum LoginType;//[Offset: 0x1728, Size: 0x1] 0x78cf56e160
	enum pay_trade;//[Offset: 0x1729, Size: 0x1] 0x78cf56e200
	bool TestNewAnimBp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172a, Size: 0x1] 0x78cf5d9400
	class AnimInstance* anim_old_version_class_;//[Offset: 0x1730, Size: 0x8] 0x78cf56e2a0
	class AnimInstance* anim_man_class_;//[Offset: 0x1738, Size: 0x8] 0x78cf56ba00
	class AnimInstance* anim_woman_class_;//[Offset: 0x1740, Size: 0x8] 0x78cf56baa0
	class AnimInstance* anim_hall_old_version_class_;//[Offset: 0x1748, Size: 0x8] 0x78cf56bb40
	class AnimInstance* anim_hall_man_class_;//[Offset: 0x1750, Size: 0x8] 0x78cf56bbe0
	class AnimInstance* anim_hall_woman_class_;//[Offset: 0x1758, Size: 0x8] 0x78cf56bc80
	SkeletalMesh* skeletal_old_version_class_;//[Offset: 0x1760, Size: 0x8] 0x78cf5d9480
	SkeletalMesh* skeletal_man_class_;//[Offset: 0x1768, Size: 0x8] 0x78cf5d7400
	SkeletalMesh* skeletal_woman_class_;//[Offset: 0x1770, Size: 0x8] 0x78cf5d7480
	AnimMontage*[] anim_man_cross;//[Offset: 0x1778, Size: 0x10] 0x78cf56bd20
	AnimMontage*[] anim_woman_cross;//[Offset: 0x1788, Size: 0x10] 0x78cf56bdc0
	FString connect_str_;//[Offset: 0x1798, Size: 0x10] 0x78cf5d7600
	float m_Jump_Map_Delay_Time;//[Offset: 0x17a8, Size: 0x4] 0x78cf5d7680
	bool IsNewSeason;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ad, Size: 0x1] 0x78cf5d7700
	bool reconnect_control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ae, Size: 0x1] 0x78cf5d7780
	bool reload_game_map;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17af, Size: 0x1] 0x78cf5d7800
	int[] item_ids_;//[Offset: 0x17b8, Size: 0x10] 0x78cf56be60
	enum language_type_;//[Offset: 0x17c8, Size: 0x1] 0x78cf56bf00
	int voice_mode_;//[Offset: 0x17cc, Size: 0x4] 0x78cf5d7980
	<int,int> goods_;//[Offset: 0x17d0, Size: 0x50] 0x78cf5e1300
	int[] server_list_;//[Offset: 0x1820, Size: 0x10] 0x78cf56bfa0
	int[] key_list_;//[Offset: 0x1830, Size: 0x10] 0x78cf56c040
	int[] new_skins_;//[Offset: 0x1840, Size: 0x10] 0x78cf56c0e0
	int save_server_id_;//[Offset: 0x1850, Size: 0x4] 0x78cf5d7c80
	int save_sort_;//[Offset: 0x1854, Size: 0x4] 0x78cf5d7d00
	int save_gamemode_;//[Offset: 0x1858, Size: 0x4] 0x78cf5d7d80
	<int,TeamPlayer> team_player;//[Offset: 0x1860, Size: 0x50] 0x78cf5e1540
	int team_player_num;//[Offset: 0x18b0, Size: 0x4] 0x78cf5d6700
	int team_master;//[Offset: 0x18b4, Size: 0x4] 0x78cf5d6780
	FString team_id;//[Offset: 0x18b8, Size: 0x10] 0x78cf5d6800
	bool is_team_master;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c8, Size: 0x1] 0x78cf5d6880
	bool is_team_ready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c9, Size: 0x1] 0x78cf5d6900
	bool is_team_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ca, Size: 0x1] 0x78cf5d6980
	FString m_GameRoomName;//[Offset: 0x18d0, Size: 0x10] 0x78cf5d6a00
	FString m_GameTeamName;//[Offset: 0x18e0, Size: 0x10] 0x78cf5d6a80
	FString m_HallTeamName;//[Offset: 0x18f0, Size: 0x10] 0x78cf5d6b00
	bool record_valid_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1910, Size: 0x1] 0x78cf5d6b80
	int[] game_maps_;//[Offset: 0x1918, Size: 0x10] 0x78cf56c2c0
	<byte,int64> activityconfig_version_list;//[Offset: 0x19e8, Size: 0x50] 0x78cf5e1600
	WuXiaXExtentionConfig m_Ext_Config;//[Offset: 0x1a60, Size: 0x68] 0x78cf5d5600
	LoadProgressManager* progress_manager_;//[Offset: 0x1ac8, Size: 0x8] 0x78cf5d5680
	SDKManager* SDKManager;//[Offset: 0x1ad0, Size: 0x8] 0x78cf5d5700
	XHttpManager* http_manager_;//[Offset: 0x1ad8, Size: 0x8] 0x78cf5d5780
	int sign_act_id;//[Offset: 0x1ae0, Size: 0x4] 0x78cf5d5800
	bool user_in_combatteam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae4, Size: 0x1] 0x78cf5d5880
	class LoadingUI* loading_class_;//[Offset: 0x1ae8, Size: 0x8] 0x78cf56c360
	<int64,class Guide> GuideClasses;//[Offset: 0x1af0, Size: 0x50] 0x78cf5e1780
	LoadingUI* LoadingUI;//[Offset: 0x1b40, Size: 0x8] 0x78cf5d5980
	PrimaryAssetLabel*[] preload_assets_;//[Offset: 0x1b48, Size: 0x10] 0x78cf56c4a0
	DeviceProfileInfo m_DeviceProfile;//[Offset: 0x1b58, Size: 0x60] 0x78cf5d6080
	<int,BagItemInfo> server_pack_map;//[Offset: 0x1bb8, Size: 0x50] 0x78cf33f7c0
	int[] sever_pack_recent;//[Offset: 0x1c08, Size: 0x10] 0x78cf56c540
	delegate OnHeadIconUpdated;//[Offset: 0x1c78, Size: 0x10] 0x78cf5d6280
	delegate OnHeadBorderUpdated;//[Offset: 0x1c88, Size: 0x10] 0x78cf5d6300
	int cur_season_id;//[Offset: 0x1d38, Size: 0x4] 0x78cf5d4280
	Widget*[] WidgetClickIntervalArray;//[Offset: 0x2240, Size: 0x10] 0x78cf56c5e0
	int[] IndexClickIntervalArray;//[Offset: 0x2250, Size: 0x10] 0x78cf56c680
	<int,HeroServerInfo> server_hero_map;//[Offset: 0x2260, Size: 0x50] 0x78cf33f880
	int server_cur_hero_id_;//[Offset: 0x22b0, Size: 0x4] 0x78cf5d4500
	int64 PlayerRankScore;//[Offset: 0x2720, Size: 0x8] 0x78cf5d4580
	int64 PlayerCreateTime;//[Offset: 0x2728, Size: 0x8] 0x78cf5d4600
	<enum,enum> ActivityStateMap;//[Offset: 0x2730, Size: 0x50] 0x78cf33f940
	ActivityStateInfo[] ActivityStateInfos;//[Offset: 0x2780, Size: 0x10] 0x78cf56c9a0
	<enum,ActivityDataInfo> ActivityDataInfoMap;//[Offset: 0x2790, Size: 0x50] 0x78cf33fb80
	bool AlreadyShowActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e0, Size: 0x1] 0x78cf5d4c00
	CombatReadinessInfo[] server_combat_readiness_map;//[Offset: 0x2838, Size: 0x10] 0x78cf56cc20
	enum LocalCombatReadinessType;//[Offset: 0x2848, Size: 0x1] 0x78cf56ccc0
	UIMailInfo[] server_mail_list;//[Offset: 0x2850, Size: 0x10] 0x78cf56cd60
	bool allow_turn_input_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2860, Size: 0x1] 0x78cf5d4e00
	int cur_newbie_id_;//[Offset: 0x28b8, Size: 0x4] 0x78cf5d4e80
	enum ShopBuyType;//[Offset: 0x28d8, Size: 0x1] 0x78cf56ce00
	enum CurAccountState;//[Offset: 0x28d9, Size: 0x1] 0x78cf56a560
	<int,AccessoryServerInfo> public_skin;//[Offset: 0x28e0, Size: 0x50] 0x78cf33fc40
	<int,AccessoryServerInfo> equipped_public_skin;//[Offset: 0x2930, Size: 0x50] 0x78cf33fd00
	int public_show_weapon_id;//[Offset: 0x2980, Size: 0x4] 0x78cf5d5200
	int public_show_remote_weapon_id;//[Offset: 0x2984, Size: 0x4] 0x78cf5d5280
	RewardInfo[] CurShopPreferenceArray;//[Offset: 0x2988, Size: 0x10] 0x78cf56a600
	FString[] FilterWords;//[Offset: 0x2998, Size: 0x10] 0x78cf56a6a0
	FString[] RegexFilterWords;//[Offset: 0x29a8, Size: 0x10] 0x78cf56a740
	WuXiaXHallSequenceMgr* HallSequenceMgr;//[Offset: 0x29b8, Size: 0x8] 0x78cf5d3380
	<int,DailyTaskInfo> server_actmap_daytask;//[Offset: 0x2ae0, Size: 0x50] 0x78cf33fdc0
	<int,ActiveBoxInfo> server_actmap_dayreward;//[Offset: 0x2b30, Size: 0x50] 0x78cf33fe80
	<int,ActiveBoxInfo> server_actmap_weekreward;//[Offset: 0x2b80, Size: 0x50] 0x78cf33ff40
	<int,PlayerLvRewardInfo> server_actmap_lvreward;//[Offset: 0x2bd0, Size: 0x50] 0x78cf33df00
	<int,CultivateNormalRewardInfo> server_actmap_culnreward;//[Offset: 0x2c20, Size: 0x50] 0x78cf33dfc0
	<int,CultivateAdvanceRewardInfo> server_actmap_culareward;//[Offset: 0x2c70, Size: 0x50] 0x78cf33e080
	<int,CultivateTaskInfo> server_actmap_culdaytask;//[Offset: 0x2cc0, Size: 0x50] 0x78cf33e140
	<int,CultivateTaskInfo> server_actmap_culweektask;//[Offset: 0x2d10, Size: 0x50] 0x78cf33e200
	<int,CultivateTaskInfo> server_actmap_culweekrewardtask;//[Offset: 0x2d60, Size: 0x50] 0x78cf33e2c0
	<int,CheckinInfo> server_actmap_sign;//[Offset: 0x2db0, Size: 0x50] 0x78cf33e440
	<int,LotteryItem> server_actmap_cullottery;//[Offset: 0x2e00, Size: 0x50] 0x78cf33e500
	<int,MallItemInfo> server_mall_itemmap;//[Offset: 0x2e50, Size: 0x50] 0x78cf33e5c0
	<int,FString> yapai_goodat_map;//[Offset: 0x30c0, Size: 0x50] 0x78cf33e680
	<int,FText> yapai_lable_map;//[Offset: 0x3110, Size: 0x50] 0x78cf33e740
	bool gamestartChenmiTishi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3160, Size: 0x1] 0x78cf5d2400
	Vector2D Selfitude;//[Offset: 0x3164, Size: 0x8] 0x78cf5d2480
	<int,QuickMsgInfo> quick_msg_map_;//[Offset: 0x3b60, Size: 0x50] 0x78cf33e8c0
	int[] default_quick_msgids;//[Offset: 0x3bb0, Size: 0x10] 0x78cf56a7e0
	LinearColor[] ConcentrateColors;//[Offset: 0x3bc0, Size: 0x10] 0x78cf56a880
	FString[] android_names_;//[Offset: 0x3bd0, Size: 0x10] 0x78cf56a920
	FString[] player_names_library_1_;//[Offset: 0x3be0, Size: 0x10] 0x78cf56a9c0
	FString[] player_names_library_2_;//[Offset: 0x3bf0, Size: 0x10] 0x78cf56aa60
	int[] color_ids_;//[Offset: 0x3c00, Size: 0x10] 0x78cf56ab00
	int[] model_ids_;//[Offset: 0x3c10, Size: 0x10] 0x78cf56aba0
	<int,DailyTaskInfo> actmap_daytask;//[Offset: 0x4590, Size: 0x50] 0x78cf33ea40
	<int,ActiveBoxInfo> actmap_dayreward;//[Offset: 0x45e0, Size: 0x50] 0x78cf33eb00
	<int,ActiveBoxInfo> actmap_weekreward;//[Offset: 0x4630, Size: 0x50] 0x78cf33ebc0
	<int,PlayerLvRewardInfo> actmap_lvreward;//[Offset: 0x4680, Size: 0x50] 0x78cf33ed40
	<int,CultivateNormalRewardInfo> actmap_culnreward;//[Offset: 0x46d0, Size: 0x50] 0x78cf33eec0
	<int,CultivateAdvanceRewardInfo> actmap_culareward;//[Offset: 0x4720, Size: 0x50] 0x78cf33f040
	<int,CultivateTaskInfo> actmap_culdaytask;//[Offset: 0x4770, Size: 0x50] 0x78cf33f100
	<int,CultivateTaskInfo> actmap_culweektask;//[Offset: 0x47c0, Size: 0x50] 0x78cf33f1c0
	<int,CultivateTaskInfo> actmap_culweekrewardtask;//[Offset: 0x4810, Size: 0x50] 0x78cf33f340
	<int64,SeasonPassWeekTaskInfo> ActMap_SeasonPassWeekTask;//[Offset: 0x4860, Size: 0x50] 0x78cf33f400
	<int,LotteryItem> actmap_cullottery;//[Offset: 0x48b0, Size: 0x50] 0x78cf33f580
	<int,MallItemInfo> mall_itemmap;//[Offset: 0x4900, Size: 0x50] 0x78cf33c640
	FText[] friend_verifies;//[Offset: 0x4950, Size: 0x10] 0x78cf56b0a0
	FText[] menter_verifies;//[Offset: 0x4960, Size: 0x10] 0x78cf56b140
	FText[] appre_verifies;//[Offset: 0x4970, Size: 0x10] 0x78cf56b1e0
	int MaxCTLv;//[Offset: 0x4ba4, Size: 0x4] 0x78cf5d0900
	int MaxUserLv;//[Offset: 0x4ba8, Size: 0x4] 0x78cf5d0980
	int MaxCulLv;//[Offset: 0x4bac, Size: 0x4] 0x78cf5d0a00
	bool is_load_montage_complete_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd0, Size: 0x1] 0x78cf5d0a80
	BaseNetHandle* net_actor_;//[Offset: 0x4bd8, Size: 0x8] 0x78cf5d0b00
	NpcManager* npc_manager_;//[Offset: 0x4be0, Size: 0x8] 0x78cf5d0b80
	Actor* chat_net_actor_;//[Offset: 0x4be8, Size: 0x8] 0x78cf5d0c00
	ActivityManager* ActivityManager;//[Offset: 0x5458, Size: 0x8] 0x78cf5d0c80
	Guide* CurrentGuide;//[Offset: 0x5460, Size: 0x8] 0x78cf5d0d00
	<FString,Texture2D*> m_TextureCache;//[Offset: 0x5838, Size: 0x50] 0x78cf33c700
	LoadAssetManager* load_asset_manager_;//[Offset: 0x5af8, Size: 0x8] 0x78cf5d0e80
	WidgetManager* widget_manager_;//[Offset: 0x5b00, Size: 0x8] 0x78cf5d0f00
	WidgetManager* widget_manager_game_;//[Offset: 0x5b08, Size: 0x8] 0x78cf5d0f80
	CharacterShowManager* character_show_manager_;//[Offset: 0x5b10, Size: 0x8] 0x78cf5d1000
	MiGuAchievementManager* MiGuAchievementManager;//[Offset: 0x5b18, Size: 0x8] 0x78cf5d1080
	MiGuAchievement[] SaveMiGuAchievement;//[Offset: 0x5b20, Size: 0x10] 0x78cf56b280
	GVoiceManager* GVoiceManager;//[Offset: 0x5b30, Size: 0x8] 0x78cf5bf980
	delegate EventCreateWidget;//[Offset: 0x5b78, Size: 0x10] 0x78cf5bfa00
	int CurChatFriendId;//[Offset: 0x5b88, Size: 0x4] 0x78cf5bfa80
	bool FriendChatOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8c, Size: 0x1] 0x78cf5bfb00
	int[] NewMsgFriendIds;//[Offset: 0x5b90, Size: 0x10] 0x78cf56b320
	bool NeedLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba0, Size: 0x1] 0x78cf5bfc00
	int CurBountyExperience;//[Offset: 0x5ba4, Size: 0x4] 0x78cf5bfc80
	BegSignRewardInfo[] BegSignInfo;//[Offset: 0x5ba8, Size: 0x10] 0x78cf56b460
	<int64,PoolInfo> BegSignPoolInfo;//[Offset: 0x5bb8, Size: 0x50] 0x78cf33ca00
	<int64,PoolTimes> GashaponPoolTime;//[Offset: 0x5c08, Size: 0x50] 0x78cf33cb80
	bool AlreadyShowFirstPay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c58, Size: 0x1] 0x78cf5bef00
	bool HasFinishFirstPay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c59, Size: 0x1] 0x78cf5bef80
	bool AlreadyShowBattleReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5a, Size: 0x1] 0x78cf5bf000
	bool HasFinishBattleReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5b, Size: 0x1] 0x78cf5bf080
	bool bHasNotifyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5c, Size: 0x1] 0x78cf5bf100
	<int,int64> DoubleItemExpiresTime;//[Offset: 0x5c60, Size: 0x50] 0x78cf33cc40
	int64 FeedbackTime;//[Offset: 0x5cb0, Size: 0x8] 0x78cf5bf280
	int EmojiOrActionId;//[Offset: 0x5cb8, Size: 0x4] 0x78cf5bf300
	int[] NeedToshowSequence;//[Offset: 0x5cd0, Size: 0x10] 0x78cf56b500
	RechargeInfo RechargeInfo;//[Offset: 0x5ce0, Size: 0x30] 0x78cf5bf400
	SkyTriggerBox* CurTopSkyTrigger;//[Offset: 0x5d18, Size: 0x8] 0x78cf5bf480
	SkyTriggerBox*[] SkyTriggerBoxArray;//[Offset: 0x5d20, Size: 0x10] 0x78cf56b5a0
	float TotalStartGradientTime;//[Offset: 0x5d30, Size: 0x4] 0x78cf5bf580
	float LastStartGradientTime;//[Offset: 0x5d34, Size: 0x4] 0x78cf5bf600
	SkyInfoUpdate StartGradientSkyInfoUpdate;//[Offset: 0x5d38, Size: 0xc] 0x78cf5bf680
	SkyInfoUpdate TargetSkyInfoUpdate;//[Offset: 0x5d44, Size: 0xc] 0x78cf5bf700
	enum SaveSkyType;//[Offset: 0x5d50, Size: 0x1] 0x78cf56b640
	SkyInfoUpdate SaveSkyInfoUpdate;//[Offset: 0x5d54, Size: 0xc] 0x78cf5bd880
	<FString,FName> HDRLevel;//[Offset: 0x5d60, Size: 0x50] 0x78cf33cdc0
	<FString,FName> LDRLevel;//[Offset: 0x5db0, Size: 0x50] 0x78cf33ce80
	LightTriggerBox* LightTriggerBox;//[Offset: 0x5e10, Size: 0x8] 0x78cf5bdb00
	class LightDebugWidget* LightDebugWidgetClass;//[Offset: 0x5e18, Size: 0x8] 0x78cf56b6e0
	LightDebugWidget* LightDebugWidget;//[Offset: 0x5e20, Size: 0x8] 0x78cf5bdb80
	bool bIsArmorOldMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e28, Size: 0x1] 0x78cf5bdc00
	SoftObjectPath[] asset_refs;//[Offset: 0x5e30, Size: 0x10] 0x78cf56b780
	<int,ChatCellInfoArr> friend_msg_map;//[Offset: 0x5e40, Size: 0x50] 0x78cf33d000
	GameStatisticInfo GameStatisticInfo;//[Offset: 0x5eb0, Size: 0x190] 0x78cf5bde80
	UltraDynamicSkyManager* SkyManager;//[Offset: 0x6040, Size: 0x8] 0x78cf5bdf00
	LuaObjectManager* LuaObjectManager;//[Offset: 0x6110, Size: 0x8] 0x78cf5bdf80
	LuaConfigTableLoader* LuaConfigTableLoader;//[Offset: 0x6118, Size: 0x8] 0x78cf5be000
	FString ShushuIp;//[Offset: 0x6130, Size: 0x10] 0x78cf5be080
	int ShushuPort;//[Offset: 0x6140, Size: 0x4] 0x78cf5be100
	bool ShushuSelfServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6144, Size: 0x1] 0x78cf5be180
	TAServer* hall_ta_server;//[Offset: 0x6148, Size: 0x8] 0x78cf5be200
	bool ResetRoundGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6150, Size: 0x1] 0x78cf5be280
	void WidgetClickIntervalTimeUp(Widget* Widget);// 0x853c79c 0x78cf5c4d80
	void UpdateUsingHead(enum Type, int ID);// 0x852add4 0x78cf5c4e60
	bool UpdateUserIconOfPlayerBaseInfo(int64 UserId, int userIcon, int userIconBox);// 0x85347e8 0x78cf5c4f40
	void UpdateTaskOnlineTime(int onlinetime);// 0x8541470 0x78cf5c5020
	void UpdateSequenceCharacterMeshMaterialColor(SkinColor Color, enum Type);// 0x8530b90 0x78cf5c5100
	void UpdateSequenceCharacterHatMesh(int HatLevel);// 0x8530c98 0x78cf5c51e0
	void UpdateRecentTeamDataVersion(int Version);// 0x8534e54 0x78cf5c52c0
	void UpdateRecentTeamData(out RecentTeamerInfo[] recentTeamerInfos);// 0x8534d58 0x78cf5c53a0
	void UpdateReceivedRewardList(int64 HeroId, out <int> list);// 0x85367c8 0x78cf5c5480
	void UpdateQuenchingData(int ID, int Num);// 0x853cbd8 0x78cf5c5560
	void UpdatePlayerUnlockSystemSet();// 0x853ec38 0x78cf5c5640
	void UpdatePlayerMeridian(int ID, int Num);// 0x853cd78 0x78cf5c1d60
	void UpdatePlayerData(enum PlayerDataType, int Num);// 0x853ecfc 0x78cf5c1e40
	void UpdatePlayerBaseInfo(out PlayerBaseInfo[] playerBaseInfos);// 0x8534930 0x78cf5c1f20
	void UpdatePersonalGameDataVersion(int64 UserId, enum teammode, int Version);// 0x853e774 0x78cf5c2000
	void UpdatePersonalGameData(int64 UserId, enum teammode, int seasonId, out const PersonalGameData PersonalGameData);// 0x853e5c8 0x78cf5c20e0
	void UpdateHeadIconRequest(int iconId);// 0x852ac7c 0x78cf5c21c0
	void UpdateHeadBorderRequest(int borderId);// 0x852abd4 0x78cf5c22a0
	void UpdateEquippedExpression(int index, int ID);// 0x8538194 0x78cf5c2380
	void UpdateEquippedAction(int index, int ID);// 0x8537f00 0x78cf5c2460
	void UpdateChatFriendInfo(enum Type, out const FriendBaseInfo[] infos);// 0x85291f4 0x78cf5c2540
	bool UpdateAllFreeHeroSet();// 0x852e208 0x78cf5c2620
	void UpdateAdvGuideHeroSkinInfo(int HeroId);// 0x852e240 0x78cf5c2700
	void UpdateActivityStateType(enum ActivityGroupType, enum ActivityStateType, int subType);// 0x8533a6c 0x78cf5c27e0
	void UpdateActivityRedPinIsShow();// 0x8533bac 0x78cf5c28c0
	void TryReconnect();// 0x8a873f8 0x78cf5c29a0
	void TaskOnlineTimeCallBack();// 0x8541518 0x78cf5c2a80
	void SwitchAccountWuXiaX(FString UName, FString UPassword, int Type);// 0x8529fd8 0x78cf5c2b60
	void StopSequence();// 0x8530f80 0x78cf5c2c40
	void StopLocalCombatReadiness();// 0x8532848 0x78cf5c2d20
	bool StopGuide(int64 GuideID);// 0x8540424 0x78cf5c2e00
	void StartShowWidget();// 0x8540870 0x78cf5c2ee0
	void StartOnlineTime();// 0x8541554 0x78cf5c2fc0
	void StartLoginTimeTimer();// 0x8527c38 0x78cf5c30a0
	void StartLocalCombatReadiness(enum Type, out const int[] AdditionalHeroID);// 0x853285c 0x78cf5c3180
	Guide* StartGuide(int64 GuideID, int NodeID);// 0x85404d8 0x78cf5c3260
	void StartDoubleItemExpiresTimer();// 0x8527c4c 0x78cf5c3340
	void StartAntiaddictionKitChildTime();// 0x85411b0 0x78cf5c3420
	void SortShopInfoTypeArray(enum ShopInfoType, out ShopItemInfo[] ShopItemInfoArray);// 0x85344e4 0x78cf5c3500
	void ShowReconnectFailed(const bool isgamefinish);// 0x8a873f8 0x78cf5c35e0
	void ShowLoadingUI();// 0x8541364 0x78cf5c36c0
	bool ShopNeedTip();// 0x853c87c 0x78cf5c37a0
	bool ShopHaveFree();// 0x853c844 0x78cf5c3880
	void SetZhanbeiManualConfirmHero(bool bCondition);// 0x852a178 0x78cf5c3960
	void SetWindowMode();// 0x8542418 0x78cf5c0080
	void SetUserSetting(enum Type, int Value);// 0x852b564 0x78cf5c0160
	void SetUserCurLevel(int Level);// 0x852c1a4 0x78cf5c0240
	void SetRainVolume(bool Active, float Volume);// 0x8527564 0x78cf5c0320
	void SetPublicSkin(out const <int,AccessoryServerInfo> skin);// 0x853147c 0x78cf5c0400
	void SetPublicShowWeaponId(const int ID);// 0x8531070 0x78cf5c04e0
	void SetPublicShowRemoteWeaponId(const int ID);// 0x8530fb0 0x78cf5c05c0
	void SetMeshShadow(SkeletalMeshComponent* Mesh);// 0x8528300 0x78cf5c06a0
	void SetMailList(UIMailInfo[] mails);// 0x8531858 0x78cf5c0780
	void SetMailInfo(UIMailInfo Info);// 0x8531734 0x78cf5c0860
	void SetLightPostExposure(int Value);// 0x853f130 0x78cf5c0940
	void SetGameStatisticInfo(out const GameStatisticInfo NewGameStatisticInfo);// 0x8527a7c 0x78cf5c0a20
	void SetEquippedPublicSkin(out const <int,AccessoryServerInfo> skin);// 0x8531130 0x78cf5c0b00
	void SetCurHeroSuitID(int heor_id, int ID);// 0x853a5a0 0x78cf5c0be0
	void SetCurHeroID(int ID);// 0x853a8bc 0x78cf5c0cc0
	void SetConfigOnlineTime(int Num);// 0x8541394 0x78cf5c0da0
	void SetCacheUserSetting(enum Type, int Value);// 0x852b3c0 0x78cf5c0e80
	void SetAllHaveExpressionList(out const int[] list);// 0x85389bc 0x78cf5c0f60
	void SetAllHaveActionList(out const int[] list);// 0x85386ec 0x78cf5c1040
	void SetAllEquippedExpressionList(out const int[] list);// 0x8538368 0x78cf5c1120
	void SetAllEquippedActionList(out const int[] list);// 0x85380d4 0x78cf5c1200
	void SetActivityTodayDontShow(bool IsTodayDontShow);// 0x8533bf8 0x78cf5c12e0
	int SendComplainVideo();// 0x85405e8 0x78cf5c13c0
	int SendComplainInfo(FString player_name, out const int[] Select, FString player_text);// 0x854061c 0x78cf5c14a0
	void SendCheckHotUpdateInfo();// 0x8542404 0x78cf5c1580
	void SelectHeroLocalCombatReadiness(int HeroId);// 0x85327a0 0x78cf5c1660
	void SaveSortMode();// 0x853f388 0x78cf5c1740
	void SaveSingleHistoryRecordVersion(const int Version);// 0x853d7b8 0x78cf5c1820
	void SaveSingleHistoryRecordData(out const HistoryRecord record);// 0x853d95c 0x78cf5c1900
	void SaveHistoryRecordDatas(out const HistoryRecord[] records);// 0x853d860 0x78cf5c19e0
	void SaveDetailHistoryRecord(FString gameId, out const DetailHistoryRecord[] detailRecords);// 0x853cfc8 0x78cf5c1ac0
	void RotateSequenceCharacter(float Offset);// 0x8530d54 0x78cf5c1ba0
	void ReturnToHall();// 0x8540884 0x78cf5c1c80
	void ResetSkinColor(int SuitId);// 0x852fd34 0x78cf5ae780
	void ResetSequenceCharacterMeshMaterialColor(enum Type);// 0x8530ae8 0x78cf5ae860
	void ResetReconnectControl();// 0x854085c 0x78cf5ae940
	void ResetGuide();// 0x8540c38 0x78cf5aea20
	void ReorderCombatReadyInfo();// 0x8532594 0x78cf5aeb00
	void RemovePackItem(int hall_item);// 0x853ef08 0x78cf5aebe0
	void RemoveOldestHistoryRecord(const int64 UserId, const int Num);// 0x853d6c4 0x78cf5aecc0
	void RemoveCurHeroEquipId(int hero_id, int ID);// 0x853a1c8 0x78cf5aeda0
	void ReleaseTsf();// 0x8540848 0x78cf5aee80
	void ReleaseAnimResources();// 0x853f34c 0x78cf5aef60
	void RegisterUIToTsf(MainLoginUI* loginUI);// 0x853ff14 0x78cf5af040
	void RefreshUserHistoryRecord(const int64 UserId);// 0x853d270 0x78cf5af120
	bool RefreshSeasonPassWeekTastStatus(int64 ID, enum Status, int progress);// 0x852d18c 0x78cf5af200
	void RefreshHeroSkinServerInfo(<int64,int64> expire_suit_time_map, <int64,int64> expire_skin_time_map, <int64,int64> skin_color_map);// 0x853be40 0x78cf5af2e0
	void RefreshHeroSkinColorServerInfo(<int64,int64> skin_color_map);// 0x853bc2c 0x78cf5af3c0
	void RefreshHeroServerInfo(HeroServerInfo[] hero_info_array);// 0x853c3a8 0x78cf5af4a0
	void RefreshCombatReadinessLockState(int64 user_id, bool lock);// 0x8532498 0x78cf5af580
	void RefreshCombatReadinessItem(out CombatReadinessInfo Info);// 0x85325a8 0x78cf5af660
	void RefreshCombatReadinessInfo(out CombatReadinessInfo[] Info);// 0x85326a8 0x78cf5af740
	void RefreshAChievementServerInfo(out const <int,DateTime> _achievementInfo);// 0x853e0e0 0x78cf5af820
	void ReconnectHideUI();// 0x8a873f8 0x78cf5af900
	void ReconnectGameServer();// 0x8540898 0x78cf5af9e0
	void ReconnectFailed();// 0x85408ac 0x78cf5afac0
	void ReConnect();// 0x85408c0 0x78cf5afba0
	bool ReadyPlayHeroSkinSequence(SkinSequenceUI* UI, int SkinId);// 0x853b084 0x78cf5afc80
	FString RandGetLoadingImage();// 0x8540b50 0x78cf5afd60
	void PlaySequence(int SuitId, bool bAllowChangeColor, delegate Event);// 0x8530e34 0x78cf5afe40
	void PlayHeroSkinSequenceDelegate(enum CurUI, int SkinId, delegate Event, bool bStopWhenReturn);// 0x853adac 0x78cf5aff20
	void PlayHeroSkinSequence(enum CurUI, int SkinId, bool bStopWhenReturn);// 0x853af40 0x78cf5acaa0
	bool PlayerIsHave(int hero_id, int suit_id, int skin_id, int item_id);// 0x8532968 0x78cf5acb80
	void PlaybackSequence();// 0x8530ad4 0x78cf5acc60
	void PauseOnlineTime();// 0x8541540 0x78cf5acd40
	void OutPutPlayerAnimus();// 0x853ff00 0x78cf5ace20
	void OpenGame();// 0x854108c 0x78cf5acfe0
	void OnSequenceToIdleState();// 0x8530ac0 0x78cf5ad0c0
	void NetDebugPing();// 0x8540c4c 0x78cf5ad1a0
	void NetDebugLoginUser(FString User, FString PassWord);// 0x8540c60 0x78cf5ad280
	void NetDebugConnectIp(FString Ip, int Port);// 0x8540dfc 0x78cf5ad360
	void Net_actor(BaseNetHandle* val);// 0x85409e8 0x78cf5ad440
	bool LostConnect(out bool isreconnecting);// 0x854090c 0x78cf5ad520
	void LogoutWuXiaX();// 0x852a130 0x78cf5ad600
	void LoadSortMode();// 0x853f374 0x78cf5ad6e0
	void LoadRecentTeamData();// 0x8534f18 0x78cf5ad7c0
	void LoadPersonalGameDataVersion();// 0x853e9b0 0x78cf5ad8a0
	void LoadPersonalGameData();// 0x853e9c4 0x78cf5ad980
	void LoadLocalPersonalData();// 0x853e9d8 0x78cf5ada60
	void LoadHistoryRecordData();// 0x853da30 0x78cf5adb40
	void LoadHDRAndLDRLevel();// 0x8a873f8 0x78cf5adc20
	void LoadAnimResources();// 0x853f360 0x78cf5add00
	void K2_CreateLuaObjectManager(const class Object InClass);// 0x8526e80 0x78cf5adde0
	void JumpToNextMap(FString mapCmd, float Delay);// 0x853fdc8 0x78cf5adec0
	bool IsValidExpression(int ID);// 0x8538bc0 0x78cf5adfa0
	bool IsUsedExperienceCardById(int ID, enum Table);// 0x8529bec 0x78cf5ae080
	bool IsUIHeroInfoPanelOpen();// 0x8535380 0x78cf5ae160
	bool IsSystemUnlock(enum SystemType, out int outLockLv);// 0x853eb2c 0x78cf5ae240
	bool IsSkinTable(int ID);// 0x852a3b0 0x78cf5ae320
	bool IsSkinHasColorBySuitId(int ID);// 0x852fddc 0x78cf5ae400
	bool IsSkinExperienceCardAndNotHaveHero(int ID);// 0x8537c70 0x78cf5ae4e0
	bool IsShowTaskRedTip();// 0x853c6bc 0x78cf5ae5c0
	bool IsRankUp();// 0x8541d84 0x78cf5ae6a0
	bool IsPlayingSequence();// 0x8530dfc 0x78cf5aadc0
	bool IsOpenHotupdate();// 0x8541148 0x78cf5aaea0
	bool IsMobileWinClient();// 0x853fec8 0x78cf5aaf80
	bool IsLastDodgeNeedEnoughMp();// 0x8527828 0x78cf5ab060
	bool IsItemHave(int ID);// 0x8532ff4 0x78cf5ab140
	bool IsHeroSkinId(int ID);// 0x8539e18 0x78cf5ab220
	bool IsHeroShowSkin(int hero_id, int skin_id);// 0x8535e34 0x78cf5ab300
	bool IsHeroId(int ID);// 0x8539ecc 0x78cf5ab3e0
	bool IsHeroHat(int64 hero_id, int64 ID);// 0x8539d1c 0x78cf5ab4c0
	bool IsHatBySkinTable(int64 ID);// 0x8541918 0x78cf5ab5a0
	bool IsGuideRunning(FName GuideKeyName, int NodeID);// 0x8540324 0x78cf5ab680
	bool IsGameMode(enum GameMode);// 0x8540794 0x78cf5ab760
	bool IsFreeingHero(int64 HeroId);// 0x852e154 0x78cf5ab840
	bool IsForcedDodgeMode();// 0x8527938 0x78cf5ab920
	bool IsForcedBlockMode();// 0x85278cc 0x78cf5aba00
	bool IsExperiencePublicSkin(int64 SkinId);// 0x852df38 0x78cf5abae0
	bool IsExperienceHeroSkin(int64 HeroSkinId);// 0x852dfec 0x78cf5abbc0
	bool IsExperienceHero(int64 HeroId);// 0x852e0a0 0x78cf5abca0
	bool IsExistPlayerBaseInfo(int64 UserId);// 0x8534b4c 0x78cf5abd80
	bool IsDestinyWeapon(int skin_id);// 0x85362f4 0x78cf5abe60
	bool IsCurHeroEquip(int hero_id, int ID, bool bRet);// 0x853a078 0x78cf5abf40
	bool IsChinaArea();// 0x85411c4 0x78cf5ac020
	bool IsChannelNeedPopVerifyTips();// 0x8527d48 0x78cf5ac100
	bool IsChannelNeedOpenPrivacyAgreement();// 0x8527d80 0x78cf5ac1e0
	bool IsCanReceiveMasteryRewardByHeroID(int HeroId);// 0x8530a0c 0x78cf5ac2c0
	bool IsCanReceiveMasteryReward();// 0x85309d4 0x78cf5ac3a0
	bool IsCancelBlockAfterBreak();// 0x8527860 0x78cf5ac480
	bool IsAutoCancelBlockMode();// 0x85279d8 0x78cf5ac560
	void InsertPackItem(BagItemInfo BagItemInfo);// 0x853efb0 0x78cf5ac640
	void InsertHeroEquip(int hero_id, int equip_id);// 0x853a2b8 0x78cf5ac720
	void InitHeroInfoMap();// 0x853c6a8 0x78cf5ac800
	void InitAChievementInfoMap(int Map_Length);// 0x853e21c 0x78cf5ac8e0
	void IndexClickIntervalTimeUp(int index);// 0x853c6f4 0x78cf5ac9c0
	void HideLoadingUI();// 0x8541350 0x78cf5a90e0
	void HDRSwitchDelegate__DelegateSignature();// 0x8a873f8 0x78cf5a91c0
	bool HaveModuleIsShow();// 0x85281f0 0x78cf5a92a0
	bool HadSkinOrNot(int hero_id, int ID);// 0x853929c 0x78cf5a9380
	bool HadItemSkinOrNot(int hallSkin_id);// 0x85390ec 0x78cf5a9460
	bool HadHeroSkinOrNot(int heroSkin_id, int hero_id);// 0x85391a0 0x78cf5a9540
	bool HadHeroOrNot(int hero_id);// 0x8539398 0x78cf5a9620
	bool HadHeadIconOrBorder(int ID);// 0x85384dc 0x78cf5a9700
	bool HadExpressionOrNot(int ID);// 0x8538860 0x78cf5a97e0
	bool HadEquippedExpressionOrNot(int ID);// 0x85387ac 0x78cf5a98c0
	bool HadEquippedAeessoryOrNot(int accessory_id);// 0x8538f84 0x78cf5a99a0
	bool HadEquippedActionOrNot(int ID);// 0x8538428 0x78cf5a9a80
	bool HadActionOrNot(int ID);// 0x8538590 0x78cf5a9b60
	bool HadAccessoryOrNot(int assessory_id);// 0x8539038 0x78cf5a9c40
	bool GetZhanbeiManualConfirmHero();// 0x852a228 0x78cf5a9d20
	bool GetWishingActivityTypeByItemId(out const int ItemId, out enum WishingActivityType);// 0x852c08c 0x78cf5a9e00
	bool GetWishingActivityInfoById(int64 ActivityId, out WishingActivityInfo WishingActivityInfo);// 0x852bcf8 0x78cf5a9ee0
	ActiveBoxInfo[] GetWeeklyRewardConfigArray();// 0x85303c8 0x78cf5a9fc0
	ActivityState[] GetWeekAwardStateArray();// 0x85305b4 0x78cf5aa0a0
	int GetWeaponTypeByWeaponItemId(int WeaponItemId);// 0x85420e4 0x78cf5aa180
	int GetWeaponModeByWeaponItemId(int WeaponItemId);// 0x8542194 0x78cf5aa260
	FString[] GetWeaponMaterialInstance(int SkinId, int index);// 0x8535f30 0x78cf5aa340
	void GetWeaponDisplayPath(int SkinId, out FString WeaponPath, out FString ShealthPath);// 0x85360dc 0x78cf5aa420
	int GetVideoSendCount();// 0x853ffbc 0x78cf5aa500
	int GetVerNum();// 0x8541194 0x78cf5aa5e0
	int GetValidEquippedExpressionNum();// 0x8538284 0x78cf5aa6c0
	int GetValidEquippedActionNum();// 0x8537ff0 0x78cf5aa7a0
	int GetUserSetting(enum Type);// 0x852b4b4 0x78cf5aa880
	FString[] GetUserQickMsgList();// 0x85302b0 0x78cf5aa960
	void GetUserLvPro(int lv, int Exp, out int curexp, out int MaxExp);// 0x8541f4c 0x78cf5aaa40
	int GetUserLvByExp(int Exp);// 0x8541e9c 0x78cf5aab20
	bool GetUserHistoryRecords(const int64 UserId, out HistoryRecord[] outHistoryRecords);// 0x853d318 0x78cf5aac00
	int GetUserCurLevel();// 0x852c24c 0x78cf5aace0
	<int,int> GetUseEffectByHallItem(int ID);// 0x852f0d4 0x78cf5a7400
	bool GetUnlockSystemInfo(enum SystemType, out UnlockSystemInfo outInfo);// 0x853ea24 0x78cf5a74e0
	ActivityState[] GettWeekAwardFirstOpenStateArray();// 0x8530504 0x78cf5a75c0
	int GetTotalTreasureChip();// 0x852cf34 0x78cf5a76a0
	int GetTotalCulExchangeWeight();// 0x852fd00 0x78cf5a7780
	int GetTodayTreasureChip();// 0x852cf00 0x78cf5a7860
	int GetTimeLimitById(int ID);// 0x8529cec 0x78cf5a7940
	float GetTickPriorityTime(enum Priority);// 0x8530924 0x78cf5a7a20
	Texture2D* GetTexture(FString Name);// 0x85400fc 0x78cf5a7b00
	void GetTeacherPrivilegeInfo(out const ActivityData[] TaskStateInfo, out const int ShowLevel, out int CurLevel, out enum LevelState, out TeacherPrivilegeInfo TeacherPrivilegeInfo);// 0x852b968 0x78cf5a7be0
	void GetTeacherAndStudentTaskInfo(out const ActivityData[] TaskStateInfo, out const enum TeacherAndStudentType, out int64 Level, out enum LevelState, out TeacherAndStudentTaskInfo[] TaskInfoArray, out RewardItem[] rewards, out int RewardTaskId);// 0x852b658 0x78cf5a7cc0
	void GetTaskDetailById(int task_id, out FString Name, out FString Desc, out int Target, out int reward_num);// 0x8531a24 0x78cf5a7da0
	int GetTaoliGameMaxLevel();// 0x852a464 0x78cf5a7e80
	void GetTacticsInfoByType(enum type_id, out TacticsData tac_data);// 0x8531d94 0x78cf5a7f60
	enum GetTacticsByHeroId(int64 HeroId);// 0x8529f28 0x78cf5a8040
	int64 GetSuitIdBySkinID(int64 SkinId);// 0x852de88 0x78cf5a8120
	bool GetStaticWinAnimByFaceId(int FaceID, out FString AnimPath);// 0x853b184 0x78cf5a8200
	bool GetStaticIdleAnimByFaceId(int FaceID, out FString AnimPath);// 0x853b29c 0x78cf5a82e0
	PaperSprite* GetSprite(FString Name);// 0x853fff0 0x78cf5a83c0
	FString GetSpareIconById(int ID);// 0x854181c 0x78cf5a84a0
	FriendBaseInfo[] GetSortedFriendList();// 0x8535110 0x78cf5a8580
	int GetSmashModeWinTeamScore();// 0x8526f5c 0x78cf5a8660
	void GetSkinTableMesh(int64 ID, out SkeletalMesh* Left, out SkeletalMesh* Right);// 0x85378d4 0x78cf5a8740
	FString GetSkinTableAnim(int skin_id);// 0x85394fc 0x78cf5a8820
	FString GetSkinModel(int SkinId);// 0x85353b8 0x78cf5a8900
	enum GetSkinItemTypeById(int ID);// 0x854176c 0x78cf5a89e0
	enum GetSkinEquipSkinTypeById(int skin_id);// 0x85363a8 0x78cf5a8ac0
	void GetSkinColorListBySkinId(int ID, out int[] list);// 0x85300a0 0x78cf5a8ba0
	int GetSkinColorDyeNumById(int ID);// 0x852fff0 0x78cf5a8c80
	int[] GetSkinArrayByEquipSkinType(enum EquipSkin);// 0x85365d8 0x78cf5a8d60
	int GetSkinAddHpByHeroSkinId(int HeroSkinId);// 0x852716c 0x78cf5a8e40
	NiagaraSystem* GetSkillSkinNiagara(int suit_id);// 0x85376ec 0x78cf5a8f20
	SignInInfo GetSignInInfoByActivityId(int ActivityId);// 0x853393c 0x78cf5a9000
	void GetShowInfoByTableId(int ID, enum TableType, out FString Name, out FString icon, out FString Desc, enum iconSize);// 0x8529858 0x78cf5a5720
	int GetShowDefaultHatSkinID(int SuitId);// 0x853944c 0x78cf5a5800
	FString GetShopNameById(int ID);// 0x852f254 0x78cf5a58e0
	int GetShopItemLimitNum(int shop_id);// 0x852cb90 0x78cf5a59c0
	int GetShopItemDiscountById(int ID, ShopItemPrice[] ShopItemPrices);// 0x8537494 0x78cf5a5aa0
	void GetShopItemCurrency(int shop_id, out enum[] mTypes, out int[] origin_price);// 0x852f350 0x78cf5a5b80
	ShopItemInfo[] GetShopInfoTypeArray(enum ShopInfoType);// 0x85345ec 0x78cf5a5c60
	ShopItemInfo GetShopInfoById(int ShopId);// 0x8534310 0x78cf5a5d40
	ShopItemInfo[] GetShopInfoAll();// 0x8534778 0x78cf5a5e20
	int GetShopIdbyConnectId(int ID);// 0x852dc5c 0x78cf5a5f00
	ShopDiscountGroupInfo GetShopDiscountGroupInfoById(int DiscountId);// 0x8533fb8 0x78cf5a5fe0
	int GetShopConnectIdById(int ID);// 0x852dd0c 0x78cf5a60c0
	FString GetServerLocalName(int ID);// 0x8541670 0x78cf5a61a0
	<int,int> GetSellEffectByHallItem(int ID);// 0x852ef54 0x78cf5a6280
	FString[] GetSecondPlayerNamesTable();// 0x85280d4 0x78cf5a6360
	PaperSprite* GetSeasonTitleIconById(int ID);// 0x852e530 0x78cf5a6440
	void GetSeasonTimestamp(int seasonId, out int64 StartTime, out int64 EndTime);// 0x8528e5c 0x78cf5a6520
	bool GetSeasonTimeById(int ID, out FString season_time);// 0x852e7b4 0x78cf5a6600
	int[] GetSeasonTasksById(int ID);// 0x852e434 0x78cf5a66e0
	bool GetSeasonPassWeekTask(int64 ID, out SeasonPassWeekTaskInfo TaskInfo);// 0x852d440 0x78cf5a67c0
	void GetSeasonPassTimeInfo(out int Week, out DateTime StartDate, out DateTime EndDate);// 0x85285ac 0x78cf5a68a0
	SeasonPassWeekTaskInfo[] GetSeasonPassTaskByWeekth(int Weekth);// 0x852d2d8 0x78cf5a6980
	enum GetSeasonPassRewardStatus(int64 ID);// 0x852d0dc 0x78cf5a6a60
	ActivityState GetSeasonPassRewardState(int64 ID);// 0x852d018 0x78cf5a6b40
	bool GetSeasonPassNeedTip();// 0x853caf0 0x78cf5a6c20
	bool GetSeasonPassInfo(int ID, out SeasonPassInfo Info);// 0x8528410 0x78cf5a6d00
	bool GetSeasonNameById(int ID, out FString season_name);// 0x852e69c 0x78cf5a6de0
	int GetSeasonIdByName(FString SeasonName);// 0x852e5e0 0x78cf5a6ec0
	SDKManager* GetSDKManager();// 0x8541378 0x78cf5a6fa0
	enum GetRewardTypeById(int64 ID);// 0x852cf68 0x78cf5a7080
	int GetRewardNumByConvenePoolTable(int ID);// 0x853f39c 0x78cf5a7160
	RewardItem GetRewardItemById(int ID, int Num, enum iconSize);// 0x8529d9c 0x78cf5a7240
	int GetRewardIdByRealId(int ID);// 0x8541ac8 0x78cf5a7320
	RewardItem GetRewardByItemId(int ID);// 0x8532c58 0x78cf5a3a40
	FString GetReportNameById(int ID);// 0x852c69c 0x78cf5a3b20
	int64 GetRemainTime(int ID, enum Table);// 0x852e900 0x78cf5a3c00
	RechargeInfo[] GetRechargeInfo();// 0x852c798 0x78cf5a3ce0
	int GetRecentTeamDataVersion();// 0x8534efc 0x78cf5a3dc0
	void GetRecentTeamDatas(out RecentTeamerInfo[] outRecentTeamDatas, out int64[] outUsersNeedRequestInfo);// 0x8534c00 0x78cf5a3ea0
	bool GetReceivedRewardList(int64 HeroId, out <int> OutList);// 0x8536944 0x78cf5a3f80
	int GetRealInfoByHallItem(int ID, out enum Type);// 0x852ee4c 0x78cf5a4060
	int GetRealIdByAllRewardId(int ID);// 0x852ecec 0x78cf5a4140
	RankRewardInfo[] GetRankRewardBySeasonId(int seasonId);// 0x8528fac 0x78cf5a4220
	bool GetRankRewardByID(int ID, out int reward_id, out int reward_num);// 0x852f734 0x78cf5a4300
	FString GetRankPreNameByID(int ID);// 0x852fb08 0x78cf5a43e0
	FString GetRankNameByID(int ID);// 0x852fc04 0x78cf5a44c0
	bool GetRankMissionInfoById(int ID, out SeasonTaskInfo task_info);// 0x852f4b8 0x78cf5a45a0
	int GetRankInfoByScore(int Score, out bool IsRankScore, out FString rankName, out FString RankIcon, out FString BigRankIcon, out int rankId, out int RankScore, out int RankUpScore, out int RankJieShu);// 0x8528ae4 0x78cf5a4680
	bool GetRankInfoByID(int ID, out FString rankName, out int RankScore, out int nextRankScore);// 0x852f898 0x78cf5a4760
	int GetRankIdByScore(int Score);// 0x852f684 0x78cf5a4840
	PaperSprite* GetRankIconByID(int ID);// 0x852fa58 0x78cf5a4920
	int GetQuenchingLevel(int ID);// 0x853cb28 0x78cf5a4a00
	<int,AccessoryServerInfo> GetPublicSkin();// 0x853161c 0x78cf5a4ae0
	int GetPublicShowWeaponId();// 0x8531114 0x78cf5a4bc0
	int GetPublicShowRemoteWeaponId();// 0x8531054 0x78cf5a4ca0
	void GetProficiencyInfo(int HeroId, int proficiency, out ProficiencyInfo ProficiencyInfo);// 0x852c268 0x78cf5a4d80
	bool GetPreyPoolInfoById(int64 PoolID, out PreyPoolInfo PreyPoolInfo);// 0x852bbe0 0x78cf5a4e60
	int GetPointByAccomplishmentLevelId(int ID);// 0x85330a8 0x78cf5a4f40
	int GetPlayerSeasonPassMaxLevel();// 0x85283dc 0x78cf5a5020
	int GetPlayerMeridian(int ID);// 0x853ccc8 0x78cf5a5100
	int GetPlayerData(enum PlayerDataType);// 0x853ec4c 0x78cf5a51e0
	bool GetPlayerBaseInfo(int64 UserId, out PlayerBaseInfo outPlayerBaseInfo);// 0x8534a2c 0x78cf5a52c0
	int GetPersonalGameDataVersion(int64 UserId, enum teammode);// 0x853e8b4 0x78cf5a53a0
	bool GetPersonalGameData(int64 UserId, enum teammode, int seasonId, out PersonalGameData outPersonalGameData);// 0x853e410 0x78cf5a5480
	FString GetPerformAnimBySkinID2(int ID);// 0x852933c 0x78cf5a5560
	FString GetPerformAnimBySkinID1(int ID);// 0x8529438 0x78cf5a5640
	BagItemInfo GetPackItem(int hall_item);// 0x853f070 0x78cf5a1d60
	RewardItem GetPackInfoByHallItemId(int ID);// 0x852a880 0x78cf5a1e40
	int[] GetPackExperienceCardByHallItemId();// 0x853ee58 0x78cf5a1f20
	int GetOtherRandomHeroID(int CurHeroID);// 0x852811c 0x78cf5a2000
	FString[] GetOpenedSeasonName();// 0x852e31c 0x78cf5a20e0
	int GetNormalSeasonPassMaxLevel();// 0x85283a8 0x78cf5a21c0
	NiagaraSystem*[] GetNiagaraAssetArray();// 0x853f288 0x78cf5a22a0
	int GetNextExperienceByAccomplishmentLevelId(int ID);// 0x8533158 0x78cf5a2380
	int64 GetNetTimeStamp();// 0x8530f94 0x78cf5a2460
	BaseNetHandle* GetNetActor();// 0x85409cc 0x78cf5a2540
	int GetMosaicTypeWithCheck(int accid, int weaponid);// 0x852c3bc 0x78cf5a2620
	int GetMosaicTypeByItemId(int item_id);// 0x8531eb8 0x78cf5a2700
	int GetMosaicLevelByItemId(int item_id, out int constnum);// 0x85320c4 0x78cf5a27e0
	void GetMosaicDetailByItemId(int item_id, out int Level, out int64[] accessories);// 0x8531f68 0x78cf5a28c0
	float GetMaxHP(int HeroId, bool bIsDefault);// 0x852cc40 0x78cf5a29a0
	float GetMaxFlyToolGlidingVerticalSpeed();// 0x8527358 0x78cf5a2a80
	float GetMaxFlyToolGlidingHorizontalSpeed();// 0x852738c 0x78cf5a2b60
	UIMailInfo[] GetMailList();// 0x85316fc 0x78cf5a2c40
	LuaObjectManager* GetLuaObjectManager();// 0x8526f28 0x78cf5a2d20
	int GetLoginType(int Type);// 0x853f1d8 0x78cf5a2e00
	float GetLockCancelTime();// 0x85277f4 0x78cf5a2ee0
	int GetLiteGameMaxLevel();// 0x852a498 0x78cf5a2fc0
	ActivityState GetLevelFundRewardState(int Level, enum Type);// 0x852cdf0 0x78cf5a30a0
	bool GetLevelFundHaveReward();// 0x853c8b4 0x78cf5a3180
	int GetKickReason();// 0x852a158 0x78cf5a3260
	int64 GetJacketIdBySuitID(int64 SkinId);// 0x8539a00 0x78cf5a3340
	enum GetItemTypeBySkinId(int ID);// 0x852fe90 0x78cf5a3420
	FString GetItemModel(int ItemId);// 0x8535564 0x78cf5a3500
	GameItemInfo GetItemInfo(int ItemId);// 0x854159c 0x78cf5a35e0
	bool GetIsSingleLogo();// 0x8527db8 0x78cf5a36c0
	FString GetIdleAnimBySkinID(int ID);// 0x8529534 0x78cf5a37a0
	int GetIdByAllRewardRealId(int ID);// 0x852ed9c 0x78cf5a3880
	FString[] GetHuaXiangyiMaterialInstance(int SkinId);// 0x85358c0 0x78cf5a3960
	void GetHuaXiangYiInfo(int ID, out FString SkeletalMesh);// 0x8535b20 0x78cf5a0080
	FString GetHuaXiangYiAnimBlueprintPath(int ID);// 0x8535a24 0x78cf5a0160
	void GetHuaXiangSanIds(out int[] IdList);// 0x852d61c 0x78cf5a0240
	float GetHpProgressSize();// 0x8527724 0x78cf5a0320
	float GetHpProgressPer();// 0x8527758 0x78cf5a0400
	int GetHotupdateVerNum();// 0x8541168 0x78cf5a04e0
	FString[] GetHorseMaterialInstance(int SkinId);// 0x853575c 0x78cf5a05c0
	void GetHorseInfo(int ID, out HorseInfo Info);// 0x8535c2c 0x78cf5a06a0
	void GetHorseIds(out int[] IdList);// 0x852d6dc 0x78cf5a0780
	FString GetHorseAnimBlueprintPath(int ID);// 0x8535660 0x78cf5a0860
	enum GetHerSkinQuality(int hero_id);// 0x852eaf8 0x78cf5a0940
	enum GetHeroTypeById(int hero_id);// 0x85354b4 0x78cf5a0a20
	RewardItem GetHeroStoryByHeroId(int hero_id, int skin_id);// 0x85396a8 0x78cf5a0b00
	void GetHeroSkinWeapon(int suit_id, out SkeletalMesh* Left, out SkeletalMesh* Right);// 0x8537a24 0x78cf5a0be0
	bool GetHeroSkinSequenceInfoById(int SkinId, out FString PresetName, out FString CameraName, out FString SequenceTag);// 0x853b3b4 0x78cf5a0cc0
	int[] GetHeroSkinListByHeroId(int ID);// 0x852e9fc 0x78cf5a0da0
	int GetHeroSkinIDByEquipItemID(int equip_item_id);// 0x85395f8 0x78cf5a0e80
	FString GetHeroSkinIconById(int ID);// 0x853a4a4 0x78cf5a0f60
	FString GetHeroSkinAnim(int suit_id);// 0x8537b74 0x78cf5a1040
	bool GetHeroPropertyByHeroId(int hero_id, out HeroPropertyInfo heroInfo);// 0x853b79c 0x78cf5a1120
	void GetHeroOwnedSuitByID(int hero_id, out int64[] suit_list);// 0x85398f4 0x78cf5a1200
	void GetHeroOwnedSkinsByID(int hero_id, out int64[] skin_list);// 0x85397e8 0x78cf5a12e0
	void GetHeroMasteryRewardByLv(int hero_id, int lv, out RewardInfo[] rewards);// 0x8536acc 0x78cf5a13c0
	void GetHeroMasteryInfo(int hero_id, out int lv, out int cur_total_exp, out int cur_lv_exp, out int cur_lv_max_exp, out FString icon, out FString Name, out bool isMaxLv);// 0x8536f20 0x78cf5a14a0
	int GetHeroMasteryExp(int hero_id);// 0x85373e4 0x78cf5a1580
	void GetHeroMasteryDetailByLv(int HeroId, int lv, out FString icon, out FString Name);// 0x8537234 0x78cf5a1660
	bool GetHeroInfoByHeroId(int hero_id, out HeroServerInfo heroInfo);// 0x853c504 0x78cf5a1740
	void GetHeroImage(int hero_id, out FString icon, out FString Drawing, out FString BigDrawing, out FString RankRewardIcon);// 0x8529630 0x78cf5a1820
	int GetHeroIdBySuitId(int64 suit_id);// 0x853b63c 0x78cf5a1900
	int GetHeroIdBySkinId(int skin_id);// 0x853b6ec 0x78cf5a19e0
	int GetHeroIdByColorId(int64 color_id);// 0x853b58c 0x78cf5a1ac0
	FString GetHeroIconById(int hero_id);// 0x85419cc 0x78cf5a1ba0
	int GetHeroDestinyWeapon(int hero_id);// 0x8536244 0x78cf5a1c80
	FString GetHeroDescript(int64 hero_id, int64 skin_id);// 0x852eba8 0x78cf55e780
	HeroData GetHeroDataByID(int hero_id);// 0x852ddbc 0x78cf55e860
	int GetHeroCurSuitByID(int hero_id);// 0x8539c6c 0x78cf55e940
	void GetHeroCurSkinsByID(int hero_id, out int64[] cur_skins);// 0x8539b60 0x78cf55ea20
	int GetHeroCurMasteryLv(int hero_id);// 0x8536e70 0x78cf55eb00
	int GetHeroCurJacketByID(int hero_id);// 0x8539ab0 0x78cf55ebe0
	PaperSprite* GetHeadSpriteById(int ID, enum Type);// 0x852b090 0x78cf55ecc0
	PaperSprite* GetHeadPhotoById(int ID);// 0x852aec8 0x78cf55eda0
	bool GetHeadPathById(int HeadInfoId, out FString HeadPath);// 0x852af78 0x78cf55ee80
	void GetHeadInfo(enum Type, out SelectableTextureInfo Info);// 0x852a978 0x78cf55ef60
	float GetHeadHpProgressSize();// 0x8527654 0x78cf55f040
	float GetHeadHpProgressPer();// 0x8527688 0x78cf55f120
	PaperSprite* GetHeadBorderById(int ID);// 0x852ad24 0x78cf55f200
	float GetHeadArmorProgressSize();// 0x85276bc 0x78cf55f2e0
	float GetHeadArmorProgressPer();// 0x85276f0 0x78cf55f4a0
	enum GetHallItemTypeById(int ID);// 0x852a7d0 0x78cf55f580
	int[] GetHallItemRewardById(int ID);// 0x8535d38 0x78cf55f660
	GoodsJumpInfo GetGoodsJumpPageTypeById(int ID);// 0x8529ab4 0x78cf55f740
	GameStatisticInfo GetGameStatisticInfo();// 0x8527a44 0x78cf55f820
	enum GetGameModeState(enum GameMode, out DateTime StartTime, out DateTime EndTime);// 0x85411fc 0x78cf55f900
	void GetFriendList(enum friendDataType, out FriendBaseInfo[] infoArr);// 0x8535238 0x78cf30c640
	FriendBaseInfo GetFriendInfo(int friend_id);// 0x8534fe0 0x78cf55f9e0
	ChatCellInfo[] GetFriendChatMsgById(int UserId);// 0x852b18c 0x78cf55fac0
	FString GetFormalNotice();// 0x8527c98 0x78cf55fba0
	float GetForcedDodgeCostMp();// 0x8527904 0x78cf55fc80
	float GetForcedBlockColdTime();// 0x8527898 0x78cf55fd60
	bool GetFlyToolDefineBySkinId(int SkinId, out FlyToolDefine OutFlyToolDefine);// 0x852721c 0x78cf55fe40
	FString[] GetFirstPlayerNamesTable();// 0x85280f8 0x78cf55ff20
	float[] GetExpressionFrameInterval(int ID);// 0x8538c74 0x78cf55caa0
	FString[] GetExpressionAsset(int ID);// 0x8538d70 0x78cf55cb80
	int GetEquipSkinColorIdBySkinId(int ID);// 0x852ff40 0x78cf55cc60
	int GetEquippedSkinBySkinType(enum EquipSkin);// 0x8538ed4 0x78cf55cd40
	<int,AccessoryServerInfo> GetEquippedPublicSkin();// 0x85312d0 0x78cf55ce20
	int GetEquippedHxyOrWeaponSkinId(int SkinType);// 0x8531364 0x78cf55cf00
	int GetEquippedHuaXiangYiSkinId();// 0x8531414 0x78cf55cfe0
	int GetEquippedHorseSkinId();// 0x8531448 0x78cf55d0c0
	FString GetEnumDisplayName(FString enumName, int Value);// 0x852a4cc 0x78cf55d1a0
	int GetDLDWinPoint();// 0x852e8cc 0x78cf55d280
	void GetDivisionNameByCode(int64 DCode, out FString[] NameList);// 0x852d79c 0x78cf55d360
	void GetDivisionCodeProvince(out <int64,FString> ProvinceList);// 0x852db5c 0x78cf55d440
	void GetDivisionCodeCounty(int64 DCode, out <int64,FString> CountyList);// 0x852d8dc 0x78cf55d520
	void GetDivisionCodeCity(int64 DCode, out <int64,FString> CityList);// 0x852da1c 0x78cf55d600
	int GetDeviceQualityMax();// 0x8528228 0x78cf55d6e0
	enum GetDeviceLevel();// 0x85282cc 0x78cf55d7c0
	bool GetDeviceHDRIsShow();// 0x8528294 0x78cf55d8a0
	bool GetDeviceHDRDefault();// 0x852825c 0x78cf55d980
	bool GetDetailHistoryRecord(FString gameId, out DetailHistoryRecord[] outDetailRecords);// 0x853ce68 0x78cf55da60
	int GetDefaultHuaXiangYi();// 0x8537d24 0x78cf55db40
	int GetDefaultHorse();// 0x8537d58 0x78cf55dc20
	ActivityState[] GetDailyTaskStateArray();// 0x8530874 0x78cf55dd00
	ActivityState[] GetDailyTaskFirstOpenStateArray();// 0x85307c4 0x78cf55dde0
	ActivityState[] GetDailyTaskAwardFirstOpenStateArray();// 0x8530664 0x78cf55dec0
	ActivityState[] GetDailyAwardStateArray();// 0x8530714 0x78cf55dfa0
	bool GetCurWishingActivityInfo(out const enum WishingActivityType, out WishingActivityInfo WishingActivityInfo);// 0x852bf4c 0x78cf55e080
	void GetCurSeasonPassInfo(out int Level, out int Exp, out int MaxExp, out bool IsMax, out int Senior);// 0x853c8ec 0x78cf55e160
	int GetCurSeasonId();// 0x852e2e8 0x78cf55e240
	int64 GetCurrentHeroProficiency(int ID);// 0x8532ba8 0x78cf55e320
	Guide* GetCurrentGuide();// 0x8540308 0x78cf55e400
	int GetCurrentFatherIdMax(int ID, const <int,DateTime> server);// 0x853da44 0x78cf55e4e0
	bool GetCurPreyPoolInfo(out const enum WishingActivityType, out PreyPoolInfo PreyPoolInfo);// 0x852be28 0x78cf55e5c0
	int GetCurHeroSuitID(int heor_id);// 0x853a80c 0x78cf55e6a0
	int GetCurHeroSkinIDByLevel(int suit_id, int Level);// 0x8539f80 0x78cf55adc0
	void GetCurHeroSkinColor(int heor_id, out <int,int> skin_color);// 0x853a690 0x78cf55aea0
	int GetCurHeroID();// 0x853a960 0x78cf55af80
	int[] GetCurEquipedIDs(int hero_id);// 0x853a3a8 0x78cf55b060
	int GetCurBountyLevel(out int RemainExp, out int LevelExp);// 0x852899c 0x78cf55b140
	int GetCurBountyExperience();// 0x8528ab0 0x78cf55b220
	bool GetCurActivityInfoByType(out const enum ActivityGroupType, out ActivityInfo ActivityInfo);// 0x8533d64 0x78cf55b300
	bool GetCulExpInfoByLv(int lv, out int NextLvNeedExp, out int CurLvTotalExp);// 0x8541b78 0x78cf55b3e0
	enum GetCTTaskJumpType(int ID);// 0x852c8d0 0x78cf55b4c0
	int[] GetCTReportList();// 0x852c5ec 0x78cf55b5a0
	PaperSprite* GetCTFlagById(int ID);// 0x852ca30 0x78cf55b680
	int GetCountByConveneSilverRewardId(int ID);// 0x853f44c 0x78cf55b760
	int GetCountByConveneScoreRewardId(int ID);// 0x853f4fc 0x78cf55b840
	int GetCountByConvendId(int ID);// 0x853f8ac 0x78cf55b920
	<int,int> GetConveneSilverRewardById(int ID);// 0x853f5ac 0x78cf55ba00
	<int,int> GetConveneScoreRewardById(int ID);// 0x853f72c 0x78cf55bae0
	int[] GetConveneRewardPoolById(int ID);// 0x853fccc 0x78cf55bbc0
	enum GetConsumeTypeByConveneId(int ID);// 0x853f95c 0x78cf55bca0
	int GetConsumeNumByConveneId(int ID);// 0x853fa0c 0x78cf55bd80
	int64 GetConnectIdByShopId(int64 shop_id);// 0x852cae0 0x78cf55be60
	int GetConfigOnlineTime();// 0x854143c 0x78cf55bf40
	LinearColor[] GetConcentrateColors();// 0x852cd40 0x78cf55c020
	bool GetCombatReadinessHeroInfoByUserID(int user_id, out CombatReadinessInfo user_info);// 0x8532340 0x78cf55c100
	CombatReadinessInfo[] GetCombatReadinessHeroInfo();// 0x8532280 0x78cf55c1e0
	bool GetColorPropertyById(int ID, out SkinColor Color);// 0x85301ac 0x78cf55c2c0
	LinearColor GetColorByItemLevel(int ItemLevel);// 0x85270b8 0x78cf55c3a0
	Actor* GetChatNetActor();// 0x8540a90 0x78cf55c480
	int GetCharacterShowIndexByUserId(int ID);// 0x8537e3c 0x78cf55c560
	FString GetChannelUpdateUrl();// 0x8527ea0 0x78cf55c640
	enum GetChannelTradeType();// 0x8527f88 0x78cf55c720
	FString GetChannelLogo();// 0x8527df0 0x78cf55c800
	enum GetChannelLoginType();// 0x8527fbc 0x78cf55c8e0
	bool GetChannelIsOpenTapCommunity();// 0x8527f50 0x78cf55c9c0
	int GetChannelID();// 0x8527ff0 0x78cf5590e0
	FString GetChannel();// 0x8528024 0x78cf5591c0
	int GetCacheUserSetting(enum Type);// 0x852b310 0x78cf5592a0
	int GetBountySpecialShowByCurLevel(out BountyOrderInfo BountyOrderInfo);// 0x8528700 0x78cf559380
	BountyOrderInfo[] GetBountyOrderBySeasonId(int seasonId);// 0x8528858 0x78cf559460
	void GetBorderNameAndDescById(int ID, out FString Name, out FString Desc);// 0x852a668 0x78cf559540
	float GetBlockColdTime();// 0x8527970 0x78cf559620
	float GetBlockCancelTime();// 0x8527a10 0x78cf559700
	int[] GetBasicHeros();// 0x8537d8c 0x78cf5597e0
	float GetAutoSignDis();// 0x853ee24 0x78cf5598c0
	float GetAutoClearSignDis();// 0x853edf0 0x78cf5599a0
	float GetAutoCancelBlockTime();// 0x85279a4 0x78cf559a80
	float GetArmorProgressSize();// 0x852778c 0x78cf559b60
	float GetArmorProgressPer();// 0x85277c0 0x78cf559c40
	RewardItem[] GetAntiAddictionKitReward();// 0x852c4b4 0x78cf559d20
	FString[] GetAndroidNamesTable();// 0x85281cc 0x78cf559e00
	int GetAmmoIdByWeaponId(int weapon_id);// 0x8531c34 0x78cf559ee0
	int GetAmmoIdByItemId(int item_id);// 0x8531ce4 0x78cf559fc0
	TrainHeroInfo[] GetAllTrainHeroInfo();// 0x853779c 0x78cf55a0a0
	<int64,SeasonPassWeekTaskInfo> GetAllSeasonPassWeekTask();// 0x852d588 0x78cf55a180
	int GetAllRewardIdByConvenePoolTable(int ID);// 0x853fabc 0x78cf55a260
	void GetAllReachedAccomplishmentLevelMax(out const <int> _server_reachedAchievementInfo, out <int> out_maxLevel_server_achievementInfo);// 0x853dcb8 0x78cf55a340
	int[] GetAllRankInfoIds();// 0x852f5d4 0x78cf55a420
	BagItemInfo[] GetAllPlayerItem();// 0x8532f44 0x78cf55a500
	void GetAllNotReachedAchievementLevelMin(out const <int> _server_reachedAchievementInfo, out <int> out_notReached_achievement);// 0x853decc 0x78cf55a5e0
	FString GetAllIdAttrName(int ID);// 0x8532d50 0x78cf55a6c0
	RewardItem GetAllIdAttr(int ID);// 0x8532e4c 0x78cf55a7a0
	void GetAllHeroMasteryItem(int hero_id, out HeroMasteryItem[] allHeroMasteryItems);// 0x8536c20 0x78cf55a880
	void GetAllExpressionArray(out int[] OutList);// 0x8536518 0x78cf55a960
	int[] GetAllEquippedExpression();// 0x85382b8 0x78cf55aa40
	int[] GetAllEquippedAction();// 0x8538024 0x78cf55ab20
	int[] GetAllCTFlag();// 0x852c980 0x78cf55ac00
	int[] GetAllConveneSilverRewardId();// 0x853fb6c 0x78cf55ace0
	int[] GetAllConveneScoreRewardId();// 0x853fc1c 0x78cf557400
	void GetAllActionArray(out int[] OutList);// 0x8536458 0x78cf5574e0
	AIAutoRunHandle* GetAIAutoRunHandle();// 0x8541568 0x78cf5575c0
	bool GetAdvPoolItemInfoById(int ItemInfoId, out AdvPoolItemInfo PoolItemInfo);// 0x8526f90 0x78cf5576a0
	bool GetActivityTodayDontShow();// 0x8533bc0 0x78cf557780
	int GetActivitySortByName(FString Name);// 0x8533ca8 0x78cf557860
	void GetActivityInfoArray(out ActivityInfo[] ActivityInfoArray);// 0x8533ea8 0x78cf557940
	FString GetActionAsset(int ID, int hero_id);// 0x8538a7c 0x78cf557a20
	int GetAChievementLevelById(int ID);// 0x8533208 0x78cf557b00
	int GetAChievementLevel(int ID);// 0x8533794 0x78cf557be0
	RewardItem GetAChievementInfo(int ID);// 0x8533844 0x78cf557cc0
	int GetAchievementFatherIdById(int ID);// 0x8532af8 0x78cf557da0
	int[] GetAChieveLevelNumberByAccomplishmentId(int ID);// 0x8533698 0x78cf557e80
	int GetAChieveIdByAccomplishmentFather(int father_id);// 0x85335e8 0x78cf557f60
	AchievementRewardItem GetAccomplishmentInfoByAccomplishmentLevelId(int ID);// 0x8533450 0x78cf558040
	AchievementRewardItem GetAccomplishmentInfoByAccomplishmentId(int ID);// 0x85332b8 0x78cf558120
	void GamePreplayNiagara();// 0x853f338 0x78cf558200
	void GameInstanceClean();// 0x854242c 0x78cf5582e0
	void ExitWuXiaX();// 0x852a144 0x78cf5583c0
	bool ExistPersonalGameData(int64 UserId, enum teammode, int seasonId);// 0x853e2c4 0x78cf5584a0
	void EnableSequenceRotate();// 0x8530d40 0x78cf558580
	bool DoFirstPayShowToday();// 0x8527c60 0x78cf558660
	void DelIsGetMail();// 0x85316b0 0x78cf558740
	void DeleteShopNotNeedMoneyType(out const enum[] NeedMoneyType, out const ShopItemInfo ShopItemInfo, out ShopItemInfo ReturnShopItemInfo);// 0x85340dc 0x78cf558820
	bool DeleteChattingFriend(int ID);// 0x852a2fc 0x78cf558900
	void CreateLuaObjectManager();// 0x8a873f8 0x78cf5589e0
	void CreateAIPlayer(int Number);// 0x85410a0 0x78cf558ac0
	void ConfirmHeroLocalCombatReadiness();// 0x853278c 0x78cf558ba0
	bool CompareItemQuality(int Id1, int Id2);// 0x85375f0 0x78cf558c80
	void CompalinReconnect();// 0x85405d4 0x78cf558d60
	void CmdLightDebug(bool IsOpen);// 0x85273c0 0x78cf558e40
	void ClearOnlineTime();// 0x854152c 0x78cf558f20
	bool CheckWeaponByItemId(int item_id);// 0x85321cc 0x78cf559000
	void CheckSkyTrigger(WuXiaXCharacter* Player, float DeltaTime);// 0x8527470 0x78cf555720
	bool CheckNewMail();// 0x85316c4 0x78cf555800
	bool CheckNewFriendMsg(int ID);// 0x852a248 0x78cf5558e0
	bool CheckIsUnlockWhenLineUpOrReady();// 0x853e9ec 0x78cf5559c0
	void CheckIsRankUp(int ServerRank);// 0x8541cdc 0x78cf555aa0
	void CheckIsLevelUp(int serverExp, bool bAdd);// 0x8541da4 0x78cf555b80
	bool CheckIsFriend(int friend_id);// 0x8534f2c 0x78cf555c60
	void CheckHotUpdateInfo(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x8542258 0x78cf555d40
	void CheckHeroSkinRemainTime();// 0x853ad84 0x78cf555e20
	void CheckHeroRemainTime();// 0x853ad98 0x78cf555f00
	void CheckHeroCurSuitRemainTime(int64 HeroId);// 0x853acdc 0x78cf555fe0
	void CheckExpireSkinOrHero();// 0x8537eec 0x78cf5560c0
	void CheckCopyPbt();// 0x8542244 0x78cf5561a0
	bool CheckAllGuideFinished();// 0x8540c00 0x78cf556280
	void ChatNetDebugConnectIp(FString Ip, int Port);// 0x8540f44 0x78cf556360
	void Chat_Net_Actor(Actor* val);// 0x8540aac 0x78cf556440
	void ChangeHeroWeaponShow(int show_weapon_skin_id, int show_remote_weapon_skin_id);// 0x853b99c 0x78cf556520
	void ChangeHeroSkin(int hero_id, int suit_id, int[] skin_id_list);// 0x853ba8c 0x78cf556600
	void ChangeHeroItem(int[] hall_item_list);// 0x853b8a0 0x78cf5566e0
	bool CanReconnect();// 0x85408d4 0x78cf5567c0
	bool CanHeroMasteryLvReceiveReward(int64 hero_id, int lv);// 0x8536d70 0x78cf5568a0
	void BuyHeroSuitSuccess(int suit_id);// 0x853ab8c 0x78cf556980
	void BuyHeroSuccess(int hero_id);// 0x853ac34 0x78cf556a60
	void BuyHeroSkinSuccess(int skin_id);// 0x853aae4 0x78cf556b40
	void BuyHallItemSuccess(int hall_id);// 0x853aa3c 0x78cf556c20
	void BuyAccessorySuccess(int accessory_id);// 0x853a994 0x78cf556d00
	static void BindStartGuideDelegate(const Object* WorldContextObject, out const delegate Delegate);// 0x8540208 0x78cf556de0
	void AddSingleHistoryRecordData(const int64 UserId, out const HistoryRecord record);// 0x853d5b4 0x78cf556ec0
	void AddReceivedRewardItemToList(int64 HeroId, int masteryLvId);// 0x85366d4 0x78cf556fa0
	void AddHistoryRecordDatas(const int64 UserId, out const HistoryRecord[] records);// 0x853d46c 0x78cf557080
	bool AddHeadBorder(Widget* head, int borderId);// 0x852aad4 0x78cf557160
	void AddHaveExpression(int ID);// 0x8538914 0x78cf557240
	void AddHaveAction(int ID);// 0x8538644 0x78cf557320
	void AddDetailHistoryRecord(FString gameId, out const DetailHistoryRecord[] detailRecords);// 0x853d11c 0x78cf553a40

--------------------------------
Class: SkinColor
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf579f80
	Vector Color;//[Offset: 0x4, Size: 0xc] 0x78cf57a000
	Vector ColorR;//[Offset: 0x10, Size: 0xc] 0x78cf57a080
	Vector ColorG;//[Offset: 0x1c, Size: 0xc] 0x78cf57a100
	Vector ColorB;//[Offset: 0x28, Size: 0xc] 0x78cf57a180

--------------------------------
Class: RecentTeamerInfo
	int64 UserId;//[Offset: 0x0, Size: 0x8] 0x78cf59dd80
	PlayerBaseInfo PlayerBaseInfo;//[Offset: 0x8, Size: 0x30] 0x78cf59de00
	int FightRank;//[Offset: 0x38, Size: 0x4] 0x78cf59de80
	int KillNum;//[Offset: 0x3c, Size: 0x4] 0x78cf59df00
	enum GameMode;//[Offset: 0x40, Size: 0x1] 0x78cf567680
	enum teammode;//[Offset: 0x41, Size: 0x1] 0x78cf567720
	int64 Timestamp;//[Offset: 0x48, Size: 0x8] 0x78cf59e080

--------------------------------
Class: PlayerBaseInfo
	int64 UserId;//[Offset: 0x0, Size: 0x8] 0x78cf59a600
	FString UserName;//[Offset: 0x8, Size: 0x10] 0x78cf59a680
	enum userSex;//[Offset: 0x18, Size: 0x1] 0x78cf5652e0
	int userLv;//[Offset: 0x1c, Size: 0x4] 0x78cf59a780
	int userIconBox;//[Offset: 0x20, Size: 0x4] 0x78cf59a800
	int userIcon;//[Offset: 0x24, Size: 0x4] 0x78cf59a880
	int rankId;//[Offset: 0x28, Size: 0x4] 0x78cf59a900

--------------------------------
Class: Guide.Object
	GuideNode* CurrentNode;//[Offset: 0x30, Size: 0x8] 0x78cebe9b00
	GuideNode* PendingNode;//[Offset: 0x38, Size: 0x8] 0x78cebe9b80
	GuideNodeCustom* CurrentCustomNode;//[Offset: 0x40, Size: 0x8] 0x78cebe9c00
	GuideNodeCustom* PendingCustomNode;//[Offset: 0x48, Size: 0x8] 0x78cebe9c80
	int CurrentCustomNodeEntryIndex;//[Offset: 0x50, Size: 0x4] 0x78cebe9d00
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78cebe9d80
	GuideUI* GuideUI;//[Offset: 0x58, Size: 0x8] 0x78cebe9e00
	int64 GuideTableID;//[Offset: 0xb8, Size: 0x8] 0x78cebe9e80
	FName ProgramKey;//[Offset: 0xc0, Size: 0x8] 0x78cebe9f00
	class GuideUI* GuideUIClass;//[Offset: 0xc8, Size: 0x8] 0x78cebc4660
	int GuideUIZOrder;//[Offset: 0xd0, Size: 0x4] 0x78cebe9f80
	GuideNode*[] Nodes;//[Offset: 0xd8, Size: 0x10] 0x78cebc4700
	GuideNodeCustom*[] CustomNodes;//[Offset: 0xe8, Size: 0x10] 0x78cebc47a0
	CustomNodeLinkerSpec[] CustomNodeEntries;//[Offset: 0xf8, Size: 0x10] 0x78cebc4840
	int LiveNum;//[Offset: 0x108, Size: 0x4] 0x78cebea180
	int MaxNum;//[Offset: 0x10c, Size: 0x4] 0x78cebea200
	GuideEventGiveTask*[] AllTasks;//[Offset: 0x110, Size: 0x10] 0x78cebc48e0
	bool bAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78cebea300
	static bool RegisterWidget(const Object* WorldContextObject, FName InProgramKey, int NodeID, Widget* Widget);// 0x837e008 0x78cebdf200
	static bool RegisterActor(const Object* WorldContextObject, FName InProgramKey, int NodeID, Actor* InActor);// 0x837de7c 0x78cebdf2e0
	static bool FinishTask(const Object* WorldContextObject, FName InProgramKey, int TaskID);// 0x837e370 0x78cebdf3c0
	static bool FinishNode(const Object* WorldContextObject, FName InProgramKey, int NodeID);// 0x837e68c 0x78cebdf4a0
	static bool ExecuteCustomNode(const Object* WorldContextObject, FName InProgramKey, int EntryIndex);// 0x837dd3c 0x78cebdf580
	static void DebugStartAtDemo5(const Object* WorldContextObject, int index);// 0x837dc58 0x78cebdf660
	static bool ConditionFinishTask(const Object* WorldContextObject, FName InProgramKey, int TaskID, int ConditionIndex, bool bNewFinish);// 0x837e194 0x78cebdf740
	static bool ConditionFinishNode(const Object* WorldContextObject, FName InProgramKey, int NodeID, int ConditionIndex, bool bNewFinish);// 0x837e4b0 0x78cebdf820

--------------------------------
Class: GuideNode.Object
	int NodeID;//[Offset: 0x28, Size: 0x4] 0x78cebeb600
	float DelayStart;//[Offset: 0x2c, Size: 0x4] 0x78cebeb680
	bool bDirectFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cebeb700
	bool bTouchFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78cebeb780
	float AutoFinishDuration;//[Offset: 0x34, Size: 0x4] 0x78cebeb800
	GuideEvent*[] Events;//[Offset: 0x38, Size: 0x10] 0x78cebc61e0
	bool bFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cebeb900
	void FinishSelf();// 0x83863e8 0x78cebdee80

--------------------------------
Class: GuideEvent.Object

--------------------------------
Class: GuideNodeCustom.GuideNode.Object

--------------------------------
Class: GuideUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	delegate OnRequestClose;//[Offset: 0x330, Size: 0x10] 0x78cebece00
	Widget* CullWidget;//[Offset: 0x340, Size: 0x8] 0x78cebece80
	GuideArea PendingAreaInfo;//[Offset: 0x348, Size: 0x38] 0x78cebecf00
	void UpdateTaskState(out const FText TaskText, bool bFinished);// 0x8a873f8 0x78cebf1ba0
	void UpdateTasks(out const FText title, out const GuideTaskAdv*[] Tasks);// 0x8a873f8 0x78cebf1c80
	void UpdateCullWidgetType(enum Type, bool bForceFade, bool bForceFadeCircle);// 0x8a873f8 0x78cebde780
	void ShowTutorial(Texture2D* Tex);// 0x8a873f8 0x78cebde860
	void ShowSpirit(out const FText Content);// 0x8a873f8 0x78cebde940
	void ShowMessage(out const FText Content);// 0x8a873f8 0x78cebdea20
	void ShowIntroduction(int index);// 0x8a873f8 0x78cebdeb00
	void PlayFocusAnim(enum Type);// 0x8a873f8 0x78cebdebe0
	bool IsInLobby();// 0x838b8fc 0x78cebdecc0
	void FadeoutTaskPanel();// 0x8a873f8 0x78cebdeda0

--------------------------------
Class: GuideArea
	Box2D Area;//[Offset: 0x0, Size: 0x14] 0x78cefbf680
	Vector2D DragOffset;//[Offset: 0x14, Size: 0x8] 0x78cefbf700
	enum Type;//[Offset: 0x1c, Size: 0x1] 0x78cee5ede0
	float Duration;//[Offset: 0x20, Size: 0x4] 0x78cefbd700
	Widget* FocusWidget;//[Offset: 0x28, Size: 0x8] 0x78cefbd780
	bool bForceFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cefbd800
	bool bForceFadeCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78cefbd880

--------------------------------
Class: GuideTaskAdv.Object
	int TaskID;//[Offset: 0x28, Size: 0x4] 0x78cebea800
	FText title;//[Offset: 0x30, Size: 0x18] 0x78cebea880
	GuideCondition* Condition;//[Offset: 0x48, Size: 0x8] 0x78cebea900
	GuideTrigger* FinishTaskTrigger;//[Offset: 0x50, Size: 0x8] 0x78cebea980
	bool bFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78cebeaa00

--------------------------------
Class: GuideCondition.Object
	bool[] Results;//[Offset: 0x28, Size: 0x10] 0x78cebc4980

--------------------------------
Class: GuideTrigger.Object

--------------------------------
Class: CustomNodeLinkerSpec
	FName Description;//[Offset: 0x0, Size: 0x8] 0x78cefbd900
	int[] Indexes;//[Offset: 0x8, Size: 0x10] 0x78cee5ee80

--------------------------------
Class: GuideEventGiveTask.GuideEvent.Object
	GuideTrigger* AllFinishedTrigger;//[Offset: 0x30, Size: 0x8] 0x78cebea680
	FText title;//[Offset: 0x38, Size: 0x18] 0x78cebea700
	GuideTaskAdv*[] AllTasks;//[Offset: 0x50, Size: 0x10] 0x78cebc42a0

--------------------------------
Class: AccessoryServerInfo
	int accessory_id;//[Offset: 0x0, Size: 0x4] 0x78cf57f780
	int accessory_num;//[Offset: 0x4, Size: 0x4] 0x78cf57d700
	int64 expire_time;//[Offset: 0x8, Size: 0x8] 0x78cf57d780

--------------------------------
Class: UIMailInfo
	int mail_id;//[Offset: 0x0, Size: 0x4] 0x78cf598a80
	FString mail_title;//[Offset: 0x8, Size: 0x10] 0x78cf598b00
	bool is_read;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cf598b80
	FString create_time;//[Offset: 0x20, Size: 0x10] 0x78cf598c00
	FString mail_contxt;//[Offset: 0x30, Size: 0x10] 0x78cf598c80
	bool is_get;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cf598d00
	FString mail_url;//[Offset: 0x48, Size: 0x10] 0x78cf598d80

--------------------------------
Class: HistoryRecord
	int Version;//[Offset: 0x0, Size: 0x4] 0x78cf572e00
	FString gameId;//[Offset: 0x8, Size: 0x10] 0x78cf572e80
	enum GameMode;//[Offset: 0x18, Size: 0x1] 0x78cf5624a0
	enum teammode;//[Offset: 0x19, Size: 0x1] 0x78cf562540
	int64 GameOverTimeStamp;//[Offset: 0x20, Size: 0x8] 0x78cf573000
	int FightRank;//[Offset: 0x28, Size: 0x4] 0x78cf573080
	int KillNum;//[Offset: 0x2c, Size: 0x4] 0x78cf573100
	int RankScore;//[Offset: 0x30, Size: 0x4] 0x78cf573180
	int userSegment;//[Offset: 0x34, Size: 0x4] 0x78cf571100
	int AddRankScore;//[Offset: 0x38, Size: 0x4] 0x78cf571180
	int EvaluateScore;//[Offset: 0x3c, Size: 0x4] 0x78cf571200

--------------------------------
Class: DetailHistoryRecord
	int64 UserId;//[Offset: 0x0, Size: 0x8] 0x78cf571600
	FString UserName;//[Offset: 0x8, Size: 0x10] 0x78cf571680
	int KillNum;//[Offset: 0x18, Size: 0x4] 0x78cf571700
	int HurtNum;//[Offset: 0x1c, Size: 0x4] 0x78cf571780
	int TotalAddHp;//[Offset: 0x20, Size: 0x4] 0x78cf571800
	int EvaluateScore;//[Offset: 0x24, Size: 0x4] 0x78cf571880
	int HeroId;//[Offset: 0x28, Size: 0x4] 0x78cf571900

--------------------------------
Class: HeroServerInfo
	int hero_id;//[Offset: 0x0, Size: 0x4] 0x78cf595d00
	int proficiency;//[Offset: 0x4, Size: 0x4] 0x78cf595d80
	int64 cur_suit_id;//[Offset: 0x8, Size: 0x8] 0x78cf595e00
	int64[] cur_skin_list;//[Offset: 0x10, Size: 0x10] 0x78cf566000
	int64[] own_suit_list;//[Offset: 0x20, Size: 0x10] 0x78cf5660a0
	int64[] own_skin_list;//[Offset: 0x30, Size: 0x10] 0x78cf566140
	int64[] own_item_list;//[Offset: 0x40, Size: 0x10] 0x78cf5661e0
	<int64,int64> equip_skin_color_map;//[Offset: 0x50, Size: 0x50] 0x78cf33b800
	bool own_hero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x78cf596180
	int64 expire_hero_time;//[Offset: 0xa8, Size: 0x8] 0x78cf596200
	<int64,int64> expire_suit_time_map;//[Offset: 0xb0, Size: 0x50] 0x78cf33b8c0
	<int64,int64> expire_skin_time_map;//[Offset: 0x100, Size: 0x50] 0x78cf33b980

--------------------------------
Class: CombatReadinessInfo
	int user_id;//[Offset: 0x0, Size: 0x4] 0x78cf579700
	FString user_name;//[Offset: 0x8, Size: 0x10] 0x78cf579780
	int hero_id;//[Offset: 0x18, Size: 0x4] 0x78cf579800
	int cur_suit_id;//[Offset: 0x1c, Size: 0x4] 0x78cf579880
	int[] cur_skin_list;//[Offset: 0x20, Size: 0x10] 0x78cf5633a0
	bool lock_state;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cf579980
	int user_icon;//[Offset: 0x34, Size: 0x4] 0x78cf579a00
	int user_icon_box;//[Offset: 0x38, Size: 0x4] 0x78cf579a80
	enum player_sex;//[Offset: 0x3c, Size: 0x1] 0x78cf563440
	int user_skin;//[Offset: 0x40, Size: 0x4] 0x78cf579b80
	int face_id;//[Offset: 0x44, Size: 0x4] 0x78cf579c00
	<int,int> skin_color_map;//[Offset: 0x48, Size: 0x50] 0x78cf339a00
	int public_show_weapon;//[Offset: 0x98, Size: 0x4] 0x78cf579d80
	int public_show_remote_weapon;//[Offset: 0x9c, Size: 0x4] 0x78cf579e00

--------------------------------
Class: SkinSequenceUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	WeaponPosInfo[] WeaponPosList;//[Offset: 0x330, Size: 0x10] 0x78ced2f740
	FString UIPresetName;//[Offset: 0x340, Size: 0x10] 0x78ced95a00
	FString UICameraName;//[Offset: 0x350, Size: 0x10] 0x78ced95a80
	void ShowUI();// 0x8a873f8 0x78ced8aa40
	void ShowCharacter(int SkinId);// 0x84a6004 0x78ced8ab20
	void SetUIPresetAndCameraName(FString PresetName, FString CameraName);// 0x84a5dac 0x78ced8ac00
	void SetDisplayActorPosAndRot(FString PresetName, int SkinId, enum Type);// 0x84a5eb8 0x78ced8ace0
	void PlaySequenceDelegate(int SkinId, out const delegate Event, bool bStopWhenReturn);// 0x8a873f8 0x78ced87400
	void PlaySequence(int SkinId, bool bStopWhenReturn);// 0x8a873f8 0x78ced874e0

--------------------------------
Class: WishingActivityInfo
	int64 ID;//[Offset: 0x0, Size: 0x8] 0x78cf57cb00
	enum WishingActivityType;//[Offset: 0x8, Size: 0x1] 0x78cf562c20
	FString ActivityName;//[Offset: 0x10, Size: 0x10] 0x78cf57cc00
	DateTime StartTime;//[Offset: 0x20, Size: 0x8] 0x78cf57cc80
	DateTime EndTime;//[Offset: 0x28, Size: 0x8] 0x78cf57cd00
	int64[] SkinIdArray;//[Offset: 0x30, Size: 0x10] 0x78cf562cc0
	int64 MainSkin;//[Offset: 0x40, Size: 0x8] 0x78cf57ce00
	int64[] MayRecharge;//[Offset: 0x48, Size: 0x10] 0x78cf562d60
	int64 PoolID;//[Offset: 0x58, Size: 0x8] 0x78cf57cf00
	int GashaponGetId;//[Offset: 0x60, Size: 0x4] 0x78cf57cf80
	int GashaponGetNum;//[Offset: 0x64, Size: 0x4] 0x78cf57d000
	FString LevelName;//[Offset: 0x68, Size: 0x10] 0x78cf57d080
	FString PresetName;//[Offset: 0x78, Size: 0x10] 0x78cf57d100
	FString CameraName;//[Offset: 0x88, Size: 0x10] 0x78cf57d180
	FString TitleTexture;//[Offset: 0x98, Size: 0x10] 0x78cf57d200
	FString[] ShowActor;//[Offset: 0xa8, Size: 0x10] 0x78cf562e00

--------------------------------
Class: UnlockSystemInfo
	enum SystemType;//[Offset: 0x0, Size: 0x1] 0x78cf568260
	int UnlockLv;//[Offset: 0x4, Size: 0x4] 0x78cf5b4e80
	bool bIsShowWhenLvUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf5b4f00

--------------------------------
Class: TeacherPrivilegeInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf5b3680
	int Score;//[Offset: 0x4, Size: 0x4] 0x78cf5b3700
	int ScoreUp;//[Offset: 0x8, Size: 0x4] 0x78cf5b3780
	RewardItem[] rewards;//[Offset: 0x10, Size: 0x10] 0x78cf568580
	RewardItem[] PrivilegeReward;//[Offset: 0x20, Size: 0x10] 0x78cf568620
	FString[] PrivilegeRewardDesc;//[Offset: 0x30, Size: 0x10] 0x78cf5686c0

--------------------------------
Class: TeacherAndStudentTaskInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf5b3e00
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cf5b3e80
	FString Desc;//[Offset: 0x18, Size: 0x10] 0x78cf5b3f00
	enum State;//[Offset: 0x28, Size: 0x1] 0x78cf568a80
	int CurCount;//[Offset: 0x2c, Size: 0x4] 0x78cf5b4000
	int MaxCount;//[Offset: 0x30, Size: 0x4] 0x78cf5b4080

--------------------------------
Class: TacticsData
	enum type_;//[Offset: 0x0, Size: 0x1] 0x78cf568d00
	FString Tachie;//[Offset: 0x8, Size: 0x10] 0x78cf5b2580
	FString icon;//[Offset: 0x18, Size: 0x10] 0x78cf5b2600
	FString Background;//[Offset: 0x28, Size: 0x10] 0x78cf5b2680

--------------------------------
Class: PlayModeTime
	<int,int64> time_map_;//[Offset: 0x0, Size: 0x50] 0x78cf5e0ac0

--------------------------------
Class: PlayModeState
	<int,int> state_map_;//[Offset: 0x0, Size: 0x50] 0x78cf5e0d00

--------------------------------
Class: ChatCellInfoArr
	ChatCellInfo[] ChatInfoArr;//[Offset: 0x0, Size: 0x10] 0x78cf56b820

--------------------------------
Class: ChatCellInfo
	int UserId;//[Offset: 0x0, Size: 0x4] 0x78cf590f80
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cf591000
	FString chatInfo;//[Offset: 0x18, Size: 0x10] 0x78cf591080
	int head_id;//[Offset: 0x28, Size: 0x4] 0x78cf57f800
	int head_id_box;//[Offset: 0x2c, Size: 0x4] 0x78cf57f880
	int border_id;//[Offset: 0x30, Size: 0x4] 0x78cf57f900
	int userLv;//[Offset: 0x34, Size: 0x4] 0x78cf57f980
	int rank_score;//[Offset: 0x38, Size: 0x4] 0x78cf57fa00
	enum sextype;//[Offset: 0x3c, Size: 0x1] 0x78cf564a20
	bool is_team_chat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78cf57fb00
	bool join;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x78cf57fb80
	int match_type;//[Offset: 0x40, Size: 0x4] 0x78cf57fc00
	int sort_type;//[Offset: 0x44, Size: 0x4] 0x78cf57fc80
	int map_name;//[Offset: 0x48, Size: 0x4] 0x78cf57fd00
	int receiver_userid;//[Offset: 0x4c, Size: 0x4] 0x78cf57fd80

--------------------------------
Class: ChatFriendInfo
	FriendBaseInfo[] FriendList;//[Offset: 0x0, Size: 0x10] 0x78cf56dd00

--------------------------------
Class: TeamPlayer
	enum sex_type;//[Offset: 0x0, Size: 0x1] 0x78cf56c180
	int user_id;//[Offset: 0x4, Size: 0x4] 0x78cf5d7e80
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cf5d7f00
	int face_id;//[Offset: 0x18, Size: 0x4] 0x78cf5d7f80
	int hair_id;//[Offset: 0x1c, Size: 0x4] 0x78cf5d8000
	int hair_color_id;//[Offset: 0x20, Size: 0x4] 0x78cf5d8080
	int State;//[Offset: 0x24, Size: 0x4] 0x78cf5d8100
	int ready;//[Offset: 0x28, Size: 0x4] 0x78cf5d8180
	bool in_room;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78cf5d8200
	int[] skin_ids;//[Offset: 0x30, Size: 0x10] 0x78cf56c220
	FString icon;//[Offset: 0x40, Size: 0x10] 0x78cf5d8300
	int hero_id;//[Offset: 0x50, Size: 0x4] 0x78cf5d8380
	int show_weapon_id;//[Offset: 0x54, Size: 0x4] 0x78cf5d8400
	int show_remote_weapon_id;//[Offset: 0x58, Size: 0x4] 0x78cf5d6380
	int user_icon;//[Offset: 0x5c, Size: 0x4] 0x78cf5d6400
	int user_icon_box;//[Offset: 0x60, Size: 0x4] 0x78cf5d6480
	<int,int> skin_color;//[Offset: 0x68, Size: 0x50] 0x78cf5e13c0

--------------------------------
Class: WuXiaXExtentionConfig
	FString m_Account;//[Offset: 0x0, Size: 0x10] 0x78cf5d6d80
	FString m_Password;//[Offset: 0x10, Size: 0x10] 0x78cf5d6e00
	FString m_CreateName;//[Offset: 0x20, Size: 0x10] 0x78cf5d6e80
	FString m_WindowsSize;//[Offset: 0x30, Size: 0x10] 0x78cf5d6f00
	int m_ServerMode;//[Offset: 0x40, Size: 0x4] 0x78cf5d6f80
	int m_PlayMode;//[Offset: 0x44, Size: 0x4] 0x78cf5d7000
	bool m_AutoLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cf5d7080
	bool m_AutoMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78cf5d7100
	bool m_AutoAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78cf5d7180
	bool m_AutoCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x78cf5d7200
	bool m_DebugLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78cf5d7280
	bool m_Statistic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78cf5d7300
	bool m_ServerDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x78cf5d7380
	bool m_WebLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1] 0x78cf5d5300
	bool bIsAIMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cf5d5380
	int AILoginDelayTime;//[Offset: 0x54, Size: 0x4] 0x78cf5d5400
	int GameMode;//[Offset: 0x58, Size: 0x4] 0x78cf5d5480
	int LineMode;//[Offset: 0x5c, Size: 0x4] 0x78cf5d5500
	int AIType;//[Offset: 0x60, Size: 0x4] 0x78cf5d5580

--------------------------------
Class: LoadProgressManager.Actor.Object
	NiagaraComponent*[] niagara_components_;//[Offset: 0x220, Size: 0x10] 0x78cebc8760
	TimerHandle spawn_nia_handle_;//[Offset: 0x230, Size: 0x8] 0x78cec0ac00
	NiagaraSystem*[] nia_assets_;//[Offset: 0x238, Size: 0x10] 0x78cebc8800
	int spawn_nia_idx_;//[Offset: 0x248, Size: 0x4] 0x78cec0ad00
	TimerHandle destroy_nia_handle_;//[Offset: 0x250, Size: 0x8] 0x78cec0ad80
	int current_level_num_;//[Offset: 0x258, Size: 0x4] 0x78cec0ae00
	WuXiaXHUD* hud_;//[Offset: 0x260, Size: 0x8] 0x78cec0ae80
	TimerHandle timer_handle_;//[Offset: 0x268, Size: 0x8] 0x78cec0af00
	LoadStreamingLevel*[] streaming_levels;//[Offset: 0x270, Size: 0x10] 0x78cebc88a0
	FName[] m_LevelRequestFromServer;//[Offset: 0x288, Size: 0x10] 0x78cebc8940
	FName[] need_load_maps_;//[Offset: 0x298, Size: 0x10] 0x78cebc89e0
	FName[] need_unload_maps_;//[Offset: 0x2a8, Size: 0x10] 0x78cebc8a80
	FName[] dynamic_load_maps_;//[Offset: 0x2b8, Size: 0x10] 0x78cebc8b20
	float standalone_extra_delay_;//[Offset: 0x2dc, Size: 0x4] 0x78cec0b200
	void StartGamingLoad();// 0x83b31b4 0x78cebfadc0
	void StartBPLoad();// 0x83b31e0 0x78cebfaea0
	void LevelLoadComplete();// 0x83b30e0 0x78cebfaf80
	void IncreaseOutResuorce();// 0x83b3090 0x78cebfb060
	void FinishBPLoad();// 0x83b31c8 0x78cebfb140
	void CompleteOne();// 0x83b30a4 0x78cebfb220
	void ChainStyleUnLoadLevel();// 0x83b30b8 0x78cebfb300
	void ChainStyleLoadLevel();// 0x83b30cc 0x78cebfb3e0
	void AddServerRequestLevelOnClient(out const FName[] loadmaps);// 0x83b31fc 0x78cebfb4c0
	void AddLoadMaps(out const FName[] loadmaps);// 0x83b32bc 0x78cebfb5a0
	void AddDynamicLoadMaps(out const FName[] loadmaps);// 0x83b30f4 0x78cebfb680

--------------------------------
Class: WuXiaXHUD.WuXiaXHUDBase.HUD.Actor.Object
	bool can_operate_input_or_not_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x78ce6a3d00
	int[] team_player_ids_;//[Offset: 0x3a0, Size: 0x10] 0x78ceddb000
	<int,TeamPlayerUIInfo> team_player_ui_infos_;//[Offset: 0x3b0, Size: 0x50] 0x78cee10580
	FString main_class_path;//[Offset: 0x408, Size: 0x10] 0x78ce6a3f00
	FString skill_class_path;//[Offset: 0x418, Size: 0x10] 0x78ce6a3f80
	FString statistics_class_path;//[Offset: 0x428, Size: 0x10] 0x78ce6a4000
	class LoadingUI* loading_class_;//[Offset: 0x438, Size: 0x8] 0x78ceddb0a0
	class UserWidgetBase* message_manager_;//[Offset: 0x440, Size: 0x8] 0x78ceddb140
	FString level_up_path;//[Offset: 0x448, Size: 0x10] 0x78ce6a4080
	FString obmap_class_path;//[Offset: 0x458, Size: 0x10] 0x78ce6a4100
	FString rpctrl_class_path;//[Offset: 0x468, Size: 0x10] 0x78ce6a4180
	FString oboverview_class_path;//[Offset: 0x478, Size: 0x10] 0x78ce6a4200
	FString obtargetview_class_path;//[Offset: 0x488, Size: 0x10] 0x78ce6a2180
	FString obstatistics_class_path;//[Offset: 0x498, Size: 0x10] 0x78ce6a2200
	FString accomplishment_class_path;//[Offset: 0x4a8, Size: 0x10] 0x78ce6a2280
	class CheckSoundActor* check_sound_class_;//[Offset: 0x4b8, Size: 0x8] 0x78ceddb1e0
	MainGameUI* MainGameUI;//[Offset: 0x4c0, Size: 0x8] 0x78ce6a2300
	UI_MobileSkill* SkillUI;//[Offset: 0x4c8, Size: 0x8] 0x78ce6a2380
	UI_MobileBag* BagUI;//[Offset: 0x4d0, Size: 0x8] 0x78ce6a2400
	WuXiaMiniMapWidget* BigMapUI;//[Offset: 0x4d8, Size: 0x8] 0x78ce6a2480
	StatisticsWidget* StatisticsUI;//[Offset: 0x4e0, Size: 0x8] 0x78ce6a2500
	MiniMapCtrlUI* MapUI;//[Offset: 0x4e8, Size: 0x8] 0x78ce6a2580
	SystemMenuUI* MenuUI;//[Offset: 0x4f0, Size: 0x8] 0x78ce6a2600
	KeepActionUI* KeepActionUI;//[Offset: 0x4f8, Size: 0x8] 0x78ce6a2680
	LoadingUI* LoadingUI;//[Offset: 0x500, Size: 0x8] 0x78ce6a2700
	OBMapUI* OBMapUI;//[Offset: 0x508, Size: 0x8] 0x78ce6a2780
	OBOverviewUI* OBOverviewUI;//[Offset: 0x510, Size: 0x8] 0x78ce6a2800
	OBTargetViewUI* OBTargetViewUI;//[Offset: 0x518, Size: 0x8] 0x78ce6a2880
	OBStatisticsWidget* OBStatisticsWidgetUI;//[Offset: 0x520, Size: 0x8] 0x78ce6a2900
	ReplayCtrlUI* ReplayCtrlUI;//[Offset: 0x528, Size: 0x8] 0x78ce6a2980
	AccomplishmentCompleteUI* AccomplishmentCompleteUI;//[Offset: 0x530, Size: 0x8] 0x78ce6a2a00
	LevelUpPanelUI* LevelUpPanel;//[Offset: 0x538, Size: 0x8] 0x78ce6a2a80
	GameDebugUI* GameDebugUI;//[Offset: 0x540, Size: 0x8] 0x78ce6a2b00
	Vector2D original_level_size_;//[Offset: 0x548, Size: 0x8] 0x78ce6a2b80
	Vector2D original_map_size_;//[Offset: 0x550, Size: 0x8] 0x78ce6a2c00
	Vector2D show_map_size_;//[Offset: 0x558, Size: 0x8] 0x78ce6a2c80
	Vector center_;//[Offset: 0x560, Size: 0xc] 0x78ce6a2d00
	Texture2D* chinese_map_;//[Offset: 0x570, Size: 0x8] 0x78ce6a2d80
	Texture2D* english_map_;//[Offset: 0x578, Size: 0x8] 0x78ce6a2e00
	bool can_mark_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1] 0x78ce6a2e80
	enum current_ui_state_;//[Offset: 0x581, Size: 0x1] 0x78ceddb280
	enum old_ui_state_;//[Offset: 0x582, Size: 0x1] 0x78ceddb320
	<int,PlayerPVPInfo> squad_pvp_info_;//[Offset: 0x588, Size: 0x50] 0x78cee10640
	int[] expression_array_;//[Offset: 0x5d8, Size: 0x10] 0x78ceddb3c0
	int[] action_array_;//[Offset: 0x5e8, Size: 0x10] 0x78ceddb460
	int kill_;//[Offset: 0x5f8, Size: 0x4] 0x78ce6a1100
	class LastWinPlayerLeaveUI* last_win_player_leave_class_;//[Offset: 0x648, Size: 0x8] 0x78ceddb500
	LastWinPlayerLeaveUI* LastWinPlayerLeaveUI;//[Offset: 0x650, Size: 0x8] 0x78ce6a1180
	bool is_Ob_Client;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1] 0x78ce6a1200
	<int,bool> skill_state_map_;//[Offset: 0x660, Size: 0x50] 0x78cee10700
	class UserWidget[] WidgetClassesNeedClean;//[Offset: 0x6b0, Size: 0x10] 0x78ceddb640
	void ZeroTextState(bool State);// 0x8568fb4 0x78ce69caa0
	void WearHat(int Level, int MaxDurable);// 0x8561c0c 0x78ce69cb80
	void WearArmor(int Level, int MaxDurable);// 0x8561b08 0x78ce69cc60
	void WaitForPickUp();// 0x8a873f8 0x78ce69cd40
	void Vertical(bool State, bool IsDown);// 0x8564c70 0x78ce69ce20
	void ValidGuideType(enum Type);// 0x856213c 0x78ce69cf00
	void UseWidget();// 0x8564f08 0x78ce69cfe0
	void UseItemHotKey(int index);// 0x8566b24 0x78ce69d0c0
	void UpdateWeaponStateEffect(int weaponindex, PaperSprite* effecticon, int Value);// 0x8566768 0x78ce69d1a0
	void UpdateTouTuoUI(int ID, bool bActive);// 0x8563200 0x78ce69d280
	void UpdateTeamPointInfo(int red, int blue, int green);// 0x8a873f8 0x78ce69d360
	void UpdateTeamPlayerWaistTokenState(int PlayerID, enum new_state);// 0x856539c 0x78ce69d440
	void UpdateTeamPlayerState(int PlayerID, enum new_state);// 0x8565164 0x78ce69d520
	void UpdateTeamPlayerSPPercent(int PlayerID, float Value);// 0x85649b8 0x78ce69d600
	void UpdateTeamPlayerMarkPointFlag(int PlayerID, int markplayerid, bool flag);// 0x8a873f8 0x78ce69d6e0
	void UpdateTeamPlayerMarkPoint(int PlayerID, enum Type, Vector Location);// 0x8a873f8 0x78ce69d7c0
	void UpdateTeamPlayerHPPercent(int PlayerID, float Value);// 0x8564aac 0x78ce69d8a0
	void UpdateTeamPlayerDyingHPPercent(int PlayerID, float Value);// 0x85648c4 0x78ce69d980
	void UpdateSkillsGCD(float cdtime);// 0x8566fb8 0x78ce69da60
	void UpdateSkillHotKeyMaxCD(int index, float skillcd);// 0x85671b0 0x78ce69db40
	void UpdateSkillHotKeyCurrentCD(int skill_id);// 0x8567108 0x78ce69dc20
	void UpdateSatiety(float satietyvalue);// 0x8567b34 0x78ce69dd00
	void UpdateSacrificeUI(int ID, bool bIsActive);// 0x85637bc 0x78ce69dde0
	void UpdateResourcePoint(int ID, int TeamId);// 0x8562f60 0x78ce69dec0
	void UpdateRangeChargeNum(int NewRangeChargeNum, int NewMaxRangeChargeNum);// 0x8561770 0x78ce69dfa0
	void UpdateProjectilePath(out const Vector startLocation, out const Vector[] LocalPoints);// 0x8561650 0x78ce69e080
	void UpdatePlayerState(enum new_state);// 0x8568138 0x78ce69e160
	void UpdatePlayerRotator(int PlayerID, float Yaw);// 0x85646e0 0x78ce69e240
	void UpdatePlayerMoveState(enum State, bool Value);// 0x8a873f8 0x78ce69e320
	void UpdatePlayerMovementMode(byte Mode);// 0x8a873f8 0x78ce69e400
	void UpdatePlayerMark3DLocation(int PlayerID, Vector Location);// 0x85645f0 0x78ce69e4e0
	void UpdatePlayerLocation(int PlayerID, Vector Location);// 0x85647d4 0x78ce69e5c0
	void UpdatePlayerJailState(enum State, float continus);// 0x8a873f8 0x78ce69e6a0
	void UpdateParadropUI(int ID, bool openstate);// 0x856343c 0x78ce69adc0
	void UpdateOxygen(float oxygen);// 0x85677bc 0x78ce69aea0
	void UpdateMp(float currentMP, float currentmaxMP, float maxMP);// 0x8567bdc 0x78ce69af80
	void UpdateMoWenUI(int ID, bool bIsOpen, bool bIsPulled);// 0x8564144 0x78ce69b060
	void UpdateMoisture(float moisture);// 0x8567a8c 0x78ce69b140
	void UpdateMiniMapInfo();// 0x8a873f8 0x78ce69b220
	void UpdateLiveData(int LIVE);// 0x85672a4 0x78ce69b300
	void UpdateKillData(int allkill);// 0x8567384 0x78ce69b3e0
	void UpdateItemNumber(int index, int Number);// 0x8566c30 0x78ce69b4c0
	void UpdateItemHotKeyNumbers();// 0x8566c1c 0x78ce69b5a0
	void UpdateInjury(float Injury);// 0x8567dc0 0x78ce69b680
	void UpdateHorseSpeed(float current_speed);// 0x856884c 0x78ce69b760
	void UpdateHorsePower(float current_power, float max_power);// 0x856875c 0x78ce69b840
	void UpdateFightSp(float currentSP, float maxSP);// 0x8567f58 0x78ce69b920
	void UpdateFightHp(float currentHP, float maxHP);// 0x8568048 0x78ce69ba00
	void UpdateExpression(out const int[] items);// 0x8561fcc 0x78ce69bae0
	void UpdateEffectPointInfo(out const EffectPointInfo EffectPointInfo);// 0x8563148 0x78ce69bbc0
	void UpdateDyingHp(float currentHP, float maxHP);// 0x8567e68 0x78ce69bca0
	void UpdateDrugValue(float drugvalue);// 0x8567d18 0x78ce69bd80
	void UpdateDrug(float drugvalue);// 0x856793c 0x78ce69be60
	void UpdateDragonRockUI(int ID, bool bShow, bool bOpen);// 0x85639a4 0x78ce69bf40
	void UpdateCrosshairType(enum NewCrosshairType, int NewCrosshairNum);// 0x856197c 0x78ce69c020
	void UpdateCrosshairLockedInfosAndProjectileLocations(out const CrosshairLockedInfo[] NewCrosshairLockedInfos, out const Vector[] NewProjectileLocations);// 0x8561860 0x78ce69c100
	void UpdateCompass(float Angle);// 0x85679e4 0x78ce69c1e0
	void UpdateCDBuff(int64 buffID, float Time);// 0x8567434 0x78ce69c2c0
	void UpdateAdDrugUI(int world_id, bool exist);// 0x8563ec0 0x78ce69c3a0
	void UpdateAction(out const int[] items);// 0x8561f0c 0x78ce69c480
	void UpdateAccomplishmentInfo(int64[] AccomplishmentIdArray, int curLv, int CurPoint);// 0x8569210 0x78ce69c560
	void UnBindItemUIEvent();// 0x8a873f8 0x78ce69c640
	void TryShowInvntoryWidget();// 0x8568e38 0x78ce69c720
	void TrainTimeOver();// 0x85691fc 0x78ce69c800
	void TrainTextState(bool State);// 0x8568f04 0x78ce69c8e0
	void TeamUpdateTeamPlayerWaistPoint(int PlayerID, Vector Location, bool hide);// 0x8565258 0x78ce69c9c0
	void TakeOffHat();// 0x8561bf8 0x78ce6990e0
	void TakeOffArmor();// 0x8561af4 0x78ce6991c0
	void SwitchUserSettingOB();// 0x85697c0 0x78ce6992a0
	void SwitchUserSetting();// 0x85699a4 0x78ce699380
	void SwitchUOBStatisticsWidgetUI(out OBStasticsInfo[] Result);// 0x85697d4 0x78ce699460
	bool SwitchToThrowWeapon();// 0x8561a70 0x78ce699540
	bool SwitchToRangeWeapon();// 0x8561aa8 0x78ce699620
	void SwitchToNextWidget();// 0x85696e8 0x78ce699700
	void SwitchToMainWeapon();// 0x8561ae0 0x78ce6997e0
	void SwitchSkill();// 0x856996c 0x78ce6998c0
	void SwitchOBTargetViewUI();// 0x85698e0 0x78ce6999a0
	void SwitchOBOverviewUI();// 0x85698fc 0x78ce699a80
	void SwitchOBMap();// 0x8569918 0x78ce699b60
	void SwitchMap();// 0x8569950 0x78ce699c40
	void SwitchItemBag();// 0x8569988 0x78ce699d20
	void SortSoundActor(CheckSoundActor*[] Actors);// 0x8568c44 0x78ce699e00
	void SkillAlertTip(enum skill_type);// 0x8567060 0x78ce699ee0
	void ShowWinButton();// 0x8a873f8 0x78ce699fc0
	void ShowWaitResurrection(float Time);// 0x8a873f8 0x78ce69a0a0
	void ShowStatisticUI();// 0x856163c 0x78ce69a180
	void ShowSkillDetail(int skillid);// 0x8562684 0x78ce69a260
	void ShowParachuteUI();// 0x8566528 0x78ce69a340
	void ShowOxygen();// 0x8567878 0x78ce69a420
	void ShowOpenParachuteTips();// 0x8566578 0x78ce69a500
	void ShowMapWidget();// 0x8a873f8 0x78ce69a5e0
	void ShowMapPanel();// 0x85681f4 0x78ce69a6c0
	void ShowMainInterfaceUI();// 0x8a873f8 0x78ce69a7a0
	void ShowLowHPEffect();// 0x8a873f8 0x78ce69a880
	void ShowJumpPlanTips();// 0x85665a0 0x78ce69a960
	void ShowJueKongUI(int maxnumber);// 0x8a873f8 0x78ce69aa40
	void ShowJueKongInMap(Vector Location);// 0x8a873f8 0x78ce69ab20
	void ShowItemDetail(out UIItemInfo UIItemInfo);// 0x8565e8c 0x78ce69ac00
	void ShowInteractive(enum Type, out const FText text);// 0x8568af4 0x78ce69ace0
	void ShowHallWidget(FString player_name);// 0x8a873f8 0x78ce697400
	void ShowEndGameTip(int MatchRank, int KillNum);// 0x856154c 0x78ce6974e0
	void ShowCloseParachuteTips();// 0x8566550 0x78ce6975c0
	void ShowCheckSoundLocation(out const int[] IDs, out const Vector[] locations);// 0x8a873f8 0x78ce6976a0
	void SetZeroTimer(int Timer);// 0x8569114 0x78ce697780
	void SetWeight(int maxweight, int Weight, int Level);// 0x8566024 0x78ce697860
	void SetWeaponState(enum WeaponEquipType, int WeaponLevel, int BufferNumber, int MaxBufferNumber, PaperSprite* WeaponIcon);// 0x8566950 0x78ce697940
	void SetTrainTimer(int Timer);// 0x8569064 0x78ce697a20
	void SetTeamPlayerShowMode(int teammode);// 0x8565684 0x78ce697b00
	void SetStatisticsItem(PaperSprite* Texture, int Level, FString item_name);// 0x8568208 0x78ce697be0
	void SetSplitItemButton(bool isbottondown);// 0x8565b58 0x78ce697cc0
	void SetSkillState(int skill_slot, bool enable);// 0x85622a8 0x78ce697da0
	void SetSkillHotKey(int index, int skill_id, PaperSprite* icon, float skillcd, bool canuse, int skillprop);// 0x85627d4 0x78ce697e80
	void SetSkillEquipState(int[] skills);// 0x8562588 0x78ce697f60
	void SetSkillBookEnable(int itemindex);// 0x856572c 0x78ce698040
	void SetSkillBook(int itemindex, int skillid, int weapontype, int Level, FString Name, FString Description, PaperSprite* icon, bool isenable);// 0x856587c 0x78ce698120
	void SetSkill(enum slottype, int slotindex, int64 skillid, bool IsValid, bool iscurrentweapon);// 0x8562a98 0x78ce698200
	void SetSelfContinuousKillNumber(int Number);// 0x85686ac 0x78ce6982e0
	void SetResurrectionInfo(out const ResurrectionInfo Info);// 0x8562460 0x78ce6983c0
	void SetPVPGameTime(float Time);// 0x8a873f8 0x78ce6984a0
	void SetPlayerStasticsTeamInfo(out const StasticsInfo[] reds, out const StasticsInfo[] greens, out const StasticsInfo[] blues);// 0x8a873f8 0x78ce698580
	void SetPlayerName(FString Name);// 0x8565f70 0x78ce698660
	void SetPlayerAssist(int PlayerID, int Number);// 0x8a873f8 0x78ce698740
	void SetOxygenWidgetState(bool State);// 0x856788c 0x78ce698820
	void SetOutJammingOpened(bool bNewIsOutJammingpened);// 0x8561134 0x78ce698900
	void SetOutJammingEnabled(bool bNewIsOutJammingEnabled);// 0x8561084 0x78ce6989e0
	void SetMainInterfaceState(bool State);// 0x8a873f8 0x78ce698ac0
	void SetMainGameWidgetState(bool State);// 0x8565000 0x78ce698ba0
	void SetLoadingUIState(float percent);// 0x856962c 0x78ce698c80
	void SetLevelUpPanelUI(LevelUpPanelUI* UI);// 0x85699dc 0x78ce698d60
	void SetKeepActionTime(float current_time);// 0x85693e8 0x78ce698e40
	void SetJueKongWaitTime(int WaitTime);// 0x8a873f8 0x78ce698f20
	void SetJueKongCanWinNumber(int Number);// 0x8a873f8 0x78ce699000
	void SetItemHotKey(int index, PaperSprite* icon, int Number);// 0x8566dc8 0x78ce695720
	void SetItem(enum bagtype, int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8566254 0x78ce695800
	void SetIsSpring(bool bNewIsSpring);// 0x85621e4 0x78ce6958e0
	void SetHorseState(bool newstate);// 0x85688f4 0x78ce6959c0
	void SetDurableValue(enum bagtype, int BagIndex, int Durable);// 0x85689a4 0x78ce695aa0
	void SetDragItemInfo(int itemnumber, int pickid);// 0x8565d9c 0x78ce695b80
	void SetBuffInfo(out const <int,BuffPointInfo> buff_info);// 0x8a873f8 0x78ce695c60
	void SetBuff(int64 buffID, int numberoflayer, float Time, PaperSprite* icon, float maxCD);// 0x85675e4 0x78ce695d40
	void ResourcesPointTeamChange(int resourcesindex, int TeamId);// 0x8a873f8 0x78ce695e20
	void ResetShowStatisticTimer(float DelayTime);// 0x85612ac 0x78ce695f00
	void ResetPlayerMoveState();// 0x8a873f8 0x78ce695fe0
	void ResetGuideState(bool IsClose);// 0x856208c 0x78ce6960c0
	void RemoveWeaponState(int weaponindex);// 0x85668a8 0x78ce6961a0
	void RemoveSound(int ID);// 0x8564ba0 0x78ce696280
	void RemoveSkillBook(int itemindex);// 0x85657d4 0x78ce696360
	void RemoveSafeItem(int index);// 0x8a873f8 0x78ce696440
	void RemoveItem(enum bagtype, int index);// 0x8566160 0x78ce696520
	void RemoveBuff(int buffID);// 0x856753c 0x78ce696600
	void RemoveAllGameWidgets();// 0x8a873f8 0x78ce6966e0
	void ReleaseSwitchMap();// 0x8569934 0x78ce6967c0
	void PlayWeapon();// 0x8a873f8 0x78ce6968a0
	void PlayProp();// 0x8a873f8 0x78ce696980
	void PlayItemSound(int Type);// 0x8568604 0x78ce696a60
	void PlayerTaoLiSuccess(FString PlayerName);// 0x8a873f8 0x78ce696b40
	void PlayerLockToOther();// 0x8567354 0x78ce696c20
	void PlayerExpression(int ID);// 0x8a873f8 0x78ce696d00
	void PlayerDeath();// 0x8567368 0x78ce696de0
	void PlayEquip();// 0x8a873f8 0x78ce696ec0
	void PlayBook();// 0x8a873f8 0x78ce696fa0
	void PickUpSuccess();// 0x8a873f8 0x78ce697080
	void PickUpOverWeight();// 0x8566c08 0x78ce697160
	void PickGetItem(int item_id, bool Learned);// 0x8568d40 0x78ce697240
	void ParachuteDamaged();// 0x8a873f8 0x78ce697320
	void ParachuteCannotUnEquip();// 0x8a873f8 0x78ce693a40
	void OpenMessageNotice(FString title, FString Info, bool hasCancel, out const delegate callback, float closeTime);// 0x8561cfc 0x78ce693b20
	void OnWinGameLeaveButtonDown();// 0x85696d4 0x78ce693c00
	void OnVisionPlayerIDUpdate();// 0x85611e4 0x78ce693ce0
	void OnUserSettingChanged(enum Type, int Value);// 0x8a873f8 0x78ce693dc0
	void OnSpawnMissile();// 0x856175c 0x78ce693ea0
	void OnSkinsUpdate();// 0x85697a4 0x78ce693f80
	void OnPlayerGameStateUpdate();// 0x8561284 0x78ce694060
	void OnPlaneLandedUpdate();// 0x8561248 0x78ce694140
	void OnPlaneJumpedUpdate();// 0x8561234 0x78ce694220
	void OnHorseRideStateUpdate();// 0x8561270 0x78ce694300
	void OnFollowPlayerIDUpdate();// 0x8561220 0x78ce6943e0
	void OnCurrentWeaponUpdate();// 0x856125c 0x78ce6944c0
	void OnCanOpenParachuteUpdate();// 0x85611f8 0x78ce6945a0
	void OnCanJumpPlaneUpdate();// 0x856120c 0x78ce694680
	void NotifyPickAdDrug(FString Message);// 0x8563e0c 0x78ce694760
	void NotifyJailQueueNum(int Num, int queuenum);// 0x8a873f8 0x78ce694840
	void NotifyJailClosed();// 0x8a873f8 0x78ce694920
	void NotifyAltarOpened();// 0x8a873f8 0x78ce694a00
	void NextLabel();// 0x8564f30 0x78ce694ae0
	void Mobile_Temporary_NoTrap();// 0x8a873f8 0x78ce694bc0
	void Mobile_Temporary_NoDrug();// 0x8a873f8 0x78ce694ca0
	void Mobile_Temporary_NoBook();// 0x8a873f8 0x78ce694d80
	void Mobile_Temporary_HaveTrap(enum bagtype, int index, PaperSprite* icon);// 0x8a873f8 0x78ce694e60
	void Mobile_Temporary_HaveDrug();// 0x8a873f8 0x78ce694f40
	void Mobile_Temporary_HaveBook(enum bagtype, int index);// 0x8a873f8 0x78ce695020
	void MissileHitTarget();// 0x8562560 0x78ce695100
	void MarkWidget(enum MarkType);// 0x8564e60 0x78ce6951e0
	void MapShowActorLocation(int ID, out const Vector Location);// 0x85683fc 0x78ce6952c0
	void MapScale(float Value);// 0x8564f58 0x78ce6953a0
	void MapHideActorLocation(int ID);// 0x8568354 0x78ce695480
	void LeftMouseButtonRelease();// 0x8564f1c 0x78ce695560
	void LastLabel();// 0x8564f44 0x78ce695640
	void KeyCannotDrop();// 0x8a873f8 0x78ce691d60
	void JailQueueRebirth();// 0x8a873f8 0x78ce691e40
	bool IsInitTeamPlayer(int PlayerID);// 0x85650b0 0x78ce691f20
	void InitTouTuoUI(int ID, Vector Location, bool bIsInCave);// 0x85632f8 0x78ce692000
	void InitTouGongUI(int ID, Vector Location, bool bIsInCave);// 0x8563bd8 0x78ce6920e0
	void InitTeamPlayer(int PlayerID, FString Name, int teammode);// 0x8565538 0x78ce6921c0
	void InitSystemMenuUIEvents();// 0x8a873f8 0x78ce6922a0
	void InitStatisticsUIEvents();// 0x8a873f8 0x78ce692380
	void InitSkillUIEvents();// 0x8a873f8 0x78ce692460
	void InitSacrificeUI(int ID, Vector Location);// 0x85638b4 0x78ce692540
	void InitResourcePoint(int ID, out const Vector Location);// 0x8563050 0x78ce692620
	void InitParadropUI(int ID, Vector Location, bool openstate);// 0x8563534 0x78ce692700
	void InitMoWenUI(int ID, Vector Location, float WaitTime);// 0x8564288 0x78ce6927e0
	void InitMapUIEvents();// 0x8a873f8 0x78ce6928c0
	void InitMainGameUIEvents();// 0x8a873f8 0x78ce6929a0
	void InitKeyBoxUI(int ID, Vector Location, bool bIsInCave);// 0x8563678 0x78ce692a80
	void InitFlyPointUI(int ID, Vector Location);// 0x8563d1c 0x78ce692b60
	void InitDragonRockUI(int ID, Vector Location);// 0x8563ae8 0x78ce692c40
	void InitBagUIEvents();// 0x8a873f8 0x78ce692d20
	void InitAndShowStatisticUI(out const GameStatisticInfo GameStatisticInfo, float DelayTime);// 0x8561354 0x78ce692e00
	void InitAdDrugUI(int worldID, int ItemId, Vector Location, bool bIsInCave);// 0x8563fb8 0x78ce692ee0
	void Horizontal(bool State, bool IsRight);// 0x8564d68 0x78ce692fc0
	void HideWaitResurrection();// 0x8a873f8 0x78ce6930a0
	void HideParachuteUI();// 0x8566514 0x78ce693180
	void HideOxygen();// 0x8567864 0x78ce693260
	void HideOpenParachuteTips();// 0x8566564 0x78ce693340
	void HideMapWidget();// 0x8a873f8 0x78ce693420
	void HideMapPanel();// 0x85681e0 0x78ce693500
	void HideMainInterfaceUI();// 0x8a873f8 0x78ce6935e0
	void HideLowHPEffect();// 0x8a873f8 0x78ce6936c0
	void HideJumpPlanTips();// 0x856658c 0x78ce6937a0
	void HideJueKongUI();// 0x8a873f8 0x78ce693880
	void HideInteractive();// 0x8568ae0 0x78ce693960
	void HideCloseParachuteTips();// 0x856653c 0x78ce690080
	bool GetWeaponSocketName(int weaponindex, out FName name1, out FName name2, out int Type);// 0x85665b4 0x78ce690160
	OBStatisticsWidget* GetUOBStatisticsWidgetUI();// 0x8569ab8 0x78ce690240
	WuXiaXCharacter* GetSystemMenuWidget();// 0x8569bf0 0x78ce690320
	StatisticsWidget* GetStatisticsWidget();// 0x8569c8c 0x78ce690400
	WuXiaXCharacter* GetSkillWidget();// 0x8569cf4 0x78ce6904e0
	int[] GetPlayerSkinIds();// 0x85623a0 0x78ce6905c0
	int GetPickIdByIndex(int index);// 0x8565cec 0x78ce6906a0
	OBTargetViewUI* GetOBTargetViewUI();// 0x8569aec 0x78ce690780
	OBOverviewUI* GetOBOverviewUI();// 0x8569b20 0x78ce690860
	OBMapUI* GetOBMapUI();// 0x8569b54 0x78ce690940
	WuXiaMiniMapWidget* GetMapWidget();// 0x8569c24 0x78ce690a20
	MiniMapCtrlUI* GetMapUI();// 0x8569a9c 0x78ce690b00
	MainGameUI* GetMainGameWidget();// 0x8569d28 0x78ce690be0
	WuXiaXCharacter* GetLocalCharacter();// 0x8565c08 0x78ce690cc0
	LoadingUI* GetLoadingWidget();// 0x8569b88 0x78ce690da0
	LevelUpPanelUI* GetLevelUpPanelUI();// 0x8569a80 0x78ce690e80
	WuXiaXCharacter* GetKeepActionWidget();// 0x8569bbc 0x78ce690f60
	int GetIndexByPickId(int pickid);// 0x8565c3c 0x78ce691040
	enum GetCurUIState();// 0x85693a0 0x78ce691120
	enum GetCurrentUIState();// 0x8562544 0x78ce691200
	float GetCurrentCD(int skill_id);// 0x8566f08 0x78ce6912e0
	WuXiaXCharacter* GetBagWidget();// 0x8569cc0 0x78ce6913c0
	void GetAllHotKey(out FString[] hotkeys);// 0x8a873f8 0x78ce6914a0
	AccomplishmentCompleteUI* GetAccomplishmentWidget();// 0x8569c58 0x78ce691580
	void GameStart();// 0x8562294 0x78ce691660
	void GamepadIntoWidget();// 0x8564c5c 0x78ce691740
	void EndKeepAction();// 0x85693d4 0x78ce691820
	void EndFly();// 0x85684f4 0x78ce691900
	void Drop();// 0x8564c48 0x78ce6919e0
	void DeleteTeamPlayerMarkState(int PlayerID);// 0x8562eb8 0x78ce691ac0
	void CreateStatisticsUI();// 0x85699c0 0x78ce691ba0
	void CreateMainGameUI();// 0x8a873f8 0x78ce691c80
	void CreateDebugGameUI();// 0x8a873f8 0x78ce66e780
	void CmdDebugGameUI();// 0x8561298 0x78ce66e860
	void CloseWidget(bool is_set);// 0x8568e54 0x78ce66e940
	void ClearTeamPlayerName(int PlayerID);// 0x8565490 0x78ce66ea20
	void ClearSkillHotKey(int index);// 0x856272c 0x78ce66eb00
	void ClearItemHotKey(int index);// 0x8566d20 0x78ce66ebe0
	void ClearInventory();// 0x8565f5c 0x78ce66ecc0
	void ClearBuffs();// 0x8567528 0x78ce66eda0
	void ClearBlood();// 0x8a873f8 0x78ce66ee80
	void ClearAllSkill();// 0x8562dfc 0x78ce66ef60
	void CheckDamageFullTime();// 0x8562574 0x78ce66f040
	void ChangeSkillCurrentWeapon(enum equiptype);// 0x8562e10 0x78ce66f120
	void ChangePlayerGameUIState(enum newstate);// 0x8a873f8 0x78ce66f200
	void ChangeGameUIState(enum newstate);// 0x85696fc 0x78ce66f2e0
	void ChangeFollowPlayerId(int PlayerID, int followid);// 0x8a873f8 0x78ce66f3c0
	void ChangeEquipWeapon(enum slottype, int64 weaponid, int currentweapontype1, int currentweapontype2);// 0x8562c74 0x78ce66f4a0
	bool CanPlayerInput();// 0x85691c4 0x78ce66f580
	void CanNotShooter();// 0x8566bcc 0x78ce66f660
	void CanNotEquipItem();// 0x8566be0 0x78ce66f740
	void CannotAutoPick(int Type);// 0x8a873f8 0x78ce66f820
	void BPResetLanguageInfo();// 0x8a873f8 0x78ce66f900
	void BP_ShowDamageCircle();// 0x8a873f8 0x78ce66f9e0
	void BP_SetShakingCircle(Vector Location, float Radius);// 0x8a873f8 0x78ce66fac0
	void BP_SetNextCircle(Vector Location, float Radius);// 0x8a873f8 0x78ce66fba0
	void BP_SetFinalCircle(Vector Location, float Radius);// 0x8a873f8 0x78ce66fc80
	void BP_SetCurrentCircle(Vector Location, float Radius);// 0x8a873f8 0x78ce66fd60
	void BP_HUD_GameReady();// 0x8a873f8 0x78ce66fe40
	void BP_HideDamageCircle();// 0x8a873f8 0x78ce66ff20
	void BindItemUIEvent(PlayerItemCtrlComponent* itemctrl);// 0x8a873f8 0x78ce66caa0
	void BeginKeepUseItemAction(enum Type, float actiontime);// 0x8569490 0x78ce66cb80
	void BeginKeepAction(float actiontime);// 0x8569584 0x78ce66cc60
	void BeginFly(out const Vector Start, out const Vector End);// 0x8568508 0x78ce66cd40
	void BagLevelOverWeight();// 0x8566bf4 0x78ce66ce20
	void AutoPickUpdate();// 0x8a873f8 0x78ce66cf00
	void AppendShutDown(FString killname, FString DeadName, int kill_num);// 0x8a873f8 0x78ce66cfe0
	void AppendFirstBlood(FString PlayerName, FString DeadName);// 0x8a873f8 0x78ce66d0c0
	void AppendContinuousKillInfo(FString PlayerName, int killnumber);// 0x8a873f8 0x78ce66d1a0
	void AltarUpdateNum(int ID, int Num);// 0x85643c4 0x78ce66d280
	void AltarInitTag(int ID, Vector Location, int Num);// 0x85644b4 0x78ce66d360
	void AddSkill(int AddSkillId);// 0x85629f0 0x78ce66d440
	void AddSafeItem(int index, int ItemId);// 0x8a873f8 0x78ce66d520
	void AddBloodByDamage(float damage);// 0x8a873f8 0x78ce66d600

--------------------------------
Class: TeamPlayerUIInfo
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefe2a80
	FString PlayerName;//[Offset: 0x8, Size: 0x10] 0x78cefe2b00
	int index;//[Offset: 0x18, Size: 0x4] 0x78cefe2b80
	Color Color;//[Offset: 0x1c, Size: 0x4] 0x78cefe2c00

--------------------------------
Class: OBStasticsInfo
	FString name_;//[Offset: 0x0, Size: 0x10] 0x78cefe4a80
	int kill_;//[Offset: 0x10, Size: 0x4] 0x78cefe4b00
	int damage_;//[Offset: 0x14, Size: 0x4] 0x78cefe4b80
	int rank_;//[Offset: 0x18, Size: 0x4] 0x78cefe4c00
	FString teamid_;//[Offset: 0x20, Size: 0x10] 0x78cefe4c80

--------------------------------
Class: CheckSoundActor.Actor.Object
	int player_id_;//[Offset: 0x220, Size: 0x4] 0x78ceb71300
	int index_;//[Offset: 0x224, Size: 0x4] 0x78ceb71380
	void UpdateLocation(Vector new_location);// 0x8a873f8 0x78ceb658e0
	void Init(int player_id, int index);// 0x8341274 0x78ceb659c0

--------------------------------
Class: LevelUpPanelUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	bool bIsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78cec08c80
	bool OpenSeasonPassSenior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x78cec08d00
	bool ShowInfo();// 0x83ac5f4 0x78cebfc2c0
	void InitShowInfo(int oldLv, int curLv, out const RewardInfo[] rewards, out const enum[] UnlockedSystems);// 0x8a873f8 0x78cebfc3a0
	void CloseSelf();// 0x83ac62c 0x78cebfc480

--------------------------------
Class: OBStatisticsWidget.UserWidget.Widget.Visual.Object
	void InitPlayerInfos(out const OBStasticsInfo[] playerinfos);// 0x8a873f8 0x78cecf1ac0

--------------------------------
Class: OBTargetViewUI.UserWidget.Widget.Visual.Object
	void ShowDamageCircle();// 0x8a873f8 0x78cecf1120
	void SetShingCircle(float VectorPos1X, float VectorPos1Y, float Range);// 0x8a873f8 0x78cecf1200
	void SetNextCircle(float VectorPos2X, float VectorPos2Y, float Range);// 0x8a873f8 0x78cecf12e0
	void SetDamageCircleWaitingTime(float Time);// 0x8a873f8 0x78cecf13c0
	void SetDamageCircleState(enum State);// 0x8a873f8 0x78cecf14a0
	void SetDamageCircleShringkingTime(float CurrentTime, float alltime);// 0x8a873f8 0x78cecf1580
	void SetCurrentCircle(float VectorPos1X, float VectorPos1Y, float Range);// 0x8a873f8 0x78cecf1660
	void OnResetLanguage();// 0x8a873f8 0x78cecf1740
	void HideDamageCircle();// 0x8a873f8 0x78cecf1820
	void AppendKillInfo(FString attack_player_name, FString dead_player_name, out const int cause_id, enum reason);// 0x8a873f8 0x78cecf1900
	void AppendGongGao(enum Type, out const FText Info);// 0x8a873f8 0x78cecf19e0

--------------------------------
Class: OBOverviewUI.UserWidget.Widget.Visual.Object

--------------------------------
Class: OBMapUI.UserWidget.Widget.Visual.Object
	WuXiaMiniMapWidget* Map;//[Offset: 0x260, Size: 0x8] 0x78cece1580
	Vector2D original_level_size_;//[Offset: 0x268, Size: 0x8] 0x78cece1600
	Vector2D original_map_size_;//[Offset: 0x270, Size: 0x8] 0x78cece1680
	Vector2D show_map_size_;//[Offset: 0x278, Size: 0x8] 0x78cece1700
	Vector vector_pos;//[Offset: 0x280, Size: 0xc] 0x78cece1780
	LinearColor Color;//[Offset: 0x28c, Size: 0x10] 0x78cece1800
	Vector2D[] cricle_point_1_;//[Offset: 0x2a0, Size: 0x10] 0x78cebcf600
	Vector vector_pos;//[Offset: 0x2b0, Size: 0xc] 0x78cece1900
	LinearColor Color;//[Offset: 0x2bc, Size: 0x10] 0x78cece1980
	Vector2D[] cricle_point_2_;//[Offset: 0x2d0, Size: 0x10] 0x78cebcf6a0
	Vector center_;//[Offset: 0x2e0, Size: 0xc] 0x78cece1a80
	void SetNextCircle(float VectorPos2X, float VectorPos2Y, float Range);// 0x8a873f8 0x78cecf1ba0
	void SetDamageCircleVisible(bool visible);// 0x8a873f8 0x78cecf1c80
	void SetCurrentCircle(float VectorPos1X, float VectorPos1Y, float Range);// 0x8a873f8 0x78cecae780
	void OnResetLanguage();// 0x8a873f8 0x78cecae860
	void OnInit(Vector2D original_level_size, Vector2D original_map_size, Vector2D show_map_size, Vector Center, Texture2D* chinese_map, Texture2D* english_map, bool can_mark);// 0x8a873f8 0x78cecae940
	void Init(Vector2D original_level_size, Vector2D original_map_size, Vector2D show_map_size, Vector Center, Texture2D* chinese_map, Texture2D* english_map, bool can_mark);// 0x83f086c 0x78cecaea20
	Vector2D GetPositionByVector3(Vector Location);// 0x83f07bc 0x78cecaeb00
	Vector2D GetPercentByVector3(Vector Location);// 0x83f070c 0x78cecaebe0

--------------------------------
Class: MiniMapCtrlUI.UserWidget.Widget.Visual.Object
	WuXiaMiniMapWidget* mini_map_;//[Offset: 0x260, Size: 0x8] 0x78cec9aa80
	void Vertical(bool State, bool IsDown);// 0x8a873f8 0x78ceca1660
	void SetTargetScale(float Value);// 0x8a873f8 0x78ceca1740
	void SetSliderValue(float Value);// 0x8a873f8 0x78ceca1820
	void SetOutJammingOpened(bool bNewIsOutJammingOpened);// 0x8a873f8 0x78ceca1900
	void SetOutJammingEnabled(bool bNewIsOutJammingEnabled);// 0x8a873f8 0x78ceca19e0
	void SetMarkButtonVisibility(bool bVisibility);// 0x8a873f8 0x78ceca1ac0
	void SetEnableTouTuoTip(bool bIsEnableTouTuoTip);// 0x8a873f8 0x78ceca1ba0
	void SetEnabledTouGongTip(bool bIsEnabledTouGongTip);// 0x8a873f8 0x78ceca1c80
	void SetEnabledSacrificeTip(bool bIsEnabledSacrificeTip);// 0x8a873f8 0x78cec8e780
	void SetEnabledResourcePoint(bool bIsEnabledResourcePoint);// 0x8a873f8 0x78cec8e860
	void SetEnabledParadropTip(bool bIsEnabledParadropTip);// 0x8a873f8 0x78cec8e940
	void SetEnabledMoWenTip(bool bIsEnabledMoWenTip);// 0x8a873f8 0x78cec8ea20
	void SetEnabledKeyBoxTip(bool bIsEnabledKeyBoxTip);// 0x8a873f8 0x78cec8eb00
	void SetEnabledFlyPointTip(bool bIsEnabledFlyPointTip);// 0x8a873f8 0x78cec8ebe0
	void SetEnabledEffectPoint(bool bIsEnabledEffectPoint);// 0x8a873f8 0x78cec8ecc0
	void SetEnabledDragonRockTip(bool bIsEnabledDragonRockTip);// 0x8a873f8 0x78cec8eda0
	void SetEnabledAdDrugTip(bool bIsEnabledAdDrugTip);// 0x8a873f8 0x78cec8ee80
	void MarkLocation();// 0x8a873f8 0x78cec8ef60
	void MarkHoverItem(enum MarkType);// 0x8a873f8 0x78cec8f040
	void MapScale(float Value);// 0x8a873f8 0x78cec8f120
	void Init();// 0x8a873f8 0x78cec8f200
	void Horizontal(bool State, bool IsRight);// 0x8a873f8 0x78cec8f2e0
	void GamepadIntoWidget();// 0x8a873f8 0x78cec8f3c0

--------------------------------
Class: PlayerItemCtrlComponent.ActorComponent.Object
	PickItem*[] View_Items;//[Offset: 0xc0, Size: 0x10] 0x78ced26000
	bool is_autopick_update;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x78ced53a00
	int equip_vec_net_00;//[Offset: 0x300, Size: 0x4] 0x78ced53a80
	int equip_vec_net_01;//[Offset: 0x304, Size: 0x4] 0x78ced53b00
	int equip_vec_net_02;//[Offset: 0x308, Size: 0x4] 0x78ced53b80
	int equip_vec_net_03;//[Offset: 0x30c, Size: 0x4] 0x78ced53c00
	int equip_vec_net_04;//[Offset: 0x310, Size: 0x4] 0x78ced53c80
	int equip_vec_net_05;//[Offset: 0x314, Size: 0x4] 0x78ced53d00
	int equip_vec_net_06;//[Offset: 0x318, Size: 0x4] 0x78ced53d80
	int equip_vec_net_07;//[Offset: 0x31c, Size: 0x4] 0x78ced53e00
	int equip_vec_net_08;//[Offset: 0x320, Size: 0x4] 0x78ced53e80
	int equip_vec_net_09;//[Offset: 0x324, Size: 0x4] 0x78ced53f00
	int equip_vec_net;//[Offset: 0x328, Size: 0x4] 0x78ced53f80
	int equip_vec_net;//[Offset: 0x32c, Size: 0x4] 0x78ced54000
	int equip_vec_net;//[Offset: 0x330, Size: 0x4] 0x78ced54080
	int equip_vec_net;//[Offset: 0x334, Size: 0x4] 0x78ced54100
	int equip_vec_net;//[Offset: 0x338, Size: 0x4] 0x78ced54180
	int equip_vec_net_other_00;//[Offset: 0x33c, Size: 0x4] 0x78ced54200
	int equip_vec_net_other_01;//[Offset: 0x340, Size: 0x4] 0x78ced52180
	int equip_vec_net_other_02;//[Offset: 0x344, Size: 0x4] 0x78ced52200
	int equip_vec_net_other_03;//[Offset: 0x348, Size: 0x4] 0x78ced52280
	int equip_vec_net_other_04;//[Offset: 0x34c, Size: 0x4] 0x78ced52300
	int equip_vec_net_other_05;//[Offset: 0x350, Size: 0x4] 0x78ced52380
	int equip_vec_net_other_06;//[Offset: 0x354, Size: 0x4] 0x78ced52400
	int equip_vec_net_other_07;//[Offset: 0x358, Size: 0x4] 0x78ced52480
	int equip_vec_net_other_08;//[Offset: 0x35c, Size: 0x4] 0x78ced52500
	int equip_vec_net_other_09;//[Offset: 0x360, Size: 0x4] 0x78ced52580
	int equip_vec_net_other;//[Offset: 0x364, Size: 0x4] 0x78ced52600
	int equip_vec_net_other;//[Offset: 0x368, Size: 0x4] 0x78ced52680
	int equip_vec_net_other;//[Offset: 0x36c, Size: 0x4] 0x78ced52700
	int equip_vec_net_other;//[Offset: 0x370, Size: 0x4] 0x78ced52780
	int equip_vec_net_other;//[Offset: 0x374, Size: 0x4] 0x78ced52800
	PickItemManager* pick_manager_;//[Offset: 0x3e8, Size: 0x8] 0x78ced52880
	PickItem*[] pick_items_;//[Offset: 0x3f0, Size: 0x10] 0x78ced260a0
	PickItem* current_sight_in_item_;//[Offset: 0x400, Size: 0x8] 0x78ced52980
	int[] old_equip_vec_;//[Offset: 0x408, Size: 0x10] 0x78ced26140
	bool is_operating_bag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1] 0x78ced52a80
	float server_tick_;//[Offset: 0x458, Size: 0x4] 0x78ced52b00
	float client_tick_;//[Offset: 0x45c, Size: 0x4] 0x78ced52b80
	float owner_tick_;//[Offset: 0x460, Size: 0x4] 0x78ced52c00
	float armor;//[Offset: 0x514, Size: 0x4] 0x78ced52c80
	float MaxArmor;//[Offset: 0x518, Size: 0x4] 0x78ced52d00
	void UI_UseSkillBook(enum bag_type, int index);// 0x845ac74 0x78ced49ee0
	void UI_UseItem(enum bag_type, int index, int Num);// 0x845ad68 0x78ced49fc0
	void UI_SwapItemToSlot(enum source_bag_type, int source_index, int Num, enum target_bag_type, int target_index);// 0x845aea4 0x78ced4a0a0
	void UI_SwapItemToBag(enum source_bag_type, int source_index, int Num, enum target_bag_type);// 0x845b120 0x78ced4a180
	void UI_SwapItemHotKey(int SourceIndex, int targetindex);// 0x845a864 0x78ced4a260
	void UI_SetItemHotKey(enum bag_type, int index, int hotkeyindex);// 0x845a9fc 0x78ced4a340
	void UI_RemoveItemHotKey(int index);// 0x845a954 0x78ced4a420
	void UI_DropItem(enum bag_type, int index, int Num);// 0x845ab38 0x78ced4a500
	void UI_AddItemByIndex(int world_id);// 0x845b2a8 0x78ced4a5e0
	void TryWaistTokenPickUp(int world_id);// 0x8457eec 0x78ced4a6c0
	void TryPickUp(int world_id, enum Type, int get_num, enum target_bag_type, int target_index);// 0x8457fd4 0x78ced4a7a0
	void TryOpenPickGroup(int world_id);// 0x8457e04 0x78ced4a880
	void ShowItemDetial(enum bagtype, int index);// 0x8459cc8 0x78ced4a960
	void SetQuickUseItem(const int[] IDs);// 0x8459104 0x78ced4aa40
	void Server_UseItem(enum bag_type, int index, int Num);// 0x8458f84 0x78ced4ab20
	void Server_SwapItem(enum source_bag_type, int source_index, int Num, enum target_bag_type, int target_index);// 0x8458be4 0x78ced4ac00
	void Server_RemoveSafeItem(int index);// 0x84598c8 0x78ced4ace0
	void Server_DropItem(enum bag_type, int index, int Num);// 0x8458e04 0x78ced47400
	void Server_BeginUseItem(enum bag_type, int index, int Num);// 0x8459304 0x78ced474e0
	void Server_AddSafeItem(int index, int ItemId);// 0x84599b0 0x78ced475c0
	void ReSortItems();// 0x8459f78 0x78ced476a0
	void RemoveSafeItem(int index);// 0x8459588 0x78ced47780
	void QuickUseItem(int index);// 0x8459ed0 0x78ced47860
	void PoolDeactivate();// 0x8457c64 0x78ced47940
	void PoolActivate();// 0x8457c80 0x78ced47a20
	void PickUpWaistToken(int world_id);// 0x845b078 0x78ced47b00
	void PickUpItemByIndex(int index);// 0x845a3e4 0x78ced47be0
	void PickUpItem(PickItem* PickItem, int picknum, bool autopick);// 0x845a2a0 0x78ced47cc0
	void OnRep_Equip_Change_Self();// 0x84592dc 0x78ced47da0
	void OnRep_Equip_Change_Other();// 0x84592f0 0x78ced47e80
	void OnRep_Equip_Change();// 0x8459484 0x78ced47f60
	void OnMaxArmorChange();// 0x8457c9c 0x78ced48040
	void OnDragItem(enum bagtype, int index);// 0x8459bd4 0x78ced48120
	void OnArmorChange();// 0x8457cb0 0x78ced48200
	bool IsAutoPickVisible();// 0x845a230 0x78ced482e0
	bool IsAutoPick();// 0x845a268 0x78ced483c0
	bool HasDrug();// 0x8457cfc 0x78ced484a0
	bool HasArmorPiece();// 0x8457cc4 0x78ced48580
	int GetWeaponId(int index);// 0x845a48c 0x78ced48660
	int GetUsing_item_index();// 0x845a6b0 0x78ced48740
	enum GetUseItemState();// 0x845a848 0x78ced48820
	float GetUseItemFullTime();// 0x845a82c 0x78ced48900
	int GetPickIdByIndex(int index);// 0x845a77c 0x78ced489e0
	int GetItemNumById(int item_id);// 0x845a0d0 0x78ced48ac0
	GameItemInfo GetItemInfo(enum bag_type, int index);// 0x8459dbc 0x78ced48ba0
	int GetIndexByPickId(int world_id);// 0x845a6cc 0x78ced48c80
	void Client_UseItem_NotItem(bool Result);// 0x8458670 0x78ced48d60
	void Client_UseItem(bool Result, const GameItemInfo out_item);// 0x8458764 0x78ced48e40
	void Client_UpdateItem(const GameItemInfo[] item_array);// 0x84588c0 0x78ced48f20
	void Client_SwapItem_NotItem(enum operate_type);// 0x84581fc 0x78ced49000
	void Client_SwapItem(enum operate_type, const GameItemInfo[] item_array);// 0x84582e4 0x78ced45720
	void Client_SetItemsHotKey(int64 item1, int64 item2, int64 item3);// 0x8459f8c 0x78ced45800
	void Client_RemoveSafeItem(int index);// 0x8459720 0x78ced458e0
	void Client_PickUpWaistToken(bool Result);// 0x8458a08 0x78ced459c0
	void Client_OpenPickGroup();// 0x84589ac 0x78ced45aa0
	void Client_DropItem_NotItem(bool Result);// 0x8458420 0x78ced45b80
	void Client_DropItem(bool Result, const GameItemInfo out_item);// 0x8458514 0x78ced45c60
	void Client_ClearAllItem(bool isclearappearance);// 0x8459ae0 0x78ced45d40
	void Client_CancelOperating();// 0x8457de8 0x78ced45e20
	void Client_AddSafeItem(int index, int ItemId);// 0x84597d0 0x78ced45f00
	void Client_AddItem_NoItem(enum operate_type);// 0x8458afc 0x78ced45fe0
	void Client_AddItem(enum operate_type, const GameItemInfo[] item_array);// 0x845a53c 0x78ced460c0
	bool CheckUseItemAdDrug();// 0x845a678 0x78ced461a0
	bool CanUseAcc(int ItemId);// 0x8457d34 0x78ced46280
	PickData[] AutoPickUp();// 0x845a180 0x78ced46360
	void AddSafeItem(int index, int ItemId);// 0x8459630 0x78ced46440
	void AddItemByItemId(int ItemId, int Num);// 0x8459498 0x78ced46520
	void AddItem(const int[] IDs);// 0x84591f0 0x78ced46600

--------------------------------
Class: PickItemManager.Actor.Object
	FString LevelLoadName;//[Offset: 0x220, Size: 0x10] 0x78cece7c00
	int area_counter_;//[Offset: 0x230, Size: 0x4] 0x78cece7c80
	<int,SpawnItemData> pick_item_map_;//[Offset: 0x238, Size: 0x50] 0x78cf15f400
	<int,PickBox*> pick_box_map_;//[Offset: 0x288, Size: 0x50] 0x78cf15f4c0
	int pick_id_counter_;//[Offset: 0x2d8, Size: 0x4] 0x78cece7f00
	int group_id_counter_;//[Offset: 0x2dc, Size: 0x4] 0x78cece7f80
	SpawnItemData[] spawn_datas_;//[Offset: 0x2e0, Size: 0x10] 0x78ced211e0
	<int,SpawnItemGroupData> spawn_groups_;//[Offset: 0x2f0, Size: 0x50] 0x78cf15f580
	PickAreaData[] pick_areas_;//[Offset: 0x348, Size: 0x10] 0x78ced21280
	PickItemData[] pick_items_;//[Offset: 0x358, Size: 0x10] 0x78ced21320
	SpawnItemData[] adrug_datas_;//[Offset: 0x368, Size: 0x10] 0x78ced213c0
	int[] adrug_wids_;//[Offset: 0x378, Size: 0x10] 0x78ced21460

--------------------------------
Class: PickBox.Actor.Object
	MeshComponent* meshcomp_;//[Offset: 0x228, Size: 0x8] 0x78cece6b80
	BoxComponent* collision_component_;//[Offset: 0x230, Size: 0x8] 0x78cece6c00
	int player_id_;//[Offset: 0x238, Size: 0x4] 0x78cece6c80
	bool is_picked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78cece6d00
	int world_id_;//[Offset: 0x240, Size: 0x4] 0x78cece6d80
	bool InteractiveUITips(WuXiaXBaseCharacter* Player, out FText text);// 0x83f77d0 0x78cecf1d60
	enum GetInteractiveType(WuXiaXBaseCharacter* Player);// 0x83f7718 0x78cecf1e40
	bool CanInteractive(WuXiaXBaseCharacter* Player, enum Trigger);// 0x83f7934 0x78cecf1f20

--------------------------------
Class: SpawnItemGroupData.SpawnItemData

--------------------------------
Class: PickAreaData
	int area_index;//[Offset: 0x0, Size: 0x4] 0x78cefc5880
	float area_min_chance;//[Offset: 0x4, Size: 0x4] 0x78cefc5900
	float area_max_chance;//[Offset: 0x8, Size: 0x4] 0x78cefc5980
	Vector Location;//[Offset: 0xc, Size: 0xc] 0x78cefc5a00
	Vector box_extent;//[Offset: 0x18, Size: 0xc] 0x78cefc5a80
	int[] pick_group_id;//[Offset: 0x28, Size: 0x10] 0x78cefd0d80
	int[] pick_group_num;//[Offset: 0x38, Size: 0x10] 0x78cefd0e20

--------------------------------
Class: PickItemData
	int pick_list_id;//[Offset: 0x0, Size: 0x4] 0x78cefc5300
	int build_index;//[Offset: 0x4, Size: 0x4] 0x78cefc5380
	float build_min_chance;//[Offset: 0x8, Size: 0x4] 0x78cefc5400
	float build_max_chance;//[Offset: 0xc, Size: 0x4] 0x78cefc5480
	float spawn_radius;//[Offset: 0x10, Size: 0x4] 0x78cefc5500
	Vector Location;//[Offset: 0x14, Size: 0xc] 0x78cefc5580
	Rotator Rotation;//[Offset: 0x20, Size: 0xc] 0x78cefc5600
	int area_index;//[Offset: 0x2c, Size: 0x4] 0x78cefc5680
	bool spawn_group;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cefc5700
	enum pick_quality_;//[Offset: 0x31, Size: 0x1] 0x78cefd0ce0
	bool is_in_cave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x78cefc5800

--------------------------------
Class: PickData
	PickItem* Item;//[Offset: 0x0, Size: 0x8] 0x78cefcec80
	int picknum;//[Offset: 0x8, Size: 0x4] 0x78cefced00

--------------------------------
Class: UI_MobileSkill.UserWidgetBase.UserWidget.Widget.Visual.Object
	<int,UIMobileZhaoShiList> m_Zhaoshi_Info;//[Offset: 0x380, Size: 0x50] 0x78cf15f940
	UISkillInfo[] m_Xinfa_Info;//[Offset: 0x3d0, Size: 0x10] 0x78cedd2720
	UISkillInfo[] m_Shenfa_Info;//[Offset: 0x3e0, Size: 0x10] 0x78cedd27c0
	UISkillInfo[] m_ZaXue_Info;//[Offset: 0x3f0, Size: 0x10] 0x78cedd2860
	UISkillInfo[] m_MiZhuan_Info;//[Offset: 0x400, Size: 0x10] 0x78cedd2900
	int m_CurrentHandMode;//[Offset: 0x438, Size: 0x4] 0x78cedaef00
	int m_Temporary_Change_Slot;//[Offset: 0x43c, Size: 0x4] 0x78cedaef80
	class UI_MobileSkill_StaticNode* m_StaticNode_Template;//[Offset: 0x440, Size: 0x8] 0x78cedd0060
	class UI_MobileSkill_XinFaSlot* m_XinFaSlot_Template;//[Offset: 0x448, Size: 0x8] 0x78cedd0100
	class UI_MobileSkill_ZhaoShiSlot* m_ZhaoShiSlot_Template;//[Offset: 0x450, Size: 0x8] 0x78cedd01a0
	void UseSkill(int skill_id, int skill_type);// 0x84c97ec 0x78cedb7400
	void UnEquipSkill(enum slottype, int slotindex);// 0x8a873f8 0x78cedb74e0
	void ShowUISkillDetail(out const UISkillInfo skillinfo);// 0x8a873f8 0x78cedb75c0
	void SetSkillWeapon(enum slottype, int weapontype);// 0x8a873f8 0x78cedb76a0
	void SetSkillEquipState(out const int[] skillids);// 0x8a873f8 0x78cedb7780
	void SetSkillBook(int itemindex, int skillid, int weapontype, int Level, FString Name, FString Description, PaperSprite* icon, bool isenable);// 0x8a873f8 0x78cedb7860
	void SetPassiveSkill(out const UISkillInfo[] Info);// 0x8a873f8 0x78cedb7940
	void SetEquipSkill(int skillid);// 0x84c9c5c 0x78cedb7a20
	void SetEquipMiZhuan(int skillid);// 0x84c9bb4 0x78cedb7b00
	void SetActiveSkill(out const UISkillInfo[] Info);// 0x8a873f8 0x78cedb7be0
	void SelectWeaponSkillSlot(int slotindex);// 0x84c9d04 0x78cedb7cc0
	void RemoveWeaponSkill(int skillid, int slot_indx);// 0x84c9568 0x78cedb7da0
	void RemoveSkillBook(int skillitemid);// 0x8a873f8 0x78cedb7e80
	void RemovePassiveSkill(int skillid);// 0x8a873f8 0x78cedb7f60
	void RemoveActiveSkill(int skillid);// 0x8a873f8 0x78cedb8040
	void ReLoadConfigShow();// 0x8a873f8 0x78cedb8120
	void RefreshSelectXinFa(int xinfaid);// 0x84c9e68 0x78cedb8200
	void RefreshCurrentXinFa();// 0x84c9f10 0x78cedb82e0
	void Refresh_ZhaoShi(int Type);// 0x84c9dac 0x78cedb83c0
	void Refresh_ZaXue();// 0x84c9f4c 0x78cedb84a0
	void Refresh_XinFa();// 0x84c9f24 0x78cedb8580
	void Refresh_ShenFa();// 0x84c9f38 0x78cedb8660
	void Refresh_MiZhuan();// 0x84c9e54 0x78cedb8740
	void OnSelectXinFa(int skillid, PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78cedb8820
	void OnEquipXinFa(int skillid, PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78cedb8900
	void OnEquipSkill(int slotindex, int skillid, PaperSprite* icon);// 0x8a873f8 0x78cedb89e0
	void OnEquipMiZhuan(int skillid, PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78cedb8ac0
	void InitPassiveSkill(out const UISkillInfo[] skillsinfo);// 0x8a873f8 0x78cedb8ba0
	void InitData(UniformGridPanel* zhaoshi_grid, UniformGridPanel* mizhuan_grid, UniformGridPanel* xinfa_grid, UniformGridPanel* shenfa_grid, UniformGridPanel* zaxue_grid);// 0x84c9f60 0x78cedb8c80
	void InitActiveSkill(out const UISkillInfo[] skillsinfo);// 0x8a873f8 0x78cedb8d60
	void Init();// 0x84ca130 0x78cedb8e40
	void HideUISkillDetail();// 0x8a873f8 0x78cedb8f20
	void GetSkillDetailInfo(int skillid, out FString Name, out FString Description);// 0x84c9a4c 0x78cedb9000
	UISkillInfo[] GetCurrentWeaponSkill();// 0x84c98dc 0x78cedb5720
	void EquipSkill(enum slottype, int slotindex, PaperSprite* icon, bool isenable);// 0x84c9658 0x78cedb5800
	void ClearOhterDelete(int slot_index);// 0x8a873f8 0x78cedb58e0
	void ClearAllSkill();// 0x8a873f8 0x78cedb59c0
	void ChangeSkillCurrentWeapon(enum equiptype);// 0x8a873f8 0x78cedb5aa0
	void AutoShowSkillByWeapons(out const int[] Weapons);// 0x8a873f8 0x78cedb5b80
	void AddPassiveSkill(int skillid);// 0x8a873f8 0x78cedb5c60
	void AddActiveSkill(int skillid);// 0x8a873f8 0x78cedb5d40

--------------------------------
Class: UIMobileZhaoShiList
	UISkillInfo[] m_List;//[Offset: 0x0, Size: 0x10] 0x78cefd4b60

--------------------------------
Class: UI_MobileSkill_StaticNode.UI_MobileUIFrame.UserWidget.Widget.Visual.Object
	int m_SkillID;//[Offset: 0x260, Size: 0x4] 0x78cedae980
	void UpdateUI(PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78cedbaa40
	void UpdateLearned(bool Learned);// 0x8a873f8 0x78cedbab20

--------------------------------
Class: UI_MobileUIFrame.UserWidget.Widget.Visual.Object
	void Open();// 0x84cd818 0x78cedbac00
	void Close();// 0x84cd7fc 0x78cedbace0

--------------------------------
Class: UI_MobileSkill_XinFaSlot.UI_MobileUIFrame.UserWidget.Widget.Visual.Object
	int m_SkillID;//[Offset: 0x260, Size: 0x4] 0x78cedaff80
	void UpdateUI(PaperSprite* icon, FString Name);// 0x8a873f8 0x78cedba7a0
	void SetPossesState(bool bIsPossess);// 0x8a873f8 0x78cedba880
	void Select(bool isselect);// 0x8a873f8 0x78cedba960

--------------------------------
Class: UI_MobileSkill_ZhaoShiSlot.UI_MobileUIFrame.UserWidget.Widget.Visual.Object
	int m_SkillID;//[Offset: 0x260, Size: 0x4] 0x78cedafc00
	bool m_Learned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1] 0x78cedafc80
	void UpdateUI(PaperSprite* icon);// 0x8a873f8 0x78cedba340
	void UpdateSkillProp(int skillprop);// 0x8a873f8 0x78cedba420
	void Learned(bool Learned);// 0x84cd088 0x78cedba500
	bool EquipSkill();// 0x84cd050 0x78cedba5e0
	bool EquipMiZhuan();// 0x84cd018 0x78cedba6c0

--------------------------------
Class: SystemMenuUI.UserWidget.Widget.Visual.Object
	UserSettingWidget* setting_ui_;//[Offset: 0x260, Size: 0x8] 0x78ced98500
	void Vertical(bool State, bool IsDown);// 0x8a873f8 0x78ced8b220
	void UseButtonRelease();// 0x8a873f8 0x78ced8b300
	void SelectButtonRelease();// 0x8a873f8 0x78ced8b3e0
	void Open();// 0x8a873f8 0x78ced8b4c0
	void NextLabel();// 0x8a873f8 0x78ced8b5a0
	void MarkHoverItem(enum MarkType);// 0x8a873f8 0x78ced8b680
	void LastLabel();// 0x8a873f8 0x78ced8b760
	void Init();// 0x8a873f8 0x78ced8b840
	void Horizontal(bool State, bool IsRight);// 0x8a873f8 0x78ced8b920
	void GamepadIntoWidget();// 0x8a873f8 0x78ced8ba00
	void Drop();// 0x8a873f8 0x78ced8bae0
	void CloseWidget();// 0x84aec90 0x78ced8bbc0

--------------------------------
Class: KeepActionUI.UserWidget.Widget.Visual.Object
	void SetKeepAction(float CurrentTime);// 0x8a873f8 0x78cebf9460
	void Init();// 0x8a873f8 0x78cebf9540
	void EndKeepAction();// 0x8a873f8 0x78cebf9620
	void BeginKeepAction(float actiontime);// 0x8a873f8 0x78cebf9700

--------------------------------
Class: ReplayCtrlUI.UserWidget.Widget.Visual.Object
	void ViewPlayer(int ID);// 0x8a873f8 0x78ced6c100
	void SwitchPlayerList();// 0x8a873f8 0x78ced6c1e0
	void StartPlay(float EndTime);// 0x8a873f8 0x78ced6c2c0
	void ReportComplete();// 0x8a873f8 0x78ced6c3a0
	void RemoveViewPlayer(int ID);// 0x8a873f8 0x78ced6c480
	int[] GetCurrentViewPlayerList();// 0x848226c 0x78ced6c560
	void AddViewPlayer(int ID);// 0x8a873f8 0x78ced6c640

--------------------------------
Class: GameDebugUI.UserWidget.Widget.Visual.Object

--------------------------------
Class: PlayerPVPInfo
	int player_id_;//[Offset: 0x0, Size: 0x4] 0x78cefe0c00
	int TeamId;//[Offset: 0x4, Size: 0x4] 0x78cefe0c80
	FString name_;//[Offset: 0x8, Size: 0x10] 0x78cefe0d00
	int kill_number_;//[Offset: 0x18, Size: 0x4] 0x78cefe0d80
	int keep_kill_number_;//[Offset: 0x1c, Size: 0x4] 0x78cefe0e00
	int dead_number_;//[Offset: 0x20, Size: 0x4] 0x78cefe0e80
	int assist_number_;//[Offset: 0x24, Size: 0x4] 0x78cefe0f00
	int resources_point_;//[Offset: 0x28, Size: 0x4] 0x78cefe0f80
	int KillKillsKingNum;//[Offset: 0x2c, Size: 0x4] 0x78cefe1000
	int Exp;//[Offset: 0x30, Size: 0x4] 0x78cefe1080
	float ExpProgress;//[Offset: 0x34, Size: 0x4] 0x78cefcf800
	int Level;//[Offset: 0x38, Size: 0x4] 0x78cefcf880

--------------------------------
Class: LastWinPlayerLeaveUI.UserWidget.Widget.Visual.Object
	void InitEndTime(float Time);// 0x8a873f8 0x78cebf9380

--------------------------------
Class: LoadStreamingLevel.Object
	LevelStreaming* m_Level;//[Offset: 0x28, Size: 0x8] 0x78cec0b400
	LoadProgressManager* m_Progress;//[Offset: 0x38, Size: 0x8] 0x78cec0b480
	void OnLevelLoadedComplete();// 0x83b2b24 0x78cebfb760

--------------------------------
Class: SDKManager.Actor.Object
	FString BilibiliUid;//[Offset: 0x220, Size: 0x10] 0x78ced7db00
	FString BilibiliUserName;//[Offset: 0x230, Size: 0x10] 0x78ced7db80
	FString RechargeAttach;//[Offset: 0x240, Size: 0x10] 0x78ced7dc00
	int RechargeAmount;//[Offset: 0x250, Size: 0x4] 0x78ced7dc80
	int RechargeGameMoney;//[Offset: 0x254, Size: 0x4] 0x78ced7dd00
	FString RechargeProductName;//[Offset: 0x258, Size: 0x10] 0x78ced7dd80
	FString RechargeProductDesc;//[Offset: 0x268, Size: 0x10] 0x78ced7de00
	bool WechatMessage(FString res, out FString openID, out FString AccessToken, out FString refreshToken);// 0x848cde8 0x78ced835e0
	void TSdkOpenMoment(int config_num);// 0x848c934 0x78ced836c0
	void TSdkLogin(FString[] Permissions);// 0x848c9dc 0x78ced837a0
	void SdkWeiXinLogin();// 0x848dd9c 0x78ced83880
	void SdkStopHeart();// 0x848d1fc 0x78ced83960
	void SdkStartHeart();// 0x848d210 0x78ced80080
	void SdkSetRechargeInfo(FString Attach, int Amount, int GameMoney, FString ProductName, FString ProductDesc);// 0x848cfcc 0x78ced80160
	void SdkSendRoleInfo(FString RoleId, FString RoleName, int RoleLevel);// 0x848d4b4 0x78ced80240
	void SdkNotifyZone(FString RoleName, FString RoleId);// 0x848d260 0x78ced80320
	void SdkLogOut();// 0x848d238 0x78ced80400
	void SdkLogin();// 0x848ddb0 0x78ced804e0
	bool SdkIsWXAppInstalledAndSupported();// 0x848d1c4 0x78ced805c0
	void SdkIsRealNameAuth();// 0x848d224 0x78ced806a0
	void SdkIsLogin();// 0x848d24c 0x78ced80780
	void SdkGetVerifiedInfo();// 0x848d48c 0x78ced80860
	void SdkGetNewestVersion();// 0x848d478 0x78ced80940
	void SdkDoPayV5(FString Data);// 0x848d60c 0x78ced80a20
	void SdkDoPayV4(FString Data);// 0x848d6c0 0x78ced80b00
	void SdkDoPayV3(FString Order, FString RoleName, FString RoleId, FString RoleLevel, FString ProductId, int Price, int Amount);// 0x848d774 0x78ced80be0
	void SdkDoPayV2(FString Order, FString RoleName, FString OrderSign, FString NotifyUrl, FString Attach, int Amount);// 0x848da1c 0x78ced80cc0
	void SdkDoGetUserInfo(FString token, FString Ssoid);// 0x848dc7c 0x78ced80da0
	void SdkDoGetTokenAndSsoid();// 0x848dd88 0x78ced80e80
	void SdkDoExit();// 0x848d4a0 0x78ced80f60
	void SdkCreateRole(FString RoleName, FString RoleId);// 0x848d36c 0x78ced81040
	static int64 QuickSDKSubChannel();// 0x848cb90 0x78ced81120
	static int64 QuickSDKLoginType();// 0x848cbc4 0x78ced81200
	static void QQLogin();// 0x848cd9c 0x78ced812e0
	void OnWexinShareBind(bool Result);// 0x8a873f8 0x78ced813c0
	void OnWexinReBind(bool Result);// 0x8a873f8 0x78ced814a0
	void OnWexinLoginBind(FString code);// 0x8a873f8 0x78ced81580
	void OnTapLoginSuccessResp(FString token, FString NameUuid);// 0x848ded8 0x78ced81660
	void OnTapLoginErrorResp(int64 ErrorCode, FString ErrorDescription);// 0x848ddd8 0x78ced81740
	void OnTapLoginCancelResp();// 0x848ddc4 0x78ced81820
	void OnQuickVerifyResp(int ResultCode, int Age);// 0x848e5a0 0x78ced81900
	void OnQuickPayResp(int ResultCode, FString Msg);// 0x848e690 0x78ced819e0
	void OnQuickLogoutResp(int ResultCode);// 0x848e838 0x78ced81ac0
	void OnQuickLoginOrSwitchResp(FString Type, int ResultCode, FString Uid, FString token);// 0x8a873f8 0x78ced81ba0
	void OnQuickExitResp(int ResultCode);// 0x848e790 0x78ced81c80
	void OnQQResultDyn(int Result, FString openID, FString AccessToken, FString ExpiresTime);// 0x8a873f8 0x78ced6e780
	void OnOppoVerified(int code);// 0x848f364 0x78ced6e860
	void OnOppoSendRoleInfo(int code);// 0x848f40c 0x78ced6e940
	void OnOppoPay(FString Msg, int code);// 0x848f4b4 0x78ced6ea20
	void OnOppoLoginResp(FString token, FString Ssoid);// 0x8a873f8 0x78ced6eb00
	void OnOppoGetUserInfo(FString Msg, int code);// 0x848f5b4 0x78ced6ebe0
	void OnMiguPayResp(int ResultCode, FString OrderId, FString ErrorMessage);// 0x848c698 0x78ced6ecc0
	void OnMiguLoginResp(int ResultCode);// 0x848c88c 0x78ced6eda0
	void OnMiguCertifyResp(bool bIsCertified, int AgeRange, FString ErrorMessage);// 0x848c4fc 0x78ced6ee80
	void OnJiuYouPaySuccessResp(FString OrderId, FString OrderAmount, FString PayWay, FString PayWayName);// 0x848e1a0 0x78ced6ef60
	void OnJiuYouPayFailedResp(FString OrderId, FString OrderAmount, FString PayWay, FString PayWayName);// 0x848dfe4 0x78ced6f040
	void OnJiuYouLogoutSuccessResp();// 0x848e4d8 0x78ced6f120
	void OnJiuYouLogoutFailedResp();// 0x848e4c4 0x78ced6f200
	void OnJiuYouLoginSuccessResp(FString Sid);// 0x8a873f8 0x78ced6f2e0
	void OnJiuYouLoginFailedResp(FString ErrMsg);// 0x848e4ec 0x78ced6f3c0
	void OnJiuYouExitSuccessResp(FString Msg);// 0x848e410 0x78ced6f4a0
	void OnJiuYouExitFailedResp(FString ErrMsg);// 0x848e35c 0x78ced6f580
	void OnBilibiliSDKLoginout(FString tip);// 0x848ecb4 0x78ced6f660
	void OnBilibiliPaySuccess(FString OutTradeNo, FString BsTradeNo);// 0x848eee0 0x78ced6f740
	void OnBilibiliPayFailed(FString OutTradeNo, FString ErrorMsg, FString ErrorCode);// 0x848ed7c 0x78ced6f820
	void OnBilibiliOnAccountInvalid();// 0x848ed68 0x78ced6f900
	void OnBilibiliLoginSuccessBP(FString Uid, FString AccessToken);// 0x8a873f8 0x78ced6f9e0
	void OnBilibiliLoginSuccess(FString Uid, FString UserName, FString AccessToken, FString ExpireTimes, FString refreshToken, FString Nickname);// 0x848f0f8 0x78ced6fac0
	void OnBilibiliLoginoutFailed(FString ErrorMsg, FString ErrorCode);// 0x848eba8 0x78ced6fba0
	void OnBilibiliLoginFailed(FString ErrorMsg, FString ErrorCode);// 0x848efec 0x78ced6fc80
	void OnBilibiliIsRealNameAuthSuccesFailed(FString ErrorMsg, FString ErrorCode);// 0x848e9ec 0x78ced6fd60
	void OnBilibiliIsRealNameAuthSucces(bool IsRealNameAuth);// 0x848eaf8 0x78ced6fe40
	void OnBilibiliGetUserInfoSuccess(FString Uid, FString UserName);// 0x848e8e0 0x78ced6ff20
	void OnAntiAddictionKitBind(FString code, FString title, FString Description);// 0x8a873f8 0x78ced6caa0
	void OnAlipayV2Bind(bool Result);// 0x8a873f8 0x78ced6cb80
	void MiguSendOtherMsg(FString Msg);// 0x848c448 0x78ced6cc60
	static bool isQQInstalled();// 0x848cdb0 0x78ced6cd40
	static void HasPayLimit(int64 PayAmount);// 0x848cd04 0x78ced6ce20
	static int64 GetUserAge();// 0x848cbf8 0x78ced6cf00
	static int64 GetRemainTime();// 0x848cc2c 0x78ced6cfe0
	static void AuthIdentity(FString UserId);// 0x848cc60 0x78ced6d0c0

--------------------------------
Class: XHttpManager.Object

--------------------------------
Class: DeviceProfileInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf5d5a80
	int MaxQualityLevel;//[Offset: 0x4, Size: 0x4] 0x78cf5d5b00
	int RecommendQualityLevel;//[Offset: 0x8, Size: 0x4] 0x78cf5d5b80
	bool FocusQuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cf5d5c00
	FString LaunchNotice;//[Offset: 0x10, Size: 0x10] 0x78cf5d5c80
	FString DeviceMake;//[Offset: 0x20, Size: 0x10] 0x78cf5d5d00
	FString DeviceMode;//[Offset: 0x30, Size: 0x10] 0x78cf5d5d80
	FString CPUName;//[Offset: 0x40, Size: 0x10] 0x78cf5d5e00
	bool CloseBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cf5d5e80
	bool FindSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78cf5d5f00
	int HDRIsShow;//[Offset: 0x54, Size: 0x4] 0x78cf5d5f80
	int HDRDefault;//[Offset: 0x58, Size: 0x4] 0x78cf5d6000

--------------------------------
Class: ActivityStateInfo
	enum GroupType;//[Offset: 0x0, Size: 0x1] 0x78cf56c860
	int subType;//[Offset: 0x4, Size: 0x4] 0x78cf5d4800
	enum State;//[Offset: 0x8, Size: 0x1] 0x78cf56c900

--------------------------------
Class: WuXiaXHallSequenceMgr.Actor.Object
	void UpdateSequenceCharacterMeshMaterialColor(SkinColor Color, enum Type);// 0x8a873f8 0x78ce6b4140
	void UpdateSequenceCharacterHatMesh(int HatLevel);// 0x8a873f8 0x78ce6b4220
	void StopSequence();// 0x8a873f8 0x78ce6b4300
	void RotateSequenceCharacter(float Offset);// 0x8a873f8 0x78ce6b43e0
	void ResetSequenceCharacterMeshMaterialColor(enum Type);// 0x8a873f8 0x78ce6b44c0
	void PlaySequence(int SuitId, bool bAllowChangeColor, out const delegate Event);// 0x8a873f8 0x78ce6b45a0
	void PlaybackSequence();// 0x8a873f8 0x78ce6b4680
	void OnSequenceToIdleState();// 0x8a873f8 0x78ce6b4760
	bool IsPlayingSequence();// 0x8a873f8 0x78ce6b4840
	void EnableSequenceRotate();// 0x8a873f8 0x78ce6b4920

--------------------------------
Class: SeasonPassWeekTaskInfo
	int64 ID;//[Offset: 0x0, Size: 0x8] 0x78cf577880
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cf577900
	FString Desc;//[Offset: 0x18, Size: 0x10] 0x78cf577980
	int Week;//[Offset: 0x28, Size: 0x4] 0x78cf577a00
	RewardItem[] TaskRewards;//[Offset: 0x30, Size: 0x10] 0x78cf563a80
	RewardItem[] TaskSeniorRewards;//[Offset: 0x40, Size: 0x10] 0x78cf563b20
	int CurProgress;//[Offset: 0x50, Size: 0x4] 0x78cf577b80
	int MaxProgress;//[Offset: 0x54, Size: 0x4] 0x78cf577c00
	enum Status;//[Offset: 0x58, Size: 0x1] 0x78cf563bc0
	RewardItem CompletePrice;//[Offset: 0x60, Size: 0x78] 0x78cf577d00
	int seasonId;//[Offset: 0xd8, Size: 0x4] 0x78cf577d80

--------------------------------
Class: NpcManager.Actor.Object
	class Actor* NpcPointClass;//[Offset: 0x240, Size: 0x8] 0x78cebcdda0
	class Actor* NpcActorClass;//[Offset: 0x248, Size: 0x8] 0x78cebcde40
	class Actor* NpcTriggerClass;//[Offset: 0x250, Size: 0x8] 0x78cebcdee0
	class Actor* NpcPlayerClass;//[Offset: 0x258, Size: 0x8] 0x78cebcdf80
	<int,NpcPlayerPointElement> npc_point_element_map_;//[Offset: 0x2a8, Size: 0x50] 0x78cf15ae40
	<int,NpcTrigger*> triggers_;//[Offset: 0x2f8, Size: 0x50] 0x78cf15af00
	<int,NpcCharacter*> npc_characters_map_;//[Offset: 0x348, Size: 0x50] 0x78cf15afc0
	int DefaultNpcPoolSize;//[Offset: 0x404, Size: 0x4] 0x78cecb3600
	int[] NpcPoolSizeArray;//[Offset: 0x408, Size: 0x10] 0x78cebce020

--------------------------------
Class: NpcPlayerPointElement
	NpcElement[] element_;//[Offset: 0x0, Size: 0x10] 0x78cee5e7a0

--------------------------------
Class: NpcElement
	Vector location_;//[Offset: 0x0, Size: 0xc] 0x78cefbfb80
	Rotator rotator_;//[Offset: 0xc, Size: 0xc] 0x78cefbfc00
	int[] low_ids_;//[Offset: 0x18, Size: 0x10] 0x78cee5e5c0
	int[] middle_ids_;//[Offset: 0x28, Size: 0x10] 0x78cee5e660
	int[] high_ids_;//[Offset: 0x38, Size: 0x10] 0x78cee5e700

--------------------------------
Class: NpcTrigger.Actor.Object
	int trigger_index_;//[Offset: 0x220, Size: 0x4] 0x78cecb6000
	int min_number_1_;//[Offset: 0x224, Size: 0x4] 0x78cecb6080
	int max_number_1_;//[Offset: 0x228, Size: 0x4] 0x78cecb6100
	int min_number_2_;//[Offset: 0x22c, Size: 0x4] 0x78cecb6180
	int max_number_2_;//[Offset: 0x230, Size: 0x4] 0x78cecb6200
	int min_number_4_;//[Offset: 0x234, Size: 0x4] 0x78cecb6280
	int max_number_4_;//[Offset: 0x238, Size: 0x4] 0x78cecb6300
	float trigger_cd;//[Offset: 0x23c, Size: 0x4] 0x78cecb4280
	BoxComponent* collision_component_;//[Offset: 0x240, Size: 0x8] 0x78cecb4300
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x83da0b8 0x78ceca76a0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x83da248 0x78ceca7780

--------------------------------
Class: NpcCharacter.WuXiaXNpcCharacter.WuXiaXBaseCharacter.Character.Pawn.Actor.Object
	int npc_type_;//[Offset: 0x650, Size: 0x4] 0x78cecb3700
	int npc_move_type_;//[Offset: 0x654, Size: 0x4] 0x78cecb3780
	bool AroundNobodyAllowStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1] 0x78cecb3800
	bool guide_can_run_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 0x1] 0x78cecb3880
	int[] HadEnterForceGuideArray;//[Offset: 0x6c8, Size: 0x10] 0x78cebce0c0
	int[] equip_array_;//[Offset: 0x6e8, Size: 0x10] 0x78cebce160
	Vector spawn_location_;//[Offset: 0x6f8, Size: 0xc] 0x78cecb3a00
	int Target_In_Range;//[Offset: 0x704, Size: 0x4] 0x78cecb3a80
	uint64[] around_player_array_;//[Offset: 0x720, Size: 0x10] 0x78cebce200
	uint64[] around_ignore_player_array_;//[Offset: 0x730, Size: 0x10] 0x78cebce2a0
	bool can_run_ai_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1] 0x78cecb3c00
	FString character_name_;//[Offset: 0x748, Size: 0x10] 0x78cecb3c80
	bool bIsPlayerNPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1] 0x78cecb3d00
	bool bIsShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759, Size: 0x1] 0x78cecb3d80
	enum SignIconType;//[Offset: 0x75a, Size: 0x1] 0x78cebcba00
	int npc_id_;//[Offset: 0x75c, Size: 0x4] 0x78cecb3e80
	int npc_point_id_;//[Offset: 0x760, Size: 0x4] 0x78cecb3f00
	void UpdateHatredValue();// 0x83d5f34 0x78ceca7a20
	void SetDebugNpcInfo(int npc_id);// 0x83d5f48 0x78ceca7b00
	void Server_EnterTrainForceGuide(enum Type);// 0x83d5a70 0x78ceca7be0
	void PoolDeactivate();// 0x83d586c 0x78ceca7cc0
	void PoolActivate();// 0x83d5888 0x78ceca7da0
	void OnTargetSightPerceptionUpdate(Actor* Actor, AIStimulus Stimulus);// 0x83d58a4 0x78ceca7e80
	void KnockDowned();// 0x8a873f8 0x78ceca7f60
	bool IsPlayerInSight();// 0x83d5bd4 0x78ceca8040
	bool IsHadEnterForceGuide(enum Type);// 0x83d5b20 0x78ceca8120
	WuXiaXBaseCharacter* GetHatredTarget(int Range);// 0x83d5d94 0x78ceca8200
	void GetCurDistanceCanReleaseSkill(int Distance, enum SkillPropType, out AISkillInfo[] AISkillInfoArray);// 0x83d5c28 0x78ceca82e0
	void Client_KnockDowned();// 0x83d5bf0 0x78ceca83c0
	void Client_BlockBreaked();// 0x83d5c0c 0x78ceca84a0
	void ClearHatredTarget();// 0x83d5d80 0x78ceca8580
	void BlockBreaked();// 0x8a873f8 0x78ceca8660
	void Anim_EndEffect(int EffectType);// 0x8a873f8 0x78ceca8740
	void Anim_BeginEffect(int EffectType);// 0x8a873f8 0x78ceca8820
	void AddDamageHatredValue(int HatredId, int DamageHatredValue);// 0x83d5e44 0x78ceca8900

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4] 0x78cee9d900
	float ExpirationAge;//[Offset: 0x4, Size: 0x4] 0x78cee9d980
	float Strength;//[Offset: 0x8, Size: 0x4] 0x78cee9da00
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc] 0x78cee9da80
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc] 0x78cee9db00
	FName Tag;//[Offset: 0x24, Size: 0x8] 0x78cee9db80
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78cee9dc00

--------------------------------
Class: AISkillInfo
	int64 skillid;//[Offset: 0x0, Size: 0x8] 0x78cefe4d00
	enum SkillPropType;//[Offset: 0x8, Size: 0x1] 0x78cefd2cc0
	float BestDistance;//[Offset: 0xc, Size: 0x4] 0x78cefe4e00

--------------------------------
Class: LoadAssetManager.Object
	bool LoadAsset(out const SoftObjectPath AssetName, const Object* Actor, const Object* Component);// 0x83b1004 0x78cebfbd80
	bool AsyncLoadAsset(out const SoftObjectPath AssetName, const Object* Actor, const Object* Component);// 0x83b0ea0 0x78cebfbe60

--------------------------------
Class: WidgetManager.DataAsset.Object
	class UserWidget* RootUIClass;//[Offset: 0x30, Size: 0x8] 0x78cedd33a0
	UserWidget* RootUI;//[Offset: 0x38, Size: 0x8] 0x78cedeb700
	<enum,UIInfo> UIMap;//[Offset: 0x40, Size: 0x50] 0x78cee11840

--------------------------------
Class: UIInfo
	class UserWidgetBase* UIClass;//[Offset: 0x0, Size: 0x28] 0x78cefd4980
	enum UISoft;//[Offset: 0x28, Size: 0x1] 0x78cefd4a20
	int UIMaxNum;//[Offset: 0x2c, Size: 0x4] 0x78cefe8000
	UserWidgetBase*[] UICacheTArray;//[Offset: 0x30, Size: 0x10] 0x78cefd4ac0

--------------------------------
Class: CharacterShowManager.Object
	World* TheWorld;//[Offset: 0x28, Size: 0x8] 0x78ceb4e980
	CharacterShowBackGroundActor* BackGroundActor;//[Offset: 0x30, Size: 0x8] 0x78ceb4ea00
	<FString,Material*> BackGroundPicList;//[Offset: 0x38, Size: 0x50] 0x78cf157d80
	ClientLoginPawn* CameraActor;//[Offset: 0x88, Size: 0x8] 0x78ceb4eb80
	<FString,CharacterShowType> CSTypeList;//[Offset: 0x90, Size: 0x50] 0x78cf157e40
	PlayerCaptureActor*[] CharacterList;//[Offset: 0xe0, Size: 0x10] 0x78ceacc5e0
	DisplayActor*[] DisplayActorList;//[Offset: 0xf0, Size: 0x10] 0x78ceacc680
	Vector DisplayActorInitLocation;//[Offset: 0x100, Size: 0xc] 0x78ceb4ee00
	FString CurTypeName;//[Offset: 0x110, Size: 0x10] 0x78ceb4ee80
	CharacterShowInfo[] CharacterShowInfoArray;//[Offset: 0x120, Size: 0x10] 0x78ceacc720
	FString[] HallStreamLevelArray;//[Offset: 0x130, Size: 0x10] 0x78ceacc7c0
	FString CurPresetName;//[Offset: 0x140, Size: 0x10] 0x78ceb4f000
	FString CurCameraName;//[Offset: 0x150, Size: 0x10] 0x78ceb4f080
	void StopPlayExpression(FString PresetName, int index);// 0x8337064 0x78ceb643e0
	void StopPlayAction(FString PresetName, int index);// 0x8336f1c 0x78ceb644c0
	void ShowHeroById(FString PresetName, int HeroId, int index);// 0x833a3e4 0x78ceb645a0
	void ShowDestinyWeapon(FString PresetName, int hero_id, bool show_flag, int index);// 0x8339b74 0x78ceb64680
	void SetMeshMaterialColor(FString PresetName, SkinColor Color, enum Type, int index);// 0x8337cd8 0x78ceb64760
	void SetDisplayActorWeaponLocationAndRotation(FString PresetName, Vector Location, Rotator Rotation, int index);// 0x8336570 0x78ceb64840
	void SetDisplayActorSkinID(FString PresetName, int SkinId, int index);// 0x8339400 0x78ceb64920
	void SetDisplayActorShealthLocationAndRotation(FString PresetName, Vector Location, Rotator Rotation, int index);// 0x83363e0 0x78ceb64a00
	void SetDisplayActorRotation(FString PresetName, Rotator Rot, int index);// 0x8335e54 0x78ceb64ae0
	void SetDisplayActorPosition(FString PresetName, Vector pos, int index);// 0x8337ec8 0x78ceb64bc0
	void SetDisplayActorAutoRotate(FString PresetName, bool bAutoRotate, int index);// 0x8335d0c 0x78ceb64ca0
	void SetDisplayActorAnimationBlueprint(FString PresetName, FString Path, int index);// 0x8336dc4 0x78ceb64d80
	void SetCharacterSkinColorMap(FString PresetName, <int,int> SkinColor, int index);// 0x8337844 0x78ceb64e60
	void SetCharacterPhysicsBlendWeight(FString PresetName, float Value, int index);// 0x8336c30 0x78ceb64f40
	void SetCharacterLocation(FString PresetName, Vector Location, int index);// 0x8336848 0x78ceb65020
	void SetCharacterIsPlayer(FString PresetName, bool bPlayer, int index);// 0x8337b40 0x78ceb65100
	void SetCharacterInitialRotation(FString PresetName, int index);// 0x8336700 0x78ceb651e0
	void SetCharacterCanEnterPerformance(FString PresetName, bool bCanEnterPerformance, int index);// 0x83376ac 0x78ceb652c0
	void RotatePlayerCapture(FString PresetName, int index, float Offset);// 0x8a873f8 0x78ceb653a0
	void ResetPlayerCaptureDetailWidgets();// 0x8335754 0x78ceb65480
	void ReSetMeshMaterialColor(FString PresetName, enum Type, int index);// 0x8337518 0x78ceb65560
	void ResetDisplayActorRotation(FString PresetName, int index);// 0x8336198 0x78ceb65640
	void ResetDisplayActorPosition(FString PresetName, int index);// 0x8336298 0x78ceb61d60
	void ResetDisplayActor(FString PresetName, int index);// 0x8336098 0x78ceb61e40
	void ResetCharacterRotation(FString PresetName, int index);// 0x83359d4 0x78ceb61f20
	void ResetCharacterPosition(FString PresetName, int index);// 0x8335b1c 0x78ceb62000
	void ResetCharacter(FString PresetName, int index);// 0x833588c 0x78ceb620e0
	void ResetCameraRotation(FString PresetName, FString CameraName);// 0x8338ae8 0x78ceb621c0
	void ResetCameraPosition(FString PresetName, FString CameraName);// 0x8338c84 0x78ceb622a0
	void ResetCameraAndLoadUniqueLevel(FString PresetName, FString CameraName, FString LoadLevel);// 0x8338434 0x78ceb62380
	void ResetCameraAndLoadLevel(FString PresetName, FString CameraName, FString LoadLevel, FString UnLoadLevel);// 0x8338670 0x78ceb62460
	void ResetCamera(FString PresetName, FString CameraName);// 0x833894c 0x78ceb62540
	void ResetAllDisplayActor(FString PresetName);// 0x8335f9c 0x78ceb62620
	void ResetAllCharacter(FString PresetName);// 0x8335790 0x78ceb62700
	void PlayerExpression(FString PresetName, int ID, int index);// 0x8337388 0x78ceb627e0
	void PlayerAction(FString PresetName, int ID, int hero_id, int index);// 0x83371ac 0x78ceb628c0
	void PlayDisplayHorseAnimation(FString PresetName, int index);// 0x8336b30 0x78ceb629a0
	void LoadShowUniqueLevel(FString LoadLevel);// 0x8338058 0x78ceb62a80
	void LoadShowAndHideLevel(FString LoadLevel, FString UnLoadLevel);// 0x833810c 0x78ceb62b60
	void LoadOrShowLevel(FString Level);// 0x8338380 0x78ceb62c40
	void InitRotatePlayerCapture(FString PresetName, int index);// 0x8a873f8 0x78ceb62d20
	void InitCameraActor();// 0x8335768 0x78ceb62e00
	void InitBackGroundActor();// 0x833577c 0x78ceb62ee0
	void HideLoadLevel(FString Level);// 0x83382cc 0x78ceb62fc0
	DisplayActor* GetShowingDisplayActor(FString PresetName, int index);// 0x8338e20 0x78ceb630a0
	PlayerCaptureActor* GetShowingCapture(FString PresetName, int index);// 0x8338f78 0x78ceb63180
	Rotator GetPresetDisplayActorRotation(FString PresetName, int index);// 0x8334e84 0x78ceb63260
	Vector GetPresetDisplayActorPosition(FString PresetName, int index);// 0x8334fe0 0x78ceb63340
	Rotator GetPresetCharacterRotation(FString PresetName, int index);// 0x833549c 0x78ceb63420
	Vector GetPresetCharacterPosition(FString PresetName, int index);// 0x83355f8 0x78ceb63500
	Rotator GetPresetCameraRotation(FString PresetName, FString CameraName);// 0x833513c 0x78ceb635e0
	Vector GetPresetCameraPosition(FString PresetName, FString CameraName);// 0x83352ec 0x78ceb636c0
	void GetCurPresetAndCameraName(out FString PresetName, out FString CameraName);// 0x8334d68 0x78ceb637a0
	float GetCharacterAnimLeftTime(FString PresetName, int index);// 0x83369d8 0x78ceb63880
	void CreatePlayerCapture(int index);// 0x8339984 0x78ceb63960
	void CreateDisPlayerActor();// 0x8339970 0x78ceb60080
	void CleanWeapon(FString PresetName, int index);// 0x8339a2c 0x78ceb60160
	void ChangeModelShowTypeByPreset(FString TypeName, FString CameraName);// 0x833a704 0x78ceb60240
	void ChangeModelShowEvent(FString EnterType, FString QuitType);// 0x8a873f8 0x78ceb60320
	void ChangeDisplayActorPath2(FString PresetName, FString ItemPach, int index);// 0x8339590 0x78ceb60400
	void ChangeDisplayActorPath(FString PresetName, FString DisplayWeaponPath, FString DisplayShealthPath, int index);// 0x8339730 0x78ceb604e0
	void ChangeDisplayActorHidden(FString PresetName, bool HiddenFlag, int index);// 0x83390d0 0x78ceb605c0
	void ChangeCharacterSkinColor(FString PresetName, int color_id, int index);// 0x8339ee8 0x78ceb606a0
	void ChangeCharacterSkin(FString PresetName, int skin_id, int index);// 0x833a078 0x78ceb60780
	void ChangeCharacterHidden(FString PresetName, bool HiddenFlag, int index);// 0x8339268 0x78ceb60860
	void ChangeCharacterHeroCurSetting(FString PresetName, int hero_id, int index);// 0x833a574 0x78ceb60940
	void ChangeCharacterFace(FString PresetName, int face_id, int index);// 0x8339d58 0x78ceb60a20
	void ChangeCharacterByHeroID(FString PresetName, int hero_id, int suit_id, int index);// 0x833a208 0x78ceb60b00
	void ChangeBackGroundByPreset(FString PresetName);// 0x833a8a0 0x78ceb60be0
	void ChangeBackGround(Material* Mat);// 0x8335c64 0x78ceb60cc0
	void AddStreamLevel(FString LevelName);// 0x8338218 0x78ceb60da0

--------------------------------
Class: PlayerCaptureActor.Actor.Object
	SkeletalMeshComponent* mesh_;//[Offset: 0x220, Size: 0x8] 0x78ced33a80
	SkeletalMeshComponent* hair_;//[Offset: 0x228, Size: 0x8] 0x78ced33b00
	SkeletalMeshComponent* hat_;//[Offset: 0x230, Size: 0x8] 0x78ced33b80
	SkeletalMeshComponent* veil_;//[Offset: 0x238, Size: 0x8] 0x78ced33c00
	SkeletalMeshComponent* shawl_;//[Offset: 0x240, Size: 0x8] 0x78ced33c80
	SkeletalMeshComponent* leg_;//[Offset: 0x248, Size: 0x8] 0x78ced33d00
	SkeletalMeshComponent* body_;//[Offset: 0x250, Size: 0x8] 0x78ced33d80
	SkeletalMeshComponent* foot_;//[Offset: 0x258, Size: 0x8] 0x78ced33e00
	SkeletalMeshComponent*[] weapon_show_component_;//[Offset: 0x260, Size: 0x10] 0x78ced22180
	SkeletalMeshComponent* range_weapon_component;//[Offset: 0x270, Size: 0x8] 0x78ced33f00
	SkeletalMeshComponent* range_weapon_component;//[Offset: 0x278, Size: 0x8] 0x78ced33f80
	SkeletalMeshComponent* range_weapon_component;//[Offset: 0x280, Size: 0x8] 0x78ced34000
	SkeletalMeshComponent* range_weapon_component;//[Offset: 0x288, Size: 0x8] 0x78ced34080
	int skin_color_id_;//[Offset: 0x290, Size: 0x4] 0x78ced34100
	int hair_color_id_;//[Offset: 0x294, Size: 0x4] 0x78ced34180
	int face_id_;//[Offset: 0x298, Size: 0x4] 0x78ced34200
	int hair_id_;//[Offset: 0x29c, Size: 0x4] 0x78ced32180
	enum sex_type_;//[Offset: 0x2a0, Size: 0x1] 0x78ced22220
	int hero_id_;//[Offset: 0x2a4, Size: 0x4] 0x78ced32280
	int skin_id_;//[Offset: 0x2a8, Size: 0x4] 0x78ced32300
	int user_id;//[Offset: 0x2ac, Size: 0x4] 0x78ced32380
	int veil_id_;//[Offset: 0x2b0, Size: 0x4] 0x78ced32400
	int[] weapon_ids_;//[Offset: 0x2b8, Size: 0x10] 0x78ced222c0
	int[] weapon_skin_ids_;//[Offset: 0x2c8, Size: 0x10] 0x78ced22360
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78ced32580
	<int,int> skin_color_map;//[Offset: 0x2f8, Size: 0x50] 0x78cf15ee00
	bool bIsPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x78ced32700
	bool bCanEnterPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1] 0x78ced32780
	float PhysicsBlendWeight;//[Offset: 0x34c, Size: 0x4] 0x78ced32800
	<int,NiagaraComponent*> PlayerShowWeaponEffectFXComponent;//[Offset: 0x350, Size: 0x50] 0x78cf15eec0
	<int,NiagaraComponent*> PlayerShowEffectFxComponent;//[Offset: 0x3a0, Size: 0x50] 0x78cf15ef80
	int PosIndex;//[Offset: 0x3f0, Size: 0x4] 0x78ced32a80
	FString PresetName;//[Offset: 0x3f8, Size: 0x10] 0x78ced32b00
	LoadAnimAndMesh* LoadAnimAndMesh;//[Offset: 0x4a0, Size: 0x8] 0x78ced32b80
	void UpdateWeaponEffect(SkeletalMeshComponent* Mesh, int index, FString EffectRes, FString EffectSocket);// 0x840a62c 0x78cecfe160
	void UpdateShowWeapon(bool bShow);// 0x8a873f8 0x78cecfe240
	void UpdatePlayerEffect();// 0x840a55c 0x78cecfe320
	void TYGUpdateWeaponAttach(int handheldtype);// 0x8a873f8 0x78cecfe400
	void StopPlayExpression();// 0x8a873f8 0x78cecfe4e0
	void StopPlayAllAction(float InBlendOutTime);// 0x840ad58 0x78cecfe5c0
	void StopPlayAction();// 0x840ae00 0x78cecfe6a0
	void ShowHair();// 0x840b924 0x78cecfadc0
	void ShowFace();// 0x840b938 0x78cecfaea0
	void SetWeaponMaterialInstance(SkeletalMeshComponent* Mesh, int SkinId, int index);// 0x840a40c 0x78cecfaf80
	void SetWeapon(int skin_id, int index);// 0x840bf60 0x78cecfb060
	void SetUserID(int ID);// 0x8a873f8 0x78cecfb140
	void SetSkinColorMap(<int,int> SkinColor);// 0x840c140 0x78cecfb220
	void SetSkinColor(int ColorId);// 0x840bcec 0x78cecfb300
	void SetMeshMaterialColor(SkinColor Color, enum Type);// 0x840b81c 0x78cecfb3e0
	void SetIsPlayer(bool bPlayer);// 0x840c3fc 0x78cecfb4c0
	void SetHat(int skin_id);// 0x840be84 0x78cecfb5a0
	void SetFace(int FaceID);// 0x840bc44 0x78cecfb680
	void SetEquip(int skin_id, int index);// 0x840c050 0x78cecfb760
	void SetCaptureActorRotation(Rotator Value);// 0x840a884 0x78cecfb840
	void SetCaptureActorHiddenInGame(bool bCaptureActorHidden);// 0x840b5c4 0x78cecfb920
	void SetCanEnterPerformance(bool bCanEnter);// 0x840c4a8 0x78cecfba00
	bool SetBpAnim();// 0x840a3d4 0x78cecfbae0
	void SetActorPhysicsBlendWeight(float Value);// 0x840a92c 0x78cecfbbc0
	void ResetSkinColor();// 0x840b760 0x78cecfbca0
	void ResetSimulatePhysics();// 0x840b724 0x78cecfbd80
	void ResetPhysicsAsset();// 0x840b738 0x78cecfbe60
	void ReSetMeshMaterialColor(enum Type);// 0x840b774 0x78cecfbf40
	void ResetHairColor();// 0x840b74c 0x78cecfc020
	void ResetDetailWidgetPosition();// 0x8a873f8 0x78cecfc100
	void ResetCaptureActorRotation();// 0x840a870 0x78cecfc1e0
	void PlaySlotMontagen(FString Action, FName StarSoltName);// 0x840afb8 0x78cecfc2c0
	void PlaySkill(int skillid);// 0x840b3e8 0x78cecfc3a0
	void PlayMontagen(FString Action);// 0x840b100 0x78cecfc480
	void PlayerExpression(int ID, int index);// 0x8a873f8 0x78cecfc560
	void PlayerAnimationBlueprint(FString anim);// 0x8a873f8 0x78cecfc640
	void PlayBuffStart(int buffID);// 0x8a873f8 0x78cecfc720
	void PlayBuffEnd(int buffID);// 0x8a873f8 0x78cecfc800
	void PlayBuff(int buffID);// 0x840af10 0x78cecfc8e0
	void PlayAnimation(FString anim, bool bShowWeapon, FString StarSoltName);// 0x840b1fc 0x78cecfc9c0
	void OnEntranceAnimEnd();// 0x840ad44 0x78cecf90e0
	void NameHiddenInGame(bool bHide);// 0x8a873f8 0x78cecf91c0
	void MontagePlay(AnimMontage* Montage, float PlayRate, float StartingPostion, FName StartingSection);// 0x8a873f8 0x78cecf92a0
	AnimSequenceBase* LoadPerformAnim2(int SkinId);// 0x840a9d4 0x78cecf9380
	AnimSequenceBase* LoadPerformAnim1(int SkinId);// 0x840aa84 0x78cecf9460
	AnimSequenceBase* LoadIdleAnim(int SkinId);// 0x840ab34 0x78cecf9540
	AnimSequenceBase* LoadEntranceAnim(int SkinId);// 0x840abe4 0x78cecf9620
	void LoadComplete(<int64,PlayerEquipInfo> load_asset_map);// 0x840a238 0x78cecf9700
	int GetWeaponType();// 0x840bf2c 0x78cecf97e0
	int GetWeaponIndexById(int skin_id);// 0x840b674 0x78cecf98c0
	int GetUserID();// 0x8a873f8 0x78cecf99a0
	<enum,int> GetPreviewMap();// 0x840b490 0x78cecf9a80
	bool GetIsPlayer(bool bPlayer);// 0x840c354 0x78cecf9b60
	int GetHallShowHatId(int SkinId);// 0x840ac94 0x78cecf9c40
	float GetAnimLeftTime();// 0x8a873f8 0x78cecf9d20
	void DisableWeaponEffect(int EquipKey);// 0x840a584 0x78cecf9e00
	void DisablePlayerEffect();// 0x840a548 0x78cecf9ee0
	void DisableAllWeaponEffect();// 0x840a570 0x78cecf9fc0
	void DelayHiddenMesh(float delay_time, bool isHidden);// 0x840ae14 0x78cecfa0a0
	void ChangeSkinList(const int[] skin_list, bool bForceShowMesh);// 0x840b94c 0x78cecfa180
	void ChangeHeroSkin(int HeroId, int SkinId, const int[] skin_list);// 0x840baa4 0x78cecfa260
	void ChangeHeroNotify(enum HeroType, int SkinId, bool bHaveEntranceAnim);// 0x8a873f8 0x78cecfa340
	void ChangeHero(int HeroId, int SkinId);// 0x840bd94 0x78cecfa420
	void BP_UpdateChatStatus(int PlayerID, bool chatting);// 0x8a873f8 0x78cecfa500

--------------------------------
Class: LoadAnimAndMesh.Object

--------------------------------
Class: PlayerEquipInfo

--------------------------------
Class: CharacterShowBackGroundActor.StaticMeshActor.Actor.Object

--------------------------------
Class: ClientLoginPawn.Pawn.Actor.Object
	bool is_always_talk_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x78ceb7a100
	bool is_in_voice_channel_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 0x1] 0x78ceb7a180

--------------------------------
Class: CharacterShowType
	Vector PlayerCaptureOffset;//[Offset: 0x0, Size: 0xc] 0x78cefbc780
	Rotator PlayerCaptureRotation;//[Offset: 0xc, Size: 0xc] 0x78cefbc800
	Vector CameraCaptureOffset;//[Offset: 0x18, Size: 0xc] 0x78cefbc880
	Vector CameraAbsLocation;//[Offset: 0x24, Size: 0xc] 0x78cefbc900
	Rotator CameraCaptureRotation;//[Offset: 0x30, Size: 0xc] 0x78cefbc980

--------------------------------
Class: CharacterShowInfo
	FString PresetName;//[Offset: 0x0, Size: 0x10] 0x78cefbe580
	CameraInfo[] CameraInfos;//[Offset: 0x10, Size: 0x10] 0x78cee5f100
	Transform[] PlayerTransforms;//[Offset: 0x20, Size: 0x10] 0x78cee5f1a0
	Transform[] DisplayActorTransforms;//[Offset: 0x30, Size: 0x10] 0x78cee5f240

--------------------------------
Class: CameraInfo
	FString CameraName;//[Offset: 0x0, Size: 0x10] 0x78cefbe600
	Transform CameraTransform;//[Offset: 0x10, Size: 0x30] 0x78cefbe680

--------------------------------
Class: MiGuAchievementManager.Actor.Object
	void RequestServerAchievementData();// 0x83cbff0 0x78cec8f4a0
	void OnMiguSetAchievementResp(FString Result);// 0x83cc2cc 0x78cec8f580
	void OnMiguQueryAchievementPercentageResp(float AchievementPercentage, FString Msg);// 0x83cc380 0x78cec8f660
	void MiguSetAchievement(FString AchievementId, int Type, float Value);// 0x83cc004 0x78cec8f740
	void MiguQueryAllAchievement();// 0x83cc2b8 0x78cec8f820
	void MiguQueryAchievementPercentage(FString AchievementId);// 0x83cc150 0x78cec8f900
	void MiguQueryAchievement(FString AchievementId);// 0x83cc204 0x78cec8f9e0

--------------------------------
Class: MiGuAchievement
	FString AchievementId;//[Offset: 0x0, Size: 0x10] 0x78cf5bf800
	float AchievementValue;//[Offset: 0x10, Size: 0x4] 0x78cf5bf880

--------------------------------
Class: GVoiceManager.Object
	FString m_RoomName;//[Offset: 0x78, Size: 0x10] 0x78cec00600
	FString m_TeamName;//[Offset: 0x88, Size: 0x10] 0x78cec00680
	FString m_Account;//[Offset: 0x98, Size: 0x10] 0x78cec00700

--------------------------------
Class: BegSignRewardInfo
	int64 PoolID;//[Offset: 0x0, Size: 0x8] 0x78cf5bfd00
	int64 ItemId;//[Offset: 0x8, Size: 0x8] 0x78cf5bfd80
	FString ItemName;//[Offset: 0x10, Size: 0x10] 0x78cf5bfe00
	enum ItemTableType;//[Offset: 0x20, Size: 0x1] 0x78cf56b3c0
	int ItemNum;//[Offset: 0x24, Size: 0x4] 0x78cf5bff00
	int ItemRarity;//[Offset: 0x28, Size: 0x4] 0x78cf5bff80
	float BaseWeight;//[Offset: 0x2c, Size: 0x4] 0x78cf5be780

--------------------------------
Class: PoolInfo
	int64 BegSignTimes;//[Offset: 0x0, Size: 0x8] 0x78cf5be880
	int64 BegSignSecondTimes;//[Offset: 0x8, Size: 0x8] 0x78cf5be900
	int64 BegSignResidueTimes;//[Offset: 0x10, Size: 0x8] 0x78cf5be980
	int64 BegSignSecondResidueTimes;//[Offset: 0x18, Size: 0x8] 0x78cf5bea00
	FString BegSignDescription;//[Offset: 0x20, Size: 0x10] 0x78cf5bea80
	int64 SignType;//[Offset: 0x30, Size: 0x8] 0x78cf5beb00
	int64 SignNum;//[Offset: 0x38, Size: 0x8] 0x78cf5beb80

--------------------------------
Class: PoolTimes
	int LeftOver;//[Offset: 0x0, Size: 0x4] 0x78cf5bed00
	int LeftOver2;//[Offset: 0x4, Size: 0x4] 0x78cf5bed80

--------------------------------
Class: RechargeInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf59d980
	int RMB;//[Offset: 0x4, Size: 0x4] 0x78cf59da00
	int Gold;//[Offset: 0x8, Size: 0x4] 0x78cf59da80
	int Extra;//[Offset: 0xc, Size: 0x4] 0x78cf59db00
	FString icon;//[Offset: 0x10, Size: 0x10] 0x78cf59db80
	FString ProductId;//[Offset: 0x20, Size: 0x10] 0x78cf59dc00

--------------------------------
Class: SkyTriggerBox.TriggerBox.TriggerBase.Actor.Object
	float SetTime;//[Offset: 0x228, Size: 0x4] 0x78ced95780
	int PriorityLevel;//[Offset: 0x22c, Size: 0x4] 0x78ced95800
	<enum,SkyInfoUpdate> SkyInfoMap;//[Offset: 0x230, Size: 0x50] 0x78cf15e080

--------------------------------
Class: SkyInfoUpdate
	float SkyIntensity;//[Offset: 0x0, Size: 0x4] 0x78cf5bd700
	float SunIntensity;//[Offset: 0x4, Size: 0x4] 0x78cf5bd780
	float MoonIntensity;//[Offset: 0x8, Size: 0x4] 0x78cf5bd800

--------------------------------
Class: LightTriggerBox.TriggerBox.TriggerBase.Actor.Object
	bool bIsHDRTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78cec09e00
	SkyLight* SkyLight;//[Offset: 0x230, Size: 0x8] 0x78cec09e80
	float SkyLightIntensity;//[Offset: 0x238, Size: 0x4] 0x78cec09f00
	LinearColor SkyLightColor;//[Offset: 0x23c, Size: 0x10] 0x78cec09f80
	TextureCube* SkyLightCubemap;//[Offset: 0x250, Size: 0x8] 0x78cec0a000
	byte SkyLightSourceType;//[Offset: 0x258, Size: 0x1] 0x78cec0a080
	DirectionalLight* DirectionalLight;//[Offset: 0x260, Size: 0x8] 0x78cec0a100
	float DirectionalLightIntensity;//[Offset: 0x268, Size: 0x4] 0x78cec0a180
	LinearColor DirectionalLightColor;//[Offset: 0x26c, Size: 0x10] 0x78cec0a200
	Rotator DirectionalLightRotaion;//[Offset: 0x27c, Size: 0xc] 0x78cec0a280
	PostProcessVolume* PostProcessVolume;//[Offset: 0x288, Size: 0x8] 0x78cec0a300
	float BloomIntensity;//[Offset: 0x290, Size: 0x4] 0x78cec0a380
	float ExposureCompensation;//[Offset: 0x294, Size: 0x4] 0x78cec0a400
	float ExposureMinBrightness;//[Offset: 0x298, Size: 0x4] 0x78cec0a480
	float ExposureMaxBrightness;//[Offset: 0x29c, Size: 0x4] 0x78cec0a500
	float ImageEffectsVignetteIntensity;//[Offset: 0x2a0, Size: 0x4] 0x78cec08480
	float WhiteBalanceTemp;//[Offset: 0x2a4, Size: 0x4] 0x78cec08500
	Vector4 GlobalSaturation;//[Offset: 0x2b0, Size: 0x10] 0x78cec08580
	Vector4 GlobalContrast;//[Offset: 0x2c0, Size: 0x10] 0x78cec08600
	ExponentialHeightFog* ExponentialHeightFog;//[Offset: 0x2d0, Size: 0x8] 0x78cec08680
	Transform FogTransform;//[Offset: 0x2e0, Size: 0x30] 0x78cec08700
	float FogDensity;//[Offset: 0x310, Size: 0x4] 0x78cec08780
	float FogHeightFalloff;//[Offset: 0x314, Size: 0x4] 0x78cec08800
	LinearColor FogInscatteringColor;//[Offset: 0x318, Size: 0x10] 0x78cec08880
	float ForMaxOpacity;//[Offset: 0x328, Size: 0x4] 0x78cec08900
	float StartDistance;//[Offset: 0x32c, Size: 0x4] 0x78cec08980
	void UpdateInfo();// 0x83ad170 0x78cebfbf40
	void SetValueFromName(FName PropertyName, float Value);// 0x83ad184 0x78cebfc020
	void GetValueFromName(FName PropertyName, out float Value);// 0x83ad278 0x78cebfc100

--------------------------------
Class: LightDebugWidget.UserWidget.Widget.Visual.Object
	void UpdateInfo();// 0x8a873f8 0x78cebfc1e0

--------------------------------
Class: LuaObjectManager.LuaObjectBase.Object
	LuaNetMessageHandler* NetMessageHandler;//[Offset: 0x30, Size: 0x8] 0x78cec0c200
	LuaConfigTableLoader* ConfigTableLoader;//[Offset: 0x38, Size: 0x8] 0x78cec0c280
	LuaNetMessageHandler* GetNetMessageHandler();// 0x83b550c 0x78cebfdb40
	LuaConfigTableLoader* GetConfigTableManager();// 0x83b54d8 0x78cebfdc20

--------------------------------
Class: LuaObjectBase.Object
	Object* Owner;//[Offset: 0x28, Size: 0x8] 0x78cec0aa00
	void SetOwner(Object* InOwner);// 0x83b4f58 0x78cebfe400
	void ReceiveInit();// 0x83b5044 0x78cebfe4e0
	void Init();// 0x83b5060 0x78cebfe5c0
	Object* GetOwner();// 0x83b5008 0x78cebfe6a0

--------------------------------
Class: LuaNetMessageHandler.LuaObjectBase.Object
	delegate OnParsedReceivedMessage;//[Offset: 0x30, Size: 0x10] 0x78cec0c400
	delegate OnActivityStateNotifyResponded;//[Offset: 0x40, Size: 0x10] 0x78cec0c480
	delegate OnSentMsg;//[Offset: 0x50, Size: 0x10] 0x78cec0c500
	WuXiaXGameInstance* WuXiaXGameInstance;//[Offset: 0xb0, Size: 0x8] 0x78cec0c580
	void TakeTreasureRequest();// 0x83b44dc 0x78cebfdd00
	void RequestMessage(int Type, int Parameter);// 0x83b4504 0x78cebfdde0
	void GetWeekActRewardRequest(int Type);// 0x83b4434 0x78cebfdec0
	FString[] GetActivityState();// 0x83b431c 0x78cebfdfa0
	void DoTreasureRequest();// 0x83b44f0 0x78cebfe080
	void ActivitySubmitRequest(int ID, int Type);// 0x83b45f4 0x78cebfe160
	void ActivityDataRequest(int Type);// 0x83b46e4 0x78cebfe240

--------------------------------
Class: LuaConfigTableLoader.LuaObjectBase.Object
	<FString,LuaPassValue> K2_GetConfigTable(FString TableName);// 0x83b3a84 0x78cebfe320

--------------------------------
Class: LuaPassValue
	FString[] Param;//[Offset: 0x0, Size: 0x10] 0x78cf56fd80

--------------------------------
Class: TAServer.Object
	FString ta_file_path;//[Offset: 0x28, Size: 0x10] 0x78ceda4c80
	bool enable_test;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ceda4d00
	void UserAddDeathTaoLi(FString AccountId, FString DistinctId);// 0x84b58d0 0x78ced8ebe0
	void UserAddDeathLite(FString AccountId, FString DistinctId);// 0x84b57c4 0x78ced8ecc0
	void UserAddDeathLeiTai(FString AccountId, FString DistinctId);// 0x84b56b8 0x78ced8eda0
	void TrackWindPointFly(FString AccountId, FString DistinctId, FString WindPointName);// 0x84b262c 0x78ced8ee80
	void TrackWaistToken(FString AccountId, FString DistinctId, FString Status);// 0x84b3bf8 0x78ced8ef60
	void TrackUseSkill(FString AccountId, FString DistinctId, FString GameMode, int skillid, int TargetPlayerId, int UseTime);// 0x84b5c98 0x78ced8f040
	void TrackTrajectory(FString AccountId, FString DistinctId, int AreaID, FString GameMode, bool bEnter, bool bFirst);// 0x84b5edc 0x78ced8f120
	void TrackTest();// 0x84af84c 0x78ced8f200
	void TrackStartSwim(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, out const Vector Location);// 0x84b10cc 0x78ced8f2e0
	void TrackSkillDamage(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int skillid, int TargetPlayerId, int ArmorDamage, int BeforeChangeArmorValue, int AfterChangeArmorValue, FString ArmorDamageFormula, int HpDamage, int BeforeChangeHpValue, int AfterChangeHpValue, FString HpDamageFormula);// 0x84b3458 0x78ced8f3c0
	void TrackServerAssassinationTarget(FString AccountId, FString DistinctId, FString GameMode, bool isfall, bool IsSuccess, float damage, int64 begintime, int64 actiontime, int64 TargetId, int64 PlayerID);// 0x84b0d58 0x78ced8f4a0
	void TrackSaveSquad(FString AccountId, FString DistinctId, int SavePlayerID);// 0x84b59dc 0x78ced8f580
	void TrackRebirth(FString AccountId, FString DistinctId, FString RebirthType);// 0x84b5b34 0x78ced8f660
	void TrackQuitPlayerBehavior(FString AccountId, FString DistinctId, FString GameMode);// 0x84b4210 0x78ced8f740
	void TrackPlayerUnRide(FString AccountId, FString DistinctId, FString GameMode, int HorseID, FString OldRideState, FString NewRideState);// 0x84b4374 0x78ced8f820
	void TrackPlayerRide(FString AccountId, FString DistinctId, FString GameMode, int HorseID, FString OldRideState, FString NewRideState);// 0x84b45d4 0x78ced8f900
	void TrackPlayerOnPlane(FString AccountId, FString DistinctId, FString GameMode);// 0x84b4834 0x78ced8f9e0
	void TrackPlayerKnockDown(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int64 CauseSkillId, int TargetPlayerId, int CauseItemId, FString CauseReason);// 0x84b4998 0x78ced8fac0
	void TrackPlayerKill(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int64 CauseSkillId, int TargetPlayerId, int CauseItemId, FString CauseReason);// 0x84b5028 0x78ced8fba0
	void TrackPlayerGameStartLeitai(FString AccountId, FString DistinctId, FString GameMode, FString PeopleMode, int gameId, int Hero);// 0x84b7bd4 0x78ced8fc80
	void TrackPlayerGameStart(FString AccountId, FString DistinctId, FString GameMode, FString PeopleMode, int TeamNum, int Hero, int gameId);// 0x84b7e24 0x78ced8fd60
	void TrackPlayerGameEndLeitai(FString AccountId, FString DistinctId, FString GameMode, FString PeopleMode, int Rank, int KillNum, int RankScore, int AddRankScore, int RescueCount, int EvaluateScore, float GameTime, int HeroId, int gameId);// 0x84b6918 0x78ced8fe40
	void TrackPlayerGameEnd(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int TeamNum, int Rank, int KillNum, int RescueNum, int ResurrectionNum, int RewardMoney, int RewardExperience, int CurrentScore, int HeroId, float GameTime, float MoveDistance, int MaxEquipmentWeaponLevel);// 0x84b73c0 0x78ced8ff20
	void TrackPlayerFightInfoLeitai(FString AccountId, FString DistinctId, out const int[] skills, out const int[] Weapons, out const int[] items, int gameId);// 0x84b3984 0x78ced8caa0
	void TrackPlayerDying(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int64 CauseSkillId, int CausePlayerId, int CauseItemId, FString CauseReason);// 0x84b4ce0 0x78ced8cb80
	void TrackPlayerDeath(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int64 CauseSkillId, int CausePlayerId, int CauseItemId, FString CauseReason);// 0x84b5370 0x78ced8cc60
	void TrackPlayBeAssassination(FString AccountId, FString DistinctId, FString GameMode, bool isfall, bool IsSuccess, int64 actiontime);// 0x84b0270 0x78ced8cd40
	void TrackPlayAssassinationTarget(FString AccountId, FString DistinctId, FString GameMode, bool isfall, bool IsSuccess, int64 actiontime);// 0x84b04b8 0x78ced8ce20
	void TrackOpenParadrop(FString AccountId, FString DistinctId, FString GameMode, const int ParadropIndex);// 0x84b247c 0x78ced8cf00
	void TrackOpenDragonRock(FString AccountId, FString DistinctId, FString DragonRockName);// 0x84b2790 0x78ced8cfe0
	void TrackLearnInternal(FString AccountId, FString DistinctId, FString GameMode, FString InternalName);// 0x84b28f4 0x78ced8d0c0
	void TrackJumpPoint(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, out const Vector Point);// 0x84b6128 0x78ced8d1a0
	void TrackJailStatus(FString AccountId, FString DistinctId, FString Status);// 0x84b3d5c 0x78ced8d280
	void TrackHpChange(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int HpChangeValue, int BeforeChangeHpValue, int AfterChangeHpValue, FString CauseReason, int CausePlayerId, int CauseSkillId, int CauseItemId);// 0x84b3028 0x78ced8d360
	void TrackGVoiceInfo(FString AccountId, FString DistinctId, FString RoomName, FString TeamName, bool bIsReconnect);// 0x84b206c 0x78ced8d440
	void TrackGetGameItem(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int ItemId, FString itemtype, FString ItemFromType, int ItemNum, int DCStage);// 0x84b6578 0x78ced8d520
	void TrackGangUp(FString AccountId, FString DistinctId, FString GameMode, int WithPlayerId, int GangUpLevel, out const FString[] GangUpActions);// 0x84b2ab0 0x78ced8d600
	void TrackGameStart(FString GameMode, FString PeopleMode, int AllPlayerNum, out int[] playerIDs, out int[] HeroIDs, out int[] PlayerScore, int gameId);// 0x84b7914 0x78ced8d6e0
	void TrackGameEndLeitai(FString GameMode, FString PeopleMode, int WinnnerTeam, int MatchNum, out int[] playerIDs, out int[] HeroIDs, float GameTime, int gameId);// 0x84b6d84 0x78ced8d7c0
	void TrackGameEnd(FString GameMode, FString PeopleMode, int AllPlayerNum, out int[] playerIDs, int AllKillNum, int AllRescueNum, int AllResurrectionNum, out int[] PlayerScore, float GameTime);// 0x84b707c 0x78ced8d8a0
	void TrackFinishBeAssassination(FString AccountId, FString DistinctId, FString GameMode);// 0x84affa8 0x78ced8d980
	void TrackFinishAssassination(FString AccountId, FString DistinctId, FString GameMode);// 0x84b010c 0x78ced8da60
	void TrackFindAdvancedDrug(FString AccountId, FString DistinctId, FString GameMode, int DrugItemId, bool bIsExisted);// 0x84b227c 0x78ced8db40
	void TrackEquipment(FString AccountId, FString DistinctId, int eEquipmentID, int DCStage, FString GameMode);// 0x84b6380 0x78ced8dc20
	void TrackEnterJail(FString AccountId, FString DistinctId);// 0x84b3ec0 0x78ced8dd00
	void TrackConsumeItem(FString AccountId, FString DistinctId, int ItemId, int Num, int DCStageD, FString GameMode);// 0x84b3fcc 0x78ced8dde0
	void TrackChangePlayerMotionState(FString AccountId, FString DistinctId, FString GameMode, FString OldPlayerMotionState, FString NewPlayerMotionState);// 0x84afa1c 0x78ced8dec0
	void TrackChangePlayerGameState(FString AccountId, FString DistinctId, FString GameMode, FString OldPlayerGameState, FString NewPlayerGameState);// 0x84afc30 0x78ced8dfa0
	void TrackChangePlayerFightState(FString AccountId, FString DistinctId, FString GameMode, FString NewPlayerFightState);// 0x84af860 0x78ced8e080
	void TrackChangeAttack(FString AccountId, FString DistinctId, FString GameMode, const int AttackChangeValue, const int ExtraAttackChangeValue, FString ChangeReason);// 0x84b1324 0x78ced8e160
	void TrackBuffUnEffectChangeSpeed(FString AccountId, FString DistinctId, FString GameMode, int ChangeSpeedValue, int BeforeChangeSpeedValue, int AfterChangeSpeedValue, FString ChangeSpeedFormula, const int buffID, const int buffLayer);// 0x84b1574 0x78ced8e240
	void TrackBuffUnEffectChangeOutPower(FString AccountId, FString DistinctId, FString GameMode, int ChangeOutPowerValue, const int buffID, const int buffLayer);// 0x84b1be4 0x78ced8e320
	void TrackBuffEffectChangeSpeed(FString AccountId, FString DistinctId, FString GameMode, int ChangeSpeedValue, int BeforeChangeSpeedValue, int AfterChangeSpeedValue, FString ChangeSpeedFormula, const int buffID, const int buffLayer);// 0x84b18ac 0x78ced8e400
	void TrackBuffEffectChangeOutPower(FString AccountId, FString DistinctId, FString GameMode, int ChangeOutPowerValue, const int buffID, const int buffLayer);// 0x84b1e28 0x78ced8e4e0
	void TrackBeginBeAssassination(FString AccountId, FString DistinctId, FString GameMode, bool isfall, bool IsSuccess, float damage, int64 begintime, int64 actiontime, int64 PlayerID);// 0x84b0700 0x78ced8e5c0
	void TrackBeginAssassinationTarget(FString AccountId, FString DistinctId, FString GameMode, bool isfall, bool IsSuccess, float damage, int64 begintime, int64 actiontime, int64 TargetId);// 0x84b0a2c 0x78ced8e6a0
	void TrackAssassinationMove(FString AccountId, FString DistinctId, FString GameMode);// 0x84afe44 0x78ced8adc0
	void TrackArmorChange(FString AccountId, FString DistinctId, FString GameMode, FString teammode, int gameId, int ArmorChangeValue, int BeforeChangeArmorValue, int AfterChangeArmorValue);// 0x84b2d40 0x78ced8aea0
	bool Initialize(int gameId, WuXiaXGameInstance* GameIns);// 0x84b80c0 0x78ced8af80
	void Flush();// 0x84af838 0x78ced8b060
	void Close();// 0x84af824 0x78ced8b140

--------------------------------
Class: SignInInfo
	int Day;//[Offset: 0x0, Size: 0x4] 0x78cf5b1980
	RewardItem[] RewardArray;//[Offset: 0x8, Size: 0x10] 0x78cf5668c0
	RewardItem[] CompensateArray;//[Offset: 0x18, Size: 0x10] 0x78cf566960
	FString RewardIcon;//[Offset: 0x28, Size: 0x10] 0x78cf5b1b00

--------------------------------
Class: ShopDiscountGroupInfo
	int DiscountId;//[Offset: 0x0, Size: 0x4] 0x78cf5b0800
	ShopDiscountInfo[] ShopDiscountInfoArray;//[Offset: 0x8, Size: 0x10] 0x78cf567040
	int64 PutTime;//[Offset: 0x18, Size: 0x8] 0x78cf5b0a80
	int64 OutTime;//[Offset: 0x20, Size: 0x8] 0x78cf5b0b00
	int64 LastTime;//[Offset: 0x28, Size: 0x8] 0x78cf5b0b80

--------------------------------
Class: ShopDiscountInfo
	int ShopId;//[Offset: 0x0, Size: 0x4] 0x78cf5b0880
	enum MoneyType;//[Offset: 0x4, Size: 0x1] 0x78cf566fa0
	int MoneyPrice;//[Offset: 0x8, Size: 0x4] 0x78cf5b0980

--------------------------------
Class: SeasonPassInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf59eb00
	RewardItem Price;//[Offset: 0x8, Size: 0x78] 0x78cf59eb80
	FString Desc;//[Offset: 0x80, Size: 0x10] 0x78cf59ec00
	FString SeasonName;//[Offset: 0x90, Size: 0x10] 0x78cf59ec80
	RewardItem[] Reward;//[Offset: 0xa0, Size: 0x10] 0x78cf567360
	int MaxLevel;//[Offset: 0xb0, Size: 0x4] 0x78cf59ed80

--------------------------------
Class: RankRewardInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf59e680
	int seasonId;//[Offset: 0x4, Size: 0x4] 0x78cf59e700
	int RankScore;//[Offset: 0x8, Size: 0x4] 0x78cf59c680
	int RankScoreTotal;//[Offset: 0xc, Size: 0x4] 0x78cf59c700
	enum RankRewardPinZhi;//[Offset: 0x10, Size: 0x1] 0x78cf567a40
	FString RewardDesc;//[Offset: 0x18, Size: 0x10] 0x78cf59c800
	RewardItem Reward;//[Offset: 0x28, Size: 0x78] 0x78cf59c880

--------------------------------
Class: SeasonTaskInfo
	FString preName;//[Offset: 0x0, Size: 0x10] 0x78cf59ce00
	int PreArg;//[Offset: 0x10, Size: 0x4] 0x78cf59ce80
	FString taskName;//[Offset: 0x18, Size: 0x10] 0x78cf59cf00
	int taskArg;//[Offset: 0x28, Size: 0x4] 0x78cf59cf80
	int RewardId;//[Offset: 0x2c, Size: 0x4] 0x78cf59d000
	int RewardNum;//[Offset: 0x30, Size: 0x4] 0x78cf59d080
	PaperSprite* taskIcon;//[Offset: 0x38, Size: 0x8] 0x78cf59d100

--------------------------------
Class: ProficiencyInfo
	int LevelProficiency;//[Offset: 0x0, Size: 0x4] 0x78cf59bf00
	int LevelTotalProficiency;//[Offset: 0x4, Size: 0x4] 0x78cf59bf80
	FString LevelProficiencyTitle;//[Offset: 0x8, Size: 0x10] 0x78cf59c000
	int Level;//[Offset: 0x18, Size: 0x4] 0x78cf59c080

--------------------------------
Class: PreyPoolInfo
	int64 ID;//[Offset: 0x0, Size: 0x8] 0x78cf57ba00
	int GashaponConsumeId;//[Offset: 0x8, Size: 0x4] 0x78cf57ba80
	int GashaponConsumeNum;//[Offset: 0xc, Size: 0x4] 0x78cf57bb00
	int GashaponConsumeTenId;//[Offset: 0x10, Size: 0x4] 0x78cf57bb80
	int GashaponConsumeTenNum;//[Offset: 0x14, Size: 0x4] 0x78cf57bc00
	FString FixDesc;//[Offset: 0x18, Size: 0x10] 0x78cf57bc80
	int FixCount;//[Offset: 0x28, Size: 0x4] 0x78cf57bd00
	int FixCount2;//[Offset: 0x2c, Size: 0x4] 0x78cf57bd80

--------------------------------
Class: HorseInfo
	int HorseID;//[Offset: 0x0, Size: 0x4] 0x78cf597f80
	float SprintSpeed;//[Offset: 0x4, Size: 0x4] 0x78cf598000
	float MaxSpeed;//[Offset: 0x8, Size: 0x4] 0x78cf598080
	float UseCD;//[Offset: 0xc, Size: 0x4] 0x78cf598100
	float MaxUseCD;//[Offset: 0x10, Size: 0x4] 0x78cf598180
	FString SkeletalMesh;//[Offset: 0x18, Size: 0x10] 0x78cf598200

--------------------------------
Class: HeroPropertyInfo
	float HP;//[Offset: 0x0, Size: 0x4] 0x78cf596f80
	float LockTargetDistance;//[Offset: 0x4, Size: 0x4] 0x78cf597000
	float SprintSpeed;//[Offset: 0x8, Size: 0x4] 0x78cf597080

--------------------------------
Class: SelectableTextureInfo
	SelectableTextureItem[] infos;//[Offset: 0x0, Size: 0x10] 0x78cf5665a0

--------------------------------
Class: SelectableTextureItem
	int headId;//[Offset: 0x0, Size: 0x4] 0x78cf593600
	enum HeadType;//[Offset: 0x4, Size: 0x1] 0x78cf566460
	enum headInfoType;//[Offset: 0x5, Size: 0x1] 0x78cf566500
	FString texturePath;//[Offset: 0x8, Size: 0x10] 0x78cf593780
	FString headName;//[Offset: 0x18, Size: 0x10] 0x78cf593800
	FString headDescription;//[Offset: 0x28, Size: 0x10] 0x78cf593880
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cf593900
	bool isNPCHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78cf593980

--------------------------------
Class: GoodsJumpInfo
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78cf563e40
	FString text;//[Offset: 0x8, Size: 0x10] 0x78cf594100
	FString JumpTip;//[Offset: 0x18, Size: 0x10] 0x78cf594180
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf594200

--------------------------------
Class: FlyToolDefine
	int SkinId;//[Offset: 0x0, Size: 0x4] 0x78cf57e800
	int buffID;//[Offset: 0x4, Size: 0x4] 0x78cf57e880
	float JumpHorizontalSpeed;//[Offset: 0x8, Size: 0x4] 0x78cf57e900
	float JumpNormalSpeed;//[Offset: 0xc, Size: 0x4] 0x78cf57e980
	float JumpMinSpeed;//[Offset: 0x10, Size: 0x4] 0x78cf57ea00
	float JumpMaxSpeed;//[Offset: 0x14, Size: 0x4] 0x78cf57ea80
	float JumpHorizontalAcceleration;//[Offset: 0x18, Size: 0x4] 0x78cf57eb00
	float JumpVerticalAcceleration;//[Offset: 0x1c, Size: 0x4] 0x78cf57eb80
	float GlidingHorizontalSpeed;//[Offset: 0x20, Size: 0x4] 0x78cf57ec00
	float GlidingHorizontalMaxSpeed;//[Offset: 0x24, Size: 0x4] 0x78cf57ec80
	float GlidingHorizontalMinSpeed;//[Offset: 0x28, Size: 0x4] 0x78cf57ed00
	float GlidingNormalSpeed;//[Offset: 0x2c, Size: 0x4] 0x78cf57ed80
	float GlidingMinSpeed;//[Offset: 0x30, Size: 0x4] 0x78cf57ee00
	float GlidingMaxSpeed;//[Offset: 0x34, Size: 0x4] 0x78cf57ee80
	float GlidingHorizontalAcceleration;//[Offset: 0x38, Size: 0x4] 0x78cf57ef00
	float GlidingVerticalAcceleration;//[Offset: 0x3c, Size: 0x4] 0x78cf57ef80
	float GlidingRotateSpeed;//[Offset: 0x40, Size: 0x4] 0x78cf57f000
	FString BuffName;//[Offset: 0x48, Size: 0x10] 0x78cf57f080
	FString BuffDescribe;//[Offset: 0x58, Size: 0x10] 0x78cf57f100
	FString BuffIcon;//[Offset: 0x68, Size: 0x10] 0x78cf57f180

--------------------------------
Class: BountyOrderInfo
	int season_id;//[Offset: 0x0, Size: 0x4] 0x78cf578a80
	int Level;//[Offset: 0x4, Size: 0x4] 0x78cf578b00
	int next_level_exp;//[Offset: 0x8, Size: 0x4] 0x78cf578b80
	RewardItem normal_reward;//[Offset: 0x10, Size: 0x78] 0x78cf578c00
	RewardItem advance_reward1;//[Offset: 0x88, Size: 0x78] 0x78cf578c80
	RewardItem advance_reward2;//[Offset: 0x100, Size: 0x78] 0x78cf578d00
	int upgrade_consume;//[Offset: 0x178, Size: 0x4] 0x78cf578d80
	int special_show;//[Offset: 0x17c, Size: 0x4] 0x78cf578e00

--------------------------------
Class: TrainHeroInfo
	int HeroId;//[Offset: 0x0, Size: 0x4] 0x78cf577680
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cf577700
	FString icon;//[Offset: 0x18, Size: 0x10] 0x78cf577780

--------------------------------
Class: HeroMasteryItem
	int Level;//[Offset: 0x0, Size: 0x4] 0x78cf576680
	FString IconPath;//[Offset: 0x8, Size: 0x10] 0x78cf576700
	FString Name;//[Offset: 0x18, Size: 0x10] 0x78cf576780
	int RewardId;//[Offset: 0x28, Size: 0x4] 0x78cf576800
	int RewardNum;//[Offset: 0x2c, Size: 0x4] 0x78cf576880

--------------------------------
Class: AchievementRewardItem
	int id_;//[Offset: 0x0, Size: 0x4] 0x78cf574500
	int level_;//[Offset: 0x4, Size: 0x4] 0x78cf574580
	int experience_;//[Offset: 0x8, Size: 0x4] 0x78cf574600
	int64 propsReward_;//[Offset: 0x10, Size: 0x8] 0x78cf574680
	int64 achievementFather_;//[Offset: 0x18, Size: 0x8] 0x78cf574700
	int propsNumber_;//[Offset: 0x20, Size: 0x4] 0x78cf574780
	int achievementScore_;//[Offset: 0x24, Size: 0x4] 0x78cf574800
	FString moneyaryReward_;//[Offset: 0x28, Size: 0x10] 0x78cf574880
	int rewardExp_;//[Offset: 0x38, Size: 0x4] 0x78cf574900
	FString iconPath_;//[Offset: 0x40, Size: 0x10] 0x78cf574980
	FString desc_;//[Offset: 0x50, Size: 0x10] 0x78cf574a00
	FString name_;//[Offset: 0x60, Size: 0x10] 0x78cf572380

--------------------------------
Class: HttpResponse.HttpBase
	int ResponseCode;//[Offset: 0x34, Size: 0x4] 0x78cf570480
	FString ResponseMessage;//[Offset: 0x38, Size: 0x10] 0x78cf570500
	HttpContent* Content;//[Offset: 0x48, Size: 0x8] 0x78cf570580

--------------------------------
Class: HttpBase
	FString URL;//[Offset: 0x0, Size: 0x10] 0x78cf570600
	FString[] AllHeaders;//[Offset: 0x10, Size: 0x10] 0x78cf5601a0
	FString ContentType;//[Offset: 0x20, Size: 0x10] 0x78cf570700
	int ContentLength;//[Offset: 0x30, Size: 0x4] 0x78cf570780

--------------------------------
Class: HttpContent.Object
	byte[] GetContent();// 0x8581c68 0x78ce704f40

--------------------------------
Class: WuXiaXGameStateBase.GameStateBase.Info.Actor.Object
	int64 time_net_delay_;//[Offset: 0x270, Size: 0x8] 0x78ce6ae500
	int64 time_client_server_delay_;//[Offset: 0x278, Size: 0x8] 0x78ce6ae580
	int64 game_total_time;//[Offset: 0x280, Size: 0x8] 0x78ce6ae600
	int64 game_countdown_time;//[Offset: 0x288, Size: 0x8] 0x78ce6ae680
	bool is_end_game_count_down;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78ce6ae700
	int64 endgame_countdown_time;//[Offset: 0x298, Size: 0x8] 0x78ce6ac680
	int WeatherFlag;//[Offset: 0x2a0, Size: 0x4] 0x78ce6ac700
	bool game_fight_started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1] 0x78ce6ac780
	class WuXiaParadrop* paradrop_class_;//[Offset: 0x2a8, Size: 0x8] 0x78ceddda80
	class PickItem* pickgroup_class_;//[Offset: 0x2b0, Size: 0x8] 0x78cedddb20
	class PickItem* PickItemClass;//[Offset: 0x2b8, Size: 0x8] 0x78cedddbc0
	class ClientParadrop* clientparadrop_class_;//[Offset: 0x2c0, Size: 0x8] 0x78cedddc60
	class FakeCharacter* FakePlayerBlueprint;//[Offset: 0x2c8, Size: 0x28] 0x78cedddd00
	class FakeCharacter* FakePlayerAndHorseBlueprint;//[Offset: 0x2f0, Size: 0x28] 0x78cedddda0
	class WuXiaOutJamming* OutJammingClass;//[Offset: 0x318, Size: 0x8] 0x78ceddde40
	LevelAreaBox*[] LevelAreaBoxs;//[Offset: 0x320, Size: 0x10] 0x78cedddee0
	bool isDCStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78ce6ac880
	bool isNxtStageInfovalid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1] 0x78ce6ac900
	int DCStage;//[Offset: 0x334, Size: 0x4] 0x78ce6ac980
	bool isNxtFinalShrink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x78ce6aca00
	bool isNxtStageShrinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1] 0x78ce6aca80
	int64 DCNxtStageStartTime;//[Offset: 0x340, Size: 0x8] 0x78ce6acb00
	int64 DCNxtStageWaitTime;//[Offset: 0x348, Size: 0x8] 0x78ce6acb80
	int64 DCNxtStageShrinkTime;//[Offset: 0x350, Size: 0x8] 0x78ce6acc00
	enum RoomType;//[Offset: 0x358, Size: 0x1] 0x78cedddf80
	FString GameReplayUniqueID;//[Offset: 0x360, Size: 0x10] 0x78ce6acd00
	enum GameSquadMode;//[Offset: 0x370, Size: 0x1] 0x78cedde020
	enum GameMode;//[Offset: 0x371, Size: 0x1] 0x78cedde0c0
	int64 ServerRecordStartTime;//[Offset: 0x378, Size: 0x8] 0x78ce6ace80
	<int,WuXiaXBaseCharacter*> player_character_map_;//[Offset: 0x398, Size: 0x50] 0x78cee11e40
	<int,WuXiaXBaseCharacter*> player_npc_map_;//[Offset: 0x3e8, Size: 0x50] 0x78cee11f00
	<int,WuXiaXHorse*> horse_map_;//[Offset: 0x438, Size: 0x50] 0x78cee11fc0
	<int,PickItem*> pick_item_map_;//[Offset: 0x488, Size: 0x50] 0x78cee12080
	<int,KillInfo> kill_info_;//[Offset: 0x4d8, Size: 0x50] 0x78cee12140
	int live_num_;//[Offset: 0x528, Size: 0x4] 0x78ce6ad400
	int64 fight_same_time_;//[Offset: 0x530, Size: 0x8] 0x78ce6ad480
	int64 ReplayTimeToDemoTime_Plus;//[Offset: 0x540, Size: 0x8] 0x78ce6ad500
	ReplayDLDInfo repDldStateInfo;//[Offset: 0x548, Size: 0x18] 0x78ce6ad580
	Actor* OutJammingActor;//[Offset: 0x560, Size: 0x8] 0x78ce6ad600
	void SetGameLoginId();// 0x85583b8 0x78ce6b5560
	void OnRepSameTime();// 0x8556900 0x78ce6b5640
	void OnRepLiveNum();// 0x8556914 0x78ce6b1d60
	void OnRepGameFightStarted();// 0x8556b48 0x78ce6b1e40
	void OnRepGameCountDown();// 0x8556b34 0x78ce6b1f20
	void OnRep_GameReplayUniqueID();// 0x85569dc 0x78ce6b2000
	void OnRep_DLD_ClientReplayInfo(out const ReplayDLDInfo Old);// 0x8556850 0x78ce6b20e0
	void OnLoadAreaLevel(LevelAreaBox* LevelArea);// 0x8556b5c 0x78ce6b21c0
	void Mul_WinActorLeave();// 0x85578d0 0x78ce6b22a0
	void Mul_UpdateCanWinNumber(int Number);// 0x8557820 0x78ce6b2380
	void Mul_TeamPointInfo(int red, int blue, int green);// 0x855737c 0x78ce6b2460
	void Mul_SpawnParadrop(int64 begintime, Vector beginlocation, Vector EndLocation, int globalID);// 0x8556e28 0x78ce6b2540
	void Mul_ShowJueKong(int64 StartTime, int64 WaitTime);// 0x8556c28 0x78ce6b2620
	void Mul_SetPVPGameTime(int64 start_time);// 0x85574c0 0x78ce6b2700
	void Mul_RemovePlayerAnimus(int64 player_list);// 0x85581e0 0x78ce6b27e0
	void Mul_PlayerTaoLiSuccess(FString PlayerName);// 0x8557764 0x78ce6b28c0
	void Mul_PlayerAnimus(const int64[] player_list_id, const int64[] player_list_pos);// 0x8558290 0x78ce6b29a0
	void Mul_EndGameCountDown(const int[] lifeplayers, int64 begintime);// 0x8556d20 0x78ce6b2a80
	void Mul_DC_StartWaitNextCircle(int64 begintime, int64 waittingtime, int64 currentradius, int64 nextradius, int64 clocationX, int64 clocationY, int64 clocationZ, int64 nlocationX, int64 nlocationY, int64 nlocationZ);// 0x8557b44 0x78ce6b2b60
	void Mul_DC_StartShringk(int64 begintime, int64 waittingtime, int64 shringkingtime);// 0x8557a00 0x78ce6b2c40
	void Mul_DC_StartLastCircle(int64 StartTime, int64 WaitTime);// 0x85578ec 0x78ce6b2d20
	void Mul_DC_StartDamageAll();// 0x85579e4 0x78ce6b2e00
	void Mul_DC_Start(int64 locationX, int64 locationY, int64 locationZ, int64 ScaleX, int64 ScaleY, int64 ScaleZ);// 0x8557e98 0x78ce6b2ee0
	void Mul_DC_Close();// 0x85580b8 0x78ce6b2fc0
	void Mul_AppendTongZhi(const FText Info);// 0x85580d4 0x78ce6b30a0
	void Mul_AppendShutDown(FString killname, FString DeadName, int kill_num);// 0x8557108 0x78ce6b3180
	void Mul_AppendKillInfo(FString attack_player_name, FString dead_player_name, int game_room_id, int attack_id, enum reason);// 0x8557570 0x78ce6b3260
	void Mul_AppendFirstBlood(FString PlayerName, FString DeadName);// 0x8557268 0x78ce6b3340
	void Mul_AppendContinuousKillInfo(int KillPlayerId, FString KillPlayerName, int KillPlayerNum);// 0x8556fb4 0x78ce6b3420
	bool IsGameMode(enum Mode);// 0x8556928 0x78ce6b3500
	WuXiaXBaseCharacter* GetViewPlayerById(int ID);// 0x85586b8 0x78ce6b35e0
	WuXiaXBaseCharacter* GetViewNpcById(int ID);// 0x8558608 0x78ce6b36c0
	float GetTimeToNxtStage();// 0x8556a58 0x78ce6b37a0
	enum GetRecentGameState();// 0x8556c0c 0x78ce6b3880
	PickItem* GetPickItemById(int ID);// 0x8558474 0x78ce6b3960
	float GetNxtStageWaitTime();// 0x8556a24 0x78ce6b0080
	float GetNxtStageShrinkTime();// 0x85569f0 0x78ce6b0160
	int GetNetTimeMS32();// 0x8558768 0x78ce6b0240
	int64 GetNetTimeMS();// 0x85587d0 0x78ce6b0320
	float GetNetTimeInSec();// 0x855879c 0x78ce6b0400
	WuXiaXBaseCharacter* GetCurrentVisionPlayer();// 0x8558524 0x78ce6b04e0
	WuXiaXBaseCharacter* GetCharacterById(int ID);// 0x8558558 0x78ce6b05c0
	void ChangeStateToLogin();// 0x85583a4 0x78ce6b06a0
	void ChangeGameState(enum game_state);// 0x85583cc 0x78ce6b0780
	void AddLevelArea(LevelAreaBox* LevelArea);// 0x8556a8c 0x78ce6b0860

--------------------------------
Class: ReplayDLDInfo
	int64 gameStartTime;//[Offset: 0x0, Size: 0x8] 0x78cefe9000
	bool hasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cefe9080
	int redPoint;//[Offset: 0xc, Size: 0x4] 0x78cefe9100
	int bluePoint;//[Offset: 0x10, Size: 0x4] 0x78cefe9180
	int greenPoint;//[Offset: 0x14, Size: 0x4] 0x78cefe9200

--------------------------------
Class: LevelAreaBox.Actor.Object
	int LevelAreaID;//[Offset: 0x220, Size: 0x4] 0x78cec09400
	FString LevelName;//[Offset: 0x228, Size: 0x10] 0x78cec09480
	Level* LoadedLevel;//[Offset: 0x238, Size: 0x8] 0x78cec07400
	bool Loaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78cec07480
	void LoadStreamLevel();// 0x8a873f8 0x78cebf91c0
	bool IsLoaded();// 0x83ab0a8 0x78cebf92a0

--------------------------------
Class: WuXiaParadrop.WuXiaInteractiveActor.Actor.Object
	InteractiveInfo high_paradropinfo_;//[Offset: 0x2b8, Size: 0x60] 0x78ce629980
	enum paradrop_state_;//[Offset: 0x320, Size: 0x1] 0x78cedd3f80
	Vector end_location_;//[Offset: 0x334, Size: 0xc] 0x78ce629a80
	bool sa_check_pos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1] 0x78ce629b00
	void StopSound();// 0x8a873f8 0x78ce633180
	void SaCheckSelfPos();// 0x84f1da8 0x78ce633260
	void PlaySound();// 0x8a873f8 0x78ce633340
	void ParadropOpened(int PlayerID);// 0x84f1d00 0x78ce633420
	int GetGlobalID();// 0x84f1dbc 0x78ce633500
	void ForceParadropOpened();// 0x8a873f8 0x78ce6335e0

--------------------------------
Class: ClientParadrop.Actor.Object
	float playsound_delta_;//[Offset: 0x220, Size: 0x4] 0x78ceba5300
	float life_time_;//[Offset: 0x224, Size: 0x4] 0x78ceba5380
	void StopSound();// 0x8a873f8 0x78ceb9adc0
	void PlaySound();// 0x8a873f8 0x78ceb9aea0

--------------------------------
Class: FakeCharacter.Actor.Object
	SkeletalMeshComponentBudgeted* mesh_body_;//[Offset: 0x220, Size: 0x8] 0x78cebe4f80
	Vector move_location;//[Offset: 0x228, Size: 0xc] 0x78cebe5000
	Vector old_move_location;//[Offset: 0x234, Size: 0xc] 0x78cebe5080
	Rotator move_rotation;//[Offset: 0x240, Size: 0xc] 0x78cebe5100
	bool move_flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x78cebe5180
	bool horse_flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x78cebe5200
	int horse_id;//[Offset: 0x250, Size: 0x4] 0x78cebe5280
	SkeletalMesh* load_skeletal_obj;//[Offset: 0x258, Size: 0x8] 0x78cebe3200
	SoftObjectPath[] load_asset;//[Offset: 0x270, Size: 0x10] 0x78cebc31c0
	void UpdateMesh();// 0x8a873f8 0x78cebdbca0
	void LoadComplete();// 0x8372544 0x78cebdbd80

--------------------------------
Class: WuXiaOutJamming.WuXiaInteractiveActor.Actor.Object
	void PlayerOutJamming(int PlayerID);// 0x84f1738 0x78ce6336c0

--------------------------------
Class: KillInfo
	int id_;//[Offset: 0x0, Size: 0x4] 0x78cefe2d00
	int total_kill_;//[Offset: 0x4, Size: 0x4] 0x78cefe2d80
	int kill_combo_;//[Offset: 0x8, Size: 0x4] 0x78cefe2e00
	int kill_current_;//[Offset: 0xc, Size: 0x4] 0x78cefe2e80

--------------------------------
Class: BattleReadySelectionItem.UserWidget.Widget.Visual.Object
	delegate OnSelectedEvent;//[Offset: 0x260, Size: 0x10] 0x78ceb44600
	delegate OnSeletedWarning;//[Offset: 0x270, Size: 0x10] 0x78ceb44680
	enum m_currentState;//[Offset: 0x280, Size: 0x1] 0x78ceacb8c0
	int m_id;//[Offset: 0x284, Size: 0x4] 0x78ceb44780
	void UpdateState(enum State);// 0x8329888 0x78ceb2d8a0
	void ReleaseWarning();// 0x8329860 0x78ceb2d980
	bool RegisterButton(int HeroId);// 0x8a873f8 0x78ceb2da60
	void OnSelected();// 0x8329874 0x78ceb2db40
	void InitData(int ID, enum State);// 0x8329764 0x78ceb2dc20

--------------------------------
Class: BattleReadyUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	CombatReadinessInfo[] m_infos;//[Offset: 0x330, Size: 0x10] 0x78ceacb780
	class UserWidget* m_heroItemClass;//[Offset: 0x340, Size: 0x8] 0x78ceacb820
	int m_countdownDuration;//[Offset: 0x348, Size: 0x4] 0x78ceb46100
	Vector m_characterOffset;//[Offset: 0x34c, Size: 0xc] 0x78ceb46180
	WuXiaXGameInstance* m_gameInstance;//[Offset: 0x358, Size: 0x8] 0x78ceb46200
	HeroSelectionWidget* m_heroSelection;//[Offset: 0x360, Size: 0x8] 0x78ceb46280
	CountdownWidget* m_countdown;//[Offset: 0x368, Size: 0x8] 0x78ceb46300
	void UpdateSkinAddHp(int HeroSkinId);// 0x8a873f8 0x78ceb2ce20
	void UpdateSkillInfo();// 0x8a873f8 0x78ceb2cf00
	void StartCountdown();// 0x832a33c 0x78ceb2cfe0
	void SetStandingHero();// 0x832a350 0x78ceb2d0c0
	void SelectHero(int HeroId);// 0x832a254 0x78ceb2d1a0
	void RefreshHeros();// 0x832a320 0x78ceb2d280
	void OpenHeroSelection();// 0x8a873f8 0x78ceb2d360
	void OnHeroUpdated(int UserId);// 0x832a1ac 0x78ceb2d440
	void OnConfirmHero();// 0x8a873f8 0x78ceb2d520
	Vector GetPlayerLocation(int index);// 0x8a873f8 0x78ceb2d600
	int GetCharacterShowIndexByIdx(int index);// 0x832a0fc 0x78ceb2d6e0
	void ConfirmHero();// 0x832a304 0x78ceb2d7c0

--------------------------------
Class: HeroSelectionWidget.UserWidget.Widget.Visual.Object
	WuXiaXGameInstance* m_gameInstance;//[Offset: 0x280, Size: 0x8] 0x78cec04b00
	class BattleReadySelectionItem* m_cellClass;//[Offset: 0x288, Size: 0x8] 0x78cebc75e0
	WrapBox* m_itemContainer;//[Offset: 0x290, Size: 0x8] 0x78cec04b80
	BattleReadySelectionItem*[] m_items;//[Offset: 0x298, Size: 0x10] 0x78cebc7680
	bool m_canConfirm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x78cec04c80
	void SelectWaring(enum Type);// 0x8a873f8 0x78cebf5b80
	void SelectHero(int HeroId);// 0x839a82c 0x78cebf5c60
	void RefreshHeros();// 0x839a8d4 0x78cebf5d40
	int GetSelectedHeroId();// 0x839a8e8 0x78cebf5e20
	void ConfirmHero();// 0x839a818 0x78cebf5f00

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x11c, Size: 0x8] 0x78ce894d00
	float WrapWidth;//[Offset: 0x124, Size: 0x4] 0x78ce894d80
	float WrapSize;//[Offset: 0x128, Size: 0x4] 0x78ce894e00
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78ce894e80
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1] 0x78ce894f00
	byte Orientation;//[Offset: 0x12e, Size: 0x1] 0x78ce894f80
	void SetInnerSlotPadding(Vector2D InPadding);// 0xa1cdf2c 0x78ce881d60
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0xa1cde7c 0x78ce881e40

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce894800
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ce894880
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4] 0x78ce894900
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78ce894980
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78ce894a00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa1ce4c4 0x78ce8852c0
	void SetPadding(Margin InPadding);// 0xa1ce76c 0x78ce8853a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa1ce56c 0x78ce885480
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0xa1ce614 0x78ce885560
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0xa1ce6bc 0x78ce885640

--------------------------------
Class: CountdownWidget.UserWidget.Widget.Visual.Object
	delegate OnCountdownOver;//[Offset: 0x260, Size: 0x10] 0x78cebad000
	float m_totalSecond;//[Offset: 0x270, Size: 0x4] 0x78cebad080
	float m_countBuffer;//[Offset: 0x274, Size: 0x4] 0x78cebad100
	bool m_isCounting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78cebad180
	void StartCountdown();// 0x8364274 0x78cebd4220
	void Init(float second);// 0x8364290 0x78cebd4300
	void Counting(float timeRemain);// 0x8a873f8 0x78cebd43e0

--------------------------------
Class: BattleRewardUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateItemWidgets(out const RewardItem[] NewRewardInfos);// 0x8a873f8 0x78ceb2ff20
	void UpdateBattleWidgets(out const BattleRewardInfo[] NewBattleRewardInfos);// 0x8a873f8 0x78ceb2caa0
	void UpdateBattleRewardState(int BattleRewardIndex, enum NewBattleRewardState);// 0x8a873f8 0x78ceb2cb80
	void SelectBattleReward(int BattleRewardIndex);// 0x832ae30 0x78ceb2cc60
	void ReceiveSelectBattleReward();// 0x832ae1c 0x78ceb2cd40

--------------------------------
Class: BattleRewardInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefc7300
	RewardItem[] rewards;//[Offset: 0x8, Size: 0x10] 0x78cefd0c40

--------------------------------
Class: BegSignRewardItemUI.UserWidget.Widget.Visual.Object
	bool PlayerHaveItem(int ID);// 0x832bac8 0x78ceb2fc80
	void OnUpdateQuality(enum Quality);// 0x8a873f8 0x78ceb2fd60
	void InitData(out const BegSignRewardItemInfo Info, float TotalChildWeight);// 0x8a873f8 0x78ceb2fe40

--------------------------------
Class: BegSignRewardItemInfo
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cefbce00
	float Weight;//[Offset: 0x10, Size: 0x4] 0x78cefbce80
	FString ImagePath;//[Offset: 0x18, Size: 0x10] 0x78cefbcf00
	enum Quality;//[Offset: 0x28, Size: 0x1] 0x78cee5f420
	int Number;//[Offset: 0x2c, Size: 0x4] 0x78cefbd000
	int RewardId;//[Offset: 0x30, Size: 0x4] 0x78cefbd080
	FString Sign;//[Offset: 0x38, Size: 0x10] 0x78cefbd100

--------------------------------
Class: BlockGuideActor.Actor.Object
	Transform player_spawn_trans_;//[Offset: 0x220, Size: 0x30] 0x78ceb45600
	int player_weapon_id_;//[Offset: 0x250, Size: 0x4] 0x78ceb45680
	int[] player_skills_;//[Offset: 0x258, Size: 0x10] 0x78ceacb460
	int cure_buff_id_;//[Offset: 0x268, Size: 0x4] 0x78ceb45780
	int mp_recover_buff_;//[Offset: 0x26c, Size: 0x4] 0x78ceb45800
	int npc_id_;//[Offset: 0x270, Size: 0x4] 0x78ceb45880
	Transform npc_spawn_trans_;//[Offset: 0x280, Size: 0x30] 0x78ceb45900
	Transform player_break_trans_;//[Offset: 0x2b0, Size: 0x30] 0x78ceb45980
	NpcCharacter* guide_npc_actor_;//[Offset: 0x2e0, Size: 0x8] 0x78ceb45a00
	void Guide_GiveWeapon();// 0x832c340 0x78ceb2fac0
	void Guide_CreateNpc(int npc_id, Transform npc_trans);// 0x832c354 0x78ceb2fba0

--------------------------------
Class: BlueprintActor.Actor.Object
	class Actor* ActorClass;//[Offset: 0x220, Size: 0x8] 0x78ceacb3c0
	<FString,FString> MapValues;//[Offset: 0x228, Size: 0x50] 0x78cf157fc0

--------------------------------
Class: BuffEffectLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: BuffPoint.Actor.Object
	int[] buff_ids_;//[Offset: 0x220, Size: 0x10] 0x78ceacb140
	enum[] buff_types_;//[Offset: 0x230, Size: 0x10] 0x78ceacb280
	int[] buff_chance_;//[Offset: 0x240, Size: 0x10] 0x78ceacb320
	int spawn_min_time_;//[Offset: 0x250, Size: 0x4] 0x78ceb46d80
	int spawn_max_time_;//[Offset: 0x254, Size: 0x4] 0x78ceb46e00
	int MaxAmmoNum;//[Offset: 0x258, Size: 0x4] 0x78ceb46e80
	int client_show_index_;//[Offset: 0x264, Size: 0x4] 0x78ceb46f00
	BoxComponent* collision_component_;//[Offset: 0x268, Size: 0x8] 0x78ceb46f80
	int buff_index_;//[Offset: 0x270, Size: 0x4] 0x78ceb47000
	void ResetCurrentBuff();// 0x832d160 0x78ceb2f660
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x832d188 0x78ceb2f740
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x832d318 0x78ceb2f820
	void OnBuffIdUpdate();// 0x832d174 0x78ceb2f900
	void Client_OnBuffIdUpdate(int showid);// 0x8a873f8 0x78ceb2f9e0

--------------------------------
Class: BulletinUI.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: ChangeNameUI.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: CharacterItemContainerUI.UserWidget.Widget.Visual.Object
	bool IsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78ceb49280
	ItemSortType[] sortArray;//[Offset: 0x268, Size: 0x10] 0x78ceaca600
	ItemSortTypeComplex[] sortArrayComplex;//[Offset: 0x278, Size: 0x10] 0x78ceaca6a0
	bool removeArrayItemComplex(int ID);// 0x83304f0 0x78ceb61660
	bool removeArrayItem(int ItemId);// 0x83307bc 0x78ceb61740
	int[] GetSortArrayComplex(out const int[] priorityIds, out const int[] sortTypes, out const int[] filterTypes, bool isReverse, bool forceUpdate);// 0x8330288 0x78ceb61820
	int[] GetSortArray();// 0x833070c 0x78ceb61900
	void addArrayItemComplex(int ID, out const int[] sortTypes, out const int[] filterTypes);// 0x83305a4 0x78ceb619e0
	void addArrayItem(ItemSortType ItemSortType);// 0x8330870 0x78ceb61ac0

--------------------------------
Class: ItemSortType
	int item_level;//[Offset: 0x0, Size: 0x4] 0x78cefcbc80
	int item_id;//[Offset: 0x4, Size: 0x4] 0x78cefcbd00

--------------------------------
Class: ItemSortTypeComplex
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefbca00
	int[] sortTypes;//[Offset: 0x8, Size: 0x10] 0x78cee5f2e0
	int[] filterTypes;//[Offset: 0x18, Size: 0x10] 0x78cee5f380

--------------------------------
Class: CharacterShowActor.Actor.Object
	FString PresetName;//[Offset: 0x220, Size: 0x10] 0x78ceb48e00
	CameraInfo[] CameraInfos;//[Offset: 0x230, Size: 0x10] 0x78ceaccb80
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78ceb48f00
	Transform[] PlayerTransforms;//[Offset: 0x248, Size: 0x10] 0x78ceaccc20
	bool bShowDisplayActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x78ceb49000
	Transform[] DisplayActorTransforms;//[Offset: 0x260, Size: 0x10] 0x78ceacccc0
	CharacterShowComponent*[] CameraShowArray;//[Offset: 0x270, Size: 0x10] 0x78ceaccd60
	CharacterShowComponent*[] PlayerShowArray;//[Offset: 0x280, Size: 0x10] 0x78ceacce00
	CharacterShowComponent*[] DisplayActorShowArray;//[Offset: 0x290, Size: 0x10] 0x78ceaca560
	void SynchronizeData();// 0x83310b8 0x78ceb614a0
	void Reconstruct();// 0x83310a4 0x78ceb61580

--------------------------------
Class: CharacterShowComponent.BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum ActorType;//[Offset: 0x460, Size: 0x1] 0x78ceacc9a0
	int index;//[Offset: 0x464, Size: 0x4] 0x78ceb4a300
	void ShowActorDisplayThings();// 0x8a873f8 0x78ceb60e80
	int GetIndex();// 0x8334528 0x78ceb60f60
	enum GetActorType();// 0x8334544 0x78ceb61040

--------------------------------
Class: ChatNetMessageHandle.Actor.Object
	FString ip_;//[Offset: 0x220, Size: 0x10] 0x78ceb70e00
	int port_;//[Offset: 0x230, Size: 0x4] 0x78ceb70e80
	bool is_connected_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1] 0x78ceb70f00
	bool is_ping_net_callback_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1] 0x78ceb70f80
	bool is_login_net_callback_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1] 0x78ceb71000
	TimerHandle send_ping_handler_;//[Offset: 0x238, Size: 0x8] 0x78ceb71080
	TimerHandle send_login_handler_;//[Offset: 0x240, Size: 0x8] 0x78ceb4f800
	TimerHandle refresh_num_handler_;//[Offset: 0x248, Size: 0x8] 0x78ceb4f880
	int cur_channel_no_;//[Offset: 0x250, Size: 0x4] 0x78ceb4f900
	void SendPing();// 0x833ce30 0x78ceb67320
	void SendMakeTeam(enum[] Types, bool join, int match_type, int sort_type, bool captain_agree, int map_type, enum segtype);// 0x833c7cc 0x78ceb63a40
	void SendChatRequst(enum Type, FString Info, int UserId);// 0x833ca8c 0x78ceb63b20
	void SendChatLoginMsg(out const int user_id, FString PassWord);// 0x833ce44 0x78ceb63c00
	void SendChangeChannelRequest(int Num);// 0x833c724 0x78ceb63ce0
	void RefreshNumCallBack();// 0x833c6b4 0x78ceb63dc0
	void Port(int val);// 0x833cc2c 0x78ceb63ea0
	void PingCallBack();// 0x833c6dc 0x78ceb63f80
	void LoginCallBack();// 0x833c6c8 0x78ceb64060
	void Ip(FString val);// 0x833ccd4 0x78ceb64140
	int GetChatChannelNo();// 0x833c6f0 0x78ceb64220
	void ClientCheckMsg(float DeltaTime);// 0x833cd88 0x78ceb64300

--------------------------------
Class: ChatWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	enum cur_channel;//[Offset: 0x330, Size: 0x1] 0x78ceacbd20
	<enum,int> chatCacheNumMap;//[Offset: 0x338, Size: 0x50] 0x78cf157cc0
	bool ChatInfoOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1] 0x78ceb72080
	FString[] Blacklist;//[Offset: 0x390, Size: 0x10] 0x78ceacbe60
	FString CurChatFriend;//[Offset: 0x3a0, Size: 0x10] 0x78ceb70080
	int CurUserId;//[Offset: 0x3b0, Size: 0x4] 0x78ceb70100
	FString CurUserName;//[Offset: 0x3b8, Size: 0x10] 0x78ceb70180
	Vector2D CurPos;//[Offset: 0x3c8, Size: 0x8] 0x78ceb70200
	void WorldChannelChanged();// 0x8a873f8 0x78ceb66280
	void UpdateTASDataList(out const FriendBaseInfo[] infoArr);// 0x8a873f8 0x78ceb66360
	void UpdateFriendDataList(out const FriendBaseInfo[] infoArr);// 0x8a873f8 0x78ceb66440
	void UpdateFriendChatTip(int Num);// 0x8a873f8 0x78ceb66520
	void SwitchChannel(enum Type);// 0x8a873f8 0x78ceb66600
	void StorageTemporaryChat(enum Type, out const ChatCellInfo Info);// 0x833e928 0x78ceb666e0
	void SetRoomChat(bool isShow);// 0x8a873f8 0x78ceb667c0
	void RecieveANewChat(enum Type, out const ChatCellInfo Info);// 0x8a873f8 0x78ceb668a0
	void OpenTAS(int UserId);// 0x8a873f8 0x78ceb66980
	void OpenRoomChat();// 0x8a873f8 0x78ceb66a60
	void OpenPlayerChatUI(bool inteam, bool shield, Vector2D pos, FString Name, int ID);// 0x8a873f8 0x78ceb66b40
	void OpenCTChat();// 0x8a873f8 0x78ceb66c20
	void OpenChat();// 0x8a873f8 0x78ceb66d00
	void OpenCertainFriend(int UserId);// 0x8a873f8 0x78ceb66de0
	bool GetChatCache(enum Type, out ChatCellInfoArr outCache);// 0x833e7cc 0x78ceb66ec0
	void CurChatFriendDeleted();// 0x8a873f8 0x78ceb66fa0
	void ClosePlayerChatInfo();// 0x8a873f8 0x78ceb67080
	void CloseExpand();// 0x8a873f8 0x78ceb67160
	void ChatSendResult(enum Result, int Time);// 0x8a873f8 0x78ceb67240

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: CheckBoxGroup.NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object
	bool m_AllowAllEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x78ceb71c80
	delegate _onStateChangedEvent;//[Offset: 0x138, Size: 0x10] 0x78ceb71d00
	CheckBox*[] m_GroupObject;//[Offset: 0x148, Size: 0x10] 0x78ceacbc80
	CheckBox* m_PerviousChecked;//[Offset: 0x158, Size: 0x8] 0x78ceb71e00
	void ProcessTick();// 0x833fdcc 0x78ceb65fe0
	void OperationCheckBox(CheckBox* Op);// 0x833fdf4 0x78ceb660c0
	void ClearPerviousOp();// 0x833fde0 0x78ceb661a0

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x119, Size: 0x1] 0x78ce72b140
	delegate CheckedStateDelegate;//[Offset: 0x11c, Size: 0x10] 0x78ce79a680
	CheckBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x580] 0x78ce79a700
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b0, Size: 0x8] 0x78ce79a780
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6b8, Size: 0x8] 0x78ce79a800
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c0, Size: 0x8] 0x78ce79a880
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6c8, Size: 0x8] 0x78ce79a900
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d0, Size: 0x8] 0x78ce79a980
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6d8, Size: 0x8] 0x78ce79aa00
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e0, Size: 0x8] 0x78ce79aa80
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6e8, Size: 0x8] 0x78ce79ab00
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f0, Size: 0x8] 0x78ce79ab80
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6f8, Size: 0x8] 0x78ce79ac00
	byte HorizontalAlignment;//[Offset: 0x700, Size: 0x1] 0x78ce79ac80
	Margin Padding;//[Offset: 0x704, Size: 0x10] 0x78ce79ad00
	SlateColor BorderBackgroundColor;//[Offset: 0x718, Size: 0x28] 0x78ce79ad80
	byte ClickMethod;//[Offset: 0x740, Size: 0x1] 0x78ce79ae00
	byte TouchMethod;//[Offset: 0x741, Size: 0x1] 0x78ce79ae80
	byte PressMethod;//[Offset: 0x742, Size: 0x1] 0x78ce79af00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x743, Size: 0x1] 0x78ce79af80
	delegate OnCheckStateChanged;//[Offset: 0x748, Size: 0x10] 0x78ce79b000
	void SetTouchMethod(byte InTouchMethod);// 0xa175280 0x78ce7c1580
	void SetPressMethod(byte InPressMethod);// 0xa1751d8 0x78ce7c1660
	void SetIsChecked(bool InIsChecked);// 0xa175478 0x78ce7c1740
	void SetClickMethod(byte InClickMethod);// 0xa175328 0x78ce7c1820
	void SetCheckedState(enum InCheckedState);// 0xa1753d0 0x78ce7c1900
	bool IsPressed();// 0xa175594 0x78ce7c19e0
	bool IsChecked();// 0xa17555c 0x78ce7c1ac0
	enum GetCheckedState();// 0xa175528 0x78ce7c1ba0

--------------------------------
Class: CircleSliderUI.UserWidget.Widget.Visual.Object
	Vector GetCrossPoint(Vector circle_pos, Vector line_start, Vector line_end, float Radius);// 0x83418b8 0x78ceb65800

--------------------------------
Class: ClientAchievementComponent.ActorComponent.Object
	<int,int> m_AchievementData;//[Offset: 0xb8, Size: 0x50] 0x78cf15ac00
	<int,int> m_WeaponMap;//[Offset: 0x108, Size: 0x50] 0x78cf15acc0

--------------------------------
Class: ClientPlayerDataManager.Object
	<enum,int> PlayerDataMap;//[Offset: 0x28, Size: 0x50] 0x78cf159e80
	<int,int> PlayerMeridianMap;//[Offset: 0x78, Size: 0x50] 0x78cf159f40

--------------------------------
Class: ConfigEnvironmentActor.Actor.Object
	float GetSoundVolume(const FString float_value_name, const FString bool_value_name);// 0x8363b58 0x78cebd44c0
	void EffectSoundVolume();// 0x8a873f8 0x78cebd45a0

--------------------------------
Class: CreateMapUI.UserWidget.Widget.Visual.Object
	int[] GetMapsByPlayMode(int play_mode);// 0x836527c 0x78cebd3a40
	Texture2D* GetMapInfo(int map_id, out FString Name);// 0x8365378 0x78cebd3b20

--------------------------------
Class: CurrencyHall.UserWidgetBase.UserWidget.Widget.Visual.Object
	void ReSetCurrencyType(out const enum[] PlayerData, int ShowIndex);// 0x8a873f8 0x78cebd5b80
	void RefreshCurrencyType();// 0x8a873f8 0x78cebd5c60

--------------------------------
Class: CustomEventProcesser.Actor.Object

--------------------------------
Class: CustomGameUI.UserWidget.Widget.Visual.Object
	int current_sort_type_;//[Offset: 0x260, Size: 0x4] 0x78cebaeb80
	int current_sort_direction_;//[Offset: 0x264, Size: 0x4] 0x78cebaec00
	int taosha_min_player_num_;//[Offset: 0x268, Size: 0x4] 0x78cebaec80
	int luandou_player_num_;//[Offset: 0x26c, Size: 0x4] 0x78cebaed00
	int taosha_max_team_player_num_;//[Offset: 0x270, Size: 0x4] 0x78cebaed80
	int luandou_team_player_num_;//[Offset: 0x274, Size: 0x4] 0x78cebaee00
	bool taosha_viewer_state_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78cebaee80
	bool luandou_viewer_state_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1] 0x78cebaef00
	RoomChildUI*[] SortRoomChild(RoomChildUI*[] roominfos);// 0x8368dec 0x78cebd59c0
	void CreateRoomInfos(out const UIRoomInfo[] roominfos);// 0x8a873f8 0x78cebd5aa0

--------------------------------
Class: RoomChildUI.UserWidget.Widget.Visual.Object
	UIRoomInfo room_info_;//[Offset: 0x260, Size: 0x80] 0x78ced77900
	void Init(out const UIRoomInfo Info);// 0x8a873f8 0x78ced6b840

--------------------------------
Class: DamageCircleActor.Actor.Object
	bool custom_type_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78cebe0800
	bool pause_circle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78cebe0880
	Vector[] custom_circle_loc_;//[Offset: 0x228, Size: 0x10] 0x78cebc3760
	float[] custom_circle_radius_;//[Offset: 0x238, Size: 0x10] 0x78cebc3800
	Vector2D[] map_range_;//[Offset: 0x250, Size: 0x10] 0x78cebc38a0
	float height_;//[Offset: 0x260, Size: 0x4] 0x78cebe0a80
	float location_z;//[Offset: 0x264, Size: 0x4] 0x78cebe0b00
	float[] damages_;//[Offset: 0x268, Size: 0x10] 0x78cebc3940
	float[] wait_times_;//[Offset: 0x278, Size: 0x10] 0x78cebc39e0
	float[] shrink_times_;//[Offset: 0x288, Size: 0x10] 0x78cebc3a80
	float damage_rate_;//[Offset: 0x298, Size: 0x4] 0x78cebe0d00
	float[] shrink_speeds_;//[Offset: 0x2a0, Size: 0x10] 0x78cebc3b20
	float win_radius;//[Offset: 0x2b0, Size: 0x4] 0x78cebe0e00
	float refresh_npctime;//[Offset: 0x2b4, Size: 0x4] 0x78cebe0e80
	int[] ai_remain_num;//[Offset: 0x2b8, Size: 0x10] 0x78cebc3bc0
	Vector winLoc;//[Offset: 0x2c8, Size: 0xc] 0x78cebe0f80
	bool debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x78cebe1000
	float debugAngle;//[Offset: 0x2d8, Size: 0x4] 0x78cebe1080
	Vector debugFinalLoc;//[Offset: 0x2dc, Size: 0xc] 0x78cebaf800
	float win_location_check_angle_;//[Offset: 0x2e8, Size: 0x4] 0x78cebaf880
	float win_actor_radius_;//[Offset: 0x2ec, Size: 0x4] 0x78cebaf900
	float[] paradrop_times_;//[Offset: 0x2f0, Size: 0x10] 0x78cebc3c60
	float paradrop_randrange_;//[Offset: 0x300, Size: 0x4] 0x78cebafa00
	int low_paradrop_num_;//[Offset: 0x304, Size: 0x4] 0x78cebafa80
	StaticMesh* StaticMesh;//[Offset: 0x308, Size: 0x8] 0x78cebafb00
	MaterialInstance* StaticMeshMaterial;//[Offset: 0x310, Size: 0x8] 0x78cebafb80
	CurveFloat* EffectFogCurve;//[Offset: 0x318, Size: 0x8] 0x78cebafc00
	float EffectFogDensity;//[Offset: 0x320, Size: 0x4] 0x78cebafc80
	LinearColor EffectFogInscatteringColor;//[Offset: 0x324, Size: 0x10] 0x78cebafd00
	ExponentialHeightFogComponent* HeightFog;//[Offset: 0x430, Size: 0x8] 0x78cebafd80
	Object* PostProcess;//[Offset: 0x438, Size: 0x8] 0x78cebafe00
	StaticMeshComponent* Mesh;//[Offset: 0x440, Size: 0x8] 0x78cebafe80
	int[] per_playernpc_num_;//[Offset: 0x448, Size: 0x10] 0x78cebc3d00
	float[] proportions;//[Offset: 0x458, Size: 0x10] 0x78cebc3da0
	<int,ParadropZoneInfo> paradropzone_map_;//[Offset: 0x470, Size: 0x50] 0x78cf159a00
	int[] paradrop_removekeys;//[Offset: 0x4c0, Size: 0x10] 0x78cebc1500
	void Start();// 0x83697e0 0x78cebd8d60
	void ResumeCircle();// 0x83697f4 0x78cebd8e40
	void PauseCircle();// 0x836980c 0x78cebd8f20
	void EffectFogFunction(float Value);// 0x8369640 0x78cebd9000
	void Client_StartLastCircle();// 0x8a873f8 0x78cebd5720
	void Client_DebugFinalCircle(int64 finalX, int64 finalY);// 0x83696e8 0x78cebd5800
	bool CheckActorIsFoliage(Actor* Actor);// 0x8a873f8 0x78cebd58e0

--------------------------------
Class: ParadropZoneInfo
	float ZoneRadius;//[Offset: 0x0, Size: 0x4] 0x78cefcd100
	float ZoneHalfZ;//[Offset: 0x4, Size: 0x4] 0x78cefcd180
	Vector ZonePos;//[Offset: 0x8, Size: 0xc] 0x78cefcd200

--------------------------------
Class: DataRecordComponent.ActorComponent.Object
	RecordData RecordData;//[Offset: 0xb8, Size: 0x2b0] 0x78cebe3080
	void WinJailFight(uint32 JailFightWinNum);// 0x836ac88 0x78cebd9e00
	void Win();// 0x836ac38 0x78cebd9ee0
	void StartRecord();// 0x836ba58 0x78cebd9fc0
	void SetMatchRank(uint32 NewMatchRank);// 0x836ab38 0x78cebda0a0
	void SetIsChooseWin(bool bNewIsChooseWin);// 0x836a85c 0x78cebda180
	void SetBeKnockOutInfo(const HPChangeInfo NewBeKnockOutInfo);// 0x836aa4c 0x78cebda260
	void SetBeKnockDownInfo(const HPChangeInfo NewBeKnockDownInfo);// 0x836a954 0x78cebda340
	void Resurrected(uint32 ResurrectedNum);// 0x836af40 0x78cebda420
	void Resurrect(uint32 ResurrectNum);// 0x836b024 0x78cebda500
	void Rescue(uint32 RescueNum);// 0x836b108 0x78cebda5e0
	void PickUpProp(const SpawnItemData SpawnItemData, uint32 PropNum);// 0x836b784 0x78cebda6c0
	void Lose();// 0x836ac1c 0x78cebda7a0
	void KnockOut(const HPChangeInfo HPChangeInfo, uint32 KnockOutNum);// 0x836ae08 0x78cebda880
	void Hurt(int GetHurt);// 0x836b2d0 0x78cebda960
	void Heal(int AmountHealed);// 0x836b1ec 0x78cebdaa40
	uint32 GetWinStreakNum();// 0x836abe8 0x78cebdab20
	uint64 GetTreasureNum();// 0x836b654 0x78cebdac00
	uint32 GetTotalThrowKnockOutNum();// 0x836ad38 0x78cebdace0
	uint32 GetTotalSneakKnockOutNum();// 0x836ad6c 0x78cebd7400
	int16 GetTotalResurrectNum();// 0x836aff0 0x78cebd74e0
	int16 GetTotalResurrectedNum();// 0x836af0c 0x78cebd75c0
	uint32 GetTotalRescueNum();// 0x836b0d4 0x78cebd76a0
	uint32 GetTotalRangedKnockOutNum();// 0x836ada0 0x78cebd7780
	bool GetTotalMoveDistance();// 0x836a73c 0x78cebd7860
	uint32 GetTotalKnockOutNum();// 0x836add4 0x78cebd7940
	uint32 GetTotalJailFightWinNum();// 0x836ac54 0x78cebd7a20
	int GetTotalGetHurt();// 0x836b29c 0x78cebd7b00
	int GetTotalDamageDone();// 0x836b380 0x78cebd7be0
	int GetTotalAmountHealed();// 0x836b1b8 0x78cebd7cc0
	<int64> GetTeammateIds();// 0x836b8c4 0x78cebd7da0
	RecordData GetRecordData();// 0x836a29c 0x78cebd7e80
	<int64,int> GetPropsInBag();// 0x836b52c 0x78cebd7f60
	<int64,int> GetPickedProps();// 0x836b5c0 0x78cebd8040
	int GetMaxEquipmentWeaponLevel();// 0x836b464 0x78cebd8120
	uint32 GetMatchRank();// 0x836ab04 0x78cebd8200
	float GetLiveTime();// 0x836ba08 0x78cebd82e0
	bool GetIsChooseWin();// 0x836a824 0x78cebd83c0
	<int64> GetEquipmentIds();// 0x836b498 0x78cebd84a0
	DeadlyInfo GetBeKnockOutInfo();// 0x836aa0c 0x78cebd8580
	DeadlyInfo GetBeKnockDownInfo();// 0x836a914 0x78cebd8660
	void EndRecord();// 0x836ba3c 0x78cebd8740
	void DropOrUseProp(int64 PropID, uint32 PropNum);// 0x836b688 0x78cebd8820
	void Attack(int DamageDone);// 0x836b3b4 0x78cebd8900
	void AddWeaponKillCount(int64 weaponid);// 0x836a694 0x78cebd89e0
	void AddTeammate(int64 TeammateId);// 0x836b958 0x78cebd8ac0
	void AddSpecificEventCount(int64 EventId);// 0x836a5ec 0x78cebd8ba0
	void AddMoveDistanceSquare(float NewMoveDistanceSquare);// 0x836a774 0x78cebd8c80

--------------------------------
Class: RecordData
	float StartTime;//[Offset: 0x0, Size: 0x4] 0x78cefbda00
	float EndTime;//[Offset: 0x4, Size: 0x4] 0x78cefbda80
	<int64> TeammateIds;//[Offset: 0x8, Size: 0x50] 0x78cee5ef20
	<int> TreasureWorldIds;//[Offset: 0x58, Size: 0x50] 0x78cee5efc0
	<int64,int> PickedProps;//[Offset: 0xa8, Size: 0x50] 0x78cefa6e80
	<int64,int> PropsInBag;//[Offset: 0xf8, Size: 0x50] 0x78cefa6f40
	<int64> EquipmentIds;//[Offset: 0x148, Size: 0x50] 0x78cee5f060
	int MaxEquipmentWeaponLevel;//[Offset: 0x198, Size: 0x4] 0x78cefbde80
	int TotalDamageDone;//[Offset: 0x19c, Size: 0x4] 0x78cefbdf00
	int TotalGetHurt;//[Offset: 0x1a0, Size: 0x4] 0x78cefbdf80
	int TotalAmountHealed;//[Offset: 0x1a4, Size: 0x4] 0x78cefbe000
	uint32 TotalRescueNum;//[Offset: 0x1a8, Size: 0x4] 0x78cefbe080
	uint32 TotalResurrectNum;//[Offset: 0x1ac, Size: 0x4] 0x78cefbe100
	uint32 TotalResurrectedNum;//[Offset: 0x1b0, Size: 0x4] 0x78cefbe180
	uint32 TotalKnockOutNum;//[Offset: 0x1b4, Size: 0x4] 0x78cefbe200
	uint32 TotalRangedKnockOutNum;//[Offset: 0x1b8, Size: 0x4] 0x78cefbe280
	uint32 TotalSneakKnockOutNum;//[Offset: 0x1bc, Size: 0x4] 0x78cefbe300
	uint32 TotalThrowKnockOutNum;//[Offset: 0x1c0, Size: 0x4] 0x78cefbe380
	int TotalJailFightWinNum;//[Offset: 0x1c4, Size: 0x4] 0x78cefbe400

--------------------------------
Class: EffectPoint.Actor.Object
	BoxComponent* Collision;//[Offset: 0x220, Size: 0x8] 0x78cebe3300
	enum EffectPointType;//[Offset: 0x228, Size: 0x1] 0x78cebc3260
	enum EffectPointState;//[Offset: 0x229, Size: 0x1] 0x78cebc3300
	int AddHpBuffId;//[Offset: 0x22c, Size: 0x4] 0x78cebe3480
	int AddArmorBuffId;//[Offset: 0x230, Size: 0x4] 0x78cebe3500
	<int,int> AddAmmoNums;//[Offset: 0x238, Size: 0x50] 0x78cf159700
	int AddAmmoNumLimit;//[Offset: 0x288, Size: 0x4] 0x78cebe3680
	float OnEffectTime;//[Offset: 0x28c, Size: 0x4] 0x78cebe3700
	float CoolDownTime;//[Offset: 0x290, Size: 0x4] 0x78cebe3780
	float CoolDownUpdateTimeInterval;//[Offset: 0x294, Size: 0x4] 0x78cebe3800
	int EffectTeamId;//[Offset: 0x298, Size: 0x4] 0x78cebe3880
	void OnUpdateCoolDown(float CoolDownProgress);// 0x8a873f8 0x78cebdbe60
	void OnChangeState();// 0x8a873f8 0x78cebdbf40
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8371a08 0x78cebdc020
	void Mult_UpdateCoolDown(float CoolDownProgress);// 0x8371958 0x78cebdc100
	void Mult_ChangeState(enum NewEffectPointState);// 0x83718a8 0x78cebdc1e0

--------------------------------
Class: FakeRope.Actor.Object
	float unit_length_;//[Offset: 0x220, Size: 0x4] 0x78cebe4d00
	WuXiaXBaseCharacter* tar_player_;//[Offset: 0x228, Size: 0x8] 0x78cebe4d80
	void SetRopeScale(float scale_z);// 0x8a873f8 0x78cebdba00
	void SetRopeRotation(Rotator Rotate);// 0x8a873f8 0x78cebdbae0
	void Client_SetTarPlayerId(int tar_id);// 0x8372a9c 0x78cebdbbc0

--------------------------------
Class: FirstPayUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PayGiftInfo[] PayGiftInfos;//[Offset: 0x330, Size: 0x10] 0x78cebc2ea0
	void UpdatePlayerData(enum PlayerDataType, int Value);// 0x8a873f8 0x78cebde4e0
	void UpdatePayGiftPayed(int PayGiftIndex, bool IsPayed);// 0x8a873f8 0x78cebde5c0
	void UpdatePayGiftItemReceived(int PayGiftIndex, int PayGiftItemIndex, enum ReceiveState);// 0x8a873f8 0x78cebde6a0
	void UpdatePayGiftInfosInner();// 0x8a873f8 0x78cebdadc0
	void SetTreasureVisible(bool IsVisible);// 0x8a873f8 0x78cebdaea0
	void RechargePayGift(int PayGiftIndex);// 0x8374510 0x78cebdaf80
	void ReceivePayGiftItem(int PayGiftIndex, int PayGiftItemIndex);// 0x8374420 0x78cebdb060

--------------------------------
Class: PayGiftInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefc8280
	RechargeInfo RechargeInfo;//[Offset: 0x8, Size: 0x30] 0x78cefc8300
	HeroData HeroData;//[Offset: 0x38, Size: 0xf8] 0x78cefc8380
	FString HeroImagePath;//[Offset: 0x130, Size: 0x10] 0x78cefc8400
	LinearColor PanelColor;//[Offset: 0x140, Size: 0x10] 0x78cefc6380
	int SellingPrice;//[Offset: 0x150, Size: 0x4] 0x78cefc6400
	int OriginalPrice;//[Offset: 0x154, Size: 0x4] 0x78cefc6480
	PayGiftItemInfo[] ItemInfos;//[Offset: 0x158, Size: 0x10] 0x78cefd0560

--------------------------------
Class: PayGiftItemInfo
	RewardItem iteminfo;//[Offset: 0x0, Size: 0x78] 0x78cefc6500
	int UnlockLevel;//[Offset: 0x78, Size: 0x4] 0x78cefc6580
	bool IsCheckReceiveItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78cefc6600

--------------------------------
Class: GameChatNetMessageHandle.Actor.Object
	FString ip_;//[Offset: 0x220, Size: 0x10] 0x78cebe5b80
	int port_;//[Offset: 0x230, Size: 0x4] 0x78cebe5c00
	bool is_connected_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1] 0x78cebe5c80
	bool is_ping_net_callback_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1] 0x78cebe5d00
	bool is_login_net_callback_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1] 0x78cebe5d80
	TimerHandle send_ping_handler_;//[Offset: 0x238, Size: 0x8] 0x78cebe5e00
	TimerHandle send_login_handler_;//[Offset: 0x240, Size: 0x8] 0x78cebe5e80
	void PingCallBack();// 0x8375344 0x78cebde320
	void LoginCallBack();// 0x8375330 0x78cebde400

--------------------------------
Class: GameEncyclopediaWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock_SkillTile;//[Offset: 0x330, Size: 0x8] 0x78cebe6d00
	Image* Image_Skill;//[Offset: 0x338, Size: 0x8] 0x78cebe6d80
	TextBlock* TextBlock_SceneName;//[Offset: 0x340, Size: 0x8] 0x78cebe6e00
	int MaxCount;//[Offset: 0x348, Size: 0x4] 0x78cebe6e80
	float AnimationRation;//[Offset: 0x34c, Size: 0x4] 0x78cebe6f00
	bool DebugCanAutoPlayAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x78cebe6f80
	class UserWidget* SkillWidgetClass;//[Offset: 0x358, Size: 0x8] 0x78cebc2ae0
	class UserWidget* EquipWidgetClass;//[Offset: 0x360, Size: 0x8] 0x78cebc2b80
	void SetTitleName(int TitleType, FString TiltleName);// 0x8a873f8 0x78cebdd520
	void RefreshLeftButtonList(int TypeIndex, bool IsExpanded);// 0x83761f4 0x78cebdd600
	void RefreshEventSubDesc(FString Desc);// 0x8375d7c 0x78cebdd6e0
	void PlaySequene(bool IsStop, int Type, FString SequeneName);// 0x8a873f8 0x78cebdd7c0
	void PlayImageAndText(out const FString[] ImagePaths, out const FString[] Texts);// 0x8a873f8 0x78cebdd8a0
	void OnOpenedWidget();// 0x8a873f8 0x78cebdd980
	void OnOpenedLevel();// 0x8375e30 0x78cebdda60
	void OnClickButtonEvent(int TableIndex, int Type);// 0x837605c 0x78cebddb40
	bool IsShowRestraint(int TableIndex);// 0x8375ef8 0x78cebddc20
	bool IsShowEquip(int TableIndex);// 0x8375e44 0x78cebddd00
	int GetClassfiyByTableIndex(int TableIndex);// 0x8375fac 0x78cebddde0
	void CreateSubButtonList(int TypeIndex);// 0x837614c 0x78cebddec0
	void CreateLeftButtonList(VerticalBox* VerticalBox, out const FString[] ButtonNames, out const int64[] Indexs);// 0x8a873f8 0x78cebddfa0
	void CloseWidget();// 0x8a873f8 0x78cebde080
	void BroadEventCretaeWidget();// 0x83762ec 0x78cebde160
	void AotuPlayAction(bool IsStop, int Type, FString SequeneName);// 0x8375c34 0x78cebde240

--------------------------------
Class: GameEventInterface.Interface.Object

--------------------------------
Class: GameWidgetConfig.DataAsset.Object
	class BaseWidget* RetainWidgetClass;//[Offset: 0x30, Size: 0x8] 0x78cebc5100
	class BaseWidget* MallWidgetClass;//[Offset: 0x38, Size: 0x8] 0x78cebc51a0
	class BaseWidget* MallTryOnClass;//[Offset: 0x40, Size: 0x8] 0x78cebc5240
	class BaseWidget* RechargeWidgetClass;//[Offset: 0x48, Size: 0x8] 0x78cebc29a0

--------------------------------
Class: GashaponUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	enum WishingActivityType;//[Offset: 0x330, Size: 0x1] 0x78cebc4f20
	WishingActivityInfo ActivityInfo;//[Offset: 0x338, Size: 0xb8] 0x78cebe6600
	PreyPoolInfo PoolInfo;//[Offset: 0x3f0, Size: 0x30] 0x78cebe6680
	void UpdatePlayerHaveOrNot(int ID);// 0x8a873f8 0x78cebdfe40
	void UpdatePlayerAttr();// 0x8a873f8 0x78cebdff20
	void UpdateGashaponTimes();// 0x8a873f8 0x78cebdcaa0
	void SetTitle();// 0x8a873f8 0x78cebdcb80
	void SetPoolDesc();// 0x8a873f8 0x78cebdcc60
	void SetGashaponButton();// 0x8a873f8 0x78cebdcd40
	void SetActivityTime();// 0x8a873f8 0x78cebdce20
	void QuitShow();// 0x8a873f8 0x78cebdcf00
	bool IsReachDrawLimit();// 0x8a873f8 0x78cebdcfe0
	void GetRewardPool(out <enum,BegSignRewardItemInfoArray> CurrentRareChildMap, out float TotalWeight);// 0x8377dfc 0x78cebdd0c0
	void GashaponOne();// 0x8a873f8 0x78cebdd1a0
	void EnterShow();// 0x8a873f8 0x78cebdd280
	void CreateShowActor(out const FString[] AssetsPaths, out <FString,Actor*> ShowActorArray);// 0x8377c6c 0x78cebdd360
	void BuyItemSuccess();// 0x8a873f8 0x78cebdd440

--------------------------------
Class: BegSignRewardItemInfoArray
	BegSignRewardItemInfo[] RewardItemList;//[Offset: 0x0, Size: 0x10] 0x78cee5f4c0

--------------------------------
Class: GiftTipUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void ShowNoHeroGift(out const <int,int> shop_map, int friend_id, int gift_id, enum gift_operation);// 0x8a873f8 0x78cebdfac0
	void ShowHaveGift(out const <int,int> shop_map, int friend_id, int gift_id, enum gift_operation);// 0x8a873f8 0x78cebdfba0

--------------------------------
Class: GlobalValidating.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: GuideTrigger_Node.GuideTrigger.Object
	int NodeID;//[Offset: 0x28, Size: 0x4] 0x78cebe7580
	int ConditionIndex;//[Offset: 0x2c, Size: 0x4] 0x78cebe7600
	bool bNewFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cebe7680

--------------------------------
Class: GuideTrigger_Task.GuideTrigger.Object
	int TaskID;//[Offset: 0x28, Size: 0x4] 0x78cebe7400
	int ConditionIndex;//[Offset: 0x2c, Size: 0x4] 0x78cebe7480
	bool bNewFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cebe7500

--------------------------------
Class: GuideTrigger_CustomNode.GuideTrigger.Object
	int NodeIndex;//[Offset: 0x28, Size: 0x4] 0x78cebe9480

--------------------------------
Class: GuideEventAirDrop.GuideEvent.Object
	Vector Location;//[Offset: 0x2c, Size: 0xc] 0x78cebe9a80

--------------------------------
Class: GuideEventBlockAllTouch.GuideEvent.Object
	bool bBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cebe9980
	bool bHasFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cebe9a00

--------------------------------
Class: GuideEventCameraFade.GuideEvent.Object
	float From;//[Offset: 0x2c, Size: 0x4] 0x78cebe9780
	float To;//[Offset: 0x30, Size: 0x4] 0x78cebe9800
	float Duration;//[Offset: 0x34, Size: 0x4] 0x78cebe9880
	Color Color;//[Offset: 0x38, Size: 0x4] 0x78cebe9900

--------------------------------
Class: GuideEventCircle.GuideEvent.Object
	enum EventType;//[Offset: 0x29, Size: 0x1] 0x78cebc45c0

--------------------------------
Class: DestinationPoint.Actor.Object
	SphereComponent* Trigger;//[Offset: 0x220, Size: 0x8] 0x78cebeb080
	SceneComponent* RootScene;//[Offset: 0x228, Size: 0x8] 0x78cebeb100
	bool bStopTraceOnPlayerOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78cebeb180
	GuideTrigger*[] OnOverlappedTrigger;//[Offset: 0x238, Size: 0x10] 0x78cebc4480
	NiagaraComponent*[] Comps;//[Offset: 0x250, Size: 0x10] 0x78cebc4520
	float OffsetZ;//[Offset: 0x260, Size: 0x4] 0x78cebeb300
	float NavRadius;//[Offset: 0x264, Size: 0x4] 0x78cebeb380
	NavigationPath* Path;//[Offset: 0x268, Size: 0x8] 0x78cebeb400
	void StartTrace(bool bNewStart);// 0x8a873f8 0x78cebdf040
	void OnComponentBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x83804a8 0x78cebdf120

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10] 0x78ce3d3780
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10] 0x78ce9dbdc0
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1] 0x78ce3d3880
	bool IsValid();// 0xb482d18 0x78ce3a82e0
	bool IsStringPulled();// 0xb482ce0 0x78ce3a83c0
	bool IsPartial();// 0xb482d50 0x78ce3a84a0
	float GetPathLength();// 0xb482dbc 0x78ce3a8580
	float GetPathCost();// 0xb482d88 0x78ce3a8660
	FString GetDebugString();// 0xb482f94 0x78ce3a8740
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0xb482df0 0x78ce3a8820
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0xb482e98 0x78ce3a8900

--------------------------------
Class: GuideEventDestinationPoint.GuideEvent.Object
	bool bStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cebeaf80
	bool bStopOnFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cebeb000

--------------------------------
Class: GuideEventExecute.GuideEvent.Object
	enum Type;//[Offset: 0x29, Size: 0x1] 0x78cebc43e0

--------------------------------
Class: GuideEventFocus.GuideEvent.Object
	bool bExternalRegister;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78cebeaa80
	Box2D GuideArea;//[Offset: 0x38, Size: 0x14] 0x78cebeab00
	Vector2D DragOffset;//[Offset: 0x4c, Size: 0x8] 0x78cebeab80
	float Duration;//[Offset: 0x54, Size: 0x4] 0x78cebeac00
	enum FocusType;//[Offset: 0x58, Size: 0x1] 0x78cebc4340
	int IntroductionIndex;//[Offset: 0x5c, Size: 0x4] 0x78cebead00
	bool bForceFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cebead80
	bool bForceFadeCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78cebeae00
	bool bTickLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x78cebeae80

--------------------------------
Class: GuideEventGoToUI.GuideEvent.Object
	enum GoToKey;//[Offset: 0x29, Size: 0x1] 0x78cebc4160
	enum CloseLayer;//[Offset: 0x2a, Size: 0x1] 0x78cebc4200

--------------------------------
Class: GuideEventHandleMainUI.GuideEvent.Object
	enum[] Types;//[Offset: 0x30, Size: 0x10] 0x78cebc40c0

--------------------------------
Class: GuideEventMessage.GuideEvent.Object
	FString Message;//[Offset: 0x30, Size: 0x10] 0x78cebec500
	enum Type;//[Offset: 0x40, Size: 0x1] 0x78cebc3f80

--------------------------------
Class: GuideEventOldGuide.GuideEvent.Object
	enum Type;//[Offset: 0x29, Size: 0x1] 0x78cebc3ee0
	bool bBooleanState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cebec480

--------------------------------
Class: GuideEventOpenLevel.GuideEvent.Object
	FName LevelName;//[Offset: 0x2c, Size: 0x8] 0x78cebec380

--------------------------------
Class: GuideEventPause.GuideEvent.Object
	bool bNewPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cebec300

--------------------------------
Class: GuideEventSetSkillVisible.GuideEvent.Object
	enum Type;//[Offset: 0x29, Size: 0x1] 0x78cebc3e40
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cebec280

--------------------------------
Class: GuideEventSign.GuideEvent.Object

--------------------------------
Class: GuideEventSpawnNpc.GuideEvent.Object
	int NPCId;//[Offset: 0x2c, Size: 0x4] 0x78cebebe80
	float Distance;//[Offset: 0x30, Size: 0x4] 0x78cebebf00
	enum SpawnType;//[Offset: 0x34, Size: 0x1] 0x78cebc65a0
	GuideTrigger*[] AllDieTriggers;//[Offset: 0x38, Size: 0x10] 0x78cebc6640
	bool bSpawnSignOnNpcDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cebec080
	NpcCharacter*[] AllSpawnNpc;//[Offset: 0x50, Size: 0x10] 0x78cebc66e0
	void OnNpcDead(Actor* DeadNpc);// 0x8384014 0x78cebdef60

--------------------------------
Class: GuideEventSpirit.GuideEvent.Object
	FText Message;//[Offset: 0x30, Size: 0x18] 0x78cebebd00
	enum SoundType;//[Offset: 0x48, Size: 0x1] 0x78cebc6500
	bool bIgnore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78cebebe00

--------------------------------
Class: GuideEventStopMove.GuideEvent.Object

--------------------------------
Class: GuideEventTeleport.GuideEvent.Object
	Vector TeleportLocation;//[Offset: 0x2c, Size: 0xc] 0x78cebebc00
	Rotator TeleportRotation;//[Offset: 0x38, Size: 0xc] 0x78cebebc80

--------------------------------
Class: GuideEventTrigger.GuideEvent.Object
	GuideTrigger*[] Triggers;//[Offset: 0x30, Size: 0x10] 0x78cebc6460

--------------------------------
Class: GuideEventTriggerInput.Object

--------------------------------
Class: GuideEventTutorials.GuideEvent.Object
	Texture2D* TutorialTexture;//[Offset: 0x30, Size: 0x8] 0x78cebebb00

--------------------------------
Class: GuideEventUIOperation.GuideEvent.Object
	enum[] OpenUIs;//[Offset: 0x30, Size: 0x10] 0x78cebc6320
	<enum,bool> CloseUIs;//[Offset: 0x40, Size: 0x50] 0x78cf15c340

--------------------------------
Class: GuideIntroduction.Object

--------------------------------
Class: GuideNodeCombat.GuideNode.Object

--------------------------------
Class: GuideNodeCondition.GuideNode.Object
	GuideCondition* Condition;//[Offset: 0x78, Size: 0x8] 0x78cebed680

--------------------------------
Class: GuideNodeMapWidget.GuideNode.Object
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78cebed600

--------------------------------
Class: GuideNodeSpec_OnLanded.GuideNode.Object

--------------------------------
Class: GuildListItem.UserWidgetBase.UserWidget.Widget.Visual.Object
	int itemindex;//[Offset: 0x330, Size: 0x4] 0x78cebeca80
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1] 0x78cebecb00
	CreateGuildUI* pParent;//[Offset: 0x338, Size: 0x8] 0x78cebecb80
	void UpdateGuildInfo(int index, bool sel, out GuildItem item_info);// 0x8a873f8 0x78cebf19e0
	void SetSelected(bool sel);// 0x8a873f8 0x78cebf1ac0

--------------------------------
Class: GuildItem
	int index_;//[Offset: 0x0, Size: 0x4] 0x78cefc8d00
	FString name_;//[Offset: 0x8, Size: 0x10] 0x78cefc8d80
	int level_;//[Offset: 0x18, Size: 0x4] 0x78cefc8e00
	int member_num_;//[Offset: 0x1c, Size: 0x4] 0x78cefc8e80
	int active_point_;//[Offset: 0x20, Size: 0x4] 0x78cefc8f00
	int score_;//[Offset: 0x24, Size: 0x4] 0x78cefc8f80
	int order_id_;//[Offset: 0x28, Size: 0x4] 0x78cefc9000
	int order_name_;//[Offset: 0x2c, Size: 0x4] 0x78cefc9080
	int order_icon_index_;//[Offset: 0x30, Size: 0x4] 0x78cefc9100
	FString intro_;//[Offset: 0x38, Size: 0x10] 0x78cefc9180
	int division_code_;//[Offset: 0x48, Size: 0x4] 0x78cefc9200

--------------------------------
Class: HallActivityWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	<enum,class ActivityTemplateWidget> ActivityTemplateMap;//[Offset: 0x330, Size: 0x50] 0x78cf15c1c0
	ActivityInfo[] ActivityInfoArray;//[Offset: 0x380, Size: 0x10] 0x78cebc5ba0
	void UpdateActivityState();// 0x8a873f8 0x78cebf1f20
	void UpdateActivityData(ActivityDataInfo ActivityDataInfo);// 0x8a873f8 0x78cebf2000
	void UpdateActivityArray();// 0x8a873f8 0x78cebf20e0
	enum GetActivityState(enum GroupType);// 0x8391518 0x78cebf21c0

--------------------------------
Class: HallReconnectUI.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: HeadClickWidget.UserWidget.Widget.Visual.Object
	Button* clickBtn;//[Offset: 0x268, Size: 0x8] 0x78cec01c00
	delegate OnHeadClicked;//[Offset: 0x270, Size: 0x10] 0x78cec01c80
	Image* mainImg;//[Offset: 0x280, Size: 0x8] 0x78cec01d00
	Overlay* LockedImg;//[Offset: 0x288, Size: 0x8] 0x78cec01d80
	TextBlock* IsUsing;//[Offset: 0x290, Size: 0x8] 0x78cec01e00
	Image* selectedImg;//[Offset: 0x298, Size: 0x8] 0x78cec01e80
	PaperSprite* drawingSprite;//[Offset: 0x2a0, Size: 0x8] 0x78cec01f00
	void UpdateSelectedImage(PaperSprite* Sprite);// 0x83923f0 0x78cebf5100
	void UpdateImage(PaperSprite* Sprite);// 0x8392554 0x78cebf51e0
	void UpdateId(int NewID);// 0x83924ac 0x78cebf52c0
	void ShowSelectedEffect(bool bVisible);// 0x8392340 0x78cebf53a0
	void ShowMainImg(bool bVisible);// 0x8392290 0x78cebf5480
	void ShowLockedImg(bool bVisible);// 0x83921e0 0x78cebf5560
	void ShowIsUsing(bool bVisible);// 0x8392130 0x78cebf5640
	void OnClickHead();// 0x8392498 0x78cebf1d60
	void InitData(PaperSprite* _mainSprite, PaperSprite* _borderSprite, int ID);// 0x83925fc 0x78cebf1e40

--------------------------------
Class: HeadInfoWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	SelectableTextureInfo m_headInfo;//[Offset: 0x330, Size: 0x18] 0x78cec02e80
	HeadItemWidget*[] m_headItems;//[Offset: 0x348, Size: 0x10] 0x78cebc54c0
	HeadTypeWidget*[] m_headTypes;//[Offset: 0x358, Size: 0x10] 0x78cebc5560
	SelectableTextureGroup[] m_headGroups;//[Offset: 0x368, Size: 0x10] 0x78cebc5600
	enum[] m_headTypeGroup;//[Offset: 0x378, Size: 0x10] 0x78cebc5740
	int m_currentGroupId;//[Offset: 0x388, Size: 0x4] 0x78cec03100
	int m_usingHeadId;//[Offset: 0x38c, Size: 0x4] 0x78cec03180
	int m_selectedHeadId;//[Offset: 0x390, Size: 0x4] 0x78cec01100
	<int,enum> m_GroupTypeMap;//[Offset: 0x398, Size: 0x50] 0x78cf15c040
	WrapBox* m_typeWrapBox;//[Offset: 0x3e8, Size: 0x8] 0x78cec01280
	WrapBox* m_headWrapBox;//[Offset: 0x3f0, Size: 0x8] 0x78cec01300
	Image* m_selectedImg;//[Offset: 0x3f8, Size: 0x8] 0x78cec01380
	TextBlock* m_selectedDes;//[Offset: 0x400, Size: 0x8] 0x78cec01400
	TextBlock* m_selectedName;//[Offset: 0x408, Size: 0x8] 0x78cec01480
	class HeadTypeWidget* TypeCellClass;//[Offset: 0x410, Size: 0x8] 0x78cebc5880
	class HeadItemWidget* HeadImgCellClass;//[Offset: 0x418, Size: 0x8] 0x78cebc5920
	Button* changeheadBtn;//[Offset: 0x420, Size: 0x8] 0x78cec01500
	TextBlock* changeheadText;//[Offset: 0x428, Size: 0x8] 0x78cec01580
	FString btnEnableName;//[Offset: 0x430, Size: 0x10] 0x78cec01600
	FString btnDisableName;//[Offset: 0x440, Size: 0x10] 0x78cec01680
	<enum,FString> typeNames;//[Offset: 0x450, Size: 0x50] 0x78cf15c100
	int m_defaultRow;//[Offset: 0x4a0, Size: 0x4] 0x78cec01800
	void UpdateData(SelectableTextureInfo Info);// 0x8393324 0x78cebf4ae0
	void RefreshUI(int Group);// 0x839327c 0x78cebf4bc0
	void OnSelectHead(int headId);// 0x83931cc 0x78cebf4ca0
	void OnChangeHeadLevel();// 0x8a873f8 0x78cebf4d80
	void GetSelectedImage(out SlateBrush Sprite, int ID);// 0x8392f9c 0x78cebf4e60
	void ChangeTexture(HeadItemWidget* Item, FString Path);// 0x8392e9c 0x78cebf4f40
	void ChangeHead();// 0x83931b8 0x78cebf5020

--------------------------------
Class: HeadItemWidget.HeadClickWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: HeadTypeWidget.HeadClickWidget.UserWidget.Widget.Visual.Object
	TextBlock* m_typeName;//[Offset: 0x2a8, Size: 0x8] 0x78cec02d80
	void SetTitle(out FString titleName);// 0x8396948 0x78cebf4a00

--------------------------------
Class: SelectableTextureGroup.SelectableTextureInfo
	FString groupName;//[Offset: 0x18, Size: 0x10] 0x78cefc7600

--------------------------------
Class: HeroSelectContainerUI.UserWidget.Widget.Visual.Object
	int DataIndex;//[Offset: 0x260, Size: 0x4] 0x78cec04e80
	void SetDataIndex(int idx);// 0x839a0b8 0x78cebf5fe0
	void RefreshData(out const HeroData HeroData);// 0x8a873f8 0x78cebf60c0
	int GetDataIndex();// 0x839a09c 0x78cebf61a0

--------------------------------
Class: HeroSelectItemUI.UserWidget.Widget.Visual.Object
	int DataIndex;//[Offset: 0x260, Size: 0x4] 0x78cec04900
	void SetDataIndex(int idx);// 0x839b010 0x78cebf58e0
	void RefreshData(out const HeroData HeroData);// 0x8a873f8 0x78cebf59c0
	int GetDataIndex();// 0x839aff4 0x78cebf5aa0

--------------------------------
Class: HorseRideComponent.ActorComponent.Object
	int horse_skin_id;//[Offset: 0x104, Size: 0x4] 0x78cec05e00
	float horse_skin_cd;//[Offset: 0x108, Size: 0x4] 0x78cec05e80
	int64 last_use_horse_time;//[Offset: 0x110, Size: 0x8] 0x78cec05f00
	enum ride_state_net_;//[Offset: 0x118, Size: 0x1] 0x78cebc7360
	WuXiaXHorse* ride_horse_net_;//[Offset: 0x120, Size: 0x8] 0x78cec06000
	enum ride_state_net_other_;//[Offset: 0x128, Size: 0x1] 0x78cebc7400
	WuXiaXHorse* ride_horse_net_other_;//[Offset: 0x130, Size: 0x8] 0x78cec06100
	float server_tick_;//[Offset: 0x154, Size: 0x4] 0x78cec06180
	float client_tick_;//[Offset: 0x158, Size: 0x4] 0x78cec06200
	float owner_tick_;//[Offset: 0x15c, Size: 0x4] 0x78cec06280
	void Server_SetLastRotation(Rotator lastrotation);// 0x839c070 0x78cebf8120
	void Server_Ride(int horse_net_id);// 0x839c2f4 0x78cebf8200
	void Server_InputRight(float Value);// 0x839c15c 0x78cebf82e0
	void Server_CallHorse();// 0x839bec4 0x78cebf83c0
	enum Ride_state_net();// 0x839c020 0x78cebf84a0
	WuXiaXHorse* Ride_horse_net();// 0x839bf20 0x78cebf8580
	void PoolDeactivate();// 0x839be3c 0x78cebf8660
	void PoolActivate();// 0x839be58 0x78cebf8740
	void OnRedRideStateOther();// 0x839beb0 0x78cebf8820
	void OnRedRideState();// 0x839be88 0x78cebf8900
	void OnRedHorseOther();// 0x839be9c 0x78cebf89e0
	void OnRedHorse();// 0x839be74 0x78cebf8ac0
	float GetRotationSpeed();// 0x839c054 0x78cebf8ba0
	void Client_Ride_Rotation(Rotator Rotation);// 0x839c244 0x78cebf8c80
	void Client_InitHorseComponent(float cur_cd);// 0x839bf70 0x78cebf8d60
	void Client_HorseCallFinished();// 0x839bf54 0x78cebf8e40

--------------------------------
Class: HotUpdateGameMode.GameModeBase.Info.Actor.Object
	enum Stage;//[Offset: 0x2c0, Size: 0x1] 0x78cf56e3e0
	bool bIsAgreedPrivacy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78cf61d500
	int CurVersion;//[Offset: 0x2c4, Size: 0x4] 0x78cf61d580
	int NewVersion;//[Offset: 0x2c8, Size: 0x4] 0x78cf61d600
	int CurBasePakVersion;//[Offset: 0x2cc, Size: 0x4] 0x78cf61d680
	int NewBasePakVersion;//[Offset: 0x2d0, Size: 0x4] 0x78cf61b600
	int CurMainMapPakVersion;//[Offset: 0x2d4, Size: 0x4] 0x78cf61b680
	int NewMainMapPakVersion;//[Offset: 0x2d8, Size: 0x4] 0x78cf61b700
	int UpdateDefaultNum;//[Offset: 0x2dc, Size: 0x4] 0x78cf61b780
	int UpdateTotalNum;//[Offset: 0x2e0, Size: 0x4] 0x78cf61b800
	int UpdateCompleteNum;//[Offset: 0x2e4, Size: 0x4] 0x78cf61b880
	enum HotUpdateType;//[Offset: 0x2e8, Size: 0x1] 0x78cf56e480
	HotUpdateData[] UpdateData;//[Offset: 0x2f0, Size: 0x10] 0x78cf56e5c0
	bool IsCloseGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x78cf61ba80
	bool IsStartRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1] 0x78cf61bb00
	FString PbtPath;//[Offset: 0x308, Size: 0x10] 0x78cf61bb80
	HotUpdateTable[] PbtUpdateArray;//[Offset: 0x318, Size: 0x10] 0x78cf56e660
	TimerHandle ReConnectHandle;//[Offset: 0x328, Size: 0x8] 0x78cf61be80
	int ReConnectNum;//[Offset: 0x330, Size: 0x4] 0x78cf61bf00
	int ReConnectMaxNum;//[Offset: 0x334, Size: 0x4] 0x78cf61bf80
	float ReConnectInterval;//[Offset: 0x338, Size: 0x4] 0x78cf61c000
	delegate PrecompileTipDelegate;//[Offset: 0x340, Size: 0x10] 0x78cf61c080
	delegate VersionResponseDelegate;//[Offset: 0x350, Size: 0x10] 0x78cf61c100
	HTTPBPResponseNecessaryDelegate HotUpdateResponseDelegate;//[Offset: 0x360, Size: 0x20] 0x78cf61c180
	HTTPBPResponseNecessaryDelegate PbtResponseDelegate;//[Offset: 0x380, Size: 0x20] 0x78cf61c200
	HTTPBPResponseNecessaryDelegate PakListResponseDelegate;//[Offset: 0x3a0, Size: 0x20] 0x78cf61c280
	HTTPBPResponseNecessaryDelegate PakResponseDelegate;//[Offset: 0x3c0, Size: 0x20] 0x78cf61c300
	HTTPBPResponseNecessaryDelegate MainMapPakListResponseDelegate;//[Offset: 0x3e0, Size: 0x20] 0x78cf61c380
	HTTPBPResponseNecessaryDelegate MainMapPakResponseDelegate;//[Offset: 0x400, Size: 0x20] 0x78cf61c400
	HTTPBPResponseNecessaryDelegate BaseVersionDelegate;//[Offset: 0x420, Size: 0x20] 0x78cf61c480
	HTTPBPResponseNecessaryDelegate MainMapVersionDelegate;//[Offset: 0x440, Size: 0x20] 0x78cf61c600
	FString PakDownloadURL;//[Offset: 0x460, Size: 0x10] 0x78cf61a580
	FString PbtDownloadURL;//[Offset: 0x470, Size: 0x10] 0x78cf61a600
	<FString,FString> WaitDownloadPakMap;//[Offset: 0x480, Size: 0x50] 0x78cf5e0340
	<FString,FString> WaitDownloadExtensionPakMap;//[Offset: 0x4d0, Size: 0x50] 0x78cf5e0400
	<FString,int> WaitDownloadPakFileSizeMap;//[Offset: 0x520, Size: 0x50] 0x78cf5e04c0
	FString CurDownloadPakName;//[Offset: 0x570, Size: 0x10] 0x78cf61a980
	<FString,FString> CurPakMap;//[Offset: 0x580, Size: 0x50] 0x78cf5e0580
	FString CurPlatform;//[Offset: 0x5d0, Size: 0x10] 0x78cf61ab00
	int NeedDownloadFileSize;//[Offset: 0x5e0, Size: 0x4] 0x78cf61ab80
	int NeedDownloadExtensionFileSize;//[Offset: 0x5e4, Size: 0x4] 0x78cf61ac00
	int AllDownloadPakNum;//[Offset: 0x5e8, Size: 0x4] 0x78cf61ac80
	int HadDownloadPakNum;//[Offset: 0x5ec, Size: 0x4] 0x78cf61ad00
	int AllDownloadExtensionPakNum;//[Offset: 0x5f0, Size: 0x4] 0x78cf61ad80
	int HadDownloadExtensionPakNum;//[Offset: 0x5f4, Size: 0x4] 0x78cf61ae00
	int ProgressContentLen;//[Offset: 0x5f8, Size: 0x4] 0x78cf61ae80
	int ProgressReceivedBytes;//[Offset: 0x5fc, Size: 0x4] 0x78cf61af00
	float ProgressPercentComplete;//[Offset: 0x600, Size: 0x4] 0x78cf61af80
	bool bStartDownloadPaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1] 0x78cf61b000
	int CurPrecompileRemaining;//[Offset: 0x608, Size: 0x4] 0x78cf61b080
	int TotalPrecompileRemaining;//[Offset: 0x60c, Size: 0x4] 0x78cf61b100
	bool bIsAudit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1] 0x78cf61b180
	void VersionResponseDelegate__DelegateSignature(bool IsAudit);// 0x8a873f8 0x78cee219e0
	void VersionResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x83a001c 0x78cee21ac0
	void VersionProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839fd98 0x78cee21ba0
	void StartStage();// 0x83a04f8 0x78cee21c80
	void StagePrivacyAgreement();// 0x8a873f8 0x78cf5ce780
	void StageComplete();// 0x83a050c 0x78cf5ce860
	void SendVersionRequest();// 0x83a027c 0x78cf5ce940
	void SendPbtRequest();// 0x83a0254 0x78cf5cea20
	void SendPakVersionRequest();// 0x83a01f0 0x78cf5ceb00
	void SendPakRequest();// 0x83a022c 0x78cf5cebe0
	void SendPakListRequest();// 0x83a0240 0x78cf5cecc0
	void SendMainMapPakVersionRequest();// 0x83a01dc 0x78cf5ceda0
	void SendMainMapPakRequest();// 0x83a0204 0x78cf5cee80
	void SendMainMapPakListRequest();// 0x83a0218 0x78cf5cef60
	void SendConfigFileRequest();// 0x83a0268 0x78cf5cf040
	bool ReceiveData(out const byte[] NewData);// 0x83a042c 0x78cf5cf120
	void PrecompileTipDelegate__DelegateSignature();// 0x8a873f8 0x78cf5cf200
	void PbtResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839f7bc 0x78cf5cf2e0
	void PbtProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839f538 0x78cf5cf3c0
	void PakVersionResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839e2cc 0x78cf5cf4a0
	void PakVersionProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839e048 0x78cf5cf580
	void PakResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839ef5c 0x78cf5cf660
	void PakProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839ecd8 0x78cf5cf740
	void PakListResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839f38c 0x78cf5cf820
	void PakListProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839f108 0x78cf5cf900
	void OpenPageTips(FName Msg);// 0x8a873f8 0x78cf5cf9e0
	void OpenMessageBox(enum Type, bool bHasCancel, int NeedDpwnloadFileSize);// 0x8a873f8 0x78cf5cfac0
	void OnMessageBoxClick(bool bConfirm);// 0x839db68 0x78cf5cfba0
	void MainMapPakVersionResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839de9c 0x78cf5cfc80
	void MainMapPakVersionProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839dc18 0x78cf5cfd60
	void MainMapPakResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839e6fc 0x78cf5cfe40
	void MainMapPakProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839e478 0x78cf5cff20
	void MainMapPakListResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839eb2c 0x78cf5ccaa0
	void MainMapPakListProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839e8a8 0x78cf5ccb80
	bool IsCurrentChannelNeedOpenPrivacyAgreement();// 0x83a0534 0x78cf5ccc60
	void HotUpdateComplete();// 0x83a0290 0x78cf5ccd40
	void HandleUpdateCurMapComplete(bool bAllFileSuccess);// 0x839d5c4 0x78cf5cce20
	void HandlePakResponseComplete(bool bSuccess);// 0x839daa4 0x78cf5ccf00
	void HandlePakListComplete();// 0x839db54 0x78cf5ccfe0
	void HandleDownloadReponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839d8f8 0x78cf5cd0c0
	void HandleDownloadProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839d674 0x78cf5cd1a0
	void HandleConfigComplete();// 0x839d5b0 0x78cf5cd280
	void ContinueStageComplete();// 0x83a0520 0x78cf5cd360
	void ConfigResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x839fbec 0x78cf5cd440
	void ConfigProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x839f968 0x78cf5cd520
	void CompleteType(int Step);// 0x83a02a4 0x78cf5cd600
	void CloseGame();// 0x83a034c 0x78cf5cd6e0
	void CheckWifi();// 0x83a01c8 0x78cf5cd7c0
	bool CheckDataIsNew(out const byte[] NewData);// 0x83a0360 0x78cf5cd8a0

--------------------------------
Class: HttpRequest.HttpBase
	FString Verb;//[Offset: 0x38, Size: 0x10] 0x78cf570180
	float ElapsedTime;//[Offset: 0x48, Size: 0x4] 0x78cf570200
	enum Status;//[Offset: 0x4c, Size: 0x1] 0x78cf560100

--------------------------------
Class: HotUpdateData
	byte[] Data;//[Offset: 0x0, Size: 0x10] 0x78cf56e520

--------------------------------
Class: HotUpdateTable
	FString PbtName;//[Offset: 0x0, Size: 0x10] 0x78cf61bc00
	FString PbtMD5;//[Offset: 0x10, Size: 0x10] 0x78cf61bc80
	int SourceFileSize;//[Offset: 0x20, Size: 0x4] 0x78cf61bd00
	int CompressFileSize;//[Offset: 0x24, Size: 0x4] 0x78cf61bd80

--------------------------------
Class: HTTPBPResponseNecessaryDelegate
	delegate HttpRequestCompleteDelegate;//[Offset: 0x0, Size: 0x10] 0x78cf61c500
	delegate HttpRequestProgressDelegate;//[Offset: 0x10, Size: 0x10] 0x78cf61c580

--------------------------------
Class: HotUpdateHUD.WuXiaXHUDBase.HUD.Actor.Object

--------------------------------
Class: HuntToken.Actor.Object
	ParticleSystemComponent* hunt_effect_com_;//[Offset: 0x220, Size: 0x8] 0x78cec05c00
	float life_time_;//[Offset: 0x228, Size: 0x4] 0x78cec05c80
	float speed_;//[Offset: 0x22c, Size: 0x4] 0x78cec05d00
	Vector tar_loc_;//[Offset: 0x230, Size: 0xc] 0x78cec05d80

--------------------------------
Class: ImageMessageItem.UserWidget.Widget.Visual.Object
	void OnUpdateQuality(enum Quality);// 0x8a873f8 0x78cebf7f60
	void InitData(out const ImageMsgItemInfo Info);// 0x8a873f8 0x78cebf8040

--------------------------------
Class: ImageMsgItemInfo
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefbe900
	FString Name;//[Offset: 0x8, Size: 0x10] 0x78cefbe980
	int Num;//[Offset: 0x18, Size: 0x4] 0x78cefbea00
	FString ImagePath;//[Offset: 0x20, Size: 0x10] 0x78cefbea80
	FString detail;//[Offset: 0x30, Size: 0x10] 0x78cefbeb00
	enum Quality;//[Offset: 0x40, Size: 0x1] 0x78cee5eac0
	FString RepeatImagePath;//[Offset: 0x48, Size: 0x10] 0x78cefbec00
	int RepeatNumber;//[Offset: 0x58, Size: 0x4] 0x78cefbec80
	bool NeedGap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78cefbed00
	FString Sign;//[Offset: 0x60, Size: 0x10] 0x78cefbed80

--------------------------------
Class: ImageMessageUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	delegate CloseEvent;//[Offset: 0x330, Size: 0x10] 0x78cec05980
	void SortData(out ImageMsgItemInfo[] Info);// 0x83a48bc 0x78cebf7cc0
	void OnClose();// 0x83a48a8 0x78cebf7da0
	void InitData(out const ImageMsgItemInfo[] Info);// 0x8a873f8 0x78cebf7e80

--------------------------------
Class: ImageShowWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	ImageMessageUI* m_ImageWidgetBasic;//[Offset: 0x330, Size: 0x8] 0x78cec05900

--------------------------------
Class: InteractiveInterface.Interface.Object
	bool InteractiveUITips(WuXiaXBaseCharacter* Player, out FText text);// 0x83a5620 0x78cebf7a20
	enum GetInteractiveType(WuXiaXBaseCharacter* Player);// 0x83a5568 0x78cebf7b00
	bool CanInteractive(WuXiaXBaseCharacter* Player, enum Trigger);// 0x83a5784 0x78cebf7be0

--------------------------------
Class: IntimacyUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void BP_SetInfo(out const FriendBaseInfo Info);// 0x8a873f8 0x78cebf7940

--------------------------------
Class: ItemEffectFunctionLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: ItemInfoTipUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void SetInfo(int ID, Widget* Widget);// 0x8a873f8 0x78cebf7860

--------------------------------
Class: ItemParticlesEffect.Actor.Object
	ParticleSystem* particle_;//[Offset: 0x238, Size: 0x8] 0x78cec07380
	NiagaraSystem* Niagara;//[Offset: 0x240, Size: 0x8] 0x78cec05300

--------------------------------
Class: WuxiaShopItem.Object
	int64 IndexId;//[Offset: 0x28, Size: 0x8] 0x78cec06f00
	int64 ItemId;//[Offset: 0x30, Size: 0x8] 0x78cec06f80
	FString ItemName;//[Offset: 0x38, Size: 0x10] 0x78cec07000
	int ShoppingCount;//[Offset: 0x48, Size: 0x4] 0x78cec07080
	int HaveCount;//[Offset: 0x4c, Size: 0x4] 0x78cec07100
	FString IconPath;//[Offset: 0x50, Size: 0x10] 0x78cec07180
	int CurrencyType;//[Offset: 0x60, Size: 0x4] 0x78cec07200
	int CurrencyAmount;//[Offset: 0x64, Size: 0x4] 0x78cec07280
	bool IsVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78cec07300

--------------------------------
Class: ItemToItemExchangeWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	Button* AddBtn;//[Offset: 0x330, Size: 0x8] 0x78cec08080
	Button* DecreaseBtn;//[Offset: 0x338, Size: 0x8] 0x78cec08100
	Button* Add100Btn;//[Offset: 0x340, Size: 0x8] 0x78cec08180
	Button* Add1000Btn;//[Offset: 0x348, Size: 0x8] 0x78cec08200
	Button* AddAllBtn;//[Offset: 0x350, Size: 0x8] 0x78cec08280
	Button* ConfirmBtn;//[Offset: 0x358, Size: 0x8] 0x78cec08300
	int CurrentAddCount;//[Offset: 0x360, Size: 0x4] 0x78cec08380
	int CurrentSrcCount;//[Offset: 0x364, Size: 0x4] 0x78cec08400
	int CurrentTargetCount;//[Offset: 0x368, Size: 0x4] 0x78cec06380
	int SrcItemId;//[Offset: 0x36c, Size: 0x4] 0x78cec06400
	int TargetItemId;//[Offset: 0x370, Size: 0x4] 0x78cec06480
	enum SrcItemType;//[Offset: 0x374, Size: 0x1] 0x78cebc6dc0
	enum TargetItemType;//[Offset: 0x375, Size: 0x1] 0x78cebc6e60
	bool bIsClickAddBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 0x1] 0x78cec06600
	void UpdateEditText(int ValueToText);// 0x8a873f8 0x78cebfa180
	void SetItem(enum InSrcDataType, enum InTargetDataType, int InSrcItemId, int InTargetItemId);// 0x83a8820 0x78cebfa260
	void OnExchageClicked();// 0x83a86f0 0x78cebfa340
	void OnEditTextChanged(out const FText InText);// 0x83a8568 0x78cebfa420
	void K2_PopTips(out const FText TipsTextToShow);// 0x8a873f8 0x78cebfa500
	void K2_PopMessageBox();// 0x8a873f8 0x78cebfa5e0
	void K2_OnExchangeResponded(int Result);// 0x8a873f8 0x78cebfa6c0
	bool IsNumberOnly(out const FText InText);// 0x83a8704 0x78cebfa7a0
	void InitItemInfo();// 0x8a873f8 0x78cebfa880
	void DecreaseOne();// 0x83a86c8 0x78cebfa960
	void Confirm();// 0x83a8678 0x78cebfaa40
	void AddOne();// 0x83a86dc 0x78cebfab20
	void AddAll();// 0x83a868c 0x78cebfac00
	void Add1000();// 0x83a86a0 0x78cebface0
	void Add100();// 0x83a86b4 0x78cebf7400

--------------------------------
Class: JingcuiExchange.UserWidgetBase.UserWidget.Widget.Visual.Object
	void SendRechargeItemRequest(int ShopIdm, int ItemCount);// 0x83a9538 0x78cebf97e0
	void OnExchangeResult(int ErrorCode, out const RewardItem[] RewardArray);// 0x8a873f8 0x78cebf98c0
	void OnExchangeItem();// 0x83a96dc 0x78cebf99a0
	bool OnCanSkipUI(int64 ItemId);// 0x83a9628 0x78cebf9a80
	void Init();// 0x83a96f0 0x78cebf9b60
	void BP_UpdatePlayerAttr(enum Type, int Num);// 0x8a873f8 0x78cebf9c40
	void BP_SetJinCuiCoinInfo(int Num);// 0x8a873f8 0x78cebf9d20
	void BP_RefreshSoldOutItem();// 0x8a873f8 0x78cebf9e00
	void BP_InitRuleText(int Num);// 0x8a873f8 0x78cebf9ee0
	void BP_InitDateInfo(DateTime StartDate, DateTime EndDate);// 0x8a873f8 0x78cebf9fc0
	void BP_CreateItemWidget(ShopItemInfo iteminfo);// 0x8a873f8 0x78cebfa0a0

--------------------------------
Class: LeitaiResConfig.Actor.Object
	int LeitaiID;//[Offset: 0x220, Size: 0x4] 0x78cec07580
	GameRebirthActor*[] RedStartPoints;//[Offset: 0x228, Size: 0x10] 0x78cebc6960
	GameRebirthActor*[] BlueStartPoints;//[Offset: 0x238, Size: 0x10] 0x78cebc6a00
	Actor*[] RedBarrier;//[Offset: 0x248, Size: 0x10] 0x78cebc6aa0
	Actor*[] BlueBarrier;//[Offset: 0x258, Size: 0x10] 0x78cebc6b40
	Actor*[] Boarder;//[Offset: 0x268, Size: 0x10] 0x78cebc6be0

--------------------------------
Class: LevelFund.UserWidget.Widget.Visual.Object
	void Init();// 0x83ab700 0x78cebfc720
	RechargeInfo GetLevelFundRechargeInfo();// 0x83ab624 0x78cebfc800
	void CreateRewardWidet(int Level);// 0x8a873f8 0x78cebfc8e0
	void BP_UpdateLevelFundState();// 0x8a873f8 0x78cebfc9c0
	void BP_InitShowReward(out const ImageMsgItemInfo[] Reward);// 0x8a873f8 0x78cebf90e0

--------------------------------
Class: LevelFundRewardItem.UserWidget.Widget.Visual.Object
	int Level;//[Offset: 0x260, Size: 0x4] 0x78cec09000
	void Init(int Level);// 0x83abe34 0x78cebfc560
	void BP_InitRewardInfo(int Level, out const ImageMsgItemInfo[] Reward, out const ImageMsgItemInfo[] SeniorReward);// 0x8a873f8 0x78cebfc640

--------------------------------
Class: LoadingMapMode.GameModeBase.Info.Actor.Object
	World*[] MapSoftPathStandAlone;//[Offset: 0x2c8, Size: 0x10] 0x78cebc8da0
	<enum,World*> MapSoftFromGameMode;//[Offset: 0x2d8, Size: 0x50] 0x78cf15bec0
	void LoadMapComplete();// 0x83b162c 0x78cebfbbc0
	void LoadMap(out const World* MpaPath);// 0x8a873f8 0x78cebfbca0

--------------------------------
Class: LoadInterface.Interface.Object
	bool LoadComplete(Object* Component, out const SoftObjectPath asset_ref);// 0x83b236c 0x78cebfb840

--------------------------------
Class: MailUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void ShowItemTips(int ItemId, int Type);// 0x8a873f8 0x78cebfd360
	void SetMailInfo(out const UIMailInfo[] mailList);// 0x8a873f8 0x78cebfd440
	void SetMailData(UIMailInfo MailData);// 0x8a873f8 0x78cebfd520
	void OnOpenMailWidget();// 0x8a873f8 0x78cebfd600
	void HideItemTips();// 0x8a873f8 0x78cebfd6e0
	void GetMailItem(bool Result);// 0x8a873f8 0x78cebfd7c0
	void GetAllMailItem();// 0x8a873f8 0x78cebfd8a0
	void DelAllMailItem();// 0x8a873f8 0x78cebfd980
	void CreateMailItem(int item_id, int Num, FString icon, bool isGet, int Type, enum Quality);// 0x8a873f8 0x78cebfda60

--------------------------------
Class: MallBaseWidget.BaseWidget.UserWidget.Widget.Visual.Object
	ClientLoginHUD* ClientLoginHUD;//[Offset: 0x260, Size: 0x8] 0x78cec96e00
	ClientNetMessageHandle* ClientNetMessageHandle;//[Offset: 0x268, Size: 0x8] 0x78cec96e80
	ClientNetMessageHandle* GetClientNetMsgHandle();// 0x83c657c 0x78cec8b4c0
	ClientLoginHUD* GetClientLoginHUD();// 0x83c65b0 0x78cec8b5a0

--------------------------------
Class: MallTryOnWidget.MallBaseWidget.BaseWidget.UserWidget.Widget.Visual.Object
	void ShowTryOnPanel(MallItemInfo Info);// 0x8a873f8 0x78cec8b300
	void InitTryonItems(out const MallItemInfo[] MallItemInfos);// 0x8a873f8 0x78cec8b3e0

--------------------------------
Class: MallWidget.MallBaseWidget.BaseWidget.UserWidget.Widget.Visual.Object
	void UpdateMallItemBought(out const <int,int> IdNumMap);// 0x8a873f8 0x78cec8b140
	void InitMallItems(out const MallItemInfo[] MallItemInfos);// 0x8a873f8 0x78cec8b220

--------------------------------
Class: MessageBoxWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	MessageBoxData m_data;//[Offset: 0x330, Size: 0x70] 0x78cec9a200
	Button* m_cancelBtn;//[Offset: 0x3b0, Size: 0x8] 0x78cec9a280
	Button* m_confirmBtn;//[Offset: 0x3b8, Size: 0x8] 0x78cec9a300
	TextBlock* m_title;//[Offset: 0x3c0, Size: 0x8] 0x78cec9a380
	TextBlock* m_info;//[Offset: 0x3c8, Size: 0x8] 0x78cec9a400
	WidgetSwitcher* m_WidgetSwitcher;//[Offset: 0x3d0, Size: 0x8] 0x78cec9a480
	RichTextBlock* m_RichTextBlock;//[Offset: 0x3d8, Size: 0x8] 0x78cec9a500
	DataTable* m_table;//[Offset: 0x3e8, Size: 0x8] 0x78cec98480
	void OnClickConfirm();// 0x83ca6cc 0x78cec8ff20
	void OnClickCancel();// 0x83ca6e0 0x78cec8caa0
	void InitData(FString title, FString Info, bool hasCancel, out const delegate callback, float closeTime);// 0x83ca800 0x78cec8cb80
	void ChangeBtnText(FString confirmText, FString cancelText);// 0x83ca6f4 0x78cec8cc60

--------------------------------
Class: MessageBoxData.MessageData
	FString Info;//[Offset: 0x10, Size: 0x10] 0x78cefc7680
	bool hasCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cefc7700
	delegate callback;//[Offset: 0x24, Size: 0x10] 0x78cefc7780

--------------------------------
Class: MessageData
	FString title;//[Offset: 0x0, Size: 0x10] 0x78cefc7800

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText text;//[Offset: 0x128, Size: 0x18] 0x78ce853e80
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 0x8] 0x78ce853f00
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 0x10] 0x78ce72cb80
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1] 0x78ce853f80
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 0x270] 0x78ce854000
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 0x4] 0x78ce854080
	enum TextTransformPolicy;//[Offset: 0x3d4, Size: 0x1] 0x78ce72cc20
	TextBlockStyle DefaultTextStyle;//[Offset: 0x3d8, Size: 0x270] 0x78ce854180
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 0x10] 0x78ce72ccc0
	void SetTextTransformPolicy(enum InTransformPolicy);// 0xa195f3c 0x78ce7c9000
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0xa195bd8 0x78ce7c5720
	void SetText(out const FText InText);// 0xa195c80 0x78ce7c5800
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xa196094 0x78ce7c58e0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0xa195e7c 0x78ce7c59c0
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0xa19613c 0x78ce7c5aa0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0xa1964a4 0x78ce7c5b80
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0xa196548 0x78ce7c5c60
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0xa196308 0x78ce7c5d40
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0xa1965f0 0x78ce7c5e20
	void SetAutoWrapText(bool InAutoTextWrap);// 0xa195fe4 0x78ce7c5f00
	FText GetText();// 0xa195d98 0x78ce7c5fe0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0xa195b28 0x78ce7c60c0
	void ClearAllDefaultStyleOverrides();// 0xa195e68 0x78ce7c61a0

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x78cee96680
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28] 0x78cee96700
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8] 0x78cee96780
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10] 0x78cee96800
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28] 0x78cee96880
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10] 0x78cee96900
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x88] 0x78cee96980
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 0x88] 0x78cee96a00
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 0x88] 0x78cee96a80

--------------------------------
Class: MessageManagerWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	bool m_IsSequenceShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78cec99c00
	bool m_IsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1] 0x78cec99c80
	RewardInfo[] m_RewardRemains;//[Offset: 0x338, Size: 0x10] 0x78cebcae20
	UserWidget* m_SequenciallyRewardTemp;//[Offset: 0x348, Size: 0x8] 0x78cec99d80
	CanvasPanel* m_container;//[Offset: 0x350, Size: 0x8] 0x78cec99e00
	<enum,class UserWidgetBase> m_widgetClasses;//[Offset: 0x358, Size: 0x50] 0x78cf15b380
	void OnCloseWidget();// 0x8a873f8 0x78cec8fd60
	UserWidgetBase* InitMsgBox(FString title, FString Info, bool hasCancel, out const delegate callback, float closeTime);// 0x83cb044 0x78cec8fe40

--------------------------------
Class: MessageUI.UserWidget.Widget.Visual.Object
	enum m_type;//[Offset: 0x260, Size: 0x1] 0x78cebcace0
	void ShowMessage(enum Type, FString Message, bool showCancel);// 0x8a873f8 0x78cec8fac0
	void OnOKCallback();// 0x83cb840 0x78cec8fba0
	void OnCancelCallback();// 0x83cb82c 0x78cec8fc80

--------------------------------
Class: Missile.Actor.Object
	ParticleSystem* FlightPathParticle;//[Offset: 0x268, Size: 0x8] 0x78cec9a580
	ParticleSystemComponent* FlightPathParticleComponent;//[Offset: 0x270, Size: 0x8] 0x78cec9a600
	NiagaraSystem* FlightPathNiagara;//[Offset: 0x278, Size: 0x8] 0x78cec9a680
	NiagaraComponent* FlightPathNiagaraComponent;//[Offset: 0x280, Size: 0x8] 0x78cec9a700
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x83d1034 0x78ceca14a0
	void CallWhenDestroy();// 0x83d1280 0x78ceca1580

--------------------------------
Class: MissileController.Actor.Object
	Missile*[] missiles_;//[Offset: 0x270, Size: 0x10] 0x78cebcaba0
	ParticleSystem* particle_;//[Offset: 0x290, Size: 0x8] 0x78cec9bd00
	NiagaraSystem* Niagara;//[Offset: 0x298, Size: 0x8] 0x78cec9bd80
	int targetPlayerNetID;//[Offset: 0x2a0, Size: 0x4] 0x78cec9be00
	int ChargeNum;//[Offset: 0x2a4, Size: 0x4] 0x78cec9be80
	void SpawnEmitter(Vector Location, int index);// 0x83d17e4 0x78ceca1040
	int GetTargetPlayerID();// 0x83d17c8 0x78ceca1120
	void DestroyMissile(int index);// 0x83d18e0 0x78ceca1200
	void Client_Init(int64 missileid, int64 begintime, Vector spawnlocation, Rotator spawnrotation, Vector Direction, int launchplayerid, int64 missilecontrollerid, int weapon_id, int skin_id, int InAimRangeTargetId, int RangeChargeNum);// 0x83d1990 0x78ceca12e0
	void CallWhenDestroy();// 0x83d17b4 0x78ceca13c0

--------------------------------
Class: MoWen.WuXiaInteractiveActor.Actor.Object
	int open_state_;//[Offset: 0x2b8, Size: 0x4] 0x78cec9b880
	float open_count_;//[Offset: 0x2bc, Size: 0x4] 0x78cec9b900
	<int,NiagaraComponent*> ShowWeaponEffectFXComponent;//[Offset: 0x2c0, Size: 0x50] 0x78cf15b2c0
	bool game_start_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x78cec9ba80
	float show_time_;//[Offset: 0x314, Size: 0x4] 0x78cec9bb00
	void UpdateEffect(SkeletalMeshComponent* Mesh);// 0x83d292c 0x78ceca0cc0
	void OpenStateChanged();// 0x8a873f8 0x78ceca0da0
	void OnRep_OpenState();// 0x83d29d4 0x78ceca0e80
	void DisableEffect();// 0x83d2918 0x78ceca0f60

--------------------------------
Class: NetManager.Actor.Object

--------------------------------
Class: NetMessageHandle.BaseNetHandle.Actor.Object
	bool regist_game_server_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78cec9d400
	FString ip_addr_;//[Offset: 0x270, Size: 0x10] 0x78cec9d480
	bool reconnect_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78cec9d500
	uint32 dedicated_port_;//[Offset: 0x284, Size: 0x4] 0x78cec9d580
	WuXiaXGameModeBase* game_mode_;//[Offset: 0x288, Size: 0x8] 0x78cec9d600
	void SendNeedNotTrain(int Mode);// 0x83d3798 0x78ceca06a0
	void RequestVoiceMemberID(int[] player_id_list);// 0x83d3688 0x78ceca0780
	void RequestPrivacySettings();// 0x83d3784 0x78ceca0860
	void RequestPraise(int user_id);// 0x83d34a0 0x78ceca0940
	bool ReportVoiceReady();// 0x83d363c 0x78ceca0a20
	void ReportVoice();// 0x83d3674 0x78ceca0b00
	void AddRelationRequest(int PlayerID, enum relationType);// 0x83d3548 0x78ceca0be0

--------------------------------
Class: WuXiaXGameModeBase.GameModeBase.Info.Actor.Object
	bool is_end_game_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78ce6a9300
	bool is_debug_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78ce6a9380
	int[] DebugHeroSkinIds;//[Offset: 0x2c8, Size: 0x10] 0x78ceddc2c0
	int DebugHorseSkinId;//[Offset: 0x2d8, Size: 0x4] 0x78ce6a9480
	int[] DebugEquipSkinIds;//[Offset: 0x2e0, Size: 0x10] 0x78ceddc360
	bool _DamageCircle_Work;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x78ce6a7480
	bool _Random_Brith_Point;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1] 0x78ce6a7500
	bool _Fly_Plain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1] 0x78ce6a7580
	bool _Delay_Refresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 0x1] 0x78ce6a7600
	bool _OB_Work;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1] 0x78ce6a7680
	bool _EditorLoadNpcNavMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1] 0x78ce6a7700
	bool _EndlessMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 0x1] 0x78ce6a7780
	float TeamDamagePercent;//[Offset: 0x2f8, Size: 0x4] 0x78ce6a7800
	int Debug_Session_Point;//[Offset: 0x2fc, Size: 0x4] 0x78ce6a7880
	int Debug_FlyTool_Skin;//[Offset: 0x300, Size: 0x4] 0x78ce6a7900
	bool is_squad_test;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x78ce6a7980
	float min_kill_android_time_;//[Offset: 0x308, Size: 0x4] 0x78ce6a7a00
	float max_kill_android_time_;//[Offset: 0x30c, Size: 0x4] 0x78ce6a7a80
	float start_kill_android_time_;//[Offset: 0x310, Size: 0x4] 0x78ce6a7b00
	bool save_profile_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1] 0x78ce6a7b80
	int max_number_players_each_squad;//[Offset: 0x31c, Size: 0x4] 0x78ce6a7c00
	bool bEnableTAServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1] 0x78ce6a7c80
	float[] paradrop_times_;//[Offset: 0x328, Size: 0x10] 0x78ceddc400
	TAServer* ta_server;//[Offset: 0x350, Size: 0x8] 0x78ce6a7d80
	class Actor* CharacterActor;//[Offset: 0x358, Size: 0x8] 0x78ceddc4a0
	float max_player_idle_time_;//[Offset: 0x360, Size: 0x4] 0x78ce6a7e00
	int TeamMultiplayersNum;//[Offset: 0x364, Size: 0x4] 0x78ce6a7e80
	<int,Vector> wait_rebirth_loc_map_;//[Offset: 0x368, Size: 0x50] 0x78cee125c0
	int[] player_ids_;//[Offset: 0x428, Size: 0x10] 0x78ceddc540
	FString[] player_names_;//[Offset: 0x438, Size: 0x10] 0x78ceddc5e0
	int[] npc_player_ids_;//[Offset: 0x448, Size: 0x10] 0x78ceddc680
	FString[] npc_player_names_;//[Offset: 0x458, Size: 0x10] 0x78ceddc720
	<int,FString> npc_id2name_map_;//[Offset: 0x468, Size: 0x50] 0x78cee12680
	enum game_type_;//[Offset: 0x4b8, Size: 0x1] 0x78ceddc7c0
	int start_game_team_num_;//[Offset: 0x4bc, Size: 0x4] 0x78ce6a8380
	FString voice_channel_name_;//[Offset: 0x4c0, Size: 0x10] 0x78ce6a8400
	<int,UserLoginData> session_keys_;//[Offset: 0x4d0, Size: 0x50] 0x78cee12740
	<FString,int> editor_session_names_;//[Offset: 0x520, Size: 0x50] 0x78cee12800
	NetMessageHandle* net_actor_;//[Offset: 0x570, Size: 0x8] 0x78ce6a6580
	int child_room_num_;//[Offset: 0x578, Size: 0x4] 0x78ce6a6600
	<int,WuXiaXCharacter*> server_player_character_map_;//[Offset: 0x580, Size: 0x50] 0x78cee128c0
	<int,WuXiaXBaseCharacter*> server_npc_character_map_;//[Offset: 0x5d0, Size: 0x50] 0x78cee12980
	int[] ServerWildPlayerArray;//[Offset: 0x620, Size: 0x10] 0x78ceddc860
	<int,int> player_map_unique_id_map_;//[Offset: 0x630, Size: 0x50] 0x78cee12a40
	<int,GameStatisticInfo> player_statistic_map_;//[Offset: 0x680, Size: 0x50] 0x78cee12b00
	<int,WuXiaXCharacter*> leave_player_character_map_;//[Offset: 0x6d0, Size: 0x50] 0x78cee12bc0
	<int,WuXiaXCharacter*> jail_player_character_map_;//[Offset: 0x720, Size: 0x50] 0x78cee12c80
	<int,WuXiaXOBController*> server_observer_map_;//[Offset: 0x770, Size: 0x50] 0x78cee12d40
	enum current_game_mode_;//[Offset: 0x7c0, Size: 0x1] 0x78ceddc900
	<int,FString> SquadIDMap;//[Offset: 0x7c8, Size: 0x50] 0x78cee12e00
	<int,FString> SquadNamesMap;//[Offset: 0x818, Size: 0x50] 0x78cee12ec0
	<int,WuXiaInteractiveActor*> interactive_actor_map_;//[Offset: 0x868, Size: 0x50] 0x78cee12f80
	WuXiaSquadManager* squad_manager_;//[Offset: 0x8c0, Size: 0x8] 0x78ce6a7180
	PickItemManager* pick_manager_;//[Offset: 0x8c8, Size: 0x8] 0x78ce6a7200
	DamageCircleActor* damage_circle_;//[Offset: 0x8d0, Size: 0x8] 0x78ce6a7280
	WuXiaXPlane* plane_;//[Offset: 0x8d8, Size: 0x8] 0x78ce6a7300
	WuXiaHorseManager* horse_manager_;//[Offset: 0x8e0, Size: 0x8] 0x78ce6a7380
	AltarManager* altar_manager_;//[Offset: 0x8e8, Size: 0x8] 0x78ce6a5300
	MoWen* mowen_;//[Offset: 0x8f0, Size: 0x8] 0x78ce6a5380
	WuXiaInteractiveActor*[] FlyPointArray;//[Offset: 0x8f8, Size: 0x10] 0x78ceddc9a0
	WuXiaInteractiveActor*[] TouGongArray;//[Offset: 0x908, Size: 0x10] 0x78ceddca40
	WuXiaInteractiveActor*[] DragonRockArray;//[Offset: 0x918, Size: 0x10] 0x78ceddcae0
	Altar*[] SacrificeArray;//[Offset: 0x928, Size: 0x10] 0x78ceddcb80
	WuXiaInteractiveActor*[] KeyBoxArray;//[Offset: 0x938, Size: 0x10] 0x78ceddcc20
	WuXiaParadrop*[] ParadropArray;//[Offset: 0x948, Size: 0x10] 0x78ceddccc0
	NpcPoint*[] TouTuoArray;//[Offset: 0x958, Size: 0x10] 0x78ceddcd60
	EffectPoint*[] EffectPointArray;//[Offset: 0x968, Size: 0x10] 0x78ceddce00
	WuXiaPVPResourcesActor*[] ResourcePointArray;//[Offset: 0x978, Size: 0x10] 0x78cedda560
	AdvancedDrugArea*[] adrug_area_arr_;//[Offset: 0x988, Size: 0x10] 0x78cedda600
	GameRebirthActor*[] player_rebirth_actor_array_;//[Offset: 0x998, Size: 0x10] 0x78cedda6a0
	GameRebirthActor*[] player_jail_actor_array_;//[Offset: 0x9a8, Size: 0x10] 0x78cedda740
	GameRebirthActor*[] jail_fight_actor_array_;//[Offset: 0x9b8, Size: 0x10] 0x78cedda7e0
	int64 login_timer_;//[Offset: 0x9c8, Size: 0x8] 0x78ce6a5a80
	WuXiaXGameStateBase* game_state_;//[Offset: 0x9d0, Size: 0x8] 0x78ce6a5b00
	int[] voice_ignore_players_;//[Offset: 0xa30, Size: 0x10] 0x78cedda880
	FString[] android_names_;//[Offset: 0xa50, Size: 0x10] 0x78cedda920
	class WuXiaParadrop* paradrop_class_;//[Offset: 0xa68, Size: 0x8] 0x78cedda9c0
	class WuXiaHorseManager* horse_manager_class_;//[Offset: 0xa70, Size: 0x8] 0x78ceddaa60
	class WuXiaWinActor* win_actor_class_;//[Offset: 0xa78, Size: 0x8] 0x78ceddab00
	WuXiaXGameInstance* game_instance_;//[Offset: 0xa80, Size: 0x8] 0x78ce6a5c80
	<int,float> award_table_one_;//[Offset: 0xa88, Size: 0x50] 0x78cee13040
	<int,float> award_table_two_;//[Offset: 0xad8, Size: 0x50] 0x78cee13100
	VoiceChatSetting[] m_ServerChatPlayer;//[Offset: 0xb28, Size: 0x10] 0x78ceddaba0
	<int,int> win_players_;//[Offset: 0xb60, Size: 0x50] 0x78cee10040
	FString GameUniqueID;//[Offset: 0xc00, Size: 0x10] 0x78ce6a6080
	bool ServerRecordReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 0x1] 0x78ce6a6100
	int Debug_SpectatorID;//[Offset: 0xc14, Size: 0x4] 0x78ce6a6180
	<int,CampInfo> camp_infos_;//[Offset: 0xc20, Size: 0x50] 0x78cee10100
	<int,ResurrectionInfo> player_resurrection_infos_;//[Offset: 0xc70, Size: 0x50] 0x78cee101c0
	<int,TeachingTriggerPoint*> TeachingPointMap;//[Offset: 0xcc0, Size: 0x50] 0x78cee10280
	<int,int> eagle_marked_player_map_;//[Offset: 0xd18, Size: 0x50] 0x78cee10340
	<int,int> hunt_marked_player_map_;//[Offset: 0xd68, Size: 0x50] 0x78cee10400
	<int,int> hunt_dying_player_map_;//[Offset: 0xdb8, Size: 0x50] 0x78cee104c0
	void TestAddAndroid(int Number);// 0x85528f8 0x78ce6b1820
	void SetGameMode(enum Mode);// 0x8552db4 0x78ce6b1900
	void SetAltarManager(AltarManager* am);// 0x8552854 0x78ce6b19e0
	void RegisterTouTuoNpc(NpcPoint* PlayerPoint);// 0x8552464 0x78ce6b1ac0
	void RegisterTouGong(WuXiaInteractiveActor* TouGong);// 0x8552704 0x78ce6b1ba0
	void RegisterTeachingPoint(TeachingTriggerPoint* Point);// 0x8552b70 0x78ce6b1c80
	void RegisterSacrifice(Altar* Sacrifice);// 0x85525b4 0x78ce69e780
	void RegisterResourcePoint(WuXiaPVPResourcesActor* ResourcePoint);// 0x8552314 0x78ce69e860
	void RegisterPlayer(WuXiaXCharacter* avatar);// 0x8552d0c 0x78ce69e940
	void RegisterKeyBox(WuXiaInteractiveActor* KeyBox);// 0x855250c 0x78ce69ea20
	void RegisterFlyPoint(WuXiaInteractiveActor* FlyPoint);// 0x85527ac 0x78ce69eb00
	void RegisterEffectPoint(EffectPoint* EffectPoint);// 0x85523bc 0x78ce69ebe0
	void RegisterDragonRock(WuXiaInteractiveActor* DragonRock);// 0x855265c 0x78ce69ecc0
	void RefreshPick();// 0x8552f54 0x78ce69eda0
	void RefreshHorse();// 0x8552f40 0x78ce69ee80
	void KickPlayer(int PlayerID, enum reason);// 0x8552c18 0x78ce69ef60
	bool IsGameMode(enum Mode);// 0x8552e58 0x78ce69f040
	TeachingTriggerPoint* GetTeachingPointByType(enum Type);// 0x8552ac0 0x78ce69f120
	enum GetGameMode();// 0x8552f0c 0x78ce69f200
	void DeactivateAllTeachingPoint();// 0x8552aac 0x78ce69f2e0
	void BroadAllPlayer_UpdateSacrificeUI(int ID, bool bIsBroken);// 0x85529a0 0x78ce69f3c0
	void BeginpParadrop();// 0x8552a98 0x78ce69f4a0
	void AltarMapLoadComplete();// 0x8552300 0x78ce69f580

--------------------------------
Class: NpcPoint.Actor.Object
	int PointId;//[Offset: 0x220, Size: 0x4] 0x78cecb4880
	int npc_id;//[Offset: 0x224, Size: 0x4] 0x78cecb4900
	int Middle_Npc_id;//[Offset: 0x228, Size: 0x4] 0x78cecb4980
	int High_Npc_id;//[Offset: 0x22c, Size: 0x4] 0x78cecb4a00
	bool bIsInCave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78cecb4a80
	enum NpcType;//[Offset: 0x231, Size: 0x1] 0x78cebcdb20
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1] 0x78cecb4b80

--------------------------------
Class: TeachingTriggerPoint.Actor.Object
	enum Type;//[Offset: 0x220, Size: 0x1] 0x78ced2e340
	float Time;//[Offset: 0x224, Size: 0x4] 0x78ceda7100
	float VirtualShadowTime;//[Offset: 0x228, Size: 0x4] 0x78ceda7180
	bool bSpawnItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x78ceda7200
	Actor* SpawnItemPoint;//[Offset: 0x230, Size: 0x28] 0x78ceda7280
	bool bHaveEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x78ceda7300
	TeachingEndPoint* EndPoint;//[Offset: 0x260, Size: 0x28] 0x78ceda7380
	bool bHaveVirtualShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x78ceda5300
	Actor*[] VirtualShadowPoint;//[Offset: 0x290, Size: 0x10] 0x78ced2e3e0
	FString MissionTitle;//[Offset: 0x2a0, Size: 0x10] 0x78ceda5400
	FString[] MissionItems;//[Offset: 0x2b0, Size: 0x10] 0x78ced2e480
	BoxComponent* CollisionComponent;//[Offset: 0x2c0, Size: 0x8] 0x78ceda5500
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78ceda5580
	Vector EndLocation;//[Offset: 0x2cc, Size: 0xc] 0x78ceda5600
	void TriggerTeaching();// 0x84bc9f0 0x78cedb0940
	void SetActiveState(bool bInActive);// 0x84bca50 0x78cedb0a20
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x84bcafc 0x78cedb0b00
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x84bcc8c 0x78cedb0be0
	enum GetTeachingPointType();// 0x84bca18 0x78cedb0cc0
	bool GetActiveState();// 0x84bca34 0x78cedb0da0
	void EndTeaching();// 0x84bca04 0x78cedb0e80
	void DestroyVirtualShadow();// 0x8a873f8 0x78cedb0f60
	void CreateVirtualShadow();// 0x8a873f8 0x78cedb1040

--------------------------------
Class: TeachingEndPoint.Actor.Object
	enum Type;//[Offset: 0x220, Size: 0x1] 0x78ced2e5c0
	BoxComponent* CollisionComponent;//[Offset: 0x228, Size: 0x8] 0x78ceda5d80
	void SetTeachingPointType(enum InType);// 0x84bbf30 0x78cedb1120
	void SetTeachingPlayerId(int PlayerID);// 0x84bbe8c 0x78cedb1200
	void SetActiveState(bool bInActive);// 0x84bbde0 0x78cedb12e0
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x84bbfd4 0x78cedb13c0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x84bc164 0x78cedb14a0
	bool GetActiveState();// 0x84bbdc4 0x78cedb1580

--------------------------------
Class: WuXiaPVPResourcesActor.WuXiaInteractiveActor.Actor.Object
	int team_id_;//[Offset: 0x2b8, Size: 0x4] 0x78ce629700
	float interactive_range_;//[Offset: 0x2bc, Size: 0x4] 0x78ce629780
	int resources_index_;//[Offset: 0x2c0, Size: 0x4] 0x78ce629800
	int add_point_;//[Offset: 0x2c4, Size: 0x4] 0x78ce629880
	float add_time_;//[Offset: 0x2c8, Size: 0x4] 0x78ce629900
	void OnTeamIDUpdate();// 0x8a873f8 0x78ce632ee0
	void OnRep_TeamID();// 0x84f36e4 0x78ce632fc0
	void OnInteractive();// 0x84f36d0 0x78ce6330a0

--------------------------------
Class: UserLoginData
	int player_id_;//[Offset: 0x0, Size: 0x4] 0x78cefe1580
	int player_map_id_;//[Offset: 0x4, Size: 0x4] 0x78cefe1600
	FString player_password_;//[Offset: 0x8, Size: 0x10] 0x78cefe1680
	FString playe_port_;//[Offset: 0x18, Size: 0x10] 0x78cefe1700
	FString player_teamid_;//[Offset: 0x28, Size: 0x10] 0x78cefe1780
	GameItemInfo[] equip_item_id_;//[Offset: 0x38, Size: 0x10] 0x78cefd3580
	enum sex_type_;//[Offset: 0x48, Size: 0x1] 0x78cefd3620
	int face_id_;//[Offset: 0x4c, Size: 0x4] 0x78cefe1900
	int skin_color_id_;//[Offset: 0x50, Size: 0x4] 0x78cefe1980
	int hair_id_;//[Offset: 0x54, Size: 0x4] 0x78cefe1a00
	int hair_color_id_;//[Offset: 0x58, Size: 0x4] 0x78cefe1a80
	int[] equip_item_num_;//[Offset: 0x60, Size: 0x10] 0x78cefd36c0
	<int,int> equip_skin_id_;//[Offset: 0x70, Size: 0x50] 0x78cefad840
	int[] preview_skin_id_;//[Offset: 0xc0, Size: 0x10] 0x78cefd3760
	<int,int> jingmai_acu_map_;//[Offset: 0xd0, Size: 0x50] 0x78cefad900
	<int,int> quenching_map_;//[Offset: 0x120, Size: 0x50] 0x78cefad9c0
	int flytool_skin_id_;//[Offset: 0x170, Size: 0x4] 0x78cefe1f00
	int horse_skin_id_;//[Offset: 0x174, Size: 0x4] 0x78cefe1f80
	FString player_name_;//[Offset: 0x178, Size: 0x10] 0x78cefe2000
	enum player_role_type_;//[Offset: 0x188, Size: 0x1] 0x78cefd3800
	int session_point_;//[Offset: 0x18c, Size: 0x4] 0x78cefe2100
	int hero_id_;//[Offset: 0x190, Size: 0x4] 0x78cefe0080
	int proficiency;//[Offset: 0x194, Size: 0x4] 0x78cefe0100
	bool is_first_time_login_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1] 0x78cefe0180
	int game_room_id_;//[Offset: 0x19c, Size: 0x4] 0x78cefe0200
	<int,int> skin_color_map;//[Offset: 0x1a0, Size: 0x50] 0x78cefada80
	int[] equip_expression;//[Offset: 0x1f0, Size: 0x10] 0x78cefd38a0
	int[] equip_action;//[Offset: 0x200, Size: 0x10] 0x78cefd3940
	int mutil_exp;//[Offset: 0x210, Size: 0x4] 0x78cefe0480
	int mutil_coin;//[Offset: 0x214, Size: 0x4] 0x78cefe0500
	bool can_get_treasure_chip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x78cefe0580

--------------------------------
Class: WuXiaXOBController.WuXiaXPawnController.PlayerController.Controller.Actor.Object
	int64 time_seconds_;//[Offset: 0x6a0, Size: 0x8] 0x78ce6daa00
	int64 time_net_delay_;//[Offset: 0x6a8, Size: 0x8] 0x78ce6daa80
	int64 time_client_server_add_;//[Offset: 0x6b0, Size: 0x8] 0x78ce6dab00
	int Replay_LocalPlayerNetID;//[Offset: 0x6b8, Size: 0x4] 0x78ce6dab80
	class HUD* ReplayHudClass;//[Offset: 0x6c0, Size: 0x8] 0x78cedde5c0
	TimerHandle timer_handle_;//[Offset: 0x6c8, Size: 0x8] 0x78ce6dac00
	OBClientInfo* _obClientInfo;//[Offset: 0x720, Size: 0x8] 0x78ce6dac80
	<Key,FText> key_map_;//[Offset: 0x728, Size: 0x50] 0x78cee119c0
	bool _isObController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1] 0x78ce6dae00
	bool _isReplayController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 0x1] 0x78ce6dae80
	void TimeSyncStart();// 0x8575274 0x78ce6bf580
	void ShowReplayController();// 0x8a873f8 0x78ce6bf660
	void Server_StartPing(int64 index, int64 Time);// 0x8575288 0x78ce6bf740
	void OnReplayPlayEnd();// 0x8575094 0x78ce6bf820
	void OnRep_SrvNoticedOB();// 0x85754d4 0x78ce6bf900
	void OnRep_Replay_LocalPlayerNetID();// 0x85750bc 0x78ce6bf9e0
	void OnRep_RelayHUDClass();// 0x85750a8 0x78ce6bfac0
	void OnRep_IsReplayController();// 0x85750e4 0x78ce6bfba0
	void OnRep_IsObController();// 0x85750d0 0x78ce6bfc80
	bool IsReplayController();// 0x85750f8 0x78ce6bfd60
	FText GetKeyText(FName Name);// 0x85753b8 0x78ce6bfe40
	void ClientReportServerTime(int64 index, int64 cTime, int64 sTime);// 0x8575130 0x78ce6bff20
	void Client_ControllerConnectFinish();// 0x8575114 0x78ce6bcaa0

--------------------------------
Class: OBClientInfo.Info.Actor.Object
	Rotator target_view_rotator_;//[Offset: 0x248, Size: 0xc] 0x78cecbef80
	bool need_camdir_rep_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1] 0x78cecbf000
	int view_target_netid_;//[Offset: 0x258, Size: 0x4] 0x78cecbf080
	OBClientUIHelper* UIHelper;//[Offset: 0x260, Size: 0x8] 0x78cecbf100
	bool IsShowHeadUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78cecbf180
	int _my_net_id;//[Offset: 0x280, Size: 0x4] 0x78cecbf200
	int _game_room_id;//[Offset: 0x284, Size: 0x4] 0x78cecbf280
	int livePlayerNum;//[Offset: 0x288, Size: 0x4] 0x78cecbf300
	int liveTeamNum;//[Offset: 0x28c, Size: 0x4] 0x78cecbf380
	bool _startTimeInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78cecbf400
	int64 _startTime;//[Offset: 0x298, Size: 0x8] 0x78cecbf480
	bool _flyStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x78cecbf500
	int64 _flyStartTime;//[Offset: 0x2a8, Size: 0x8] 0x78cecbf580
	Vector _flyStartPos;//[Offset: 0x2b0, Size: 0xc] 0x78cecbf600
	Vector _flyEndPos;//[Offset: 0x2bc, Size: 0xc] 0x78cecbf680
	Vector _flyStartDir;//[Offset: 0x2c8, Size: 0xc] 0x78cecbf700
	int[] ParadropsToDetail;//[Offset: 0x2d8, Size: 0x10] 0x78cebcf740
	<int,OBPlayerInfo> playerInfoMap;//[Offset: 0x2e8, Size: 0x50] 0x78cf15cdc0
	<int,OBHorseInfo> horseInfoMap;//[Offset: 0x338, Size: 0x50] 0x78cf15ce80
	<int,OBMijingmenInfo> mijingmenInfos;//[Offset: 0x388, Size: 0x50] 0x78cf15cf40
	<int,OBTreasureBoxInfo> treasureboxInfos;//[Offset: 0x3d8, Size: 0x50] 0x78cf15d000
	<int,OBXinfaInfo> xinfaInfos;//[Offset: 0x428, Size: 0x50] 0x78cf15d0c0
	<int,OBParadropItemInfo> paradropItemInfos;//[Offset: 0x478, Size: 0x50] 0x78cf15d180
	<int,OBParadropPosInfo> paradropPosInfos;//[Offset: 0x4c8, Size: 0x50] 0x78cf15d240
	<int,OBFightState> fightStates;//[Offset: 0x518, Size: 0x50] 0x78cf15d300
	<int,bool> playerAnimusInfo;//[Offset: 0x568, Size: 0x50] 0x78cf15d3c0
	OBTeamInfo[] teamInfos;//[Offset: 0x5b8, Size: 0x10] 0x78cebccea0
	<FString,int> teamName2Idx;//[Offset: 0x5c8, Size: 0x50] 0x78cf15d480
	<int,OBItemUseDurationInfo> useItemDurationInfos;//[Offset: 0x618, Size: 0x50] 0x78cf15d540
	<int,OBKillInfo> killInfos;//[Offset: 0x668, Size: 0x50] 0x78cf15d600
	<int,OBKillInfo> killedInfos;//[Offset: 0x6b8, Size: 0x50] 0x78cf15d6c0
	<int,BuffPointInfo> savedBuffPoints;//[Offset: 0x708, Size: 0x50] 0x78cf15d780
	int maxPlayerPerTeam;//[Offset: 0x758, Size: 0x4] 0x78cecbe580
	<int,OBPlayerTargetDetailInfo> playerDetailInfos;//[Offset: 0x760, Size: 0x50] 0x78cf15d840
	<int,OBPlayerAllPlaySkillInfo> playerSkillCDInfos;//[Offset: 0x7b0, Size: 0x50] 0x78cf15d900
	OBStasticsInfo[] gameResult;//[Offset: 0x800, Size: 0x10] 0x78cebccf40
	OBDLDStateInfo savedDldInfo;//[Offset: 0x810, Size: 0x50] 0x78cecbc780
	OBDamageCircleInfo dcInfo;//[Offset: 0x860, Size: 0x68] 0x78cecbc800
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1] 0x78cecbc880
	OBPlayerTargetDetailInfo repTargetInfo;//[Offset: 0x8d0, Size: 0xc0] 0x78cecbc900
	OBPlayerKillInfo repKillInfoArray;//[Offset: 0x990, Size: 0x2c] 0x78cecbc980
	bool bReplayGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac0, Size: 0x1] 0x78cecbca00
	OBGameInitInfo replayCachedInfo;//[Offset: 0x1ac8, Size: 0x158] 0x78cecbca80
	float CacheReplayStateTime;//[Offset: 0x1c20, Size: 0x4] 0x78cecbcb00
	bool _needCacheReplayInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c28, Size: 0x1] 0x78cecbcb80
	bool _isServerReplayHelper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c29, Size: 0x1] 0x78cecbcc00
	void UpdateTargetViewDir(int netID, Rotator Rot);// 0x83e1c84 0x78cecaecc0
	void UpdatePlayersPosition(const OBPlayerPosInfo[] posInfos);// 0x83e1e38 0x78cecaeda0
	void UpdatePlayersKillInfo(const OBPlayerKillInfo[] c_killInfos);// 0x83e1d7c 0x78cecaee80
	void UpdateHorseRideInfo(int HorseID, int curDriverID, int curPassagerID);// 0x83e1b40 0x78cecaef60
	void SetViewRotTarget(int netID);// 0x83e2414 0x78cecaf040
	void SetPlaneStartInfo(Vector Start, Vector End, int64 StartTime);// 0x83dfeb8 0x78cecaf120
	void SetLivePlayerNum(int Num, int TeamNum);// 0x83dfa9c 0x78cecaf200
	void SetGameStartTime(int64 Time);// 0x83dfffc 0x78cecaf2e0
	void SetFlyEnd();// 0x83dfe9c 0x78cecaf3c0
	void Server_UpdateOBLocation(Vector pos);// 0x83e21e4 0x78cecaf4a0
	void Server_RequestControlRotation(int charNetId);// 0x83e22d0 0x78cecaf580
	void Server_ClientInitReady();// 0x83e23b8 0x78cecaf660
	void OnXingfaLearningFinish(int ID, int PlayerID);// 0x83e0650 0x78cecaf740
	void OnXingfaLearningFailed(int ID, int PlayerID);// 0x83e0558 0x78cecaf820
	void OnXingfaLearning(int ID, int PlayerID);// 0x83e0748 0x78cecaf900
	void OnXingfaEmerged(int ID, Vector pos, InteractiveInfo Info);// 0x83e0840 0x78cecaf9e0
	void onUpdateDCInfo(const OBDamageCircleInfo newInfo);// 0x83df3e8 0x78cecafac0
	void OnTreasureBoxSapwned(int ID, Vector pos, InteractiveInfo Info);// 0x83e0c18 0x78cecafba0
	void OnTreasureBoxOpened(int ID, int openedPlayerID);// 0x83e0b20 0x78cecafc80
	void OnTreasureBoxDestroyed(int ID);// 0x83e04a8 0x78cecafd60
	void OnServerInitDone(int netID);// 0x83e16b0 0x78cecafe40
	void OnRep_ReplayCachedData();// 0x83dcfec 0x78cecaff20
	void OnRep_CharKillInfoStaticArray();// 0x83dd014 0x78cecacaa0
	void OnRep_CharDetailInfo();// 0x83dd000 0x78cecacb80
	void OnRep_bReplayGenerated();// 0x83dcf20 0x78cecacc60
	void OnPreReplayLoadCheckPoint(World* World);// 0x83dce78 0x78cecacd40
	void OnPlayerUseItemFinish(int PlayerID, int ItemId, int64 finishTime);// 0x83df688 0x78cecace20
	void OnPlayerUseItemBegin(int PlayerID, int ItemId, int64 StartTime);// 0x83df7cc 0x78cecacf00
	void OnPlayerTargetDetailInfoUpdate(OBPlayerTargetDetailInfo Info);// 0x83e00ac 0x78cecacfe0
	void OnPlayerPlaySkill(int PlayerID, int skillid, int64 StartTime, int64 EndTime);// 0x83df910 0x78cecad0c0
	void OnPlayerKill(OBKillInfo Info);// 0x83df5cc 0x78cecad1a0
	void OnPlayerGameOver(int netID);// 0x83e1500 0x78cecad280
	void OnPlayerConnectChange(int PlayerID, bool IsConnected);// 0x83e15b0 0x78cecad360
	void OnParadropSpawned(OBParadropPosInfo paradropPosInfo);// 0x83e1444 0x78cecad440
	void OnParadropItemPickedup(int worldID, int ItemId);// 0x83e0248 0x78cecad520
	void OnParadropFinished(OBParadropItemInfo paraDetailInfo);// 0x83e12d0 0x78cecad600
	void OnMijingmenSpawned(int ID, Vector pos, InteractiveInfo Info);// 0x83e0ff0 0x78cecad6e0
	void OnMijingmenOpened(int ID, int PlayerID);// 0x83e0ef8 0x78cecad7c0
	void OnGameOver(const OBStasticsInfo[] Result);// 0x83dfd9c 0x78cecad8a0
	void OnFightStateExpired(int ID);// 0x83e0340 0x78cecad980
	void OnFightStateCreate(OBFightState Info);// 0x83e03f0 0x78cecada60
	void onDLDStartFight();// 0x83df4bc 0x78cecadb40
	void OnDldGameOver(const StasticsInfo[] reds, const StasticsInfo[] blues, const StasticsInfo[] greens);// 0x83dfb94 0x78cecadc20
	void onDLDBuffStateChange(int index, BuffPointInfo newInfo);// 0x83df4d8 0x78cecadd00
	void OnCharacterRespawned(int PlayerID, Vector pos);// 0x83e1950 0x78cecadde0
	void OnCharacterDyingRecover(int PlayerID, Vector pos);// 0x83e1760 0x78cecadec0
	void OnCharacterDying(int PlayerID, Vector pos);// 0x83e1858 0x78cecadfa0
	void OnCharacterDied(int PlayerID, Vector pos);// 0x83e1a48 0x78cecae080
	bool IsViewingTargetPlayer();// 0x83dd9f8 0x78cecae160
	bool IsShowTeamColor();// 0x83de3d8 0x78cecae240
	bool IsPlayerAnimus(int PlayerID);// 0x83dd574 0x78cecae320
	bool IsGameOver();// 0x83dd114 0x78cecae400
	void InitNewHorses(const OBHorseInfo[] c_horseInfos);// 0x83e1ef4 0x78cecae4e0
	void InitNewCharacters(const OBPlayerInfo[] c_playerInfos);// 0x83e1fb0 0x78cecae5c0
	void InitAll(OBGameInitInfo initAllInfo);// 0x83e20b0 0x78cecae6a0
	bool GetXinfaInfo(int worldID, out OBXinfaInfo Info);// 0x83de9f4 0x78cecaadc0
	int GetViewTreasureBoxID();// 0x83ddd14 0x78cecaaea0
	int GetViewTargetPlayerID();// 0x83ddd48 0x78cecaaf80
	int GetValidParadropToDetail();// 0x83dd130 0x78cecab060
	bool GetTreasureboxInfo(int worldID, out OBTreasureBoxInfo Info);// 0x83de8f0 0x78cecab140
	float GetTimeToGameStart();// 0x83dd628 0x78cecab220
	int GetTeamNum();// 0x83deeb8 0x78cecab300
	bool GetTeamMemInfo(FString TeamName, out OBPlayerInfo[] infos);// 0x83deeec 0x78cecab3e0
	bool GetTeamInfoStr(FString TeamId, out OBTeamInfo Info);// 0x83de150 0x78cecab4c0
	bool GetTeamInfo(int TeamId, out OBTeamInfo Info);// 0x83df0a8 0x78cecab5a0
	Color getTeamColor(FString TeamId);// 0x83de2cc 0x78cecab680
	GameItemInfo[] GetTargetPlayerDrugsInfo(int PlayerID);// 0x83ddae4 0x78cecab760
	OBBuffSimpleInfo[] GetTargetPlayerBuffInfo(int PlayerID);// 0x83ddbe4 0x78cecab840
	bool GetStartTime(out float timeInMS);// 0x83dd8d0 0x78cecab920
	bool GetPlayerUseItemDurationInfo(int PlayerID, out int ItemId, out float timePassed, out float timeTotal);// 0x83dd214 0x78cecaba00
	bool GetPlayerTargetDetailInfo(int PlayerID, out OBPlayerTargetDetailInfo Info);// 0x83ddd7c 0x78cecabae0
	int[] GetPlayersSortedByTeamIndex();// 0x83dde98 0x78cecabbc0
	int[] GetPlayersSortedByKillMajor(bool is_forward);// 0x83de04c 0x78cecabca0
	int[] GetPlayersSortedByDamageMajor(bool is_forward);// 0x83ddf48 0x78cecabd80
	bool GetPlayerPlaySkillCDInfo(int PlayerID, int skillid, out float timePassed, out float timeTotal);// 0x83dd3c8 0x78cecabe60
	float GetPlayerInfo_MaxInjury();// 0x83dd9c4 0x78cecabf40
	float GetPlayerInfo_MaxDyingHealth();// 0x83dd990 0x78cecac020
	bool GetPlayerInfo(int PlayerID, out OBPlayerInfo Info);// 0x83df2c8 0x78cecac100
	<int,OBParadropPosInfo> GetParaPosInfos();// 0x83de6c4 0x78cecac1e0
	bool GetParadropPosInfo(int ID, out OBParadropPosInfo Info);// 0x83de410 0x78cecac2c0
	<int,OBParadropItemInfo> GetParadropDetailInfos();// 0x83de630 0x78cecac3a0
	bool GetParadropDetailInfo(int ID, out OBParadropItemInfo Info);// 0x83de514 0x78cecac480
	bool GetMijingenInfo(int worldID, out OBMijingmenInfo Info);// 0x83deaf8 0x78cecac560
	int GetMaxPlayerPerTeam();// 0x83dee84 0x78cecac640
	int GetLatestKiller(int killedID);// 0x83dd164 0x78cecac720
	bool GetHorseInfo(int HorseID, out OBHorseInfo Info);// 0x83df1c4 0x78cecac800
	OBHorseBasicInfoToShow GetHorseBaseInfo(int horseBaseID);// 0x83dda30 0x78cecac8e0
	OBStasticsInfo[] GetGameResultInfo();// 0x83dd65c 0x78cecac9c0
	bool GetFlyStartInfo(out Vector pos, out Vector dir, out float Time);// 0x83dd770 0x78ceca90e0
	bool GetFightStateInfo(int ID, out OBFightState Info);// 0x83de7ec 0x78ceca91c0
	<int,BuffPointInfo> GetDldBuffPointInfo();// 0x83dd080 0x78ceca92a0
	OBDamageCircleInfo GetDamageCircleInfo();// 0x83dd028 0x78ceca9380
	enum GetCurCameraType();// 0x83ddce0 0x78ceca9460
	<int,OBXinfaInfo> GetAllXinfaInfos();// 0x83debfc 0x78ceca9540
	<int,OBTreasureBoxInfo> GetAllTreasureboxInfos();// 0x83dec90 0x78ceca9620
	OBTeamInfo[] GetAllTeamInfo();// 0x83dedb8 0x78ceca9700
	<int,OBPlayerInfo> GetAllPlayerInfo();// 0x83dedf0 0x78ceca97e0
	<int,OBMijingmenInfo> GetAllMijingmenInfos();// 0x83ded24 0x78ceca98c0
	<int,OBFightState> GetAllFightStates();// 0x83de758 0x78ceca99a0
	int GetAliveTeamNum();// 0x83dd708 0x78ceca9a80
	int GetAlivePlayerNum();// 0x83dd73c 0x78ceca9b60
	void Client_SetNeedCacheReplayInfo(bool B);// 0x83dcf34 0x78ceca9c40

--------------------------------
Class: OBPlayerPosInfo
	int user_id_;//[Offset: 0x0, Size: 0x4] 0x78cefc5d80
	float rot_yaw_;//[Offset: 0x4, Size: 0x4] 0x78cefc5e00
	Vector position_;//[Offset: 0x8, Size: 0xc] 0x78cefc5e80

--------------------------------
Class: OBPlayerKillInfo
	int user_id_;//[Offset: 0x0, Size: 0x4] 0x78cefc5f00
	int kill_num_;//[Offset: 0x4, Size: 0x4] 0x78cefc5f80
	int damage_num_;//[Offset: 0x8, Size: 0x4] 0x78cefc6000
	int playerHp;//[Offset: 0xc, Size: 0x4] 0x78cefc6080
	int playerMaxHp;//[Offset: 0x10, Size: 0x4] 0x78cefc6100
	int playerDyingHp;//[Offset: 0x14, Size: 0x4] 0x78cefc6180
	int playerMP;//[Offset: 0x18, Size: 0x4] 0x78cefc6200
	int playerMaxMP;//[Offset: 0x1c, Size: 0x4] 0x78cefc6280
	int playerInjury;//[Offset: 0x20, Size: 0x4] 0x78cefc6300
	int xinfaid;//[Offset: 0x24, Size: 0x4] 0x78cefc4280
	enum PlayerState;//[Offset: 0x28, Size: 0x1] 0x78cefd0f60
	enum teamstate;//[Offset: 0x29, Size: 0x1] 0x78cefd1000

--------------------------------
Class: OBDamageCircleInfo
	bool isStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefc3080
	bool IsClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cefc3100
	bool isWaitingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cefc3180
	bool isShrinkingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cefc1100
	bool isFirstSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cefc1180
	float currentradius;//[Offset: 0x8, Size: 0x4] 0x78cefc1200
	float nextradius;//[Offset: 0xc, Size: 0x4] 0x78cefc1280
	Vector currentStartCenter;//[Offset: 0x10, Size: 0xc] 0x78cefc1300
	Vector nextCircleCenter;//[Offset: 0x1c, Size: 0xc] 0x78cefc1380
	Vector startLocation;//[Offset: 0x28, Size: 0xc] 0x78cefc1400
	Vector startScale;//[Offset: 0x34, Size: 0xc] 0x78cefc1480
	int Stage;//[Offset: 0x40, Size: 0x4] 0x78cefc1500
	int64 savedBegTime;//[Offset: 0x48, Size: 0x8] 0x78cefc1580
	int64 savedWaitTime;//[Offset: 0x50, Size: 0x8] 0x78cefc1600
	int64 savedShrinkingTime;//[Offset: 0x58, Size: 0x8] 0x78cefc1680
	bool isLastShrinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cefc1700

--------------------------------
Class: OBClientUIHelper.Object
	bool UITarget_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cece0680
	bool UIHead_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cece0700
	bool UITarget_TeamInfoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cece0780
	bool UITarget_PlayerListShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x78cece0800
	bool UITarget_NoticeShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78cece0880
	bool UITarget_DetailInfoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x78cece0900
	bool UITarget_ParadropShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1] 0x78cece0980
	float DetailWeaponSwitchBackTime;//[Offset: 0x30, Size: 0x4] 0x78cece0a00
	delegate delCharInited;//[Offset: 0x38, Size: 0x10] 0x78cece0a80
	delegate delCharAdded;//[Offset: 0x48, Size: 0x10] 0x78cece0b00
	delegate allCharPosUpdated;//[Offset: 0x58, Size: 0x10] 0x78cece0b80
	delegate delCharDied;//[Offset: 0x68, Size: 0x10] 0x78cece0c00
	delegate delCharRespawned;//[Offset: 0x78, Size: 0x10] 0x78cece0c80
	delegate delCharDying;//[Offset: 0x88, Size: 0x10] 0x78cece0d00
	delegate delCharDyingRecover;//[Offset: 0x98, Size: 0x10] 0x78cece0d80
	delegate delCharDeleted;//[Offset: 0xa8, Size: 0x10] 0x78cece0e00
	delegate delCharKillRefreshed;//[Offset: 0xb8, Size: 0x10] 0x78cece0e80
	delegate delParadropSpawned;//[Offset: 0xc8, Size: 0x10] 0x78cece0f00
	delegate delParadropInfoed;//[Offset: 0xd8, Size: 0x10] 0x78cece0f80
	delegate delTreasureboxCreated;//[Offset: 0xe8, Size: 0x10] 0x78cece1000
	delegate delTreasureboxOpened;//[Offset: 0xf8, Size: 0x10] 0x78cece1080
	delegate delTreasureboxDestroyed;//[Offset: 0x108, Size: 0x10] 0x78cecbf800
	delegate delMijingmenCreated;//[Offset: 0x118, Size: 0x10] 0x78cecbf880
	delegate delMijingmenExplored;//[Offset: 0x128, Size: 0x10] 0x78cecbf900
	delegate delXinfaCreated;//[Offset: 0x138, Size: 0x10] 0x78cecbf980
	delegate delXinfaLearning;//[Offset: 0x148, Size: 0x10] 0x78cecbfa00
	delegate delXinfaLearningFailed;//[Offset: 0x158, Size: 0x10] 0x78cecbfa80
	delegate delXinfaLearningFinished;//[Offset: 0x168, Size: 0x10] 0x78cecbfb00
	delegate delFightStateCreate;//[Offset: 0x178, Size: 0x10] 0x78cecbfb80
	delegate delFightStateExpire;//[Offset: 0x188, Size: 0x10] 0x78cecbfc00
	delegate delHorseRideChange;//[Offset: 0x198, Size: 0x10] 0x78cecbfc80
	delegate delInputMapViewName;//[Offset: 0x1a8, Size: 0x10] 0x78cecbfd00
	delegate delInputMapScroll;//[Offset: 0x1b8, Size: 0x10] 0x78cecbfd80
	delegate delShowHideTreasureBox;//[Offset: 0x1c8, Size: 0x10] 0x78cecbfe00
	delegate delParadropItemPickedup;//[Offset: 0x1d8, Size: 0x10] 0x78cecbfe80
	delegate delPlayerTargetDetailUpdated;//[Offset: 0x1e8, Size: 0x10] 0x78cecbff00
	delegate delViewTargetChange;//[Offset: 0x1f8, Size: 0x10] 0x78cecbff80
	delegate delOBViewMethodChange;//[Offset: 0x208, Size: 0x10] 0x78cecbe780
	delegate delStartTimeInit;//[Offset: 0x218, Size: 0x10] 0x78cecbe800
	delegate delFlyStart;//[Offset: 0x228, Size: 0x10] 0x78cecbe880
	delegate delOBGameOver;//[Offset: 0x238, Size: 0x10] 0x78cecbe900
	delegate delLivePlayerNumChange;//[Offset: 0x248, Size: 0x10] 0x78cecbe980
	delegate delPlayerAnimusChange;//[Offset: 0x258, Size: 0x10] 0x78cecbea00
	delegate delPlayerSkillCD;//[Offset: 0x268, Size: 0x10] 0x78cecbea80
	delegate delPlayerUseItemDuration;//[Offset: 0x278, Size: 0x10] 0x78cecbeb00
	delegate delSwitchTargetUIShow;//[Offset: 0x288, Size: 0x10] 0x78cecbeb80
	delegate delSwitchTargetUIPartShow;//[Offset: 0x298, Size: 0x10] 0x78cecbec00
	delegate delSwitchHeadUIShow;//[Offset: 0x2a8, Size: 0x10] 0x78cecbec80
	delegate delParadropOverlapBegin;//[Offset: 0x2b8, Size: 0x10] 0x78cecbed00
	delegate delParadropOverlapEnd;//[Offset: 0x2c8, Size: 0x10] 0x78cecbed80
	delegate delDldBuffUpdated;//[Offset: 0x2d8, Size: 0x10] 0x78cecbee00
	delegate delTargetDetailWeaponChange;//[Offset: 0x2e8, Size: 0x10] 0x78cecbee80
	delegate delReplayJumpToNewSecond;//[Offset: 0x2f8, Size: 0x10] 0x78cecbef00

--------------------------------
Class: OBPlayerInfo
	int user_id_;//[Offset: 0x0, Size: 0x4] 0x78cefc4e80
	FString team_id_;//[Offset: 0x8, Size: 0x10] 0x78cefc4f00
	int game_room_id_;//[Offset: 0x18, Size: 0x4] 0x78cefc4f80
	int kill_num_;//[Offset: 0x1c, Size: 0x4] 0x78cefc5000
	int damage_num_;//[Offset: 0x20, Size: 0x4] 0x78cefc5080
	int playerHp;//[Offset: 0x24, Size: 0x4] 0x78cefc5100
	int playerMaxHp;//[Offset: 0x28, Size: 0x4] 0x78cefc5180
	int playerDyingHp;//[Offset: 0x2c, Size: 0x4] 0x78cefc5200
	int playerMP;//[Offset: 0x30, Size: 0x4] 0x78cefc5280
	int playerMaxMP;//[Offset: 0x34, Size: 0x4] 0x78cefc3200
	int playerInjury;//[Offset: 0x38, Size: 0x4] 0x78cefc3280
	float last_rot_yaw_;//[Offset: 0x3c, Size: 0x4] 0x78cefc3300
	Vector last_position_;//[Offset: 0x40, Size: 0xc] 0x78cefc3380
	Rotator last_viewdir_;//[Offset: 0x4c, Size: 0xc] 0x78cefc3400
	FString user_name_;//[Offset: 0x58, Size: 0x10] 0x78cefc3480
	int horse_id_;//[Offset: 0x68, Size: 0x4] 0x78cefc3500
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x78cefc3580
	enum PlayerState;//[Offset: 0x6d, Size: 0x1] 0x78cefd1280
	enum teamstate;//[Offset: 0x6e, Size: 0x1] 0x78cefd1320
	int Rank;//[Offset: 0x70, Size: 0x4] 0x78cefc3700
	int xinfaid;//[Offset: 0x74, Size: 0x4] 0x78cefc3780

--------------------------------
Class: OBHorseInfo
	int HorseID;//[Offset: 0x0, Size: 0x4] 0x78cefc3880
	int driverID;//[Offset: 0x4, Size: 0x4] 0x78cefc3900
	int passageID;//[Offset: 0x8, Size: 0x4] 0x78cefc3980

--------------------------------
Class: OBMijingmenInfo
	int worldID;//[Offset: 0x0, Size: 0x4] 0x78cefc3e80
	int PlayerID;//[Offset: 0x4, Size: 0x4] 0x78cefc3f00
	Vector pos;//[Offset: 0x8, Size: 0xc] 0x78cefc3f80

--------------------------------
Class: OBTreasureBoxInfo
	int worldID;//[Offset: 0x0, Size: 0x4] 0x78cefc4080
	int openingPlayerID;//[Offset: 0x4, Size: 0x4] 0x78cefc4100
	bool isOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cefc4180
	bool isAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78cefc4200
	Vector pos;//[Offset: 0xc, Size: 0xc] 0x78cefc2180

--------------------------------
Class: OBXinfaInfo
	int worldID;//[Offset: 0x0, Size: 0x4] 0x78cefc2280
	int learningPlayerID;//[Offset: 0x4, Size: 0x4] 0x78cefc2300
	Vector pos;//[Offset: 0x8, Size: 0xc] 0x78cefc2380

--------------------------------
Class: OBParadropItemInfo
	int worldID;//[Offset: 0x0, Size: 0x4] 0x78cefc3c80
	int[] itemIDs;//[Offset: 0x8, Size: 0x10] 0x78cee5f880
	GameItemInfo[] baseInfos;//[Offset: 0x18, Size: 0x10] 0x78cee5f920

--------------------------------
Class: OBParadropPosInfo
	int worldID;//[Offset: 0x0, Size: 0x4] 0x78cefc3a80
	Vector startPos;//[Offset: 0x4, Size: 0xc] 0x78cefc3b00
	Vector paraPos;//[Offset: 0x10, Size: 0xc] 0x78cefc3b80

--------------------------------
Class: OBFightState
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cefc2480
	int PlayerID;//[Offset: 0x4, Size: 0x4] 0x78cefc2500
	Vector fightPos;//[Offset: 0x10, Size: 0xc] 0x78cefc2580

--------------------------------
Class: OBTeamInfo
	int[] team_mem_ids;//[Offset: 0x0, Size: 0x10] 0x78cefd11e0
	int team_id_;//[Offset: 0x10, Size: 0x4] 0x78cefc4c00
	FString team_name_;//[Offset: 0x18, Size: 0x10] 0x78cefc4c80
	Color team_color_;//[Offset: 0x28, Size: 0x4] 0x78cefc4d00

--------------------------------
Class: OBItemUseDurationInfo
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefbf880
	int ItemId;//[Offset: 0x4, Size: 0x4] 0x78cefbf900
	int64 StartTime;//[Offset: 0x8, Size: 0x8] 0x78cefbf980
	int64 EndTime;//[Offset: 0x10, Size: 0x8] 0x78cefbfa00

--------------------------------
Class: OBKillInfo
	int killer;//[Offset: 0x0, Size: 0x4] 0x78cefc2680
	int killee;//[Offset: 0x4, Size: 0x4] 0x78cefc2700
	int causeID;//[Offset: 0x8, Size: 0x4] 0x78cefc2780
	enum dieType;//[Offset: 0xc, Size: 0x1] 0x78cee5fce0
	int64 Time;//[Offset: 0x10, Size: 0x8] 0x78cefc2880

--------------------------------
Class: OBPlayerTargetDetailInfo
	int player_net_id_;//[Offset: 0x0, Size: 0x4] 0x78cefc1980
	int headId;//[Offset: 0x4, Size: 0x4] 0x78cefc1a00
	int armorID;//[Offset: 0x8, Size: 0x4] 0x78cefc1a80
	int armorDura;//[Offset: 0xc, Size: 0x4] 0x78cefc1b00
	int weaponindex;//[Offset: 0x10, Size: 0x4] 0x78cefc1b80
	int handSkill1;//[Offset: 0x14, Size: 0x4] 0x78cefc1c00
	int handSkill2;//[Offset: 0x18, Size: 0x4] 0x78cefc1c80
	int handSkill3;//[Offset: 0x1c, Size: 0x4] 0x78cefc1d00
	int weaponid1;//[Offset: 0x20, Size: 0x4] 0x78cefc1d80
	int weaponSharp1;//[Offset: 0x24, Size: 0x4] 0x78cefc1e00
	int skill11;//[Offset: 0x28, Size: 0x4] 0x78cefc1e80
	int skill12;//[Offset: 0x2c, Size: 0x4] 0x78cefc1f00
	int skill13;//[Offset: 0x30, Size: 0x4] 0x78cefc1f80
	int weaponid2;//[Offset: 0x34, Size: 0x4] 0x78cefc2000
	int weaponSharp2;//[Offset: 0x38, Size: 0x4] 0x78cefc2080
	int skill21;//[Offset: 0x3c, Size: 0x4] 0x78cefc2100
	int skill22;//[Offset: 0x40, Size: 0x4] 0x78cefc0080
	int skill23;//[Offset: 0x44, Size: 0x4] 0x78cefc0100
	int skillMichuan;//[Offset: 0x48, Size: 0x4] 0x78cefc0180
	int rangeid;//[Offset: 0x4c, Size: 0x4] 0x78cefc0200
	int missleNum;//[Offset: 0x50, Size: 0x4] 0x78cefc0280
	int xinfaid;//[Offset: 0x54, Size: 0x4] 0x78cefc0300
	int throwid;//[Offset: 0x58, Size: 0x4] 0x78cefc0380
	int thrownum;//[Offset: 0x5c, Size: 0x4] 0x78cefc0400
	int quickItem1ID;//[Offset: 0x60, Size: 0x4] 0x78cefc0480
	int quickItem2ID;//[Offset: 0x64, Size: 0x4] 0x78cefc0500
	int quickItem3ID;//[Offset: 0x68, Size: 0x4] 0x78cefc0580
	int yaowu1Num;//[Offset: 0x6c, Size: 0x4] 0x78cefc0600
	int yaowu2Num;//[Offset: 0x70, Size: 0x4] 0x78cefc0680
	int yaowu3Num;//[Offset: 0x74, Size: 0x4] 0x78cefc0700
	int curHP;//[Offset: 0x78, Size: 0x4] 0x78cefc0780
	int maxHP;//[Offset: 0x7c, Size: 0x4] 0x78cefc0800
	int curMP;//[Offset: 0x80, Size: 0x4] 0x78cefc0880
	int maxMP;//[Offset: 0x84, Size: 0x4] 0x78cefc0900
	int curInjury;//[Offset: 0x88, Size: 0x4] 0x78cefc0980
	int dyingHp;//[Offset: 0x8c, Size: 0x4] 0x78cefc0a00
	int horseBaseID;//[Offset: 0x90, Size: 0x4] 0x78cefc0a80
	enum PlayerState;//[Offset: 0x94, Size: 0x1] 0x78cee5e340
	float horseSpeed;//[Offset: 0x98, Size: 0x4] 0x78cefc0b80
	float horseEndurance;//[Offset: 0x9c, Size: 0x4] 0x78cefc0c00
	OBBuffSimpleInfo[] curBuffs;//[Offset: 0xa0, Size: 0x10] 0x78cee5e3e0
	GameItemInfo[] curItems;//[Offset: 0xb0, Size: 0x10] 0x78cee5e480

--------------------------------
Class: OBBuffSimpleInfo
	int buffBaseID;//[Offset: 0x0, Size: 0x4] 0x78cefc0c80
	int buffLayer;//[Offset: 0x4, Size: 0x4] 0x78cefc0d00

--------------------------------
Class: OBPlayerAllPlaySkillInfo
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefc0e80
	OBPlayerSkillInfo[] skillInfos;//[Offset: 0x8, Size: 0x10] 0x78cee5e520

--------------------------------
Class: OBPlayerSkillInfo
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefc0f00
	int skillid;//[Offset: 0x4, Size: 0x4] 0x78cefc0f80
	int64 StartTime;//[Offset: 0x8, Size: 0x8] 0x78cefc1000
	int64 EndTime;//[Offset: 0x10, Size: 0x8] 0x78cefc1080

--------------------------------
Class: OBDLDStateInfo
	int redPoint;//[Offset: 0x0, Size: 0x4] 0x78cefc2a00
	int bluePoint;//[Offset: 0x4, Size: 0x4] 0x78cefc2a80
	int greenPoint;//[Offset: 0x8, Size: 0x4] 0x78cefc2b00
	int64 gameStartTime;//[Offset: 0x10, Size: 0x8] 0x78cefc2b80
	OBDLDResourceInfo[] resourceInfos;//[Offset: 0x18, Size: 0x10] 0x78cee5fe20
	int[] buff_indexs;//[Offset: 0x28, Size: 0x10] 0x78cee5fec0
	BuffPointInfo[] buff_infos;//[Offset: 0x38, Size: 0x10] 0x78cee5ff60
	bool hasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cefc2f80

--------------------------------
Class: OBDLDResourceInfo
	int resourceIndex;//[Offset: 0x0, Size: 0x4] 0x78cefc2c00
	int teamIndex;//[Offset: 0x4, Size: 0x4] 0x78cefc2c80

--------------------------------
Class: OBGameInitInfo
	int maxNumTeams;//[Offset: 0x0, Size: 0x4] 0x78cefc4d80
	int teamMaxMemNum;//[Offset: 0x4, Size: 0x4] 0x78cefc4e00
	OBPlayerInfo[] players;//[Offset: 0x8, Size: 0x10] 0x78cefd13c0
	OBHorseInfo[] horses;//[Offset: 0x18, Size: 0x10] 0x78cefd1460
	OBParadropPosInfo[] paraPosInfos;//[Offset: 0x28, Size: 0x10] 0x78cee5f7e0
	OBParadropItemInfo[] paraItemInfos;//[Offset: 0x38, Size: 0x10] 0x78cee5f9c0
	OBMijingmenInfo[] mijingmenInfos;//[Offset: 0x48, Size: 0x10] 0x78cee5fa60
	OBTreasureBoxInfo[] treasureboxInfos;//[Offset: 0x58, Size: 0x10] 0x78cee5fb00
	OBXinfaInfo[] xinfaInfos;//[Offset: 0x68, Size: 0x10] 0x78cee5fba0
	OBFightState[] fightStates;//[Offset: 0x78, Size: 0x10] 0x78cee5fc40
	OBKillInfo[] killInfos;//[Offset: 0x88, Size: 0x10] 0x78cee5fd80
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78cefc2980
	OBDLDStateInfo dldInfo;//[Offset: 0xa0, Size: 0x50] 0x78cefc3000
	OBDamageCircleInfo dcInfo;//[Offset: 0xf0, Size: 0x68] 0x78cefc1780

--------------------------------
Class: OBHorseBasicInfoToShow
	int horseBaseID;//[Offset: 0x0, Size: 0x4] 0x78cefc1800
	float horseMaxSpeed;//[Offset: 0x4, Size: 0x4] 0x78cefc1880
	float horseMaxEndurance;//[Offset: 0x8, Size: 0x4] 0x78cefc1900

--------------------------------
Class: WuXiaSquadManager.Object
	<FString,SquadData> squad_datas_;//[Offset: 0x28, Size: 0x50] 0x78cee10c40
	WuXiaXGameModeBase* game_mode_;//[Offset: 0x78, Size: 0x8] 0x78ce629600

--------------------------------
Class: SquadData
	FString squad_id_;//[Offset: 0x0, Size: 0x10] 0x78cefe7e00
	int[] squad_life_players_;//[Offset: 0x10, Size: 0x10] 0x78cefd4840
	int[] squad_players_;//[Offset: 0x20, Size: 0x10] 0x78cefd48e0

--------------------------------
Class: WuXiaXPlane.Actor.Object
	float speed_;//[Offset: 0x224, Size: 0x4] 0x78ce6dcf80
	int64[] players;//[Offset: 0x298, Size: 0x10] 0x78ceddfec0
	enum plane_state_;//[Offset: 0x2a8, Size: 0x1] 0x78ceddff60

--------------------------------
Class: WuXiaHorseManager.Actor.Object
	class WuXiaXHorse* horse_class_;//[Offset: 0x220, Size: 0x8] 0x78cedd4980
	<int,WuXiaXHorse*> server_horse_map_;//[Offset: 0x228, Size: 0x50] 0x78cee11540
	SpawnHorseData[] spawn_datas_;//[Offset: 0x278, Size: 0x10] 0x78cedd4a20

--------------------------------
Class: SpawnHorseData

--------------------------------
Class: WuXiaWinActor.WuXiaInteractiveActor.Actor.Object
	float interactive_range_;//[Offset: 0x2b8, Size: 0x4] 0x78ce62b400
	int can_win_number_;//[Offset: 0x2bc, Size: 0x4] 0x78ce62b480
	bool bSaCheckPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78ce62b500
	void ShowWinNumber();// 0x8a873f8 0x78ce632a80
	void SaCheckSelfPos();// 0x84f46cc 0x78ce632b60
	void OnWinNumberUpdate();// 0x84f46e0 0x78ce632c40
	void OnInteractive();// 0x84f4610 0x78ce632d20
	void InteractiveCallback(int PlayerID);// 0x84f4624 0x78ce632e00

--------------------------------
Class: VoiceChatSetting
	int m_PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefcaf80
	enum m_SpeakLabel;//[Offset: 0x4, Size: 0x1] 0x78cefd1f00

--------------------------------
Class: CampInfo
	FString camp_squad_id_;//[Offset: 0x0, Size: 0x10] 0x78cefe0a80
	FString[] squad_ids_;//[Offset: 0x10, Size: 0x10] 0x78cefd3bc0
	int camp_poind_;//[Offset: 0x20, Size: 0x4] 0x78cefe0b80

--------------------------------
Class: NewTrainUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateChildState(int ID, int State);// 0x8a873f8 0x78ceca3420
	void StartGuide(int Type);// 0x8a873f8 0x78ceca3500
	void CreateNewTrainChild(int ID, FString Name, FString des, FString icon, FString icon2, RewardItem Reward);// 0x8a873f8 0x78ceca35e0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x78cecb0b80
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x78cecb0c00
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1] 0x78cecb0c80
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 0x1] 0x78cecb0d00
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 0x1] 0x78cecb0d80
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 0x1] 0x78cecb0e00
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 0x1] 0x78cecb0e80
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 0x8] 0x78cecb0f00
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 0x8] 0x78cecb0f80
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 0x8] 0x78cecb1000
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 0x8] 0x78cecb1080
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 0x8] 0x78cec9f800
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 0x8] 0x78cec9f880
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 0x8] 0x78cebcca40
	delegate ReceiveMoveCompleted;//[Offset: 0x310, Size: 0x10] 0x78cec9f900
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0xb5cf890 0x78ceca4300
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0xb5cf740 0x78ceca43e0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0xb5cf2d8 0x78ceca44c0
	void SetMoveBlockDetection(bool bEnable);// 0xb5cfa58 0x78ceca45a0
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0xb5cf99c 0x78ceca4680
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x8a873f8 0x78ceca4760
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0xb5cf3b8 0x78ceca4840
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xb5cfbac 0x78ceca4920
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xb5cfe80 0x78ceca4a00
	void K2_SetFocus(Actor* NewFocus);// 0xb5cf4fc 0x78ceca4ae0
	void K2_SetFocalPoint(Vector FP);// 0xb5cf5a4 0x78ceca4bc0
	void K2_ClearFocus();// 0xb5cf4b4 0x78ceca4ca0
	bool HasPartialPath();// 0xb5cfb40 0x78ceca4d80
	PathFollowingComponent* GetPathFollowingComponent();// 0xb5cf39c 0x78ceca4e60
	byte GetMoveStatus();// 0xb5cfb78 0x78ceca4f40
	Vector GetImmediateMoveDestination();// 0xb5cfb08 0x78ceca5020
	Actor* GetFocusActor();// 0xb5cf4c8 0x78ceca5100
	Vector GetFocalPointOnActor(const Actor* Actor);// 0xb5cf64c 0x78ceca51e0
	Vector GetFocalPoint();// 0xb5cf708 0x78ceca52c0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0xb5cf380 0x78ceca53a0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0xb5cf7e8 0x78ceca5480

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8] 0x78ce3e4c80
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10] 0x78ce3f0ec0
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce3e4d80

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8] 0x78cf161600
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8] 0x78cf161680
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cf161700

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8] 0x78ce3e4e00
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8] 0x78ce3e4e80
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8] 0x78ce3e4f00
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10] 0x78ce3f0f60
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0xb5e7760 0x78ce3afd60
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0xb5e7950 0x78ce3afe40
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0xb5e7668 0x78ce3aff20
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0xb5e7f84 0x78ce3acaa0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0xb5e7858 0x78ce3acb80
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0xb5e7c9c 0x78ce3acc60
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0xb5e7ba4 0x78ce3acd40
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0xb5e7d94 0x78ce3ace20
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0xb5e7e8c 0x78ce3acf00
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0xb5e7aa4 0x78ce3acfe0
	bool IsVectorValueSet(out const FName KeyName);// 0xb5e75a8 0x78ce3ad0c0
	Vector GetValueAsVector(out const FName KeyName);// 0xb5e813c 0x78ce3ad1a0
	FString GetValueAsString(out const FName KeyName);// 0xb5e82b8 0x78ce3ad280
	Rotator GetValueAsRotator(out const FName KeyName);// 0xb5e807c 0x78ce3ad360
	Object* GetValueAsObject(out const FName KeyName);// 0xb5e8770 0x78ce3ad440
	FName GetValueAsName(out const FName KeyName);// 0xb5e81fc 0x78ce3ad520
	int GetValueAsInt(out const FName KeyName);// 0xb5e853c 0x78ce3ad600
	float GetValueAsFloat(out const FName KeyName);// 0xb5e8480 0x78ce3ad6e0
	byte GetValueAsEnum(out const FName KeyName);// 0xb5e85f8 0x78ce3ad7c0
	class Object GetValueAsClass(out const FName KeyName);// 0xb5e86b4 0x78ce3ad8a0
	bool GetValueAsBool(out const FName KeyName);// 0xb5e83c0 0x78ce3ad980
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0xb5e7380 0x78ce3ada60
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0xb5e7494 0x78ce3adb40
	void ClearValue(out const FName KeyName);// 0xb5e72cc 0x78ce3adc20

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8] 0x78ce3e2d00
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8] 0x78ce3e2d80
	void StopLogic(FString reason);// 0xb5ec654 0x78ce3ae080
	void StartLogic();// 0xb5ec72c 0x78ce3ae160
	void RestartLogic();// 0xb5ec710 0x78ce3ae240
	bool IsRunning();// 0xb5ec614 0x78ce3ae320
	bool IsPaused();// 0xb5ec5d4 0x78ce3ae400

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4] 0x78ce3dbe80
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1] 0x78ce3dbf00
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78ce3dbf80

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8] 0x78ce3ecf00
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8] 0x78ce3ecf80
	void OnNavDataRegistered(NavigationData* NavData);// 0xb61ab28 0x78ce403340
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult hit);// 0xb61ac3c 0x78ce403420
	Vector GetPathDestination();// 0xb61abd0 0x78ce403500
	byte GetPathActionType();// 0xb61ac08 0x78ce4035e0

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 0x8] 0x78ce3d2b00
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 0x78] 0x78ce3d2b80
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78ce3d2c00
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78ce3d2c80
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78ce3d2d00
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x78ce3d2d80
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x78ce3d2e00
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x78ce3d2e80
	enum RuntimeGeneration;//[Offset: 0x2a9, Size: 0x1] 0x78ce9dca40
	float ObservedPathsTickInterval;//[Offset: 0x2ac, Size: 0x4] 0x78ce3d2f80
	uint32 DataVersion;//[Offset: 0x2b0, Size: 0x4] 0x78ce3d3000
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 0x10] 0x78ce9dcae0

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8] 0x78cf0ca400
	Color Color;//[Offset: 0x38, Size: 0x4] 0x78cf0ca480
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc] 0x78cf0ca500
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8] 0x78cf0854c0
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28] 0x78cf085560

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10] 0x78cf0fee00
	int AreaID;//[Offset: 0x10, Size: 0x4] 0x78cf0fee80
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8] 0x78cf08b000

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10] 0x78ce9de980
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8] 0x78ce9dea20
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8] 0x78ce3dd780
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10] 0x78ce3dd800
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10] 0x78ce3dd880
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10] 0x78ce3dd900
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0xb5d28c4 0x78ce3ac020
	void RequestStimuliListenerUpdate();// 0xb5d2fe0 0x78ce3ac100
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0xb5d2ff4 0x78ce3ac1e0
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0xb5d2e00 0x78ce3ac2c0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0xb5d2f0c 0x78ce3ac3a0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xb5d2adc 0x78ce3ac480
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xb5d2be8 0x78ce3ac560
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xb5d2cf4 0x78ce3ac640
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0xb5d29c0 0x78ce3ac720
	void ForgetAll();// 0xb5d2fcc 0x78ce3ac800

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4] 0x78ce3dee80
	enum NotifyType;//[Offset: 0x2c, Size: 0x1] 0x78ce9de480
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78ce3def80
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x78ce3df000
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8] 0x78ce3df080

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10] 0x78ce9de520
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4] 0x78ce3df180
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0xb5d6610 0x78ce3ab840
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0xb5d66f0 0x78ce3ab920
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0xb5d64d0 0x78ce3aba00
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0xb5d6230 0x78ce3abae0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0xb5d6324 0x78ce3abbc0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8] 0x78ce3df700

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18] 0x78ce3e1980
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18] 0x78ce3e1a00
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4] 0x78ce3e1a80
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4] 0x78ce3e1b00
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4] 0x78ce3e1b80
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x78ce3e1c00
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1] 0x78ce3e1c80
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1] 0x78ce3e1d00
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1] 0x78ce3e1d80
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78ce3e1e00
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x78ce3e1e80
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1] 0x78ce3e1f00
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1] 0x78ce3e1f80
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 0x1] 0x78ce3e2000
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8] 0x78ce3e2080
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8] 0x78ce3e2100
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8] 0x78ce3e0080
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10] 0x78ce3f1460
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8] 0x78ce3e0180
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8] 0x78ce3e0200
	void AILoggingVerbose();// 0xb5de794 0x78ce3ae6a0
	void AIIgnorePlayers();// 0xb5de7b0 0x78ce3aadc0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4] 0x78ce3e2700
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10] 0x78ce3f1140
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10] 0x78ce3f11e0

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8] 0x78cf161980
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8] 0x78cf161a00

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8] 0x78ce3e2f80
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8] 0x78ce3e3000
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10] 0x78ce3f1320
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10] 0x78ce3f13c0

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10] 0x78ce3f0c40
	BTService*[] Services;//[Offset: 0x68, Size: 0x10] 0x78ce3f0ce0
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x78ce3e4780

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x78ce3e4800
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8] 0x78ce3e4880
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8] 0x78ce3e4900

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8] 0x78cf161300
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8] 0x78cf161380
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10] 0x78cf08aba0
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10] 0x78cf08ac40

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10] 0x78ce3f0740
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce3eb200

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4] 0x78ce3e9c80
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4] 0x78ce3e9d00
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78ce3e9d80
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78ce3e9e00

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x78ce3e4500
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1] 0x78ce3e4580

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1] 0x78cf161480
	uint16 Number;//[Offset: 0x2, Size: 0x2] 0x78cf161500

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10] 0x78ce3f1280
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8] 0x78ce3e2900
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0xb5e5944 0x78ce3adde0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0xb5e5b84 0x78ce3adec0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0xb5e5a3c 0x78ce3adfa0

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8] 0x78cf058980

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10] 0x78ce3f1fa0
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10] 0x78ce3f2040
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10] 0x78ce3f20e0
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4] 0x78ce3ee980
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x78ce3eea00
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4] 0x78ce3eea80
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8] 0x78ce3eeb00
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0xb60da88 0x78ce402a80

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8] 0x78cf162d80

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8] 0x78ce3ec700
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10] 0x78ce3f0380

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8] 0x78ce3eff80
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10] 0x78ce3f1f00

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10] 0x78ce3ee080
	class EnvQueryItemType* itemtype;//[Offset: 0x40, Size: 0x8] 0x78ce3f01a0
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce3ee100

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4] 0x78ce3ee180

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4] 0x78ce410f00
	byte TestPurpose;//[Offset: 0x30, Size: 0x1] 0x78ce410f80
	FString TestComment;//[Offset: 0x38, Size: 0x10] 0x78ce411000
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1] 0x78ce411080
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1] 0x78ce3ef800
	byte FilterType;//[Offset: 0x4a, Size: 0x1] 0x78ce3ef880
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38] 0x78ce3ef900
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38] 0x78ce3ef980
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38] 0x78ce3efa00
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1] 0x78ce3efa80
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1] 0x78ce3efb00
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1] 0x78ce3efb80
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1] 0x78ce3f1e60
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38] 0x78ce3efc80
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38] 0x78ce3efd00
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38] 0x78ce3efd80
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38] 0x78ce3efe00
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1] 0x78ce3efe80
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x78ce3eff00

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cf160780

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8] 0x78cf08aec0

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8] 0x78cf160800
	FName DataField;//[Offset: 0x18, Size: 0x8] 0x78cf160880

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x78cf160700

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4] 0x78cee9de80
	class EnvQueryItemType* itemtype;//[Offset: 0x58, Size: 0x8] 0x78cee52f40
	int OptionIndex;//[Offset: 0x60, Size: 0x4] 0x78cee9df00
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10] 0x78cee9df80
	void SetNamedParam(FName ParamName, float Value);// 0xb60b7fc 0x78cee8a180
	Vector[] GetResultsAsLocations();// 0xb60b8f0 0x78cee8a260
	Actor*[] GetResultsAsActors();// 0xb60b9a0 0x78cee8a340
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0xb60ba50 0x78cee8a420
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0xb60bb1c 0x78cee8a500
	float GetItemScore(int itemindex);// 0xb60bbe8 0x78cee8a5e0
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x8a873f8 0x78cee8a6c0

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78ce3db780
	delegate OnFail;//[Offset: 0x38, Size: 0x10] 0x78ce3db800
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0xb5cd248 0x78ce3a9d20

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4] 0x78cee9e680

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0xb61a07c 0x78ce402000
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0xb61969c 0x78ce4020e0
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0xb6194f0 0x78ce4021c0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0xb619cb0 0x78ce4022a0
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0xb619ea0 0x78ce402380
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0xb6197d0 0x78ce402460
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0xb619a40 0x78ce402540

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4] 0x78ce3e0900
	float MaxAge;//[Offset: 0x2c, Size: 0x4] 0x78ce3e0980
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78ce3e0a00

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x78cf160500
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10] 0x78cf08ae20
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cf160600

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10] 0x78ce9dbd20
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4] 0x78ce3d3680
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4] 0x78ce3d3700

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8] 0x78cf08af60
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4] 0x78cf0ffc00
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4] 0x78cf0ffc80
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78cf0ffd00
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78cf0ffd80
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78cf0ffe00

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf0ffe80
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf0fff00
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf0fff80
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78cf0fe780
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78cf0fe800
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78cf0fe880
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78cf0fe900
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78cf0fe980
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78cf0fea00
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78cf0fea80
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78cf0feb00
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78cf0feb80
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78cf0fec00
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x78cf0fec80
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x78cf0fed00
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78ea083e00

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8] 0x78ce414e80
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10] 0x78ce3f3b20
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10] 0x78ce3f3bc0
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8] 0x78ce415000
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0xb61da90 0x78ce404f40
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0xb61dbdc 0x78ce405020
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0xb61d930 0x78ce405100
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0xb61d9e0 0x78ce4051e0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8] 0x78cf163780

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8] 0x78ce414180
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8] 0x78ce414200
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8] 0x78ce412180
	Object* Instigator;//[Offset: 0x40, Size: 0x8] 0x78ce412200
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8] 0x78ce412280
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce412300
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce412380
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78ce412400
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78ce412480
	byte GetActionPriority();// 0xb61b920 0x78ce401d60
	void Finish(byte WithResult);// 0xb61b780 0x78ce401e40
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0xb61b830 0x78ce401f20

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8] 0x78cf163700

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x78ce3db980
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10] 0x78ce9df240
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10] 0x78ce9df2e0
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10] 0x78ce9df380
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10] 0x78ce9df420
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10] 0x78ce3dbc00
	void OnRep_SimulatedTasks();// 0xb50b7f8 0x78ce3a9e00
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0xb50b548 0x78ce3a9ee0

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8] 0x78cee9cb80
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1] 0x78cee53760
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8] 0x78cee9cc80
	void ReadyForActivation();// 0xb508a9c 0x78cee87400
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x8a873f8 0x78cee874e0
	void EndTask();// 0xb508a88 0x78cee875c0

--------------------------------
Class: NpcAIController.AIController.Controller.Actor.Object
	AIPerceptionComponent* ai_perception_;//[Offset: 0x328, Size: 0x8] 0x78cecb0b00

--------------------------------
Class: PlayerPropertyComponent.ActorComponent.Object
	int player_hp_;//[Offset: 0xbc, Size: 0x4] 0x78ced57600
	int player_mp_;//[Offset: 0xc0, Size: 0x4] 0x78ced57680
	int player_max_hp_;//[Offset: 0xc4, Size: 0x4] 0x78ced57700
	int player_max_hp_add_rate_;//[Offset: 0xc8, Size: 0x4] 0x78ced57780
	int player_max_hp_add_;//[Offset: 0xcc, Size: 0x4] 0x78ced57800
	int player_max_mp_;//[Offset: 0xd0, Size: 0x4] 0x78ced57880
	int player_max_mp_add_rate_;//[Offset: 0xd4, Size: 0x4] 0x78ced57900
	int player_max_mp_add_;//[Offset: 0xd8, Size: 0x4] 0x78ced57980
	int player_sp_;//[Offset: 0xdc, Size: 0x4] 0x78ced57a00
	int player_max_sp_;//[Offset: 0xe0, Size: 0x4] 0x78ced57a80
	int player_max_sp_add_rate_;//[Offset: 0xe4, Size: 0x4] 0x78ced57b00
	int player_max_sp_add_;//[Offset: 0xe8, Size: 0x4] 0x78ced57b80
	float player_dying_;//[Offset: 0xec, Size: 0x4] 0x78ced57c00
	float player_injury_;//[Offset: 0xf0, Size: 0x4] 0x78ced57c80
	int hp_recover_value_;//[Offset: 0xf4, Size: 0x4] 0x78ced57d00
	int hp_recover_rate_value_;//[Offset: 0xf8, Size: 0x4] 0x78ced57d80
	int hp_recover_time_;//[Offset: 0xfc, Size: 0x4] 0x78ced57e00
	int hp_unrecover_value_;//[Offset: 0x100, Size: 0x4] 0x78ced57e80
	int hp_unrecover_rate_value_;//[Offset: 0x104, Size: 0x4] 0x78ced57f00
	int hp_unrecover_time_;//[Offset: 0x108, Size: 0x4] 0x78ced57f80
	int mp_recover_value_;//[Offset: 0x10c, Size: 0x4] 0x78ced58000
	int mp_recover_rate_value_;//[Offset: 0x110, Size: 0x4] 0x78ced58080
	int fight_mp_recover_rate_value_;//[Offset: 0x114, Size: 0x4] 0x78ced58100
	int mp_recover_time_;//[Offset: 0x118, Size: 0x4] 0x78ced58180
	int mp_unrecover_value_;//[Offset: 0x11c, Size: 0x4] 0x78ced58200
	int mp_unrecover_rate_value_;//[Offset: 0x120, Size: 0x4] 0x78ced58280
	int mp_unrecover_time_;//[Offset: 0x124, Size: 0x4] 0x78ced58300
	float injury_maxmp_percent_;//[Offset: 0x128, Size: 0x4] 0x78ced58380
	int oxygen_;//[Offset: 0x12c, Size: 0x4] 0x78ced58400
	int max_oxygen_;//[Offset: 0x130, Size: 0x4] 0x78ced56380
	int save_change_value_;//[Offset: 0x13c, Size: 0x4] 0x78ced56400
	int other_save_change_value_;//[Offset: 0x140, Size: 0x4] 0x78ced56480
	bool invincible_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1] 0x78ced56500
	int attack_;//[Offset: 0x148, Size: 0x4] 0x78ced56580
	float server_tick_;//[Offset: 0x1b0, Size: 0x4] 0x78ced56600
	float client_tick_;//[Offset: 0x1b4, Size: 0x4] 0x78ced56680
	float owner_tick_;//[Offset: 0x1b8, Size: 0x4] 0x78ced56700
	bool skill_mp_weak_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1] 0x78ced56780
	HPChangeInfo m_HpChangeInfo;//[Offset: 0x1c8, Size: 0x18] 0x78ced55b80
	HPChangeInfo m_HpReduceInfo;//[Offset: 0x1e0, Size: 0x18] 0x78ced55a00
	void UpdateMaxMp();// 0x8461eb4 0x78ced4ce20
	void ServerInitProperty();// 0x8463b34 0x78ced4cf00
	void ReSetDyingHp();// 0x84633bc 0x78ced4cfe0
	void PoolDeactivate();// 0x8461d74 0x78ced4d0c0
	void PoolActivate();// 0x8461d90 0x78ced4d1a0
	void OnSPChange();// 0x846214c 0x78ced4d280
	void OnSaveChangeValueChange();// 0x84620fc 0x78ced4d360
	void OnOxygenChange();// 0x8462124 0x78ced4d440
	void OnMPChange();// 0x8462160 0x78ced4d520
	void OnInjuryChange();// 0x8462138 0x78ced4d600
	void OnHPChange();// 0x8462174 0x78ced4d6e0
	void OnDyingHPChange();// 0x8462110 0x78ced4d7c0
	void InitInjurysValue();// 0x8461ea0 0x78ced4d8a0
	int GetWaiArmorRate();// 0x8462f2c 0x78ced4d980
	int GetWaiArmor();// 0x8463290 0x78ced4da60
	int GetSimpleWaiArmorRate();// 0x8463274 0x78ced4db40
	int GetOxygen();// 0x8462648 0x78ced4dc20
	int GetOutPower();// 0x8463164 0x78ced4dd00
	int GetNeiArmor();// 0x8462f10 0x78ced4dde0
	int GetInterruptAddSkill(int skil);// 0x84628fc 0x78ced4dec0
	int GetInnerPower();// 0x8463054 0x78ced4dfa0
	HPChangeInfo GetHpReduceInfo();// 0x84620b0 0x78ced4e080
	HPChangeInfo GetHpChangeInfo();// 0x84620d4 0x78ced4e160
	int GetDefCritRate();// 0x8462bc8 0x78ced4e240
	int GetDefCritModulus();// 0x8462aa0 0x78ced4e320
	int GetCurrentPlayerSP();// 0x846340c 0x78ced4e400
	int GetCurrentPlayerMP();// 0x8463444 0x78ced4e4e0
	int GetCurrentPlayerMaxSP();// 0x84633f0 0x78ced4e5c0
	int GetCurrentPlayerMaxMP();// 0x8463428 0x78ced4e6a0
	int GetCurrentPlayerMaxHP();// 0x8463460 0x78ced4adc0
	int GetCurrentPlayerHP();// 0x846347c 0x78ced4aea0
	int GetCurrentPlayerDyingHP();// 0x84633d0 0x78ced4af80
	int GetCritRate();// 0x8462e00 0x78ced4b060
	int GetCritModulus();// 0x8462cd8 0x78ced4b140
	int GetBeInterruptAddSkill(int skill);// 0x8462758 0x78ced4b220
	int GetAttack();// 0x84633a0 0x78ced4b300
	void DirectChangeMp(int mp, enum reason);// 0x8463774 0x78ced4b3e0
	void ChangeWaiArmor(int Value, enum reason);// 0x8463180 0x78ced4b4c0
	void ChangeSaveValueByNumber(int Num, enum reason);// 0x8462188 0x78ced4b5a0
	void ChangeSaveValue(float Time, enum reason);// 0x8461dac 0x78ced4b680
	void ChangeSaveChangeValueBeKill(enum reason);// 0x846227c 0x78ced4b760
	void ChangeSaveChangeValue(bool isadd, enum reason);// 0x8462324 0x78ced4b840
	void ChangeRecoverRate(int Value, enum reason);// 0x846358c 0x78ced4b920
	void ChangeOxygenchange(int oxygenchange, enum reason);// 0x8462414 0x78ced4ba00
	void ChangeOxygen(int oxygen, float Time, enum reason);// 0x8462508 0x78ced4bae0
	void ChangeOutPower(int Value, enum reason);// 0x8463070 0x78ced4bbc0
	void ChangeNeiArmor(int Value, enum reason);// 0x8462e1c 0x78ced4bca0
	void ChangeMp(int mp, float Time, enum action_type, enum mp_change_type, enum reason);// 0x8463868 0x78ced4bd80
	void ChangeMaxHpAddRate(int maxhpadd, enum reason);// 0x8463a40 0x78ced4be60
	void ChangeInterrupt(int Value, enum reason);// 0x8462808 0x78ced4bf40
	void ChangeInnerPower(int Value, enum reason);// 0x8462f60 0x78ced4c020
	void ChangeInjury(float Injury, enum reason);// 0x8463680 0x78ced4c100
	void ChangeHp(int HP, enum reason);// 0x8461fbc 0x78ced4c1e0
	void ChangeFightRecoverRate(int Value, enum reason);// 0x8463498 0x78ced4c2c0
	void ChangeDyingHP(int dying_hp, enum reason);// 0x8461ec8 0x78ced4c3a0
	void ChangeDefCritRate(int Value, enum reason);// 0x8462ad4 0x78ced4c480
	void ChangeDefCritModulus(int Value, enum reason);// 0x84629ac 0x78ced4c560
	void ChangeCritRate(int Value, enum reason);// 0x8462d0c 0x78ced4c640
	void ChangeCritModulus(int Value, enum reason);// 0x8462be4 0x78ced4c720
	void ChangeBeInterrupt(int Value, enum reason);// 0x8462664 0x78ced4c800
	void ChangeAttack(int Value, enum reason);// 0x84632ac 0x78ced4c8e0

--------------------------------
Class: PlayerStateComponent.ActorComponent.Object
	TimerHandle recover_child_state_;//[Offset: 0xc0, Size: 0x8] 0x78ced5da00
	enum player_state_net_owner_;//[Offset: 0xd8, Size: 0x1] 0x78ced27f40
	enum player_state_net_other_;//[Offset: 0xd9, Size: 0x1] 0x78ced27fe0
	bool player_canbetarget_other_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x78ced5db80
	bool player_canlock_other_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1] 0x78ced5dc00
	bool player_stealth_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1] 0x78ced5dc80
	bool player_to_stealth_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1] 0x78ced5dd00
	enum player_child_state_client_;//[Offset: 0xde, Size: 0x1] 0x78ced28080
	enum player_child_state_server_;//[Offset: 0xdf, Size: 0x1] 0x78ced28120
	enum player_move_state_client_;//[Offset: 0xe0, Size: 0x1] 0x78ced281c0
	enum player_move_state_server_;//[Offset: 0xe1, Size: 0x1] 0x78ced28260
	enum player_motion_state_client_;//[Offset: 0xe2, Size: 0x1] 0x78ced28300
	enum player_motion_state_server_;//[Offset: 0xe3, Size: 0x1] 0x78ced283a0
	enum PlayerTrainForceGuideType;//[Offset: 0xe4, Size: 0x1] 0x78ced28440
	bool bIsInDizziness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1] 0x78ced5e100
	bool has_send_kill_info_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x78ced5e180
	bool bEnterDragonRockRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1] 0x78ced5e200
	Vector DragonRockLoc;//[Offset: 0x104, Size: 0xc] 0x78ced5e280
	float server_tick_;//[Offset: 0x23c, Size: 0x4] 0x78ced5e300
	float client_tick_;//[Offset: 0x240, Size: 0x4] 0x78ced5e380
	float owner_tick_;//[Offset: 0x244, Size: 0x4] 0x78ced5e400
	void ServerInitProperty();// 0x846f7bc 0x78ced62460
	void Server_SetPlayerState(enum State);// 0x846f6d4 0x78ced62540
	void Server_EmptyDizziness();// 0x846f910 0x78ced62620
	void Server_EffectPlayerState(enum val);// 0x846f818 0x78ced62700
	void Server_ChangePlayerChildState(enum State, float during);// 0x846fb64 0x78ced627e0
	void Server_AddDizziness(DizzinessInfo DizzinessInfo);// 0x846f92c 0x78ced628c0
	void recover_child_state_time_FUNC();// 0x846fb50 0x78ced629a0
	void PoolDeactivate();// 0x846f69c 0x78ced62a80
	void PoolActivate();// 0x846f6b8 0x78ced62b60
	enum Player_state_net();// 0x846f9d8 0x78ced62c40
	void OnRep_State_Other();// 0x846f8e8 0x78ced62d20
	void OnRep_State();// 0x846f8fc 0x78ced62e00
	void OnRep_IsInDizziness();// 0x846f8c0 0x78ced62ee0
	void OnRep_CanBeTarget_Other();// 0x846f8d4 0x78ced62fc0
	enum GetPlayerMoveState();// 0x846fae8 0x78ced630a0
	enum GetPlayerMotionState();// 0x846fab4 0x78ced63180
	enum GetPlayerChildState();// 0x846fb1c 0x78ced63260
	void Client_EffectPlayerState(enum val);// 0x846fa0c 0x78ced63340
	void ChangePlayerState(enum val);// 0x846fe94 0x78ced63420
	void ChangePlayerMoveState(enum val);// 0x846fd44 0x78ced63500
	void ChangePlayerMotionState(enum val);// 0x846fc9c 0x78ced635e0
	void ChangePlayerChildState(enum val);// 0x846fdec 0x78ced636c0

--------------------------------
Class: DizzinessInfo
	float RemainingTime;//[Offset: 0x0, Size: 0x4] 0x78cefc7980

--------------------------------
Class: PlayerBuffComponent.ActorComponent.Object
	float server_tick_;//[Offset: 0x400, Size: 0x4] 0x78cecefa80
	float client_tick_;//[Offset: 0x404, Size: 0x4] 0x78cecefb00
	float owner_tick_;//[Offset: 0x408, Size: 0x4] 0x78cecefb80
	void UI_UpdateCDBuff(int64 buffID, float Time);// 0x8409538 0x78cecfa5e0
	void UI_SetBuff(int64 buffID, int numberoflayer, float Time);// 0x8409700 0x78cecfa6c0
	void UI_RemoveBuff(int64 buffID);// 0x8409650 0x78cecfa7a0
	void UI_ClearBuffs();// 0x8409634 0x78cecfa880
	void PoolDeactivate();// 0x8409500 0x78cecfa960
	void PoolActivate();// 0x840951c 0x78cecfaa40

--------------------------------
Class: PlayerFightComponent.ActorComponent.Object
	bool is_in_block_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78ced3da80
	enum take_weapon_state_;//[Offset: 0xe0, Size: 0x1] 0x78ced24d40
	int[] qishen_skill_list_;//[Offset: 0xf8, Size: 0x10] 0x78ced24de0
	int current_use_skill_bar_index_;//[Offset: 0x108, Size: 0x4] 0x78ced3dc00
	int owenr_current_use_skill_bar_index_;//[Offset: 0x10c, Size: 0x4] 0x78ced3dc80
	int near_weapon_index_;//[Offset: 0x114, Size: 0x4] 0x78ced3dd00
	int64 current_target_id_;//[Offset: 0x130, Size: 0x8] 0x78ced3dd80
	int64 simulator_target_id_;//[Offset: 0x138, Size: 0x8] 0x78ced3de00
	WuXiaXBaseCharacter* simulator_target_;//[Offset: 0x140, Size: 0x8] 0x78ced3de80
	int[] player_around_list_;//[Offset: 0x170, Size: 0x10] 0x78ced24e80
	int[] player_target_list_;//[Offset: 0x180, Size: 0x10] 0x78ced24f20
	int current_weapon_type;//[Offset: 0x198, Size: 0x4] 0x78ced3e000
	byte[] skill_overlap_type_;//[Offset: 0x268, Size: 0x10] 0x78ced24fc0
	byte[] horse_overlap_type_;//[Offset: 0x278, Size: 0x10] 0x78ced25060
	byte[] attack_static_type_;//[Offset: 0x288, Size: 0x10] 0x78ced25100
	class Object* skill_overlap_actor_class_filter;//[Offset: 0x298, Size: 0x8] 0x78ced251a0
	class Object* skill_overlap_actor2_class_filter;//[Offset: 0x2a0, Size: 0x8] 0x78ced25240
	Actor*[] ActorsToIgnore;//[Offset: 0x2a8, Size: 0x10] 0x78ced229a0
	Actor*[] HitActors;//[Offset: 0x2b8, Size: 0x10] 0x78ced22a40
	int[] current_hit_actors;//[Offset: 0x2c8, Size: 0x10] 0x78ced22ae0
	float server_tick_;//[Offset: 0x34c, Size: 0x4] 0x78ced3e380
	float client_tick_;//[Offset: 0x350, Size: 0x4] 0x78ced3e400
	float owner_tick_;//[Offset: 0x354, Size: 0x4] 0x78ced3e480
	bool delay_flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x78ced3e500
	int delay_cd;//[Offset: 0x35c, Size: 0x4] 0x78ced3e580
	int delay_skill;//[Offset: 0x360, Size: 0x4] 0x78ced3e600
	int64 weak_close_time_;//[Offset: 0x368, Size: 0x8] 0x78ced3e680
	int64 weak_close_time_my_;//[Offset: 0x370, Size: 0x8] 0x78ced3e700
	bool weak_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1] 0x78ced3c680
	int[] falling_attack_hit_players_;//[Offset: 0x3f8, Size: 0x10] 0x78ced22b80
	float hero_gs_cd_;//[Offset: 0x52c, Size: 0x4] 0x78ced3c780
	AnimMontage* current_skill_montage_1_;//[Offset: 0x530, Size: 0x8] 0x78ced3c800
	AnimMontage* current_skill_montage_2_;//[Offset: 0x538, Size: 0x8] 0x78ced3c880
	int CurrentMissileNum;//[Offset: 0x590, Size: 0x4] 0x78ced3c900
	float CheckProjectilePathSubStepDeltaTime;//[Offset: 0x5d8, Size: 0x4] 0x78ced3c980
	void UnTakeWeapon();// 0x8451398 0x78ced43ce0
	void TakeWeapon(int index, bool take_change, bool send_server, bool is_design);// 0x84514f0 0x78ced43dc0
	void SwitchWeaponAmongFarAndNear();// 0x8451370 0x78ced43ea0
	void SwitchWeapon(int Value);// 0x84513ac 0x78ced43f80
	void SwitchThrowWeapon();// 0x8451348 0x78ced44060
	void SwitchNearWeapon();// 0x845135c 0x78ced44140
	void Server_TakeWeapon(int index, bool take_change);// 0x84511d4 0x78ced44220
	void Server_StartFallingAttack();// 0x8450f14 0x78ced44300
	void Server_SpawnMissile(int64 LaunchTime, Vector LaunchLocation, Rotator LaunchRotation, Vector LaunchDirection, int TargetId, int64 missilecontrollerid);// 0x8450004 0x78ced443e0
	void Server_SkillPlay(int64 play_time, int skill_id, FName section_name, int16 rotation_r, int16 rotation_p, int16 rotation_y, enum child_state, int attack_target_id, enum check_action, enum attack_index, uint32 montage_idx);// 0x84520d8 0x78ced444c0
	void Server_PlaySkillEffect(enum Type, float skill_time, float skill_dis, float be_attack_angle, Vector dir);// 0x8450d44 0x78ced445a0
	void Server_PlayAim(bool flag);// 0x845103c 0x78ced44680
	void Server_LaunchMissile(bool bIsAuto);// 0x845022c 0x78ced44760
	void Server_ForcedCancelBlock();// 0x845191c 0x78ced44840
	void Server_ChangeTarget(int64 Target, bool is_auto_target_id);// 0x84516e0 0x78ced44920
	void Server_CancelAllPlay();// 0x8451e90 0x78ced44a00
	void Server_BlockPlay(int64 block_counter_attack_play_time, bool flag);// 0x8451938 0x78ced44ae0
	void ReTakeWeapon();// 0x8451384 0x78ced44bc0
	void PoolDeactivate();// 0x844ffcc 0x78ced44ca0
	void PoolActivate();// 0x844ffe8 0x78ced44d80
	void PlayWuDi();// 0x8451c5c 0x78ced44e60
	void PlayShanBi(enum index);// 0x8451c70 0x78ced44f40
	void PlayQiShen();// 0x8451c48 0x78ced45020
	void PlayFearless(int64 skillid);// 0x8451b64 0x78ced45100
	void OnRep_WeakState();// 0x84506c4 0x78ced451e0
	void OnRep_SkillBarIndex();// 0x84506ec 0x78ced452c0
	void OnRep_OwnerSkillBarIndex();// 0x84506d8 0x78ced453a0
	void OnRep_CurTargetID();// 0x84506b0 0x78ced45480
	void OnPlayerOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x84502e4 0x78ced45560
	void OnPlayerOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x845046c 0x78ced45640
	void NormalAttacRelease();// 0x8451c20 0x78ced41d60
	void NormalAttack();// 0x8451c34 0x78ced41e40
	void HeavyAttack();// 0x8451c0c 0x78ced41f20
	int GetLastMeleeWeapon();// 0x8451454 0x78ced42000
	int GetCurrentWeaponMode();// 0x8451488 0x78ced420e0
	int GetCurrentWeapon();// 0x84514bc 0x78ced421c0
	int GetCurrentSkillCD(int skill_id);// 0x8450f8c 0x78ced422a0
	int GetCurrentAttackTargetId();// 0x8451314 0x78ced42380
	float GetAimCameraLength();// 0x8451130 0x78ced42460
	void Client_SetBlockColdTime(float NewLeftBlockColdTime, float NewDefineBlockColdTime);// 0x8451824 0x78ced42540
	void Client_ReduceSkillCD(int64 skill_id, float cd);// 0x845094c 0x78ced42620
	void Client_ReconnectUpdate(int weapon_index, int general_skill_id, int64 general_skill_end, uint32 montage_idx);// 0x8450bb4 0x78ced42700
	void Client_LockCD(bool lock, const int64[] skills);// 0x8450848 0x78ced427e0
	void Client_HeroPassiveSkill(int64 skillid);// 0x8450a48 0x78ced428c0
	void Client_FrameFightInfo(const byte[] Data);// 0x8450af8 0x78ced429a0
	void Client_ClearTarget();// 0x8451684 0x78ced42a80
	void Client_ClearAllSkillCD();// 0x8450f70 0x78ced42b60
	void Client_CheckSoundResult(const int[] IDs, const Vector[] locations);// 0x8450700 0x78ced42c40
	void Client_CancleSkillPlay(int skill_id, enum attack_index, int server_current_skill_id, int64 server_end_time, enum skill_acrion_state, uint32 montage_idx);// 0x8451eac 0x78ced42d20
	void CheckSound();// 0x8451e7c 0x78ced42e00
	bool CheckIsInSkill();// 0x8451b2c 0x78ced42ee0
	bool CheckIsInRangeWeaponState();// 0x8451164 0x78ced42fc0
	bool CheckIsInAim();// 0x845119c 0x78ced430a0
	void BlockPlay(bool flag);// 0x8451a7c 0x78ced43180
	void AttackInBlock();// 0x8451d18 0x78ced43260
	void AttackByIndexRelease(enum index);// 0x8451d2c 0x78ced43340
	void AttackByIndex(int index);// 0x8451dd4 0x78ced43420

--------------------------------
Class: PlayerBroadcastComponent.ActorComponent.Object
	<int64,FakeCharacter*> fake_player_pos;//[Offset: 0xf0, Size: 0x50] 0x78cf15f280
	void Broad_WallJump_Client(int64 player_id, Vector NewVelocity);// 0x8403128 0x78cecfab20
	void Broad_WallJump(Vector NewVelocity);// 0x8403220 0x78cecfac00
	void Broad_TakeWeapon_Client(int64 player_id, int index, bool take_change);// 0x84037d0 0x78cecface0
	void Broad_StartFallingAttack_Client(int64 player_id);// 0x840361c 0x78cecf7400
	void Broad_SkillPlay_Client(int64 player_id, int64 play_time, int skill_id, FName section_name, int16 rotation_r, int16 rotation_p, int16 rotation_y, enum child_state, enum check_action, int play_anim_rate, int64 target_id, float locX, float locY, float locZ, uint32 montage_idx, bool bIsServerCall);// 0x8404690 0x78cecf74e0
	void Broad_SetStiffState_Client(int64 player_id, bool foo);// 0x8403afc 0x78cecf75c0
	void Broad_SetStiffState(bool foo);// 0x8403c00 0x78cecf76a0
	void Broad_SetPickItemNumber_Client(int world_id, int Number);// 0x84021c4 0x78cecf7780
	void Broad_SetMovementInputVector_Client(int64 player_id, Vector MovementInputVector);// 0x8400adc 0x78cecf7860
	void Broad_SaveSquad_Client(int64 player_id, int PlayerID, int actionindex);// 0x84026c0 0x78cecf7940
	void Broad_RideHorse_Client(int64 player_id, bool isride, bool isleft);// 0x8402af8 0x78cecf7a20
	void Broad_PlaySkillEffect_Client(int64 player_id, enum Type, Rotator Rotation, float skill_time, float be_attack_angle, Vector dir, float Len);// 0x8403cb0 0x78cecf7b00
	void Broad_PlayerToStealth_Client(int64 player_id, float play_time, bool Team);// 0x8400e7c 0x78cecf7be0
	void Broad_PlayerResurrection_Client(int64 player_id);// 0x84032c8 0x78cecf7cc0
	void Broad_PlayerLeaveStealth_Client(int64 player_id);// 0x8400dcc 0x78cecf7da0
	void Broad_PlayerExpression_Client(int64 player_id, int ID);// 0x8400cd0 0x78cecf7e80
	void Broad_PlayerEnterJail_Client(int64 player_id);// 0x8403378 0x78cecf7f60
	void Broad_PlayerActorRotation_Client(int64 player_id, Rotator Rotation);// 0x8400fcc 0x78cecf8040
	void Broad_PlayerAction_Client(int64 player_id, int ID);// 0x8400bd4 0x78cecf8120
	void Broad_PlayBeKill_Client(int64 player_id, int64 attacker_id);// 0x8403f20 0x78cecf8200
	void Broad_PlayBeAttack_Client(int64 player_id, int64 play_time, bool beattack, int be_attack_type, float be_attack_angle, Vector dir, enum action_type, int64 attacker_loc_x, int64 attacker_loc_y, int64 attacker_loc_z, int64 self_loc_x, int64 self_loc_y, int64 self_loc_z, int64 attacker_id);// 0x8404164 0x78cecf82e0
	void Broad_PlayAim_Client(int64 player_id, bool flag);// 0x84036cc 0x78cecf83c0
	void Broad_OnRep_Block_Client(int64 player_id, int64 block_counter_attack_play_time, bool flag, enum false_flag, bool is_be_attack);// 0x840391c 0x78cecf84a0
	void Broad_LianTiao_Client(int64 player_id, bool is_in_lian_tiao, int lian_tiao_index);// 0x8402d48 0x78cecf8580
	void Broad_LaunchMissile_Client(int64 player_id, bool bIsAuto);// 0x84009d8 0x78cecf8660
	void Broad_KillTarget_Client(int64 player_id, int PlayerID, int actionindex);// 0x84024cc 0x78cecf8740
	void Broad_JumpStepOn_Client(int64 player_id, float Height);// 0x84010c4 0x78cecf8820
	void Broad_FinishSaveSquad_Client(int64 player_id);// 0x8402610 0x78cecf8900
	void Broad_FinishKillTarget_Client(int64 player_id);// 0x840241c 0x78cecf89e0
	void Broad_FinishKeepInteractive_Client(int64 player_id);// 0x840164c 0x78cecf8ac0
	void Broad_FinishInteractiveMove_Client(int64 player_id);// 0x840132c 0x78cecf8ba0
	void Broad_FinishFallingAttack_Client(int64 player_id, int64 skillid);// 0x8403524 0x78cecf8c80
	void Broad_FakeCharacter_Client(const int64[] player_id, const Vector_NetQuantize[] pos, const int64[] player_horse_id);// 0x84011c0 0x78cecf8d60
	void Broad_EndAnimEffect_Client(int64 player_id, int EffectType);// 0x8402804 0x78cecf8e40
	void Broad_DoubleJump_Client(int64 player_id, Vector NewVelocity);// 0x8402f88 0x78cecf8f20
	void Broad_DoubleJump(Vector NewVelocity);// 0x8403080 0x78cecf9000
	void Broad_CollisionEnabled_Client(int64 player_id, bool Enabled);// 0x8402c44 0x78cecf5720
	void Broad_ChangeQingGongState_Client(int64 player_id, enum State);// 0x8402e8c 0x78cecf5800
	void Broad_ChangePlayerChildState_Client(int64 player_id, enum State);// 0x8403428 0x78cecf58e0
	void Broad_CancelAllPlay_Client(int64 player_id);// 0x84045e0 0x78cecf59c0
	void Broad_BreakKeepInteractive_Client(int64 player_id);// 0x84016fc 0x78cecf5aa0
	void Broad_BreakBeKill_Client(int64 player_id);// 0x84022bc 0x78cecf5b80
	void Broad_BreakAction_Client(int64 player_id, enum breaktype);// 0x84029fc 0x78cecf5c60
	void Broad_BeginUseItem_Client(int64 player_id, enum bag_type, int index, int Num, enum useitemstate, float Time, int actionindex);// 0x8401a68 0x78cecf5d40
	void Broad_BeginKeepInteractive_Client(int64 player_id, int64 begintime, float keeptime, enum Type, int interactiveid, Vector playerlocation, Vector LookAtLocation, int actionindex);// 0x84017ac 0x78cecf5e20
	void Broad_BeginInteractiveMove_Client(int64 player_id, int64 begintime, float keeptime, enum Type, Vector beginlocation, Vector EndLocation, WuXiaInteractiveActor* interactiveactor);// 0x84013dc 0x78cecf5f00
	void Broad_BeginBeKill_Client(int64 player_id);// 0x840236c 0x78cecf5fe0
	void Broad_BeginBeAssassination_Client(int64 player_id, bool isfall, bool issucces, float damage, int64 begintime, int64 actiontime, int64 ID);// 0x8401cdc 0x78cecf60c0
	void Broad_BeginAssassinationTarget_Client(int64 player_id, bool isfall, bool issucces, float damage, int64 begintime, int64 actiontime, int64 TargetId);// 0x8401f50 0x78cecf61a0
	void Broad_BeginAnimEffect_Client(int64 player_id, int EffectType);// 0x8402900 0x78cecf6280
	void Braod_RfreshFlat_Client(int64 player_id, int64 AttackId, bool IsSkill);// 0x8404018 0x78cecf6360

--------------------------------
Class: WuXia_Movement_Component.ActorComponent.Object
	Pawn* pawn_;//[Offset: 0xc0, Size: 0x8] 0x78ce624e00
	SkeletalMeshComponent* mesh_;//[Offset: 0xc8, Size: 0x8] 0x78ce624e80
	CharacterMovementComponent* character_movement_;//[Offset: 0xd0, Size: 0x8] 0x78ce624f00
	AnimInstance* anim_instance_;//[Offset: 0xd8, Size: 0x8] 0x78ce624f80
	Character* character_;//[Offset: 0xe0, Size: 0x8] 0x78ce625000
	CapsuleComponent* capsule_component_;//[Offset: 0xe8, Size: 0x8] 0x78ce625080
	float move_forward_backward_axis_value_;//[Offset: 0xf0, Size: 0x4] 0x78ce625100
	float move_rightx_left_axis_value_;//[Offset: 0xf4, Size: 0x4] 0x78ce625180
	float move_swim_up_down_axis_value_;//[Offset: 0xf8, Size: 0x4] 0x78ce625200
	float movement_input_axis_multiplier_;//[Offset: 0xfc, Size: 0x4] 0x78ce625280
	int speed_change_value_;//[Offset: 0x100, Size: 0x4] 0x78ce623200
	float max_acceleration_;//[Offset: 0x104, Size: 0x4] 0x78ce623280
	float braking_deceleration_;//[Offset: 0x108, Size: 0x4] 0x78ce623300
	float ground_friction_;//[Offset: 0x10c, Size: 0x4] 0x78ce623380
	enum rotate_method_;//[Offset: 0x110, Size: 0x1] 0x78cedd4ac0
	Vector ragdoll_location_;//[Offset: 0x114, Size: 0xc] 0x78ce623480
	Vector ragdoll_velocity_;//[Offset: 0x120, Size: 0xc] 0x78ce623500
	FName pelvis_bone_;//[Offset: 0x12c, Size: 0x8] 0x78ce623580
	float z_offset_;//[Offset: 0x134, Size: 0x4] 0x78ce623600
	AnimMontage* getup_from_front_montage_;//[Offset: 0x138, Size: 0x8] 0x78ce623680
	AnimMontage* getup_from_back_montage_;//[Offset: 0x140, Size: 0x8] 0x78ce623700
	float parachute_input_right_;//[Offset: 0x148, Size: 0x4] 0x78ce623780
	float parachute_input_forward_;//[Offset: 0x14c, Size: 0x4] 0x78ce623800
	CurveFloat* qinggong_move_curve_;//[Offset: 0x158, Size: 0x8] 0x78ce623880
	delegate client_open_parachute_delegate_;//[Offset: 0x160, Size: 0x10] 0x78ce623900
	delegate client_jump_plane_delegate_;//[Offset: 0x170, Size: 0x10] 0x78ce623980
	delegate client_hide_parachute_delegate_;//[Offset: 0x180, Size: 0x10] 0x78ce623a00
	delegate client_show_close_parachute_delegate_;//[Offset: 0x190, Size: 0x10] 0x78ce623a80
	delegate client_hide_close_parachute_delegate_;//[Offset: 0x1a0, Size: 0x10] 0x78ce623b00
	PlayerMoveState player_move_state_;//[Offset: 0x218, Size: 0x6] 0x78ce623b80
	float server_tick_;//[Offset: 0x238, Size: 0x4] 0x78ce623c00
	float client_tick_;//[Offset: 0x23c, Size: 0x4] 0x78ce623c80
	float owner_tick_;//[Offset: 0x240, Size: 0x4] 0x78ce623d00
	float IsSpringInterval;//[Offset: 0x328, Size: 0x4] 0x78ce623d80
	float IsSpringDuration;//[Offset: 0x32c, Size: 0x4] 0x78ce623e00
	void UpdateMovementSpeed_v2(bool walk_flag, bool spring_flag, bool block_flag, bool aim_flag, float Speed, bool update_server_or_client);// 0x84e8640 0x78cee0f3c0
	void UpdateMovementSettingsEvent(float max_acceleration, float braking_deceleration_walking, float ground_friction, float jump_z_velocity);// 0x84e9964 0x78cee0f4a0
	void UpdateInput(enum Type, bool Value);// 0x84e9330 0x78cee0f580
	void SwitchMovementModeEvent(byte movement_mode);// 0x84e960c 0x78cee0f660
	void SetReferences();// 0x84e9c94 0x78cee0f740
	void SetPlayerMovementsSwimAxisValues(float up_axis);// 0x84e9ae8 0x78cee0f820
	void SetPlayerMovementAxisValues(float forward_axis, float right_axis);// 0x84e9b90 0x78cee0f900
	void SetMovementInputVector(Vector MovementInputVector);// 0x84e96dc 0x78cee0f9e0
	void SetDefaultSettings();// 0x84e9c80 0x78cee0fac0
	void Server_WallJump();// 0x84e8c00 0x78cee0fba0
	void Server_UpdateParachuteInput(float Right, float Forward);// 0x84e9058 0x78cee0fc80
	void Server_UpdateMovementSpeed_True(bool walk_flag, bool spring_flag, bool block_flag, bool aim_flag, bool update_server_or_client);// 0x84e83fc 0x78cee0fd60
	void Server_UpdateFreeview(bool free_view);// 0x84e9870 0x78cee0fe40
	void Server_SetMoveState(PlayerMoveState Value, bool update_speed, bool update_client_speed);// 0x84e9188 0x78cee0ff20
	void Server_SetMovementInputVector(Vector MovementInputVector);// 0x84e9784 0x78cee0caa0
	void Server_DoubleJump(Vector NewVelocity);// 0x84e8c5c 0x78cee0cb80
	void Server_ChangeQingGongState(enum State);// 0x84e8d48 0x78cee0cc60
	void PoolDeactivate();// 0x84e8150 0x78cee0cd40
	void PoolActivate();// 0x84e816c 0x78cee0ce20
	void PlayerSwimInputEvent(float up_axis);// 0x84e942c 0x78cee0cf00
	void PlayerStepUp(Vector Velocity);// 0x84e8b58 0x78cee0cfe0
	void PlayerStepOn(Vector Velocity);// 0x84e8ab0 0x78cee0d0c0
	void PlayerMovementInputEvent(float forward_axis, float right_axis, Rotator Rotate);// 0x84e94d4 0x78cee0d1a0
	void OnMovementUpdate(float DeltaTime, const Vector OldLocation, const Vector OldVelocity);// 0x84e8188 0x78cee0d280
	void OnMovementModeChange(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x84e82bc 0x78cee0d360
	Vector Movement_input_vector_net();// 0x84e8a88 0x78cee0d440
	void LandTimeEnd();// 0x84e96b4 0x78cee0d520
	void LandEvent();// 0x84e96c8 0x78cee0d600
	void ForceMovementChange();// 0x84e891c 0x78cee0d6e0
	void Clinet_ChangeOpenParachuteState(bool canopen);// 0x84e8ee8 0x78cee0d7c0
	void Clinet_ChangeJumpPlaneState(bool CanJump);// 0x84e8fa0 0x78cee0d8a0
	void Clinet_ChangeCloseParachuteState(bool canclose);// 0x84e8e30 0x78cee0d980
	void Client_UpdateSpeed(int change);// 0x84e9ca8 0x78cee0da60
	void Client_UpdateMovementSpeed_v2(float Speed);// 0x84e886c 0x78cee0db40
	void Client_ReconnectUpdate(bool is_plane_landed, bool is_plane_jumped, bool can_open_parachute);// 0x84e8938 0x78cee0dc20

--------------------------------
Class: PlayerMoveState
	bool walk_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefe4500
	bool spring_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cefe4580
	bool block_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cefe4600
	bool swiming_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cefe4680
	bool aim_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cefe4700
	bool using_item_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78cefe4780

--------------------------------
Class: PlayerSkillsComponent.ActorComponent.Object
	enum hero_type;//[Offset: 0xb9, Size: 0x1] 0x78ced29020
	int dc_aim_player;//[Offset: 0xbc, Size: 0x4] 0x78ced5b100
	int hero_passive_layer_;//[Offset: 0xc0, Size: 0x4] 0x78ced5b180
	float hero_check_range;//[Offset: 0xc4, Size: 0x4] 0x78ced5b200
	int64 hero_trig_buff;//[Offset: 0xc8, Size: 0x8] 0x78ced5b280
	float hero_tick_interval;//[Offset: 0xd0, Size: 0x4] 0x78ced5b300
	float tick_count_;//[Offset: 0xd4, Size: 0x4] 0x78ced5b380
	int64 passive_active_skill_;//[Offset: 0xe8, Size: 0x8] 0x78ced5b400
	bool passive_skill_active_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78ced5b480
	int passive_index_;//[Offset: 0xf4, Size: 0x4] 0x78ced5b500
	uint64[] eagle_nearby_items;//[Offset: 0xf8, Size: 0x10] 0x78ced26780
	int DingX_kill_num_;//[Offset: 0x110, Size: 0x4] 0x78ced59500
	int64 general_skill_id_;//[Offset: 0x1d8, Size: 0x8] 0x78ced59580
	int64 EquipmentRangeSkillId;//[Offset: 0x1e0, Size: 0x8] 0x78ced59600
	int64 EquipmentThrowSkillId;//[Offset: 0x1e8, Size: 0x8] 0x78ced59680
	int64[] skills_;//[Offset: 0x1f0, Size: 0x10] 0x78ced26820
	<int64,int64> next_skill_equip_;//[Offset: 0x200, Size: 0x50] 0x78cf15ebc0
	float server_tick_;//[Offset: 0x3f8, Size: 0x4] 0x78ced59880
	float client_tick_;//[Offset: 0x3fc, Size: 0x4] 0x78ced59900
	float owner_tick_;//[Offset: 0x400, Size: 0x4] 0x78ced59980
	void UI_SwapSkill(enum sourceslottype, int SourceIndex, int sourceskillid, enum targetslottype, int targetslotindex, int targetskillid);// 0x846936c 0x78ced4eda0
	void UI_ShowSkillDetail(enum slottype, int slotindex, int skillid);// 0x8468fb4 0x78ced4ee80
	void UI_RemoveSkill(enum slottype, int slotindex);// 0x84690f0 0x78ced4ef60
	void UI_DropSkillToPanel(enum sourceslottype, int SourceIndex, int sourceskillid, enum targetslottype);// 0x84691e4 0x78ced4f040
	void Server_SwapSkill(enum sourceslottype, int SourceIndex, int sourceskillid, enum targetslottype, int targetslotindex, int targetskillid);// 0x8467e44 0x78ced4f120
	void Server_SetNextSkill(int64 baseskill, int64 nextskill);// 0x8468afc 0x78ced4f200
	void Server_RemoveSkill(enum slottype, int slotindex);// 0x8467d0c 0x78ced4f2e0
	void Server_ReconnectUpdate();// 0x8468f98 0x78ced4f3c0
	void Server_EquipSkill(enum slottype, int slotindex, int64 skillid);// 0x84684a0 0x78ced4f4a0
	void Server_ChangeEquipWeapon(enum sourceslottype, int64 weaponid);// 0x8469588 0x78ced4f580
	void PoolDeactivate();// 0x8467cd4 0x78ced4f660
	void PoolActivate();// 0x8467cf0 0x78ced4f740
	void PassiveSkill_Eagle(float CheckRange, int Level);// 0x84688b4 0x78ced4f820
	bool IsHasSkill(int64 skillid);// 0x8469774 0x78ced4f900
	bool IsHasDragonRockSkill();// 0x84689b0 0x78ced4f9e0
	void Client_SetSkills(const SetSkillInfo[] skillchangeinfo);// 0x84683b4 0x78ced4fac0
	void Client_SetNextSkill(int64 baseskill, int64 nextskill);// 0x8468c2c 0x78ced4fba0
	void Client_RemoveSkill(enum slottype, int slotindex);// 0x846827c 0x78ced4fc80
	void Client_ReconnectUpdate(const int64[] skills, const int64[] equipskills, int64 GeneralSkillId, int64 NewRangeSkillId, int64 NewThrowSkillId, int64 lastgeneralskillendtime);// 0x8468d5c 0x78ced4fd60
	void Client_EquipSkill(enum slottype, int slotindex, int64 skillid);// 0x84685e8 0x78ced4fe40
	void Client_EagleEffectPlayers(const uint64[] effect_players, const uint64[] safe_players);// 0x84689e8 0x78ced4ff20
	void Client_ClearAllSkill();// 0x8468858 0x78ced4caa0
	void Client_ChangeEquipWeapon(enum sourceslottype, int64 weaponid, int currentweapontype1, int currentweapontype2);// 0x84680ac 0x78ced4cb80
	void Client_AddSkill(int64 skillid);// 0x8468770 0x78ced4cc60
	bool CanUseSkillBook(int ItemId);// 0x84696c0 0x78ced4cd40

--------------------------------
Class: SetSkillInfo
	enum slottype_;//[Offset: 0x0, Size: 0x1] 0x78cefd2ea0
	int slotindex_;//[Offset: 0x4, Size: 0x4] 0x78cefe3480
	int skillid_;//[Offset: 0x8, Size: 0x4] 0x78cefe3500
	bool isvalid_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cefe3580

--------------------------------
Class: PlayerAssassinationComponent.ActorComponent.Object
	float server_tick_;//[Offset: 0x10c, Size: 0x4] 0x78cece9200
	float client_tick_;//[Offset: 0x110, Size: 0x4] 0x78cece9280
	float owner_tick_;//[Offset: 0x114, Size: 0x4] 0x78cece9300
	void Server_AssassinationTarget();// 0x83fd7b0 0x78cecf4920
	void PoolDeactivate();// 0x83fd778 0x78cecf4a00
	void PoolActivate();// 0x83fd794 0x78cecf4ae0
	bool GetIsKillSuccess();// 0x83fd8fc 0x78cecf4bc0
	bool GetIsFallKill();// 0x83fd918 0x78cecf4ca0
	int GetFullActionTime();// 0x83fd8e0 0x78cecf4d80
	int GetCurrentActionTime();// 0x83fd8c4 0x78cecf4e60
	void Client_ChangeStealthState(bool isstealth);// 0x83fd80c 0x78cecf4f40

--------------------------------
Class: PlayerKeepActionComponent.ActorComponent.Object
	float server_tick_;//[Offset: 0xdc, Size: 0x4] 0x78ced53580
	float client_tick_;//[Offset: 0xe0, Size: 0x4] 0x78ced53600
	float owner_tick_;//[Offset: 0xe4, Size: 0x4] 0x78ced53680
	void Server_BreakAction(enum breaktype);// 0x845f89c 0x78ced499a0
	void PoolDeactivate();// 0x845f864 0x78ced49a80
	void PoolActivate();// 0x845f880 0x78ced49b60
	enum GetCurrentKeepActionState();// 0x845f984 0x78ced49c40
	void Client_BreakAction(enum breaktype, int actionindex);// 0x845f9a0 0x78ced49d20
	void BreakAction(enum breaktype);// 0x845fa9c 0x78ced49e00

--------------------------------
Class: PlayerViewComponent.ActorComponent.Object
	int PostRenderStencil;//[Offset: 0xbc, Size: 0x4] 0x78ced70480
	Rotator character_skill_rotator_;//[Offset: 0xc0, Size: 0xc] 0x78ced70500
	<int,SkeletalMeshComponentBudgeted*> weapon_show_component_new_;//[Offset: 0xd0, Size: 0x50] 0x78cf15e5c0
	SkeletalMeshComponentBudgeted*[] player_show_mesh_component_;//[Offset: 0x120, Size: 0x10] 0x78ced29ac0
	<int,NiagaraComponent*> PlayerShowWeaponEffectFXComponent;//[Offset: 0x130, Size: 0x50] 0x78cf15e680
	<int,NiagaraComponent*> PlayerShowEffectFxComponent;//[Offset: 0x180, Size: 0x50] 0x78cf15e740
	<int,NiagaraComponent*> FlyToolEffectComponent;//[Offset: 0x1d0, Size: 0x50] 0x78cf15e800
	enum wuxiaAnimType;//[Offset: 0x220, Size: 0x1] 0x78ced29b60
	enum sex_type_;//[Offset: 0x221, Size: 0x1] 0x78ced29c00
	enum sex_type_self_;//[Offset: 0x222, Size: 0x1] 0x78ced29ca0
	int face_id_;//[Offset: 0x224, Size: 0x4] 0x78ced70b80
	int face_id_self_;//[Offset: 0x228, Size: 0x4] 0x78ced70c00
	int hair_id_;//[Offset: 0x22c, Size: 0x4] 0x78ced70c80
	int hair_id_self_;//[Offset: 0x230, Size: 0x4] 0x78ced70d00
	int skin_color_id_;//[Offset: 0x234, Size: 0x4] 0x78ced70d80
	int skin_color_id_self_;//[Offset: 0x238, Size: 0x4] 0x78ced70e00
	int hair_color_id_;//[Offset: 0x23c, Size: 0x4] 0x78ced70e80
	int hair_color_id_self_;//[Offset: 0x240, Size: 0x4] 0x78ced70f00
	int flytool_skin_id_;//[Offset: 0x244, Size: 0x4] 0x78ced70f80
	int flytool_skin_id_self_;//[Offset: 0x248, Size: 0x4] 0x78ced71000
	int hero_id_;//[Offset: 0x24c, Size: 0x4] 0x78ced71080
	int skin_color_;//[Offset: 0x250, Size: 0x4] 0x78ced5f800
	int jacket_id_;//[Offset: 0x254, Size: 0x4] 0x78ced5f880
	int[] equip_skin_array_rep_;//[Offset: 0x258, Size: 0x10] 0x78ced29d40
	int[] equip_skin_array_rep_self_;//[Offset: 0x268, Size: 0x10] 0x78ced29de0
	int[] effect_array_rep_;//[Offset: 0x278, Size: 0x10] 0x78ced29e80
	int[] effect_array_rep_self_;//[Offset: 0x288, Size: 0x10] 0x78ced29f20
	int[] old_effect_array_;//[Offset: 0x298, Size: 0x10] 0x78ced29fc0
	<int,PlayerEquipInfo> equip_info_array;//[Offset: 0x2a8, Size: 0x50] 0x78cf15e8c0
	int[] skin_color_list;//[Offset: 0x2f8, Size: 0x10] 0x78ced2a060
	int[] skin_color_list_self;//[Offset: 0x308, Size: 0x10] 0x78ced2a100
	int[] skin_color_equip_list;//[Offset: 0x318, Size: 0x10] 0x78ced2a1a0
	int[] skin_color_equip_list_self;//[Offset: 0x328, Size: 0x10] 0x78ced2a240
	<int64,StaticMeshComponent*> mesh_equip_mesh_arrays_;//[Offset: 0x348, Size: 0x50] 0x78cf15e980
	SkeletalMeshComponentBudgeted*[] weapon_show_component_empty_new_;//[Offset: 0x3c8, Size: 0x10] 0x78ced2a2e0
	int[] player_show_mesh_component_flag_;//[Offset: 0x3d8, Size: 0x10] 0x78ced2a380
	Object*[] player_show_mesh_load_obj_array_;//[Offset: 0x3e8, Size: 0x10] 0x78ced2a420
	ParticleSystemComponent*[] sword_effect_components_;//[Offset: 0x400, Size: 0x10] 0x78ced2a4c0
	NiagaraComponent*[] buff_effect_components_;//[Offset: 0x410, Size: 0x10] 0x78ced27c20
	LoadAnimAndMesh* LoadAnimAndMesh;//[Offset: 0x450, Size: 0x8] 0x78ced5ef80
	void UpdateWeaponEffect(SkeletalMeshComponent* Mesh, int index, FString EffectRes, FString EffectSocket);// 0x8472d40 0x78ced66c20
	void UpdatePlayerEffect();// 0x8472d2c 0x78ced66d00
	void UpdateFlyToolEffect(SkeletalMeshComponent* Mesh);// 0x8472c70 0x78ced66de0
	void SwitchSex();// 0x84731a8 0x78ced66ec0
	void ShowSwordEffect();// 0x8473138 0x78ced66fa0
	void SetWeaponMaterialInstance(SkeletalMeshComponent* Mesh, int SkinId, int index);// 0x8472b20 0x78ced67080
	void SetFlyToolMaterialInstance(SkeletalMeshComponent* Mesh);// 0x84736d4 0x78ced67160
	void Server_SwitchSex();// 0x847314c 0x78ced67240
	void Server_ClearEffect();// 0x8473124 0x78ced67320
	void ResetWeaponMaterilal(SkeletalMeshComponentBudgeted* Component);// 0x8472540 0x78ced63a40
	void RemoveBuffParticleComponent(NiagaraComponent* Component);// 0x8472f98 0x78ced63b20
	void PoolDeactivate();// 0x84724c0 0x78ced63c00
	void PoolActivate();// 0x84724dc 0x78ced63ce0
	void OnRepSkinColorListSelf();// 0x8472934 0x78ced63dc0
	void OnRepSkinColorList();// 0x8472948 0x78ced63ea0
	void OnRepSkinColorIdSelf();// 0x84729ac 0x78ced63f80
	void OnRepSkinColorId();// 0x84729c0 0x78ced64060
	void OnRepSkinColorEquipListSelf();// 0x847290c 0x78ced64140
	void OnRepSkinColorEquipList();// 0x8472920 0x78ced64220
	void OnRepSexTypeSelf();// 0x8472a24 0x78ced64300
	void OnRepSexType();// 0x8472a38 0x78ced643e0
	void OnRepHairIdSelf();// 0x84729d4 0x78ced644c0
	void OnRepHairId();// 0x84729e8 0x78ced645a0
	void OnRepHairColorIdSelf();// 0x8472984 0x78ced64680
	void OnRepHairColorId();// 0x8472998 0x78ced64760
	void OnRepFaceIdSelf();// 0x84729fc 0x78ced64840
	void OnRepFaceId();// 0x8472a10 0x78ced64920
	void OnRepEquipSkinIdSelf();// 0x847295c 0x78ced64a00
	void OnRepEquipSkinId();// 0x8472970 0x78ced64ae0
	void OnRepEffect();// 0x84728f8 0x78ced64bc0
	SkeletalMesh* MergeMeshes(out const SkeletalMeshMergeParams Params);// 0x8472a4c 0x78ced64ca0
	void LoadComplete();// 0x847252c 0x78ced64d80
	void HideSwordEffect();// 0x8472f84 0x78ced64e60
	SkeletalMeshComponentBudgeted* GetWeaponMeshCompoent(int index);// 0x8473438 0x78ced64f40
	NiagaraComponent* GetWeaponEffectFXComponent(int index);// 0x8473388 0x78ced65020
	SkeletalMeshComponentBudgeted* GetWeaponComponent(int Key);// 0x84734e8 0x78ced65100
	NiagaraComponent* GetUnUsedBuffParticleComponent();// 0x8473040 0x78ced651e0
	SkeletalMeshComponentBudgeted* GetTakeWeaponMeshComponent(FName SocketName);// 0x84732d8 0x78ced652c0
	NiagaraSystem* GetSkillSkinNiagara();// 0x84724f8 0x78ced653a0
	class Object GetFlyToolSkinAnimBlueprint();// 0x847377c 0x78ced65480
	SkeletalMesh* GetFlyToolSkin();// 0x84737b0 0x78ced65560
	SkeletalMeshComponentBudgeted* GetBodyMeshCompByType(enum Type);// 0x8473074 0x78ced65640
	StaticMeshComponent* GetBagMeshComp();// 0x84731bc 0x78ced61d60
	void ForceChangeHero(int hero_id);// 0x84737e4 0x78ced61e40
	void DisablePlayerEffect();// 0x8472d18 0x78ced61f20
	void DisableFlyToolEffectComponent();// 0x8472c5c 0x78ced62000
	void ChangeHero();// 0x847388c 0x78ced620e0
	void ChangeEquipColor(enum Type, PlayerEquipInfo equip_info);// 0x84725e8 0x78ced621c0
	void ChangeEquip(enum bag_type, int index, int item_id);// 0x8473598 0x78ced622a0
	void AddSkin(int skin_id);// 0x84731f0 0x78ced62380

--------------------------------
Class: SkeletalMeshMergeParams
	SkelMeshMergeSectionMapping_BP[] MeshSectionMappings;//[Offset: 0x0, Size: 0x10] 0x78cefd4de0
	SkelMeshMergeUVTransformMapping[] UVTransformsPerMesh;//[Offset: 0x10, Size: 0x10] 0x78cefd4fc0
	SkeletalMesh*[] MeshesToMerge;//[Offset: 0x20, Size: 0x10] 0x78cefd5060
	int StripTopLODS;//[Offset: 0x30, Size: 0x4] 0x78cefe6f00
	bool bNeedsCpuAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78cefe6f80
	bool bSkeletonBefore;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1] 0x78cefe7000
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x78cefe7080

--------------------------------
Class: SkelMeshMergeSectionMapping_BP
	int[] SectionIDs;//[Offset: 0x0, Size: 0x10] 0x78cefd4d40

--------------------------------
Class: SkelMeshMergeUVTransformMapping
	SkelMeshMergeUVTransform[] UVTransformsPerMesh;//[Offset: 0x0, Size: 0x10] 0x78cefd4f20

--------------------------------
Class: SkelMeshMergeUVTransform
	Transform[] UVTransforms;//[Offset: 0x0, Size: 0x10] 0x78cefd4e80

--------------------------------
Class: NpcPlayerPoint.Actor.Object
	int trigger_index_;//[Offset: 0x220, Size: 0x4] 0x78cecb4c00
	int[] npc_ids_;//[Offset: 0x228, Size: 0x10] 0x78cebcdbc0
	int[] middle_npc_ids_;//[Offset: 0x238, Size: 0x10] 0x78cebcdc60
	int[] high_npc_ids_;//[Offset: 0x248, Size: 0x10] 0x78cebcdd00
	float NpcSpawnCdTime;//[Offset: 0x258, Size: 0x4] 0x78cecb4e00
	SphereComponent* CollisionComponent;//[Offset: 0x260, Size: 0x8] 0x78cecb4e80
	void OnOverlapEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x83d76cc 0x78ceca7860
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x83d785c 0x78ceca7940

--------------------------------
Class: OBAssistComponent.ActorComponent.Object

--------------------------------
Class: OBBlueprintHelper.BlueprintFunctionLibrary.Object
	static bool IsItemSkin(Object* WorldContext, int64 ItemId);// 0x83daee4 0x78ceca9d20
	static bool IsHero(Object* WorldContext, int64 ItemId);// 0x83dadf0 0x78ceca9e00
	static bool IsHaveSkin(Object* WorldContext, int64 ItemId);// 0x83db1bc 0x78ceca9ee0
	static bool IsHaveHero(Object* WorldContext, int64 ItemId);// 0x83db0c8 0x78ceca9fc0
	static bool IsBuffShowInBufflist(Object* WorldContext, int buffID);// 0x83db3a4 0x78cecaa0a0
	static PaperSprite* GetWeaponStateIconTextureSquare(Object* WorldContext, int ID);// 0x83dbe70 0x78cecaa180
	static PaperSprite* GetWeaponStateIconTexture(Object* WorldContext, int ID);// 0x83dbf64 0x78cecaa260
	static int GetWeaponSkillIndex(Object* WorldContext, int skillid);// 0x83db950 0x78cecaa340
	static FString GetSkillName(Object* WorldContext, int skillid);// 0x83db71c 0x78cecaa420
	static PaperSprite* GetSkillIconTexture(Object* WorldContext, int ID);// 0x83dbc88 0x78cecaa500
	static OBClientUIHelper* GetOBClientUIHelper(Object* WorldContext);// 0x83dba44 0x78cecaa5e0
	static OBClientInfo* GetOBClientInfo(Object* WorldContext);// 0x83dbaec 0x78cecaa6c0
	static enum GetItemType(int MoneyType);// 0x83dad48 0x78cecaa7a0
	static int GetItemQuality(Object* WorldContext, int ItemId);// 0x83db85c 0x78cecaa880
	static FString GetItemName(Object* WorldContext, int itmeID);// 0x83db5dc 0x78cecaa960
	static PaperSprite* GetItemIconTexture(Object* WorldContext, int ID);// 0x83dc058 0x78cecaaa40
	static FString GetItemIcon(Object* WorldContext, int ID);// 0x83dc14c 0x78cecaab20
	static FString GetItemDesc(Object* WorldContext, int itmeID);// 0x83db49c 0x78cecaac00
	static int GetHeroIdBySkinId(Object* WorldContext, int64 ItemId);// 0x83dafd8 0x78cecaace0
	static PaperSprite* GetEquipStateIconTexture(Object* WorldContext, int ID);// 0x83dbd7c 0x78ceca7400
	static PaperSprite* GetBuffIconSprite(Object* WorldContext, int buffID);// 0x83dbb94 0x78ceca74e0
	static int GetArmorMaxEndurance(Object* WorldContext, int ItemId);// 0x83db2b0 0x78ceca75c0

--------------------------------
Class: PlayerInteractiveComponent.ActorComponent.Object
	enum keep_interactive_type_;//[Offset: 0xb9, Size: 0x1] 0x78ced24ac0
	float keep_interactive_time_;//[Offset: 0xc0, Size: 0x4] 0x78ced3f080
	float keep_interactive_full_time_;//[Offset: 0xc4, Size: 0x4] 0x78ced3f100
	void Server_InteractiveToActor(int ID, enum Trigger);// 0x8456b7c 0x78ced466e0
	void PoolDeactivate();// 0x8456b30 0x78ced467c0
	void PoolActivate();// 0x8456b4c 0x78ced468a0
	void OnRepInteractiveType();// 0x8456b68 0x78ced46980
	void Mult_StopInteractive(int InteractiveActorId, int PlayerID);// 0x8456dac 0x78ced46a60
	void Mult_Interactive(int InteractiveActorId, int PlayerID);// 0x8456cb4 0x78ced46b40
	void Mult_BeginInteractive(int InteractiveActorId, int PlayerID);// 0x8456ea4 0x78ced46c20
	void Interactive(WuXiaInteractiveActor* interactiveactor, enum Type);// 0x8456ff0 0x78ced46d00
	enum GetKeeyInteractiveType();// 0x8456fd4 0x78ced46de0
	float GetKeepingFullTime();// 0x8456f9c 0x78ced46ec0
	float GetKeepingCurrentTime();// 0x8456fb8 0x78ced46fa0

--------------------------------
Class: GameEvent.Object

--------------------------------
Class: OBServerInfo.Info.Actor.Object
	float Sec_PosNotifyDeltaTime;//[Offset: 0x220, Size: 0x4] 0x78cece2780
	float Sec_PosNotifyTargetDeltaTime;//[Offset: 0x224, Size: 0x4] 0x78cece2800
	OBPlayerBasicInfo[] allPlayerBaseInfo;//[Offset: 0x2f8, Size: 0x10] 0x78cebceb60
	int[] _clientsToInit;//[Offset: 0x308, Size: 0x10] 0x78cebcec00
	int[] _clientsInited;//[Offset: 0x318, Size: 0x10] 0x78cebceca0
	int[] _charDynamicToInit;//[Offset: 0x328, Size: 0x10] 0x78cebced40
	int[] _charInited;//[Offset: 0x338, Size: 0x10] 0x78cebcede0
	<int,int> playerKillInfo;//[Offset: 0x350, Size: 0x50] 0x78cf15ca00
	<int,int> playerHurtInfo;//[Offset: 0x3a0, Size: 0x50] 0x78cf15cac0
	OBClientInfo*[] cached_obclients_;//[Offset: 0x3f0, Size: 0x10] 0x78cebcee80
	WuXiaXHorse*[] _horseToInit;//[Offset: 0x400, Size: 0x10] 0x78cebcef20
	WuXiaXHorse*[] _horseInited;//[Offset: 0x410, Size: 0x10] 0x78cebcefc0
	OBPlayerInfo[] _gameOveredChars;//[Offset: 0x420, Size: 0x10] 0x78cebcf060
	<FString,OBTeamInfo> _allTeamInfos;//[Offset: 0x430, Size: 0x50] 0x78cf15cb80
	OBFightState[] _curFightStates;//[Offset: 0x480, Size: 0x10] 0x78cebcf100
	OBParadropPosInfo[] _savedParadropPosInfos;//[Offset: 0x490, Size: 0x10] 0x78cebcf1a0
	OBParadropItemInfo[] _savedParadropItemInfos;//[Offset: 0x4a0, Size: 0x10] 0x78cebcf240
	OBMijingmenInfo[] _savedMijingmenInfos;//[Offset: 0x4b0, Size: 0x10] 0x78cebcf2e0
	OBTreasureBoxInfo[] _savedTreasureBoxInfos;//[Offset: 0x4c0, Size: 0x10] 0x78cebcf380
	OBXinfaInfo[] _savedXinfaInfos;//[Offset: 0x4d0, Size: 0x10] 0x78cebcf420
	<int,int> _playerFinalRank;//[Offset: 0x4e0, Size: 0x50] 0x78cf15cc40
	<int,int> _paradropItemID2ParadropID;//[Offset: 0x530, Size: 0x50] 0x78cf15cd00
	OBPlayerKillInfo[] savedPlayerKillInfos;//[Offset: 0x5b8, Size: 0x10] 0x78cebcf4c0
	OBKillInfo[] savedKillInfos;//[Offset: 0x5c8, Size: 0x10] 0x78cebcf560
	OBClientInfo* replayClientHelper;//[Offset: 0x640, Size: 0x8] 0x78cece1500

--------------------------------
Class: OBPlayerBasicInfo
	int user_id_;//[Offset: 0x0, Size: 0x4] 0x78cefc4400
	int team_id_;//[Offset: 0x4, Size: 0x4] 0x78cefc4480
	FString user_name_;//[Offset: 0x8, Size: 0x10] 0x78cefc4500

--------------------------------
Class: OpeningUI.UserWidget.Widget.Visual.Object
	void SetDonshowIntroduce();// 0x83f2f0c 0x78cecf0f60
	bool GetIsShowIntroduce();// 0x83f2ed4 0x78cecf1040

--------------------------------
Class: PayWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void CreatCont(RechargeInfo Info);// 0x8a873f8 0x78cecf0940

--------------------------------
Class: PersonalDataUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	HistoryRecord[] HistoryRecord;//[Offset: 0x330, Size: 0x10] 0x78cebcfba0
	int LastHallType;//[Offset: 0x340, Size: 0x4] 0x78cece5500
	void UpdateUsingHead(int ID);// 0x8a873f8 0x78cecf21c0
	void UpdateUsingBorder(int ID);// 0x8a873f8 0x78cecf22a0
	void UpdateSelfExp(int lv, int Exp);// 0x83f4310 0x78cecf2380
	void UpdateSeasonInfo(int GameNum, int KillNum, int WinNum, int RankScore);// 0x8a873f8 0x78cecf2460
	void UpdateRewardUI(int ID);// 0x8a873f8 0x78cecf2540
	void UpdatePraiseTime(int praisetime);// 0x8a873f8 0x78cecf2620
	void UpdateOwnedHeads(out const int[] IDs);// 0x8a873f8 0x78cecf2700
	void UpdateOwnedBorders(out const int[] IDs);// 0x8a873f8 0x78cecf27e0
	void UpdateHistoryRecord(int64 ID);// 0x8a873f8 0x78cecf28c0
	void UpdateExpProBar(int curexp, int lvExp);// 0x8a873f8 0x78cecf29a0
	void UpdateCharModel();// 0x8a873f8 0x78cecf2a80
	void UpdateAChievementAllItem(out const <int,AChievementInfo> player_achievement_map);// 0x8a873f8 0x78cecf2b60
	void UpdateAccomplishmentLevelItem(int Level, int experience);// 0x8a873f8 0x78cecf2c40
	DetailHistoryRecord[] SortDetailHistoryRecord(out DetailHistoryRecord[] records);// 0x83f40f8 0x78cecf2d20
	void SetRegionStr(FString str, int RegionCode);// 0x8a873f8 0x78cecf2e00
	void SetRankInfo(int HistroyScore, int ArenaScore);// 0x8a873f8 0x78cecf2ee0
	void SetPersonalRank(PersonalGameData Info);// 0x8a873f8 0x78cecf2fc0
	void SetPersonalLabels(out const FText[] Labels);// 0x8a873f8 0x78cecf30a0
	void SetLastHallType(int idx);// 0x83f4434 0x78cecf3180
	void SetHistoryRecord(out const HistoryRecord[] arr, int ID);// 0x8a873f8 0x78cecf3260
	void SetDetailHistoryRecord(out const DetailHistoryRecord[] arr, int Rank, enum teammode, enum Mode);// 0x8a873f8 0x78cecf3340
	void SetCUseHero(out const CUseHeroInfo[] arr, int ID);// 0x8a873f8 0x78cecf3420
	void SetBaseSeasonInfo(int rank_score, int rank_id);// 0x8a873f8 0x78cecf3500
	void SetBaseInfo(int UserId, FString Name, int borderId, int headId, int segid, enum sex, int lv, int Exp, int praisetime, bool isPraised);// 0x8a873f8 0x78cecf35e0
	void SetBaseHeroInfo(int login_days, int game_num, int hero_num, int skin_num, out const int[] hero_ids);// 0x8a873f8 0x78cecf36c0
	void SetBaseCombatTeamInfo(int icon_id, FString Name, bool leader);// 0x8a873f8 0x78cecf37a0
	void RemoveCurrentAchievementHightLevel(out <int,AChievementInfo> AChievementInfo);// 0x83f4be4 0x78cecf3880
	void RefreshHistoryRecord();// 0x8a873f8 0x78cecf3960
	void OpenYaPai(YaPaiInfo Info);// 0x8a873f8 0x78cecf0080
	void OpenPersonal();// 0x8a873f8 0x78cecf0160
	void InitAllAChievementItem(out const <int,AChievementInfo> server_map);// 0x8a873f8 0x78cecf0240
	int GetLastHallType();// 0x83f4400 0x78cecf0320
	int GetCurrentFatherIdMax(int ID, const <int,DateTime> server);// 0x83f44dc 0x78cecf0400
	<int,AChievementInfo> GetAllServerAchievementMap();// 0x83f4ab0 0x78cecf04e0
	void GetAllReward(out const int[] ID);// 0x8a873f8 0x78cecf05c0
	void GetAccomplishmentById(int ID, out enum Type);// 0x83f49b0 0x78cecf06a0
	void ExChangteCurrentPlayerAccomplishmentLevelMax(int Value, out <int,AChievementInfo> ID, out const <int,DateTime> server);// 0x83f4750 0x78cecf0780
	void ClearRankInfo();// 0x83f4d20 0x78cecf0860

--------------------------------
Class: AChievementInfo
	int achievement_id;//[Offset: 0x0, Size: 0x4] 0x78cefe6100
	DateTime Date;//[Offset: 0x8, Size: 0x8] 0x78cefe6180

--------------------------------
Class: CUseHeroInfo
	int hero_id;//[Offset: 0x0, Size: 0x4] 0x78cefcda00
	int win_num;//[Offset: 0x4, Size: 0x4] 0x78cefcda80
	int total_num;//[Offset: 0x8, Size: 0x4] 0x78cefcdb00
	int mastery_id;//[Offset: 0xc, Size: 0x4] 0x78cefcdb80

--------------------------------
Class: PickSpawnPoint.Actor.Object
	int pick_list_id_;//[Offset: 0x220, Size: 0x4] 0x78cece7680
	<int,SpawnItemData> spawn_items_;//[Offset: 0x228, Size: 0x50] 0x78cf15f340

--------------------------------
Class: PickTextUI.UserWidget.Widget.Visual.Object
	void WUXUEUseState(bool State);// 0x8a873f8 0x78cecf5020
	void SetItemName(FString Name);// 0x8a873f8 0x78cecf5100

--------------------------------
Class: PingTaiInterface.Object

--------------------------------
Class: PlayerAccomplishmentComponent.ActorComponent.Object

--------------------------------
Class: PlayerEnumFunctionLibrary.BlueprintFunctionLibrary.Object
	static FString TeamIdToSquadId(int TeamId);// 0x842a02c 0x78cecff4a0
	static int SquadIdToTeamId(FString SquadId);// 0x842a120 0x78cecff580
	static bool IsContainsSpecialStr(FString originstr);// 0x842ab54 0x78cecff660
	static enum GetWeaponEquipTypeBySkinId(WuXiaXGameInstance* game_instance, int skin_id);// 0x842c850 0x78cecff740
	static enum GetWeaponEquipTypeById(WuXiaXGameInstance* game_instance, int item_id);// 0x842c944 0x78cecff820
	static FString GetValidPassword(FString old_pwd);// 0x842aa60 0x78cecff900
	static FString[] GetStrArrayByPath(FString Path);// 0x842aee8 0x78cecff9e0
	static FString GetStateString(enum Value);// 0x842ce08 0x78cecffac0
	static int GetSkinType(int skin_id, WuXiaXGameInstance* game_instance);// 0x842adf4 0x78cecffba0
	static PaperSprite* GetSkinIcon(int skin_id, WuXiaXGameInstance* game_instance);// 0x842ad00 0x78cecffc80
	static void GetSkinDetailById(WuXiaXGameInstance* game_instance, int skin_id, out FString Name, out FString detail);// 0x842c138 0x78cecffd60
	static FString GetSkillNameById(WuXiaXGameInstance* game_instance, int skill_id);// 0x842c2e4 0x78cecffe40
	static UISkillInfo GetSkillDetailInfo(WuXiaXGameInstance* game_instance, int skillid);// 0x842a8f0 0x78cecfff20
	static void GetShopItemPriceById(WuXiaXGameInstance* game_instance, int shop_id, out enum mType, out int origin_price, out float discount);// 0x842b408 0x78cecfcaa0
	static UISkillInfo GetPassiveSkillDetailInfo(WuXiaXGameInstance* game_instance, int skillid);// 0x842a608 0x78cecfcb80
	static SkeletalMesh* GetModelById(int ID, WuXiaXGameInstance* game_instance);// 0x842b044 0x78cecfcc60
	static FText GetKeyTextByKey(Key Key);// 0x842a1d4 0x78cecfcd40
	static enum GetItemTypeById(WuXiaXGameInstance* game_instance, int item_id);// 0x842cd14 0x78cecfce20
	static int GetItemSortPriorityById(WuXiaXGameInstance* game_instance, int item_id);// 0x842b5ec 0x78cecfcf00
	static Object* GetItemMeshById(WuXiaXGameInstance* game_instance, int item_id, enum sex_type);// 0x842c710 0x78cecfcfe0
	static void GetItemInfoById(WuXiaXGameInstance* game_instance, int item_id, out FString Name, out FString detail, out enum sextype, out int Level);// 0x842b7d4 0x78cecfd0c0
	static FString GetItemIconPathById(WuXiaXGameInstance* game_instance, int item_id);// 0x842ba28 0x78cecfd1a0
	static PaperSprite* GetItemIconById(WuXiaXGameInstance* game_instance, int item_id);// 0x842bb68 0x78cecfd280
	static enum GetItemEquipTypeBySkinId(WuXiaXGameInstance* game_instance, int skin_id);// 0x842ca38 0x78cecfd360
	static enum GetItemEquipTypeById(WuXiaXGameInstance* game_instance, int item_id);// 0x842cb2c 0x78cecfd440
	static void GetItemDetailById(WuXiaXGameInstance* game_instance, int item_id, out FString Name, out FString detail);// 0x842c424 0x78cecfd520
	static enum GetItemChildTypeById(WuXiaXGameInstance* game_instance, int item_id);// 0x842b6e0 0x78cecfd600
	static HeroData GetHeroData(WuXiaXGameInstance* game_instance, int hero_id);// 0x842a500 0x78cecfd6e0
	static PaperSprite* GetHallItemIconById(WuXiaXGameInstance* game_instance, int item_id);// 0x842be48 0x78cecfd7c0
	static int GetHallItemHorseId(WuXiaXGameInstance* game_instance, int item_id);// 0x842bd54 0x78cecfd8a0
	static void GetHallItemDetailById(WuXiaXGameInstance* game_instance, int item_id, out FString Name, out FString detail, out int Level);// 0x842bf3c 0x78cecfd980
	static SkeletalMesh* GetHairMeshByHatId(WuXiaXGameInstance* game_instance, int item_id, enum sex_type);// 0x842c5d0 0x78cecfda60
	static LinearColor GetColorById(int ID, WuXiaXGameInstance* game_instance);// 0x842b138 0x78cecfdb40
	static FString GetChineseString(FString originstr);// 0x842ac0c 0x78cecfdc20
	static FString GetBuffNameById(WuXiaXGameInstance* game_instance, int ID);// 0x842b2c8 0x78cecfdd00
	static enum GetBagTypeBySkinId(WuXiaXGameInstance* game_instance, int skin_id);// 0x842cc20 0x78cecfdde0
	static void CloseSession(PlayerController* player_ctrl);// 0x842b230 0x78cecfdec0
	static bool CheckItemCanBuyMul(WuXiaXGameInstance* game_instance, int item_id);// 0x842bc5c 0x78cecfdfa0
	static float CalRotation(float current_r, float target_r, float Speed);// 0x842a3c4 0x78cecfe080

--------------------------------
Class: PlayerFightEffectLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: PlayerHUDComponent.ActorComponent.Object

--------------------------------
Class: PlayerInputComponent.ActorComponent.Object
	void TouchStopped(TouchEvent TouchEvent);// 0x8455aac 0x78ced47080
	void TouchStarted(TouchEvent TouchEvent);// 0x8455f3c 0x78ced47160
	void TouchMoved(TouchEvent TouchEvent);// 0x8455cf4 0x78ced47240
	void PoolDeactivate();// 0x8455a74 0x78ced47320
	void PoolActivate();// 0x8455a90 0x78ced43a40
	void CameraAxisY(float Value, bool freeview);// 0x8456184 0x78ced43b20
	void CameraAxisX(float Value, bool freeview);// 0x8456280 0x78ced43c00

--------------------------------
Class: TouchEvent
	enum State;//[Offset: 0x0, Size: 0x1] 0x78cefd47a0
	PointerEvent PointerEvent;//[Offset: 0x8, Size: 0x70] 0x78cefe7b80

--------------------------------
Class: PlayerMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SphereComponent* sphere_component_;//[Offset: 0xb10, Size: 0x8] 0x78ced54e00
	float authorized_speed_scaling_;//[Offset: 0xb18, Size: 0x4] 0x78ced54e80
	void PoolDeactivate();// 0x8461630 0x78ced4c9c0
	void PoolActivate();// 0x846164c 0x78ced490e0

--------------------------------
Class: PlayerSignComponent.ActorComponent.Object

--------------------------------
Class: PlayerSquadComponent.ActorComponent.Object
	FString squad_id_;//[Offset: 0xe0, Size: 0x10] 0x78ced5cb80
	<int,SquadMemberData> squad_datas_;//[Offset: 0x118, Size: 0x50] 0x78cf15ea40
	int[] squad_waistTokenParticles_;//[Offset: 0x190, Size: 0x10] 0x78ced28c60
	<int,ItemParticlesEffect*> waistTokenParticlesActors_;//[Offset: 0x1b0, Size: 0x50] 0x78cf15eb00
	ParticleSystem* particle_;//[Offset: 0x200, Size: 0x8] 0x78ced5ce80
	void UpdateAllDataToUI();// 0x846d2e4 0x78ced637a0
	void SpawnWaistToken(int world_id, Vector location_);// 0x846aef0 0x78ced63880
	void SetMarkPointFlag(int PlayerID, bool flag);// 0x846b9ac 0x78ced63960
	void SetMarkPoint(enum Type, Vector Location);// 0x846baa4 0x78ced60080
	void SetMark(Vector Location, bool HasMark);// 0x846be1c 0x78ced60160
	void Server_UpdateSquadID();// 0x846b470 0x78ced60240
	void Server_UpdateDataByPlayerID(int PlayerID);// 0x846bf18 0x78ced60320
	void Server_UpdateAllData();// 0x846c244 0x78ced60400
	void Server_SetSquadUpdateType(int PlayerID, bool isserverupdate);// 0x846bb94 0x78ced604e0
	void Server_SetMarkPointFlag(int PlayerID, bool flag);// 0x846b734 0x78ced605c0
	void Server_SetMarkPoint(enum Type, Vector Location);// 0x846b874 0x78ced606a0
	void Server_SetMark(Vector Location, bool HasMark);// 0x846bcd4 0x78ced60780
	void Server_SendQuickMessage(int PlayerID, FString Message);// 0x846c108 0x78ced60860
	void Server_SaveSquad(int PlayerID);// 0x846b388 0x78ced60940
	void Server_KillTarget(int PlayerID);// 0x846b2a0 0x78ced60a20
	void Server_ChangeVisionPlayerID(int PlayerID);// 0x846b1b8 0x78ced60b00
	void Server_ChangeFollowPlayerID(int PlayerID);// 0x846b0d0 0x78ced60be0
	void PoolDeactivate();// 0x846aeb8 0x78ced60cc0
	void PoolActivate();// 0x846aed4 0x78ced60da0
	void LoadWaistTokenComplete(int world_id, Vector location_);// 0x846afe0 0x78ced60e80
	int GetCurrentVisionPlayerID();// 0x846b500 0x78ced60f60
	int GetCurrentFollowPlayerID();// 0x846b4cc 0x78ced61040
	void Client_UpdateWTParticle(int PlayerID, int world_id, bool isHide, Vector location_);// 0x846d14c 0x78ced61120
	void Client_UpdateMemberWaistTokenState(int PlayerID, enum State);// 0x846cab0 0x78ced61200
	void Client_UpdateMemberTransfrom(int PlayerID, Vector Location, float Yaw);// 0x846c870 0x78ced612e0
	void Client_UpdateMemberState(int PlayerID, enum PlayerState);// 0x846c398 0x78ced613c0
	void Client_UpdateMemberSp(int PlayerID, int sp);// 0x846cda0 0x78ced614a0
	void Client_UpdateMemberSaveValue(int PlayerID, float savevalue);// 0x846c9b4 0x78ced61580
	void Client_UpdateMemberMaxSP(int PlayerID, int maxSP);// 0x846cca8 0x78ced61660
	void Client_UpdateMemberMaxHP(int PlayerID, int maxHP);// 0x846ce98 0x78ced61740
	void Client_UpdateMemberMarkPointFlagData(int PlayerID, int markplayerid, bool flag);// 0x846c494 0x78ced61820
	void Client_UpdateMemberMarkPointData(int PlayerID, enum Type, Vector Location);// 0x846c5e0 0x78ced61900
	void Client_UpdateMemberMarkData(int PlayerID, Vector mark3dlocation, bool ismark);// 0x846c724 0x78ced619e0
	void Client_UpdateMemberHp(int PlayerID, int HP);// 0x846cf90 0x78ced61ac0
	void Client_UpdateMemberFollowId(int PlayerID, int followid);// 0x846c2a0 0x78ced61ba0
	void Client_UpdateMemberDyingHP(int PlayerID, float dyingHp);// 0x846cbac 0x78ced61c80
	void Client_UpdateMemberData(const SquadMemberData Data);// 0x846d088 0x78ced4e780
	void Client_RemoveSquadData(int ID);// 0x846d2f8 0x78ced4e860
	void Client_InitSquad(FString SquadId);// 0x846d3a8 0x78ced4e940
	void Client_BroadQuickMessage(int PlayerID, FString Message);// 0x846c000 0x78ced4ea20
	void ChangeVisionPlayerID(int PlayerID);// 0x846b5dc 0x78ced4eb00
	void ChangeVision(bool isnext);// 0x846b684 0x78ced4ebe0
	void ChangeFollowPlayerId(int PlayerID);// 0x846b534 0x78ced4ecc0

--------------------------------
Class: SquadMemberData
	int PlayerNetID;//[Offset: 0x0, Size: 0x4] 0x78cefe2200
	FString PlayerName;//[Offset: 0x8, Size: 0x10] 0x78cefe2280
	int playerHp;//[Offset: 0x18, Size: 0x4] 0x78cefe2300
	int playerMaxHp;//[Offset: 0x1c, Size: 0x4] 0x78cefe2380
	int PlayerSP;//[Offset: 0x20, Size: 0x4] 0x78cefe2400
	int PlayerMaxSP;//[Offset: 0x24, Size: 0x4] 0x78cefe2480
	float playerDyingHp;//[Offset: 0x28, Size: 0x4] 0x78cefe2500
	float PlayerSaveValue;//[Offset: 0x2c, Size: 0x4] 0x78cefe2580
	enum PlayerState;//[Offset: 0x30, Size: 0x1] 0x78cefd3080
	Vector PlayerMark3DLocation;//[Offset: 0x34, Size: 0xc] 0x78cefe2680
	bool HasMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78cefe2700
	float Yaw;//[Offset: 0x44, Size: 0x4] 0x78cefe2780
	Vector Location;//[Offset: 0x48, Size: 0xc] 0x78cefe2800
	enum waistTokenState;//[Offset: 0x54, Size: 0x1] 0x78cefd3120
	int JumpFollowId;//[Offset: 0x58, Size: 0x4] 0x78cefe2900
	enum MarkPointType;//[Offset: 0x5c, Size: 0x1] 0x78cefd31c0
	Vector MarkPointLocation;//[Offset: 0x60, Size: 0xc] 0x78cefe2a00

--------------------------------
Class: PlayerStateEffectLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: PoolInterface.Interface.Object

--------------------------------
Class: PoolObjectInterface.Interface.Object
	void PoolDeactivate();// 0x8475e24 0x78ced66a60
	void PoolActivate();// 0x8475e40 0x78ced66b40

--------------------------------
Class: PopFullWidget.Interface.Object

--------------------------------
Class: RangeGuideActor.Actor.Object
	Transform player_spawn_trans_;//[Offset: 0x220, Size: 0x30] 0x78ced75000
	int cure_buff_id_;//[Offset: 0x250, Size: 0x4] 0x78ced75080
	int range_weapon_id_;//[Offset: 0x254, Size: 0x4] 0x78ced75100
	int ammo_id_;//[Offset: 0x258, Size: 0x4] 0x78ced75180
	int throw_id_;//[Offset: 0x25c, Size: 0x4] 0x78ced75200
	int npc0_id_;//[Offset: 0x260, Size: 0x4] 0x78ced75280
	int npc1_id_;//[Offset: 0x264, Size: 0x4] 0x78ced73200
	int npc2_id_;//[Offset: 0x268, Size: 0x4] 0x78ced73280
	int npc3_id_;//[Offset: 0x26c, Size: 0x4] 0x78ced73300
	Transform npc_spawn_trans1_;//[Offset: 0x270, Size: 0x30] 0x78ced73380
	Transform npc_spawn_trans2_;//[Offset: 0x2a0, Size: 0x30] 0x78ced73400
	Transform npc_spawn_trans3_;//[Offset: 0x2d0, Size: 0x30] 0x78ced73480
	void Guide_InitRange();// 0x847bc4c 0x78ced68580
	void Guide_GiveThrow();// 0x847bb10 0x78ced68660
	NpcCharacter* Guide_CreateNpc(int npc_id, Transform npc_trans);// 0x847bb24 0x78ced68740

--------------------------------
Class: RankRewardUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void SetInfo(int RankPoint, int seasonId, out const int[] ReceivedRewardIdArray);// 0x8a873f8 0x78ced68200
	void AddReceive(int RewardId, RewardItem Reward);// 0x8a873f8 0x78ced682e0

--------------------------------
Class: RankUpPanelUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void ShowInfo();// 0x847da18 0x78ced67860
	void InitShowInfo(int oldLv, int curLv);// 0x8a873f8 0x78ced67940
	void CloseSelf();// 0x847da2c 0x78ced67a20

--------------------------------
Class: RayOcclude.ActorComponent.Object
	Actor* m_ReferenceOrigin;//[Offset: 0x140, Size: 0x8] 0x78ced75980
	Actor* m_ReferenceLT;//[Offset: 0x148, Size: 0x8] 0x78ced75a00
	Actor* m_ReferenceLB;//[Offset: 0x150, Size: 0x8] 0x78ced75a80
	Actor* m_ReferenceRT;//[Offset: 0x158, Size: 0x8] 0x78ced75b00
	int m_ScanXSpace;//[Offset: 0x160, Size: 0x4] 0x78ced75b80
	int m_ScanYSpace;//[Offset: 0x164, Size: 0x4] 0x78ced75c00
	class Object* m_ReferenceObject;//[Offset: 0x168, Size: 0x8] 0x78ced2cae0
	float m_RayCheckDistance;//[Offset: 0x170, Size: 0x4] 0x78ced75c80
	float m_IgnoreRadio;//[Offset: 0x174, Size: 0x4] 0x78ced75d00
	float m_IgnoreHight;//[Offset: 0x178, Size: 0x4] 0x78ced75d80
	int m_FixXSpace;//[Offset: 0x17c, Size: 0x4] 0x78ced75e00
	int m_FixYSpace;//[Offset: 0x180, Size: 0x4] 0x78ced75e80
	bool m_OnlyCheckList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1] 0x78ced75f00
	CameraComponent* m_Camera;//[Offset: 0x188, Size: 0x8] 0x78ced75f80
	void StopWork();// 0x847e438 0x78ced6a7a0
	void StartWork(byte check_channel, byte ignore_channel, byte DebugType);// 0x847e44c 0x78ced6a880
	void Resume();// 0x847e404 0x78ced6a960
	void RemoveNonDisappearList(out const Actor*[] list);// 0x847e00c 0x78ced6aa40
	void RemoveActorWhenWorking(out const Actor*[] list);// 0x847e18c 0x78ced6ab20
	void Pause();// 0x847e41c 0x78ced6ac00
	bool IsWork();// 0x847e3cc 0x78ced6ace0
	bool IsPause();// 0x847e3e8 0x78ced67400
	void CreateRayLineReference();// 0x847e58c 0x78ced674e0
	void AddNonDisappearList(out const Actor*[] list);// 0x847e0cc 0x78ced675c0
	void AddManagerActor(out const Actor*[] list);// 0x847e30c 0x78ced676a0
	void AddActorWhenWorking(out const Actor*[] list);// 0x847e24c 0x78ced67780

--------------------------------
Class: RechargeBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	ClientLoginHUD* ClientLoginHUD;//[Offset: 0x330, Size: 0x8] 0x78ced75780
	ClientNetMessageHandle* ClientNetMessageHandle;//[Offset: 0x338, Size: 0x8] 0x78ced75800
	ClientNetMessageHandle* GetClientNetMsgHandle();// 0x847ee28 0x78ced6a5e0
	ClientLoginHUD* GetClientLoginHUD();// 0x847ee5c 0x78ced6a6c0

--------------------------------
Class: RechargeWidget.RechargeBaseWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateRechargeState(int rechargeId, bool recharged);// 0x8a873f8 0x78ced6a340
	void UpdateGoldNum(int Num);// 0x8a873f8 0x78ced6a420
	void JumpToRechargeSDK();// 0x8a873f8 0x78ced6a500

--------------------------------
Class: RechargingItemWidget.UserWidget.Widget.Visual.Object
	bool CanRecharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78ced75500
	RechargeInfo RechargeInfo;//[Offset: 0x268, Size: 0x30] 0x78ced75580
	void Recharging();// 0x847f988 0x78ced6a260

--------------------------------
Class: RecommandShopWidgetPanel.UserWidget.Widget.Visual.Object
	Button* Button_Click;//[Offset: 0x260, Size: 0x8] 0x78ced75300
	void SetShopPackData(out const ShopRecommondItem ItemData);// 0x847fecc 0x78ced69d20
	void RefreshPurchaseStates(bool bIsPurchased);// 0x8a873f8 0x78ced69e00
	void PlayBeginAnimBP();// 0x8a873f8 0x78ced69ee0
	void PlayBeginAnim();// 0x847feb8 0x78ced69fc0
	void OnButtonClick();// 0x847fea4 0x78ced6a0a0
	ShopRecommondItem GetShopPackData();// 0x847ffe4 0x78ced6a180

--------------------------------
Class: RelationshipUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	bool TeacherAndStudentApplyTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78ced78380
	bool TeacherTaskTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1] 0x78ced78400
	bool StudentTaskTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1] 0x78ced76380
	bool TeacherPrivilege;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 0x1] 0x78ced76400
	int LengthToLimitNotNumberOnly;//[Offset: 0x334, Size: 0x4] 0x78ced76480
	int LengthToLimitNumberOnly;//[Offset: 0x338, Size: 0x4] 0x78ced76500
	FText TempText;//[Offset: 0x340, Size: 0x18] 0x78ced76580
	void WriteLocationPermission(bool allow);// 0x8480e40 0x78ced6c720
	void UpdateTeacherAndStudentTask(out const ActivityDataInfo ActivityDataInfo);// 0x8a873f8 0x78ced6c800
	void UpdateRecentDataList(out const RecentTeamerInfo[] infoArr);// 0x8a873f8 0x78ced6c8e0
	void UpdateFriendDataList(out const enum friendDataType, out const FriendBaseInfo[] infoArr);// 0x8a873f8 0x78ced6c9c0
	void ShowTip(FString tip);// 0x8a873f8 0x78ced690e0
	void ShowNewApplyTip(enum friend_data_type, bool hasNew);// 0x8a873f8 0x78ced691c0
	void ShowListSort(out const enum friendDataType, out FriendBaseInfo[] sortList);// 0x8480b2c 0x78ced692a0
	void SetAllowTeacherStudentApplyApply(bool TeacherAllow, bool StudentAllow);// 0x8a873f8 0x78ced69380
	void SetAllowFriendApply(bool allow);// 0x8a873f8 0x78ced69460
	void SearchNewFriendResult(out const YaPaiInfo[] infoArr);// 0x8a873f8 0x78ced69540
	void SaveTeacherAndStudentTip(bool NewTeacherAndStudentApplyTip, bool NewTeacherTaskTip, bool NewStudentTaskTip, bool NewTeacherPrivilege);// 0x8480c78 0x78ced69620
	void OpenIntimacyWidget(FriendBaseInfo FriendBaseInfo);// 0x8a873f8 0x78ced69700
	void OpenFriend();// 0x8a873f8 0x78ced697e0
	void OpenAddFriendWidget(int player_id, FString user_name);// 0x8a873f8 0x78ced698c0
	bool IsTextOverLength(out const FText InText);// 0x8480a10 0x78ced699a0
	bool IsTextNumberOnly(out const FText InText);// 0x84808f4 0x78ced69a80
	bool GetLocationPermission();// 0x8480e08 0x78ced69b60
	void CloseSelf();// 0x8a873f8 0x78ced69c40

--------------------------------
Class: DataRecorder.Object

--------------------------------
Class: ReplayListUI.UserWidget.Widget.Visual.Object
	void SetSaveVideoValue(int Value);// 0x8482fb8 0x78ced6bf40
	bool GetSaveVideoValue();// 0x8482f80 0x78ced6c020

--------------------------------
Class: RetainWidgetConfig.DataAsset.Object
	class RetainBaseWidget* ActiviyWidgetClass;//[Offset: 0x30, Size: 0x28] 0x78ced2c040
	class RetainBaseWidget* PlayerLvWidgetClass;//[Offset: 0x58, Size: 0x28] 0x78ced2c0e0
	class RetainBaseWidget* CheckinInnerWidgetClass;//[Offset: 0x80, Size: 0x28] 0x78ced2c180
	class RetainBaseWidget* CheckinWidgetClass;//[Offset: 0xa8, Size: 0x28] 0x78ced2c220
	class RetainBaseWidget* CultivateRewardWidgetClass;//[Offset: 0xd0, Size: 0x28] 0x78ced2c2c0
	class RetainBaseWidget* CultivateTaskWidgetClass;//[Offset: 0xf8, Size: 0x28] 0x78ced2c360
	class RetainBaseWidget* CultivateExchangeWidgetClass;//[Offset: 0x120, Size: 0x28] 0x78ced2c400
	class RetainBaseWidget* CultivateBuyAdvanceWidgetClass;//[Offset: 0x148, Size: 0x28] 0x78ced2c4a0

--------------------------------
Class: RewardWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	ImageMessageUI* m_ImageWidgetBasic;//[Offset: 0x330, Size: 0x8] 0x78ced77a00

--------------------------------
Class: RoomTeamUI.UserWidget.Widget.Visual.Object
	RoomTeamPlayerUI*[] players_;//[Offset: 0x260, Size: 0x10] 0x78ced2bc80
	void SortPlayer();// 0x848a044 0x78ced6d6e0
	RoomTeamPlayerUI* SetSelectPlayer(out const RoomUser Player);// 0x8489f74 0x78ced6d7c0
	void Init(int index, int Num, bool is_team);// 0x8a873f8 0x78ced6d8a0

--------------------------------
Class: RoomUI.UserWidget.Widget.Visual.Object
	UIRoomInfo room_info_;//[Offset: 0x260, Size: 0x80] 0x78ced79d80
	void SetInfo(out const UIRoomInfo Info);// 0x8a873f8 0x78ced6d440
	void GetRoomStartTime(FString room_id, out int[] Times);// 0x848a648 0x78ced6d520
	Texture2D* GetMapInfo(int map_id, out FString Name);// 0x848a760 0x78ced6d600

--------------------------------
Class: RuleIntroUI.UserWidget.Widget.Visual.Object
	void SetContent(out const FText title, out const FText cont);// 0x8a873f8 0x78ced6d360

--------------------------------
Class: SafeParadropZone.Actor.Object
	BoxComponent* boxcomp;//[Offset: 0x220, Size: 0x8] 0x78ced79c00

--------------------------------
Class: ScreenOpStatistics.UserWidget.Widget.Visual.Object
	int m_SizeX;//[Offset: 0x260, Size: 0x4] 0x78ced79800
	int m_SizeY;//[Offset: 0x264, Size: 0x4] 0x78ced79880
	int[] m_TouchCount;//[Offset: 0x268, Size: 0x10] 0x78ced2baa0
	int m_GridSize;//[Offset: 0x278, Size: 0x4] 0x78ced79980
	float m_PressTime;//[Offset: 0x27c, Size: 0x4] 0x78ced79a00
	float m_UpdateTime;//[Offset: 0x280, Size: 0x4] 0x78ced79a80
	WuXiaXPlayerController* m_p_Controll;//[Offset: 0x2a0, Size: 0x8] 0x78ced79b00
	int[] m_CurrentTouchIndex;//[Offset: 0x2a8, Size: 0x10] 0x78ced2bb40

--------------------------------
Class: ScreenOpStatisticViewer.UserWidget.Widget.Visual.Object
	Texture2D* m_OperationImage;//[Offset: 0x270, Size: 0x8] 0x78ced79680
	void RefreshImage(Texture2D* Image);// 0x8a873f8 0x78ced6d1a0
	void LoadData(FText Path);// 0x848bd2c 0x78ced6d280

--------------------------------
Class: SeasonCollectionLottery.UserWidgetBase.UserWidget.Widget.Visual.Object
	void OnLottery(int DrawType);// 0x84936f4 0x78ced82c40
	void InitTime(DateTime StartTime, DateTime EndTime);// 0x8a873f8 0x78ced82d20
	void InitRecomItem();// 0x84936e0 0x78ced82e00
	void InitMainSkinInfo();// 0x84936b8 0x78ced82ee0
	void InitMainSkin(int CoinNum, FString MainSkinName);// 0x8a873f8 0x78ced82fc0
	void Init();// 0x84936cc 0x78ced830a0
	int GetPlayerKeyNum();// 0x8493684 0x78ced83180
	void CreateRecomItemWidget(ShopItemInfo iteminfo);// 0x8a873f8 0x78ced83260
	void BP_SetReturnJingcui(int Num);// 0x8a873f8 0x78ced83340
	void BP_SetLotteryPrice(int ItemId, int Num);// 0x8a873f8 0x78ced83420
	void BP_OnJingcuiExchange();// 0x8a873f8 0x78ced83500

--------------------------------
Class: SeasonPassBuyLevel.UserWidgetBase.UserWidget.Widget.Visual.Object
	int GetMaxAddLevel();// 0x8494aec 0x78ced82620
	<int64,ImageMsgItemInfo> GetBuyLevelRewardList(int AddLevel);// 0x8494bd0 0x78ced82700
	int GetBuyLevelPrice(int AddLevel);// 0x8494b20 0x78ced827e0

--------------------------------
Class: SeasonPassBuySenior.UserWidgetBase.UserWidget.Widget.Visual.Object
	int GetSeniorAddExperience();// 0x84953a4 0x78ced822a0
	<int64,ImageMsgItemInfo> GetSeiorRewardList();// 0x84953d8 0x78ced82380
	void GetSeasonTime(out DateTime StartDate, out DateTime EndDate);// 0x8495274 0x78ced82460
	int GetBuySeniorAddLevel();// 0x8495370 0x78ced82540

--------------------------------
Class: SeasonPassMain.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdatePlayerAttr(enum Type, int Num);// 0x8a873f8 0x78ced81d60
	void RefreshTaskStatus(int64 TaskID, enum State, int progress);// 0x8a873f8 0x78ced81e40
	void RefreshRewardState(out const <int,ActivityState> StateMap);// 0x8a873f8 0x78ced81f20
	void RefreshAllTask();// 0x8a873f8 0x78ced82000
	void OnBuySeniorPass(int BuyInfo);// 0x8a873f8 0x78ced820e0
	void OnBuySeasonPassLevel(int NewLevel);// 0x8a873f8 0x78ced821c0

--------------------------------
Class: SeasonPassMission.UserWidgetBase.UserWidget.Widget.Visual.Object
	int CurWeekth;//[Offset: 0x330, Size: 0x4] 0x78ced7fd80
	int MaxWeekth;//[Offset: 0x334, Size: 0x4] 0x78ced7fe00
	void Init();// 0x84964d8 0x78ced853a0
	enum GetWeekTaskProgress(int64 ID, out int CurProgress, out int MaxPorgress);// 0x8496378 0x78ced85480
	void BP_InitTimeInfo(int DayRemain, int HourRemain);// 0x8a873f8 0x78ced85560
	void BP_InitMissionList(int Weekth);// 0x8a873f8 0x78ced85640

--------------------------------
Class: SeasonPassReward.UserWidgetBase.UserWidget.Widget.Visual.Object
	int64 CurRewardId;//[Offset: 0x330, Size: 0x8] 0x78ced90900
	int CurLevel;//[Offset: 0x338, Size: 0x4] 0x78ced90980
	void SetDetailShow(int64 RewardId);// 0x8496df0 0x78ced84760
	bool LevelRewardIsSpecial(int Level);// 0x8496d3c 0x78ced84840
	void InitReward();// 0x8496eac 0x78ced84920
	void Init();// 0x8496e98 0x78ced84a00
	int GetSeasonPassMaxLevel();// 0x8496c58 0x78ced84ae0
	int GetNextSpecialDisplayLevel(int Level);// 0x8496c8c 0x78ced84bc0
	int GetMaxExp(int Level);// 0x8496b74 0x78ced84ca0
	int GetArchiveRewardNum();// 0x8496c24 0x78ced84d80
	void CreateRewardWidet(int Level);// 0x8a873f8 0x78ced84e60
	void BP_SetSpecialShow(int Level);// 0x8a873f8 0x78ced84f40
	void BP_SetSkinDetail(int Type, int64 HeroId, int64 SkinId, FString Name, FString Desc);// 0x8a873f8 0x78ced85020
	void BP_SetItemDetail(FString IconPath, FString Name, FString Desc);// 0x8a873f8 0x78ced85100
	void BP_InitTimeInfo(int Week, DateTime EndDate);// 0x8a873f8 0x78ced851e0
	void BP_InitLevelInfo(int Level, int curexp, int MaxExp, bool bIsSenior);// 0x8a873f8 0x78ced852c0

--------------------------------
Class: SeasonPassRewardItem.UserWidgetBase.UserWidget.Widget.Visual.Object
	int Level;//[Offset: 0x330, Size: 0x4] 0x78ced90580
	void Init(int Level);// 0x8497c44 0x78ced845a0
	void BP_InitRewardInfo(int Level, out const ImageMsgItemInfo[] Reward, out const ImageMsgItemInfo[] SeniorReward, out const int64[] RewardList, out const int64[] SeniorRewardList);// 0x8a873f8 0x78ced84680

--------------------------------
Class: SeasonRewardRaretyUI.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: SeasonTransitionUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void InitSeasonInfo(int HistoryScore, int NewScore);// 0x8a873f8 0x78ced844c0

--------------------------------
Class: SelectableInterface.Interface.Object
	void OnSelected(bool bSelected);// 0x8498bc8 0x78ced843e0

--------------------------------
Class: SelectBasicHeroUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	UserHallUI* UserHallUI;//[Offset: 0x330, Size: 0x8] 0x78ced90300
	void SelHero(int index);// 0x8a873f8 0x78ced84060
	void OnOpenedBP();// 0x8a873f8 0x78ced84140
	void OnClosedBP();// 0x8a873f8 0x78ced84220
	void InitData();// 0x8499298 0x78ced84300

--------------------------------
Class: SelectNoviceOrMasterUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void SetIsOpenNoviceOrMaster(int UserId, bool IsOpen);// 0x8499944 0x78ced83ce0
	void PlayEnterAnim();// 0x8a873f8 0x78ced83dc0
	void OnOpenedBP();// 0x8a873f8 0x78ced83ea0
	bool GetNewbieId(out int outNewBieId);// 0x8499a3c 0x78ced83f80

--------------------------------
Class: SendVerificationUI.UserWidget.Widget.Visual.Object
	void SetLength();// 0x8a873f8 0x78ced87320
	void SetCont(out const FText text);// 0x8a873f8 0x78ced83a40
	void SendVeryRequest(FString cont);// 0x849a204 0x78ced83b20
	FText RandText();// 0x849a134 0x78ced83c00

--------------------------------
Class: SevenDayTaskItem.UserWidget.Widget.Visual.Object
	enum Type;//[Offset: 0x260, Size: 0x1] 0x78ced2dc60
	void MyButtonReleased();// 0x849ab5c 0x78ced87080
	void MyButtonPressed();// 0x849ab70 0x78ced87160
	void MyButtonClicked();// 0x849ab84 0x78ced87240

--------------------------------
Class: SevenDayTaskMain.ActivityTemplateWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	class Object* class_BP_SevenDayTaskNode;//[Offset: 0x3f8, Size: 0x8] 0x78ced2db20
	enum Type;//[Offset: 0x400, Size: 0x1] 0x78ced2dbc0
	void Start();// 0x849b1b8 0x78ced86ec0
	void Msg_ActivityResult_OK();// 0x849b1a4 0x78ced86fa0

--------------------------------
Class: SevenDayTaskNode.UserWidget.Widget.Visual.Object
	void MyButtonClicked();// 0x849b7b4 0x78ced86de0

--------------------------------
Class: SevenDayTaskProgress.UserWidget.Widget.Visual.Object

--------------------------------
Class: ShapeButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	Texture2D* AdvancedHitTexture;//[Offset: 0x428, Size: 0x8] 0x78ced91380
	int AdvancedHitAlpha;//[Offset: 0x430, Size: 0x4] 0x78ced91400
	void SetAdvancedHitTexture(Texture2D* InTexture);// 0x849c248 0x78ced86600
	void SetAdvancedHitAlpha(int InAlpha);// 0x849c198 0x78ced866e0

--------------------------------
Class: ShopItemTipsWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image_Item;//[Offset: 0x330, Size: 0x8] 0x78ced92c80
	TextBlock* TextBlock_Name;//[Offset: 0x338, Size: 0x8] 0x78ced92d00
	TextBlock* TextBlock_Desc;//[Offset: 0x340, Size: 0x8] 0x78ced92d80
	void RefreshQuality(int nQuality);// 0x8a873f8 0x78ced85e20
	void RefreshItemType(enum itemtype);// 0x8a873f8 0x78ced85f00
	void RefreshItemTips(int64 ItemId);// 0x849d644 0x78ced85fe0
	void RefreshItemCount(int ItemId);// 0x8a873f8 0x78ced860c0

--------------------------------
Class: ItemDataObject.Object
	int itemindex;//[Offset: 0x28, Size: 0x4] 0x78ced93c80
	int ItemId;//[Offset: 0x2c, Size: 0x4] 0x78ced93d00
	int ItemCount;//[Offset: 0x30, Size: 0x4] 0x78ced93d80

--------------------------------
Class: ShowShopItem.Object
	int ItemId;//[Offset: 0x28, Size: 0x4] 0x78ced93c00

--------------------------------
Class: ShowDebugComponent.ActorComponent.Object
	<FString,FString> VariablesNamesMaps;//[Offset: 0xb0, Size: 0x50] 0x78cf15e140
	class ShowDebugWidget* ShowDebugWidgetClass;//[Offset: 0x100, Size: 0x8] 0x78ced2d1c0
	bool visible_in_game_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x78ced94580
	bool isUsingCustomTickInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1] 0x78ced94600
	float CustomTickInterval;//[Offset: 0x10c, Size: 0x4] 0x78ced94680
	WidgetComponent* WidgetComponentRef;//[Offset: 0x110, Size: 0x8] 0x78ced94700
	ShowDebugWidget* ShowDebugWidgetRef;//[Offset: 0x118, Size: 0x8] 0x78ced94780
	DebugVariable[] UpdateVariables();// 0x84a3c3c 0x78ced87be0

--------------------------------
Class: DebugVariable
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cefe6500
	FString Value;//[Offset: 0x8, Size: 0x10] 0x78cefe6580

--------------------------------
Class: ShowDebugWidget.UserWidget.Widget.Visual.Object
	void OnVariablesUpdated(out const DebugVariable[] VariablesList);// 0x84a4440 0x78ced87b00

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x461, Size: 0x1] 0x78ce72dc60
	enum TimingPolicy;//[Offset: 0x462, Size: 0x1] 0x78ce72dd00
	class UserWidget* WidgetClass;//[Offset: 0x468, Size: 0x8] 0x78ce72dda0
	IntPoint DrawSize;//[Offset: 0x470, Size: 0x8] 0x78ce890b00
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1] 0x78ce890b80
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1] 0x78ce890c00
	float RedrawTime;//[Offset: 0x47c, Size: 0x4] 0x78ce890c80
	IntPoint CurrentDrawSize;//[Offset: 0x488, Size: 0x8] 0x78ce890d00
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1] 0x78ce890d80
	Vector2D Pivot;//[Offset: 0x494, Size: 0x8] 0x78ce890e00
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1] 0x78ce890e80
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 0x1] 0x78ce890f00
	enum WindowVisibility;//[Offset: 0x49e, Size: 0x1] 0x78ce72de40
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 0x1] 0x78ce891000
	LocalPlayer* OwnerPlayer;//[Offset: 0x4a0, Size: 0x8] 0x78ce891080
	LinearColor BackgroundColor;//[Offset: 0x4a8, Size: 0x10] 0x78ce85f800
	LinearColor TintColorAndOpacity;//[Offset: 0x4b8, Size: 0x10] 0x78ce85f880
	float OpacityFromTexture;//[Offset: 0x4c8, Size: 0x4] 0x78ce85f900
	enum BlendMode;//[Offset: 0x4cc, Size: 0x1] 0x78ce72dee0
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1] 0x78ce85fa00
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 0x1] 0x78ce85fa80
	BodySetup* BodySetup;//[Offset: 0x4d0, Size: 0x8] 0x78ce85fb00
	MaterialInterface* TranslucentMaterial;//[Offset: 0x4d8, Size: 0x8] 0x78ce85fb80
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x4e0, Size: 0x8] 0x78ce85fc00
	MaterialInterface* OpaqueMaterial;//[Offset: 0x4e8, Size: 0x8] 0x78ce85fc80
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x4f0, Size: 0x8] 0x78ce85fd00
	MaterialInterface* MaskedMaterial;//[Offset: 0x4f8, Size: 0x8] 0x78ce85fd80
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x500, Size: 0x8] 0x78ce85fe00
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x508, Size: 0x8] 0x78ce85fe80
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x510, Size: 0x8] 0x78ce85ff00
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1] 0x78ce85ff80
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1] 0x78ce85e780
	FName SharedLayerName;//[Offset: 0x51c, Size: 0x8] 0x78ce85e800
	int LayerZOrder;//[Offset: 0x524, Size: 0x4] 0x78ce85e880
	enum GeometryMode;//[Offset: 0x528, Size: 0x1] 0x78ce72df80
	float CylinderArcAngle;//[Offset: 0x52c, Size: 0x4] 0x78ce85e980
	enum TickMode;//[Offset: 0x530, Size: 0x1] 0x78ce72e020
	UserWidget* Widget;//[Offset: 0x558, Size: 0x8] 0x78ce85ea80
	void SetWindowVisibility(enum InVisibility);// 0xa1c45e4 0x78ce8812e0
	void SetWindowFocusable(bool bInWindowFocusable);// 0xa1c46a8 0x78ce8813c0
	void SetWidgetSpace(enum NewSpace);// 0xa1c48f4 0x78ce8814a0
	void SetWidget(UserWidget* Widget);// 0xa1c51c4 0x78ce881580
	void SetTwoSided(const bool bWantTwoSided);// 0xa1c4e28 0x78ce881660
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0xa1c4c10 0x78ce881740
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0xa1c4d60 0x78ce881820
	void SetTickMode(enum InTickMode);// 0xa1c453c 0x78ce881900
	void SetRedrawTime(float InRedrawTime);// 0xa1c49b4 0x78ce8819e0
	void SetPivot(out const Vector2D InPivot);// 0xa1c4b3c 0x78ce881ac0
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0xa1c511c 0x78ce881ba0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0xa1c5050 0x78ce881c80
	void SetGeometryMode(enum InGeometryMode);// 0xa1c4834 0x78ce7ce780
	void SetDrawSize(Vector2D Size);// 0xa1c4f10 0x78ce7ce860
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0xa1c4a74 0x78ce7ce940
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0xa1c4774 0x78ce7cea20
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0xa1c4cb8 0x78ce7ceb00
	void RequestRedraw();// 0xa1c4ef4 0x78ce7cebe0
	bool IsWidgetVisible();// 0xa1c4504 0x78ce7cecc0
	enum GetWindowVisiblility();// 0xa1c468c 0x78ce7ceda0
	bool GetWindowFocusable();// 0xa1c4758 0x78ce7cee80
	enum GetWidgetSpace();// 0xa1c4998 0x78ce7cef60
	UserWidget* GetWidget();// 0xa1c5274 0x78ce7cf040
	UserWidget* GetUserWidgetObject();// 0xa1c5318 0x78ce7cf120
	bool GetTwoSided();// 0xa1c4ed8 0x78ce7cf200
	bool GetTickWhenOffscreen();// 0xa1c4e0c 0x78ce7cf2e0
	TextureRenderTarget2D* GetRenderTarget();// 0xa1c52e4 0x78ce7cf3c0
	float GetRedrawTime();// 0xa1c4a58 0x78ce7cf4a0
	Vector2D GetPivot();// 0xa1c4bf0 0x78ce7cf580
	LocalPlayer* GetOwnerPlayer();// 0xa1c501c 0x78ce7cf660
	MaterialInstanceDynamic* GetMaterialInstance();// 0xa1c52b0 0x78ce7cf740
	bool GetManuallyRedraw();// 0xa1c5100 0x78ce7cf820
	enum GetGeometryMode();// 0xa1c48d8 0x78ce7cf900
	Vector2D GetDrawSize();// 0xa1c4fe8 0x78ce7cf9e0
	bool GetDrawAtDesiredSize();// 0xa1c4b20 0x78ce7cfac0
	float GetCylinderArcAngle();// 0xa1c4818 0x78ce7cfba0
	Vector2D GetCurrentDrawSize();// 0xa1c4fb4 0x78ce7cfc80

--------------------------------
Class: ShowRedDotHandler.Object

--------------------------------
Class: SignMainUI.UserWidget.Widget.Visual.Object
	SignPlayerUiInfo[] playerUiInfoList;//[Offset: 0x2e0, Size: 0x10] 0x78ced2d080
	void UICall_OnSing();// 0x84a50c0 0x78ced87860
	void OnSing();// 0x84a50d4 0x78ced87940
	void OnMainUIShowHind(bool flag);// 0x84a50e8 0x78ced87a20

--------------------------------
Class: SignPlayerUiInfo
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefe8180
	SignPointUiInfo pointItem;//[Offset: 0x8, Size: 0x28] 0x78cefe8200
	SignPointUiInfo pointEnemy;//[Offset: 0x30, Size: 0x28] 0x78cefe8280
	SignPointUiInfo pointArea;//[Offset: 0x58, Size: 0x28] 0x78cefe8300
	SignPointUiInfo pointAutoDragonRock;//[Offset: 0x80, Size: 0x28] 0x78cefe8380
	SignPointUiInfo pointAutoTouTuo;//[Offset: 0xa8, Size: 0x28] 0x78cefe8400
	SignPointUiInfo pointAutoParadrop;//[Offset: 0xd0, Size: 0x28] 0x78cefe6380
	SignPointUiInfo TargetSignPointUIInfo;//[Offset: 0xf8, Size: 0x28] 0x78cefe6480

--------------------------------
Class: SignPointUiInfo
	int Quality;//[Offset: 0x20, Size: 0x4] 0x78cefe6400

--------------------------------
Class: SignPointUI.UserWidget.Widget.Visual.Object
	void Event_SetInsideImage(int PlayerIndex, enum mainType, enum childType, int Quality);// 0x8a873f8 0x78ced875c0
	void Event_SetExternalImageRotator(int val);// 0x8a873f8 0x78ced876a0
	void Event_SetExternalImage(int PlayerIndex, bool useCenter);// 0x8a873f8 0x78ced87780

--------------------------------
Class: SobotWebUI.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: SoldItemUI.UserWidget.Widget.Visual.Object
	int item_id_;//[Offset: 0x260, Size: 0x4] 0x78ced95500
	void ShowItemInfo(int Money, PaperSprite* icon, FString Name);// 0x8a873f8 0x78ced8a880
	void SetItemInfo(int item_id);// 0x84a704c 0x78ced8a960

--------------------------------
Class: StandaloneNetMessageHandle.BaseNetHandle.Actor.Object
	void SendTrainFinished();// 0x84a7824 0x78ced8a5e0
	void SendPlayerAccountState(enum State);// 0x84a76d4 0x78ced8a6c0
	void SendNeedNotTrain(int Mode);// 0x84a777c 0x78ced8a7a0

--------------------------------
Class: StoreWidget.UserWidget.Widget.Visual.Object
	WuXiaXGameInstance* game_instance_;//[Offset: 0x260, Size: 0x8] 0x78ced99100
	bool IsRandomBox(int item_id);// 0x84aa178 0x78ced8c020
	void InitRandomBoxData(int item_id, bool is_main);// 0x84aa2e8 0x78ced8c100
	void InitPreviewBoxData(int item_id);// 0x84aa240 0x78ced8c1e0
	void InitBuyKeys();// 0x84aa22c 0x78ced8c2c0
	PaperSprite* GetOpenBoxIcon(int item_id);// 0x84a9b04 0x78ced8c3a0
	void GetKeyPrice(int item_id, out int Type, out float Price);// 0x84aa028 0x78ced8c480
	Texture2D* GetKeyIcon(int item_id);// 0x84a9bb4 0x78ced8c560
	void GetHallItemDetail(int item_id, out FString Name, out FString descript, out FString detail);// 0x84a9938 0x78ced8c640
	void GetConsumeInfo(int item_id, out bool valid_item, out int consume_id, out bool need_consume);// 0x84a9790 0x78ced8c720
	Texture2D* GetBoxTexture(int item_id);// 0x84a9c64 0x78ced8c800
	void GetBoxNameAndCost(int item_id, out FString Name, out int price_type, out int Cost);// 0x84a9e74 0x78ced8c8e0
	PaperSprite* GetBoxIcon(int item_id);// 0x84a9d14 0x78ced8c9c0
	int GetBoxByTimeAWeek(int item_id);// 0x84a9dc4 0x78ced890e0
	void CreateRandomBoxItem(int ID, int parent_id, int index, int Type, PaperSprite* icon, int Level, bool is_main);// 0x8a873f8 0x78ced891c0
	void CreateRandomBox(int item_id, int index, PaperSprite* icon, bool is_main);// 0x8a873f8 0x78ced892a0
	void CreatePreviewBoxItem(int ID, int Type, PaperSprite* icon, int Level);// 0x8a873f8 0x78ced89380
	void CreateBuyKey(int ID, PaperSprite* icon, int price_type, float Price);// 0x8a873f8 0x78ced89460

--------------------------------
Class: SummonBase.Actor.Object

--------------------------------
Class: SuEagle.SummonBase.Actor.Object
	uint64[] ignores;//[Offset: 0x2a0, Size: 0x10] 0x78ced2f1a0
	uint64[] effected_players_;//[Offset: 0x2b0, Size: 0x10] 0x78ced2f240

--------------------------------
Class: SuPoisonFog.SummonBase.Actor.Object
	uint64[] ignores;//[Offset: 0x2a0, Size: 0x10] 0x78ced2f060
	uint64[] effected_players_;//[Offset: 0x2b0, Size: 0x10] 0x78ced2f100

--------------------------------
Class: SuThunder.SummonBase.Actor.Object
	NiagaraComponent* thunder_effect_com_;//[Offset: 0x2a0, Size: 0x8] 0x78ced98800
	uint64[] ignores;//[Offset: 0x2b0, Size: 0x10] 0x78ced2efc0
	float speed_;//[Offset: 0x2d0, Size: 0x4] 0x78ced98900
	Vector gravity_;//[Offset: 0x2d4, Size: 0xc] 0x78ced98980
	float fly_time_;//[Offset: 0x2e0, Size: 0x4] 0x78ced98a00
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x84ae358 0x78ced8bca0
	void Client_ShowThunder();// 0x84ae28c 0x78ced8bd80
	void Client_Explosion(int Level);// 0x84ae2a8 0x78ced8be60
	void Client_CreateThunder(int ownerid, int Level);// 0x84ae194 0x78ced8bf40

--------------------------------
Class: TaskTipPanelWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	void SetTaskCompleteTipMap(int showid);// 0x84ba3e0 0x78cedb1820
	void RemoveFromTaskCompleteTipMap(int TaskID);// 0x84ba72c 0x78cedb1900
	bool IsContainShowOverIdArray(int showid);// 0x84ba868 0x78cedb19e0
	TaskTipInfo GetTaskTipInfoById(int ActID);// 0x84ba488 0x78cedb1ac0
	int GetTaskTipInfo();// 0x84ba5c0 0x78cedb1ba0
	<int,TaskTipInfo> GetTaskCompleteTipMap();// 0x84ba7d4 0x78cedb1c80
	TaskTipInfo[] GetTaskCompleteTipArray();// 0x84ba5f4 0x78ced8e780
	FString[] GetShowOverIdArray();// 0x84baa6c 0x78ced8e860
	void EmptyShowOverIdArrayAndAddOne(int showid);// 0x84ba91c 0x78ced8e940
	void AddTaskInfoToTipPanel();// 0x8a873f8 0x78ced8ea20
	void AddShowOverIdArray(int showid);// 0x84ba9c4 0x78ced8eb00

--------------------------------
Class: TaskTipInfo
	int TipId;//[Offset: 0x0, Size: 0x4] 0x78cefcc200
	FString TipDesc;//[Offset: 0x8, Size: 0x10] 0x78cefcc280
	FString IconPath;//[Offset: 0x18, Size: 0x10] 0x78cefcc300
	int AwardCount;//[Offset: 0x28, Size: 0x4] 0x78cefcc380

--------------------------------
Class: TeacherAndStudentTaskUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void UpdateActivityData(out const ActivityDataInfo ActivityDataInfo);// 0x8a873f8 0x78cedb1740

--------------------------------
Class: TeacherPrivilegeUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	int CurShowLevel;//[Offset: 0x330, Size: 0x4] 0x78ceda4400
	void UpdateActivityData(out const ActivityDataInfo ActivityDataInfo, int ShowLevel);// 0x8a873f8 0x78cedb1660

--------------------------------
Class: TestAnimComponent.ActorComponent.Object

--------------------------------
Class: TestCharacter.Character.Pawn.Actor.Object
	SpringArmComponent* CameraBoom;//[Offset: 0x4b8, Size: 0x8] 0x78ceda6d00
	CameraComponent* FollowCamera;//[Offset: 0x4c0, Size: 0x8] 0x78ceda6d80
	float BaseTurnRate;//[Offset: 0x4c8, Size: 0x4] 0x78ceda6e00
	float BaseLookUpRate;//[Offset: 0x4cc, Size: 0x4] 0x78ceda6e80
	TestInputComponent* myInputComponent;//[Offset: 0x4d0, Size: 0x8] 0x78ceda6f00
	TestAnimComponent* animComponent;//[Offset: 0x4d8, Size: 0x8] 0x78ceda6f80

--------------------------------
Class: TestInputComponent.ActorComponent.Object

--------------------------------
Class: TipWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	CurveFloat* m_floatCurve;//[Offset: 0x338, Size: 0x8] 0x78ceda8b80
	<enum,float> m_tipShowDataMap;//[Offset: 0x340, Size: 0x50] 0x78cf15fc40
	float m_animateDuration;//[Offset: 0x390, Size: 0x4] 0x78ceda8d00
	TextBlock* m_info;//[Offset: 0x3a0, Size: 0x8] 0x78ceda8d80
	Image* m_cover;//[Offset: 0x3a8, Size: 0x8] 0x78ceda8e00
	CanvasPanel* m_movePanel;//[Offset: 0x3b0, Size: 0x8] 0x78ceda8e80
	void InitData(FString Info);// 0x84c094c 0x78cedb2c40

--------------------------------
Class: TrainChildGameMode.Actor.Object
	LevelAreaBox* LevelArea;//[Offset: 0x228, Size: 0x8] 0x78ceda8700
	WuXiaXCharacter* player_character;//[Offset: 0x230, Size: 0x8] 0x78ceda8780
	Actor* m_GuideSpawnActor;//[Offset: 0x238, Size: 0x8] 0x78ceda8800
	int player_unique_id;//[Offset: 0x240, Size: 0x4] 0x78ceda8880
	NpcCharacter* train_npc_actor;//[Offset: 0x248, Size: 0x8] 0x78ceda8900
	GameRebirthActor* birth_actor;//[Offset: 0x250, Size: 0x8] 0x78ceda8980
	TrainNpcPoint* npc_birth_actor;//[Offset: 0x258, Size: 0x8] 0x78ceda8a00
	NetMessageHandle* net_actor_;//[Offset: 0x260, Size: 0x8] 0x78ceda8a80
	int[] pick_items_;//[Offset: 0x268, Size: 0x10] 0x78ced2f9c0

--------------------------------
Class: TrainNpcPoint.Actor.Object
	int index;//[Offset: 0x220, Size: 0x4] 0x78ceda8680

--------------------------------
Class: Trap.Actor.Object
	int64 trap_id_;//[Offset: 0x238, Size: 0x8] 0x78cedaa200
	void OnRepTrapID();// 0x84c1a68 0x78cedb27e0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x84c1a7c 0x78cedb28c0
	void Client_TriggerTrap();// 0x84c1cdc 0x78cedb29a0
	void Client_Init(int64 trapid, int launchplayerid, int item_id);// 0x84c1cf8 0x78cedb2a80
	void CallWhenDestroy();// 0x84c1cc8 0x78cedb2b60

--------------------------------
Class: TrapActor.Actor.Object
	float damage;//[Offset: 0x220, Size: 0x4] 0x78cedaa000
	float continus_time;//[Offset: 0x224, Size: 0x4] 0x78cedaa080
	float damage_delta;//[Offset: 0x228, Size: 0x4] 0x78cedaa100
	void StartTrap();// 0x8a873f8 0x78cedb21c0
	void RevertTrap();// 0x8a873f8 0x78cedb22a0
	void PauseTrap();// 0x8a873f8 0x78cedb2380
	void HurtCharacter(WuXiaXBaseCharacter* Player);// 0x84c2598 0x78cedb2460
	void Client_StartTrap();// 0x84c257c 0x78cedb2540
	void Client_RevertTrap();// 0x84c2544 0x78cedb2620
	void Client_PauseTrap();// 0x84c2560 0x78cedb2700

--------------------------------
Class: UI_MobileNoticeUI.UserWidget.Widget.Visual.Object
	PanelWidget* m_noticePanel;//[Offset: 0x278, Size: 0x8] 0x78cedac480
	void ShowNoticeMessage(FText Msg);// 0x84c69a8 0x78cedb43e0
	void OnNoticeMessage(TextBlock* noticeText);// 0x8a873f8 0x78cedb44c0

--------------------------------
Class: UserInputNameWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	FString[] FirstNames;//[Offset: 0x330, Size: 0x10] 0x78cedd3620
	FString[] SecondNames;//[Offset: 0x340, Size: 0x10] 0x78cedd36c0
	FString RandomAPlayerName(FString OldName);// 0x84daad0 0x78cee03b20
	void OnPlayerNameDetermined();// 0x8a873f8 0x78cee03c00
	void OnOpenedBP();// 0x8a873f8 0x78cee03ce0
	void NameRemind(int remind);// 0x8a873f8 0x78cee03dc0

--------------------------------
Class: UserMailWidget.UserWidget.Widget.Visual.Object
	int TestFoo();// 0x84db454 0x78cee03a40

--------------------------------
Class: VirtualJoystick.Widget.Visual.Object
	SlateBrush Thumb;//[Offset: 0x118, Size: 0x88] 0x78cedeb880
	SlateBrush Background;//[Offset: 0x1a0, Size: 0x88] 0x78cedeb900
	SlateBrush ThumbHovered;//[Offset: 0x228, Size: 0x88] 0x78cedeb980
	SlateBrush BackgroundHovered;//[Offset: 0x2b0, Size: 0x88] 0x78cedeba00
	Vector2D ThumbSize;//[Offset: 0x338, Size: 0x8] 0x78cedeba80
	float VisualLength;//[Offset: 0x340, Size: 0x4] 0x78cedebb00
	enum VisualDirection;//[Offset: 0x344, Size: 0x1] 0x78cedd34e0
	Vector2D InteractionSize;//[Offset: 0x348, Size: 0x8] 0x78cedebc00
	bool VisualRotated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x78cedebc80
	bool PreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1] 0x78cedebd00
	bool UseAxisOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 0x1] 0x78cedebd80
	Key XAxisKey;//[Offset: 0x358, Size: 0x18] 0x78cedebe00
	Key YAxisKey;//[Offset: 0x370, Size: 0x18] 0x78cedebe80
	delegate OnJoystickStarted;//[Offset: 0x388, Size: 0x10] 0x78cedebf00
	delegate OnJoystickMoved;//[Offset: 0x398, Size: 0x10] 0x78cedebf80
	delegate OnJoystickEnded;//[Offset: 0x3a8, Size: 0x10] 0x78cedec000
	delegate OnJoystickReleased;//[Offset: 0x3b8, Size: 0x10] 0x78cedec080
	delegate OnJoystickAxis;//[Offset: 0x3c8, Size: 0x10] 0x78cedec100
	void SetVisualRotated(const bool NewVisualRotated);// 0x84e1000 0x78cee0c9c0
	void SetVisualLength(const float NewVisualLength);// 0x84e1268 0x78cee090e0
	void SetVisualDirection(const enum NewVisualDirection);// 0x84e11a0 0x78cee091c0
	void SetThumbSize(const Vector2D NewThumbSize);// 0x84e1330 0x78cee092a0
	void SetThumbImageHovered(Texture2D* NewThumbImageHovered);// 0x84e1e88 0x78cee09380
	void SetThumbImage(Texture2D* NewThumbImage);// 0x84e2468 0x78cee09460
	void SetThumbHovered(out const SlateBrush NewThumbHovered);// 0x84e15e0 0x78cee09540
	void SetThumb(out const SlateBrush NewThumb);// 0x84e19b0 0x78cee09620
	void SetPreventReCenter(const bool NewPreventReCenter);// 0x84e0f28 0x78cee09700
	void SetInteractionSize(const Vector2D NewInteractionSize);// 0x84e10d8 0x78cee097e0
	void SetBackgroundImageHovered(Texture2D* NewBackgroundImageHovered);// 0x84e1b98 0x78cee098c0
	void SetBackgroundImage(Texture2D* NewBackgroundImage);// 0x84e2178 0x78cee099a0
	void SetBackgroundHovered(out const SlateBrush NewBackgroundHovered);// 0x84e13f8 0x78cee09a80
	void SetBackground(out const SlateBrush NewBackground);// 0x84e17c8 0x78cee09b60
	EventReply OnTouchStarted(out const Geometry MyGeometry, out const PointerEvent MouseEvent, out bool Handled);// 0x84e0cbc 0x78cee09c40
	void OnTouchReleased();// 0x84e0ca8 0x78cee09d20
	bool IsVisibleInView();// 0x84e0ef0 0x78cee09e00

--------------------------------
Class: WinPoint.WuXiaInteractiveActor.Actor.Object
	int Type;//[Offset: 0x2b8, Size: 0x4] 0x78ceded600
	int Group;//[Offset: 0x2bc, Size: 0x4] 0x78ceded680
	bool NeedInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78cedeb600
	bool is_show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78cedeb680
	void OnRep_Show();// 0x84e431c 0x78cee0c800
	void Native_Show();// 0x8a873f8 0x78cee0c8e0

--------------------------------
Class: WishingHallUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	bool CanWishing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78cedee600
	void UpdateSignNumColor();// 0x8a873f8 0x78cee0b760
	void UpdatePlayerHaveOrNot(int ID);// 0x8a873f8 0x78cee0b840
	void UpdatePlayerAttr(enum Type, int Num);// 0x8a873f8 0x78cee0b920
	void UpdateItemNum();// 0x8a873f8 0x78cee0ba00
	void UpdateGashaponTimes();// 0x8a873f8 0x78cee0bae0
	void StartGashapon();// 0x8a873f8 0x78cee0bbc0
	void SortWishingResult(out ImageMsgItemInfo[] Info);// 0x84e48dc 0x78cee0bca0
	void SetPlayerSignNumber(enum WishingType);// 0x8a873f8 0x78cee0bd80
	void SetActivityId(out const <enum,int64> NewActivityMap);// 0x8a873f8 0x78cee0be60
	void OnOpenedBP();// 0x8a873f8 0x78cee0bf40
	void OnClosedBP();// 0x8a873f8 0x78cee0c020
	bool IsSignEnough(int BegsignTenOrOne, enum WishingType);// 0x84e4c68 0x78cee0c100
	bool IsReachDrawLimit();// 0x8a873f8 0x78cee0c1e0
	int GetSoundEffectIndex(int l1, int L2, int L3, int l4, int l5, int execIndex);// 0x84e4998 0x78cee0c2c0
	int64 GetPlayerSignNumber(enum WishingType);// 0x84e4bb8 0x78cee0c3a0
	void GetCurrentPoolInfo(int64 CurrentPoolId, out float TotalWeight, out <enum,BegSignRewardItemInfoArray> CurrentRareChildMap);// 0x84e4e68 0x78cee0c480
	void GashaponResult(int ErrorCode, out const ImageMsgItemInfo[] Info, enum GashaponType, int ItemNum, int MaxQuality);// 0x8a873f8 0x78cee0c560
	void BuyItemSuccess();// 0x8a873f8 0x78cee0c640
	void BegsignPoolSort(out <enum,BegSignRewardItemInfoArray> CurrentRareChildMap);// 0x84e4d68 0x78cee0c720

--------------------------------
Class: WishingResultUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	void SortWishingResult(out ImageMsgItemInfo[] Info);// 0x84e5fe0 0x78cee0b060
	void SetBtnInfo(enum GashaponType, enum WishingActType, int64 WishingItemNum);// 0x8a873f8 0x78cee0b140
	void OnOpenedBP();// 0x8a873f8 0x78cee0b220
	void OnBuyLotteryItem();// 0x8a873f8 0x78cee0b300
	void InitWishingResultList(out const ImageMsgItemInfo[] Info);// 0x8a873f8 0x78cee0b3e0
	int GetPlayerKeyNum();// 0x84e609c 0x78cee0b4c0
	int GetLotteryPrice(enum WishingActType);// 0x84e6180 0x78cee0b5a0
	int GetLotteryPoolId(enum WishingActType);// 0x84e60d0 0x78cee0b680

--------------------------------
Class: WuXia_AnimInstance.AnimInstance.Object
	CurveFloat* hit_1_;//[Offset: 0x2b8, Size: 0x8] 0x78ce621780
	CurveFloat* hit_2_;//[Offset: 0x2c0, Size: 0x8] 0x78ce621800
	CurveFloat* hit_shanbi_;//[Offset: 0x2c8, Size: 0x8] 0x78ce621880
	SkeletalMeshComponent* mesh_component_;//[Offset: 0x2e0, Size: 0x8] 0x78ce621900
	CharacterMovementComponent* character_movement_component_;//[Offset: 0x2e8, Size: 0x8] 0x78ce621980
	CapsuleComponent* capsule_component_;//[Offset: 0x2f0, Size: 0x8] 0x78ce621a00
	WuXiaXCharacter* owner_player_;//[Offset: 0x2f8, Size: 0x8] 0x78ce621a80
	WuXiaXBaseCharacter* base_player_;//[Offset: 0x300, Size: 0x8] 0x78ce621b00
	Pawn* pawn_owner_;//[Offset: 0x308, Size: 0x8] 0x78ce621b80
	int sex_id;//[Offset: 0x310, Size: 0x4] 0x78ce621c00
	byte movement_mode;//[Offset: 0x314, Size: 0x1] 0x78ce621c80
	bool in_air;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1] 0x78ce621d00
	Vector Velocity;//[Offset: 0x318, Size: 0xc] 0x78ce621d80
	float Speed;//[Offset: 0x324, Size: 0x4] 0x78ce621e00
	Rotator actor_rotation;//[Offset: 0x328, Size: 0xc] 0x78ce621e80
	Rotator base_aim_rotation;//[Offset: 0x334, Size: 0xc] 0x78ce621f00
	Vector movement_input_vector;//[Offset: 0x340, Size: 0xc] 0x78ce621f80
	bool is_horse_ride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1] 0x78ce622000
	bool is_driver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1] 0x78ce622080
	bool is_free_view;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 0x1] 0x78ce622100
	enum take_weapon_state;//[Offset: 0x34f, Size: 0x1] 0x78cedd4ca0
	bool is_in_block;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x78ce620100
	int weapon_anim_type;//[Offset: 0x354, Size: 0x4] 0x78ce620180
	int current_weapon;//[Offset: 0x358, Size: 0x4] 0x78ce620200
	enum curr_keep_inter_active_type;//[Offset: 0x35c, Size: 0x1] 0x78cedd4d40
	Rotator character_skill_rotator;//[Offset: 0x360, Size: 0xc] 0x78ce620300
	bool is_see_target;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1] 0x78ce620380
	enum player_game_state;//[Offset: 0x36d, Size: 0x1] 0x78cedd4de0
	enum player_fight_state;//[Offset: 0x36e, Size: 0x1] 0x78cedd4e80
	enum player_motion_state;//[Offset: 0x36f, Size: 0x1] 0x78cedd4f20
	enum use_item_state;//[Offset: 0x370, Size: 0x1] 0x78cedd4fc0
	int use_item_id;//[Offset: 0x374, Size: 0x4] 0x78ce620600
	float curr_use_item_time;//[Offset: 0x378, Size: 0x4] 0x78ce620680
	float assassin_move_curr_time;//[Offset: 0x37c, Size: 0x4] 0x78ce620700
	Vector input_vector;//[Offset: 0x380, Size: 0xc] 0x78ce620780
	bool is_swiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1] 0x78ce620800
	float swim_up_axis_value;//[Offset: 0x390, Size: 0x4] 0x78ce620880
	bool is_wake_flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1] 0x78ce620900
	bool moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1] 0x78ce620980
	bool movement_input;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 0x1] 0x78ce620a00
	bool is_moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 0x1] 0x78ce620a80
	bool is_sprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1] 0x78ce620b00
	bool can_move_to_idle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1] 0x78ce620b80
	bool is_aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 0x1] 0x78ce620c00
	bool is_shooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 0x1] 0x78ce620c80
	bool is_reloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1] 0x78ce620d00
	bool bIsRangeCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1] 0x78ce620d80
	bool is_knock_down;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 0x1] 0x78ce620e00
	bool is_dizziness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 0x1] 0x78ce620e80
	bool is_stiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1] 0x78ce620f00
	bool is_hitting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1] 0x78ce620f80
	bool can_leave_hitting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1] 0x78ce621000
	bool is_turn_window;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1] 0x78ce621080
	bool is_interact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1] 0x78cedef800
	bool is_cure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 0x1] 0x78cedef880
	bool is_be_cure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 0x1] 0x78cedef900
	bool is_killing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 0x1] 0x78cedef980
	bool is_be_killed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1] 0x78cedefa00
	bool is_use_item;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1] 0x78cedefa80
	bool is_ready_access;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 0x1] 0x78cedefb00
	bool is_assassing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 0x1] 0x78cedefb80
	bool is_be_assassing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1] 0x78cedefc00
	bool is_qinggong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 0x1] 0x78cedefc80
	bool is_qing_gong_end;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 0x1] 0x78cedefd00
	bool is_injury;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3af, Size: 0x1] 0x78cedefd80
	bool is_death;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1] 0x78cedefe00
	bool is_parachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 0x1] 0x78cedefe80
	bool is_gliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 0x1] 0x78cedeff00
	bool is_on_plane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 0x1] 0x78cedeff80
	bool is_in_fight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1] 0x78cedee780
	bool is_stealthing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1] 0x78cedee800
	bool is_playaction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 0x1] 0x78cedee880
	float keeping_current_time;//[Offset: 0x3b8, Size: 0x4] 0x78cedee900
	float keeping_full_time;//[Offset: 0x3bc, Size: 0x4] 0x78cedee980
	enum keep_interactive_type;//[Offset: 0x3c0, Size: 0x1] 0x78cedd5060
	int int_keep_interactive_type;//[Offset: 0x3c4, Size: 0x4] 0x78cedeea80
	float dying_hp;//[Offset: 0x3c8, Size: 0x4] 0x78cedeeb00
	float delta_time_x;//[Offset: 0x3cc, Size: 0x4] 0x78cedeeb80
	Rotator CharacterRotation;//[Offset: 0x3d0, Size: 0xc] 0x78cedeec00
	bool horse_use_bip001;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1] 0x78cedeec80
	AnimMontage* skill_animation_;//[Offset: 0x3e0, Size: 0x8] 0x78cedeed00
	bool be_attack_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1] 0x78cedeed80
	int be_attack_type_;//[Offset: 0x3ec, Size: 0x4] 0x78cedeee00
	float be_attack_angle_;//[Offset: 0x3f0, Size: 0x4] 0x78cedeee80
	bool be_attack_animation_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1] 0x78cedeef00
	bool be_attack_animation_play_end_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 0x1] 0x78cedeef80
	bool be_block_attack_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f6, Size: 0x1] 0x78cedef000
	float be_block_attack_time_;//[Offset: 0x3f8, Size: 0x4] 0x78cedef080
	float be_block_attack_const_time_;//[Offset: 0x3fc, Size: 0x4] 0x78cedef100
	int lian_tiao_index_;//[Offset: 0x400, Size: 0x4] 0x78cedef180
	bool lian_tiao_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1] 0x78cedef200
	bool client_first_be_attack_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 0x1] 0x78cedef280
	bool shanbi_flag_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 0x1] 0x78cedef300
	float WuXia_Montage_Play(AnimMontage* MontageToPlay, float Rate, float delay_time, FName section_name);// 0x8a873f8 0x78cee0dd00
	void UpdateAnimVariables();// 0x84e6be8 0x78cee0dde0
	void TriggerAnimNotifyEnterBlockBeAttack();// 0x8a873f8 0x78cee0dec0
	void SetSexInfo();// 0x84e6bfc 0x78cee0dfa0
	void SetMeshRotation();// 0x84e6bc0 0x78cee0e080
	bool SetComponents();// 0x84e6c10 0x78cee0e160
	void SetCharacterRotation(Rotator TargetRotation, float InterpSpeed, bool bInputPin);// 0x84e6a78 0x78cee0e240
	void SetCharacterMeshComponentRotation(Rotator Rotation);// 0x84e6c50 0x78cee0e320
	void SetActorRotation(Rotator Rotation);// 0x8a873f8 0x78cee0e400
	Rotator MeshRotation(bool isSwiming, enum PlayerState, enum playerMotionState, enum playerFightState, bool inAir, bool isMoving, bool isSprint, bool isFreeView, Vector InVelocity, Rotator actorRotation, Rotator charactrtRotation, float dt, WuXiaXBaseCharacter* testObj);// 0x84e6cf8 0x78cee0e4e0
	void ManageCharacterRotation();// 0x84e6bd4 0x78cee0e5c0
	bool CurrentMontageSlotPlay(FString slot_node_name);// 0x84e7268 0x78cee0e6a0
	bool CurrentGroupMontageSlotPlay(FString group_name);// 0x84e7158 0x78cee0adc0
	void CE_HuoHuaEffect();// 0x8a873f8 0x78cee0aea0
	void Be_PlayerRebirth();// 0x8a873f8 0x78cee0af80

--------------------------------
Class: WuXiaHorseAreaBox.Actor.Object
	float area_min_chance_;//[Offset: 0x224, Size: 0x4] 0x78ce624c80
	float area_max_chance_;//[Offset: 0x228, Size: 0x4] 0x78ce624d00
	BoxComponent* box_collision_;//[Offset: 0x230, Size: 0x8] 0x78ce624d80

--------------------------------
Class: WuXiaHorseSpawnPoint.Actor.Object
	int[] spawn_horse_ids_;//[Offset: 0x220, Size: 0x10] 0x78cedd48e0
	bool must_spawn_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78ce624a00
	bool use_self_spawnid_;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x78ce624a80

--------------------------------
Class: WuXiaSingleton.Object
	RetainWidgetConfig* RetainWidgetConfig;//[Offset: 0x28, Size: 0x8] 0x78ce629680

--------------------------------
Class: WuXiaXBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void WriteConfigInt(FString Section, FString Key, const int Value);// 0x8503070 0x78ce63fba0
	static void WriteConfigFloat(FString Section, FString Key, const float Value);// 0x8502d38 0x78ce63fc80
	static void WriteConfigBool(FString Section, FString Key, const bool Value);// 0x85029f8 0x78ce63fd60
	static void UpdatePlayerMeridianLv(Object* WorldContextObject, int[] IDs, int[] lvs);// 0x8501f68 0x78ce63fe40
	static void UpdatePlayerDataByType(Object* WorldContextObject, enum Type, int Num);// 0x8502240 0x78ce63ff20
	static void TouchStarted(out TouchEvent TouchEvent, PointerEvent PointerEvent);// 0x8504c34 0x78ce63caa0
	static float TouchPrecise();// 0x8504f60 0x78ce63cb80
	static void TouchMoved(out TouchEvent TouchEvent, PointerEvent PointerEvent);// 0x8504924 0x78ce63cc60
	static float TouchLongTime();// 0x8504f44 0x78ce63cd40
	static bool TouchEnded(out TouchEvent TouchEvent);// 0x85047b4 0x78ce63ce20
	static void TextBlockFitFontSize(TextBlock* TextBlock, float LimitHeight, int StartFontSize, int LimitFontSize, bool bIsToSmall);// 0x84fa424 0x78ce63cf00
	static void TestQuitServer(Object* WorldContextObject);// 0x84fb530 0x78ce63cfe0
	static void SwitchQualityTrigger(Object* WorldContextObject, FString triggername, int Open);// 0x8500acc 0x78ce63d0c0
	static void StopVoice(Object* WorldContextObject, enum VoiceContent);// 0x84ffe4c 0x78ce63d1a0
	static void StopUISoundEffect(Object* WorldContextObject, enum UISoundEffectContent);// 0x8500068 0x78ce63d280
	static void StopSignSoundEffect(Object* WorldContextObject, enum SignSoundEffectContent);// 0x84ff5dc 0x78ce63d360
	static void StopHeroSound(Object* WorldContextObject, int SoundIndex);// 0x85003c8 0x78ce63d440
	static void StopGuideVoice(Object* WorldContextObject, enum GuideVoiceContent);// 0x84ffc30 0x78ce63d520
	static void StopBattleSoundEffect(Object* WorldContextObject, enum BattleSoundEffectContent);// 0x84ffa14 0x78ce63d600
	static void StopBackgroundMusic(Object* WorldContextObject, enum BackgroundMusicContent);// 0x84ff7f8 0x78ce63d6e0
	static void SplitRichTextForPrint(out const FText RichText, out FText[] SubRichTexts);// 0x84faa6c 0x78ce63d7c0
	static <int,int> SortIntMap(<int,int> Map, bool bAsc, bool keysort);// 0x8501508 0x78ce63d8a0
	static UserWidgetBase* SkipUIByResetCamera(Object* WorldContextObject, enum UIOpen, enum UIClose, FString PresetName, FString CameraName, FString Params, out const delegate callback);// 0x84fd4f8 0x78ce63d980
	static UserWidgetBase* SkipUI(Object* WorldContextObject, enum UIOpen, enum UIClose, FString Params, out const delegate callback);// 0x84fd7a8 0x78ce63da60
	static void ShowStoreReviewAlert(Object* WorldContextObject);// 0x85072d8 0x78ce63db40
	static UserWidgetBase* ShowRewardSequencially(Object* WorldContextObject, out const RewardInfo[] Info);// 0x84fc35c 0x78ce63dc20
	static UserWidgetBase* ShowReward(Object* WorldContextObject, out const RewardInfo[] Info);// 0x84fc468 0x78ce63dd00
	static UserWidgetBase* ShowImage(Object* WorldContextObject, out const ImageShowWidgetInfo[] Info);// 0x84fc250 0x78ce63dde0
	static void SetWuXiaXResolutionZoom(int Value);// 0x850099c 0x78ce63dec0
	static void SetWuXiaXQuality(Object* WorldContextObject, int Level);// 0x8500e58 0x78ce63dfa0
	static void SetWuXiaXFPS(int Level);// 0x8500a34 0x78ce63e080
	static void SetStaticLevelVisible(const Object* WorldContextObject, FString PackageName, bool IsVisible);// 0x8505120 0x78ce63e160
	static void SetScalablitySection(FString Section, int Value);// 0x8500f3c 0x78ce63e240
	static void SetQualityCheckHall(Object* WorldContextObject, FString SectionName, int Level);// 0x8500680 0x78ce63e320
	static void SetOnlineTimeStamp(int64 Time, WuXiaXGameInstance* game_instance);// 0x84fbb4c 0x78ce63e400
	static void SetListViewScrollbarVis(ListView* ListView, enum vis);// 0x8505ffc 0x78ce63e4e0
	static void SetListItems(ListView* ListView, out const Object*[] InListItems);// 0x850648c 0x78ce63e5c0
	static void SetItemSelection(ListView* ListView, Object* Item, bool bSelected);// 0x8506358 0x78ce63e6a0
	static void SetImageToGrayscale(Image* Image, Texture* Texture, float Grey);// 0x8501d40 0x78ce63adc0
	static bool SetImageTexture(Image* Target, FString texturePath);// 0x84fdb90 0x78ce63aea0
	static void SetHDRSwitch(Object* WorldContextObject, bool Value);// 0x84fb168 0x78ce63af80
	static void SetDynamicLevellVisible(const Object* WorldContextObject, FString PackageName, bool IsVisible, LatentActionInfo LatentInfo);// 0x8504f7c 0x78ce63b060
	static void SetBrushSprite(Image* Target, PaperSprite* Sprite, bool bMatchSize);// 0x85071a4 0x78ce63b140
	static void SendBeforeReceipt();// 0x8507704 0x78ce63b220
	static void ScrollItemIntoView(ListView* ListView, Object* Item);// 0x8506278 0x78ce63b300
	static void SavePSO(int Mode);// 0x850107c 0x78ce63b3e0
	static bool SaveOperationSetting(<FString,Vector> settingMap);// 0x85032f4 0x78ce63b4c0
	static void SaveFirstPayNotShowTime(FString Time);// 0x8507880 0x78ce63b5a0
	static void SaveFirstOpenGame();// 0x85079d4 0x78ce63b680
	static void RestartApplication();// 0x84faf20 0x78ce63b760
	static void ResetShowStoreReviewAlert();// 0x850764c 0x78ce63b840
	static void ReleaseScrollBox(ScrollBox* ScrollBox);// 0x85037a0 0x78ce63b920
	static void ReleaseHallWidgetDataAsset();// 0x8501b20 0x78ce63ba00
	static bool RegexMatch(const FString text, FString reg);// 0x84fe120 0x78ce63bae0
	static void Recharge(Object* WorldContextObject);// 0x8507b04 0x78ce63bbc0
	static SafeZoneInfo ReadSafeZoneInfosLite();// 0x8503494 0x78ce63bca0
	static SafeZoneInfo ReadSafeZoneInfos();// 0x8503500 0x78ce63bd80
	static <FString,Vector> ReadOperationSetting();// 0x8503208 0x78ce63be60
	static int ReadConfigInt(FString Section, FString Key, int DefaultValue);// 0x8502ed0 0x78ce63bf40
	static float ReadConfigFloat(FString Section, FString Key, float DefaultValue);// 0x8502b98 0x78ce63c020
	static bool ReadConfigBool(FString Section, FString Key, bool DefaultValue);// 0x8502844 0x78ce63c100
	static void QuitServerGame(Object* WorldContextObject);// 0x84fc574 0x78ce63c1e0
	static void PositionByAnchor(Object* WorldContextObject, Geometry Geometry, Vector2D Anchors, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x8506c94 0x78ce63c2c0
	static void PlayVoice(Object* WorldContextObject, enum VoiceContent, bool bIsIgnorePlaying);// 0x84fff30 0x78ce63c3a0
	static void PlayUISoundEffect(Object* WorldContextObject, enum UISoundEffectContent, bool bIsIgnorePlaying);// 0x850014c 0x78ce63c480
	static void PlaySignSoundEffect(Object* WorldContextObject, enum SignSoundEffectContent, bool bIsIgnorePlaying);// 0x84ff6c0 0x78ce63c560
	static int PlayHeroSound(Object* WorldContextObject, int HeroId, enum SoundType, bool bIsIgnorePlaying, int SkinId);// 0x85004ac 0x78ce63c640
	static void PlayGuideVoice(Object* WorldContextObject, enum GuideVoiceContent, bool bIsIgnorePlaying);// 0x84ffd14 0x78ce63c720
	static void PlayBattleSoundEffect(Object* WorldContextObject, enum BattleSoundEffectContent, bool bIsIgnorePlaying);// 0x84ffaf8 0x78ce63c800
	static void PlayBackgroundMusic(Object* WorldContextObject, enum BackgroundMusicContent, bool bIsIgnorePlaying);// 0x84ff8dc 0x78ce63c8e0
	static enum PlatformType();// 0x8501464 0x78ce63c9c0
	static UserWidgetBase* OpenUI(Object* WorldContextObject, enum UIKey);// 0x84fda9c 0x78ce6390e0
	static UserWidgetBase* OpenTip(Object* WorldContextObject, FString Info);// 0x84fc60c 0x78ce6391c0
	static UserWidgetBase* OpenMessageBoxRichText(Object* WorldContextObject, FString title, out const MessageBoxContentInfo[] MessageBoxContentInfo, bool hasCancel, out const delegate callback);// 0x84fc9c4 0x78ce6392a0
	static UserWidgetBase* OpenMessageBoxButtonText(Object* WorldContextObject, FString title, FString Info, bool hasCancel, FString confirmText, FString cancelText, out const delegate callback);// 0x84fc70c 0x78ce639380
	static UserWidgetBase* OpenMessageBox(Object* WorldContextObject, FString title, FString Info, bool hasCancel, out const delegate callback);// 0x84fcc90 0x78ce639460
	static void OnDragStarted(Widget* WidgetDetectingDrag, out DragEvent DragEvent);// 0x85053b8 0x78ce639540
	static void OnDragReleased(out DragEvent DragEvent);// 0x8505264 0x78ce639620
	static bool NotEqual_RewardItemRewardItem(RewardItem A, RewardItem B);// 0x84f9538 0x78ce639700
	static bool NotEqual_RechargeInfoRechargeInfo(RechargeInfo A, RechargeInfo B);// 0x84f9990 0x78ce6397e0
	static bool NotEqual_PayGiftItemInfoPayGiftItemInfo(PayGiftItemInfo A, PayGiftItemInfo B);// 0x84f9050 0x78ce6398c0
	static bool NotEqual_PayGiftInfoPayGiftInfo(PayGiftInfo A, PayGiftInfo B);// 0x84f8a90 0x78ce6399a0
	static bool NotEqual_HeroDataHeroData(HeroData A, HeroData B);// 0x84f9e68 0x78ce639a80
	static void NearestInFloatArray(float CheckValue, out const float[] FloatValues, out int NearestIndex, out float NearestValue);// 0x84fa1c0 0x78ce639b60
	static FString MaskFilterWords(Object* WorldContextObject, FString str);// 0x84fb2ec 0x78ce639c40
	static PointerEvent MakePointerEvent(PointerEvent PointerEvent, Vector2D Position);// 0x8503838 0x78ce639d20
	static ButtonStyle MakeButtonStyle(Button* Button, bool State);// 0x8506f9c 0x78ce639e00
	static Texture2D* LoadTexture2D(FString Name);// 0x8501c44 0x78ce639ee0
	static MaterialInstance* LoadMaterialInstance(FString Path);// 0x8501b48 0x78ce639fc0
	static bool LoadJsonAsBulletinTable(FString JsonStr, out BulletinItem Item);// 0x84fbe54 0x78ce63a0a0
	static void LoadHDRAndLDRLevel(Object* WorldContextObject);// 0x84fb0d0 0x78ce63a180
	static void LoadHallWidgetDataAsset();// 0x8501b34 0x78ce63a260
	static bool IsWuXiaXValidDevice(Object* WorldContextObject);// 0x8500c5c 0x78ce63a340
	static bool IsVisibleInView(Widget* Widget);// 0x8506be8 0x78ce63a420
	static bool IsValidTouch(TouchEvent TouchEvent);// 0x8504568 0x78ce63a500
	static bool IsTouchMoved(PointerEvent PointerEvent);// 0x8504358 0x78ce63a5e0
	static bool IsPlayDedicatedServer();// 0x8501498 0x78ce63a6c0
	static bool IsPackageInstalled(FString PackageName);// 0x84fb948 0x78ce63a7a0
	static bool IsModuleInTopLayer(Object* WorldContextObject, enum UIKey);// 0x84fd08c 0x78ce63a880
	static bool IsLongTouched(TouchEvent TouchEvent);// 0x850410c 0x78ce63a960
	static bool IsInvalidDrag(DragEvent DragEvent, PointerEvent PointerEvent);// 0x8505554 0x78ce63aa40
	static bool IsInOneDay(WuXiaXGameInstance* game_instance, bool isTask);// 0x84fbc60 0x78ce63ab20
	static bool IsHeroSoundPlaying(Object* WorldContextObject, int HeroId, enum SoundType);// 0x8500284 0x78ce63ac00
	static bool IsEditorMode();// 0x85014d0 0x78ce63ace0
	static bool IsDragStarted(DragEvent DragEvent);// 0x85058f4 0x78ce637400
	static bool IsDragDetect(DragEvent DragEvent);// 0x8505ad0 0x78ce6374e0
	static bool IsDoubleTouched(TouchEvent TouchEvent);// 0x8503ec0 0x78ce6375c0
	static bool IsDigit(FString Account);// 0x8503630 0x78ce6376a0
	static bool IsDebugCommandValue(FString Command, int Value);// 0x8501114 0x78ce637780
	static bool IsDebugCommand(FString Command);// 0x8501260 0x78ce637860
	static bool IsBureau(Object* WorldContextObject);// 0x84fe83c 0x78ce637940
	static bool IsAlnum(FString Account);// 0x85036e8 0x78ce637a20
	static void InitializeQualityLevel(Object* WorldContextObject);// 0x8500904 0x78ce637b00
	static void InitHDRSwitch(Object* WorldContextObject);// 0x84fb254 0x78ce637be0
	static bool HasMouseCapture(Widget* Widget);// 0x8503e14 0x78ce637cc0
	static UserWidgetBase* GotoUI(Object* WorldContextObject, enum UIKey, enum CloseLayer);// 0x84fd22c 0x78ce637da0
	static void GoToTapTapAppsMarket(FString AppID);// 0x84fba00 0x78ce637e80
	static int GetWuXiaXQualityLevel(Object* WorldContextObject);// 0x8500db0 0x78ce637f60
	static int GetWuXiaXQualityBenchmarkLevel(Object* WorldContextObject);// 0x8500d08 0x78ce638040
	static int GetWeekth(DateTime InTime);// 0x85025b8 0x78ce638120
	static int GetWeekDelta(DateTime StartDate, DateTime EndDate);// 0x84fae3c 0x78ce638200
	static float GetVoiceChatVolumeRecordDefaultValue();// 0x84ff19c 0x78ce6382e0
	static float GetVoiceChatVolumePlayDefaultValue();// 0x84ff0b8 0x78ce6383c0
	static FString GetVoiceChatRecordVolumeLabel();// 0x84ff1d0 0x78ce6384a0
	static FString GetVoiceChatPlayVolumeLabel();// 0x84ff0ec 0x78ce638580
	static FString GetVoiceChatInHallSpeakLabel();// 0x84ff008 0x78ce638660
	static int GetVoiceChatInHallSpeakDefaultValue();// 0x84fefd4 0x78ce638740
	static FString GetVoiceChatInHallListenLabel();// 0x84fef24 0x78ce638820
	static int GetVoiceChatInHallListenDefaultValue();// 0x84feef0 0x78ce638900
	static FString GetVoiceChatInGameSpeakLabel();// 0x84ff398 0x78ce6389e0
	static int GetVoiceChatInGameSpeakDefaultValue();// 0x84ff364 0x78ce638ac0
	static FString GetVoiceChatInGameListenLabel();// 0x84ff2b4 0x78ce638ba0
	static int GetVoiceChatInGameListenDefaultValue();// 0x84ff280 0x78ce638c80
	static int GetUserSetting(Object* WorldContextObject, enum Type);// 0x8502750 0x78ce638d60
	static UserWidgetBase* GetUI(Object* WorldContextObject, enum UIKey);// 0x84fd9a8 0x78ce638e40
	static bool GetTouchState(Object* WorldContextObject, int PointerIndex);// 0x8503d1c 0x78ce638f20
	static bool GetTouchScreenPosition(Object* WorldContextObject, int PointerIndex, out Vector2D ScreenPosition);// 0x8503bd4 0x78ce639000
	static int64 GetTimeZoneTimestamp(out const int64 Timestamp);// 0x84fac58 0x78ce635720
	static int64 GetTimeSeconds();// 0x8506bb4 0x78ce635800
	static int64 GetTimeMillseconds();// 0x8506b80 0x78ce6358e0
	static SpriteAtlasData GetSpriteAtlasData(PaperSprite* Sprite);// 0x85070f4 0x78ce6359c0
	static enum GetSkipTopUIKey(Object* WorldContextObject);// 0x84fd184 0x78ce635aa0
	static UserWidget* GetSelectWidget(ListView* ListView, const Object* Item);// 0x85060e0 0x78ce635b80
	static Object* GetSelectedItem(ListView* ListView);// 0x85061d0 0x78ce635c60
	static float GetResolutionFromQuality(Object* WorldContextObject, int Level);// 0x8500810 0x78ce635d40
	static void GetRemainTimeByExpireTime(int64 expire_time, out int64 remainTime, out int Day, out int Hour, out int Minute, out int second);// 0x84fdce8 0x78ce635e20
	static FString GetQualitySetShadowTriggerLabel();// 0x84fe9cc 0x78ce635f00
	static int GetQualitySetShadowTriggerDefaultValue();// 0x84fe998 0x78ce635fe0
	static int GetQualitySetResolutionZoomDefaultValue();// 0x84fea7c 0x78ce6360c0
	static FString GetQualitySetResolutionZoom();// 0x84feab0 0x78ce6361a0
	static FString GetQualitySetResolutionLabel();// 0x84fed5c 0x78ce636280
	static int GetQualitySetResolutionDefaultValue();// 0x84fed28 0x78ce636360
	static FString GetQualitySetLevelLabel();// 0x84fee40 0x78ce636440
	static int GetQualitySetLevelDefaultValue();// 0x84fee0c 0x78ce636520
	static FString GetQualitySetFPSLabel();// 0x84fec78 0x78ce636600
	static int GetQualitySetFPSDefaultValue();// 0x84fec44 0x78ce6366e0
	static FString GetQualitySetAALabel();// 0x84feb94 0x78ce6367c0
	static int GetQualitySetAADefaultValue();// 0x84feb60 0x78ce6368a0
	static PointerEvent GetPointerEvent(DragEvent DragEvent);// 0x8505cac 0x78ce636980
	static int GetPlayerMeridianLvById(Object* WorldContextObject, int ID);// 0x850214c 0x78ce636a60
	static void GetPlayerIdAndName(out int ID, out FString Name);// 0x85079e8 0x78ce636b40
	static int GetPlayerDataByType(Object* WorldContextObject, enum Type);// 0x8502370 0x78ce636c20
	static int64 GetOnlineTimeStamp(WuXiaXGameInstance* game_instance);// 0x84fbaa4 0x78ce636d00
	static bool GetObjectToMemoryFull(Object* WorldContextObject, out const HTTPBPResponseFullDelegate BPResponseDelegate, FString URL);// 0x84fc0cc 0x78ce636de0
	static bool GetObjectToMemoryComplete(Object* WorldContextObject, out const HTTPBPResponseCompleteDelegate BPResponseDelegate, FString URL);// 0x84fbf78 0x78ce636ec0
	static int64 GetNowTimeStamp();// 0x84fbc2c 0x78ce636fa0
	static DateTime GetNowFromStamp(int64 Timestamp);// 0x84fe2c0 0x78ce637080
	static LuaObjectManager* GetLuaObjectManager(Object* Context);// 0x84fa740 0x78ce637160
	static LuaNetMessageHandler* GetLuaNetMessageHandler(Object* Context);// 0x84fa698 0x78ce637240
	static LuaConfigTableLoader* GetLuaConfigTableManager(Object* Context);// 0x84fa5f0 0x78ce637320
	static Timespan GetLeftTime(int64 TargetTime, out bool OverTime);// 0x84fe368 0x78ce633a40
	static SlateColor GetItemQualityColor(int Level);// 0x84fe6a8 0x78ce633b20
	static FString GetHotUpdateDownloadURL(Object* WorldContextObject);// 0x84faf34 0x78ce633c00
	static FString GetHDRSwitchLabel();// 0x84fe8e8 0x78ce633ce0
	static void GetGuideVoiceText(Object* WorldContextObject, enum GuideVoiceContent, out FText GuideVoiceText);// 0x84ff448 0x78ce633dc0
	static WuXiaXGameInstance* GetGameInstance(Object* WorldContextObject);// 0x84fe078 0x78ce633ea0
	static FString GetFirstPayNotShowTime();// 0x85077d0 0x78ce633f80
	static FString GetFirstOpenGame();// 0x8507924 0x78ce634060
	static FString GetFileMD5(FString Path);// 0x84fbd60 0x78ce634140
	static enum GetDownloadSourceType(Object* WorldContextObject);// 0x84fb028 0x78ce634220
	static ClientNetMessageHandle* GetClientNetMessageHandle(Object* WorldContextObject);// 0x84fdf28 0x78ce634300
	static ClientLoginHUD* GetClientLoginHUD(Object* WorldContextObject);// 0x84fdfd0 0x78ce6343e0
	static CharacterShowManager* GetCharacterShowDirector(Object* WorldContextObject);// 0x84fcfe4 0x78ce6344c0
	static int GetCacheUserSetting(Object* WorldContextObject, enum Type);// 0x850265c 0x78ce6345a0
	static void GenerateLandspaceGUID(Landscape* Landscape);// 0x8506588 0x78ce634680
	static FString FormatTime(float second, bool fullshow);// 0x8506a38 0x78ce634760
	static FString FilterChacter(out const FText InText);// 0x8502464 0x78ce634840
	static FString ExportPbtDataFile(FString ServerIp, const int ServerPort, FString LoginIp, const int LoginPort, FString ChatIp, const int ChatPort, FString PbtPath, out const FString[] FileList);// 0x84fb5c8 0x78ce634920
	static bool EqualEqual_RewardItemRewardItem(RewardItem A, RewardItem B);// 0x84f9764 0x78ce634a00
	static bool EqualEqual_RechargeInfoRechargeInfo(RechargeInfo A, RechargeInfo B);// 0x84f9bfc 0x78ce634ae0
	static bool EqualEqual_PayGiftItemInfoPayGiftItemInfo(PayGiftItemInfo A, PayGiftItemInfo B);// 0x84f92c4 0x78ce634bc0
	static bool EqualEqual_PayGiftInfoPayGiftInfo(PayGiftInfo A, PayGiftInfo B);// 0x84f8d70 0x78ce634ca0
	static bool EqualEqual_HeroDataHeroData(HeroData A, HeroData B);// 0x84fa014 0x78ce634d80
	static FString EncodeUrl(FString URL);// 0x8507d3c 0x78ce634e60
	static FString EncodeString(FString src);// 0x85019e0 0x78ce634f40
	static LevelStreamingDynamic* DynamicLoadLevel(Object* WorldContextObject, int UniqueId, FString LevelName, const Vector Location, const Rotator Rotation);// 0x8506620 0x78ce635020
	static bool DumpSafeZoneInfos(out const SafeZoneInfo[] safezoneinfos);// 0x850356c 0x78ce635100
	static PaperSprite* DirectGetSprite(FString Name);// 0x8501e6c 0x78ce6351e0
	static void DeleteReceipt(FString ReceiptData);// 0x8507660 0x78ce6352c0
	static FString DecodeString(FString encode);// 0x85018a0 0x78ce6353a0
	static LevelStreamingDynamic* CreateStreamInstance(World* World, int UniqueId, out FString LongPackageName, const Vector Location, const Rotator Rotation);// 0x8506854 0x78ce635480
	static void CreateItemInfoTip(Object* WorldContextObject, int ID, Widget* Widget);// 0x84fad0c 0x78ce635560
	static void CloseVirtualKeyboard();// 0x8507af0 0x78ce635640
	static bool CloseUI(Object* WorldContextObject, enum UIKey, bool Destroy, UserWidgetBase* CloseWidget);// 0x84fd36c 0x78ce631d60
	static void ClipboardCopy(FString str);// 0x84fe468 0x78ce631e40
	static Vector2D ClampRect(Vector2D Position, Vector2D Min, Vector2D Max);// 0x8506e70 0x78ce631f20
	static bool CheckWidgetClickInterval(Object* WorldContextObject, Widget* Widget, float ClickInterval);// 0x84fa92c 0x78ce632000
	static void CheckShowStoreReviewAlertLeitai(Object* WorldContextObject, out const GameResultData MatchResult);// 0x8507370 0x78ce6320e0
	static void CheckShowStoreReviewAlert(Object* WorldContextObject, out const GameStatisticInfo GameStatisticInfo);// 0x8507464 0x78ce6321c0
	static void CheckRecharge(Object* WorldContextObject, RechargeInfo Info);// 0x8507b9c 0x78ce6322a0
	static bool CheckIndexClickInterval(Object* WorldContextObject, int index, float ClickInterval);// 0x84fa7e8 0x78ce632380
	static bool CheckFilterWords(Object* WorldContextObject, FString str);// 0x84fb42c 0x78ce632460
	static bool CheckCanPressItem(FString ProductId);// 0x8507718 0x78ce632540
	static bool CharacterIsInJail(WuXiaXBaseCharacter* Character);// 0x84fa378 0x78ce632620
	static int CalcitudeDis(Object* WorldContextObject, float Longitude, float Latitude);// 0x84fe56c 0x78ce632700
	static void AndroidExit();// 0x84fa364 0x78ce6327e0
	static bool AddHeadBorder(Object* WorldContextObject, Widget* Target, int borderId);// 0x84fcea4 0x78ce6328c0
	static void AddDebugCommand(FString Command);// 0x8501360 0x78ce6329a0

--------------------------------
Class: ImageShowWidgetInfo
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78cee5ea20
	int ID;//[Offset: 0x4, Size: 0x4] 0x78cefbe800
	int Num;//[Offset: 0x8, Size: 0x4] 0x78cefbe880

--------------------------------
Class: SafeZoneInfo
	Vector SafeZoneScale;//[Offset: 0x0, Size: 0xc] 0x78cefcd000
	Vector SafeZonePos;//[Offset: 0xc, Size: 0xc] 0x78cefcd080

--------------------------------
Class: MessageBoxContentInfo
	FString Content;//[Offset: 0x0, Size: 0x10] 0x78cefc7880
	RewardItem RewardItem;//[Offset: 0x10, Size: 0x78] 0x78cefc7900

--------------------------------
Class: DragEvent
	enum State;//[Offset: 0x0, Size: 0x1] 0x78cefd4700
	PointerEvent PointerEvent;//[Offset: 0x8, Size: 0x70] 0x78cefe7a80

--------------------------------
Class: BulletinItem
	int Show;//[Offset: 0x0, Size: 0x4] 0x78cefbcb80
	int ID;//[Offset: 0x4, Size: 0x4] 0x78cefbcc00
	int Type;//[Offset: 0x8, Size: 0x4] 0x78cefbcc80
	FString title;//[Offset: 0x10, Size: 0x10] 0x78cefbcd00
	FString Body;//[Offset: 0x20, Size: 0x10] 0x78cefbcd80

--------------------------------
Class: SpriteAtlasData
	Vector2D SourceUV;//[Offset: 0x0, Size: 0x8] 0x78cefe7c00
	Vector2D SizeUV;//[Offset: 0x8, Size: 0x8] 0x78cefe7c80
	Vector2D Dimensions;//[Offset: 0x10, Size: 0x8] 0x78cefe7d00
	Texture2D* Texture;//[Offset: 0x18, Size: 0x8] 0x78cefe7d80

--------------------------------
Class: HTTPBPResponseFullDelegate
	delegate HttpRequestCompleteDelegate;//[Offset: 0x0, Size: 0x10] 0x78cefea480
	delegate HttpRequestProgressDelegate;//[Offset: 0x10, Size: 0x10] 0x78cefea500
	delegate HttpRequestHeaderReceivedDelegate;//[Offset: 0x20, Size: 0x10] 0x78cefe8480

--------------------------------
Class: HTTPBPResponseCompleteDelegate
	delegate HttpRequestCompleteDelegate;//[Offset: 0x0, Size: 0x10] 0x78cefe8500

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x220, Size: 0x8] 0x78ce784400
	Guid LandscapeGuid;//[Offset: 0x228, Size: 0x10] 0x78ce784480
	IntPoint LandscapeSectionOffset;//[Offset: 0x238, Size: 0x8] 0x78ce784500
	int MaxLODLevel;//[Offset: 0x240, Size: 0x4] 0x78ce784580
	float LODDistanceFactor;//[Offset: 0x244, Size: 0x4] 0x78ce784600
	byte LODFalloff;//[Offset: 0x248, Size: 0x1] 0x78ce784680
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x24c, Size: 0x4] 0x78ce784700
	bool bForceSkipStaticMeshLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1] 0x78ce784780
	float LOD0ScreenSize;//[Offset: 0x254, Size: 0x4] 0x78ce784800
	float LOD0DistributionSetting;//[Offset: 0x258, Size: 0x4] 0x78ce784880
	float LODDistributionSetting;//[Offset: 0x25c, Size: 0x4] 0x78ce784900
	float TessellationComponentScreenSize;//[Offset: 0x260, Size: 0x4] 0x78ce784980
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1] 0x78ce784a00
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x268, Size: 0x4] 0x78ce784a80
	int OccluderGeometryLOD;//[Offset: 0x26c, Size: 0x4] 0x78ce784b00
	int StaticLightingLOD;//[Offset: 0x270, Size: 0x4] 0x78ce784b80
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x278, Size: 0x8] 0x78ce784c00
	float StreamingDistanceMultiplier;//[Offset: 0x280, Size: 0x4] 0x78ce784c80
	MaterialInterface* LandscapeMaterial;//[Offset: 0x288, Size: 0x8] 0x78ce784d00
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2b0, Size: 0x8] 0x78ce784d80
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x2b8, Size: 0x10] 0x78ce727400
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78ce784e80
	byte MeshHolesMaxLod;//[Offset: 0x2c9, Size: 0x1] 0x78ce784f00
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2d0, Size: 0x10] 0x78ce7274a0
	int VirtualTextureNumLods;//[Offset: 0x2e0, Size: 0x4] 0x78ce785000
	int VirtualTextureLodBias;//[Offset: 0x2e4, Size: 0x4] 0x78ce785080
	enum VirtualTextureRenderPassType;//[Offset: 0x2e8, Size: 0x1] 0x78ce727540
	float NegativeZBoundsExtension;//[Offset: 0x2ec, Size: 0x4] 0x78ce785180
	float PositiveZBoundsExtension;//[Offset: 0x2f0, Size: 0x4] 0x78ce785200
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x2f8, Size: 0x10] 0x78ce7275e0
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x308, Size: 0x10] 0x78ce727680
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x318, Size: 0x10] 0x78ce727720
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1] 0x78ce783300
	float StaticLightingResolution;//[Offset: 0x390, Size: 0x4] 0x78ce783380
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 0x1] 0x78ce783400
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 0x1] 0x78ce783480
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x394, Size: 0x1] 0x78ce783500
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x394, Size: 0x1] 0x78ce783580
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x394, Size: 0x1] 0x78ce783600
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x394, Size: 0x1] 0x78ce783680
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x394, Size: 0x1] 0x78ce783700
	LightingChannels LightingChannels;//[Offset: 0x395, Size: 0x1] 0x78ce783780
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x396, Size: 0x1] 0x78ce783800
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x396, Size: 0x1] 0x78ce783880
	enum CustomDepthStencilWriteMask;//[Offset: 0x397, Size: 0x1] 0x78ce7277c0
	int CustomDepthStencilValue;//[Offset: 0x398, Size: 0x4] 0x78ce783980
	float LDMaxDrawDistance;//[Offset: 0x39c, Size: 0x4] 0x78ce783a00
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3a0, Size: 0x18] 0x78ce783a80
	int CollisionMipLevel;//[Offset: 0x3b8, Size: 0x4] 0x78ce783b00
	int SimpleCollisionMipLevel;//[Offset: 0x3bc, Size: 0x4] 0x78ce783b80
	float CollisionThickness;//[Offset: 0x3c0, Size: 0x4] 0x78ce783c00
	BodyInstance BodyInstance;//[Offset: 0x3c8, Size: 0x150] 0x78ce783c80
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1] 0x78ce783d00
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x518, Size: 0x1] 0x78ce783d80
	int ComponentSizeQuads;//[Offset: 0x51c, Size: 0x4] 0x78ce783e00
	int SubsectionSizeQuads;//[Offset: 0x520, Size: 0x4] 0x78ce783e80
	int NumSubsections;//[Offset: 0x524, Size: 0x4] 0x78ce783f00
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 0x1] 0x78ce783f80
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x528, Size: 0x1] 0x78ce784000
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1] 0x78ce784080
	enum NavigationGeometryGatheringMode;//[Offset: 0x52a, Size: 0x1] 0x78ce727860
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52b, Size: 0x1] 0x78ce784180
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1] 0x78ce784200
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x530, Size: 0x50] 0x78cee14540
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x9d814d4 0x78ce757e80
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x9d815c4 0x78ce757f60
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x9d813e0 0x78ce758040
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0x9d81288 0x78ce758120
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x9d81a90 0x78ce758200
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0x9d816b4 0x78ce7582e0
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x9d81be8 0x78ce7583c0
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x9d81b38 0x78ce7584a0
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x9d81d50 0x78ce758580
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x9d81e00 0x78ce758660
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x9d81ca0 0x78ce758740

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x440, Size: 0x10] 0x78ce728940
	LandscapeSplineSegment*[] Segments;//[Offset: 0x450, Size: 0x10] 0x78ce7289e0
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x460, Size: 0x10] 0x78ce728a80
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x9d8503c 0x78ce75a880

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x78ce789e00
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x78ce789e80
	float Width;//[Offset: 0x40, Size: 0x4] 0x78ce789f00
	float LayerWidthRatio;//[Offset: 0x44, Size: 0x4] 0x78ce789f80
	float SideFalloff;//[Offset: 0x48, Size: 0x4] 0x78ce78a000
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 0x4] 0x78ce78a080
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 0x4] 0x78ce78a100
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 0x4] 0x78ce78a180
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 0x4] 0x78ce78a200
	float EndFalloff;//[Offset: 0x5c, Size: 0x4] 0x78ce78a280
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 0x10] 0x78ce728bc0
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x78ce728c60
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x78ce78a400
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 0x8] 0x78ce78a480

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8] 0x78cf035a80
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf035b00

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18] 0x78ce789980
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18] 0x78ce789a00
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x78ce728800
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x78ce789b00
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10] 0x78ce7288a0

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8] 0x78cf035480
	float TangentLen;//[Offset: 0x8, Size: 0x4] 0x78cf035500
	FName SocketName;//[Offset: 0xc, Size: 0x8] 0x78cf035580

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc] 0x78cf037080
	Vector Left;//[Offset: 0xc, Size: 0xc] 0x78cf037100
	Vector Right;//[Offset: 0x18, Size: 0xc] 0x78cf037180
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc] 0x78cf037200
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc] 0x78cf037280
	Vector LayerLeft;//[Offset: 0x3c, Size: 0xc] 0x78cf037300
	Vector LayerRight;//[Offset: 0x48, Size: 0xc] 0x78cf037380
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 0xc] 0x78cf035300
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 0xc] 0x78cf035380
	float StartEndFalloff;//[Offset: 0x6c, Size: 0x4] 0x78cf035400

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x4d0, Size: 0x4] 0x78ce783080

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x78cf035c00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78cf035c80

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x78ce787c00
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8] 0x78ce787c80
	float Hardness;//[Offset: 0x38, Size: 0x4] 0x78ce787d00
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10] 0x78ce787d80

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x440, Size: 0x4] 0x78ce786b00
	int SectionBaseY;//[Offset: 0x444, Size: 0x4] 0x78ce786b80
	int ComponentSizeQuads;//[Offset: 0x448, Size: 0x4] 0x78ce786c00
	int SubsectionSizeQuads;//[Offset: 0x44c, Size: 0x4] 0x78ce786c80
	int NumSubsections;//[Offset: 0x450, Size: 0x4] 0x78ce786d00
	MaterialInterface* OverrideMaterial;//[Offset: 0x458, Size: 0x8] 0x78ce786d80
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x460, Size: 0x8] 0x78ce786e00
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x468, Size: 0x10] 0x78ce726d20
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x478, Size: 0x10] 0x78ce726dc0
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x488, Size: 0x10] 0x78ce726e60
	int8[] LODIndexToMaterialIndex;//[Offset: 0x498, Size: 0x10] 0x78ce726f00
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x4a8, Size: 0x10] 0x78ce726fa0
	Texture2D* XYOffsetmapTexture;//[Offset: 0x4b8, Size: 0x8] 0x78ce787100
	Vector4 WeightmapScaleBias;//[Offset: 0x4c0, Size: 0x10] 0x78ce787180
	float WeightmapSubsectionOffset;//[Offset: 0x4d0, Size: 0x4] 0x78ce787200
	Vector4 HeightmapScaleBias;//[Offset: 0x4e0, Size: 0x10] 0x78ce787280
	Box CachedLocalBox;//[Offset: 0x4f0, Size: 0x1c] 0x78ce787300
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x50c, Size: 0x1c] 0x78ce787380
	Texture2D* HeightmapTexture;//[Offset: 0x528, Size: 0x8] 0x78ce785300
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x530, Size: 0x10] 0x78ce727040
	Texture2D*[] WeightmapTextures;//[Offset: 0x540, Size: 0x10] 0x78ce7270e0
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x550, Size: 0x8] 0x78ce785480
	Guid MapBuildDataId;//[Offset: 0x558, Size: 0x10] 0x78ce785500
	Guid[] IrrelevantLights;//[Offset: 0x568, Size: 0x10] 0x78ce727180
	int CollisionMipLevel;//[Offset: 0x578, Size: 0x4] 0x78ce785600
	int SimpleCollisionMipLevel;//[Offset: 0x57c, Size: 0x4] 0x78ce785680
	float NegativeZBoundsExtension;//[Offset: 0x580, Size: 0x4] 0x78ce785700
	float PositiveZBoundsExtension;//[Offset: 0x584, Size: 0x4] 0x78ce785780
	float StaticLightingResolution;//[Offset: 0x588, Size: 0x4] 0x78ce785800
	int ForcedLOD;//[Offset: 0x58c, Size: 0x4] 0x78ce785880
	int LODBias;//[Offset: 0x590, Size: 0x4] 0x78ce785900
	Guid StateId;//[Offset: 0x594, Size: 0x10] 0x78ce785980
	Guid BakedTextureMaterialGuid;//[Offset: 0x5a4, Size: 0x10] 0x78ce785a00
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x5b8, Size: 0x8] 0x78ce785a80
	byte MobileBlendableLayerMask;//[Offset: 0x5c0, Size: 0x1] 0x78ce785b00
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x5c8, Size: 0x8] 0x78ce785b80
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x5d0, Size: 0x10] 0x78ce727220
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x5e0, Size: 0x10] 0x78ce7272c0
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x9d795e4 0x78ce757860
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x9d793dc 0x78ce757940
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x9d794e0 0x78ce757a20

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x78cf034c00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78cf034c80

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x440, Size: 0x10] 0x78ce726aa0
	int SectionBaseX;//[Offset: 0x450, Size: 0x4] 0x78ce788200
	int SectionBaseY;//[Offset: 0x454, Size: 0x4] 0x78ce788280
	int CollisionSizeQuads;//[Offset: 0x458, Size: 0x4] 0x78ce788300
	float CollisionScale;//[Offset: 0x45c, Size: 0x4] 0x78ce788380
	int SimpleCollisionSizeQuads;//[Offset: 0x460, Size: 0x4] 0x78ce788400
	byte[] CollisionQuadFlags;//[Offset: 0x468, Size: 0x10] 0x78ce726b40
	Guid HeightfieldGuid;//[Offset: 0x478, Size: 0x10] 0x78ce786400
	Box CachedLocalBox;//[Offset: 0x488, Size: 0x1c] 0x78ce786480
	LandscapeComponent* RenderComponent;//[Offset: 0x4a4, Size: 0x1c] 0x78ce786500
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x4d0, Size: 0x10] 0x78ce726be0
	LandscapeComponent* GetRenderComponent();// 0x9d7b1e8 0x78ce757780

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8] 0x78cf034e80
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1] 0x78cf034f00
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1] 0x78cf034f80

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8] 0x78ce789800
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10] 0x78ce789880

--------------------------------
Class: GameResultData
	int WinnnerTeam;//[Offset: 0x0, Size: 0x4] 0x78cefe8700
	int RedScore;//[Offset: 0x4, Size: 0x4] 0x78cefe8780
	int BlueScore;//[Offset: 0x8, Size: 0x4] 0x78cefe8800
	int SameScore;//[Offset: 0xc, Size: 0x4] 0x78cefe8880
	int MatchNum;//[Offset: 0x10, Size: 0x4] 0x78cefe8900
	GameResultDataEachPlayer[] RedTeamInfo;//[Offset: 0x18, Size: 0x10] 0x78cefd42a0
	GameResultDataEachPlayer[] BlueTeamInfo;//[Offset: 0x28, Size: 0x10] 0x78cefd4340
	int[] playerIDs;//[Offset: 0x38, Size: 0x10] 0x78cefd43e0
	FString[] playerNames;//[Offset: 0x48, Size: 0x10] 0x78cefd4480

--------------------------------
Class: GameResultDataEachPlayer
	int PlayerID;//[Offset: 0x0, Size: 0x4] 0x78cefe8a00
	FString PlayerName;//[Offset: 0x8, Size: 0x10] 0x78cefe8a80
	int KillNum;//[Offset: 0x18, Size: 0x4] 0x78cefe8b00
	int assistKillNum;//[Offset: 0x1c, Size: 0x4] 0x78cefe8b80
	int xiuzhengNum;//[Offset: 0x20, Size: 0x4] 0x78cefe8c00
	int Score;//[Offset: 0x24, Size: 0x4] 0x78cefe8c80
	bool isMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cefe8d00
	bool isSVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cefe8d80
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cefe8e00

--------------------------------
Class: WuxiaXCharBaseInterface.Interface.Object

--------------------------------
Class: WuXiaXClientLoginGameMode.GameModeBase.Info.Actor.Object
	bool bStartDownloadPak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1] 0x78ce676a80
	int ProgressContentLen;//[Offset: 0x3d4, Size: 0x4] 0x78ce676b00
	int ProgressReceivedBytes;//[Offset: 0x3d8, Size: 0x4] 0x78ce676b80
	float ProgressPercentComplete;//[Offset: 0x3dc, Size: 0x4] 0x78ce676c00
	int UpdateCompleteNum;//[Offset: 0x3e0, Size: 0x4] 0x78ce676c80
	int UpdateTotalNum;//[Offset: 0x3e4, Size: 0x4] 0x78ce676d00
	int NeedDownloadFileSize;//[Offset: 0x3e8, Size: 0x4] 0x78ce676d80
	int HadDownloadFileSize;//[Offset: 0x3ec, Size: 0x4] 0x78ce676e00
	enum DownloadType;//[Offset: 0x3f0, Size: 0x1] 0x78cedd7ea0
	void StopDwonloadMainMap();// 0x85244ac 0x78ce66d6e0
	void StartDownloadMainMap();// 0x85244f8 0x78ce66d7c0
	void SendPakRequest();// 0x8524974 0x78ce66d8a0
	void SendMainMapPakListRequest();// 0x8524db8 0x78ce66d980
	void PakResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x85247c8 0x78ce66da60
	void PakProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x8524544 0x78ce66db40
	void MainMapPakListResponse(out const HttpResponse Response, bool bConnectedSuccessfully);// 0x8524c0c 0x78ce66dc20
	void MainMapPakListProgress(const HttpRequest Request, int BytesSent, int BytesReceived);// 0x8524988 0x78ce66dd00
	bool IsStartDownloadMainMap();// 0x85244c0 0x78ce66dde0
	bool IsNeedDownloadMainMap();// 0x852450c 0x78ce66dec0

--------------------------------
Class: WuXiaXDebuger.Actor.Object
	bool m_GenerateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78ce676a00

--------------------------------
Class: WuXiaXDLDHUD.WuXiaXHUD.WuXiaXHUDBase.HUD.Actor.Object
	class PVPSelectUI* pvp_select_class_;//[Offset: 0x6e0, Size: 0x8] 0x78ceddaf60
	PVPSelectUI* PVPSelectUI;//[Offset: 0x6e8, Size: 0x8] 0x78ce6a3200
	void UpdateTeamScore(int TeamId, int NewTeamScore);// 0x8a873f8 0x78ce69f660
	void UpdateRaffleItemInfoGroup(out const AdvPoolRaffleItemInfoGroup NewRaffleItemInfoGroup);// 0x8a873f8 0x78ce69f740
	void UpdateLevel(const int NewLevel);// 0x8a873f8 0x78ce69f820
	void UpdateKillNum(int PlayerID, int TeamId, FString PlayerName, int NewKillNum);// 0x8a873f8 0x78ce69f900
	void UpdateExpProgress(const float NewExpProgress);// 0x8a873f8 0x78ce69f9e0
	void UpdateEffectInfo(out const AdvPoolEffectInfo NewEffectInfo);// 0x85259d0 0x78ce69fac0
	void SetContinuousKillNumber(int Number);// 0x8a873f8 0x78ce69fba0
	void SetChangeVisionEnable(bool bIsEnabled);// 0x8a873f8 0x78ce69fc80
	PVPSelectUI* GetPVPSelectWidget();// 0x8525aac 0x78ce69fd60
	void DLD_UpdateKillData(int allkill);// 0x8a873f8 0x78ce69fe40
	void DLD_PlayerSortInfo(int Rank, int kill, int Reward, int rank_point, int kill_point, int damage_point, int all_team_number);// 0x8a873f8 0x78ce69ff20

--------------------------------
Class: WuXiaXGameModeDLD.WuXiaXGameModeBase.GameModeBase.Info.Actor.Object
	<int,WuXiaXGameModeDLDRebirthActorList> used_rebirth_actor_map_;//[Offset: 0xe10, Size: 0x50] 0x78cee12380
	<int,PlayerPVPInfo> player_pvp_infos_;//[Offset: 0xe60, Size: 0x50] 0x78cee12440
	<int,BuffPointInfo> buff_state_;//[Offset: 0xec0, Size: 0x50] 0x78cee12500
	AdvPoolManager* AdvPoolManager;//[Offset: 0xf20, Size: 0x8] 0x78ce6a8d00
	void TimeIntervalAddAllPlayerExp();// 0x85541a8 0x78ce6b1200
	void AdvPoolTestRaffleItems(int RaffleNum);// 0x85541bc 0x78ce6b12e0
	void AdvPoolSelectItem(int PlayerID, int RaffleItemIndex);// 0x8554264 0x78ce6b13c0
	void AddTeamScoreByType(FString SquadId, enum AddScoreType);// 0x8554354 0x78ce6b14a0
	void AddTeamScore(const int TeamId, int AddScore);// 0x8554454 0x78ce6b1580
	void AddPlayerExpByType(int PlayerID, enum AddExpType);// 0x8554544 0x78ce6b1660
	void AddPlayerExp(int PlayerID, int AddExp);// 0x8554638 0x78ce6b1740

--------------------------------
Class: WuXiaXGameModeDLDRebirthActorList
	GameRebirthActor*[] m_List;//[Offset: 0x0, Size: 0x10] 0x78cefd4660

--------------------------------
Class: WuxiaXGameModeLeitai.WuXiaXGameModeBase.GameModeBase.Info.Actor.Object
	int SecToCloseSinceStart;//[Offset: 0xe0c, Size: 0x4] 0x78ce6a8980

--------------------------------
Class: WuxiaXGameModeLite.WuXiaXGameModeBase.GameModeBase.Info.Actor.Object

--------------------------------
Class: WuXiaXGameModeStandA.WuXiaXGameModeBase.GameModeBase.Info.Actor.Object
	bool bSendGameEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0c, Size: 0x1] 0x78ce6a8600
	SpawnItemData[] train_pick_items;//[Offset: 0xe10, Size: 0x10] 0x78ceddc0e0
	NpcCharacter* train_npc_actor;//[Offset: 0xe20, Size: 0x8] 0x78ce6a8700
	<int,Transform> train_npc_trans_;//[Offset: 0xe28, Size: 0x50] 0x78cee122c0
	TimerHandle AddSkillHandle;//[Offset: 0xe78, Size: 0x8] 0x78ce6a8880
	int CurNpcPosIndex;//[Offset: 0xe80, Size: 0x4] 0x78ce6a8900

--------------------------------
Class: WuxiaXGameModeTaoLi.WuXiaXGameModeBase.GameModeBase.Info.Actor.Object

--------------------------------
Class: WuxiaXGameModeTemp.GameModeBase.Info.Actor.Object

--------------------------------
Class: WuxiaXGameModeTrain.WuXiaXGameModeBase.GameModeBase.Info.Actor.Object
	int editor_mode_index;//[Offset: 0xe0c, Size: 0x4] 0x78ce6aa080
	Rotator m_CameraRotation;//[Offset: 0xe10, Size: 0xc] 0x78ce6aa100
	GameItemInfo[] m_FirstGuideItems;//[Offset: 0xe20, Size: 0x10] 0x78ceddbe60
	int[] m_FirstGuideSkills;//[Offset: 0xe30, Size: 0x10] 0x78ceddbf00
	int m_DifficultyBaseNum;//[Offset: 0xe40, Size: 0x4] 0x78ce6aa280
	int m_MonsterBaseNum;//[Offset: 0xe44, Size: 0x4] 0x78ce6aa300
	int m_FirstDifficulty;//[Offset: 0xe48, Size: 0x4] 0x78ce6aa380
	int m_FirstInMonster;//[Offset: 0xe4c, Size: 0x4] 0x78ce6aa400
	Rotator m_FirstCameraRotation;//[Offset: 0xe50, Size: 0xc] 0x78ce6aa480
	TrainChildGameMode*[] child_gamemodes;//[Offset: 0xe60, Size: 0x10] 0x78ceddbfa0
	<int,int> player_mode_index_map;//[Offset: 0xe70, Size: 0x50] 0x78cee12200
	SpawnItemData[] pick_items;//[Offset: 0xec0, Size: 0x10] 0x78ceddc040

--------------------------------
Class: WuxiaXLeitaiMatchState.Actor.Object
	int LeitaiID;//[Offset: 0x238, Size: 0x4] 0x78ce6ad700
	int[] RedTeamIDs;//[Offset: 0x240, Size: 0x10] 0x78ceddd6c0
	int[] BlueTeamIDs;//[Offset: 0x250, Size: 0x10] 0x78ceddd760
	int TotalMatchNum;//[Offset: 0x260, Size: 0x4] 0x78ce6ad880
	int CurMatchNum;//[Offset: 0x264, Size: 0x4] 0x78ce6ad900
	int64 MatchCreateTime;//[Offset: 0x268, Size: 0x8] 0x78ce6ad980
	int64 MatchStartTime;//[Offset: 0x270, Size: 0x8] 0x78ce6ada00
	enum CurState;//[Offset: 0x278, Size: 0x1] 0x78ceddd800
	int64 CurStateStartTime;//[Offset: 0x280, Size: 0x8] 0x78ce6adb00
	float WaitSeconds;//[Offset: 0x288, Size: 0x4] 0x78ce6adb80
	float PrepareTimeSec;//[Offset: 0x28c, Size: 0x4] 0x78ce6adc00
	float MatchSeconds;//[Offset: 0x290, Size: 0x4] 0x78ce6adc80
	float MatchMinWinTimes;//[Offset: 0x294, Size: 0x4] 0x78ce6add00
	float WinnerTeam;//[Offset: 0x298, Size: 0x4] 0x78ce6add80
	float MatchEndWaitTime;//[Offset: 0x29c, Size: 0x4] 0x78ce6ade00
	GameResultData MatchResult;//[Offset: 0x2a0, Size: 0x58] 0x78ce6ade80
	int[] hasJoinedPlayers;//[Offset: 0x2f8, Size: 0x10] 0x78ceddd8a0
	<int,WuXiaXCharacter*> match_player_map;//[Offset: 0x308, Size: 0x50] 0x78cee11d80
	int[] scores;//[Offset: 0x370, Size: 0x10] 0x78ceddd940
	int[] matchUsedTimeMS;//[Offset: 0x380, Size: 0x10] 0x78ceddd9e0
	void OnRep_CurState();// 0x855d290 0x78ce6b4e60
	void OnMatchFinalResult(const GameResultData Result);// 0x855d194 0x78ce6b4f40
	float GetTimeLeftOfCurState();// 0x855d25c 0x78ce6b5020
	int GetLocalControlledPlayerKillNumber();// 0x855d0c4 0x78ce6b5100
	int GetCurSameTimes();// 0x855d0f8 0x78ce6b51e0
	int GetCurRedWinTimes();// 0x855d160 0x78ce6b52c0
	int GetCurBlueWinTimes();// 0x855d12c 0x78ce6b53a0
	void CheckSyncResurrectionInfo(bool bNeedNextCheck);// 0x855d014 0x78ce6b5480

--------------------------------
Class: WuxiaXGameStateLeitai.WuXiaXGameStateBase.GameStateBase.Info.Actor.Object
	float WaitJointTime;//[Offset: 0x568, Size: 0x4] 0x78ce6af000
	float PrepareTime;//[Offset: 0x56c, Size: 0x4] 0x78ce6af080
	float matchTime;//[Offset: 0x570, Size: 0x4] 0x78ce6af100
	int MatchNumPerLeitai;//[Offset: 0x574, Size: 0x4] 0x78ce6af180
	WuxiaXLeitaiMatchState*[] CurMatches;//[Offset: 0x5a8, Size: 0x10] 0x78ceddd580
	int[] AvailableLeitains;//[Offset: 0x5b8, Size: 0x10] 0x78ceddd620
	LeitaiResConfig* ClientResConfig;//[Offset: 0x5c8, Size: 0x8] 0x78ce6af300
	WuxiaXLeitaiMatchState* ClientMatchState;//[Offset: 0x5d0, Size: 0x8] 0x78ce6af380
	LeitaiResConfig* GetResConfig(int LeitaiID);// 0x855e2f0 0x78ce6b4a00
	WuxiaXLeitaiMatchState* GetPlayerMatch(int PlayerID);// 0x855e3a0 0x78ce6b4ae0
	WuxiaXLeitaiMatchState* GetLeitaiMatch(int LeitaiID);// 0x855e450 0x78ce6b4bc0
	WuxiaXLeitaiMatchState* GetClientMatchState();// 0x855e2bc 0x78ce6b4ca0
	void AddLeitaiConfig(LeitaiResConfig* resconfig);// 0x855e500 0x78ce6b4d80

--------------------------------
Class: WuxiaXGameStateTrain.WuXiaXGameStateBase.GameStateBase.Info.Actor.Object

--------------------------------
Class: WuXiaXLeitaiHUD.WuXiaXHUD.WuXiaXHUDBase.HUD.Actor.Object
	class PVPSelectUI* pvp_select_class_;//[Offset: 0x6e0, Size: 0x8] 0x78ceddcf40
	PVPSelectUI* PVPSelectUI;//[Offset: 0x6e8, Size: 0x8] 0x78ce6d0a80
	PVPSelectUI* GetPVPSelectWidget();// 0x8574444 0x78ce6b6c20

--------------------------------
Class: WuXiaXLoginPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: WuxiaXOBPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	float moveSpeed;//[Offset: 0x2a4, Size: 0x4] 0x78ce6dd100
	enum camera_type;//[Offset: 0x2a8, Size: 0x1] 0x78cedde340
	int observee_user_id;//[Offset: 0x2ac, Size: 0x4] 0x78ce6dd200
	SpringArmComponent* OBSpring;//[Offset: 0x2b0, Size: 0x8] 0x78ce6dd280
	CameraComponent* OBCamera;//[Offset: 0x2b8, Size: 0x8] 0x78ce6dd300
	SphereComponent* itemDetectCollision;//[Offset: 0x2c0, Size: 0x8] 0x78ce6dd380
	float OBNetRelevantDistSqr;//[Offset: 0x2c8, Size: 0x4] 0x78ce6dd400
	bool bMouseRightDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x78ce6dd480
	float baseMoveSpeed;//[Offset: 0x2d0, Size: 0x4] 0x78ce6dd500
	bool IsShowPostEfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x78ce6dd580
	float planeViewOffsetZ;//[Offset: 0x2d8, Size: 0x4] 0x78ce6dd600
	float paradropViewOffsetZ;//[Offset: 0x2dc, Size: 0x4] 0x78ce6dd680
	float LockViewCamDist;//[Offset: 0x2e0, Size: 0x4] 0x78ce6db600
	float DownViewMinDist;//[Offset: 0x2e4, Size: 0x4] 0x78ce6db680
	float DownViewMaxDist;//[Offset: 0x2e8, Size: 0x4] 0x78ce6db700
	float DownViewDftDist;//[Offset: 0x2ec, Size: 0x4] 0x78ce6db780
	float DefaultMoveSpeed;//[Offset: 0x2f0, Size: 0x4] 0x78ce6db800
	float ParadropViewCamDist;//[Offset: 0x2f4, Size: 0x4] 0x78ce6db880
	float TargetViewCameraBaseHeight;//[Offset: 0x2f8, Size: 0x4] 0x78ce6db900
	float ItemDetactDist;//[Offset: 0x2fc, Size: 0x4] 0x78ce6db980
	void TouchStopped(PointerEvent PointerEvent);// 0x8576e2c 0x78ce700160
	void TouchStarted(PointerEvent PointerEvent);// 0x8577244 0x78ce700240
	void TouchMoved(PointerEvent PointerEvent);// 0x8577038 0x78ce700320
	void SwitchToKiller();// 0x85764a4 0x78ce700400
	void SetZeroCounter(int64 start_time);// 0x8576d44 0x78ce7004e0
	void OnViewTargetDead();// 0x85769e8 0x78ce7005c0
	void OnTargetViewUIReopened();// 0x85764f4 0x78ce7006a0
	void OnTargetViewRotUpdated(int netID, Rotator Rot);// 0x85762d0 0x78ce700780
	void OnSwitchToPrevTeammate();// 0x8576778 0x78ce700860
	void OnSwitchToPrevPlayer();// 0x857678c 0x78ce700940
	void OnSwitchToNextTeammate();// 0x8576764 0x78ce700a20
	void OnSwitchToNextPlayer();// 0x85767a0 0x78ce700b00
	void OnSwitchPostEffectShow();// 0x8576508 0x78ce700be0
	void OnShowHideTreasureBox();// 0x857651c 0x78ce700cc0
	void OnShowHidePartTargetUI(enum index);// 0x85763fc 0x78ce700da0
	void OnSetShowWeapon2();// 0x85763d4 0x78ce700e80
	void OnSetShowWeapon1();// 0x85763e8 0x78ce700f60
	void OnSetShowMapPlayerName();// 0x85764e0 0x78ce701040
	void OnSetShowHanded();// 0x85763c0 0x78ce701120
	void OnSetPostEffectShow(bool isShow);// 0x8a873f8 0x78ce701200
	void OnOverView();// 0x85764b8 0x78ce7012e0
	void OnMoveUpDown(float Rate);// 0x85767f0 0x78ce7013c0
	void OnMoveRight(float Rate);// 0x8576940 0x78ce7014a0
	void OnMoveForward(float Rate);// 0x8576898 0x78ce701580
	void OnMouseTurn(float Rate);// 0x85765d8 0x78ce701660
	void OnMouseScroll(float Delta);// 0x85766bc 0x78ce701740
	void OnMouseRKeyUp();// 0x85767c8 0x78ce701820
	void OnMouseRKeyDown();// 0x85767dc 0x78ce701900
	void OnMouseLookUp(float Rate);// 0x8576530 0x78ce7019e0
	void OnMouseLKeyUp();// 0x85767b4 0x78ce701ac0
	void OnMapKey();// 0x85764cc 0x78ce701ba0
	void OnKey_PrevTeam_Released();// 0x8576680 0x78ce701c80
	void OnKey_NextTeam_Released();// 0x8576694 0x78ce6be780
	void OnKey_C_Released();// 0x85766a8 0x78ce6be860
	void OnClientInfoGet();// 0x8576288 0x78ce6be940
	void OnCameraViewUpdated(enum oldType);// 0x85769fc 0x78ce6bea20
	OBClientInfo* GetOBClientInfo();// 0x857629c 0x78ce6beb00
	int GetCurPlayerReviewID();// 0x8576d10 0x78ce6bebe0
	void EnterTargetVeiw(enum cam_type, int TargetId);// 0x8576b74 0x78ce6becc0
	void EnterPlayerReview(int PlayerNetID);// 0x8576c68 0x78ce6beda0
	void EnterNoneView();// 0x8576aa4 0x78ce6bee80
	void EnterItemView(int itemWorldID);// 0x8576acc 0x78ce6bef60
	void EnterFreeView();// 0x8576ab8 0x78ce6bf040

--------------------------------
Class: WuXiaXOnlineSession.OnlineSessionClient.OnlineSession.Object

--------------------------------
Class: WuXiaXPlayerState.PlayerState.Info.Actor.Object
	void Mul_RemovePlayerAnimus(int64 player_list);// 0x857f9b0 0x78ce7052c0
	void Mul_PlayerAnimus(const <int64,int64> player_list);// 0x857fa60 0x78ce7053a0

--------------------------------
Class: WuXiaXWoodenStakeCharacter.WuXiaXBaseCharacter.Character.Pawn.Actor.Object
	WoodenStakeProperty WoodenStakeProperty;//[Offset: 0x640, Size: 0xc] 0x78ce6dfe80
	int WoodenStakeId;//[Offset: 0x64c, Size: 0x4] 0x78ce6dff00
	float TakeOffBattleTime;//[Offset: 0x650, Size: 0x4] 0x78ce6dff80
	void SetWoodenStakeType(enum val);// 0x858047c 0x78ce705020
	enum GetWoodenStakeType();// 0x8580520 0x78ce705100
	void ChangeWoodenStakeItemEffect(bool bAdd);// 0x85803cc 0x78ce7051e0

--------------------------------
Class: WoodenStakeProperty
	enum WoodenStakeType;//[Offset: 0x0, Size: 0x1] 0x78cefd4200
	int HatItemId;//[Offset: 0x4, Size: 0x4] 0x78cefe8600
	int ClothItemId;//[Offset: 0x8, Size: 0x4] 0x78cefe8680

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x278] 0x78ce6dfd00

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0x580] 0x78ce6dfc80

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x3f0] 0x78ce6dfc00

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3b8] 0x78cee91180
	SlateSound PressedSlateSound;//[Offset: 0x3c0, Size: 0x18] 0x78cee91200
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3d8, Size: 0x18] 0x78cee91300

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278] 0x78cee92f80
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88] 0x78cee93000
	Vector2D ShadowOffset;//[Offset: 0x308, Size: 0x8] 0x78cee93080
	LinearColor ShadowColorAndOpacity;//[Offset: 0x310, Size: 0x10] 0x78cee93100
	SlateBrush MenuBorderBrush;//[Offset: 0x320, Size: 0x88] 0x78cee93180
	Margin MenuBorderPadding;//[Offset: 0x3a8, Size: 0x10] 0x78cee91100

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x3b8] 0x78ce6dfb80

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0x7f8] 0x78ce6dfb00

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x88] 0x78cee95900
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 0x88] 0x78cee95980
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 0x88] 0x78cee95a00
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 0x88] 0x78cee95a80
	Margin Padding;//[Offset: 0x228, Size: 0x10] 0x78cee95b00
	SlateFontInfo Font;//[Offset: 0x238, Size: 0x58] 0x78cee95b80
	SlateColor ForegroundColor;//[Offset: 0x290, Size: 0x28] 0x78cee95c00
	SlateColor BackgroundColor;//[Offset: 0x2b8, Size: 0x28] 0x78cee95c80
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2e0, Size: 0x28] 0x78cee95d00
	Margin HScrollBarPadding;//[Offset: 0x308, Size: 0x10] 0x78cee95d80
	Margin VScrollBarPadding;//[Offset: 0x318, Size: 0x10] 0x78cee95e00
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x328, Size: 0x4d0] 0x78cee96300

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x220] 0x78ce6dfa80

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x78cee93600
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28] 0x78cee93680
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 0x88] 0x78cee93700
	SlateBrush BackgroundImageComposing;//[Offset: 0x110, Size: 0x88] 0x78cee93780
	SlateBrush CaretImage;//[Offset: 0x198, Size: 0x88] 0x78cee93800

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x1a0] 0x78ce6dfa00

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x4d0] 0x78ce6df980

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x228] 0x78ce6df900

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce6df880

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x2e8] 0x78ce6df800

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x88] 0x78cee9b900
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x90, Size: 0x88] 0x78cee9b980
	SlateBrush ActiveFillBrush;//[Offset: 0x118, Size: 0x88] 0x78cee9ba00
	SlateBrush InactiveFillBrush;//[Offset: 0x1a0, Size: 0x88] 0x78cee9ba80
	SlateBrush ArrowsImage;//[Offset: 0x228, Size: 0x88] 0x78cee9bb00
	SlateColor ForegroundColor;//[Offset: 0x2b0, Size: 0x28] 0x78cee9bb80
	Margin TextPadding;//[Offset: 0x2d8, Size: 0x10] 0x78cee9bc00

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x270] 0x78ce711080

--------------------------------
Class: ToolMenuBase.Object

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0x90f8e84 0x78ce704e60

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1] 0x78cefd6500
	delegate OnComplete;//[Offset: 0x4, Size: 0x10] 0x78cefec680
	int CompressionQuality;//[Offset: 0x14, Size: 0x4] 0x78cefec700
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cefec780
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78cefec800

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4] 0x78ce711b00
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4] 0x78ce711b80
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4] 0x78ce711c00
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4] 0x78ce711c80
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78ce711d00
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4] 0x78ce711d80
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4] 0x78ce711e00
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4] 0x78ce711e80
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4] 0x78ce711f00
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4] 0x78ce711f80
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4] 0x78ce712000

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4] 0x78ce711980
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4] 0x78ce711a00
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78ce711a80

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10] 0x78ce713080
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10] 0x78ce713100
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10] 0x78ce713180
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78ce711100
	FString Homepage;//[Offset: 0x68, Size: 0x10] 0x78ce711180
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10] 0x78ce711200
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10] 0x78ce711280
	Guid ProjectID;//[Offset: 0x98, Size: 0x10] 0x78ce711300
	FString ProjectName;//[Offset: 0xa8, Size: 0x10] 0x78ce711380
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10] 0x78ce711400
	FString SupportContact;//[Offset: 0xc8, Size: 0x10] 0x78ce711480
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18] 0x78ce711500
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18] 0x78ce711580
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x78ce711600
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1] 0x78ce711680
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1] 0x78ce711700
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1] 0x78ce711780
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78ce711800
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x78ce711880
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x78ce711900

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78ce712f80
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10] 0x78ce721320

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x78ce712a00
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x78ce712a80
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x78ce712b00
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4] 0x78ce712b80
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4] 0x78ce712c00
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4] 0x78ce712c80
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x78ce712d00

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0x96475d8 0x78ce7045a0
	void StartReconstruction();// 0x96475f4 0x78ce704680
	void PauseReconstruction();// 0x96475bc 0x78ce704760
	bool IsReconstructionStarted();// 0x964757c 0x78ce704840
	bool IsReconstructionPaused();// 0x964753c 0x78ce704920
	void DisconnectMRMesh();// 0x9647470 0x78ce704a00
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0x964748c 0x78ce704ae0

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x450, Size: 0x8] 0x78ce715000
	MaterialInterface* WireframeMaterial;//[Offset: 0x458, Size: 0x8] 0x78ce715080
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1] 0x78ce715100
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1] 0x78ce715180
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 0x1] 0x78ce715200
	BodySetup* CachedBodySetup;//[Offset: 0x468, Size: 0x8] 0x78ce715280
	BodySetup*[] BodySetups;//[Offset: 0x470, Size: 0x10] 0x78ce721280
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0x96487c4 0x78ce703ce0
	void SetWireframeColor(out const LinearColor InColor);// 0x964857c 0x78ce703dc0
	void SetUseWireframe(bool bUseWireframe);// 0x9648648 0x78ce703ea0
	void SetEnableMeshOcclusion(bool bEnable);// 0x9648714 0x78ce703f80
	bool IsConnected();// 0x96488a4 0x78ce704060
	LinearColor GetWireframeColor();// 0x9648560 0x78ce704140
	bool GetUseWireframe();// 0x964862c 0x78ce704220
	bool GetEnableMeshOcclusion();// 0x96486f8 0x78ce704300
	void ForceNavMeshUpdate();// 0x9648890 0x78ce7043e0
	void Clear();// 0x9648874 0x78ce7044c0

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x1f8, Size: 0x10] 0x78cee66100
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x78cee66180
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1] 0x78cee66280
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1] 0x78cee66200
	enum VertexColorMode;//[Offset: 0x20b, Size: 0x1] 0x78cee50920
	Color[] BlockVertexColors;//[Offset: 0x210, Size: 0x10] 0x78cee509c0
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x220, Size: 0x10] 0x78cee64300
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x230, Size: 0x10] 0x78cee64380
	float UpdateInterval;//[Offset: 0x240, Size: 0x4] 0x78cee64400
	MRMeshComponent* MRMesh;//[Offset: 0x248, Size: 0x8] 0x78cee64480
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0x8a873f8 0x78cee28200
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x9647f0c 0x78cee282e0
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x9647fb4 0x78cee283c0

--------------------------------
Class: ARActor.Actor.Object
	ARComponent* AddARComponent(class ARComponent InComponentClass, out const Guid NativeID);// 0x966b5b8 0x78ce703c00

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x1f4, Size: 0x10] 0x78ce718780
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78ce718800
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x240, Size: 0x8] 0x78ce718880
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x248, Size: 0x8] 0x78ce718900
	MRMeshComponent* MRMeshComponent;//[Offset: 0x250, Size: 0x8] 0x78ce718980
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x258, Size: 0x8] 0x78ce718a00
	void UpdateVisualization();// 0x96744a0 0x78ce70a880
	void SetNativeID(Guid NativeID);// 0x96744d8 0x78ce70a960
	void ReceiveRemove();// 0x8a873f8 0x78ce70aa40
	void OnRep_Payload();// 0x9674484 0x78ce70ab20
	MRMeshComponent* GetMRMesh();// 0x96744bc 0x78ce70ac00

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueId;//[Offset: 0x28, Size: 0x10] 0x78ce741e80
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x78ce741f00
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x78ce741f80
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x78ce724980
	MRMeshComponent* UnderlyingMesh;//[Offset: 0xb0, Size: 0x8] 0x78ce742080
	enum ObjectClassification;//[Offset: 0xb8, Size: 0x1] 0x78ce724a20
	int LastUpdateFrameNumber;//[Offset: 0xd0, Size: 0x4] 0x78ce740080
	FName DebugName;//[Offset: 0xe0, Size: 0x8] 0x78ce740100
	bool IsTracked();// 0x968a2a0 0x78ce7519e0
	MRMeshComponent* GetUnderlyingMesh();// 0x968a14c 0x78ce751ac0
	enum GetTrackingState();// 0x968a2d8 0x78ce751ba0
	enum GetObjectClassification();// 0x968a130 0x78ce751c80
	FString GetName();// 0x968a1e8 0x78ce70e780
	Transform GetLocalToWorldTransform();// 0x968a378 0x78ce70e860
	Transform GetLocalToTrackingTransform();// 0x968a30c 0x78ce70e940
	float GetLastUpdateTimestamp();// 0x968a180 0x78ce70ea20
	int GetLastUpdateFrameNumber();// 0x968a1b4 0x78ce70eb00
	FName GetDebugName();// 0x968a26c 0x78ce70ebe0

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void UnpinComponent(SceneComponent* ComponentToUnpin);// 0x966d620 0x78ce707a20
	static bool ToggleARCapture(const bool bOnOff, const enum CaptureType);// 0x966eb0c 0x78ce707b00
	static void StopARSession();// 0x966ecf4 0x78ce707be0
	static void StartARSession(ARSessionConfig* SessionConfig);// 0x966ed1c 0x78ce707cc0
	static void SetEnabledXRCamera(bool bOnOff);// 0x966ea6c 0x78ce707da0
	static void SetARWorldScale(float InWorldScale);// 0x966c1c8 0x78ce707e80
	static void SetARWorldOriginLocationAndRotation(Vector OriginLocation, Rotator OriginRotation, bool bIsTransformInWorldSpace, bool bMaintainUpDirection);// 0x966c260 0x78ce707f60
	static void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0x966e8ec 0x78ce708040
	static bool SaveARPinToLocalStore(FName InSaveName, ARPin* InPin);// 0x966d240 0x78ce708120
	static IntPoint ResizeXRCamera(out const IntPoint InSize);// 0x966e9b8 0x78ce708200
	static void RemovePin(ARPin* PinToRemove);// 0x966d588 0x78ce7082e0
	static void RemoveARPinFromLocalStore(FName InSaveName);// 0x966d1a8 0x78ce7083c0
	static void RemoveAllARPinsFromLocalStore();// 0x966d194 0x78ce7084a0
	static ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0x966d7ac 0x78ce708580
	static bool PinComponentToARPin(SceneComponent* ComponentToPin, ARPin* Pin);// 0x966d6b8 0x78ce708660
	static ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0x966d93c 0x78ce708740
	static void PauseARSession();// 0x966ed08 0x78ce708820
	static <FName,ARPin*> LoadARPinsFromLocalStore();// 0x966d334 0x78ce708900
	static ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x966e258 0x78ce7089e0
	static ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x966e5c8 0x78ce708ac0
	static bool IsSessionTypeSupported(enum SessionType);// 0x966de90 0x78ce708ba0
	static bool IsSessionTrackingFeatureSupported(enum SessionType, enum SessionTrackingFeature);// 0x966c924 0x78ce708c80
	static bool IsSceneReconstructionSupported(enum SessionType, enum SceneReconstructionMethod);// 0x966c82c 0x78ce708d60
	static bool IsARSupported();// 0x966edb4 0x78ce708e40
	static bool IsARPinLocalStoreSupported();// 0x966d4a0 0x78ce708f20
	static bool IsARPinLocalStoreReady();// 0x966d468 0x78ce709000
	static enum GetWorldMappingStatus();// 0x966cdac 0x78ce705720
	static enum GetTrackingQualityReason();// 0x966e1f0 0x78ce705800
	static enum GetTrackingQuality();// 0x966e224 0x78ce7058e0
	static ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0x966cc08 0x78ce7059c0
	static ARSessionConfig* GetSessionConfig();// 0x966ec00 0x78ce705aa0
	static Vector[] GetPointCloud();// 0x966ccfc 0x78ce705b80
	static ARTexture* GetPersonSegmentationImage();// 0x966c5b4 0x78ce705c60
	static ARTexture* GetPersonSegmentationDepthImage();// 0x966c580 0x78ce705d40
	static bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x966c3e4 0x78ce705e20
	static int GetNumberOfTrackedFacesSupported();// 0x966bb6c 0x78ce705f00
	static ARLightEstimate* GetCurrentLightEstimate();// 0x966dae4 0x78ce705fe0
	static bool GetCameraIntrinsics(out ARCameraIntrinsics OutCameraIntrinsics);// 0x966ba98 0x78ce7060c0
	static ARTextureCameraImage* GetCameraImage();// 0x966e018 0x78ce7061a0
	static ARTextureCameraDepth* GetCameraDepth();// 0x966dfe4 0x78ce706280
	static float GetARWorldScale();// 0x966c194 0x78ce706360
	static ARTexture* GetARTexture(enum TextureType);// 0x966df3c 0x78ce706440
	static ARSessionStatus GetARSessionStatus();// 0x966ec34 0x78ce706520
	static ARTrackedPose*[] GetAllTrackedPoses();// 0x966c5e8 0x78ce706600
	static ARTrackedPoint*[] GetAllTrackedPoints();// 0x966d034 0x78ce7066e0
	static ARPlaneGeometry*[] GetAllTrackedPlanes();// 0x966d0e4 0x78ce7067c0
	static ARTrackedImage*[] GetAllTrackedImages();// 0x966cf84 0x78ce7068a0
	static AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0x966ced4 0x78ce706980
	static ARPose2D[] GetAllTracked2DPoses();// 0x966c698 0x78ce706a60
	static ARPin*[] GetAllPins();// 0x966d4d8 0x78ce706b40
	static ARTrackedGeometry*[] GetAllGeometriesByClass(class ARTrackedGeometry GeometryClass);// 0x966e04c 0x78ce706c20
	static ARTrackedGeometry*[] GetAllGeometries();// 0x966e140 0x78ce706d00
	static Transform GetAlignmentTransform();// 0x966c128 0x78ce706de0
	static ARTrackedPoint*[] FindTrackedPointsByName(FString PointName);// 0x966beb0 0x78ce706ec0
	static void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0x966dcd4 0x78ce706fa0
	static void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0x966db18 0x78ce707080
	static void CalculateClosestIntersection(out const Vector[] StartPoints, out const Vector[] EndPoints, out Vector ClosestIntersection);// 0x966bd50 0x78ce707160
	static void CalculateAlignmentTransform(out const Transform TransformInFirstCoordinateSystem, out const Transform TransformInSecondCoordinateSystem, out Transform AlignmentTransform);// 0x966bba0 0x78ce707240
	static bool AddTrackedPointWithName(out const Transform WorldTransform, FString PointName, bool bDeletePointsWithSameName);// 0x966bfa4 0x78ce707320
	static ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0x966ca1c 0x78ce703a40
	static bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0x966cde0 0x78ce703b20

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78ce71f680
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x78ce71f700
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x78ce71f780
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x78ce71d700
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78ce71d780
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78ce71d800
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x78ce71d880
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x78ce71d900
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ce71d980
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78ce71da00
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1] 0x78ce722c20
	enum SessionType;//[Offset: 0x3b, Size: 0x1] 0x78ce722cc0
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1] 0x78ce722d60
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78ce71dc00
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x78ce71dc80
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1] 0x78ce71dd00
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1] 0x78ce722e00
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1] 0x78ce722ea0
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78ce71de80
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x78ce71df00
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78ce71df80
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78ce71e000
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10] 0x78ce722f40
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4] 0x78ce71e100
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1] 0x78ce722fe0
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10] 0x78ce723080
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10] 0x78ce723120
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc] 0x78ce71e300
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x78ce71e380
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1] 0x78ce7231c0
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1] 0x78ce723260
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4] 0x78ce71e500
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10] 0x78ce723300
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1] 0x78ce7233a0
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1] 0x78ce723440
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8] 0x78ce7234e0
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8] 0x78ce723580
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8] 0x78ce723620
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8] 0x78ce7236c0
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8] 0x78ce723760
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8] 0x78ce723800
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8] 0x78ce7238a0
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8] 0x78ce723940
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8] 0x78ce7239e0
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8] 0x78ce723a80
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8] 0x78ce71e700
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8] 0x78ce71c680
	bool ShouldResetTrackedObjects();// 0x96841a4 0x78ce70cc60
	bool ShouldResetCameraTracking();// 0x968428c 0x78ce70cd40
	bool ShouldRenderCameraOverlay();// 0x96843e4 0x78ce70ce20
	bool ShouldEnableCameraTracking();// 0x96843ac 0x78ce70cf00
	bool ShouldEnableAutoFocus();// 0x9684374 0x78ce70cfe0
	void SetWorldMapData(byte[] WorldMapData);// 0x9683de0 0x78ce70d0c0
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0x9683844 0x78ce70d1a0
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0x968379c 0x78ce70d280
	void SetResetTrackedObjects(bool bNewValue);// 0x96840f4 0x78ce70d360
	void SetResetCameraTracking(bool bNewValue);// 0x96841dc 0x78ce70d440
	void SetFaceTrackingUpdate(enum InUpdate);// 0x9683954 0x78ce70d520
	void SetFaceTrackingDirection(enum InDirection);// 0x9683a30 0x78ce70d600
	void SetEnableAutoFocus(bool bNewValue);// 0x96842c4 0x78ce70d6e0
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0x9683b0c 0x78ce70d7c0
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0x9683c9c 0x78ce70d8a0
	byte[] GetWorldMapData();// 0x9683edc 0x78ce70d980
	enum GetWorldAlignment();// 0x96844ec 0x78ce70da60
	enum GetSessionType();// 0x96844b8 0x78ce70db40
	enum GetSceneReconstructionMethod();// 0x96838ec 0x78ce70dc20
	enum GetPlaneDetectionMode();// 0x9684484 0x78ce70dd00
	int GetMaxNumSimultaneousImagesTracked();// 0x9683f94 0x78ce70dde0
	enum GetLightEstimationMode();// 0x9684450 0x78ce70dec0
	enum GetFrameSyncMode();// 0x968441c 0x78ce70dfa0
	enum GetFaceTrackingUpdate();// 0x96839fc 0x78ce70e080
	enum GetFaceTrackingDirection();// 0x9683ad8 0x78ce70e160
	enum GetEnvironmentCaptureProbeType();// 0x9683f60 0x78ce70e240
	enum GetEnabledSessionTrackingFeature();// 0x9683920 0x78ce70e320
	ARVideoFormat GetDesiredVideoFormat();// 0x9683bbc 0x78ce70e400
	ARCandidateObject*[] GetCandidateObjectList();// 0x9683d5c 0x78ce70e4e0
	ARCandidateImage*[] GetCandidateImageList();// 0x9684070 0x78ce70e5c0
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0x9683bf4 0x78ce70e6a0
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0x9683fc8 0x78ce70adc0

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4] 0x78cf031600
	int Width;//[Offset: 0x4, Size: 0x4] 0x78cf031680
	int Height;//[Offset: 0x8, Size: 0x4] 0x78cf031700

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10] 0x78ce723f80
	FString FriendlyName;//[Offset: 0x40, Size: 0x10] 0x78ce743580
	Box BoundingBox;//[Offset: 0x50, Size: 0x1c] 0x78ce743600
	void SetFriendlyName(FString NewName);// 0x9690e3c 0x78ce753880
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0x9690fc4 0x78ce753960
	void SetBoundingBox(out const Box InBoundingBox);// 0x9690d60 0x78ce750080
	FString GetFriendlyName();// 0x9690f40 0x78ce750160
	byte[] GetCandidateObjectData();// 0x96910d4 0x78ce750240
	Box GetBoundingBox();// 0x9690e18 0x78ce750320

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8] 0x78ce743980
	FString FriendlyName;//[Offset: 0x38, Size: 0x10] 0x78ce743a00
	float Width;//[Offset: 0x48, Size: 0x4] 0x78ce743a80
	float Height;//[Offset: 0x4c, Size: 0x4] 0x78ce743b00
	enum Orientation;//[Offset: 0x50, Size: 0x1] 0x78ce724160
	float GetPhysicalWidth();// 0x9690778 0x78ce750400
	float GetPhysicalHeight();// 0x969075c 0x78ce7504e0
	enum GetOrientation();// 0x9690740 0x78ce7505c0
	FString GetFriendlyName();// 0x9690794 0x78ce7506a0
	Texture2D* GetCandidateTexture();// 0x9690818 0x78ce750780

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x80] 0x78ce71a400
	static void SetPlaneComponentDebugMode(enum NewDebugMode);// 0x9674f6c 0x78ce70a340
	static void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0x9674e40 0x78ce70a420
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0x9674c78 0x78ce70a500
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0x8a873f8 0x78ce70a5e0
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0x8a873f8 0x78ce70a6c0
	static <enum,LinearColor> GetObjectClassificationDebugColors();// 0x9674dac 0x78ce70a7a0

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78cf032100
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78cf030080
	Vector Center;//[Offset: 0x50, Size: 0xc] 0x78cf030100
	Vector Extents;//[Offset: 0x5c, Size: 0xc] 0x78cf030180
	Vector[] BoundaryVertices;//[Offset: 0x68, Size: 0x10] 0x78cefd5ba0
	enum ObjectClassification;//[Offset: 0x78, Size: 0x1] 0x78cefd5c40

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4] 0x78cf030c80
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8] 0x78cf030d00
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8] 0x78cf030d80

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x274, Size: 0x1] 0x78ce71a200
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0x9675aec 0x78ce70a0a0
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0x8a873f8 0x78ce70a180
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0x8a873f8 0x78ce70a260

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x274, Size: 0x1] 0x78ce722540
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1] 0x78ce719e80
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1] 0x78ce719f00
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x278, Size: 0x40] 0x78ce719f80
	static void SetFaceComponentDebugMode(enum NewDebugMode);// 0x967640c 0x78ce709d20
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0x9676320 0x78ce709e00
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0x8a873f8 0x78ce709ee0
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0x8a873f8 0x78ce709fc0

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78cf030300
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0xc] 0x78cf030380
	Vector RightEyePosition;//[Offset: 0x24, Size: 0xc] 0x78cf030400
	Vector LookAtTarget;//[Offset: 0x30, Size: 0xc] 0x78cf030480

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x60] 0x78ce719b80
	static void SetImageComponentDebugMode(enum NewDebugMode);// 0x9676dfc 0x78ce7099a0
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0x9676ce8 0x78ce709a80
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0x8a873f8 0x78ce709b60
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0x8a873f8 0x78ce709c40

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78cf030500
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78cf030580
	ARCandidateImage* DetectedImage;//[Offset: 0x50, Size: 0x8] 0x78cf030600
	Vector2D EstimatedSize;//[Offset: 0x58, Size: 0x8] 0x78cf030680

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x70] 0x78ce719900
	static void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0x96777f4 0x78ce709620
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0x96776e8 0x78ce709700
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0x8a873f8 0x78ce7097e0
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0x8a873f8 0x78ce7098c0

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78cf030700
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78cf030780
	Vector Extents;//[Offset: 0x50, Size: 0xc] 0x78cf030800
	FString QRCode;//[Offset: 0x60, Size: 0x10] 0x78cf030880

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x40] 0x78ce719680
	static void SetPoseComponentDebugMode(enum NewDebugMode);// 0x9678304 0x78ce7092a0
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0x9678200 0x78ce709380
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0x8a873f8 0x78ce709460
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0x8a873f8 0x78ce709540

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x78cf030900
	Transform[] JointTransforms;//[Offset: 0x30, Size: 0x10] 0x78cefd5ce0

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x30] 0x78ce71b580
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0x9678d24 0x78ce70c9c0
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0x8a873f8 0x78ce7090e0
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0x8a873f8 0x78ce7091c0

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x78cf030a00

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x30] 0x78ce71b380
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0x96795d0 0x78ce70c720
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0x8a873f8 0x78ce70c800
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0x8a873f8 0x78ce70c8e0

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x78cf030a80

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x60] 0x78ce71b180
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0x9679e7c 0x78ce70c480
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0x8a873f8 0x78ce70c560
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0x8a873f8 0x78ce70c640

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78cf030b00
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78cf030b80
	enum ObjectClassification;//[Offset: 0x50, Size: 0x1] 0x78cefd5d80

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x70] 0x78ce71af00
	static void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0x967a8a8 0x78ce70c100
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0x967a78c 0x78ce70c1e0
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0x8a873f8 0x78ce70c2c0
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0x8a873f8 0x78ce70c3a0

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x78cf030e00
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x78cf030e80
	float Longitude;//[Offset: 0x50, Size: 0x4] 0x78cf030f00
	float Latitude;//[Offset: 0x54, Size: 0x4] 0x78cf030f80
	float AltitudeMeters;//[Offset: 0x58, Size: 0x4] 0x78cf031000
	enum AltitudeSource;//[Offset: 0x5c, Size: 0x1] 0x78cefd5e20
	FString AnchorName;//[Offset: 0x60, Size: 0x10] 0x78cefef800

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8] 0x78ce71b700
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8] 0x78ce71b780
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x78ce71b800
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x78ce71b880
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x78ce721dc0
	delegate OnARTrackingStateChanged;//[Offset: 0xc0, Size: 0x10] 0x78ce71b980
	delegate OnARTransformUpdated;//[Offset: 0xd0, Size: 0x10] 0x78ce71ba00
	enum GetTrackingState();// 0x96826cc 0x78ce70aea0
	ARTrackedGeometry* GetTrackedGeometry();// 0x9682698 0x78ce70af80
	SceneComponent* GetPinnedComponent();// 0x9682664 0x78ce70b060
	Transform GetLocalToWorldTransform();// 0x9682700 0x78ce70b140
	Transform GetLocalToTrackingTransform();// 0x968276c 0x78ce70b220
	FName GetDebugName();// 0x96824a4 0x78ce70b300
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0x96824d8 0x78ce70b3e0

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4] 0x78cf031e00
	enum TraceChannel;//[Offset: 0x4, Size: 0x1] 0x78cefd5b00
	Transform LocalTransform;//[Offset: 0x10, Size: 0x30] 0x78cf031f00
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x40, Size: 0x8] 0x78cf031f80

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0xd8, Size: 0x1] 0x78ce724de0
	float Timestamp;//[Offset: 0xdc, Size: 0x4] 0x78ce740a80
	Guid ExternalTextureGuid;//[Offset: 0xe0, Size: 0x10] 0x78ce740b00
	Vector2D Size;//[Offset: 0xf0, Size: 0x8] 0x78ce740b80

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARCameraIntrinsics
	IntPoint ImageResolution;//[Offset: 0x0, Size: 0x8] 0x78cf031c80
	Vector2D FocalLength;//[Offset: 0x8, Size: 0x8] 0x78cf031d00
	Vector2D PrincipalPoint;//[Offset: 0x10, Size: 0x8] 0x78cf031d80

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0xf8, Size: 0x1] 0x78ce724ca0
	enum DepthAccuracy;//[Offset: 0xf9, Size: 0x1] 0x78ce724d40
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1] 0x78ce740980

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10] 0x78cf031500
	enum Status;//[Offset: 0x10, Size: 0x1] 0x78cefd5600

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object
	ARPose3D TrackedPose;//[Offset: 0xf8, Size: 0x50] 0x78ce742c80
	ARPose3D GetTrackedPoseData();// 0x968d800 0x78ce750cc0

--------------------------------
Class: ARPose3D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x78cf031a80
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10] 0x78cefd5920
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x78cefd59c0
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1] 0x78cefd5a60

--------------------------------
Class: ARSkeletonDefinition
	int NumJoints;//[Offset: 0x0, Size: 0x4] 0x78cf031900
	FName[] JointNames;//[Offset: 0x8, Size: 0x10] 0x78cefd57e0
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10] 0x78cefd5880

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	enum Orientation;//[Offset: 0xf8, Size: 0x1] 0x78ce724700
	Vector Center;//[Offset: 0xfc, Size: 0xc] 0x78ce741a00
	Vector Extent;//[Offset: 0x108, Size: 0xc] 0x78ce741a80
	Vector[] BoundaryPolygon;//[Offset: 0x118, Size: 0x10] 0x78ce7247a0
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x128, Size: 0x8] 0x78ce741b80
	ARPlaneGeometry* GetSubsumedBy();// 0x968ab50 0x78ce751580
	enum GetOrientation();// 0x968ab34 0x78ce751660
	Vector GetExtent();// 0x968ac5c 0x78ce751740
	Vector GetCenter();// 0x968ac80 0x78ce751820
	Vector[] GetBoundaryPolygonInLocalSpace();// 0x968ab6c 0x78ce751900

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0xf8, Size: 0x8] 0x78ce741780
	Vector2D EstimatedSize;//[Offset: 0x100, Size: 0x8] 0x78ce741800
	Vector2D GetEstimateSize();// 0x968b760 0x78ce7513c0
	ARCandidateImage* GetDetectedImage();// 0x968b794 0x78ce7514a0

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0xf8, Size: 0xc] 0x78ce742e80
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x108, Size: 0x8] 0x78ce742f00
	Vector GetExtent();// 0x968cca0 0x78ce750e80
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0x968cc6c 0x78ce750f60

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x130, Size: 0x1] 0x78ce724c00
	float Timestamp;//[Offset: 0x134, Size: 0x4] 0x78ce740700
	Guid ExternalTextureGuid;//[Offset: 0x138, Size: 0x10] 0x78ce740780
	Vector2D Size;//[Offset: 0x148, Size: 0x8] 0x78ce740800

--------------------------------
Class: ARPose2D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x78cf031780
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10] 0x78cefd56a0
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x78cefd5740

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	static ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0x96706b4 0x78ce7074e0
	static enum GetTraceChannel(out const ARTraceResult TraceResult);// 0x96705a4 0x78ce7075c0
	static Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0x96707c4 0x78ce7076a0
	static Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0x96708e4 0x78ce707780
	static Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0x9670a04 0x78ce707860
	static float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0x9670b24 0x78ce707940

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78ce718e80
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78ce718f00
	static ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0x96716a4 0x78ce707400

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78ce718b80
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78ce718c00
	static ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0x9671c30 0x78ce70ace0

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0x967b5c0 0x78ce70bca0
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0x967b710 0x78ce70bd80
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0x967b8b8 0x78ce70be60
	static ARDependencyHandler* GetARDependencyHandler();// 0x967bb78 0x78ce70bf40
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0x967ba18 0x78ce70c020

--------------------------------
Class: ARGeoTrackingSupport.Object
	static ARGeoTrackingSupport* GetGeoTrackingSupport();// 0x967ca24 0x78ce70b760
	enum GetGeoTrackingStateReason();// 0x967c9ac 0x78ce70b840
	enum GetGeoTrackingState();// 0x967c9e8 0x78ce70b920
	enum GetGeoTrackingAccuracy();// 0x967c970 0x78ce70ba00
	bool AddGeoAnchorAtLocationWithAltitude(float Longitude, float Latitude, float AltitudeMeters, FString OptionalAnchorName);// 0x967c5a0 0x78ce70bae0
	bool AddGeoAnchorAtLocation(float Longitude, float Latitude, FString OptionalAnchorName);// 0x967c7b4 0x78ce70bbc0

--------------------------------
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78cee65a00
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78cee65a80
	void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error);// 0x8a873f8 0x78cee27b00
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailabilityAtLocation(Object* WorldContextObject, float Longitude, float Latitude);// 0x967d088 0x78cee27be0
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailability(Object* WorldContextObject);// 0x967d1c4 0x78cee27cc0

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x78cee65580
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x78cee65600
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0x8a873f8 0x78cee27940
	static GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0x967d754 0x78cee27a20

--------------------------------
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object
	delegate OnARActorSpawnedDelegate;//[Offset: 0x1f8, Size: 0x10] 0x78cee67300
	delegate OnARActorToBeDestroyedDelegate;//[Offset: 0x208, Size: 0x10] 0x78cee67380
	void ServerSpawnARActor(class Object ComponentClass, Guid NativeID);// 0x968107c 0x78cee275c0
	void ServerDestroyARActor(ARActor* Actor);// 0x9680f94 0x78cee276a0
	void InstanceARActorToBeDestroyedDelegate__DelegateSignature(ARActor* Actor);// 0x8a873f8 0x78cee27780
	void InstanceARActorSpawnedDelegate__DelegateSignature(class Object ComponentClass, Guid NativeID, ARActor* SpawnedActor);// 0x8a873f8 0x78cee27860

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4] 0x78ce71bf80
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4] 0x78ce71c000
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10] 0x78ce71c080
	float GetAmbientIntensityLumens();// 0x9681b8c 0x78ce70b4c0
	float GetAmbientColorTemperatureKelvin();// 0x9681b58 0x78ce70b5a0
	LinearColor GetAmbientColor();// 0x9681b20 0x78ce70b680

--------------------------------
Class: AROriginActor.Actor.Object

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x304, Size: 0x4] 0x78ce71eb80
	void SetPreviewImageData(byte[] ImageData);// 0x96856dc 0x78ce70f4a0
	void SetARWorldSharingIsReady();// 0x96855cc 0x78ce70f580
	void SetARSharedWorldData(byte[] ARWorldData);// 0x96855e0 0x78ce70f660
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0x9685598 0x78ce70f740

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x288, Size: 0x10] 0x78ce7251a0
	byte[] ARWorldData;//[Offset: 0x298, Size: 0x10] 0x78ce725240
	int PreviewImageBytesTotal;//[Offset: 0x2a8, Size: 0x4] 0x78ce71e800
	int ARWorldBytesTotal;//[Offset: 0x2ac, Size: 0x4] 0x78ce71e880
	int PreviewImageBytesDelivered;//[Offset: 0x2b0, Size: 0x4] 0x78ce71e900
	int ARWorldBytesDelivered;//[Offset: 0x2b4, Size: 0x4] 0x78ce71e980
	void K2_OnARWorldMapIsReady();// 0x8a873f8 0x78ce70f200

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0x968655c 0x78ce70ee80
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0x96862f0 0x78ce70ef60
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0x96861b4 0x78ce70f040
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0x968642c 0x78ce70f120

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x230, Size: 0x8] 0x78ce71fa80
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0x9686d84 0x78ce70ecc0

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object
	FString QRCode;//[Offset: 0x108, Size: 0x10] 0x78ce741680
	int Version;//[Offset: 0x118, Size: 0x4] 0x78ce741700

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0xf8, Size: 0xc] 0x78ce743080
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x78ce743100
	<enum,float> BlendShapes;//[Offset: 0x108, Size: 0x50] 0x78cee14600
	Transform LeftEyeTransform;//[Offset: 0x190, Size: 0x30] 0x78ce741180
	Transform RightEyeTransform;//[Offset: 0x1c0, Size: 0x30] 0x78ce741200
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0x968c1f0 0x78ce751040
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0x968c2b0 0x78ce751120
	float GetBlendShapeValue(enum BlendShape);// 0x968c4a4 0x78ce751200
	<enum,float> GetBlendShapes();// 0x968c36c 0x78ce7512e0

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0xf8, Size: 0x8] 0x78ce742d80
	ARCandidateObject* GetDetectedObject();// 0x968d210 0x78ce750da0

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x968ddac 0x78ce750be0

--------------------------------
Class: ARGeoAnchor.ARTrackedGeometry.Object
	float GetLongitude();// 0x968e4d8 0x78ce750860
	float GetLatitude();// 0x968e4bc 0x78ce750940
	enum GetAltitudeSource();// 0x968e484 0x78ce750a20
	float GetAltitudeMeters();// 0x968e4a0 0x78ce750b00

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object
	delegate OnAddTrackedGeometry;//[Offset: 0xb0, Size: 0x10] 0x78ce743e80
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc0, Size: 0x10] 0x78ce743f00
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd0, Size: 0x10] 0x78ce743f80
	delegate OnAddTrackedPlane;//[Offset: 0xe0, Size: 0x10] 0x78ce744000
	delegate OnUpdateTrackedPlane;//[Offset: 0xf0, Size: 0x10] 0x78ce744080
	delegate OnRemoveTrackedPlane;//[Offset: 0x100, Size: 0x10] 0x78ce744100
	delegate OnAddTrackedPoint;//[Offset: 0x110, Size: 0x10] 0x78ce744180
	delegate OnUpdateTrackedPoint;//[Offset: 0x120, Size: 0x10] 0x78ce744200
	delegate OnRemoveTrackedPoint;//[Offset: 0x130, Size: 0x10] 0x78ce742180
	delegate OnAddTrackedImage;//[Offset: 0x140, Size: 0x10] 0x78ce742200
	delegate OnUpdateTrackedImage;//[Offset: 0x150, Size: 0x10] 0x78ce742280
	delegate OnRemoveTrackedImage;//[Offset: 0x160, Size: 0x10] 0x78ce742300
	delegate OnAddTrackedFace;//[Offset: 0x170, Size: 0x10] 0x78ce742380
	delegate OnUpdateTrackedFace;//[Offset: 0x180, Size: 0x10] 0x78ce742400
	delegate OnRemoveTrackedFace;//[Offset: 0x190, Size: 0x10] 0x78ce742480
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a0, Size: 0x10] 0x78ce742500
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b0, Size: 0x10] 0x78ce742580
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c0, Size: 0x10] 0x78ce742600
	delegate OnAddTrackedObject;//[Offset: 0x1d0, Size: 0x10] 0x78ce742680
	delegate OnUpdateTrackedObject;//[Offset: 0x1e0, Size: 0x10] 0x78ce742700
	delegate OnRemoveTrackedObject;//[Offset: 0x1f0, Size: 0x10] 0x78ce742780

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0x96bf308 0x78ce754ca0
	static void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0x96be228 0x78ce754d80
	static void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0x96be340 0x78ce754e60
	static void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x96bf6cc 0x78ce754f40
	static void SetTrackingOrigin(byte Origin);// 0x96bf58c 0x78ce755020
	static void SetSpectatorScreenTexture(Texture* InTexture);// 0x96bf0a4 0x78ce755100
	static void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0x96bee58 0x78ce7551e0
	static void SetSpectatorScreenMode(enum Mode);// 0x96bf13c 0x78ce7552c0
	static void SetClippingPlanes(float Near, float Far);// 0x96bf818 0x78ce7553a0
	static void ResetOrientationAndPosition(float Yaw, byte Options);// 0x96bf8f8 0x78ce755480
	static bool IsSpectatorScreenModeControllable();// 0x96bf1d4 0x78ce755560
	static bool IsInLowPersistenceMode();// 0x96bfa6c 0x78ce755640
	static bool IsHeadMountedDisplayEnabled();// 0x96c0484 0x78ce751d60
	static bool IsHeadMountedDisplayConnected();// 0x96c044c 0x78ce751e40
	static bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0x96be83c 0x78ce751f20
	static bool HasValidTrackingPosition();// 0x96c0120 0x78ce752000
	static int GetXRSystemFlags();// 0x96c0330 0x78ce7520e0
	static float GetWorldToMetersScale(Object* WorldContext);// 0x96bf624 0x78ce7521c0
	static void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x96bf20c 0x78ce7522a0
	static FString GetVersionString();// 0x96c0280 0x78ce752380
	static Transform GetTrackingToWorldTransform(Object* WorldContext);// 0x96bf4a0 0x78ce752460
	static void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int index);// 0x96bfd18 0x78ce752540
	static byte GetTrackingOrigin();// 0x96bf558 0x78ce752620
	static float GetScreenPercentage();// 0x96bf7e4 0x78ce752700
	static void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x96bfa84 0x78ce7527e0
	static float GetPixelDensity();// 0x96bf7b0 0x78ce7528c0
	static void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x96c0158 0x78ce7529a0
	static int GetNumOfTrackingSensors();// 0x96c00ec 0x78ce752a80
	static void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0x96be5d8 0x78ce752b60
	static byte GetHMDWornState();// 0x96c024c 0x78ce752c40
	static FName GetHMDDeviceName();// 0x96c0364 0x78ce752d20
	static void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0x96be74c 0x78ce752e00
	static void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x96be8f8 0x78ce752ee0
	static void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x96beb28 0x78ce752fc0
	static bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector Position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec);// 0x96bddc0 0x78ce7530a0
	static XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0x96bed18 0x78ce753180
	static void EnableLowPersistenceMode(bool bEnable);// 0x96bf9dc 0x78ce753260
	static bool EnableHMD(bool bEnable);// 0x96c0398 0x78ce753340
	static void DisconnectRemoteXRDevice();// 0x96be400 0x78ce753420
	static byte ConnectRemoteXRDevice(FString IpAddress, const int BitRate);// 0x96be414 0x78ce753500
	static bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0x96be514 0x78ce7535e0
	static void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0x96be184 0x78ce7536c0
	static void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0x96bf3d4 0x78ce7537a0

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x78cf032b00
	int DeviceID;//[Offset: 0x8, Size: 0x4] 0x78cf032b80

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf032f00
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x78cf032f80
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x78cf033000
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1] 0x78cefd7b80
	enum HandIndex;//[Offset: 0x1d, Size: 0x1] 0x78cefd52e0
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1] 0x78cefd5380
	Vector GripPosition;//[Offset: 0x20, Size: 0xc] 0x78cf031100
	Quat GripRotation;//[Offset: 0x30, Size: 0x10] 0x78cf031180
	Vector AimPosition;//[Offset: 0x40, Size: 0xc] 0x78cf031200
	Quat AimRotation;//[Offset: 0x50, Size: 0x10] 0x78cf031280
	Vector[] HandKeyPositions;//[Offset: 0x60, Size: 0x10] 0x78cefd5420
	Quat[] HandKeyRotations;//[Offset: 0x70, Size: 0x10] 0x78cefd54c0
	float[] HandKeyRadii;//[Offset: 0x80, Size: 0x10] 0x78cefd5560
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78cf031480

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf032c00
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x78cf032c80
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x78cf032d00
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1] 0x78cefd7ae0
	Vector Position;//[Offset: 0x20, Size: 0xc] 0x78cf032e00
	Quat Rotation;//[Offset: 0x30, Size: 0x10] 0x78cf032e80

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf032800
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cf032880
	enum AxisGesture;//[Offset: 0x2, Size: 0x1] 0x78cefd7a40
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cf032980
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cf032a00
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x78cf032a80

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x440, Size: 0x4] 0x78ce747900
	enum Hand;//[Offset: 0x444, Size: 0x1] 0x78ce726320
	FName MotionSource;//[Offset: 0x448, Size: 0x8] 0x78ce747a00
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1] 0x78ce747a80
	enum CurrentTrackingStatus;//[Offset: 0x451, Size: 0x1] 0x78ce7263c0
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452, Size: 0x1] 0x78ce747b80
	FName DisplayModelSource;//[Offset: 0x454, Size: 0x8] 0x78ce747c00
	StaticMesh* CustomDisplayMesh;//[Offset: 0x460, Size: 0x8] 0x78ce747c80
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x468, Size: 0x10] 0x78ce726460
	PrimitiveComponent* DisplayComponent;//[Offset: 0x4e0, Size: 0x8] 0x78ce747d80
	void SetTrackingSource(const enum NewSource);// 0x96c2bac 0x78ce754300
	void SetTrackingMotionSource(const FName NewSource);// 0x96c2ad0 0x78ce7543e0
	void SetShowDeviceModel(const bool bShowControllerModel);// 0x96c2da4 0x78ce7544c0
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0x96c2cfc 0x78ce7545a0
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0x96c2c54 0x78ce754680
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0x96c2a28 0x78ce754760
	void OnMotionControllerUpdated();// 0x8a873f8 0x78ce754840
	bool IsTracked();// 0x96c2e54 0x78ce754920
	enum GetTrackingSource();// 0x96c2b78 0x78ce754a00
	float GetParameterValue(FName InName, out bool bValueFound);// 0x96c2920 0x78ce754ae0
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0x96c2814 0x78ce754bc0

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetIsControllerMotionTrackingEnabledByDefault(bool enable);// 0x96c4184 0x78ce756d00
	static bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0x96c3f2c 0x78ce756de0
	static bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x96c4024 0x78ce756ec0
	static bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x96c3e80 0x78ce756fa0
	static bool IsMotionTrackedDeviceCountManagementNecessary();// 0x96c4224 0x78ce757080
	static bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0x96c36fc 0x78ce757160
	static int GetMotionTrackingEnabledControllerCount();// 0x96c411c 0x78ce757240
	static int GetMaximumMotionTrackedControllerCount();// 0x96c4150 0x78ce757320
	static FName GetActiveTrackingSystemName();// 0x96c37f4 0x78ce753a40
	static FName[] EnumerateMotionSources();// 0x96c3828 0x78ce753b20
	static bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x96c3c90 0x78ce753c00
	static bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x96c3d88 0x78ce753ce0
	static bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x96c3be4 0x78ce753dc0
	static void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x96c3a1c 0x78ce753ea0
	static void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x96c3b00 0x78ce753f80
	static void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x96c38d8 0x78ce754060
	static void DisableMotionTrackingOfAllControllers();// 0x96c3970 0x78ce754140
	static void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x96c3984 0x78ce754220

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb0, Size: 0x10] 0x78cee66980
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc0, Size: 0x10] 0x78cee66a00
	delegate HMDRecenteredDelegate;//[Offset: 0xd0, Size: 0x10] 0x78cee66a80
	delegate HMDLostDelegate;//[Offset: 0xe0, Size: 0x10] 0x78cee66b00
	delegate HMDReconnectedDelegate;//[Offset: 0xf0, Size: 0x10] 0x78cee66b80
	delegate HMDConnectCanceledDelegate;//[Offset: 0x100, Size: 0x10] 0x78cee66c00
	delegate HMDPutOnHeadDelegate;//[Offset: 0x110, Size: 0x10] 0x78cee66c80
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x120, Size: 0x10] 0x78cee66d00
	delegate VRControllerRecenteredDelegate;//[Offset: 0x130, Size: 0x10] 0x78cee66d80

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	static PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0x96c5014 0x78ce756b40
	static PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0x96c5274 0x78ce756c20

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10] 0x78ce749c00
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10] 0x78ce749c80
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8] 0x78ce749d00
	static AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0x96c5b2c 0x78ce756980
	static AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0x96c591c 0x78ce756a60

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowLoadingScreen();// 0x96c6598 0x78ce756520
	static void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x96c67d0 0x78ce756600
	static void HideLoadingScreen();// 0x96c6584 0x78ce7566e0
	static void ClearLoadingScreenSplashes();// 0x96c67bc 0x78ce7567c0
	static void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0x96c65ac 0x78ce7568a0

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x668, Size: 0x10] 0x78ce74e580
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x678, Size: 0x10] 0x78ce74e600
	Guid GenerationGuid;//[Offset: 0x688, Size: 0x10] 0x78ce74e680

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	static int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x9d282a8 0x78ce7589e0
	static int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x9d28164 0x78ce758ac0

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10] 0x78ce780780
	float Density;//[Offset: 0x38, Size: 0x4] 0x78ce780800
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4] 0x78ce780880
	float Radius;//[Offset: 0x40, Size: 0x4] 0x78ce780900
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78ce780980
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4] 0x78ce780a00
	enum Scaling;//[Offset: 0x4c, Size: 0x1] 0x78ce725380
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8] 0x78ce780b00
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8] 0x78ce780b80
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8] 0x78ce780c00
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc] 0x78ce780c80
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1] 0x78ce780d00
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4] 0x78ce780d80
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce780e00
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8] 0x78ce780e80
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78ce780f00
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4] 0x78ce780f80
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x78ce781000
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4] 0x78ce781080
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8] 0x78ce74f800
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8] 0x78ce74f880
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10] 0x78ce725420
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4] 0x78ce74f980
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10] 0x78ce7254c0
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4] 0x78ce74fa80
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8] 0x78ce74fb00
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x78ce74fb80
	Vector CollisionScale;//[Offset: 0x108, Size: 0xc] 0x78ce74fc00
	BoxSphereBounds MeshBounds;//[Offset: 0x114, Size: 0x1c] 0x78ce74fc80
	Vector LowBoundOriginRadius;//[Offset: 0x130, Size: 0xc] 0x78ce74fd00
	byte Mobility;//[Offset: 0x13c, Size: 0x1] 0x78ce74fd80
	Int32Interval CullDistance;//[Offset: 0x140, Size: 0x8] 0x78ce74fe00
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78ce74fe80
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x78ce74ff00
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 0x1] 0x78ce74ff80
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 0x1] 0x78ce74e780
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 0x1] 0x78ce74e800
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 0x1] 0x78ce74e880
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 0x1] 0x78ce74e900
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x148, Size: 0x1] 0x78ce74e980
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1] 0x78ce74ea00
	int OverriddenLightMapRes;//[Offset: 0x14c, Size: 0x4] 0x78ce74ea80
	enum LightmapType;//[Offset: 0x150, Size: 0x1] 0x78ce725560
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1] 0x78ce74eb80
	BodyInstance BodyInstance;//[Offset: 0x158, Size: 0x150] 0x78ce74ec00
	byte CustomNavigableGeometry;//[Offset: 0x2a8, Size: 0x1] 0x78ce74ec80
	LightingChannels LightingChannels;//[Offset: 0x2a9, Size: 0x1] 0x78ce74ed00
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2aa, Size: 0x1] 0x78ce74ed80
	enum CustomDepthStencilWriteMask;//[Offset: 0x2ab, Size: 0x1] 0x78ce725600
	int CustomDepthStencilValue;//[Offset: 0x2ac, Size: 0x4] 0x78ce74ee80
	int TranslucencySortPriority;//[Offset: 0x2b0, Size: 0x4] 0x78ce74ef00
	float CollisionRadius;//[Offset: 0x2b4, Size: 0x4] 0x78ce74ef80
	float ShadeRadius;//[Offset: 0x2b8, Size: 0x4] 0x78ce74f000
	int NumSteps;//[Offset: 0x2bc, Size: 0x4] 0x78ce74f080
	float InitialSeedDensity;//[Offset: 0x2c0, Size: 0x4] 0x78ce74f100
	float AverageSpreadDistance;//[Offset: 0x2c4, Size: 0x4] 0x78ce74f180
	float SpreadVariance;//[Offset: 0x2c8, Size: 0x4] 0x78ce74f200
	int SeedsPerStep;//[Offset: 0x2cc, Size: 0x4] 0x78ce74f280
	int DistributionSeed;//[Offset: 0x2d0, Size: 0x4] 0x78ce74f300
	float MaxInitialSeedOffset;//[Offset: 0x2d4, Size: 0x4] 0x78ce74f380
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78ce74f400
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x78ce74f480
	float MaxInitialAge;//[Offset: 0x2dc, Size: 0x4] 0x78ce74f500
	float MaxAge;//[Offset: 0x2e0, Size: 0x4] 0x78ce74f580
	float OverlapPriority;//[Offset: 0x2e4, Size: 0x4] 0x78ce74f600
	FloatInterval ProceduralScale;//[Offset: 0x2e8, Size: 0x8] 0x78ce74f680
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x2f0, Size: 0x88] 0x78ce74f700
	int ChangeCount;//[Offset: 0x378, Size: 0x4] 0x78ce74f780
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1] 0x78ce74d700
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1] 0x78ce74d780
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1] 0x78ce74d800
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1] 0x78ce74d880
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37c, Size: 0x1] 0x78ce74d900
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37c, Size: 0x1] 0x78ce74d980
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37c, Size: 0x1] 0x78ce74da00
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37c, Size: 0x1] 0x78ce74da80
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37d, Size: 0x1] 0x78ce74db00
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37d, Size: 0x1] 0x78ce74db80
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37d, Size: 0x1] 0x78ce74dc00
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37d, Size: 0x1] 0x78ce74dc80
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37d, Size: 0x1] 0x78ce74dd00
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37d, Size: 0x1] 0x78ce74dd80
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37d, Size: 0x1] 0x78ce74de00
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37d, Size: 0x1] 0x78ce74de80
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37e, Size: 0x1] 0x78ce74df00
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x380, Size: 0x10] 0x78ce7256a0
	int VirtualTextureCullMips;//[Offset: 0x390, Size: 0x4] 0x78ce74e000
	enum VirtualTextureRenderPassType;//[Offset: 0x394, Size: 0x1] 0x78ce725740

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf033980
	float MaskThreshold;//[Offset: 0x4, Size: 0x4] 0x78cf033a00
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78cf033a80

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x398, Size: 0x8] 0x78ce7252e0
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1] 0x78ce780700

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x398, Size: 0x8] 0x78ce780600
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x3a0, Size: 0x10] 0x78ce727ae0
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x3b0, Size: 0x8] 0x78ce727b80

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8] 0x78ce781d00
	Vector TouchingActorEntryPosition;//[Offset: 0x238, Size: 0xc] 0x78ce781d80
	Vector FoliageVelocity;//[Offset: 0x244, Size: 0xc] 0x78ce781e00
	Vector FoliageForce;//[Offset: 0x250, Size: 0xc] 0x78ce781e80
	Vector FoliagePosition;//[Offset: 0x25c, Size: 0xc] 0x78ce781f00
	float FoliageDamageImpulseScale;//[Offset: 0x268, Size: 0x4] 0x78ce781f80
	float FoliageTouchImpulseScale;//[Offset: 0x26c, Size: 0x4] 0x78ce782000
	float FoliageStiffness;//[Offset: 0x270, Size: 0x4] 0x78ce782080
	float FoliageStiffnessQuadratic;//[Offset: 0x274, Size: 0x4] 0x78ce782100
	float FoliageDamping;//[Offset: 0x278, Size: 0x4] 0x78ce780080
	float MaxDamageImpulse;//[Offset: 0x27c, Size: 0x4] 0x78ce780100
	float MaxTouchImpulse;//[Offset: 0x280, Size: 0x4] 0x78ce780180
	float MaxForce;//[Offset: 0x284, Size: 0x4] 0x78ce780200
	float Mass;//[Offset: 0x288, Size: 0x4] 0x78ce780280
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x9d2a398 0x78ce758900

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x258, Size: 0x8] 0x78ce781700

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x258, Size: 0x8] 0x78ce783180

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb0, Size: 0x8] 0x78ce781500
	float TileOverlap;//[Offset: 0xb8, Size: 0x4] 0x78ce781580
	Volume* SpawningVolume;//[Offset: 0xc0, Size: 0x8] 0x78ce781600
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10] 0x78ce781680

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4] 0x78ce781200
	float TileSize;//[Offset: 0x2c, Size: 0x4] 0x78ce781280
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4] 0x78ce781300
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4] 0x78ce781380
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10] 0x78ce7279a0
	void Simulate(int NumSteps);// 0x9d2bad8 0x78ce758820

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8] 0x78cf033800
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8] 0x78cf033880
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf033900
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8] 0x78cefd79a0

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8] 0x78ce781100
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10] 0x78ce727900

--------------------------------
Class: ProceduralFoliageInstance
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x78cf033500
	Vector Location;//[Offset: 0x10, Size: 0xc] 0x78cf033580
	float Age;//[Offset: 0x1c, Size: 0x4] 0x78cf033600
	Vector Normal;//[Offset: 0x20, Size: 0xc] 0x78cf033680
	float Scale;//[Offset: 0x2c, Size: 0x4] 0x78cf033700
	FoliageType* Type;//[Offset: 0x30, Size: 0x8] 0x78cf033780

--------------------------------
Class: ControlPointMeshActor.Actor.Object
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78ce783100

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object
	void RequestLandscapeUpdate();// 0x9d77b2c 0x78ce757b00
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0x9d77cc4 0x78ce757be0
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0x9d77b40 0x78ce757cc0
	void GetBlueprintRenderDependencies(out Object*[] OutStreamableAssets);// 0x8a873f8 0x78ce757da0

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c] 0x78ce787e00
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10] 0x78ce787e80
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4] 0x78ce787f00
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4] 0x78ce787f80
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4] 0x78ce788000
	Vector DrawScale;//[Offset: 0x60, Size: 0xc] 0x78ce788080
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x110, Size: 0x10] 0x78ce726a00

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x580, Size: 0x1c] 0x78ce789900

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x368, Size: 0x10] 0x78ce728da0
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1] 0x78ce788780
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 0x1] 0x78ce788800
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x378, Size: 0x1] 0x78ce788880
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x378, Size: 0x1] 0x78ce788900

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo
	FName TextureName;//[Offset: 0x0, Size: 0x8] 0x78cf035d00
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x78cf035d80

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x520, Size: 0x10] 0x78ce788680

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x220, Size: 0x8] 0x78ce788600

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x4d0, Size: 0x10] 0x78ce788480
	IntPoint[] ProxyComponentBases;//[Offset: 0x4e0, Size: 0x10] 0x78ce728d00
	int8 ProxyLOD;//[Offset: 0x4f0, Size: 0x1] 0x78ce788580

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4] 0x78ce78a500

--------------------------------
Class: LandscapeSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10] 0x78ce728760

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78cf036f00
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8] 0x78cf036f80
	ExpressionInput Input;//[Offset: 0x10, Size: 0xc] 0x78cf037000

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10] 0x78ce7286c0
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10] 0x78ce789700

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x78cf036b80
	byte BlendType;//[Offset: 0x8, Size: 0x1] 0x78cf036c00
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0xc] 0x78cf036c80
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0xc] 0x78cf036d00
	float PreviewWeight;//[Offset: 0x34, Size: 0x4] 0x78cf036d80
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0xc] 0x78cf036e00
	float ConstHeightInput;//[Offset: 0x44, Size: 0x4] 0x78cf036e80

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1] 0x78ce78b480
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1] 0x78ce78b500
	float MappingScale;//[Offset: 0x3c, Size: 0x4] 0x78ce78b580
	float MappingRotation;//[Offset: 0x40, Size: 0x4] 0x78ce789500
	float MappingPanU;//[Offset: 0x44, Size: 0x4] 0x78ce789580
	float MappingPanV;//[Offset: 0x48, Size: 0x4] 0x78ce789600

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78ce78b300
	float PreviewWeight;//[Offset: 0x44, Size: 0x4] 0x78ce78b380
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10] 0x78ce78b400

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0xc] 0x78ce78b080
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0xc] 0x78ce78b100
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x78ce78b180
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78ce78b200
	Guid ExpressionGUID;//[Offset: 0x70, Size: 0x10] 0x78ce78b280

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x78ce78ad80
	ExpressionInput Layer;//[Offset: 0x50, Size: 0xc] 0x78ce78ae00
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x78ce78ae80
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4] 0x78ce78af00
	Vector ConstBase;//[Offset: 0x70, Size: 0xc] 0x78ce78af80
	Guid ExpressionGUID;//[Offset: 0x7c, Size: 0x10] 0x78ce78b000

--------------------------------
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	PhysicalMaterialInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x78ce728620

--------------------------------
Class: PhysicalMaterialInput
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8] 0x78cf036a80
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc] 0x78cf036b00

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object
	Guid ExpressionGUID;//[Offset: 0x3c, Size: 0x10] 0x78ce78ac80

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FixedFrameRate;//[Offset: 0x28, Size: 0x8] 0x78ce78ac00

--------------------------------
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78ce78a700

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0x9db81d0 0x78ce7592a0
	static FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0x9db7c9c 0x78ce759380
	static FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x9db7e7c 0x78ce759460
	static FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0x9db8064 0x78ce759540
	static FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0x9db8664 0x78ce759620
	static FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0x9db7bac 0x78ce759700
	static bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0x9db833c 0x78ce7597e0
	static bool IsValid_Framerate(out const FrameRate InFrameRate);// 0x9db8454 0x78ce7598c0
	static FrameRate GetTimecodeFrameRate();// 0x9db7968 0x78ce7599a0
	static Timecode GetTimecode();// 0x9db799c 0x78ce759a80
	static FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0x9db7abc 0x78ce759b60
	static FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0x9db8514 0x78ce759c40
	static float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0x9db8760 0x78ce759d20
	static float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0x9db8820 0x78ce759e00
	static int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0x9db7a08 0x78ce759ee0
	static FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0x9db7d8c 0x78ce759fc0
	static FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x9db7f70 0x78ce75a0a0

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce78d180
	int FrameOffset;//[Offset: 0x2c, Size: 0x4] 0x78ce78d200

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0x9e7e8c0 0x78ce75c8e0
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0x9e7e730 0x78ce75c9c0
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0x9e7e7f8 0x78ce7590e0
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0x9e7e614 0x78ce7591c0

--------------------------------
Class: MovieSceneEntityProvider.Interface.Object

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneTrackTemplateProducer.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneNodeGroup.Object

--------------------------------
Class: MovieSceneNodeGroupCollection.Object

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78ce78e600
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0x90] 0x78ce78e680

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78cee56960
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cef8e680
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78cef8e700
	bool[] Values;//[Offset: 0x20, Size: 0x10] 0x78cee56a00

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneFloatDecomposer.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x78ce78dc00

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0x8a873f8 0x78ce75c800

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8] 0x78ce78d880
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10] 0x78ce727cc0
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10] 0x78ce727d60
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10] 0x78ce727e00

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78ce72a4c0
	Guid ObjectGuid;//[Offset: 0x88, Size: 0x10] 0x78ce78d700

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x78ce78f680
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10] 0x78ce72a420

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78ce78f600

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10] 0x78ce72a380

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTrackInstance.Object
	Object* AnimatedObject;//[Offset: 0x28, Size: 0x8] 0x78ce78f380
	bool bIsMasterTrackInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78ce78f400
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x78ce78f480
	MovieSceneTrackInstanceInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x78ce72a2e0

--------------------------------
Class: MovieSceneTrackInstanceInput
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x78cf03df80

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x40, Size: 0x8] 0x78ce78f300

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50] 0x78cee140c0

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8] 0x78ce78f180

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x2c, Size: 0x8] 0x78ce78f100

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	static void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x9f284a8 0x78ce75bf40
	static void K2_StartProfilingTimer();// 0x9f27300 0x78ce75c020
	static Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0x9f27ab0 0x78ce75c100
	static float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0x9f27974 0x78ce75c1e0
	static Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x9f28234 0x78ce75c2c0
	static float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0x9f27204 0x78ce75c3a0
	static float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0x9f27ef0 0x78ce75c480
	static Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0x9f27db0 0x78ce75c560
	static float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0x9f27314 0x78ce75c640
	static float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0x9f27740 0x78ce75c720

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10] 0x78cefda6a0
	float Range;//[Offset: 0x10, Size: 0x4] 0x78cf04f180

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10] 0x78ce791780
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10] 0x78ce791800
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10] 0x78ce791880
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10] 0x78ce791900
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10] 0x78ce791980
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x9f2d694 0x78ce75bae0
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x9f2d794 0x78ce75bbc0
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x9f2d894 0x78ce75bca0
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x9f2d990 0x78ce75bd80
	static PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x9f2da8c 0x78ce75be60

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: SequencerAnimationSupport.Interface.Object

--------------------------------
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0x8a873f8 0x78ce75ba00

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xdc, Size: 0x10] 0x78ce791500
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xec, Size: 0x18] 0x78ce791580
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0xa0097e8 0x78ce75b840
	MovieSceneObjectBindingID GetConstraintBindingID();// 0xa0098c0 0x78ce75b920

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x110, Size: 0x8] 0x78ce791100
	FName AttachComponentName;//[Offset: 0x118, Size: 0x8] 0x78ce791180
	enum AttachmentLocationRule;//[Offset: 0x120, Size: 0x1] 0x78ce729e80
	enum AttachmentRotationRule;//[Offset: 0x121, Size: 0x1] 0x78ce729f20
	enum AttachmentScaleRule;//[Offset: 0x122, Size: 0x1] 0x78ce729fc0
	enum DetachmentLocationRule;//[Offset: 0x123, Size: 0x1] 0x78ce72a060
	enum DetachmentRotationRule;//[Offset: 0x124, Size: 0x1] 0x78ce72a100
	enum DetachmentScaleRule;//[Offset: 0x125, Size: 0x1] 0x78ce72a1a0

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x78, Size: 0x10] 0x78ce729de0

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x108, Size: 0xa0] 0x78ce792e80
	enum FrontAxisEnum;//[Offset: 0x1a8, Size: 0x1] 0x78ce729ca0
	enum UpAxisEnum;//[Offset: 0x1a9, Size: 0x1] 0x78ce729d40
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1aa, Size: 0x1] 0x78ce793000
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1aa, Size: 0x1] 0x78ce793080
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1aa, Size: 0x1] 0x78ce793100

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x8, Size: 0x1] 0x78cef8dc80
	byte PostInfinityExtrap;//[Offset: 0x9, Size: 0x1] 0x78cef8dd00
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x78cee56820
	MovieSceneFloatValue[] Values;//[Offset: 0x20, Size: 0x10] 0x78cee568c0
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x78cef8e380
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78cef8e400
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x38, Size: 0x60] 0x78cef8e480
	FrameRate TickResolution;//[Offset: 0x98, Size: 0x8] 0x78cef8e500

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4] 0x78cef8de00
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14] 0x78cef8e100
	byte InterpMode;//[Offset: 0x18, Size: 0x1] 0x78cef8e180
	byte TangentMode;//[Offset: 0x19, Size: 0x1] 0x78cef8e200
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1] 0x78cef8e280

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x78cef8de80
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x78cef8df00
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4] 0x78cef8df80
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x78cef8e000
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1] 0x78cef8e080

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x40, Size: 0x8] 0x78ce792e00

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x78ce792b00
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0] 0x78ce792b80
	MovieSceneFloatChannel Rotation;//[Offset: 0x2d0, Size: 0xa0] 0x78ce792c00
	MovieSceneFloatChannel Scale;//[Offset: 0x4b0, Size: 0xa0] 0x78ce792c80
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x690, Size: 0xa0] 0x78ce792d00
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 0x1] 0x78ce792d80

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x78cf04ea00

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xe0, Size: 0xb0] 0x78ce792980
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x190, Size: 0x80] 0x78ce792a00
	FString[] ActorGuidStrings;//[Offset: 0x210, Size: 0x10] 0x78ce729c00

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78cefdcae0
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x40, Size: 0x10] 0x78cefdcb80

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18] 0x78cf04f800
	FName ComponentName;//[Offset: 0x18, Size: 0x8] 0x78cf04f880
	FName SocketName;//[Offset: 0x20, Size: 0x8] 0x78cf04f900

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe0, Size: 0x8] 0x78ce794080
	FrameNumber StartFrameOffset;//[Offset: 0xe8, Size: 0x4] 0x78ce794100
	float StartOffset;//[Offset: 0xec, Size: 0x4] 0x78ce794180
	float AudioStartTime;//[Offset: 0xf0, Size: 0x4] 0x78ce794200
	float AudioDilationFactor;//[Offset: 0xf4, Size: 0x4] 0x78ce792180
	float AudioVolume;//[Offset: 0xf8, Size: 0x4] 0x78ce792200
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x100, Size: 0xa0] 0x78ce792280
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1a0, Size: 0xa0] 0x78ce792300
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x240, Size: 0xb0] 0x78ce792380
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x78ce792400
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1] 0x78ce792480
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1] 0x78ce792500
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2f8, Size: 0x8] 0x78ce792580
	delegate OnQueueSubtitles;//[Offset: 0x300, Size: 0x10] 0x78ce792600
	delegate OnAudioFinished;//[Offset: 0x310, Size: 0x10] 0x78ce792680
	delegate OnAudioPlaybackPercent;//[Offset: 0x320, Size: 0x10] 0x78ce792700
	void SetStartOffset(FrameNumber InStartOffset);// 0xa00c9e4 0x78ce75b4c0
	void SetSound(SoundBase* InSound);// 0xa00caa4 0x78ce75b5a0
	FrameNumber GetStartOffset();// 0xa00c9c8 0x78ce75b680
	SoundBase* GetSound();// 0xa00ca88 0x78ce75b760

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x80, Size: 0x10] 0x78ce729b60

--------------------------------
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xe0, Size: 0x98] 0x78ce793f80

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78cefd6e60
	byte DefaultValue;//[Offset: 0x18, Size: 0x1] 0x78cf037680
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78cf037700
	byte[] Values;//[Offset: 0x20, Size: 0x10] 0x78cefd6f00
	Enum* Enum;//[Offset: 0x30, Size: 0x8] 0x78cf037800

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8] 0x78ce793f00

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe0, Size: 0x20] 0x78ce793b80
	CameraAnim* CameraAnim;//[Offset: 0x100, Size: 0x8] 0x78ce793c00
	float PlayRate;//[Offset: 0x108, Size: 0x4] 0x78ce793c80
	float PlayScale;//[Offset: 0x10c, Size: 0x4] 0x78ce793d00
	float BlendInTime;//[Offset: 0x110, Size: 0x4] 0x78ce793d80
	float BlendOutTime;//[Offset: 0x114, Size: 0x4] 0x78ce793e00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78ce793e80

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8] 0x78cf050c00
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78cf050c80
	float PlayScale;//[Offset: 0xc, Size: 0x4] 0x78cf050d00
	float BlendInTime;//[Offset: 0x10, Size: 0x4] 0x78cf050d80
	float BlendOutTime;//[Offset: 0x14, Size: 0x4] 0x78cf050e00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cf050e80

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x80, Size: 0x10] 0x78ce729ac0

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bLockPreviousCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78ce793780
	Guid CameraGuid;//[Offset: 0xec, Size: 0x10] 0x78ce793800
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xfc, Size: 0x18] 0x78ce793880
	Transform InitialCameraCutTransform;//[Offset: 0x120, Size: 0x30] 0x78ce793900
	bool bHasInitialCameraCutTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78ce793980
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0xa00f264 0x78ce75b300
	MovieSceneObjectBindingID GetCameraBindingID();// 0xa00f340 0x78ce75b3e0

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78ce793680
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10] 0x78ce729a20

--------------------------------
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20] 0x78ce793480
	class MatineeCameraShake* ShakeClass;//[Offset: 0x100, Size: 0x8] 0x78ce7298e0
	float PlayScale;//[Offset: 0x108, Size: 0x4] 0x78ce793500
	enum PlaySpace;//[Offset: 0x10c, Size: 0x1] 0x78ce729980
	Rotator UserDefinedPlaySpace;//[Offset: 0x110, Size: 0xc] 0x78ce793600

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class MatineeCameraShake* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x78cefdc9a0
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x78cf050980
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x78cefdca40
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x78cf050a80

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20] 0x78ce793400

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10] 0x78ce729840

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSourceTriggerChannel Channel;//[Offset: 0xe0, Size: 0x88] 0x78ce793300

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78cefdc720
	MovieSceneCameraShakeSourceTrigger[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78cefdc900

--------------------------------
Class: MovieSceneCameraShakeSourceTrigger
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x78cefdc7c0
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x78cf050500
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x78cefdc860
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x78cf050600

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10] 0x78ce7297a0

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10] 0x78ce729700

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x158, Size: 0x10] 0x78ce795100
	FText DisplayName;//[Offset: 0x168, Size: 0x18] 0x78ce795180
	void SetShotDisplayName(FString InShotDisplayName);// 0xa016584 0x78ce75b140
	FString GetShotDisplayName();// 0xa016698 0x78ce75b220

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xe0, Size: 0xa0] 0x78ce794f00
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x180, Size: 0xa0] 0x78ce794f80
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x220, Size: 0xa0] 0x78ce795000
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2c0, Size: 0xa0] 0x78ce795080

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78ce794e80

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedComponentTransformSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe0, Size: 0x98] 0x78ce794e00

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8] 0x78ce794d80

--------------------------------
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xe8, Size: 0x28] 0x78ce794d00

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28] 0x78cf050100

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8] 0x78cf052100
	FieldPathProperty BoundObjectProperty;//[Size: 0x20] 0x78cf050080

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe0, Size: 0x78] 0x78ce794c00
	MovieSceneEventSectionData EventData;//[Offset: 0x158, Size: 0x88] 0x78ce794c80

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x78cf085600

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x78cf0c7880
	FName Value;//[Offset: 0x4, Size: 0x8] 0x78cf0c7900

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78cefdc2c0
	EventPayload[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78cefdc360

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x78cf051e00
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28] 0x78cf051e80

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78ce794a00
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78ce794a80
	enum EventPosition;//[Offset: 0x81, Size: 0x1] 0x78ce7295c0
	MovieSceneSection*[] Sections;//[Offset: 0x88, Size: 0x10] 0x78ce729660

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xe8, Size: 0x88] 0x78ce794980

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78cefdc400
	MovieSceneEvent[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78cefdc4a0

--------------------------------
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0] 0x78ce794800
	LinearColor FadeColor;//[Offset: 0x180, Size: 0x10] 0x78ce794880
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1] 0x78ce794900

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xa0] 0x78ce794780

--------------------------------
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xe0, Size: 0x90] 0x78ce794700

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78cee59020
	int DefaultValue;//[Offset: 0x18, Size: 0x4] 0x78cef8d880
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cef8d900
	int[] Values;//[Offset: 0x20, Size: 0x10] 0x78cee56780

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xe8, Size: 0x1] 0x78ce729200
	FName[] LevelNames;//[Offset: 0xf0, Size: 0x10] 0x78ce7292a0
	void SetVisibility(enum InVisibility);// 0xa01f02c 0x78ce75adc0
	void SetLevelNames(out const FName[] InLevelNames);// 0xa01ee98 0x78ce75aea0
	enum GetVisibility();// 0xa01f0d4 0x78ce75af80
	FName[] GetLevelNames();// 0xa01efa8 0x78ce75b060

--------------------------------
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78ce729160

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x78ce7290c0

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0x90, Size: 0x8] 0x78ce794280

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0x90, Size: 0x4] 0x78ce796300

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xe0, Size: 0xc0] 0x78ce796280

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	class Object* PropertyClass;//[Offset: 0x8, Size: 0x8] 0x78cefd8bc0
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x78cefd8c60
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x20, Size: 0x10] 0x78cefd8d00
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x30, Size: 0x30] 0x78cf03b100

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x78cf03b000
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x78cf03b080

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	class Object* PropertyClass;//[Offset: 0xb0, Size: 0x8] 0x78ce72b960

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xe0, Size: 0x10] 0x78ce72b500
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xf0, Size: 0x10] 0x78ce72b5a0
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0x100, Size: 0x10] 0x78ce72b640
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x110, Size: 0x10] 0x78ce72b6e0
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x120, Size: 0x10] 0x78ce72b780
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x130, Size: 0x10] 0x78ce72b820
	bool RemoveVectorParameter(FName InParameterName);// 0xa0283fc 0x78ce75dc20
	bool RemoveVector2DParameter(FName InParameterName);// 0xa0284b0 0x78ce75dd00
	bool RemoveTransformParameter(FName InParameterName);// 0xa028294 0x78ce75dde0
	bool RemoveScalarParameter(FName InParameterName);// 0xa028618 0x78ce75dec0
	bool RemoveColorParameter(FName InParameterName);// 0xa028348 0x78ce75dfa0
	bool RemoveBoolParameter(FName InParameterName);// 0xa028564 0x78ce75e080
	void GetParameterNames(out <FName> ParameterNames);// 0xa028158 0x78ce75e160
	void AddVectorParameterKey(FName InParameterName, FrameNumber InTime, Vector InValue);// 0xa028970 0x78ce75e240
	void AddVector2DParameterKey(FName InParameterName, FrameNumber InTime, Vector2D InValue);// 0xa028aac 0x78ce75e320
	void AddTransformParameterKey(FName InParameterName, FrameNumber InTime, out const Transform InValue);// 0xa0286cc 0x78ce75e400
	void AddScalarParameterKey(FName InParameterName, FrameNumber InTime, float InValue);// 0xa028d28 0x78ce75e4e0
	void AddColorParameterKey(FName InParameterName, FrameNumber InTime, LinearColor InValue);// 0xa028834 0x78ce75e5c0
	void AddBoolParameterKey(FName InParameterName, FrameNumber InTime, bool InValue);// 0xa028be4 0x78ce75e6a0

--------------------------------
Class: BoolParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf052f00
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0x90] 0x78cf052f80

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf052d80
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xa0] 0x78cf052e00

--------------------------------
Class: Vector2DParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf053080
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x78cf053100
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x78cf053180

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf051180
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x78cf051200
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x78cf051280
	MovieSceneFloatChannel ZCurve;//[Offset: 0x148, Size: 0xa0] 0x78cf051300

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf051400
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xa0] 0x78cf051480
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xa8, Size: 0xa0] 0x78cf051500
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x148, Size: 0xa0] 0x78cf051580
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x1e8, Size: 0xa0] 0x78cf051600

--------------------------------
Class: TransformParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78cf051700
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xa0] 0x78cf051780
	MovieSceneFloatChannel Rotation;//[Offset: 0x1e8, Size: 0xa0] 0x78cf051800
	MovieSceneFloatChannel Scale;//[Offset: 0x3c8, Size: 0xa0] 0x78cf051880

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10] 0x78ce72b460

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe0, Size: 0x98] 0x78ce797000

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x80, Size: 0x10] 0x78ce72b3c0

--------------------------------
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe0, Size: 0xc0] 0x78ce796f00

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xb0, Size: 0x4] 0x78ce796e80

--------------------------------
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe0, Size: 0xd8] 0x78ce796500
	AnimSequence* AnimSequence;//[Offset: 0x1b8, Size: 0x8] 0x78ce796580
	AnimSequenceBase* Animation;//[Offset: 0x1c0, Size: 0x8] 0x78ce796600
	float StartOffset;//[Offset: 0x1c8, Size: 0x4] 0x78ce796680
	float EndOffset;//[Offset: 0x1cc, Size: 0x4] 0x78ce796700
	float PlayRate;//[Offset: 0x1d0, Size: 0x4] 0x78ce796780
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1] 0x78ce796800
	FName SlotName;//[Offset: 0x1d8, Size: 0x8] 0x78ce796880
	Vector StartLocationOffset;//[Offset: 0x1e0, Size: 0xc] 0x78ce796900
	Rotator StartRotationOffset;//[Offset: 0x1ec, Size: 0xc] 0x78ce796980
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1] 0x78ce796a00
	FName MatchedBoneName;//[Offset: 0x1fc, Size: 0x8] 0x78ce796a80
	Vector MatchedLocationOffset;//[Offset: 0x204, Size: 0xc] 0x78ce796b00
	Rotator MatchedRotationOffset;//[Offset: 0x210, Size: 0xc] 0x78ce796b80
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1] 0x78ce796c00
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 0x1] 0x78ce796c80
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e, Size: 0x1] 0x78ce796d00
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21f, Size: 0x1] 0x78ce796d80
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78ce796e00

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8] 0x78cf053f00
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x78cf053f80
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x78cf054000
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x78cf054080
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x78cf054100
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x78cf054180
	FName SlotName;//[Offset: 0x1c, Size: 0x8] 0x78cf054200
	MovieSceneFloatChannel Weight;//[Offset: 0x28, Size: 0xa0] 0x78cf052180
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78cf052200
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x78cf052280
	float StartOffset;//[Offset: 0xcc, Size: 0x4] 0x78cf052300
	float EndOffset;//[Offset: 0xd0, Size: 0x4] 0x78cf052380

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10] 0x78ce72b320
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78ce796380
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0x98, Size: 0x30] 0x78ce796400
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78ce796480

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0] 0x78ce798380

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xe0, Size: 0xa0] 0x78ce798300

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78cefdbd20
	FString[] Values;//[Offset: 0x18, Size: 0x10] 0x78cefdbdc0
	FString DefaultValue;//[Offset: 0x28, Size: 0x10] 0x78cf052780
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78cf052800

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xe0, Size: 0xa0] 0x78ce798200
	int ChannelsUsed;//[Offset: 0x360, Size: 0x4] 0x78ce798280

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xb0, Size: 0x4] 0x78ce798180

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78ce797f80
	delegate OnFail;//[Offset: 0x40, Size: 0x10] 0x78ce798000
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0xa16ea7c 0x78ce75db40

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x11c, Size: 0x10] 0x78ce797800
	byte HorizontalAlignment;//[Offset: 0x12c, Size: 0x1] 0x78ce797880
	byte VerticalAlignment;//[Offset: 0x12d, Size: 0x1] 0x78ce797900
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1] 0x78ce797980
	float BlurStrength;//[Offset: 0x130, Size: 0x4] 0x78ce797a00
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x78ce797a80
	int BlurRadius;//[Offset: 0x138, Size: 0x4] 0x78ce797b00
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x140, Size: 0x88] 0x78ce797b80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa16f3dc 0x78ce75d520
	void SetPadding(Margin InPadding);// 0xa16f52c 0x78ce75d600
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0xa16f008 0x78ce75d6e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa16f484 0x78ce75d7c0
	void SetBlurStrength(float InStrength);// 0xa16f1d4 0x78ce75d8a0
	void SetBlurRadius(int InBlurRadius);// 0xa16f284 0x78ce75d980
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0xa16f32c 0x78ce75da60

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce797400
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78ce797480
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78ce797500
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa16fcec 0x78ce75d280
	void SetPadding(Margin InPadding);// 0xa16fe3c 0x78ce75d360
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa16fd94 0x78ce75d440

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0xa170414 0x78ce75d1a0

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x119, Size: 0x1] 0x78ce798580
	byte VerticalAlignment;//[Offset: 0x11a, Size: 0x1] 0x78ce798600
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1] 0x78ce798680
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10] 0x78ce798700
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x12c, Size: 0x10] 0x78ce798780
	Margin Padding;//[Offset: 0x13c, Size: 0x10] 0x78ce798800
	SlateBrush Background;//[Offset: 0x150, Size: 0x88] 0x78ce798880
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x78ce798900
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10] 0x78ce798980
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10] 0x78ce798a00
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8] 0x78ce798a80
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x78ce798b00
	delegate OnMouseButtonDownEvent;//[Offset: 0x214, Size: 0x10] 0x78ce798b80
	delegate OnMouseButtonUpEvent;//[Offset: 0x224, Size: 0x10] 0x78ce798c00
	delegate OnMouseMoveEvent;//[Offset: 0x234, Size: 0x10] 0x78ce798c80
	delegate OnMouseDoubleClickEvent;//[Offset: 0x244, Size: 0x10] 0x78ce798d00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa170e24 0x78ce75fd60
	void SetPadding(Margin InPadding);// 0xa170f74 0x78ce75fe40
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa170ecc 0x78ce75ff20
	void SetDesiredSizeScale(Vector2D InScale);// 0xa1708e0 0x78ce75caa0
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0xa171020 0x78ce75cb80
	void SetBrushFromTexture(Texture2D* Texture);// 0xa170a60 0x78ce75cc60
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xa1709b8 0x78ce75cd40
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0xa170b08 0x78ce75ce20
	void SetBrushColor(LinearColor InBrushColor);// 0xa170d7c 0x78ce75cf00
	void SetBrush(out const SlateBrush InBrush);// 0xa170bb0 0x78ce75cfe0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0xa170984 0x78ce75d0c0

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce79a380
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78ce79a400
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78ce79a480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa171980 0x78ce75fac0
	void SetPadding(Margin InPadding);// 0xa171ad0 0x78ce75fba0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa171a28 0x78ce75fc80

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0xa1720a4 0x78ce75f9e0

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce79a000
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78ce79a080
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78ce79a100
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa173194 0x78ce75f740
	void SetPadding(Margin InPadding);// 0xa1732e4 0x78ce75f820
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa17323c 0x78ce75f900

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0xa175ce0 0x78ce7c14a0

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x78ce79c200
	float Period;//[Offset: 0x10c, Size: 0x4] 0x78ce79c280
	float Radius;//[Offset: 0x110, Size: 0x4] 0x78ce79c300
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 0x8] 0x78ce79c380
	SlateBrush Image;//[Offset: 0x120, Size: 0x88] 0x78ce79c400
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78ce79c480
	void SetRadius(float InRadius);// 0xa17619c 0x78ce7c1200
	void SetPeriod(float InPeriod);// 0xa176244 0x78ce7c12e0
	void SetNumberOfPieces(int InNumberOfPieces);// 0xa1762ec 0x78ce7c13c0

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0xa176978 0x78ce7c1040
	LinearColor GetLinearValue();// 0xa176940 0x78ce7c1120

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] items;//[Offset: 0x108, Size: 0x10] 0x78ce72b000
	delegate OnGenerateWidgetEvent;//[Offset: 0x118, Size: 0x10] 0x78ce79c000
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78ce79c080

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x108, Size: 0x10] 0x78cee518c0
	FString SelectedOption;//[Offset: 0x118, Size: 0x10] 0x78cee92b00
	ComboBoxStyle WidgetStyle;//[Offset: 0x128, Size: 0x3f0] 0x78cee91380
	TableRowStyle ItemStyle;//[Offset: 0x518, Size: 0x7c8] 0x78cee91c00
	Margin ContentPadding;//[Offset: 0xce0, Size: 0x10] 0x78cee91c80
	float MaxListHeight;//[Offset: 0xcf0, Size: 0x4] 0x78cee91d00
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1] 0x78cee91d80
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1] 0x78cee91e00
	SlateFontInfo Font;//[Offset: 0xcf8, Size: 0x58] 0x78cee90300
	SlateColor ForegroundColor;//[Offset: 0xd50, Size: 0x28] 0x78cee90380
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 0x1] 0x78cee90400
	delegate OnGenerateWidgetEvent;//[Offset: 0xd7c, Size: 0x10] 0x78cee90480
	delegate OnSelectionChanged;//[Offset: 0xd90, Size: 0x10] 0x78cee90500
	delegate OnOpening;//[Offset: 0xda0, Size: 0x10] 0x78cee90580
	void SetSelectedOption(FString Option);// 0xa179060 0x78cee83500
	void SetSelectedIndex(const int index);// 0xa178fb8 0x78cee835e0
	bool RemoveOption(FString Option);// 0xa179350 0x78cee836c0
	void RefreshOptions();// 0xa17915c 0x78cee837a0
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x8a873f8 0x78cee83880
	void OnOpeningEvent__DelegateSignature();// 0x8a873f8 0x78cee83960
	bool IsOpen();// 0xa178e68 0x78cee80080
	FString GetSelectedOption();// 0xa178f08 0x78cee80160
	int GetSelectedIndex();// 0xa178ed4 0x78cee80240
	int GetOptionCount();// 0xa178ea0 0x78cee80320
	FString GetOptionAtIndex(int index);// 0xa179198 0x78cee80400
	int FindOptionIndex(FString Option);// 0xa179294 0x78cee804e0
	void ClearSelection();// 0xa179170 0x78cee805c0
	void ClearOptions();// 0xa179184 0x78cee806a0
	void AddOption(FString Option);// 0xa179410 0x78cee80780

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88] 0x78cee91400
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88] 0x78cee91480
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88] 0x78cee91500
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88] 0x78cee91580
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88] 0x78cee91600
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88] 0x78cee91680
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88] 0x78cee91700
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88] 0x78cee91780
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88] 0x78cee91800
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28] 0x78cee91880
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28] 0x78cee91900
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88] 0x78cee91980
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88] 0x78cee91a00
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88] 0x78cee91a80
	SlateBrush ActiveHighlightedBrush;//[Offset: 0x6b8, Size: 0x88] 0x78cee91b00
	SlateBrush InactiveHighlightedBrush;//[Offset: 0x740, Size: 0x88] 0x78cee91b80

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x108, Size: 0x1] 0x78ce72ad80
	Vector2D EntrySpacing;//[Offset: 0x10c, Size: 0x8] 0x78ce79d500
	Vector2D[] SpacingPattern;//[Offset: 0x118, Size: 0x10] 0x78ce72ae20
	SlateChildSize EntrySizeRule;//[Offset: 0x128, Size: 0x8] 0x78ce79d600
	byte EntryHorizontalAlignment;//[Offset: 0x130, Size: 0x1] 0x78ce79d680
	byte EntryVerticalAlignment;//[Offset: 0x131, Size: 0x1] 0x78ce79b600
	int MaxElementSize;//[Offset: 0x134, Size: 0x4] 0x78ce79b680
	RadialBoxSettings RadialBoxSettings;//[Offset: 0x138, Size: 0xc] 0x78ce79b700
	UserWidgetPool EntryWidgetPool;//[Offset: 0x158, Size: 0x80] 0x78ce79b780
	void SetRadialSettings(out const RadialBoxSettings InSettings);// 0xa17bbdc 0x78ce7c0a20
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0xa17bc98 0x78ce7c0b00
	int GetNumEntries();// 0xa17bd48 0x78ce7c0be0
	UserWidget*[] GetAllEntries();// 0xa17bd7c 0x78ce7c0cc0

--------------------------------
Class: RadialBoxSettings
	bool bDistributeItemsEvenly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf055280
	float AngleBetweenItems;//[Offset: 0x4, Size: 0x4] 0x78cf053200
	float StartingAngle;//[Offset: 0x8, Size: 0x4] 0x78cf053280

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x1d8, Size: 0x8] 0x78ce72ac40
	void Reset(bool bDeleteWidgets);// 0xa17b254 0x78ce7c06a0
	void RemoveEntry(UserWidget* EntryWidget);// 0xa17b1ac 0x78ce7c0780
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0xa17b0c8 0x78ce7c0860
	UserWidget* BP_CreateEntry();// 0xa17b178 0x78ce7c0940

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText text;//[Offset: 0x108, Size: 0x18] 0x78cee93400
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x78cee93480
	FText HintText;//[Offset: 0x130, Size: 0x18] 0x78cee93500
	delegate HintTextDelegate;//[Offset: 0x148, Size: 0x10] 0x78cee93580
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 0x220] 0x78cee93880
	SlateWidgetStyleAsset* Style;//[Offset: 0x378, Size: 0x8] 0x78cee93900
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x380, Size: 0x8] 0x78cee93980
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x388, Size: 0x8] 0x78cee93a00
	SlateBrushAsset* CaretImage;//[Offset: 0x390, Size: 0x8] 0x78cee93a80
	SlateFontInfo Font;//[Offset: 0x398, Size: 0x58] 0x78cee93b00
	SlateColor ColorAndOpacity;//[Offset: 0x3f0, Size: 0x28] 0x78cee93b80
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1] 0x78cee93c00
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1] 0x78cee93c80
	float MinimumDesiredWidth;//[Offset: 0x41c, Size: 0x4] 0x78cee93d00
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1] 0x78cee93d80
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1] 0x78cee93e00
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1] 0x78cee93e80
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 0x1] 0x78cee93f00
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1] 0x78cee93f80
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1] 0x78cee94000
	byte KeyboardType;//[Offset: 0x426, Size: 0x1] 0x78cee94080
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x427, Size: 0x1] 0x78cee94180
	enum VirtualKeyboardTrigger;//[Offset: 0x428, Size: 0x1] 0x78cee51640
	enum VirtualKeyboardDismissAction;//[Offset: 0x429, Size: 0x1] 0x78cee516e0
	byte Justification;//[Offset: 0x42a, Size: 0x1] 0x78cee92200
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x42b, Size: 0x3] 0x78cee92480
	delegate OnTextChanged;//[Offset: 0x430, Size: 0x10] 0x78cee92500
	delegate OnTextCommitted;//[Offset: 0x440, Size: 0x10] 0x78cee92580
	void SetText(FText InText);// 0xa17c7fc 0x78cee82e00
	void SetJustification(byte InJustification);// 0xa17c470 0x78cee82ee0
	void SetIsReadOnly(bool InbIsReadyOnly);// 0xa17c518 0x78cee82fc0
	void SetIsPassword(bool InbIsPassword);// 0xa17c74c 0x78cee830a0
	void SetHintText(FText InHintText);// 0xa17c5c8 0x78cee83180
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78cee83260
	void OnEditableTextChangedEvent__DelegateSignature(out const FText text);// 0x8a873f8 0x78cee83340
	FText GetText();// 0xa17c980 0x78cee83420

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cee94100

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText text;//[Offset: 0x108, Size: 0x18] 0x78cee95800
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x78cee95880
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x7f8] 0x78cee94280
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 0x8] 0x78cee94300
	FText HintText;//[Offset: 0x930, Size: 0x18] 0x78cee94380
	delegate HintTextDelegate;//[Offset: 0x948, Size: 0x10] 0x78cee94400
	SlateFontInfo Font;//[Offset: 0x958, Size: 0x58] 0x78cee94480
	LinearColor ForegroundColor;//[Offset: 0x9b0, Size: 0x10] 0x78cee94500
	LinearColor BackgroundColor;//[Offset: 0x9c0, Size: 0x10] 0x78cee94580
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9d0, Size: 0x10] 0x78cee94600
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1] 0x78cee94680
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1] 0x78cee94700
	float MinimumDesiredWidth;//[Offset: 0x9e4, Size: 0x4] 0x78cee94780
	Margin Padding;//[Offset: 0x9e8, Size: 0x10] 0x78cee94800
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1] 0x78cee94880
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1] 0x78cee94900
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa, Size: 0x1] 0x78cee94980
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fb, Size: 0x1] 0x78cee94a00
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 0x1] 0x78cee94a80
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1] 0x78cee94b00
	byte KeyboardType;//[Offset: 0x9fe, Size: 0x1] 0x78cee94b80
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ff, Size: 0x1] 0x78cee94c00
	enum VirtualKeyboardTrigger;//[Offset: 0xa00, Size: 0x1] 0x78cee51500
	enum VirtualKeyboardDismissAction;//[Offset: 0xa01, Size: 0x1] 0x78cee515a0
	byte Justification;//[Offset: 0xa02, Size: 0x1] 0x78cee94d80
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xa03, Size: 0x3] 0x78cee94e00
	delegate OnTextChanged;//[Offset: 0xa08, Size: 0x10] 0x78cee94e80
	delegate OnTextCommitted;//[Offset: 0xa18, Size: 0x10] 0x78cee94f00
	void SetText(FText InText);// 0xa17d740 0x78cee82460
	void SetJustification(byte InJustification);// 0xa17d1e4 0x78cee82540
	void SetIsReadOnly(bool bReadOnly);// 0xa17d388 0x78cee82620
	void SetIsPassword(bool bIsPassword);// 0xa17d2d8 0x78cee82700
	void SetHintText(FText InText);// 0xa17d5bc 0x78cee827e0
	void SetError(FText InError);// 0xa17d438 0x78cee828c0
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78cee829a0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText text);// 0x8a873f8 0x78cee82a80
	bool HasError();// 0xa17d28c 0x78cee82b60
	FText GetText();// 0xa17d8c4 0x78cee82c40
	void ClearError();// 0xa17d2c4 0x78cee82d20

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x110, Size: 0x120] 0x78ce79cc00
	SlateBrush BorderBrush;//[Offset: 0x230, Size: 0x88] 0x78ce79cc80
	SlateColor BorderColor;//[Offset: 0x2b8, Size: 0x28] 0x78ce79cd00
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x78ce79cd80
	float MaxHeight;//[Offset: 0x2e4, Size: 0x4] 0x78ce79ce00
	Margin HeaderPadding;//[Offset: 0x2e8, Size: 0x10] 0x78ce79ce80
	Margin AreaPadding;//[Offset: 0x2f8, Size: 0x10] 0x78ce79cf00
	delegate OnExpansionChanged;//[Offset: 0x308, Size: 0x10] 0x78ce79cf80
	Widget* HeaderContent;//[Offset: 0x318, Size: 0x8] 0x78ce79d000
	Widget* BodyContent;//[Offset: 0x320, Size: 0x8] 0x78ce79d080
	void SetIsExpanded_Animated(bool IsExpanded);// 0xa17e238 0x78ce7c0400
	void SetIsExpanded(bool IsExpanded);// 0xa17e2e8 0x78ce7c04e0
	bool GetIsExpanded();// 0xa17e398 0x78ce7c05c0

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x88] 0x78cefeba00
	SlateBrush ExpandedImage;//[Offset: 0x90, Size: 0x88] 0x78cefeba80
	float RolloutAnimationSeconds;//[Offset: 0x118, Size: 0x4] 0x78cefebb00

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0xa17e918 0x78ce7c0320

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x120, Size: 0x10] 0x78ce72ab00
	float[] RowFill;//[Offset: 0x130, Size: 0x10] 0x78ce72aba0
	void SetRowFill(int ColumnIndex, float Coefficient);// 0xa17edd0 0x78ce7c0080
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0xa17eec4 0x78ce7c0160
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0xa17efb8 0x78ce7c0240

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce79de80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78ce79df00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78ce79df80
	int Row;//[Offset: 0x4c, Size: 0x4] 0x78ce79e000
	int RowSpan;//[Offset: 0x50, Size: 0x4] 0x78ce79e080
	int Column;//[Offset: 0x54, Size: 0x4] 0x78ce79e100
	int ColumnSpan;//[Offset: 0x58, Size: 0x4] 0x78ce79e180
	int Layer;//[Offset: 0x5c, Size: 0x4] 0x78ce79e200
	Vector2D Nudge;//[Offset: 0x60, Size: 0x8] 0x78ce79e280
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa180d14 0x78ce7c3260
	void SetRowSpan(int InRowSpan);// 0xa181100 0x78ce7c3340
	void SetRow(int InRow);// 0xa1811a8 0x78ce7c3420
	void SetPadding(Margin InPadding);// 0xa181250 0x78ce7c3500
	void SetNudge(Vector2D InNudge);// 0xa180e64 0x78ce7c35e0
	void SetLayer(int InLayer);// 0xa180f08 0x78ce7c36c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa180dbc 0x78ce7c37a0
	void SetColumnSpan(int InColumnSpan);// 0xa180fb0 0x78ce7c3880
	void SetColumn(int InColumn);// 0xa181058 0x78ce7c3960

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0xa1819e8 0x78ce7c3180

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78ce79d980
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8] 0x78ce79da00
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78ce79da80
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78ce79db00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa181fe0 0x78ce7c2e00
	void SetSize(SlateChildSize InSize);// 0xa182130 0x78ce7c2ee0
	void SetPadding(Margin InPadding);// 0xa1821e4 0x78ce7c2fc0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa182088 0x78ce7c30a0

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x108, Size: 0x278] 0x78cee96600
	TextBlockStyle TextStyle;//[Offset: 0x380, Size: 0x270] 0x78cee96b00
	InputChord SelectedKey;//[Offset: 0x5f0, Size: 0x20] 0x78cee96b80
	SlateFontInfo Font;//[Offset: 0x610, Size: 0x58] 0x78cee96c00
	Margin Margin;//[Offset: 0x668, Size: 0x10] 0x78cee96c80
	LinearColor ColorAndOpacity;//[Offset: 0x678, Size: 0x10] 0x78cee96d00
	FText KeySelectionText;//[Offset: 0x688, Size: 0x18] 0x78cee96d80
	FText NoKeySpecifiedText;//[Offset: 0x6a0, Size: 0x18] 0x78cee96e00
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1] 0x78cee96e80
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 0x1] 0x78cee96f00
	Key[] EscapeKeys;//[Offset: 0x6c0, Size: 0x10] 0x78cee53c60
	delegate OnKeySelected;//[Offset: 0x6d0, Size: 0x10] 0x78cee97000
	delegate OnIsSelectingKeyChanged;//[Offset: 0x6e0, Size: 0x10] 0x78cee97080
	void SetTextBlockVisibility(const enum InVisibility);// 0xa183fa8 0x78cee85480
	void SetSelectedKey(out const InputChord InSelectedKey);// 0xa1844f0 0x78cee85560
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0xa1841e8 0x78cee85640
	void SetKeySelectionText(FText InKeySelectionText);// 0xa18436c 0x78cee81d60
	void SetEscapeKeys(out const Key[] InKeys);// 0xa183e60 0x78cee81e40
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0xa184138 0x78cee81f20
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0xa184088 0x78cee82000
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x8a873f8 0x78cee820e0
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x8a873f8 0x78cee821c0
	bool GetIsSelectingKey();// 0xa184050 0x78cee822a0

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0xa184d50 0x78ce7c20e0

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78ce79ec00
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78ce79ec80
	void SetCanCache(bool CanCache);// 0xa185208 0x78ce7c1e40
	void InvalidateCache();// 0xa1852f0 0x78ce7c1f20
	bool GetCanCache();// 0xa1852b8 0x78ce7c2000

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x8a873f8 0x78ce7c5560
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x8a873f8 0x78ce7c5640
	void BP_OnEntryReleased();// 0x8a873f8 0x78ce7c1d60

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object
	static bool IsListItemSelected(interface classNone UserListEntry);// 0xa185fd4 0x78ce7c52c0
	static bool IsListItemExpanded(interface classNone UserListEntry);// 0xa185f08 0x78ce7c53a0
	static ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0xa185e40 0x78ce7c5480

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0x8a873f8 0x78ce7c51e0

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	static Object* GetListItemObject(interface classNone UserObjectListEntry);// 0xa186b24 0x78ce7c5100

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x120, Size: 0x8] 0x78cee53a80
	delegate OnGetMenuContentEvent;//[Offset: 0x128, Size: 0x10] 0x78cee99000
	delegate OnGetUserMenuContentEvent;//[Offset: 0x138, Size: 0x10] 0x78cee99080
	byte Placement;//[Offset: 0x148, Size: 0x1] 0x78cee99100
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1] 0x78cee99180
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x78cee99200
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1] 0x78cee99280
	delegate OnMenuOpenChanged;//[Offset: 0x150, Size: 0x10] 0x78cee99300
	void ToggleOpen(bool bFocusOnOpen);// 0xa18b1f4 0x78cee87320
	bool ShouldOpenDueToClick();// 0xa18b0c0 0x78cee83a40
	void SetPlacement(byte InPlacement);// 0xa18b354 0x78cee83b20
	void Open(bool bFocusMenu);// 0xa18b144 0x78cee83c00
	bool IsOpen();// 0xa18b0f8 0x78cee83ce0
	bool HasOpenSubMenus();// 0xa18b054 0x78cee83dc0
	UserWidget* GetUserWidget__DelegateSignature();// 0x8a873f8 0x78cee83ea0
	Vector2D GetMenuPosition();// 0xa18b08c 0x78cee83f80
	void FitInWindow(bool bFit);// 0xa18b2a4 0x78cee84060
	void Close();// 0xa18b130 0x78cee84140

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0xa18bb34 0x78ce7c6ec0

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x78ce851c00
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0] 0x78ce851c80
	MovieSceneFloatChannel Rotation;//[Offset: 0x230, Size: 0xa0] 0x78ce851d00
	MovieSceneFloatChannel Scale;//[Offset: 0x2d0, Size: 0xa0] 0x78ce851d80
	MovieSceneFloatChannel Shear;//[Offset: 0x410, Size: 0xa0] 0x78ce851e00

--------------------------------
Class: MovieScene2DTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x78cf053600

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe0, Size: 0xa0] 0x78ce851a00
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x180, Size: 0xa0] 0x78ce851a80
	MovieSceneFloatChannel RightCurve;//[Offset: 0x220, Size: 0xa0] 0x78ce851b00
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x2c0, Size: 0xa0] 0x78ce851b80

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0x90, Size: 0x10] 0x78ce72a560
	FName TrackName;//[Offset: 0xa0, Size: 0x8] 0x78ce851980

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText text;//[Offset: 0x128, Size: 0x18] 0x78cee9a100
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x78cee9a180
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x78cee9a200
	TextBlockStyle WidgetStyle;//[Offset: 0x168, Size: 0x270] 0x78cee9a280
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x78cee9a300
	SlateFontInfo Font;//[Offset: 0x3e0, Size: 0x58] 0x78cee9a380
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1] 0x78cee9a400
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1] 0x78cee9a480
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 0x1] 0x78cee9a500
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 0x1] 0x78cee98480
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1] 0x78cee98500
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x43d, Size: 0x1] 0x78cee98580
	enum VirtualKeyboardDismissAction;//[Offset: 0x43e, Size: 0x1] 0x78cee53940
	delegate OnTextChanged;//[Offset: 0x440, Size: 0x10] 0x78cee98680
	delegate OnTextCommitted;//[Offset: 0x450, Size: 0x10] 0x78cee98700
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0xa18ddc4 0x78cee86b40
	void SetText(FText InText);// 0xa18e188 0x78cee86c20
	void SetIsReadOnly(bool bReadOnly);// 0xa18de84 0x78cee86d00
	void SetHintText(FText InHintText);// 0xa18df34 0x78cee86de0
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78cee86ec0
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText text);// 0x8a873f8 0x78cee86fa0
	FText GetText();// 0xa18e30c 0x78cee87080
	FText GetHintText();// 0xa18e0b8 0x78cee87160

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText text;//[Offset: 0x128, Size: 0x18] 0x78cee9b500
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x78cee9b580
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x78cee99500
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x168, Size: 0x7f8] 0x78cee99580
	TextBlockStyle TextStyle;//[Offset: 0x960, Size: 0x270] 0x78cee99600
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 0x1] 0x78cee99680
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd1, Size: 0x1] 0x78cee99700
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xbd2, Size: 0x1] 0x78cee99780
	enum VirtualKeyboardDismissAction;//[Offset: 0xbd3, Size: 0x1] 0x78cee538a0
	SlateWidgetStyleAsset* Style;//[Offset: 0xbd8, Size: 0x8] 0x78cee99880
	SlateFontInfo Font;//[Offset: 0xbe0, Size: 0x58] 0x78cee99900
	LinearColor ForegroundColor;//[Offset: 0xc38, Size: 0x10] 0x78cee99980
	LinearColor BackgroundColor;//[Offset: 0xc48, Size: 0x10] 0x78cee99a00
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xc58, Size: 0x10] 0x78cee99a80
	delegate OnTextChanged;//[Offset: 0xc68, Size: 0x10] 0x78cee99b00
	delegate OnTextCommitted;//[Offset: 0xc78, Size: 0x10] 0x78cee99b80
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0xa18eb14 0x78cee86360
	void SetText(FText InText);// 0xa18f05c 0x78cee86440
	void SetIsReadOnly(bool bReadOnly);// 0xa18ebd4 0x78cee86520
	void SetHintText(FText InHintText);// 0xa18ee08 0x78cee86600
	void SetError(FText InError);// 0xa18ec84 0x78cee866e0
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78cee867c0
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText text);// 0x8a873f8 0x78cee868a0
	FText GetText();// 0xa18f1e0 0x78cee86980
	FText GetHintText();// 0xa18ef8c 0x78cee86a60

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78ce852800
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78ce852880
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78ce852900
	int Phase;//[Offset: 0x11c, Size: 0x4] 0x78ce852980
	int PhaseCount;//[Offset: 0x120, Size: 0x4] 0x78ce852a00
	MaterialInterface* EffectMaterial;//[Offset: 0x128, Size: 0x8] 0x78ce852a80
	FName TextureParameter;//[Offset: 0x130, Size: 0x8] 0x78ce852b00
	void SetTextureParameter(FName TextureParameter);// 0xa192a08 0x78ce7c6280
	void SetRetainRendering(bool bInRetainRendering);// 0xa192958 0x78ce7c6360
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0xa192ba0 0x78ce7c6440
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0xa192ab0 0x78ce7c6520
	void RequestRender();// 0xa192b8c 0x78ce7c6600
	MaterialInstanceDynamic* GetEffectMaterial();// 0xa192b58 0x78ce7c66e0

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8] 0x78ce853e00

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78ce853a00
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78ce853a80
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78ce853b00
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x78ce853b80
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0xa197888 0x78ce7c8f20

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ce853780
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10] 0x78ce853800
	byte HAlign;//[Offset: 0x4c, Size: 0x1] 0x78ce853880
	byte VAlign;//[Offset: 0x4d, Size: 0x1] 0x78ce853900
	Margin Padding;//[Offset: 0x50, Size: 0x10] 0x78ce853980

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x119, Size: 0x1] 0x78ce853380
	byte StretchDirection;//[Offset: 0x11a, Size: 0x1] 0x78ce853400
	float UserSpecifiedScale;//[Offset: 0x11c, Size: 0x4] 0x78ce853480
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78ce853500
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0xa19834c 0x78ce7c8ba0
	void SetStretchDirection(byte InStretchDirection);// 0xa1983f4 0x78ce7c8c80
	void SetStretch(byte InStretch);// 0xa19849c 0x78ce7c8d60
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0xa19829c 0x78ce7c8e40

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce855180
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78ce855200
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78ce855280
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa198ad8 0x78ce7c8900
	void SetPadding(Margin InPadding);// 0xa198c28 0x78ce7c89e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa198b80 0x78ce7c8ac0

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x4d0] 0x78ce854d00
	SlateWidgetStyleAsset* Style;//[Offset: 0x5d8, Size: 0x8] 0x78ce854d80
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1] 0x78ce854e00
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1] 0x78ce854e80
	byte Orientation;//[Offset: 0x5e2, Size: 0x1] 0x78ce854f00
	Vector2D Thickness;//[Offset: 0x5e4, Size: 0x8] 0x78ce854f80
	Margin Padding;//[Offset: 0x5ec, Size: 0x10] 0x78ce855000
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0xa1991fc 0x78ce7c8820

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce855900
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78ce855980
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78ce855a00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa19aaf4 0x78ce7c76a0
	void SetPadding(Margin InPadding);// 0xa19ac44 0x78ce7c7780
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa19ab9c 0x78ce7c7860

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x130, Size: 0x4] 0x78ce856e00
	float HeightOverride;//[Offset: 0x134, Size: 0x4] 0x78ce856e80
	float MinDesiredWidth;//[Offset: 0x138, Size: 0x4] 0x78ce856f00
	float MinDesiredHeight;//[Offset: 0x13c, Size: 0x4] 0x78ce856f80
	float MaxDesiredWidth;//[Offset: 0x140, Size: 0x4] 0x78ce857000
	float MaxDesiredHeight;//[Offset: 0x144, Size: 0x4] 0x78ce857080
	float MinAspectRatio;//[Offset: 0x148, Size: 0x4] 0x78ce857100
	float MaxAspectRatio;//[Offset: 0x14c, Size: 0x4] 0x78ce857180
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78ce857200
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1] 0x78ce857280
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1] 0x78ce857300
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1] 0x78ce857380
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1] 0x78ce855300
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1] 0x78ce855380
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1] 0x78ce855400
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1] 0x78ce855480
	void SetWidthOverride(float InWidthOverride);// 0xa19b74c 0x78ce7ca260
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0xa19b5d4 0x78ce7ca340
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0xa19b518 0x78ce7ca420
	void SetMinAspectRatio(float InMinAspectRatio);// 0xa19b2e4 0x78ce7ca500
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0xa19b45c 0x78ce7ca5e0
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0xa19b3a0 0x78ce7ca6c0
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0xa19b23c 0x78ce7ca7a0
	void SetHeightOverride(float InHeightOverride);// 0xa19b690 0x78ce7ca880
	void ClearWidthOverride();// 0xa19b738 0x78ce7ca960
	void ClearMinDesiredWidth();// 0xa19b5c0 0x78ce7caa40
	void ClearMinDesiredHeight();// 0xa19b504 0x78ce7cab20
	void ClearMinAspectRatio();// 0xa19b228 0x78ce7cac00
	void ClearMaxDesiredWidth();// 0xa19b448 0x78ce7cace0
	void ClearMaxDesiredHeight();// 0xa19b38c 0x78ce7c7400
	void ClearMaxAspectRatio();// 0xa19b214 0x78ce7c74e0
	void ClearHeightOverride();// 0xa19b67c 0x78ce7c75c0

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce856b00
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78ce856b80
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78ce856c00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa19c0b8 0x78ce7c9fc0
	void SetPadding(Margin InPadding);// 0xa19c208 0x78ce7ca0a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa19c160 0x78ce7ca180

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	static Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0xa19d2e0 0x78ce7c91c0
	static Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0xa19d3d8 0x78ce7c92a0
	static float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0xa19d4d0 0x78ce7c9380
	static float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0xa19d5cc 0x78ce7c9460
	static void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0xa19ca8c 0x78ce7c9540
	static void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0xa19c90c 0x78ce7c9620
	static void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0xa19c7e0 0x78ce7c9700
	static void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xa19cdd8 0x78ce7c97e0
	static Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0xa19d8f0 0x78ce7c98c0
	static bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0xa19dae0 0x78ce7c99a0
	static Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0xa19d838 0x78ce7c9a80
	static Vector2D GetLocalSize(out const Geometry Geometry);// 0xa19d780 0x78ce7c9b60
	static Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0xa19d6c8 0x78ce7c9c40
	static bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0xa19cfa4 0x78ce7c9d20
	static void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0xa19cc58 0x78ce7c9e00
	static Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0xa19d9e8 0x78ce7c9ee0

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10] 0x78ce72c540
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10] 0x78ce72c5e0
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8] 0x78ce859200
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x8] 0x78ce859280
	Vector2D ExtentMax;//[Offset: 0x58, Size: 0x8] 0x78ce859300

--------------------------------
Class: SlateMeshVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x8] 0x78cf054d80
	Color Color;//[Offset: 0x8, Size: 0x4] 0x78cf054e00
	Vector2D UV0;//[Offset: 0xc, Size: 0x8] 0x78cf054e80
	Vector2D UV1;//[Offset: 0x14, Size: 0x8] 0x78cf054f00
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8] 0x78cf054f80
	Vector2D UV3;//[Offset: 0x24, Size: 0x8] 0x78cf055000
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8] 0x78cf055080
	Vector2D UV5;//[Offset: 0x34, Size: 0x8] 0x78cf055100

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78ce85a380
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x78ce85a400
	float MinValue;//[Offset: 0x11c, Size: 0x4] 0x78ce85a480
	float MaxValue;//[Offset: 0x120, Size: 0x4] 0x78ce85a500
	SliderStyle WidgetStyle;//[Offset: 0x128, Size: 0x340] 0x78ce858480
	byte Orientation;//[Offset: 0x468, Size: 0x1] 0x78ce858500
	LinearColor SliderBarColor;//[Offset: 0x46c, Size: 0x10] 0x78ce858580
	LinearColor SliderHandleColor;//[Offset: 0x47c, Size: 0x10] 0x78ce858600
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x78ce858680
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1] 0x78ce858700
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1] 0x78ce858780
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 0x1] 0x78ce858800
	float StepSize;//[Offset: 0x490, Size: 0x4] 0x78ce858880
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1] 0x78ce858900
	delegate OnMouseCaptureBegin;//[Offset: 0x498, Size: 0x10] 0x78ce858980
	delegate OnMouseCaptureEnd;//[Offset: 0x4a8, Size: 0x10] 0x78ce858a00
	delegate OnControllerCaptureBegin;//[Offset: 0x4b8, Size: 0x10] 0x78ce858a80
	delegate OnControllerCaptureEnd;//[Offset: 0x4c8, Size: 0x10] 0x78ce858b00
	delegate OnValueChanged;//[Offset: 0x4d8, Size: 0x10] 0x78ce858b80
	void SetValue(float InValue);// 0xa1a162c 0x78ce7cc2c0
	void SetStepSize(float InValue);// 0xa1a12d4 0x78ce7cc3a0
	void SetSliderHandleColor(LinearColor InValue);// 0xa1a1184 0x78ce7cc480
	void SetSliderBarColor(LinearColor InValue);// 0xa1a122c 0x78ce7cc560
	void SetMinValue(float InValue);// 0xa1a1584 0x78ce7cc640
	void SetMaxValue(float InValue);// 0xa1a14dc 0x78ce7cc720
	void SetLocked(bool InValue);// 0xa1a137c 0x78ce7cc800
	void SetIndentHandle(bool InValue);// 0xa1a142c 0x78ce7cc8e0
	float GetValue();// 0xa1a1708 0x78ce7cc9c0
	float GetNormalizedValue();// 0xa1a16d4 0x78ce7c90e0

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x88] 0x78cefebf80
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 0x88] 0x78cefec000
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 0x88] 0x78cefec080
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 0x88] 0x78cefec100
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 0x88] 0x78cefec180
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 0x88] 0x78cefec200
	float BarThickness;//[Offset: 0x338, Size: 0x4] 0x78cefec280

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 0x8] 0x78ce85a280
	void SetSize(Vector2D InSize);// 0xa1a1ef4 0x78ce7cc1e0

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78cee9b800
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x78cee9b880
	SpinBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x2e8] 0x78cee9bc80
	SlateWidgetStyleAsset* Style;//[Offset: 0x408, Size: 0x8] 0x78cee9bd00
	int MinFractionalDigits;//[Offset: 0x410, Size: 0x4] 0x78cee9bd80
	int MaxFractionalDigits;//[Offset: 0x414, Size: 0x4] 0x78cee9be00
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1] 0x78cee9be80
	float Delta;//[Offset: 0x41c, Size: 0x4] 0x78cee9bf00
	float SliderExponent;//[Offset: 0x420, Size: 0x4] 0x78cee9bf80
	SlateFontInfo Font;//[Offset: 0x428, Size: 0x58] 0x78cee9c000
	byte Justification;//[Offset: 0x480, Size: 0x1] 0x78cee9c080
	float MinDesiredWidth;//[Offset: 0x484, Size: 0x4] 0x78cee9c100
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1] 0x78cee9c180
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1] 0x78cee9c200
	SlateColor ForegroundColor;//[Offset: 0x490, Size: 0x28] 0x78cee9c280
	delegate OnValueChanged;//[Offset: 0x4b8, Size: 0x10] 0x78cee9c300
	delegate OnValueCommitted;//[Offset: 0x4c8, Size: 0x10] 0x78cee9c380
	delegate OnBeginSliderMovement;//[Offset: 0x4d8, Size: 0x10] 0x78cee9c400
	delegate OnEndSliderMovement;//[Offset: 0x4e8, Size: 0x10] 0x78cee9c480
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f8, Size: 0x1] 0x78cee9c500
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f8, Size: 0x1] 0x78cee9c580
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f8, Size: 0x1] 0x78cee9c600
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f8, Size: 0x1] 0x78cee9a580
	float MinValue;//[Offset: 0x4fc, Size: 0x4] 0x78cee9a600
	float MaxValue;//[Offset: 0x500, Size: 0x4] 0x78cee9a680
	float MinSliderValue;//[Offset: 0x504, Size: 0x4] 0x78cee9a700
	float MaxSliderValue;//[Offset: 0x508, Size: 0x4] 0x78cee9a780
	void SetValue(float NewValue);// 0xa1a2e28 0x78cee88120
	void SetMinValue(float NewValue);// 0xa1a29d0 0x78cee88200
	void SetMinSliderValue(float NewValue);// 0xa1a27f0 0x78cee882e0
	void SetMinFractionalDigits(int NewValue);// 0xa1a2d4c 0x78cee883c0
	void SetMaxValue(float NewValue);// 0xa1a28e0 0x78cee884a0
	void SetMaxSliderValue(float NewValue);// 0xa1a2700 0x78cee88580
	void SetMaxFractionalDigits(int NewValue);// 0xa1a2c70 0x78cee88660
	void SetForegroundColor(SlateColor InForegroundColor);// 0xa1a2554 0x78cee88740
	void SetDelta(float NewValue);// 0xa1a2aac 0x78cee88820
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0xa1a2b88 0x78cee88900
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x8a873f8 0x78cee889e0
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x8a873f8 0x78cee88ac0
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x8a873f8 0x78cee88ba0
	float GetValue();// 0xa1a2ed0 0x78cee88c80
	float GetMinValue();// 0xa1a2a78 0x78cee88d60
	float GetMinSliderValue();// 0xa1a2898 0x78cee88e40
	int GetMinFractionalDigits();// 0xa1a2df4 0x78cee88f20
	float GetMaxValue();// 0xa1a2988 0x78cee89000
	float GetMaxSliderValue();// 0xa1a27a8 0x78cee85720
	int GetMaxFractionalDigits();// 0xa1a2d18 0x78cee85800
	float GetDelta();// 0xa1a2b54 0x78cee858e0
	bool GetAlwaysUsesDeltaSnap();// 0xa1a2c38 0x78cee859c0
	void ClearMinValue();// 0xa1a29bc 0x78cee85aa0
	void ClearMinSliderValue();// 0xa1a27dc 0x78cee85b80
	void ClearMaxValue();// 0xa1a28cc 0x78cee85c60
	void ClearMaxSliderValue();// 0xa1a26ec 0x78cee85d40

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0xa1a3b48 0x78ce7cc020
	FString GetStringValue();// 0xa1a3a98 0x78ce7cc100

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x78ce85b000
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78ce85b080
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x78ce85b100
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x78ce85b180
	SlateBrushAsset* PieceImage;//[Offset: 0x110, Size: 0x8] 0x78ce85b200
	SlateBrush Image;//[Offset: 0x118, Size: 0x88] 0x78ce85b280
	void SetNumberOfPieces(int InNumberOfPieces);// 0xa1a5fa0 0x78ce7cb140
	void SetAnimateVertically(bool bInAnimateVertically);// 0xa1a5e40 0x78ce7cb220
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0xa1a5d90 0x78ce7cb300
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0xa1a5ef0 0x78ce7cb3e0

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0x378, Size: 0x10] 0x78ce85aa00
	delegate BP_OnItemExpansionChanged;//[Offset: 0x388, Size: 0x10] 0x78ce85aa80
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0xa1a8788 0x78ce7ce4e0
	void ExpandAll();// 0xa1a8774 0x78ce7ce5c0
	void CollapseAll();// 0xa1a8760 0x78ce7ce6a0

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x11c, Size: 0x10] 0x78ce85b680
	Actor* Spawn(class Actor ActorClass);// 0xa1b6408 0x78ce7cd280
	void SetViewRotation(Rotator Rotation);// 0xa1b64b8 0x78ce7cd360
	void SetViewLocation(Vector Location);// 0xa1b6598 0x78ce7cd440
	Rotator GetViewRotation();// 0xa1b6560 0x78ce7cd520
	World* GetViewportWorld();// 0xa1b6678 0x78ce7cd600
	Vector GetViewLocation();// 0xa1b6640 0x78ce7cd6e0

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0xa1b6d04 0x78ce7cd1a0

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78ce72c040

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1] 0x78cefde160
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8] 0x78cf054500
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x78cf054580
	FName UserTag;//[Offset: 0x14, Size: 0x8] 0x78cf054600

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	delegate Finished;//[Offset: 0x28, Size: 0x10] 0x78ce85e680
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0xa1bc988 0x78ce7cfe40
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0xa1bcc40 0x78ce7cff20

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0xa1bd36c 0x78ce7cfd60

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x358, Size: 0x8] 0x78ce85dd00
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1] 0x78ce85dd80
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x368, Size: 0x10] 0x78ce72bbe0
	WidgetAnimation*[] Animations;//[Offset: 0x378, Size: 0x10] 0x78ce72bc80
	FName[] NamedSlots;//[Offset: 0x388, Size: 0x10] 0x78ce72bd20

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10] 0x78cf056300
	FName PropertyName;//[Offset: 0x10, Size: 0x8] 0x78cf054280
	FName FunctionName;//[Offset: 0x18, Size: 0x8] 0x78cf054300
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28] 0x78cf054380
	enum Kind;//[Offset: 0x48, Size: 0x1] 0x78cefde0c0

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	static EventReply UnlockMouse(out EventReply Reply);// 0xa1c10e4 0x78cee80cc0
	static EventReply Unhandled();// 0xa1c15cc 0x78cee80da0
	static void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0xa1be00c 0x78cee80e80
	static void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0xa1bdf50 0x78cee80f60
	static void SetWindowTitleBarCloseButtonActive(bool bActive);// 0xa1bdeb0 0x78cee81040
	static EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0xa1c0f30 0x78cee81120
	static EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0xa1c0950 0x78cee81200
	static void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0xa1c2478 0x78cee812e0
	static void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0xa1c25a4 0x78cee813c0
	static void SetInputMode_GameOnly(PlayerController* PlayerController);// 0xa1c20dc 0x78cee814a0
	static void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0xa1c2174 0x78cee81580
	static void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0xa1c22f4 0x78cee81660
	static bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0xa1be1dc 0x78cee81740
	static void SetFocusToGameViewport();// 0xa1c20c8 0x78cee81820
	static void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0xa1be364 0x78cee81900
	static void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0xa1bf574 0x78cee819e0
	static void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0xa1bf36c 0x78cee81ac0
	static void RestorePreviousWindowTitleBarState();// 0xa1bdff8 0x78cee81ba0
	static EventReply ReleaseMouseCapture(out EventReply Reply);// 0xa1c1358 0x78cee81c80
	static EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0xa1c0aac 0x78cee2e780
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0x8a873f8 0x78cee2e860
	static SlateBrush NoResourceBrush();// 0xa1bf23c 0x78cee2e940
	static SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0xa1bfee8 0x78cee2ea20
	static SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0xa1bfce0 0x78cee2eb00
	static SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0xa1c00f0 0x78cee2ebe0
	static EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0xa1c11f8 0x78cee2ecc0
	static bool IsDragDropping();// 0xa1c02ac 0x78cee2eda0
	static EventReply Handled();// 0xa1c163c 0x78cee2ee80
	static void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0xa1be4ec 0x78cee2ef60
	static KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0xa1be9a4 0x78cee2f040
	static InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0xa1be764 0x78cee2f120
	static InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0xa1be684 0x78cee2f200
	static InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0xa1bebe0 0x78cee2f2e0
	static InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0xa1be8c8 0x78cee2f3c0
	static MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0xa1bf070 0x78cee2f4a0
	static DragDropOperation* GetDragDroppingContent();// 0xa1c0278 0x78cee2f580
	static Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0xa1bf948 0x78cee2f660
	static MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0xa1bf77c 0x78cee2f740
	static Object* GetBrushResource(out const SlateBrush Brush);// 0xa1bfb14 0x78cee2f820
	static void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0xa1bed24 0x78cee2f900
	static void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0xa1beec0 0x78cee2f9e0
	static EventReply EndDragDrop(out EventReply Reply);// 0xa1c02e4 0x78cee2fac0
	static void DrawTextFormatted(out PaintContext Context, out const FText text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0xa1c16ac 0x78cee2fba0
	static void DrawText(out PaintContext Context, FString inString, Vector2D Position, LinearColor Tint);// 0xa1c1974 0x78cee2fc80
	static void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0xa1c1b00 0x78cee2fd60
	static void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0xa1c1cec 0x78cee2fe40
	static void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0xa1c1f00 0x78cee2ff20
	static void DismissAllMenus();// 0xa1bf05c 0x78cee2caa0
	static EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0xa1c03f8 0x78cee2cb80
	static EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0xa1c06d4 0x78cee2cc60
	static DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0xa1c26d8 0x78cee2cd40
	static UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0xa1c2780 0x78cee2ce20
	static EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0xa1c0c14 0x78cee2cf00
	static EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0xa1c146c 0x78cee2cfe0
	static EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0xa1c0d7c 0x78cee2d0c0
	static void CancelDragDrop();// 0xa1c0264 0x78cee2d1a0

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x1f8, Size: 0x10] 0x78ce891700
	int VirtualUserIndex;//[Offset: 0x218, Size: 0x4] 0x78ce891780
	int PointerIndex;//[Offset: 0x21c, Size: 0x4] 0x78ce891800
	byte TraceChannel;//[Offset: 0x220, Size: 0x1] 0x78ce891880
	float InteractionDistance;//[Offset: 0x224, Size: 0x4] 0x78ce891900
	enum InteractionSource;//[Offset: 0x228, Size: 0x1] 0x78ce72dbc0
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1] 0x78ce891a00
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1] 0x78ce891a80
	float DebugSphereLineThickness;//[Offset: 0x22c, Size: 0x4] 0x78ce891b00
	float DebugLineThickness;//[Offset: 0x230, Size: 0x4] 0x78ce891b80
	LinearColor DebugColor;//[Offset: 0x234, Size: 0x10] 0x78ce891c00
	HitResult CustomHitResult;//[Offset: 0x2c0, Size: 0x8c] 0x78ce891c80
	Vector2D LocalHitLocation;//[Offset: 0x34c, Size: 0x8] 0x78ce891d00
	Vector2D LastLocalHitLocation;//[Offset: 0x354, Size: 0x8] 0x78ce891d80
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x360, Size: 0x8] 0x78ce891e00
	HitResult LastHitResult;//[Offset: 0x368, Size: 0x8c] 0x78ce891e80
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1] 0x78ce891f00
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 0x1] 0x78ce891f80
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f6, Size: 0x1] 0x78ce892000
	void SetFocus(Widget* FocusWidget);// 0xa1c83a0 0x78ce8805c0
	void SetCustomHitResult(out const HitResult HitResult);// 0xa1c8448 0x78ce8806a0
	bool SendKeyChar(FString Characters, bool bRepeat);// 0xa1c8738 0x78ce880780
	void ScrollWheel(float ScrollDelta);// 0xa1c8688 0x78ce880860
	void ReleasePointerKey(Key Key);// 0xa1c8dc0 0x78ce880940
	bool ReleaseKey(Key Key);// 0xa1c8a3c 0x78ce880a20
	void PressPointerKey(Key Key);// 0xa1c8f4c 0x78ce880b00
	bool PressKey(Key Key, bool bRepeat);// 0xa1c8bd4 0x78ce880be0
	bool PressAndReleaseKey(Key Key);// 0xa1c88a4 0x78ce880cc0
	bool IsOverInteractableWidget();// 0xa1c861c 0x78ce880da0
	bool IsOverHitTestVisibleWidget();// 0xa1c85ac 0x78ce880e80
	bool IsOverFocusableWidget();// 0xa1c85e4 0x78ce880f60
	HitResult GetLastHitResult();// 0xa1c854c 0x78ce881040
	WidgetComponent* GetHoveredWidgetComponent();// 0xa1c8654 0x78ce881120
	Vector2D Get2DHitLocation();// 0xa1c8518 0x78ce881200

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	static WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0xa1c9c94 0x78ce882c40
	static WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0xa1c9bec 0x78ce882d20
	static VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0xa1c9fdc 0x78ce882e00
	static UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0xa1ca084 0x78ce882ee0
	static SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0xa1c9d3c 0x78ce882fc0
	static ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0xa1c9f34 0x78ce8830a0
	static ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0xa1c9de4 0x78ce883180
	static SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0xa1c9e8c 0x78ce883260
	static OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0xa1ca12c 0x78ce883340
	static HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0xa1ca1d4 0x78ce883420
	static GridSlot* SlotAsGridSlot(Widget* Widget);// 0xa1ca27c 0x78ce883500
	static CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0xa1ca324 0x78ce8835e0
	static BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0xa1ca3cc 0x78ce8836c0
	static void RemoveAllWidgets(Object* WorldContextObject);// 0xa1c9b54 0x78ce8837a0
	static bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0xa1ca95c 0x78ce883880
	static Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0xa1ca758 0x78ce883960
	static Vector2D GetViewportSize(Object* WorldContextObject);// 0xa1ca80c 0x78ce880080
	static float GetViewportScale(Object* WorldContextObject);// 0xa1ca8b4 0x78ce880160
	static Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0xa1ca6a4 0x78ce880240
	static bool GetMousePositionScaledByDPI(PlayerController* Player, out float locationX, out float locationY);// 0xa1ca474 0x78ce880320
	static Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0xa1ca5c8 0x78ce880400
	static Vector2D GetMousePositionOnPlatform();// 0xa1ca670 0x78ce8804e0

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78ce893680
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78ce893700
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78ce893780
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa1cc5bc 0x78ce882460
	void SetPadding(Margin InPadding);// 0xa1cc70c 0x78ce882540
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa1cc664 0x78ce882620

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78ce893380
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78ce893400
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa1cd01c 0x78ce8821c0
	void SetPadding(Margin InPadding);// 0xa1cd16c 0x78ce8822a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa1cd0c4 0x78ce882380

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78ce895180
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78ce895200
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78ce895280
	void SetVerticalAlignment(byte InVerticalAlignment);// 0xa1cd758 0x78ce881f20
	void SetPadding(Margin InPadding);// 0xa1cd8a8 0x78ce882000
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0xa1cd800 0x78ce8820e0

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x220, Size: 0x4] 0x78ce894380
	float CraneYaw;//[Offset: 0x224, Size: 0x4] 0x78ce894400
	float CraneArmLength;//[Offset: 0x228, Size: 0x4] 0x78ce894480
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x78ce894500
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x78ce894580
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8] 0x78ce894600
	SceneComponent* CraneYawControl;//[Offset: 0x238, Size: 0x8] 0x78ce894680
	SceneComponent* CranePitchControl;//[Offset: 0x240, Size: 0x8] 0x78ce894700
	SceneComponent* CraneCameraMount;//[Offset: 0x248, Size: 0x8] 0x78ce894780

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x220, Size: 0x4] 0x78ce896180
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x78ce896200
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x78ce896280
	SplineComponent* RailSplineComponent;//[Offset: 0x230, Size: 0x8] 0x78ce896300
	SceneComponent* RailCameraMount;//[Offset: 0x238, Size: 0x8] 0x78ce894280
	SplineComponent* GetRailSplineComponent();// 0xa1d2d94 0x78ce8851e0

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7a0, Size: 0x50] 0x78ce895c00
	CineCameraComponent* GetCineCameraComponent();// 0xa1d340c 0x78ce885020

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf055900
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf055980
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4] 0x78cf055a00
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28] 0x78cf055a80
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc] 0x78cf055b00
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78cf055b80

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7c0, Size: 0xc] 0x78ce896400
	CameraFilmbackSettings Filmback;//[Offset: 0x7cc, Size: 0xc] 0x78ce896480
	CameraLensSettings LensSettings;//[Offset: 0x7d8, Size: 0x18] 0x78ce896500
	CameraFocusSettings FocusSettings;//[Offset: 0x7f0, Size: 0x58] 0x78ce896580
	float CurrentFocalLength;//[Offset: 0x848, Size: 0x4] 0x78ce896600
	float CurrentAperture;//[Offset: 0x84c, Size: 0x4] 0x78ce896680
	float CurrentFocusDistance;//[Offset: 0x850, Size: 0x4] 0x78ce896700
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x860, Size: 0x10] 0x78ce72d940
	NamedLensPreset[] LensPresets;//[Offset: 0x870, Size: 0x10] 0x78ce72d9e0
	FString DefaultFilmbackPresetName;//[Offset: 0x880, Size: 0x10] 0x78ce896880
	FString DefaultFilmbackPreset;//[Offset: 0x890, Size: 0x10] 0x78ce896900
	FString DefaultLensPresetName;//[Offset: 0x8a0, Size: 0x10] 0x78ce896980
	float DefaultLensFocalLength;//[Offset: 0x8b0, Size: 0x4] 0x78ce896a00
	float DefaultLensFStop;//[Offset: 0x8b4, Size: 0x4] 0x78ce896a80
	void SetLensPresetByName(FString InPresetName);// 0xa1d4650 0x78ce883c00
	void SetFilmbackPresetByName(FString InPresetName);// 0xa1d47b4 0x78ce883ce0
	void SetCurrentFocalLength(float InFocalLength);// 0xa1d4a6c 0x78ce883dc0
	float GetVerticalFieldOfView();// 0xa1d4a04 0x78ce883ea0
	static NamedLensPreset[] GetLensPresetsCopy();// 0xa1d4420 0x78ce883f80
	FString GetLensPresetName();// 0xa1d4704 0x78ce884060
	float GetHorizontalFieldOfView();// 0xa1d4a38 0x78ce884140
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0xa1d4538 0x78ce884220
	FString GetFilmbackPresetName();// 0xa1d4954 0x78ce884300
	FString GetDefaultFilmbackPresetName();// 0xa1d4868 0x78ce8843e0

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x78cf056e80
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x78cf056f00
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4] 0x78cf056f80

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4] 0x78cf057100
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4] 0x78cf057180
	float MinFStop;//[Offset: 0x8, Size: 0x4] 0x78cf057200
	float MaxFStop;//[Offset: 0xc, Size: 0x4] 0x78cf057280
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4] 0x78cf057300
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4] 0x78cf057380

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cf057080
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18] 0x78cf055300

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cf056e00
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc] 0x78cf057000

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x78cefddc60
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x78cf055400
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38] 0x78cf055600
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78cf055680
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4] 0x78cf055700
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78cf055780
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x78cf055800
	float FocusOffset;//[Offset: 0x50, Size: 0x4] 0x78cf055880

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28] 0x78cf055480
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc] 0x78cf055500
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78cf055580

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	static float TrimAudioCache(float InMegabytesToFree);// 0xa282cbc 0x78ce885aa0
	static SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0xa2841f4 0x78ce885b80
	static void StopAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0xa282afc 0x78ce885c60
	static void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0xa283cf8 0x78ce885d40
	static void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0xa284484 0x78ce885e20
	static void StartAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0xa282bdc 0x78ce885f00
	static void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0xa283dd8 0x78ce885fe0
	static void SetSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset*[] SubmixEffectPresetChain, float FadeTimeSec);// 0xa2846e0 0x78ce8860c0
	static void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0xa282fd4 0x78ce8861a0
	static void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0xa284034 0x78ce886280
	static void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xa2849a4 0x78ce886360
	static void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0xa284b1c 0x78ce886440
	static void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xa284c48 0x78ce886520
	static void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0xa283150 0x78ce886600
	static void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xa284f48 0x78ce8866e0
	static void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0xa282dfc 0x78ce8867c0
	static void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0xa282d64 0x78ce8868a0
	static void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0xa284114 0x78ce886980
	static SoundSubmixSpectralAnalysisBandSettings[] MakePresetSpectralAnalysisBandSettings(enum InBandPresetType, int InNumBands, int InAttackTimeMsec, int InReleaseTimeMsec);// 0xa2836e8 0x78ce886a60
	static SoundSubmixSpectralAnalysisBandSettings[] MakeMusicalSpectralAnalysisBandSettings(int InNumSemitones, enum InStartingMusicalNote, int InStartingOctave, int InAttackTimeMsec, int InReleaseTimeMsec);// 0xa283ad8 0x78ce886b40
	static SoundSubmixSpectralAnalysisBandSettings[] MakeFullSpectrumSpectralAnalysisBandSettings(int InNumBands, float InMinimumFrequency, float InMaximumFrequency, int InAttackTimeMsec, int InReleaseTimeMsec);// 0xa2838bc 0x78ce886c20
	static bool IsAudioBusActive(const Object* WorldContextObject, AudioBus* AudioBus);// 0xa282a08 0x78ce886d00
	static void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0xa2833a0 0x78ce886de0
	static int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0xa282ee4 0x78ce886ec0
	static void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0xa283544 0x78ce886fa0
	static void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0xa2848c4 0x78ce887080
	static void ClearSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, float FadeTimeSec);// 0xa2845b4 0x78ce887160
	static void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0xa284eb0 0x78ce887240
	static int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xa284d74 0x78ce887320
	static void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0xa28327c 0x78ce883a40
	static void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0xa285028 0x78ce883b20

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xe0, Size: 0x50] 0x78ce89be80
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0xa2881a4 0x78ce8883c0
	void SetExternalSubmix(SoundSubmix* Submix);// 0xa2882b4 0x78ce8884a0

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78cefdda80
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78cefddb20
	enum LinkMode;//[Offset: 0x2, Size: 0x1] 0x78cefddbc0
	float InputGainDb;//[Offset: 0x4, Size: 0x4] 0x78cf058400
	float ThresholdDb;//[Offset: 0x8, Size: 0x4] 0x78cf056380
	float Ratio;//[Offset: 0xc, Size: 0x4] 0x78cf056400
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4] 0x78cf056480
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4] 0x78cf056500
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4] 0x78cf056580
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4] 0x78cf056600
	SoundSubmix* ExternalSubmix;//[Offset: 0x20, Size: 0x8] 0x78cf056680
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78cf056700
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78cf056780
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78cf056800
	float KeyGainDb;//[Offset: 0x2c, Size: 0x4] 0x78cf056880
	float OutputGainDb;//[Offset: 0x30, Size: 0x4] 0x78cf056900
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x34, Size: 0xc] 0x78cf056980
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x40, Size: 0xc] 0x78cf056b80

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf056a00
	float Cutoff;//[Offset: 0x4, Size: 0x4] 0x78cf056a80
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x78cf056b00

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x78ce89bd80
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0xa288cdc 0x78ce8882e0

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x78cefdd9e0

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x78cf057f80
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x78cf058000
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x78cf058080
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x78cf058100

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xcc, Size: 0x40] 0x78ce89bb00
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0xa2894a8 0x78ce888120
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0xa2895e4 0x78ce888200

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf057780
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4] 0x78cf057800
	float GainHF;//[Offset: 0x8, Size: 0x4] 0x78cf057880
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4] 0x78cf057900
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf057980
	float LateDelay;//[Offset: 0x14, Size: 0x4] 0x78cf057a00
	float DecayTime;//[Offset: 0x18, Size: 0x4] 0x78cf057a80
	float Density;//[Offset: 0x1c, Size: 0x4] 0x78cf057b00
	float Diffusion;//[Offset: 0x20, Size: 0x4] 0x78cf057b80
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4] 0x78cf057c00
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4] 0x78cf057c80
	float LateGain;//[Offset: 0x2c, Size: 0x4] 0x78cf057d00
	float Gain;//[Offset: 0x30, Size: 0x4] 0x78cf057d80
	float WetLevel;//[Offset: 0x34, Size: 0x4] 0x78cf057e00
	float DryLevel;//[Offset: 0x38, Size: 0x4] 0x78cf057e80
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78cf057f00

--------------------------------
Class: QuartzSubsystem.WorldSubsystem.Subsystem.Object
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0xa289dec 0x78ce8876a0
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0xa289d3c 0x78ce887780
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0xa289e9c 0x78ce887860
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0xa28a2f4 0x78ce887940
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0xa28a098 0x78ce887a20
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0xa289fe8 0x78ce887b00
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0xa28a148 0x78ce887be0
	float GetAudioRenderThreadToGameThreadMinLatency();// 0xa289f80 0x78ce887cc0
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0xa289f4c 0x78ce887da0
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0xa289fb4 0x78ce887e80
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0xa28a1f8 0x78ce887f60
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists);// 0xa28a3ec 0x78ce888040

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18] 0x78cf0d2400
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cf0d2480

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4] 0x78cf0d2180
	enum BeatType;//[Offset: 0x4, Size: 0x1] 0x78cf086f00
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10] 0x78cf087040

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4] 0x78cf0d2280
	enum PulseDuration;//[Offset: 0x4, Size: 0x1] 0x78cf086fa0

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10] 0x78ce72efc0

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x78cf057680
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78cf057700

--------------------------------
Class: AssetRegistryHelpers.Object
	static SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0xa30cc38 0x78ce88a500
	static ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0xa30c224 0x78ce88a5e0
	static bool IsValid(out const AssetData InAssetData);// 0xa30d160 0x78ce88a6c0
	static bool IsUAsset(out const AssetData InAssetData);// 0xa30d038 0x78ce88a7a0
	static bool IsRedirector(out const AssetData InAssetData);// 0xa30cf10 0x78ce88a880
	static bool IsAssetLoaded(out const AssetData InAssetData);// 0xa30c8c8 0x78ce88a960
	static bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0xa30c584 0x78ce88aa40
	static FString GetFullName(out const AssetData InAssetData);// 0xa30cda8 0x78ce88ab20
	static FString GetExportTextName(out const AssetData InAssetData);// 0xa30c760 0x78ce88ac00
	static class Object GetClass(out const AssetData InAssetData);// 0xa30cb14 0x78ce88ace0
	static interface classNone GetAssetRegistry();// 0xa30d4bc 0x78ce887400
	static Object* GetAsset(out const AssetData InAssetData);// 0xa30c9f0 0x78ce8874e0
	static AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0xa30d288 0x78ce8875c0

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10] 0x78ea07ad80
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10] 0x78ea07ae20
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10] 0x78ea07aec0
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10] 0x78ea07af60
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50] 0x78ea07b000
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x78ea088780
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x78ea088800
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x78ea088880

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x78cf057580
	FString Value;//[Offset: 0x8, Size: 0x10] 0x78cf057600

--------------------------------
Class: AssetRegistry.Interface.Object
	void WaitForCompletion();// 0xa30e150 0x78ce889380
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0xa30e4b4 0x78ce889460
	void SearchAllAssets(bool bSynchronousSearch);// 0xa30e16c 0x78ce889540
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan);// 0xa30e36c 0x78ce889620
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0xa30df98 0x78ce889700
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0xa30e224 0x78ce8897e0
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0xa30e6bc 0x78ce8898c0
	void PrioritizeSearchPath(FString PathToPrioritize);// 0xa30e094 0x78ce8899a0
	bool K2_GetReferencers(FName PackageName, out const AssetRegistryDependencyOptions ReferenceOptions, out FName[] OutReferencers);// 0xa30eb60 0x78ce889a80
	bool K2_GetDependencies(FName PackageName, out const AssetRegistryDependencyOptions DependencyOptions, out FName[] OutDependencies);// 0xa30ecd4 0x78ce889b60
	bool IsLoadingAssets();// 0xa30df58 0x78ce889c40
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0xa30fa9c 0x78ce889d20
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0xa30e8c4 0x78ce889e00
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0xa30f654 0x78ce889ee0
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0xa30f89c 0x78ce889fc0
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0xa30f454 0x78ce88a0a0
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0xa30f240 0x78ce88a180
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0xa30effc 0x78ce88a260
	void GetAllCachedPaths(out FString[] OutPathList);// 0xa30ea64 0x78ce88a340
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0xa30ee48 0x78ce88a420

--------------------------------
Class: AssetRegistryDependencyOptions
	bool bIncludeSoftPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf059400
	bool bIncludeHardPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cf059480
	bool bIncludeSearchableNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cf057400
	bool bIncludeSoftManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x78cf057480
	bool bIncludeHardManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78cf057500

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	static bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xa32bd00 0x78ce88b300
	static bool NotEqual_TagTag(GameplayTag A, FString B);// 0xa32b06c 0x78ce88b3e0
	static bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0xa32aed8 0x78ce88b4c0
	static bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xa32b94c 0x78ce88b5a0
	static bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xa32ca98 0x78ce88b680
	static bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0xa32cde0 0x78ce88b760
	static bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xa32cc80 0x78ce88b840
	static GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0xa32b838 0x78ce88b920
	static GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0xa32c890 0x78ce88ba00
	static GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0xa32b410 0x78ce88bae0
	static GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0xa32b688 0x78ce88bbc0
	static GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0xa32b754 0x78ce88bca0
	static bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0xa32c240 0x78ce88bd80
	static bool IsGameplayTagValid(GameplayTag GameplayTag);// 0xa32c9ec 0x78ce88be60
	static bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0xa32c654 0x78ce88bf40
	static bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xa32c4c0 0x78ce88c020
	static bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0xa32c32c 0x78ce88c100
	static bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0xa32b2dc 0x78ce88c1e0
	static FName GetTagName(out const GameplayTag GameplayTag);// 0xa32c938 0x78ce88c2c0
	static int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0xa32c7c0 0x78ce88c3a0
	static FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0xa32adc4 0x78ce88c480
	static FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0xa32acd0 0x78ce88c560
	static void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0xa32bf24 0x78ce88c640
	static bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0xa32ba8c 0x78ce88c720
	static bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0xa32cb8c 0x78ce88c800
	static bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0xa32b1c4 0x78ce88c8e0
	static bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0xa32c0e8 0x78ce88c9c0
	static void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0xa32b564 0x78ce8890e0
	static void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0xa32bbcc 0x78ce8891c0
	static void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0xa32be18 0x78ce8892a0

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10] 0x78cefdd760
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10] 0x78cefdd800

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4] 0x78cf058900
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10] 0x78cefdd8a0
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10] 0x78cefdd940
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x78cf058b00
	FString AutoDescription;//[Offset: 0x38, Size: 0x10] 0x78cf058b80

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0xa32e10c 0x78ce88af80
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0xa32df44 0x78ce88b060
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0xa32e028 0x78ce88b140
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0xa32e1c8 0x78ce88b220

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x78ce8b3700
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8] 0x78ce8b3780
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48] 0x78ce8b3800

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78ce8b3680

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78ce8b3600

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78ce8b3580

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x78ce72ff60

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x78ce72fec0

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x78ce72fe20

--------------------------------
Class: GameplayTagsManager.Object
	GameplayTagSource[] TagSources;//[Offset: 0xc0, Size: 0x10] 0x78ce72fce0
	DataTable*[] GameplayTagTables;//[Offset: 0x1b0, Size: 0x10] 0x78ce72fd80

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x78cf058600
	enum SourceType;//[Offset: 0x8, Size: 0x1] 0x78cefdd6c0
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8] 0x78cf058700
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8] 0x78cf058780

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x78ce8b3200
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10] 0x78ce72fc40

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8] 0x78cf058500
	FString DevComment;//[Offset: 0x10, Size: 0x10] 0x78cf058580

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x78ce8b5200
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10] 0x78ce72fba0

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78cf058480

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ce8b4c80
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78ce8b4d00
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78ce8b4d80
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10] 0x78ce8b4e00
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10] 0x78ce72f880
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10] 0x78ce72f920
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10] 0x78ce72f9c0
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10] 0x78ce72fa60
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4] 0x78ce8b5080
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4] 0x78ce8b5100
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10] 0x78ce72fb00

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10] 0x78cf05a380
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10] 0x78cefdd580

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8] 0x78cf05a280
	FName NewTagName;//[Offset: 0x8, Size: 0x8] 0x78cf05a300

--------------------------------
Class: RestrictedConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10] 0x78cf05a480
	FString[] Owners;//[Offset: 0x10, Size: 0x10] 0x78cefdd620

--------------------------------
Class: GameplayTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10] 0x78ce8b4b80
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8] 0x78ce8b4c00

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10] 0x78ce72f7e0

--------------------------------
Class: MeshDescription.Object

--------------------------------
Class: PropertyAccess.Interface.Object

--------------------------------
Class: PropertyEventBroadcaster.Interface.Object

--------------------------------
Class: PropertyEventSubscriber.Interface.Object

--------------------------------
Class: ClothSharedSimConfigBase.Object

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object
	Vector[] Vertices;//[Offset: 0x28, Size: 0x10] 0x78ce8c2360
	Vector[] Normals;//[Offset: 0x38, Size: 0x10] 0x78ce8c2400
	uint32[] Indices;//[Offset: 0x48, Size: 0x10] 0x78ce8c24a0
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10] 0x78ce8c2540
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10] 0x78ce8c25e0
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4] 0x78ce8bae80
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4] 0x78ce8baf00
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10] 0x78ce8c2680

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4] 0x78cf05a700
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2] 0x78cf05a780
	float BoneWeights;//[Offset: 0x1c, Size: 0x4] 0x78cf05a800

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0xa3ca180 0x78ce8d0240
	static bool IsStereoGazeDataAvailable();// 0xa3ca398 0x78ce8d0320
	static bool IsEyeTrackerConnected();// 0xa3ca3d0 0x78ce8d0400
	static bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0xa3ca218 0x78ce8d04e0
	static bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0xa3ca2d8 0x78ce8d05c0

--------------------------------
Class: EyeTrackerStereoGazeData
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0xc] 0x78cf05c500
	Vector LeftEyeDirection;//[Offset: 0xc, Size: 0xc] 0x78cf05c580
	Vector RightEyeOrigin;//[Offset: 0x18, Size: 0xc] 0x78cf05c600
	Vector RightEyeDirection;//[Offset: 0x24, Size: 0xc] 0x78cf05a580
	Vector FixationPoint;//[Offset: 0x30, Size: 0xc] 0x78cf05a600
	float ConfidenceValue;//[Offset: 0x3c, Size: 0x4] 0x78cf05a680

--------------------------------
Class: EyeTrackerGazeData
	Vector GazeOrigin;//[Offset: 0x0, Size: 0xc] 0x78cf05c300
	Vector GazeDirection;//[Offset: 0xc, Size: 0xc] 0x78cf05c380
	Vector FixationPoint;//[Offset: 0x18, Size: 0xc] 0x78cf05c400
	float ConfidenceValue;//[Offset: 0x24, Size: 0x4] 0x78cf05c480

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10] 0x78ce8ba700
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78ce8ba780
	void SetFilePath(FString Path);// 0xa3fc570 0x78ce8d0160

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xa3fd158 0x78ce8d3880
	static void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xa3fd2e8 0x78ce8d3960
	static void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0xa3fd478 0x78ce8d0080

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x78cf05bc00
	FString URL;//[Offset: 0x18, Size: 0x10] 0x78cf05bc80

--------------------------------
Class: MediaComponent.ActorComponent.Object
	MediaTexture* MediaTexture;//[Offset: 0xb0, Size: 0x8] 0x78ce8bc300
	MediaPlayer* MediaPlayer;//[Offset: 0xb8, Size: 0x8] 0x78ce8bc380
	MediaTexture* GetMediaTexture();// 0xa3fdb54 0x78ce8d36c0
	MediaPlayer* GetMediaPlayer();// 0xa3fdb88 0x78ce8d37a0

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 0x8] 0x78ce8e2e80

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x88, Size: 0x10] 0x78ce8e2e00

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78ce8e2c80
	int FrameDelay;//[Offset: 0x8c, Size: 0x4] 0x78ce8e2d00
	double TimeDelay;//[Offset: 0x90, Size: 0x8] 0x78ce8e2d80

--------------------------------
Class: AnimSequenceLevelSequenceLink.AssetUserData.Object
	Guid SkelTrackGuid;//[Offset: 0x28, Size: 0x10] 0x78ce8e2b80
	SoftObjectPath PathToLevelSequence;//[Offset: 0x38, Size: 0x18] 0x78ce8e2c00

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8] 0x78ce8e2a80
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x30] 0x78ce8e2b00

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequenceAnimSequenceLink.AssetUserData.Object
	LevelSequenceAnimSequenceLinkItem[] AnimSequenceLinks;//[Offset: 0x28, Size: 0x10] 0x78ce8c3da0

--------------------------------
Class: LevelSequenceAnimSequenceLinkItem
	Guid SkelTrackGuid;//[Offset: 0x0, Size: 0x10] 0x78cf05e500
	SoftObjectPath PathToAnimSequence;//[Offset: 0x10, Size: 0x18] 0x78cf05e580
	bool bExportTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf05e600
	bool bExportCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cf05e680
	bool bRecordInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x78cf05e700

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8] 0x78ce8e4200
	void OnCreated();// 0x8a873f8 0x78ce8d8660

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelSequenceMediaController.Actor.Object
	LevelSequenceActor* Sequence;//[Offset: 0x228, Size: 0x8] 0x78ce8e3580
	MediaComponent* MediaComponent;//[Offset: 0x230, Size: 0x8] 0x78ce8e3600
	float ServerStartTimeSeconds;//[Offset: 0x238, Size: 0x4] 0x78ce8e3680
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0xa41e1a4 0x78ce8d8040
	void Play();// 0xa41e284 0x78ce8d8120
	void OnRep_ServerStartTimeSeconds();// 0xa41e190 0x78ce8d8200
	LevelSequenceActor* GetSequence();// 0xa41e24c 0x78ce8d82e0
	MediaComponent* GetMediaComponent();// 0xa41e268 0x78ce8d83c0

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1] 0x78ce8c3800
	bool IsCapturing();// 0xa43a860 0x78ce8d7e80
	enum GetState();// 0xa43a8a8 0x78ce8d7f60

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	FString Filename;//[Offset: 0x58, Size: 0x10] 0x78ce8e3380

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10] 0x78ce8e5100
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78ce8e5180
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x78ce8e5200
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1] 0x78ce8e5280
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18] 0x78ce8e3200
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78ce8e3280
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8] 0x78ce8e3300

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10] 0x78cefdef20

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4] 0x78ce8e5080

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x78ce8e4f80
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1] 0x78ce8e5000

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18] 0x78ce8e4a00
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18] 0x78ce8e4a80
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8] 0x78ce8e4b00
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8] 0x78ce8e4b80
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70] 0x78ce8e4c00
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78ce8e4c80
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x78ce8e4d00
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10] 0x78ce8e4d80
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10] 0x78ce8e4e00
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xa439730 0x78ce8d7b00
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0xa439688 0x78ce8d7be0
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0xa4397f4 0x78ce8d7cc0
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0xa4397d8 0x78ce8d7da0

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10] 0x78cf05ec80
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8] 0x78cefdee80
	FString OutputFormat;//[Offset: 0x18, Size: 0x10] 0x78cf05ed00
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf05ed80
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cf05ee00
	int HandleFrames;//[Offset: 0x2c, Size: 0x4] 0x78cf05ee80
	FString MovieExtension;//[Offset: 0x30, Size: 0x10] 0x78cf05ef00
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1] 0x78cf05ef80
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8] 0x78cf05f000
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78cf05f080
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8] 0x78cf05f100
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8] 0x78cf05f280
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cf05f300
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78cf05f380
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x78cf05f400
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x78cf05f480
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78cf05f500
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x78cf05f580
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x78cf05f600
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x78cf05f680
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4] 0x78cf05f700

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4] 0x78cf05f180
	int ResY;//[Offset: 0x4, Size: 0x4] 0x78cf05f200

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78ce8e4900
	Guid PrerequisiteActorId;//[Offset: 0x22c, Size: 0x10] 0x78ce8e4980

--------------------------------
Class: MovieSceneCaptureEnvironment.Object
	static bool IsCaptureInProgress();// 0xa439f3c 0x78ce8d76a0
	static int GetCaptureFrameNumber();// 0xa439fa8 0x78ce8d7780
	static float GetCaptureElapsedTime();// 0xa439f74 0x78ce8d7860
	static MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0xa439f08 0x78ce8d7940
	static MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0xa439ed4 0x78ce8d7a20

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8] 0x78ce8e6180
	void StopCapturingFinalPixels();// 0xa43b7dc 0x78ce8da260
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0xa43b7f0 0x78ce8da340
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0xa43b92c 0x78ce8da420
	void OnWarmUp();// 0x8a873f8 0x78ce8da500
	void OnTick();// 0x8a873f8 0x78ce8da5e0
	void OnStartCapture();// 0x8a873f8 0x78ce8da6c0
	bool OnSetup();// 0xa43bae8 0x78ce8da7a0
	void OnPreTick();// 0x8a873f8 0x78ce8da880
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0x8a873f8 0x78ce8da960
	void OnPauseCapture();// 0x8a873f8 0x78ce8daa40
	void OnFinalize();// 0x8a873f8 0x78ce8dab20
	void OnCaptureFrame();// 0x8a873f8 0x78ce8dac00
	bool OnCanFinalize();// 0xa43baa8 0x78ce8dace0
	void OnBeginFinalize();// 0x8a873f8 0x78ce8d7400
	FrameMetrics GetCurrentFrameMetrics();// 0xa43b6b0 0x78ce8d74e0
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0xa43b6cc 0x78ce8d75c0

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50] 0x78cf0658c0

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4] 0x78cf05f780
	float FrameDelta;//[Offset: 0x4, Size: 0x4] 0x78cf05d700
	int FrameNumber;//[Offset: 0x8, Size: 0x4] 0x78cf05d780
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4] 0x78cf05d800

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	enum Format;//[Offset: 0xd8, Size: 0x1] 0x78ce8c3620
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78ce8e5c80
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4] 0x78ce8e5d00
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0xa43c9f4 0x78ce8d9fc0
	FString GenerateFilenameForCurrentFrame();// 0xa43cc7c 0x78ce8da0a0
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0xa43cd2c 0x78ce8da180

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78ce8e5b00
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x78ce8e5b80

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce8e5980
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78ce8e5a00
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10] 0x78ce8c3580

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10] 0x78ce9db140

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8] 0x78cf0fc000
	Timespan EndTime;//[Offset: 0x8, Size: 0x8] 0x78cf0fc080
	FString text;//[Offset: 0x10, Size: 0x10] 0x78cf0fc100
	Vector2D Position;//[Offset: 0x20, Size: 0x8] 0x78cf0fc180

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8] 0x78ce3bd400
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50] 0x78cee15b00

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1] 0x78ce3bcd00
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78ce3bcd80
	uint32 AppID;//[Offset: 0x2c, Size: 0x4] 0x78ce3bce00
	FString AppName;//[Offset: 0x30, Size: 0x10] 0x78ce3bce80
	FString BuildVersion;//[Offset: 0x40, Size: 0x10] 0x78ce3bcf00
	FString LaunchExe;//[Offset: 0x50, Size: 0x10] 0x78ce3bcf80
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10] 0x78ce3bd000
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50] 0x78ce9daec0
	FString PrereqName;//[Offset: 0xc0, Size: 0x10] 0x78ce3bd100
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10] 0x78ce3bd180
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10] 0x78ce3bd200
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10] 0x78ce9daf60
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10] 0x78ce9db000
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10] 0x78ce9db0a0

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10] 0x78cf0fba00
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14] 0x78cf0fbb00
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10] 0x78cf08b960
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10] 0x78cf0890c0
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78cf0fbe00
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10] 0x78cf0fbe80
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78cf0fbf00
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78cf0fbf80

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1] 0x78cf0fba80

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x78cf0fbb80
	uint32 Offset;//[Offset: 0x10, Size: 0x4] 0x78cf0fbc00
	uint32 Size;//[Offset: 0x14, Size: 0x4] 0x78cf0fbc80

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x78cf0fb780
	uint64 Hash;//[Offset: 0x10, Size: 0x8] 0x78cf0fb800
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14] 0x78cf0fb880
	int64 FileSize;//[Offset: 0x30, Size: 0x8] 0x78cf0fb900
	byte GroupNumber;//[Offset: 0x38, Size: 0x1] 0x78cf0fb980

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10] 0x78cf0fb680
	FString Value;//[Offset: 0x10, Size: 0x10] 0x78cf0fb700

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAssetCommon.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8] 0x78ce3be700
	<FName,ClothConfigBase*> ClothConfigs;//[Offset: 0x50, Size: 0x50] 0x78cee15a40
	ClothConfigBase* ClothSharedSimConfig;//[Offset: 0xa0, Size: 0x8] 0x78ce3bc780
	ClothConfigBase* ClothSimConfig;//[Offset: 0xa8, Size: 0x8] 0x78ce3bc800
	ClothConfigBase* ChaosClothSimConfig;//[Offset: 0xb0, Size: 0x8] 0x78ce3bc880
	ClothLODDataCommon_Legacy*[] ClothLODData;//[Offset: 0xb8, Size: 0x10] 0x78ce9daba0
	ClothLODDataCommon[] LODData;//[Offset: 0xc8, Size: 0x10] 0x78ce9dac40
	int[] LodMap;//[Offset: 0xd8, Size: 0x10] 0x78ce9dace0
	FName[] UsedBoneNames;//[Offset: 0xe8, Size: 0x10] 0x78ce9dad80
	int[] UsedBoneIndices;//[Offset: 0xf8, Size: 0x10] 0x78ce9dae20
	int ReferenceBoneIndex;//[Offset: 0x108, Size: 0x4] 0x78ce3bcb80
	ClothingAssetCustomData* CustomData;//[Offset: 0x110, Size: 0x8] 0x78ce3bcc00
	ClothConfig_Legacy ClothConfig;//[Offset: 0x118, Size: 0xd4] 0x78ce3bcc80

--------------------------------
Class: ClothLODDataCommon_Legacy.Object
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData;//[Offset: 0x28, Size: 0x8] 0x78ce3be580
	ClothPhysicalMeshData ClothPhysicalMeshData;//[Offset: 0x30, Size: 0xf8] 0x78ce3be600
	ClothCollisionData CollisionData;//[Offset: 0x128, Size: 0x40] 0x78ce3be680

--------------------------------
Class: ClothPhysicalMeshData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10] 0x78cf08b1e0
	Vector[] Normals;//[Offset: 0x10, Size: 0x10] 0x78cf08b280
	uint32[] Indices;//[Offset: 0x20, Size: 0x10] 0x78cf08b320
	<uint32,PointWeightMap> WeightMaps;//[Offset: 0x30, Size: 0x50] 0x78cf154300
	float[] InverseMasses;//[Offset: 0x80, Size: 0x10] 0x78cf08b460
	ClothVertBoneData[] BoneData;//[Offset: 0x90, Size: 0x10] 0x78cf08b500
	int MaxBoneWeights;//[Offset: 0xa0, Size: 0x4] 0x78cf0fe380
	int NumFixedVerts;//[Offset: 0xa4, Size: 0x4] 0x78cf0fe400
	uint32[] SelfCollisionIndices;//[Offset: 0xa8, Size: 0x10] 0x78cf08b5a0
	float[] MaxDistances;//[Offset: 0xb8, Size: 0x10] 0x78cf08b640
	float[] BackstopDistances;//[Offset: 0xc8, Size: 0x10] 0x78cf08b6e0
	float[] BackstopRadiuses;//[Offset: 0xd8, Size: 0x10] 0x78cf08b780
	float[] AnimDriveMultipliers;//[Offset: 0xe8, Size: 0x10] 0x78cf08b820

--------------------------------
Class: PointWeightMap
	float[] Values;//[Offset: 0x0, Size: 0x10] 0x78cf08b3c0

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10] 0x78cefdf420
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10] 0x78cefdf4c0
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10] 0x78cefdf6a0
	ClothCollisionPrim_Box[] Boxes;//[Offset: 0x30, Size: 0x10] 0x78cefdf740

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4] 0x78cf05a880
	float Radius;//[Offset: 0x4, Size: 0x4] 0x78cf05a900
	Vector LocalPosition;//[Offset: 0x8, Size: 0xc] 0x78cf05a980

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4] 0x78cf05aa80

--------------------------------
Class: ClothCollisionPrim_Convex
	Plane[] Planes;//[Offset: 0x0, Size: 0x10] 0x78cefdf560
	Vector[] SurfacePoints;//[Offset: 0x10, Size: 0x10] 0x78cefdf600
	int BoneIndex;//[Offset: 0x20, Size: 0x4] 0x78cf05ac80

--------------------------------
Class: ClothCollisionPrim_Box
	Vector LocalPosition;//[Offset: 0x0, Size: 0xc] 0x78cf05ad80
	Quat LocalRotation;//[Offset: 0x10, Size: 0x10] 0x78cf05ae00
	Vector HalfExtents;//[Offset: 0x20, Size: 0xc] 0x78cf05ae80
	int BoneIndex;//[Offset: 0x2c, Size: 0x4] 0x78cf05af00

--------------------------------
Class: ClothLODDataCommon
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xf8] 0x78cf0fe700
	ClothCollisionData CollisionData;//[Offset: 0xf8, Size: 0x40] 0x78cf0fc680
	bool bUseMultipleInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x78cf0fc700
	float SkinningKernelRadius;//[Offset: 0x13c, Size: 0x4] 0x78cf0fc780

--------------------------------
Class: ClothConfig_Legacy
	enum WindMethod;//[Offset: 0x0, Size: 0x1] 0x78cf08b8c0
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x4, Size: 0x10] 0x78cf0fc880
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x14, Size: 0x10] 0x78cf0fc900
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x24, Size: 0x10] 0x78cf0fc980
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x34, Size: 0x10] 0x78cf0fcc00
	float SelfCollisionRadius;//[Offset: 0x44, Size: 0x4] 0x78cf0fcc80
	float SelfCollisionStiffness;//[Offset: 0x48, Size: 0x4] 0x78cf0fcd00
	float SelfCollisionCullScale;//[Offset: 0x4c, Size: 0x4] 0x78cf0fcd80
	Vector Damping;//[Offset: 0x50, Size: 0xc] 0x78cf0fce00
	float Friction;//[Offset: 0x5c, Size: 0x4] 0x78cf0fce80
	float WindDragCoefficient;//[Offset: 0x60, Size: 0x4] 0x78cf0fcf00
	float WindLiftCoefficient;//[Offset: 0x64, Size: 0x4] 0x78cf0fcf80
	Vector LinearDrag;//[Offset: 0x68, Size: 0xc] 0x78cf0fd000
	Vector AngularDrag;//[Offset: 0x74, Size: 0xc] 0x78cf0fd080
	Vector LinearInertiaScale;//[Offset: 0x80, Size: 0xc] 0x78cf0fd100
	Vector AngularInertiaScale;//[Offset: 0x8c, Size: 0xc] 0x78cf0fd180
	Vector CentrifugalInertiaScale;//[Offset: 0x98, Size: 0xc] 0x78cf0fd200
	float SolverFrequency;//[Offset: 0xa4, Size: 0x4] 0x78cf0fd280
	float StiffnessFrequency;//[Offset: 0xa8, Size: 0x4] 0x78cf0fd300
	float GravityScale;//[Offset: 0xac, Size: 0x4] 0x78cf0fd380
	Vector GravityOverride;//[Offset: 0xb0, Size: 0xc] 0x78cf0fd400
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78cf0fd480
	float TetherStiffness;//[Offset: 0xc0, Size: 0x4] 0x78cf0fd500
	float TetherLimit;//[Offset: 0xc4, Size: 0x4] 0x78cf0fd580
	float CollisionThickness;//[Offset: 0xc8, Size: 0x4] 0x78cf0fd600
	float AnimDriveSpringStiffness;//[Offset: 0xcc, Size: 0x4] 0x78cf0fd680
	float AnimDriveDamperStiffness;//[Offset: 0xd0, Size: 0x4] 0x78cf0fb600

--------------------------------
Class: ClothConstraintSetup_Legacy
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78cf0fca00
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x78cf0fca80
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x78cf0fcb00
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x78cf0fcb80

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1] 0x78ce9daa60
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10] 0x78ce3bf700
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10] 0x78ce3bf780
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10] 0x78ce3bd700
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10] 0x78ce3bd780
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4] 0x78ce3bd800
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4] 0x78ce3bd880
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4] 0x78ce3bd900
	Vector Damping;//[Offset: 0x78, Size: 0xc] 0x78ce3bd980
	float Friction;//[Offset: 0x84, Size: 0x4] 0x78ce3bda00
	float WindDragCoefficient;//[Offset: 0x88, Size: 0x4] 0x78ce3bda80
	float WindLiftCoefficient;//[Offset: 0x8c, Size: 0x4] 0x78ce3bdb00
	Vector LinearDrag;//[Offset: 0x90, Size: 0xc] 0x78ce3bdb80
	Vector AngularDrag;//[Offset: 0x9c, Size: 0xc] 0x78ce3bdc00
	Vector LinearInertiaScale;//[Offset: 0xa8, Size: 0xc] 0x78ce3bdc80
	Vector AngularInertiaScale;//[Offset: 0xb4, Size: 0xc] 0x78ce3bdd00
	Vector CentrifugalInertiaScale;//[Offset: 0xc0, Size: 0xc] 0x78ce3bdd80
	float SolverFrequency;//[Offset: 0xcc, Size: 0x4] 0x78ce3bde00
	float StiffnessFrequency;//[Offset: 0xd0, Size: 0x4] 0x78ce3bde80
	float GravityScale;//[Offset: 0xd4, Size: 0x4] 0x78ce3bdf00
	Vector GravityOverride;//[Offset: 0xd8, Size: 0xc] 0x78ce3bdf80
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x78ce3be000
	float TetherStiffness;//[Offset: 0xe8, Size: 0x4] 0x78ce3be080
	float TetherLimit;//[Offset: 0xec, Size: 0x4] 0x78ce3be100
	float CollisionThickness;//[Offset: 0xf0, Size: 0x4] 0x78ce3be180
	float AnimDriveSpringStiffness;//[Offset: 0xf4, Size: 0x4] 0x78ce3be200
	float AnimDriveDamperStiffness;//[Offset: 0xf8, Size: 0x4] 0x78ce3be280
	enum WindMethod;//[Offset: 0xfc, Size: 0x1] 0x78ce9dab00
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x100, Size: 0x10] 0x78ce3be380
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x110, Size: 0x10] 0x78ce3be400
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x120, Size: 0x10] 0x78ce3be480
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x130, Size: 0x10] 0x78ce3be500

--------------------------------
Class: ClothConstraintSetupNv
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x78cf0fda80
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x78cf0fdb00
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x78cf0fdb80
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x78cf0fdc00

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object
	void SetAnimDriveDamperStiffness(float InStiffness);// 0xb310b84 0x78ce3a89e0

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10] 0x78ce9da7e0
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10] 0x78ce9da880
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10] 0x78ce9da920
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10] 0x78ce9da9c0

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10] 0x78ce3d3100
	int StoreVersion;//[Offset: 0x38, Size: 0x4] 0x78ce3d3180
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4] 0x78ce3d1100
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4] 0x78ce3d1180
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4] 0x78ce3d1200
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10] 0x78ce3d1280
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10] 0x78ce3d1300
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4] 0x78ce3d1380
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4] 0x78ce3d1400
	byte InstallLocation;//[Offset: 0x70, Size: 0x1] 0x78ce3d1480
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78ce3d1500
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x78ce3d1580
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1] 0x78ce3d1600
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78ce3d1680
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78ce3d1700
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1] 0x78ce3d1780
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1] 0x78ce3d1800
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78ce3d1880
	bool bAllowOverflowOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78ce3d1900
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x78ce3d1980
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x78ce3d1a00
	byte Orientation;//[Offset: 0x7c, Size: 0x1] 0x78ce3d1a80
	float MaxAspectRatio;//[Offset: 0x80, Size: 0x4] 0x78ce3d1b00
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78ce3d1b80
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x78ce3d1c00
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1] 0x78ce3d1c80
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1] 0x78ce3d1d00
	byte DepthBufferPreference;//[Offset: 0x88, Size: 0x1] 0x78ce3d1d80
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78ce3d1e00
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x78ce3d1e80
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x78ce3d1f00
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x78ce3d1f80
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1] 0x78ce3d2000
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1] 0x78ce3d2080
	FString[] ExtraManifestNodeTags;//[Offset: 0x90, Size: 0x10] 0x78ce9dcb80
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa0, Size: 0x10] 0x78ce9dcc20
	FString ExtraApplicationSettings;//[Offset: 0xb0, Size: 0x10] 0x78ce3d0100
	FString[] ExtraActivityNodeTags;//[Offset: 0xc0, Size: 0x10] 0x78ce9dccc0
	FString ExtraActivitySettings;//[Offset: 0xd0, Size: 0x10] 0x78ce3d0200
	FString[] ExtraPermissions;//[Offset: 0xe0, Size: 0x10] 0x78ce9dcd60
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78ce3d0300
	byte[] PackageForOculusMobile;//[Offset: 0xf8, Size: 0x10] 0x78ce9dce00
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x78ce3d0400
	byte[] GoogleVRCaps;//[Offset: 0x110, Size: 0x10] 0x78ce9da560
	bool bGoogleVRSustainedPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78ce3d0500
	FString KeyStore;//[Offset: 0x128, Size: 0x10] 0x78ce3d0580
	FString KeyAlias;//[Offset: 0x138, Size: 0x10] 0x78ce3d0600
	FString KeyStorePassword;//[Offset: 0x148, Size: 0x10] 0x78ce3d0680
	FString KeyPassword;//[Offset: 0x158, Size: 0x10] 0x78ce3d0700
	bool bBuildForArmV7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1] 0x78ce3d0780
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1] 0x78ce3d0800
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1] 0x78ce3d0880
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1] 0x78ce3d0900
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1] 0x78ce3d0980
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x78ce3d0a00
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1] 0x78ce3d0a80
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1] 0x78ce3d0b00
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x78ce3d0b80
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1] 0x78ce3d0c00
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1] 0x78ce3d0c80
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1] 0x78ce3d0d00
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1] 0x78ce3d0d80
	FString GamesAppID;//[Offset: 0x178, Size: 0x10] 0x78ce3d0e00
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x188, Size: 0x10] 0x78ce9da600
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x198, Size: 0x10] 0x78ce9da6a0
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78ce3d0f80
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1] 0x78ce3d1000
	FString AdMobAdUnitID;//[Offset: 0x1b0, Size: 0x10] 0x78ce3d1080
	FString[] AdMobAdUnitIDs;//[Offset: 0x1c0, Size: 0x10] 0x78ce9da740
	FString GooglePlayLicenseKey;//[Offset: 0x1d0, Size: 0x10] 0x78ce3bf880
	FString GCMClientSenderID;//[Offset: 0x1e0, Size: 0x10] 0x78ce3bf900
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1] 0x78ce3bf980
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1] 0x78ce3bfa00
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1] 0x78ce3bfa80
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1] 0x78ce3bfb00
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1] 0x78ce3bfb80
	byte AndroidAudio;//[Offset: 0x1f5, Size: 0x1] 0x78ce3bfc00
	int AudioSampleRate;//[Offset: 0x1f8, Size: 0x4] 0x78ce3bfc80
	int AudioCallbackBufferFrameSize;//[Offset: 0x1fc, Size: 0x4] 0x78ce3bfd00
	int AudioNumBuffersToEnqueue;//[Offset: 0x200, Size: 0x4] 0x78ce3bfd80
	int AudioMaxChannels;//[Offset: 0x204, Size: 0x4] 0x78ce3bfe00
	int AudioNumSourceWorkers;//[Offset: 0x208, Size: 0x4] 0x78ce3bfe80
	FString SpatializationPlugin;//[Offset: 0x210, Size: 0x10] 0x78ce3bff00
	FString ReverbPlugin;//[Offset: 0x220, Size: 0x10] 0x78ce3bff80
	FString OcclusionPlugin;//[Offset: 0x230, Size: 0x10] 0x78ce3be780
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x240, Size: 0x10] 0x78ce3be800
	bool bUseAudioStreamCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78ce3be880
	int CacheSizeKB;//[Offset: 0x254, Size: 0x4] 0x78ce3be900
	int MaxChunkSizeOverrideKB;//[Offset: 0x258, Size: 0x4] 0x78ce3be980
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x78ce3bea00
	int SoundCueCookQualityIndex;//[Offset: 0x260, Size: 0x4] 0x78ce3bea80
	float MaxSampleRate;//[Offset: 0x264, Size: 0x4] 0x78ce3beb00
	float HighSampleRate;//[Offset: 0x268, Size: 0x4] 0x78ce3beb80
	float MedSampleRate;//[Offset: 0x26c, Size: 0x4] 0x78ce3bec00
	float LowSampleRate;//[Offset: 0x270, Size: 0x4] 0x78ce3bec80
	float MinSampleRate;//[Offset: 0x274, Size: 0x4] 0x78ce3bed00
	float CompressionQualityModifier;//[Offset: 0x278, Size: 0x4] 0x78ce3bed80
	float AutoStreamingThreshold;//[Offset: 0x27c, Size: 0x4] 0x78ce3bee00
	byte AndroidGraphicsDebugger;//[Offset: 0x280, Size: 0x1] 0x78ce3bee80
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x288, Size: 0x10] 0x78ce3bef00
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78ce3bef80
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x78ce3bf000
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1] 0x78ce3bf080
	float TextureFormatPriority_ETC2;//[Offset: 0x29c, Size: 0x4] 0x78ce3bf100
	float TextureFormatPriority_DXT;//[Offset: 0x2a0, Size: 0x4] 0x78ce3bf180
	float TextureFormatPriority_ASTC;//[Offset: 0x2a4, Size: 0x4] 0x78ce3bf200
	FString SDKAPILevelOverride;//[Offset: 0x2a8, Size: 0x10] 0x78ce3bf280
	FString NDKAPILevelOverride;//[Offset: 0x2b8, Size: 0x10] 0x78ce3bf300
	bool bStreamLandscapeMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78ce3bf380

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cf0ff180
	FString AchievementId;//[Offset: 0x10, Size: 0x10] 0x78cf0ff200

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x78cf0ff280
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10] 0x78cf0ff300

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf056c00
	float DurationThreshold;//[Offset: 0x4, Size: 0x4] 0x78cf056c80
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4] 0x78cf056d00
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4] 0x78cf056d80

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8] 0x78ce9dc040
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8] 0x78ce9dc0e0
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8] 0x78ce9dc180
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8] 0x78ce9dc220
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8] 0x78ce9dc2c0
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8] 0x78ce9dc360
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8] 0x78ce9dc400
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8] 0x78ce9dc4a0
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8] 0x78ce9dc540
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8] 0x78ce9dc5e0
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8] 0x78ce9dc680
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8] 0x78ce9dc720
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8] 0x78ce9dc7c0
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8] 0x78ce9dc860
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8] 0x78ce9dc900
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8] 0x78ce9dc9a0

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x1f8, Size: 0x18] 0x78ce3d3e80
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x210, Size: 0x8] 0x78ce3d3f00
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x218, Size: 0x8] 0x78ce3d3f80

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x78cf0fed80

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb0, Size: 0x4] 0x78ce3d3d80
	float TileRemovalRadius;//[Offset: 0xb4, Size: 0x4] 0x78ce3d3e00

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8] 0x78ce3d8200
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8] 0x78ce3d8280
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8] 0x78ce3d8300
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28] 0x78ce9dd940
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78ce3d8380
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78ce3d8400
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78ce3d6380
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78ce3d6400
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78ce3d6480
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78ce3d6500
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78ce3d6580
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78ce3d6600
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x78ce3d6680
	float ActiveTilesUpdateInterval;//[Offset: 0x6c, Size: 0x4] 0x78ce3d6700
	enum DataGatheringMode;//[Offset: 0x70, Size: 0x1] 0x78ce9dd9e0
	float DirtyAreaWarningSizeThreshold;//[Offset: 0x74, Size: 0x4] 0x78ce3d6800
	NavDataConfig[] SupportedAgents;//[Offset: 0x78, Size: 0x10] 0x78ce9dda80
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x88, Size: 0x4] 0x78ce3d6900
	NavigationData*[] NavDataSet;//[Offset: 0x90, Size: 0x10] 0x78ce9ddb20
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xa0, Size: 0x10] 0x78ce9ddbc0
	delegate OnNavDataRegisteredEvent;//[Offset: 0xc0, Size: 0x10] 0x78ce3d6a80
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xd0, Size: 0x10] 0x78ce3d6b00
	enum OperationMode;//[Offset: 0x1bc, Size: 0x1] 0x78ce9ddc60
	float DirtyAreasUpdateFreq;//[Offset: 0x15bc, Size: 0x4] 0x78ce3d6c00
	void UnregisterNavigationInvoker(Actor* Invoker);// 0xb484d60 0x78ce3aa7a0
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0xb484388 0x78ce3aa880
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0xb484470 0x78ce3aa960
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0xb484f58 0x78ce3aaa40
	void SetGeometryGatheringMode(enum NewMode);// 0xb484cb8 0x78ce3aab20
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0xb484f44 0x78ce3aac00
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0xb484e08 0x78ce3aace0
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0xb4848f8 0x78ce3a7400
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0xb484ac8 0x78ce3a74e0
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0xb485000 0x78ce3a75c0
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0xb484b70 0x78ce3a76a0
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0xb486014 0x78ce3a7780
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xb485dec 0x78ce3a7860
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xb484160 0x78ce3a7940
	static bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xb485bc4 0x78ce3a7a20
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0xb48561c 0x78ce3a7b00
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0xb4856c8 0x78ce3a7be0
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xb484724 0x78ce3a7cc0
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xb484550 0x78ce3a7da0
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xb485774 0x78ce3a7e80
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0xb48599c 0x78ce3a7f60
	static NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0xb486238 0x78ce3a8040
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0xb485444 0x78ce3a8120
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0xb485228 0x78ce3a8200

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x258, Size: 0x4] 0x78ce3d8880

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1] 0x78ce3d8000
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1] 0x78ce3d8080
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1] 0x78ce3d8100
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d, Size: 0x1] 0x78ce3d8180

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8] 0x78ce3d9200
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x238, Size: 0x8] 0x78ce3d9280
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78ce3d9300
	NavAgentProperties NavAgentProps;//[Offset: 0x248, Size: 0x30] 0x78ce3d9380
	Vector QueryingExtent;//[Offset: 0x278, Size: 0xc] 0x78ce3d9400
	NavigationData* MyNavData;//[Offset: 0x288, Size: 0x8] 0x78ce3d9480
	Vector ProjectedLocation;//[Offset: 0x290, Size: 0xc] 0x78ce3d7400
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x78ce3d7480
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x78ce3d7500
	float CostLimitFactor;//[Offset: 0x2a0, Size: 0x4] 0x78ce3d7580
	float MinimumCostLimit;//[Offset: 0x2a4, Size: 0x4] 0x78ce3d7600
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7680
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7700
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7780
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7800
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7880
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7900
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7980
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a8, Size: 0x1] 0x78ce3d7a00
	byte CostDisplayMode;//[Offset: 0x2a9, Size: 0x1] 0x78ce3d7a80
	Vector2D TextCanvasOffset;//[Offset: 0x2ac, Size: 0x8] 0x78ce3d7b00
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1] 0x78ce3d7b80
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1] 0x78ce3d7c00
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1] 0x78ce3d7c80
	float PathfindingTime;//[Offset: 0x2b8, Size: 0x4] 0x78ce3d7d00
	float PathCost;//[Offset: 0x2bc, Size: 0x4] 0x78ce3d7d80
	int PathfindingSteps;//[Offset: 0x2c0, Size: 0x4] 0x78ce3d7e00
	NavigationTestingActor* OtherActor;//[Offset: 0x2c8, Size: 0x8] 0x78ce3d7e80
	class NavigationQueryFilter* FilterClass;//[Offset: 0x2d0, Size: 0x8] 0x78ce9dd8a0
	int ShowStepIndex;//[Offset: 0x2d8, Size: 0x4] 0x78ce3d7f00
	float OffsetFromCornersDistance;//[Offset: 0x2dc, Size: 0x4] 0x78ce3d7f80

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x448, Size: 0x10] 0x78ce9dd800

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1] 0x78ce3d9000
	Object* CachedNavParent;//[Offset: 0xd8, Size: 0x8] 0x78ce3d9080
	void SetNavigationRelevancy(bool bRelevant);// 0xb48d6d4 0x78ce3aa6c0

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xe8, Size: 0x4] 0x78ce3d8900
	class NavArea* EnabledAreaClass;//[Offset: 0xf0, Size: 0x8] 0x78ce9dd620
	class NavArea* DisabledAreaClass;//[Offset: 0xf8, Size: 0x8] 0x78ce9dd6c0
	NavAgentSelector SupportedAgents;//[Offset: 0x100, Size: 0x4] 0x78ce3d8980
	Vector LinkRelativeStart;//[Offset: 0x104, Size: 0xc] 0x78ce3d8a00
	Vector LinkRelativeEnd;//[Offset: 0x110, Size: 0xc] 0x78ce3d8a80
	byte LinkDirection;//[Offset: 0x11c, Size: 0x1] 0x78ce3d8b00
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 0x1] 0x78ce3d8b80
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11d, Size: 0x1] 0x78ce3d8c00
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11d, Size: 0x1] 0x78ce3d8c80
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11d, Size: 0x1] 0x78ce3d8d00
	Vector ObstacleOffset;//[Offset: 0x120, Size: 0xc] 0x78ce3d8d80
	Vector ObstacleExtent;//[Offset: 0x12c, Size: 0xc] 0x78ce3d8e00
	class NavArea* ObstacleAreaClass;//[Offset: 0x138, Size: 0x8] 0x78ce9dd760
	float BroadcastRadius;//[Offset: 0x140, Size: 0x4] 0x78ce3d8e80
	float BroadcastInterval;//[Offset: 0x144, Size: 0x4] 0x78ce3d8f00
	byte BroadcastChannel;//[Offset: 0x148, Size: 0x1] 0x78ce3d8f80

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 0x8] 0x78ce9dd4e0
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc] 0x78ce3d8780
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x78ce3d8800
	void SetAreaClass(class NavArea NewAreaClass);// 0xb48c838 0x78ce3aa5e0

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x260, Size: 0x8] 0x78ce9dd3a0
	bool bMaskFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78ce3d8700
	void SetAreaClass(class NavArea NewAreaClass);// 0xb48cde0 0x78ce3aa500

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavSystemConfigOverride.Actor.Object
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x220, Size: 0x8] 0x78ce3d8580
	enum OverridePolicy;//[Offset: 0x228, Size: 0x1] 0x78ce9dd300
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1] 0x78ce3d8680

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1] 0x78ce3da900
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 0x1] 0x78ce3da980
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x424, Size: 0x1] 0x78ce3daa00
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x424, Size: 0x1] 0x78ce3daa80
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x424, Size: 0x1] 0x78ce3dab00
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x424, Size: 0x1] 0x78ce3dab80
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x424, Size: 0x1] 0x78ce3dac00
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x424, Size: 0x1] 0x78ce3dac80
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x425, Size: 0x1] 0x78ce3dad00
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x425, Size: 0x1] 0x78ce3dad80
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x425, Size: 0x1] 0x78ce3dae00
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x425, Size: 0x1] 0x78ce3dae80
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x425, Size: 0x1] 0x78ce3daf00
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x425, Size: 0x1] 0x78ce3daf80
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x425, Size: 0x1] 0x78ce3db000
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x425, Size: 0x1] 0x78ce3db080
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x426, Size: 0x1] 0x78ce3db100
	float DrawOffset;//[Offset: 0x428, Size: 0x4] 0x78ce3db180
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 0x1] 0x78ce3db200
	int TilePoolSize;//[Offset: 0x430, Size: 0x4] 0x78ce3db280
	float TileSizeUU;//[Offset: 0x434, Size: 0x4] 0x78ce3db300
	float CellSize;//[Offset: 0x438, Size: 0x4] 0x78ce3db380
	float CellHeight;//[Offset: 0x43c, Size: 0x4] 0x78ce3db400
	float AgentRadius;//[Offset: 0x440, Size: 0x4] 0x78ce3db480
	float AgentHeight;//[Offset: 0x444, Size: 0x4] 0x78ce3db500
	float AgentMaxSlope;//[Offset: 0x448, Size: 0x4] 0x78ce3db580
	float AgentMaxStepHeight;//[Offset: 0x44c, Size: 0x4] 0x78ce3d9500
	float MinRegionArea;//[Offset: 0x450, Size: 0x4] 0x78ce3d9580
	float MergeRegionSize;//[Offset: 0x454, Size: 0x4] 0x78ce3d9600
	float MaxSimplificationError;//[Offset: 0x458, Size: 0x4] 0x78ce3d9680
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x45c, Size: 0x4] 0x78ce3d9700
	int TileNumberHardLimit;//[Offset: 0x460, Size: 0x4] 0x78ce3d9780
	int PolyRefTileBits;//[Offset: 0x464, Size: 0x4] 0x78ce3d9800
	int PolyRefNavPolyBits;//[Offset: 0x468, Size: 0x4] 0x78ce3d9880
	int PolyRefSaltBits;//[Offset: 0x46c, Size: 0x4] 0x78ce3d9900
	Vector NavMeshOriginOffset;//[Offset: 0x470, Size: 0xc] 0x78ce3d9980
	float DefaultDrawDistance;//[Offset: 0x47c, Size: 0x4] 0x78ce3d9a00
	float DefaultMaxSearchNodes;//[Offset: 0x480, Size: 0x4] 0x78ce3d9a80
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x484, Size: 0x4] 0x78ce3d9b00
	byte RegionPartitioning;//[Offset: 0x488, Size: 0x1] 0x78ce3d9b80
	byte LayerPartitioning;//[Offset: 0x489, Size: 0x1] 0x78ce3d9c00
	int RegionChunkSplits;//[Offset: 0x48c, Size: 0x4] 0x78ce3d9c80
	int LayerChunkSplits;//[Offset: 0x490, Size: 0x4] 0x78ce3d9d00
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1] 0x78ce3d9d80
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 0x1] 0x78ce3d9e00
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 0x1] 0x78ce3d9e80
	bool bUseExtraTopCellWhenMarkingAreas;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 0x1] 0x78ce3d9f00
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 0x1] 0x78ce3d9f80
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 0x1] 0x78ce3da000
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 0x1] 0x78ce3da080
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x494, Size: 0x1] 0x78ce3da100
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 0x1] 0x78ce3da180
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 0x1] 0x78ce3da200
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 0x1] 0x78ce3da280
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 0x1] 0x78ce3da300
	float TileSetUpdateInterval;//[Offset: 0x498, Size: 0x4] 0x78ce3da380
	float HeuristicScale;//[Offset: 0x49c, Size: 0x4] 0x78ce3da400
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x4a0, Size: 0x4] 0x78ce3da480
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0xb48ea3c 0x78ce3aa420

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: WebBrowserTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	static GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0xb509000 0x78ce3aa260
	static GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0xb509200 0x78ce3aa340

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate Success;//[Offset: 0x60, Size: 0x10] 0x78ce3dc000
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10] 0x78ce3dc080
	class Actor* ClassToSpawn;//[Offset: 0x98, Size: 0x8] 0x78ce9dcea0
	static GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector spawnlocation, Rotator spawnrotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0xb509bc4 0x78ce3a9fc0
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0xb5099b8 0x78ce3aa0a0
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0xb509ab0 0x78ce3aa180

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x60, Size: 0x10] 0x78cee9c980
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10] 0x78cee9ca00

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10] 0x78cee9c700
	static GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0xb50a818 0x78cee8a960
	void TaskDelayDelegate__DelegateSignature();// 0x8a873f8 0x78cee8aa40

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	static void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0xb5cde8c 0x78ce3ac8e0
	static Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0xb5ce254 0x78ce3ac9c0
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0xb5cd7c0 0x78ce3a90e0
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0xb5cd8a8 0x78ce3a91c0
	static void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0xb5ce4b4 0x78ce3a92a0
	static void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0xb5cdfc8 0x78ce3a9380
	static bool IsValidAIRotation(Rotator Rotation);// 0xb5cdc88 0x78ce3a9460
	static bool IsValidAILocation(Vector Location);// 0xb5cdde0 0x78ce3a9540
	static bool IsValidAIDirection(Vector DirectionVector);// 0xb5cdd34 0x78ce3a9620
	static int GetNextNavLinkIndex(const Controller* Controller);// 0xb5cd988 0x78ce3a9700
	static Vector[] GetCurrentPathPoints(Controller* Controller);// 0xb5cdad8 0x78ce3a97e0
	static int GetCurrentPathIndex(const Controller* Controller);// 0xb5cda30 0x78ce3a98c0
	static NavigationPath* GetCurrentPath(Controller* Controller);// 0xb5cdbe0 0x78ce3a99a0
	static BlackboardComponent* GetBlackboard(Actor* Target);// 0xb5ce104 0x78ce3a9a80
	static AIController* GetAIController(Actor* ControlledActor);// 0xb5ce1ac 0x78ce3a9b60
	static AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0xb5ce634 0x78ce3a9c40

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8] 0x78ce3de080
	float FloatValue;//[Offset: 0x30, Size: 0x4] 0x78ce3de100
	int IntValue;//[Offset: 0x34, Size: 0x4] 0x78ce3de180
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78ce3de200

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4] 0x78ce3ddf00
	float Max;//[Offset: 0x40, Size: 0x4] 0x78ce3ddf80
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78ce3de000

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce3df780
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 0x10] 0x78ce9de7a0
	void UnregisterFromSense(class AISense SenseClass);// 0xb5d3ac4 0x78ce3abca0
	void UnregisterFromPerceptionSystem();// 0xb5d3b6c 0x78ce3abd80
	void RegisterWithPerceptionSystem();// 0xb5d3c28 0x78ce3abe60
	void RegisterForSense(class AISense SenseClass);// 0xb5d3b80 0x78ce3abf40

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8] 0x78ce9dfd80
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10] 0x78ce9dfe20
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10] 0x78ce9dfec0
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0x8a873f8 0x78ce3ab220
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x8a873f8 0x78ce3ab300
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x8a873f8 0x78ce3ab3e0
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x8a873f8 0x78ce3ab4c0
	void K2_OnNewPawn(Pawn* NewPawn);// 0x8a873f8 0x78ce3ab5a0
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0xb5d8284 0x78ce3ab680
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0xb5d8344 0x78ce3ab760

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78ce9dfce0
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0xb5d8e9c 0x78ce3ab140

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4] 0x78cf160100
	Vector Location;//[Offset: 0x4, Size: 0xc] 0x78cf160180
	Vector HitLocation;//[Offset: 0x10, Size: 0xc] 0x78cf160200
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8] 0x78cf160280
	Actor* Instigator;//[Offset: 0x28, Size: 0x8] 0x78cf160300

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10] 0x78ce9dfc40
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4] 0x78ce3df980
	static void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0xb5d96c8 0x78ce3ab060

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc] 0x78cf161f80
	float Loudness;//[Offset: 0x10, Size: 0x4] 0x78cf162000
	float MaxRange;//[Offset: 0x14, Size: 0x4] 0x78cf162080
	Actor* Instigator;//[Offset: 0x18, Size: 0x8] 0x78cf162100
	FName Tag;//[Offset: 0x20, Size: 0x8] 0x78cf160080

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78ce9dfba0
	static void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0xb5d9f1c 0x78ce3aaea0
	static void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0xb5da048 0x78ce3aaf80

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8] 0x78cf161e80
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8] 0x78cf161f00

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4] 0x78ce3e0b80
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4] 0x78ce3e0c00
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8] 0x78ce3e0c80
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4] 0x78ce3e0d00
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4] 0x78ce3e0d80
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4] 0x78ce3e0e00

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78ce9dfb00

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x28, Size: 0x8] 0x78cf161c80
	Actor* Enemy;//[Offset: 0x30, Size: 0x8] 0x78cf161d00

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78ce9dfa60

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x10, Size: 0x8] 0x78cf161b80
	Actor* OtherActor;//[Offset: 0x18, Size: 0x8] 0x78cf161c00

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8] 0x78ce9df9c0

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8] 0x78ce9df920

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8] 0x78ce9df880
	float HearingRange;//[Offset: 0x50, Size: 0x4] 0x78ce3e0700
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4] 0x78ce3e0780
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78ce3e0800
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x78ce3e0880

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78cf160380
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78cf160400
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78cf160480

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8] 0x78ce9df7e0
	float SightRadius;//[Offset: 0x50, Size: 0x4] 0x78ce3e0380
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4] 0x78ce3e0400
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4] 0x78ce3e0480
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x78ce3e0500
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4] 0x78ce3e0580
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 0x4] 0x78ce3e0600
	float NearClippingRadius;//[Offset: 0x68, Size: 0x4] 0x78ce3e0680

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x30] 0x78ce3e0300

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x30] 0x78ce3e0280

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8] 0x78ce3e1900

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10] 0x78ce3e1200
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10] 0x78ce3e1280
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x40] 0x78ce3e1300
	static AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, byte ProjectGoalOnNavigation);// 0xb5df514 0x78ce3ae5c0

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8] 0x78cf161a80

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	static AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0xb5dfdec 0x78ce3ae4e0

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardAssetProvider.Interface.Object
	BlackboardData* GetBlackboardAsset();// 0xb5e6eb4 0x78ce3add00

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x78ce3f0e20

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8] 0x78ce3e4b00
	FString enumName;//[Offset: 0x38, Size: 0x10] 0x78ce3e4b80
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78ce3e4c00

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString enumName;//[Offset: 0x30, Size: 0x10] 0x78ce3e4a00
	Enum* EnumType;//[Offset: 0x40, Size: 0x8] 0x78ce3e4a80

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x78ce3f0d80

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10] 0x78ce3e4980

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x8c, Size: 0x1] 0x78ce3e4600

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28] 0x78ce3e4480

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10] 0x78cf08ace0
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8] 0x78cf161800
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8] 0x78cf08ad80
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1] 0x78cf161880
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x78cf161900

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4] 0x78ce3e6280
	float FloatValue;//[Offset: 0x8c, Size: 0x4] 0x78ce3e6300
	FString StringValue;//[Offset: 0x90, Size: 0x10] 0x78ce3e4280
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10] 0x78ce3e4300
	byte OperationType;//[Offset: 0xb0, Size: 0x1] 0x78ce3e4380
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1] 0x78ce3e4400

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8] 0x78ce3e7380
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8] 0x78ce3e5300
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10] 0x78ce3f0ba0
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78ce3e5400
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x78ce3e5480
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x78ce3e5500
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78ce3af120
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x8a873f8 0x78ce3af200
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce3af2e0
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x8a873f8 0x78ce3af3c0
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce3af4a0
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x8a873f8 0x78ce3af580
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce3af660
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x8a873f8 0x78ce3af740
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x8a873f8 0x78ce3af820
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x8a873f8 0x78ce3af900
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce3af9e0
	bool PerformConditionCheck(Actor* OwnerActor);// 0x8a873f8 0x78ce3afac0
	bool IsDecoratorObserverActive();// 0xb5eed7c 0x78ce3afba0
	bool IsDecoratorExecutionActive();// 0xb5eedb4 0x78ce3afc80

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28] 0x78ce3e7180
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1] 0x78ce3f0b00
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20] 0x78ce3e7280
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10] 0x78ce3e7300

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x5a, Size: 0x1] 0x78ce3e7000
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x78ce3e7080
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x78ce3e7100

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x78ce3e6e00
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x78ce3e6e80
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28] 0x78ce3e6f00
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28] 0x78ce3e6f80

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CoolDownTime;//[Offset: 0x5c, Size: 0x4] 0x78ce3e6d80

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x78ce3e6b80
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x78ce3e6c00
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce3e6c80
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1] 0x78ce3e6d00
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x78ce3f0a60

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4] 0x78ce3e6880
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38] 0x78ce3e6900
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1] 0x78ce3f09c0
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x78ce3e6a00
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x78ce3e6a80
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x78ce3e6b00

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8] 0x78ce3f0920

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x78ce3e6600
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x78ce3e6680
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28] 0x78ce3e6700
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78ce3e6780
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78ce3e6800

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x5c, Size: 0x4] 0x78ce3e6480
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78ce3e6500
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4] 0x78ce3e6580

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x78ce3e8400
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x78ce3e6380
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78ce3e6400

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x78ce3e8200
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x78ce3e8280
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78ce3e8300
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x78ce3e8380

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x5c, Size: 0x4] 0x78ce3e8180

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	static void StopUsingExternalEvent(BTNode* NodeOwner);// 0xb5f69cc 0x78ce400f60
	static void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0xb5f6a64 0x78ce401040
	static void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0xb5f6ea8 0x78ce401120
	static void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0xb5f714c 0x78ce401200
	static void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0xb5f6c4c 0x78ce4012e0
	static void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0xb5f79a8 0x78ce4013c0
	static void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0xb5f6ffc 0x78ce4014a0
	static void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0xb5f75b0 0x78ce401580
	static void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0xb5f745c 0x78ce401660
	static void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0xb5f7704 0x78ce401740
	static void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0xb5f7858 0x78ce401820
	static void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0xb5f7300 0x78ce401900
	static BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0xb5f87f8 0x78ce4019e0
	static BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0xb5f8750 0x78ce401ac0
	static Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f7c14 0x78ce401ba0
	static FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f7e48 0x78ce401c80
	static Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f7af8 0x78ce3ae780
	static Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f8638 0x78ce3ae860
	static FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f7d30 0x78ce3ae940
	static int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f81d8 0x78ce3aea20
	static float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f80c0 0x78ce3aeb00
	static byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f82f0 0x78ce3aebe0
	static class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f8408 0x78ce3aecc0
	static bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f7fa4 0x78ce3aeda0
	static Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f8520 0x78ce3aee80
	static void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f6da0 0x78ce3aef60
	static void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0xb5f6b44 0x78ce3af040

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28] 0x78ce3e9c00

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8] 0x78ce3eb380
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8] 0x78ce3eb400
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x78ce3eb480
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x78ce3eb500
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78ce400780
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x8a873f8 0x78ce400860
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce400940
	void ReceiveSearchStart(Actor* OwnerActor);// 0x8a873f8 0x78ce400a20
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce400b00
	void ReceiveDeactivation(Actor* OwnerActor);// 0x8a873f8 0x78ce400be0
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce400cc0
	void ReceiveActivation(Actor* OwnerActor);// 0x8a873f8 0x78ce400da0
	bool IsServiceActive();// 0xb5f9f70 0x78ce400e80

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x90, Size: 0x1] 0x78ce3eb300

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48] 0x78ce3eb280

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8] 0x78cf162780
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10] 0x78cf08a9c0
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28] 0x78cf162a80
	byte RunMode;//[Offset: 0x40, Size: 0x1] 0x78cf162b00
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78cf162b80

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78cf162800
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x78cf08a920
	float Value;//[Offset: 0xc, Size: 0x4] 0x78cf162900
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28] 0x78cf162980

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28] 0x78ce3eb100

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8] 0x78ce3ea680
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8] 0x78ce3ea700
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8] 0x78ce3ea780
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78ce3ea800
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0xb5fb604 0x78ce4036c0
	void SetFinishOnMessage(FName MessageName);// 0xb5fb6f8 0x78ce4037a0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78ce403880
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x8a873f8 0x78ce403960
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce400080
	void ReceiveExecute(Actor* OwnerActor);// 0x8a873f8 0x78ce400160
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78ce400240
	void ReceiveAbort(Actor* OwnerActor);// 0x8a873f8 0x78ce400320
	bool IsTaskExecuting();// 0xb5fb5cc 0x78ce400400
	bool IsTaskAborting();// 0xb5fb594 0x78ce4004e0
	void FinishExecute(bool bSuccess);// 0xb5fb7b4 0x78ce4005c0
	void FinishAbort();// 0xb5fb7a0 0x78ce4006a0

--------------------------------
Class: IntervalCountdown
	float Interval;//[Offset: 0x0, Size: 0x4] 0x78cf161b00

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object
	byte Result;//[Offset: 0x69, Size: 0x1] 0x78ce3ea600

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78ce3ea580

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4] 0x78ce3ec600

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4] 0x78ce3ec080
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8] 0x78ce3f06a0
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4] 0x78ce3ec100
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78ce3ec180
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78ce3ec200
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x78ce3ec280
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1] 0x78ce3ec300
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1] 0x78ce3ec380
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1] 0x78ce3ec400
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1] 0x78ce3ec480
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1] 0x78ce3ec500
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1] 0x78ce3ec580

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1] 0x78ce3ebf00
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1] 0x78ce3ebf80
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1] 0x78ce3ec000

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8] 0x78ce3ebc80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78ce3ebd00
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78ce3ebd80
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8] 0x78ce3ebe00
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8] 0x78ce3ebe80

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8] 0x78ce3ebc00

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x70, Size: 0x8] 0x78ce3ebb80

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x98, Size: 0x4] 0x78ce3ebb00

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8] 0x78ce3eba80

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8] 0x78ce3eb900
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8] 0x78ce3eb980
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8] 0x78ce3eba00

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8] 0x78ce3ed680
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10] 0x78ce3f0560
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10] 0x78ce3f0600
	byte RunMode;//[Offset: 0xc0, Size: 0x1] 0x78ce3eb700
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28] 0x78ce3eb780
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78ce3eb800
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48] 0x78ce3eb880

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x78cf163880
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x78cf08a560
	float Value;//[Offset: 0xc, Size: 0x4] 0x78cf163980

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8] 0x78ce3ed500
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78ce3ed580
	float CooldownDuration;//[Offset: 0x78, Size: 0x4] 0x78ce3ed600

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4] 0x78ce3ed400
	float RandomDeviation;//[Offset: 0x70, Size: 0x4] 0x78ce3ed480

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28] 0x78ce3ed380

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x268, Size: 0xc] 0x78ce3ece00
	void SuspendCrowdSteering(bool bSuspend);// 0xb6026dc 0x78ce403260

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	NavigationData* MyNavData;//[Offset: 0x28, Size: 0x8] 0x78ce3ec800
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x30, Size: 0x10] 0x78ce3f0420
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x40, Size: 0x10] 0x78ce3f04c0
	int MaxAgents;//[Offset: 0x50, Size: 0x4] 0x78ce3ec980
	float MaxAgentRadius;//[Offset: 0x54, Size: 0x4] 0x78ce3eca00
	int MaxAvoidedAgents;//[Offset: 0x58, Size: 0x4] 0x78ce3eca80
	int MaxAvoidedWalls;//[Offset: 0x5c, Size: 0x4] 0x78ce3ecb00
	float NavmeshCheckInterval;//[Offset: 0x60, Size: 0x4] 0x78ce3ecb80
	float PathOptimizationInterval;//[Offset: 0x64, Size: 0x4] 0x78ce3ecc00
	float SeparationDirClamp;//[Offset: 0x68, Size: 0x4] 0x78ce3ecc80
	float PathOffsetRadiusMultiplier;//[Offset: 0x6c, Size: 0x4] 0x78ce3ecd00
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 0x1] 0x78ce3ecd80

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4] 0x78cf162e00
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4] 0x78cf162e80
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4] 0x78cf162f00
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4] 0x78cf162f80
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4] 0x78cf163000
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4] 0x78cf163080
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1] 0x78cf163100
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1] 0x78cf163180
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1] 0x78cf161100
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1] 0x78cf161180

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0x10] 0x78cf08aa60
	float[] Radii;//[Offset: 0x10, Size: 0x10] 0x78cf08ab00

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0x8a873f8 0x78ce402ee0
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0x8a873f8 0x78ce402fc0
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0x8a873f8 0x78ce4030a0
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0x8a873f8 0x78ce403180

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8] 0x78ce3f0060
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x38] 0x78ce3edf80
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x90, Size: 0x38] 0x78ce3ee000
	class EnvQueryContext* SearchCenter;//[Offset: 0xc8, Size: 0x8] 0x78ce3f0100

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18] 0x78ce3edd00
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8] 0x78ce3f27c0
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8] 0x78ce3f2860
	Object* GetQuerier();// 0xb605784 0x78ce402b60
	void DoItemGeneration(out const Vector[] ContextLocations);// 0x8a873f8 0x78ce402c40
	void AddGeneratedVector(Vector GeneratedVector);// 0xb605860 0x78ce402d20
	void AddGeneratedActor(Actor* GeneratedActor);// 0xb6057b8 0x78ce402e00

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10] 0x78ce3f2680
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78ce3edc00
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78ce3edc80
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8] 0x78ce3f2720

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x30] 0x78ce3edb00

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4] 0x78cf163a80
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8] 0x78cf08a7e0
	float ProjectDown;//[Offset: 0x10, Size: 0x4] 0x78cf163b00
	float ProjectUp;//[Offset: 0x14, Size: 0x4] 0x78cf163b80
	float ExtentX;//[Offset: 0x18, Size: 0x4] 0x78cf163c00
	float ExtentY;//[Offset: 0x1c, Size: 0x4] 0x78cf163c80
	float ExtentZ;//[Offset: 0x20, Size: 0x4] 0x78cf163d00
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4] 0x78cf163d80
	byte TraceChannel;//[Offset: 0x28, Size: 0x1] 0x78cf163e00
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1] 0x78cf163e80
	byte TraceShape;//[Offset: 0x2a, Size: 0x1] 0x78cf163f00
	byte TraceMode;//[Offset: 0x2b, Size: 0x1] 0x78cf163f80
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78cf164000
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x78cf164080
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x78cf164100
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1] 0x78cf164180
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1] 0x78cf164200
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1] 0x78cf162180

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x80, Size: 0x38] 0x78ce3ed880
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xb8, Size: 0x38] 0x78ce3ed900
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf0, Size: 0x38] 0x78ce3ed980
	AIDataProviderFloatValue Range;//[Offset: 0x128, Size: 0x38] 0x78ce3eda00
	class EnvQueryContext* CenterActor;//[Offset: 0x160, Size: 0x8] 0x78ce3f25e0
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1] 0x78ce3eda80

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8] 0x78ce3f2540

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x80, Size: 0x38] 0x78ce3ef580
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xb8, Size: 0x38] 0x78ce3ef600
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xf0, Size: 0x38] 0x78ce3ef680
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x128, Size: 0x38] 0x78ce3ef700
	EnvDirection ArcDirection;//[Offset: 0x160, Size: 0x20] 0x78ce3ef780
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x180, Size: 0x38] 0x78ce3ed700
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1] 0x78ce3ed780
	class EnvQueryContext* Center;//[Offset: 0x1c0, Size: 0x8] 0x78ce3f24a0
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1] 0x78ce3ed800

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x30, Size: 0x4] 0x78cf160680

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8] 0x78cf08a600
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8] 0x78cf08a6a0
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8] 0x78cf08a740
	byte DirMode;//[Offset: 0x18, Size: 0x1] 0x78cf163a00

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x80, Size: 0x38] 0x78ce3ef000
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x78ce3ef080
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf0, Size: 0x38] 0x78ce3ef100
	enum PointOnCircleSpacingMethod;//[Offset: 0x128, Size: 0x1] 0x78ce3f2360
	EnvDirection ArcDirection;//[Offset: 0x130, Size: 0x20] 0x78ce3ef200
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x150, Size: 0x38] 0x78ce3ef280
	float AngleRadians;//[Offset: 0x188, Size: 0x4] 0x78ce3ef300
	class EnvQueryContext* CircleCenter;//[Offset: 0x190, Size: 0x8] 0x78ce3f2400
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1] 0x78ce3ef380
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a0, Size: 0x38] 0x78ce3ef400
	EnvTraceData TraceData;//[Offset: 0x1d8, Size: 0x30] 0x78ce3ef480
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78ce3ef500

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x80, Size: 0x38] 0x78ce3eef00
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x78ce3eef80
	class EnvQueryContext* GenerateAround;//[Offset: 0xf0, Size: 0x8] 0x78ce3f22c0

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0xf8, Size: 0x38] 0x78ce3eee00
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x130, Size: 0x8] 0x78ce3f2220
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x138, Size: 0x38] 0x78ce3eee80

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x78ce410e80
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8] 0x78ce3f1dc0

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20] 0x78ce410c80
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20] 0x78ce410d00
	enum TestMode;//[Offset: 0x238, Size: 0x1] 0x78ce3f1d20
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78ce410e00

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1f8, Size: 0x48] 0x78ce410a80
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78ce410b00
	enum TagsToMatch;//[Offset: 0x241, Size: 0x1] 0x78ce3f1c80
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 0x20] 0x78ce410c00

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x1f4, Size: 0x1c] 0x78ce410a00

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4] 0x78cf162200
	float ExtentY;//[Offset: 0x4, Size: 0x4] 0x78cf162280
	float ExtentZ;//[Offset: 0x8, Size: 0x4] 0x78cf162300
	Vector ShapeOffset;//[Offset: 0xc, Size: 0xc] 0x78cf162380
	byte OverlapChannel;//[Offset: 0x18, Size: 0x1] 0x78cf162400
	byte OverlapShape;//[Offset: 0x19, Size: 0x1] 0x78cf162480
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1] 0x78cf162500
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1] 0x78cf162580
	bool bSkipOverlapQuerier;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 0x1] 0x78cf162600

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x78ce410880
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x78ce3f1b40
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38] 0x78ce410900
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38] 0x78ce410980
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8] 0x78ce3f1be0

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x278, Size: 0x38] 0x78ce410800

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x1f8, Size: 0x30] 0x78ce410780

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x30] 0x78ce410580
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x228, Size: 0x38] 0x78ce410600
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x260, Size: 0x38] 0x78ce410680
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x298, Size: 0x38] 0x78ce410700
	class EnvQueryContext* Context;//[Offset: 0x2d0, Size: 0x8] 0x78ce3f1aa0

--------------------------------
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* VolumeContext;//[Offset: 0x1f8, Size: 0x8] 0x78ce3f1960
	class Volume* VolumeClass;//[Offset: 0x200, Size: 0x8] 0x78ce3f1a00
	bool bDoComplexVolumeTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78ce410500

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x4c0, Size: 0x8] 0x78ce411f80
	EnvNamedValue[] QueryParams;//[Offset: 0x4c8, Size: 0x10] 0x78ce3f1780
	AIDynamicParam[] QueryConfig;//[Offset: 0x4d8, Size: 0x10] 0x78ce3f1820
	float TimeLimitPerStep;//[Offset: 0x4e8, Size: 0x4] 0x78ce412100
	int StepToDebugDraw;//[Offset: 0x4ec, Size: 0x4] 0x78ce410080
	enum HighlightMode;//[Offset: 0x4f0, Size: 0x1] 0x78ce3f18c0
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f1, Size: 0x1] 0x78ce410180
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f1, Size: 0x1] 0x78ce410200
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f1, Size: 0x1] 0x78ce410280
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f1, Size: 0x1] 0x78ce410300
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4f1, Size: 0x1] 0x78ce410380
	byte QueryingMode;//[Offset: 0x4f2, Size: 0x1] 0x78ce410400
	NavAgentProperties NavAgentProperties;//[Offset: 0x4f8, Size: 0x30] 0x78ce410480

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x250, Size: 0x8] 0x78ce411f00

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x230, Size: 0x10] 0x78ce3f1640
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x240, Size: 0x10] 0x78ce3f16e0
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x250, Size: 0x8] 0x78ce411a80
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x78ce411b00
	delegate OnSmartLinkReached;//[Offset: 0x260, Size: 0x10] 0x78ce411b80
	void SetSmartLinkEnabled(bool bEnabled);// 0xb618cc8 0x78ce402620
	void ResumePathFollowing(Actor* Agent);// 0xb618db0 0x78ce402700
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x8a873f8 0x78ce4027e0
	bool IsSmartLinkEnabled();// 0xb618d78 0x78ce4028c0
	bool HasMovingAgents();// 0xb618c90 0x78ce4029a0

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78ce4052c0
	void ActionStart(Pawn* ControlledPawn);// 0x8a873f8 0x78ce4053a0
	void ActionResume(Pawn* ControlledPawn);// 0x8a873f8 0x78ce405480
	void ActionPause(Pawn* ControlledPawn);// 0x8a873f8 0x78ce405560
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0x8a873f8 0x78ce405640

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x98, Size: 0x8] 0x78ce413900
	Vector GoalLocation;//[Offset: 0xa0, Size: 0xc] 0x78ce413980
	float AcceptableRadius;//[Offset: 0xac, Size: 0x4] 0x78ce413a00
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb0, Size: 0x8] 0x78ce3f3d00
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x78ce413a80
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x78ce413b00
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x78ce413b80
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x78ce413c00
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x78ce413c80
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x78ce413d00
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x78ce413d80

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x98, Size: 0x8] 0x78ce413780
	PawnAction* RecentActionCopy;//[Offset: 0xa0, Size: 0x8] 0x78ce413800
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x78ce413880

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x98, Size: 0x10] 0x78ce3f3c60
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x78ce413680
	PawnAction* RecentActionCopy;//[Offset: 0xb0, Size: 0x8] 0x78ce413700

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x94, Size: 0x4] 0x78ce413580

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xb0, Size: 0x4] 0x78cee9ec80
	float LOSHearingThreshold;//[Offset: 0xb4, Size: 0x4] 0x78cee9ed00
	float SightRadius;//[Offset: 0xb8, Size: 0x4] 0x78cee9ed80
	float SensingInterval;//[Offset: 0xbc, Size: 0x4] 0x78cee9ee00
	float HearingMaxSoundAge;//[Offset: 0xc0, Size: 0x4] 0x78cee9ee80
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x78cee9ef00
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x78cee9ef80
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1] 0x78cee9f000
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1] 0x78cee9f080
	delegate OnSeePawn;//[Offset: 0xd0, Size: 0x10] 0x78cee9f100
	delegate OnHearNoise;//[Offset: 0xe0, Size: 0x10] 0x78cee9f180
	float PeripheralVisionAngle;//[Offset: 0xf0, Size: 0x4] 0x78cee9f200
	float PeripheralVisionCosine;//[Offset: 0xf4, Size: 0x4] 0x78cee9f280
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0xb61e3d4 0x78cee897e0
	void SetSensingInterval(const float NewSensingInterval);// 0xb61e48c 0x78cee898c0
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0xb61e324 0x78cee899a0
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0x8a873f8 0x78cee89a80
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0x8a873f8 0x78cee89b60
	float GetPeripheralVisionCosine();// 0xb61e2ec 0x78cee89c40
	float GetPeripheralVisionAngle();// 0xb61e308 0x78cee89d20

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
Class: AppleComponent.ActorComponent.Object
	delegate applePurchaseRes;//[Offset: 0xb0, Size: 0x10] 0x78ce414800
	delegate applePurchaseUserRes;//[Offset: 0xc0, Size: 0x10] 0x78ce414880
	delegate OnAppleLoginDelegate;//[Offset: 0xd0, Size: 0x10] 0x78ce414900
	void AppleLoginUI();// 0xb62e0cc 0x78ce404ae0

--------------------------------
Class: AppleFunctions.Object
	delegate OnPurchaseSuccess;//[Offset: 0x28, Size: 0x10] 0x78ce414400
	static void SetRechargeUserId(FString UserId);// 0xb62e650 0x78ce4045a0
	static void SaveIOSInfo(FString ProductId, FString UserId);// 0xb62e944 0x78ce404680
	static void IOSRecharge();// 0xb62e63c 0x78ce404760
	static void GetIOSInfo(FString ProductId, out FString UserId);// 0xb62e83c 0x78ce404840
	static void DeleteIOSInfo(FString ProductId);// 0xb62e798 0x78ce404920
	static void CheckCanPurchase(FString ProductId);// 0xb62e6f4 0x78ce404a00

--------------------------------
Class: ChaosDebugDrawComponent.ActorComponent.Object

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1c8, Size: 0x50] 0x78cee158c0
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x218, Size: 0x50] 0x78cee15980

--------------------------------
Class: ChaosHandlerSet
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50] 0x78cf08ce00

--------------------------------
Class: BreakEventCallbackWrapper

--------------------------------
Class: ChaosNotifyHandlerInterface.Interface.Object

--------------------------------
Class: ChaosSolverEngineBlueprintLibrary.BlueprintFunctionLibrary.Object
	static HitResult ConvertPhysicsCollisionToHitResult(out const ChaosPhysicsCollisionInfo PhysicsCollision);// 0xb66bc2c 0x78ce4044c0

--------------------------------
Class: ChaosPhysicsCollisionInfo
	PrimitiveComponent* Component;//[Offset: 0x0, Size: 0x8] 0x78cee9fd80
	PrimitiveComponent* OtherComponent;//[Offset: 0x8, Size: 0x8] 0x78cee9fe00
	Vector Location;//[Offset: 0x10, Size: 0xc] 0x78cee9fe80
	Vector Normal;//[Offset: 0x1c, Size: 0xc] 0x78cee9ff00
	Vector AccumulatedImpulse;//[Offset: 0x28, Size: 0xc] 0x78cee9ff80
	Vector Velocity;//[Offset: 0x34, Size: 0xc] 0x78cee9e780
	Vector OtherVelocity;//[Offset: 0x40, Size: 0xc] 0x78cee9e800
	Vector AngularVelocity;//[Offset: 0x4c, Size: 0xc] 0x78cee9e880
	Vector OtherAngularVelocity;//[Offset: 0x58, Size: 0xc] 0x78cee9e900
	float Mass;//[Offset: 0x64, Size: 0x4] 0x78cee9ea00
	float OtherMass;//[Offset: 0x68, Size: 0x4] 0x78cee9e980

--------------------------------
Class: ChaosSolver.Object

--------------------------------
Class: ChaosSolverActor.Actor.Object
	ChaosSolverConfiguration Properties;//[Offset: 0x220, Size: 0x68] 0x78ce415780
	float TimeStepMultiplier;//[Offset: 0x288, Size: 0x4] 0x78ce415800
	int CollisionIterations;//[Offset: 0x28c, Size: 0x4] 0x78ce415880
	int PushOutIterations;//[Offset: 0x290, Size: 0x4] 0x78ce415900
	int PushOutPairIterations;//[Offset: 0x294, Size: 0x4] 0x78ce415980
	float ClusterConnectionFactor;//[Offset: 0x298, Size: 0x4] 0x78ce415a00
	enum ClusterUnionConnectionType;//[Offset: 0x29c, Size: 0x1] 0x78ce3f3a80
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1] 0x78ce415b00
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2a0, Size: 0x10] 0x78ce415b80
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78ce415c00
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x2b4, Size: 0x10] 0x78ce415c80
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1] 0x78ce415d00
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x2c8, Size: 0x10] 0x78ce415d80
	float MassScale;//[Offset: 0x2d8, Size: 0x4] 0x78ce415e00
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78ce415e80
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1] 0x78ce415f00
	float FloorHeight;//[Offset: 0x2e0, Size: 0x4] 0x78ce415f80
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x2e4, Size: 0x3] 0x78ce416000
	BillboardComponent* SpriteComponent;//[Offset: 0x2e8, Size: 0x8] 0x78ce416080
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x308, Size: 0x8] 0x78ce416100
	void SetSolverActive(bool bActive);// 0xb66c814 0x78ce404300
	void SetAsCurrentWorldSolver();// 0xb66c8cc 0x78ce4043e0

--------------------------------
Class: ChaosDebugSubstepControl
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf163500
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cf163580
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cf163600

--------------------------------
Class: ChaosSolverSettings.DeveloperSettings.Object
	SoftClassPath DefaultChaosSolverActorClass;//[Offset: 0x40, Size: 0x18] 0x78ce415700

--------------------------------
Class: FieldSystemActor.Actor.Object
	FieldSystemComponent* FieldSystemComponent;//[Offset: 0x220, Size: 0x8] 0x78ce415680

--------------------------------
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FieldSystem* FieldSystem;//[Offset: 0x440, Size: 0x8] 0x78ce416700
	ChaosSolverActor*[] SupportedSolvers;//[Offset: 0x458, Size: 0x10] 0x78ce3f39e0
	void ResetFieldSystem();// 0xb6758d8 0x78ce403b20
	void ApplyUniformVectorFalloffForce(bool Enabled, Vector Position, Vector Direction, float Radius, float Magnitude);// 0xb675c4c 0x78ce403c00
	void ApplyStrainField(bool Enabled, Vector Position, float Radius, float Magnitude, int Iterations);// 0xb675a70 0x78ce403ce0
	void ApplyStayDynamicField(bool Enabled, Vector Position, float Radius);// 0xb6760fc 0x78ce403dc0
	void ApplyRadialVectorFalloffForce(bool Enabled, Vector Position, float Radius, float Magnitude);// 0xb675e24 0x78ce403ea0
	void ApplyRadialForce(bool Enabled, Vector Position, float Magnitude);// 0xb675fb4 0x78ce403f80
	void ApplyPhysicsField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xb6758ec 0x78ce404060
	void ApplyLinearForce(bool Enabled, Vector Direction, float Magnitude);// 0xb676244 0x78ce404140
	void AddFieldCommand(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xb675754 0x78ce404220

--------------------------------
Class: FieldSystem.Object

--------------------------------
Class: FieldSystemMetaData.ActorComponent.Object

--------------------------------
Class: FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldSystemMetaDataIteration.FieldSystemMetaData.ActorComponent.Object
	int Iterations;//[Offset: 0xb0, Size: 0x4] 0x78ce416580
	FieldSystemMetaDataIteration* SetMetaDataIteration(int Iterations);// 0xb676ed8 0x78ce403a40

--------------------------------
Class: FieldSystemMetaDataProcessingResolution.FieldSystemMetaData.ActorComponent.Object
	byte ResolutionType;//[Offset: 0xb0, Size: 0x1] 0x78ce416400
	FieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(byte ResolutionType);// 0xb67745c 0x78ce407320

--------------------------------
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: UniformInteger.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	int Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce418380
	UniformInteger* SetUniformInteger(int Magnitude);// 0xb678860 0x78ce407240

--------------------------------
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	float Radius;//[Offset: 0xb0, Size: 0x4] 0x78ce417e00
	Vector Position;//[Offset: 0xb4, Size: 0xc] 0x78ce417e80
	int InteriorValue;//[Offset: 0xc0, Size: 0x4] 0x78ce417f00
	int ExteriorValue;//[Offset: 0xc4, Size: 0x4] 0x78ce417f80
	byte SetMaskCondition;//[Offset: 0xc8, Size: 0x1] 0x78ce418000
	RadialIntMask* SetRadialIntMask(float Radius, Vector Position, int InteriorValue, int ExteriorValue, byte SetMaskConditionIn);// 0xb678dec 0x78ce407160

--------------------------------
Class: UniformScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce417c80
	UniformScalar* SetUniformScalar(float Magnitude);// 0xb6794ac 0x78ce407080

--------------------------------
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce417500
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x78ce417580
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x78ce417600
	float Default;//[Offset: 0xbc, Size: 0x4] 0x78ce417680
	float Radius;//[Offset: 0xc0, Size: 0x4] 0x78ce417700
	Vector Position;//[Offset: 0xc4, Size: 0xc] 0x78ce417780
	byte Falloff;//[Offset: 0xd0, Size: 0x1] 0x78ce417800
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, Vector Position, byte Falloff);// 0xb679a3c 0x78ce406fa0

--------------------------------
Class: PlaneFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce418d80
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x78ce418e00
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x78ce418e80
	float Default;//[Offset: 0xbc, Size: 0x4] 0x78ce418f00
	float Distance;//[Offset: 0xc0, Size: 0x4] 0x78ce418f80
	Vector Position;//[Offset: 0xc4, Size: 0xc] 0x78ce419000
	Vector Normal;//[Offset: 0xd0, Size: 0xc] 0x78ce419080
	byte Falloff;//[Offset: 0xdc, Size: 0x1] 0x78ce419100
	PlaneFalloff* SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, Vector Position, Vector Normal, byte Falloff);// 0xb67a1a4 0x78ce406ec0

--------------------------------
Class: BoxFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce418700
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x78ce418780
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x78ce418800
	float Default;//[Offset: 0xbc, Size: 0x4] 0x78ce418880
	Transform Transform;//[Offset: 0xc0, Size: 0x30] 0x78ce418900
	byte Falloff;//[Offset: 0xf0, Size: 0x1] 0x78ce418980
	BoxFalloff* SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, Transform Transform, byte Falloff);// 0xb67a968 0x78ce406de0

--------------------------------
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float MinRange;//[Offset: 0xb0, Size: 0x4] 0x78ce41a480
	float MaxRange;//[Offset: 0xb4, Size: 0x4] 0x78ce41a500
	Transform Transform;//[Offset: 0xc0, Size: 0x30] 0x78ce418480
	NoiseField* SetNoiseField(float MinRange, float MaxRange, Transform Transform);// 0xb67b0e8 0x78ce406d00

--------------------------------
Class: UniformVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce41a200
	Vector Direction;//[Offset: 0xb4, Size: 0xc] 0x78ce41a280
	UniformVector* SetUniformVector(float Magnitude, Vector Direction);// 0xb67b794 0x78ce406c20

--------------------------------
Class: RadialVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce419f80
	Vector Position;//[Offset: 0xb4, Size: 0xc] 0x78ce41a000
	RadialVector* SetRadialVector(float Magnitude, Vector Position);// 0xb67bd6c 0x78ce406b40

--------------------------------
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce419e00
	RandomVector* SetRandomVector(float Magnitude);// 0xb67c344 0x78ce406a60

--------------------------------
Class: OperatorField.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78ce419980
	FieldNodeBase* RightField;//[Offset: 0xb8, Size: 0x8] 0x78ce419a00
	FieldNodeBase* LeftField;//[Offset: 0xc0, Size: 0x8] 0x78ce419a80
	byte Operation;//[Offset: 0xc8, Size: 0x1] 0x78ce419b00
	OperatorField* SetOperatorField(float Magnitude, const FieldNodeBase* RightField, const FieldNodeBase* LeftField, byte Operation);// 0xb67c8d4 0x78ce406980

--------------------------------
Class: ToIntegerField.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	FieldNodeFloat* FloatField;//[Offset: 0xb0, Size: 0x8] 0x78ce419800
	ToIntegerField* SetToIntegerField(const FieldNodeFloat* FloatField);// 0xb67cf4c 0x78ce4068a0

--------------------------------
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	FieldNodeInt* IntField;//[Offset: 0xb0, Size: 0x8] 0x78ce419680
	ToFloatField* SetToFloatField(const FieldNodeInt* IntegerField);// 0xb67d4d8 0x78ce4067c0

--------------------------------
Class: CullingField.FieldNodeBase.ActorComponent.Object
	FieldNodeBase* Culling;//[Offset: 0xb0, Size: 0x8] 0x78ce41b400
	FieldNodeBase* Field;//[Offset: 0xb8, Size: 0x8] 0x78ce41b480
	byte Operation;//[Offset: 0xc0, Size: 0x1] 0x78ce41b500
	CullingField* SetCullingField(const FieldNodeBase* Culling, const FieldNodeBase* Field, byte Operation);// 0xb67da64 0x78ce4066e0

--------------------------------
Class: ReturnResultsTerminal.FieldNodeBase.ActorComponent.Object
	ReturnResultsTerminal* SetReturnResultsTerminal();// 0xb67e088 0x78ce406600

--------------------------------
Class: ChaosDestructionListener.SceneComponent.ActorComponent.Object
	bool bIsCollisionEventListeningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x78ce41a580
	bool bIsBreakingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x78ce41a600
	bool bIsTrailingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x78ce41a680
	ChaosCollisionEventRequestSettings CollisionEventRequestSettings;//[Offset: 0x1f4, Size: 0x18] 0x78ce41a700
	ChaosBreakingEventRequestSettings BreakingEventRequestSettings;//[Offset: 0x20c, Size: 0x18] 0x78ce41a780
	ChaosTrailingEventRequestSettings TrailingEventRequestSettings;//[Offset: 0x224, Size: 0x18] 0x78ce41a800
	<ChaosSolverActor*> ChaosSolverActors;//[Offset: 0x240, Size: 0x50] 0x78ce3f34e0
	<GeometryCollectionActor*> GeometryCollectionActors;//[Offset: 0x290, Size: 0x50] 0x78ce3f3580
	delegate OnCollisionEvents;//[Offset: 0x2e0, Size: 0x10] 0x78ce41a980
	delegate OnBreakingEvents;//[Offset: 0x2f0, Size: 0x10] 0x78ce41aa00
	delegate OnTrailingEvents;//[Offset: 0x300, Size: 0x10] 0x78ce41aa80
	void SortTrailingEvents(out ChaosTrailingEventData[] TrailingEvents, enum SortMethod);// 0xb6a8cb0 0x78ce4059c0
	void SortCollisionEvents(out ChaosCollisionEventData[] CollisionEvents, enum SortMethod);// 0xb6a8eb8 0x78ce405aa0
	void SortBreakingEvents(out ChaosBreakingEventData[] BreakingEvents, enum SortMethod);// 0xb6a8db4 0x78ce405b80
	void SetTrailingEventRequestSettings(out const ChaosTrailingEventRequestSettings InSettings);// 0xb6a9204 0x78ce405c60
	void SetTrailingEventEnabled(bool bIsEnabled);// 0xb6a8ff4 0x78ce405d40
	void SetCollisionEventRequestSettings(out const ChaosCollisionEventRequestSettings InSettings);// 0xb6a9384 0x78ce405e20
	void SetCollisionEventEnabled(bool bIsEnabled);// 0xb6a9154 0x78ce405f00
	void SetBreakingEventRequestSettings(out const ChaosBreakingEventRequestSettings InSettings);// 0xb6a92c4 0x78ce405fe0
	void SetBreakingEventEnabled(bool bIsEnabled);// 0xb6a90a4 0x78ce4060c0
	void RemoveGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0xb6a9444 0x78ce4061a0
	void RemoveChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0xb6a9594 0x78ce406280
	bool IsEventListening();// 0xb6a8fbc 0x78ce406360
	void AddGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0xb6a94ec 0x78ce406440
	void AddChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0xb6a963c 0x78ce406520

--------------------------------
Class: ChaosCollisionEventRequestSettings
	int MaxNumberResults;//[Offset: 0x0, Size: 0x4] 0x78cf165000
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78cf165080
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78cf165100
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x78cf165180
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x78cf165200
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x78cf08ccc0

--------------------------------
Class: ChaosBreakingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x78cf163200
	float MinRadius;//[Offset: 0x4, Size: 0x4] 0x78cf163280
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78cf163300
	float MinMass;//[Offset: 0xc, Size: 0x4] 0x78cf163380
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x78cf163400
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x78cf08cd60

--------------------------------
Class: ChaosTrailingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x78cf164d00
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x78cf164d80
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x78cf164e00
	float MinAngularSpeed;//[Offset: 0xc, Size: 0x4] 0x78cf164e80
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x78cf164f00
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x78cf08cc20

--------------------------------
Class: ChaosTrailingEventData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cef60d80
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x78cef60e00
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x78cef60e80
	float Mass;//[Offset: 0x24, Size: 0x4] 0x78cef60f00
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x78cef60f80

--------------------------------
Class: ChaosCollisionEventData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cee9f980
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x78cee9fa00
	Vector Velocity1;//[Offset: 0x18, Size: 0xc] 0x78cee9fa80
	Vector Velocity2;//[Offset: 0x24, Size: 0xc] 0x78cee9fb00
	float Mass1;//[Offset: 0x30, Size: 0x4] 0x78cee9fb80
	float Mass2;//[Offset: 0x34, Size: 0x4] 0x78cee9fc00
	Vector Impulse;//[Offset: 0x38, Size: 0xc] 0x78cee9fc80

--------------------------------
Class: ChaosBreakingEventData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cef61080
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x78cee9f800
	float Mass;//[Offset: 0x18, Size: 0x4] 0x78cee9f880

--------------------------------
Class: GeometryCollectionActor.Actor.Object
	GeometryCollectionComponent* GeometryCollectionComponent;//[Offset: 0x220, Size: 0x8] 0x78ce41c380
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent;//[Offset: 0x228, Size: 0x8] 0x78ce41c400
	bool RaycastSingle(Vector Start, Vector End, out HitResult OutHit);// 0xb6aad54 0x78ce4058e0

--------------------------------
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x470, Size: 0x8] 0x78cef80d00
	GeometryCollection* RestCollection;//[Offset: 0x558, Size: 0x8] 0x78cef80d80
	FieldSystemActor*[] InitializationFields;//[Offset: 0x560, Size: 0x10] 0x78cee54660
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1] 0x78cef80e80
	enum ObjectType;//[Offset: 0x578, Size: 0x1] 0x78cee54700
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1] 0x78cef80f80
	int ClusterGroupIndex;//[Offset: 0x57c, Size: 0x4] 0x78cef81000
	int MaxClusterLevel;//[Offset: 0x580, Size: 0x4] 0x78cef81080
	float[] DamageThreshold;//[Offset: 0x588, Size: 0x10] 0x78cee547a0
	enum ClusterConnectionType;//[Offset: 0x598, Size: 0x1] 0x78cee54840
	int CollisionGroup;//[Offset: 0x59c, Size: 0x4] 0x78cef6f900
	float CollisionSampleFraction;//[Offset: 0x5a0, Size: 0x4] 0x78cef6f980
	float LinearEtherDrag;//[Offset: 0x5a4, Size: 0x4] 0x78cef6fa00
	float AngularEtherDrag;//[Offset: 0x5a8, Size: 0x4] 0x78cef6fa80
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0x5b0, Size: 0x8] 0x78cef6fb00
	enum InitialVelocityType;//[Offset: 0x5b8, Size: 0x1] 0x78cee548e0
	Vector InitialLinearVelocity;//[Offset: 0x5bc, Size: 0xc] 0x78cef6fc00
	Vector InitialAngularVelocity;//[Offset: 0x5c8, Size: 0xc] 0x78cef6fc80
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x5d8, Size: 0x8] 0x78cef6fd00
	GeomComponentCacheParameters CacheParameters;//[Offset: 0x5e0, Size: 0x50] 0x78cef6ef00
	delegate NotifyGeometryCollectionPhysicsStateChange;//[Offset: 0x630, Size: 0x10] 0x78cef6ef80
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange;//[Offset: 0x640, Size: 0x10] 0x78cef6f000
	delegate OnChaosBreakEvent;//[Offset: 0x668, Size: 0x10] 0x78cef6f080
	float DesiredCacheTime;//[Offset: 0x678, Size: 0x4] 0x78cef6f100
	bool CachePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1] 0x78cef6f180
	delegate OnChaosPhysicsCollision;//[Offset: 0x680, Size: 0x10] 0x78cef6f200
	bool bNotifyBreaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1] 0x78cef6f280
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1] 0x78cef6f300
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x692, Size: 0x1] 0x78cef6f380
	bool bEnableAbandonAfterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x693, Size: 0x1] 0x78cef6f400
	int ReplicationAbandonClusterLevel;//[Offset: 0x694, Size: 0x4] 0x78cef6f480
	GeometryCollectionRepData RepData;//[Offset: 0x698, Size: 0x18] 0x78cef6f500
	BodySetup* DummyBodySetup;//[Offset: 0x8c0, Size: 0x8] 0x78cef6f580
	void SetNotifyBreaks(bool bNewNotifyBreaks);// 0xb6abe84 0x78cef736c0
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x8a873f8 0x78cef737a0
	void OnRep_RepData(out const GeometryCollectionRepData OldData);// 0xb6abdc0 0x78cef73880
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x8a873f8 0x78cef73960
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x8a873f8 0x78cef70080
	void NetAbandonCluster(int TransformIndex);// 0xb6abd10 0x78cef70160
	void ApplyPhysicsField(bool Enabled, enum Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xb6abf34 0x78cef70240
	void ApplyKinematicField(float Radius, Vector Position);// 0xb6ac0b8 0x78cef70320

--------------------------------
Class: GeometryCollectionRepData

--------------------------------
Class: GeomComponentCacheParameters
	enum CacheMode;//[Offset: 0x0, Size: 0x1] 0x78cee54980
	GeometryCollectionCache* TargetCache;//[Offset: 0x8, Size: 0x8] 0x78cef6fe00
	float ReverseCacheBeginTime;//[Offset: 0x10, Size: 0x4] 0x78cef6fe80
	bool SaveCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78cef6ff00
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x78cef6ff80
	int CollisionDataSizeMax;//[Offset: 0x18, Size: 0x4] 0x78cef6e780
	bool DoCollisionDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78cef6e800
	float CollisionDataSpatialHashRadius;//[Offset: 0x20, Size: 0x4] 0x78cef6e880
	int MaxCollisionPerCell;//[Offset: 0x24, Size: 0x4] 0x78cef6e900
	bool SaveBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cef6e980
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cef6ea00
	int BreakingDataSizeMax;//[Offset: 0x2c, Size: 0x4] 0x78cef6ea80
	bool DoBreakingDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78cef6eb00
	float BreakingDataSpatialHashRadius;//[Offset: 0x34, Size: 0x4] 0x78cef6eb80
	int MaxBreakingPerCell;//[Offset: 0x38, Size: 0x4] 0x78cef6ec00
	bool SaveTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78cef6ec80
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78cef6ed00
	int TrailingDataSizeMax;//[Offset: 0x40, Size: 0x4] 0x78cef6ed80
	float TrailingMinSpeedThreshold;//[Offset: 0x44, Size: 0x4] 0x78cef6ee00
	float TrailingMinVolumeThreshold;//[Offset: 0x48, Size: 0x4] 0x78cef6ee80

--------------------------------
Class: GeometryCollectionCache.Object
	RecordedTransformTrack RecordedData;//[Offset: 0x28, Size: 0x10] 0x78ce41c200
	GeometryCollection* SupportedCollection;//[Offset: 0x38, Size: 0x8] 0x78ce41c280
	Guid CompatibleCollectionState;//[Offset: 0x40, Size: 0x10] 0x78ce41c300

--------------------------------
Class: RecordedTransformTrack
	RecordedFrame[] records;//[Offset: 0x0, Size: 0x10] 0x78cefd6320

--------------------------------
Class: RecordedFrame
	Transform[] Transforms;//[Offset: 0x0, Size: 0x10] 0x78cefd5ec0
	int[] TransformIndices;//[Offset: 0x10, Size: 0x10] 0x78cefd5f60
	int[] PreviousTransformIndices;//[Offset: 0x20, Size: 0x10] 0x78cefd6000
	bool[] DisabledFlags;//[Offset: 0x30, Size: 0x10] 0x78cefd60a0
	SolverCollisionData[] Collisions;//[Offset: 0x40, Size: 0x10] 0x78cefd6140
	SolverBreakingData[] Breakings;//[Offset: 0x50, Size: 0x10] 0x78cefd61e0
	<SolverTrailingData> Trailings;//[Offset: 0x60, Size: 0x50] 0x78cefd6280
	float Timestamp;//[Offset: 0xb0, Size: 0x4] 0x78cefef180

--------------------------------
Class: SolverCollisionData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cefefc00
	Vector AccumulatedImpulse;//[Offset: 0xc, Size: 0xc] 0x78cefefc80
	Vector Normal;//[Offset: 0x18, Size: 0xc] 0x78cefefd00
	Vector Velocity1;//[Offset: 0x24, Size: 0xc] 0x78cefefd80
	Vector Velocity2;//[Offset: 0x30, Size: 0xc] 0x78cefefe00
	Vector AngularVelocity1;//[Offset: 0x3c, Size: 0xc] 0x78cefefe80
	Vector AngularVelocity2;//[Offset: 0x48, Size: 0xc] 0x78cefeff00
	float Mass1;//[Offset: 0x54, Size: 0x4] 0x78cefeff80
	float Mass2;//[Offset: 0x58, Size: 0x4] 0x78cefee780
	int ParticleIndex;//[Offset: 0x5c, Size: 0x4] 0x78cefee800
	int LevelsetIndex;//[Offset: 0x60, Size: 0x4] 0x78cefee880
	int ParticleIndexMesh;//[Offset: 0x64, Size: 0x4] 0x78cefee900
	int LevelsetIndexMesh;//[Offset: 0x68, Size: 0x4] 0x78cefee980

--------------------------------
Class: SolverBreakingData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cefeea80
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x78cefeeb00
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x78cefeeb80
	float Mass;//[Offset: 0x24, Size: 0x4] 0x78cefeec00
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x78cefeec80
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4] 0x78cefeed00

--------------------------------
Class: SolverTrailingData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78cefeee00
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x78cefeee80
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x78cefeef00
	float Mass;//[Offset: 0x24, Size: 0x4] 0x78cefeef80
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x78cefef000
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4] 0x78cefef080

--------------------------------
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor;//[Offset: 0xb0, Size: 0x8] 0x78ce41e480
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;//[Offset: 0xb8, Size: 0x8] 0x78ce41e500

--------------------------------
Class: GeometryCollectionDebugDrawActor.Actor.Object
	GeometryCollectionDebugDrawWarningMessage WarningMessage;//[Offset: 0x220, Size: 0x1] 0x78ce41e580
	GeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;//[Offset: 0x228, Size: 0x18] 0x78ce41e600
	bool bDebugDrawWholeCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78ce41e680
	bool bDebugDrawHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1] 0x78ce41e700
	bool bDebugDrawClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 0x1] 0x78ce41c680
	enum HideGeometry;//[Offset: 0x243, Size: 0x1] 0x78ce3f3440
	bool bShowRigidBodyId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1] 0x78ce41c780
	bool bShowRigidBodyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 0x1] 0x78ce41c800
	bool bCollisionAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 0x1] 0x78ce41c880
	bool bShowRigidBodyTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247, Size: 0x1] 0x78ce41c900
	bool bShowRigidBodyInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x78ce41c980
	bool bShowRigidBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1] 0x78ce41ca00
	bool bShowRigidBodyForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a, Size: 0x1] 0x78ce41ca80
	bool bShowRigidBodyInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1] 0x78ce41cb00
	bool bShowTransformIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x78ce41cb80
	bool bShowTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x78ce41cc00
	bool bShowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1] 0x78ce41cc80
	bool bShowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1] 0x78ce41cd00
	bool bShowConnectivityEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78ce41cd80
	bool bShowGeometryIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x78ce41ce00
	bool bShowGeometryTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1] 0x78ce41ce80
	bool bShowBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1] 0x78ce41cf00
	bool bShowFaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1] 0x78ce41cf80
	bool bShowFaceIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1] 0x78ce41d000
	bool bShowFaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1] 0x78ce41d080
	bool bShowSingleFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 0x1] 0x78ce41d100
	int SingleFaceIndex;//[Offset: 0x258, Size: 0x4] 0x78ce41d180
	bool bShowVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x78ce41d200
	bool bShowVertexIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1] 0x78ce41d280
	bool bShowVertexNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1] 0x78ce41d300
	bool bUseActiveVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 0x1] 0x78ce41d380
	float PointThickness;//[Offset: 0x260, Size: 0x4] 0x78ce41d400
	float LineThickness;//[Offset: 0x264, Size: 0x4] 0x78ce41d480
	bool bTextShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78ce41d500
	float TextScale;//[Offset: 0x26c, Size: 0x4] 0x78ce41d580
	float NormalScale;//[Offset: 0x270, Size: 0x4] 0x78ce41d600
	float AxisScale;//[Offset: 0x274, Size: 0x4] 0x78ce41d680
	float ArrowScale;//[Offset: 0x278, Size: 0x4] 0x78ce41b600
	Color RigidBodyIdColor;//[Offset: 0x27c, Size: 0x4] 0x78ce41b680
	float RigidBodyTransformScale;//[Offset: 0x280, Size: 0x4] 0x78ce41b700
	Color RigidBodyCollisionColor;//[Offset: 0x284, Size: 0x4] 0x78ce41b780
	Color RigidBodyInertiaColor;//[Offset: 0x288, Size: 0x4] 0x78ce41b800
	Color RigidBodyVelocityColor;//[Offset: 0x28c, Size: 0x4] 0x78ce41b880
	Color RigidBodyForceColor;//[Offset: 0x290, Size: 0x4] 0x78ce41b900
	Color RigidBodyInfoColor;//[Offset: 0x294, Size: 0x4] 0x78ce41b980
	Color TransformIndexColor;//[Offset: 0x298, Size: 0x4] 0x78ce41ba00
	float TransformScale;//[Offset: 0x29c, Size: 0x4] 0x78ce41ba80
	Color LevelColor;//[Offset: 0x2a0, Size: 0x4] 0x78ce41bb00
	Color ParentColor;//[Offset: 0x2a4, Size: 0x4] 0x78ce41bb80
	float ConnectivityEdgeThickness;//[Offset: 0x2a8, Size: 0x4] 0x78ce41bc00
	Color GeometryIndexColor;//[Offset: 0x2ac, Size: 0x4] 0x78ce41bc80
	float GeometryTransformScale;//[Offset: 0x2b0, Size: 0x4] 0x78ce41bd00
	Color BoundingBoxColor;//[Offset: 0x2b4, Size: 0x4] 0x78ce41bd80
	Color FaceColor;//[Offset: 0x2b8, Size: 0x4] 0x78ce41be00
	Color FaceIndexColor;//[Offset: 0x2bc, Size: 0x4] 0x78ce41be80
	Color FaceNormalColor;//[Offset: 0x2c0, Size: 0x4] 0x78ce41bf00
	Color SingleFaceColor;//[Offset: 0x2c4, Size: 0x4] 0x78ce41bf80
	Color VertexColor;//[Offset: 0x2c8, Size: 0x4] 0x78ce41c000
	Color VertexIndexColor;//[Offset: 0x2cc, Size: 0x4] 0x78ce41c080
	Color VertexNormalColor;//[Offset: 0x2d0, Size: 0x4] 0x78ce41c100
	BillboardComponent* SpriteComponent;//[Offset: 0x2d8, Size: 0x8] 0x78ce41c180

--------------------------------
Class: GeometryCollectionDebugDrawWarningMessage

--------------------------------
Class: GeometryCollectionDebugDrawActorSelectedRigidBody
	int ID;//[Offset: 0x0, Size: 0x4] 0x78cf164b80
	ChaosSolverActor* Solver;//[Offset: 0x8, Size: 0x8] 0x78cf164c00
	GeometryCollectionActor* GeometryCollection;//[Offset: 0x10, Size: 0x8] 0x78cf164c80

--------------------------------
Class: GeometryCollectionRenderLevelSetActor.Actor.Object
	VolumeTexture* TargetVolumeTexture;//[Offset: 0x220, Size: 0x8] 0x78ce41d780
	Material* RayMarchMaterial;//[Offset: 0x228, Size: 0x8] 0x78ce41d800
	float SurfaceTolerance;//[Offset: 0x230, Size: 0x4] 0x78ce41d880
	float Isovalue;//[Offset: 0x234, Size: 0x4] 0x78ce41d900
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78ce41d980
	bool RenderVolumeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78ce41da00

--------------------------------
Class: SkeletalMeshSimulationComponent.ActorComponent.Object
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xb8, Size: 0x8] 0x78ce41ee00
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0xc0, Size: 0x8] 0x78ce41ee80
	PhysicsAsset* OverridePhysicsAsset;//[Offset: 0xc8, Size: 0x8] 0x78ce41ef00
	bool bSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x78ce41ef80
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1] 0x78ce41f000
	enum ObjectType;//[Offset: 0xd2, Size: 0x1] 0x78ce3f2ea0
	float Density;//[Offset: 0xd4, Size: 0x4] 0x78ce41f100
	float MinMass;//[Offset: 0xd8, Size: 0x4] 0x78ce41f180
	float MaxMass;//[Offset: 0xdc, Size: 0x4] 0x78ce41f200
	enum CollisionType;//[Offset: 0xe0, Size: 0x1] 0x78ce3f2f40
	float ImplicitShapeParticlesPerUnitArea;//[Offset: 0xe4, Size: 0x4] 0x78ce41f300
	int ImplicitShapeMinNumParticles;//[Offset: 0xe8, Size: 0x4] 0x78ce41f380
	int ImplicitShapeMaxNumParticles;//[Offset: 0xec, Size: 0x4] 0x78ce41f400
	int MinLevelSetResolution;//[Offset: 0xf0, Size: 0x4] 0x78ce41f480
	int MaxLevelSetResolution;//[Offset: 0xf4, Size: 0x4] 0x78ce41f500
	int CollisionGroup;//[Offset: 0xf8, Size: 0x4] 0x78ce41f580
	enum InitialVelocityType;//[Offset: 0xfc, Size: 0x1] 0x78ce3f2fe0
	Vector InitialLinearVelocity;//[Offset: 0x100, Size: 0xc] 0x78ce41f680
	Vector InitialAngularVelocity;//[Offset: 0x10c, Size: 0xc] 0x78ce41f700
	delegate OnChaosPhysicsCollision;//[Offset: 0x118, Size: 0x10] 0x78ce41f780
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x8a873f8 0x78ce405800

--------------------------------
Class: StaticMeshSimulationComponent.ActorComponent.Object
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x78ce41fe00
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1] 0x78ce41fe80
	enum ObjectType;//[Offset: 0xba, Size: 0x1] 0x78ce3f2b80
	float Mass;//[Offset: 0xbc, Size: 0x4] 0x78ce41ff80
	enum CollisionType;//[Offset: 0xc0, Size: 0x1] 0x78ce3f2c20
	enum ImplicitType;//[Offset: 0xc1, Size: 0x1] 0x78ce3f2cc0
	int MinLevelSetResolution;//[Offset: 0xc4, Size: 0x4] 0x78ce41e880
	int MaxLevelSetResolution;//[Offset: 0xc8, Size: 0x4] 0x78ce41e900
	enum InitialVelocityType;//[Offset: 0xcc, Size: 0x1] 0x78ce3f2d60
	Vector InitialLinearVelocity;//[Offset: 0xd0, Size: 0xc] 0x78ce41ea00
	Vector InitialAngularVelocity;//[Offset: 0xdc, Size: 0xc] 0x78ce41ea80
	float DamageThreshold;//[Offset: 0xe8, Size: 0x4] 0x78ce41eb00
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xf0, Size: 0x8] 0x78ce41eb80
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0xf8, Size: 0x8] 0x78ce41ec00
	delegate OnChaosPhysicsCollision;//[Offset: 0x100, Size: 0x10] 0x78ce41ec80
	PrimitiveComponent*[] SimulatedComponents;//[Offset: 0x120, Size: 0x10] 0x78ce3f2e00
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x8a873f8 0x78ce409000
	void ForceRecreatePhysicsState();// 0xb6ae5b4 0x78ce405720

--------------------------------
Class: InputBehavior.Object

--------------------------------
Class: AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisAngleGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: InteractiveGizmo.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x30, Size: 0x8] 0x78ce41fd80

--------------------------------
Class: InputBehaviorSet.Object
	BehaviorInfo[] Behaviors;//[Offset: 0x28, Size: 0x10] 0x78ce3f29a0

--------------------------------
Class: BehaviorInfo
	InputBehavior* Behavior;//[Offset: 0x0, Size: 0x8] 0x78cf164480

--------------------------------
Class: AxisAngleGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78ce431000
	interface class None* AngleSource;//[Offset: 0x58, Size: 0x10] 0x78ce431080
	interface class None* hittarget;//[Offset: 0x68, Size: 0x10] 0x78ce41f800
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78ce41f880
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78ce41f900
	Vector RotationOrigin;//[Offset: 0x8c, Size: 0xc] 0x78ce41f980
	Vector RotationAxis;//[Offset: 0x98, Size: 0xc] 0x78ce41fa00
	Vector RotationPlaneX;//[Offset: 0xa4, Size: 0xc] 0x78ce41fa80
	Vector RotationPlaneY;//[Offset: 0xb0, Size: 0xc] 0x78ce41fb00
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x78ce41fb80
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x78ce41fc00
	float InteractionStartAngle;//[Offset: 0xd4, Size: 0x4] 0x78ce41fc80
	float InteractionCurAngle;//[Offset: 0xd8, Size: 0x4] 0x78ce41fd00

--------------------------------
Class: AxisPositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisPositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78ce430980
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x78ce430a00
	interface class None* hittarget;//[Offset: 0x68, Size: 0x10] 0x78ce430a80
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78ce430b00
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78ce430b80
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78ce430c00
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x78ce430c80
	Vector InteractionAxis;//[Offset: 0x98, Size: 0xc] 0x78ce430d00
	Vector InteractionStartPoint;//[Offset: 0xa4, Size: 0xc] 0x78ce430d80
	Vector InteractionCurPoint;//[Offset: 0xb0, Size: 0xc] 0x78ce430e00
	float InteractionStartParameter;//[Offset: 0xbc, Size: 0x4] 0x78ce430e80
	float InteractionCurParameter;//[Offset: 0xc0, Size: 0x4] 0x78ce430f00
	float ParameterSign;//[Offset: 0xc4, Size: 0x4] 0x78ce430f80

--------------------------------
Class: GizmoConstantAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78ce430880
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x78ce430900

--------------------------------
Class: GizmoConstantFrameAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78ce430680
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x78ce430700
	Vector TangentX;//[Offset: 0x48, Size: 0xc] 0x78ce430780
	Vector TangentY;//[Offset: 0x54, Size: 0xc] 0x78ce430800

--------------------------------
Class: GizmoWorldAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78ce430580
	int AxisIndex;//[Offset: 0x3c, Size: 0x4] 0x78ce430600

--------------------------------
Class: GizmoComponentAxisSource.Object
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8] 0x78ce430400
	int AxisIndex;//[Offset: 0x38, Size: 0x4] 0x78ce430480
	bool bLocalAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78ce430500

--------------------------------
Class: InteractiveToolPropertySet.Object
	InteractiveToolPropertySet* CachedProperties;//[Offset: 0x38, Size: 0x8] 0x78ce430300
	bool bIsPropertySetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78ce430380

--------------------------------
Class: BrushBaseProperties.InteractiveToolPropertySet.Object
	float BrushSize;//[Offset: 0x60, Size: 0x4] 0x78ce432080
	bool bSpecifyRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78ce432100
	float BrushRadius;//[Offset: 0x68, Size: 0x4] 0x78ce430080
	float BrushStrength;//[Offset: 0x6c, Size: 0x4] 0x78ce430100
	float BrushFalloffAmount;//[Offset: 0x70, Size: 0x4] 0x78ce430180
	bool bShowStrength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78ce430200
	bool bShowFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78ce430280

--------------------------------
Class: InteractiveTool.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x48, Size: 0x8] 0x78ce431f80
	Object*[] ToolPropertyObjects;//[Offset: 0x50, Size: 0x10] 0x78ce3f2ae0

--------------------------------
Class: SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: BaseBrushTool.MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object
	BrushBaseProperties* BrushProperties;//[Offset: 0xc0, Size: 0x8] 0x78ce431d00
	bool bInBrushStroke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78ce431d80
	float WorldToLocalScale;//[Offset: 0xcc, Size: 0x4] 0x78ce431e00
	BrushStampData LastBrushStamp;//[Offset: 0xd0, Size: 0xac] 0x78ce431e80
	class BrushBaseProperties* PropertyClass;//[Offset: 0x190, Size: 0x28] 0x78ce3f2a40
	BrushStampIndicator* BrushStampIndicator;//[Offset: 0x1b8, Size: 0x8] 0x78ce431f00

--------------------------------
Class: BrushStampData

--------------------------------
Class: BrushStampIndicator.InteractiveGizmo.Object
	float BrushRadius;//[Offset: 0x38, Size: 0x4] 0x78ce431600
	float BrushFalloff;//[Offset: 0x3c, Size: 0x4] 0x78ce431680
	Vector BrushPosition;//[Offset: 0x40, Size: 0xc] 0x78ce431700
	Vector BrushNormal;//[Offset: 0x4c, Size: 0xc] 0x78ce431780
	bool bDrawIndicatorLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78ce431800
	bool bDrawRadiusCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78ce431880
	int SampleStepCount;//[Offset: 0x5c, Size: 0x4] 0x78ce431900
	LinearColor LineColor;//[Offset: 0x60, Size: 0x10] 0x78ce431980
	float LineThickness;//[Offset: 0x70, Size: 0x4] 0x78ce431a00
	bool bDepthTested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78ce431a80
	bool bDrawSecondaryLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78ce431b00
	float SecondaryLineThickness;//[Offset: 0x78, Size: 0x4] 0x78ce431b80
	LinearColor SecondaryLineColor;//[Offset: 0x7c, Size: 0x10] 0x78ce431c00
	PrimitiveComponent* AttachedComponent;//[Offset: 0x90, Size: 0x8] 0x78ce431c80

--------------------------------
Class: BrushStampIndicatorBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool bUpdateModifiersDuringDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78ce431580

--------------------------------
Class: LocalClickDragInputBehavior.ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragTool.InteractiveTool.Object

--------------------------------
Class: InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoActor.InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LinearColor Color;//[Offset: 0x440, Size: 0x10] 0x78ce431300
	float HoverSizeMultiplier;//[Offset: 0x450, Size: 0x4] 0x78ce431380
	float PixelHitDistanceThreshold;//[Offset: 0x454, Size: 0x4] 0x78ce431400
	void UpdateWorldLocalState(bool bWorldIn);// 0xb6e3d88 0x78ce408e40
	void UpdateHoverState(bool bHoveringIn);// 0xb6e3e48 0x78ce408f20

--------------------------------
Class: GizmoArrowComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Direction;//[Offset: 0x460, Size: 0xc] 0x78ce431100
	float Gap;//[Offset: 0x46c, Size: 0x4] 0x78ce431180
	float Length;//[Offset: 0x470, Size: 0x4] 0x78ce431200
	float Thickness;//[Offset: 0x474, Size: 0x4] 0x78ce431280

--------------------------------
Class: GizmoBoxComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Origin;//[Offset: 0x460, Size: 0xc] 0x78ce432f00
	Quat Rotation;//[Offset: 0x470, Size: 0x10] 0x78ce432f80
	Vector Dimensions;//[Offset: 0x480, Size: 0xc] 0x78ce433000
	float LineThickness;//[Offset: 0x48c, Size: 0x4] 0x78ce433080
	bool bRemoveHiddenLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1] 0x78ce433100
	bool bEnableAxisFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1] 0x78ce433180

--------------------------------
Class: GizmoCircleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x460, Size: 0xc] 0x78ce432c00
	float Radius;//[Offset: 0x46c, Size: 0x4] 0x78ce432c80
	float Thickness;//[Offset: 0x470, Size: 0x4] 0x78ce432d00
	int NumSides;//[Offset: 0x474, Size: 0x4] 0x78ce432d80
	bool bViewAligned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1] 0x78ce432e00
	bool bOnlyAllowFrontFacingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1] 0x78ce432e80

--------------------------------
Class: GizmoTransformSource.Interface.Object
	void SetTransform(out const Transform NewTransform);// 0xb6e4d40 0x78ce408c80
	Transform GetTransform();// 0xb6e4e24 0x78ce408d60

--------------------------------
Class: GizmoAxisSource.Interface.Object
	bool HasTangentVectors();// 0xb6e54ac 0x78ce408900
	void GetTangentVectors(out Vector TangentXOut, out Vector TangentYOut);// 0xb6e53a8 0x78ce4089e0
	Vector GetOrigin();// 0xb6e552c 0x78ce408ac0
	Vector GetDirection();// 0xb6e54ec 0x78ce408ba0

--------------------------------
Class: GizmoClickTarget.Interface.Object
	void UpdateHoverState(bool bHovering);// 0xb6e5a60 0x78ce408820

--------------------------------
Class: GizmoStateTarget.Interface.Object
	void EndUpdate();// 0xb6e5f28 0x78ce408660
	void BeginUpdate();// 0xb6e5f44 0x78ce408740

--------------------------------
Class: GizmoFloatParameterSource.Interface.Object
	void SetParameter(float NewValue);// 0xb6e63cc 0x78ce4082e0
	float GetParameter();// 0xb6e6498 0x78ce4083c0
	void EndModify();// 0xb6e63b0 0x78ce4084a0
	void BeginModify();// 0xb6e647c 0x78ce408580

--------------------------------
Class: GizmoVec2ParameterSource.Interface.Object
	void SetParameter(out const Vector2D NewValue);// 0xb6e69d8 0x78ce407f60
	Vector2D GetParameter();// 0xb6e6aac 0x78ce408040
	void EndModify();// 0xb6e69bc 0x78ce408120
	void BeginModify();// 0xb6e6a90 0x78ce408200

--------------------------------
Class: GizmoLineHandleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x460, Size: 0xc] 0x78ce432300
	float HandleSize;//[Offset: 0x46c, Size: 0x4] 0x78ce432380
	float Thickness;//[Offset: 0x470, Size: 0x4] 0x78ce432400
	Vector Direction;//[Offset: 0x474, Size: 0xc] 0x78ce432480
	float Length;//[Offset: 0x480, Size: 0x4] 0x78ce432500
	bool bImageScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1] 0x78ce432580

--------------------------------
Class: GizmoRectangleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DirectionX;//[Offset: 0x460, Size: 0xc] 0x78ce434000
	Vector DirectionY;//[Offset: 0x46c, Size: 0xc] 0x78ce434080
	float OffsetX;//[Offset: 0x478, Size: 0x4] 0x78ce434100
	float OffsetY;//[Offset: 0x47c, Size: 0x4] 0x78ce434180
	float LengthX;//[Offset: 0x480, Size: 0x4] 0x78ce434200
	float LengthY;//[Offset: 0x484, Size: 0x4] 0x78ce432180
	float Thickness;//[Offset: 0x488, Size: 0x4] 0x78ce432200
	byte SegmentFlags;//[Offset: 0x48c, Size: 0x1] 0x78ce432280

--------------------------------
Class: GizmoLambdaHitTarget.Object

--------------------------------
Class: GizmoComponentHitTarget.Object
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 0x8] 0x78ce433f80

--------------------------------
Class: InputBehaviorSource.Interface.Object

--------------------------------
Class: InputRouter.Object
	bool bAutoInvalidateOnHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78ce433d80
	bool bAutoInvalidateOnCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78ce433e00
	InputBehaviorSet* ActiveInputBehaviors;//[Offset: 0x38, Size: 0x8] 0x78ce433e80

--------------------------------
Class: InteractionMechanic.Object

--------------------------------
Class: InteractiveGizmoManager.Object
	ActiveGizmo[] ActiveGizmos;//[Offset: 0x30, Size: 0x10] 0x78ce3f5240
	<FString,InteractiveGizmoBuilder*> GizmoBuilders;//[Offset: 0x58, Size: 0x50] 0x78cee15800

--------------------------------
Class: ActiveGizmo

--------------------------------
Class: ToolContextTransactionProvider.Interface.Object

--------------------------------
Class: InteractiveToolManager.Object
	InteractiveTool* ActiveLeftTool;//[Offset: 0x30, Size: 0x8] 0x78ce433a00
	InteractiveTool* ActiveRightTool;//[Offset: 0x38, Size: 0x8] 0x78ce433a80
	<FString,InteractiveToolBuilder*> ToolBuilders;//[Offset: 0x90, Size: 0x50] 0x78cee15740

--------------------------------
Class: ToolFrameworkComponent.Interface.Object

--------------------------------
Class: InteractiveToolsContext.Object
	InputRouter* InputRouter;//[Offset: 0x58, Size: 0x8] 0x78ce433880
	InteractiveToolManager* ToolManager;//[Offset: 0x60, Size: 0x8] 0x78ce433900
	InteractiveGizmoManager* GizmoManager;//[Offset: 0x68, Size: 0x8] 0x78ce433980
	class InteractiveToolManager* ToolManagerClass;//[Offset: 0x70, Size: 0x28] 0x78ce3f51a0

--------------------------------
Class: IntervalGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	GizmoLineHandleComponent* UpIntervalComponent;//[Offset: 0x220, Size: 0x8] 0x78ce433700
	GizmoLineHandleComponent* DownIntervalComponent;//[Offset: 0x228, Size: 0x8] 0x78ce433780
	GizmoLineHandleComponent* ForwardIntervalComponent;//[Offset: 0x230, Size: 0x8] 0x78ce433800

--------------------------------
Class: IntervalGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: IntervalGizmo.InteractiveGizmo.Object
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x38, Size: 0x8] 0x78ce433400
	TransformProxy* TransformProxy;//[Offset: 0x50, Size: 0x8] 0x78ce433480
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x58, Size: 0x10] 0x78ce3f5060
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x68, Size: 0x10] 0x78ce3f5100
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x90, Size: 0x8] 0x78ce433600
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x98, Size: 0x8] 0x78ce433680

--------------------------------
Class: GizmoTransformChangeStateTarget.Object
	interface class None* TransactionManager;//[Offset: 0x50, Size: 0x10] 0x78ce436e80

--------------------------------
Class: TransformProxy.Object
	bool bRotatePerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78ce437b00
	bool bSetPivotMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78ce437b80
	Transform SharedTransform;//[Offset: 0x90, Size: 0x30] 0x78ce437c00
	Transform InitialSharedTransform;//[Offset: 0xc0, Size: 0x30] 0x78ce437c80

--------------------------------
Class: GizmoBaseFloatParameterSource.Object

--------------------------------
Class: GizmoAxisIntervalParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* FloatParameterSource;//[Offset: 0x48, Size: 0x10] 0x78ce433280
	float MinParameter;//[Offset: 0x58, Size: 0x4] 0x78ce433300
	float MaxParameter;//[Offset: 0x5c, Size: 0x4] 0x78ce433380

--------------------------------
Class: KeyAsModifierInputBehavior.InputBehavior.Object

--------------------------------
Class: MeshSurfacePointToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: MouseHoverBehavior.InputBehavior.Object

--------------------------------
Class: MultiClickSequenceInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: MultiSelectionTool.InteractiveTool.Object

--------------------------------
Class: GizmoLocalFloatParameterSource.GizmoBaseFloatParameterSource.Object
	float Value;//[Offset: 0x48, Size: 0x4] 0x78ce435280
	GizmoFloatParameterChange LastChange;//[Offset: 0x4c, Size: 0x8] 0x78ce433200

--------------------------------
Class: GizmoFloatParameterChange
	float InitialValue;//[Offset: 0x0, Size: 0x4] 0x78cf164380
	float CurrentValue;//[Offset: 0x4, Size: 0x4] 0x78cf164400

--------------------------------
Class: GizmoBaseVec2ParameterSource.Object

--------------------------------
Class: GizmoLocalVec2ParameterSource.GizmoBaseVec2ParameterSource.Object
	Vector2D Value;//[Offset: 0x48, Size: 0x8] 0x78ce435180
	GizmoVec2ParameterChange LastChange;//[Offset: 0x50, Size: 0x10] 0x78ce435200

--------------------------------
Class: GizmoVec2ParameterChange
	Vector2D InitialValue;//[Offset: 0x0, Size: 0x8] 0x78cf164280
	Vector2D CurrentValue;//[Offset: 0x8, Size: 0x8] 0x78cf164300

--------------------------------
Class: GizmoAxisTranslationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78ce434e00
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78ce434e80
	float Parameter;//[Offset: 0xb0, Size: 0x4] 0x78ce434f00
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8] 0x78ce434f80
	Vector CurTranslationAxis;//[Offset: 0xbc, Size: 0xc] 0x78ce435000
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78ce435080
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30] 0x78ce435100

--------------------------------
Class: GizmoPlaneTranslationParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78ce434980
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78ce434a00
	Vector2D Parameter;//[Offset: 0xb0, Size: 0x8] 0x78ce434a80
	GizmoVec2ParameterChange LastChange;//[Offset: 0xb8, Size: 0x10] 0x78ce434b00
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78ce434b80
	Vector CurTranslationNormal;//[Offset: 0xd4, Size: 0xc] 0x78ce434c00
	Vector CurTranslationAxisX;//[Offset: 0xe0, Size: 0xc] 0x78ce434c80
	Vector CurTranslationAxisY;//[Offset: 0xec, Size: 0xc] 0x78ce434d00
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x78ce434d80

--------------------------------
Class: GizmoAxisRotationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78ce434600
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78ce434680
	float Angle;//[Offset: 0xb0, Size: 0x4] 0x78ce434700
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8] 0x78ce434780
	Vector CurRotationAxis;//[Offset: 0xbc, Size: 0xc] 0x78ce434800
	Vector CurRotationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78ce434880
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30] 0x78ce434900

--------------------------------
Class: GizmoUniformScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78ce436200
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x78ce436280
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x78ce436300
	Vector2D Parameter;//[Offset: 0x6c, Size: 0x8] 0x78ce434280
	GizmoVec2ParameterChange LastChange;//[Offset: 0x74, Size: 0x10] 0x78ce434300
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x78ce434380
	Vector CurScaleNormal;//[Offset: 0x90, Size: 0xc] 0x78ce434400
	Vector CurScaleAxisX;//[Offset: 0x9c, Size: 0xc] 0x78ce434480
	Vector CurScaleAxisY;//[Offset: 0xa8, Size: 0xc] 0x78ce434500
	Transform InitialTransform;//[Offset: 0xc0, Size: 0x30] 0x78ce434580

--------------------------------
Class: GizmoAxisScaleParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78ce435e00
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x78ce435e80
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x78ce435f00
	float Parameter;//[Offset: 0x6c, Size: 0x4] 0x78ce435f80
	GizmoFloatParameterChange LastChange;//[Offset: 0x70, Size: 0x8] 0x78ce436000
	Vector CurScaleAxis;//[Offset: 0x78, Size: 0xc] 0x78ce436080
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x78ce436100
	Transform InitialTransform;//[Offset: 0x90, Size: 0x30] 0x78ce436180

--------------------------------
Class: GizmoPlaneScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78ce435900
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78ce435980
	float ScaleMultiplier;//[Offset: 0xb0, Size: 0x4] 0x78ce435a00
	Vector2D Parameter;//[Offset: 0xb4, Size: 0x8] 0x78ce435a80
	GizmoVec2ParameterChange LastChange;//[Offset: 0xbc, Size: 0x10] 0x78ce435b00
	Vector CurScaleOrigin;//[Offset: 0xcc, Size: 0xc] 0x78ce435b80
	Vector CurScaleNormal;//[Offset: 0xd8, Size: 0xc] 0x78ce435c00
	Vector CurScaleAxisX;//[Offset: 0xe4, Size: 0xc] 0x78ce435c80
	Vector CurScaleAxisY;//[Offset: 0xf0, Size: 0xc] 0x78ce435d00
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x78ce435d80

--------------------------------
Class: PlanePositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: PlanePositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78ce437180
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x78ce437200
	interface class None* hittarget;//[Offset: 0x68, Size: 0x10] 0x78ce437280
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78ce437300
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78ce437380
	bool bFlipX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78ce435300
	bool bFlipY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x78ce435380
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x78ce435400
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x78ce435480
	Vector InteractionNormal;//[Offset: 0x98, Size: 0xc] 0x78ce435500
	Vector InteractionAxisX;//[Offset: 0xa4, Size: 0xc] 0x78ce435580
	Vector InteractionAxisY;//[Offset: 0xb0, Size: 0xc] 0x78ce435600
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x78ce435680
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x78ce435700
	Vector2D InteractionStartParameter;//[Offset: 0xd4, Size: 0x8] 0x78ce435780
	Vector2D InteractionCurParameter;//[Offset: 0xdc, Size: 0x8] 0x78ce435800
	Vector2D ParameterSigns;//[Offset: 0xe4, Size: 0x8] 0x78ce435880

--------------------------------
Class: SelectionSet.Object

--------------------------------
Class: MeshSelectionSet.SelectionSet.Object
	int[] Vertices;//[Offset: 0x40, Size: 0x10] 0x78ce3f4de0
	int[] Edges;//[Offset: 0x50, Size: 0x10] 0x78ce3f4e80
	int[] Faces;//[Offset: 0x60, Size: 0x10] 0x78ce3f4f20
	int[] Groups;//[Offset: 0x70, Size: 0x10] 0x78ce3f4fc0

--------------------------------
Class: SingleClickInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool HitTestOnRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78ce436f00

--------------------------------
Class: SingleClickToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: SingleClickTool.InteractiveTool.Object

--------------------------------
Class: GizmoNilStateTarget.Object

--------------------------------
Class: GizmoLambdaStateTarget.Object

--------------------------------
Class: GizmoObjectModifyStateTarget.Object

--------------------------------
Class: TransformGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	PrimitiveComponent* TranslateX;//[Offset: 0x220, Size: 0x8] 0x78ce436680
	PrimitiveComponent* TranslateY;//[Offset: 0x228, Size: 0x8] 0x78ce436700
	PrimitiveComponent* TranslateZ;//[Offset: 0x230, Size: 0x8] 0x78ce436780
	PrimitiveComponent* TranslateYZ;//[Offset: 0x238, Size: 0x8] 0x78ce436800
	PrimitiveComponent* TranslateXZ;//[Offset: 0x240, Size: 0x8] 0x78ce436880
	PrimitiveComponent* TranslateXY;//[Offset: 0x248, Size: 0x8] 0x78ce436900
	PrimitiveComponent* RotateX;//[Offset: 0x250, Size: 0x8] 0x78ce436980
	PrimitiveComponent* RotateY;//[Offset: 0x258, Size: 0x8] 0x78ce436a00
	PrimitiveComponent* RotateZ;//[Offset: 0x260, Size: 0x8] 0x78ce436a80
	PrimitiveComponent* UniformScale;//[Offset: 0x268, Size: 0x8] 0x78ce436b00
	PrimitiveComponent* AxisScaleX;//[Offset: 0x270, Size: 0x8] 0x78ce436b80
	PrimitiveComponent* AxisScaleY;//[Offset: 0x278, Size: 0x8] 0x78ce436c00
	PrimitiveComponent* AxisScaleZ;//[Offset: 0x280, Size: 0x8] 0x78ce436c80
	PrimitiveComponent* PlaneScaleYZ;//[Offset: 0x288, Size: 0x8] 0x78ce436d00
	PrimitiveComponent* PlaneScaleXZ;//[Offset: 0x290, Size: 0x8] 0x78ce436d80
	PrimitiveComponent* PlaneScaleXY;//[Offset: 0x298, Size: 0x8] 0x78ce436e00

--------------------------------
Class: TransformGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: TransformGizmo.InteractiveGizmo.Object
	TransformProxy* ActiveTarget;//[Offset: 0x40, Size: 0x8] 0x78ce437d00
	bool bSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78ce437d80
	bool bGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78ce437e00
	Vector ExplicitGridSize;//[Offset: 0x4c, Size: 0xc] 0x78ce437e80
	bool bRotationGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78ce437f00
	Rotator ExplicitRotationGridSize;//[Offset: 0x5c, Size: 0xc] 0x78ce437f80
	bool bSnapToWorldRotGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78ce438000
	bool bUseContextCoordinateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x78ce438080
	enum CurrentCoordinateSystem;//[Offset: 0x6c, Size: 0x4] 0x78ce3f4b60
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x100, Size: 0x10] 0x78ce3f4c00
	PrimitiveComponent*[] NonuniformScaleComponents;//[Offset: 0x110, Size: 0x10] 0x78ce3f4ca0
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x120, Size: 0x10] 0x78ce3f4d40
	GizmoConstantFrameAxisSource* CameraAxisSource;//[Offset: 0x140, Size: 0x8] 0x78ce438300
	GizmoComponentAxisSource* AxisXSource;//[Offset: 0x148, Size: 0x8] 0x78ce438380
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x150, Size: 0x8] 0x78ce438400
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x158, Size: 0x8] 0x78ce436380
	GizmoComponentAxisSource* UnitAxisXSource;//[Offset: 0x160, Size: 0x8] 0x78ce436400
	GizmoComponentAxisSource* UnitAxisYSource;//[Offset: 0x168, Size: 0x8] 0x78ce436480
	GizmoComponentAxisSource* UnitAxisZSource;//[Offset: 0x170, Size: 0x8] 0x78ce436500
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x178, Size: 0x8] 0x78ce436580
	GizmoScaledTransformSource* ScaledTransformSource;//[Offset: 0x180, Size: 0x8] 0x78ce436600

--------------------------------
Class: GizmoScaledTransformSource.GizmoBaseTransformSource.Object
	interface class None* ChildTransformSource;//[Offset: 0x48, Size: 0x10] 0x78ce437980

--------------------------------
Class: GizmoBaseTransformSource.Object

--------------------------------
Class: GizmoComponentWorldTransformSource.GizmoBaseTransformSource.Object
	SceneComponent* Component;//[Offset: 0x48, Size: 0x8] 0x78ce437a00
	bool bModifyComponentOnTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78ce437a80

--------------------------------
Class: GizmoTransformProxyTransformSource.GizmoBaseTransformSource.Object
	TransformProxy* Proxy;//[Offset: 0x48, Size: 0x8] 0x78ce437900

--------------------------------
Class: DrawFlyLineWidget_C.DrawFlyLineUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	SizeBox* SizeBox;//[Offset: 0x350, Size: 0x8] 0x78c646c200
	Vector2D K2Node_Event_StartPos;//[Offset: 0x358, Size: 0x8] 0x78c646c280
	Vector2D K2Node_Event_EndPos;//[Offset: 0x360, Size: 0x8] 0x78c646c300
	Vector2D K2Node_Event_MidPos;//[Offset: 0x368, Size: 0x8] 0x78c646c500
	void StartDraw();// 0x74195d0 0x78c3c099a0
	void OnPaint(out PaintContext bpp__Context__pf);// 0x7419510 0x78c3c09a80
	void MidDraw(Vector2D bpp__MidPos__pf);// 0x74196dc 0x78c3c09b60
	void EndDraw();// 0x7419788 0x78c3c09c40
	void Draw(Vector2D bpp__StartPos__pf, Vector2D bpp__EndPos__pf);// 0x74195ec 0x78c3c09d20

--------------------------------
Class: DragInterface_C.Interface.Object
	void FinishDrag();// 0x8a873f8 0x78c3cb3880

--------------------------------
Class: SkillBaseWidget_C.UserWidget.Widget.Visual.Object
	enum WidgetType;//[Offset: 0x260, Size: 0x1] 0x78c5faaba0
	delegate SetHoverSkill;//[Offset: 0x268, Size: 0x10] 0x78c646bd00
	void SetHoverSkill__DelegateSignature(enum bpp__WidgetType__pf, int bpp__Value__pf);// 0x8a873f8 0x78c3cb27e0
	void UseSkillWidget();// 0x7432078 0x78c3cb28c0
	void SetSelectState(bool bpp__State__pf);// 0x743214c 0x78c3cb29a0
	void SetHoverState(bool bpp__State__pf);// 0x7432094 0x78c3cb2a80
	void OnclickSkill(out bool bpp__CanBeSelect__pf);// 0x7432204 0x78c3cb2b60
	void DropSkillWidget();// 0x7431ee4 0x78c3cb2c40
	void CanUseSkillWidget(out bool bpp__Result__pf);// 0x7431fbc 0x78c3cb2d20
	void CanDropSkill(out bool bpp__Result__pf);// 0x7431f00 0x78c3cb2e00

--------------------------------
Class: VitalWidget_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x260, Size: 0x8] 0x78c646cf00
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78c646cf80
	Image* ProgressBar;//[Offset: 0x270, Size: 0x8] 0x78c646d000
	float percent;//[Offset: 0x278, Size: 0x4] 0x78c646d080
	float TimerCounter;//[Offset: 0x27c, Size: 0x4] 0x78c646d100
	bool IsForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78c646d180
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x288, Size: 0x8] 0x78c646d200
	float K2Node_CustomEvent_percent;//[Offset: 0x290, Size: 0x4] 0x78c646d280
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x294, Size: 0x38] 0x78c646d400
	float K2Node_Event_InDeltaTime;//[Offset: 0x2cc, Size: 0x4] 0x78c646d300
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x744c834 0x78c3d16ec0
	void SetVitalValue(float bpp__Percent__pf);// 0x744c784 0x78c3d16fa0
	void Construct();// 0x744c94c 0x78c3d17080

--------------------------------
Class: WeaponFire_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* WeaponSelectAnimation;//[Offset: 0x260, Size: 0x8] 0x78c646ca00
	Image* WeaponBackgroundImage;//[Offset: 0x268, Size: 0x8] 0x78c646ca80
	Image* WeaponSelectImage;//[Offset: 0x270, Size: 0x8] 0x78c646cb00
	bool isSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78c646cb80
	bool IsShowBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1] 0x78c646cc00
	int Level;//[Offset: 0x27c, Size: 0x4] 0x78c646cc80
	void SetLevel(int bpp__Level__pf);// 0x744d188 0x78c3d1ab20
	EventReply OnMouseButtonDown(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x744cf98 0x78c3d1ac00
	void EndSelect();// 0x744d254 0x78c3d1ace0
	void BeginSelect();// 0x744d238 0x78c3d17400

--------------------------------
Class: FightAlertWidget_C.FightAlertWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* PlayHideControl5;//[Offset: 0x298, Size: 0x8] 0x78c646ea80
	WidgetAnimation* PlayHideControl4;//[Offset: 0x2a0, Size: 0x8] 0x78c646eb00
	WidgetAnimation* PlayHideControl3;//[Offset: 0x2a8, Size: 0x8] 0x78c646eb80
	WidgetAnimation* PlayHideControl2;//[Offset: 0x2b0, Size: 0x8] 0x78c646ec00
	WidgetAnimation* PlayHideControl1;//[Offset: 0x2b8, Size: 0x8] 0x78c646ec80
	Image* Image_Flat_1;//[Offset: 0x2c0, Size: 0x8] 0x78c646ed00
	Image* Image_Flat_1;//[Offset: 0x2c8, Size: 0x8] 0x78c646ed80
	Image* Image_Flat_2;//[Offset: 0x2d0, Size: 0x8] 0x78c646ee00
	Image* Image_Flat_2;//[Offset: 0x2d8, Size: 0x8] 0x78c646ee80
	Image* Image_Flat_3;//[Offset: 0x2e0, Size: 0x8] 0x78c646ef00
	Image* Image_Flat_3;//[Offset: 0x2e8, Size: 0x8] 0x78c646ef80
	Image* Image_Flat_4;//[Offset: 0x2f0, Size: 0x8] 0x78c646f000
	Image* Image_Flat_4;//[Offset: 0x2f8, Size: 0x8] 0x78c646f080
	Image* Image_Flat_5;//[Offset: 0x300, Size: 0x8] 0x78c646f100
	Image* Image_Flat_5;//[Offset: 0x308, Size: 0x8] 0x78c646f180
	SizeBox* SizeBox;//[Offset: 0x310, Size: 0x8] 0x78c646f200
	SizeBox* SizeBox;//[Offset: 0x318, Size: 0x8] 0x78c646f280
	SizeBox* SizeBox;//[Offset: 0x320, Size: 0x8] 0x78c646f300
	SizeBox* SizeBox;//[Offset: 0x328, Size: 0x8] 0x78c646f380
	SizeBox* SizeBox;//[Offset: 0x330, Size: 0x8] 0x78c646f400
	bool K2Node_Event_IsDesignTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x78c646f480
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x33c, Size: 0x38] 0x78c646f500
	float K2Node_Event_InDeltaTime;//[Offset: 0x374, Size: 0x4] 0x78c646f580
	int K2Node_Event_IndexControl;//[Offset: 0x378, Size: 0x4] 0x78c646f600
	bool K2Node_SwitchInteger_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1] 0x78c646f680
	bool K2Node_SwitchInteger_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1] 0x78c646f700
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x7423154 0x78c36bbf40
	void PreConstruct(bool bpp__IsDesignTime__pf);// 0x7423080 0x78c36bc020
	void ExecuteUbergraph_FightAlertWidget(int bpp__EntryPoint__pf);// 0x742331c 0x78c36bc100
	void ControlAnimHide(int bpp__IndexControl__pf);// 0x742326c 0x78c36bc1e0
	void Construct();// 0x7423138 0x78c36bc2c0

--------------------------------
Class: CircleSliderWidget_C.CircleSliderUI.UserWidget.Widget.Visual.Object
	ProgressBar* CircleProgress;//[Offset: 0x260, Size: 0x8] 0x78c3771b80
	TextBlock* leftshow;//[Offset: 0x268, Size: 0x8] 0x78c3771c00
	TextBlock* leftshow_num;//[Offset: 0x270, Size: 0x8] 0x78c3771c80
	HorizontalBox* LeftShowPanel;//[Offset: 0x278, Size: 0x8] 0x78c3771d00
	Image* Pawn;//[Offset: 0x280, Size: 0x8] 0x78c3771d80
	CanvasPanel* pawncanvas;//[Offset: 0x288, Size: 0x8] 0x78c3771e00
	TextBlock* rightshow;//[Offset: 0x290, Size: 0x8] 0x78c3771e80
	TextBlock* Rightshow_num;//[Offset: 0x298, Size: 0x8] 0x78c3771f00
	HorizontalBox* RightShowPanel;//[Offset: 0x2a0, Size: 0x8] 0x78c3771f80
	Vector CurrentCirclePosition;//[Offset: 0x2a8, Size: 0xc] 0x78c3772000
	float CurrentCircleRange;//[Offset: 0x2b4, Size: 0x4] 0x78c3772080
	Vector ShakingCirclePosition;//[Offset: 0x2b8, Size: 0xc] 0x78c3772100
	float ShakingCircleRange;//[Offset: 0x2c4, Size: 0x4] 0x78c3770080
	Vector NextCirclePosition;//[Offset: 0x2c8, Size: 0xc] 0x78c3770100
	float NextCiecleRange;//[Offset: 0x2d4, Size: 0x4] 0x78c3770180
	bool StartDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78c3770200
	Vector pawnloc;//[Offset: 0x2dc, Size: 0xc] 0x78c3770280
	int NewVar;//[Offset: 0x2e8, Size: 0x4] 0x78c3770300
	float CheckInterval;//[Offset: 0x2ec, Size: 0x4] 0x78c3770380
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x2f0, Size: 0x38] 0x78c3770400
	float K2Node_Event_InDeltaTime;//[Offset: 0x328, Size: 0x4] 0x78c3770480
	bool CallFunc_CheckOrNot_Check;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1] 0x78c3770500
	float K2Node_CustomEvent_PosX;//[Offset: 0x330, Size: 0x4] 0x78c3770580
	float K2Node_CustomEvent_PosY;//[Offset: 0x334, Size: 0x4] 0x78c3770600
	float K2Node_CustomEvent_Range;//[Offset: 0x338, Size: 0x4] 0x78c3770680
	float K2Node_CustomEvent_PosX;//[Offset: 0x33c, Size: 0x4] 0x78c3770700
	float K2Node_CustomEvent_PosY;//[Offset: 0x340, Size: 0x4] 0x78c3770780
	float K2Node_CustomEvent_Range;//[Offset: 0x344, Size: 0x4] 0x78c3770800
	float K2Node_CustomEvent_PosX;//[Offset: 0x348, Size: 0x4] 0x78c3770880
	float K2Node_CustomEvent_PosY;//[Offset: 0x34c, Size: 0x4] 0x78c3770900
	float K2Node_CustomEvent_Range;//[Offset: 0x350, Size: 0x4] 0x78c3770980
	float K2Node_CustomEvent_Value;//[Offset: 0x354, Size: 0x4] 0x78c3770a00
	float K2Node_CustomEvent_safedis;//[Offset: 0x358, Size: 0x4] 0x78c3770a80
	Geometry CallFunc_GetCachedGeometry_ReturnValue;//[Offset: 0x35c, Size: 0x38] 0x78c3770b00
	float CallFunc_BreakVector2D_X;//[Offset: 0x394, Size: 0x4] 0x78c3770b80
	float CallFunc_BreakVector2D_Y;//[Offset: 0x398, Size: 0x4] 0x78c3770c00
	Geometry CallFunc_GetCachedGeometry_ReturnValue;//[Offset: 0x39c, Size: 0x38] 0x78c3770c80
	float CallFunc_BreakVector2D_X;//[Offset: 0x3d4, Size: 0x4] 0x78c3770d00
	float CallFunc_BreakVector2D_Y;//[Offset: 0x3d8, Size: 0x4] 0x78c3770d80
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x7416200 0x78c36bd520
	void SetShakingCircle(float bpp__PosX__pf, float bpp__PosY__pf, float bpp__Range__pf);// 0x741645c 0x78c36bd600
	void SetPawnPercent(float bpp__Value__pf, float bpp__safedis__pf);// 0x74166e4 0x78c36bd6e0
	void SetNextCircle(float bpp__PosX__pf, float bpp__PosY__pf, float bpp__Range__pf);// 0x7416318 0x78c36bd7c0
	void SetCurrentCircle(float bpp__PosX__pf, float bpp__PosY__pf, float bpp__Range__pf);// 0x74165a0 0x78c36bd8a0
	Vector GetPawnLocation();// 0x74161c0 0x78c36bd980
	void CheckOrNot(float bpp__DeltaTime__pf, out bool bpp__Check__pf);// 0x74160b8 0x78c36bda60

--------------------------------
Class: WB_HotUpdate_PrivacyAgreement_C.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x330, Size: 0x8] 0x78bc2cce80
	Button* Btn_Cancel;//[Offset: 0x338, Size: 0x8] 0x78bc2ccf00
	Button* Btn_Confirm;//[Offset: 0x340, Size: 0x8] 0x78bc2ccf80
	Button* Btn_Return;//[Offset: 0x348, Size: 0x8] 0x78bc2cd000
	Button* Btn_UserAgreement;//[Offset: 0x350, Size: 0x8] 0x78bc2cd080
	Button* Btn_UserAgreement;//[Offset: 0x358, Size: 0x8] 0x78bc2cd100
	RichTextBlock* BulletinBody;//[Offset: 0x360, Size: 0x8] 0x78bc2cd180
	CanvasPanel* BulletinPanel;//[Offset: 0x368, Size: 0x8] 0x78bc2cd200
	TextBlock* BulletinTitle;//[Offset: 0x370, Size: 0x8] 0x78bc2cd280
	CanvasPanel* DialogPanel;//[Offset: 0x378, Size: 0x8] 0x78bc2cd300
	Image* Image;//[Offset: 0x380, Size: 0x8] 0x78bc2caa00
	WidgetSwitcher* PanelSwitcher;//[Offset: 0x388, Size: 0x8] 0x78bc2ca980
	WidgetSwitcher* WebSwitcher;//[Offset: 0x390, Size: 0x8] 0x78bc2cd380
	CanvasPanel* WebViewPanel;//[Offset: 0x398, Size: 0x8] 0x78bc2cd400
	UserWidget* UserLoginPage;//[Offset: 0x3a0, Size: 0x8] 0x78bc2cd480
	FString[] CheckPermissions;//[Offset: 0x3a8, Size: 0x10] 0x78ce3fdee0
	void CheckRequestPermissions(FString[] RequestPermissions, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, AndroidPermissionCallbackProxy* CallFunc_AcquirePermissions_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_CheckPermission_ReturnValue);// 0x8a873f8 0x78c39b7a20
	void SetUserLoginPage(UserWidget* page);// 0x8a873f8 0x78c76190e0
	void Construct();// 0x8a873f8 0x78cac1f9e0
	void BndEvt__Btn_Cancel_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c39b7da0
	void BndEvt__Btn_Confirm_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c76191c0
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78ca991d60
	void BndEvt__Btn_UserAgreement_1_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c666e860
	void BndEvt__Btn_UserAgreement_2_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c76129a0
	void ExecuteUbergraph_WB_HotUpdate_PrivacyAgreement(int EntryPoint, GameModeBase* CallFunc_GetGameMode_ReturnValue, HotUpdateGameMode* K2Node_DynamicCast_AsHot_Update_Game_Mode, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c666b840

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: HotUpdateWidght_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c7b92d00
	Image* bg;//[Offset: 0x268, Size: 0x8] 0x78c7b93100
	Image* bg;//[Offset: 0x270, Size: 0x8] 0x78c7b91480
	CircularThrobber* CircularThrobber;//[Offset: 0x278, Size: 0x8] 0x78c7b91380
	HorizontalBox* HorizontalBox;//[Offset: 0x280, Size: 0x8] 0x78c7b9b880
	HorizontalBox* HorizontalBox;//[Offset: 0x288, Size: 0x8] 0x78c7b9b900
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x78c7b9b980
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x78c7b9ba00
	Image* Image;//[Offset: 0x2a0, Size: 0x8] 0x78c88d3b80
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x78c88d3a00
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78c88d3600
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78c88d3680
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78c88d3800
	Image* Image_bar;//[Offset: 0x2c8, Size: 0x8] 0x78c88d3900
	CanvasPanel* Layer1;//[Offset: 0x2d0, Size: 0x8] 0x78c88d3b00
	CanvasPanel* Layer2;//[Offset: 0x2d8, Size: 0x8] 0x78c88d3700
	CanvasPanel* Layer3;//[Offset: 0x2e0, Size: 0x8] 0x78c88d3780
	Button* m_cancelBtn;//[Offset: 0x2e8, Size: 0x8] 0x78c88d3880
	Button* m_confirmBtn;//[Offset: 0x2f0, Size: 0x8] 0x78c88d3300
	Button* m_confirmBtn2;//[Offset: 0x2f8, Size: 0x8] 0x78c88d3400
	Image* m_cover;//[Offset: 0x300, Size: 0x8] 0x78c88d3480
	TextBlock* m_info;//[Offset: 0x308, Size: 0x8] 0x78c88d5280
	TextBlock* m_info;//[Offset: 0x310, Size: 0x8] 0x78c88d4580
	TextBlock* m_title;//[Offset: 0x318, Size: 0x8] 0x78c88d4b80
	Button* Mask;//[Offset: 0x320, Size: 0x8] 0x78c88d4480
	CanvasPanel* MessageBox;//[Offset: 0x328, Size: 0x8] 0x78c88d4780
	CanvasPanel* MovePanel;//[Offset: 0x330, Size: 0x8] 0x78c88d4400
	Spacer* Spacer_snap;//[Offset: 0x338, Size: 0x8] 0x78c88d4500
	TextBlock* TextDownload;//[Offset: 0x340, Size: 0x8] 0x78c88d4600
	float progress;//[Offset: 0x348, Size: 0x4] 0x78c88d4700
	bool IsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1] 0x78c88d4a80
	bool IsAudit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1] 0x78c88d4800
	void GetFormatByteString(int ReceivedBytes, int ContentLength, out FString OutString, float LocalReceivedBytes, float LocalContentLength, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x8a873f8 0x78cac1d0c0
	void BndEvt__m_cancelBtn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c666eb00
	void BndEvt__m_confirmBtn_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78ce40d600
	void OpenMessageBox(FString title, FString Info, bool hasCancel);// 0x8a873f8 0x78c39bb5a0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c2f7ab20
	void OpenTip(FString text);// 0x8a873f8 0x78c378a260
	void BndEvt__m_confirmBtn2_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c9a41ba0
	void Construct();// 0x8a873f8 0x78c378c3a0
	void PrecompileTipDelegate();// 0x8a873f8 0x78c3788e40
	void VersionResponseDelegate(bool IsAudit);// 0x8a873f8 0x78c39bac00
	void ExecuteUbergraph_HotUpdateWidght(int EntryPoint, enum Temp_byte_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, FText Temp_text_Variable, SlateChildSize K2Node_MakeStruct_SlateChildSize, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SlateChildSize K2Node_MakeStruct_SlateChildSize, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, GameModeBase* CallFunc_GetGameMode_ReturnValue, HotUpdateGameMode_BP_C* K2Node_DynamicCast_AsHot_Update_Game_Mode_BP, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, FString CallFunc_GetFormatByteString_OutString, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, int CallFunc_Subtract_IntInt_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText K2Node_Select_Default, FString K2Node_CustomEvent_Title, FString K2Node_CustomEvent_Info, bool K2Node_CustomEvent_HasCancel, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, HotUpdateGameMode_BP_C* K2Node_DynamicCast_AsHot_Update_Game_Mode_BP, bool K2Node_DynamicCast_bSuccess, HotUpdateGameMode_BP_C* K2Node_DynamicCast_AsHot_Update_Game_Mode_BP, bool K2Node_DynamicCast_bSuccess, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, FString K2Node_CustomEvent_Text, FText CallFunc_Conv_StringToText_ReturnValue, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, HotUpdateGameMode_BP_C* K2Node_DynamicCast_AsHot_Update_Game_Mode_BP, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, HotUpdateGameMode* K2Node_DynamicCast_AsHot_Update_Game_Mode, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsAudit);// 0x8a873f8 0x78c761e5c0

--------------------------------
Class: HotUpdateGameMode_BP_C.HotUpdateGameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x630, Size: 0x8] 0x78c88d4980
	SceneComponent* DefaultSceneRoot;//[Offset: 0x638, Size: 0x8] 0x78c88d4c80
	enum NotifyType;//[Offset: 0x640, Size: 0x1] 0x78c8ca5ba0
	void StagePrivacyAgreement();// 0x8a873f8 0x78c39be160
	void OpenPrivacyAgreement();// 0x8a873f8 0x78c39bfba0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c2fd8200
	void OpenPageTips(FName Msg);// 0x8a873f8 0x78c6e7a340
	void OpenDownloadMainMapTip(int NeedDpwnloadFileSize, enum Type);// 0x8a873f8 0x78c9a414a0
	void OpenMessageBox(enum Type, bool bHasCancel, int NeedDpwnloadFileSize);// 0x8a873f8 0x78c9a46b40
	void ExecuteUbergraph_HotUpdateGameMode_BP(int EntryPoint, enum K2Node_Event_Type, bool K2Node_Event_bHasCancel, int K2Node_Event_NeedDpwnloadFileSize, bool CallFunc_CheckPermission_ReturnValue, bool CallFunc_CheckPermission_ReturnValue, bool CallFunc_ReadConfigBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, HotUpdateHUD_BP_C* K2Node_DynamicCast_AsHot_Update_HUD_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsCurrentChannelNeedOpenPrivacyAgreement_ReturnValue, FName K2Node_Event_Msg, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, int K2Node_Event_NeedDpwnloadFileSize, enum K2Node_Event_Type, HotUpdateHUD_BP_C* K2Node_DynamicCast_AsHot_Update_HUD_BP, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, HotUpdateHUD_BP_C* K2Node_DynamicCast_AsHot_Update_HUD_BP, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78d1d60860

--------------------------------
Class: HotUpdateHUD_BP_C.HotUpdateHUD.WuXiaXHUDBase.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x338, Size: 0x8] 0x78b0d31780
	SceneComponent* DefaultSceneRoot;//[Offset: 0x340, Size: 0x8] 0x78b0d31700
	HotUpdateWidght_C* HotUpdateWidget;//[Offset: 0x348, Size: 0x8] 0x78b0d31680
	WB_HotUpdate_PrivacyAgreement_C* WB_PrivacyAgreement;//[Offset: 0x350, Size: 0x8] 0x78b0d31600
	void OpenPrivacyAgreement(WB_HotUpdate_PrivacyAgreement_C* NewLocalVar, bool CallFunc_IsValid_ReturnValue, WB_HotUpdate_PrivacyAgreement_C* CallFunc_Create_ReturnValue);// 0x8a873f8 0x78c788d0c0
	void OpenPageTip(FString TipMsg);// 0x8a873f8 0x78c77ceb00
	void OpenDownloadBox(enum Type, bool hasCancel, int FileSize);// 0x8a873f8 0x78c77cfc80
	void ReceiveBeginPlay();// 0x8a873f8 0x78c39b9fc0
	void ExecuteUbergraph_HotUpdateHUD_BP(int EntryPoint, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, HotUpdateWidght_C* CallFunc_Create_ReturnValue, FString K2Node_CustomEvent_TipMsg, enum K2Node_CustomEvent_Type, bool K2Node_CustomEvent_HasCancel, int K2Node_CustomEvent_FileSize, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default);// 0x8a873f8 0x78c761c720

--------------------------------
Class: CullCenter_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x260, Size: 0x8] 0x78c377c200

--------------------------------
Class: obParadropShowHideNotice_C.UserWidget.Widget.Visual.Object
	Image* bg;//[Offset: 0x260, Size: 0x8] 0x78c377bf80

--------------------------------
Class: BP_GuideTouchCulling_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c377d980
	WidgetAnimation* DownDragAnim;//[Offset: 0x268, Size: 0x8] 0x78c377d900
	WidgetAnimation* UpDragAnim;//[Offset: 0x270, Size: 0x8] 0x78c377d880
	WidgetAnimation* FocusAnim;//[Offset: 0x278, Size: 0x8] 0x78c377d800
	WidgetAnimation* TouchAnim;//[Offset: 0x280, Size: 0x8] 0x78c377d780
	Image* Bottom;//[Offset: 0x288, Size: 0x8] 0x78c377d700
	CullCenter_C* CullCenter;//[Offset: 0x290, Size: 0x8] 0x78c377f780
	CanvasPanel* Finger;//[Offset: 0x298, Size: 0x8] 0x78c377f700
	CanvasPanel* Finger_Drag;//[Offset: 0x2a0, Size: 0x8] 0x78c377f680
	Image* FocusBorder;//[Offset: 0x2a8, Size: 0x8] 0x78c377f600
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78c377f580
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78c377f500
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78c377f480
	Image* Left;//[Offset: 0x2c8, Size: 0x8] 0x78c377f400
	Image* Right;//[Offset: 0x2d0, Size: 0x8] 0x78c377f380
	Image* Top;//[Offset: 0x2d8, Size: 0x8] 0x78c377f300
	delegate OnTouch;//[Offset: 0x2e0, Size: 0x10] 0x78c377f280
	float Duration;//[Offset: 0x2f0, Size: 0x4] 0x78c377f200
	float LeftDuration;//[Offset: 0x2f4, Size: 0x4] 0x78c377f180
	MaterialInstanceDynamic*[] AllFocusFadeMat;//[Offset: 0x2f8, Size: 0x10] 0x78c37ad1c0
	LinearColor CenterAndBounds;//[Offset: 0x308, Size: 0x10] 0x78c377f080
	bool bAndorid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1] 0x78c377f000
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c761caa0
	void Construct();// 0x8a873f8 0x78c761cb80
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c761cc60
	void UpdateFocus(enum Type, bool bForceFade, bool bForceFadeCircle);// 0x8a873f8 0x78c761cd40
	void PlayDragAnim(bool bUp);// 0x8a873f8 0x78c761ce20
	void PlayFocusAnim(enum Type);// 0x8a873f8 0x78c761cf00
	void StartFocusAnim(float Duration);// 0x8a873f8 0x78c761cfe0
	void ExecuteUbergraph_BP_GuideTouchCulling(int EntryPoint, bool Temp_bool_Variable, bool Temp_bool_Variable, FString CallFunc_Conv_ColorToString_ReturnValue, Vector2D Temp_struct_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Array_Index_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, enum K2Node_CustomEvent_Type, bool K2Node_CustomEvent_bForceFade, bool K2Node_CustomEvent_bForceFadeCircle, float CallFunc_Subtract_FloatFloat_ReturnValue, float K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_GetLocalTopLeft_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, bool K2Node_CustomEvent_bUp, WidgetAnimation* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_CustomEvent_Type, bool K2Node_SwitchEnum_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_CustomEvent_Duration, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Geometry CallFunc_GetPlayerScreenWidgetGeometry_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, bool CallFunc_IsVisible_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_LocalToAbsolute_ReturnValue, Vector2D K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, float K2Node_Select_Default, bool CallFunc_EqualEqual_StrStr_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue);// 0x8a873f8 0x78c761d1a0
	void OnTouch__DelegateSignature();// 0x8a873f8 0x78c761d360

--------------------------------
Class: ABP_TeachingActor_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78c3f36100
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78c3f36080
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2f8, Size: 0x28] 0x78c3f36000
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x320, Size: 0x28] 0x78c3f35f80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x348, Size: 0x28] 0x78c3f35f00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x370, Size: 0x28] 0x78c3f35e80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x398, Size: 0x28] 0x78c3f35e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x3c0, Size: 0x28] 0x78c3f35d80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x3e8, Size: 0x28] 0x78c3f35d00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x410, Size: 0x28] 0x78c3f35c80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x438, Size: 0x28] 0x78c3f35c00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x460, Size: 0x28] 0x78c3f35b80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x488, Size: 0x28] 0x78c3f35b00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4b0, Size: 0x28] 0x78c3f35a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4d8, Size: 0x80] 0x78c3f35a00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x558, Size: 0x30] 0x78c3f35980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x588, Size: 0x80] 0x78c3f35900
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x608, Size: 0x30] 0x78c3f35880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x638, Size: 0x80] 0x78c3f35800
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x6b8, Size: 0x30] 0x78c3f35780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x6e8, Size: 0x80] 0x78c3f35700
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x768, Size: 0x30] 0x78c3f35680
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x798, Size: 0x28] 0x78c3f35600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x7c0, Size: 0x80] 0x78c3f35580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x840, Size: 0x30] 0x78c3f35500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x870, Size: 0x80] 0x78c3f35480
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x8f0, Size: 0x30] 0x78c3f35400
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x920, Size: 0xb0] 0x78c3f35380
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x9d0, Size: 0x30] 0x78c3f37400
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xa00, Size: 0x28] 0x78c3f37380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa28, Size: 0x80] 0x78c3f37300
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xaa8, Size: 0x30] 0x78c3f37280
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xad8, Size: 0x80] 0x78c3f37200
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xb58, Size: 0x30] 0x78c3f37180
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xb88, Size: 0xb0] 0x78c3f37100
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xc38, Size: 0x30] 0x78c3f37080
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xc68, Size: 0x80] 0x78c3f37000
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xce8, Size: 0x30] 0x78c3f36f80
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xd18, Size: 0xb0] 0x78c3f36f00
	bool bIsDoubleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 0x1] 0x78c3f36e80
	bool bIsQinggong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc9, Size: 0x1] 0x78c3f36e00
	BP_TeachingCharacter_C* BP Teaching Character;//[Offset: 0xdd0, Size: 0x8] 0x78c3f36d80
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 0x1] 0x78c3f36d00
	bool bIsWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd9, Size: 0x1] 0x78c3f36c80
	bool bIsAssassination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdda, Size: 0x1] 0x78c3f36c00
	bool bIsZhuiwei;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddb, Size: 0x1] 0x78c3f36b80
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c66645a0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c6664760
	void BlueprintInitializeAnimation();// 0x8a873f8 0x78c6664920
	void ExecuteUbergraph_ABP_TeachingActor(int EntryPoint, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_TeachingCharacter_C* K2Node_DynamicCast_AsBP_Teaching_Character, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_DeltaTimeX);// 0x8a873f8 0x78c6664a00

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4] 0x78cefb3a80

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 0x10] 0x78cf04cc00
	FName Name;//[Offset: 0x20, Size: 0x8] 0x78cf04cc80
	FName Group;//[Offset: 0x28, Size: 0x8] 0x78cf04cd00

--------------------------------
Class: AnimNode_Base

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78cf075980

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x38, Size: 0x8] 0x78cf075e00
	float PlayRateBasis;//[Offset: 0x40, Size: 0x4] 0x78cf075e80
	float PlayRate;//[Offset: 0x44, Size: 0x4] 0x78cf075f00
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x48, Size: 0x30] 0x78cf075f80
	float StartPosition;//[Offset: 0x78, Size: 0x4] 0x78cf076000
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x78cf076080

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	FName groupName;//[Offset: 0x10, Size: 0x8] 0x78cf03fc00
	byte GroupRole;//[Offset: 0x18, Size: 0x1] 0x78cf03fc80
	enum GroupScope;//[Offset: 0x19, Size: 0x1] 0x78cefd7f40
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x78cf03fd80
	float BlendWeight;//[Offset: 0x1c, Size: 0x4] 0x78cf03fe00
	float InternalTimeAccumulator;//[Offset: 0x20, Size: 0x4] 0x78cf03fe80

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cefb2400
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78cefb2480
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x78cefb2500
	InputRange InRange;//[Offset: 0x4, Size: 0x8] 0x78cefb2580
	InputRange OutRange;//[Offset: 0xc, Size: 0x8] 0x78cefb2700
	float Scale;//[Offset: 0x14, Size: 0x4] 0x78cefb2780
	float Bias;//[Offset: 0x18, Size: 0x4] 0x78cefb2800
	float ClampMin;//[Offset: 0x1c, Size: 0x4] 0x78cefb2880
	float ClampMax;//[Offset: 0x20, Size: 0x4] 0x78cefb2900
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4] 0x78cefb2980
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4] 0x78cefb2a00

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4] 0x78cefb2600
	float Max;//[Offset: 0x4, Size: 0x4] 0x78cefb2680

--------------------------------
Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 0x4] 0x78cf075c00
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 0x4] 0x78cf075c80
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78cf075d00
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78cf075d80

--------------------------------
Class: BP_TeachingCharacter_C.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c0, Size: 0x8] 0x78c67bae00
	enum TeachingType;//[Offset: 0x4c8, Size: 0x1] 0x78c441a600
	Vector End Location;//[Offset: 0x4cc, Size: 0xc] 0x78c67bad00
	Vector Start Location;//[Offset: 0x4d8, Size: 0xc] 0x78c67bac80
	float Duration;//[Offset: 0x4e4, Size: 0x4] 0x78c67bac00
	float LocalPlayTime;//[Offset: 0x4e8, Size: 0x4] 0x78c67bab80
	bool bDoubleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 0x1] 0x78c67bab00
	bool bQingGong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 0x1] 0x78c67baa80
	float ArriveEndTime;//[Offset: 0x4f0, Size: 0x4] 0x78c67baa00
	bool bArriveEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 0x1] 0x78c67ba980
	Rotator InitialRotation;//[Offset: 0x4f8, Size: 0xc] 0x78c67ba900
	bool bFirstJumpOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1] 0x78c67ba880
	Vector[] Points;//[Offset: 0x508, Size: 0x10] 0x78c441a560
	bool bArriveStage1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1] 0x78c67ba780
	bool bWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1] 0x78c67ba700
	bool bArriveStage2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 0x1] 0x78c67ba580
	bool bFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51b, Size: 0x1] 0x78c67bc700
	bool bArriveStage3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1] 0x78c67bc680
	bool bAssassination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 0x1] 0x78c67bc600
	bool bZhuiWei;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 0x1] 0x78c67bc580
	void TickKongYaHouse(float Time, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c6330940
	void KongYaHouse();// 0x8a873f8 0x78c6330a20
	void Tick Kong Ya Roof(float Time, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c6330b00
	void KongYaRoof();// 0x8a873f8 0x78c6330be0
	void SetDoubleJumpFinalLoc(const Actor*[] Temp_object_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetUpVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x8a873f8 0x78c6330cc0
	void GetDoubleJumpVelocity(int Stage, out Vector Velocity, int Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, float K2Node_Select_Default, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, float K2Node_Select_Default, float Temp_float_Variable, float Temp_float_Variable, float K2Node_Select_Default, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x8a873f8 0x78c6330da0
	void Tick Kong Ya Tree(float Time, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x8a873f8 0x78c6330e80
	void Kong Ya Tree(int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c6330f60
	void StartContinuousAction(enum Teaching, out Vector[] Points, float Duration, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c6331040
	void Double Jump(int Stage, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_GetDoubleJumpVelocity_Velocity, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x8a873f8 0x78c6331120
	void Tick Qing Gong(float Time, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c6331200
	void SetQingGongRotationAndInput(const Actor*[] Temp_object_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_GetScaledCapsuleRadius_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x8a873f8 0x78c63312e0
	void QingGong(bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x8a873f8 0x78c63313c0
	void TickDoubleJump(float B, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c63314a0
	void StartAction(enum TeachingType, Vector startLocation, Vector EndLocation, float Duration, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c6331580
	void UserConstructionScript(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c6331660
	void ReceiveBeginPlay();// 0x8a873f8 0x78c6331740
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c6331900
	void ExecuteUbergraph_BP_TeachingCharacter(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, float K2Node_Event_DeltaSeconds, bool K2Node_SwitchEnum_CmpSuccess, Rotator CallFunc_K2_GetActorRotation_ReturnValue);// 0x8a873f8 0x78c6331ac0

--------------------------------
Class: BP_Sky_Sphere_C.Actor.Object
	StaticMeshComponent* SkySphereMesh;//[Offset: 0x220, Size: 0x8] 0x78c6855280
	SceneComponent* Base;//[Offset: 0x228, Size: 0x8] 0x78c6855200
	MaterialInstanceDynamic* Sky material;//[Offset: 0x230, Size: 0x8] 0x78c6855180
	bool Refresh material;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78c6855100
	DirectionalLight* Directional light actor;//[Offset: 0x240, Size: 0x8] 0x78c6855080
	bool Colors determined by sun position;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x78c6855000
	float Sun height;//[Offset: 0x24c, Size: 0x4] 0x78c6854f80
	float Sun brightness;//[Offset: 0x250, Size: 0x4] 0x78c6854f00
	float Horizon falloff;//[Offset: 0x254, Size: 0x4] 0x78c6854e80
	LinearColor Zenith Color;//[Offset: 0x258, Size: 0x10] 0x78c6854e00
	LinearColor Horizon color;//[Offset: 0x268, Size: 0x10] 0x78c6854d80
	LinearColor Cloud color;//[Offset: 0x278, Size: 0x10] 0x78c6854d00
	LinearColor Overall color;//[Offset: 0x288, Size: 0x10] 0x78c6854c80
	float Cloud speed;//[Offset: 0x298, Size: 0x4] 0x78c6854c00
	float Cloud opacity;//[Offset: 0x29c, Size: 0x4] 0x78c6854b80
	float Stars brightness;//[Offset: 0x2a0, Size: 0x4] 0x78c6854b00
	CurveLinearColor* Horizon color curve;//[Offset: 0x2a8, Size: 0x8] 0x78c6854a80
	CurveLinearColor* Zenith color curve;//[Offset: 0x2b0, Size: 0x8] 0x78c6854a00
	CurveLinearColor* Cloud color curve;//[Offset: 0x2b8, Size: 0x8] 0x78c6854980
	void RefreshMaterial(float CallFunc_Abs_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Lerp_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector CallFunc_Conv_RotatorToVector_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue);// 0x8a873f8 0x78c6333960
	void UpdateSunDirection(bool CallFunc_Less_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, float CallFunc_Abs_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue);// 0x8a873f8 0x78c6330160
	void UserConstructionScript(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x8a873f8 0x78c6330320

--------------------------------
Class: Skin_HuaXiangYi_ChiBang_Skeleton_AnimBlueprint_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78c6855480
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78c6855400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2f8, Size: 0x80] 0x78c6855380
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x378, Size: 0xa0] 0x78c6855300
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x418, Size: 0xe8] 0x78c6857380
	bool IsOpen?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1] 0x78c6857300
	float Input_x;//[Offset: 0x504, Size: 0x4] 0x78c6857280
	float Input_y;//[Offset: 0x508, Size: 0x4] 0x78c6857200
	BP_WuXiaX_Character_C* Player;//[Offset: 0x510, Size: 0x8] 0x78c6857180
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c6332c40
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c6332e00
	void ExecuteUbergraph_Skin_HuaXiangYi_ChiBang_Skeleton_AnimBlueprint(int EntryPoint, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float K2Node_Event_DeltaTimeX);// 0x8a873f8 0x78c6332ee0

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78cf043b00

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 0x10] 0x78cefd9b60
	float[] BlendTime;//[Offset: 0x20, Size: 0x10] 0x78cefd9c00
	enum TransitionType;//[Offset: 0x30, Size: 0x1] 0x78cefd9ca0
	enum BlendType;//[Offset: 0x31, Size: 0x1] 0x78cefd9d40
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x78cf043d80
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 0x8] 0x78cf043e00
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 0x8] 0x78cf043e80

--------------------------------
Class: AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	float X;//[Offset: 0x34, Size: 0x4] 0x78cf041080
	float Y;//[Offset: 0x38, Size: 0x4] 0x78cf03f800
	float Z;//[Offset: 0x3c, Size: 0x4] 0x78cf03f880
	float PlayRate;//[Offset: 0x40, Size: 0x4] 0x78cf03f900
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78cf03f980
	bool bResetPlayTimeWhenBlendSpaceChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78cf03fa00
	float StartPosition;//[Offset: 0x48, Size: 0x4] 0x78cf03fa80
	BlendSpaceBase* BlendSpace;//[Offset: 0x50, Size: 0x8] 0x78cf03fb00
	BlendSpaceBase* PreviousBlendSpace;//[Offset: 0xe0, Size: 0x8] 0x78cf03fb80

--------------------------------
Class: BP_WuXiaX_Character_C.WuXiaXCharacter.WuXiaXNpcCharacter.WuXiaXBaseCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xae0, Size: 0x8] 0x78c4ffa200
	BP_GhostTrailComponent_C* BP_GhostTrailComponent;//[Offset: 0xae8, Size: 0x8] 0x78c4ffa180
	WidgetComponent* expression;//[Offset: 0xaf0, Size: 0x8] 0x78c4ffa100
	StaticMeshComponent* poisonEffect;//[Offset: 0xaf8, Size: 0x8] 0x78c4ffa080
	StaticMeshComponent* InWaterEffect;//[Offset: 0xb00, Size: 0x8] 0x78c4ffa000
	SphereComponent* Sphere;//[Offset: 0xb08, Size: 0x8] 0x78c4ff9f80
	WidgetComponent* HealthBar;//[Offset: 0xb10, Size: 0x8] 0x78c4ff9f00
	WidgetComponent* Widget;//[Offset: 0xb18, Size: 0x8] 0x78c4ff9e80
	RayOcclude* RayOcclude;//[Offset: 0xb20, Size: 0x8] 0x78c4ff9e00
	WidgetComponent* playerFightState;//[Offset: 0xb28, Size: 0x8] 0x78c4ff9d80
	ArrowComponent* Arrow3;//[Offset: 0xb30, Size: 0x8] 0x78c4ff9d00
	ArrowComponent* Arrow2;//[Offset: 0xb38, Size: 0x8] 0x78c4ff9c80
	ArrowComponent* Arrow1;//[Offset: 0xb40, Size: 0x8] 0x78c4ff9c00
	float Timeline_2_NewTrack_0_90D30D3B4944877CB66B0EB485C63D94;//[Offset: 0xb48, Size: 0x4] 0x78c4ff9b80
	byte Timeline_2__Direction_90D30D3B4944877CB66B0EB485C63D94;//[Offset: 0xb4c, Size: 0x1] 0x78c4ff9b00
	TimelineComponent* Timeline;//[Offset: 0xb50, Size: 0x8] 0x78c4ff9a80
	float Timeline_1_Value_486A5C90452D92C6134F5BB825508875;//[Offset: 0xb58, Size: 0x4] 0x78c4ff9a00
	byte Timeline_1__Direction_486A5C90452D92C6134F5BB825508875;//[Offset: 0xb5c, Size: 0x1] 0x78c4ff9980
	TimelineComponent* Timeline;//[Offset: 0xb60, Size: 0x8] 0x78c4ff9900
	float Timeline_0_Time_BF6A34F547F47A32F6B41FA0EABA83EF;//[Offset: 0xb68, Size: 0x4] 0x78c4ff9880
	byte Timeline_0__Direction_BF6A34F547F47A32F6B41FA0EABA83EF;//[Offset: 0xb6c, Size: 0x1] 0x78c4ff9800
	TimelineComponent* Timeline;//[Offset: 0xb70, Size: 0x8] 0x78c4ff9780
	float PostBloodTime_Value_E0444E4B4CC5B56F71A79581B8D7D35E;//[Offset: 0xb78, Size: 0x4] 0x78c4ff9700
	byte PostBloodTime__Direction_E0444E4B4CC5B56F71A79581B8D7D35E;//[Offset: 0xb7c, Size: 0x1] 0x78c4ff9680
	TimelineComponent* PostBloodTime;//[Offset: 0xb80, Size: 0x8] 0x78c4ff9600
	float TimeLine_XuRuo_Value_2_5E50A2294FB9486355AEDEA8520DCE87;//[Offset: 0xb88, Size: 0x4] 0x78c4ff9580
	float TimeLine_XuRuo_Value_1_5E50A2294FB9486355AEDEA8520DCE87;//[Offset: 0xb8c, Size: 0x4] 0x78c4ff9500
	float TimeLine_XuRuo_Value_0_5E50A2294FB9486355AEDEA8520DCE87;//[Offset: 0xb90, Size: 0x4] 0x78c4ffb580
	byte TimeLine_XuRuo__Direction_5E50A2294FB9486355AEDEA8520DCE87;//[Offset: 0xb94, Size: 0x1] 0x78c4ffb500
	TimelineComponent* TimeLine_XuRuo;//[Offset: 0xb98, Size: 0x8] 0x78c4ffb480
	Rotator Rotation;//[Offset: 0xba0, Size: 0xc] 0x78c4ffb400
	bool ShowingSwordEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac, Size: 0x1] 0x78c4ffb380
	LockPoint_C* LockPoint;//[Offset: 0xbb0, Size: 0x8] 0x78c4ffb300
	AssassinationTipWidget_C* AssassinationTip;//[Offset: 0xbb8, Size: 0x8] 0x78c4ffb280
	BP_PlayerAnim_C* AnimInstance;//[Offset: 0xbc0, Size: 0x8] 0x78c4ffb200
	float IKFeetInterpSpeed;//[Offset: 0xbc8, Size: 0x4] 0x78c4ffb180
	float IKHipsInterpSpeed;//[Offset: 0xbcc, Size: 0x4] 0x78c4ffb100
	float IKCapsuleHalfHeight;//[Offset: 0xbd0, Size: 0x4] 0x78c4ffb080
	bool IKOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd4, Size: 0x1] 0x78c4ffb000
	float IKTrcaeDistance;//[Offset: 0xbd8, Size: 0x4] 0x78c4ffaf80
	FName LeftFootSocket;//[Offset: 0xbdc, Size: 0x8] 0x78c4ffaf00
	FName RightFootSocket;//[Offset: 0xbe4, Size: 0x8] 0x78c4ffae80
	float IKAdjustOffset;//[Offset: 0xbec, Size: 0x4] 0x78c4ffae00
	float IKTimeout;//[Offset: 0xbf0, Size: 0x4] 0x78c4ffad80
	float IKCapsuleHalfHeight_Save;//[Offset: 0xbf4, Size: 0x4] 0x78c4ffad00
	int CurrGhostCount;//[Offset: 0xbf8, Size: 0x4] 0x78c4ffac80
	SkeletalMeshComponent* Parachue_Skeletal_Component;//[Offset: 0xc00, Size: 0x8] 0x78c4ffac00
	SkeletalMeshComponent* Parachue_Skeletal_Component;//[Offset: 0xc08, Size: 0x8] 0x78c4ffab80
	bool IsPressSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 0x1] 0x78c4ffab00
	MaterialInstanceDynamic* Post_Blood;//[Offset: 0xc18, Size: 0x8] 0x78c4ffaa80
	AudioComponent* Sound_XinTiao;//[Offset: 0xc20, Size: 0x8] 0x78c4ffaa00
	AudioComponent* Sound_XuRuo;//[Offset: 0xc28, Size: 0x8] 0x78c4ffa980
	PointLightComponent* CameraLight;//[Offset: 0xc30, Size: 0x8] 0x78c4ffa900
	BP_WuXiaX_PlayerController_C* WuXiaXPlayerController;//[Offset: 0xc38, Size: 0x8] 0x78c4ffa880
	<int,NiagaraComponent*> BuffEffect;//[Offset: 0xc40, Size: 0x50] 0x78c37d3dc0
	Mesh_CY_Attach_C* Baoqi_BaTi;//[Offset: 0xc90, Size: 0x8] 0x78c4ffa700
	LianJi_C* Combo;//[Offset: 0xc98, Size: 0x8] 0x78c4ffa680
	DisplayHP_C* HealthBarWidget;//[Offset: 0xca0, Size: 0x8] 0x78c4ffa600
	bool ShowHp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 0x1] 0x78c4ffa580
	float HealthBarVisibleDelay;//[Offset: 0xcac, Size: 0x4] 0x78c4ffc600
	bool enterwater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 0x1] 0x78c4ffc580
	NiagaraComponent* dizzcom;//[Offset: 0xcb8, Size: 0x8] 0x78c4ffc500
	byte[] Object Types;//[Offset: 0xcc0, Size: 0x10] 0x78b9b077c0
	MaterialBillboardComponent* bill_niu;//[Offset: 0xcd0, Size: 0x8] 0x78c4ffc400
	MaterialBillboardComponent* bill_aim;//[Offset: 0xcd8, Size: 0x8] 0x78c4ffc380
	TimerHandle PlayerExpressionEvent;//[Offset: 0xce0, Size: 0x8] 0x78c4ffc300
	bool IsInRangeWeaponState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 0x1] 0x78c4ffc280
	BP_TeachingCharacter_C* TeachingCharacter;//[Offset: 0xcf0, Size: 0x8] 0x78c4ffc200
	TimerHandle LowPriorityTimer;//[Offset: 0xcf8, Size: 0x8] 0x78c4ffc180
	TimerHandle HighPriorityTimer;//[Offset: 0xd00, Size: 0x8] 0x78c4ffc100
	void CheckPlayerStateWidget(ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerStateComponent* K2Node_DynamicCast_AsPlayer_State_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetPlayerChildState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, PlayerStateWidget_C* K2Node_DynamicCast_AsPlayer_State_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3325800
	void CheckExpressionShow(PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, ExprerssionWidget_C* K2Node_DynamicCast_AsExprerssion_Widget, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsVisible_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c33258e0
	void CheckHealthBarVisible(float Temp_float_Variable, float Temp_float_Variable, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, WuXiaXBaseCharacter* CallFunc_GetCurrentVisionPlayer_ReturnValue, float CallFunc_Square_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetSquaredDistanceTo_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, float K2Node_Select_Default);// 0x8a873f8 0x78c33259c0
	void GetJumpUpMotage(out AnimMontage* NewParam, GameInstance* CallFunc_GetGameInstance_ReturnValue, PlayerViewComponent* CallFunc_GetComponentByClass_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, AnimMontage* CallFunc_Array_Get_Item, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, AnimMontage* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c3325aa0
	void GetJumpStepMotage(int index, out AnimMontage* NewParam, bool K2Node_SwitchInteger_CmpSuccess, PlayerViewComponent* CallFunc_GetComponentByClass_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, AnimMontage* CallFunc_Array_Get_Item, AnimMontage* CallFunc_Array_Get_Item, AnimMontage* CallFunc_Array_Get_Item, AnimMontage* CallFunc_Array_Get_Item, AnimMontage* CallFunc_Array_Get_Item, AnimMontage* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c3325b80
	void SetAnimInstance(bool CallFunc_IsDedicatedServer_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, BP_PlayerAnim_C* K2Node_DynamicCast_AsBP_Player_Anim, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3325c60
	void CleanComponents(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3325d40
	void CheckFreeJump(out bool freejump, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerSquadComponent* K2Node_DynamicCast_AsPlayer_Squad_Component, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetCurrentFollowPlayerID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c3325e20
	void Check Health Bar Visible Delay(float DeltaSeconds, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, WuXiaXBaseCharacter* CallFunc_GetCurrentVisionPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetComponentScale_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_DistanceSquared_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Transform CallFunc_GetSocketTransform_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3325f00
	void PropertyComponent(out PlayerPropertyComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerPropertyComponent* K2Node_DynamicCast_AsPlayer_Property_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3325fe0
	void PrepareShowHp(UserWidget* CallFunc_GetWidget_ReturnValue, bool CallFunc_IsValid_ReturnValue, DisplayHP_C* K2Node_DynamicCast_AsDisplay_HP, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c33260c0
	void SetWeather(int WeatherRandom, BP_Sky_Sphere_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_InRange_IntInt_ReturnValue, BP_Sky_Sphere_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, SkyLight*[] CallFunc_GetAllActorsOfClass_OutActors, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, DirectionalLight*[] CallFunc_GetAllActorsOfClass_OutActors, DirectionalLight* CallFunc_Array_Get_Item, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c33261a0
	void Combo Attack(bool ComboAtk, bool ComboBreak, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_HasAuthority_ReturnValue);// 0x8a873f8 0x78c3326280
	void StartRayOcclusion();// 0x8a873f8 0x78c3326360
	void ViewComponent(out PlayerViewComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326440
	void CheckShowHeadBillboard();// 0x8a873f8 0x78c3326520
	void PlayerInputComponent(out PlayerInputComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerInputComponent* K2Node_DynamicCast_AsPlayer_Input_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326600
	void InteractiveComponent(out PlayerInteractiveComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerInteractiveComponent* K2Node_DynamicCast_AsPlayer_Interactive_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c33266e0
	void AssassinationComponent(out PlayerAssassinationComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerAssassinationComponent* K2Node_DynamicCast_AsPlayer_Assassination_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c33267c0
	void SquadComponent(out PlayerSquadComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerSquadComponent* K2Node_DynamicCast_AsPlayer_Squad_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c33268a0
	void StateComponent(out PlayerStateComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerStateComponent* K2Node_DynamicCast_AsPlayer_State_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326980
	void SkillsComponent(out PlayerSkillsComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerSkillsComponent* K2Node_DynamicCast_AsPlayer_Skills_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326a60
	void KeepActionComponent(out PlayerKeepActionComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerKeepActionComponent* K2Node_DynamicCast_AsPlayer_Keep_Action_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326b40
	void HorseRideComponent(out HorseRideComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, HorseRideComponent* K2Node_DynamicCast_AsHorse_Ride_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326c20
	void MovementComponent(out WuXia_Movement_Component* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, WuXia_Movement_Component* K2Node_DynamicCast_AsWu_Xia_Movement_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326d00
	void FightComponent(out PlayerFightComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerFightComponent* K2Node_DynamicCast_AsPlayer_Fight_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326de0
	void ItemCtrlComponent(out PlayerItemCtrlComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3326ec0
	void NormalAttackReleased(PlayerFightComponent* CallFunc_FightComponent_Component, bool CallFunc_CanInput_ReturnValue);// 0x8a873f8 0x78c3326fa0
	void NormalAttackPressed(PlayerFightComponent* CallFunc_FightComponent_Component, PlayerFightComponent* CallFunc_FightComponent_Component, bool CallFunc_CheckIsInRangeWeaponState_ReturnValue, bool CallFunc_CanInput_ReturnValue);// 0x8a873f8 0x78c3327080
	void HUDWidgetValid(out bool Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c3327160
	void GetHUD(out WuXiaXHUD* HUD, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3327240
	void PlayerSkillAttack(enum index, bool isPress, enum input_type, int skill_index, enum AttackIndex, PlayerFightComponent* CallFunc_FightComponent_Component, bool CallFunc_CanInput_ReturnValue, bool CallFunc_CanInput_ReturnValue, PlayerFightComponent* CallFunc_FightComponent_Component, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3327320
	void GetAIID();// 0x8a873f8 0x78c3323a40
	void SwordEffectTick(ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, WuXia_AnimInstance* K2Node_DynamicCast_AsWu_Xia_Anim_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CurrentMontageSlotPlay_ReturnValue);// 0x8a873f8 0x78c3323b20
	void UserConstructionScript(float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue);// 0x8a873f8 0x78c3323c00
	void TimeLine_XuRuo__FinishedFunc();// 0x8a873f8 0x78c3323dc0
	void TimeLine_XuRuo__UpdateFunc();// 0x8a873f8 0x78c3323ea0
	void PostBloodTime__FinishedFunc();// 0x8a873f8 0x78c3323f80
	void PostBloodTime__UpdateFunc();// 0x8a873f8 0x78c3324060
	void Timeline_0__FinishedFunc();// 0x8a873f8 0x78c3324140
	void Timeline_0__UpdateFunc();// 0x8a873f8 0x78c3324220
	void Timeline_1__FinishedFunc();// 0x8a873f8 0x78c3324300
	void Timeline_1__UpdateFunc();// 0x8a873f8 0x78c33243e0
	void Timeline_2__FinishedFunc();// 0x8a873f8 0x78c33244c0
	void Timeline_2__UpdateFunc();// 0x8a873f8 0x78c33245a0
	void InpActEvt_LastPlayer_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3324680
	void InpActEvt_NextPlayer_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3324760
	void InpActEvt_SwitchShowCharacter_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3324840
	void OnNotifyEnd_651E53BB4BACC9B03A38DB968ED861D0(FName NotifyName);// 0x8a873f8 0x78c3324920
	void OnNotifyBegin_651E53BB4BACC9B03A38DB968ED861D0(FName NotifyName);// 0x8a873f8 0x78c3324a00
	void OnInterrupted_651E53BB4BACC9B03A38DB968ED861D0(FName NotifyName);// 0x8a873f8 0x78c3324ae0
	void OnBlendOut_651E53BB4BACC9B03A38DB968ED861D0(FName NotifyName);// 0x8a873f8 0x78c3324bc0
	void OnCompleted_651E53BB4BACC9B03A38DB968ED861D0(FName NotifyName);// 0x8a873f8 0x78c3324ca0
	void OnNotifyEnd_A3E2E318438767C607F3A7AF6D958A0A(FName NotifyName);// 0x8a873f8 0x78c3324d80
	void OnNotifyBegin_A3E2E318438767C607F3A7AF6D958A0A(FName NotifyName);// 0x8a873f8 0x78c3324e60
	void OnInterrupted_A3E2E318438767C607F3A7AF6D958A0A(FName NotifyName);// 0x8a873f8 0x78c3324f40
	void OnBlendOut_A3E2E318438767C607F3A7AF6D958A0A(FName NotifyName);// 0x8a873f8 0x78c3325020
	void OnCompleted_A3E2E318438767C607F3A7AF6D958A0A(FName NotifyName);// 0x8a873f8 0x78c3325100
	void OnNotifyEnd_B52B590F422A39B7896CB0A07F76A28E(FName NotifyName);// 0x8a873f8 0x78c33251e0
	void OnNotifyBegin_B52B590F422A39B7896CB0A07F76A28E(FName NotifyName);// 0x8a873f8 0x78c33252c0
	void OnInterrupted_B52B590F422A39B7896CB0A07F76A28E(FName NotifyName);// 0x8a873f8 0x78c33253a0
	void OnBlendOut_B52B590F422A39B7896CB0A07F76A28E(FName NotifyName);// 0x8a873f8 0x78c3325480
	void OnCompleted_B52B590F422A39B7896CB0A07F76A28E(FName NotifyName);// 0x8a873f8 0x78c3325560
	void OnNotifyEnd_52FC3CE04FC6258DCA4E058DDDC63AB4(FName NotifyName);// 0x8a873f8 0x78c3325640
	void OnNotifyBegin_52FC3CE04FC6258DCA4E058DDDC63AB4(FName NotifyName);// 0x8a873f8 0x78c3321d60
	void OnInterrupted_52FC3CE04FC6258DCA4E058DDDC63AB4(FName NotifyName);// 0x8a873f8 0x78c3321e40
	void OnBlendOut_52FC3CE04FC6258DCA4E058DDDC63AB4(FName NotifyName);// 0x8a873f8 0x78c3321f20
	void OnCompleted_52FC3CE04FC6258DCA4E058DDDC63AB4(FName NotifyName);// 0x8a873f8 0x78c3322000
	void OnNotifyEnd_3F9AF95A4C89C9FB93DFD68BC845593D(FName NotifyName);// 0x8a873f8 0x78c33220e0
	void OnNotifyBegin_3F9AF95A4C89C9FB93DFD68BC845593D(FName NotifyName);// 0x8a873f8 0x78c33221c0
	void OnInterrupted_3F9AF95A4C89C9FB93DFD68BC845593D(FName NotifyName);// 0x8a873f8 0x78c33222a0
	void OnBlendOut_3F9AF95A4C89C9FB93DFD68BC845593D(FName NotifyName);// 0x8a873f8 0x78c3322380
	void OnCompleted_3F9AF95A4C89C9FB93DFD68BC845593D(FName NotifyName);// 0x8a873f8 0x78c3322460
	void OnNotifyEnd_90B6CFA54DB0EC5D9C003B8D17FA1BD4(FName NotifyName);// 0x8a873f8 0x78c3322540
	void OnNotifyBegin_90B6CFA54DB0EC5D9C003B8D17FA1BD4(FName NotifyName);// 0x8a873f8 0x78c3322620
	void OnInterrupted_90B6CFA54DB0EC5D9C003B8D17FA1BD4(FName NotifyName);// 0x8a873f8 0x78c3322700
	void OnBlendOut_90B6CFA54DB0EC5D9C003B8D17FA1BD4(FName NotifyName);// 0x8a873f8 0x78c33227e0
	void OnCompleted_90B6CFA54DB0EC5D9C003B8D17FA1BD4(FName NotifyName);// 0x8a873f8 0x78c33228c0
	void InpActEvt_Explosion_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c33229a0
	void InpActEvt_NormalAttack_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3322a80
	void InpActEvt_NormalAttack_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3322b60
	void InpActEvt_UseItemThree_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3322c40
	void InpActEvt_UseItemTwo_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3322d20
	void InpActEvt_UseItemOne_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3322e00
	void InpActEvt_SkillThree_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3322ee0
	void InpActEvt_SkillThree_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3322fc0
	void InpActEvt_SkillTwo_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c33230a0
	void InpActEvt_SkillTwo_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3323180
	void InpActEvt_SkillOne_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3323260
	void InpActEvt_SkillOne_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3323340
	void InpActEvt_HeavyAttack_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c3323420
	void Event_XuRuo_Enter();// 0x8a873f8 0x78c3323500
	void Event_XuRuo_Leave();// 0x8a873f8 0x78c33235e0
	void Show_GhostTrails();// 0x8a873f8 0x78c33236c0
	void Show_GhostTrail();// 0x8a873f8 0x78c33237a0
	void Event_SetPostBlood(float CurrHealth, float MaxHealth);// 0x8a873f8 0x78c3323880
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c3323960
	void ReceiveBeginPlay();// 0x8a873f8 0x78c3320080
	void CE_ShowShanBiEffect();// 0x8a873f8 0x78c3320160
	void ServerDebugAutoAttack();// 0x8a873f8 0x78c3320240
	void CE_JiaSu_Begin();// 0x8a873f8 0x78c3320320
	void CE_JiaSu_End();// 0x8a873f8 0x78c3320400
	void DebugAutoAttack();// 0x8a873f8 0x78c33204e0
	void SetBlackScreenState(bool State);// 0x8a873f8 0x78c33205c0
	void ShowAnimus(int index);// 0x8a873f8 0x78c33206a0
	void FreeViewTurnBack();// 0x8a873f8 0x78c3320780
	void FreeViewStopTurnBack();// 0x8a873f8 0x78c3320860
	void PickItemOut(Actor* val);// 0x8a873f8 0x78c3320940
	void PickItemEnter(Actor* val);// 0x8a873f8 0x78c3320a20
	void CE_UseItemEffect();// 0x8a873f8 0x78c3320b00
	void CE_CharacterColor_Enter(int EffectType);// 0x8a873f8 0x78c3320be0
	void CE_CharacterColor_Leave(int EffectType);// 0x8a873f8 0x78c32bf2e0
	void CreateParachu();// 0x8a873f8 0x78c3320cc0
	void PlayJumpStepOn(float steph, float Height);// 0x8a873f8 0x78c3320da0
	void PlayJumpStepUp(float steph, float Height);// 0x8a873f8 0x78c3320e80
	void PlayJumpStep(float Height);// 0x8a873f8 0x78c3320f60
	void ReceiveDestroyed();// 0x8a873f8 0x78c3321040
	void OnActorChangeVisible();// 0x8a873f8 0x78c3321120
	void GameReady();// 0x8a873f8 0x78c3321200
	void RainLod(int Quality);// 0x8a873f8 0x78c33212e0
	void Anim_EndParachuteGliding();// 0x8a873f8 0x78c33213c0
	void Anim_BeginParachuteGliding();// 0x8a873f8 0x78c33214a0
	void Anim_BeginParachueJump();// 0x8a873f8 0x78c3321580
	void Anim_BeginEffect(int EffectType);// 0x8a873f8 0x78c3321660
	void Anim_EndEffect(int EffectType);// 0x8a873f8 0x78c3321740
	void ShowHPDelay(float Delay);// 0x8a873f8 0x78c3321820
	void OnPlayerEnterState(enum State);// 0x8a873f8 0x78c3321900
	void OnPlayerLeaveState(enum State);// 0x8a873f8 0x78c33219e0
	void Client_UpdateOutLine(bool vis, float Delay);// 0x8a873f8 0x78c3321ac0
	void MeshEnterInvaisibleState(enum StealthType);// 0x8a873f8 0x78c3321ba0
	void MeshOutOfInvaisibleState();// 0x8a873f8 0x78c3321c80
	void StealthTakeWeapon(SkeletalMeshComponent* comp);// 0x8a873f8 0x78c32be780
	void Server_AdjustYaw(float Yaw);// 0x8a873f8 0x78c32be860
	void UpdatePlayerMarkedState(bool marked);// 0x8a873f8 0x78c32be940
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8a873f8 0x78c32bea20
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x8a873f8 0x78c32beb00
	void BlockBreaked();// 0x8a873f8 0x78c32bebe0
	void InPoisonFog(bool infog);// 0x8a873f8 0x78c32becc0
	void PlayerExpression(int ID);// 0x8a873f8 0x78c32beda0
	void OnPlayerExpression();// 0x8a873f8 0x78c32bee80
	void OnAnimOpened();// 0x8a873f8 0x78c32bef60
	void KnockDowned();// 0x8a873f8 0x78c32bf040
	void LightMeshColor(Vector Color);// 0x8a873f8 0x78c32bf120
	void CreateTeachingCharacter(enum Type, out const Vector[] Points, out const Rotator Rot, float Duration);// 0x8a873f8 0x78c32bf200
	void DestroyTeachingCharacter();// 0x8a873f8 0x78c32bf3c0
	void OnJumped();// 0x8a873f8 0x78c32bf4a0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x8a873f8 0x78c32bf580
	void LowPriorityTickTimer();// 0x8a873f8 0x78c32bf660
	void ReceiveEndPlay(byte EndPlayReason);// 0x8a873f8 0x78c32bf740
	void HighPriorityTickTimer();// 0x8a873f8 0x78c32bf820
	void ForcedDodge();// 0x8a873f8 0x78c32bf900
	void Block(bool bIsForcedBlock);// 0x8a873f8 0x78c32bf9e0
	void CustomShowGhostTrails(int TrailNum, float TimeInterval, LinearColor TrailColor);// 0x8a873f8 0x78c32bfac0
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult hit);// 0x8a873f8 0x78c32bfba0
	void ChangeAssassinationUIText();// 0x8a873f8 0x78c32bfc80
	void CheckLockPointDeath(Actor* Enemy);// 0x8a873f8 0x78c32bfd60
	void HideAssassinationTipUI();// 0x8a873f8 0x78c32bfe40
	void ShowAssassinationTipUI(Actor* Target);// 0x8a873f8 0x78c32bff20
	void HideLockTargetUI();// 0x8a873f8 0x78c32bcaa0
	void ShowLockTargetUI(Actor* Target, bool Control);// 0x8a873f8 0x78c32bcb80
	void WeaponSwitch(int Value);// 0x8a873f8 0x78c32bcc60
	void OnPlayerArmorChanged(float CurrentArmor, float MaxArmor);// 0x8a873f8 0x78c32bcd40
	void OnPlayerHpChanged(int currentHP, int maxHP);// 0x8a873f8 0x78c32bce20
	void PlayBlockEffect();// 0x8a873f8 0x78c32bcf00
	void PlayClientAttackEffect(float Angle);// 0x8a873f8 0x78c32bcfe0
	void PlayBeAttackEffect();// 0x8a873f8 0x78c32bd0c0
	void PlayAttackEffect();// 0x8a873f8 0x78c32bd1a0
	void Bom_Montage_Play(SkeletalMeshComponent* SkeletalMesh, AnimMontage* MontageToPlay, float delay_time, FName section_name);// 0x8a873f8 0x78c32bd280
	void CE_SetCameraSocketOffset(Vector Vector, float Speed);// 0x8a873f8 0x78c32bd360
	void CE_SetCameraLength(float In_X, Vector In_YZ, float Speed, float FieldValue, float Target);// 0x8a873f8 0x78c32bd520
	void CE_SetCameraLagSpeed(float Value, float Speed);// 0x8a873f8 0x78c32bdb40
	void ExecuteUbergraph_BP_WuXiaX_Character(int EntryPoint, enum Temp_byte_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, enum Temp_byte_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, int Temp_int_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, const Transform Temp_struct_Variable, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, const Transform Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, Anchors K2Node_MakeStruct_Anchors, delegate K2Node_CreateDelegate_OutputDelegate, MaterialInterface* K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, bool Temp_bool_Variable, int CallFunc_Subtract_IntInt_ReturnValue, FName Temp_name_Variable, FName Temp_name_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, Transform CallFunc_MakeTransform_ReturnValue, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, Skin_HuaXiangYi_ChiBang_Skeleton_AnimBlueprint_C* K2Node_DynamicCast_AsSkin_Hua_Xiang_Yi_Chi_Bang_Skeleton_Anim_Blueprint, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsLocallyControlled_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_CustomEvent_CurrHealth, float K2Node_CustomEvent_MaxHealth, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Divide_FloatFloat_ReturnValue, AudioComponent* CallFunc_CreateSound2D_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Mesh_CY_Attach_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsPlaying_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, float K2Node_Event_DeltaSeconds, PlayerFightComponent* CallFunc_FightComponent_Component, BP_PlayerAnim_Sound_C* K2Node_DynamicCast_AsBP_Player_Anim_Sound, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, LianJi_C* CallFunc_Create_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_WuXiaX_Character_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsDeath_ReturnValue, BP_WuXiaX_PlayerController_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Player_Controller, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, FName Temp_name_Variable, bool K2Node_Event_state, int K2Node_Event_Index, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Controller* CallFunc_GetController_ReturnValue, Rotator CallFunc_GetControlRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int Temp_int_Array_Index_Variable, PlayerSquadComponent* CallFunc_SquadComponent_Component, FName K2Node_CustomEvent_NotifyName, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerFightComponent* CallFunc_FightComponent_Component, Actor* K2Node_Event_val, Actor* K2Node_Event_val, PickItem* K2Node_DynamicCast_AsPick_Item, bool K2Node_DynamicCast_bSuccess, PickItem* K2Node_DynamicCast_AsPick_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int K2Node_CustomEvent_effecttype, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_Conv_LinearColorToVector_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, int CallFunc_Add_IntInt_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int K2Node_Event_effecttype, bool K2Node_SwitchInteger_CmpSuccess, int Temp_int_Array_Index_Variable, Vector CallFunc_Conv_LinearColorToVector_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, SkeletalMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, float K2Node_Event_steph, float K2Node_Event_height, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_steph, float K2Node_Event_height, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, WuXia_Movement_Component* CallFunc_MovementComponent_Component, float K2Node_Event_height, WuXia_Movement_Component* CallFunc_MovementComponent_Component, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FName K2Node_CustomEvent_NotifyName, WuXia_Movement_Component* CallFunc_MovementComponent_Component, delegate K2Node_CreateDelegate_OutputDelegate, PlayerStateComponent* CallFunc_StateComponent_Component, PlayerStateComponent* CallFunc_StateComponent_Component, SceneComponent*[] CallFunc_GetChildrenComponents_Children, SceneComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, PlayerViewComponent* CallFunc_ViewComponent_Component, SkeletalMesh* CallFunc_GetFlyToolSkin_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int K2Node_CustomEvent_Quality, int Temp_int_Array_Index_Variable, FName Temp_name_Variable, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, PlayerViewComponent* CallFunc_ViewComponent_Component, PlayerViewComponent* CallFunc_ViewComponent_Component, NiagaraComponent* CallFunc_GetUnUsedBuffParticleComponent_ReturnValue, int K2Node_Event_effecttype, bool CallFunc_EqualEqual_IntInt_ReturnValue, NiagaraSystem* K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, int K2Node_Event_effecttype, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_CustomEvent_Delay, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, enum K2Node_Event_state, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_Event_state, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_Event_vis, float K2Node_Event_delay, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum K2Node_Event_StealthType, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Greater_ByteByte_ReturnValue, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_Array_Get_Item, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SkeletalMeshComponent* K2Node_Event_comp, bool CallFunc_IsValid_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, float K2Node_CustomEvent_yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_marked, FName K2Node_CustomEvent_NotifyName, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, BP_Water_World_C* K2Node_DynamicCast_AsBP_Water_World, bool K2Node_DynamicCast_bSuccess, BP_Water_C* K2Node_DynamicCast_AsBP_Water, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsLocallyControlled_ReturnValue, BP_Water_C* K2Node_DynamicCast_AsBP_Water, bool K2Node_DynamicCast_bSuccess, BP_Water_World_C* K2Node_DynamicCast_AsBP_Water_World, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_Event_infog, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_id, bool CallFunc_Greater_IntInt_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, ExprerssionWidget_C* K2Node_DynamicCast_AsExprerssion_Widget, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, PlayerViewComponent* CallFunc_ViewComponent_Component, class Object CallFunc_GetFlyToolSkinAnimBlueprint_ReturnValue, PlayerStateComponent* CallFunc_StateComponent_Component, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, enum CallFunc_GetPlayerChildState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue, MaterialInterface* K2Node_Select_Default, ActorComponent* CallFunc_GetGameComponent_ReturnValue, NiagaraComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, NiagaraComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerViewComponent* CallFunc_ViewComponent_Component, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, Vector K2Node_CustomEvent_Color, bool CallFunc_IsValidExpression_ReturnValue, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, ExprerssionWidget_C* K2Node_DynamicCast_AsExprerssion_Widget, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_Type, const Vector[] K2Node_Event_Points, const Rotator K2Node_Event_Rot, float K2Node_Event_Duration, FName K2Node_CustomEvent_NotifyName, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_TeachingCharacter_C* CallFunc_FinishSpawningActor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_FinishTask_ReturnValue, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, bool CallFunc_FinishNode_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, AnimMontage* CallFunc_GetJumpStepMotage_NewParam, AnimMontage* CallFunc_GetJumpStepMotage_NewParam, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* CallFunc_GetJumpStepMotage_NewParam, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, AnimMontage* CallFunc_GetJumpUpMotage_NewParam, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetTickPriorityTime_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte K2Node_Event_EndPlayReason, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, Rotator CallFunc_RLerp_ReturnValue, float CallFunc_GetTickPriorityTime_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, bool K2Node_Event_bIsForcedBlock, NiagaraSystem* K2Node_Select_Default, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName Temp_name_Variable, int K2Node_Event_TrailNum, float K2Node_Event_TimeInterval, LinearColor K2Node_Event_TrailColor, FName K2Node_CustomEvent_NotifyName, Vector4 K2Node_MakeStruct_Vector4, float CallFunc_MapRangeClamped_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, PlayerFightComponent* CallFunc_FightComponent_Component, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_CheckIsInSkill_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_HitComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, Vector K2Node_ComponentBoundEvent_NormalImpulse, const HitResult K2Node_ComponentBoundEvent_Hit, const int Temp_int_Variable, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, FName K2Node_CustomEvent_NotifyName, float CallFunc_VSize_ReturnValue, Vector CallFunc_Normal_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_DegAcos_ReturnValue, float CallFunc_DegSin_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, const int Temp_int_Variable, int Temp_int_Array_Index_Variable, BP_WuXiaX_Character_C* CallFunc_Array_Get_Item, bool CallFunc_Map_Remove_ReturnValue, Actor* K2Node_Event_enemy, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Actor* K2Node_Event_target, PlayerController* CallFunc_GetPlayerController_ReturnValue, LockPoint_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_Event_target, bool K2Node_Event_control, const int Temp_int_Variable, PlayerFightComponent* CallFunc_FightComponent_Component, bool CallFunc_CanInput_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, int K2Node_CustomEvent_Value, const int Temp_int_Variable, const int Temp_int_Variable, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_Event_CurrentArmor, float K2Node_Event_MaxArmor, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_currentHP, int K2Node_Event_maxHP, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, PlayerFightComponent* CallFunc_FightComponent_Component, int CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FName K2Node_Select_Default, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FName K2Node_CustomEvent_NotifyName, int Temp_int_Array_Index_Variable, NiagaraComponent* CallFunc_Array_Get_Item, float K2Node_Event_angle, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, BP_PlayerAnim_C* K2Node_DynamicCast_AsBP_Player_Anim, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, const int Temp_int_Variable, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const Transform Temp_struct_Variable, ParticleSystemComponent* CallFunc_AddComponent_ReturnValue, SkeletalMeshComponent* K2Node_Event_skeletalmesh, AnimMontage* K2Node_Event_MontageToPlay, float K2Node_Event_delay_time, FName K2Node_Event_section_name, bool CallFunc_K2_AttachToComponent_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PlayerFightComponent* CallFunc_FightComponent_Component, PlayerFightComponent* CallFunc_FightComponent_Component, bool CallFunc_CheckIsInRangeWeaponState_ReturnValue, PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component, PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component, PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component, Key K2Node_InputActionEvent_Key, bool CallFunc_CanInput_ReturnValue, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, enum Temp_byte_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, SoundBase* K2Node_Select_Default, AudioComponent* CallFunc_CreateSound2D_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, NiagaraComponent* CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, LinearColor K2Node_MakeStruct_LinearColor, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName Temp_name_Variable, Vector4 K2Node_MakeStruct_Vector4, Key K2Node_InputActionEvent_Key, int Temp_int_Array_Index_Variable, Key K2Node_InputActionEvent_Key, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FName K2Node_CustomEvent_NotifyName, Vector CallFunc_MakeVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, FName K2Node_CustomEvent_NotifyName, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector K2Node_CustomEvent_Vector, float K2Node_CustomEvent_Speed, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_VInterpTo_ReturnValue, float K2Node_CustomEvent_In_X, Vector K2Node_CustomEvent_In_YZ, float K2Node_CustomEvent_Speed, float K2Node_CustomEvent_FieldValue, float K2Node_CustomEvent_Target, float CallFunc_FInterpTo_ReturnValue, float CallFunc_FInterpTo_ReturnValue, Vector CallFunc_VInterpTo_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float K2Node_CustomEvent_Value, float K2Node_CustomEvent_Speed, float CallFunc_FInterpTo_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Array_Index_Variable);// 0x8a873f8 0x78c32bdc20

--------------------------------
Class: BP_GhostTrailComponent_C.ActorComponent.Object
	bool ActiveAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78c4ad4a80
	float GhostSpawnDelay;//[Offset: 0xb4, Size: 0x4] 0x78c4ad4b00
	float GhostLifetime;//[Offset: 0xb8, Size: 0x4] 0x78c4ad4b80
	bool GhostAllMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78c4ad4c00
	FName[] TagsToGhost;//[Offset: 0xc0, Size: 0x10] 0x78b9b09c00
	MaterialInterface* GhostMaterial;//[Offset: 0xd0, Size: 0x8] 0x78c4ad4d00
	E_GhostMaterialParam[] MatParams;//[Offset: 0xd8, Size: 0x10] 0x78b9b09ca0
	bool ScaleOverTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78c4ad4e00
	CurveFloat* ScaleCurve;//[Offset: 0xf0, Size: 0x8] 0x78c4ad4e80
	bool LastIsInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x78c4ad4f00
	bool VelocityDepending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1] 0x78c4ad4f80
	float VelocityThreshold;//[Offset: 0xfc, Size: 0x4] 0x78c4ad5000
	bool ActiveTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x78c4ad5080
	BP_GhostTrailManager_C* GhostTrailManager;//[Offset: 0x108, Size: 0x8] 0x78c4ad5100
	LinearColor Light;//[Offset: 0x110, Size: 0x10] 0x78c4ad5180
	WuXiaXCharacter* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character;//[Offset: 0x120, Size: 0x8] 0x78c4ad5200
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78c4ad5280
	void ShanBiGhost();// 0x7413650 0x78c50859c0
	void Set Light(LinearColor bpp__NewLight__pf);// 0x7413584 0x78c5089000
	void SetTrailActive(bool bpp__Active__pf);// 0x7413728 0x78c8e9eb00
	void ReceiveBeginPlay();// 0x74138d4 0x78c5088d60
	bool MeshMustCastTrails(SceneComponent* bpp__Component__pf);// 0x74137e0 0x78c5088f20
	void InitManager();// 0x74138b8 0x78c50884a0
	void GetTrailActive(out bool bpp__Active__pf);// 0x741366c 0x78c5088580
	void AddMeshestToGhost2();// 0x7413634 0x78c50883c0
	void AddMeshesToGhost();// 0x741389c 0x78c50882e0

--------------------------------
Class: E_GhostMaterialParam
	FName ParamName_12_7BBBFC27417E70F3B4247989B720B5D9;//[Offset: 0x0, Size: 0x8] 0x78c377b580
	CurveFloat* Curve_8_CC05CC424473955C67D941A47C7AE5A0;//[Offset: 0x8, Size: 0x8] 0x78c3779580
	CurveLinearColor* ColorCurve_11_E6EAC465450C0BEC8A6B1A9C1452A825;//[Offset: 0x10, Size: 0x8] 0x78ca365080

--------------------------------
Class: BP_GhostTrailManager_C.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x220, Size: 0x8] 0x78c4ad3400
	BP_GhostTrailComponent_C* GhostTrailOwnerComponent;//[Offset: 0x228, Size: 0x8] 0x78c4ad3480
	MaterialInterface* GhostMaterial;//[Offset: 0x230, Size: 0x8] 0x78c4ad3500
	E_GhostMaterialParam[] MatParams;//[Offset: 0x238, Size: 0x10] 0x78b9b09d40
	StaticMeshComponent*[] StaticMeshCompsToTrail;//[Offset: 0x248, Size: 0x10] 0x78b9b09de0
	SkeletalMeshComponent*[] SkeletalMeshCompsToTrail;//[Offset: 0x258, Size: 0x10] 0x78b9b09e80
	bool Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78c4ad3700
	float GhostsLifetime;//[Offset: 0x26c, Size: 0x4] 0x78c4ad3780
	bool VelocityDepending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x78c4ad3800
	float VelocityThreshold;//[Offset: 0x274, Size: 0x4] 0x78c4ad3880
	bool LastInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78c4ad3900
	float GhostSpawnDelay;//[Offset: 0x27c, Size: 0x4] 0x78c4ad3980
	float GhostSpawnTimer;//[Offset: 0x280, Size: 0x4] 0x78c4ad3a00
	E_GhostInfo[] Ghosts;//[Offset: 0x288, Size: 0x10] 0x78b9b09f20
	bool ScaleGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78c4ad3b00
	CurveFloat* ScaleCurve;//[Offset: 0x2a0, Size: 0x8] 0x78c4ad3b80
	Vector[] SkeletalVelocities;//[Offset: 0x2a8, Size: 0x10] 0x78b9b09fc0
	Vector[] StaticVelocities;//[Offset: 0x2b8, Size: 0x10] 0x78b9b0a060
	Vector[] LastSkelLocations;//[Offset: 0x2c8, Size: 0x10] 0x78b9b0a100
	Vector[] LastStaticLocations;//[Offset: 0x2d8, Size: 0x10] 0x78b9b07860
	delegate GhostSpawned;//[Offset: 0x2e8, Size: 0x10] 0x78c4ad3e00
	float K2Node_Event_DeltaSeconds;//[Offset: 0x2f8, Size: 0x4] 0x78c4ad3e80
	void GhostSpawned__DelegateSignature(E_GhostInfo bpp__GhostInfo__pf);// 0x8a873f8 0x78c5088120
	void UpdateGhostVisual(E_GhostInfo bpp__GhostInfo__pf);// 0x741529c 0x78c5088040
	void UpdateGhostInfos();// 0x741537c 0x78c5087f60
	void SpawnTimer();// 0x7415498 0x78c5087e80
	void SpawnStaticGhost(StaticMeshComponent* bpp__MasterStaticMeshComponent__pf, out E_GhostInfo bpp__GhostInfo__pf);// 0x74154b4 0x78c5087da0
	void SpawnSkeletalGhost(SkeletalMeshComponent* bpp__MasterStaticMeshComponent__pf, out E_GhostInfo bpp__GhostInfo__pf);// 0x7415398 0x78c5087cc0
	void SpawnGhosts();// 0x7415360 0x78c5087be0
	void SetGhostMaterialParams(E_GhostInfo bpp__Ghost__pf);// 0x74151a0 0x78c5087b00
	void RevealLastGhosts();// 0x7415280 0x78c5087a20
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x74155b4 0x78c508ab20
	void CalcVelocities();// 0x7415264 0x78c5087860
	void AddMeshToTrail(MeshComponent* bpp__Mesh__pf);// 0x74150f0 0x78c5088ba0

--------------------------------
Class: E_GhostInfo
	MeshComponent* Ghost_9_C6BCF08E41BB0AF14D6855B4A18E182D;//[Offset: 0x0, Size: 0x8] 0x78c3779680
	float ExistTime_3_8EB17EDC4E447CD9A3E7B295E0466783;//[Offset: 0x8, Size: 0x4] 0x78d1ddef80
	MaterialInstanceDynamic* DynamMaterial_6_D5FCC61C41B943A399084199875377B0;//[Offset: 0x10, Size: 0x8] 0x78c3779500
	Vector OrigScale_12_7393A3CD49D151F33B599DA0E42FE942;//[Offset: 0x18, Size: 0xc] 0x78c646a880

--------------------------------
Class: LockPoint_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8922980
	Image* LockPoint;//[Offset: 0x268, Size: 0x8] 0x78b8922900
	Actor* LockTarget;//[Offset: 0x270, Size: 0x8] 0x78b8922880
	Actor* NewTarget;//[Offset: 0x278, Size: 0x8] 0x78b8922800
	byte LockType;//[Offset: 0x280, Size: 0x1] 0x78b8922780
	void GetLockLocation2D(Object* Object, out Vector2D ScreenPosition, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue);// 0x8a873f8 0x78c42dd360
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c42dd440
	void ChangeTarget(Actor* NewTarget);// 0x8a873f8 0x78c42dd600
	void ExecuteUbergraph_LockPoint(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_GetLockLocation2D_ScreenPosition, Actor* K2Node_CustomEvent_NewTarget, bool K2Node_SwitchEnum_CmpSuccess, Vector2D CallFunc_GetLockLocation2D_ScreenPosition, Vector2D CallFunc_GetLockLocation2D_ScreenPosition, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_FInterpTo_ReturnValue, Vector2D CallFunc_Vector2DInterpTo_ReturnValue, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, Vector2D CallFunc_GetLockLocation2D_ScreenPosition, Vector2D CallFunc_GetLockLocation2D_ScreenPosition, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_Add_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c42dd7c0

--------------------------------
Class: AssassinationTipWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c6857100
	TextBlock* TipText;//[Offset: 0x268, Size: 0x8] 0x78c6857080
	Actor* AssassinationTarget;//[Offset: 0x270, Size: 0x8] 0x78c6857000
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c6333260
	void ExecuteUbergraph_AssassinationTipWidget(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue);// 0x8a873f8 0x78c6333420

--------------------------------
Class: BP_PlayerAnim_C.WuXia_AnimInstance.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x430, Size: 0x8] 0x78c5cb6880
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x438, Size: 0x158] 0x78c5cb6800
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x590, Size: 0xa0] 0x78c5cb6780
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x630, Size: 0x48] 0x78c5cb6700
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x678, Size: 0x28] 0x78c5cb6680
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x6a0, Size: 0x158] 0x78c5cb6600
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x7f8, Size: 0x48] 0x78c5cb6580
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x840, Size: 0x158] 0x78c5cb6500
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x998, Size: 0x28] 0x78c5cb6480
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x9c0, Size: 0xa0] 0x78c5cb6400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa60, Size: 0x80] 0x78c5cb6380
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xae0, Size: 0xa0] 0x78c5cb8400
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0xb80, Size: 0x48] 0x78c5cb8380
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0xbc8, Size: 0x48] 0x78c5cb8300
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0xc10, Size: 0x190] 0x78c5cb8280
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xda0, Size: 0xa0] 0x78c5cb8200
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0xe40, Size: 0x158] 0x78c5cb8180
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xf98, Size: 0x28] 0x78c5cb8100
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xfc0, Size: 0x28] 0x78c5cb8080
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xfe8, Size: 0x80] 0x78c5cb8000
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1068, Size: 0x80] 0x78c5cb7f80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10e8, Size: 0x80] 0x78c5cb7f00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1168, Size: 0x28] 0x78c5cb7e80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1190, Size: 0x28] 0x78c5cb7e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11b8, Size: 0x28] 0x78c5cb7d80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11e0, Size: 0x28] 0x78c5cb7d00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1208, Size: 0x28] 0x78c5cb7c80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1230, Size: 0x28] 0x78c5cb7c00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1258, Size: 0x28] 0x78c5cb7b80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1280, Size: 0x28] 0x78c5cb7b00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x12a8, Size: 0x28] 0x78c5cb7a80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x12d0, Size: 0x28] 0x78c5cb7a00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x12f8, Size: 0x28] 0x78c5cb7980
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1320, Size: 0x28] 0x78c5cb7900
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1348, Size: 0x28] 0x78c5cb7880
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x1370, Size: 0x28] 0x78c5cb7800
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x1398, Size: 0x190] 0x78c5cb7780
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x1528, Size: 0x190] 0x78c5cb7700
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x16b8, Size: 0xa0] 0x78c5cb7680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1758, Size: 0x80] 0x78c5cb7600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x17d8, Size: 0x80] 0x78c5cb7580
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x1858, Size: 0xe8] 0x78c5cb7500
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x1940, Size: 0xc0] 0x78c5cb7480
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x1a00, Size: 0x190] 0x78c5cb7400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1b90, Size: 0x80] 0x78c5cb9480
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x1c10, Size: 0xe8] 0x78c5cb9400
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x1cf8, Size: 0xc0] 0x78c5cb9380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1db8, Size: 0x80] 0x78c5cb9300
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x1e38, Size: 0x190] 0x78c5cb9280
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x1fc8, Size: 0xe8] 0x78c5cb9200
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x20b0, Size: 0xc0] 0x78c5cb9180
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x2170, Size: 0xa0] 0x78c5cb9100
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x2210, Size: 0x30] 0x78c5cb9080
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2240, Size: 0x80] 0x78c5cb9000
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x22c0, Size: 0x30] 0x78c5cb8f80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x22f0, Size: 0x80] 0x78c5cb8f00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x2370, Size: 0xc0] 0x78c5cb8e80
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x2430, Size: 0xa0] 0x78c5cb8e00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x24d0, Size: 0xe8] 0x78c5cb8d80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x25b8, Size: 0x80] 0x78c5cb8d00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x2638, Size: 0x30] 0x78c5cb8c80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2668, Size: 0x80] 0x78c5cb8c00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x26e8, Size: 0x80] 0x78c5cb8b80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2768, Size: 0x80] 0x78c5cb8b00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x27e8, Size: 0x80] 0x78c5cb8a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2868, Size: 0x80] 0x78c5cb8a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x28e8, Size: 0x80] 0x78c5cb8980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2968, Size: 0x80] 0x78c5cb8900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x29e8, Size: 0x80] 0x78c5cb8880
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x2a68, Size: 0xa0] 0x78c5cb8800
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x2b08, Size: 0x30] 0x78c5cb8780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2b38, Size: 0x80] 0x78c5cb8700
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x2bb8, Size: 0x30] 0x78c5cb8680
	AnimNode_TwoBoneIK AnimGraphNode_TwoBoneIK;//[Offset: 0x2bf0, Size: 0x1e0] 0x78c5cb8600
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x2dd0, Size: 0x20] 0x78c5cb8580
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x2df0, Size: 0x20] 0x78c5cb8500
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x2e10, Size: 0x190] 0x78c5cb8480
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x2fa0, Size: 0x190] 0x78c5cba500
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x3130, Size: 0xa0] 0x78c5cba480
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x31d0, Size: 0xa0] 0x78c5cba400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x3270, Size: 0x80] 0x78c5cba380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x32f0, Size: 0x80] 0x78c5cba300
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x3370, Size: 0xe8] 0x78c5cba280
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x3458, Size: 0x190] 0x78c5cba200
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x35e8, Size: 0x190] 0x78c5cba180
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x3778, Size: 0x190] 0x78c5cba100
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x3908, Size: 0xe8] 0x78c5cba080
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x39f0, Size: 0x190] 0x78c5cba000
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x3b80, Size: 0xe8] 0x78c5cb9f80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x3c68, Size: 0xe8] 0x78c5cb9f00
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x3d50, Size: 0x190] 0x78c5cb9e80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x3ee0, Size: 0x80] 0x78c5cb9e00
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x3f60, Size: 0xa0] 0x78c5cb9d80
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x4000, Size: 0x190] 0x78c5cb9d00
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x4190, Size: 0x190] 0x78c5cb9c80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x4320, Size: 0xe8] 0x78c5cb9c00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x4408, Size: 0xc0] 0x78c5cb9b80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x44c8, Size: 0xc0] 0x78c5cb9b00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4588, Size: 0x80] 0x78c5cb9a80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x4608, Size: 0xc0] 0x78c5cb9a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x46c8, Size: 0x80] 0x78c5cb9980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4748, Size: 0x80] 0x78c5cb9900
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x47c8, Size: 0xe8] 0x78c5cb9880
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x48b0, Size: 0xc0] 0x78c5cb9800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4970, Size: 0x80] 0x78c5cb9780
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x49f0, Size: 0xe8] 0x78c5cb9700
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x4ad8, Size: 0xc0] 0x78c5cb9680
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x4b98, Size: 0xc0] 0x78c5cb9600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4c58, Size: 0x80] 0x78c5cb9580
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x4cd8, Size: 0xe8] 0x78c5cb9500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4dc0, Size: 0x80] 0x78c5cbb580
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x4e40, Size: 0xc0] 0x78c5cbb500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4f00, Size: 0x80] 0x78c5cbb480
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x4f80, Size: 0xa0] 0x78c5cbb400
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x5020, Size: 0xc0] 0x78c5cbb380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x50e0, Size: 0x80] 0x78c5cbb300
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x5160, Size: 0x30] 0x78c5cbb280
	AnimNode_TwoBoneIK AnimGraphNode_TwoBoneIK;//[Offset: 0x5190, Size: 0x1e0] 0x78c5cbb200
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x5370, Size: 0x20] 0x78c5cbb180
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x5390, Size: 0x20] 0x78c5cbb100
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x53b0, Size: 0x190] 0x78c5cbb080
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x5540, Size: 0x190] 0x78c5cbb000
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x56d0, Size: 0xa0] 0x78c5cbaf80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5770, Size: 0x80] 0x78c5cbaf00
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x57f0, Size: 0xa0] 0x78c5cbae80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5890, Size: 0x80] 0x78c5cbae00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5910, Size: 0x80] 0x78c5cbad80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5990, Size: 0x80] 0x78c5cbad00
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x5a10, Size: 0xc8] 0x78c5cbac80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5ad8, Size: 0x80] 0x78c5cbac00
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x5b58, Size: 0x190] 0x78c5cbab80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x5ce8, Size: 0xe8] 0x78c5cbab00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x5dd0, Size: 0xc0] 0x78c5cbaa80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5e90, Size: 0x80] 0x78c5cbaa00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5f10, Size: 0x80] 0x78c5cba980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5f90, Size: 0x80] 0x78c5cba900
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x6010, Size: 0xc8] 0x78c5cba880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x60d8, Size: 0x80] 0x78c5cba800
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x6158, Size: 0x190] 0x78c5cba780
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x62e8, Size: 0xe8] 0x78c5cba700
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x63d0, Size: 0xc0] 0x78c5cba680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x6490, Size: 0x80] 0x78c5cba600
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x6510, Size: 0x190] 0x78c5cba580
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x66a0, Size: 0xe8] 0x78c5cbc600
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x6788, Size: 0xc0] 0x78c5cbc580
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone;//[Offset: 0x6848, Size: 0xa0] 0x78c5cbc500
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x68e8, Size: 0xe8] 0x78c5cbc480
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x69d0, Size: 0xc0] 0x78c5cbc400
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x6a90, Size: 0xc8] 0x78c5cbc380
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x6b58, Size: 0xe8] 0x78c5cbc300
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x6c40, Size: 0xc0] 0x78c5cbc280
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x6d00, Size: 0x190] 0x78c5cbc200
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x6e90, Size: 0x190] 0x78c5cbc180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x7020, Size: 0x80] 0x78c5cbc100
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x70a0, Size: 0xe8] 0x78c5cbc080
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x7188, Size: 0xc0] 0x78c5cbc000
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x7248, Size: 0x80] 0x78c5cbbf80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x72c8, Size: 0xc8] 0x78c5cbbf00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x7390, Size: 0x80] 0x78c5cbbe80
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x7410, Size: 0x190] 0x78c5cbbe00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x75a0, Size: 0xe8] 0x78c5cbbd80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x7688, Size: 0xc0] 0x78c5cbbd00
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x7748, Size: 0xa0] 0x78c5cbbc80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x77e8, Size: 0xe8] 0x78c5cbbc00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x78d0, Size: 0x80] 0x78c5cbbb80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x7950, Size: 0xc0] 0x78c5cbbb00
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x7a10, Size: 0x190] 0x78c5cbba80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x7ba0, Size: 0xc8] 0x78c5cbba00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x7c68, Size: 0x80] 0x78c5cbb980
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x7ce8, Size: 0x30] 0x78c5cbb900
	AnimNode_TwoBoneIK AnimGraphNode_TwoBoneIK;//[Offset: 0x7d20, Size: 0x1e0] 0x78c5cbb880
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x7f00, Size: 0x20] 0x78c5cbb800
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x7f20, Size: 0x20] 0x78c5cbb780
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x7f40, Size: 0x190] 0x78c5cbb700
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x80d0, Size: 0xa0] 0x78c5cbb680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8170, Size: 0x80] 0x78c5cbb600
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x81f0, Size: 0xa0] 0x78c5cbd680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8290, Size: 0x80] 0x78c5cbd600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8310, Size: 0x80] 0x78c5cbd580
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x8390, Size: 0xc8] 0x78c5cbd500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8458, Size: 0x80] 0x78c5cbd480
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x84d8, Size: 0xc8] 0x78c5cbd400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x85a0, Size: 0x80] 0x78c5cbd380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8620, Size: 0x80] 0x78c5cbd300
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x86a0, Size: 0x80] 0x78c5cbd280
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x8720, Size: 0xc8] 0x78c5cbd200
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x87e8, Size: 0x80] 0x78c5cbd180
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x8868, Size: 0x190] 0x78c5cbd100
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x89f8, Size: 0xe8] 0x78c5cbd080
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x8ae0, Size: 0xc0] 0x78c5cbd000
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8ba0, Size: 0x80] 0x78c5cbcf80
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x8c20, Size: 0x190] 0x78c5cbcf00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x8db0, Size: 0xe8] 0x78c5cbce80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x8e98, Size: 0xc0] 0x78c5cbce00
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x8f58, Size: 0x190] 0x78c5cbcd80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x90e8, Size: 0xe8] 0x78c5cbcd00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x91d0, Size: 0xc0] 0x78c5cbcc80
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x9290, Size: 0x190] 0x78c5cbcc00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x9420, Size: 0xe8] 0x78c5cbcb80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x9508, Size: 0xc0] 0x78c5cbcb00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x95c8, Size: 0xe8] 0x78c5cbca80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x96b0, Size: 0xc0] 0x78c5cbca00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9770, Size: 0x80] 0x78c5cbc980
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x97f0, Size: 0xc8] 0x78c5cbc900
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x98b8, Size: 0x190] 0x78c5cbc880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9a48, Size: 0x80] 0x78c5cbc800
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x9ac8, Size: 0x190] 0x78c5cbc780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9c58, Size: 0x80] 0x78c5cbc700
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x9cd8, Size: 0xe8] 0x78c5cbc680
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x9dc0, Size: 0xc0] 0x78c5cbe700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9e80, Size: 0x80] 0x78c5cbe680
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x9f00, Size: 0x190] 0x78c5cbe600
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xa090, Size: 0xe8] 0x78c5cbe580
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xa178, Size: 0xc0] 0x78c5cbe500
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xa238, Size: 0xa0] 0x78c5cbe480
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xa2d8, Size: 0xe8] 0x78c5cbe400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa3c0, Size: 0x80] 0x78c5cbe380
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xa440, Size: 0xc0] 0x78c5cbe300
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0xa500, Size: 0x190] 0x78c5cbe280
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xa690, Size: 0x30] 0x78c5cbe200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xa6c0, Size: 0x28] 0x78c5cbe180
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xa6e8, Size: 0x28] 0x78c5cbe100
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xa710, Size: 0x28] 0x78c5cbe080
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xa738, Size: 0x28] 0x78c5cbe000
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa760, Size: 0x80] 0x78c5cbdf80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xa7e0, Size: 0x30] 0x78c5cbdf00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xa810, Size: 0xc0] 0x78c5cbde80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xa8d0, Size: 0xe8] 0x78c5cbde00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa9b8, Size: 0x80] 0x78c5cbdd80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xaa38, Size: 0xc0] 0x78c5cbdd00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xaaf8, Size: 0xe8] 0x78c5cbdc80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xabe0, Size: 0x30] 0x78c5cbdc00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xac10, Size: 0xb0] 0x78c5cbdb80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xacc0, Size: 0x30] 0x78c5cbdb00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xacf0, Size: 0x28] 0x78c5cbda80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xad18, Size: 0x28] 0x78c5cbda00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xad40, Size: 0x28] 0x78c5cbd980
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xad68, Size: 0x28] 0x78c5cbd900
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xad90, Size: 0x28] 0x78c5cbd880
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xadb8, Size: 0x28] 0x78c5cbd800
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xade0, Size: 0xe8] 0x78c5cbd780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xaec8, Size: 0x80] 0x78c5cbd700
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xaf48, Size: 0xa0] 0x78c5cbf780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xafe8, Size: 0x80] 0x78c5cbf700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xb068, Size: 0x80] 0x78c5cbf680
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xb0e8, Size: 0xa0] 0x78c5cbf600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xb188, Size: 0x80] 0x78c5cbf580
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb208, Size: 0xe8] 0x78c5cbf500
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb2f0, Size: 0xe8] 0x78c5cbf480
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xb3d8, Size: 0xc0] 0x78c5cbf400
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb498, Size: 0xe8] 0x78c5cbf380
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb580, Size: 0xe8] 0x78c5cbf300
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb668, Size: 0xe8] 0x78c5cbf280
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb750, Size: 0xe8] 0x78c5cbf200
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb838, Size: 0xe8] 0x78c5cbf180
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xb920, Size: 0xe8] 0x78c5cbf100
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xba08, Size: 0xe8] 0x78c5cbf080
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xbaf0, Size: 0xe8] 0x78c5cbf000
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xbbd8, Size: 0xe8] 0x78c5cbef80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xbcc0, Size: 0xe8] 0x78c5cbef00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xbda8, Size: 0xe8] 0x78c5cbee80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xbe90, Size: 0xe8] 0x78c5cbee00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xbf78, Size: 0xe8] 0x78c5cbed80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xc060, Size: 0xe8] 0x78c5cbed00
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xc148, Size: 0xa0] 0x78c5cbec80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xc1e8, Size: 0x30] 0x78c5cbec00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xc218, Size: 0x108] 0x78c5cbeb80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xc320, Size: 0x108] 0x78c5cbeb00
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0xc428, Size: 0x20] 0x78c5cbea80
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0xc448, Size: 0x20] 0x78c5cbea00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xc468, Size: 0x108] 0x78c5cbe980
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xc570, Size: 0x108] 0x78c5cbe900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xc678, Size: 0x80] 0x78c5cbe880
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xc6f8, Size: 0x30] 0x78c5cbe800
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xc728, Size: 0xe8] 0x78c5cbe780
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xc810, Size: 0xa0] 0x78c5cbff80
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xc8b0, Size: 0xa0] 0x78c5cbff00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xc950, Size: 0x28] 0x78c5cbfe80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xc978, Size: 0x28] 0x78c5cbfe00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xc9a0, Size: 0xc0] 0x78c5cbfd80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xca60, Size: 0xc0] 0x78c5cbfd00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xcb20, Size: 0x80] 0x78c5cbfc80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xcba0, Size: 0x28] 0x78c5cbfc00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xcbc8, Size: 0x80] 0x78c5cbfb80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xcc48, Size: 0xc0] 0x78c5cbfb00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xcd08, Size: 0xc0] 0x78c5cbfa80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xcdc8, Size: 0x80] 0x78c5cbfa00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xce48, Size: 0x80] 0x78c5cbf980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xcec8, Size: 0x80] 0x78c5cbf900
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xcf48, Size: 0x28] 0x78c5cbf880
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xcf70, Size: 0xc0] 0x78c5cbf800
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd030, Size: 0xc0] 0x78c5551080
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd0f0, Size: 0x80] 0x78c5551000
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd170, Size: 0x80] 0x78c5550f80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xd1f0, Size: 0x28] 0x78c5550f00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd218, Size: 0xc0] 0x78c5550e80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd2d8, Size: 0xc0] 0x78c5550e00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd398, Size: 0x80] 0x78c5550d80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd418, Size: 0x80] 0x78c5550d00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xd498, Size: 0x28] 0x78c5550c80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd4c0, Size: 0xc0] 0x78c5550c00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd580, Size: 0xc0] 0x78c5550b80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd640, Size: 0x80] 0x78c5550b00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd6c0, Size: 0x80] 0x78c5550a80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xd740, Size: 0x28] 0x78c5550a00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd768, Size: 0xc0] 0x78c5550980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd828, Size: 0x80] 0x78c5550900
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xd8a8, Size: 0x28] 0x78c5550880
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd8d0, Size: 0xc0] 0x78c5550800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd990, Size: 0x80] 0x78c5550780
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xda10, Size: 0xc0] 0x78c5550700
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xdad0, Size: 0xc0] 0x78c5550680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xdb90, Size: 0x80] 0x78c5550600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xdc10, Size: 0x80] 0x78c5550580
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xdc90, Size: 0x28] 0x78c5550500
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xdcb8, Size: 0xc0] 0x78c5550480
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xdd78, Size: 0xc0] 0x78c5550400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xde38, Size: 0x80] 0x78c5550380
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xdeb8, Size: 0x28] 0x78c5550300
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xdee0, Size: 0x28] 0x78c5550280
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xdf08, Size: 0x80] 0x78c5550200
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xdf88, Size: 0xc0] 0x78c5550180
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xe048, Size: 0xc0] 0x78c5550100
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xe108, Size: 0x28] 0x78c5550080
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xe130, Size: 0xa0] 0x78c5552100
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xe1d0, Size: 0xe8] 0x78c5552080
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xe2b8, Size: 0xe8] 0x78c5552000
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xe3a0, Size: 0xa0] 0x78c5551f80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xe440, Size: 0x28] 0x78c5551f00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xe468, Size: 0x30] 0x78c5551e80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xe498, Size: 0x28] 0x78c5551e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xe4c0, Size: 0x28] 0x78c5551d80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xe4e8, Size: 0x80] 0x78c5551d00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xe568, Size: 0x80] 0x78c5551c80
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xe5e8, Size: 0xa0] 0x78c5551c00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xe688, Size: 0x80] 0x78c5551b80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xe708, Size: 0x80] 0x78c5551b00
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xe788, Size: 0xa0] 0x78c5551a80
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xe828, Size: 0xa0] 0x78c5551a00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xe8c8, Size: 0x30] 0x78c5551980
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xe8f8, Size: 0xa0] 0x78c5551900
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xe998, Size: 0xc0] 0x78c5551880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xea58, Size: 0x80] 0x78c5551800
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xead8, Size: 0xa0] 0x78c5551780
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xeb78, Size: 0xc0] 0x78c5551700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xec38, Size: 0x80] 0x78c5551680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xecb8, Size: 0x80] 0x78c5551600
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xed38, Size: 0xc0] 0x78c5551580
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xedf8, Size: 0xc0] 0x78c5551500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xeeb8, Size: 0x80] 0x78c5551480
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xef38, Size: 0x80] 0x78c5551400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xefb8, Size: 0x80] 0x78c5551380
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf038, Size: 0xc0] 0x78c5551300
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf0f8, Size: 0xc0] 0x78c5551280
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf1b8, Size: 0x80] 0x78c5551200
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf238, Size: 0x80] 0x78c5551180
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf2b8, Size: 0xc0] 0x78c5551100
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf378, Size: 0xc0] 0x78c5553180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf438, Size: 0x80] 0x78c5553100
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf4b8, Size: 0x80] 0x78c5553080
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf538, Size: 0xc0] 0x78c5553000
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf5f8, Size: 0xc0] 0x78c5552f80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf6b8, Size: 0x80] 0x78c5552f00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf738, Size: 0x80] 0x78c5552e80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf7b8, Size: 0xc0] 0x78c5552e00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf878, Size: 0x80] 0x78c5552d80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xf8f8, Size: 0xc0] 0x78c5552d00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf9b8, Size: 0x80] 0x78c5552c80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xfa38, Size: 0x28] 0x78c5552c00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xfa60, Size: 0xc0] 0x78c5552b80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xfb20, Size: 0xc0] 0x78c5552b00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xfbe0, Size: 0x80] 0x78c5552a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xfc60, Size: 0x80] 0x78c5552a00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xfce0, Size: 0xc0] 0x78c5552980
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xfda0, Size: 0xc0] 0x78c5552900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xfe60, Size: 0x80] 0x78c5552880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xfee0, Size: 0x80] 0x78c5552800
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xff60, Size: 0xc0] 0x78c5552780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10020, Size: 0x80] 0x78c5552700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x100a0, Size: 0x80] 0x78c5552680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10120, Size: 0x80] 0x78c5552600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x101a0, Size: 0x80] 0x78c5552580
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10220, Size: 0x80] 0x78c5552500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x102a0, Size: 0x80] 0x78c5552480
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10320, Size: 0x80] 0x78c5552400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x103a0, Size: 0x80] 0x78c5552380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10420, Size: 0x80] 0x78c5552300
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x104a0, Size: 0x80] 0x78c5552280
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x10520, Size: 0xa0] 0x78c5552200
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x105c0, Size: 0x80] 0x78c5552180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10640, Size: 0x80] 0x78c5554200
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x106c0, Size: 0x30] 0x78c5554180
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x106f0, Size: 0xb0] 0x78c5554100
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x107a0, Size: 0x30] 0x78c5554080
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x107d0, Size: 0xb0] 0x78c5554000
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x10880, Size: 0x30] 0x78c5553f80
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x108b0, Size: 0xb0] 0x78c5553f00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x10960, Size: 0x30] 0x78c5553e80
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x10990, Size: 0xb0] 0x78c5553e00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x10a40, Size: 0x158] 0x78c5553d80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x10b98, Size: 0x28] 0x78c5553d00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x10bc0, Size: 0x48] 0x78c5553c80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x10c08, Size: 0xc0] 0x78c5553c00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10cc8, Size: 0x80] 0x78c5553b80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10d48, Size: 0x80] 0x78c5553b00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10dc8, Size: 0x80] 0x78c5553a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10e48, Size: 0x80] 0x78c5553a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10ec8, Size: 0x80] 0x78c5553980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10f48, Size: 0x80] 0x78c5553900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10fc8, Size: 0x80] 0x78c5553880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11048, Size: 0x80] 0x78c5553800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x110c8, Size: 0x80] 0x78c5553780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11148, Size: 0x80] 0x78c5553700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x111c8, Size: 0x80] 0x78c5553680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11248, Size: 0x80] 0x78c5553600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x112c8, Size: 0x80] 0x78c5553580
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11348, Size: 0x80] 0x78c5553500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x113c8, Size: 0x80] 0x78c5553480
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11448, Size: 0x28] 0x78c5553400
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11470, Size: 0x28] 0x78c5553380
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11498, Size: 0x28] 0x78c5553300
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x114c0, Size: 0x28] 0x78c5553280
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x114e8, Size: 0x28] 0x78c5553200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11510, Size: 0x28] 0x78c5555280
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11538, Size: 0x28] 0x78c5555200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11560, Size: 0x28] 0x78c5555180
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11588, Size: 0x28] 0x78c5555100
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x115b0, Size: 0x28] 0x78c5555080
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x115d8, Size: 0x28] 0x78c5555000
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11600, Size: 0x28] 0x78c5554f80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11628, Size: 0x28] 0x78c5554f00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11650, Size: 0x28] 0x78c5554e80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11678, Size: 0x28] 0x78c5554e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x116a0, Size: 0x28] 0x78c5554d80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x116c8, Size: 0x80] 0x78c5554d00
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x11748, Size: 0xa0] 0x78c5554c80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x117e8, Size: 0x80] 0x78c5554c00
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x11868, Size: 0xa0] 0x78c5554b80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11908, Size: 0x80] 0x78c5554b00
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x11988, Size: 0xa0] 0x78c5554a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11a28, Size: 0x80] 0x78c5554a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11aa8, Size: 0x80] 0x78c5554980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11b28, Size: 0x80] 0x78c5554900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11ba8, Size: 0x80] 0x78c5554880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11c28, Size: 0x80] 0x78c5554800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11ca8, Size: 0x80] 0x78c5554780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11d28, Size: 0x80] 0x78c5554700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11da8, Size: 0x80] 0x78c5554680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x11e28, Size: 0x80] 0x78c5554600
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x11ea8, Size: 0xa0] 0x78c5554580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x11f48, Size: 0x30] 0x78c5554500
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11f78, Size: 0x28] 0x78c5554480
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x11fa0, Size: 0x28] 0x78c5554400
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x11fc8, Size: 0xa0] 0x78c5554380
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x12068, Size: 0xe8] 0x78c5554300
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x12150, Size: 0xe8] 0x78c5554280
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12238, Size: 0x30] 0x78c5556300
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x12268, Size: 0x80] 0x78c5556280
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x122e8, Size: 0x30] 0x78c5556200
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x12318, Size: 0xc0] 0x78c5556180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x123d8, Size: 0x80] 0x78c5556100
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x12458, Size: 0xa0] 0x78c5556080
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x124f8, Size: 0xe8] 0x78c5556000
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x125e0, Size: 0xe8] 0x78c5555f80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x126c8, Size: 0x30] 0x78c5555f00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x126f8, Size: 0xb0] 0x78c5555e80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x127a8, Size: 0x30] 0x78c5555e00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x127d8, Size: 0x80] 0x78c5555d80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12858, Size: 0x30] 0x78c5555d00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x12888, Size: 0x80] 0x78c5555c80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12908, Size: 0x30] 0x78c5555c00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x12938, Size: 0x28] 0x78c5555b80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x12960, Size: 0x28] 0x78c5555b00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x12988, Size: 0x28] 0x78c5555a80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x129b0, Size: 0xe8] 0x78c5555a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x12a98, Size: 0x80] 0x78c5555980
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x12b18, Size: 0xc8] 0x78c5555900
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12be0, Size: 0x30] 0x78c5555880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x12c10, Size: 0x80] 0x78c5555800
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12c90, Size: 0x30] 0x78c5555780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x12cc0, Size: 0x80] 0x78c5555700
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x12d40, Size: 0xe8] 0x78c5555680
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x12e28, Size: 0xc8] 0x78c5555600
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12ef0, Size: 0x30] 0x78c5555580
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x12f20, Size: 0xb0] 0x78c5555500
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12fd0, Size: 0x30] 0x78c5555480
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13000, Size: 0x80] 0x78c5555400
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x13080, Size: 0x30] 0x78c5555380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x130b0, Size: 0x80] 0x78c5555300
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x13130, Size: 0x30] 0x78c5557380
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13160, Size: 0x28] 0x78c5557300
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13188, Size: 0x28] 0x78c5557280
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x131b0, Size: 0x28] 0x78c5557200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x131d8, Size: 0x28] 0x78c5557180
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13200, Size: 0x28] 0x78c5557100
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13228, Size: 0x28] 0x78c5557080
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13250, Size: 0x28] 0x78c5557000
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13278, Size: 0x28] 0x78c5556f80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x132a0, Size: 0x28] 0x78c5556f00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x132c8, Size: 0x28] 0x78c5556e80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x132f0, Size: 0x28] 0x78c5556e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13318, Size: 0x28] 0x78c5556d80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13340, Size: 0x28] 0x78c5556d00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13368, Size: 0x28] 0x78c5556c80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13390, Size: 0x28] 0x78c5556c00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x133b8, Size: 0x28] 0x78c5556b80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x133e0, Size: 0x28] 0x78c5556b00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x13408, Size: 0x28] 0x78c5556a80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x13430, Size: 0xc0] 0x78c5556a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x134f0, Size: 0x80] 0x78c5556980
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x13570, Size: 0xa0] 0x78c5556900
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x13610, Size: 0xe8] 0x78c5556880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x136f8, Size: 0x80] 0x78c5556800
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x13778, Size: 0xa0] 0x78c5556780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13818, Size: 0x80] 0x78c5556700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13898, Size: 0x80] 0x78c5556680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13918, Size: 0x80] 0x78c5556600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13998, Size: 0x80] 0x78c5556580
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13a18, Size: 0x80] 0x78c5556500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13a98, Size: 0x80] 0x78c5556480
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13b18, Size: 0x80] 0x78c5556400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13b98, Size: 0x80] 0x78c5556380
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x13c18, Size: 0xa0] 0x78c5558400
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x13cb8, Size: 0xa0] 0x78c5558380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x13d58, Size: 0x80] 0x78c5558300
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x13dd8, Size: 0xa0] 0x78c5558280
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x13e78, Size: 0xc0] 0x78c5558200
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x13f38, Size: 0xe8] 0x78c5558180
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x14020, Size: 0xa0] 0x78c5558100
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x140c0, Size: 0x80] 0x78c5558080
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x14140, Size: 0xa0] 0x78c5558000
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x141e0, Size: 0x50] 0x78c5557f80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x14230, Size: 0xc0] 0x78c5557f00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x142f0, Size: 0xe8] 0x78c5557e80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x143d8, Size: 0x30] 0x78c5557e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x14408, Size: 0x28] 0x78c5557d80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x14430, Size: 0x28] 0x78c5557d00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x14458, Size: 0xe8] 0x78c5557c80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x14540, Size: 0x30] 0x78c5557c00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x14570, Size: 0x80] 0x78c5557b80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x145f0, Size: 0x30] 0x78c5557b00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x14620, Size: 0xb0] 0x78c5557a80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x146d0, Size: 0x30] 0x78c5557a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x14700, Size: 0x80] 0x78c5557980
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x14780, Size: 0x30] 0x78c5557900
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x147b0, Size: 0x50] 0x78c5557880
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x14800, Size: 0x30] 0x78c5557800
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone;//[Offset: 0x14830, Size: 0xa0] 0x78c5557780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x148d0, Size: 0x80] 0x78c5557700
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone;//[Offset: 0x14950, Size: 0xa0] 0x78c5557680
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone;//[Offset: 0x149f0, Size: 0xa0] 0x78c5557600
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x14a90, Size: 0xa0] 0x78c5557580
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x14b30, Size: 0xa0] 0x78c5557500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x14bd0, Size: 0x80] 0x78c5557480
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x14c50, Size: 0x80] 0x78c5557400
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x14cd0, Size: 0x30] 0x78c5559480
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x14d00, Size: 0x28] 0x78c5559400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x14d28, Size: 0x80] 0x78c5559380
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x14da8, Size: 0x30] 0x78c5559300
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x14dd8, Size: 0x50] 0x78c5559280
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x14e28, Size: 0xa0] 0x78c5559200
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x14ec8, Size: 0x50] 0x78c5559180
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x14f18, Size: 0x30] 0x78c5559100
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x14f48, Size: 0xb0] 0x78c5559080
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x14ff8, Size: 0x30] 0x78c5559000
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x15028, Size: 0xc8] 0x78c5558f80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x150f0, Size: 0x80] 0x78c5558f00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x15170, Size: 0x80] 0x78c5558e80
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x151f0, Size: 0xa0] 0x78c5558e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x15290, Size: 0x28] 0x78c5558d80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x152b8, Size: 0x28] 0x78c5558d00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x152e0, Size: 0x28] 0x78c5558c80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x15308, Size: 0x28] 0x78c5558c00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x15330, Size: 0x28] 0x78c5558b80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x15358, Size: 0xe8] 0x78c5558b00
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x15440, Size: 0xc8] 0x78c5558a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x15508, Size: 0x80] 0x78c5558a00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x15588, Size: 0x30] 0x78c5558980
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x155b8, Size: 0xe8] 0x78c5558900
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x156a0, Size: 0xc8] 0x78c5558880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x15768, Size: 0x80] 0x78c5558800
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x157e8, Size: 0x30] 0x78c5558780
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x15818, Size: 0xe8] 0x78c5558700
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x15900, Size: 0x30] 0x78c5558680
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x15930, Size: 0xb0] 0x78c5558600
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x159e0, Size: 0xa0] 0x78c5558580
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x15a80, Size: 0x20] 0x78c5558500
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x15aa0, Size: 0x108] 0x78c5558480
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x15ba8, Size: 0x20] 0x78c555a500
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x15bc8, Size: 0xc8] 0x78c555a480
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x15c90, Size: 0xe8] 0x78c555a400
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x15d78, Size: 0xc8] 0x78c555a380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x15e40, Size: 0x80] 0x78c555a300
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x15ec0, Size: 0x80] 0x78c555a280
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x15f40, Size: 0xe8] 0x78c555a200
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x16028, Size: 0xa0] 0x78c555a180
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x160c8, Size: 0x28] 0x78c555a100
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x160f0, Size: 0x28] 0x78c555a080
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x16118, Size: 0x28] 0x78c555a000
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x16140, Size: 0x28] 0x78c5559f80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x16168, Size: 0x28] 0x78c5559f00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x16190, Size: 0xe8] 0x78c5559e80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x16278, Size: 0xc8] 0x78c5559e00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x16340, Size: 0x80] 0x78c5559d80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x163c0, Size: 0x30] 0x78c5559d00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x163f0, Size: 0xe8] 0x78c5559c80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x164d8, Size: 0xc8] 0x78c5559c00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x165a0, Size: 0x80] 0x78c5559b80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x16620, Size: 0x30] 0x78c5559b00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x16650, Size: 0xe8] 0x78c5559a80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x16738, Size: 0x30] 0x78c5559a00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x16768, Size: 0xb0] 0x78c5559980
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x16818, Size: 0xc8] 0x78c5559900
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x168e0, Size: 0x30] 0x78c5559880
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x16910, Size: 0x28] 0x78c5559800
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x16938, Size: 0x28] 0x78c5559780
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x16960, Size: 0x28] 0x78c5559700
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x16988, Size: 0x28] 0x78c5559680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x169b0, Size: 0x80] 0x78c5559600
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x16a30, Size: 0x30] 0x78c5559580
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x16a60, Size: 0x50] 0x78c5559500
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x16ab0, Size: 0x50] 0x78c555b580
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x16b00, Size: 0x50] 0x78c555b500
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x16b50, Size: 0x50] 0x78c555b480
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x16ba0, Size: 0x50] 0x78c555b400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x16bf0, Size: 0x80] 0x78c555b380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x16c70, Size: 0x80] 0x78c555b300
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x16cf0, Size: 0xc8] 0x78c555b280
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x16db8, Size: 0xc8] 0x78c555b200
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x16e80, Size: 0x80] 0x78c555b180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x16f00, Size: 0x80] 0x78c555b100
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x16f80, Size: 0xc8] 0x78c555b080
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x17048, Size: 0x80] 0x78c555b000
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x170c8, Size: 0x80] 0x78c555af80
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x17148, Size: 0x50] 0x78c555af00
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x17198, Size: 0xa0] 0x78c555ae80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x17238, Size: 0x30] 0x78c555ae00
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend;//[Offset: 0x17268, Size: 0xc8] 0x78c555ad80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x17330, Size: 0x80] 0x78c555ad00
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x173b0, Size: 0x50] 0x78c555ac80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x17400, Size: 0xc8] 0x78c555ac00
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x174c8, Size: 0x50] 0x78c555ab80
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend;//[Offset: 0x17518, Size: 0xc8] 0x78c555ab00
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x175e0, Size: 0x50] 0x78c555aa80
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x17630, Size: 0xa0] 0x78c555aa00
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x176d0, Size: 0xa0] 0x78c555a980
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x17770, Size: 0x50] 0x78c555a900
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend;//[Offset: 0x177c0, Size: 0xc8] 0x78c555a880
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x17888, Size: 0x50] 0x78c555a800
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x178d8, Size: 0x50] 0x78c555a780
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend;//[Offset: 0x17928, Size: 0xc8] 0x78c555a700
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x179f0, Size: 0x50] 0x78c555a680
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x17a40, Size: 0x30] 0x78c555a600
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x17a70, Size: 0xb0] 0x78c555a580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x17b20, Size: 0x30] 0x78c555c600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x17b50, Size: 0x80] 0x78c555c580
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x17bd0, Size: 0xa0] 0x78c555c500
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x17c70, Size: 0xe8] 0x78c555c480
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x17d58, Size: 0x30] 0x78c555c400
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x17d88, Size: 0x28] 0x78c555c380
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x17db0, Size: 0x30] 0x78c555c300
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x17de0, Size: 0xb0] 0x78c555c280
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x17e90, Size: 0x30] 0x78c555c200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x17ec0, Size: 0x28] 0x78c555c180
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x17ee8, Size: 0x28] 0x78c555c100
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x17f10, Size: 0xe8] 0x78c555c080
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x17ff8, Size: 0x30] 0x78c555c000
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x18028, Size: 0xa0] 0x78c555bf80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x180c8, Size: 0x80] 0x78c555bf00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18148, Size: 0x80] 0x78c555be80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x181c8, Size: 0x30] 0x78c555be00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x181f8, Size: 0xb0] 0x78c555bd80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x182a8, Size: 0x30] 0x78c555bd00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x182d8, Size: 0xb0] 0x78c555bc80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18388, Size: 0x80] 0x78c555bc00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18408, Size: 0x80] 0x78c555bb80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18488, Size: 0x80] 0x78c555bb00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18508, Size: 0x80] 0x78c555ba80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18588, Size: 0x80] 0x78c555ba00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18608, Size: 0x80] 0x78c555b980
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x18688, Size: 0xa0] 0x78c555b900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18728, Size: 0x80] 0x78c555b880
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x187a8, Size: 0xa0] 0x78c555b800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18848, Size: 0x80] 0x78c555b780
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x188c8, Size: 0xa0] 0x78c555b700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18968, Size: 0x80] 0x78c555b680
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x189e8, Size: 0xa0] 0x78c555b600
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x18a88, Size: 0xa0] 0x78c555d680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18b28, Size: 0x80] 0x78c555d600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18ba8, Size: 0x80] 0x78c555d580
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18c28, Size: 0x80] 0x78c555d500
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x18ca8, Size: 0xa0] 0x78c555d480
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18d48, Size: 0x80] 0x78c555d400
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x18dc8, Size: 0xa0] 0x78c555d380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18e68, Size: 0x80] 0x78c555d300
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x18ee8, Size: 0xa0] 0x78c555d280
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x18f88, Size: 0x80] 0x78c555d200
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x19008, Size: 0xa0] 0x78c555d180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x190a8, Size: 0x80] 0x78c555d100
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x19128, Size: 0xa0] 0x78c555d080
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x191c8, Size: 0x28] 0x78c555d000
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x191f0, Size: 0x28] 0x78c555cf80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x19218, Size: 0x30] 0x78c555cf00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x19248, Size: 0x80] 0x78c555ce80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x192c8, Size: 0x30] 0x78c555ce00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x192f8, Size: 0xb0] 0x78c555cd80
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x193a8, Size: 0x30] 0x78c555cd00
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x193d8, Size: 0xa0] 0x78c555cc80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x19478, Size: 0x158] 0x78c555cc00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x195d0, Size: 0xe8] 0x78c555cb80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x196b8, Size: 0xe8] 0x78c555cb00
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x197a0, Size: 0x20] 0x78c555ca80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x197c0, Size: 0x108] 0x78c555ca00
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x198c8, Size: 0x20] 0x78c555c980
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x198e8, Size: 0x108] 0x78c555c900
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x199f0, Size: 0x108] 0x78c555c880
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x19af8, Size: 0x108] 0x78c555c800
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x19c00, Size: 0x108] 0x78c555c780
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x19d08, Size: 0x108] 0x78c555c700
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x19e10, Size: 0x108] 0x78c555c680
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x19f18, Size: 0x108] 0x78c555e700
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1a020, Size: 0x108] 0x78c555e680
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1a128, Size: 0x108] 0x78c555e600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1a230, Size: 0x80] 0x78c555e580
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x1a2b0, Size: 0xc0] 0x78c555e500
	byte MovementMode;//[Offset: 0x1a370, Size: 0x1] 0x78c555e480
	Rotator LastVelocityRotation;//[Offset: 0x1a374, Size: 0xc] 0x78c555e400
	float Direction;//[Offset: 0x1a380, Size: 0x4] 0x78c555e380
	Vector2D AimOffset;//[Offset: 0x1a384, Size: 0x8] 0x78c555e300
	Rotator PreviousVelocityRotation;//[Offset: 0x1a38c, Size: 0xc] 0x78c555e280
	float YawValue;//[Offset: 0x1a398, Size: 0x4] 0x78c555e200
	float AccelerationValue;//[Offset: 0x1a39c, Size: 0x4] 0x78c555e180
	float PreviousSpeed;//[Offset: 0x1a3a0, Size: 0x4] 0x78c555e100
	float LeanRotation;//[Offset: 0x1a3a4, Size: 0x4] 0x78c555e080
	float TurnInPlaceDelayCount;//[Offset: 0x1a3a8, Size: 0x4] 0x78c555e000
	float TurnInPlaceTime;//[Offset: 0x1a3ac, Size: 0x4] 0x78c555df80
	CurveFloat* TurnInPlaceCurve;//[Offset: 0x1a3b0, Size: 0x8] 0x78c555df00
	float TurnInPlaceRate;//[Offset: 0x1a3b8, Size: 0x4] 0x78c555de80
	float PreviousCurveValue;//[Offset: 0x1a3bc, Size: 0x4] 0x78c555de00
	float CurveValue;//[Offset: 0x1a3c0, Size: 0x4] 0x78c555dd80
	float LeanAcceleration;//[Offset: 0x1a3c4, Size: 0x4] 0x78c555dd00
	bool ShouldRotateInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3c8, Size: 0x1] 0x78c555dc80
	float RotateInPlaceTime;//[Offset: 0x1a3cc, Size: 0x4] 0x78c555dc00
	float RotationOffset;//[Offset: 0x1a3d0, Size: 0x4] 0x78c555db80
	enum CardinalDirection;//[Offset: 0x1a3d4, Size: 0x1] 0x78b9b0d3a0
	enum MovementDirection;//[Offset: 0x1a3d5, Size: 0x1] 0x78b9b0d300
	Rotator PreviousCharacterRotation;//[Offset: 0x1a3d8, Size: 0xc] 0x78c555da00
	float RotationAnimationPlayRate;//[Offset: 0x1a3e4, Size: 0x4] 0x78c555d980
	bool UsePredictedAirTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3e8, Size: 0x1] 0x78c555d900
	float InAirTime;//[Offset: 0x1a3ec, Size: 0x4] 0x78c555d880
	float PredictedInAirTime;//[Offset: 0x1a3f0, Size: 0x4] 0x78c555d800
	bool InIdleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3f4, Size: 0x1] 0x78c555d780
	bool InGroundedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3f5, Size: 0x1] 0x78c555d700
	FName PelvisBone;//[Offset: 0x1a3f8, Size: 0x8] 0x78c555f780
	float FlailRate;//[Offset: 0x1a400, Size: 0x4] 0x78c555f700
	float FallSpeed;//[Offset: 0x1a404, Size: 0x4] 0x78c555f680
	float LeanInAir;//[Offset: 0x1a408, Size: 0x4] 0x78c555f600
	float JumpVelocity;//[Offset: 0x1a40c, Size: 0x4] 0x78c555f580
	float StartPosition;//[Offset: 0x1a410, Size: 0x4] 0x78c555f500
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a414, Size: 0x1] 0x78c555f480
	AnimSequenceBase* LandingAnimation;//[Offset: 0x1a418, Size: 0x8] 0x78c555f400
	FName AdditiveLandingSlot;//[Offset: 0x1a420, Size: 0x8] 0x78c555f380
	FName TurnInPlaceSlot;//[Offset: 0x1a428, Size: 0x8] 0x78c555f300
	bool weapon_show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a430, Size: 0x1] 0x78c555f280
	float FighInRotatorSpeed;//[Offset: 0x1a434, Size: 0x4] 0x78c555f200
	AnimMontage* BeAttackSkillMonTage;//[Offset: 0x1a438, Size: 0x8] 0x78c555f180
	bool in_air;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a440, Size: 0x1] 0x78c555f100
	float InputPith;//[Offset: 0x1a444, Size: 0x4] 0x78c555f080
	float BodyOffset;//[Offset: 0x1a448, Size: 0x4] 0x78c555f000
	float ClienBetAttackAngle;//[Offset: 0x1a44c, Size: 0x4] 0x78c555ef80
	bool ClientBeAttackFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a450, Size: 0x1] 0x78c555ef00
	float ClientBeAttackTime;//[Offset: 0x1a454, Size: 0x4] 0x78c555ee80
	bool block_counter_attack_flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a458, Size: 0x1] 0x78c555ee00
	float UseItemFullTime;//[Offset: 0x1a45c, Size: 0x4] 0x78c555ed80
	float InAirSpeed;//[Offset: 0x1a460, Size: 0x4] 0x78c555ed00
	int CurrLianTiaoIndex;//[Offset: 0x1a464, Size: 0x4] 0x78c555ec80
	bool LianTiaoFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a468, Size: 0x1] 0x78c555ec00
	byte AssassinationStateType;//[Offset: 0x1a469, Size: 0x1] 0x78c555eb80
	float AssassinMoveFullTime;//[Offset: 0x1a46c, Size: 0x4] 0x78c555eb00
	bool AssassinIsFullKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a470, Size: 0x1] 0x78c555ea80
	int CurrWeaponFire;//[Offset: 0x1a474, Size: 0x4] 0x78c555ea00
	bool IsServer?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a478, Size: 0x1] 0x78c555e980
	enum Curr_KeepInterActiveType;//[Offset: 0x1a479, Size: 0x1] 0x78b9b0d260
	bool Random_Hit_Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a47a, Size: 0x1] 0x78c555e880
	float Curr_BeAttackAngle;//[Offset: 0x1a47c, Size: 0x4] 0x78c555e800
	float Pre_JumpSpeed;//[Offset: 0x1a480, Size: 0x4] 0x78c555e780
	float Curr_JumpVelocity;//[Offset: 0x1a484, Size: 0x4] 0x78c555ff80
	bool IsDengQiangTiao;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a488, Size: 0x1] 0x78c555ff00
	float JumpEndSpeed;//[Offset: 0x1a48c, Size: 0x4] 0x78c555fe80
	int IdlePoseID;//[Offset: 0x1a490, Size: 0x4] 0x78c555fe00
	bool HuoHua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a494, Size: 0x1] 0x78c555fd80
	bool IsWakeFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a495, Size: 0x1] 0x78c555fd00
	bool IsKnockDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a496, Size: 0x1] 0x78c555fc80
	bool IsOnPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a497, Size: 0x1] 0x78c555fc00
	BP_WuXiaX_Character_C* OwnerPlayerBP;//[Offset: 0x1a498, Size: 0x8] 0x78c555fb80
	BP_NpcCharacter_C* NpcPlayer;//[Offset: 0x1a4a0, Size: 0x8] 0x78c555fb00
	bool IsAi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4a8, Size: 0x1] 0x78c555fa80
	float CurrPhysicsWeight;//[Offset: 0x1a4ac, Size: 0x4] 0x78c555fa00
	ParticleSystem* AttackParticleHit;//[Offset: 0x1a4b0, Size: 0x8] 0x78c555f980
	bool IsHandDouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4b8, Size: 0x1] 0x78c555f900
	bool IsHandR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4b9, Size: 0x1] 0x78c555f880
	bool IsNoWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4ba, Size: 0x1] 0x78c555f800
	<int,ParticleSystem*> WeaponParticle;//[Offset: 0x1a4c0, Size: 0x50] 0x78c338ea40
	ParticleSystemComponent* NowWeaponParticle;//[Offset: 0x1a510, Size: 0x8] 0x78c4c10f80
	ParticleSystemComponent* NowWeaponParticleL;//[Offset: 0x1a518, Size: 0x8] 0x78c4c10f00
	bool falsevalue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a520, Size: 0x1] 0x78c4c10e80
	BP_WuXiaX_Character_C* NewLocalVar;//[Offset: 0x1a528, Size: 0x8] 0x78c4c10e00
	Vector HoldGunLeftHandLocation;//[Offset: 0x1a530, Size: 0xc] 0x78c4c10d80
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c34eb920
	bool SetComponents(BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetComponents_ReturnValue);// 0x8a873f8 0x78c34eba00
	void CharacterFreeView(out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Is_free_view_net_ReturnValue);// 0x8a873f8 0x78c34ebae0
	void Character_UseItemEffect(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c34ebbc0
	float WuXia_Montage_Play(AnimMontage* MontageToPlay, float Rate, float delay_time, FName section_name);// 0x8a873f8 0x78c34ebca0
	void GetTurnInPlaceAnimation(out AnimSequence* TrunL90, out AnimSequence* TurnR90, out AnimSequence* TurnL180, out AnimSequence* TurnR180, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c34ebd80
	void ShouldnotRotate(out bool ShouldnotRotate, bool CallFunc_IsAnyMontagePlaying_ReturnValue);// 0x8a873f8 0x78c34ebe60
	void ChooseTurnInPlaceCurve(Object* TurnAnim, out CurveFloat* TurnInPlaceCurve, FString CallFunc_GetObjectName_ReturnValue, FString CallFunc_RightChop_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x8a873f8 0x78c34ebf40
	void CanTurnInPlace(out bool CanTurnInPlace, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c34ec020
	void InAirTrace(float CallFunc_K2_GetWalkableFloorZ_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, PredictProjectilePathParams K2Node_MakeStruct_PredictProjectilePathParams, PredictProjectilePathResult CallFunc_Blueprint_PredictProjectilePath_Advanced_PredictResult, bool CallFunc_Blueprint_PredictProjectilePath_Advanced_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c34ec100
	void RotateInPlace(float RotationDegree Limit, float Max Time, float Min Rotation Rate, float Max Rotation Rate, float CallFunc_MapRangeClamped_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Abs_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c34ec1e0
	void TurnInPlace();// 0x8a873f8 0x78c34ec2c0
	void TurnInPlaceCheck(float Timer Angle A, float Timer Angle B, float Timer Delay A, float Timer Delay B, float AimAngleThreshold, float PlayRate1, float BlendInTime1, AnimSequence* TurnLeftAnim1, AnimSequence* TurnRightAnim1, float Aim Angle Threshold, float PlayRate2, float BlendInTime2, AnimSequence* TurnLeftAnim2, AnimSequence* TurnRightAnim2, bool Turn2, bool LookingRight, bool Temp_bool_Variable, bool Temp_bool_Variable, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Abs_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, AnimSequence* K2Node_Select_Default, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, AnimSequence* K2Node_Select_Default, float K2Node_Select_Default, AnimSequence* K2Node_Select_Default, bool Temp_bool_Variable, float K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c34ec3a0
	void SetGroundedLeaningValues(float CallFunc_FClamp_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_GetMaxAcceleration_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_FInterpTo_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool Temp_bool_Variable, float K2Node_Select_Default, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_FInterpTo_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78c34ec480
	void SetAimOffset(bool Temp_bool_Variable, Rotator K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector2D CallFunc_Vector2DInterpTo_ReturnValue);// 0x8a873f8 0x78c34ec560
	void Set Character Rotation(Old)(Rotator TargetRotation, float InterpSpeed, bool InputPin, float min_rotation_num, float now_rotatuib_yaw, float target_rotation_yaw, HorseRideComponent* CallFunc_GetComponentByClass_ReturnValue, WuXiaXHorse* CallFunc_Ride_horse_net_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, Rotator CallFunc_RInterpTo_ReturnValue, Rotator K2Node_Select_Default, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x8a873f8 0x78c34ec640
	void GetVariablesFromPawn(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_FInterpTo_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetPlayerType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_State_GetPlayerMotionState_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum CallFunc_State_GetPlayerChildState_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, Rotator CallFunc_View_GetCharacterSkillRotator_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, enum CallFunc_Fight_TakeWeaponState_ReturnValue, bool CallFunc_Fight_Is_in_block_ReturnValue, int CallFunc_Fight_CurrentWeaponType_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_ItemCtrl_GetUseItemState_ReturnValue, float CallFunc_Move_Parachute_input_right_ReturnValue, float CallFunc_Move_Parachute_input_forward_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Fight_Weak_flag_ReturnValue, enum CallFunc_Interactive_GetKeeyInteractiveType_ReturnValue, float CallFunc_Interactive_GetKeepingFullTime_ReturnValue, float CallFunc_Interactive_GetKeepingCurrentTime_ReturnValue, bool CallFunc_IsSwimming_ReturnValue, bool CallFunc_IsFalling_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_GetBaseAimRotation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, bool CallFunc_IsValid_ReturnValue, HorseRideComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_Ride_state_net_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, WuXia_Movement_Component* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_Movement_input_vector_net_ReturnValue, bool CallFunc_Is_free_view_net_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasTarget_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_VInterpTo_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c34ec720
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_9B8DD56A49E1C602FDCDE78073BB16C5();// 0x8a873f8 0x78c34ec800
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_5B11B1294B692F499A4AB4BEC3C85759();// 0x8a873f8 0x78c34ec8e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_D243A0C54479ED02EEF5BCAF52BF0235();// 0x8a873f8 0x78c34ec9c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_1D20D39943F02DDD93AAA3A199E68DB8();// 0x8a873f8 0x78c34e90e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_533109244FD0E55DACDADCBA7263748E();// 0x8a873f8 0x78c34e91c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_BF805B5044DE92E152748A903D044344();// 0x8a873f8 0x78c34e92a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_5FDDF61440325C2F3F77B58A45F94456();// 0x8a873f8 0x78c34e9380
	void OnCompleted_6F316ECE470CB50BD147EFA19BD5E688(FName NotifyName);// 0x8a873f8 0x78c34e9460
	void OnBlendOut_6F316ECE470CB50BD147EFA19BD5E688(FName NotifyName);// 0x8a873f8 0x78c34e9540
	void OnInterrupted_6F316ECE470CB50BD147EFA19BD5E688(FName NotifyName);// 0x8a873f8 0x78c34e9620
	void OnNotifyBegin_6F316ECE470CB50BD147EFA19BD5E688(FName NotifyName);// 0x8a873f8 0x78c34e9700
	void OnNotifyEnd_6F316ECE470CB50BD147EFA19BD5E688(FName NotifyName);// 0x8a873f8 0x78c34e97e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_EBADCF1F4A6719C20CC9DA8DCE377C4E();// 0x8a873f8 0x78c34e98c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_A2CFBEA047BD318B86758A921CF8D90B();// 0x8a873f8 0x78c34e99a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_E5DFCB1D4A8AA8ABBC09F99D7058D7EA();// 0x8a873f8 0x78c34e9a80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendSpacePlayer_456B08FF427B336842D036B1B28E2E27();// 0x8a873f8 0x78c34e9b60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_046342664E6062AA1755F58BC7354B21();// 0x8a873f8 0x78c34e9c40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TwoWayBlend_D9F743EA46F55C59FAFAEA9CC15E6C31();// 0x8a873f8 0x78c34e9d20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_5215CB204AE8527BE4EA7E88ECF5C60A();// 0x8a873f8 0x78c34e9e00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_51999B3142098BC142948D97E1F89D37();// 0x8a873f8 0x78c34e9ee0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TwoWayBlend_8B1D4B054414C0AF6E3907AE03A210BA();// 0x8a873f8 0x78c34e9fc0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_3A69ACB44AC7CBAEC6E4EFAC82E4FD5B();// 0x8a873f8 0x78c34ea0a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_4473AC894B8E3B337B7DFF8F06C9B7C1();// 0x8a873f8 0x78c34ea180
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c34ea260
	void BlueprintInitializeAnimation();// 0x8a873f8 0x78c34ea340
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_BB308B6A427E8011E985A0AC0CFDCF3E();// 0x8a873f8 0x78c34ea420
	void PlaySkill(AnimMontage* MontageToPlay, float Rate, float StartingPosition, FName StartingSection);// 0x8a873f8 0x78c34ea500
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TwoWayBlend_7CEAD19E48E6F00D261D0B942897D5B0();// 0x8a873f8 0x78c34ea5e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_7E355467462FEA20E7EE83B48FF2500C();// 0x8a873f8 0x78c34ea6c0
	void BlueprintBeginPlay();// 0x8a873f8 0x78c34ea7a0
	void SetActorRotation(Rotator Rotation);// 0x8a873f8 0x78c34ea880
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_004EED7940344A15766C12A6AE657BA3();// 0x8a873f8 0x78c34ea960
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TwoWayBlend_1D6243C74E400111F0AB709487E5E2DA();// 0x8a873f8 0x78c34eaa40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_8FCCA06B4502BEF765E7DDAC94D51603();// 0x8a873f8 0x78c34eab20
	void CE_HuoHuaEffect();// 0x8a873f8 0x78c34eac00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_9CC4D91947EF0C36EDDAAF8EE64A2885();// 0x8a873f8 0x78c34eace0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_25EC6169481122A55AB549B1D8D2A805();// 0x8a873f8 0x78c34e7400
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_688FE1D445CF405EB4EF8A9C2878C99B();// 0x8a873f8 0x78c34e74e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_C96F09D84EECF9989A776EA63575A821();// 0x8a873f8 0x78c34e75c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_369087FE4CCA04A193AC4AA60D530260();// 0x8a873f8 0x78c34e76a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_21A0D5A64D3122232BECACB7FDA85E40();// 0x8a873f8 0x78c34e7780
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_960A4E1346C9FAC41FE96290CBEF7FAA();// 0x8a873f8 0x78c34e7860
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_61AE4AEB435723E61F006B8BE50A0CA7();// 0x8a873f8 0x78c34e7940
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_F91DDFCA49FCABA7890094A6E6DA7933();// 0x8a873f8 0x78c34e7a20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_FF3C18094142A16CEC7E63B4F29C89F1();// 0x8a873f8 0x78c34e7b00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_CCC48D9947261DAEED375380D510724E();// 0x8a873f8 0x78c34e7be0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_033D22CE4975AAFB2DA62B89C58966EE();// 0x8a873f8 0x78c34e7cc0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_A7DB12ED446BE2EDF94C9FAF9086E7A5();// 0x8a873f8 0x78c34e7da0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_F6147F4349501D1714743CB37E4758B9();// 0x8a873f8 0x78c34e7e80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_9A1A0D2C41F81429D5C6608B97BDF8E9();// 0x8a873f8 0x78c34e7f60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_36CD6AED437D50335A97D29F039D0BB2();// 0x8a873f8 0x78c34e8040
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_437A66A34A07A0FF213A1E8D43B681C8();// 0x8a873f8 0x78c34e8120
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_042F0B644992D6862D1459BF9EAF8016();// 0x8a873f8 0x78c34e8200
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_482961C54D3AB8A169991C97601FA193();// 0x8a873f8 0x78c34e82e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_DE5F60B84742B2BF4315BE9166A9EC76();// 0x8a873f8 0x78c34e83c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_5807D7D24C7A12CDB04AB7892468DDD5();// 0x8a873f8 0x78c34e84a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_EF9D084A471393E3BC23D983CD444F2C();// 0x8a873f8 0x78c34e8580
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_34DC2E904B63F5530B5293AD46B4334C();// 0x8a873f8 0x78c34e8660
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_2C2806AC4F135191E09DCBA48BC307F4();// 0x8a873f8 0x78c34e8740
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendSpacePlayer_56F5A4684390A0F2BAE6CDACA1913EAE();// 0x8a873f8 0x78c34e8820
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_C851846C4F9AB81CE964E794245CBFA7();// 0x8a873f8 0x78c34e8900
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_6EF7542D495C6234FBC2C58121E5AE9E();// 0x8a873f8 0x78c34e89e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequencePlayer_7585A90E4A03973533311499D330641F();// 0x8a873f8 0x78c34e8ac0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByInt_393C95A04BCD8C7F446D06ABB5B7C4F0();// 0x8a873f8 0x78c34e8ba0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_1365FFC749BD5D966C8359B2A7F39167();// 0x8a873f8 0x78c34e8c80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_F972FD6240D7AC95F93C7FAD3A6FE4BD();// 0x8a873f8 0x78c34e8d60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_5F126C7745FB7D24FBABFE9C3CC3488C();// 0x8a873f8 0x78c34e8e40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_2DD3BA814F641BE7C208F1B112F3EE9B();// 0x8a873f8 0x78c34e8f20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_SequenceEvaluator_8AA2AD834A8BB2E669ED95950CA24F27();// 0x8a873f8 0x78c34e9000
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_LayeredBoneBlend_62807B7942E203CDBC788A8EE34F8B5C();// 0x8a873f8 0x78c34e5720
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_22AC9A114521AF75F2AB97AD0475E289();// 0x8a873f8 0x78c34e5800
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_63F958354F38771D70AB839C9ADF3932();// 0x8a873f8 0x78c34e58e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_2CC331454833201369A2DE8D256F6C2E();// 0x8a873f8 0x78c34e59c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_AD2AC13041988AA6A5EF4F96FC4DEAD1();// 0x8a873f8 0x78c34e5aa0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_D5848D64461BE993EC8867911861ABFA();// 0x8a873f8 0x78c34e5b80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_00C3D8FB4212344186227F818A2A36D1();// 0x8a873f8 0x78c34e5c60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_65F2D2E84D41B0ADC1A803BC609D8498();// 0x8a873f8 0x78c34e5d40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_D79FF28546D7AA92E30984B57C9244FE();// 0x8a873f8 0x78c34e5e20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_BlendListByBool_80B4D3CF48D2FA9FCCDEE68DB104CA04();// 0x8a873f8 0x78c34e5f00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_CDBB83E549DC22559B5CC4B53822686F();// 0x8a873f8 0x78c34e5fe0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_AA4BAFD14841CD235EAF9B8796F7BE0C();// 0x8a873f8 0x78c34e60c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_PlayerAnim_AnimGraphNode_TransitionResult_A50747C84ECF4B425B00EB9AE427D077();// 0x8a873f8 0x78c34e61a0
	void AnimNotify_PullBowEnd();// 0x8a873f8 0x78c34e6280
	void AnimNotify_PullBowStart();// 0x8a873f8 0x78c34e6360
	void AnimNotify_SwitchToThrowWeapon();// 0x8a873f8 0x78c34e6440
	void AnimNotify_SwitchToRangeWeapon();// 0x8a873f8 0x78c34e6520
	void AnimNotify_LaunchMissile();// 0x8a873f8 0x78c34e6600
	void AnimNotify_BlendIn_ShanBi();// 0x8a873f8 0x78c34e4920
	void AnimNotify_Enter_BlendOut_XiuXian();// 0x8a873f8 0x78c34e66e0
	void AnimNotify_Enter_Grounded_To_TiaoQi();// 0x8a873f8 0x78c34e67c0
	void AnimNotify_Enter_TiaoYueKaiShi_To_DengQiangTiao();// 0x8a873f8 0x78c34e68a0
	void Event_DengQiangTiao();// 0x8a873f8 0x78c34e6980
	void AnimNotify_Enter_ChangJingHuDong();// 0x8a873f8 0x78c34e6a60
	void AnimNotify_Enter_QingGong_To_TiaoQi();// 0x8a873f8 0x78c34e6b40
	void AnimNotify_BlendIn_Begin_BinSi_To_BeiJiJiu();// 0x8a873f8 0x78c34e6c20
	void AnimNotify_Enter_TiaoQi_To_Grounded();// 0x8a873f8 0x78c34e6d00
	void AnimNotify_Enter_TiaoQi_To_QiTiaoJieShu();// 0x8a873f8 0x78c34e6de0
	void AnimNotify_Enter_Grounded_To_LianTiao();// 0x8a873f8 0x78c34e6ec0
	void AnimNotify_Falling();// 0x8a873f8 0x78c34e6fa0
	void AnimNotify_EnteredGroundedState();// 0x8a873f8 0x78c34e7080
	void AnimNotify_LeftGroundedState();// 0x8a873f8 0x78c34e7160
	void AnimNotify_LeftIdleState();// 0x8a873f8 0x78c34e7240
	void AnimNotify_EnteredIdleState();// 0x8a873f8 0x78c34e7320
	void StopRotatingInPlace();// 0x8a873f8 0x78c34e3a40
	void StopTurnInPlace();// 0x8a873f8 0x78c34e3b20
	void StartTurnInPlace();// 0x8a873f8 0x78c34e3c00
	void PlayTurnInPlaceAnimation(float PlayRate, float BlendInTime, AnimSequence* TurnAnim);// 0x8a873f8 0x78c34e3ce0
	void AnimNotify_EnterBlockBeAttack();// 0x8a873f8 0x78c34e3dc0
	void AnimNotify_Spawn_CJ_Mesh();// 0x8a873f8 0x78c34e3ea0
	void AnimNotify_SetCamera2DLocationM();// 0x8a873f8 0x78c34e3f80
	void AnimNotify_SetCamera2DLocationN();// 0x8a873f8 0x78c34e4060
	void AnimNotify_Spawn_CQ_Mesh();// 0x8a873f8 0x78c34e4140
	void AnimNotify_SetCamera2DLocation();// 0x8a873f8 0x78c34e4220
	void AnimNotify_Niagara_CQ_Mesh();// 0x8a873f8 0x78c34e4300
	void AnimNotify_HitParticle_Skill_D_A();// 0x8a873f8 0x78c34e43e0
	void AnimNotify_HitParticle_Atk_None();// 0x8a873f8 0x78c34e44c0
	void AnimNotify_HitParticle_Atk_R_C();// 0x8a873f8 0x78c34e45a0
	void AnimNotify_HitParticle_Atk_L_B();// 0x8a873f8 0x78c34e4680
	void AnimNotify_HitParticle_Atk_R_B();// 0x8a873f8 0x78c34e4760
	void AnimNotify_HitParticle_Atk_D_A();// 0x8a873f8 0x78c34e4840
	void AnimNotify_HitParticle_Atk_L_Sp1();// 0x8a873f8 0x78c34e4a00
	void AnimNotify_HitParticle_Atk_R_A();// 0x8a873f8 0x78c34e4ae0
	void AnimNotify_HitParticle_Atk_L_A();// 0x8a873f8 0x78c34e4bc0
	void AnimNotify_HitParticle_Skill_R_A();// 0x8a873f8 0x78c34e4ca0
	void AnimNotify_HitParticle_Skill_R_B();// 0x8a873f8 0x78c34e4d80
	void AnimNotify_HitParticle_Skill_L_B();// 0x8a873f8 0x78c34e4e60
	void AnimNotify_HitParticle_Skill_L_A();// 0x8a873f8 0x78c34e4f40
	void AnimNotify_HitParticleEnd_R();// 0x8a873f8 0x78c34e5020
	void AnimNotify_HitParticleEnd_L();// 0x8a873f8 0x78c34e5100
	void ClientPlayAddAtack(float Angle);// 0x8a873f8 0x78c34e51e0
	void AnimNotify_EnterHitBlendIn();// 0x8a873f8 0x78c34e52c0
	void AnimNotify_LeaveHitBlendOut();// 0x8a873f8 0x78c34e5480
	void AnimNotify_EnterHitBlendOut();// 0x8a873f8 0x78c34e5560
	void AnimNotify_LeaveHitBlendIn();// 0x8a873f8 0x78c34e5640
	void AnimNotify_daoguang_end();// 0x8a873f8 0x78c34e1d60
	void AnimNotify_daoguang_start();// 0x8a873f8 0x78c34e1e40
	void AnimNotify_LeaveRealHit3();// 0x8a873f8 0x78c34e1f20
	void AnimNotify_LeaveRealHit2();// 0x8a873f8 0x78c34e2000
	void AnimNotify_LeaveRealHit1();// 0x8a873f8 0x78c34e20e0
	void AnimNotify_EnterHit();// 0x8a873f8 0x78c34e21c0
	void AnimNotify_Enter_PuTongYiDong_To_ShiYongDaoJu();// 0x8a873f8 0x78c34e22a0
	void AnimNotify_Enter_ZhuiWei_To_CiShaZhong();// 0x8a873f8 0x78c34e2380
	void AnimNotify_Enter_Grounded_To_CiSha();// 0x8a873f8 0x78c34e2460
	void AnimNotify_Enter_YiDong_BlendIn_Reload();// 0x8a873f8 0x78c34e2540
	void AnimNotify_Enter_BlendIn_YiDong_To_MiaoZhun();// 0x8a873f8 0x78c34e2620
	void AnimNotify_Enter_Shoot_Fire();// 0x8a873f8 0x78c34e27e0
	void ExecuteUbergraph_BP_PlayerAnim(int EntryPoint, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, FName Temp_name_Variable, Rotator CallFunc_K2_GetActorRotation_ReturnValue, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float K2Node_Event_DeltaTimeX, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, bool CallFunc_SetComponents_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AnimMontage* K2Node_CustomEvent_MontageToPlay, float K2Node_CustomEvent_rate, float K2Node_CustomEvent_StartingPosition, FName K2Node_CustomEvent_StartingSection, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, Rotator K2Node_Event_rotation, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_VSize_ReturnValue, HorseRideComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, WuXiaXHorse* CallFunc_Ride_horse_net_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, BP_Base_HorseAnim_C* K2Node_DynamicCast_AsBP_Base_Horse_Anim, bool K2Node_DynamicCast_bSuccess, BP_WuXiaHorseAnim_C* K2Node_DynamicCast_AsBP_Wu_Xia_Horse_Anim, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetSimulatePhysicsEnabled_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetUpVector_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, int K2Node_Select_Default, Vector CallFunc_Multiply_VectorInt_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool Temp_bool_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_GetForwardVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, const Actor*[] K2Node_MakeArray_Array, const byte[] K2Node_MakeArray_Array, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, enum Temp_byte_Variable, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool Temp_bool_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, enum Temp_byte_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, AnimSequenceBase* Temp_object_Variable, AnimSequenceBase* Temp_object_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_View_GetWeaponComponent_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_View_GetWeaponComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetPostProcessInstance_ReturnValue, BP_Bow_Anim_C* K2Node_DynamicCast_AsBP_Bow_Anim, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetPostProcessInstance_ReturnValue, BP_Bow_Anim_C* K2Node_DynamicCast_AsBP_Bow_Anim, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_HUD_SwitchToThrowWeapon_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_HUD_SwitchToRangeWeapon_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, AnimSequenceBase* Temp_object_Variable, AnimSequenceBase* Temp_object_Variable, bool CallFunc_CanTurnInPlace_CanTurnInPlace, AnimSequenceBase* Temp_object_Variable, bool CallFunc_EqualEqual_VectorVector_ReturnValue, float K2Node_CustomEvent_PlayRate, float K2Node_CustomEvent_BlendInTime, AnimSequence* K2Node_CustomEvent_TurnAnim, float CallFunc_MapRangeClamped_ReturnValue, AnimMontage* CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue, CurveFloat* CallFunc_ChooseTurnInPlaceCurve_TurnInPlaceCurve, float CallFunc_MapRangeClamped_ReturnValue, AnimSequenceBase* Temp_object_Variable, ActorComponent* CallFunc_GetGameComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponentBudgeted* CallFunc_GetTakeWeaponMeshComponent_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetTakeWeaponMeshComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor_CQ_StaticMesh_C* CallFunc_FinishSpawningActor_ReturnValue, Actor_CQ_StaticMesh_2_C* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Mesh_CJ_FarAtk_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimSequenceBase* Temp_object_Variable, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, ParticleSystem* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, AnimSequenceBase* Temp_object_Variable, bool Temp_bool_Variable, AnimSequenceBase* Temp_object_Variable, bool CallFunc_Not_PreBool_ReturnValue, AnimSequenceBase* Temp_object_Variable, AnimSequenceBase* Temp_object_Variable, AnimSequenceBase* Temp_object_Variable, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_CustomEvent_angle, AnimSequenceBase* Temp_object_Variable, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckUseItemAdDrug_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_GetUseItemFullTime_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AnimSequenceBase* K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Assassin_GetFullActionTime_ReturnValue, bool CallFunc_Assassin_GetIsFallKill_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c34e29a0

--------------------------------
Class: BP_NpcCharacter_C.NpcCharacter.WuXiaXNpcCharacter.WuXiaXBaseCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x780, Size: 0x8] 0x78c53f1700
	WidgetComponent* HealthBar;//[Offset: 0x788, Size: 0x8] 0x78c53f1680
	WidgetComponent* Widget;//[Offset: 0x790, Size: 0x8] 0x78c53f1600
	ArrowComponent* Arrow1;//[Offset: 0x798, Size: 0x8] 0x78c53f1580
	BP_GhostTrailComponent_C* BP_GhostTrailComponent;//[Offset: 0x7a0, Size: 0x8] 0x78c53f1500
	int CurrGhostCount;//[Offset: 0x7a8, Size: 0x4] 0x78c53f1480
	bool auto_ai;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 0x1] 0x78c53f1400
	<int,NiagaraComponent*> BuffEffect;//[Offset: 0x7b0, Size: 0x50] 0x78c338da80
	BP_PlayerAnim_C* AnimInstance;//[Offset: 0x800, Size: 0x8] 0x78c53f1280
	DisplayHP_C* HealthBarWidget;//[Offset: 0x808, Size: 0x8] 0x78c53f1200
	LianJi_C* Combo;//[Offset: 0x810, Size: 0x8] 0x78c53f1180
	float HealthBarVisibleDelay;//[Offset: 0x818, Size: 0x4] 0x78c53f1100
	NiagaraComponent* dizzcom;//[Offset: 0x820, Size: 0x8] 0x78c53f3180
	MaterialBillboardComponent* bill_aim;//[Offset: 0x828, Size: 0x8] 0x78c53f3100
	TimerHandle LowPriorityTimer;//[Offset: 0x830, Size: 0x8] 0x78c53f3080
	TimerHandle HighPriorityTimer;//[Offset: 0x838, Size: 0x8] 0x78c53f3000
	void Check Dizziness State(bool CallFunc_IsValid_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_State_GetPlayerChildState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c34e3180
	void CheckHealthBarVisible(float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, bool CallFunc_IsVisible_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerPropertyComponent* K2Node_DynamicCast_AsPlayer_Property_Component, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Square_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetCurrentVisionPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetSquaredDistanceTo_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float K2Node_Select_Default);// 0x8a873f8 0x78c34e3260
	void CheckHealthBarVisibleDelay(float DeltaSeconds, bool Temp_bool_Variable, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FText Temp_text_Variable, Vector CallFunc_K2_GetComponentScale_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Transform CallFunc_GetSocketTransform_ReturnValue, bool Temp_bool_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, WuXiaXBaseCharacter* CallFunc_GetCurrentVisionPlayer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_DistanceSquared_ReturnValue, enum Temp_byte_Variable, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, enum K2Node_Select_Default, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText K2Node_Select_Default);// 0x8a873f8 0x78c34e3340
	void PrepareShowHp(UserWidget* CallFunc_GetWidget_ReturnValue, bool CallFunc_IsValid_ReturnValue, DisplayHP_C* K2Node_DynamicCast_AsDisplay_HP, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c34e3500
	void FightComponent(out PlayerFightComponent* Component, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerFightComponent* K2Node_DynamicCast_AsPlayer_Fight_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c34e35e0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c34e36c0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c34e37a0
	void CE_UseItemEffect();// 0x8a873f8 0x78c34e3880
	void CE_ShowShanBiEffect();// 0x8a873f8 0x78c34e3960
	void Show_GhostTrail();// 0x8a873f8 0x78c34e0080
	void Show_GhostTrails();// 0x8a873f8 0x78c34e0160
	void CustomEvent();// 0x8a873f8 0x78c34e0240
	void CE_CharacterColor_Enter(int EffectType);// 0x8a873f8 0x78c34e0320
	void CE_CharacterColor_Leave(int EffectType);// 0x8a873f8 0x78c34e0400
	void CustomEvent();// 0x8a873f8 0x78c34e04e0
	void CustomEvent();// 0x8a873f8 0x78c34e05c0
	void CE_JiaSu_Begin();// 0x8a873f8 0x78c34e06a0
	void CE_JiaSu_End();// 0x8a873f8 0x78c34e0780
	void Anim_BeginEffect(int EffectType);// 0x8a873f8 0x78c34e0860
	void Anim_EndEffect(int EffectType);// 0x8a873f8 0x78c34e0940
	void ReceiveDestroyed();// 0x8a873f8 0x78c34e0a20
	void PlayAttackEffect();// 0x8a873f8 0x78c34e0b00
	void PlayBeAttackEffect();// 0x8a873f8 0x78c34e0be0
	void OnPlayerHpChanged(int currentHP, int maxHP);// 0x8a873f8 0x78c34e0cc0
	void BlockBreaked();// 0x8a873f8 0x78c34e0da0
	void UpdatePlayerMarkedState(bool marked);// 0x8a873f8 0x78c34e0e80
	void KnockDowned();// 0x8a873f8 0x78c34e0f60
	void OnPlayerArmorChanged(float CurrentArmor, float MaxArmor);// 0x8a873f8 0x78c34e1040
	void LowPriorityTickTimer();// 0x8a873f8 0x78c34e1200
	void HighPriorityTickTimer();// 0x8a873f8 0x78c34e13c0
	void ExecuteUbergraph_BP_NpcCharacter(int EntryPoint, const int Temp_int_Variable, const int Temp_int_Variable, bool Temp_bool_Variable, FName Temp_name_Variable, FName Temp_name_Variable, int Temp_int_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, const Transform Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName Temp_name_Variable, FName Temp_name_Variable, FName Temp_name_Variable, bool CallFunc_HasAuthority_ReturnValue, float K2Node_Event_DeltaSeconds, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FName Temp_name_Variable, bool CallFunc_HasAuthority_ReturnValue, const int Temp_int_Variable, const int Temp_int_Variable, bool CallFunc_HasAuthority_ReturnValue, FName Temp_name_Variable, const int Temp_int_Variable, int K2Node_CustomEvent_effecttype, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_Event_effecttype, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_Conv_LinearColorToVector_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FName Temp_name_Variable, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_Conv_LinearColorToVector_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, int Temp_int_Variable, Transform CallFunc_MakeTransform_ReturnValue, const int Temp_int_Variable, NiagaraComponent* CallFunc_AddComponent_ReturnValue, FName Temp_name_Variable, Vector CallFunc_K2_GetComponentLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName Temp_name_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FName Temp_name_Variable, FName Temp_name_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FName Temp_name_Variable, int K2Node_Event_effecttype, int K2Node_Event_effecttype, bool CallFunc_Map_Remove_ReturnValue, NiagaraComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, NiagaraSystem* K2Node_Select_Default, bool CallFunc_Map_Contains_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, OBPlayerStateWidget_C* K2Node_DynamicCast_AsOBPlayer_State_Widget, bool K2Node_DynamicCast_bSuccess, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetPlayerUniqueId_ReturnValue, PlayerFightComponent* CallFunc_FightComponent_Component, byte[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, BP_PlayerAnim_C* K2Node_DynamicCast_AsBP_Player_Anim, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FName K2Node_Select_Default, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, int K2Node_Event_currentHP, int K2Node_Event_maxHP, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Conv_IntToFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, FName Temp_name_Variable, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, bool K2Node_Event_marked, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName Temp_name_Variable, ActorComponent* CallFunc_GetGameComponent_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, PlayerStateComponent* K2Node_DynamicCast_AsPlayer_State_Component, bool K2Node_DynamicCast_bSuccess, FName Temp_name_Variable, enum CallFunc_GetPlayerChildState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, FName Temp_name_Variable, float K2Node_Event_CurrentArmor, float K2Node_Event_MaxArmor, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, FName Temp_name_Variable, FName Temp_name_Variable, FName Temp_name_Variable, FName Temp_name_Variable, FName Temp_name_Variable, FName Temp_name_Variable, FName Temp_name_Variable, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetTickPriorityTime_ReturnValue, FName K2Node_Select_Default, bool CallFunc_K2_AttachToComponent_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetTickPriorityTime_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x8a873f8 0x78c34e14a0

--------------------------------
Class: DisplayHP_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bd9a6180
	Image* Level1;//[Offset: 0x268, Size: 0x8] 0x78bd9a6100
	Image* Level2;//[Offset: 0x270, Size: 0x8] 0x78bd9a6080
	Image* Level3;//[Offset: 0x278, Size: 0x8] 0x78bd9a6000
	TextBlock* Name;//[Offset: 0x280, Size: 0x8] 0x78bd9a5f80
	Border* SignIcon;//[Offset: 0x288, Size: 0x8] 0x78bd9a5f00
	StateWidget_C* StateWidget;//[Offset: 0x290, Size: 0x8] 0x78bd9a5e80
	void SetOtherInfo(FText NameText, enum SignIconType, int Level, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_TextIsEmpty_ReturnValue, int Temp_int_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c32b2b60
	void UpdateArmor(float CurrentArmor, float MaxArmor);// 0x8a873f8 0x78c32b2c40
	void UpdateHp(float currentHP, float maxHP);// 0x8a873f8 0x78c32b2d20
	void Construct();// 0x8a873f8 0x78c32b2ee0
	void ExecuteUbergraph_DisplayHP(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetHeadArmorProgressSize_ReturnValue, float CallFunc_GetHeadHpProgressPer_ReturnValue, float CallFunc_GetHeadArmorProgressSize_ReturnValue, float CallFunc_GetHeadArmorProgressPer_ReturnValue);// 0x8a873f8 0x78c32b30a0

--------------------------------
Class: StateWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78ba5d6580
	DoubleProgressBar_C* ArmorProgressBar;//[Offset: 0x268, Size: 0x8] 0x78ba5d6500
	Image* Background;//[Offset: 0x270, Size: 0x8] 0x78ba5d6480
	Image* DrugImage;//[Offset: 0x278, Size: 0x8] 0x78ba5d8500
	DoubleProgressBar_C* DyingHpProgressBar;//[Offset: 0x280, Size: 0x8] 0x78ba5d8480
	DoubleProgressBar_C* HpProgressBar;//[Offset: 0x288, Size: 0x8] 0x78ba5d8400
	WidgetSwitcher* HpSwitcher;//[Offset: 0x290, Size: 0x8] 0x78ba5d8380
	delegate OnDamageEffect;//[Offset: 0x298, Size: 0x10] 0x78ba5d8300
	CurveLinearColor* HpColorCurve;//[Offset: 0x2a8, Size: 0x8] 0x78ba5d8280
	float HpPercent;//[Offset: 0x2b0, Size: 0x4] 0x78ba5d8200
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1] 0x78ba5d8180
	void SetHpSize(float HpSize);// 0x8a873f8 0x78c3984920
	void SetHpPer(float HpPer);// 0x8a873f8 0x78c3984a00
	void SetArmorSize(float ArmorSize);// 0x8a873f8 0x78c3984ae0
	void SetArmorPer(float ArmorPer);// 0x8a873f8 0x78c3984bc0
	void SetIsDying(bool NewIsDying, bool Temp_bool_Variable, bool CallFunc_NotEqual_BoolBool_ReturnValue, Widget* K2Node_Select_Default);// 0x8a873f8 0x78c3984ca0
	void GetArmorPercent(out float ArmorPercent, float CallFunc_GetPercet_Percent);// 0x8a873f8 0x78c3984d80
	void UpdateArmor(float CurrentArmor, float MaxArmor, bool Temp_bool_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float Temp_float_Variable, float K2Node_Select_Default);// 0x8a873f8 0x78c3984e60
	void UpdateDyingHp(float currentHP, float maxHP, bool Temp_bool_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float Temp_float_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default);// 0x8a873f8 0x78c3984f40
	void JustUpdateHp(float currentHP, float maxHP, bool Temp_bool_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float Temp_float_Variable, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3985020
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsVisible_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c3985100
	void UpdateHp(float currentHP, float maxHP, float percent, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, float Temp_float_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, bool Temp_bool_Variable, float K2Node_Select_Default, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c39851e0
	void Construct();// 0x8a873f8 0x78c39852c0
	void ExecuteUbergraph_StateWidget(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetHpProgressSize_ReturnValue, float CallFunc_GetHpProgressPer_ReturnValue, float CallFunc_GetArmorProgressSize_ReturnValue, float CallFunc_GetArmorProgressPer_ReturnValue);// 0x8a873f8 0x78c3985480
	void OnDamageEffect__DelegateSignature(float damage);// 0x8a873f8 0x78ca99f2e0

--------------------------------
Class: DoubleProgressBar_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c1223d80
	ProgressBar* BackProgressBar;//[Offset: 0x268, Size: 0x8] 0x78c1223d00
	ProgressBar* FrontProgressBar;//[Offset: 0x270, Size: 0x8] 0x78c1223c80
	float Per;//[Offset: 0x278, Size: 0x4] 0x78c1223c00
	float Size;//[Offset: 0x27c, Size: 0x4] 0x78c1223b80
	float percent;//[Offset: 0x280, Size: 0x4] 0x78c1223b00
	float Max;//[Offset: 0x284, Size: 0x4] 0x78c1223a80
	LinearColor Color;//[Offset: 0x288, Size: 0x10] 0x78c1223a00
	CurveLinearColor* ColorCurve;//[Offset: 0x298, Size: 0x8] 0x78c1223980
	void SetPer(float Per);// 0x8a873f8 0x78c37caf80
	void SetParam(FName ParamName, float Value, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x8a873f8 0x78c37cb060
	void SetSize(float NewSize);// 0x8a873f8 0x78c37cb140
	void GetPercet(out float percent);// 0x8a873f8 0x78c37cb220
	void SetMax(float NewMax);// 0x8a873f8 0x78c37cb300
	void UpdateColor(LinearColor CurrentColor, LinearColor CallFunc_Multiply_LinearColorLinearColor_ReturnValue, LinearColor CallFunc_GetLinearColorValue_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c37cb3e0
	void SetPercent(float NewPercent, float NewMax, bool UpdateBack, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c37cb4c0
	void Construct();// 0x8a873f8 0x78c37cb680
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c37cb840
	void ExecuteUbergraph_DoubleProgressBar(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_StepNear_StepNearValue);// 0x8a873f8 0x78c37cb920

--------------------------------
Class: MainGameWidget_C.MainGameUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x408, Size: 0x8] 0x78ae75cb00
	WidgetAnimation* DuokuiAnim;//[Offset: 0x410, Size: 0x8] 0x78ae75ca80
	WidgetAnimation* ShowEndGameTipAnim;//[Offset: 0x418, Size: 0x8] 0x78ae75ca00
	WidgetAnimation* HideNormalOperation;//[Offset: 0x420, Size: 0x8] 0x78ae75c980
	WidgetAnimation* AutoRunAnim2;//[Offset: 0x428, Size: 0x8] 0x78ae75c900
	WidgetAnimation* AutoRunAnim1;//[Offset: 0x430, Size: 0x8] 0x78ae75c880
	CanvasPanel* ActionPanel;//[Offset: 0x438, Size: 0x8] 0x78ae75c800
	ActionWidget_C* ActionWidget;//[Offset: 0x440, Size: 0x8] 0x78ae75c780
	AgoraUI_C* AgoraUI;//[Offset: 0x448, Size: 0x8] 0x78ae75c700
	CrosshairWidget_C* Aim_UI;//[Offset: 0x450, Size: 0x8] 0x78ae75c680
	Image* ArmorImage;//[Offset: 0x458, Size: 0x8] 0x78ae75e700
	Image* ArmorLevel1;//[Offset: 0x460, Size: 0x8] 0x78ae75e680
	Image* ArmorLevel2;//[Offset: 0x468, Size: 0x8] 0x78ae75e600
	Image* ArmorLevel3;//[Offset: 0x470, Size: 0x8] 0x78ae75e580
	Image* ArmorLevel4;//[Offset: 0x478, Size: 0x8] 0x78ae75e500
	UIParticleEmitter* ArmorParticle;//[Offset: 0x480, Size: 0x8] 0x78ae75e480
	ProgressBar* ArmorStateProgressBar;//[Offset: 0x488, Size: 0x8] 0x78ae75e400
	Button* Attack;//[Offset: 0x490, Size: 0x8] 0x78ae75e380
	Image* attack_icon;//[Offset: 0x498, Size: 0x8] 0x78ae75e300
	WidgetSwitcher* AttackSwitcher;//[Offset: 0x4a0, Size: 0x8] 0x78ae75e280
	CanvasPanel* AutoRun;//[Offset: 0x4a8, Size: 0x8] 0x78ae75e200
	Image* AutoRunAnim01;//[Offset: 0x4b0, Size: 0x8] 0x78ae75e180
	Image* AutoRunArrow01;//[Offset: 0x4b8, Size: 0x8] 0x78ae75e100
	Image* AutoRunArrow02;//[Offset: 0x4c0, Size: 0x8] 0x78ae75e080
	Image* AutoRunArrow03;//[Offset: 0x4c8, Size: 0x8] 0x78ae75e000
	Image* AutoRunBack;//[Offset: 0x4d0, Size: 0x8] 0x78ae75df80
	Image* AutoRunImage;//[Offset: 0x4d8, Size: 0x8] 0x78ae75df00
	Button* Bag;//[Offset: 0x4e0, Size: 0x8] 0x78ae75de80
	Image* bag_level;//[Offset: 0x4e8, Size: 0x8] 0x78ae75de00
	Image* bag_level;//[Offset: 0x4f0, Size: 0x8] 0x78ae75dd80
	Image* bag_level;//[Offset: 0x4f8, Size: 0x8] 0x78ae75dd00
	CanvasPanel* BatteryPanel;//[Offset: 0x500, Size: 0x8] 0x78ae75dc80
	ProgressBar* batterypro;//[Offset: 0x508, Size: 0x8] 0x78ae75dc00
	Image* beijin;//[Offset: 0x510, Size: 0x8] 0x78ae75db80
	Button* Block;//[Offset: 0x518, Size: 0x8] 0x78ae75db00
	Image* BlockCDImage;//[Offset: 0x520, Size: 0x8] 0x78ae75da80
	BloodWidget_C* BloodWidget;//[Offset: 0x528, Size: 0x8] 0x78ae75da00
	BP_Sign_Main_C* BP_Sign_Main;//[Offset: 0x530, Size: 0x8] 0x78ae75d980
	Button* btn_action;//[Offset: 0x538, Size: 0x8] 0x78ae75d900
	Button* btn_setting;//[Offset: 0x540, Size: 0x8] 0x78ae75d880
	CanvasPanel* BtnQuickMsg;//[Offset: 0x548, Size: 0x8] 0x78ae75d800
	BuffBarWidget_C* BuffBarWidget;//[Offset: 0x550, Size: 0x8] 0x78ae75d780
	Button* Button;//[Offset: 0x558, Size: 0x8] 0x78ae75d700
	Button* Button_ChangeView;//[Offset: 0x560, Size: 0x8] 0x78ae75f780
	Button* Button_Encyclopedia;//[Offset: 0x568, Size: 0x8] 0x78ae75f700
	Button* Button_ExitVision;//[Offset: 0x570, Size: 0x8] 0x78ae75f680
	Button* Button_sign;//[Offset: 0x578, Size: 0x8] 0x78ae75f600
	Button* Button_SkipTrace;//[Offset: 0x580, Size: 0x8] 0x78ae75f580
	VerticalBox* ButtonVerticalBox;//[Offset: 0x588, Size: 0x8] 0x78ae75f500
	Button* CancelRangeButton;//[Offset: 0x590, Size: 0x8] 0x78ae75f480
	CanvasPanel* CanvasPanel_KillTrace;//[Offset: 0x598, Size: 0x8] 0x78ae75f400
	CanvasPanel* CanvasPanel_UI;//[Offset: 0x5a0, Size: 0x8] 0x78ae75f380
	Button* ChangeWeapon;//[Offset: 0x5a8, Size: 0x8] 0x78ae75f300
	TextBlock* ChangeWeaponText;//[Offset: 0x5b0, Size: 0x8] 0x78ae75f280
	CircleSliderWidget_C* CircleSliderWidget;//[Offset: 0x5b8, Size: 0x8] 0x78ae75f200
	CompassWidget_C* CompassWidget;//[Offset: 0x5c0, Size: 0x8] 0x78ae75f180
	TextBlock* CountDown_Second;//[Offset: 0x5c8, Size: 0x8] 0x78ae75f100
	TextBlock* DamageRemindText;//[Offset: 0x5d0, Size: 0x8] 0x78ae75f080
	CanvasPanel* DamageTimer;//[Offset: 0x5d8, Size: 0x8] 0x78ae75f000
	TextBlock* DamageTimeText;//[Offset: 0x5e0, Size: 0x8] 0x78ae75ef80
	Button* Dodge;//[Offset: 0x5e8, Size: 0x8] 0x78ae75ef00
	ItemHotPanel_C* Drug;//[Offset: 0x5f0, Size: 0x8] 0x78ae75ee80
	DrugPanelWidget_C* DrugPanel;//[Offset: 0x5f8, Size: 0x8] 0x78ae75ee00
	CanvasPanel* EndGameTip;//[Offset: 0x600, Size: 0x8] 0x78ae75ed80
	CanvasPanel* EndGameVision;//[Offset: 0x608, Size: 0x8] 0x78ae75ed00
	Button* explosion;//[Offset: 0x610, Size: 0x8] 0x78ae75ec80
	CanvasPanel* ExplosionBox;//[Offset: 0x618, Size: 0x8] 0x78ae75ec00
	Image* ExplosionColorBG;//[Offset: 0x620, Size: 0x8] 0x78ae75eb80
	FightAlertWidget_C* FightAlertUI;//[Offset: 0x628, Size: 0x8] 0x78ae75eb00
	Button* FixArmor;//[Offset: 0x630, Size: 0x8] 0x78ae75ea80
	TextBlock* FPSText;//[Offset: 0x638, Size: 0x8] 0x78ae75ea00
	VirtualJoystick* FreeViewJoystick;//[Offset: 0x640, Size: 0x8] 0x78ae75e980
	Image* FX_di;//[Offset: 0x648, Size: 0x8] 0x78ae75e900
	Image* fx_glow;//[Offset: 0x650, Size: 0x8] 0x78ae75e880
	Image* fx_glow;//[Offset: 0x658, Size: 0x8] 0x78ae75e800
	Image* fx_glow;//[Offset: 0x660, Size: 0x8] 0x78ae75e780
	Image* fx_glow;//[Offset: 0x668, Size: 0x8] 0x78ae75ff80
	Image* fx_glow;//[Offset: 0x670, Size: 0x8] 0x78ae75ff00
	Image* fx_glow;//[Offset: 0x678, Size: 0x8] 0x78ae75fe80
	Image* FX_kui;//[Offset: 0x680, Size: 0x8] 0x78ae75fe00
	UIParticleEmitter* FX_lizi;//[Offset: 0x688, Size: 0x8] 0x78ae75fd80
	UIParticleEmitter* FX_lizi;//[Offset: 0x690, Size: 0x8] 0x78ae75fd00
	UIParticleEmitter* FX_lizi;//[Offset: 0x698, Size: 0x8] 0x78ae75fc80
	UIParticleEmitter* FX_lizi;//[Offset: 0x6a0, Size: 0x8] 0x78ae75fc00
	UIParticleEmitter* FX_lizi;//[Offset: 0x6a8, Size: 0x8] 0x78ae75fb80
	Image* FX_sou;//[Offset: 0x6b0, Size: 0x8] 0x78ae75fb00
	Image* FX_UI_baoqi1;//[Offset: 0x6b8, Size: 0x8] 0x78ae75fa80
	Image* FX_UI_baoqi2;//[Offset: 0x6c0, Size: 0x8] 0x78ae75fa00
	CanvasPanel* Game_End_CountDown;//[Offset: 0x6c8, Size: 0x8] 0x78ae75f980
	VerticalBox* Game_Start_CountDown;//[Offset: 0x6d0, Size: 0x8] 0x78ae75f900
	TextBlock* GameLeftState;//[Offset: 0x6d8, Size: 0x8] 0x78ae75f880
	TextBlock* GameLeftTime;//[Offset: 0x6e0, Size: 0x8] 0x78ae75f800
	TextBlock* GameLeftTime;//[Offset: 0x6e8, Size: 0x8] 0x78b0851080
	Button* GlidingCancelFollow;//[Offset: 0x6f0, Size: 0x8] 0x78b0851000
	Button* GlidingInteractive;//[Offset: 0x6f8, Size: 0x8] 0x78b0850f80
	Image* GlidingInteractiveIcon;//[Offset: 0x700, Size: 0x8] 0x78b0850f00
	TextBlock* GlidingInteractiveText;//[Offset: 0x708, Size: 0x8] 0x78b0850e80
	CanvasPanel* GlidingOperation;//[Offset: 0x710, Size: 0x8] 0x78b0850e00
	GlobalMessagePanel_C* GlobalMessagePanel;//[Offset: 0x718, Size: 0x8] 0x78b0850d80
	VerticalBox* GuideBox;//[Offset: 0x720, Size: 0x8] 0x78b0850d00
	Image* guidemask;//[Offset: 0x728, Size: 0x8] 0x78b0850c80
	HorizontalBox* HorizontalBox;//[Offset: 0x730, Size: 0x8] 0x78b0850c00
	Button* HorseCallBtn;//[Offset: 0x738, Size: 0x8] 0x78b0850b80
	Image* HorseCdImg;//[Offset: 0x740, Size: 0x8] 0x78b0850b00
	Image* icon_block;//[Offset: 0x748, Size: 0x8] 0x78b0850a80
	Image* icon_dodge;//[Offset: 0x750, Size: 0x8] 0x78b0850a00
	Image* icon_jump;//[Offset: 0x758, Size: 0x8] 0x78b0850980
	Image* icon_jumpkick;//[Offset: 0x760, Size: 0x8] 0x78b0850900
	Image* icon_squat;//[Offset: 0x768, Size: 0x8] 0x78b0850880
	Image* Image;//[Offset: 0x770, Size: 0x8] 0x78b0850800
	Image* Image;//[Offset: 0x778, Size: 0x8] 0x78b0850780
	Image* Image;//[Offset: 0x780, Size: 0x8] 0x78b0850700
	Image* Image;//[Offset: 0x788, Size: 0x8] 0x78b0850680
	Image* Image;//[Offset: 0x790, Size: 0x8] 0x78b0850600
	Image* Image;//[Offset: 0x798, Size: 0x8] 0x78b0850580
	Image* Image;//[Offset: 0x7a0, Size: 0x8] 0x78b0850500
	Image* Image;//[Offset: 0x7a8, Size: 0x8] 0x78b0850480
	Image* Image;//[Offset: 0x7b0, Size: 0x8] 0x78b0850400
	Image* Image;//[Offset: 0x7b8, Size: 0x8] 0x78b0850380
	Image* Image;//[Offset: 0x7c0, Size: 0x8] 0x78b0850300
	Image* Image;//[Offset: 0x7c8, Size: 0x8] 0x78b0850280
	Image* Image;//[Offset: 0x7d0, Size: 0x8] 0x78b0850200
	Image* Image;//[Offset: 0x7d8, Size: 0x8] 0x78b0850180
	Image* Image;//[Offset: 0x7e0, Size: 0x8] 0x78b0850100
	Image* Image;//[Offset: 0x7e8, Size: 0x8] 0x78b0850080
	Image* Image;//[Offset: 0x7f0, Size: 0x8] 0x78b0852100
	Image* Image;//[Offset: 0x7f8, Size: 0x8] 0x78b0852080
	Image* Image;//[Offset: 0x800, Size: 0x8] 0x78b0852000
	Image* Image;//[Offset: 0x808, Size: 0x8] 0x78b0851f80
	Image* Image;//[Offset: 0x810, Size: 0x8] 0x78b0851f00
	Image* Image;//[Offset: 0x818, Size: 0x8] 0x78b0851e80
	Image* Image;//[Offset: 0x820, Size: 0x8] 0x78b0851e00
	Image* Image;//[Offset: 0x828, Size: 0x8] 0x78b0851d80
	Image* Image;//[Offset: 0x830, Size: 0x8] 0x78b0851d00
	Image* Image;//[Offset: 0x838, Size: 0x8] 0x78b0851c80
	Image* Image_KillNum_Hundred;//[Offset: 0x840, Size: 0x8] 0x78b0851c00
	Image* Image_KillNum_One;//[Offset: 0x848, Size: 0x8] 0x78b0851b80
	Image* Image_KillNum_Ten;//[Offset: 0x850, Size: 0x8] 0x78b0851b00
	Image* InjuryProgress;//[Offset: 0x858, Size: 0x8] 0x78b0851a80
	Button* Interactive;//[Offset: 0x860, Size: 0x8] 0x78b0851a00
	Image* InteractiveIcon;//[Offset: 0x868, Size: 0x8] 0x78b0851980
	UIParticleEmitter* InteractiveParticle;//[Offset: 0x870, Size: 0x8] 0x78b0851900
	WidgetSwitcher* InteractiveSwitcher;//[Offset: 0x878, Size: 0x8] 0x78b0851880
	TextBlock* InteractiveText;//[Offset: 0x880, Size: 0x8] 0x78b0851800
	CanvasPanel* InteractiveTip;//[Offset: 0x888, Size: 0x8] 0x78b0851780
	Image* interactivetip_bg;//[Offset: 0x890, Size: 0x8] 0x78b0851700
	Image* interactivetip_icon;//[Offset: 0x898, Size: 0x8] 0x78b0851680
	TextBlock* interactivetip_text;//[Offset: 0x8a0, Size: 0x8] 0x78b0851600
	CanvasPanel* Jail_CountDown;//[Offset: 0x8a8, Size: 0x8] 0x78b0851580
	TextBlock* jailmatchstate;//[Offset: 0x8b0, Size: 0x8] 0x78b0851500
	Button* Jump;//[Offset: 0x8b8, Size: 0x8] 0x78b0851480
	Button* JumpKick;//[Offset: 0x8c0, Size: 0x8] 0x78b0851400
	KeepActionWidget_C* KeepActionWidget;//[Offset: 0x8c8, Size: 0x8] 0x78b0851380
	KillMessagePanel_C* KillInfoPanel;//[Offset: 0x8d0, Size: 0x8] 0x78b0851300
	TextBlock* killnum_text;//[Offset: 0x8d8, Size: 0x8] 0x78b0851280
	CanvasPanel* KillNumInfo;//[Offset: 0x8e0, Size: 0x8] 0x78b0851200
	KnockOutMessagePanel_C* KnockOutMessagePanel;//[Offset: 0x8e8, Size: 0x8] 0x78b0851180
	TextBlock* livenum_text;//[Offset: 0x8f0, Size: 0x8] 0x78b0851100
	Button* lock;//[Offset: 0x8f8, Size: 0x8] 0x78b0853180
	CanvasPanel* MainCanvas;//[Offset: 0x900, Size: 0x8] 0x78b0853100
	TextBlock* MaxWeaponBuff01;//[Offset: 0x908, Size: 0x8] 0x78b0853080
	TextBlock* MaxWeaponBuff02;//[Offset: 0x910, Size: 0x8] 0x78b0853000
	CanvasPanel* MessagePanel;//[Offset: 0x918, Size: 0x8] 0x78b0852f80
	CanvasPanel* MiniMapPanel;//[Offset: 0x920, Size: 0x8] 0x78b0852f00
	MobileNoticeWidget_C* MobileNoticeWidget;//[Offset: 0x928, Size: 0x8] 0x78b0852e80
	Image* MpProgress;//[Offset: 0x930, Size: 0x8] 0x78b0852e00
	CanvasPanel* NormalOperation;//[Offset: 0x938, Size: 0x8] 0x78b0852d80
	Image* Op_BG;//[Offset: 0x940, Size: 0x8] 0x78b0852d00
	WidgetSwitcher* OperationSwitcher;//[Offset: 0x948, Size: 0x8] 0x78b0852c80
	PickedLearnedMessagePanel_C* PickedLearnedMessagePanel;//[Offset: 0x950, Size: 0x8] 0x78b0852c00
	TextBlock* playernum_text;//[Offset: 0x958, Size: 0x8] 0x78b0852b80
	Button* QuickMsgBtn;//[Offset: 0x960, Size: 0x8] 0x78b0852b00
	Image* QuickMsgCD;//[Offset: 0x968, Size: 0x8] 0x78b0852a80
	VerticalBox* QuickMsgPanel;//[Offset: 0x970, Size: 0x8] 0x78b0852a00
	QuickMsgWidget_C* QuickMsgWidget;//[Offset: 0x978, Size: 0x8] 0x78b0852980
	Image* range_equip_empty_mask;//[Offset: 0x980, Size: 0x8] 0x78b0852900
	Image* range_equip_icon;//[Offset: 0x988, Size: 0x8] 0x78b0852880
	TextBlock* range_equip_num;//[Offset: 0x990, Size: 0x8] 0x78b0852800
	CanvasPanel* RangeEquip;//[Offset: 0x998, Size: 0x8] 0x78b0852780
	VirtualJoystick* RangeJoystick;//[Offset: 0x9a0, Size: 0x8] 0x78b0852700
	WeaponFire_C* RangeWeaponFire;//[Offset: 0x9a8, Size: 0x8] 0x78b0852680
	Button* RayTracePause;//[Offset: 0x9b0, Size: 0x8] 0x78b0852600
	Button* RayTraceResume;//[Offset: 0x9b8, Size: 0x8] 0x78b0852580
	RichTextBlock* RichTextBlock_KillNum;//[Offset: 0x9c0, Size: 0x8] 0x78b0852500
	Button* RideDown;//[Offset: 0x9c8, Size: 0x8] 0x78b0852480
	Button* RideJump;//[Offset: 0x9d0, Size: 0x8] 0x78b0852400
	Button* RideLeft;//[Offset: 0x9d8, Size: 0x8] 0x78b0852380
	CanvasPanel* RideOperation;//[Offset: 0x9e0, Size: 0x8] 0x78b0852300
	Button* RideRight;//[Offset: 0x9e8, Size: 0x8] 0x78b0852280
	SizeBox* SettingSizeBox;//[Offset: 0x9f0, Size: 0x8] 0x78b0852200
	TextBlock* signal;//[Offset: 0x9f8, Size: 0x8] 0x78b0852180
	SizeBox* SizeBox_Encyclopedia;//[Offset: 0xa00, Size: 0x8] 0x78b0854200
	SkillHotKeyWidget_C* skill;//[Offset: 0xa08, Size: 0x8] 0x78b0854180
	SkillHotKeyWidget_C* skill;//[Offset: 0xa10, Size: 0x8] 0x78b0854100
	SkillHotKeyWidget_C* skill;//[Offset: 0xa18, Size: 0x8] 0x78b0854080
	SkillHotKeyWidget_C* Skill_General;//[Offset: 0xa20, Size: 0x8] 0x78b0854000
	SkillHotKeyWidget_C* Skill_Range;//[Offset: 0xa28, Size: 0x8] 0x78b0853f80
	SkillHotKeyWidget_C* Skill_Throw;//[Offset: 0xa30, Size: 0x8] 0x78b0853f00
	ProgressBar* spbar;//[Offset: 0xa38, Size: 0x8] 0x78b0853e80
	Border* SpBorder;//[Offset: 0xa40, Size: 0x8] 0x78b0853e00
	SpDownFullScreenWidget_C* SpDownFullScreenWidget;//[Offset: 0xa48, Size: 0x8] 0x78b0853d80
	SpDownWidget_C* SpDownWidget;//[Offset: 0xa50, Size: 0x8] 0x78b0853d00
	Button* squat;//[Offset: 0xa58, Size: 0x8] 0x78b0853c80
	VerticalBox* StateBox;//[Offset: 0xa60, Size: 0x8] 0x78b0853c00
	StateWidget_C* StateWidget;//[Offset: 0xa68, Size: 0x8] 0x78b0853b80
	Button* SwimDown;//[Offset: 0xa70, Size: 0x8] 0x78b0853b00
	CanvasPanel* SwimOperation;//[Offset: 0xa78, Size: 0x8] 0x78b0853a80
	Button* SwimUp;//[Offset: 0xa80, Size: 0x8] 0x78b0853a00
	VitalWidget_C* SwimVital;//[Offset: 0xa88, Size: 0x8] 0x78b0853980
	Button* TalkButton;//[Offset: 0xa90, Size: 0x8] 0x78b0853900
	UIParticleEmitter* TalkParticle;//[Offset: 0xa98, Size: 0x8] 0x78b0853880
	VerticalBox* TeamKillVerticalBox;//[Offset: 0xaa0, Size: 0x8] 0x78b0853800
	TeamMessagePanel_C* TeamMessagePanel;//[Offset: 0xaa8, Size: 0x8] 0x78b0853780
	VerticalBox* TeamPlayerBox1;//[Offset: 0xab0, Size: 0x8] 0x78b0853700
	VerticalBox* TeamPlayerBox2;//[Offset: 0xab8, Size: 0x8] 0x78b0853680
	HorizontalBox* TeamPlayerContainer;//[Offset: 0xac0, Size: 0x8] 0x78b0853600
	CanvasPanel* TeamPlayerSlotPanel;//[Offset: 0xac8, Size: 0x8] 0x78b0853580
	Button* TempLearnBook;//[Offset: 0xad0, Size: 0x8] 0x78b0853500
	TextBlock* Text_KillNum;//[Offset: 0xad8, Size: 0x8] 0x78b0853480
	TextBlock* Text_MatchRank;//[Offset: 0xae0, Size: 0x8] 0x78b0853400
	TextBlock* Text_VisionPlayerName;//[Offset: 0xae8, Size: 0x8] 0x78b0853380
	TextBlock* TextBlock;//[Offset: 0xaf0, Size: 0x8] 0x78b0853300
	TextBlock* TextBlock;//[Offset: 0xaf8, Size: 0x8] 0x78b0853280
	VirtualJoystick* ThrowJoystick;//[Offset: 0xb00, Size: 0x8] 0x78b0853200
	Image* timer_bg;//[Offset: 0xb08, Size: 0x8] 0x78b0855280
	TipMessagePanel_C* TipMessagePanel;//[Offset: 0xb10, Size: 0x8] 0x78b0855200
	CanvasPanel* TrainTimePanel;//[Offset: 0xb18, Size: 0x8] 0x78b0855180
	TextBlock* TrainTimeText;//[Offset: 0xb20, Size: 0x8] 0x78b0855100
	CanvasPanel* Trap;//[Offset: 0xb28, Size: 0x8] 0x78b0855080
	ItemHotPanel_C* TrapHotUse;//[Offset: 0xb30, Size: 0x8] 0x78b0855000
	AutoPickWidget_C* UI_AutoPick;//[Offset: 0xb38, Size: 0x8] 0x78b0854f80
	MobileBag_C* UI_Bag;//[Offset: 0xb40, Size: 0x8] 0x78b0854f00
	UI_MiniMap_C* UI_MiniMap;//[Offset: 0xb48, Size: 0x8] 0x78b0854e80
	PickBagWidget_C* UI_PickBag;//[Offset: 0xb50, Size: 0x8] 0x78b0854e00
	MobileSkill_C* UI_Skill;//[Offset: 0xb58, Size: 0x8] 0x78b0854d80
	CanvasPanel* UIParticlePanel;//[Offset: 0xb60, Size: 0x8] 0x78b0854d00
	VirtualJoystick* WalkJoystick;//[Offset: 0xb68, Size: 0x8] 0x78b0854c80
	TextBlock* WeaponBuff01;//[Offset: 0xb70, Size: 0x8] 0x78b0854c00
	TextBlock* WeaponBuff02;//[Offset: 0xb78, Size: 0x8] 0x78b0854b80
	HorizontalBox* WeaponBuffHorizontalBox01;//[Offset: 0xb80, Size: 0x8] 0x78b0854b00
	HorizontalBox* WeaponBuffHorizontalBox02;//[Offset: 0xb88, Size: 0x8] 0x78b0854a80
	Button* WeaponEquip01;//[Offset: 0xb90, Size: 0x8] 0x78b0854a00
	Button* WeaponEquip02;//[Offset: 0xb98, Size: 0x8] 0x78b0854980
	WeaponFire_C* WeaponFire01;//[Offset: 0xba0, Size: 0x8] 0x78b0854900
	WeaponFire_C* WeaponFire02;//[Offset: 0xba8, Size: 0x8] 0x78b0854880
	Image* WeaponIcon01;//[Offset: 0xbb0, Size: 0x8] 0x78b0854800
	Image* WeaponIcon02;//[Offset: 0xbb8, Size: 0x8] 0x78b0854780
	Image* WeightProgress;//[Offset: 0xbc0, Size: 0x8] 0x78b0854700
	Button* WhetStone;//[Offset: 0xbc8, Size: 0x8] 0x78b0854680
	WidgetSwitcher* WidgetSwitcher_EndGameTip;//[Offset: 0xbd0, Size: 0x8] 0x78b0854600
	WidgetSwitcher* WidgetSwitcher_Range_Throw;//[Offset: 0xbd8, Size: 0x8] 0x78b0854580
	Button* WinButtonLite;//[Offset: 0xbe0, Size: 0x8] 0x78b0854500
	CanvasPanel* WinButtonPanel;//[Offset: 0xbe8, Size: 0x8] 0x78b0854480
	WidgetSwitcher* WinButtonSwitcher;//[Offset: 0xbf0, Size: 0x8] 0x78b0854400
	Button* WinButtonTaoli;//[Offset: 0xbf8, Size: 0x8] 0x78b0854380
	Button* WuXue;//[Offset: 0xc00, Size: 0x8] 0x78b0854300
	delegate CallShowDetail;//[Offset: 0xc08, Size: 0x10] 0x78b0854280
	delegate CallOnDrag;//[Offset: 0xc18, Size: 0x10] 0x78b0856300
	delegate PlayerAddItemByIndex;//[Offset: 0xc28, Size: 0x10] 0x78b0856280
	delegate PlayerSwapItemToBag;//[Offset: 0xc38, Size: 0x10] 0x78b0856200
	delegate PlayerSwapItemToSlot;//[Offset: 0xc48, Size: 0x10] 0x78b0856180
	delegate PlayerUseItem;//[Offset: 0xc58, Size: 0x10] 0x78b0856100
	delegate PlayerSetItemHotKey;//[Offset: 0xc68, Size: 0x10] 0x78b0856080
	delegate PlayerRemoveItemHotKey;//[Offset: 0xc78, Size: 0x10] 0x78b0856000
	delegate PlayerSwapItemHotKeY;//[Offset: 0xc88, Size: 0x10] 0x78b0855f80
	delegate PlayerUseSkillBook;//[Offset: 0xc98, Size: 0x10] 0x78b0855f00
	delegate PlayerSwapSkill;//[Offset: 0xca8, Size: 0x10] 0x78b0855e80
	delegate PlayerRemoveSkill;//[Offset: 0xcb8, Size: 0x10] 0x78b0855e00
	delegate PlayerShowSkillDetail;//[Offset: 0xcc8, Size: 0x10] 0x78b0855d80
	delegate PlayerSwapSkillToPanel;//[Offset: 0xcd8, Size: 0x10] 0x78b0855d00
	delegate PlayerDropItem;//[Offset: 0xce8, Size: 0x10] 0x78b0855c80
	TeamPlayerInfoWidget_C*[] TeamPlayerInfos;//[Offset: 0xcf8, Size: 0x10] 0x78bc718260
	TeamPlayerHeadWidget_C*[] TeamPlayerHeads;//[Offset: 0xd08, Size: 0x10] 0x78bc7181c0
	bool IsLocalCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 0x1] 0x78b0855b00
	bool IsShowMainInterfaceUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd19, Size: 0x1] 0x78b0855a80
	delegate PlayerInitMiniMap;//[Offset: 0xd20, Size: 0x10] 0x78b0855a00
	enum bagtype;//[Offset: 0xd30, Size: 0x1] 0x78bc718120
	int BagIndex;//[Offset: 0xd34, Size: 0x4] 0x78b0855900
	bool ActiveAutoRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 0x1] 0x78b0855880
	int teammode;//[Offset: 0xd3c, Size: 0x4] 0x78b0855800
	enum TrapBagType;//[Offset: 0xd40, Size: 0x1] 0x78bc718080
	int TrapIndex;//[Offset: 0xd44, Size: 0x4] 0x78b0855700
	enum CurInteractiveType;//[Offset: 0xd48, Size: 0x1] 0x78bc717fe0
	<Widget*,Vector2D> SlotChangedMap;//[Offset: 0xd50, Size: 0x50] 0x78c3bc2440
	Vector2D RideLeftPosition;//[Offset: 0xda0, Size: 0x8] 0x78b0855500
	Vector2D RideRightPosition;//[Offset: 0xda8, Size: 0x8] 0x78b0855480
	Vector2D AutoRunOffset;//[Offset: 0xdb0, Size: 0x8] 0x78b0855400
	Vector2D RideDownPosition;//[Offset: 0xdb8, Size: 0x8] 0x78b0855380
	Vector2D RideJumpPosition;//[Offset: 0xdc0, Size: 0x8] 0x78b0855300
	MaterialInstanceDynamic* WeightMat;//[Offset: 0xdc8, Size: 0x8] 0x78b0857380
	TouchEvent TouchEvent;//[Offset: 0xdd0, Size: 0xa8] 0x78b0857300
	<FString,PaperSprite*> SpriteTextMap;//[Offset: 0xe78, Size: 0x50] 0x78c3bcef80
	bool LockTargetPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 0x1] 0x78b0857180
	LastWinPlayerLeaveWidget_C* LastPlayerCountDownUI;//[Offset: 0xed0, Size: 0x8] 0x78b0857100
	MaterialInstanceDynamic* HorseCDMat;//[Offset: 0xed8, Size: 0x8] 0x78b0857080
	float HorseSkillCDMax;//[Offset: 0xee0, Size: 0x4] 0x78b0857000
	float HorseSkillTimer;//[Offset: 0xee4, Size: 0x4] 0x78b0856f80
	TeamPlayerUIInfo[] TeamPlayersInfo;//[Offset: 0xee8, Size: 0x10] 0x78bc717f40
	float QuickMsgTime;//[Offset: 0xef8, Size: 0x4] 0x78b0856e80
	MaterialInstanceDynamic* QuickMsgCDMat;//[Offset: 0xf00, Size: 0x8] 0x78b0856e00
	float QuickMsgCDTime;//[Offset: 0xf08, Size: 0x4] 0x78b0856d80
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0c, Size: 0x1] 0x78b0856d00
	TeamPlayerMarkPointWidget_C*[] TeamPlayerMarkPoints;//[Offset: 0xf10, Size: 0x10] 0x78bc717ea0
	TeamPlayerMarkPositionWidget_C*[] TeamPlayerMarkPositions;//[Offset: 0xf20, Size: 0x10] 0x78bc717e00
	int jailcontinus;//[Offset: 0xf30, Size: 0x4] 0x78b0856b80
	TimerHandle jailhandle;//[Offset: 0xf38, Size: 0x8] 0x78b0856b00
	int64[] lockedSkills;//[Offset: 0xf40, Size: 0x10] 0x78bc717d60
	MaterialInstanceDynamic* injurMat;//[Offset: 0xf50, Size: 0x8] 0x78b0856a00
	bool canexplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 0x1] 0x78b0856980
	ButtonStyle exable;//[Offset: 0xf60, Size: 0x278] 0x78b0856900
	ButtonStyle exinable;//[Offset: 0x11d8, Size: 0x278] 0x78b0856880
	bool isBagClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1450, Size: 0x1] 0x78b0856800
	<int,EnemyMark_C*> eagle_map;//[Offset: 0x1458, Size: 0x50] 0x78c3bcf040
	<int,ItemMark_C*> eagleitem_map;//[Offset: 0x14a8, Size: 0x50] 0x78c3bcf280
	bool needminimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f8, Size: 0x1] 0x78b0856580
	bool IsSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f9, Size: 0x1] 0x78b0856500
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fa, Size: 0x1] 0x78b0856480
	bool IsCanTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fb, Size: 0x1] 0x78b0856400
	bool allowdropitem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fc, Size: 0x1] 0x78b0856380
	bool ShowBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fd, Size: 0x1] 0x78b0858400
	bool allowautorun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fe, Size: 0x1] 0x78b0858380
	bool IsBlocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ff, Size: 0x1] 0x78b0858300
	bool allowstartcount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1500, Size: 0x1] 0x78b0858280
	bool IsWearingHat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1501, Size: 0x1] 0x78b0858200
	bool IsWearingArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1502, Size: 0x1] 0x78b0858180
	float MaxHatDurable;//[Offset: 0x1504, Size: 0x4] 0x78b0858100
	float MaxArmorDurable;//[Offset: 0x1508, Size: 0x4] 0x78b0858080
	bool jailwaited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150c, Size: 0x1] 0x78b0858000
	enum curcirclestate;//[Offset: 0x150d, Size: 0x1] 0x78bc717cc0
	bool playerincir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150e, Size: 0x1] 0x78b0857f00
	bool allowcustomoperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150f, Size: 0x1] 0x78b0857e80
	bool allowhorse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1510, Size: 0x1] 0x78b0857e00
	Vector2D RangeJoyStart;//[Offset: 0x1514, Size: 0x8] 0x78b0857d80
	bool IsRangeJoyMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151c, Size: 0x1] 0x78b0857d00
	bool allowskill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151d, Size: 0x1] 0x78b0857c80
	bool HorseCallPanelInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151e, Size: 0x1] 0x78b0857c00
	bool HideFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151f, Size: 0x1] 0x78b0857b80
	float FreeViewClickTime;//[Offset: 0x1520, Size: 0x4] 0x78b0857b00
	enum RangeThrowSkillIconState;//[Offset: 0x1524, Size: 0x1] 0x78bc717c20
	bool allowwuxue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1525, Size: 0x1] 0x78b0857a00
	bool allowjoystick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1526, Size: 0x1] 0x78b0857980
	bool allowendcount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1527, Size: 0x1] 0x78b0857900
	bool allowchangeweapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1528, Size: 0x1] 0x78b0857880
	bool allowoperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1529, Size: 0x1] 0x78b0857800
	bool AllowWhetStone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152a, Size: 0x1] 0x78b0857780
	bool AllowSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152b, Size: 0x1] 0x78b0857700
	bool bIsRangeThrowSkillEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152c, Size: 0x1] 0x78b0857680
	int[] Action Array;//[Offset: 0x1530, Size: 0x10] 0x78bc71a4c0
	int[] Expression Array;//[Offset: 0x1540, Size: 0x10] 0x78bc71a420
	float normal_attack_time;//[Offset: 0x1550, Size: 0x4] 0x78b0857500
	bool lowbattery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1554, Size: 0x1] 0x78b0857480
	int signalstrength;//[Offset: 0x1558, Size: 0x4] 0x78b0857400
	int LiveNum;//[Offset: 0x155c, Size: 0x4] 0x78b0859480
	bool bIsEndGameVision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1560, Size: 0x1] 0x78b0859400
	bool NotDungeon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1561, Size: 0x1] 0x78b0859380
	enum JailState;//[Offset: 0x1562, Size: 0x1] 0x78bc71a380
	int DefaultSoundStartCountdown;//[Offset: 0x1564, Size: 0x4] 0x78b0859280
	delegate TouchMovedEvent;//[Offset: 0x1568, Size: 0x10] 0x78b0859200
	GuidePanelWidget_C* GuidePanelWidget;//[Offset: 0x1578, Size: 0x8] 0x78b0859180
	bool AllowExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1580, Size: 0x1] 0x78b0859100
	float Injury;//[Offset: 0x1584, Size: 0x4] 0x78b0859080
	bool ArmorEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1588, Size: 0x1] 0x78b0859000
	bool bShowQuickMsgWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1589, Size: 0x1] 0x78b0858f80
	MaterialInstanceDynamic* MpMat;//[Offset: 0x1590, Size: 0x8] 0x78b0858f00
	GuideTaskPanelWidget_C* GuideTaskPanel;//[Offset: 0x1598, Size: 0x8] 0x78b0858e80
	bool isSkillClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a0, Size: 0x1] 0x78b0858e00
	MaterialInstanceDynamic* BlockCDMat;//[Offset: 0x15a8, Size: 0x8] 0x78b0858d80
	TimerHandle HighPriorityTimer;//[Offset: 0x15b0, Size: 0x8] 0x78b0858d00
	TimerHandle LowPriorityTimer;//[Offset: 0x15b8, Size: 0x8] 0x78b0858c80
	bool IsCompassEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c0, Size: 0x1] 0x78b0858c00
	void WidgetTick(float DeltaTime);// 0x8a873f8 0x78c9a46a60
	void UpdateWhetStoneState(bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool CallFunc_IsPlayerUseWeapon1Or2_bUse, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetCanUseWhetStoneItemId_WhetStoneItemId, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default);// 0x8a873f8 0x78c9a46440
	void IsPlayerUseWeapon1Or2(out bool bUse, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c9a466e0
	void IsPlayerUseLongDisWeapon(out bool bUse, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c9a46520
	void IsPlayerCannotUseJoystick(out bool bCannotUse, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_Horse_Ride_state_net_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c9a46360
	void IsPlayerInSky(out bool bInSky, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c9a461a0
	void IsPlayerDead(out bool bDead, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c9a460c0
	void OnRep_allowwuxue();// 0x8a873f8 0x78c9a45fe0
	void SetImageKillNum(int KillNum, int InKillNum, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, int Temp_int_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, int Temp_int_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int CallFunc_Percent_IntInt_ReturnValue, Texture2D* K2Node_Select_Default, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, Texture2D* K2Node_Select_Default, Texture2D* K2Node_Select_Default, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0x8a873f8 0x78c9a45f00
	void InitCircleProgress(Image* Image, float DefaultPercent, out MaterialInstanceDynamic* Material, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Texture2D* CallFunc_GetBrushResourceAsTexture2D_ReturnValue);// 0x8a873f8 0x78c9a45e20
	void HideRightTopPanel();// 0x8a873f8 0x78c9a45b80
	void SetExplosionVisible(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78ca5ee940
	void CheckForceGuide(Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_State_GetPlayerTrainExercieseForceGuideType_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78ca5ef200
	void ShowGuideTask(FString title, out FString[] items, bool bShowCloseButton, FText[] LocalItems, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, GuideTaskPanelWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x8a873f8 0x78ca5eef60
	void SetPlayingKilledTrace(bool bIsTracing, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78ca5ecaa0
	void SetUIVisible(bool visible, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78ca5ef900
	void UpdateRangeThrowJoystickThumb(int WeaponMode, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, int Temp_int_Variable, Widget* CallFunc_GetActiveWidget_ReturnValue, VirtualJoystick* K2Node_DynamicCast_AsVirtual_Joystick, bool K2Node_DynamicCast_bSuccess, PaperSprite* K2Node_Select_Default, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, bool CallFunc_IsValid_ReturnValue, SpriteAtlasData CallFunc_GetSpriteAtlasData_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78ca5ef820
	Vector2D GetCrosshairScreenPos(Vector2D CallFunc_GetPos_Pos);// 0x8a873f8 0x78ca5efe40
	void UpdateMissileIcon(int HandleMode, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78ca5efd60
	bool GetGeneralState(bool CallFunc_IsVisible_ReturnValue);// 0x8a873f8 0x78ca5e0e80
	void CheckSignal(int Strength, int tempsignal, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, int Temp_int_Variable, SlateColor K2Node_MakeStruct_SlateColor, PaperSprite* K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_Select_Default, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca5e1900
	void CreateUIParticleEmitterInner(Button* AttachButton, Widget* LayoutWidget, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UIParticleEmitterAsset* Temp_object_Variable, bool Temp_bool_Variable, UIParticleEmitterAsset* Temp_object_Variable, bool Temp_bool_Variable, UIParticleEmitterAsset* Temp_object_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, UIParticleEmitterAsset* Temp_object_Variable, Widget* K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UIParticleEmitterAsset* Temp_object_Variable, AnchorData CallFunc_GetLayout_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, UIParticleEmitter* CallFunc_SpawnObject_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PanelSlot* CallFunc_AddChild_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, UIParticleEmitterAsset* K2Node_Select_Default, UIParticleEmitterAsset* K2Node_Select_Default, UIParticleEmitterAsset* K2Node_Select_Default, UIParticleEmitterAsset* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78ca5e14a0
	void CreateUIParticleEmitter(PanelWidget* PanelWidget, Widget* LayoutWidget, int Temp_int_Array_Index_Variable, WidgetSwitcher* K2Node_DynamicCast_AsWidget_Switcher, bool K2Node_DynamicCast_bSuccess, Widget*[] CallFunc_GetAllChildren_ReturnValue, int Temp_int_Loop_Counter_Variable, Widget* CallFunc_Array_Get_Item, SkillHotKeyWidget_C* K2Node_DynamicCast_AsSkill_Hot_Key_Widget, bool K2Node_DynamicCast_bSuccess, PanelWidget* K2Node_DynamicCast_AsPanel_Widget, bool K2Node_DynamicCast_bSuccess, Button* K2Node_DynamicCast_AsButton, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool Temp_bool_Variable, Widget* K2Node_Select_Default);// 0x8a873f8 0x78ca5e1c80
	void GetCanUseHuJiaPianItemId(out int HuaJiaPianItemId, int[] HuJiaPianItemIdsHigh, int[] HuaJiaPianItemIdsMedium , int[] HuJiaPianItemIdsLow, int[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] Temp_int_Variable, float CallFunc_GetArmorPercent_ArmorPercent, float CallFunc_Subtract_FloatFloat_ReturnValue, bool Temp_bool_Variable, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, int[] K2Node_Select_Default, int[] K2Node_Select_Default, int[] K2Node_Select_Default, Character* CallFunc_GetPlayerCharacter_ReturnValue, int CallFunc_Array_Get_Item, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78ca5e1ac0
	void GetCanUseWhetStoneItemId(out int WhetStoneItemId, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78ca5e19e0
	void UpdateActionWhenGameStart(bool CallFunc_IsVisible_ReturnValue);// 0x8a873f8 0x78ca5ea880
	void GetGameModeType(out enum GameMode, GameStateBase* CallFunc_GetGameState_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Conv_IntToByte_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, WuXiaXGameModeBase* K2Node_DynamicCast_AsWu_Xia_XGame_Mode_Base, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetGameMode_ReturnValue);// 0x8a873f8 0x78ca5e8120
	void CheckEndTime(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78ca5e84a0
	void UpdateVisionVisible(int TeamLivePlayerNum, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Team_GetCurrentVisionPlayerID_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, enum K2Node_Select_Default, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78ca5e6d00
	void UpdateGlidingVisible(enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Team_GetCurrentFollowPlayerID_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Move_Can_open_parachute_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Move_Can_jump_plane_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78ca5e61a0
	void UpdateMenuVisible(enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_GetCanUseWhetStoneItemId_WhetStoneItemId, enum Temp_byte_Variable, bool CallFunc_Greater_IntInt_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, float Temp_float_Variable, enum K2Node_Select_Default, float Temp_float_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, enum K2Node_Select_Default, float K2Node_Select_Default, enum K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, enum CallFunc_Horse_Ride_state_net_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float K2Node_Select_Default, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78ca5e0da0
	void ShowWinButton(GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78ca5e0a20
	void ShowFPS(float DeltaTime, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78ca5e0860
	void EagleUpdate(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, ItemMark_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, EnemyMark_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, WuXiaXBaseCharacter* CallFunc_GetCharacterById_ReturnValue, PickItem* CallFunc_GetPickItemById_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector2D CallFunc_WorldToScreen_pos, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector2D CallFunc_WorldToScreen_pos);// 0x8a873f8 0x78ca5e1200
	void WorldToScreen(Vector vec, out Vector2D pos, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue);// 0x8a873f8 0x78ca5e1120
	void HideRightPanel(bool IsClose);// 0x8a873f8 0x78ca5e1040
	void GetHotKeyByID(int ID, out SkillHotKeyWidget_C* Ref, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca5e0f60
	void UpdateTeamPlayerMarkPointFlag(int PlayerID, int markplayerid, bool flag, int CallFunc_GetTeamPlayerNum_Num, TeamPlayerMarkPointWidget_C* CallFunc_GetTeamPlayerMarkPoint_MarkPointWidget, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78ca5e90e0
	void UpdateTeamPlayerMarkPoint(int PlayerID, enum Type, Vector Location, TeamPlayerMarkPointWidget_C* CallFunc_GetTeamPlayerMarkPoint_MarkPointWidget, bool CallFunc_HasMarkPoint_HasMark, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x8a873f8 0x78ca5ecb80
	void HasMarkPoint(enum Type, Vector Location, out bool HasMark, bool CallFunc_NotEqual_ByteByte_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, TeamPlayerMarkPointWidget_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78ca5eee80
	void QucikMsgTick(float Delta, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, QuickMsgText_C* K2Node_DynamicCast_AsQuick_Msg_Text, bool K2Node_DynamicCast_bSuccess, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78ca5e98c0
	void GetTeamPlayerInfoWidget(int PlayerID, out TeamPlayerInfoWidget_C* Widget, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca5edd00
	void GetTeamPlayerInfo(int PlayerID, out bool Result, out int index, out TeamPlayerUIInfo TeamPlayerInfo, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, TeamPlayerUIInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca5edde0
	void GetTeamPlayerNum(int PlayerID, out int Num, bool CallFunc_GetTeamPlayerInfo_Result, int CallFunc_GetTeamPlayerInfo_Index, TeamPlayerUIInfo CallFunc_GetTeamPlayerInfo_TeamPlayerInfo);// 0x8a873f8 0x78ca5edec0
	void getTeamColor(int Mode, int index, out LinearColor TeamColor, int Temp_int_Variable, bool K2Node_SwitchInteger_CmpSuccess, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor K2Node_Select_Default);// 0x8a873f8 0x78ca5edfa0
	void CheckMenuState(int TeamLivePlayerNum);// 0x8a873f8 0x78ca5ee160
	void UpdateHorseCD(float Timer, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x8a873f8 0x78ca5ee080
	void SetGameLeftStateAndTime(FString State, float Time, FString CallFunc_FormatTime_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78ca5eb4c0
	void OnTouchReleased(PointerEvent InTouchEvent, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_TouchEnded_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca5eb300
	void CreateSettingUI(GlobalSettings_C* CallFunc_Create_ReturnValue, Margin K2Node_MakeStruct_Margin, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78ca5efc80
	void GetChangeWeaponText(int index, out FText text, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca5ecd40
	void IsTouchInside(Widget* Widget, PointerEvent TouchEvent, out bool IsTouchInside, bool CallFunc_IsVisibleInView_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78ca5ecc60
	void DrawSpriteText(Image* Context, FString text, <FString,PaperSprite*> SpriteAtlas, Vector2D TextPosition, int CallFunc_GetSpriteTextSize_Width, int CallFunc_GetSpriteTextSize_Height, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue, int CallFunc_Array_Length_ReturnValue, Canvas* CallFunc_BeginDrawCanvasToRenderTarget_Canvas, Vector2D CallFunc_BeginDrawCanvasToRenderTarget_Size, DrawToRenderTargetContext CallFunc_BeginDrawCanvasToRenderTarget_Context, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SpriteAtlasData CallFunc_GetSpriteAtlasData_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue);// 0x8a873f8 0x78ca99d1a0
	void GetSpriteTextSize(FString text, <FString,PaperSprite*> SpriteAtlas, out int Width, out int Height, Vector2D Size, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SpriteAtlasData CallFunc_GetSpriteAtlasData_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78ca99cfe0
	void SetTeamShowMode(int teammode, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78ca99e160
	void GetInteractiveButton(out Button* Interactive, out Image* icon, out TextBlock* text, Widget* CallFunc_GetActiveWidget_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x8a873f8 0x78ca998d60
	void SetActiveOperation(Widget* Operation, bool Reset, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Widget* CallFunc_GetActiveWidget_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78ca995e20
	void LoadOperationSetting(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int Temp_int_Array_Index_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool Temp_bool_Variable, float Temp_float_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float Temp_float_Variable, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Abs_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector2D CallFunc_GetPosition_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Widget*[] CallFunc_Map_Keys_Keys, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Widget* CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_Greater_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Anchors K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, <FString,Vector> CallFunc_ReadOperationSetting_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78ca995f00
	void InitSlotPosition(CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue);// 0x8a873f8 0x78ca996c20
	void SetTrapInfo(enum bagtype, int index);// 0x8a873f8 0x78ca996b40
	void ClearTeamPlayer(int ID, int index, int CallFunc_GetTeamPlayerInfoIndex_Index, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item);// 0x8a873f8 0x78ca996a60
	void ClearTeamPlayerInfo(int Number, int index, int CallFunc_Array_Length_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_HasTeamPlayerHeadByNumber_Heads, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78ca996980
	bool IsInitTeamPlayer(int PlayerID, int CallFunc_GetTeamPlayerInfoIndex_Index, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca99e4e0
	void OnJoystickReleased(Geometry MyGeometry, PointerEvent Event, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue);// 0x8a873f8 0x78ca99e400
	void OnJoystickEnded(Geometry MyGeometry, PointerEvent Event, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, Vector2D CallFunc_LocalToAbsolute_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78ca99e320
	void OnJoystickMoved(Geometry MyGeometry, PointerEvent Event, Character* CallFunc_GetPlayerCharacter_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetThumb2AutoRunAlpha_alpha, float CallFunc_GetSprintValue_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);// 0x8a873f8 0x78ca99b3e0
	void OnJoystickStarted(Geometry MyGeomery, PointerEvent Event, VirtualJoystick* CallFunc_GetMoveJoystick_Joystick, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue);// 0x8a873f8 0x78ca99b300
	void GetMoveJoystick(out VirtualJoystick* Joystick);// 0x8a873f8 0x78ca99b680
	void GetBtnStyleByInteractiveType(enum Type, out PaperSprite* Sprite, FInteractiveBtnStyle[] InteractiveSprites, bool K2Node_SwitchEnum_CmpSuccess, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, FInteractiveBtnStyle[] K2Node_MakeArray_Array, int CallFunc_Add_IntInt_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FInteractiveBtnStyle CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78ca99b5a0
	void SwitchWeapon(int index, bool CallFunc_FinishTask_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_FinishNode_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_ItemCtrl_GetWeaponId_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca99ba00
	void GetThumb2AutoRunAlpha(Vector2D MousePosition, out float Alpha, VirtualJoystick* CallFunc_GetMoveJoystick_Joystick, Vector2D CallFunc_AbsoluteToViewport_PixelPosition, Vector2D CallFunc_AbsoluteToViewport_ViewportPosition, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_PositionByAnchor_PixelPosition, Vector2D CallFunc_PositionByAnchor_ViewportPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78ca99b920
	void GetController(out WuXiaXPlayerController* Controller, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78ca99bae0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TouchEnded_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerInputComponent* K2Node_DynamicCast_AsPlayer_Input_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78ca999a80
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_WuXiaX_PlayerController_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Player_Controller, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_IsValid_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerInputComponent* K2Node_DynamicCast_AsPlayer_Input_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78ca99bd80
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Unhandled_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerInputComponent* K2Node_DynamicCast_AsPlayer_Input_Component, bool K2Node_DynamicCast_bSuccess, VirtualJoystick* CallFunc_GetMoveJoystick_Joystick, bool CallFunc_OnTouchStarted_Handled, EventReply CallFunc_OnTouchStarted_ReturnValue);// 0x8a873f8 0x78ca99a260
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, bool CallFunc_IsVisibleInView_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, VirtualJoystick* CallFunc_GetMoveJoystick_Joystick, WuXia_Movement_Component* K2Node_DynamicCast_AsWu_Xia_Movement_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_IsTouchInside_IsTouchInside, EventReply CallFunc_Unhandled_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsTouchInside_IsTouchInside, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78ca99c560
	void GetNextSwitchWeaponIndex(int slotindex, out int weaponindex, byte CallFunc_MakeLiteralByte_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_ItemCtrl_GetWeaponId_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x8a873f8 0x78ca99c480
	void ProcessSetItem(enum bagtype, int index, int Level, FString Name, int Number, int itemtype, Texture2D* icon, Texture2D* dragicon, int CurrentIndex, enum CurrentBagType, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78ca999540
	void UpdateCountDownTime(int Time, FText CallFunc_Conv_IntToText_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca9991c0
	void Hide_Drug();// 0x8a873f8 0x78ca9990e0
	void Show_Drug();// 0x8a873f8 0x78ca999d20
	void Refresh_InJury(float Injury, ButtonStyle NewLocalVar, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78ca99e940
	void HideLearnBook(bool CallFunc_IsVisible_ReturnValue);// 0x8a873f8 0x78ca99e860
	void ShowLearnBook(enum bagtype, int index, GuideData K2Node_MakeStruct_GuideData, bool CallFunc_IsVisible_ReturnValue);// 0x8a873f8 0x78ca99e780
	void HideInteractionBtn(Button* CallFunc_GetInteractiveButton_Interactive, Image* CallFunc_GetInteractiveButton_Icon, TextBlock* CallFunc_GetInteractiveButton_Text, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78ca99cb80
	void ShowInteractionBtn(enum Type, FText Description, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, PaperSprite* CallFunc_GetBtnStyleByInteractiveType_Sprite, Button* CallFunc_GetInteractiveButton_Interactive, Image* CallFunc_GetInteractiveButton_Icon, TextBlock* CallFunc_GetInteractiveButton_Text);// 0x8a873f8 0x78ca99caa0
	void UpdateTeamHead(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78ca99ff20
	void InitTeamPlayerInfo(TeamPlayerInfoWidget_C* InfoWidget, int Number, FString Name, int PlayerID, int teammode, TeamPlayerMarkPositionWidget_C* CallFunc_GetTeamPlayerMarkPosition_MarkPositionWidget, TeamPlayerMarkPointWidget_C* CallFunc_GetTeamPlayerMarkPoint_MarkPointWidget, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CheckIsCurrentPlayer_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_HasTeamPlayerHeadByNumber_Heads, bool CallFunc_IsValid_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_HasTeamPlayerHeadByNumber_Heads, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_Create_ReturnValue, TeamPlayerMarkPointWidget_C* CallFunc_Create_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, TeamPlayerMarkPositionWidget_C* CallFunc_Create_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78ca99d280
	void HasTeamPlayerHeadByNumber(int Number, out TeamPlayerHeadWidget_C* Heads, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78ca9967c0
	void GetTeamPlayerMarkPosition(int PlayerID, out TeamPlayerMarkPositionWidget_C* MarkPositionWidget, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, TeamPlayerMarkPositionWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca9945a0
	void GetTeamPlayerMarkPoint(int PlayerID, out TeamPlayerMarkPointWidget_C* MarkPointWidget, int Temp_int_Variable, TeamPlayerMarkPointWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78ca996ec0
	void GetTeamPlayerInfoIndex(int PlayerID, out int index, int ID, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78ca996de0
	bool CheckIsCurrentPlayer(int ID, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetPlayerUniqueId_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca996d00
	void GetTeamInfo(int ID, out TeamPlayerInfoWidget_C* Player, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78ca994680
	void GetTeamHead(int ID, out TeamPlayerHeadWidget_C* Player, int Temp_int_Variable, int CallFunc_Array_Length_ReturnValue, TeamPlayerHeadWidget_C* CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78ca993dc0
	void RightButtonDownOnItem(enum bagtype, int index, int Number);// 0x8a873f8 0x78ca994760
	void FinishDrag();// 0x8a873f8 0x78ca994e60
	void BreakItemConfirm(enum bagtype, int BagIndex, int Number, bool IsPickUp);// 0x8a873f8 0x78ca994bc0
	void SetDragItemBreakButtonState(DragItem_C* DragItem);// 0x8a873f8 0x78ca994d80
	void DragSkillToPanel(enum SSkillEquipType, int index, int skillid, enum TSkillEquipType);// 0x8a873f8 0x78ca9951e0
	void DragSkillToEmpty(enum Type, int index);// 0x8a873f8 0x78ca9952c0
	void UnBindSingleSkillSlotEvent(SingleSkillWidget_C* SkillWidget);// 0x8a873f8 0x78ca992540
	void BindSingleSkillSlotEvent(SingleSkillWidget_C* SkillWidget);// 0x8a873f8 0x78ca9904e0
	void DragSkillToSlot(enum SSkillEquipType, int SSkillIndex, int SSkillID, enum TSkillEquipType, int TSkillIndex, int TSkillID, int TID, int TIndex, enum TType, int Sid, int SIndex, enum SType);// 0x8a873f8 0x78ca993340
	void UnBindEquipSkillSlotEvent(SkillEquipSlotWidget_C* SkillEquipSlot);// 0x8a873f8 0x78ca993260
	void BindSkillEquipSlotEvent(SkillEquipSlotWidget_C* SkillEquipSlot, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x8a873f8 0x78ca993180
	void LeaveSkillSlot(enum SkillEquipType, int index, int ID);// 0x8a873f8 0x78ca999e00
	void EnterSkillSlot(enum Type, int index, int skillid);// 0x8a873f8 0x78ca99a500
	void UnBindSkillEvent();// 0x8a873f8 0x78ca99a880
	void BindSkillEvent(SkillEquipSlotWidget_C*[] TempEquipSkills);// 0x8a873f8 0x78ca99ac00
	void UnBindSkillBookEvent(SkillBookSlotWidget_C* SkillBookWidget);// 0x8a873f8 0x78ca997860
	void BindSkillBookEvent(SkillBookSlotWidget_C* SkillBookWidget);// 0x8a873f8 0x78ca997a20
	void UseSkillBook(int itemindex);// 0x8a873f8 0x78ca997940
	void SwapItemHotKey(int SIndex, int TIndex);// 0x8a873f8 0x78ca998040
	void RemoveItemHotKey(int index);// 0x8a873f8 0x78ca9982e0
	void BinItemHotKeyEvent(ItemHotKeySlotWidget_C* HotKey);// 0x8a873f8 0x78ca998ba0
	void SwapHotKey(int SIndex, int TIndex);// 0x8a873f8 0x78ca998ac0
	void RemoveHotKey(out int index);// 0x8a873f8 0x78ca9989e0
	void DargItemToHotKey(enum bagtype, int index, int hotkeyindex);// 0x8a873f8 0x78ca998900
	void ClearBlood();// 0x8a873f8 0x78ca998f20
	void AddBloodByDamage(float damage, bool CallFunc_IsBureau_ReturnValue);// 0x8a873f8 0x78ca998e40
	void EndHoveredSlot();// 0x8a873f8 0x78cac18f20
	void StartHoveredSlot(enum bagtype, int index);// 0x8a873f8 0x78cac18e40
	void InventoryTick(float Time);// 0x8a873f8 0x78cac18d60
	void LeaveItemSlot(enum bagtype, int index);// 0x8a873f8 0x78cac18c80
	void EnterItemSlot(enum EBagType, int index, bool IsValid);// 0x8a873f8 0x78cac18ac0
	void CreateCapture();// 0x8a873f8 0x78cac189e0
	void UnBindItemSlotEvent(InventorySlotWidget_C* Slot);// 0x8a873f8 0x78cac18740
	void BindItemSlotEvent(InventorySlotWidget_C* Slot);// 0x8a873f8 0x78cac18660
	void UnBindInventoryEvent();// 0x8a873f8 0x78cac15f00
	void BindInventoryEvent(WuXiaXCharacter* Player);// 0x8a873f8 0x78cac15e20
	void HideDetail();// 0x8a873f8 0x78cac15d40
	void DoubleClickItem(enum bagtype, int index);// 0x8a873f8 0x78cac17080
	void DragItem(enum sbagtype, int SIndex, int Number, enum tbagtype, int TIndex, bool isbreakbuttondown, int TI, enum TT, int SI, enum ST);// 0x8a873f8 0x78cac16fa0
	void SetKillNumInfoEnable(bool bIsEnable);// 0x8a873f8 0x78cac16ec0
	void SetChangeWeaponEnable(bool bIsEnable);// 0x8a873f8 0x78cac16de0
	void SetWuXueEnable(bool bIsEnable);// 0x8a873f8 0x78cac16d00
	void SetBagEnable(bool bIsEnable);// 0x8a873f8 0x78cac16c20
	void SetDropItemEnable(bool bIsEnable);// 0x8a873f8 0x78cac16b40
	void SetAutoRunEnable(bool bIsEnable);// 0x8a873f8 0x78cac11900
	void SetJoystickEnable(bool bIsEnable);// 0x8a873f8 0x78c633b220
	void SetHorseEnable(bool bIsEnable);// 0x8a873f8 0x78c633bd80
	void SetCountDownEnable(bool bIsEnable);// 0x8a873f8 0x78c633b300
	void SetAutoPickEnable(bool bIsEnable);// 0x8a873f8 0x78c633b3e0
	void SetOperationEnable(bool bIsEnable);// 0x8a873f8 0x78c633af80
	void SetSettingEnable(bool bIsEnable);// 0x8a873f8 0x78c633bca0
	void SetQuickMsgEnable(bool bIsEnable);// 0x8a873f8 0x78c633b060
	void SetMapEnable(bool bIsEnable);// 0x8a873f8 0x78c7ee1660
	void SetFreeViewEnable(bool bIsEnable);// 0x8a873f8 0x78c633b840
	void SetActionEnable(bool bIsEnable);// 0x8a873f8 0x78c633e240
	void SetWhetStoneEnable(bool bIsEnable);// 0x8a873f8 0x78c633e320
	void SetJumpEnable(bool bIsEnable);// 0x8a873f8 0x78c633e400
	void SetRangeThrowSkillEnable(bool bIsEnable);// 0x8a873f8 0x78c761a5e0
	void Event_SetEnterDungeon(bool isJoin);// 0x8a873f8 0x78c633dd00
	void SetSignEnable(bool bIsEnable);// 0x8a873f8 0x78c633adc0
	void SetOneSkillEnable(bool bIsEnable);// 0x8a873f8 0x78c633dde0
	void SetTwoSkillEnable(bool bIsEnable);// 0x8a873f8 0x78c633dfa0
	void SetThreeSkillEnable(bool bIsEnable);// 0x8a873f8 0x78c7ee12e0
	void SetBlockEnable(bool bIsEnable);// 0x8a873f8 0x78c7ee1ac0
	void SetDodgeEnable(bool bIsEnable);// 0x8a873f8 0x78c633d6e0
	void SetAttackEnable(bool bIsEnable);// 0x8a873f8 0x78c633d7c0
	void SetLockEnable(bool bIsEnable);// 0x8a873f8 0x78c633d8a0
	void SetGeneralSkillEnable(bool bIsEnable);// 0x8a873f8 0x78c633db40
	void SetTeamInfoEnable(bool bIsEnable);// 0x8a873f8 0x78c633d1a0
	void SetExplosionEnable(bool bIsEnable);// 0x8a873f8 0x78c633e080
	void SetArmorEnable(bool bIsEnable);// 0x8a873f8 0x78c633d280
	void SetCompassEnable(bool isenable);// 0x8a873f8 0x78c633d360
	void BndEvt__Joystick_K2Node_ComponentBoundEvent_5_OnJoystickStartedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c7ee13c0
	void BndEvt__Joystick_K2Node_ComponentBoundEvent_3_OnJoystickMovedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c7ee0da0
	void BndEvt__Joystick_K2Node_ComponentBoundEvent_4_OnJoystickEndedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c633cb80
	void Release Joystick();// 0x8a873f8 0x78c633cc60
	void BndEvt__Attack_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633cd40
	void BndEvt__Attack_K2Node_ComponentBoundEvent_17_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c633cfe0
	void BndEvt__Lock_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633fc80
	void BndEvt__Explosion_K2Node_ComponentBoundEvent_24_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633d440
	void BndEvt__JumpKick_K2Node_ComponentBoundEvent_21_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633fd60
	void BndEvt__Bag_K2Node_ComponentBoundEvent_20_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633fe40
	void UpdateRangeWeapon();// 0x8a873f8 0x78c633ff20
	void BndEvt__Interactive_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c633f900
	void BndEvt__Lock_K2Node_ComponentBoundEvent_4_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c7ee1120
	void BndEvt__Explosion_K2Node_ComponentBoundEvent_9_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c633f9e0
	void BndEvt__RideDown_K2Node_ComponentBoundEvent_15_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c633fac0
	void BndEvt__Jump_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633fba0
	void BndEvt__Squat_K2Node_ComponentBoundEvent_14_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633f580
	void BndEvt__GlidingInteractive_K2Node_ComponentBoundEvent_10_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c7ee1040
	void VisibleAnimUI();// 0x8a873f8 0x78c633f660
	void RangeWeaponUse();// 0x8a873f8 0x78c633f740
	void ThrowWeaponUse();// 0x8a873f8 0x78c633f820
	void BndEvt__ShanBi_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633f200
	void BndEvt__Block_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c7ee0f60
	void BndEvt__Block_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c633f2e0
	void BndEvt__WinButtonTaoli_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633f3c0
	void BndEvt__WinButtonLite_K2Node_ComponentBoundEvent_12_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633ef60
	void WinCallback(bool isConfirm);// 0x8a873f8 0x78c7ee3880
	void BndEvt__Button_ChangeView_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c633f040
	void BndEvt__Button_ExitVision_K2Node_ComponentBoundEvent_7_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c633e940
	void OnExitVision(bool isConfirm);// 0x8a873f8 0x78c633f4a0
	void BlockReleased();// 0x8a873f8 0x78c633ea20
	void LockReleased();// 0x8a873f8 0x78c633eb00
	void BlockPressed();// 0x8a873f8 0x78c5e41c80
	void CheckRangeThrowSkillIconState();// 0x8a873f8 0x78c7ee0be0
	void ResetCheckRangeThrowSkillIconState();// 0x8a873f8 0x78c633f120
	void BndEvt__Button_sing_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633e6a0
	void BlueprintCloseSubWidget(enum Type);// 0x8a873f8 0x78c633e860
	void UpdateBlockColdProgress(float ColdProgress);// 0x8a873f8 0x78c6338740
	void ShowDamageCircle();// 0x8a873f8 0x78c7ee3500
	void HideDamageCircle();// 0x8a873f8 0x78c6338c80
	void SetDamageCircleState(enum State);// 0x8a873f8 0x78c6337e80
	void SetDamageCircleShringkingTime(float CurrentTime, float alltime);// 0x8a873f8 0x78c6337f60
	void SetDamageCircleWaitingTime(float Time);// 0x8a873f8 0x78c6338040
	void SetCurrentCircle(float Vector Pos 1 X, float Vector Pos 1 Y, float Range);// 0x8a873f8 0x78c6338200
	void SetNextCircle(float Vector Pos 2 X, float Vector Pos 2 Y, float Range);// 0x8a873f8 0x78c6337780
	void SetShingCircle(float VectorPos1X, float VectorPos2Y, float Range);// 0x8a873f8 0x78c6338820
	void UpdateSoundLocation(int ID, Vector NewLocation);// 0x8a873f8 0x78c6337860
	void RemoveSound(int ID);// 0x8a873f8 0x78c6337940
	void ShowCheckSoundLocation(int IDs, Vector Location);// 0x8a873f8 0x78c6337b00
	void BndEvt__RideJump_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c6337240
	void ShowEndGameTip(int MatchRank, int KillNum);// 0x8a873f8 0x78c63382e0
	void OnInitialized();// 0x8a873f8 0x78c6337400
	void TemporaryHideSettingUI();// 0x8a873f8 0x78c63374e0
	void ShowSettingUI();// 0x8a873f8 0x78c63375c0
	void HideSettingUI();// 0x8a873f8 0x78c633a6c0
	void ClearSkillHotKey(int index);// 0x8a873f8 0x78c6337be0
	void SetSkillCurrentCD(int skill_id, float skillcd);// 0x8a873f8 0x78c633a7a0
	void SetActiveSkill(out const UISkillInfo[] Info);// 0x8a873f8 0x78c633a880
	void SetPassiveSkill(out const UISkillInfo[] Info);// 0x8a873f8 0x78c633a340
	void SetSkillHotKey(int index, int skill_id, PaperSprite* icon, float skillcd, bool canuse, int skillprop);// 0x8a873f8 0x78c63376a0
	void InitActiveSkill();// 0x8a873f8 0x78c633a420
	void InitPassiveSkill();// 0x8a873f8 0x78c633a500
	void RemoveSkillBook();// 0x8a873f8 0x78c633a5e0
	void SetSkillBook();// 0x8a873f8 0x78c633a960
	void AddActiveSkill();// 0x8a873f8 0x78c6339fc0
	void AddPassiveSkill();// 0x8a873f8 0x78c633aa40
	void RemoveActiveSkill();// 0x8a873f8 0x78c633a0a0
	void RemovePassiveSkill();// 0x8a873f8 0x78c633a180
	void EquipSkill();// 0x8a873f8 0x78c6339a80
	void UnEquipSkill();// 0x8a873f8 0x78c7ee2ee0
	void ShowUISkillDetail();// 0x8a873f8 0x78c6339b60
	void HideUISkillDetail();// 0x8a873f8 0x78c6339c40
	void SetSkillWeapon();// 0x8a873f8 0x78c6339d20
	void ClearAllSkill();// 0x8a873f8 0x78c6339620
	void AutoShowSkillByWeapons();// 0x8a873f8 0x78c633a260
	void SetSkillEquipState();// 0x8a873f8 0x78c6339700
	void SetGeneralState(bool State);// 0x8a873f8 0x78c63397e0
	void SetGeneralInfo(PaperSprite* icon, int ID, float max_cd);// 0x8a873f8 0x78c63392a0
	void ShowMartialArtsUI();// 0x8a873f8 0x78c6339e00
	void HideMartialArtsUI();// 0x8a873f8 0x78c6339380
	void PlayerTalk(int player_id, bool chatting);// 0x8a873f8 0x78c6339460
	void SetIsRangeSkillVisible(bool bIsRangeSkillVisible);// 0x8a873f8 0x78c6339540
	void SetRangeSkillInfo(PaperSprite* Sprite, int skillid, float maxCD);// 0x8a873f8 0x78c633c720
	void SetIsThrowSkillVisible(bool bIsThrowSkillVisible);// 0x8a873f8 0x78c7ee2a80
	void SetThrowSkillInfo(PaperSprite* Sprite, int skillid, float maxCD);// 0x8a873f8 0x78c63399a0
	void SetRangeThrowSkillIconState(enum IconState);// 0x8a873f8 0x78c633c800
	void BndEvt__RangeThrowJoystick_K2Node_ComponentBoundEvent_0_OnJoystickStartedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c633c8e0
	void BndEvt__RangeJoystick_K2Node_ComponentBoundEvent_2_OnJoystickEndedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c6339000
	void BndEvt__ThrowJoystick_K2Node_ComponentBoundEvent_3_OnJoystickStartedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c633c020
	void BndEvt__ThrowJoystick_K2Node_ComponentBoundEvent_4_OnJoystickEndedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c63398c0
	void BndEvt__RangeJoystick_K2Node_ComponentBoundEvent_25_OnJoystickAxisEvent__DelegateSignature(out const Vector2D DeltaAxis, out const Vector2D AbsoluteAxis);// 0x8a873f8 0x78c7ee29a0
	void BndEvt__ThrowJoystick_K2Node_ComponentBoundEvent_1_OnJoystickAxisEvent__DelegateSignature(out const Vector2D DeltaAxis, out const Vector2D AbsoluteAxis);// 0x8a873f8 0x78c633c480
	void SetSplitItemButton(bool isbottondown);// 0x8a873f8 0x78c633c560
	void PickSuccess();// 0x8a873f8 0x78c633c640
	void MissileHitTarget();// 0x8a873f8 0x78c633b920
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633c3a0
	void WaitForPick();// 0x8a873f8 0x78c633ba00
	void CannotAutoPick(int Type);// 0x8a873f8 0x78c633bae0
	void BndEvt__WuXue_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633b680
	void BndEvt__btn_setting_K2Node_ComponentBoundEvent_12_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c633c100
	void BndEvt__TempLearnBook_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c633b760
	void PickUpOverWeight();// 0x8a873f8 0x78c666ba00
	void CanNotEquipItem();// 0x8a873f8 0x78c7eeaf80
	void ParachuteCannotUnEquip();// 0x8a873f8 0x78c666ecc0
	void ParachuteDamaged();// 0x8a873f8 0x78c666b680
	void LearnBook();// 0x8a873f8 0x78c666e780
	void ReportVoiceResponse(int Value);// 0x8a873f8 0x78c666e940
	void BagLevelOverWeight();// 0x8a873f8 0x78c666ea20
	void OpenWuXue();// 0x8a873f8 0x78c666e4e0
	void KeyCannotDrop();// 0x8a873f8 0x78c666e320
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c666e160
	void ShowMainInterfaceUI();// 0x8a873f8 0x78c666dfa0
	void HideMainInterfaceUI();// 0x8a873f8 0x78c666dde0
	void UpdateMp(float currentMP, float currentmaxMP, float maxMP);// 0x8a873f8 0x78c666da60
	void UpdateInjury(float Injury);// 0x8a873f8 0x78c666fe40
	void UpdateCompass(float Angle);// 0x8a873f8 0x78c6331ba0
	void Init();// 0x8a873f8 0x78c63306a0
	void SetWeaponState(enum WeaponEquipType, int WeaponLevel, int BufferNumber, int MaxBufferNumber, PaperSprite* WeaponIcon);// 0x8a873f8 0x78c666f900
	void ChangeCurrentWeapon(int weaponindex);// 0x8a873f8 0x78c6330780
	void SetBuff(int buffID, int numberoflayer, float Time, PaperSprite* icon, float maxCD);// 0x8a873f8 0x78c6331820
	void RemoveBuff(int buffID);// 0x8a873f8 0x78c6330080
	void ClearBuffs();// 0x8a873f8 0x78c6330240
	void UpdateKillData(int kill);// 0x8a873f8 0x78c63335e0
	void BeginKeepAction(float actiontime);// 0x8a873f8 0x78c6333180
	void EndKeepAction();// 0x8a873f8 0x78c6332b60
	void CloseMap();// 0x8a873f8 0x78c6331e40
	void Construct();// 0x8a873f8 0x78c6332620
	void UpdateFightHp(float currentHP, float maxHP);// 0x8a873f8 0x78c63327e0
	void UpdateDyingHp(float currentHP, float maxHP);// 0x8a873f8 0x78c63330a0
	void UpdatePlayerState(enum new_state);// 0x8a873f8 0x78c63304e0
	void ShowInteractive(enum Type, out const FText text);// 0x8a873f8 0x78c6331d60
	void HideInteractive();// 0x8a873f8 0x78c6332d20
	void SetHorseState(bool new_state);// 0x8a873f8 0x78c6335560
	void UpdateHorsePower(float current_power, float max_power);// 0x8a873f8 0x78c63353a0
	void UpdateHorseSpeed(float current_speed, float max_speed);// 0x8a873f8 0x78c63352c0
	void SetKeepActionTime(float current_time);// 0x8a873f8 0x78c7ee4a00
	void PlayerLockToOther();// 0x8a873f8 0x78c6336980
	void SwitchOtherInfoChange(FString Info);// 0x8a873f8 0x78c6333ea0
	void ResetLanguage();// 0x8a873f8 0x78c6336a60
	void PickGetItem(bool State, PaperSprite* Texture, int Level, bool Learned);// 0x8a873f8 0x78c63361a0
	void UpdateWeaponStateEffect(int weaponindex, PaperSprite* effecticon, int Value);// 0x8a873f8 0x78c6335e20
	void RemoveWeaponState(int weaponindex);// 0x8a873f8 0x78c63368a0
	void AppendKillInfo(FString attack_player_name, FString dead_player_name, out const int cause_id, enum reason);// 0x8a873f8 0x78c6335f00
	void UpdateLiveData(int LIVE, int MaxPlayerNum);// 0x8a873f8 0x78c6335fe0
	void ChangeTeamPlayerMarkState(int Num, bool newstate);// 0x8a873f8 0x78c63360c0
	void BndEvt__RayTraceDebug_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c6335aa0
	void BndEvt__RayTraceResume_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c7ee35e0
	void BndEvt__WeaponEquip01_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c6335b80
	void BndEvt__WeaponEquip02_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c6335c60
	void InitCheckSoundSkill(int skill_id, PaperSprite* icon, float max_cd);// 0x8a873f8 0x78c7ee2460
	void SetCheckSoundSkillState(bool State);// 0x8a873f8 0x78c7ee2540
	void UpdateCheckSoundCD(float current_cd, float max_cd);// 0x8a873f8 0x78c6338e40
	void SetSkillState(int skill_slot, bool enable);// 0x8a873f8 0x78c6338f20
	void BndEvt__RideLeft_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c6335720
	void BndEvt__RideRight_K2Node_ComponentBoundEvent_9_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c63358e0
	void BndEvt__RideRight_K2Node_ComponentBoundEvent_10_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c63359c0
	void BndEvt__RideLeft_K2Node_ComponentBoundEvent_0_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c63389e0
	void UpdatePlayerRotator(int Num, float Yaw);// 0x8a873f8 0x78c6335d40
	void UpdatePlayerLocation(int Num, Vector Location);// 0x8a873f8 0x78c6338ac0
	void InitTeamPlayer(int PlayerID, FString Name, int index, int teammode);// 0x8a873f8 0x78c6338ba0
	void ZeroTextState(bool State);// 0x8a873f8 0x78c7ee30a0
	void SetZeroTimer(int Timer);// 0x8a873f8 0x78c7ee22a0
	void UpdateTeamPlayerState(int Num, enum new_state);// 0x8a873f8 0x78c63383c0
	void UpdateTeamPlayerDyingHPPercent(int Num, float Value);// 0x8a873f8 0x78c63384a0
	void UpdateTeamPlayerHPPercent(int Num, float Value);// 0x8a873f8 0x78c6338580
	void SetMainInterfaceState(bool State);// 0x8a873f8 0x78c65ba0a0
	void SetKiteState(bool new_state);// 0x8a873f8 0x78c8a14220
	void UpdateKiteSpeed(float Speed);// 0x8a873f8 0x78c65ba6c0
	void DeleteTeamPlayerMarkState(int Num);// 0x8a873f8 0x78c8e9b3e0
	void UpdatePlayerMark3DLocation(int Num, Vector Location);// 0x8a873f8 0x78c2f7e080
	void ClearTeamPlayerName(int index);// 0x8a873f8 0x78c65ba420
	void ShowOxygen();// 0x8a873f8 0x78c8a14bc0
	void HideOxygen();// 0x8a873f8 0x78c65b9fc0
	void UpdateOxygen(float oxygen);// 0x8a873f8 0x78c7ba1660
	void PlayerUnLockToOther();// 0x8a873f8 0x78c65b9c40
	void SetTeamPlayerShowMode(int teammode);// 0x8a873f8 0x78c8a151e0
	void BndEvt__Trap_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c8a128c0
	void BndEvt__FreeViewJoystick_K2Node_ComponentBoundEvent_12_OnJoystickStartedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c8a127e0
	void BndEvt__FreeViewJoystick_K2Node_ComponentBoundEvent_13_OnJoystickEndedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c6e7af80
	void BndEvt__FreeViewJoystick_K2Node_ComponentBoundEvent_14_OnJoystickReleasedEvent__DelegateSignature(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c6e774e0
	void BndEvt__FreeViewJoystick_K2Node_ComponentBoundEvent_15_OnJoystickAxisEvent__DelegateSignature(out const Vector2D DeltaAxis, out const Vector2D AbsoluteAxis);// 0x8a873f8 0x78c9a43ce0
	void AltarInitTag(int ID, Vector Location, int Num);// 0x8a873f8 0x78c65b9620
	void AltarUpdateNum(int ID, int Num);// 0x8a873f8 0x78c6e7b060
	void UpdateTeamPlayerWaistTokenState(int Num, enum new_state);// 0x8a873f8 0x78c9a444c0
	void UpdatePlayerMoveState(enum State, bool Value);// 0x8a873f8 0x78c6333ce0
	void ResetPlayerMoveState();// 0x8a873f8 0x78c6e77080
	void UpdatePlayerMovementMode(byte Mode);// 0x8a873f8 0x78c9a44bc0
	void BndEvt__SwimUp_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c7888ac0
	void BndEvt__SwimUp_K2Node_ComponentBoundEvent_17_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c6e77f60
	void BndEvt__SwimDown_K2Node_ComponentBoundEvent_18_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c6e768a0
	void BndEvt__SwimDown_K2Node_ComponentBoundEvent_19_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c65bc720
	void CheckIfGuide(enum Type, out const GuideData Data);// 0x8a873f8 0x78c65bd6e0
	void DestroyGuidePanel();// 0x8a873f8 0x78c65bcaa0
	void SwitchWeaponTo1();// 0x8a873f8 0x78c65bf580
	void SwitchWeaponTo2();// 0x8a873f8 0x78c65bc020
	void ExpandDrugPanel();// 0x8a873f8 0x78c65bf900
	void DrugExchangeDeal();// 0x8a873f8 0x78c65bdc20
	void UseFirstDrug();// 0x8a873f8 0x78c5080da0
	void SpecialToolSelect(int index);// 0x8a873f8 0x78c65bf3c0
	void UseBagItem();// 0x8a873f8 0x78c5087240
	void BndEvt__Switch_Weapon_K2Node_ComponentBoundEvent_20_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c77c6d00
	void SetTalkButtonState(bool visible);// 0x8a873f8 0x78c5086d00
	void BndEvt__TalkButton_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c77c6ec0
	void DestroyTrainMainUI();// 0x8a873f8 0x78c5086ec0
	void PlayerRebirthUpdateUI();// 0x8a873f8 0x78c5086c20
	void TrainTextState(bool State);// 0x8a873f8 0x78c5086980
	void SetTrainTimer(int Timer);// 0x8a873f8 0x78c8a10da0
	void ShowGameCountDownTime();// 0x8a873f8 0x78c5086b40
	void SetGameCountDownTime(float Time);// 0x8a873f8 0x78c77c5720
	void HideGameCountDownTime();// 0x8a873f8 0x78c5086360
	void ShowLastPlayerCountDown(float Time);// 0x8a873f8 0x78c50861a0
	void PlayerInitHorseInfoUI(int horse_skin_id, float horse_cd, float cur_cd);// 0x8a873f8 0x78c666bbc0
	void BndEvt__HorseCallBtn_K2Node_ComponentBoundEvent_22_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c8a114a0
	void PlayerCallHorseFinishedUI();// 0x8a873f8 0x78c5085fe0
	void BndEvt__BtnQuickMsg_K2Node_ComponentBoundEvent_23_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c65b6280
	void TeamQuickMessage(int PlayerID, FString Message);// 0x8a873f8 0x78c65b5c60
	void BP_Main_GameReady();// 0x8a873f8 0x78c8a16fa0
	void CloseUI();// 0x8a873f8 0x78c77c7860
	void ChangeFollowPlayerId(int PlayerID, int followid);// 0x8a873f8 0x78c8a104e0
	void BndEvt__GlidingCancelFollow_K2Node_ComponentBoundEvent_24_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c8a10860
	void UpdateJailState(enum State, float continus);// 0x8a873f8 0x78c5086600
	void JailCountDown();// 0x8a873f8 0x78c65b7f60
	void JailClosed();// 0x8a873f8 0x78c77c8040
	void AltarOpend();// 0x8a873f8 0x78c65b8040
	void UpdateJailQueue(int Num);// 0x8a873f8 0x78c65b6440
	void JailQueueRebirth();// 0x8a873f8 0x78c47089e0
	void ShowNearbyEnemyNum(bool Show, int Num);// 0x8a873f8 0x78c65b84a0
	void LockCD(bool lock, out const int64[] skills);// 0x8a873f8 0x78c65b7b00
	void UpdateCDBuff(int64 buffID, float Time);// 0x8a873f8 0x78c77cac00
	void BeginKeepInterActorAction(enum Type, float actiontime);// 0x8a873f8 0x78c65ba880
	void BeginKeepInterSceneAction(enum Type, float actiontime);// 0x8a873f8 0x78c7ba8200
	void BeginKeepUseItemAction(enum Type, float actiontime);// 0x8a873f8 0x78c4702d20
	void SetBagLevel(int Level);// 0x8a873f8 0x78c47036c0
	void UpdateFightSp(float currentSP, float maxSP);// 0x8a873f8 0x78c7baace0
	void UpdateTeamPlayerSPPercent(int Num, float Value);// 0x8a873f8 0x78c47076a0
	void PlayerInsideCircle(bool inside);// 0x8a873f8 0x78c4700320
	void UpdateEagleEffect(int ID, bool Add);// 0x8a873f8 0x78c4707400
	void UpdateEagleItemEffect(int ID, int Level, bool Add);// 0x8a873f8 0x78c4700be0
	void SetIsSpring(bool bNewIsSpring);// 0x8a873f8 0x78c470a6c0
	void WearArmor(int Level, int MaxDurable);// 0x8a873f8 0x78c508aea0
	void TakeOffArmor();// 0x8a873f8 0x78c47004e0
	void SetArmorDurable(int Durable);// 0x8a873f8 0x78c508e080
	void ChangeWeaponBtn();// 0x8a873f8 0x78c508dc20
	void TryJailGuide(enum State);// 0x8a873f8 0x78c508b140
	void OnDragToBag(enum sbagtype, int index, int Num, enum tbagtype, bool isbreakbuttondown);// 0x8a873f8 0x78c4700b00
	void DisableControlLookForward();// 0x8a873f8 0x78c508c720
	void BndEvt__btn_action_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c4700940
	void SelectItem(int ID, int Type);// 0x8a873f8 0x78c508bae0
	void BndEvt__Button_91_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c508dfa0
	void GameStart();// 0x8a873f8 0x78c508be60
	void BndEvt__WhetStone_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c508bbc0
	void Destruct();// 0x8a873f8 0x78c65b6600
	void WearHat(int Level, int MaxDurable);// 0x8a873f8 0x78c7eeebe0
	void TakeOffHat();// 0x8a873f8 0x78c508bca0
	void SetHatDurable(int Durable);// 0x8a873f8 0x78c7eef040
	void SetBatteryPercent(float percent);// 0x8a873f8 0x78c508bf40
	void SetSignal(int signal);// 0x8a873f8 0x78c66644c0
	void AppendTeamMessage(FString TeammateName, FString OtherName, enum TeamMessageType, enum CauseDyingType, int causeID);// 0x8a873f8 0x78c65bcf00
	void AppendGlobalMessage(enum GlobalMessageType, FString Content);// 0x8a873f8 0x78c7eeb3e0
	void AppendSandstormMessage(float WaitTime, bool bIsForceShow);// 0x8a873f8 0x78c65bce20
	void AppendPickedMessage(int PickedItemId);// 0x8a873f8 0x78c6664140
	void AppendLearnedMessage(int LearnedItemId);// 0x8a873f8 0x78c7eef3c0
	void AppendTipMessage(enum TipMessageType, FString Content);// 0x8a873f8 0x78c66661a0
	void AppendKnockOutMessage(FString PlayerIconPath, FString DeadName, FString DeadIconPath);// 0x8a873f8 0x78c66675c0
	void BndEvt__FixArmor_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c6666440
	void UpdateCrosshairType(enum NewCrosshairType, int NewCrosshairNum);// 0x8a873f8 0x78c6664840
	void UpdateRangeChargeNum(int NewRangeChargeNum, int NewMaxRangeChargeNum);// 0x8a873f8 0x78c65b0e80
	void OnSpawnMissile();// 0x8a873f8 0x78c7eeb4c0
	void UpdateCrosshairLockedInfosAndProjectileLocations(out const CrosshairLockedInfo[] NewCrosshairLockedInfos, out const Vector[] NewProjectileLocations);// 0x8a873f8 0x78c5e476a0
	void HideMapPanel();// 0x8a873f8 0x78c6667940
	void ShowMapPanel();// 0x8a873f8 0x78c6e78740
	void BndEvt__CancelRangeButton_K2Node_ComponentBoundEvent_28_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3329b60
	void BndEvt__CancelRangeButton_K2Node_ComponentBoundEvent_30_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c788d8a0
	void BndEvt__CancelRangeButton_K2Node_ComponentBoundEvent_32_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c65b1040
	void AppendKilledMessage(FString PlayerIconPath, FString KillerName, FString KillerIconPath);// 0x8a873f8 0x78c6e78ba0
	void BndEvt__Button_SkipTrace_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c6e78820
	void BndEvt__MainGameWidget_Button_Encyclopedia_K2Node_ComponentBoundEvent_29_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c65b6fa0
	void ShowTeachingMission(FString title, out const FString[] items, bool bShowCloseButton);// 0x8a873f8 0x78c77ce080
	void CloseTeachingMission();// 0x8a873f8 0x78c65b7320
	void ShowGuideWidget(enum BindWidgetType, enum GuideWidgetType, bool bIsAutoHide, bool bIsForceGuide, bool bIsShowReturnBtn);// 0x8a873f8 0x78c65b1120
	void HideGuideWidget(enum BindWidgetType);// 0x8a873f8 0x78c65b67c0
	void PlayInteractiveParticle();// 0x8a873f8 0x78c77cef60
	void OnPlayerGameStateUpdate();// 0x8a873f8 0x78c65b6520
	void OnHorseRideStateUpdate();// 0x8a873f8 0x78c65b4220
	void OnCurrentWeaponUpdate();// 0x8a873f8 0x78c66651e0
	void OnPlaneLandedUpdate();// 0x8a873f8 0x78c4705720
	void OnPlaneJumpedUpdate();// 0x8a873f8 0x78c6e721c0
	void OnFollowPlayerIDUpdate();// 0x8a873f8 0x78c8a16c20
	void OnCanJumpPlaneUpdate();// 0x8a873f8 0x78c6e7f740
	void OnCanOpenParachuteUpdate();// 0x8a873f8 0x78c6e714a0
	void OnVisionPlayerIDUpdate();// 0x8a873f8 0x78c6661ac0
	void HighPriority();// 0x8a873f8 0x78c2f74ca0
	void LowPriority();// 0x8a873f8 0x78c2f74d80
	void ExecuteUbergraph_MainGameWidget(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, TeamPlayerInfoWidget_C* CallFunc_Create_ReturnValue, bool Temp_bool_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LastWinPlayerLeaveWidget_C* CallFunc_Create_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, QuickMsgText_C* CallFunc_Create_ReturnValue, enum Temp_byte_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Array_Length_ReturnValue, EnemyMark_C* CallFunc_Create_ReturnValue, ItemMark_C* CallFunc_Create_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, FString Temp_string_Variable, FString Temp_string_Variable, FString K2Node_Select_Default, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, TextBlock* Temp_object_Variable, TextBlock* Temp_object_Variable, TextBlock* Temp_object_Variable, TextBlock* Temp_object_Variable, enum Temp_byte_Variable, HorizontalBox* Temp_object_Variable, HorizontalBox* Temp_object_Variable, HorizontalBox* Temp_object_Variable, HorizontalBox* Temp_object_Variable, enum Temp_byte_Variable, TextBlock* Temp_object_Variable, TextBlock* Temp_object_Variable, TextBlock* Temp_object_Variable, TextBlock* Temp_object_Variable, enum Temp_byte_Variable, Image* Temp_object_Variable, Image* Temp_object_Variable, Image* Temp_object_Variable, Image* Temp_object_Variable, enum Temp_byte_Variable, WeaponFire_C* Temp_object_Variable, WeaponFire_C* Temp_object_Variable, WeaponFire_C* Temp_object_Variable, WeaponFire_C* Temp_object_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, enum Temp_byte_Variable, int64 CallFunc_Array_Get_Item, int CallFunc_Conv_Int64ToInt_ReturnValue, SkillHotKeyWidget_C* CallFunc_GetHotKeyByID_ref, bool CallFunc_IsValid_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, enum K2Node_Select_Default, bool Temp_bool_Has_Been_Initd_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_CustomEvent_isJoin, bool K2Node_Event_bIsEnable, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool K2Node_Event_bIsEnable, bool CallFunc_Greater_FloatFloat_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_Event_bIsEnable, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_IsPlayerInSky_bInSky, enum Temp_byte_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_IsPlayerInSky_bInSky, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_IsPlayerInSky_bInSky, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsPlayerInSky_bInSky, bool CallFunc_Not_PreBool_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsPlayerInSky_bInSky, bool CallFunc_IsGuideRunning_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsPlayerInSky_bInSky, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_IsPlayerCannotUseJoystick_bCannotUse, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsPlayerCannotUseJoystick_bCannotUse, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_IsPlayerUseLongDisWeapon_bUse, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_Not_PreBool_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsPlayerUseWeapon1Or2_bUse, bool K2Node_CustomEvent_IsEnable, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Vector2D CallFunc_GetLocalTopLeft_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, VirtualJoystick* CallFunc_GetMoveJoystick_Joystick, bool CallFunc_FinishNode_ReturnValue, bool CallFunc_FinishNode_ReturnValue, enum Temp_byte_Variable, PanelWidget* CallFunc_GetParent_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_LocalToAbsolute_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, const CanUsedRangeWeaponInfo CallFunc_GetOneRangeWeapon_ReturnValue, int Temp_int_Variable, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const CanUsedRangeWeaponInfo CallFunc_GetOneThrowWeapon_ReturnValue, bool Temp_bool_Variable, GuideData K2Node_MakeStruct_GuideData, enum K2Node_Select_Default, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, bool CallFunc_CanInput_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, enum Temp_byte_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BP_InputKey_ReturnValue, bool CallFunc_BP_InputKey_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BP_InputKey_ReturnValue, bool CallFunc_BP_InputKey_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_CustomEvent_isConfirm, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, PlayerSquadComponent* CallFunc_SquadComponent_Component, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetCurrentVisionPlayerID_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_GetTeamInfo_Player, FText CallFunc_Conv_ObjectToText_ReturnValue, bool K2Node_CustomEvent_isConfirm, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetLockCancelTime_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsAutoCancelBlockMode_ReturnValue, float CallFunc_GetBlockCancelTime_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum Temp_byte_Variable, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_ItemCtrl_GetMissileNumByWeaponItemId_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool Temp_bool_Variable, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_GetItemChildTypeById_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_GetWeaponModeByWeaponItemId_ReturnValue, bool CallFunc_CanInput_ReturnValue, Widget* Temp_object_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Event_Type, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_ColdProgress, bool CallFunc_IsAutoCancelBlockMode_ReturnValue, enum Temp_byte_Variable, bool CallFunc_FinishNode_ReturnValue, bool CallFunc_FinishNode_ReturnValue, bool CallFunc_ExecuteCustomNode_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_ExecuteCustomNode_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_GetHeroId_ReturnValue, int CallFunc_PlayHeroSound_ReturnValue, enum K2Node_Event_state, bool K2Node_SwitchEnum_CmpSuccess, float K2Node_Event_currenttime, float K2Node_Event_alltime, FString CallFunc_FormatTime_ReturnValue, float K2Node_Event_time, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_FormatTime_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float K2Node_CustomEvent_Vector_Pos_1_X, float K2Node_CustomEvent_Vector_Pos_1_Y, float K2Node_CustomEvent_Range, float K2Node_CustomEvent_Vector_Pos_2_X, float K2Node_CustomEvent_Vector_Pos_2_Y, float K2Node_CustomEvent_Range, float K2Node_CustomEvent_VectorPos1X, float K2Node_CustomEvent_VectorPos2Y, float K2Node_CustomEvent_Range, int K2Node_Event_id, Vector K2Node_Event_NewLocation, int K2Node_Event_id, int K2Node_Event_Ids, Vector K2Node_Event_location, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, SoundPlayerWidget_C* K2Node_DynamicCast_AsSound_Player_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, SoundPlayerWidget_C* K2Node_DynamicCast_AsSound_Player_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, int K2Node_Event_MatchRank, int K2Node_Event_KillNum, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Divide_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Percent_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FText K2Node_Select_Default, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Conv_BoolToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool CallFunc_RegisterWidget_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, int K2Node_Event_Index, int K2Node_Event_skill_id, float K2Node_Event_skillcd, bool K2Node_SwitchInteger_CmpSuccess, SkillHotKeyWidget_C* CallFunc_GetHotKeyByID_ref, const UISkillInfo[] K2Node_Event_info, bool CallFunc_IsValid_ReturnValue, const UISkillInfo[] K2Node_Event_info, int K2Node_Event_Index, int K2Node_Event_skill_id, PaperSprite* K2Node_Event_icon, float K2Node_Event_skillcd, bool K2Node_Event_canuse, int K2Node_Event_skillprop, int64 CallFunc_Conv_IntToInt64_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_Event_state, PaperSprite* K2Node_Event_icon, int K2Node_Event_id, float K2Node_Event_max_cd, int64 CallFunc_Conv_IntToInt64_ReturnValue, enum K2Node_Select_Default, int K2Node_Event_player_id, bool K2Node_Event_chatting, TeamPlayerInfoWidget_C* CallFunc_GetTeamInfo_Player, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool K2Node_Event_bIsRangeSkillVisible, PaperSprite* K2Node_Event_Sprite, int K2Node_Event_SkillId, float K2Node_Event_MaxCD, enum K2Node_Select_Default, int64 CallFunc_Conv_IntToInt64_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool K2Node_Event_bIsThrowSkillVisible, PaperSprite* K2Node_Event_Sprite, int K2Node_Event_SkillId, float K2Node_Event_MaxCD, enum K2Node_Select_Default, int64 CallFunc_Conv_IntToInt64_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, enum K2Node_Event_IconState, bool Temp_bool_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, WidgetAnimation* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, SoundPlayerWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, enum K2Node_Select_Default, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, Widget* K2Node_Select_Default, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Player_CanInput_ReturnValue, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, UserWidgetBase* CallFunc_OpenMessageBox_ReturnValue, bool CallFunc_Player_CanInput_ReturnValue, const Vector2D K2Node_ComponentBoundEvent_DeltaAxis, const Vector2D K2Node_ComponentBoundEvent_AbsoluteAxis, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, int CallFunc_GetUserSetting_ReturnValue, const Vector2D K2Node_ComponentBoundEvent_DeltaAxis, const Vector2D K2Node_ComponentBoundEvent_AbsoluteAxis, float CallFunc_Conv_IntToFloat_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_GetUserSetting_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum Temp_byte_Variable, enum CallFunc_State_GetPlayerChildState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_Event_isbottondown, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsVisible_ReturnValue, int K2Node_CustomEvent_Type, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsVisible_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText Temp_text_Variable, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, int K2Node_Event_value, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, FString K2Node_Select_Default, bool CallFunc_IsVisible_ReturnValue, enum CallFunc_GetGameModeType_GameMode, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, FText K2Node_Select_Default, enum Temp_byte_Variable, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, float K2Node_Event_currentMP, float K2Node_Event_currentmaxMP, float K2Node_Event_MaxMP, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Event_injury, float K2Node_Event_angle, enum K2Node_Event_WeaponEquipType, int K2Node_Event_WeaponLevel, int K2Node_Event_BufferNumber, int K2Node_Event_MaxBufferNumber, PaperSprite* K2Node_Event_WeaponIcon, int K2Node_Event_weaponindex, bool CallFunc_IsValid_ReturnValue, FText CallFunc_GetChangeWeaponText_Text, enum K2Node_Select_Default, int K2Node_Select_Default, bool K2Node_SwitchInteger_CmpSuccess, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int K2Node_Event_buffID, int K2Node_Event_numberoflayer, float K2Node_Event_time, PaperSprite* K2Node_Event_icon, float K2Node_Event_MaxCD, bool CallFunc_BooleanOR_ReturnValue, int K2Node_Event_buffID, int K2Node_Event_kill, float K2Node_Event_actiontime, FText CallFunc_Conv_IntToText_ReturnValue, float K2Node_Event_currentHP, float K2Node_Event_maxHP, float K2Node_Event_currentHP, float K2Node_Event_maxHP, enum K2Node_Event_new_state, enum K2Node_Event_Type, const FText K2Node_Event_text, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool K2Node_Event_new_state, float K2Node_Event_current_power, float K2Node_Event_max_power, float K2Node_Event_current_speed, float K2Node_Event_max_speed, float K2Node_Event_current_time, FString K2Node_CustomEvent_Info, bool K2Node_Event_state, PaperSprite* K2Node_Event_texture, int K2Node_Event_Level, bool K2Node_Event_learned, int K2Node_Event_weaponindex, PaperSprite* K2Node_Event_effecticon, int K2Node_Event_value, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Event_weaponindex, bool CallFunc_BooleanOR_ReturnValue, FString K2Node_Event_attack_player_name, FString K2Node_Event_dead_player_name, const int K2Node_Event_cause_id, enum K2Node_Event_reason, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int K2Node_Event_live, int K2Node_Event_MaxPlayerNum, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, int K2Node_CustomEvent_Num, bool K2Node_CustomEvent_NewState, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, RayOcclude* CallFunc_GetComponentByClass_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, RayOcclude* CallFunc_GetComponentByClass_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default, int CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int K2Node_Event_skill_id, PaperSprite* K2Node_Event_icon, float K2Node_Event_max_cd, bool K2Node_Event_state, int64 CallFunc_Conv_IntToInt64_ReturnValue, float K2Node_Event_current_cd, float K2Node_Event_max_cd, enum K2Node_Select_Default, int K2Node_Event_skill_slot, bool K2Node_Event_enable, Image* K2Node_Select_Default, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, bool CallFunc_EqualEqual_IntInt_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_Event_num, float K2Node_Event_yaw, int K2Node_Event_num, Vector K2Node_Event_location, TeamPlayerHeadWidget_C* CallFunc_GetTeamHead_Player, int K2Node_Event_playerid, FString K2Node_Event_name, int K2Node_Event_Index, int K2Node_Event_teammode, bool CallFunc_IsValid_ReturnValue, LinearColor CallFunc_GetTeamColor_TeamColor, Color CallFunc_Conv_LinearColorToColor_ReturnValue, bool CallFunc_GetTeamPlayerInfo_Result, int CallFunc_GetTeamPlayerInfo_Index, TeamPlayerUIInfo CallFunc_GetTeamPlayerInfo_TeamPlayerInfo, TeamPlayerUIInfo K2Node_MakeStruct_TeamPlayerUIInfo, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, enum Temp_byte_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, enum Temp_byte_Variable, bool K2Node_Event_state, int K2Node_Event_timer, int K2Node_Event_num, enum K2Node_Event_new_state, FText CallFunc_Conv_IntToText_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_GetTeamInfo_Player, TeamPlayerHeadWidget_C* CallFunc_GetTeamHead_Player, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_num, float K2Node_Event_value, int K2Node_Event_num, float K2Node_Event_value, TeamPlayerInfoWidget_C* CallFunc_GetTeamInfo_Player, TeamPlayerInfoWidget_C* CallFunc_GetTeamInfo_Player, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_state, bool K2Node_Event_new_state, float K2Node_Event_speed, PlayerController* CallFunc_GetPlayerController_ReturnValue, int K2Node_Event_num, TeamPlayerMarkPositionWidget_C* CallFunc_GetTeamPlayerMarkPosition_MarkPositionWidget, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_num, Vector K2Node_Event_location, TeamPlayerMarkPositionWidget_C* CallFunc_GetTeamPlayerMarkPosition_MarkPositionWidget, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_Index, float K2Node_Event_oxygen, int K2Node_Event_teammode, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, const Geometry K2Node_ComponentBoundEvent_MyGeometry, const PointerEvent K2Node_ComponentBoundEvent_Event, const Vector2D K2Node_ComponentBoundEvent_DeltaAxis, const Vector2D K2Node_ComponentBoundEvent_AbsoluteAxis, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int K2Node_Event_id, Vector K2Node_Event_location, int K2Node_Event_num, int K2Node_Event_id, int K2Node_Event_num, int K2Node_Event_num, enum K2Node_Event_new_state, TeamPlayerInfoWidget_C* CallFunc_GetTeamInfo_Player, bool CallFunc_IsValid_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_CustomEvent_State, bool K2Node_CustomEvent_Value, bool K2Node_SwitchEnum_CmpSuccess, VirtualJoystick* CallFunc_GetMoveJoystick_Joystick, VirtualJoystick* CallFunc_GetMoveJoystick_Joystick, byte K2Node_CustomEvent_Mode, bool K2Node_SwitchEnum_CmpSuccess, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Event_Type, const GuideData K2Node_Event_Data, int K2Node_CustomEvent_index, bool CallFunc_IsVisible_ReturnValue, enum Temp_byte_Variable, bool K2Node_Event_visible, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default, TextBlock* K2Node_Select_Default, bool K2Node_Event_state, int K2Node_Event_timer, enum K2Node_Select_Default, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float K2Node_Event_time, FString CallFunc_FormatTime_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float K2Node_Event_time, bool CallFunc_IsValid_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, Anchors K2Node_MakeStruct_Anchors, Margin K2Node_MakeStruct_Margin, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_CanInput_ReturnValue, bool CallFunc_CanInput_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerInputComponent* K2Node_DynamicCast_AsPlayer_Input_Component, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, Texture2D* K2Node_Select_Default, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, enum CallFunc_Horse_Ride_state_net_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_Horse_Ride_state_net_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, Widget* K2Node_Select_Default, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_State_GetPlayerMotionState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_CanInput_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, int CallFunc_GetNextSwitchWeaponIndex_weaponIndex, int CallFunc_GetCurrentWeaponMode_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetCurrentWeaponAmmoNum_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsSwimming_ReturnValue, CanvasPanel* K2Node_Select_Default, MaterialInstanceDynamic* CallFunc_InitCircleProgress_Material, CanvasPanel* K2Node_Select_Default, int K2Node_Event_horse_skin_id, float K2Node_Event_horse_cd, float K2Node_Event_cur_cd, bool CallFunc_Greater_IntInt_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Horse_CallForHorse_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int K2Node_Event_playerid, FString K2Node_Event_message, bool CallFunc_GetTeamPlayerInfo_Result, int CallFunc_GetTeamPlayerInfo_Index, TeamPlayerUIInfo CallFunc_GetTeamPlayerInfo_TeamPlayerInfo, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_RemoveChildAt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, MaterialInstanceDynamic* CallFunc_InitCircleProgress_Material, int K2Node_CustomEvent_playerId, int K2Node_CustomEvent_followId, TeamPlayerInfoWidget_C* CallFunc_GetTeamPlayerInfoWidget_Widget, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, PlayerSquadComponent* CallFunc_SquadComponent_Component, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, enum K2Node_CustomEvent_State, float K2Node_CustomEvent_continus, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, int CallFunc_GetPlayerUniqueId_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText K2Node_Select_Default, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int K2Node_CustomEvent_Num, FText CallFunc_Conv_IntToText_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_Event_show, int K2Node_Event_num, FText CallFunc_Conv_IntToText_ReturnValue, bool K2Node_Event_lock, const int64[] K2Node_Event_skills, int64 K2Node_Event_buffID, float K2Node_Event_time, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Event_Type, float K2Node_Event_actiontime, enum K2Node_Event_Type, float K2Node_Event_actiontime, enum K2Node_Event_Type, float K2Node_Event_actiontime, int K2Node_Event_Level, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, float K2Node_Event_currentSP, float K2Node_Event_maxSP, float CallFunc_Divide_FloatFloat_ReturnValue, int K2Node_Event_num, float K2Node_Event_value, bool CallFunc_LessEqual_FloatFloat_ReturnValue, TeamPlayerInfoWidget_C* CallFunc_GetTeamInfo_Player, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_inside, bool CallFunc_IsVisible_ReturnValue, int K2Node_Event_id, bool K2Node_Event_add, bool CallFunc_Map_Remove_ReturnValue, EnemyMark_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, EnemyMark_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, int K2Node_Event_id, int K2Node_Event_Level, bool K2Node_Event_add, bool CallFunc_Map_Remove_ReturnValue, ItemMark_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, enum Temp_byte_Variable, ItemMark_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, bool Temp_bool_IsClosed_Variable, enum K2Node_Select_Default, bool K2Node_Event_bNewIsSpring, bool CallFunc_SetImageTexture_ReturnValue, int K2Node_Event_Level, int K2Node_Event_MaxDurable, float CallFunc_Conv_IntToFloat_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, int K2Node_Event_Durable, enum K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, enum K2Node_CustomEvent_State, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsVisible_ReturnValue, Widget* K2Node_Select_Default, bool CallFunc_IsVisible_ReturnValue, Widget* K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, enum Temp_byte_Variable, enum K2Node_Event_sbagtype, int K2Node_Event_Index, int K2Node_Event_num, enum K2Node_Event_tbagtype, bool K2Node_Event_isbreakbuttondown, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, enum Temp_byte_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, Texture2D* K2Node_Select_Default, enum CallFunc_GetGameModeType_GameMode, bool CallFunc_NotEqual_ByteByte_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetItemChildTypeById_ReturnValue, int K2Node_Select_Default, int K2Node_CustomEvent_id, int K2Node_CustomEvent_Type, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool Temp_bool_Variable, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, int CallFunc_GetCanUseWhetStoneItemId_WhetStoneItemId, enum Temp_byte_Variable, bool CallFunc_Greater_IntInt_ReturnValue, enum Temp_byte_Variable, enum CallFunc_GetItemBagTypeAndIndex_BagType, int CallFunc_GetItemBagTypeAndIndex_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int K2Node_Event_Level, int K2Node_Event_MaxDurable, float CallFunc_Conv_IntToFloat_ReturnValue, int K2Node_Event_Durable, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Event_percent, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, LinearColor K2Node_Select_Default, int K2Node_Event_signal, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool Temp_bool_Variable, FString K2Node_Event_TeammateName, FString K2Node_Event_OtherName, enum K2Node_Event_TeamMessageType, enum K2Node_Event_CauseDyingType, int K2Node_Event_CauseId, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Event_GlobalMessageType, FString K2Node_Event_Content, FText CallFunc_Conv_StringToText_ReturnValue, float K2Node_Event_WaitTime, bool K2Node_Event_bIsForceShow, bool Temp_bool_Variable, int K2Node_Event_PickedItemId, int K2Node_Event_LearnedItemId, enum K2Node_Event_TipMessageType, FString K2Node_Event_Content, FText CallFunc_Conv_StringToText_ReturnValue, FString K2Node_Event_PlayerIconPath, FString K2Node_Event_DeadName, FString K2Node_Event_DeadIconPath, FText CallFunc_Conv_StringToText_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, int CallFunc_GetCanUseHuJiaPianItemId_HuaJiaPianItemId, bool Temp_bool_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, enum CallFunc_GetItemBagTypeAndIndex_BagType, int CallFunc_GetItemBagTypeAndIndex_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, int CallFunc_GetCurrentWeaponMode_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, HorizontalBox* K2Node_Select_Default, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, enum Temp_byte_Variable, TextBlock* K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, WeaponFire_C* K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, enum CallFunc_GetGameModeType_GameMode, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Event_NewCrosshairType, int K2Node_Event_NewCrosshairNum, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, int K2Node_Event_NewRangeChargeNum, int K2Node_Event_NewMaxRangeChargeNum, const CrosshairLockedInfo[] K2Node_Event_NewCrosshairLockedInfos, const Vector[] K2Node_Event_NewProjectileLocations, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_LessEqual_IntInt_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, enum Temp_byte_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int Temp_int_Array_Index_Variable, TeamPlayerInfoWidget_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default, FString K2Node_Event_PlayerIconPath, FString K2Node_Event_KillerName, FString K2Node_Event_KillerIconPath, enum Temp_byte_Variable, FText CallFunc_Conv_StringToText_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_WuXiaX_PlayerController_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Player_Controller, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, UserWidgetBase* CallFunc_OpenUI_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_Title, const FString[] K2Node_Event_Items, bool K2Node_Event_bShowCloseButton, enum K2Node_Event_BindWidgetType, enum K2Node_Event_GuideWidgetType, bool K2Node_Event_bIsAutoHide, bool K2Node_Event_bIsForceGuide, bool K2Node_Event_bIsShowReturnBtn, PlayerController* CallFunc_GetPlayerController_ReturnValue, GuidePanelWidget_C* CallFunc_Create_ReturnValue, enum K2Node_Select_Default, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Event_BindWidgetType, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default, enum Temp_byte_Variable, bool CallFunc_FinishNode_ReturnValue, bool CallFunc_FinishNode_ReturnValue, bool CallFunc_FinishNode_ReturnValue, bool CallFunc_FinishNode_ReturnValue, enum CallFunc_GetGameModeType_GameMode, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, enum K2Node_Select_Default, enum CallFunc_GetGameModeType_GameMode, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, MaterialInstanceDynamic* CallFunc_InitCircleProgress_Material, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MaterialInstanceDynamic* CallFunc_InitCircleProgress_Material, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetArmorPercent_ArmorPercent, float CallFunc_Subtract_FloatFloat_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Has_Been_Initd_Variable, enum Temp_byte_Variable, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, Widget* CallFunc_GetActiveWidget_ReturnValue, Widget* CallFunc_GetActiveWidget_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, enum K2Node_Select_Default, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, enum K2Node_Select_Default, Object* K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CheckIgnoreZeroTimerMap_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, MaterialInstanceDynamic* CallFunc_InitCircleProgress_Material, bool Temp_bool_Variable, bool CallFunc_IsPlayerInSky_bInSky, bool CallFunc_IsPlayerDead_bDead, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsPlayerDead_bDead, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsPlayerDead_bDead, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetTickPriorityTime_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, enum K2Node_Select_Default, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetTickPriorityTime_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_IsClosed_Variable, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLastDodgeNeedEnoughMp_ReturnValue, enum Temp_byte_Variable, enum CallFunc_GetGameModeType_GameMode, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c2f74e60
	void TouchMovedEvent__DelegateSignature(Geometry MyGeometry, PointerEvent InTouchEvent);// 0x8a873f8 0x78c2f74f40
	void PlayerInitMiniMap__DelegateSignature(int Number, int PlayerID);// 0x8a873f8 0x78c2f75020
	void PlayerDropItem__DelegateSignature(enum bagtype, int index, int Number);// 0x8a873f8 0x78cac17400
	void PlayerSwapSkillToPanel__DelegateSignature(enum SSkillEquipType, int index, int ID, enum TSkillEquipType);// 0x8a873f8 0x78cac175c0
	void PlayerShowSkillDetail__DelegateSignature(enum Type, int index, int skillid);// 0x8a873f8 0x78c9a46600
	void PlayerRemoveSkill__DelegateSignature(enum Type, int index);// 0x8a873f8 0x78c7ee06a0
	void PlayerSwapSkill__DelegateSignature(enum SSkillEquipType, int SSkillIndex, int SSkillID, enum TSkillEquipType, int TSkillIndex, int TSkillID);// 0x8a873f8 0x78c2f75480
	void PlayerUseSkillBook__DelegateSignature(enum EBagType, int index);// 0x8a873f8 0x78c2f75100
	void PlayerSwapItemHotKeY__DelegateSignature(int SIndex, int TIndex);// 0x8a873f8 0x78c332b3e0
	void PlayerRemoveItemHotKey__DelegateSignature(int index);// 0x8a873f8 0x78c332c8e0
	void PlayerSetItemHotKey__DelegateSignature(enum bagtype, int index, int hotkeyindex);// 0x8a873f8 0x78c3329380
	void PlayerUseItem__DelegateSignature(enum sbagtype, int SIndex, int SNumber);// 0x8a873f8 0x78c378af80
	void PlayerSwapItemToSlot__DelegateSignature(enum sbagtype, int SIndex, int Number, enum tbagtype, int TIndex);// 0x8a873f8 0x78c2f75560
	void PlayerSwapItemToBag__DelegateSignature(enum sbagtype, int SIndex, int Number, enum tbagtype);// 0x8a873f8 0x78cac17780
	void PlayerAddItemByIndex__DelegateSignature(int index);// 0x8a873f8 0x78c2f751e0
	void CallOnDrag__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c2f752c0
	void CallShowDetail__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c37c9700

--------------------------------
Class: ActionWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b87c3580
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x78b87c3500
	Button* Button;//[Offset: 0x270, Size: 0x8] 0x78b87c3480
	Button* Button;//[Offset: 0x278, Size: 0x8] 0x78b87c3400
	Button* Button;//[Offset: 0x280, Size: 0x8] 0x78b87c3380
	Button* Button;//[Offset: 0x288, Size: 0x8] 0x78b87c3300
	Button* Button;//[Offset: 0x290, Size: 0x8] 0x78b87c3280
	Button* Button;//[Offset: 0x298, Size: 0x8] 0x78b87c3200
	Button* Button;//[Offset: 0x2a0, Size: 0x8] 0x78b87c5280
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x78b87c5200
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78b87c5180
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78b87c5100
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78b87c5080
	Image* Image;//[Offset: 0x2c8, Size: 0x8] 0x78b87c5000
	Image* Image;//[Offset: 0x2d0, Size: 0x8] 0x78b87c4f80
	Image* Image;//[Offset: 0x2d8, Size: 0x8] 0x78b87c4f00
	Image* Image;//[Offset: 0x2e0, Size: 0x8] 0x78b87c4e80
	Image* Image;//[Offset: 0x2e8, Size: 0x8] 0x78b87c4e00
	Image* Image;//[Offset: 0x2f0, Size: 0x8] 0x78b87c4d80
	Image* Image;//[Offset: 0x2f8, Size: 0x8] 0x78b87c4d00
	Image* Image;//[Offset: 0x300, Size: 0x8] 0x78b87c4c80
	Image* Image;//[Offset: 0x308, Size: 0x8] 0x78b87c4c00
	Image* Image;//[Offset: 0x310, Size: 0x8] 0x78b87c4b80
	Image* Image;//[Offset: 0x318, Size: 0x8] 0x78b87c4b00
	Image* Image;//[Offset: 0x320, Size: 0x8] 0x78b87c4a80
	Image* Image;//[Offset: 0x328, Size: 0x8] 0x78b87c4a00
	Image* Image;//[Offset: 0x330, Size: 0x8] 0x78b87c4980
	Image* Image;//[Offset: 0x338, Size: 0x8] 0x78b87c4900
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78b87c4880
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78b87c4800
	Image* Image;//[Offset: 0x350, Size: 0x8] 0x78b87c4780
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x358, Size: 0x8] 0x78b87c4700
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x360, Size: 0x8] 0x78b87c4680
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x368, Size: 0x8] 0x78b87c4600
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x370, Size: 0x8] 0x78b87c4580
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x378, Size: 0x8] 0x78b87c4500
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x380, Size: 0x8] 0x78b87c4480
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x388, Size: 0x8] 0x78b87c4400
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x390, Size: 0x8] 0x78b87c4380
	int Cur Tab;//[Offset: 0x398, Size: 0x4] 0x78b87c4300
	int[] IDs;//[Offset: 0x3a0, Size: 0x10] 0x78c3d20240
	int[] Action Ids;//[Offset: 0x3b0, Size: 0x10] 0x78c3d201a0
	int[] Expression Ids;//[Offset: 0x3c0, Size: 0x10] 0x78c3d20100
	CanvasPanel*[] items;//[Offset: 0x3d0, Size: 0x10] 0x78c3d20060
	delegate OnSelectItem;//[Offset: 0x3e0, Size: 0x10] 0x78b87c6180
	void Open(int[] NewLocalVar, int[] NewLocalVar, int[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array);// 0x8a873f8 0x78c3785e20
	void SelectItem(int ID, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int Temp_int_Variable, Image* K2Node_Select_Default, int[] K2Node_Select_Default, int CallFunc_Array_Get_Item);// 0x8a873f8 0x78c3785f00
	void SetInfo(out int[] ActionIds, out int[] ExpressionIds);// 0x8a873f8 0x78c3785fe0
	void UpdateItem(int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, enum K2Node_Select_Default, Image* K2Node_Select_Default, WidgetSwitcher* K2Node_Select_Default, int[] K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetShowInfoByTableId_Name, FString CallFunc_GetShowInfoByTableId_Icon, FString CallFunc_GetShowInfoByTableId_Desc, bool CallFunc_SetImageTexture_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c37860c0
	void SelectTab(int CurTab, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c37861a0
	void PreConstruct(bool IsDesignTime);// 0x8a873f8 0x78c3786280
	void Construct();// 0x8a873f8 0x78c3786360
	void BndEvt__Button_5_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3786440
	void BndEvt__Button_6_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3786520
	void BndEvt__Button_162_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3786600
	void BndEvt__Button_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c37866e0
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c37867c0
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c37868a0
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3786980
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3786a60
	void ExecuteUbergraph_ActionWidget(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x8a873f8 0x78c3786c20
	void OnSelectItem__DelegateSignature(int ID, int Type);// 0x8a873f8 0x78c3786de0

--------------------------------
Class: AgoraUI_C.GVoiceGameWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x368, Size: 0x8] 0x78c67b9e00
	Button* Button;//[Offset: 0x370, Size: 0x8] 0x78c67b9e80
	Image* Image;//[Offset: 0x378, Size: 0x8] 0x78c67b9f00
	Image* Image;//[Offset: 0x380, Size: 0x8] 0x78c67b9f80
	Image* Image;//[Offset: 0x388, Size: 0x8] 0x78c67ba000
	CanvasPanel* mic_select;//[Offset: 0x390, Size: 0x8] 0x78c67ba080
	HorizontalBox* Miclist;//[Offset: 0x398, Size: 0x8] 0x78c67ba100
	CanvasPanel* micpanel;//[Offset: 0x3a0, Size: 0x8] 0x78c67ba180
	Button* Microphone;//[Offset: 0x3a8, Size: 0x8] 0x78c67ba200
	WidgetSwitcher* micswithcer;//[Offset: 0x3b0, Size: 0x8] 0x78c67ba280
	TextBlock* MicTxt;//[Offset: 0x3b8, Size: 0x8] 0x78c67ba300
	Button* mstop;//[Offset: 0x3c0, Size: 0x8] 0x78c67ba380
	Button* mteam;//[Offset: 0x3c8, Size: 0x8] 0x78c67ba400
	Button* mworld;//[Offset: 0x3d0, Size: 0x8] 0x78c67ba480
	Button* reportvoicebtn;//[Offset: 0x3d8, Size: 0x8] 0x78c67ba500
	Button* Speaker;//[Offset: 0x3e0, Size: 0x8] 0x78c67b8480
	CanvasPanel* speaker_select;//[Offset: 0x3e8, Size: 0x8] 0x78c67b8500
	HorizontalBox* Speakerlist;//[Offset: 0x3f0, Size: 0x8] 0x78c67b8580
	CanvasPanel* speakerpanel;//[Offset: 0x3f8, Size: 0x8] 0x78c67b8600
	TextBlock* SpeakerTxt;//[Offset: 0x400, Size: 0x8] 0x78c67b8680
	WidgetSwitcher* speakswitch;//[Offset: 0x408, Size: 0x8] 0x78c67b8700
	Button* sstop;//[Offset: 0x410, Size: 0x8] 0x78c67b8780
	Button* STEAM;//[Offset: 0x418, Size: 0x8] 0x78c67b8800
	Button* sworld;//[Offset: 0x420, Size: 0x8] 0x78c67b8880
	VerticalBox* Team;//[Offset: 0x428, Size: 0x8] 0x78c67b8900
	ScrollBox* teamscroll;//[Offset: 0x430, Size: 0x8] 0x78c67b8980
	ButtonStyle MicStyle;//[Offset: 0x438, Size: 0x278] 0x78c67b8a00
	ButtonStyle SpeakerStyle;//[Offset: 0x6b0, Size: 0x278] 0x78c67b8a80
	ButtonStyle NoMic;//[Offset: 0x928, Size: 0x278] 0x78c67b8b00
	ButtonStyle NoSpeaker;//[Offset: 0xba0, Size: 0x278] 0x78c67b8b80
	int micMode;//[Offset: 0xe18, Size: 0x4] 0x78c67b8c00
	int speakerMode;//[Offset: 0xe1c, Size: 0x4] 0x78c67b8c80
	<int,int> TeamMap;//[Offset: 0xe20, Size: 0x50] 0x78c6814900
	TimerHandle Handle;//[Offset: 0xe70, Size: 0x8] 0x78c67b8e00
	float CurrentTime;//[Offset: 0xe78, Size: 0x4] 0x78c67b8e80
	delegate HideOthenPanel;//[Offset: 0xe80, Size: 0x10] 0x78c67b8f00
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 0x1] 0x78c67b8f80
	bool K2Node_SwitchInteger_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe91, Size: 0x1] 0x78c67b9000
	int K2Node_CustomEvent_uid;//[Offset: 0xe94, Size: 0x4] 0x78c67b9080
	int K2Node_CustomEvent_idx;//[Offset: 0xe98, Size: 0x4] 0x78c67b9100
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0xe9c, Size: 0x10] 0x78c67b9180
	bool K2Node_SwitchInteger_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeac, Size: 0x1] 0x78c67b9200
	WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance;//[Offset: 0xeb0, Size: 0x8] 0x78c67b9280
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 0x1] 0x78c67b9300
	int K2Node_Event_code;//[Offset: 0xebc, Size: 0x4] 0x78c67b9380
	FString K2Node_Event_roomName;//[Offset: 0xec0, Size: 0x10] 0x78c67b9400
	int K2Node_Event_memberID;//[Offset: 0xed0, Size: 0x4] 0x78c67b9480
	NetMessageHandle* K2Node_DynamicCast_AsNet_Message_Handle;//[Offset: 0xed8, Size: 0x8] 0x78c67b7400
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 0x1] 0x78c67b7480
	int K2Node_Event_code;//[Offset: 0xee4, Size: 0x4] 0x78c67b7500
	FString K2Node_Event_roomName;//[Offset: 0xee8, Size: 0x10] 0x78c67b7580
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 0x1] 0x78c67b7600
	FString K2Node_Event_roomName;//[Offset: 0xf00, Size: 0x10] 0x78c67b7680
	int K2Node_Event_member;//[Offset: 0xf10, Size: 0x4] 0x78c67b7700
	int K2Node_Event_status;//[Offset: 0xf14, Size: 0x4] 0x78c67b7780
	bool CallFunc_CheckStandShow_show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf18, Size: 0x1] 0x78c67b7800
	void HideOthenPanel__DelegateSignature();// 0x8a873f8 0x78c5e47e80
	void VoiceReady();// 0x740ec8c 0x78c5e4a7a0
	void ToggleTeamer(bool bpp__open__pf);// 0x740edfc 0x78c5e4adc0
	void ToggleSpeakMicStyle(int bpp__Type__pf, bool bpp__bspeaker__pf);// 0x740ecfc 0x78c5e4a880
	void TickToJoinRoom(float bpp__DeltaTime__pf);// 0x740ebdc 0x78c5e4a960
	void ResetTimer();// 0x740f0e0 0x78c5e4ab20
	void HideAllPanel();// 0x740eb04 0x78c5e491c0
	void CreateTeamers();// 0x740ece0 0x78c5e4c9c0
	void CreateTeamAgora(int bpp__uid__pf, int bpp__idx__pf);// 0x740efb0 0x78c5e492a0
	void Construct();// 0x740eeb4 0x78c8a1f200
	void CheckStandShow(out bool bpp__show__pf);// 0x740eb20 0x78c5e49380
	void ChangeSpeakerType();// 0x740eca8 0x78c5e49620
	void ChangeMicType();// 0x740ecc4 0x78c5e49ee0
	void BP_OnQuitRoom(int bpp__code__pf, FString bpp__roomName__pf__const);// 0x740f26c 0x78c5e4c3a0
	void BP_OnMemberVoice_status(FString bpp__roomName__pf__const, int bpp__member__pf, int bpp__status__pf);// 0x740f374 0x78c5e497e0
	void BP_OnJoinRoom(int bpp__code__pf, FString bpp__roomName__pf__const, int bpp__memberID__pf);// 0x740f118 0x78c5e4c480
	void BndEvt__Speaker_K2Node_ComponentBoundEvent_0_OnButtonReleasedEvent__DelegateSignature();// 0x740ef24 0x78c5e4bf40
	void BndEvt__reportvoicebtn_K2Node_ComponentBoundEvent_4_OnButtonReleasedEvent__DelegateSignature();// 0x740f0fc 0x78c5e4caa0
	void BndEvt__Microphone_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x740ef40 0x78c8a1d0c0
	void BndEvt__Button_84_K2Node_ComponentBoundEvent_7_OnButtonReleasedEvent__DelegateSignature();// 0x740ef94 0x78c5e4c020
	void BndEvt__Button_83_K2Node_ComponentBoundEvent_6_OnButtonReleasedEvent__DelegateSignature();// 0x740ef78 0x78c5e4d360
	void BndEvt__Button_82_K2Node_ComponentBoundEvent_5_OnButtonReleasedEvent__DelegateSignature();// 0x740ef5c 0x78c5e4b5a0
	void BndEvt__Button_81_K2Node_ComponentBoundEvent_4_OnButtonReleasedEvent__DelegateSignature();// 0x740ef08 0x78c5e4cd40
	void BndEvt__Button_80_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x740eeec 0x78c5e4cf00
	void BndEvt__Button_79_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x740eed0 0x78c5e4d0c0
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x740f0c4 0x78c5e4b760
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x740f0a8 0x78c7617400

--------------------------------
Class: CrosshairWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c9680
	WidgetAnimation* BowIdleAnimation;//[Offset: 0x268, Size: 0x8] 0x78c55c9600
	WidgetAnimation* CannonIdleAnimation;//[Offset: 0x270, Size: 0x8] 0x78c55c9580
	WidgetAnimation* BolaIdleAnimation;//[Offset: 0x278, Size: 0x8] 0x78c55c9500
	WidgetAnimation* MusketShootAnimation;//[Offset: 0x280, Size: 0x8] 0x78c55cb580
	WidgetAnimation* CrossBowShootAnimation;//[Offset: 0x288, Size: 0x8] 0x78c55cb500
	WidgetAnimation* BowShootAnimation;//[Offset: 0x290, Size: 0x8] 0x78c55cb480
	WidgetAnimation* HitAnimation;//[Offset: 0x298, Size: 0x8] 0x78c55cb400
	Overlay* BolaCrosshair;//[Offset: 0x2a0, Size: 0x8] 0x78c55cb380
	WrapBox* BowCrosshairImage;//[Offset: 0x2a8, Size: 0x8] 0x78c55cb300
	Image* CannonCrosshairAround;//[Offset: 0x2b0, Size: 0x8] 0x78c55cb280
	Image* CannonCrosshairCenter;//[Offset: 0x2b8, Size: 0x8] 0x78c55cb200
	Image* CannonCrosshairCharge;//[Offset: 0x2c0, Size: 0x8] 0x78c55cb180
	UniformGridPanel* CrossBowCrosshair;//[Offset: 0x2c8, Size: 0x8] 0x78c55cb100
	WidgetSwitcher* CrosshairSwitcher;//[Offset: 0x2d0, Size: 0x8] 0x78c55cb080
	WrapBox* DartCrosshair;//[Offset: 0x2d8, Size: 0x8] 0x78c55cb000
	Image* DartCrosshairCenter;//[Offset: 0x2e0, Size: 0x8] 0x78c55caf80
	Image* LockImage;//[Offset: 0x2e8, Size: 0x8] 0x78c55caf00
	UniformGridPanel* MusketCrosshairImage;//[Offset: 0x2f0, Size: 0x8] 0x78c55cae80
	enum CrosshairType;//[Offset: 0x2f8, Size: 0x1] 0x78c3d2c180
	WidgetAnimation* PlayingIdleAnimation;//[Offset: 0x300, Size: 0x8] 0x78c55cad80
	WidgetAnimation* PlayingShootAnimation;//[Offset: 0x308, Size: 0x8] 0x78c55cad00
	LinearColor LockedColor;//[Offset: 0x310, Size: 0x10] 0x78c55cac80
	Projectile_C* Projectile;//[Offset: 0x320, Size: 0x8] 0x78c55cac00
	void PlayShootAnimation(WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum Temp_byte_Variable, WidgetAnimation* K2Node_Select_Default, bool CallFunc_IsAnimationPlaying_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c36be320
	void PlayIdleAnimation(int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, enum Temp_byte_Variable, WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, WidgetAnimation* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue, WidgetAnimation* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c36be400
	void hittarget(bool K2Node_SwitchEnum_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c36be4e0
	void SetCannonChargePercent(float NewPercent, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x8a873f8 0x78c36be5c0
	void SetChargeNum(int NewChargeNum, int NewMaxChargeNum, bool Temp_bool_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float Temp_float_Variable, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default);// 0x8a873f8 0x78c36be6a0
	void SetDartLockedInfos(out CrosshairLockedInfo[] NewLockedInfos, int DartCrosshairNum, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, CrosshairLockedInfo CallFunc_Array_Get_Item, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue);// 0x8a873f8 0x78c36badc0
	void SetProjectileLocations(out Vector[] NewProjectileLocations, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c36baea0
	void SetLockedInfosAndProjectileLocations(out CrosshairLockedInfo[] NewLockedInfos, out Vector[] NewProjectileLocations, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector[] Temp_struct_Variable, bool Temp_bool_Variable, Vector[] K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue);// 0x8a873f8 0x78c36baf80
	void SetType(enum NewCrosshairType, int NewCrosshairNum, int DartCrosshairNum, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, Image* CallFunc_SpawnObject_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c36bb060
	void SetColorInner(Widget* Widget, LinearColor Color, int Temp_int_Array_Index_Variable, PanelWidget* K2Node_DynamicCast_AsPanel_Widget, bool K2Node_DynamicCast_bSuccess, Widget*[] CallFunc_GetAllChildren_ReturnValue, Image* K2Node_DynamicCast_AsImage, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c36bb140
	void SetColor(LinearColor NewColor, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c36bb220
	void LoadConfigColor(GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, LinearColor[] CallFunc_GetConcentrateColors_ReturnValue, int CallFunc_GetUserSetting_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c36bb300
	void GetPos(out Vector2D pos, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_PositionByAnchor_PixelPosition, Vector2D CallFunc_PositionByAnchor_ViewportPosition);// 0x8a873f8 0x78c36bb3e0
	void DestructProjectile(bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c36bb4c0
	void ConstructProjectile(Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Projectile_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x8a873f8 0x78c36bb5a0
	void Construct();// 0x8a873f8 0x78c36bb680
	void Destruct();// 0x8a873f8 0x78c36bb840
	void ExecuteUbergraph_CrosshairWidget(int EntryPoint);// 0x8a873f8 0x78c36bba00

--------------------------------
Class: Projectile_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78b8923d80
	SplineComponent* Spline;//[Offset: 0x228, Size: 0x8] 0x78b8923d00
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8] 0x78b8923c80
	LinearColor Color;//[Offset: 0x238, Size: 0x10] 0x78b8923c00
	MaterialInstanceDynamic* SplineMaterial;//[Offset: 0x248, Size: 0x8] 0x78b8923b80
	MaterialInstanceDynamic* SphereMaterial;//[Offset: 0x250, Size: 0x8] 0x78b8923b00
	Vector[] ProjectileLocations;//[Offset: 0x258, Size: 0x10] 0x78bd4261e0
	Vector[] ProjectileStartLocation;//[Offset: 0x268, Size: 0x10] 0x78bd426140
	Vector[] ProjectileLocalLocations;//[Offset: 0x278, Size: 0x10] 0x78bd4260a0
	SplineMeshComponent*[] SplineMeshs;//[Offset: 0x288, Size: 0x10] 0x78bd426000
	StaticMeshComponent* SphereMesh;//[Offset: 0x298, Size: 0x8] 0x78b8923880
	void CreateSphereMesh(out StaticMeshComponent* SphereMesh, const Transform Temp_struct_Variable, StaticMeshComponent* CallFunc_AddComponent_ReturnValue);// 0x8a873f8 0x78c3b51e40
	void CreateSplineMesh(out SplineMeshComponent* SplineMesh, const Transform Temp_struct_Variable, SplineMeshComponent* CallFunc_AddComponent_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x8a873f8 0x78c3b51f20
	void VectorArrayCompare(out Vector[] VectorArrayA, out Vector[] VectorArrayB, out bool IsEqual, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c3b52000
	void SetColorInner(LinearColor NewColor, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3b520e0
	void SetColor(LinearColor NewColor);// 0x8a873f8 0x78c3b521c0
	void ClearMeshes(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SplineMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, SplineMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c3b522a0
	void UpdateMeshes(SplineMeshComponent* SplineMesh, SplineMeshComponent*[] TempSplineMeshes, int SplineMaxIndex, int CurrentSplineMeshMaxIndex, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, StaticMeshComponent* CallFunc_CreateSphereMesh_SphereMesh, int Temp_int_Variable, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SplineMeshComponent* CallFunc_CreateSplineMesh_SplineMesh, SplineMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, SplineMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Location, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Tangent, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Location, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Tangent, int CallFunc_GetNumberOfSplinePoints_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x8a873f8 0x78c3b52380
	void SetProjectileLocations(out Vector[] NewProjectileLocations, Vector[] NewProjectileLocalLocations, Vector NewProjectileStartLocation, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_VectorArrayCompare_IsEqual, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_VectorArrayCompare_IsEqual, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x8a873f8 0x78c3b52460
	void ReceiveBeginPlay();// 0x8a873f8 0x78c3b52540
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c3b52700
	void ExecuteUbergraph_Projectile(int EntryPoint, float K2Node_Event_DeltaSeconds, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, SplineMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, SplineMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x8a873f8 0x78c3b528c0

--------------------------------
Class: BloodWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55cab00
	Image* Lv1_Blood;//[Offset: 0x268, Size: 0x8] 0x78c55caa80
	Image* Lv1_Blood;//[Offset: 0x270, Size: 0x8] 0x78c55caa00
	Image* Lv1_Blood;//[Offset: 0x278, Size: 0x8] 0x78c55ca980
	Image* Lv2_Blood;//[Offset: 0x280, Size: 0x8] 0x78c55ca900
	Image* Lv2_Blood;//[Offset: 0x288, Size: 0x8] 0x78c55ca880
	Image* Lv2_Blood;//[Offset: 0x290, Size: 0x8] 0x78c55ca800
	Image* Lv3_Blood;//[Offset: 0x298, Size: 0x8] 0x78c55ca780
	Image* Lv3_Blood;//[Offset: 0x2a0, Size: 0x8] 0x78c55ca700
	Image* Lv3_Blood;//[Offset: 0x2a8, Size: 0x8] 0x78c55ca680
	float damage;//[Offset: 0x2b0, Size: 0x4] 0x78c55ca600
	bool BloodShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1] 0x78c55ca580
	float AnimationTime;//[Offset: 0x2b8, Size: 0x4] 0x78c55cc600
	float BloodShowingTime;//[Offset: 0x2bc, Size: 0x4] 0x78c55cc580
	float BloodRemoveTime;//[Offset: 0x2c0, Size: 0x4] 0x78c55cc500
	float RemoveBeginA;//[Offset: 0x2c4, Size: 0x4] 0x78c55cc480
	bool Removing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78c55cc400
	Image*[] Lv1Images;//[Offset: 0x2d0, Size: 0x10] 0x78c3d2c0e0
	Image*[] Lv2Images;//[Offset: 0x2e0, Size: 0x10] 0x78c3d2c040
	Image*[] Lv3Images;//[Offset: 0x2f0, Size: 0x10] 0x78c3d2bfa0
	Image*[] ShowingLv1Images;//[Offset: 0x300, Size: 0x10] 0x78c3d2bf00
	Image*[] ShowingLv2Images;//[Offset: 0x310, Size: 0x10] 0x78c3d2be60
	Image*[] ShowingLv3Images;//[Offset: 0x320, Size: 0x10] 0x78c3d2bdc0
	void TickEvent(float DeltaTime, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3787320
	void RemoveLastBlood(int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, Image* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, Image* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, Image* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c3783a40
	void SetLastBloodA(float A, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, Image* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, Image* CallFunc_Array_Get_Item, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, Image* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c3783b20
	void UpdateBloodColors(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Image* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, Image* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Image* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c3783c00
	void AddLv3Blood(Image* Image, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Image* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x8a873f8 0x78c3783ce0
	void AddLv2Blood(Image* Image, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Image* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x8a873f8 0x78c3783dc0
	void AddLv1Blood(int[] RandomIndexs, Image* Image, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Image* CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c3783ea0
	void ClearBlood();// 0x8a873f8 0x78c3783f80
	void AddBloodByDamage(float damage, int DamageLv, Image* Image, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x8a873f8 0x78c3784060
	void Construct();// 0x8a873f8 0x78c3784140
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3784300
	void ExecuteUbergraph_BloodWidget(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Image*[] K2Node_MakeArray_Array, Image*[] K2Node_MakeArray_Array, Image*[] K2Node_MakeArray_Array);// 0x8a873f8 0x78c37844c0

--------------------------------
Class: BP_Sign_Main_C.SignMainUI.UserWidget.Widget.Visual.Object
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x2f0, Size: 0x8] 0x78bdc59d80
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x2f8, Size: 0x8] 0x78bdc59d00
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x300, Size: 0x8] 0x78bdc59c80
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x308, Size: 0x8] 0x78bdc59c00
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x310, Size: 0x8] 0x78bdc59b80
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x318, Size: 0x8] 0x78bdc59b00
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x320, Size: 0x8] 0x78bdc59a80
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x328, Size: 0x8] 0x78bdc59a00
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x330, Size: 0x8] 0x78bdc59980
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x338, Size: 0x8] 0x78bdc59900
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x340, Size: 0x8] 0x78bdc59880
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x348, Size: 0x8] 0x78bdc59800
	BP_Sign_Point_C* BP_Sing_Point;//[Offset: 0x350, Size: 0x8] 0x78bdc59780

--------------------------------
Class: BP_Sign_Point_C.SignPointUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8] 0x78c45e9e80
	CanvasPanel* CanvasPanel_left;//[Offset: 0x278, Size: 0x8] 0x78c45e9e00
	Image* Image_center;//[Offset: 0x280, Size: 0x8] 0x78c45e9d80
	Image* Image_Item;//[Offset: 0x288, Size: 0x8] 0x78c45e9d00
	Image* Image_left;//[Offset: 0x290, Size: 0x8] 0x78c45e9c80
	TextBlock* TextBlock;//[Offset: 0x298, Size: 0x8] 0x78c45e9c00
	Object* Resource Object;//[Offset: 0x2a0, Size: 0x8] 0x78c45e9b80
	void SetItemColor(int Quality, SlateColor K2Node_MakeStruct_SlateColor, bool K2Node_SwitchInteger_CmpSuccess, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x8a873f8 0x78c3b50e80
	void SetChildType(enum NewParam, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3b50f60
	void Event_SetExternalImage(int PlayerIndex, bool useCenter);// 0x8a873f8 0x78c3b51040
	void Event_SetInsideImage(int PlayerIndex, enum mainType, enum childType, int Quality);// 0x8a873f8 0x78c3b51200
	void Event_SetExternalImageRotator(int val);// 0x8a873f8 0x78c3b513c0
	void ExecuteUbergraph_BP_Sign_Point(int EntryPoint, int K2Node_Event_val, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, int K2Node_Event_playerIndex, bool K2Node_Event_useCenter, int K2Node_Event_playerIndex, enum K2Node_Event_mainType, enum K2Node_Event_childType, int K2Node_Event_quality, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3b514a0

--------------------------------
Class: BuffBarWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c927c380
	HorizontalBox* BuffPanel;//[Offset: 0x268, Size: 0x8] 0x78bc680a80
	int[] buffID;//[Offset: 0x270, Size: 0x10] 0x78bc9ea7e0
	BuffWidget_C*[] Buff;//[Offset: 0x280, Size: 0x10] 0x78bc9ea740
	float[] BuffTime;//[Offset: 0x290, Size: 0x10] 0x78bc9ea6a0
	float LowTime;//[Offset: 0x2a0, Size: 0x4] 0x78bc680880
	void ClearBuffs(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BuffWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_RemoveChild_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78cac1a960
	void EventTick(float Time, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BuffWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x8a873f8 0x78c332a260
	void UpdateBuff(int buffID, int numberoflayer, float Time, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BuffWidget_C* CallFunc_Array_Get_Item);// 0x8a873f8 0x78cac1a180
	void RemoveBuff(int buffID, int index, bool CallFunc_NotEqual_IntInt_ReturnValue, BuffWidget_C* CallFunc_Array_Get_Item, bool CallFunc_RemoveChild_ReturnValue, int CallFunc_Array_Find_ReturnValue);// 0x8a873f8 0x78c332a340
	void AddBuff(int buffID, int numberoflayer, float Time, PaperSprite* BuffIcon, float maxCD, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, BuffWidget_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Add_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78cac1a260
	void SetBuff(int buffID, int numberoflayer, float Time, PaperSprite* BuffIcon, float maxCD, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c332ace0
	void UpdateCDBuff(int buffID, float curcd);// 0x8a873f8 0x78c33275c0
	void ExecuteUbergraph_BuffBarWidget(int EntryPoint, int K2Node_CustomEvent_buffid, float K2Node_CustomEvent_curcd, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, BuffWidget_C* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c36bd360

--------------------------------
Class: BuffWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c45eae00
	WidgetAnimation* LowTimeAnimation;//[Offset: 0x268, Size: 0x8] 0x78c45ead80
	Image* BuffIcon;//[Offset: 0x270, Size: 0x8] 0x78c45ead00
	Image* CDImg;//[Offset: 0x278, Size: 0x8] 0x78c45eac80
	Image* ImageBg;//[Offset: 0x280, Size: 0x8] 0x78c45eac00
	TextBlock* Layer;//[Offset: 0x288, Size: 0x8] 0x78c45eab80
	bool IsForeverBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78c45eab00
	MaterialInstanceDynamic* CDMat;//[Offset: 0x298, Size: 0x8] 0x78c45eaa80
	float maxCD;//[Offset: 0x2a0, Size: 0x4] 0x78c45eaa00
	float curcd;//[Offset: 0x2a4, Size: 0x4] 0x78c45ea980
	void SetLayer(int Layer, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c3b504e0
	void SetLowTimeAnimation(bool Start, LinearColor CallFunc_MakeColor_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c3b505c0
	void SetBuff(PaperSprite* BuffIcon);// 0x8a873f8 0x78c3b506a0
	void Construct();// 0x8a873f8 0x78c3b50780
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3b50860
	void SetCDBuff(float cd);// 0x8a873f8 0x78c3b50a20
	void UpdateCurCD(float cd);// 0x8a873f8 0x78c3b50be0
	void ExecuteUbergraph_BuffWidget(int EntryPoint, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float K2Node_CustomEvent_cd, float K2Node_CustomEvent_cd, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3b50cc0

--------------------------------
Class: CompassWidget_C.UserWidget.Widget.Visual.Object
	Image* BackgroundImage;//[Offset: 0x260, Size: 0x8] 0x78c4ad2280
	HorizontalBox* CompassPanel;//[Offset: 0x268, Size: 0x8] 0x78c4ad2300
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78c4ad2380
	CanvasPanel* MarksPanel;//[Offset: 0x278, Size: 0x8] 0x78c4ad2400
	MapPointBaseUI*[] Marks;//[Offset: 0x280, Size: 0x10] 0x78b9b079a0
	FText[] DirectionText;//[Offset: 0x290, Size: 0x10] 0x78b9b07a40
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x2a0, Size: 0x38] 0x78c4ad2580
	float K2Node_Event_InDeltaTime;//[Offset: 0x2d8, Size: 0x4] 0x78c4ad2600
	int K2Node_CustomEvent_playerId;//[Offset: 0x2dc, Size: 0x4] 0x78c4ad2680
	int K2Node_CustomEvent_Num;//[Offset: 0x2e0, Size: 0x4] 0x78c4ad2700
	MapPointBaseUI* CallFunc_HasNumMark_Array_Element;//[Offset: 0x2e8, Size: 0x8] 0x78c4ad2780
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0x2f0, Size: 0x10] 0x78c4ad2800
	int Temp_int_Variable;//[Offset: 0x300, Size: 0x4] 0x78c4ad2880
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0x308, Size: 0x8] 0x78c4ad2900
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0x310, Size: 0x8] 0x78c4ad2980
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x7417600 0x78c508aa40
	void ShowMark(Vector bpp__location__pf, MapPointBaseUI* bpp__MarkImage__pf);// 0x74171a4 0x78c8e9f3c0
	void SetMarkLocation(int bpp__num__pf, Vector bpp__location__pf);// 0x7417350 0x78c50876a0
	void SetDirection(float bpp__Angle__pf);// 0x7417448 0x78c8e9d280
	void InitMark(int bpp__PlayerId__pf, int bpp__num__pf);// 0x7417718 0x78c508a260
	void HasNumMark(int bpp__Number__pf, out MapPointBaseUI* bpp__ArrayxElement__pfT);// 0x741709c 0x78c508a7a0
	void GetOffsetByAngle(float bpp__Angle__pf, out float bpp__OffsetX__pf);// 0x74174f8 0x78c508a180
	void DeleteMark(int bpp__num__pf);// 0x74172a0 0x78c508a0a0

--------------------------------
Class: ItemHotPanel_C.UserWidget.Widget.Visual.Object
	Image* arrow_icon;//[Offset: 0x260, Size: 0x8] 0x78c4ad3080
	SizeBox* expand;//[Offset: 0x268, Size: 0x8] 0x78c4ad3100
	Button* ItemArrow;//[Offset: 0x270, Size: 0x8] 0x78c4ad3180
	UniformGridPanel* ItemGridPanel;//[Offset: 0x278, Size: 0x8] 0x78c4ad1100
	Button* ItemHot;//[Offset: 0x280, Size: 0x8] 0x78c4ad1180
	ItemHotWidget_C* ItemHotUse;//[Offset: 0x288, Size: 0x8] 0x78c4ad1200
	ScrollBox* ItemScrollBox;//[Offset: 0x290, Size: 0x8] 0x78c4ad1280
	bool isexpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78c4ad1300
	ItemHotWidget_C* TempItemHotUse;//[Offset: 0x2a0, Size: 0x8] 0x78c4ad1380
	MainGameUI* MainUI;//[Offset: 0x2a8, Size: 0x8] 0x78c4ad1400
	UI_MobileBag* BagUI;//[Offset: 0x2b0, Size: 0x8] 0x78c4ad1480
	enum LastItemType;//[Offset: 0x2b8, Size: 0x1] 0x78b9b07ae0
	enum NewItemType;//[Offset: 0x2b9, Size: 0x1] 0x78b9b07b80
	WuXiaXGameInstance* GameInstance;//[Offset: 0x2c0, Size: 0x8] 0x78c4ad1600
	ComponentMiddle* MiddileComponent;//[Offset: 0x2c8, Size: 0x8] 0x78c4ad1680
	int NewItemId;//[Offset: 0x2d0, Size: 0x4] 0x78c4ad1700
	enum NewBagType;//[Offset: 0x2d4, Size: 0x1] 0x78b9b07c20
	int NewBageIndex;//[Offset: 0x2d8, Size: 0x4] 0x78c4ad1800
	bool IsNumLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78c4ad1880
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1] 0x78c4ad1900
	WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD;//[Offset: 0x2e0, Size: 0x8] 0x78c4ad1980
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x78c4ad1a00
	UI_MobileBag* K2Node_DynamicCast_AsMobile_Bag;//[Offset: 0x2f0, Size: 0x8] 0x78c4ad1a80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x78c4ad1b00
	ItemHotWidget_C* K2Node_DynamicCast_AsItem_Hot_Widget;//[Offset: 0x300, Size: 0x8] 0x78c4ad1b80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x78c4ad1c00
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1] 0x78c4ad1c80
	enum CallFunc_GetItemBagTypeAndIndex_BagType;//[Offset: 0x30a, Size: 0x1] 0x78b9b07cc0
	int CallFunc_GetItemBagTypeAndIndex_ReturnValue;//[Offset: 0x30c, Size: 0x4] 0x78c4ad1d80
	ItemHotWidget_C* K2Node_CustomEvent_Item;//[Offset: 0x310, Size: 0x8] 0x78c4ad1e00
	WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD;//[Offset: 0x318, Size: 0x8] 0x78c4ad1e80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1] 0x78c4ad1f00
	WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance;//[Offset: 0x328, Size: 0x8] 0x78c4ad1f80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x78c4ad2000
	UI_MobileBag* K2Node_DynamicCast_AsMobile_Bag;//[Offset: 0x338, Size: 0x8] 0x78c4ad2080
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x78c4ad2100
	enum CallFunc_GetItemBagTypeAndIndex_BagType;//[Offset: 0x341, Size: 0x1] 0x78b9b07d60
	int CallFunc_GetItemNum_ItemNum;//[Offset: 0x344, Size: 0x4] 0x78c4ad0100
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x78c4ad0180
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1] 0x78c4ad0200
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 0x1] 0x78c4ad0280
	Widget* K2Node_Select_Default;//[Offset: 0x350, Size: 0x8] 0x78c4ad0300
	GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue;//[Offset: 0x358, Size: 0x4c] 0x78c4ad0380
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x3a4, Size: 0x10] 0x78c4ad0400
	GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue;//[Offset: 0x3b4, Size: 0x4c] 0x78c4ad0480
	float Temp_float_Variable;//[Offset: 0x400, Size: 0x4] 0x78c4ad0500
	float Temp_float_Variable;//[Offset: 0x404, Size: 0x4] 0x78c4ad0580
	bool K2Node_SwitchInteger_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1] 0x78c4ad0600
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1] 0x78c4ad0680
	float K2Node_Select_Default;//[Offset: 0x40c, Size: 0x4] 0x78c4ad0700
	enum Temp_byte_Variable;//[Offset: 0x410, Size: 0x1] 0x78b9b07e00
	enum Temp_byte_Variable;//[Offset: 0x411, Size: 0x1] 0x78b9b07ea0
	enum K2Node_Select_Default;//[Offset: 0x412, Size: 0x1] 0x78b9b07f40
	void SortGridSlot();// 0x7428604 0x78c5087940
	void Set Hot Use(ItemHotWidget_C* bpp__Item__pf);// 0x7428af4 0x78c5089ee0
	void SetItemHotUse(int bpp__NewItemId__pf, Image* bpp__NewIcon__pf, enum bpp__NewBagType__pf, int bpp__NewBagIndex__pf);// 0x7428470 0x78c50874e0
	void SetItem(int bpp__Index__pf, int bpp__Number__pf, enum bpp__BagType__pf);// 0x74288b4 0x78c5089e00
	void SetIsRangeHot();// 0x7428ad8 0x78c8e9d0c0
	void ReSetHotUse();// 0x7428ba4 0x78c50899a0
	void RemoveItem();// 0x7428744 0x78c8e9dfa0
	void ItemExchangeDeal();// 0x7428aa0 0x78c50898c0
	void GetItemNum(int bpp__ItemId__pf, out int bpp__ItemNum__pf);// 0x742863c 0x78c9a40f60
	void GetItemm(int bpp__Index__pf, enum bpp__BagType__pf, out ItemHotWidget_C* bpp__Item__pf);// 0x7428760 0x78c50897e0
	void FirstDrugUse();// 0x7428abc 0x78c8e9e6a0
	void ExpandArrow();// 0x7428a84 0x78c5089700
	void Construct();// 0x74289f8 0x78c5089620
	void ClearAllHotItems();// 0x7428620 0x78c5089540
	void BndEvt__ItemHot_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x7428a68 0x78c5089460
	void BndEvt__ItemHot_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x7428a4c 0x78c508c9c0
	void BndEvt__ItemArrow_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x7428a30 0x78c508caa0
	void BndEvt__ItemArrow_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x7428a14 0x78c8e9e4e0

--------------------------------
Class: ItemHotWidget_C.UserWidget.Widget.Visual.Object
	Image* icon;//[Offset: 0x260, Size: 0x8] 0x78c5b4f800
	TextBlock* LeftNum;//[Offset: 0x268, Size: 0x8] 0x78c5b4f880
	WidgetSwitcher* NumWidgetSwitcher;//[Offset: 0x270, Size: 0x8] 0x78c5b4f900
	TextBlock* RightNum;//[Offset: 0x278, Size: 0x8] 0x78c5b4f980
	Image* split_line;//[Offset: 0x280, Size: 0x8] 0x78c5b4fa00
	int ItemId;//[Offset: 0x288, Size: 0x4] 0x78c5b4fa80
	int ItemNum;//[Offset: 0x28c, Size: 0x4] 0x78c5b4fb00
	TouchEvent TouchEvent;//[Offset: 0x290, Size: 0xa8] 0x78c5b4fb80
	ItemHotPanel_C* ItemPanel;//[Offset: 0x338, Size: 0x8] 0x78c5b4fc00
	enum bagtype;//[Offset: 0x340, Size: 0x1] 0x78b9b08260
	bool israngehot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x78c5b4fd00
	int BagIndex;//[Offset: 0x344, Size: 0x4] 0x78c5b4fd80
	bool IsNumLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x78c5b4fe00
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1] 0x78c5b4fe80
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x350, Size: 0x70] 0x78c5b4ff00
	Widget* K2Node_Select_Default;//[Offset: 0x3c0, Size: 0x8] 0x78c5b4ff80
	void SetItemold(ItemHotPanel_C* bpp__Panel__pf, int bpp__Index__pf, int bpp__num__pf, enum bpp__BagType__pf);// 0x742a3c0 0x78c508c640
	void SetItemNum(int bpp__NewItemNum__pf);// 0x7429c74 0x78c8e9e5c0
	void SetItemIcon(Image* bpp__Icon__pf);// 0x7429d24 0x78c508c800
	EventReply OnTouchStarted(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x742a1d0 0x78ca9930a0
	EventReply OnTouchMoved(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x7429fe0 0x78c39af660
	void OnTouchLeave();// 0x7429dd4 0x78c39acfe0
	EventReply OnTouchEnded(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x7429df0 0x78ca992fc0
	void OnMouseLeave(out const PointerEvent bpp__MouseEvent__pf__const);// 0x742a56c 0x78c39acf00
	void ItemHotKeyDeal();// 0x742a6d0 0x78c39ace20
	void Construct();// 0x742a550 0x78ca9905c0

--------------------------------
Class: DrugPanelWidget_C.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x330, Size: 0x8] 0x78c1223880
	UniformGridPanel* DrugGridPanel;//[Offset: 0x338, Size: 0x8] 0x78c1223800
	ScrollBox* DrugScrollBox;//[Offset: 0x340, Size: 0x8] 0x78c1223780
	int DrugHotUseId;//[Offset: 0x348, Size: 0x4] 0x78c1223700
	bool IsDrugScrolled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1] 0x78c1223680
	void ClearAllItems();// 0x8a873f8 0x78c37cbbc0
	void DrugScrolled(float Offset);// 0x8a873f8 0x78c37cbca0
	void GetDrugNum(int ItemId, out int ItemNum, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component, int CallFunc_GetItemNumById_ReturnValue);// 0x8a873f8 0x78c37cbd80
	void GetDrugItem(int index, out DrugItemWidget_C* DrugItem, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component, int Temp_int_Variable, GameItemInfo CallFunc_GetItemInfo_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, DrugItemWidget_C* K2Node_DynamicCast_AsDrug_Item_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c37cbe60
	void UseHotDrug(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MobileBag_C* K2Node_DynamicCast_AsMobile_Bag, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetItemIndex_ReturnValue);// 0x8a873f8 0x78c37cbf40
	void SetDrugHotUse(DrugItemWidget_C* DrugItem);// 0x8a873f8 0x78c37cc020
	void SortDrugItem(DrugItemWidget_C* LastSortItem, int LastSortIndex, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, int CallFunc_GetDrugNum_ItemNum, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetChildrenCount_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, DrugItemWidget_C* K2Node_DynamicCast_AsDrug_Item_Widget, bool K2Node_DynamicCast_bSuccess, float CallFunc_FMax_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, int CallFunc_GetDrugSortIndex_ReturnValue, UniformGridSlot* CallFunc_SlotAsUniformGridSlot_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c37cc100
	void RemoveItem(int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, DrugItemWidget_C* K2Node_DynamicCast_AsDrug_Item_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_GetDrugNum_ItemNum, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_HasAnyChildren_ReturnValue);// 0x8a873f8 0x78c37cc1e0
	void SetItem(int index, int Number, PaperSprite* icon, DrugItemWidget_C* CallFunc_GetDrugItem_DrugItem, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetDrugNum_ItemNum, DrugItemWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, UniformGridSlot* K2Node_DynamicCast_AsUniform_Grid_Slot, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c37cc2c0
	void Construct();// 0x8a873f8 0x78c37cc3a0
	void OnWidgetVisibilityChanged();// 0x8a873f8 0x78c37cc560
	void ExecuteUbergraph_DrugPanelWidget(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsVisible_ReturnValue);// 0x8a873f8 0x78c9cf2a80

--------------------------------
Class: DrugItemWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c67b9b80
	Image* icon;//[Offset: 0x268, Size: 0x8] 0x78c67b9b00
	TextBlock* Num;//[Offset: 0x270, Size: 0x8] 0x78c67b9a80
	int ItemId;//[Offset: 0x278, Size: 0x4] 0x78c67b9a00
	TouchEvent TouchEvent;//[Offset: 0x280, Size: 0xa8] 0x78c67b9980
	void OnTouchLeave(bool CallFunc_TouchEnded_ReturnValue);// 0x8a873f8 0x78c6334680
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_TouchEnded_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MobileBag_C* K2Node_DynamicCast_AsMobile_Bag, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetItemIndex_ReturnValue);// 0x8a873f8 0x78c6334760
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78c6334840
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c6334920
	void SetItemNum(int Num, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c6334a00
	void SetItem(int index, int Num, PaperSprite* icon, Character* CallFunc_GetPlayerCharacter_ReturnValue, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue);// 0x8a873f8 0x78c6334ae0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c6334ca0
	void ExecuteUbergraph_DrugItemWidget(int EntryPoint, const PointerEvent K2Node_Event_MouseEvent);// 0x8a873f8 0x78c6334e60

--------------------------------
Class: MobileBag_C.UI_MobileBag.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 0x8] 0x78b8d55500
	EquipSlotWidget_C* armorslot;//[Offset: 0x400, Size: 0x8] 0x78b8d55480
	UniformGridPanel* BagGridPanel;//[Offset: 0x408, Size: 0x8] 0x78b8d55400
	ScrollBox* BagItemPanel;//[Offset: 0x410, Size: 0x8] 0x78b8d55380
	EquipSlotWidget_C* bagslot;//[Offset: 0x418, Size: 0x8] 0x78b8d55300
	VerticalBox* BagSortList;//[Offset: 0x420, Size: 0x8] 0x78b8d57380
	Button* Btn_Drop;//[Offset: 0x428, Size: 0x8] 0x78b8d57300
	Button* Btn_Use;//[Offset: 0x430, Size: 0x8] 0x78b8d57280
	Button* BtnClose;//[Offset: 0x438, Size: 0x8] 0x78b8d57200
	Button* Button;//[Offset: 0x440, Size: 0x8] 0x78b8d57180
	Button* Button;//[Offset: 0x448, Size: 0x8] 0x78b8d57100
	Button* Button;//[Offset: 0x450, Size: 0x8] 0x78b8d57080
	Button* Button;//[Offset: 0x458, Size: 0x8] 0x78b8d57000
	Button* Button;//[Offset: 0x460, Size: 0x8] 0x78b8d56f80
	Button* Button;//[Offset: 0x468, Size: 0x8] 0x78b8d56f00
	Button* Button;//[Offset: 0x470, Size: 0x8] 0x78b8d56e80
	Button* Button;//[Offset: 0x478, Size: 0x8] 0x78b8d56e00
	Button* Button;//[Offset: 0x480, Size: 0x8] 0x78b8d56d80
	Button* Button;//[Offset: 0x488, Size: 0x8] 0x78b8d56d00
	Button* Button;//[Offset: 0x490, Size: 0x8] 0x78b8d56c80
	Image* Color;//[Offset: 0x498, Size: 0x8] 0x78b8d56c00
	Image* Color;//[Offset: 0x4a0, Size: 0x8] 0x78b8d56b80
	DropRegion_C* DropRegion;//[Offset: 0x4a8, Size: 0x8] 0x78b8d56b00
	DropRegion_C* DropRegion;//[Offset: 0x4b0, Size: 0x8] 0x78b8d56a80
	GridPanel* EquipPanel;//[Offset: 0x4b8, Size: 0x8] 0x78b8d56a00
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4c0, Size: 0x8] 0x78b8d56980
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4c8, Size: 0x8] 0x78b8d56900
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4d0, Size: 0x8] 0x78b8d56880
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4d8, Size: 0x8] 0x78b8d56800
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4e0, Size: 0x8] 0x78b8d56780
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4e8, Size: 0x8] 0x78b8d56700
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4f0, Size: 0x8] 0x78b8d56680
	EquipSlotWidget_C* EquipSlotWidget;//[Offset: 0x4f8, Size: 0x8] 0x78b8d56600
	EquipSlotWidget_C* headslot;//[Offset: 0x500, Size: 0x8] 0x78b8d56580
	Image* Image;//[Offset: 0x508, Size: 0x8] 0x78b8d56500
	Image* Image;//[Offset: 0x510, Size: 0x8] 0x78b8d56480
	Image* Image;//[Offset: 0x518, Size: 0x8] 0x78b8d56400
	Image* Image;//[Offset: 0x520, Size: 0x8] 0x78b8d56380
	Image* Image;//[Offset: 0x528, Size: 0x8] 0x78b8d58400
	Image* Image;//[Offset: 0x530, Size: 0x8] 0x78b8d58380
	Image* Image;//[Offset: 0x538, Size: 0x8] 0x78b8d58300
	Image* Image;//[Offset: 0x540, Size: 0x8] 0x78b8d58280
	Image* Image;//[Offset: 0x548, Size: 0x8] 0x78b8d58200
	Image* Image;//[Offset: 0x550, Size: 0x8] 0x78b8d58180
	Image* Image;//[Offset: 0x558, Size: 0x8] 0x78b8d58100
	Image* Image;//[Offset: 0x560, Size: 0x8] 0x78b8d58080
	Image* Image;//[Offset: 0x568, Size: 0x8] 0x78b8d58000
	TextBlock* ItemDesc;//[Offset: 0x570, Size: 0x8] 0x78b8d57f80
	VerticalBox* iteminfo;//[Offset: 0x578, Size: 0x8] 0x78b8d57f00
	TextBlock* ItemName;//[Offset: 0x580, Size: 0x8] 0x78b8d57e80
	WeaponSlotWidget_C* knifeslot;//[Offset: 0x588, Size: 0x8] 0x78b8d57e00
	EquipSlotWidget_C* paraslot;//[Offset: 0x590, Size: 0x8] 0x78b8d57d80
	CanvasPanel* PartThrowPanel;//[Offset: 0x598, Size: 0x8] 0x78b8d57d00
	ProgressBar* pro;//[Offset: 0x5a0, Size: 0x8] 0x78b8d57c80
	WeaponSlotWidget_C* rangeslot;//[Offset: 0x5a8, Size: 0x8] 0x78b8d57c00
	UniformGridPanel* SafeGridPanel;//[Offset: 0x5b0, Size: 0x8] 0x78b8d57b80
	SafeItemSlotWidget_C* SafeItemSlot1;//[Offset: 0x5b8, Size: 0x8] 0x78b8d57b00
	SafeItemSlotWidget_C* SafeItemSlot2;//[Offset: 0x5c0, Size: 0x8] 0x78b8d57a80
	SafeItemSlotWidget_C* SafeItemSlot3;//[Offset: 0x5c8, Size: 0x8] 0x78b8d57a00
	SafeItemSlotWidget_C* SafeItemSlot4;//[Offset: 0x5d0, Size: 0x8] 0x78b8d57980
	SizeBox* SizeBox;//[Offset: 0x5d8, Size: 0x8] 0x78b8d57900
	Slider* Slider;//[Offset: 0x5e0, Size: 0x8] 0x78b8d57880
	TextBlock* TextBlock;//[Offset: 0x5e8, Size: 0x8] 0x78b8d57800
	TextBlock* TextBlock;//[Offset: 0x5f0, Size: 0x8] 0x78b8d57780
	TextBlock* TextBlock;//[Offset: 0x5f8, Size: 0x8] 0x78b8d57700
	TextBlock* TextBlock;//[Offset: 0x600, Size: 0x8] 0x78b8d57680
	TextBlock* TextBlock;//[Offset: 0x608, Size: 0x8] 0x78b8d57600
	TextBlock* TextBlock;//[Offset: 0x610, Size: 0x8] 0x78b8d57580
	TextBlock* TextBlock;//[Offset: 0x618, Size: 0x8] 0x78b8d57500
	TextBlock* TextBlock;//[Offset: 0x620, Size: 0x8] 0x78b8d57480
	TextBlock* TextBlock;//[Offset: 0x628, Size: 0x8] 0x78b8d57400
	WeaponSlotWidget_C* throwslot;//[Offset: 0x630, Size: 0x8] 0x78b8d59480
	VerticalBox* UseTipPanel;//[Offset: 0x638, Size: 0x8] 0x78b8d59400
	WeaponSlotWidget_C* weapon1slot;//[Offset: 0x640, Size: 0x8] 0x78b8d59380
	WeaponSlotWidget_C* weapon2slot;//[Offset: 0x648, Size: 0x8] 0x78b8d59300
	WeaponDetailWidget_C* WeaponDetailWidget;//[Offset: 0x650, Size: 0x8] 0x78b8d59280
	WeaponDetailWidget_C* WeaponDetailWidget;//[Offset: 0x658, Size: 0x8] 0x78b8d59200
	TextBlock* WeightText;//[Offset: 0x660, Size: 0x8] 0x78b8d59180
	InventorySlotWidget_C*[] UI_WeaponWidget_Array;//[Offset: 0x668, Size: 0x10] 0x78c6044840
	InventorySlotWidget_C*[] UI_EquipmentWidget_Array;//[Offset: 0x678, Size: 0x10] 0x78c60447a0
	InventorySlotWidget_C* SelectItem;//[Offset: 0x688, Size: 0x8] 0x78b8d59000
	int SelectSlotIndex;//[Offset: 0x690, Size: 0x4] 0x78b8d58f80
	InventorySlotWidget_C* TouchedItem;//[Offset: 0x698, Size: 0x8] 0x78b8d58f00
	float BagItemScrollOffset;//[Offset: 0x6a0, Size: 0x4] 0x78b8d58e80
	int thrownum;//[Offset: 0x6a4, Size: 0x4] 0x78b8d58e00
	void HideAllWeaponSlotHightLight();// 0x8a873f8 0x78c3661580
	void ShowWeaponSlotHightLight(enum bagtype, int BagIndex, WeaponSlotWidget_C* Temp_object_Variable, WeaponSlotWidget_C* Temp_object_Variable, WeaponSlotWidget_C* Temp_object_Variable, enum Temp_byte_Variable, Character* CallFunc_GetPlayerCharacter_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue, enum CallFunc_GetItemChildTypeById_ReturnValue, enum CallFunc_GetWeaponEquipTypeById_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, WeaponSlotWidget_C* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3661660
	void SetArmorCostDurablePer(float ArmorCostDurablePer);// 0x8a873f8 0x78c3661740
	void SetHeadCostDurablePer(float HeadCostDurablePer);// 0x8a873f8 0x78c3661820
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c3661900
	void ToggleBagIndex(int index, SlateColor textunsel, SlateColor textsel, ButtonStyle UnSelect, ButtonStyle Select, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c36619e0
	void RemoveMosaic(int index, int Temp_int_Variable, int CallFunc_Divide_IntInt_ReturnValue, WeaponDetailWidget_C* K2Node_Select_Default);// 0x8a873f8 0x78c3661ac0
	void UpdateMosaic(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon, Texture2D* local_dragicon, Texture2D* local_icon, int local_itemtype, int local_number, FString local_name, int local_level, int local_index, int Temp_int_Variable, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, WeaponDetailWidget_C* K2Node_Select_Default);// 0x8a873f8 0x78c3661ba0
	void Toggle Weapon Detail Vis(int weaponidx, bool Show, bool Temp_bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3661c80
	void GetSafeItemSlot(int index, out SafeItemSlotWidget_C* Slot, Widget* CallFunc_GetChildAt_ReturnValue, SafeItemSlotWidget_C* K2Node_DynamicCast_AsSafe_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1e780
	void AutoSelectNext(InventorySlotWidget_C* LastItem, int CallFunc_GetBagItemNum_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, UserWidget* CallFunc_GetBagItemSlot_ReturnValue, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3d1e860
	void GetSlotIndex(InventorySlotWidget_C* Slot, out int slotindex, int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, BagItemSlotWidget_C* K2Node_DynamicCast_AsBag_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3d1e940
	void SetItemInfo(FText Name, FString Desc);// 0x8a873f8 0x78c3d1ea20
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3d1eb00
	void RefreshAllBookState(int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, BagItemSlotWidget_C* K2Node_DynamicCast_AsBag_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3d1ebe0
	void GetSlotByTypeAndIndex(enum EBagType, int index, out InventorySlotWidget_C* Slot, int NewLocalVar, UserWidget* CallFunc_GetBagSlotNode_ReturnValue, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, WuXiaXHUD* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, PickItemSlotWidget_C* CallFunc_GetPickBagSlotNode_SoftNode);// 0x8a873f8 0x78c3d1ecc0
	void GetHUD(out WuXiaXHUD* HUD, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1eda0
	void RemoveBag(int index, UserWidget* CallFunc_RecyclingBagSlotNode_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1ee80
	void RemoveEquipment(int index);// 0x8a873f8 0x78c3d1ef60
	void RemoveWeapon(int index, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1f040
	void UpdateBag(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon, BagItemSlotWidget_C* local_current_slot, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, UserWidget* CallFunc_GetBagSlotNode_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, BagItemSlotWidget_C* K2Node_DynamicCast_AsBag_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, WuXiaXHUD* CallFunc_GetHUD_hud, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Skill_CanUseSkillBook_ReturnValue, enum CallFunc_GetItemChildTypeById_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3d1f120
	void UpdateEquipment(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon, int FinalLevel, FText CallFunc_Conv_StringToText_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, InventorySlotWidget_C* CallFunc_Array_Get_Item, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_ItemCtrl_GetItemShowLevel_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c3d1f200
	void UpdateWeapon(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon, Texture2D* local_dragicon, Texture2D* local_icon, int local_itemtype, int local_number, FString local_name, int local_level, int local_index, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_BooleanOR_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, InventorySlotWidget_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3d1f2e0
	void RefreshItem(enum bagtype, int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXHUD* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1f3c0
	void Construct();// 0x8a873f8 0x78c3d1f4a0
	void UseItem(enum bagtype, int index);// 0x8a873f8 0x78c3d1f580
	void BndEvt__Btn_Use_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1f660
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1f740
	void RemoveItem(enum bagtype, int index);// 0x8a873f8 0x78c3d1f820
	void SetWeight(FString maxweight, FString Weight);// 0x8a873f8 0x78c3d1f900
	void SetItem(enum bagtype, int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c3d1f9e0
	void UseBagSelectItem();// 0x8a873f8 0x78c3d1fac0
	void SetSelectItem(UserWidget* Item);// 0x8a873f8 0x78c3d1fc80
	void ShowItemDetail(out const UIItemInfo UIItemInfo);// 0x8a873f8 0x78c3d1fd60
	void BndEvt__BagItemPanel_K2Node_ComponentBoundEvent_3_OnUserScrolledEvent__DelegateSignature(float CurrentOffset);// 0x8a873f8 0x78c3d1fe40
	void SetDurableValue(enum bag_type, int index, int armor);// 0x8a873f8 0x78c3d1ff20
	void ClearInventory();// 0x8a873f8 0x78c3d1caa0
	void SetSafeItem(int index, int ItemId);// 0x8a873f8 0x78c3d1cb80
	void RemoveSafeItem(int index);// 0x8a873f8 0x78c3d1cc60
	void SetWeaponSkillsState(int index, out const bool[] weaponskills);// 0x8a873f8 0x78c3d1cd40
	void BndEvt__Button_235_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1ce20
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1cf00
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1cfe0
	void BndEvt__DropRegion_K2Node_ComponentBoundEvent_7_DropState__DelegateSignature(bool Enter);// 0x8a873f8 0x78c3d1d0c0
	void HighLightMosaic(int weaponidx, int accid);// 0x8a873f8 0x78c3d1d1a0
	void RevertMosaic(int weaponidx);// 0x8a873f8 0x78c3d1d280
	void OnWidgetVisibilityChanged();// 0x8a873f8 0x78c3d1d360
	void ShowUseTipPanel(Vector2D pos);// 0x8a873f8 0x78c3d1d440
	void BndEvt__Button_157_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1d520
	void BndEvt__Button_57_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1d600
	void BndEvt__Button_116_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1d6e0
	void UpdateSlider();// 0x8a873f8 0x78c3d1d7c0
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_13_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1d8a0
	void BndEvt__Button_5_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1d980
	void BndEvt__Slider_0_K2Node_ComponentBoundEvent_15_OnMouseCaptureEndEvent__DelegateSignature();// 0x8a873f8 0x78c3d1da60
	void BndEvt__Slider_0_K2Node_ComponentBoundEvent_16_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c3d1db40
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_17_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1dc20
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_18_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1dde0
	void CloseBag();// 0x8a873f8 0x78c3d1dfa0
	void ExecuteUbergraph_MobileBag(int EntryPoint, LinearColor Temp_struct_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, enum K2Node_CustomEvent_bagtype, int K2Node_CustomEvent_index, BagItemSlotWidget_C* K2Node_DynamicCast_AsBag_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, enum K2Node_Event_bagtype, int K2Node_Event_Index, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanOR_ReturnValue, InventorySlotWidget_C* CallFunc_GetSlotByTypeAndIndex_Slot, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, FString K2Node_Event_maxweight, FString K2Node_Event_weight, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, enum K2Node_Event_bagtype, int K2Node_Event_Index, int K2Node_Event_Level, FString K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText Temp_text_Variable, WuXiaXHUD* CallFunc_GetHUD_hud, InventorySlotWidget_C*[] K2Node_MakeArray_Array, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, EquipSlotWidget_C* K2Node_DynamicCast_AsEquip_Slot_Widget, bool K2Node_DynamicCast_bSuccess, WuXiaXHUD* CallFunc_GetHUD_hud, UserWidget* K2Node_Event_item, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetBagItemSlotIndex_ReturnValue, const UIItemInfo K2Node_Event_uiiteminfo, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_StringToText_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float K2Node_ComponentBoundEvent_CurrentOffset, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Event_bag_type, int K2Node_Event_Index, int K2Node_Event_armor, InventorySlotWidget_C* CallFunc_GetSlotByTypeAndIndex_Slot, WuXiaXHUD* CallFunc_GetHUD_hud, WeaponSlotWidget_C* K2Node_DynamicCast_AsWeapon_Slot_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, int K2Node_CustomEvent_index, int K2Node_CustomEvent_itemid, int K2Node_CustomEvent_index, SafeItemSlotWidget_C* CallFunc_GetSafeItemSlot_Slot, SafeItemSlotWidget_C* CallFunc_GetSafeItemSlot_Slot, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_Event_Index, const bool[] K2Node_Event_weaponskills, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess, PaperSprite* CallFunc_GetItemIconTexture_ReturnValue, FString CallFunc_GetItemInfoById_name, FString CallFunc_GetItemInfoById_detail, enum CallFunc_GetItemInfoById_sexType, int CallFunc_GetItemInfoById_level, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_ComponentBoundEvent_enter, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, WuXiaXHUD* CallFunc_GetHUD_hud, int K2Node_CustomEvent_weaponidx, int K2Node_CustomEvent_accid, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, int K2Node_CustomEvent_weaponidx, Character* CallFunc_GetPlayerCharacter_ReturnValue, Vector2D K2Node_CustomEvent_pos, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BagItemSlotWidget_C* K2Node_DynamicCast_AsBag_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_GetText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_Clamp_ReturnValue, float K2Node_ComponentBoundEvent_Value, WuXiaXHUD* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FFloor_ReturnValue, int CallFunc_FFloor_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_Skill_CanUseSkillBook_ReturnValue, enum CallFunc_GetItemChildTypeById_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, FText Temp_text_Variable, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, ItemHotWidget_C* CallFunc_GetItemm_Item, bool CallFunc_IsValid_ReturnValue, FText Temp_text_Variable, InventorySlotWidget_C*[] K2Node_MakeArray_Array, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, enum Temp_byte_Variable, FText K2Node_Select_Default, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, WeaponDetailWidget_C* K2Node_Select_Default, WeaponDetailWidget_C* K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, SlateColor K2Node_Select_Default, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, bool Temp_bool_Variable, PaperSprite* K2Node_Select_Default, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue, LinearColor Temp_struct_Variable, LinearColor K2Node_Select_Default);// 0x8a873f8 0x78c3d1e080

--------------------------------
Class: WeaponSlotWidget_C.InventorySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x448, Size: 0x8] 0x78c55c1780
	Image* BackgroundImage;//[Offset: 0x450, Size: 0x8] 0x78c55c1700
	Image* HighLightImage;//[Offset: 0x458, Size: 0x8] 0x78c55c1680
	Image* HoveredImage;//[Offset: 0x460, Size: 0x8] 0x78c55c1600
	Image* Image;//[Offset: 0x468, Size: 0x8] 0x78c55c1580
	Image* ItemImage;//[Offset: 0x470, Size: 0x8] 0x78c55c1500
	TextBlock* ItemNameText;//[Offset: 0x478, Size: 0x8] 0x78c55c1480
	Image* LevelImage;//[Offset: 0x480, Size: 0x8] 0x78c55c1400
	Image* namebg;//[Offset: 0x488, Size: 0x8] 0x78c55c1380
	ProgressBar* ProgressBar;//[Offset: 0x490, Size: 0x8] 0x78c55c1300
	ScaleBox* ScaleBox;//[Offset: 0x498, Size: 0x8] 0x78c55c1280
	FText DurabilityText;//[Offset: 0x4a0, Size: 0x18] 0x78c55c1200
	PaperSprite* DefaultIcon;//[Offset: 0x4b8, Size: 0x8] 0x78c55c1180
	FText defaulttext;//[Offset: 0x4c0, Size: 0x18] 0x78c55c1100
	float OffsetX;//[Offset: 0x4d8, Size: 0x4] 0x78c55c3180
	PaperSprite* titlebg;//[Offset: 0x4e0, Size: 0x8] 0x78c55c3100
	int Durable;//[Offset: 0x4e8, Size: 0x4] 0x78c55c3080
	void HideHighLight();// 0x8a873f8 0x78c36660c0
	void ShowHighLight();// 0x8a873f8 0x78c36661a0
	void GetMainUI(out MainGameWidget_C* Main, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3666280
	void RefreshAcc(MainGameWidget_C* CallFunc_GetMainUI_Main);// 0x8a873f8 0x78c3666360
	void GetMosaicIndexById(int ItemId, out int index, GameInstance* CallFunc_GetGameInstance_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetMosaicTypeByItemId_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3666440
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, PlayerController* CallFunc_GetPlayerController_ReturnValue, DragItem_C* K2Node_DynamicCast_AsDrag_Item, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, MainGameWidget_C* CallFunc_GetMainUI_Main, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_NotEqual_IntInt_ReturnValue, UIItemInfo CallFunc_GetSlotItemInfo_slotiteminfo, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_ItemCtrl_GetTargetAccIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c3666520
	void SetButtonDownState(bool IsButtonDown);// 0x8a873f8 0x78c366b920
	void SetItemLevel(int Level);// 0x8a873f8 0x78c366ba00
	void RemoveItem();// 0x8a873f8 0x78c366bae0
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c366bbc0
	void FinishDrag();// 0x8a873f8 0x78c3669e00
	void SetDurableValue(int Durable);// 0x8a873f8 0x78c366bca0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78c36666e0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78c36668a0
	void Construct();// 0x8a873f8 0x78c3669ee0
	void ExecuteUbergraph_WeaponSlotWidget(int EntryPoint, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsButtonDown, int K2Node_Event_Level, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, int K2Node_Event_ItemIndex, int K2Node_Event_Level, FText K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, SlateColor K2Node_MakeStruct_SlateColor, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, Vector2D CallFunc_MakeVector2D_ReturnValue, SoundBase* K2Node_Select_Default, int K2Node_Event_Durable, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, Geometry K2Node_Event_MyGeometry, PointerEvent K2Node_Event_PointerEvent, DragDropOperation* K2Node_Event_Operation, PointerEvent K2Node_Event_PointerEvent, DragDropOperation* K2Node_Event_Operation, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x8a873f8 0x78c3666980

--------------------------------
Class: InventorySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4739200
	bool IsDraging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78c4739180
	enum SlotBagType;//[Offset: 0x269, Size: 0x1] 0x78c6047680
	int itemindex;//[Offset: 0x26c, Size: 0x4] 0x78c4739080
	int itemnumber;//[Offset: 0x270, Size: 0x4] 0x78c4739000
	delegate BeDrop;//[Offset: 0x278, Size: 0x10] 0x78c4738f80
	PaperSprite* ItemIcon;//[Offset: 0x288, Size: 0x8] 0x78c4738f00
	delegate DoubleClick;//[Offset: 0x290, Size: 0x10] 0x78c4738e80
	delegate EnterSlot;//[Offset: 0x2a0, Size: 0x10] 0x78c4738e00
	delegate LeaveSlot;//[Offset: 0x2b0, Size: 0x10] 0x78c4738d80
	int itemtype;//[Offset: 0x2c0, Size: 0x4] 0x78c4738d00
	delegate SetDragItemState;//[Offset: 0x2c8, Size: 0x10] 0x78c4738c80
	delegate RightMouseButton;//[Offset: 0x2d8, Size: 0x10] 0x78c4738c00
	bool IsHovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x78c4738b80
	delegate SetHoverItem;//[Offset: 0x2f0, Size: 0x10] 0x78c4738b00
	delegate SetSelectItem;//[Offset: 0x300, Size: 0x10] 0x78c4738a80
	TouchEvent TouchEvent;//[Offset: 0x310, Size: 0xa8] 0x78c4738a00
	DragEvent DragEvent;//[Offset: 0x3b8, Size: 0x78] 0x78c4738980
	Image* Hovered;//[Offset: 0x430, Size: 0x8] 0x78c4738900
	bool CanDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1] 0x78c4738880
	float ScrollOffset;//[Offset: 0x43c, Size: 0x4] 0x78c4738800
	bool IsScrolled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1] 0x78c4738780
	void HasScrolled(out bool Result, ScrollBox* CallFunc_GetScrollBox_ScrollBox, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366c020
	void OnTouchLeaved(PointerEvent MouseEvent, bool CallFunc_TouchEnded_ReturnValue);// 0x8a873f8 0x78c366c100
	void GetScrollBox(out ScrollBox* ScrollBox, PanelWidget* CallFunc_GetParent_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue, ScrollBox* K2Node_DynamicCast_AsScroll_Box, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c366c1e0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation, DragItemWidget_C* CallFunc_Create_ReturnValue, DragItem_C* CallFunc_CreateDragDropOperation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_MakeLiteralByte_ReturnValue);// 0x8a873f8 0x78c366c2c0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_TouchEnded_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PickItemSlotWidget_C* K2Node_DynamicCast_AsPick_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_EqualEqual_ByteByte_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c366c3a0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78c366c480
	void DragReleased();// 0x8a873f8 0x78c366c560
	void DragStarted(bool CallFunc_HasScrolled_Result, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsDragDetect_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c366c640
	void DetectDrag(PointerEvent InPointerEvent, DragEvent K2Node_MakeStruct_DragEvent, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x8a873f8 0x78c366c720
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_IsSlotEnabled_Enabled, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c366c800
	void DragItem(enum sbagtype, int SIndex, int Number, enum tbagtype, int TIndex, bool isbreakbuttondown, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_Greater_IntInt_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, ItemHotWidget_C* CallFunc_GetItemm_Item, PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366c8e0
	void GetHUD(out BP_WuXiaX_Hud_C* HUD, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c366c9c0
	void SetDurableValue(int Durable);// 0x8a873f8 0x78c36690e0
	void SetButtonDownState(bool IsButtonDown);// 0x8a873f8 0x78c36691c0
	void SetItemLevel(int Level);// 0x8a873f8 0x78c36692a0
	void isbreakbuttondown(out bool isbreakbuttondown);// 0x8a873f8 0x78c3669380
	void RemoveItem();// 0x8a873f8 0x78c3669460
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c3669540
	void IsSlotEnabled(out bool Enabled, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c366a0a0
	void SetHoveredState(bool IsHovered, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, UserWidget* Temp_object_Variable, bool K2Node_SwitchEnum_CmpSuccess, UserWidget* K2Node_Select_Default, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366a180
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c366a260
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78c366a340
	void FinishDrag();// 0x8a873f8 0x78c366a420
	void Construct();// 0x8a873f8 0x78c366a500
	void DragDestroy();// 0x8a873f8 0x78c366a5e0
	void ExecuteUbergraph_InventorySlotWidget(int EntryPoint, const PointerEvent K2Node_Event_MouseEvent, const PointerEvent K2Node_Event_PointerEvent, DragDropOperation* K2Node_Event_Operation, bool CallFunc_IsSlotEnabled_Enabled, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, delegate K2Node_CreateDelegate_OutputDelegate, DragEvent K2Node_MakeStruct_DragEvent, DragEvent K2Node_MakeStruct_DragEvent);// 0x8a873f8 0x78c366a6c0
	void SetSelectItem__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c366a7a0
	void SetHoverItem__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c366a880
	void RightMouseButton__DelegateSignature(enum EBagType, int index, int Number);// 0x8a873f8 0x78c366a960
	void SetDragItemState__DelegateSignature(DragItem_C* DragItem);// 0x8a873f8 0x78c366aa40
	void LeaveSlot__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c366ab20
	void EnterSlot__DelegateSignature(enum bagtype, int index, bool EnterSlot);// 0x8a873f8 0x78c366ac00
	void DoubleClick__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c3667400
	void BeDrop__DelegateSignature(enum sbagtype, int SBagIndex, int Number, enum tbagtype, int TBagIndex, bool isbreakbuttondown);// 0x8a873f8 0x78c9a47be0

--------------------------------
Class: DragItem_C.DragDropOperation.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x88, Size: 0x8] 0x78bc681a00
	InventorySlotWidget_C* SourceWidget;//[Offset: 0x90, Size: 0x8] 0x78bc681980
	bool isbreakbuttondown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78bc681900
	delegate OnFinishDrag;//[Offset: 0xa0, Size: 0x10] 0x78bc681880
	void Init(InventorySlotWidget_C* Source);// 0x8a873f8 0x78c33292a0
	void FinishDrag(interface classNone K2Node_DynamicCast_AsDrag_Interface, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78cac17a20
	void DragCancelled(out const PointerEvent PointerEvent);// 0x8a873f8 0x78c3329ee0
	void Drop(out const PointerEvent PointerEvent);// 0x8a873f8 0x78cac1a880
	void ForceThrow(PointerEvent Pointer, bool Force);// 0x8a873f8 0x78c3329fc0
	void EnterDropRegion();// 0x8a873f8 0x78cac197e0
	void LeaveDropRegion();// 0x8a873f8 0x78c9a4f580
	void ExecuteUbergraph_DragItem(int EntryPoint, const PointerEvent K2Node_Event_PointerEvent, DragItemWidget_C* K2Node_DynamicCast_AsDrag_Item_Widget, bool K2Node_DynamicCast_bSuccess, DragItemWidget_C* K2Node_DynamicCast_AsDrag_Item_Widget, bool K2Node_DynamicCast_bSuccess, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool K2Node_SwitchEnum_CmpSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, const PointerEvent K2Node_Event_PointerEvent, const Geometry CallFunc_GetCachedGeometry_ReturnValue, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, PointerEvent K2Node_CustomEvent_pointer, bool K2Node_CustomEvent_force, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c33276a0
	void OnFinishDrag__DelegateSignature();// 0x8a873f8 0x78c36bce20

--------------------------------
Class: DragItemWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c477e980
	Image* Background;//[Offset: 0x268, Size: 0x8] 0x78c477e900
	Image* icon;//[Offset: 0x270, Size: 0x8] 0x78c477e880
	PaperSprite* ItemIcon;//[Offset: 0x278, Size: 0x8] 0x78c477e800
	delegate OnDestroy;//[Offset: 0x280, Size: 0x10] 0x78c477e780
	delegate OnDragDrop;//[Offset: 0x290, Size: 0x10] 0x78c477ff80
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply, EventReply CallFunc_ReleaseMouseCapture_ReturnValue);// 0x8a873f8 0x78c3bb51e0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78c3bb52c0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply, EventReply CallFunc_CaptureMouse_ReturnValue);// 0x8a873f8 0x78c3bb53a0
	void Construct();// 0x8a873f8 0x78c3bb5480
	void Destruct();// 0x8a873f8 0x78c3bb5560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3bb5640
	void EnterDropRegion();// 0x8a873f8 0x78c3bb1d60
	void LeaveDropRegion();// 0x8a873f8 0x78c3bb1e40
	void ExecuteUbergraph_DragItemWidget(int EntryPoint, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x8a873f8 0x78c3bb1f20
	void OnDragDrop__DelegateSignature();// 0x8a873f8 0x78c3bb20e0
	void OnDestroy__DelegateSignature();// 0x8a873f8 0x78c3bb22a0

--------------------------------
Class: BP_WuXiaX_Hud_C.WuXiaXHUD.WuXiaXHUDBase.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6e0, Size: 0x8] 0x78c6112700
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e8, Size: 0x8] 0x78c6112680
	float ForwardSpeed;//[Offset: 0x6f0, Size: 0x4] 0x78c6112600
	float RightSpeed;//[Offset: 0x6f4, Size: 0x4] 0x78c6112580
	Vector CurrentCircle;//[Offset: 0x6f8, Size: 0xc] 0x78c6112500
	float currentradius;//[Offset: 0x704, Size: 0x4] 0x78c6112480
	Vector NextCircle;//[Offset: 0x708, Size: 0xc] 0x78c6112400
	float nextradius;//[Offset: 0x714, Size: 0x4] 0x78c6112380
	Vector FinalCircle;//[Offset: 0x718, Size: 0xc] 0x78c6112300
	float FinalRadius;//[Offset: 0x724, Size: 0x4] 0x78c6112280
	bool IsDamageCircleVisibilty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1] 0x78c6112200
	bool IsDamageCircleShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 0x1] 0x78c6112180
	byte CurrentInteractiveState;//[Offset: 0x72a, Size: 0x1] 0x78c6114200
	KongJueGongGaoWidget_C* KongJueWidget;//[Offset: 0x730, Size: 0x8] 0x78c6114180
	Widget* curPopup;//[Offset: 0x738, Size: 0x8] 0x78c6114100
	SoundActor_C*[] TempSounds;//[Offset: 0x740, Size: 0x10] 0x78bc9eab00
	PVPWaitResurrectionWidget_C* WaitResurrectionWidget;//[Offset: 0x750, Size: 0x8] 0x78c6114000
	int GameMode;//[Offset: 0x758, Size: 0x4] 0x78c6113f80
	class GameDebugUI* SoftGameDebugUI;//[Offset: 0x760, Size: 0x28] 0x78bc9eaa60
	void GetGameModeType(out int Mode, GameModeBase* CallFunc_GetGameMode_ReturnValue, bool CallFunc_IsValid_ReturnValue, WuXiaXGameModeBase* K2Node_DynamicCast_AsWu_Xia_XGame_Mode_Base, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetGameMode_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3784a00
	void SetMiniMapInfo(GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3784ae0
	void GetBigMap(out UI_MapBase_C* BigMap, UI_MapBase_C* K2Node_DynamicCast_AsUI_Map_Base, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3784bc0
	void HideCurPopup(bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3784ca0
	void ShowPopup(FText str1, float ShowTime1, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, PopupStr_C* CallFunc_Create_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x8a873f8 0x78c3784d80
	void CanInteractive(byte Type, out bool ok, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c3784e60
	void SetInteractive(byte Type);// 0x8a873f8 0x78c3784f40
	void GetMiniMap(out UI_MiniMap_C* Map, UI_MapBase_C* CallFunc_GetBigMap_BigMap, bool CallFunc_IsValid_ReturnValue, UI_MapBase_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0x8a873f8 0x78c3785020
	void GetAssasinationKeyStr(out FString str);// 0x8a873f8 0x78c3785100
	void InitMainGameUI();// 0x8a873f8 0x78c37851e0
	void UnBindInventoryEvents(MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c37852c0
	void BindInventoryEvents(BP_WuXiaX_Character_C* player_, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c37853a0
	void OnLoaded_6762066148803061B01EC992CA9DABF5(class Object Loaded);// 0x8a873f8 0x78c3785480
	void IsKongJueWidgetValid();// 0x8a873f8 0x78c3785560
	void ShowJueKongUI(int maxnumber);// 0x8a873f8 0x78c3785640
	void SetJueKongWaitTime(int WaitTime);// 0x8a873f8 0x78c3781d60
	void SetJueKongCanWinNumber(int Number);// 0x8a873f8 0x78c3781e40
	void HideJueKongUI();// 0x8a873f8 0x78c3781f20
	void ShowJueKongInMap(Vector Location);// 0x8a873f8 0x78c3782000
	void PlayerTaoLiSuccess(FString PlayerName);// 0x8a873f8 0x78c37820e0
	void ChangeFollowPlayerId(int PlayerID, int followid);// 0x8a873f8 0x78c37821c0
	void CreateDebugGameUI();// 0x8a873f8 0x78c37822a0
	void ShowCheckSoundLocation(out const int[] IDs, out const Vector[] locations);// 0x8a873f8 0x78c3782380
	void ShowMapWidget();// 0x8a873f8 0x78c3782460
	void HideMapWidget();// 0x8a873f8 0x78c3782540
	void TemporaryHideSetting();// 0x8a873f8 0x78c3782620
	void Mobile_Temporary_HaveBook(enum bagtype, int index);// 0x8a873f8 0x78c3782700
	void Mobile_Temporary_NoBook();// 0x8a873f8 0x78c37827e0
	void Mobile_Temporary_HaveDrug();// 0x8a873f8 0x78c37828c0
	void Mobile_Temporary_NoDrug();// 0x8a873f8 0x78c37829a0
	void ShowSettingWidget();// 0x8a873f8 0x78c3782a80
	void HideSettingWidget();// 0x8a873f8 0x78c3780da0
	void ShowSkillsWidget();// 0x8a873f8 0x78c3782b60
	void HideSkillsWidget();// 0x8a873f8 0x78c3782c40
	void ShowInventoryWidget();// 0x8a873f8 0x78c3782d20
	void HideInventoryWidget();// 0x8a873f8 0x78c3782e00
	void ReceiveBeginPlay();// 0x8a873f8 0x78c3782ee0
	void RemoveUILock();// 0x8a873f8 0x78c3782fc0
	void SetForwarSpeed(float Value);// 0x8a873f8 0x78c37830a0
	void SetRightSpeed(float Value);// 0x8a873f8 0x78c3783180
	void AddBloodByDamage(float damage);// 0x8a873f8 0x78c3783260
	void ClearBlood();// 0x8a873f8 0x78c3783340
	void BindItemUIEvent(PlayerItemCtrlComponent* itemctrl);// 0x8a873f8 0x78c3783420
	void UnBindItemUIEvent();// 0x8a873f8 0x78c3783500
	void ChangePlayerGameUIState(enum newstate);// 0x8a873f8 0x78c37835e0
	void ShowMainInterfaceUI();// 0x8a873f8 0x78c37836c0
	void HideMainInterfaceUI();// 0x8a873f8 0x78c37837a0
	void PickUpSuccess();// 0x8a873f8 0x78c3783880
	void AssassnationChange(FString str);// 0x8a873f8 0x78c3783960
	void SwitchCurrentToMap();// 0x8a873f8 0x78c3780080
	void SwitchMapToBack();// 0x8a873f8 0x78c3780160
	void SwitchWidget();// 0x8a873f8 0x78c3780240
	void LeftButtonRelease();// 0x8a873f8 0x78c3780320
	void Verticle(bool State, bool IsDown);// 0x8a873f8 0x78c3780400
	void WaitForPickUp();// 0x8a873f8 0x78c37804e0
	void CannotAutoPick(int Type);// 0x8a873f8 0x78c37805c0
	void CreateMainGameUI();// 0x8a873f8 0x78c37806a0
	void BPResetLanguageInfo();// 0x8a873f8 0x78c3780780
	void ParachuteCannotUnEquip();// 0x8a873f8 0x78c3780860
	void ParachuteDamaged();// 0x8a873f8 0x78c3780940
	void UpdatePlayerMoveState(enum State, bool Value);// 0x8a873f8 0x78c3780a20
	void ResetPlayerMoveState();// 0x8a873f8 0x78c3780b00
	void UpdatePlayerMovementMode(byte Mode);// 0x8a873f8 0x78c3780be0
	void CheckNeedGuide();// 0x8a873f8 0x78c3780cc0
	void OnUserSettingChanged(enum Type, int Value);// 0x8a873f8 0x78c3780e80
	void AutoPickUpdate();// 0x8a873f8 0x78c3780f60
	void ShowWaitResurrection(float Time);// 0x8a873f8 0x78c3781040
	void HideWaitResurrection();// 0x8a873f8 0x78c3781120
	void UpdateTeamPlayerMarkPoint(int PlayerID, enum Type, Vector Location);// 0x8a873f8 0x78c3781200
	void UpdateTeamPlayerMarkPointFlag(int PlayerID, int markplayerid, bool flag);// 0x8a873f8 0x78c37812e0
	void UpdatePlayerJailState(enum State, float continus);// 0x8a873f8 0x78c37813c0
	void NotifyJailClosed();// 0x8a873f8 0x78c37814a0
	void NotifyAltarOpened();// 0x8a873f8 0x78c3781580
	void NotifyJailQueueNum(int Num, int queuenum);// 0x8a873f8 0x78c3781660
	void JailQueueRebirth();// 0x8a873f8 0x78c3781740
	void UpdateMiniMapInfo();// 0x8a873f8 0x78c3781820
	void RemoveAllGameWidgets();// 0x8a873f8 0x78c3781900
	void ShowWinButton();// 0x8a873f8 0x78c37819e0
	void KeyCannotDrop();// 0x8a873f8 0x78c3781ac0
	void CloseMap();// 0x8a873f8 0x78c3781ba0
	void ShowMap(bool Show);// 0x8a873f8 0x78c3781c80
	void PlayWeapon();// 0x8a873f8 0x78c36be780
	void PlayBook();// 0x8a873f8 0x78c36be860
	void PlayEquip();// 0x8a873f8 0x78c36be940
	void PlayProp();// 0x8a873f8 0x78c36bea20
	void BP_SetFinalCircle(Vector Location, float Radius);// 0x8a873f8 0x78c36beb00
	void BP_SetShakingCircle(Vector Location, float Radius);// 0x8a873f8 0x78c36bebe0
	void BP_HideDamageCircle();// 0x8a873f8 0x78c36becc0
	void BP_ShowDamageCircle();// 0x8a873f8 0x78c36beda0
	void BP_SetNextCircle(Vector Location, float Radius);// 0x8a873f8 0x78c36bef60
	void BP_SetCurrentCircle(Vector Location, float Radius);// 0x8a873f8 0x78c36bf4a0
	void ExecuteUbergraph_BP_WuXiaX_Hud(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, UI_MapBase_C* CallFunc_GetBigMap_BigMap, FString K2Node_Event_playername, FString CallFunc_Concat_StrStr_ReturnValue, int K2Node_Event_playerid, int K2Node_Event_followid, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, UI_MapBase_C* CallFunc_GetBigMap_BigMap, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, UI_MiniMap_C* CallFunc_GetMiniMap_Map, const int[] K2Node_Event_Ids, const Vector[] K2Node_Event_locations, int CallFunc_Array_Length_ReturnValue, MainGameUI* CallFunc_GetMainGameWidget_ReturnValue, SoundActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, SoundActor_C* CallFunc_Array_Get_Item, SoundActor_C* CallFunc_Array_Get_Item, SoundActor_C* CallFunc_Array_Get_Item, UI_MapBase_C* CallFunc_GetBigMap_BigMap, UI_MapBase_C* CallFunc_GetBigMap_BigMap, bool CallFunc_IsValid_ReturnValue, Anchors K2Node_MakeStruct_Anchors, Margin K2Node_MakeStruct_Margin, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_bagtype, int K2Node_Event_Index, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float K2Node_CustomEvent_Value, float K2Node_CustomEvent_Value, float K2Node_Event_Damage, PVPWaitResurrectionWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerItemCtrlComponent* K2Node_Event_itemctrl, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Vector K2Node_Event_location, int K2Node_Event_number, int K2Node_Event_WaitTime, int K2Node_Event_maxnumber, bool CallFunc_IsValid_ReturnValue, enum K2Node_Event_newstate, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString K2Node_CustomEvent_Str, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, int Temp_int_Array_Index_Variable, SoundActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_CustomEvent_State, bool K2Node_CustomEvent_IsDown, int Temp_int_Array_Index_Variable, UI_MiniMap_C* CallFunc_GetMiniMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_Event_Type, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_state, bool K2Node_Event_value, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, byte K2Node_Event_mode, OBTargetViewUI* CallFunc_GetOBTargetViewUI_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, OBMapUI* CallFunc_GetOBMapUI_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_WuXiaX_PlayerController_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Player_Controller, bool K2Node_DynamicCast_bSuccess, UI_MapBase_C* K2Node_DynamicCast_AsUI_Map_Base, bool K2Node_DynamicCast_bSuccess, UI_MiniMap_C* K2Node_DynamicCast_AsUI_Mini_Map, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsGuideRunning_ReturnValue, bool CallFunc_IsGameMode_ReturnValue, bool CallFunc_IsGameMode_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Event_Type, int K2Node_Event_value, float CallFunc_Conv_IntToFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, Vector CallFunc_Array_Get_Item, Widget* CallFunc_GetActiveWidget_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, SoundActor_C* CallFunc_FinishSpawningActor_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, SoundActor_C* CallFunc_FinishSpawningActor_ReturnValue, SoundActor_C* CallFunc_FinishSpawningActor_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, WaterPlane_C*[] CallFunc_GetAllActorsOfClass_OutActors, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, WaterPlane_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, float K2Node_Event_time, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_playerid, enum K2Node_Event_Type, Vector K2Node_Event_location, int K2Node_Event_playerid, int K2Node_Event_markplayerid, bool K2Node_Event_flag, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_state, float K2Node_Event_continus, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_num, int K2Node_Event_queuenum, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UI_MiniMap_C* CallFunc_GetMiniMap_Map, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, class UserWidget CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, bool CallFunc_Less_IntInt_ReturnValue, UserWidget* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Anchors K2Node_MakeStruct_Anchors, Margin K2Node_MakeStruct_Margin, int CallFunc_GetGameModeType_mode, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UI_MapBase_C* CallFunc_GetBigMap_BigMap, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_Show, class Object Temp_class_Variable, class Object K2Node_CustomEvent_Loaded, class GameDebugUI K2Node_ClassDynamicCast_AsGame_Debug_UI, bool K2Node_ClassDynamicCast_bSuccess, GameDebugUI* CallFunc_Create_ReturnValue, OBMapUI* CallFunc_GetOBMapUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBTargetViewUI* CallFunc_GetOBTargetViewUI_ReturnValue, Vector K2Node_Event_location, float K2Node_Event_radius, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, UI_MapBase_C* CallFunc_GetBigMap_BigMap, bool CallFunc_IsValid_ReturnValue, UI_MapBase_C* CallFunc_GetBigMap_BigMap, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, UI_MapBase_C* CallFunc_GetBigMap_BigMap, UI_MapBase_C* CallFunc_GetBigMap_BigMap, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_MapBase_C* CallFunc_GetBigMap_BigMap, UI_MapBase_C* CallFunc_GetBigMap_BigMap, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBMapUI* CallFunc_GetOBMapUI_ReturnValue, OBTargetViewUI* CallFunc_GetOBTargetViewUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBTargetViewUI* CallFunc_GetOBTargetViewUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBMapUI* CallFunc_GetOBMapUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBTargetViewUI* CallFunc_GetOBTargetViewUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBMapUI* CallFunc_GetOBMapUI_ReturnValue, OBTargetViewUI* CallFunc_GetOBTargetViewUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBMapUI* CallFunc_GetOBMapUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Vector K2Node_Event_location, float K2Node_Event_radius, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, KongJueGongGaoWidget_C* CallFunc_Create_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Vector K2Node_Event_location, float K2Node_Event_radius, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector K2Node_Event_location, float K2Node_Event_radius, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x8a873f8 0x78c36bf580

--------------------------------
Class: UI_MapBase_C.MiniMapCtrlUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x268, Size: 0x8] 0x78b892d380
	WidgetAnimation* TipAnim;//[Offset: 0x270, Size: 0x8] 0x78b892d300
	Button* AddSliverValue;//[Offset: 0x278, Size: 0x8] 0x78b892d280
	Button* Button;//[Offset: 0x280, Size: 0x8] 0x78b892d200
	Button* Button;//[Offset: 0x288, Size: 0x8] 0x78b892d180
	Button* Button;//[Offset: 0x290, Size: 0x8] 0x78b892d100
	Button* Button;//[Offset: 0x298, Size: 0x8] 0x78b892d080
	Button* Button;//[Offset: 0x2a0, Size: 0x8] 0x78b892d000
	CanvasPanel* CanvasPanel;//[Offset: 0x2a8, Size: 0x8] 0x78b892cf80
	CanvasPanel* CanvasPanel;//[Offset: 0x2b0, Size: 0x8] 0x78b892cf00
	CheckBox* CheckBox;//[Offset: 0x2b8, Size: 0x8] 0x78b892ce80
	TextBlock* FlyPointTipText;//[Offset: 0x2c0, Size: 0x8] 0x78b892ce00
	HorizontalBox* HorizontalBox_AddAmmoPoint;//[Offset: 0x2c8, Size: 0x8] 0x78b892cd80
	HorizontalBox* HorizontalBox_AddArmorPoint;//[Offset: 0x2d0, Size: 0x8] 0x78b892cd00
	HorizontalBox* HorizontalBox_AddHpPoint;//[Offset: 0x2d8, Size: 0x8] 0x78b892cc80
	HorizontalBox* HorizontalBox_DragonRock;//[Offset: 0x2e0, Size: 0x8] 0x78b892cc00
	HorizontalBox* HorizontalBox_DragonRockOpen;//[Offset: 0x2e8, Size: 0x8] 0x78b892cb80
	HorizontalBox* HorizontalBox_FlyPoint;//[Offset: 0x2f0, Size: 0x8] 0x78b892cb00
	HorizontalBox* HorizontalBox_KeyBox;//[Offset: 0x2f8, Size: 0x8] 0x78b892ca80
	HorizontalBox* HorizontalBox_MoWen;//[Offset: 0x300, Size: 0x8] 0x78b892ca00
	HorizontalBox* HorizontalBox_Paradrop;//[Offset: 0x308, Size: 0x8] 0x78b892c980
	HorizontalBox* HorizontalBox_ResourcePoint;//[Offset: 0x310, Size: 0x8] 0x78b892c900
	HorizontalBox* HorizontalBox_Sacrifice;//[Offset: 0x318, Size: 0x8] 0x78b892c880
	HorizontalBox* HorizontalBox_TouGong;//[Offset: 0x320, Size: 0x8] 0x78b892c800
	HorizontalBox* HorizontalBox_TouTuo;//[Offset: 0x328, Size: 0x8] 0x78b892c780
	HorizontalBox* HorizontalBox_Unknown;//[Offset: 0x330, Size: 0x8] 0x78b892c700
	Image* Image;//[Offset: 0x338, Size: 0x8] 0x78b892c680
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78b892e700
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78b892e680
	Image* Image;//[Offset: 0x350, Size: 0x8] 0x78b892e600
	Image* Image;//[Offset: 0x358, Size: 0x8] 0x78b892e580
	Image* Image;//[Offset: 0x360, Size: 0x8] 0x78b892e500
	Image* Image;//[Offset: 0x368, Size: 0x8] 0x78b892e480
	Image* Image;//[Offset: 0x370, Size: 0x8] 0x78b892e400
	Image* Image;//[Offset: 0x378, Size: 0x8] 0x78b892e380
	MenuAnchor* MenuAnchor_sing;//[Offset: 0x380, Size: 0x8] 0x78b892e300
	Button* OutjammingButton;//[Offset: 0x388, Size: 0x8] 0x78b892e280
	Button* PushPullButton;//[Offset: 0x390, Size: 0x8] 0x78b892e200
	Button* ReduceSliderValue;//[Offset: 0x398, Size: 0x8] 0x78b892e180
	Slider* Slider_mapSize;//[Offset: 0x3a0, Size: 0x8] 0x78b892e100
	UI_MiniMap_C* UI_MiniMap_C;//[Offset: 0x3a8, Size: 0x8] 0x78b892e080
	float MinScaleSize;//[Offset: 0x3b0, Size: 0x4] 0x78b892e000
	float MaxScaleSize;//[Offset: 0x3b4, Size: 0x4] 0x78b892df80
	float CurrentScale;//[Offset: 0x3b8, Size: 0x4] 0x78b892df00
	bool IsVerticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1] 0x78b892de80
	bool IsRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 0x1] 0x78b892de00
	bool IsHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 0x1] 0x78b892dd80
	bool IsDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bf, Size: 0x1] 0x78b892dd00
	float TargetScale;//[Offset: 0x3c0, Size: 0x4] 0x78b892dc80
	bool bIsTipOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1] 0x78b892dc00
	bool isSingMenuOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 0x1] 0x78b892db80
	void SequenceEvent__ENTRYPOINTUI_MapBase(Button* PushPullButton);// 0x8a873f8 0x78c3c0d980
	void SequenceEvent__ENTRYPOINTUI_MapBase(Button* PushPullButton);// 0x8a873f8 0x78c3c0da60
	UserWidget* OnGetUserMenuContent(PlayerController* CallFunc_GetPlayerController_ReturnValue, SingMenuWidget_C* CallFunc_Create_ReturnValue);// 0x8a873f8 0x78c3c0db40
	void CheckMakeTipPanelVisible(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum CallFunc_GetVisibility_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c3c0dc20
	void GetHUD(out WuXiaXHUD* HUD, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3c0dd00
	void GetTouchDistance(Vector2D vec1, Vector2D vec2, out float Distance, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Sqrt_ReturnValue);// 0x8a873f8 0x78c3c0dde0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3c0dec0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3c0dfa0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3c0e080
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0e160
	void SetNextCircle(float Vector Pos 2 X, float Vector Pos 2 Y, float Range);// 0x8a873f8 0x78c3c0e240
	void SetCurrentCircle(float Vector Pos 1 X, float Vector Pos 1 Y, float Range);// 0x8a873f8 0x78c3c0e320
	void SetPushRightArrow(Button* PushPullButton);// 0x8a873f8 0x78c3c0e400
	void BndEvt__PushPullButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0e4e0
	void SetPullLeftArrow(Button* PushPullButton);// 0x8a873f8 0x78c3c0e5c0
	void MarkLocation();// 0x8a873f8 0x78c3c0e6a0
	void Horizontal(bool State, bool IsRight);// 0x8a873f8 0x78c3c0adc0
	void Vertical(bool State, bool IsDown);// 0x8a873f8 0x78c3c0aea0
	void MapScale(float Value);// 0x8a873f8 0x78c3c0af80
	void SetFinalCircle(float Vector Pos 2 X, float Vector Pos 2 Y, float Range);// 0x8a873f8 0x78c3c0b060
	void BndEvt__Slider_mapsize_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c3c0b220
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3c0b300
	void BndEvt__ReduceSliderValue_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0b3e0
	void BndEvt__AddSliverValue_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0b4c0
	void SetTargetScale(float Value);// 0x8a873f8 0x78c3c0b5a0
	void BndEvt__CheckBox_38_K2Node_ComponentBoundEvent_2_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x8a873f8 0x78c3c0b680
	void SetEnabledFlyPointTip(bool bIsEnabledFlyPointTip);// 0x8a873f8 0x78c3c0b760
	void SetEnabledAdDrugTip(bool bIsEnabledAdDrugTip);// 0x8a873f8 0x78c3c0b840
	void SetEnabledTouGongTip(bool bIsEnabledTouGongTip);// 0x8a873f8 0x78c3c0b920
	void SetEnabledMoWenTip(bool bIsEnabledMoWenTip);// 0x8a873f8 0x78c3c0ba00
	void SetEnabledDragonRockTip(bool bIsEnabledDragonRockTip);// 0x8a873f8 0x78c3c0bae0
	void SetEnabledSacrificeTip(bool bIsEnabledSacrificeTip);// 0x8a873f8 0x78c3c0bbc0
	void SetEnabledKeyBoxTip(bool bIsEnabledKeyBoxTip);// 0x8a873f8 0x78c3c0bca0
	void BndEvt__Button_25_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0bd80
	void SetMarkButtonVisibility(bool bVisibility);// 0x8a873f8 0x78c3c0be60
	void SetEnabledParadropTip(bool bIsEnabledParadropTip);// 0x8a873f8 0x78c3c0bf40
	void BndEvt__Button_130_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0c020
	void BndEvt__Button_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0c100
	void Construct();// 0x8a873f8 0x78c3c0c1e0
	void OnInitialized();// 0x8a873f8 0x78c3c0c2c0
	void SetSliderValue(float Value);// 0x8a873f8 0x78c3c0c3a0
	void BndEvt__Button_145_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0c480
	void BndEvt__OutjammingButton_K2Node_ComponentBoundEvent_10_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3c0c560
	void SetOutJammingEnabled(bool bNewIsOutJammingEnabled);// 0x8a873f8 0x78c3c0c640
	void SetOutJammingOpened(bool bNewIsOutJammingOpened);// 0x8a873f8 0x78c3c0c720
	void SetEnabledResourcePoint(bool bIsEnabledResourcePoint);// 0x8a873f8 0x78c3c0c8e0
	void SetEnabledEffectPoint(bool bIsEnabledEffectPoint);// 0x8a873f8 0x78c3c090e0
	void ExecuteUbergraph_UI_MapBase(int EntryPoint, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, WuXiaXHUD* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, float K2Node_CustomEvent_Vector_Pos_2_X, float K2Node_CustomEvent_Vector_Pos_2_Y, float K2Node_CustomEvent_Range, float K2Node_CustomEvent_Vector_Pos_1_X, float K2Node_CustomEvent_Vector_Pos_1_Y, float K2Node_CustomEvent_Range, Button* K2Node_CustomEvent_PushPullButton, enum Temp_byte_Variable, enum Temp_byte_Variable, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, ButtonStyle K2Node_MakeStruct_ButtonStyle, ButtonStyle K2Node_MakeStruct_ButtonStyle, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Button* K2Node_CustomEvent_PushPullButton, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool K2Node_Event_state, bool K2Node_Event_IsRight, bool K2Node_Event_state, bool K2Node_Event_IsDown, float K2Node_Event_value, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FMin_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_CustomEvent_Vector_Pos_2_X, float K2Node_CustomEvent_Vector_Pos_2_Y, float K2Node_CustomEvent_Range, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_ComponentBoundEvent_Value, float CallFunc_MapRangeClamped_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, float CallFunc_FInterpTo_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, enum Temp_byte_Variable, float K2Node_Event_value, bool Temp_bool_Variable, float CallFunc_FClamp_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool K2Node_ComponentBoundEvent_bIsChecked, bool CallFunc_Not_PreBool_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, bool K2Node_Event_bIsEnabledFlyPointTip, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, bool K2Node_Event_bIsEnabledAdDrugTip, bool K2Node_Event_bIsEnabledTouGongTip, enum K2Node_Select_Default, enum K2Node_Select_Default, bool K2Node_Event_bIsEnabledMoWenTip, bool K2Node_Event_bIsEnabledDragonRockTip, enum K2Node_Select_Default, enum K2Node_Select_Default, bool K2Node_Event_bIsEnabledSacrificeTip, bool K2Node_Event_bIsEnabledKeyBoxTip, enum K2Node_Select_Default, enum K2Node_Select_Default, float Temp_float_Variable, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool K2Node_Event_bVisibility, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool K2Node_Event_bIsEnabledParadropTip, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Sign_GetTeamPlayerCount_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float K2Node_Event_value, bool CallFunc_RegisterWidget_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, float Temp_float_Variable, bool Temp_bool_Variable, bool K2Node_Event_bNewIsOutJammingEnabled, float K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, bool K2Node_Event_bNewIsOutJammingOpened, byte K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_Select_Default, bool K2Node_Event_bIsEnabledResourcePoint, bool K2Node_Event_bIsEnabledEffectPoint, enum K2Node_Select_Default, enum K2Node_Select_Default, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsGameMode_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c3c091c0

--------------------------------
Class: SingMenuWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bcf88100
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x78bcf88080
	Button* Button;//[Offset: 0x270, Size: 0x8] 0x78bcf88000
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x78bcf87f80
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x78bcf87f00
	Image* Image_1_b;//[Offset: 0x288, Size: 0x8] 0x78bcf87e80
	Image* Image_2_b;//[Offset: 0x290, Size: 0x8] 0x78bcf87e00
	TextBlock* TextBlock;//[Offset: 0x298, Size: 0x8] 0x78bcf87d80
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8] 0x78bcf87d00
	TextBlock* TextBlock_playerIndex;//[Offset: 0x2a8, Size: 0x8] 0x78bcf87c80
	TextBlock* TextBlock_playerIndex;//[Offset: 0x2b0, Size: 0x8] 0x78bcf87c00
	UI_MapBase_C* bar;//[Offset: 0x2b8, Size: 0x8] 0x78bcf87b80
	bool isInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78bcf87b00
	void SetPlayerIndex(PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Sign_GetSelfPlayerIdIndex_ReturnValue, int CallFunc_Sign_GetTeamPlayerCount_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c47021c0
	void SetButton2(bool NewParam);// 0x8a873f8 0x78c4702fc0
	void SetButton1(bool NewParam);// 0x8a873f8 0x78c5e44ca0
	void SetShield(bool NewParam, bool NewParam1, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c34e2b60
	void GetShield(int tempIndex, out bool NewParam, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Sign_GetShield_ReturnValue);// 0x8a873f8 0x78c34eb060
	void Event_Init(UI_MapBase_C* bar);// 0x8a873f8 0x78c34eb140
	void Construct();// 0x8a873f8 0x78c34edde0
	void Destruct();// 0x8a873f8 0x78c34eb3e0
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c34eb760
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c34eaf80
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c34eb300
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3c08660
	void ExecuteUbergraph_SingMenuWidget(int EntryPoint, UI_MapBase_C* K2Node_CustomEvent_bar, bool CallFunc_GetShield_NewParam, bool CallFunc_GetShield_NewParam, bool CallFunc_GetShield_NewParam, bool CallFunc_GetShield_NewParam, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GetShield_NewParam, bool CallFunc_GetShield_NewParam);// 0x8a873f8 0x78c3c08740

--------------------------------
Class: UI_MiniMap_C.WuXiaMiniMapWidget.UserWidget.Widget.Visual.Object
	Image* bp_Image_base;//[Offset: 0x798, Size: 0x8] 0x78c5b4ce80
	Image* bp_player;//[Offset: 0x7a0, Size: 0x8] 0x78c5b4cf00
	DrawCircleWidget_C* CurrentDamageDrawUI;//[Offset: 0x7a8, Size: 0x8] 0x78c5b4cf80
	DrawCircleExtendWidget_C* DrawCircleExtendDrawUI;//[Offset: 0x7b0, Size: 0x8] 0x78c5b4d000
	DrawFlyLineWidget_C* DrawFlyLine;//[Offset: 0x7b8, Size: 0x8] 0x78c5b4d080
	SizeBox* E_Player;//[Offset: 0x7c0, Size: 0x8] 0x78c5b4d100
	DrawCircleWidget_C* FinalDamageDrawUI;//[Offset: 0x7c8, Size: 0x8] 0x78c5b4d180
	Image* FlyEndPoint;//[Offset: 0x7d0, Size: 0x8] 0x78c5b4d200
	Image* FlyStartPoint;//[Offset: 0x7d8, Size: 0x8] 0x78c5b4d280
	Image* Image;//[Offset: 0x7e0, Size: 0x8] 0x78c5b4d300
	DrawCircleWidget_C* NextDamageDrawUI;//[Offset: 0x7e8, Size: 0x8] 0x78c5b4d380
	CanvasPanel* OutPanel;//[Offset: 0x7f0, Size: 0x8] 0x78c5b4d400
	Overlay* Planes;//[Offset: 0x7f8, Size: 0x8] 0x78c5b4d480
	VerticalBox* Player_1_Panel;//[Offset: 0x800, Size: 0x8] 0x78c5b4d500
	TextBlock* TextBlock;//[Offset: 0x808, Size: 0x8] 0x78c5b4d580
	DrawVirtualLineWidget_C* VirtualLineDrawUI;//[Offset: 0x810, Size: 0x8] 0x78c5b4d600
	Vector FinalDamageLocation;//[Offset: 0x818, Size: 0xc] 0x78c5b4d680
	float ClampX;//[Offset: 0x824, Size: 0x4] 0x78c5b4b600
	float ClampY;//[Offset: 0x828, Size: 0x4] 0x78c5b4b680
	Vector2D TouchLocation;//[Offset: 0x82c, Size: 0x8] 0x78c5b4b700
	float CurrentScaleValue;//[Offset: 0x834, Size: 0x4] 0x78c5b4b780
	float CurrentCircleRnage;//[Offset: 0x838, Size: 0x4] 0x78c5b4b800
	float NextCircleRange;//[Offset: 0x83c, Size: 0x4] 0x78c5b4b880
	float FinalCircleRange;//[Offset: 0x840, Size: 0x4] 0x78c5b4b900
	Vector2D PlayerLocation2D;//[Offset: 0x844, Size: 0x8] 0x78c5b4b980
	bool DamageVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 0x1] 0x78c5b4ba00
	Texture2D* ChineseMap;//[Offset: 0x850, Size: 0x8] 0x78c5b4ba80
	Texture2D* EnglishMap;//[Offset: 0x858, Size: 0x8] 0x78c5b4bb00
	bool CanMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1] 0x78c5b4bb80
	PointerEvent[] Touchs;//[Offset: 0x868, Size: 0x10] 0x78b9b08760
	bool isMarkPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1] 0x78c5b4bc80
	float Distance;//[Offset: 0x87c, Size: 0x4] 0x78c5b4bd00
	Vector2D CenterPosition;//[Offset: 0x880, Size: 0x8] 0x78c5b4bd80
	Vector2D OriginalSize;//[Offset: 0x888, Size: 0x8] 0x78c5b4be00
	bool isbigmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1] 0x78c5b4be80
	bool AllMarkVis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 0x1] 0x78c5b4bf00
	CanvasPanelSlot* NewVar;//[Offset: 0x898, Size: 0x8] 0x78c5b4bf80
	enum Temp_byte_Variable;//[Offset: 0x8a0, Size: 0x1] 0x78b9b08800
	WuXiaXCharacter* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character;//[Offset: 0x8a8, Size: 0x8] 0x78c5b4c080
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1] 0x78c5b4c100
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x8b4, Size: 0x4] 0x78c5b4c180
	int K2Node_Event_id;//[Offset: 0x8b8, Size: 0x4] 0x78c5b4c200
	Vector K2Node_Event_location;//[Offset: 0x8bc, Size: 0xc] 0x78c5b4c280
	int K2Node_Event_num;//[Offset: 0x8c8, Size: 0x4] 0x78c5b4c300
	MapPointBaseUI* CallFunc_GetAltar_Altar;//[Offset: 0x8d0, Size: 0x8] 0x78c5b4c380
	int K2Node_Event_id;//[Offset: 0x8d8, Size: 0x4] 0x78c5b4c400
	int K2Node_Event_num;//[Offset: 0x8dc, Size: 0x4] 0x78c5b4c480
	MapPointBaseUI* CallFunc_GetAltar_Altar;//[Offset: 0x8e0, Size: 0x8] 0x78c5b4c500
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x8e8, Size: 0x70] 0x78c5b4c580
	float CallFunc_BreakVector2D_X;//[Offset: 0x958, Size: 0x4] 0x78c5b4c600
	float CallFunc_BreakVector2D_Y;//[Offset: 0x95c, Size: 0x4] 0x78c5b4a580
	float CallFunc_BreakVector2D_X;//[Offset: 0x960, Size: 0x4] 0x78c5b4a600
	float CallFunc_BreakVector2D_Y;//[Offset: 0x964, Size: 0x4] 0x78c5b4a680
	float K2Node_CustomEvent_PosX;//[Offset: 0x968, Size: 0x4] 0x78c5b4a700
	float K2Node_CustomEvent_PosY;//[Offset: 0x96c, Size: 0x4] 0x78c5b4a780
	float K2Node_CustomEvent_Range;//[Offset: 0x970, Size: 0x4] 0x78c5b4a800
	float CallFunc_BreakVector2D_X;//[Offset: 0x974, Size: 0x4] 0x78c5b4a880
	float CallFunc_BreakVector2D_Y;//[Offset: 0x978, Size: 0x4] 0x78c5b4a900
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1] 0x78c5b4a980
	int Temp_int_Array_Index_Variable;//[Offset: 0x980, Size: 0x4] 0x78c5b4aa00
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0x984, Size: 0x10] 0x78c5b4aa80
	enum Temp_byte_Variable;//[Offset: 0x994, Size: 0x1] 0x78b9b088a0
	int K2Node_Event_id;//[Offset: 0x998, Size: 0x4] 0x78c5b4ab80
	Vector K2Node_Event_location;//[Offset: 0x99c, Size: 0xc] 0x78c5b4ac00
	int K2Node_Event_num;//[Offset: 0x9a8, Size: 0x4] 0x78c5b4ac80
	MapPointBaseUI* CallFunc_GetWaist_waist;//[Offset: 0x9b0, Size: 0x8] 0x78c5b4ad00
	int K2Node_Event_id;//[Offset: 0x9b8, Size: 0x4] 0x78c5b4ad80
	MapPointBaseUI* CallFunc_GetWaist_waist;//[Offset: 0x9c0, Size: 0x8] 0x78c5b4ae00
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0x9c8, Size: 0x8] 0x78c5b4ae80
	int K2Node_Event_id;//[Offset: 0x9d0, Size: 0x4] 0x78c5b4af00
	Vector K2Node_Event_markedpos;//[Offset: 0x9d4, Size: 0xc] 0x78c5b4af80
	enum K2Node_Event_Type;//[Offset: 0x9e0, Size: 0x1] 0x78b9b08940
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0x9e8, Size: 0x8] 0x78c5b4b080
	MapPointBaseUI* CallFunc_GetMarked_point;//[Offset: 0x9f0, Size: 0x8] 0x78c5b4b100
	int K2Node_Event_id;//[Offset: 0x9f8, Size: 0x4] 0x78c5b4b180
	enum K2Node_Event_Type;//[Offset: 0x9fc, Size: 0x1] 0x78b9b089e0
	int Temp_int_Array_Index_Variable;//[Offset: 0xa00, Size: 0x4] 0x78c5b4b280
	MapPointBaseUI* CallFunc_GetMarked_point;//[Offset: 0xa08, Size: 0x8] 0x78c5b4b300
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xa10, Size: 0x8] 0x78c5b4b380
	int K2Node_Event_id;//[Offset: 0xa18, Size: 0x4] 0x78c5b4b400
	Vector K2Node_Event_location;//[Offset: 0xa1c, Size: 0xc] 0x78c5b4b480
	float K2Node_Event_WaitTime;//[Offset: 0xa28, Size: 0x4] 0x78c5b4b500
	int K2Node_Event_id;//[Offset: 0xa2c, Size: 0x4] 0x78c5b4b580
	bool K2Node_Event_bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1] 0x78c5b49500
	bool K2Node_Event_bIsPulled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 0x1] 0x78c5b49580
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xa34, Size: 0x4] 0x78c5b49600
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xa38, Size: 0x8] 0x78c5b49680
	int K2Node_Event_id;//[Offset: 0xa40, Size: 0x4] 0x78c5b49700
	Vector K2Node_Event_location;//[Offset: 0xa44, Size: 0xc] 0x78c5b49780
	int K2Node_Event_SortPriority;//[Offset: 0xa50, Size: 0x4] 0x78c5b49800
	bool K2Node_Event_bIsInCave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 0x1] 0x78c5b49880
	int K2Node_Event_id;//[Offset: 0xa58, Size: 0x4] 0x78c5b49900
	bool K2Node_Event_bIsExisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 0x1] 0x78c5b49980
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xa60, Size: 0x8] 0x78c5b49a00
	int Temp_int_Array_Index_Variable;//[Offset: 0xa68, Size: 0x4] 0x78c5b49a80
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0xa6c, Size: 0x10] 0x78c5b49b00
	int K2Node_Event_id;//[Offset: 0xa7c, Size: 0x4] 0x78c5b49b80
	Vector K2Node_Event_location;//[Offset: 0xa80, Size: 0xc] 0x78c5b49c00
	int K2Node_CustomEvent_Num;//[Offset: 0xa8c, Size: 0x4] 0x78c5b49c80
	int K2Node_CustomEvent_playerId;//[Offset: 0xa90, Size: 0x4] 0x78c5b49d00
	MapPointBaseUI* CallFunc_HasTeamPlayerByNumber_Player;//[Offset: 0xa98, Size: 0x8] 0x78c5b49d80
	MapPointBaseUI* CallFunc_HasTeamPlayerByNumber_Player;//[Offset: 0xaa0, Size: 0x8] 0x78c5b49e00
	MapPointBaseUI* CallFunc_HasTeamPlayerMarkByNumber_Output;//[Offset: 0xaa8, Size: 0x8] 0x78c5b49e80
	WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD;//[Offset: 0xab0, Size: 0x8] 0x78c5b49f00
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 0x1] 0x78c5b49f80
	WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD;//[Offset: 0xac0, Size: 0x8] 0x78c5b4a000
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 0x1] 0x78c5b4a080
	int K2Node_Event_id;//[Offset: 0xacc, Size: 0x4] 0x78c5b4a100
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xad0, Size: 0x4] 0x78c5b4a180
	int K2Node_Event_id;//[Offset: 0xad4, Size: 0x4] 0x78c5b4a200
	Vector K2Node_Event_location;//[Offset: 0xad8, Size: 0xc] 0x78c5b4a280
	bool K2Node_Event_bIsInCave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae4, Size: 0x1] 0x78c5b4a300
	int K2Node_Event_Index;//[Offset: 0xae8, Size: 0x4] 0x78c5b4a380
	int K2Node_Event_playerid;//[Offset: 0xaec, Size: 0x4] 0x78c5b4a400
	FString K2Node_Event_name;//[Offset: 0xaf0, Size: 0x10] 0x78c5b4a480
	int K2Node_Event_Index;//[Offset: 0xb00, Size: 0x4] 0x78c5b4a500
	int K2Node_Event_teammode;//[Offset: 0xb04, Size: 0x4] 0x78c5b48480
	PaperSprite* CallFunc_GetTeamColorIndex_ref;//[Offset: 0xb08, Size: 0x8] 0x78c5b48500
	PaperSprite* CallFunc_GetTeamColorIndex_ref;//[Offset: 0xb10, Size: 0x8] 0x78c5b48580
	MapPointBaseUI* CallFunc_HasTeamPlayerByNumber_Player;//[Offset: 0xb18, Size: 0x8] 0x78c5b48600
	MapPointBaseUI* CallFunc_HasTeamPlayerByNumber_Player;//[Offset: 0xb20, Size: 0x8] 0x78c5b48680
	MapPointBaseUI* CallFunc_HasTeamPlayerMarkByNumber_Output;//[Offset: 0xb28, Size: 0x8] 0x78c5b48700
	int K2Node_Event_num;//[Offset: 0xb30, Size: 0x4] 0x78c5b48780
	int K2Node_Event_num;//[Offset: 0xb34, Size: 0x4] 0x78c5b48800
	Vector K2Node_Event_location;//[Offset: 0xb38, Size: 0xc] 0x78c5b48880
	MapPointBaseUI* CallFunc_GetMark_Mark;//[Offset: 0xb48, Size: 0x8] 0x78c5b48900
	MapPointBaseUI* CallFunc_GetMark_Mark;//[Offset: 0xb50, Size: 0x8] 0x78c5b48980
	int K2Node_Event_num;//[Offset: 0xb58, Size: 0x4] 0x78c5b48a00
	Vector K2Node_Event_location;//[Offset: 0xb5c, Size: 0xc] 0x78c5b48a80
	int K2Node_Event_num;//[Offset: 0xb68, Size: 0x4] 0x78c5b48b00
	float K2Node_Event_yaw;//[Offset: 0xb6c, Size: 0x4] 0x78c5b48b80
	MapPointBaseUI* CallFunc_GetTeamPlayer_Player;//[Offset: 0xb70, Size: 0x8] 0x78c5b48c00
	MapPointBaseUI* CallFunc_GetTeamPlayer_Player;//[Offset: 0xb78, Size: 0x8] 0x78c5b48c80
	Vector K2Node_Event_start;//[Offset: 0xb80, Size: 0xc] 0x78c5b48d00
	Vector K2Node_Event_end;//[Offset: 0xb8c, Size: 0xc] 0x78c5b48d80
	int K2Node_Event_id;//[Offset: 0xb98, Size: 0x4] 0x78c5b48e00
	Vector K2Node_Event_location;//[Offset: 0xb9c, Size: 0xc] 0x78c5b48e80
	int K2Node_Event_id;//[Offset: 0xba8, Size: 0x4] 0x78c5b48f00
	Vector K2Node_Event_location;//[Offset: 0xbac, Size: 0xc] 0x78c5b48f80
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xbb8, Size: 0x8] 0x78c5b49000
	Vector2D K2Node_Event_original_level_size;//[Offset: 0xbc0, Size: 0x8] 0x78c5b49080
	Vector2D K2Node_Event_original_map_size;//[Offset: 0xbc8, Size: 0x8] 0x78c5b49100
	Vector2D K2Node_Event_show_map_size;//[Offset: 0xbd0, Size: 0x8] 0x78c5b49180
	Vector K2Node_Event_center;//[Offset: 0xbd8, Size: 0xc] 0x78c5b49200
	Texture2D* K2Node_Event_chinese_map;//[Offset: 0xbe8, Size: 0x8] 0x78c5b49280
	Texture2D* K2Node_Event_english_map;//[Offset: 0xbf0, Size: 0x8] 0x78c5b49300
	bool K2Node_Event_can_mark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 0x1] 0x78c5b49380
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xc00, Size: 0x8] 0x78c5b49400
	int K2Node_Event_id;//[Offset: 0xc08, Size: 0x4] 0x78c5b49480
	Vector K2Node_Event_location;//[Offset: 0xc0c, Size: 0xc] 0x78c5b47400
	int K2Node_Event_id;//[Offset: 0xc18, Size: 0x4] 0x78c5b47480
	bool K2Node_Event_bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1c, Size: 0x1] 0x78c5b47500
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xc20, Size: 0x8] 0x78c5b47580
	Vector K2Node_CustomEvent_Location;//[Offset: 0xc28, Size: 0xc] 0x78c5b47600
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc34, Size: 0x1] 0x78c5b47680
	bool K2Node_Event_bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc35, Size: 0x1] 0x78c5b47700
	int K2Node_Event_key;//[Offset: 0xc38, Size: 0x4] 0x78c5b47780
	BuffPointInfo K2Node_Event_value;//[Offset: 0xc3c, Size: 0x10] 0x78c5b47800
	enum K2Node_Select_Default;//[Offset: 0xc4c, Size: 0x1] 0x78b9b08a80
	MapPointBaseUI* CallFunc_GetBuffPoint_Widget;//[Offset: 0xc50, Size: 0x8] 0x78c5b47900
	int Temp_int_Array_Index_Variable;//[Offset: 0xc58, Size: 0x4] 0x78c5b47980
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xc5c, Size: 0x4] 0x78c5b47a00
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xc60, Size: 0x4] 0x78c5b47a80
	int Temp_int_Array_Index_Variable;//[Offset: 0xc64, Size: 0x4] 0x78c5b47b00
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xc68, Size: 0x8] 0x78c5b47b80
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xc70, Size: 0x8] 0x78c5b47c00
	int K2Node_Event_id;//[Offset: 0xc78, Size: 0x4] 0x78c5b47c80
	Vector K2Node_Event_location;//[Offset: 0xc7c, Size: 0xc] 0x78c5b47d00
	bool K2Node_Event_bIsInCave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 0x1] 0x78c5b47d80
	enum Temp_byte_Variable;//[Offset: 0xc89, Size: 0x1] 0x78b9b08b20
	int Temp_int_Array_Index_Variable;//[Offset: 0xc8c, Size: 0x4] 0x78c5b47e80
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xc90, Size: 0x4] 0x78c5b47f00
	WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance;//[Offset: 0xc98, Size: 0x8] 0x78c5b47f80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 0x1] 0x78c5b48000
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca1, Size: 0x1] 0x78c5b48080
	WuXiaXGameModeBase* K2Node_DynamicCast_AsWu_Xia_XGame_Mode_Base;//[Offset: 0xca8, Size: 0x8] 0x78c5b48100
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 0x1] 0x78c5b48180
	int Temp_int_Array_Index_Variable;//[Offset: 0xcb4, Size: 0x4] 0x78c5b48200
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xcb8, Size: 0x8] 0x78c5b48280
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xcc0, Size: 0x8] 0x78c5b48300
	int Temp_int_Array_Index_Variable;//[Offset: 0xcc8, Size: 0x4] 0x78c5b48380
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xccc, Size: 0x4] 0x78c5b48400
	enum Temp_byte_Variable;//[Offset: 0xcd0, Size: 0x1] 0x78b9b08bc0
	int K2Node_Event_id;//[Offset: 0xcd4, Size: 0x4] 0x78c5b46400
	Vector K2Node_Event_location;//[Offset: 0xcd8, Size: 0xc] 0x78c5b46480
	bool K2Node_Event_openstate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce4, Size: 0x1] 0x78c5b46500
	int K2Node_Event_id;//[Offset: 0xce8, Size: 0x4] 0x78c5b46580
	bool K2Node_Event_openstate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcec, Size: 0x1] 0x78c5b46600
	bool K2Node_CustomEvent_isShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xced, Size: 0x1] 0x78c5b46680
	int K2Node_CustomEvent_key;//[Offset: 0xcf0, Size: 0x4] 0x78c5b46700
	Vector K2Node_CustomEvent_Location;//[Offset: 0xcf4, Size: 0xc] 0x78c5b46780
	enum K2Node_CustomEvent_mainType;//[Offset: 0xd00, Size: 0x1] 0x78b9b08c60
	enum K2Node_CustomEvent_childType;//[Offset: 0xd01, Size: 0x1] 0x78b9b052e0
	int K2Node_CustomEvent_pointIndex;//[Offset: 0xd04, Size: 0x4] 0x78c5b46900
	int K2Node_CustomEvent_Quality;//[Offset: 0xd08, Size: 0x4] 0x78c5b46980
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xd10, Size: 0x8] 0x78c5b46a00
	int64 K2Node_CustomEvent_AttackId;//[Offset: 0xd18, Size: 0x8] 0x78c5b46a80
	int K2Node_CustomEvent_skillid;//[Offset: 0xd20, Size: 0x4] 0x78c5b46b00
	float K2Node_CustomEvent_AttackAngle;//[Offset: 0xd24, Size: 0x4] 0x78c5b46b80
	Vector K2Node_CustomEvent_AttackPos;//[Offset: 0xd28, Size: 0xc] 0x78c5b46c00
	Vector K2Node_CustomEvent_SelfPos;//[Offset: 0xd34, Size: 0xc] 0x78c5b46c80
	int K2Node_Event_id;//[Offset: 0xd40, Size: 0x4] 0x78c5b46d00
	bool K2Node_Event_bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 0x1] 0x78c5b46d80
	bool K2Node_Event_bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd45, Size: 0x1] 0x78c5b46e00
	enum K2Node_Select_Default;//[Offset: 0xd46, Size: 0x1] 0x78b9b06460
	int K2Node_Event_id;//[Offset: 0xd48, Size: 0x4] 0x78c5b46f00
	Vector K2Node_Event_location;//[Offset: 0xd4c, Size: 0xc] 0x78c5b46f80
	bool K2Node_Event_bIsInCave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 0x1] 0x78c5b47000
	int K2Node_Event_id;//[Offset: 0xd5c, Size: 0x4] 0x78c5b47080
	bool K2Node_Event_bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 0x1] 0x78c5b47100
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0xd64, Size: 0x10] 0x78c5b47180
	int Temp_int_Array_Index_Variable;//[Offset: 0xd74, Size: 0x4] 0x78c5b47200
	WuXiaXCharacter* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character;//[Offset: 0xd78, Size: 0x8] 0x78c5b47280
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 0x1] 0x78c5b47300
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0xd84, Size: 0x10] 0x78c5b47380
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0xd94, Size: 0x10] 0x78c5b45300
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xda8, Size: 0x8] 0x78c5b45380
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xdb0, Size: 0x4] 0x78c5b45400
	int Temp_int_Array_Index_Variable;//[Offset: 0xdb4, Size: 0x4] 0x78c5b45480
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xdb8, Size: 0x4] 0x78c5b45500
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0xdbc, Size: 0x10] 0x78c5b45580
	int Temp_int_Array_Index_Variable;//[Offset: 0xdcc, Size: 0x4] 0x78c5b45600
	Geometry K2Node_Event_MyGeometry;//[Offset: 0xdd0, Size: 0x38] 0x78c5b45680
	float K2Node_Event_InDeltaTime;//[Offset: 0xe08, Size: 0x4] 0x78c5b45700
	MapPointBaseUI*[] K2Node_Event_Points;//[Offset: 0xe10, Size: 0x10] 0x78b9b06500
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xe20, Size: 0x8] 0x78c5b45800
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xe28, Size: 0x8] 0x78c5b45880
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xe30, Size: 0x4] 0x78c5b45900
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xe38, Size: 0x8] 0x78c5b45980
	MapPointBaseUI* K2Node_DynamicCast_AsAd_Drug_Widget;//[Offset: 0xe40, Size: 0x8] 0x78c5b45a00
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe48, Size: 0x1] 0x78c5b45a80
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xe50, Size: 0x8] 0x78c5b45b00
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0xe58, Size: 0x10] 0x78b9b065a0
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xe68, Size: 0x8] 0x78c5b45c00
	MapPointBaseUI* K2Node_DynamicCast_AsAd_Drug_Widget;//[Offset: 0xe70, Size: 0x8] 0x78c5b45c80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe78, Size: 0x1] 0x78c5b45d00
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xe80, Size: 0x8] 0x78c5b45d80
	int Temp_int_Array_Index_Variable;//[Offset: 0xe88, Size: 0x4] 0x78c5b45e00
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0xe90, Size: 0x10] 0x78b9b06640
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xea0, Size: 0x8] 0x78c5b45f00
	float K2Node_CustomEvent_PosX;//[Offset: 0xea8, Size: 0x4] 0x78c5b45f80
	float K2Node_CustomEvent_PosY;//[Offset: 0xeac, Size: 0x4] 0x78c5b46000
	float K2Node_CustomEvent_Range;//[Offset: 0xeb0, Size: 0x4] 0x78c5b46080
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xeb8, Size: 0x8] 0x78c5b46100
	MapPointBaseUI* K2Node_DynamicCast_AsTou_Gong_Widget;//[Offset: 0xec0, Size: 0x8] 0x78c5b46180
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 0x1] 0x78c5b46200
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0xed0, Size: 0x10] 0x78b9b066e0
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xee0, Size: 0x8] 0x78c5b46300
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xee8, Size: 0x8] 0x78c5b44280
	MapPointBaseUI* K2Node_DynamicCast_AsMo_Wen_Widget;//[Offset: 0xef0, Size: 0x8] 0x78c5b44300
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 0x1] 0x78c5b44380
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0xf00, Size: 0x10] 0x78b9b06780
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xf10, Size: 0x8] 0x78c5b44480
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xf18, Size: 0x8] 0x78c5b44500
	MapPointBaseUI* K2Node_DynamicCast_AsMo_Wen_Widget;//[Offset: 0xf20, Size: 0x8] 0x78c5b44580
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf28, Size: 0x1] 0x78c5b44600
	float K2Node_CustomEvent_PosX;//[Offset: 0xf2c, Size: 0x4] 0x78c5b44680
	float K2Node_CustomEvent_PosY;//[Offset: 0xf30, Size: 0x4] 0x78c5b44700
	float K2Node_CustomEvent_Range;//[Offset: 0xf34, Size: 0x4] 0x78c5b44780
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xf38, Size: 0x8] 0x78c5b44800
	MapPointBaseUI* K2Node_DynamicCast_AsDragon_Rock_Widget;//[Offset: 0xf40, Size: 0x8] 0x78c5b44880
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf48, Size: 0x1] 0x78c5b44900
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0xf50, Size: 0x10] 0x78b9b06820
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xf60, Size: 0x8] 0x78c5b44a00
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xf68, Size: 0x8] 0x78c5b44a80
	MapPointBaseUI* K2Node_DynamicCast_AsDragon_Rock_Widget;//[Offset: 0xf70, Size: 0x8] 0x78c5b44b00
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 0x1] 0x78c5b44b80
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xf80, Size: 0x8] 0x78c5b44c00
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xf88, Size: 0x8] 0x78c5b44c80
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0xf90, Size: 0x10] 0x78b9b068c0
	MapPointBaseUI* K2Node_DynamicCast_AsSacrifice_Widget;//[Offset: 0xfa0, Size: 0x8] 0x78c5b44d80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 0x1] 0x78c5b44e00
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xfb0, Size: 0x8] 0x78c5b44e80
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xfb8, Size: 0x8] 0x78c5b44f00
	MapPointBaseUI* K2Node_DynamicCast_AsKey_Box_Widget;//[Offset: 0xfc0, Size: 0x8] 0x78c5b44f80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc8, Size: 0x1] 0x78c5b45000
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0xfd0, Size: 0x10] 0x78b9b06960
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0xfe0, Size: 0x8] 0x78c5b45100
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0xfe8, Size: 0x8] 0x78c5b45180
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0xff0, Size: 0x8] 0x78c5b45200
	MapPointBaseUI* K2Node_DynamicCast_AsParadrop_Widget;//[Offset: 0xff8, Size: 0x8] 0x78c5b45280
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 0x1] 0x78c5b43200
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0x1008, Size: 0x8] 0x78c5b43280
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0x1010, Size: 0x10] 0x78b9b06a00
	MapPointBaseUI* K2Node_DynamicCast_AsParadrop_Widget;//[Offset: 0x1020, Size: 0x8] 0x78c5b43380
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1028, Size: 0x1] 0x78c5b43400
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0x1030, Size: 0x8] 0x78c5b43480
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0x1038, Size: 0x8] 0x78c5b43500
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0x1040, Size: 0x8] 0x78c5b43580
	MapPointBaseUI* K2Node_DynamicCast_AsTou_Tuo_Widget;//[Offset: 0x1048, Size: 0x8] 0x78c5b43600
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050, Size: 0x1] 0x78c5b43680
	MapPointBaseUI* CallFunc_Map_Find_Value;//[Offset: 0x1058, Size: 0x8] 0x78c5b43700
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x1060, Size: 0x4] 0x78c5b43780
	MapPointBaseUI* K2Node_DynamicCast_AsTou_Tuo_Widget;//[Offset: 0x1068, Size: 0x8] 0x78c5b43800
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 0x1] 0x78c5b43880
	MapPointBaseUI*[] CallFunc_Map_Values_Values;//[Offset: 0x1078, Size: 0x10] 0x78b9b06aa0
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0x1088, Size: 0x8] 0x78c5b43980
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0x1090, Size: 0x8] 0x78c5b43a00
	MapPointBaseUI* CallFunc_Array_Get_Item;//[Offset: 0x1098, Size: 0x8] 0x78c5b43a80
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x10a0, Size: 0x4] 0x78c5b43b00
	float K2Node_CustomEvent_X;//[Offset: 0x10a4, Size: 0x4] 0x78c5b43b80
	float K2Node_CustomEvent_Y;//[Offset: 0x10a8, Size: 0x4] 0x78c5b43c00
	int K2Node_Event_id;//[Offset: 0x10ac, Size: 0x4] 0x78c5b43c80
	Vector K2Node_Event_location;//[Offset: 0x10b0, Size: 0xc] 0x78c5b43d00
	MapPointBaseUI* CallFunc_GetResourcePointWidget_Widget;//[Offset: 0x10c0, Size: 0x8] 0x78c5b43d80
	float K2Node_CustomEvent_Value;//[Offset: 0x10c8, Size: 0x4] 0x78c5b43e00
	Anchors K2Node_MakeStruct_Anchors;//[Offset: 0x10cc, Size: 0x10] 0x78c5b43e80
	MapPointBaseUI* CallFunc_Create_ReturnValue;//[Offset: 0x10e0, Size: 0x8] 0x78c5b43f00
	Vector2D Temp_struct_Variable;//[Offset: 0x10e8, Size: 0x8] 0x78c5b43f80
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f0, Size: 0x1] 0x78c5b44000
	int K2Node_Event_id;//[Offset: 0x10f4, Size: 0x4] 0x78c5b44080
	int K2Node_Event_TeamId;//[Offset: 0x10f8, Size: 0x4] 0x78c5b44100
	MapPointBaseUI* CallFunc_GetResourcePointWidget_Widget;//[Offset: 0x1100, Size: 0x8] 0x78c5b44180
	Vector2D K2Node_Select_Default;//[Offset: 0x1108, Size: 0x8] 0x78c5b44200
	void WaistPickedUp(int bpp__ID__pf);// 0x7443e18 0x78c39afba0
	void WaistInitLoc(int bpp__ID__pf, Vector bpp__location__pf, int bpp__num__pf);// 0x7443cd4 0x78ca9912e0
	void Update Mark Line(Old)();// 0x7440868 0x78c39afac0
	void UpdateTouTuoUI(int bpp__ID__pf, bool bpp__bActive__pf);// 0x744568c 0x78cac1f120
	void UpdateSacrificeUI(int bpp__ID__pf, bool bpp__bIsBroken__pf);// 0x7444a60 0x78c39af580
	void UpdateResourcePoint(int bpp__ID__pf, int bpp__TeamId__pf);// 0x7445970 0x78c39af4a0
	void UpdatePointLocation(out const MapPointBaseUI*[] bpp__Points__pf__const);// 0x74457a8 0x78c39af3c0
	void UpdatePlayerRotator(int bpp__num__pf, float bpp__yaw__pf);// 0x7443028 0x78c39af740
	void UpdatePlayerMark3DLocation(int bpp__num__pf, Vector bpp__location__pf);// 0x744321c 0x78c39af200
	void UpdatePlayerLocation(int bpp__num__pf, Vector bpp__location__pf);// 0x7443124 0x78c39af040
	void UpdateParadropUI(int bpp__ID__pf, bool bpp__openstate__pf);// 0x7444eb0 0x78c39aef60
	void UpdateMoWenUI(int bpp__ID__pf, bool bpp__bIsOpen__pf, bool bpp__bIsPulled__pf);// 0x744424c 0x78c39aee80
	void UpdateMarkedPlayerPos(int bpp__ID__pf, Vector bpp__markedpos__pf, enum bpp__Type__pf);// 0x7443ec8 0x78c39aeda0
	void UpdateMapPointLoc(MapPointBaseUI* bpp__mappoint__pf);// 0x7440bd4 0x78c3329620
	void UpdateEffectPointInfo(out const EffectPointInfo bpp__EffectPointInfo__pf__const);// 0x7440520 0x78c3329540
	void UpdateDragonRockUI(int bpp__ID__pf, bool bpp__bShow__pf, bool bpp__bOpen__pf);// 0x74453f4 0x78c3329460
	void UpdateAdDrugUI(int bpp__ID__pf, bool bpp__bIsExisted__pf);// 0x744452c 0x78c39ae940
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x744288c 0x78d1d604e0
	void StartFly(out const Vector bpp__start__pf__const, out const Vector bpp__end__pf__const);// 0x7442f08 0x78c39b1c80
	void Sing Set Point(bool bpp__isShow__pf, int bpp__key__pf, Vector bpp__location__pf, enum bpp__mainType__pf, enum bpp__childType__pf, int bpp__playerIndex__pf, int bpp__quality__pf);// 0x74405fc 0x78ca9913c0
	void SingSetPointLineFrame();// 0x74405e0 0x78c39b1ba0
	void ShowMap();// 0x74436c0 0x78c39b1ac0
	void SetScaleValue(float bpp__Value__pf);// 0x744245c 0x78cac1f580
	void SetNextCircle(float bpp__PosX__pf, float bpp__PosY__pf, float bpp__Range__pf);// 0x7442748 0x78c39b19e0
	void SetFinalCircle(float bpp__PosX__pf, float bpp__PosY__pf, float bpp__Range__pf);// 0x7443b90 0x78cac1fe40
	void SetDamageCircleVisibilty(bool bpp__IsVisibilty__pf);// 0x74423a4 0x78c39b1900
	void SetCurrentCircle(float bpp__PosX__pf, float bpp__PosY__pf, float bpp__Range__pf);// 0x7442604 0x78cac1f740
	void SetClamp(float bpp__X__pf, float bpp__Y__pf);// 0x744250c 0x78c2f7f740
	void SetAllMaskUIVisible(bool bpp__bIsVisible__pf);// 0x7444b60 0x78c39b1660
	void ResetLanguage();// 0x74429c0 0x78c34eeda0
	void RemoveMarkedPlayer(int bpp__ID__pf, enum bpp__Type__pf);// 0x744400c 0x78c39b0b00
	void RemoveFoTou();// 0x7442b80 0x78c39b0be0
	void RemoveActorLocation(int bpp__ID__pf);// 0x7443610 0x78c39b0cc0
	EventReply OnTouchStarted(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x7441778 0x78c39b12e0
	EventReply OnTouchMoved(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x744127c 0x78c39b13c0
	void OnTouchLeave(int bpp__pointIndex__pf);// 0x7440fdc 0x78c39b37a0
	EventReply OnTouchEnded(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__InTouchEvent__pf__const);// 0x744108c 0x78c39bf580
	void OnMouseLeave(out const PointerEvent bpp__MouseEvent__pf__const);// 0x7443a2c 0x78c39bf660
	void OnInitialized();// 0x744578c 0x78c39bf040
	void MarkLocationByMousePosition(Vector2D bpp__Position__pf);// 0x7441fe0 0x78c39beb00
	void IsNeedDrawVirtualLine(out bool bpp__Draw__pf);// 0x744208c 0x78c32b1ba0
	void IsMapShow(out bool bpp__isShow__pf);// 0x74416bc 0x78c32b05c0
	void InitTouTuoUI(int bpp__ID__pf, Vector bpp__location__pf, bool bpp__bIsInCave__pf);// 0x7445540 0x78c32b06a0
	void InitTouGongUI(int bpp__ID__pf, Vector bpp__location__pf, bool bpp__bIsInCave__pf);// 0x7444724 0x78c32b0940
	void InitTeamPlayer(int bpp__PlayerId__pf, FString bpp__name__pf__const, int bpp__Index__pf, int bpp__TeamMode__pf);// 0x74433c4 0x78c32b0a20
	void InitSacrificeUI(int bpp__ID__pf, Vector bpp__location__pf);// 0x7444968 0x78c32b0400
	void InitResourcePoint(int bpp__ID__pf, out const Vector bpp__location__pf__const);// 0x7445870 0x78c332c9c0
	void InitPlayer(int bpp__num__pf, int bpp__PlayerId__pf);// 0x74436f8 0x78c32b3180
	void InitParadropUI(int bpp__ID__pf, Vector bpp__location__pf, bool bpp__openstate__pf);// 0x7444d64 0x78cac1ce20
	void InitMoWenUI(int bpp__ID__pf, Vector bpp__location__pf, float bpp__WaitTime__pf);// 0x7444108 0x78c32b3260
	void InitKeyBoxUI(int bpp__ID__pf, Vector bpp__location__pf, bool bpp__bIsInCave__pf);// 0x7444c18 0x78c32b3340
	void InitFlyPointUI(int bpp__ID__pf, Vector bpp__location__pf);// 0x744462c 0x78c32b3420
	void InitDragonRockUI(int bpp__ID__pf, Vector bpp__location__pf);// 0x7444870 0x78c32b3960
	void InitAdDrugUI(int bpp__ID__pf, Vector bpp__location__pf, int bpp__SortPriority__pf, bool bpp__bIsInCave__pf);// 0x7444398 0x78c32b0160
	void Init(Vector2D bpp__original_level_size__pf, Vector2D bpp__original_map_size__pf, Vector2D bpp__show_map_size__pf, Vector bpp__center__pf, Texture2D* bpp__chinese_map__pf, Texture2D* bpp__english_map__pf, bool bpp__can_mark__pf);// 0x7442b9c 0x78cac1cd40
	void HiddenMap();// 0x74436dc 0x78c32b28c0
	void HasTeamPlayerMarkByNumber(int bpp__Number__pf, out MapPointBaseUI* bpp__Output__pf);// 0x7441dd0 0x78c7ee1740
	void HasTeamPlayerByNumber(int bpp__Number__pf, out MapPointBaseUI* bpp__Player__pf);// 0x7441ed8 0x78c32b2fc0
	void GetWaist(int bpp__ID__pf, out MapPointBaseUI* bpp__waist__pf);// 0x7440c84 0x78c32b1c80
	void GetTouchDistance(Vector2D bpp__pos1__pf, Vector2D bpp__pos2__pf, out float bpp__distance__pf, out Vector2D bpp__centerPos__pf);// 0x7441528 0x78cac1cb80
	void GetTeamPlayer(int bpp__ID__pf, out MapPointBaseUI* bpp__Player__pf);// 0x744229c 0x78c32b2460
	void GetTeamColorIndex(int bpp__TeamMode__pf, int bpp__TeamNum__pf, out PaperSprite* bpp__ref__pf);// 0x7440930 0x78c32b2000
	void getTeamColor(int bpp__TeamMode__pf, int bpp__TeamNum__pf, out LinearColor bpp__TeamColor__pf);// 0x7440d8c 0x78c32b4ca0
	void GetResourcePointWidget(int bpp__ID__pf, out MapPointBaseUI* bpp__Widget__pf);// 0x7441b68 0x78c32b5560
	void GetMarked(int bpp__ID__pf, enum bpp__Type__pf, out MapPointBaseUI* bpp__point__pf);// 0x7440a80 0x78c32b2a80
	void GetMark(int bpp__ID__pf, MapPointBaseUI* bpp__Target__pf, out MapPointBaseUI* bpp__Mark__pf);// 0x7442148 0x78c34e1580
	void GetHUD(out WuXiaXHUD* bpp__HUD__pf);// 0x744146c 0x78c32b2620
	void GetBuffPoint(int bpp__Index__pf, out MapPointBaseUI* bpp__Widget__pf);// 0x7441a60 0x78c32b1d60
	void GetAltar(int bpp__ID__pf, out MapPointBaseUI* bpp__Altar__pf);// 0x7440ed4 0x78c32b45a0
	void Event_SingSetPoint(bool bpp__isShow__pf, int bpp__key__pf, Vector bpp__location__pf, enum bpp__mainType__pf, enum bpp__childType__pf, int bpp__pointIndex__pf, int bpp__quality__pf);// 0x7444fb0 0x78c32bbbc0
	void Event_BeAttack(int64 bpp__AttackId__pf, int bpp__SkillID__pf, float bpp__AttackAngle__pf, Vector bpp__AttackPos__pf, Vector bpp__SelfPos__pf);// 0x744521c 0x78cac1fd60
	void EndFly();// 0x744300c 0x78c32bbe60
	void DeleteTeamPlayerMarkState(int bpp__num__pf);// 0x7443314 0x78c32b4920
	void CreateFoTou(Vector bpp__location__pf);// 0x7442ad0 0x78c32b4760
	void Construct();// 0x74429a4 0x78c2fd83c0
	void CmdTeleport(Vector2D bpp__loc__pf);// 0x7440884 0x78c32bbca0
	void ClearTeamPlayer(int bpp__Index__pf);// 0x7443560 0x78c32b4140
	void ClearPlayerInfo(int bpp__Number__pf);// 0x7441d20 0x78c32b4300
	void CheckRemoveActorLocation(int bpp__ID__pf);// 0x7441c70 0x78c32bb3e0
	void CheckActorLocation(int bpp__ID__pf, out const Vector bpp__location__pf__const);// 0x7442e08 0x78c32bb760
	void BuffInfoMapElement(const int bpp__key__pf__const, const BuffPointInfo bpp__value__pf__const);// 0x74429dc 0x78c32bdd00
	void BPCheckActorLocation(int bpp__ID__pf, Vector bpp__location__pf);// 0x7441968 0x78c32bdde0
	void AltarUpdateNum(int bpp__ID__pf, int bpp__num__pf);// 0x7443934 0x78c32bb220
	void AltarInitTag(int bpp__ID__pf, Vector bpp__location__pf, int bpp__num__pf);// 0x74437f0 0x78c3327da0

--------------------------------
Class: DrawCircleWidget_C.DrawCircleUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x330, Size: 0x8] 0x78c4ffe380
	UI_MiniMap_C* Parent;//[Offset: 0x338, Size: 0x8] 0x78c4ffe400
	Vector2D[] Points;//[Offset: 0x340, Size: 0x10] 0x78b9b070e0
	float Radius;//[Offset: 0x350, Size: 0x4] 0x78c4ffe500
	LinearColor DrawColor;//[Offset: 0x354, Size: 0x10] 0x78c4ffe580
	int Sides;//[Offset: 0x364, Size: 0x4] 0x78c4ffe600
	bool IsDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x78c4ffe680
	Texture2D* DrawPic;//[Offset: 0x370, Size: 0x8] 0x78c4ffe700
	WuXiaMiniMapWidget* K2Node_Event_Parent;//[Offset: 0x378, Size: 0x8] 0x78c4ffc680
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1] 0x78c4ffc700
	UI_MiniMap_C* K2Node_DynamicCast_AsUI_Mini_Map;//[Offset: 0x388, Size: 0x8] 0x78c4ffc780
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1] 0x78c4ffc800
	enum Temp_byte_Variable;//[Offset: 0x391, Size: 0x1] 0x78b9b07180
	enum Temp_byte_Variable;//[Offset: 0x392, Size: 0x1] 0x78b9b07220
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x394, Size: 0x38] 0x78c4ffc980
	float K2Node_Event_InDeltaTime;//[Offset: 0x3cc, Size: 0x4] 0x78c4ffca00
	Geometry CallFunc_GetCachedGeometry_ReturnValue;//[Offset: 0x3d0, Size: 0x38] 0x78c4ffca80
	float CallFunc_BreakVector2D_X;//[Offset: 0x408, Size: 0x4] 0x78c4ffcb00
	float CallFunc_BreakVector2D_Y;//[Offset: 0x40c, Size: 0x4] 0x78c4ffcb80
	enum K2Node_Select_Default;//[Offset: 0x410, Size: 0x1] 0x78b9b072c0
	float CallFunc_BreakVector2D_X;//[Offset: 0x414, Size: 0x4] 0x78c4ffcc80
	float CallFunc_BreakVector2D_Y;//[Offset: 0x418, Size: 0x4] 0x78c4ffcd00
	float CallFunc_BreakVector2D_X;//[Offset: 0x41c, Size: 0x4] 0x78c4ffcd80
	float CallFunc_BreakVector2D_Y;//[Offset: 0x420, Size: 0x4] 0x78c4ffce00
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x7418d64 0x78c3327e80
	void Init(WuXiaMiniMapWidget* bpp__Parent__pf);// 0x7418e7c 0x78c3327f60

--------------------------------
Class: DrawCircleExtendWidget_C.DrawCircleUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x330, Size: 0x8] 0x78c4ffcf80
	UI_MiniMap_C* Parent;//[Offset: 0x338, Size: 0x8] 0x78c4ffd000
	Vector2D[] Points;//[Offset: 0x340, Size: 0x10] 0x78b9b07400
	float Radius;//[Offset: 0x350, Size: 0x4] 0x78c4ffd100
	LinearColor DrawColor;//[Offset: 0x354, Size: 0x10] 0x78c4ffd180
	int Sides;//[Offset: 0x364, Size: 0x4] 0x78c4ffd200
	bool IsDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x78c4ffd280
	WuXiaMiniMapWidget* K2Node_Event_Parent;//[Offset: 0x370, Size: 0x8] 0x78c4ffd300
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1] 0x78c4ffd380
	UI_MiniMap_C* K2Node_DynamicCast_AsUI_Mini_Map;//[Offset: 0x380, Size: 0x8] 0x78c4ffd400
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1] 0x78c4ffd480
	enum Temp_byte_Variable;//[Offset: 0x389, Size: 0x1] 0x78b9b074a0
	enum Temp_byte_Variable;//[Offset: 0x38a, Size: 0x1] 0x78b9b07540
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x38c, Size: 0x38] 0x78c4ffd600
	float K2Node_Event_InDeltaTime;//[Offset: 0x3c4, Size: 0x4] 0x78c4ffd680
	Geometry CallFunc_GetCachedGeometry_ReturnValue;//[Offset: 0x3c8, Size: 0x38] 0x78c4ffb600
	float CallFunc_BreakVector2D_X;//[Offset: 0x400, Size: 0x4] 0x78c4ffb680
	float CallFunc_BreakVector2D_Y;//[Offset: 0x404, Size: 0x4] 0x78c4ffb700
	enum K2Node_Select_Default;//[Offset: 0x408, Size: 0x1] 0x78b9b075e0
	float CallFunc_BreakVector2D_X;//[Offset: 0x40c, Size: 0x4] 0x78c4ffb800
	float CallFunc_BreakVector2D_Y;//[Offset: 0x410, Size: 0x4] 0x78c4ffb880
	float CallFunc_BreakVector2D_X;//[Offset: 0x414, Size: 0x4] 0x78c4ffb900
	float CallFunc_BreakVector2D_Y;//[Offset: 0x418, Size: 0x4] 0x78c4ffb980
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x74185b4 0x78c2fda260
	void Init(WuXiaMiniMapWidget* bpp__Parent__pf);// 0x74186cc 0x78c3328120

--------------------------------
Class: DrawVirtualLineWidget_C.UserWidget.Widget.Visual.Object
	UI_MiniMap_C* Parent;//[Offset: 0x260, Size: 0x8] 0x78c4ffbc00
	Vector2D PlayerRelativeLocation;//[Offset: 0x268, Size: 0x8] 0x78c4ffbc80
	UI_MiniMap_C* K2Node_CustomEvent_parent;//[Offset: 0x270, Size: 0x8] 0x78c4ffbd00
	void OnPaint(out PaintContext bpp__Context__pf);// 0x741a074 0x78c3328200
	void Init(UI_MiniMap_C* bpp__Parent__pf);// 0x741a134 0x78c3328040

--------------------------------
Class: PopupStr_C.UserWidget.Widget.Visual.Object
	TextBlock* textStr;//[Offset: 0x260, Size: 0x8] 0x78bcf83600
	void SetInfo(FText NewParam);// 0x8a873f8 0x78c42d7b00

--------------------------------
Class: SoundActor_C.CheckSoundActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8] 0x78b8924180
	StaticMeshComponent* StaticMesh;//[Offset: 0x230, Size: 0x8] 0x78b8924100
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8] 0x78b8924080
	BP_WuXiaX_GameState_C* GameState;//[Offset: 0x240, Size: 0x8] 0x78b8924000
	WuXiaXHUD* HUD;//[Offset: 0x248, Size: 0x8] 0x78b8923f80
	float Timer;//[Offset: 0x250, Size: 0x4] 0x78b8923f00
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c42deda0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c42dee80
	void hide();// 0x8a873f8 0x78c42def60
	void UpdateLocation(Vector new_location);// 0x8a873f8 0x78c42df120
	void ExecuteUbergraph_SoundActor(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_WasRecentlyRendered_ReturnValue, float K2Node_Event_DeltaSeconds, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, float CallFunc_Subtract_FloatFloat_ReturnValue, SoundActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, SoundActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_WasRecentlyRendered_ReturnValue, Vector K2Node_Event_new_location, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c42df2e0

--------------------------------
Class: BP_WuXiaX_GameState_C.WuXiaXGameStateBase.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x568, Size: 0x8] 0x78cde5b000
	SceneComponent* DefaultSceneRoot;//[Offset: 0x570, Size: 0x8] 0x78bc6a5600
	void ExecuteUbergraph_BP_WuXiaX_GameState(int EntryPoint);// 0x8a873f8 0x78c2fd8740

--------------------------------
Class: PVPWaitResurrectionWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8923080
	UniformGridPanel* Background;//[Offset: 0x268, Size: 0x8] 0x78b8923000
	Button* ChangeVisionButton;//[Offset: 0x270, Size: 0x8] 0x78b8922f80
	Overlay* CountdownOverlay;//[Offset: 0x278, Size: 0x8] 0x78b8922f00
	TextBlock* Text1;//[Offset: 0x280, Size: 0x8] 0x78b8922e80
	TextBlock* Text2;//[Offset: 0x288, Size: 0x8] 0x78b8922e00
	TextBlock* TimeText;//[Offset: 0x290, Size: 0x8] 0x78b8922d80
	Button* WuXue;//[Offset: 0x298, Size: 0x8] 0x78b8922d00
	float WaitResurrectionTime;//[Offset: 0x2a0, Size: 0x4] 0x78b8922c80
	void SetChangeVisionEnable(bool isenable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c42d61a0
	void SetResurrectionTimeToText(float Time, int CallFunc_FTrunc_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78c42d6280
	void HideResurrectionTime(Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c42d6360
	void ShowResurrectionTime(Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c42d6440
	void SetResurrectionTime(float Time);// 0x8a873f8 0x78c42d6520
	void Construct();// 0x8a873f8 0x78c42d6600
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c42d66e0
	void BndEvt__ChangeVisionButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c42d67c0
	void BndEvt__WuXue_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c42d6980
	void ExecuteUbergraph_PVPWaitResurrectionWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, GameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_FClamp_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c42d6b40

--------------------------------
Class: BP_WuXiaX_PlayerController_C.WuXiaXPlayerController.WuXiaXPawnController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7a8, Size: 0x8] 0x78bdc5bb80
	bool TracingKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1] 0x78bdc5bb00
	WuXiaXBaseCharacter* TracingCharacter;//[Offset: 0x7b8, Size: 0x8] 0x78bdc5ba80
	void CheckTraceKiller(PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x8a873f8 0x78c36bf820
	void HandleTouchMove(TouchEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c36bf900
	void InpActEvt_MarkCurrentLocation_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c36bf9e0
	void InpActEvt_DeleteMark_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c36bfac0
	void InpActEvt_WidgetSwitch_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c36bfba0
	void InpActEvt_SwitchShowMainUI_K2Node_InputActionEvent(Key Key);// 0x8a873f8 0x78c36bfc80
	void DestroyMark();// 0x8a873f8 0x78c36bfd60
	void PlayKillerTrace(WuXiaXBaseCharacter* killer);// 0x8a873f8 0x78c36bff20
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c36bcb80
	void ExecuteUbergraph_BP_WuXiaX_PlayerController(int EntryPoint, bool Temp_bool_Variable, Key K2Node_InputActionEvent_Key, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Key K2Node_InputActionEvent_Key, Vector CallFunc_K2_GetActorLocation_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, PlayerSquadComponent* CallFunc_SquadComponent_Component, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, Key K2Node_InputActionEvent_Key, PlayerSquadComponent* CallFunc_SquadComponent_Component, HUD* CallFunc_GetHUD_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, Key K2Node_InputActionEvent_Key, WuXiaXBaseCharacter* K2Node_Event_Killer, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, MainGameUI* CallFunc_GetMainGameWidget_ReturnValue, MainGameUI* CallFunc_GetMainGameWidget_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_DeltaSeconds);// 0x8a873f8 0x78c36bcc60

--------------------------------
Class: WaterPlane_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78b8922680
	StaticMeshComponent* LowPlaneWorld;//[Offset: 0x228, Size: 0x8] 0x78b8922600
	StaticMeshComponent* LowPlane2;//[Offset: 0x230, Size: 0x8] 0x78b8922580
	StaticMeshComponent* LowPlane;//[Offset: 0x238, Size: 0x8] 0x78b8922500
	StaticMeshComponent* RefractionPlaneWorld;//[Offset: 0x240, Size: 0x8] 0x78b8922480
	StaticMeshComponent* RefractionPlane2;//[Offset: 0x248, Size: 0x8] 0x78b8922400
	StaticMeshComponent* RefractionPlane;//[Offset: 0x250, Size: 0x8] 0x78b8922380
	StaticMeshComponent* PlaneWorld;//[Offset: 0x258, Size: 0x8] 0x78b8922300
	StaticMeshComponent* Plane2;//[Offset: 0x260, Size: 0x8] 0x78b8922280
	StaticMeshComponent* Plane;//[Offset: 0x268, Size: 0x8] 0x78b8922200
	SceneComponent* DefaultSceneRoot;//[Offset: 0x270, Size: 0x8] 0x78b8922180
	int LOD;//[Offset: 0x278, Size: 0x4] 0x78b8924200
	void ChangeLodScript(bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c42dfe40
	void ChangeLod(int LOD, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_HasAuthority_ReturnValue);// 0x8a873f8 0x78c42dff20
	void UserConstructionScript();// 0x8a873f8 0x78c42dcaa0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c42dcb80
	void SetWaterLod(int Quality);// 0x8a873f8 0x78c42dcd40
	void ExecuteUbergraph_WaterPlane(int EntryPoint, int CallFunc_GetWuXiaXQualityLevel_ReturnValue, int K2Node_CustomEvent_Quality);// 0x8a873f8 0x78c42dcf00

--------------------------------
Class: KongJueGongGaoWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bcf84d80
	TextBlock* CanWinNumber;//[Offset: 0x268, Size: 0x8] 0x78bcf84d00
	TextBlock* WaitTime;//[Offset: 0x270, Size: 0x8] 0x78bcf84c80
	int maxnumber;//[Offset: 0x278, Size: 0x4] 0x78bcf84c00
	int CurrentNumber;//[Offset: 0x27c, Size: 0x4] 0x78bcf84b80
	void UpdateNumberText(int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c34e2c40
	void SetCurrentNumber(int Number);// 0x8a873f8 0x78c2f74300
	void SetMaxNumber(int Number);// 0x8a873f8 0x78c34e12e0
	void SetWaitTime(int Time, int S, int M, int Realtime, int CallFunc_Clamp_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78c34e2a80
	void Construct();// 0x8a873f8 0x78c42d6fa0
	void ExecuteUbergraph_KongJueGongGaoWidget(int EntryPoint, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue);// 0x8a873f8 0x78c42dd0c0

--------------------------------
Class: PickItemSlotWidget_C.InventorySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x448, Size: 0x8] 0x78c55c6380
	Image* BackgroundImage;//[Offset: 0x450, Size: 0x8] 0x78c55c8400
	CanvasPanel* CanvasPanel;//[Offset: 0x458, Size: 0x8] 0x78c55c8380
	Image* HoveredImage;//[Offset: 0x460, Size: 0x8] 0x78c55c8300
	Image* Image;//[Offset: 0x468, Size: 0x8] 0x78c55c8280
	Image* ItemImage;//[Offset: 0x470, Size: 0x8] 0x78c55c8200
	Image* ItemImageBg;//[Offset: 0x478, Size: 0x8] 0x78c55c8180
	TextBlock* ItemNameText;//[Offset: 0x480, Size: 0x8] 0x78c55c8100
	TextBlock* ItemNumberText;//[Offset: 0x488, Size: 0x8] 0x78c55c8080
	TextBlock* TextBlock;//[Offset: 0x490, Size: 0x8] 0x78c55c8000
	TextBlock* WuXueLearn;//[Offset: 0x498, Size: 0x8] 0x78c55c7f80
	int Level;//[Offset: 0x4a0, Size: 0x4] 0x78c55c7f00
	UserWidget* PickUI;//[Offset: 0x4a8, Size: 0x8] 0x78c55c7e80
	int Item Id;//[Offset: 0x4b0, Size: 0x4] 0x78c55c7e00
	WeaponLevelWidget_C* weaponlv;//[Offset: 0x4b8, Size: 0x8] 0x78c55c7d80
	void CreateWeaponLevel(WeaponLevelWidget_C* CallFunc_Create_ReturnValue, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c3668200
	void SetHighlight(bool Highlight, bool Temp_bool_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* K2Node_Select_Default);// 0x8a873f8 0x78c36682e0
	void PickUp(Character* CallFunc_GetPlayerCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, AutoPickWidget_C* K2Node_DynamicCast_AsAuto_Pick_Widget, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c36683c0
	void DropToBag(BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud);// 0x8a873f8 0x78c36684a0
	void Construct();// 0x8a873f8 0x78c36698c0
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c366aea0
	void RemoveItem();// 0x8a873f8 0x78c366af80
	void SetButtonDownState(bool IsButtonDown);// 0x8a873f8 0x78c366b060
	void SetItemLevel(int Level);// 0x8a873f8 0x78c366b140
	void FinishDrag();// 0x8a873f8 0x78c36699a0
	void CheckItemWUXUE(enum bagtype);// 0x8a873f8 0x78c3668660
	void SingItem();// 0x8a873f8 0x78c3668820
	void ExecuteUbergraph_PickItemSlotWidget(int EntryPoint, bool K2Node_Event_IsButtonDown, int K2Node_Event_Level, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_Event_ItemIndex, int K2Node_Event_Level, FText K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, enum K2Node_CustomEvent_bagtype, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetItemChildTypeById_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, GameInstance* CallFunc_GetGameInstance_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetItemDetailById_name, FString CallFunc_GetItemDetailById_detail, ActorComponent* CallFunc_GetGameComponent_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CanUseAcc_ReturnValue, GameItemInfo CallFunc_GetItemInfo_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Skill_CanUseSkillBook_ReturnValue, int CallFunc_GetMosaicLevelByItemId_constnum, int CallFunc_GetMosaicLevelByItemId_ReturnValue, bool CallFunc_CheckWeaponByItemId_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c3668900

--------------------------------
Class: WeaponLevelWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c6700
	Image* 1;//[Offset: 0x268, Size: 0x8] 0x78c55c6680
	Image* 2;//[Offset: 0x270, Size: 0x8] 0x78c55c6600
	Image* 3;//[Offset: 0x278, Size: 0x8] 0x78c55c6580
	Image* 4;//[Offset: 0x280, Size: 0x8] 0x78c55c6500
	Image* 5;//[Offset: 0x288, Size: 0x8] 0x78c55c6480
	void SetWeapoonLevel(int lv);// 0x8a873f8 0x78c3cb0860
	void SetHoleNum(int Num);// 0x8a873f8 0x78c3cb0a20
	void ExecuteUbergraph_WeaponLevelWidget(int EntryPoint, int K2Node_CustomEvent_lv, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_CustomEvent_Num, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3cb0be0

--------------------------------
Class: AutoPickWidget_C.PickBagUI.UserWidget.Widget.Visual.Object
	Image* Background;//[Offset: 0x260, Size: 0x8] 0x78b085a980
	Button* BtnPickClose;//[Offset: 0x268, Size: 0x8] 0x78b085aa00
	Button* BtnPickOpen;//[Offset: 0x270, Size: 0x8] 0x78b085aa80
	Button* Interactive;//[Offset: 0x278, Size: 0x8] 0x78b085ab00
	CanvasPanel* MainCanvas;//[Offset: 0x280, Size: 0x8] 0x78b085ab80
	CanvasPanel* PickCanvas;//[Offset: 0x288, Size: 0x8] 0x78b085ac00
	ScrollBox* PickScrollBox;//[Offset: 0x290, Size: 0x8] 0x78b085ac80
	WrapBox* WrapBox;//[Offset: 0x298, Size: 0x8] 0x78b085ad00
	<int,UserWidget*> BagSlots;//[Offset: 0x2a0, Size: 0x50] 0x78c3bceec0
	PickData[] AutoPickItems;//[Offset: 0x2f0, Size: 0x10] 0x78bc71a1a0
	float AutoPickTimer;//[Offset: 0x300, Size: 0x4] 0x78b085af00
	Vector PickLocation;//[Offset: 0x304, Size: 0xc] 0x78b085af80
	bool PickState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x78b085b000
	bool allowshow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1] 0x78b085b080
	float CheckInterval;//[Offset: 0x314, Size: 0x4] 0x78b085b100
	UserWidget*[] idleslots;//[Offset: 0x318, Size: 0x10] 0x78bc71a240
	int K2Node_Event_Index;//[Offset: 0x328, Size: 0x4] 0x78b085b200
	int K2Node_Event_Level;//[Offset: 0x32c, Size: 0x4] 0x78b085b280
	FString K2Node_Event_name;//[Offset: 0x330, Size: 0x10] 0x78b085b300
	int K2Node_Event_number;//[Offset: 0x340, Size: 0x4] 0x78b085b380
	int K2Node_Event_itemtype;//[Offset: 0x344, Size: 0x4] 0x78b085b400
	PaperSprite* K2Node_Event_icon;//[Offset: 0x348, Size: 0x8] 0x78b085b480
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x78b085b500
	UserWidget* CallFunc_Create_ReturnValue;//[Offset: 0x358, Size: 0x8] 0x78b085b580
	int Temp_int_Variable;//[Offset: 0x360, Size: 0x4] 0x78b0859500
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x364, Size: 0x38] 0x78b0859580
	float K2Node_Event_InDeltaTime;//[Offset: 0x39c, Size: 0x4] 0x78b0859600
	bool CallFunc_CheckOrNot_Check;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1] 0x78b0859680
	WuXiaXCharacter* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character;//[Offset: 0x3a8, Size: 0x8] 0x78b0859700
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1] 0x78b0859780
	PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component;//[Offset: 0x3b8, Size: 0x8] 0x78b0859800
	WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD;//[Offset: 0x3c0, Size: 0x8] 0x78b0859880
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1] 0x78b0859900
	bool CallFunc_IsShowPickUI_IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1] 0x78b0859980
	MainGameUI* K2Node_DynamicCast_AsMain_Game_Widget;//[Offset: 0x3d0, Size: 0x8] 0x78b0859a00
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x78b0859a80
	bool CallFunc_IsAutoPick_AutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1] 0x78b0859b00
	bool CallFunc_CheckOnPlane_notonplane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 0x1] 0x78b0859b80
	Button* K2Node_Select_Default;//[Offset: 0x3e0, Size: 0x8] 0x78b0859c00
	void UpdateBag(int bpp__Index__pf, int bpp__Level__pf, FString bpp__name__pf__const, int bpp__Number__pf, int bpp__itemtype__pf, PaperSprite* bpp__Icon__pf);// 0x74114b0 0x78c378cc60
	void UpdateAutoPick();// 0x7411120 0x78c378cd40
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x74116fc 0x78c9a4a0a0
	void ShowPickUI(bool bpp__show__pf);// 0x7411068 0x78c9a49540
	void SetAutoPickItems(out PickData[] bpp__PickItems__pf);// 0x741113c 0x78c9a48f20
	void RemoveBag(int bpp__Index__pf);// 0x7411400 0x78c9a48d60
	void RefreshBagSlot();// 0x74112dc 0x78c9a48ac0
	void RefreshAllBookState();// 0x74112c0 0x78c7619b60
	void OnWidgetVisibilityChanged();// 0x7411884 0x78c9a48820
	void IsShowPickUI(out bool bpp__isShow__pf);// 0x7411204 0x78c9a48740
	void IsPickBagVisible(out bool bpp__Visible__pf);// 0x7410fac 0x78c9a484a0
	void IsAutoPick(out bool bpp__AutoPick__pf);// 0x7410ef0 0x78c9a483c0
	bool GetIsOpened();// 0x7410be0 0x78c9a48040
	void GetIdleSlot(out UserWidget* bpp__ref__pf, out bool bpp__find__pf);// 0x7410c20 0x78c9a47f60
	void GetAutoBagSlotNode(int bpp__Index__pf, out UserWidget* bpp__SoftNode__pf);// 0x74112f8 0x78c9a47940
	void Construct();// 0x74116e0 0x78c9a47860
	void CheckOrNot(float bpp__DeltaTime__pf, out bool bpp__Check__pf);// 0x7410d2c 0x78c9a47780
	void CheckOnPlane(out bool bpp__notonplane__pf);// 0x7410e34 0x78c9a453a0
	void BP_UpdateItem(int bpp__Index__pf, int bpp__Level__pf, FString bpp__name__pf__const, int bpp__Number__pf, int bpp__itemtype__pf, PaperSprite* bpp__Icon__pf);// 0x74118a0 0x78c9a45800
	void BndEvt__PickState_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x7411868 0x78c9a40da0
	void BndEvt__Interactive_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x7411830 0x78c9a40860
	void BndEvt__Interactive_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x7411814 0x78c9a40940
	void BndEvt__BtnPickClose_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x741184c 0x78c9a4a340

--------------------------------
Class: EquipSlotWidget_C.InventorySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x448, Size: 0x8] 0x78c55c2180
	Image* BackgroundImage;//[Offset: 0x450, Size: 0x8] 0x78c55c4200
	Image* HoveredImage;//[Offset: 0x458, Size: 0x8] 0x78c55c4180
	Image* ItemImage;//[Offset: 0x460, Size: 0x8] 0x78c55c4100
	Image* Level1Image;//[Offset: 0x468, Size: 0x8] 0x78c55c4080
	Image* Level2Image;//[Offset: 0x470, Size: 0x8] 0x78c55c4000
	Image* Level3Image;//[Offset: 0x478, Size: 0x8] 0x78c55c3f80
	Image* Level4Image;//[Offset: 0x480, Size: 0x8] 0x78c55c3f00
	Image* LevelBackGroundImage;//[Offset: 0x488, Size: 0x8] 0x78c55c3e80
	Image* StateMaskImage;//[Offset: 0x490, Size: 0x8] 0x78c55c3e00
	void SetCostPer(float CostPer, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c3668c80
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, Character* CallFunc_GetPlayerCharacter_ReturnValue, DragItem_C* K2Node_DynamicCast_AsDrag_Item, bool K2Node_DynamicCast_bSuccess, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud);// 0x8a873f8 0x78c3668d60
	void ResetEquip(bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3668f20
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c366b220
	void RemoveItem();// 0x8a873f8 0x78c366b300
	void SetItemLevel(int Level);// 0x8a873f8 0x78c366b3e0
	void SetButtonDownState(bool IsButtonDown);// 0x8a873f8 0x78c366b4c0
	void FinishDrag();// 0x8a873f8 0x78c3669a80
	void Construct();// 0x8a873f8 0x78c3669b60
	void ExecuteUbergraph_EquipSlotWidget(int EntryPoint, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int K2Node_Event_ItemIndex, int K2Node_Event_Level, FText K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, int K2Node_Event_Level, enum K2Node_Select_Default, enum K2Node_Select_Default, float K2Node_Select_Default, enum K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, bool K2Node_Event_IsButtonDown, enum Temp_byte_Variable, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, enum Temp_byte_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c3669000

--------------------------------
Class: DropRegion_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c698c300
	delegate DropState;//[Offset: 0x268, Size: 0x10] 0x78c698c280
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, DragItem_C* K2Node_DynamicCast_AsDrag_Item, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3bbb060
	void Construct();// 0x8a873f8 0x78c3bbb140
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78c3bbb220
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78c3bbb3e0
	void ExecuteUbergraph_DropRegion(int EntryPoint, Geometry K2Node_Event_MyGeometry, PointerEvent K2Node_Event_PointerEvent, DragDropOperation* K2Node_Event_Operation, PointerEvent K2Node_Event_PointerEvent, DragDropOperation* K2Node_Event_Operation, DragItem_C* K2Node_DynamicCast_AsDrag_Item, bool K2Node_DynamicCast_bSuccess, DragItem_C* K2Node_DynamicCast_AsDrag_Item, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3bbb4c0
	void DropState__DelegateSignature(bool Enter);// 0x8a873f8 0x78c3bbb680

--------------------------------
Class: SafeItemSlotWidget_C.InventorySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x448, Size: 0x8] 0x78c55c2b00
	Image* BackgroundImage;//[Offset: 0x450, Size: 0x8] 0x78c55c2a80
	Image* HoveredImage;//[Offset: 0x458, Size: 0x8] 0x78c55c2a00
	Image* ItemImage;//[Offset: 0x460, Size: 0x8] 0x78c55c2980
	Image* ItemNameBg;//[Offset: 0x468, Size: 0x8] 0x78c55c2900
	TextBlock* ItemNameText;//[Offset: 0x470, Size: 0x8] 0x78c55c2880
	TextBlock* ItemNumberText;//[Offset: 0x478, Size: 0x8] 0x78c55c2800
	Image* LevelImage;//[Offset: 0x480, Size: 0x8] 0x78c55c2780
	int Level;//[Offset: 0x488, Size: 0x4] 0x78c55c2700
	Vector2D TouchPosition;//[Offset: 0x48c, Size: 0x8] 0x78c55c2680
	void GetItemType(out int Type, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, PlayerItemCtrlComponent* CallFunc_ItemCtrlComponent_Component, GameItemInfo CallFunc_GetItemInfo_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x8a873f8 0x78c3665800
	void UseItem(BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c36658e0
	void DropToBag();// 0x8a873f8 0x78c3665aa0
	void FinishDrag();// 0x8a873f8 0x78c3669c40
	void CheckItemWUXUE(enum bagtype);// 0x8a873f8 0x78c3665c60
	void SetItemLevel(int Level);// 0x8a873f8 0x78c366b5a0
	void SetButtonDownState(bool IsButtonDown);// 0x8a873f8 0x78c366b680
	void RemoveItem();// 0x8a873f8 0x78c366b760
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c366b840
	void Construct();// 0x8a873f8 0x78c3669d20
	void ExecuteUbergraph_SafeItemSlotWidget(int EntryPoint, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_CustomEvent_bagtype, int K2Node_Event_Level, bool K2Node_Event_IsButtonDown, int K2Node_Event_ItemIndex, int K2Node_Event_Level, FText K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, bool CallFunc_EqualEqual_IntInt_ReturnValue, enum K2Node_Select_Default, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78c940dec0

--------------------------------
Class: WeaponDetailWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c6986780
	MosaicHoleWidget_C* hole;//[Offset: 0x268, Size: 0x8] 0x78c6986700
	MosaicHoleWidget_C* hole;//[Offset: 0x270, Size: 0x8] 0x78c6986680
	MosaicHoleWidget_C* hole;//[Offset: 0x278, Size: 0x8] 0x78c6986600
	MosaicHoleWidget_C* hole;//[Offset: 0x280, Size: 0x8] 0x78c6986580
	MosaicHoleWidget_C* hole;//[Offset: 0x288, Size: 0x8] 0x78c6986500
	SkillStateWidget_C* skill;//[Offset: 0x290, Size: 0x8] 0x78c6986480
	SkillStateWidget_C* skill;//[Offset: 0x298, Size: 0x8] 0x78c6986400
	SkillStateWidget_C* skill;//[Offset: 0x2a0, Size: 0x8] 0x78c6986380
	SkillStateWidget_C* skill;//[Offset: 0x2a8, Size: 0x8] 0x78c6988400
	SkillStateWidget_C* skill;//[Offset: 0x2b0, Size: 0x8] 0x78c6988380
	SkillStateWidget_C* skill;//[Offset: 0x2b8, Size: 0x8] 0x78c6988300
	WeaponLevelWidget_C* WeaponLevelWidget;//[Offset: 0x2c0, Size: 0x8] 0x78c6988280
	int weaponindex;//[Offset: 0x2c8, Size: 0x4] 0x78c6988200
	int holenum;//[Offset: 0x2cc, Size: 0x4] 0x78c6988180
	int weaponid;//[Offset: 0x2d0, Size: 0x4] 0x78c6988100
	void CloseMosaic(int highidx, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MosaicHoleWidget_C* K2Node_Select_Default);// 0x8a873f8 0x78c3bb99a0
	void UpdateAccNum(int Num, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MosaicHoleWidget_C* K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c3bb9a80
	void UpdateSkillState(out const bool[] States);// 0x8a873f8 0x78c3bb9b60
	void Construct();// 0x8a873f8 0x78c3bb9c40
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c3bb9d20
	void RemoveItem(int index);// 0x8a873f8 0x78c3bb9e00
	void SetMosaicState();// 0x8a873f8 0x78c3bb9ee0
	void HighLightMosaic(int accid);// 0x8a873f8 0x78c3bba0a0
	void RevertMosaic();// 0x8a873f8 0x78c3bba260
	void ExecuteUbergraph_WeaponDetailWidget(int EntryPoint, int Temp_int_Array_Index_Variable, bool K2Node_SwitchInteger_CmpSuccess, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const bool[] K2Node_CustomEvent_states, int Temp_int_Variable, bool CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Event_ItemIndex, int K2Node_Event_Level, FText K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, int CallFunc_Percent_IntInt_ReturnValue, int K2Node_CustomEvent_index, MosaicHoleWidget_C* K2Node_Select_Default, int CallFunc_Percent_IntInt_ReturnValue, MosaicHoleWidget_C* K2Node_Select_Default, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, UIItemInfo CallFunc_GetSlotItemInfo_slotiteminfo, int CallFunc_GetMosaicDetailByItemId_level, int64[] CallFunc_GetMosaicDetailByItemId_accessories, int64 CallFunc_Array_Get_Item, MosaicHoleWidget_C* K2Node_Select_Default, bool CallFunc_GreaterEqual_Int64Int64_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_accid, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetMosaicTypeWithCheck_ReturnValue, MosaicHoleWidget_C* K2Node_Select_Default);// 0x8a873f8 0x78c3bba340

--------------------------------
Class: MosaicHoleWidget_C.InventorySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x448, Size: 0x8] 0x78c55c1f00
	Image* bg;//[Offset: 0x450, Size: 0x8] 0x78c55c1e80
	Image* Image;//[Offset: 0x458, Size: 0x8] 0x78c55c1e00
	TextBlock* TextBlock;//[Offset: 0x460, Size: 0x8] 0x78c55c1d80
	int slotindex;//[Offset: 0x468, Size: 0x4] 0x78c55c1d00
	bool hasacc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 0x1] 0x78c55c1c80
	int holestate;//[Offset: 0x470, Size: 0x4] 0x78c55c1c00
	int weaponidx;//[Offset: 0x474, Size: 0x4] 0x78c55c1b80
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, PlayerController* CallFunc_GetPlayerController_ReturnValue, DragItem_C* K2Node_DynamicCast_AsDrag_Item, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, InventorySlotWidget_C* K2Node_DynamicCast_AsInventory_Slot_Widget, bool K2Node_DynamicCast_bSuccess, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue, int CallFunc_ItemCtrl_GetTargetAccIndex_ReturnValue);// 0x8a873f8 0x78c3666b40
	void SetHoleState(int State);// 0x8a873f8 0x78c3666c20
	void Highlight(bool Close);// 0x8a873f8 0x78c3666d00
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c366bd80
	void Revert();// 0x8a873f8 0x78c3666de0
	void RemoveItem();// 0x8a873f8 0x78c366be60
	void CalcItemIndex(int weaponindex);// 0x8a873f8 0x78c3666fa0
	void Construct();// 0x8a873f8 0x78c3669fc0
	void ExecuteUbergraph_MosaicHoleWidget(int EntryPoint, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, int K2Node_CustomEvent_State, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_CustomEvent_close, int K2Node_Event_ItemIndex, int K2Node_Event_Level, FText K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, PaperSprite* K2Node_Select_Default, int K2Node_CustomEvent_weaponindex, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3667160

--------------------------------
Class: SkillStateWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8924400
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78b8924380
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8] 0x78b8924300
	FText ID;//[Offset: 0x278, Size: 0x18] 0x78b8924280
	void SkillLearned(bool Learned);// 0x8a873f8 0x78c3bb76a0
	void Construct();// 0x8a873f8 0x78c3bb7860
	void ExecuteUbergraph_SkillStateWidget(int EntryPoint, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_CustomEvent_learned, LinearColor K2Node_Select_Default, enum K2Node_Select_Default);// 0x8a873f8 0x78c3bb7a20

--------------------------------
Class: BagItemSlotWidget_C.InventorySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x448, Size: 0x8] 0x78c55c7900
	Image* BackgroundImage;//[Offset: 0x450, Size: 0x8] 0x78c55c7880
	Image* HoveredImage;//[Offset: 0x458, Size: 0x8] 0x78c55c7800
	Image* Image;//[Offset: 0x460, Size: 0x8] 0x78c55c7780
	Image* Image;//[Offset: 0x468, Size: 0x8] 0x78c55c7700
	Image* ItemImage;//[Offset: 0x470, Size: 0x8] 0x78c55c7680
	TextBlock* ItemNameText;//[Offset: 0x478, Size: 0x8] 0x78c55c7600
	TextBlock* ItemNumberText;//[Offset: 0x480, Size: 0x8] 0x78c55c7580
	Image* LevelImage;//[Offset: 0x488, Size: 0x8] 0x78c55c7500
	TextBlock* TextBlock_itemDetail;//[Offset: 0x490, Size: 0x8] 0x78c55c7480
	TextBlock* WuXueLearn;//[Offset: 0x498, Size: 0x8] 0x78c55c7400
	int Level;//[Offset: 0x4a0, Size: 0x4] 0x78c55c9480
	Vector2D TouchPosition;//[Offset: 0x4a4, Size: 0x8] 0x78c55c9400
	void GetItemType(out int Type, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x8a873f8 0x78c3667b00
	void UseItem(BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3667be0
	void DropToBag(BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3667cc0
	void SetItemLevel(int Level);// 0x8a873f8 0x78c366e4e0
	void SetButtonDownState(bool IsButtonDown);// 0x8a873f8 0x78c366e5c0
	void RemoveItem();// 0x8a873f8 0x78c366e6a0
	void SetItem(int itemindex, int Level, FText Name, int Number, int itemtype, PaperSprite* icon, PaperSprite* dragicon);// 0x8a873f8 0x78c366adc0
	void Construct();// 0x8a873f8 0x78c3669620
	void FinishDrag();// 0x8a873f8 0x78c3669700
	void CheckItemWUXUE(enum bagtype);// 0x8a873f8 0x78c3667e80
	void SetHoveredState(bool IsHovered);// 0x8a873f8 0x78c36697e0
	void ExecuteUbergraph_BagItemSlotWidget(int EntryPoint, bool Temp_bool_Variable, int K2Node_Event_Level, bool K2Node_Event_IsButtonDown, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_Event_ItemIndex, int K2Node_Event_Level, FText K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, PaperSprite* K2Node_Event_dragicon, enum Temp_byte_Variable, enum K2Node_CustomEvent_bagtype, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_IsHovered, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, BagItemSlotWidget_C* K2Node_DynamicCast_AsBag_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, UserWidget* Temp_object_Variable, BP_WuXiaX_Hud_C* CallFunc_GetHUD_hud, bool CallFunc_IsValid_ReturnValue, UserWidget* K2Node_Select_Default, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, UIItemInfo CallFunc_GetSlotItemInfo_slotiteminfo, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ActorComponent* CallFunc_GetGameComponent_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, GameItemInfo CallFunc_GetItemInfo_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Skill_CanUseSkillBook_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_CanUseAcc_ReturnValue, enum CallFunc_GetItemChildTypeById_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c3667f60

--------------------------------
Class: GlobalMessagePanel_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c9d80
	WidgetAnimation* SandstormAnimation;//[Offset: 0x268, Size: 0x8] 0x78c55c9d00
	WidgetAnimation* AnnouncementAnimation;//[Offset: 0x270, Size: 0x8] 0x78c55c9c80
	WidgetAnimation* TreasureBoxAnimation;//[Offset: 0x278, Size: 0x8] 0x78c55c9c00
	WidgetAnimation* MoWenAnimation;//[Offset: 0x280, Size: 0x8] 0x78c55c9b80
	HorizontalBox* AnnouncementHorizontalBox;//[Offset: 0x288, Size: 0x8] 0x78c55c9b00
	TextBlock* AnnouncementTextBlock;//[Offset: 0x290, Size: 0x8] 0x78c55c9a80
	TextBlock* MoWenTextBlock;//[Offset: 0x298, Size: 0x8] 0x78c55c9a00
	TextBlock* SandstormTimeTextBlock;//[Offset: 0x2a0, Size: 0x8] 0x78c55c9980
	WidgetSwitcher* SandstormWidgetSwitcher;//[Offset: 0x2a8, Size: 0x8] 0x78c55c9900
	int[] SandstormMessageShowTimeArray;//[Offset: 0x2b0, Size: 0x10] 0x78c3d2c2c0
	int SandstormMessageShowTimeIndex;//[Offset: 0x2c0, Size: 0x4] 0x78c55c9800
	bool bNeedAnnouncementMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1] 0x78c55c9780
	float AnnouncementMoveSpeed;//[Offset: 0x2c8, Size: 0x4] 0x78c55c9700
	void PlayAnnouncementAnimation(bool IsPlayBack, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x8a873f8 0x78c36bc800
	void OnAnnouncementAnimationFinished(float CallFunc_GetAnimationCurrentTime_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x8a873f8 0x78c36bc8e0
	void InitAnnouncementMessage(FText Content, bool CallFunc_TextIsEmpty_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c36bc9c0
	void Append Sandstorm Message(float WaitTime, bool bIsForceShow, bool Temp_bool_Variable, int CallFunc_FTrunc_ReturnValue, int Temp_int_Variable, FText CallFunc_Conv_IntToText_ReturnValue, int Temp_int_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x8a873f8 0x78c36b90e0
	void Append Global Message(enum GlobalMessageType, FText Content, bool K2Node_SwitchEnum_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue);// 0x8a873f8 0x78c36b91c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c36b9380
	void ExecuteUbergraph_GlobalMessagePanel(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, const Geometry CallFunc_GetPaintSpaceGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c36b9540

--------------------------------
Class: KeepActionWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bcf8fb80
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78bcf8fb00
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78bcf8fa80
	Image* ProgressBar;//[Offset: 0x278, Size: 0x8] 0x78bcf8fa00
	TextBlock* TimeText;//[Offset: 0x280, Size: 0x8] 0x78bcf8f980
	Border* UseTipBorder;//[Offset: 0x288, Size: 0x8] 0x78bcf8f900
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x290, Size: 0x8] 0x78bcf8f880
	bool IsOnActioning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78bcf8f800
	float actiontime;//[Offset: 0x29c, Size: 0x4] 0x78bc681080
	float CurrentTime;//[Offset: 0x2a0, Size: 0x4] 0x78bc681000
	int TouchedIndex;//[Offset: 0x2a4, Size: 0x4] 0x78bc680f80
	Vector2D TouchPosition;//[Offset: 0x2a8, Size: 0x8] 0x78bc680f00
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_VSize2D_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, PlayerKeepActionComponent* K2Node_DynamicCast_AsPlayer_Keep_Action_Component, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78cac198c0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78cac19540
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue);// 0x8a873f8 0x78c3327940
	void EndAction();// 0x8a873f8 0x78cac19b60
	void StartAction(float actiontime);// 0x8a873f8 0x78c6e7cf00
	void Update(int RPText, int LPText, float Temp_float_Variable, int CallFunc_Multiply_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Lerp_ReturnValue);// 0x8a873f8 0x78c3cbb4c0
	void ActionTick(float DeltaTime, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x8a873f8 0x78c6e7fc80
	void HideActionProgressBar();// 0x8a873f8 0x78c9a49000
	void ShowActionProgressBar();// 0x8a873f8 0x78c8e9af80
	void Construct();// 0x8a873f8 0x78c761a500
	void SetBrush_InterActor(enum Type);// 0x8a873f8 0x78c7ba61a0
	void SetBrush_InterScene(enum Type);// 0x8a873f8 0x78c3327a20
	void SetBrush_UseItem(enum Type);// 0x8a873f8 0x78c7ba8660
	void ExecuteUbergraph_KeepActionWidget(int EntryPoint, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, enum K2Node_CustomEvent_Type, enum K2Node_CustomEvent_Type, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_CustomEvent_Type, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3665640

--------------------------------
Class: KillMessagePanel_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55ca300
	VerticalBox* KillMessageVerticalBox;//[Offset: 0x268, Size: 0x8] 0x78c55ca280
	float KeepDuraction;//[Offset: 0x270, Size: 0x4] 0x78c55ca200
	float HideDuraction;//[Offset: 0x274, Size: 0x4] 0x78c55ca180
	float KeepHideDuraction;//[Offset: 0x278, Size: 0x4] 0x78c55ca100
	int MaxShowWidgetNum;//[Offset: 0x27c, Size: 0x4] 0x78c55ca080
	float CurrentTime;//[Offset: 0x280, Size: 0x4] 0x78c55ca000
	void GetAndUpdatePer(float DeltaTime, out float Per, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x8a873f8 0x78c3661e40
	void UpdateKillMessages(float DeltaTime, Vector2D FirstWidgetSize, float CallFunc_GetAndUpdatePer_Per, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, KillMessageWidget_C* K2Node_DynamicCast_AsKill_Message_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAnyChildren_ReturnValue, int Temp_int_Variable, float Temp_float_Variable, Widget* CallFunc_GetChildAt_ReturnValue, KillMessageWidget_C* K2Node_DynamicCast_AsKill_Message_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, float K2Node_Select_Default);// 0x8a873f8 0x78c3661f20
	void AppendKillMessage(FText KillerName, FText DeadName, enum CauseDyingType, float ExistedWidgetLength, int ExistedWidgetNum, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, enum K2Node_Select_Default, KillMessageWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue);// 0x8a873f8 0x78c3662000
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c36620e0
	void Construct();// 0x8a873f8 0x78c36622a0
	void ExecuteUbergraph_KillMessagePanel(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_FMax_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3662460

--------------------------------
Class: KillMessageWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bcf85980
	TextBlock* DeadTextBlock;//[Offset: 0x268, Size: 0x8] 0x78bcf85900
	TextBlock* KillerTextBlock;//[Offset: 0x270, Size: 0x8] 0x78bcf85880
	Border* KillMessageBorder;//[Offset: 0x278, Size: 0x8] 0x78bcf85800
	SizeBox* KillMessageSizeBox;//[Offset: 0x280, Size: 0x8] 0x78bcf85780
	TextBlock* KillTextBlock;//[Offset: 0x288, Size: 0x8] 0x78bcf85700
	TextBlock* LandTextBlock;//[Offset: 0x290, Size: 0x8] 0x78bcf85680
	WidgetSwitcher* OtherKillWidgetSwitcher;//[Offset: 0x298, Size: 0x8] 0x78bcf85600
	TextBlock* OutLeitaiTextBlock;//[Offset: 0x2a0, Size: 0x8] 0x78bcf85580
	TextBlock* OutSafeTextBlock;//[Offset: 0x2a8, Size: 0x8] 0x78bcf85500
	TextBlock* StifleTextBlock;//[Offset: 0x2b0, Size: 0x8] 0x78bcf85480
	FText KillerName;//[Offset: 0x2b8, Size: 0x18] 0x78bcf85400
	FText DeadName;//[Offset: 0x2d0, Size: 0x18] 0x78bcf85380
	enum CauseDyingType;//[Offset: 0x2e8, Size: 0x1] 0x78bc9e8940
	void UpdateTransparent(float TransparentPer, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x8a873f8 0x78c8e96440
	void UpdateOffset(float OffsetPer, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin);// 0x8a873f8 0x78c34eaea0
	void Construct();// 0x8a873f8 0x78c3bb7320
	void ExecuteUbergraph_KillMessageWidget(int EntryPoint, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, Widget* K2Node_Select_Default, bool CallFunc_TextIsEmpty_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0x8a873f8 0x78c7617940

--------------------------------
Class: KnockOutMessagePanel_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* ShowAnimation;//[Offset: 0x260, Size: 0x8] 0x78b8d5f080
	Border* Border_Dead;//[Offset: 0x268, Size: 0x8] 0x78b8d5f000
	Border* Border_Killer;//[Offset: 0x270, Size: 0x8] 0x78b8d5ef80
	Image* DeadIconImage;//[Offset: 0x278, Size: 0x8] 0x78b8d5ef00
	TextBlock* DeadNameTextBlock;//[Offset: 0x280, Size: 0x8] 0x78b8d5ee80
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x78b8d5ee00
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x78b8d5ed80
	Image* PlayerIconImage;//[Offset: 0x298, Size: 0x8] 0x78b8d5ed00
	TextBlock* TextBlock_Killer;//[Offset: 0x2a0, Size: 0x8] 0x78b8d5ec80
	void AppendKilledMessage(FString PlayerIconPath, FText KillerName, FString KillerIconPath, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue);// 0x8a873f8 0x78c36629a0
	void AppendKnockOutMessage(FString PlayerIconPath, FText DeadName, FString DeadIconPath, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue);// 0x8a873f8 0x78c9cf3180

--------------------------------
Class: MobileNoticeWidget_C.UI_MobileNoticeUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78c55ce580
	VerticalBox* VerticalBox;//[Offset: 0x288, Size: 0x8] 0x78c55ce500
	void Construct();// 0x8a873f8 0x78c3d1e240
	void OnNoticeMessage(TextBlock* noticeText);// 0x8a873f8 0x78c3d1e400
	void ExecuteUbergraph_MobileNoticeWidget(int EntryPoint, TextBlock* K2Node_Event_noticeText, SlateColor K2Node_MakeStruct_SlateColor, PanelSlot* CallFunc_AddChild_ReturnValue, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1e5c0

--------------------------------
Class: PickedLearnedMessagePanel_C.UserWidget.Widget.Visual.Object
	CanvasPanel* InnerPickLearnedCanvasPanel;//[Offset: 0x260, Size: 0x8] 0x78c6090400
	void AppendLearnedMessage(int LearnedItemId, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Widget* CallFunc_Array_Get_Item, PickedLearnedMessageWidget_C* CallFunc_Create_ReturnValue, PickedLearnedMessageWidget_C* K2Node_DynamicCast_AsPicked_Learned_Message_Widget, bool K2Node_DynamicCast_bSuccess, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_GetItemInfoById_name, FString CallFunc_GetItemInfoById_detail, enum CallFunc_GetItemInfoById_sexType, int CallFunc_GetItemInfoById_level);// 0x8a873f8 0x78c3d12fc0
	void AppendPickedMessage(int PickedItemId, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, Widget* CallFunc_Array_Get_Item, FString CallFunc_GetItemInfoById_name, FString CallFunc_GetItemInfoById_detail, enum CallFunc_GetItemInfoById_sexType, int CallFunc_GetItemInfoById_level, PickedLearnedMessageWidget_C* K2Node_DynamicCast_AsPicked_Learned_Message_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PickedLearnedMessageWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c3d13180

--------------------------------
Class: PickedLearnedMessageWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c7200
	WidgetAnimation* ShowAnimation;//[Offset: 0x268, Size: 0x8] 0x78c55c7180
	TextBlock* NameTextBlock;//[Offset: 0x270, Size: 0x8] 0x78c55c7100
	TextBlock* PickedLearnedTextBlock;//[Offset: 0x278, Size: 0x8] 0x78c55c7080
	bool bIsPicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78c55c7000
	FString Name;//[Offset: 0x288, Size: 0x10] 0x78c55c6f80
	int Level;//[Offset: 0x298, Size: 0x4] 0x78c55c6f00
	void SequenceEvent__ENTRYPOINTPickedLearnedMessageWidget();// 0x8a873f8 0x78c3c0ee80
	void CheckIsNeedJumpAnimTime(int Step, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetAnimationCurrentTime_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3c0ef60
	void SequenceEvent();// 0x8a873f8 0x78c3c0f040
	void Construct();// 0x8a873f8 0x78c3c0f200
	void ExecuteUbergraph_PickedLearnedMessageWidget(int EntryPoint, bool Temp_bool_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, int Temp_int_Variable, FText Temp_text_Variable, FText Temp_text_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_Select_Default, FText K2Node_Select_Default);// 0x8a873f8 0x78c3c0f3c0

--------------------------------
Class: QuickMsgWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c5e5ac80
	Image* Background;//[Offset: 0x268, Size: 0x8] 0x78c5e5ac00
	Image* border1;//[Offset: 0x270, Size: 0x8] 0x78c5e5ab80
	Image* border2;//[Offset: 0x278, Size: 0x8] 0x78c5e5ab00
	Image* border3;//[Offset: 0x280, Size: 0x8] 0x78c5e5aa80
	Image* border4;//[Offset: 0x288, Size: 0x8] 0x78c5e5aa00
	Image* bottom_line;//[Offset: 0x290, Size: 0x8] 0x78c5e5a980
	Button* BtnPanel1;//[Offset: 0x298, Size: 0x8] 0x78c5e5a900
	Button* BtnPanel2;//[Offset: 0x2a0, Size: 0x8] 0x78c5e5a880
	Button* Button;//[Offset: 0x2a8, Size: 0x8] 0x78c5e5a800
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78c5e5a780
	CanvasPanel* MainCanvas;//[Offset: 0x2b8, Size: 0x8] 0x78c5e5a700
	VerticalBox* MsgPanel1;//[Offset: 0x2c0, Size: 0x8] 0x78c5e5a680
	VerticalBox* MsgPanel2;//[Offset: 0x2c8, Size: 0x8] 0x78c5e5a600
	WidgetSwitcher* PanelSwitcher;//[Offset: 0x2d0, Size: 0x8] 0x78c5e5a580
	ScrollBox* ScrollBox1;//[Offset: 0x2d8, Size: 0x8] 0x78c5e5c600
	ScrollBox* ScrollBox2;//[Offset: 0x2e0, Size: 0x8] 0x78c5e5c580
	EditableText* TextMsg;//[Offset: 0x2e8, Size: 0x8] 0x78c5e5c500
	Image* top_line;//[Offset: 0x2f0, Size: 0x8] 0x78c5e5c480
	void Construct();// 0x8a873f8 0x78c3cbeda0
	void SendMessage(FString Message);// 0x8a873f8 0x78c3cbee80
	void BndEvt__BtnPanel1_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3cbef60
	void BndEvt__BtnPanel2_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3cbf040
	void SetActivePanel(int index);// 0x8a873f8 0x78c3cbf120
	void BndEvt__EditableText_392_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78c3cbf2e0
	void BndEvt__TextMsg_K2Node_ComponentBoundEvent_3_OnEditableTextChangedEvent__DelegateSignature(out const FText text);// 0x8a873f8 0x78c3cbf4a0
	void ExecuteUbergraph_QuickMsgWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, int Temp_int_Array_Index_Variable, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, QuickMsgText_C* CallFunc_Create_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, FString[] CallFunc_GetUserQickMsgList_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString K2Node_CustomEvent_Message, delegate K2Node_CreateDelegate_OutputDelegate, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, int K2Node_CustomEvent_index, PlayerController* CallFunc_GetPlayerController_ReturnValue, Button* K2Node_Select_Default, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, const FText K2Node_ComponentBoundEvent_Text, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Len_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Left_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_CheckFilterWords_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3cbf580

--------------------------------
Class: QuickMsgText_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c5e5ce00
	HorizontalBox* MsgItem;//[Offset: 0x268, Size: 0x8] 0x78c5e5cd80
	Image* splitline;//[Offset: 0x270, Size: 0x8] 0x78c5e5cd00
	TextBlock* TextID;//[Offset: 0x278, Size: 0x8] 0x78c5e5cc80
	TextBlock* TextMsg;//[Offset: 0x280, Size: 0x8] 0x78c5e5cc00
	delegate SendMessage;//[Offset: 0x288, Size: 0x10] 0x78c5e5cb80
	bool FadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78c5e5cb00
	float FadeOutTime;//[Offset: 0x29c, Size: 0x4] 0x78c5e5ca80
	float HoveredTime;//[Offset: 0x2a0, Size: 0x4] 0x78c5e5ca00
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3d11740
	void SetHovered(bool Hovered, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x8a873f8 0x78c3d11820
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3d11900
	void SetText(int ID, FString text, Margin K2Node_MakeStruct_Margin, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, VerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue);// 0x8a873f8 0x78c3d119e0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3d11ac0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c3d11ba0
	void ExecuteUbergraph_QuickMsgText(int EntryPoint, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, const PointerEvent K2Node_Event_MouseEvent, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3cbe780
	void SendMessage__DelegateSignature(FString Message);// 0x8a873f8 0x78c9a47b00

--------------------------------
Class: SkillHotKeyWidget_C.UserWidget.Widget.Visual.Object
	Image* CDImg;//[Offset: 0x260, Size: 0x8] 0x78c5b4ef80
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78c5b4f000
	Button* Skillbtn;//[Offset: 0x270, Size: 0x8] 0x78c5b4f080
	Image* Skillimg;//[Offset: 0x278, Size: 0x8] 0x78c5b4f100
	Image* UI_FX022;//[Offset: 0x280, Size: 0x8] 0x78c5b4f180
	Image* UI_FX023;//[Offset: 0x288, Size: 0x8] 0x78c5b4f200
	Image* UI_FX024;//[Offset: 0x290, Size: 0x8] 0x78c5b4f280
	bool IsSkillValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78c5b4f300
	float SkillMaxCD;//[Offset: 0x29c, Size: 0x4] 0x78c5b4f380
	float SkillCurrentCD;//[Offset: 0x2a0, Size: 0x4] 0x78c5b4f400
	float SkillMaxGCD;//[Offset: 0x2a4, Size: 0x4] 0x78c5b4f480
	float SkillCurrentGCD;//[Offset: 0x2a8, Size: 0x4] 0x78c5b4f500
	LinearColor NormalColor;//[Offset: 0x2ac, Size: 0x10] 0x78c5b4f580
	LinearColor CantUseColor;//[Offset: 0x2bc, Size: 0x10] 0x78c5b4f600
	int skillid;//[Offset: 0x2cc, Size: 0x4] 0x78c5b4f680
	MaterialInstanceDynamic* CDMat;//[Offset: 0x2d0, Size: 0x8] 0x78c5b4f700
	Key Key;//[Offset: 0x2d8, Size: 0x18] 0x78c5b4f780
	int index;//[Offset: 0x2f0, Size: 0x4] 0x78c5b4d700
	bool isSkillLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1] 0x78c5b4d780
	ButtonStyle ButtonStyle;//[Offset: 0x2f8, Size: 0x278] 0x78c5b4d800
	Margin ButtonPadding;//[Offset: 0x570, Size: 0x10] 0x78c5b4d880
	MaterialInterface* MaterialOverride;//[Offset: 0x580, Size: 0x8] 0x78c5b4d900
	bool bGenSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1] 0x78c5b4d980
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1] 0x78c5b4da00
	enum Temp_byte_Variable;//[Offset: 0x58a, Size: 0x1] 0x78b9b083a0
	SlateBrush K2Node_MakeStruct_SlateBrush;//[Offset: 0x590, Size: 0x88] 0x78c5b4db00
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1] 0x78c5b4db80
	enum Temp_byte_Variable;//[Offset: 0x619, Size: 0x1] 0x78b9b08440
	enum Temp_byte_Variable;//[Offset: 0x61a, Size: 0x1] 0x78b9b084e0
	float K2Node_CustomEvent_Time;//[Offset: 0x61c, Size: 0x4] 0x78c5b4dd00
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x620, Size: 0x38] 0x78c5b4dd80
	float K2Node_Event_InDeltaTime;//[Offset: 0x658, Size: 0x4] 0x78c5b4de00
	bool K2Node_CustomEvent_lock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1] 0x78c5b4de80
	WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD;//[Offset: 0x660, Size: 0x8] 0x78c5b4df00
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1] 0x78c5b4df80
	ButtonSlot* K2Node_DynamicCast_AsButton_Slot;//[Offset: 0x670, Size: 0x8] 0x78c5b4e000
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1] 0x78c5b4e080
	bool K2Node_Event_IsDesignTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 0x1] 0x78c5b4e100
	enum K2Node_Select_Default;//[Offset: 0x67a, Size: 0x1] 0x78b9b08580
	WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character;//[Offset: 0x680, Size: 0x8] 0x78c5b4e200
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1] 0x78c5b4e280
	enum Temp_byte_Variable;//[Offset: 0x689, Size: 0x1] 0x78b9b08620
	enum K2Node_Select_Default;//[Offset: 0x68a, Size: 0x1] 0x78b9b086c0
	void UpdateCurrentGCD(float bpp__Time__pf);// 0x743bfc4 0x78c33297e0
	void UpdateCurrentCD(float bpp__Time__pf);// 0x743c074 0x78c39acd40
	void UpdateCDBar();// 0x743c124 0x78ca990780
	void UpdateCD(float bpp__Time__pf);// 0x743c438 0x78c3329700
	void TickEvent(float bpp__Time__pf);// 0x743c388 0x78c39acc60
	void Tick(Geometry bpp__MyGeometry__pf, float bpp__InDeltaTime__pf);// 0x743c4e8 0x78ca990940
	void SetSkillUseState(bool bpp__CanUse__pf);// 0x743be5c 0x78c39acb80
	void SetSkill(int bpp__SkillID__pf, PaperSprite* bpp__Texture__pf, float bpp__MaxCDTime__pf, bool bpp__CanUseSkill__pf, bool bpp__locked__pf, int bpp__SkillProp__pf);// 0x743c15c 0x78ca990a20
	void SetMaxSkillCD(float bpp__MaxCD__pf);// 0x743bf14 0x78c39acaa0
	void ResetCDImg();// 0x743be40 0x78ca990b00
	void PreConstruct(bool bpp__IsDesignTime__pf);// 0x743c70c 0x78c39aff20
	EventReply OnCdImgHandled(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x743bc50 0x78ca990be0
	void LockCD(bool bpp__lock__pf);// 0x743c638 0x78c39afe40
	void ExecuteUbergraph_SkillHotKeyWidget(int bpp__EntryPoint__pf);// 0x743c7c4 0x78ca990e80
	void Construct();// 0x743c6f0 0x78c39afd60
	void ClearSkill();// 0x743c140 0x78ca991040
	void BndEvt__Skillbtn_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x743c61c 0x78c39afc80
	void BndEvt__Skillbtn_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x743c600 0x78ca991200

--------------------------------
Class: SpDownFullScreenWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c8780
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78c55c8700
	void StartPlayEffectFlash();// 0x8a873f8 0x78c3d12380
	void StopPlayEffectFlash();// 0x8a873f8 0x78c3d12540
	void ExecuteUbergraph_SpDownFullScreenWidget(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c3d12700

--------------------------------
Class: SpDownWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c8d00
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78c55c8c80
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78c55c8c00
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x78c55c8b80
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x78c55c8b00
	Image* ProgressBar;//[Offset: 0x288, Size: 0x8] 0x78c55c8a80
	TextBlock* TextBlock;//[Offset: 0x290, Size: 0x8] 0x78c55c8a00
	TextBlock* TimeText;//[Offset: 0x298, Size: 0x8] 0x78c55c8980
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x2a0, Size: 0x8] 0x78c55c8900
	bool bIsLowerThanDangerLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x78c55c8880
	void SetSpPercent(float percent);// 0x8a873f8 0x78c3d128c0
	void Construct();// 0x8a873f8 0x78c3d12a80
	void ExecuteUbergraph_SpDownWidget(int EntryPoint, float K2Node_CustomEvent_percent, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int64 CallFunc_Round64_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x8a873f8 0x78c3d12c40

--------------------------------
Class: TeamMessagePanel_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c8e80
	VerticalBox* TeamMessageVerticalBox;//[Offset: 0x268, Size: 0x8] 0x78c55c8e00
	void Append Team Message(FText TeammateName, FText OtherName, enum TeamMessageType, enum CauseDyingType, int causeID, int ExistedWidgetNum, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TeamMessageWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c3d13420
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3d135e0
	void ExecuteUbergraph_TeamMessagePanel(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Widget* CallFunc_GetChildAt_ReturnValue, TeamMessageWidget_C* K2Node_DynamicCast_AsTeam_Message_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, bool CallFunc_IsVisible_ReturnValue);// 0x8a873f8 0x78c3d137a0

--------------------------------
Class: TeamMessageWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c6d80
	WidgetAnimation* ShowHideAnimation;//[Offset: 0x268, Size: 0x8] 0x78c55c6d00
	TextBlock* ActionTextBlock;//[Offset: 0x270, Size: 0x8] 0x78c55c6c80
	TextBlock* ActionTextBlock;//[Offset: 0x278, Size: 0x8] 0x78c55c6c00
	TextBlock* CauseTextBlock;//[Offset: 0x280, Size: 0x8] 0x78c55c6b80
	TextBlock* NameTextBlock;//[Offset: 0x288, Size: 0x8] 0x78c55c6b00
	TextBlock* NameTextBlock;//[Offset: 0x290, Size: 0x8] 0x78c55c6a80
	Border* TeamMessageBorder;//[Offset: 0x298, Size: 0x8] 0x78c55c6a00
	FText TeammateName;//[Offset: 0x2a0, Size: 0x18] 0x78c55c6980
	FText OtherName;//[Offset: 0x2b8, Size: 0x18] 0x78c55c6900
	enum TeamMessageType;//[Offset: 0x2d0, Size: 0x1] 0x78c3d2c860
	enum CauseDyingType;//[Offset: 0x2d1, Size: 0x1] 0x78c3d2c7c0
	int causeID;//[Offset: 0x2d4, Size: 0x4] 0x78c55c6780
	void SequenceEvent__ENTRYPOINTTeamMessageWidget();// 0x8a873f8 0x78c3cb12e0
	void SequenceEvent();// 0x8a873f8 0x78c3cb13c0
	void Construct();// 0x8a873f8 0x78c3cb1580
	void ExecuteUbergraph_TeamMessageWidget(int EntryPoint, enum Temp_byte_Variable, enum Temp_byte_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, enum Temp_byte_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, enum Temp_byte_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, enum Temp_byte_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText K2Node_Select_Default, FText K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText K2Node_Select_Default, enum K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, FText K2Node_Select_Default, LinearColor Temp_struct_Variable, FText K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, LinearColor Temp_struct_Variable, FString CallFunc_GetItemDetailById_name, FString CallFunc_GetItemDetailById_detail, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetSkillNameById_ReturnValue, FString CallFunc_GetBuffNameById_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, enum Temp_byte_Variable, FText K2Node_Select_Default, LinearColor K2Node_Select_Default);// 0x8a873f8 0x78c3cb1740

--------------------------------
Class: TipMessagePanel_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* ShowAnimation;//[Offset: 0x260, Size: 0x8] 0x78c5e5e780
	Border* TipErrorMessageBorder;//[Offset: 0x268, Size: 0x8] 0x78c5e5ff80
	TextBlock* TipErrorMessageTextBlock;//[Offset: 0x270, Size: 0x8] 0x78c5e5ff00
	WidgetSwitcher* TipMessageWidgetSwitcher;//[Offset: 0x278, Size: 0x8] 0x78c5e5fe80
	Border* TipWaringMessageBorder;//[Offset: 0x280, Size: 0x8] 0x78c5e5fe00
	TextBlock* TipWaringMessageTextBlock;//[Offset: 0x288, Size: 0x8] 0x78c5e5fd80
	void AppendTipMessage(enum TipMessageType, FText Content, enum Temp_byte_Variable, enum Temp_byte_Variable, Widget* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue, TextBlock* K2Node_Select_Default);// 0x8a873f8 0x78c3d10400

--------------------------------
Class: PickBagWidget_C.PickBagUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c5e5f080
	CanvasPanel* CanvasPanel;//[Offset: 0x268, Size: 0x8] 0x78c5e5f000
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78c5e5ef80
	ScrollBox* ScrollBox;//[Offset: 0x278, Size: 0x8] 0x78c5e5ef00
	WrapBox* WrapBox;//[Offset: 0x280, Size: 0x8] 0x78c5e5ee80
	<int,PickItemSlotWidget_C*> BagSlots;//[Offset: 0x288, Size: 0x50] 0x78c5e2f4c0
	PickItemSlotWidget_C*[] idleslots;//[Offset: 0x2d8, Size: 0x10] 0x78c6042040
	void GetIdleSlot(out PickItemSlotWidget_C* Ref, out bool find, PickItemSlotWidget_C* CallFunc_Create_ReturnValue, PickItemSlotWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c3d10be0
	void RefreshAllBookState(int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, BagItemSlotWidget_C* K2Node_DynamicCast_AsBag_Item_Slot_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3d10cc0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3d10da0
	void RefreshBagSlot(int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c3d10e80
	void GetPickBagSlotNode(int index, out PickItemSlotWidget_C* SoftNode, PickItemSlotWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c3d10f60
	void RemoveBag(int index, PickItemSlotWidget_C* CallFunc_GetPickBagSlotNode_SoftNode, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c3d11040
	void UpdateBag(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon, FText CallFunc_Conv_StringToText_ReturnValue, PickItemSlotWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PickItemSlotWidget_C* CallFunc_GetIdleSlot_ref, bool CallFunc_GetIdleSlot_find, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c3d11120
	void Construct();// 0x8a873f8 0x78c3d112e0
	void BP_UpdateItem(int index, int Level, FString Name, int Number, int itemtype, PaperSprite* icon);// 0x8a873f8 0x78c3d114a0
	void ExecuteUbergraph_PickBagWidget(int EntryPoint, int K2Node_Event_Index, int K2Node_Event_Level, FString K2Node_Event_name, int K2Node_Event_number, int K2Node_Event_itemtype, PaperSprite* K2Node_Event_icon, int Temp_int_Variable, PickItemSlotWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x8a873f8 0x78c3d11580

--------------------------------
Class: MobileSkill_C.UI_MobileSkill.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x458, Size: 0x8] 0x78c6099e00
	Image* btn_bg;//[Offset: 0x460, Size: 0x8] 0x78c6099d80
	Image* btn_bg;//[Offset: 0x468, Size: 0x8] 0x78c6099d00
	Image* btn_bg;//[Offset: 0x470, Size: 0x8] 0x78c6099c80
	Image* btn_bg;//[Offset: 0x478, Size: 0x8] 0x78c6099c00
	Image* btn_bg;//[Offset: 0x480, Size: 0x8] 0x78c6099b80
	Button* Btn_Close;//[Offset: 0x488, Size: 0x8] 0x78c6099b00
	Button* Btn_General;//[Offset: 0x490, Size: 0x8] 0x78c6099a80
	Button* Btn_shenfa;//[Offset: 0x498, Size: 0x8] 0x78c6099a00
	Button* Btn_xinfa;//[Offset: 0x4a0, Size: 0x8] 0x78c6099980
	Button* btn_xinfa_fangyu;//[Offset: 0x4a8, Size: 0x8] 0x78c6099900
	Button* btn_xinfa_gongji;//[Offset: 0x4b0, Size: 0x8] 0x78c6099880
	Button* btn_xinfa_tesu;//[Offset: 0x4b8, Size: 0x8] 0x78c6099800
	Button* btn_xinfa_xueliang;//[Offset: 0x4c0, Size: 0x8] 0x78c6099780
	Button* Btn_zaxue;//[Offset: 0x4c8, Size: 0x8] 0x78c6099700
	Button* Btn_zhaoshi;//[Offset: 0x4d0, Size: 0x8] 0x78c6099680
	Button* btn_zhaoshi_changdao;//[Offset: 0x4d8, Size: 0x8] 0x78c6099600
	Button* btn_zhaoshi_changjian;//[Offset: 0x4e0, Size: 0x8] 0x78c6099580
	Button* btn_zhaoshi_changqiang;//[Offset: 0x4e8, Size: 0x8] 0x78c6099500
	Button* btn_zhaoshi_dandao;//[Offset: 0x4f0, Size: 0x8] 0x78c609b580
	Button* btn_zhaoshi_danjian;//[Offset: 0x4f8, Size: 0x8] 0x78c609b500
	Button* btn_zhaoshi_shuangci;//[Offset: 0x500, Size: 0x8] 0x78c609b480
	Button* btn_zhaoshi_shuangjian;//[Offset: 0x508, Size: 0x8] 0x78c609b400
	Button* btn_zhaoshi_tushou;//[Offset: 0x510, Size: 0x8] 0x78c609b380
	Button* btn_zhaoshi_zhongjian;//[Offset: 0x518, Size: 0x8] 0x78c609b300
	MobileSkill_EquipSlot_C* EquipSlot0;//[Offset: 0x520, Size: 0x8] 0x78c609b280
	MobileSkill_EquipSlot_C* EquipSlot1;//[Offset: 0x528, Size: 0x8] 0x78c609b200
	MobileSkill_EquipSlot_C* EquipSlot2;//[Offset: 0x530, Size: 0x8] 0x78c609b180
	MobileSkill_EquipSlot_C* GeneralEquipSlot;//[Offset: 0x538, Size: 0x8] 0x78c609b100
	MobileSkill_ZhaoShiSlot_C* GeneralSlot0;//[Offset: 0x540, Size: 0x8] 0x78c609b080
	MobileSkill_ZhaoShiSlot_C* GeneralSlot1;//[Offset: 0x548, Size: 0x8] 0x78c609b000
	MobileSkill_ZhaoShiSlot_C* GeneralSlot2;//[Offset: 0x550, Size: 0x8] 0x78c609af80
	MobileSkill_ZhaoShiSlot_C* GeneralSlot3;//[Offset: 0x558, Size: 0x8] 0x78c609af00
	MobileSkill_ZhaoShiSlot_C* GeneralSlot4;//[Offset: 0x560, Size: 0x8] 0x78c609ae80
	Image* Image;//[Offset: 0x568, Size: 0x8] 0x78c609ae00
	Image* Image;//[Offset: 0x570, Size: 0x8] 0x78c609ad80
	Image* Image;//[Offset: 0x578, Size: 0x8] 0x78c609ad00
	Image* Image;//[Offset: 0x580, Size: 0x8] 0x78c609ac80
	Image* Image;//[Offset: 0x588, Size: 0x8] 0x78c609ac00
	Image* Image;//[Offset: 0x590, Size: 0x8] 0x78c609ab80
	Image* Image;//[Offset: 0x598, Size: 0x8] 0x78c609ab00
	Image* Image;//[Offset: 0x5a0, Size: 0x8] 0x78c609aa80
	Image* Image;//[Offset: 0x5a8, Size: 0x8] 0x78c609aa00
	Image* Image;//[Offset: 0x5b0, Size: 0x8] 0x78c609a980
	Image* Image;//[Offset: 0x5b8, Size: 0x8] 0x78c609a900
	Image* Image;//[Offset: 0x5c0, Size: 0x8] 0x78c609a880
	Image* Image;//[Offset: 0x5c8, Size: 0x8] 0x78c609a800
	Image* Image;//[Offset: 0x5d0, Size: 0x8] 0x78c609a780
	Image* Image;//[Offset: 0x5d8, Size: 0x8] 0x78c609a700
	Image* Image;//[Offset: 0x5e0, Size: 0x8] 0x78c609a680
	Image* Image;//[Offset: 0x5e8, Size: 0x8] 0x78c609a600
	Image* Image;//[Offset: 0x5f0, Size: 0x8] 0x78c609a580
	Image* Image;//[Offset: 0x5f8, Size: 0x8] 0x78c609c600
	Image* Image;//[Offset: 0x600, Size: 0x8] 0x78c609c580
	Image* info_bg;//[Offset: 0x608, Size: 0x8] 0x78c609c500
	TextBlock* mizhuan_current_desc;//[Offset: 0x610, Size: 0x8] 0x78c609c480
	TextBlock* mizhuan_current_name;//[Offset: 0x618, Size: 0x8] 0x78c609c400
	UniformGridPanel* mizhuan_grid;//[Offset: 0x620, Size: 0x8] 0x78c609c380
	Image* mizhuan_split;//[Offset: 0x628, Size: 0x8] 0x78c609c300
	Spacer* pickexpend1;//[Offset: 0x630, Size: 0x8] 0x78c609c280
	UniformGridPanel* shenfa_grid;//[Offset: 0x638, Size: 0x8] 0x78c609c200
	TextBlock* TextBlock;//[Offset: 0x640, Size: 0x8] 0x78c609c180
	TextBlock* TextBlock;//[Offset: 0x648, Size: 0x8] 0x78c609c100
	TextBlock* TextBlock;//[Offset: 0x650, Size: 0x8] 0x78c609c080
	TextBlock* TextBlock;//[Offset: 0x658, Size: 0x8] 0x78c609c000
	TextBlock* TextBlock;//[Offset: 0x660, Size: 0x8] 0x78c609bf80
	WidgetSwitcher* TypeSwitch;//[Offset: 0x668, Size: 0x8] 0x78c609bf00
	TextBlock* xinfa_current_description;//[Offset: 0x670, Size: 0x8] 0x78c609be80
	Image* xinfa_current_icon;//[Offset: 0x678, Size: 0x8] 0x78c609be00
	TextBlock* xinfa_current_name;//[Offset: 0x680, Size: 0x8] 0x78c609bd80
	UniformGridPanel* xinfa_grid;//[Offset: 0x688, Size: 0x8] 0x78c609bd00
	UniformGridPanel* zaxue_grid;//[Offset: 0x690, Size: 0x8] 0x78c609bc80
	TextBlock* zhaoshi_current_desc;//[Offset: 0x698, Size: 0x8] 0x78c609bc00
	TextBlock* zhaoshi_current_name;//[Offset: 0x6a0, Size: 0x8] 0x78c609bb80
	UniformGridPanel* zhaoshi_grid;//[Offset: 0x6a8, Size: 0x8] 0x78c609bb00
	Image* zhaoshi_split;//[Offset: 0x6b0, Size: 0x8] 0x78c609ba80
	Button* zhaoshi_switchWeapon;//[Offset: 0x6b8, Size: 0x8] 0x78c609ba00
	MobileSkill_ZhaoShiSlot_C* zhaoshi_selected;//[Offset: 0x6c0, Size: 0x8] 0x78c609b980
	MobileSkill_XinFaSlot_C* xinfa_selected;//[Offset: 0x6c8, Size: 0x8] 0x78c609b900
	int current_zhaoshi_weapon;//[Offset: 0x6d0, Size: 0x4] 0x78c609b880
	int current_zhaoshi_mode;//[Offset: 0x6d4, Size: 0x4] 0x78c609b800
	int current_Active_index;//[Offset: 0x6d8, Size: 0x4] 0x78c609b780
	FString NewVar;//[Offset: 0x6e0, Size: 0x10] 0x78c609b700
	void UpdateDragState(bool isSelelct, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Array_Length_ReturnValue, Widget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, MobileSkill_ZhaoShiSlot_C* K2Node_DynamicCast_AsMobile_Skill_Zhao_Shi_Slot, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1b760
	void SetButtonStyle(Button* Object, bool Selected, int index, bool IsMainTab, int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, CanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess, CanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, Image* K2Node_DynamicCast_AsImage, bool K2Node_DynamicCast_bSuccess, Image* K2Node_DynamicCast_AsImage, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Image* K2Node_DynamicCast_AsImage, bool K2Node_DynamicCast_bSuccess, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, int Temp_int_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, bool CallFunc_SetImageTexture_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, SlateColor K2Node_MakeStruct_SlateColor, FString K2Node_Select_Default, bool CallFunc_SetImageTexture_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, int CallFunc_GetActiveWidgetIndex_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, bool K2Node_SwitchInteger_CmpSuccess, SlateColor K2Node_MakeStruct_SlateColor);// 0x8a873f8 0x78c3d1b840
	void SetSelectedMode(int Mode, int Temp_int_Variable, int Temp_int_Variable, Button* K2Node_Select_Default, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipWeaponMode_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetEquipWeaponMode_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Button* K2Node_Select_Default);// 0x8a873f8 0x78c3d1b920
	void SetSelectedSkill(MobileSkill_ZhaoShiSlot_C* SkillSlot, bool Hovered, FString CallFunc_GetSkillDetailInfo_name, FString CallFunc_GetSkillDetailInfo_description, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MobileSkill_EquipSlot_C* K2Node_Select_Default, int CallFunc_GetActiveWidgetIndex_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3d1ba00
	void SetActivePanel(int ActiveIndex, int Temp_int_Variable, int Temp_int_Variable, const Button* K2Node_Select_Default, const Button* K2Node_Select_Default);// 0x8a873f8 0x78c3d1bae0
	void GetXinFaSlot(int skillid, out MobileSkill_XinFaSlot_C* Slot, int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MobileSkill_XinFaSlot_C* K2Node_DynamicCast_AsMobile_Skill_Xin_Fa_Slot, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3d1bbc0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c3d1bca0
	void RefreshHovered(bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3d1bd80
	void GetMainGameWidget(out MainGameWidget_C* MainGameWidget, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3d1be60
	void GetEquipSkillSlot(int index, out MobileSkill_EquipSlot_C* EquipSkillSlot, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3d1bf40
	void GetSkillSlot(int skillid, out MobileSkill_ZhaoShiSlot_C* SkillSlot, int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, MobileSkill_ZhaoShiSlot_C* K2Node_DynamicCast_AsMobile_Skill_Zhao_Shi_Slot, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3d1c020
	void Construct();// 0x8a873f8 0x78c3d1c100
	void BndEvt__btn_Q_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1c1e0
	void BndEvt__btn_E_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1c2c0
	void BndEvt__btn_R_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1c480
	void OnEquipSkill(int slotindex, int skillid, PaperSprite* icon);// 0x8a873f8 0x78c3d1c560
	void AddActiveSkill(int skillid);// 0x8a873f8 0x78c3d1c640
	void AddPassiveSkill(int skillid);// 0x8a873f8 0x78c3d1c720
	void OnEquipMiZhuan(int skillid, PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78c3d1c800
	void OnEquipXinFa(int skillid, PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78c3d1c8e0
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_18_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d1c9c0
	void BndEvt__btn_zhaoshi_tushou_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d190e0
	void BndEvt__btn_zhaoshi_danjian_K2Node_ComponentBoundEvent_20_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d191c0
	void BndEvt__btn_zhaoshi_dandao_K2Node_ComponentBoundEvent_21_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d192a0
	void BndEvt__btn_zhaoshi_shuangjian_K2Node_ComponentBoundEvent_22_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19380
	void BndEvt__btn_zhaoshi_shuangci_K2Node_ComponentBoundEvent_23_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19460
	void BndEvt__btn_zhaoshi_changjian_K2Node_ComponentBoundEvent_24_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19540
	void BndEvt__btn_zhaoshi_changdao_K2Node_ComponentBoundEvent_25_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19620
	void BndEvt__btn_zhaoshi_zhongjian_K2Node_ComponentBoundEvent_26_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19700
	void BndEvt__btn_zhaoshi_changqiang_K2Node_ComponentBoundEvent_27_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d197e0
	void BndEvt__Btn_zaxue_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d198c0
	void BndEvt__Btn_shenfa_K2Node_ComponentBoundEvent_9_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d199a0
	void BndEvt__Btn_xinfa_K2Node_ComponentBoundEvent_10_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19a80
	void BndEvt__Btn_General_K2Node_ComponentBoundEvent_11_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19b60
	void BndEvt__Btn_zhaoshi_K2Node_ComponentBoundEvent_12_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c940b4c0
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3d19d20
	void ClearAllSkill();// 0x8a873f8 0x78c3d19e00
	void ClearOhterDelete(int slot_index);// 0x8a873f8 0x78c3d19ee0
	void CloseSkillExchangeTip();// 0x8a873f8 0x78c3d19fc0
	void ClearAllState();// 0x8a873f8 0x78c3d1a180
	void OnSelectXinFa(int skillid, PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78c3d1a340
	void ExecuteUbergraph_MobileSkill(int EntryPoint, int K2Node_Event_slotIndex, int K2Node_Event_SkillId, PaperSprite* K2Node_Event_icon, int K2Node_Event_SkillId, MobileSkill_EquipSlot_C* CallFunc_GetEquipSkillSlot_EquipSkillSlot, int K2Node_Event_SkillId, MainGameWidget_C* CallFunc_GetMainGameWidget_MainGameWidget, MobileSkill_ZhaoShiSlot_C* CallFunc_GetSkillSlot_SkillSlot, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_SkillId, PaperSprite* K2Node_Event_icon, FString K2Node_Event_name, FString K2Node_Event_description, int K2Node_Event_SkillId, PaperSprite* K2Node_Event_icon, FString K2Node_Event_name, FString K2Node_Event_description, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, MobileSkill_XinFaSlot_C* CallFunc_GetXinFaSlot_Slot, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, int CallFunc_GetActiveWidgetIndex_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, MobileSkill_ZhaoShiSlot_C* CallFunc_GetSkillSlot_SkillSlot, MobileSkill_ZhaoShiSlot_C* CallFunc_GetSkillSlot_SkillSlot, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* CallFunc_GetMainGameWidget_MainGameWidget, MainGameWidget_C* CallFunc_GetMainGameWidget_MainGameWidget, MobileSkill_ZhaoShiSlot_C* CallFunc_GetSkillSlot_SkillSlot, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNextSwitchWeaponIndex_weaponIndex, bool CallFunc_Greater_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, WuXiaXCharacter* CallFunc_GetOwningCharacter_ReturnValue, int CallFunc_GetEquipWeaponMode_ReturnValue, int K2Node_Event_slot_index, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_Event_SkillId, PaperSprite* K2Node_Event_icon, FString K2Node_Event_name, FString K2Node_Event_description, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, MobileSkill_XinFaSlot_C* CallFunc_GetXinFaSlot_Slot, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput);// 0x8a873f8 0x78c3d1a420

--------------------------------
Class: MobileSkill_ZhaoShiSlot_C.UI_MobileSkill_ZhaoShiSlot.UI_MobileUIFrame.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8] 0x78c698de00
	Image* Drag;//[Offset: 0x278, Size: 0x8] 0x78c698dd80
	Image* icon;//[Offset: 0x280, Size: 0x8] 0x78c698dd00
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x78c698dc80
	Image* Img_bg;//[Offset: 0x290, Size: 0x8] 0x78c698dc00
	Image* Img_equiped;//[Offset: 0x298, Size: 0x8] 0x78c698db80
	Image* Img_hovered;//[Offset: 0x2a0, Size: 0x8] 0x78c698db00
	bool isLearned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x78c698da80
	bool isEquiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1] 0x78c698da00
	bool isSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1] 0x78c698d980
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78c3bbeda0
	void UpdateDragSelected(bool Selected);// 0x8a873f8 0x78c3bbee80
	void OnHighlightedEnd();// 0x8a873f8 0x78c3bbef60
	void OnHighlighted(TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x8a873f8 0x78c3bbf040
	void SetEquiped(bool Equiped, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3bbf120
	void SetHovered(bool Hovered, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3bbf200
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation, DragSkillWidget_C* CallFunc_Create_ReturnValue, DragSkill_C* CallFunc_CreateDragDropOperation_ReturnValue, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, const Vector2D Temp_struct_Variable);// 0x8a873f8 0x78c3bbf2e0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_DetectDragIfPressed_ReturnValue);// 0x8a873f8 0x78c3bbf3c0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, int CallFunc_GetActiveWidgetIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EquipMiZhuan_ReturnValue);// 0x8a873f8 0x78c3bbf4a0
	void SetIcon(Texture2D* icon, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3bbf580
	void GetMobileSkillUI(out MobileSkill_C* MobileSkill, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3bbf660
	void UpdateUI(PaperSprite* icon);// 0x8a873f8 0x78c3bbf740
	void Learned(bool Learned);// 0x8a873f8 0x78c3bbf820
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78c3bbf9e0
	void UpdateSkillProp(int skillprop);// 0x8a873f8 0x78c3bbfba0
	void ExecuteUbergraph_MobileSkill_ZhaoShiSlot(int EntryPoint, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* K2Node_Event_icon, bool K2Node_Event_learned, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, float K2Node_Select_Default, const PointerEvent K2Node_Event_PointerEvent, DragDropOperation* K2Node_Event_Operation, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, int K2Node_Event_skillprop, PaperSprite* K2Node_Select_Default);// 0x8a873f8 0x78c3bbfc80

--------------------------------
Class: DragSkillWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c698bf00
	Image* BackgroundImage;//[Offset: 0x268, Size: 0x8] 0x78c698be80
	Image* SkillImage;//[Offset: 0x270, Size: 0x8] 0x78c698be00
	Image* icon;//[Offset: 0x278, Size: 0x8] 0x78c698bd80
	delegate OnDestroy;//[Offset: 0x280, Size: 0x10] 0x78c698bd00
	void Construct();// 0x8a873f8 0x78c3bbcfe0
	void Destruct();// 0x8a873f8 0x78c3bbd0c0
	void ExecuteUbergraph_DragSkillWidget(int EntryPoint);// 0x8a873f8 0x78c3bbd280
	void OnDestroy__DelegateSignature();// 0x8a873f8 0x78c3bbd440

--------------------------------
Class: DragSkill_C.DragDropOperation.Object
	enum SkillEquipType;//[Offset: 0x88, Size: 0x1] 0x78bd42e700
	int index;//[Offset: 0x8c, Size: 0x4] 0x78ba93f900
	int ID;//[Offset: 0x90, Size: 0x4] 0x78ba93f880
	void Init(enum SkillEquipType, int index, int ID);// 0x8a873f8 0x78c3cb36c0

--------------------------------
Class: MobileSkill_EquipSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bdbd1800
	Button* Delete;//[Offset: 0x268, Size: 0x8] 0x78bdbd1780
	Button* exchange;//[Offset: 0x270, Size: 0x8] 0x78bdbd1700
	Button* exchange;//[Offset: 0x278, Size: 0x8] 0x78bdbd1680
	Image* icon;//[Offset: 0x280, Size: 0x8] 0x78bdbd1600
	Image* icon;//[Offset: 0x288, Size: 0x8] 0x78bdbd1580
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x78bdbd1500
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x78bdbd1480
	Image* Img_Background;//[Offset: 0x2a0, Size: 0x8] 0x78bdbd1400
	int EquipIndex;//[Offset: 0x2a8, Size: 0x4] 0x78bdbd1380
	bool IsHovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x78bdbd1300
	int skillid;//[Offset: 0x2b0, Size: 0x4] 0x78bdbd1280
	int NewSkillId;//[Offset: 0x2b4, Size: 0x4] 0x78bdbd1200
	void SetSelected(bool SetSelected);// 0x8a873f8 0x78c3c00160
	void OnHighlightedEnd();// 0x8a873f8 0x78c3c00240
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, enum Temp_byte_Variable, enum Temp_byte_Variable, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool Temp_bool_Variable, enum CallFunc_GetVisibility_ReturnValue, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c3c00320
	void OnHighlighted(TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x8a873f8 0x78c3c00400
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, DragSkill_C* K2Node_DynamicCast_AsDrag_Skill, bool K2Node_DynamicCast_bSuccess, MobileSkill_ZhaoShiSlot_C* K2Node_DynamicCast_AsMobile_Skill_Zhao_Shi_Slot, bool K2Node_DynamicCast_bSuccess, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, bool CallFunc_EquipMiZhuan_ReturnValue, bool CallFunc_EquipSkill_ReturnValue, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, int CallFunc_GetActiveWidgetIndex_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3c004e0
	void SetIcon(PaperSprite* icon, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3c005c0
	void GetMobileSkillUI(out MobileSkill_C* MobileSkill, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3c006a0
	void BndEvt__Button_95_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3c00780
	void HideDelete();// 0x8a873f8 0x78c3c00860
	void SetSelectingSkill(int skillid);// 0x8a873f8 0x78c3c00940
	void CloseExchangeTip();// 0x8a873f8 0x78c3c00a20
	void BndEvt__exchange_1_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3c00b00
	void BndEvt__exchange_2_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3c00cc0
	void HideExchange();// 0x8a873f8 0x78c3c00e80
	void ExecuteUbergraph_MobileSkill_EquipSlot(int EntryPoint, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, int K2Node_CustomEvent_skillid, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill);// 0x8a873f8 0x78c3c00f60

--------------------------------
Class: MobileSkill_XinFaSlot_C.UI_MobileSkill_XinFaSlot.UI_MobileUIFrame.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x268, Size: 0x8] 0x78b8926300
	Image* bg;//[Offset: 0x270, Size: 0x8] 0x78b8926280
	Image* icon;//[Offset: 0x278, Size: 0x8] 0x78b8926200
	TextBlock* Name;//[Offset: 0x280, Size: 0x8] 0x78b8926180
	Image* selectImage;//[Offset: 0x288, Size: 0x8] 0x78b8926100
	void SetHovered(MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3c01900
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, MobileSkill_C* CallFunc_GetMobileSkillUI_MobileSkill, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, PlayerSkillsComponent* CallFunc_SkillsComponent_Component, int64 CallFunc_Conv_IntToInt64_ReturnValue, bool CallFunc_IsHasSkill_ReturnValue);// 0x8a873f8 0x78c3c019e0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78c3c01ac0
	void GetMobileSkillUI(out MobileSkill_C* MobileSkill, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3c01ba0
	void Construct();// 0x8a873f8 0x78c3c01c80
	void UpdateUI(PaperSprite* icon, FString Name);// 0x8a873f8 0x78c3bbe780
	void SetPossesState(bool bIsPossess);// 0x8a873f8 0x78c3bbe940
	void ExecuteUbergraph_MobileSkill_XinFaSlot(int EntryPoint, PaperSprite* K2Node_Event_icon, FString K2Node_Event_name, FText CallFunc_Conv_StringToText_ReturnValue, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, bool K2Node_Event_bIsPossess);// 0x8a873f8 0x78c3bbeb00

--------------------------------
Class: TeamPlayerInfoWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c5e57100
	WidgetAnimation* ScaleShip;//[Offset: 0x268, Size: 0x8] 0x78c5e57080
	Image* Background;//[Offset: 0x270, Size: 0x8] 0x78c5e57000
	Button* BtnFollow;//[Offset: 0x278, Size: 0x8] 0x78c5e56f80
	ProgressBar* DyingHpProgressBar;//[Offset: 0x280, Size: 0x8] 0x78c5e56f00
	ProgressBar* FightHPProgressBar;//[Offset: 0x288, Size: 0x8] 0x78c5e56e80
	Image* FollowTipImage;//[Offset: 0x290, Size: 0x8] 0x78c5e56e00
	WidgetSwitcher* HpSwitcher;//[Offset: 0x298, Size: 0x8] 0x78c5e56d80
	Image* Img_WaistToken;//[Offset: 0x2a0, Size: 0x8] 0x78c5e56d00
	TextBlock* Name;//[Offset: 0x2a8, Size: 0x8] 0x78c5e56c80
	TextBlock* NumText;//[Offset: 0x2b0, Size: 0x8] 0x78c5e56c00
	PLayerTalkWidget_C* PLayerTalkWidget;//[Offset: 0x2b8, Size: 0x8] 0x78c5e56b80
	ProgressBar* ProgressBar;//[Offset: 0x2c0, Size: 0x8] 0x78c5e56b00
	Image* RightState;//[Offset: 0x2c8, Size: 0x8] 0x78c5e56a80
	SizeBox* SizeBox;//[Offset: 0x2d0, Size: 0x8] 0x78c5e56a00
	SizeBox* SizeBox;//[Offset: 0x2d8, Size: 0x8] 0x78c5e56980
	TextBlock* TextFollow;//[Offset: 0x2e0, Size: 0x8] 0x78c5e56900
	int Num;//[Offset: 0x2e8, Size: 0x4] 0x78c5e56880
	int ID;//[Offset: 0x2ec, Size: 0x4] 0x78c5e56800
	FString PlayerName;//[Offset: 0x2f0, Size: 0x10] 0x78c5e56780
	bool WaistTokenShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x78c5e56700
	bool AnimPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1] 0x78c5e56680
	enum PlayerWaistTokenState;//[Offset: 0x302, Size: 0x1] 0x78c6040c40
	bool IsJumpFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x303, Size: 0x1] 0x78c5e56580
	bool IsPlaneJumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x78c5e56500
	enum PlayerState;//[Offset: 0x305, Size: 0x1] 0x78c6040ba0
	int JumpFollowId;//[Offset: 0x308, Size: 0x4] 0x78c5e56400
	void TryTokenGuide(Character* CallFunc_GetPlayerCharacter_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_GetPlayerUniqueId_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c3cbda60
	void TryTeamerDieGuide(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_GetPlayerUniqueId_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c3cbdb40
	void SetFightHPPercent(float Value);// 0x8a873f8 0x78c3cbdc20
	void SetDyingHPPercent(float Value);// 0x8a873f8 0x78c3cbdd00
	void SetData(FString Name);// 0x8a873f8 0x78c3cbdde0
	void SetNumber(int Number, int teammode);// 0x8a873f8 0x78c3cbdec0
	void ClearPlayerInfo();// 0x8a873f8 0x78c3cbdfa0
	void SetTalk(bool chatting);// 0x8a873f8 0x78c3cbe080
	void UpdateWaistTokenState(enum State);// 0x8a873f8 0x78c3cbe160
	void Init(int Num, FString Name, int PlayerID, int teammode);// 0x8a873f8 0x78c3cbe240
	void WidgetAnimationEvt_ScaleShip_K2Node_WidgetAnimationEvent();// 0x8a873f8 0x78c3cbe320
	void WidgetAnimationEvt_ScaleShip_K2Node_WidgetAnimationEvent();// 0x8a873f8 0x78c3cbe400
	void BndEvt__BtnFollow_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3cbe4e0
	void SetFollowState(bool State);// 0x8a873f8 0x78c3cbe5c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3cbe6a0
	void SetFollowId(int followid);// 0x8a873f8 0x78c3cbadc0
	void SetMarkState(bool newstate);// 0x8a873f8 0x78c3cbaea0
	void SetPlayerState(enum newstate);// 0x8a873f8 0x78c3cbb060
	void SetFightSPPercent(float Value);// 0x8a873f8 0x78c3cbb220
	void ExecuteUbergraph_TeamPlayerInfoWidget(int EntryPoint, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, float K2Node_CustomEvent_Value, float K2Node_CustomEvent_Value, FString K2Node_CustomEvent_Name, FText CallFunc_Conv_StringToText_ReturnValue, int K2Node_CustomEvent_Number, int K2Node_CustomEvent_TeamMode, bool K2Node_CustomEvent_chatting, enum K2Node_CustomEvent_State, bool K2Node_SwitchEnum_CmpSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Team_HasLifePlayer_ReturnValue, int K2Node_CustomEvent_Num, FString K2Node_CustomEvent_Name, int K2Node_CustomEvent_playerId, int K2Node_CustomEvent_TeamMode, FText CallFunc_Conv_StringToText_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool Temp_bool_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool K2Node_CustomEvent_State, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, PlayerSquadComponent* CallFunc_SquadComponent_Component, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetPlayerUniqueId_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int K2Node_CustomEvent_followId, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_NewState, TeamPlayerInfoWidget_C* CallFunc_GetTeamPlayerInfoWidget_Widget, enum K2Node_CustomEvent_NewState, PaperSprite* K2Node_Select_Default, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Select_Default, float K2Node_CustomEvent_Value, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool Temp_bool_IsClosed_Variable, int CallFunc_Add_IntInt_ReturnValue, PaperSprite* K2Node_Select_Default, FText CallFunc_Conv_IntToText_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c3cbb300

--------------------------------
Class: PLayerTalkWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8998400
	WidgetAnimation* SoundAnim;//[Offset: 0x268, Size: 0x8] 0x78b8998380
	ProgressBar* ProgressBar;//[Offset: 0x270, Size: 0x8] 0x78b8998300
	float CurrentOpacity;//[Offset: 0x278, Size: 0x4] 0x78b8998280
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c37c7240
	void SetVoiceState(bool State);// 0x8a873f8 0x78c37c3a40
	void ExecuteUbergraph_PLayerTalkWidget(int EntryPoint, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsVisible_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool K2Node_CustomEvent_State);// 0x8a873f8 0x78c37c3c00

--------------------------------
Class: TeamPlayerHeadWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55cc900
	Image* Direction;//[Offset: 0x268, Size: 0x8] 0x78c55cc880
	TextBlock* Name;//[Offset: 0x270, Size: 0x8] 0x78c55cc800
	Image* PlayerState;//[Offset: 0x278, Size: 0x8] 0x78c55cc780
	SizeBox* SizeBox;//[Offset: 0x280, Size: 0x8] 0x78c55cc700
	TextBlock* TeamNum;//[Offset: 0x288, Size: 0x8] 0x78c55ce780
	int Num;//[Offset: 0x290, Size: 0x4] 0x78c55ce700
	int ID;//[Offset: 0x294, Size: 0x4] 0x78c55ce680
	Vector Location;//[Offset: 0x298, Size: 0xc] 0x78c55ce600
	void UpdateDraw();// 0x8a873f8 0x78c3cbcd40
	void Init(int Num, FString Name, int PlayerID, int teammode);// 0x8a873f8 0x78c3cbce20
	void SetPlayerState(enum newstate);// 0x8a873f8 0x78c3cbcf00
	void UpdateLocation(Vector Location);// 0x8a873f8 0x78c3cbcfe0
	void Construct();// 0x8a873f8 0x78c3cbd0c0
	void SetData(FString Name);// 0x8a873f8 0x78c3cbd1a0
	void ClearPlayerName(int Number);// 0x8a873f8 0x78c3cbd280
	void SetTeamMode(int teammode);// 0x8a873f8 0x78c3cbd440
	void ExecuteUbergraph_TeamPlayerHeadWidget(int EntryPoint, int K2Node_CustomEvent_Num, FString K2Node_CustomEvent_Name, int K2Node_CustomEvent_playerId, int K2Node_CustomEvent_TeamMode, bool K2Node_SwitchInteger_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, Vector K2Node_CustomEvent_Location, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_Greater_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors K2Node_MakeStruct_Anchors, FString K2Node_CustomEvent_Name, FText CallFunc_Conv_StringToText_ReturnValue, int K2Node_CustomEvent_Number, int K2Node_CustomEvent_TeamMode, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78c3cbd600

--------------------------------
Class: LastWinPlayerLeaveWidget_C.LastWinPlayerLeaveUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8d5f600
	Button* ConfirmCancel;//[Offset: 0x268, Size: 0x8] 0x78b8d5f580
	CanvasPanel* ConfirmPanel;//[Offset: 0x270, Size: 0x8] 0x78b8d5f500
	Button* ConfirmSure;//[Offset: 0x278, Size: 0x8] 0x78b8d5f480
	CanvasPanel* TimeBackPanel;//[Offset: 0x280, Size: 0x8] 0x78b8d5f400
	HorizontalBox* TimePanel;//[Offset: 0x288, Size: 0x8] 0x78b8d5f380
	TextBlock* TimeText;//[Offset: 0x290, Size: 0x8] 0x78b8d5f300
	float Time;//[Offset: 0x298, Size: 0x4] 0x78b8d5f280
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3662ee0
	void BndEvt__ConfirmSure_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3662fc0
	void BndEvt__ConfirmCancel_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3663180
	void InitEndTime(float Time);// 0x8a873f8 0x78c3663340
	void ExecuteUbergraph_LastWinPlayerLeaveWidget(int EntryPoint, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_time);// 0x8a873f8 0x78c3663420

--------------------------------
Class: TeamPlayerMarkPointWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bcf8be80
	Image* Direction;//[Offset: 0x268, Size: 0x8] 0x78bcf8be00
	Image* ImageDistance;//[Offset: 0x270, Size: 0x8] 0x78bcf8bd80
	Image* ImageFlag0;//[Offset: 0x278, Size: 0x8] 0x78bcf8bd00
	Image* ImageFlag1;//[Offset: 0x280, Size: 0x8] 0x78bcf8bc80
	Image* ImageFlag2;//[Offset: 0x288, Size: 0x8] 0x78bcf8bc00
	Image* ImagePoint;//[Offset: 0x290, Size: 0x8] 0x78bcf8bb80
	SizeBox* MarkCanvas;//[Offset: 0x298, Size: 0x8] 0x78bcf8bb00
	VerticalBox* MarkPanel;//[Offset: 0x2a0, Size: 0x8] 0x78bcf8ba80
	TextBlock* TextDistance;//[Offset: 0x2a8, Size: 0x8] 0x78bcf8ba00
	int Num;//[Offset: 0x2b0, Size: 0x4] 0x78bcf8b980
	int ID;//[Offset: 0x2b4, Size: 0x4] 0x78bcf8b900
	Vector Location;//[Offset: 0x2b8, Size: 0xc] 0x78bcf8b880
	int[] MarkFlags;//[Offset: 0x2c8, Size: 0x10] 0x78bc9e98e0
	enum MarkType;//[Offset: 0x2d8, Size: 0x1] 0x78bc9e95c0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c4702b60
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, PlayerSquadComponent* CallFunc_SquadComponent_Component, int CallFunc_GetPlayerUniqueId_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x8a873f8 0x78c4702000
	void GetDistance(Vector Location, out FText Distance, float PlayerCapsuleHeight, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Vector_GetAbs_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int64 CallFunc_FTrunc64_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c34ee080
	void SetMarkPointFlag(int Num, bool flag, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PaperSprite* K2Node_Select_Default, int CallFunc_Array_AddUnique_ReturnValue);// 0x8a873f8 0x78c4705560
	void SetMarkPoint(enum Type, Vector Location, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c4701e40
	void UpdateDraw();// 0x8a873f8 0x78c42d7a20
	void SetPlayerState(enum newstate);// 0x8a873f8 0x78c34eb840
	void Init(int Num, int PlayerID, int teammode);// 0x8a873f8 0x78c34e1120
	void Construct();// 0x8a873f8 0x78c34e2700
	void SetTeamMode(int teammode);// 0x8a873f8 0x78c3bb3a40
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3cbb3e0
	void ExecuteUbergraph_TeamPlayerMarkPointWidget(int EntryPoint, bool CallFunc_IsVisible_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXPawnController* K2Node_DynamicCast_AsWu_Xia_XPawn_Controller, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_NewState, Vector CallFunc_GetPawnLocation_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_GetDistance_Distance, PanelWidget* CallFunc_GetParent_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int K2Node_CustomEvent_Num, int K2Node_CustomEvent_playerId, int K2Node_CustomEvent_TeamMode, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors K2Node_MakeStruct_Anchors, int K2Node_CustomEvent_TeamMode, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FText CallFunc_Conv_IntToText_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_Greater_FloatFloat_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x8a873f8 0x78c3cbb5a0

--------------------------------
Class: TeamPlayerMarkPositionWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c646b580
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55ccd80
	Image* Image;//[Offset: 0x350, Size: 0x8] 0x78c55ccd00
	SizeBox* MarkCanvas;//[Offset: 0x358, Size: 0x8] 0x78c55ccc80
	VerticalBox* MarkPanel;//[Offset: 0x360, Size: 0x8] 0x78c55ccc00
	TextBlock* TextDistance;//[Offset: 0x368, Size: 0x8] 0x78c55ccb80
	int ID;//[Offset: 0x370, Size: 0x4] 0x78c55ccb00
	Vector Location;//[Offset: 0x374, Size: 0xc] 0x78c55cca80
	int Number;//[Offset: 0x380, Size: 0x4] 0x78c55cca00
	bool needshow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1] 0x78c55cc980
	void GetDistance(Vector location_, out FText Distance, float PlayerCapsuleHeight, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Vector_GetAbs_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int64 CallFunc_FTrunc64_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c3cbb760
	void UpdateDraw(bool CallFunc_IsVisible_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, WuXiaXPawnController* K2Node_DynamicCast_AsWu_Xia_XPawn_Controller, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_GetPawnLocation_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, FText CallFunc_GetDistance_Distance, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c3cbb840
	void UpdateLocation(Vector Location);// 0x8a873f8 0x78c3cbb920
	void Init(int ID, int Num);// 0x8a873f8 0x78c3cbba00
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3cbbbc0
	void ExecuteUbergraph_TeamPlayerMarkPositionWidget(int EntryPoint, int K2Node_CustomEvent_id, int K2Node_CustomEvent_Num, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c3cbbd80

--------------------------------
Class: MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: EnemyMark_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x260, Size: 0x8] 0x78bdc54780

--------------------------------
Class: ItemMark_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c9f00
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78c55c9e80
	void SetLevel(int lv);// 0x8a873f8 0x78c36653a0
	void ExecuteUbergraph_ItemMark(int EntryPoint, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, int K2Node_CustomEvent_lv, PaperSprite* K2Node_Select_Default);// 0x8a873f8 0x78c3665560

--------------------------------
Class: GuidePanelWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c473f500
	WidgetAnimation* TipAnim;//[Offset: 0x268, Size: 0x8] 0x78c473f480
	WidgetAnimation* CountDownAnim;//[Offset: 0x270, Size: 0x8] 0x78c473f400
	Button* BackButton;//[Offset: 0x278, Size: 0x8] 0x78c473f380
	Button* Cancel;//[Offset: 0x280, Size: 0x8] 0x78c473f300
	CanvasPanel* ConcertPanel;//[Offset: 0x288, Size: 0x8] 0x78c473f280
	TextBlock* CountDownText;//[Offset: 0x290, Size: 0x8] 0x78c473f200
	GuideMaskWidget_C* ForceGuideMaskWidget;//[Offset: 0x298, Size: 0x8] 0x78c473f180
	CanvasPanel* ForceGuideWidgetPanel;//[Offset: 0x2a0, Size: 0x8] 0x78c473f100
	GuideTaskPanelWidget_C* GuideTaskPanelWidget;//[Offset: 0x2a8, Size: 0x8] 0x78c473f080
	GuideTeachMapWidget_C* GuideTeachMapWidget;//[Offset: 0x2b0, Size: 0x8] 0x78c473f000
	GuideTeachSpriteWidget_C* GuideTeachSpriteWidget;//[Offset: 0x2b8, Size: 0x8] 0x78c473ef80
	CanvasPanel* LockWidgetPanel;//[Offset: 0x2c0, Size: 0x8] 0x78c473ef00
	Button* Sure;//[Offset: 0x2c8, Size: 0x8] 0x78c473ee80
	CanvasPanel* TipPanel;//[Offset: 0x2d0, Size: 0x8] 0x78c473ee00
	TextBlock* TipTextBlock;//[Offset: 0x2d8, Size: 0x8] 0x78c473ed80
	WalkGuideTip_C* WalkGuideTip;//[Offset: 0x2e0, Size: 0x8] 0x78c473ed00
	CanvasPanel* WeakGuideWidgetPanel;//[Offset: 0x2e8, Size: 0x8] 0x78c473ec80
	MainGameWidget_C* MainGameWidget;//[Offset: 0x2f0, Size: 0x8] 0x78c473ec00
	<enum,GuideLockWidget_C*> LockWidgetMap;//[Offset: 0x2f8, Size: 0x50] 0x78c3c21c00
	<enum,GuideWidgetWidget_C*> WeakGuideWidgetMap;//[Offset: 0x348, Size: 0x50] 0x78c3c21e40
	GuideWidgetWidget_C* ForceGuideWidgetWidget;//[Offset: 0x398, Size: 0x8] 0x78c473e980
	delegate ExitGuide;//[Offset: 0x3a0, Size: 0x10] 0x78c473e900
	void PlayTip(FText TipContent, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c366f2e0
	void HideWalkGuideTip();// 0x8a873f8 0x78c366f3c0
	void ShowWalkGuideTip();// 0x8a873f8 0x78c366f4a0
	void UpdateCountDown(int Countdown, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x8a873f8 0x78c366f580
	void ShowCountDown(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c366f660
	void IsGuideWidgetHided(enum BindWidgetType, out bool IsHided, bool CallFunc_Map_Remove_ReturnValue, GuideWidgetWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366f740
	void IsTeachMapClosed(out bool IsClosed, bool CallFunc_IsClosed_IsClosed);// 0x8a873f8 0x78c366f820
	void TaskPanelFinishTask(FText taskName, out bool IsAllFinished, bool CallFunc_FinishTask_IsAllFinished);// 0x8a873f8 0x78c366f900
	void TaskPanelInitTasks(FText StageTaskName, out FText[] TaskNames);// 0x8a873f8 0x78c366f9e0
	void ShowTeachMap(enum TeachMapType);// 0x8a873f8 0x78c366fac0
	void ShowRemind(FText RemindContent, float HideDelay);// 0x8a873f8 0x78c366fba0
	void HideGuideWidgetInner(enum BindWidgetType, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, GuideWidgetWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_SetGamePaused_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366fc80
	void HideGuideWidget(enum BindWidgetType, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, GuideWidgetWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366fd60
	void ShowGuideWidget(enum BindWidgetType, enum GuideWidgetType, bool IsAutoHide, bool IsForceGuide, bool bIsPauseGame, bool CallFunc_IsGuideWidgetHided_IsHided, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_SetGamePaused_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, GuideWidgetWidget_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, GuideWidgetWidget_C* CallFunc_SpawnObject_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c366fe40
	void UnLockWidgetInner(enum WidgetType, bool CallFunc_Map_Remove_ReturnValue, GuideLockWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366ff20
	void UnlockWidget(enum WidgetType, GuideLockWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c366caa0
	void LockWidget(enum BindWidgetType, delegate K2Node_CreateDelegate_OutputDelegate, Character* CallFunc_GetPlayerCharacter_ReturnValue, GuideLockWidget_C* CallFunc_SpawnObject_ReturnValue, GuideLockWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsUnlocked_IsUnlocked, bool CallFunc_IsValid_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c366cb80
	void Construct();// 0x8a873f8 0x78c366cc60
	void BndEvt__BackButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c366cd40
	void BndEvt__Sure_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c366ce20
	void BndEvt__Cancel_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c366cf00
	void ExecuteUbergraph_GuidePanelWidget(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Margin K2Node_MakeStruct_Margin, AnchorData K2Node_MakeStruct_AnchorData);// 0x8a873f8 0x78c366d0c0
	void ExitGuide__DelegateSignature();// 0x8a873f8 0x78c366d280

--------------------------------
Class: GuideMaskWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c477cd00
	Button* GuideMaskBottom;//[Offset: 0x268, Size: 0x8] 0x78c477cc80
	Button* GuideMaskLeft;//[Offset: 0x270, Size: 0x8] 0x78c477cc00
	Button* GuideMaskRight;//[Offset: 0x278, Size: 0x8] 0x78c477cb80
	Button* GuideMaskTop;//[Offset: 0x280, Size: 0x8] 0x78c477cb00
	AnchorData DefaultLeftLayout;//[Offset: 0x288, Size: 0x28] 0x78c477ca80
	AnchorData DefaultRightLayout;//[Offset: 0x2b0, Size: 0x28] 0x78c477ca00
	AnchorData DefaultTopLayout;//[Offset: 0x2d8, Size: 0x28] 0x78c477c980
	AnchorData DefaultBottomLayout;//[Offset: 0x300, Size: 0x28] 0x78c477c900
	delegate PlayTip;//[Offset: 0x328, Size: 0x10] 0x78c477c880
	void UpdateBottomLayout(float OffsetsTop, float AnchorsMinimumY, bool Temp_bool_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, AnchorData K2Node_Copy_ReturnValue, bool Temp_bool_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, float K2Node_Select_Default, float K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, AnchorData K2Node_SetFieldsInStruct_StructOut);// 0x8a873f8 0x78c3b5f120
	void UpdateTopLayout(float OffsetsBottom, float AnchorsMaximumY, bool Temp_bool_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, AnchorData K2Node_Copy_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, float K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, AnchorData K2Node_SetFieldsInStruct_StructOut);// 0x8a873f8 0x78c3b5f200
	void UpdateRightLayout(float OffsetsLeft, float AnchorsMinimumX, bool Temp_bool_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool Temp_bool_Variable, AnchorData K2Node_Copy_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, float K2Node_Select_Default, float K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, AnchorData K2Node_SetFieldsInStruct_StructOut);// 0x8a873f8 0x78c3b5f2e0
	void UpdateLeftLayout(float OffsetsRight, float AnchorsMaximumX, bool Temp_bool_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, AnchorData K2Node_Copy_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, float K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, AnchorData K2Node_SetFieldsInStruct_StructOut);// 0x8a873f8 0x78c3b5f3c0
	void UpdateLayout(CanvasPanelSlot* CanvaSlot, float AlignmentY, float AlignmentX, float AnchorsMaximumY, float AnchorsMaximumX, float AnchorsMinimumY, float AnchorsMinimumX, float OffsetsBottom, float OffsetsRight, float OffsetsTop, float OffsetsLeft, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0x8a873f8 0x78c3b5f4a0
	void BndEvt__GuideMaskLeft_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3b5f580
	void BndEvt__GuideMaskRight_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3b5f660
	void BndEvt__GuideMaskUp_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3b5f740
	void BndEvt__GuideMaskDown_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c3b5f820
	void ExecuteUbergraph_GuideMaskWidget(int EntryPoint);// 0x8a873f8 0x78c3b5f9e0
	void PlayTip__DelegateSignature(FText TipContent);// 0x8a873f8 0x78c3b5fba0

--------------------------------
Class: GuideTaskPanelWidget_C.ShowHideWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8] 0x78c473c080
	WidgetAnimation* GlobalTaskEffectAnim;//[Offset: 0x2a8, Size: 0x8] 0x78c473c000
	Button* Button;//[Offset: 0x2b0, Size: 0x8] 0x78c473bf80
	TextBlock* GlobalTextNameText;//[Offset: 0x2b8, Size: 0x8] 0x78c473bf00
	VerticalBox* TaskVerticalBox;//[Offset: 0x2c0, Size: 0x8] 0x78c473be80
	FText GlobalTaskName;//[Offset: 0x2c8, Size: 0x18] 0x78c473be00
	FText[] TaskNames;//[Offset: 0x2e0, Size: 0x10] 0x78c6046be0
	FText[] TempTaskNames;//[Offset: 0x2f0, Size: 0x10] 0x78c6046b40
	FText[] TaskFinisedArray;//[Offset: 0x300, Size: 0x10] 0x78c6046aa0
	bool IsClearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x78c473bc00
	int InitTaskIndex;//[Offset: 0x314, Size: 0x4] 0x78c473bb80
	void ShowCloseButton(bool bShowCloseButton, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c366d6e0
	void OnTaskShowAnimPlayFinished(ShowHideWidget_C* TaskWidget, GuideTaskWidget_C* K2Node_DynamicCast_AsGuide_Task_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x8a873f8 0x78c366d7c0
	void OnHideAnimPlayFinshed(int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c366d8a0
	void OnShowAnimPlayFinished(int CallFunc_Array_Length_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c366d980
	void ClearTasks();// 0x8a873f8 0x78c366da60
	void FinishTask(FText taskName, out bool IsAllFinished, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, FText CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Array_Length_ReturnValue, Widget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, GuideTaskWidget_C* K2Node_DynamicCast_AsGuide_Task_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue);// 0x8a873f8 0x78c366db40
	void InitTasksInner(int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, GuideTaskWidget_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c366dc20
	void InitTasks(FText NewGlobalTaskName, out FText[] NewTaskNames);// 0x8a873f8 0x78c366dd00
	void Construct();// 0x8a873f8 0x78c366dde0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c366dfa0
	void BndEvt__Button_74_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c366e160
	void ExecuteUbergraph_GuideTaskPanelWidget(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Character* CallFunc_GetPlayerCharacter_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c366e240

--------------------------------
Class: ShowHideWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c477f780
	WidgetAnimation* DefaultShowHideAnim;//[Offset: 0x268, Size: 0x8] 0x78c477f700
	float LastAnimTime;//[Offset: 0x270, Size: 0x4] 0x78c477f680
	delegate ShowAnimPlayFinishedEvent;//[Offset: 0x278, Size: 0x10] 0x78c477f600
	delegate HideAnimPlayFinishedEvent;//[Offset: 0x288, Size: 0x10] 0x78c477f580
	WidgetAnimation* ShowHideAnim;//[Offset: 0x298, Size: 0x8] 0x78c477f500
	void OnHideAnimPlayFinshed();// 0x8a873f8 0x78c3bb2b60
	void OnShowAnimPlayFinished(float CallFunc_GetEndTime_ReturnValue);// 0x8a873f8 0x78c3bb1200
	void StopAnim(WidgetAnimation* anim, float CallFunc_GetAnimationCurrentTime_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue);// 0x8a873f8 0x78c3bb12e0
	void PlayHideAnim(float CallFunc_GetEndTime_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Subtract_FloatFloat_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c3bb13c0
	void PlayShowAnim(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x8a873f8 0x78c3bb14a0
	void Construct();// 0x8a873f8 0x78c3bb1580
	void ExecuteUbergraph_ShowHideWidget(int EntryPoint);// 0x8a873f8 0x78c3bb1660
	void HideAnimPlayFinishedEvent__DelegateSignature(ShowHideWidget_C* HideWidget);// 0x8a873f8 0x78c3bb1820
	void ShowAnimPlayFinishedEvent__DelegateSignature(ShowHideWidget_C* ShowWidget);// 0x8a873f8 0x78c3bb19e0

--------------------------------
Class: GuideTaskWidget_C.ShowHideWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8] 0x78b8924900
	WidgetAnimation* FinishTaskAnim;//[Offset: 0x2a8, Size: 0x8] 0x78b8924880
	WidgetAnimation* TaskShowHideAnim;//[Offset: 0x2b0, Size: 0x8] 0x78b8924800
	CheckBox* TaskCheckBox;//[Offset: 0x2b8, Size: 0x8] 0x78b8924780
	TextBlock* TaskNameText;//[Offset: 0x2c0, Size: 0x8] 0x78b8924700
	FText taskName;//[Offset: 0x2c8, Size: 0x18] 0x78b8924680
	void FinishTaskInner();// 0x8a873f8 0x78c3bb2ee0
	void IsFinished(out bool IsFinished, bool CallFunc_IsChecked_ReturnValue);// 0x8a873f8 0x78c3bb2fc0
	void FinishTask(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsAnimationPlaying_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c3bb3180
	void Construct();// 0x8a873f8 0x78c3bb3260
	void ExecuteUbergraph_GuideTaskWidget(int EntryPoint);// 0x8a873f8 0x78c3bb3420

--------------------------------
Class: GuideTeachMapWidget_C.ShowHideWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8] 0x78b8924c80
	Button* IKnowButton;//[Offset: 0x2a8, Size: 0x8] 0x78b8924c00
	Border* TeachMapBorder;//[Offset: 0x2b0, Size: 0x8] 0x78b8924b80
	CanvasPanel* TeachMapCanvasPanel;//[Offset: 0x2b8, Size: 0x8] 0x78b8924b00
	WidgetSwitcher* TeachMaptSwitcher;//[Offset: 0x2c0, Size: 0x8] 0x78b8924a80
	bool Closed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78b8924a00
	void OnHideAnimPlayFinshed(bool CallFunc_SetGamePaused_ReturnValue);// 0x8a873f8 0x78c3bb28c0
	void IsClosed(out bool IsClosed);// 0x8a873f8 0x78c3bb36c0
	void ShowTeachMap(enum TeachMapType, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x8a873f8 0x78c3bb37a0
	void OnShowAnimPlayFinished(bool CallFunc_SetGamePaused_ReturnValue);// 0x8a873f8 0x78c3bb3880
	void BndEvt__Button_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3bb0080
	void ExecuteUbergraph_GuideTeachMapWidget(int EntryPoint);// 0x8a873f8 0x78c3bb0240

--------------------------------
Class: GuideTeachSpriteWidget_C.ShowHideWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8] 0x78b8923200
	RichTextBlock* RemindText;//[Offset: 0x2a8, Size: 0x8] 0x78b8925280
	FText[] SubReminds;//[Offset: 0x2b0, Size: 0x10] 0x78bd425a60
	float PrintIndex;//[Offset: 0x2c0, Size: 0x4] 0x78b8925180
	float PrintSpeed;//[Offset: 0x2c4, Size: 0x4] 0x78b8925100
	bool NeedUpdatePrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78b8925080
	delegate PrintFinishedEvent;//[Offset: 0x2d0, Size: 0x10] 0x78b8925000
	float AutoHideDelay;//[Offset: 0x2e0, Size: 0x4] 0x78b8924f80
	float NewVar_0;//[Offset: 0x2e4, Size: 0x4] 0x78b8924f00
	TimerHandle HideDelayTimerHandle;//[Offset: 0x2e8, Size: 0x8] 0x78b8924e80
	FText remind;//[Offset: 0x2f0, Size: 0x18] 0x78b8924e00
	void OnHideAnimPlayFinshed(FText CallFunc_GetEmptyText_ReturnValue);// 0x8a873f8 0x78c3bb29a0
	void OnShowAnimPlayFinished();// 0x8a873f8 0x78c3bb0400
	void OnPrintFinished(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3bb04e0
	void UpdatePrint(float DeltaTime, float MaxPrintIndex, int CallFunc_FTrunc_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3bb05c0
	void HideRemind();// 0x8a873f8 0x78c3bb06a0
	void ShowRemind(FText NewRemind, float NewHideDelay, bool CallFunc_NotEqual_TextText_ReturnValue, FText[] CallFunc_SplitRichTextForPrint_SubRichTexts, FText CallFunc_GetEmptyText_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c3bb0780
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3bb0860
	void Construct();// 0x8a873f8 0x78c3bb0940
	void ExecuteUbergraph_GuideTeachSpriteWidget(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x8a873f8 0x78c3bb0b00
	void PrintFinishedEvent__DelegateSignature();// 0x8a873f8 0x78c3bb0cc0

--------------------------------
Class: WalkGuideTip_C.ShowHideWidget_C.UserWidget.Widget.Visual.Object
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x78b8923580
	void hide();// 0x8a873f8 0x78c3bb0f60
	void Show();// 0x8a873f8 0x78c3bb1120

--------------------------------
Class: GuideLockWidget_C.GuideUIBaseWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a8, Size: 0x8] 0x78b8996a80
	WidgetAnimation* UnlockAnimation;//[Offset: 0x2b0, Size: 0x8] 0x78b8996a00
	Image* LockMaskImage;//[Offset: 0x2b8, Size: 0x8] 0x78b8996980
	delegate UnlockAnimPlayFinishedEvent;//[Offset: 0x2c0, Size: 0x10] 0x78b8996900
	bool Unlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x78b8996880
	void IsUnlocked(out bool IsUnlocked);// 0x8a873f8 0x78c3b5e860
	void OnUnlockAnimPlayFinished();// 0x8a873f8 0x78c3b5e940
	void PlayUnlockAnim(delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c3b5ea20
	void Construct();// 0x8a873f8 0x78c3b5eb00
	void ExecuteUbergraph_GuideLockWidget(int EntryPoint, bool Temp_bool_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float Temp_float_Variable, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float Temp_float_Variable, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float K2Node_Select_Default);// 0x8a873f8 0x78c3b5ecc0
	void UnlockAnimPlayFinishedEvent__DelegateSignature(enum BindWidgetType);// 0x8a873f8 0x78c3b5ee80

--------------------------------
Class: GuideUIBaseWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8923500
	enum BindWidgetType;//[Offset: 0x268, Size: 0x1] 0x78bd425b00
	Widget* BindWidget;//[Offset: 0x270, Size: 0x8] 0x78b8923400
	CanvasPanelSlot* BindCanvasSlot;//[Offset: 0x278, Size: 0x8] 0x78b8923380
	AnchorData DefaultLayout;//[Offset: 0x280, Size: 0x28] 0x78b8923300
	void GetBindWidget(out Widget* Widget, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, Widget* Temp_object_Variable, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, Widget* K2Node_Select_Default);// 0x8a873f8 0x78c3b5d8a0
	void Construct();// 0x8a873f8 0x78c3b5da60
	void ExecuteUbergraph_GuideUIBaseWidget(int EntryPoint, Widget* CallFunc_GetBindWidget_Widget, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnchorData CallFunc_GetLayout_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3b5dc20

--------------------------------
Class: GuideWidgetWidget_C.GuideUIBaseWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a8, Size: 0x8] 0x78b8997180
	WidgetAnimation* WeakGuideAnimation;//[Offset: 0x2b0, Size: 0x8] 0x78b8997100
	WidgetAnimation* RangeGuideAnimation;//[Offset: 0x2b8, Size: 0x8] 0x78b8997080
	WidgetAnimation* TurnGuideAnimation;//[Offset: 0x2c0, Size: 0x8] 0x78b8997000
	WidgetAnimation* RightHandGuideAnimation;//[Offset: 0x2c8, Size: 0x8] 0x78b8996f80
	WidgetAnimation* LeftHandGuideAnimation;//[Offset: 0x2d0, Size: 0x8] 0x78b8996f00
	WidgetAnimation* WalkGuideAnimation;//[Offset: 0x2d8, Size: 0x8] 0x78b8996e80
	WidgetSwitcher* GuideWidgetSwitcher;//[Offset: 0x2e0, Size: 0x8] 0x78b8996e00
	Border* LeftHandWeakGuide;//[Offset: 0x2e8, Size: 0x8] 0x78b8996d80
	Border* RightHandWeakGuide;//[Offset: 0x2f0, Size: 0x8] 0x78b8996d00
	enum GuideWidgetType;//[Offset: 0x2f8, Size: 0x1] 0x78c3d2fba0
	delegate BeforeHideEvent;//[Offset: 0x300, Size: 0x10] 0x78b8996c00
	bool IsAutoHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x78b8996b80
	bool JoystickCalledHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1] 0x78b8996b00
	void CallHide();// 0x8a873f8 0x78c3b5cf00
	void JoystickCallHide(out const Geometry MyGeometry, out const PointerEvent Event);// 0x8a873f8 0x78c3b5cfe0
	void TouchCallHide(Geometry MyGeometry, PointerEvent Event);// 0x8a873f8 0x78c3b5d0c0
	void AutoBindHideEvent(Widget* Widget, int Temp_int_Loop_Counter_Variable, WidgetSwitcher* K2Node_DynamicCast_AsWidget_Switcher, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemHotPanel_C* K2Node_DynamicCast_AsItem_Hot_Panel, bool K2Node_DynamicCast_bSuccess, SkillHotKeyWidget_C* K2Node_DynamicCast_AsSkill_Hot_Key_Widget, bool K2Node_DynamicCast_bSuccess, VirtualJoystick* K2Node_DynamicCast_AsVirtual_Joystick, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Button* K2Node_DynamicCast_AsButton, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, Widget* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x8a873f8 0x78c3b5d1a0
	void Construct();// 0x8a873f8 0x78c3b5d280
	void ExecuteUbergraph_GuideWidgetWidget(int EntryPoint, enum Temp_byte_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, Widget* Temp_object_Variable, enum Temp_byte_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, WidgetAnimation* Temp_object_Variable, WidgetAnimation* K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_FMin_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Widget* K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3b5d440
	void BeforeHideEvent__DelegateSignature(enum BindWidgetType);// 0x8a873f8 0x78c3b5d600

--------------------------------
Class: GlobalSettings_C.UI_MobileSetting.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 0x8] 0x78c473ba00
	TextBlock* AA_1_Text;//[Offset: 0x3a8, Size: 0x8] 0x78c609cc80
	TextBlock* AA_2_Text;//[Offset: 0x3b0, Size: 0x8] 0x78c55ce400
	Button* Add;//[Offset: 0x3b8, Size: 0x8] 0x78c55ce380
	Button* Add;//[Offset: 0x3c0, Size: 0x8] 0x78c55ce300
	Button* audiohig;//[Offset: 0x3c8, Size: 0x8] 0x78c55ce280
	Button* audiolow;//[Offset: 0x3d0, Size: 0x8] 0x78c55ce200
	Button* audiomid;//[Offset: 0x3d8, Size: 0x8] 0x78c55ce180
	Button* autopickoff;//[Offset: 0x3e0, Size: 0x8] 0x78c55ce100
	Button* autopickon;//[Offset: 0x3e8, Size: 0x8] 0x78c55ce080
	ScrollBox* Base;//[Offset: 0x3f0, Size: 0x8] 0x78c55ce000
	Button* base_btn;//[Offset: 0x3f8, Size: 0x8] 0x78c55cdf80
	Image* bg;//[Offset: 0x400, Size: 0x8] 0x78c55cdf00
	Button* bluetooth;//[Offset: 0x408, Size: 0x8] 0x78c55cde80
	Button* btn_AA;//[Offset: 0x410, Size: 0x8] 0x78c55cde00
	Button* btn_AA;//[Offset: 0x418, Size: 0x8] 0x78c55cdd80
	Button* btn_epic_quality;//[Offset: 0x420, Size: 0x8] 0x78c55cdd00
	Button* btn_fps;//[Offset: 0x428, Size: 0x8] 0x78c55cdc80
	Button* btn_fps;//[Offset: 0x430, Size: 0x8] 0x78c55cdc00
	Button* btn_fps;//[Offset: 0x438, Size: 0x8] 0x78c55cdb80
	Button* btn_fps;//[Offset: 0x440, Size: 0x8] 0x78c55cdb00
	Button* btn_fps;//[Offset: 0x448, Size: 0x8] 0x78c55cda80
	Button* btn_hdr;//[Offset: 0x450, Size: 0x8] 0x78c55cda00
	Button* btn_hight_quality;//[Offset: 0x458, Size: 0x8] 0x78c55cd980
	Button* btn_jizhi_qualit;//[Offset: 0x460, Size: 0x8] 0x78c55cd900
	Button* btn_ldr;//[Offset: 0x468, Size: 0x8] 0x78c55cd880
	Button* btn_low_quality;//[Offset: 0x470, Size: 0x8] 0x78c55cd800
	Button* btn_medium_quality;//[Offset: 0x478, Size: 0x8] 0x78c55cd780
	Button* btn_Shadow;//[Offset: 0x480, Size: 0x8] 0x78c55cf800
	Button* btn_Shadow;//[Offset: 0x488, Size: 0x8] 0x78c55cf780
	Button* Button;//[Offset: 0x490, Size: 0x8] 0x78c55cf700
	Button* Button;//[Offset: 0x498, Size: 0x8] 0x78c55cf680
	Button* Button;//[Offset: 0x4a0, Size: 0x8] 0x78c55cf600
	Button* Button;//[Offset: 0x4a8, Size: 0x8] 0x78c55cf580
	Button* Button;//[Offset: 0x4b0, Size: 0x8] 0x78c55cf500
	Button* Button;//[Offset: 0x4b8, Size: 0x8] 0x78c55cf480
	Button* Button;//[Offset: 0x4c0, Size: 0x8] 0x78c55cf400
	Button* Button;//[Offset: 0x4c8, Size: 0x8] 0x78c55cf380
	Button* Button;//[Offset: 0x4d0, Size: 0x8] 0x78c55cf300
	Button* Button;//[Offset: 0x4d8, Size: 0x8] 0x78c55cf280
	Button* Cancel;//[Offset: 0x4e0, Size: 0x8] 0x78c55cf200
	Button* change;//[Offset: 0x4e8, Size: 0x8] 0x78c55cf180
	CheckBox* CheckBox1;//[Offset: 0x4f0, Size: 0x8] 0x78c55cf100
	CheckBox* CheckBox2;//[Offset: 0x4f8, Size: 0x8] 0x78c55cf080
	CheckBox* CheckBox3;//[Offset: 0x500, Size: 0x8] 0x78c55cf000
	CheckBox* CheckBox4;//[Offset: 0x508, Size: 0x8] 0x78c55cef80
	Button* closebtn;//[Offset: 0x510, Size: 0x8] 0x78c55cef00
	Button* CloseBuffTip;//[Offset: 0x518, Size: 0x8] 0x78c55cee80
	Image* Color;//[Offset: 0x520, Size: 0x8] 0x78c55cee00
	Image* Color;//[Offset: 0x528, Size: 0x8] 0x78c55ced80
	Image* Color;//[Offset: 0x530, Size: 0x8] 0x78c55ced00
	Image* Color;//[Offset: 0x538, Size: 0x8] 0x78c55cec80
	Image* Color;//[Offset: 0x540, Size: 0x8] 0x78c55cec00
	Image* Color;//[Offset: 0x548, Size: 0x8] 0x78c55ceb80
	Image* Color;//[Offset: 0x550, Size: 0x8] 0x78c55ceb00
	Image* Color;//[Offset: 0x558, Size: 0x8] 0x78c55cea80
	HorizontalBox* ColorBox;//[Offset: 0x560, Size: 0x8] 0x78c55cea00
	ScrollBox* Command;//[Offset: 0x568, Size: 0x8] 0x78c55ce980
	Button* commandbtn;//[Offset: 0x570, Size: 0x8] 0x78c55ce900
	ScrollBox* commute;//[Offset: 0x578, Size: 0x8] 0x78c55ce880
	Button* commutebtn;//[Offset: 0x580, Size: 0x8] 0x78c55ce800
	EditableTextBox* EditableTextBox;//[Offset: 0x588, Size: 0x8] 0x78c55cff80
	Button* Feedback;//[Offset: 0x590, Size: 0x8] 0x78c55cff00
	MultiLineEditableTextBox* FeedBackContext;//[Offset: 0x598, Size: 0x8] 0x78c55cfe80
	Button* follow;//[Offset: 0x5a0, Size: 0x8] 0x78c55cfe00
	TextBlock* FPS;//[Offset: 0x5a8, Size: 0x8] 0x78c55cfd80
	TextBlock* FPS;//[Offset: 0x5b0, Size: 0x8] 0x78c55cfd00
	TextBlock* FPS;//[Offset: 0x5b8, Size: 0x8] 0x78c55cfc80
	TextBlock* FPS;//[Offset: 0x5c0, Size: 0x8] 0x78c55cfc00
	TextBlock* FPS;//[Offset: 0x5c8, Size: 0x8] 0x78c55cfb80
	Button* freeview;//[Offset: 0x5d0, Size: 0x8] 0x78c55cfb00
	CanvasPanel* GameVolumePanel;//[Offset: 0x5d8, Size: 0x8] 0x78c55cfa80
	Button* GetRedeemReward;//[Offset: 0x5e0, Size: 0x8] 0x78c55cfa00
	Button* GoToTapComment;//[Offset: 0x5e8, Size: 0x8] 0x78c55cf980
	HorizontalBox* HDRHorizontalBox;//[Offset: 0x5f0, Size: 0x8] 0x78c55cf900
	TextBlock* HDRTextBlock;//[Offset: 0x5f8, Size: 0x8] 0x78c55cf880
	HorizontalBox* HorizontalBox;//[Offset: 0x600, Size: 0x8] 0x78b8991080
	Button* horsebutton;//[Offset: 0x608, Size: 0x8] 0x78b8991000
	Button* horsejoy;//[Offset: 0x610, Size: 0x8] 0x78b8990f80
	Image* Image;//[Offset: 0x618, Size: 0x8] 0x78b8990f00
	Image* Image;//[Offset: 0x620, Size: 0x8] 0x78b8990e80
	Image* Image;//[Offset: 0x628, Size: 0x8] 0x78b8990e00
	Image* Image;//[Offset: 0x630, Size: 0x8] 0x78b8990d80
	Image* Image;//[Offset: 0x638, Size: 0x8] 0x78b8990d00
	Image* Image;//[Offset: 0x640, Size: 0x8] 0x78b8990c80
	Image* Image;//[Offset: 0x648, Size: 0x8] 0x78b8990c00
	Image* Image;//[Offset: 0x650, Size: 0x8] 0x78b8990b80
	Image* Image;//[Offset: 0x658, Size: 0x8] 0x78b8990b00
	Image* Image;//[Offset: 0x660, Size: 0x8] 0x78b8990a80
	Image* Image;//[Offset: 0x668, Size: 0x8] 0x78b8990a00
	Image* Image;//[Offset: 0x670, Size: 0x8] 0x78b8990980
	Image* Image;//[Offset: 0x678, Size: 0x8] 0x78b8990900
	Image* Image;//[Offset: 0x680, Size: 0x8] 0x78b8990880
	Image* Image;//[Offset: 0x688, Size: 0x8] 0x78b8990800
	Image* Image;//[Offset: 0x690, Size: 0x8] 0x78b8990780
	Image* Image;//[Offset: 0x698, Size: 0x8] 0x78b8990700
	Image* Image;//[Offset: 0x6a0, Size: 0x8] 0x78b8990680
	Image* Image;//[Offset: 0x6a8, Size: 0x8] 0x78b8990600
	Image* Image;//[Offset: 0x6b0, Size: 0x8] 0x78b8990580
	Image* Image;//[Offset: 0x6b8, Size: 0x8] 0x78b8990500
	Image* Image;//[Offset: 0x6c0, Size: 0x8] 0x78b8990480
	Image* Image;//[Offset: 0x6c8, Size: 0x8] 0x78b8990400
	Image* Image;//[Offset: 0x6d0, Size: 0x8] 0x78b8990380
	Image* Image;//[Offset: 0x6d8, Size: 0x8] 0x78b8990300
	Image* Image;//[Offset: 0x6e0, Size: 0x8] 0x78b8990280
	Image* Image;//[Offset: 0x6e8, Size: 0x8] 0x78b8990200
	Image* Image;//[Offset: 0x6f0, Size: 0x8] 0x78b8990180
	Image* Image;//[Offset: 0x6f8, Size: 0x8] 0x78b8990100
	Image* Image;//[Offset: 0x700, Size: 0x8] 0x78b8990080
	Image* Image;//[Offset: 0x708, Size: 0x8] 0x78b8992100
	Image* Image;//[Offset: 0x710, Size: 0x8] 0x78b8992080
	Image* Image;//[Offset: 0x718, Size: 0x8] 0x78b8992000
	Image* Image;//[Offset: 0x720, Size: 0x8] 0x78b8991f80
	Image* Image;//[Offset: 0x728, Size: 0x8] 0x78b8991f00
	Image* Image;//[Offset: 0x730, Size: 0x8] 0x78b8991e80
	Image* Image;//[Offset: 0x738, Size: 0x8] 0x78b8991e00
	Image* Image;//[Offset: 0x740, Size: 0x8] 0x78b8991d80
	Image* Image;//[Offset: 0x748, Size: 0x8] 0x78b8991d00
	Image* Image;//[Offset: 0x750, Size: 0x8] 0x78b8991c80
	Image* Image;//[Offset: 0x758, Size: 0x8] 0x78b8991c00
	Image* Image;//[Offset: 0x760, Size: 0x8] 0x78b8991b80
	Image* Image;//[Offset: 0x768, Size: 0x8] 0x78b8991b00
	Image* Image;//[Offset: 0x770, Size: 0x8] 0x78b8991a80
	Image* Image;//[Offset: 0x778, Size: 0x8] 0x78b8991a00
	Image* Image;//[Offset: 0x780, Size: 0x8] 0x78b8991980
	Image* Image;//[Offset: 0x788, Size: 0x8] 0x78b8991900
	Image* Image;//[Offset: 0x790, Size: 0x8] 0x78b8991880
	Image* Image;//[Offset: 0x798, Size: 0x8] 0x78b8991800
	Image* Image;//[Offset: 0x7a0, Size: 0x8] 0x78b8991780
	Image* Image;//[Offset: 0x7a8, Size: 0x8] 0x78b8991700
	Image* Image;//[Offset: 0x7b0, Size: 0x8] 0x78b8991680
	Image* Image;//[Offset: 0x7b8, Size: 0x8] 0x78b8991600
	Image* Image;//[Offset: 0x7c0, Size: 0x8] 0x78b8991580
	Image* Image;//[Offset: 0x7c8, Size: 0x8] 0x78b8991500
	Image* Image;//[Offset: 0x7d0, Size: 0x8] 0x78b8991480
	Image* Image;//[Offset: 0x7d8, Size: 0x8] 0x78b8991400
	Image* Image;//[Offset: 0x7e0, Size: 0x8] 0x78b8991380
	Image* Image;//[Offset: 0x7e8, Size: 0x8] 0x78b8991300
	Image* Image;//[Offset: 0x7f0, Size: 0x8] 0x78b8991280
	Image* Image;//[Offset: 0x7f8, Size: 0x8] 0x78b8991200
	Image* Image;//[Offset: 0x800, Size: 0x8] 0x78b8991180
	Image* Image;//[Offset: 0x808, Size: 0x8] 0x78b8991100
	Image* Image;//[Offset: 0x810, Size: 0x8] 0x78b8993180
	Image* Image;//[Offset: 0x818, Size: 0x8] 0x78b8993100
	Image* Image;//[Offset: 0x820, Size: 0x8] 0x78b8993080
	Image* Image;//[Offset: 0x828, Size: 0x8] 0x78b8993000
	Image* Image;//[Offset: 0x830, Size: 0x8] 0x78b8992f80
	Image* Image;//[Offset: 0x838, Size: 0x8] 0x78b8992f00
	Image* Image;//[Offset: 0x840, Size: 0x8] 0x78b8992e80
	Image* Image;//[Offset: 0x848, Size: 0x8] 0x78b8992e00
	Image* Image;//[Offset: 0x850, Size: 0x8] 0x78b8992d80
	Image* Image;//[Offset: 0x858, Size: 0x8] 0x78b8992d00
	Image* Image;//[Offset: 0x860, Size: 0x8] 0x78b8992c80
	Image* Image;//[Offset: 0x868, Size: 0x8] 0x78b8992c00
	Image* Image;//[Offset: 0x870, Size: 0x8] 0x78b8992b80
	Image* Image;//[Offset: 0x878, Size: 0x8] 0x78b8992b00
	Image* Image;//[Offset: 0x880, Size: 0x8] 0x78b8992a80
	Image* Image;//[Offset: 0x888, Size: 0x8] 0x78b8992a00
	Image* Image;//[Offset: 0x890, Size: 0x8] 0x78b8992980
	ProgressBar* inputbar;//[Offset: 0x898, Size: 0x8] 0x78b8992900
	Slider* inputslider;//[Offset: 0x8a0, Size: 0x8] 0x78b8992880
	WidgetSwitcher* leftbottomswitch;//[Offset: 0x8a8, Size: 0x8] 0x78b8992800
	VerticalBox* leftbox;//[Offset: 0x8b0, Size: 0x8] 0x78b8992780
	ScrollBox* leftmsg;//[Offset: 0x8b8, Size: 0x8] 0x78b8992700
	Button* minus;//[Offset: 0x8c0, Size: 0x8] 0x78b8992680
	Button* minus;//[Offset: 0x8c8, Size: 0x8] 0x78b8992600
	Button* Mobile;//[Offset: 0x8d0, Size: 0x8] 0x78b8992580
	TextBlock* offtext;//[Offset: 0x8d8, Size: 0x8] 0x78b8992500
	TextBlock* ontext;//[Offset: 0x8e0, Size: 0x8] 0x78b8992480
	Button* OpenBuffTip;//[Offset: 0x8e8, Size: 0x8] 0x78b8992400
	Button* openl;//[Offset: 0x8f0, Size: 0x8] 0x78b8992380
	Button* operate_btn;//[Offset: 0x8f8, Size: 0x8] 0x78b8992300
	ProgressBar* outputbar;//[Offset: 0x900, Size: 0x8] 0x78b8992280
	Slider* outputslider;//[Offset: 0x908, Size: 0x8] 0x78b8992200
	CanvasPanel* pickammunition;//[Offset: 0x910, Size: 0x8] 0x78b8992180
	CanvasPanel* pickbill;//[Offset: 0x918, Size: 0x8] 0x78b8994200
	SizeBox* pickexpand2;//[Offset: 0x920, Size: 0x8] 0x78b8994180
	SizeBox* pickexpand3;//[Offset: 0x928, Size: 0x8] 0x78b8994100
	Spacer* pickexpend1;//[Offset: 0x930, Size: 0x8] 0x78b8994080
	HorizontalBox* PickSetHorizontalBox;//[Offset: 0x938, Size: 0x8] 0x78b8994000
	CanvasPanel* picksets;//[Offset: 0x940, Size: 0x8] 0x78b8993f80
	CanvasPanel* privacypanel;//[Offset: 0x948, Size: 0x8] 0x78b8993f00
	ProgressBar* pro;//[Offset: 0x950, Size: 0x8] 0x78b8993e80
	ProgressBar* pro;//[Offset: 0x958, Size: 0x8] 0x78b8993e00
	Button* quality_btn;//[Offset: 0x960, Size: 0x8] 0x78b8993d80
	Button* quick_btn;//[Offset: 0x968, Size: 0x8] 0x78b8993d00
	TextBlock* quit;//[Offset: 0x970, Size: 0x8] 0x78b8993c80
	Button* RedeemCode;//[Offset: 0x978, Size: 0x8] 0x78b8993c00
	ScrollBox* remind;//[Offset: 0x980, Size: 0x8] 0x78b8993b80
	Button* remindbtn;//[Offset: 0x988, Size: 0x8] 0x78b8993b00
	Button* replay_btn;//[Offset: 0x990, Size: 0x8] 0x78b8993a80
	Button* Reset;//[Offset: 0x998, Size: 0x8] 0x78b8993a00
	Button* return;//[Offset: 0x9a0, Size: 0x8] 0x78b8993980
	WidgetSwitcher* Right;//[Offset: 0x9a8, Size: 0x8] 0x78b8993900
	WidgetSwitcher* rightswitch;//[Offset: 0x9b0, Size: 0x8] 0x78b8993880
	Button* sen_high;//[Offset: 0x9b8, Size: 0x8] 0x78b8993800
	Button* sen_low;//[Offset: 0x9c0, Size: 0x8] 0x78b8993780
	Button* sen_mid;//[Offset: 0x9c8, Size: 0x8] 0x78b8993700
	Button* sen_self;//[Offset: 0x9d0, Size: 0x8] 0x78b8993680
	CanvasPanel* Sensitivity;//[Offset: 0x9d8, Size: 0x8] 0x78b8993600
	TextBlock* shadow_1_Text;//[Offset: 0x9e0, Size: 0x8] 0x78b8993580
	TextBlock* shadow_2_Text;//[Offset: 0x9e8, Size: 0x8] 0x78b8993500
	Slider* slid;//[Offset: 0x9f0, Size: 0x8] 0x78b8993480
	Slider* slid;//[Offset: 0x9f8, Size: 0x8] 0x78b8993400
	Button* SubmitFeedback;//[Offset: 0xa00, Size: 0x8] 0x78b8993380
	Button* Sure;//[Offset: 0xa08, Size: 0x8] 0x78b8993300
	TextBlock* Text1;//[Offset: 0xa10, Size: 0x8] 0x78b8993280
	TextBlock* Text2;//[Offset: 0xa18, Size: 0x8] 0x78b8993200
	TextBlock* Text3;//[Offset: 0xa20, Size: 0x8] 0x78b8995280
	TextBlock* Text4;//[Offset: 0xa28, Size: 0x8] 0x78b8995200
	TextBlock* TextBlock;//[Offset: 0xa30, Size: 0x8] 0x78b8995180
	TextBlock* TextBlock;//[Offset: 0xa38, Size: 0x8] 0x78b8995100
	TextBlock* TextBlock;//[Offset: 0xa40, Size: 0x8] 0x78b8995080
	TextBlock* TextBlock;//[Offset: 0xa48, Size: 0x8] 0x78b8995000
	TextBlock* TextBlock;//[Offset: 0xa50, Size: 0x8] 0x78b8994f80
	TextBlock* TextBlock;//[Offset: 0xa58, Size: 0x8] 0x78b8994f00
	TextBlock* TimeRemainHour;//[Offset: 0xa60, Size: 0x8] 0x78b8994e80
	TextBlock* TimeRemainMinute;//[Offset: 0xa68, Size: 0x8] 0x78b8994e00
	TextBlock* TimeRemainSecond;//[Offset: 0xa70, Size: 0x8] 0x78b8994d80
	TextBlock* total_1_text;//[Offset: 0xa78, Size: 0x8] 0x78b8994d00
	TextBlock* total_1_text;//[Offset: 0xa80, Size: 0x8] 0x78b8994c80
	TextBlock* total_1_text;//[Offset: 0xa88, Size: 0x8] 0x78b8994c00
	TextBlock* total_2_Text;//[Offset: 0xa90, Size: 0x8] 0x78b8994b80
	TextBlock* total_2_Text;//[Offset: 0xa98, Size: 0x8] 0x78b8994b00
	TextBlock* total_3_Text;//[Offset: 0xaa0, Size: 0x8] 0x78b8994a80
	TextBlock* total_4_Text;//[Offset: 0xaa8, Size: 0x8] 0x78b8994a00
	TextBlock* Value;//[Offset: 0xab0, Size: 0x8] 0x78b8994980
	TextBlock* Value;//[Offset: 0xab8, Size: 0x8] 0x78b8994900
	Button* volum_btn;//[Offset: 0xac0, Size: 0x8] 0x78b8994880
	CanvasPanel* volumepanel;//[Offset: 0xac8, Size: 0x8] 0x78b8994800
	HorizontalBox* weaponlvhor;//[Offset: 0xad0, Size: 0x8] 0x78b8994780
	CanvasPanel* weaponlvsets;//[Offset: 0xad8, Size: 0x8] 0x78b8994700
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xae0, Size: 0x8] 0x78b8994680
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xae8, Size: 0x8] 0x78b8994600
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xaf0, Size: 0x8] 0x78b8994580
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xaf8, Size: 0x8] 0x78b8994500
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xb00, Size: 0x8] 0x78b8994480
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xb08, Size: 0x8] 0x78b8994400
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xb10, Size: 0x8] 0x78b8994380
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0xb18, Size: 0x8] 0x78b8994300
	int ConcentrateColorID;//[Offset: 0xb20, Size: 0x4] 0x78b8994280
	int cursetpage;//[Offset: 0xb24, Size: 0x4] 0x78b8996300
	int AudioQuality;//[Offset: 0xb28, Size: 0x4] 0x78b8996280
	ButtonStyle SwitchSelect;//[Offset: 0xb30, Size: 0x278] 0x78b8996200
	ButtonStyle MultiSwitchNormal;//[Offset: 0xda8, Size: 0x278] 0x78b8996180
	delegate ToggleLeftQuickMsg;//[Offset: 0x1020, Size: 0x10] 0x78b8996100
	bool HasEmptyQuickMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1030, Size: 0x1] 0x78b8996080
	<int,RightQuickMsgUI_C*> AllMsgMap;//[Offset: 0x1038, Size: 0x50] 0x78cee1f940
	int FirstEmptyMsgIndex;//[Offset: 0x1088, Size: 0x4] 0x78b8995f00
	delegate ToggleRightQuickMsg;//[Offset: 0x1090, Size: 0x10] 0x78b8995e80
	int CurEmptyMsgIndex;//[Offset: 0x10a0, Size: 0x4] 0x78b8995e00
	bool PlayerOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a4, Size: 0x1] 0x78b8995d80
	delegate QuickChangeResult;//[Offset: 0x10a8, Size: 0x10] 0x78b8995d00
	delegate ForceCloseRightMsg;//[Offset: 0x10b8, Size: 0x10] 0x78b8995c80
	SlateColor TextOn;//[Offset: 0x10c8, Size: 0x28] 0x78b8995c00
	SlateColor TextOff;//[Offset: 0x10f0, Size: 0x28] 0x78b8995b80
	BaseSettingSlider_C* gyroslider;//[Offset: 0x1118, Size: 0x8] 0x78b8995b00
	BaseSettingSlider_C* aimslider;//[Offset: 0x1120, Size: 0x8] 0x78b8995a80
	BaseSettingSlider_C* freeviewslider;//[Offset: 0x1128, Size: 0x8] 0x78b8995a00
	bool ingame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 0x1] 0x78b8995980
	int curgamma;//[Offset: 0x1134, Size: 0x4] 0x78b8995900
	BaseSettingSlider_C* camslider;//[Offset: 0x1138, Size: 0x8] 0x78b8995880
	BaseSettingSlider_C* gamepadslider;//[Offset: 0x1140, Size: 0x8] 0x78b8995800
	ButtonStyle SwitchNormal;//[Offset: 0x1148, Size: 0x278] 0x78b8995780
	float NewBrightness;//[Offset: 0x13c0, Size: 0x4] 0x78b8995700
	FString RedeemCodeTemp;//[Offset: 0x13c8, Size: 0x10] 0x78b8995680
	int FeedbackType;//[Offset: 0x13d8, Size: 0x4] 0x78b8995600
	SlateColor CheckedColor;//[Offset: 0x13e0, Size: 0x28] 0x78b8995580
	SlateColor UncheckedColor;//[Offset: 0x1408, Size: 0x28] 0x78b8995500
	FString SobotURL;//[Offset: 0x1430, Size: 0x10] 0x78b8995480
	void CheckRedMeCodeShow(bool Redmecode);// 0x8a873f8 0x78c36b8900
	void Update Feedback Remain Time(WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, int64 CallFunc_GetRemainTimeByExpireTime_remainTime, int CallFunc_GetRemainTimeByExpireTime_day, int CallFunc_GetRemainTimeByExpireTime_hour, int CallFunc_GetRemainTimeByExpireTime_minute, int CallFunc_GetRemainTimeByExpireTime_second, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_Int64Int64_ReturnValue);// 0x8a873f8 0x78c36b89e0
	void ToggleHDRSwitch(bool IsHDR, bool Temp_bool_Variable, bool Temp_bool_Variable, const int Temp_int_Variable, const int Temp_int_Variable, bool Temp_bool_Variable, const int K2Node_Select_Default, FString CallFunc_GetHDRSwitchLabel_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Button* K2Node_Select_Default, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, TextBlock* K2Node_Select_Default);// 0x8a873f8 0x78c36b8ac0
	void InitHDRSwitch(enum CallFunc_PlatformType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_GetDeviceHDRDefault_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_GetHDRSwitchLabel_ReturnValue, bool CallFunc_GetDeviceHDRIsShow_ReturnValue, int CallFunc_ReadConfigInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);// 0x8a873f8 0x78c36b8ba0
	void SetResolutionZoom(const int Value, bool bWriteConfig, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_GetQualitySetResolutionZoom_ReturnValue);// 0x8a873f8 0x78c36b8c80
	void ChanageResolutionZoom(int Num, int CallFunc_GetQualitySetResolutionZoomDefaultValue_ReturnValue, FString CallFunc_GetQualitySetResolutionZoom_ReturnValue, int CallFunc_ReadConfigInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue);// 0x8a873f8 0x78c36b8d60
	void ToggleRideTip(bool Show, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c36b8e40
	void ToggleRideBrush(bool Ride, bool CallFunc_SetImageTexture_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x8a873f8 0x78c36b8f20
	void ResetVoiceChat(float CallFunc_GetVoiceChatVolumeRecordDefaultValue_ReturnValue, float CallFunc_GetVoiceChatVolumePlayDefaultValue_ReturnValue);// 0x8a873f8 0x78c36b9000
	void ToggleAutoPick(bool On, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c36b5720
	void IsUserSetting(enum Type, out bool Result, int CallFunc_GetUserSetting_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c36b5800
	void InitUserSetting(bool Temp_bool_Variable, bool CallFunc_IsUserSetting_Result, bool CallFunc_IsUserSetting_Result, bool CallFunc_IsUserSetting_Result, bool CallFunc_IsUserSetting_Result, Image* K2Node_Select_Default);// 0x8a873f8 0x78c36b58e0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c36b59c0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c36b5aa0
	void CreatePrivacyItems(out bool[] Values, Vector2D pos, Anchors Anchor, enum[] Types, int Temp_int_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, BaseSettingSwithcer_C* CallFunc_Create_ReturnValue, enum[] K2Node_MakeArray_Array, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c36b5b80
	void RequestPrivacySettings(GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, BaseNetHandle* CallFunc_GetNetActor_ReturnValue, ClientNetMessageHandle* K2Node_DynamicCast_AsClient_Net_Message_Handle, bool K2Node_DynamicCast_bSuccess, NetMessageHandle* K2Node_DynamicCast_AsNet_Message_Handle, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c36b5c60
	void QuitLog();// 0x8a873f8 0x78c36b5d40
	void InitVoiceChatVolumn(float CallFunc_GetLocalVoiceRecordVolumePercent_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_GetLocalVoicePlayVolumePercent_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x8a873f8 0x78c36b5e20
	void SelectFPS(int Level, FString CallFunc_GetQualitySetFPSLabel_ReturnValue, Button*[] K2Node_MakeArray_Array);// 0x8a873f8 0x78c36b5f00
	void SelectQuality(int Level, FString CallFunc_GetQualitySetResolutionZoom_ReturnValue, float CallFunc_GetResolutionFromQuality_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_ReadConfigInt_ReturnValue, FString CallFunc_GetQualitySetLevelLabel_ReturnValue, Button*[] K2Node_MakeArray_Array);// 0x8a873f8 0x78c36b5fe0
	void ToggleMultiBtnStyle(int Level, out Button*[] btns, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, Button* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, SlateColor K2Node_Select_Default, ButtonStyle K2Node_Select_Default);// 0x8a873f8 0x78c36b60c0
	void SelectShadow(int Level, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetQualitySetShadowTriggerLabel_ReturnValue);// 0x8a873f8 0x78c36b61a0
	void Initquality(Button*[] qualitybtnarray, FString CallFunc_GetQualitySetResolutionZoom_ReturnValue, float CallFunc_GetResolutionFromQuality_ReturnValue, int Temp_int_Variable, int CallFunc_FTrunc_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_ReadConfigInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, int CallFunc_GetWuXiaXQualityLevel_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetBaseSetting_ReturnValue, const Button*[] K2Node_MakeArray_Array, FText CallFunc_Conv_IntToText_ReturnValue, Button* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_GetQualitySetFPSDefaultValue_ReturnValue, FString CallFunc_GetQualitySetFPSLabel_ReturnValue, int CallFunc_GetQualitySetShadowTriggerDefaultValue_ReturnValue, int CallFunc_ReadConfigInt_ReturnValue, FString CallFunc_GetQualitySetShadowTriggerLabel_ReturnValue, int CallFunc_ReadConfigInt_ReturnValue, int CallFunc_GetQualitySetAADefaultValue_ReturnValue, FString CallFunc_GetQualitySetAALabel_ReturnValue, int CallFunc_ReadConfigInt_ReturnValue);// 0x8a873f8 0x78c36b6280
	void SelectAA(int Level, FString CallFunc_GetQualitySetAALabel_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c36b6360
	void ToggleSwitchStyle(bool On, Button* onbtn, Button* offbtn, TextBlock* offtext, TextBlock* ontext, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c36b6440
	void ResetQuickMsgPanel(out int[] arr, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Array_Get_Item, Widget* CallFunc_GetChildAt_ReturnValue, RightQuickMsgUI_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, LeftQuickMsgUI_C* K2Node_DynamicCast_AsLeft_Quick_Msg_UI, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int[] CallFunc_Map_Keys_Keys, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Get_Item, RightQuickMsgUI_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c36b6520
	void SaveQuickMsgArr(int[] arr, int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, LeftQuickMsgUI_C* K2Node_DynamicCast_AsLeft_Quick_Msg_UI, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c36b6600
	void ToggleLeftStyle(int index, int Style, Widget* CallFunc_GetChildAt_ReturnValue, LeftQuickMsgUI_C* K2Node_DynamicCast_AsLeft_Quick_Msg_UI, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c36b66e0
	void CheckAndGetFirstEmptyMsg(out bool findempty, out int index, int idx, bool find, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, LeftQuickMsgUI_C* K2Node_DynamicCast_AsLeft_Quick_Msg_UI, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c36b67c0
	void SetAudioQualityUI(int CallFunc_GetVolumeQuality_ReturnValue, Button*[] K2Node_MakeArray_Array);// 0x8a873f8 0x78c36b68a0
	void ChangeAudioQuality(int Quality, const delegate Temp_delegate_Variable, UserWidgetBase* CallFunc_OpenMessageBox_ReturnValue, Button*[] K2Node_MakeArray_Array, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c36b6980
	FString GetGameVolumeTypeName(enum Type, FString[] names, FString[] K2Node_MakeArray_Array, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x8a873f8 0x78c36b6a60
	void InitGameVolume(GameVolumeSlider_C* LocalGameVolumeSlider, enum[] VolumesValid, enum[] Volumes, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetGameVolumeMultiplier_ReturnValue, bool CallFunc_GetGameVolumeValid_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum[] K2Node_MakeArray_Array, Widget*[] CallFunc_GetAllChildren_ReturnValue, enum[] K2Node_MakeArray_Array, Widget* CallFunc_Array_Get_Item, GameVolumeSlider_C* K2Node_DynamicCast_AsGame_Volume_Slider, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c36b6b40
	void ToggleLeft(int page, ButtonStyle Select, ButtonStyle Normal, LinearColor K2Node_MakeStruct_LinearColor, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_MakeStruct_LinearColor, SlateColor K2Node_MakeStruct_SlateColor, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, Button* K2Node_DynamicCast_AsButton, bool K2Node_DynamicCast_bSuccess, Button* K2Node_DynamicCast_AsButton, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, SizeBox* K2Node_DynamicCast_AsSize_Box, bool K2Node_DynamicCast_bSuccess, SizeBox* K2Node_DynamicCast_AsSize_Box, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, CanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess, CanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, TextBlock* K2Node_DynamicCast_AsText, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, WidgetSwitcher* K2Node_DynamicCast_AsWidget_Switcher, bool K2Node_DynamicCast_bSuccess, WidgetSwitcher* K2Node_DynamicCast_AsWidget_Switcher, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c36b6c20
	void DynamicCreateBaseSettingItem(int PickSetIndex, enum[] basesettingweaponlvs, Margin Offset, enum[] basesettingswitchers, Vector2D pos, Anchors Anchor, enum[] basesettingsliders, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateChildSize K2Node_MakeStruct_SlateChildSize, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HorizontalBox* K2Node_DynamicCast_AsHorizontal_Box, bool K2Node_DynamicCast_bSuccess, BaseSettingSwithcer_C* CallFunc_Create_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, VerticalBox* K2Node_DynamicCast_AsVertical_Box, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int Temp_int_Array_Index_Variable, CanvasPanel* K2Node_DynamicCast_AsCanvas_Panel, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, enum[] K2Node_MakeArray_Array, enum[] K2Node_MakeArray_Array, Margin K2Node_MakeStruct_Margin, Anchors K2Node_MakeStruct_Anchors, enum[] K2Node_MakeArray_Array, int Temp_int_Array_Index_Variable, enum CallFunc_Array_Get_Item, int CallFunc_GetBaseSetting_ReturnValue, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, int Temp_int_Loop_Counter_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BaseSettingWeaponlv_C* CallFunc_Create_ReturnValue, HorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue, enum CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetBaseSetting_ReturnValue, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, bool Temp_bool_IsClosed_Variable, BaseSettingSlider_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, int CallFunc_Array_Length_ReturnValue, enum CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetBaseSettingMaxNum_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_GetBaseSetting_ReturnValue);// 0x8a873f8 0x78c36b6d00
	FString GetBaseSettingTypeName(enum Type, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue);// 0x8a873f8 0x78c36b6de0
	void GetGameIns(out WuXiaXGameInstance* Ins, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c36b6ec0
	void CreateColor(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Margin K2Node_MakeStruct_Margin, SlateChildSize K2Node_MakeStruct_SlateChildSize, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, ConcentrateColor_C* CallFunc_Create_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameIns_Ins, HorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue, LinearColor[] CallFunc_GetConcentrateColors_ReturnValue, LinearColor CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c36b6fa0
	void Construct();// 0x8a873f8 0x78c36b7080
	void ToggleConcentrate(int ID);// 0x8a873f8 0x78c36b7160
	void BndEvt__audiolow_K2Node_ComponentBoundEvent_7_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b7240
	void BndEvt__audiomid_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b7320
	void BndEvt__audiohig_K2Node_ComponentBoundEvent_9_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3a40
	void InitDefaultQuickMsgs(out const QuickMsgInfo Info, int index);// 0x8a873f8 0x78c36b3b20
	void InitAllQuickMsgs(out const QuickMsgInfo Info, bool IsUsing);// 0x8a873f8 0x78c36b3c00
	void BndEvt__commandbtn_K2Node_ComponentBoundEvent_10_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3ce0
	void BndEvt__remindbtn_K2Node_ComponentBoundEvent_11_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3dc0
	void BndEvt__commutebtn_K2Node_ComponentBoundEvent_12_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3ea0
	void BndEvt__change_K2Node_ComponentBoundEvent_13_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3f80
	void BndEvt__cancel_K2Node_ComponentBoundEvent_14_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4060
	void BndEvt__sure_K2Node_ComponentBoundEvent_15_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4140
	void OnMsgRemoved(int ID, int index);// 0x8a873f8 0x78c36b4220
	void AddNewMsg(QuickMsgInfo Info);// 0x8a873f8 0x78c36b4300
	void BndEvt__reset_K2Node_ComponentBoundEvent_16_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b43e0
	void BndEvt__autopickon_K2Node_ComponentBoundEvent_17_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b44c0
	void BndEvt__autopickoff_K2Node_ComponentBoundEvent_18_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b45a0
	void BndEvt__btn_AA_2_K2Node_ComponentBoundEvent_19_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4680
	void BndEvt__btn_AA_1_K2Node_ComponentBoundEvent_20_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4760
	void BndEvt__btn_Shadow_2_K2Node_ComponentBoundEvent_21_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4840
	void BndEvt__btn_Shadow_1_K2Node_ComponentBoundEvent_22_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4920
	void BndEvt__btn_low_quality_K2Node_ComponentBoundEvent_23_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4a00
	void BndEvt__btn_medium_quality_K2Node_ComponentBoundEvent_24_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4ae0
	void BndEvt__btn_hight_quality_K2Node_ComponentBoundEvent_25_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4bc0
	void BndEvt__btn_epic_quality_K2Node_ComponentBoundEvent_26_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4ca0
	void BndEvt__btn_fps_1_K2Node_ComponentBoundEvent_27_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4d80
	void BndEvt__btn_fps_2_K2Node_ComponentBoundEvent_28_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4e60
	void BndEvt__btn_fps_3_K2Node_ComponentBoundEvent_29_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b4f40
	void BndEvt__btn_fps_4_K2Node_ComponentBoundEvent_30_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b5020
	void SetSensitivityType(int Type);// 0x8a873f8 0x78c36b5100
	void BndEvt__sen_low_K2Node_ComponentBoundEvent_31_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b51e0
	void BndEvt__sen_mid_K2Node_ComponentBoundEvent_32_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b52c0
	void BndEvt__sen_high_K2Node_ComponentBoundEvent_33_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b53a0
	void BndEvt__Slider_1_K2Node_ComponentBoundEvent_34_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c36b5480
	void BndEvt__inputslider_K2Node_ComponentBoundEvent_36_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c36b5560
	void SetIsInGame(bool ingame);// 0x8a873f8 0x78c36b5640
	void Open();// 0x8a873f8 0x78c36b1d60
	void BndEvt__return_K2Node_ComponentBoundEvent_35_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b1e40
	void BndEvt__slid_K2Node_ComponentBoundEvent_37_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c36b1f20
	void BndEvt__minus_K2Node_ComponentBoundEvent_38_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2000
	void BndEvt__add_K2Node_ComponentBoundEvent_39_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b20e0
	void InitPrivacySettings(out const bool[] Settings);// 0x8a873f8 0x78c36b21c0
	void BndEvt__follow_K2Node_ComponentBoundEvent_40_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b22a0
	void BndEvt__freeview_K2Node_ComponentBoundEvent_41_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2380
	void BndEvt__horsebutton_K2Node_ComponentBoundEvent_42_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2460
	void BndEvt__horsejoy_K2Node_ComponentBoundEvent_43_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2540
	void BndEvt__Button_100_K2Node_ComponentBoundEvent_44_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2620
	void DestroyOperationSettingUI();// 0x8a873f8 0x78c36b2700
	void BndEvt__mobile_K2Node_ComponentBoundEvent_45_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b27e0
	void BndEvt__Button_103_K2Node_ComponentBoundEvent_46_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0b00
	void BndEvt__Button_103_K2Node_ComponentBoundEvent_47_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b28c0
	void BndEvt__Button_103_K2Node_ComponentBoundEvent_48_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c36b29a0
	void ForceMsgCancel();// 0x8a873f8 0x78c36b2a80
	void BndEvt__close_K2Node_ComponentBoundEvent_49_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2b60
	void BndEvt__openl_K2Node_ComponentBoundEvent_50_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2c40
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_51_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b2d20
	void QualityDefault();// 0x8a873f8 0x78c36b2e00
	void FPSDefault();// 0x8a873f8 0x78c36b2ee0
	void AADefault();// 0x8a873f8 0x78c36b2fc0
	void ShadowDefault();// 0x8a873f8 0x78c36b30a0
	void BrightnessDefault();// 0x8a873f8 0x78c36b3180
	void DynamicFPSDefalut();// 0x8a873f8 0x78c36b3260
	void BndEvt__baseset_1_K2Node_ComponentBoundEvent_52_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3340
	void BndEvt__baseset_2_K2Node_ComponentBoundEvent_55_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3420
	void BndEvt__baseset_3_K2Node_ComponentBoundEvent_57_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3500
	void BndEvt__baseset_4_K2Node_ComponentBoundEvent_60_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b35e0
	void BndEvt__baseset_5_K2Node_ComponentBoundEvent_63_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b36c0
	void OnQuitGameEvent(bool isConfirm);// 0x8a873f8 0x78c36b37a0
	void BndEvt__Button_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3880
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b3960
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_5_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0080
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_53_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0160
	void BndEvt__minus_1_K2Node_ComponentBoundEvent_4_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0240
	void BndEvt__add_1_K2Node_ComponentBoundEvent_53_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0320
	void BndEvt__slid_1_K2Node_ComponentBoundEvent_56_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c36b0400
	void BndEvt__btn_jizhi_qualit_K2Node_ComponentBoundEvent_58_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b04e0
	void BndEvt__btn_fps_5_K2Node_ComponentBoundEvent_61_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b05c0
	void BndEvt__Button_6_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c36b06a0
	void BndEvt__replay_btn_K2Node_ComponentBoundEvent_64_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0780
	void BndEvt__btn_hdr_K2Node_ComponentBoundEvent_66_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0860
	void BndEvt__btn_ldr_K2Node_ComponentBoundEvent_67_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0940
	void BndEvt__slid_1_K2Node_ComponentBoundEvent_31_OnMouseCaptureEndEvent__DelegateSignature();// 0x8a873f8 0x78c36b0a20
	void BndEvt__slid_K2Node_ComponentBoundEvent_62_OnMouseCaptureEndEvent__DelegateSignature();// 0x8a873f8 0x78c36b0be0
	void BndEvt__inputslider_K2Node_ComponentBoundEvent_65_OnMouseCaptureEndEvent__DelegateSignature();// 0x8a873f8 0x78c36b0cc0
	void BndEvt__outputslider_K2Node_ComponentBoundEvent_68_OnMouseCaptureEndEvent__DelegateSignature();// 0x8a873f8 0x78c36b0da0
	void BndEvt__EditableTextBox_60_K2Node_ComponentBoundEvent_6_OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78c36b0e80
	void BndEvt__GetRedeemReward_K2Node_ComponentBoundEvent_69_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b0f60
	void BndEvt__RedeemCode_K2Node_ComponentBoundEvent_70_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c900d980
	void BndEvt__Answer_K2Node_ComponentBoundEvent_72_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b1120
	void BndEvt__PullAnswer_K2Node_ComponentBoundEvent_74_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b1200
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c36b12e0
	void BndEvt__CheckBox_208_K2Node_ComponentBoundEvent_71_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x8a873f8 0x78c36b13c0
	void BndEvt__CheckBox_K2Node_ComponentBoundEvent_73_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x8a873f8 0x78c36b14a0
	void BndEvt__CheckBox_1_K2Node_ComponentBoundEvent_75_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x8a873f8 0x78c36b1580
	void BndEvt__CheckBox_2_K2Node_ComponentBoundEvent_76_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x8a873f8 0x78c36b1660
	void BndEvt__GoToTapComment_K2Node_ComponentBoundEvent_77_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c36b1740
	void Close();// 0x8a873f8 0x78c36b1820
	void ResolutionDefault();// 0x8a873f8 0x78c36b1900
	void HDRDefault();// 0x8a873f8 0x78c36b19e0
	void ClearFeedbackContext();// 0x8a873f8 0x78c36b1ac0
	void BndEvt__ClosBuffTip_K2Node_ComponentBoundEvent_78_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b1ba0
	void BndEvt__OpenBuffTip_K2Node_ComponentBoundEvent_80_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c36b1c80
	void BndEvt__Button_180_K2Node_ComponentBoundEvent_79_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c366e780
	void BndEvt__Button_5_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c366e860
	void ExecuteUbergraph_GlobalSettings(int EntryPoint, ClientLoginHUD* CallFunc_GetClientLoginHud_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, const delegate Temp_delegate_Variable, UserWidgetBase* CallFunc_OpenMessageBox_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int K2Node_CustomEvent_id, bool CallFunc_NotEqual_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, ConcentrateColor_C* K2Node_DynamicCast_AsConcentrate_Color, bool K2Node_DynamicCast_bSuccess, ConcentrateColor_C* K2Node_DynamicCast_AsConcentrate_Color, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetBaseSetting_ReturnValue, enum Temp_byte_Variable, const QuickMsgInfo K2Node_Event_info, int K2Node_Event_Index, const QuickMsgInfo K2Node_Event_info, bool K2Node_Event_isUsing, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, const delegate Temp_delegate_Variable, UserWidgetBase* CallFunc_OpenMessageBox_ReturnValue, bool Temp_bool_Variable, int K2Node_CustomEvent_id, int K2Node_CustomEvent_index, delegate K2Node_CreateDelegate_OutputDelegate, RightQuickMsgUI_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, QuickMsgInfo K2Node_CustomEvent_Info, delegate K2Node_CreateDelegate_OutputDelegate, Widget* CallFunc_GetChildAt_ReturnValue, LeftQuickMsgUI_C* K2Node_DynamicCast_AsLeft_Quick_Msg_UI, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckAndGetFirstEmptyMsg_findempty, int CallFunc_CheckAndGetFirstEmptyMsg_index, bool CallFunc_CheckAndGetFirstEmptyMsg_findempty, int CallFunc_CheckAndGetFirstEmptyMsg_index, int[] CallFunc_GetDefaultQuickMsgIDs_ReturnValue, int K2Node_Event_Type, Button*[] K2Node_MakeArray_Array, float CallFunc_ChangeSensitivity_ReturnValue, float CallFunc_ChangeSensitivity_ReturnValue, float CallFunc_ChangeSensitivity_ReturnValue, float K2Node_ComponentBoundEvent_Value, float K2Node_ComponentBoundEvent_Value, bool K2Node_Event_ingame, Button*[] K2Node_MakeArray_Array, Button*[] K2Node_MakeArray_Array, float K2Node_ComponentBoundEvent_Value, const bool[] K2Node_Event_settings, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetBaseSetting_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Min_ReturnValue, int CallFunc_Max_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_GetActiveWidgetIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_IsBureau_ReturnValue, bool K2Node_CustomEvent_isConfirm, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, UserWidgetBase* CallFunc_OpenUI_ReturnValue, ClientLoginHUD* CallFunc_GetClientLoginHud_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_ComponentBoundEvent_Value, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UserWidgetBase* CallFunc_OpenUI_ReturnValue, ClientLoginHUD* CallFunc_GetClientLoginHud_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXLeitaiHUD* K2Node_DynamicCast_AsWu_Xia_XLeitai_HUD, bool K2Node_DynamicCast_bSuccess, WuXiaXDLDHUD* K2Node_DynamicCast_AsWu_Xia_XDLDHUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString K2Node_Select_Default, UserWidgetBase* CallFunc_OpenMessageBox_ReturnValue, CharacterShowManager* CallFunc_GetCharacterShowDirector_ReturnValue, bool CallFunc_IsValid_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, FString CallFunc_Conv_TextToString_ReturnValue, ClientNetMessageHandle* CallFunc_GetClientNetMessageHandle_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, UserWidgetBase* CallFunc_OpenTip_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, LeftQuickMsgUI_C* CallFunc_Create_ReturnValue, bool K2Node_ComponentBoundEvent_bIsChecked, PanelSlot* CallFunc_AddChild_ReturnValue, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, ClientNetMessageHandle* CallFunc_GetClientNetMessageHandle_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FString CallFunc_Left_ReturnValue, int CallFunc_Len_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_Int64Int64_ReturnValue, FString K2Node_Select_Default, float CallFunc_GetResolutionFromQuality_ReturnValue, int CallFunc_FTrunc_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_GetDeviceHDRIsShow_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_GetDeviceHDRDefault_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, RightQuickMsgUI_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_CheckWidgetClickInterval_ReturnValue, enum K2Node_Select_Default, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UserWidgetBase* CallFunc_OpenUI_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SobotWebWidget_C* K2Node_DynamicCast_AsSobot_Web_Widget, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, enum CallFunc_PlatformType_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_EncodeUrl_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, enum Temp_byte_Variable, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, enum K2Node_Select_Default, UserWidgetBase* CallFunc_OpenUI_ReturnValue);// 0x8a873f8 0x78c366e940
	void ForceCloseRightMsg__DelegateSignature();// 0x8a873f8 0x78c366ea20
	void QuickChangeResult__DelegateSignature(bool Confirm);// 0x8a873f8 0x78c366eb00
	void ToggleRightQuickMsg__DelegateSignature(bool Show);// 0x8a873f8 0x78c366ecc0
	void ToggleLeftQuickMsg__DelegateSignature(bool Show);// 0x8a873f8 0x78c366ee80

--------------------------------
Class: BaseSettingSwithcer_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4774480
	Button* Close;//[Offset: 0x268, Size: 0x8] 0x78c4774400
	TextBlock* offtext;//[Offset: 0x270, Size: 0x8] 0x78c4774380
	TextBlock* ontext;//[Offset: 0x278, Size: 0x8] 0x78c4774300
	Button* Open;//[Offset: 0x280, Size: 0x8] 0x78c4774280
	int Num;//[Offset: 0x288, Size: 0x4] 0x78c4776300
	enum Type;//[Offset: 0x28c, Size: 0x1] 0x78c448a9c0
	delegate ChangeSwithcer;//[Offset: 0x290, Size: 0x10] 0x78c4776200
	void ToggleStyle(SlateColor TextOff, SlateColor TextOn, ButtonStyle Select, ButtonStyle Normal, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3b590e0
	void SetTypeAndNum(enum Type, int Num);// 0x8a873f8 0x78c3b591c0
	void BndEvt__open_K2Node_ComponentBoundEvent_0_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b592a0
	void BndEvt__close_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b59380
	void ExecuteUbergraph_BaseSettingSwithcer(int EntryPoint, enum K2Node_CustomEvent_Type, int K2Node_CustomEvent_Num, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c3b59540
	void ChangeSwithcer__DelegateSignature(enum Type, int Num);// 0x8a873f8 0x78c3b59700

--------------------------------
Class: RightQuickMsgUI_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c45eea80
	TextBlock* Content;//[Offset: 0x268, Size: 0x8] 0x78c45eea00
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78c45ee980
	Button* Play;//[Offset: 0x278, Size: 0x8] 0x78c45ee900
	Button* write;//[Offset: 0x280, Size: 0x8] 0x78c45ee880
	int ID;//[Offset: 0x288, Size: 0x4] 0x78c45ee800
	bool IsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x78c45ee780
	delegate SetTempInfo;//[Offset: 0x290, Size: 0x10] 0x78c45eff80
	QuickMsgInfo Info;//[Offset: 0x2a0, Size: 0x28] 0x78c45eff00
	bool showing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78c45efe80
	void SetInfo(QuickMsgInfo Info);// 0x8a873f8 0x78c3b589e0
	void BindEvent(GlobalSettings_C* Parent);// 0x8a873f8 0x78c3b58ac0
	void ToggleSate(bool Show);// 0x8a873f8 0x78c3b58ba0
	void SetIsUsed(bool using);// 0x8a873f8 0x78c3b58c80
	void ShowWrite();// 0x8a873f8 0x78c3b58d60
	void BndEvt__write_K2Node_ComponentBoundEvent_0_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b58e40
	void ForceClose();// 0x8a873f8 0x78c3b58f20
	void Result(bool Confirm);// 0x8a873f8 0x78c3b55720
	void ExecuteUbergraph_RightQuickMsgUI(int EntryPoint, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, QuickMsgInfo K2Node_CustomEvent_Info, GlobalSettings_C* K2Node_CustomEvent_parent, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_CustomEvent_Show, bool K2Node_CustomEvent_using, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, bool K2Node_CustomEvent_confirm);// 0x8a873f8 0x78c3b55800
	void SetTempInfo__DelegateSignature(QuickMsgInfo Info);// 0x8a873f8 0x78c3b559c0

--------------------------------
Class: LeftQuickMsgUI_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4770780
	Image* bg;//[Offset: 0x268, Size: 0x8] 0x78c4770700
	Image* bg;//[Offset: 0x270, Size: 0x8] 0x78c4770680
	Button* Button;//[Offset: 0x278, Size: 0x8] 0x78c4770600
	SizeBox* change;//[Offset: 0x280, Size: 0x8] 0x78c4770580
	TextBlock* Content;//[Offset: 0x288, Size: 0x8] 0x78c4770500
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x78c4770480
	Button* Play;//[Offset: 0x298, Size: 0x8] 0x78c4770400
	Spacer* Space;//[Offset: 0x2a0, Size: 0x8] 0x78c4770380
	TextBlock* tip;//[Offset: 0x2a8, Size: 0x8] 0x78c4770300
	QuickMsgInfo Info;//[Offset: 0x2b0, Size: 0x28] 0x78c4770280
	int ID;//[Offset: 0x2d8, Size: 0x4] 0x78c4770200
	int index;//[Offset: 0x2dc, Size: 0x4] 0x78c4770180
	delegate RemoveMsg;//[Offset: 0x2e0, Size: 0x10] 0x78c4770100
	QuickMsgInfo tempinfo;//[Offset: 0x2f0, Size: 0x28] 0x78c4770080
	bool ContentChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1] 0x78c4772100
	void ToggleStyle(int Type, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3b57e80
	void SetInfo(QuickMsgInfo Info, int index);// 0x8a873f8 0x78c3b57f60
	void BindEvent(GlobalSettings_C* Parent);// 0x8a873f8 0x78c3b58040
	void ToggleSate(bool Show);// 0x8a873f8 0x78c3b58120
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b58200
	void ChangeResult(bool Confirm);// 0x8a873f8 0x78c3b583c0
	void ExecuteUbergraph_LeftQuickMsgUI(int EntryPoint, QuickMsgInfo K2Node_MakeStruct_QuickMsgInfo, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, QuickMsgInfo K2Node_CustomEvent_Info, int K2Node_CustomEvent_index, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GlobalSettings_C* K2Node_CustomEvent_parent, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_CustomEvent_Show, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, bool K2Node_CustomEvent_confirm);// 0x8a873f8 0x78c3b584a0
	void RemoveMsg__DelegateSignature(int ID, int index);// 0x8a873f8 0x78c3b58660

--------------------------------
Class: GameVolumeSlider_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4772580
	Button* Add;//[Offset: 0x268, Size: 0x8] 0x78c4772500
	CheckBox* CheckBox;//[Offset: 0x270, Size: 0x8] 0x78c4772480
	Image* Color;//[Offset: 0x278, Size: 0x8] 0x78c4772400
	Image* Color;//[Offset: 0x280, Size: 0x8] 0x78c4772380
	Button* minus;//[Offset: 0x288, Size: 0x8] 0x78c4772300
	ProgressBar* pro;//[Offset: 0x290, Size: 0x8] 0x78c4772280
	Slider* slid;//[Offset: 0x298, Size: 0x8] 0x78c4772200
	TextBlock* Value;//[Offset: 0x2a0, Size: 0x8] 0x78c4772180
	delegate VolumeChange;//[Offset: 0x2a8, Size: 0x10] 0x78c4774200
	delegate ValidChange;//[Offset: 0x2b8, Size: 0x10] 0x78c4774180
	enum Volume;//[Offset: 0x2c8, Size: 0x1] 0x78c448b6e0
	float percent;//[Offset: 0x2cc, Size: 0x4] 0x78c4774080
	enum Valid;//[Offset: 0x2d0, Size: 0x1] 0x78c448b5a0
	bool ?valid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1] 0x78c4773f80
	void OverridSoundClass(enum Temp_byte_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, SoundClass* Temp_object_Variable, bool Temp_bool_Variable, float Temp_float_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, float K2Node_Select_Default, SoundClass* K2Node_Select_Default);// 0x8a873f8 0x78c3b5ab20
	void BndEvt__slid_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c3b5ac00
	void SetVolumeAndValid(enum Volume, float percent, enum Valid, bool ?valid);// 0x8a873f8 0x78c3b5ace0
	void BndEvt__CheckBox_0_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x8a873f8 0x78c3b57400
	void BndEvt__add_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b574e0
	void BndEvt__minus_K2Node_ComponentBoundEvent_5_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b575c0
	void BndEvt__slid_K2Node_ComponentBoundEvent_2_OnMouseCaptureEndEvent__DelegateSignature();// 0x8a873f8 0x78c3b576a0
	void ExecuteUbergraph_GameVolumeSlider(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float K2Node_ComponentBoundEvent_Value, enum K2Node_CustomEvent_volume, float K2Node_CustomEvent_percent, enum K2Node_CustomEvent_valid, bool K2Node_CustomEvent__valid, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Round_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool K2Node_ComponentBoundEvent_bIsChecked, enum K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Round_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x8a873f8 0x78c3b57780
	void ValidChange__DelegateSignature(enum Valid, bool ?valid);// 0x8a873f8 0x78c3b57940
	void VolumeChange__DelegateSignature(enum Volume, float Value);// 0x8a873f8 0x78c3b57b00

--------------------------------
Class: BaseSettingSlider_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4776e00
	Button* Add;//[Offset: 0x268, Size: 0x8] 0x78c4776d80
	Image* Color;//[Offset: 0x270, Size: 0x8] 0x78c4776d00
	Image* Color;//[Offset: 0x278, Size: 0x8] 0x78c4776c80
	Button* minus;//[Offset: 0x280, Size: 0x8] 0x78c4776c00
	ProgressBar* pro;//[Offset: 0x288, Size: 0x8] 0x78c4776b80
	Slider* slid;//[Offset: 0x290, Size: 0x8] 0x78c4776b00
	TextBlock* Value;//[Offset: 0x298, Size: 0x8] 0x78c4776a80
	int Max;//[Offset: 0x2a0, Size: 0x4] 0x78c4776a00
	enum Type;//[Offset: 0x2a4, Size: 0x1] 0x78c448cc20
	delegate ValueChanged;//[Offset: 0x2a8, Size: 0x10] 0x78c4776900
	int Num;//[Offset: 0x2b8, Size: 0x4] 0x78c4776880
	int Delta;//[Offset: 0x2bc, Size: 0x4] 0x78c4776800
	int Min;//[Offset: 0x2c0, Size: 0x4] 0x78c4776780
	void SetText(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_EqualEqual_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78c3b5bf40
	void BndEvt__slid_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c3b5c020
	void SetTypeAndNum(int Max, enum Type, int curnum);// 0x8a873f8 0x78c3b5c100
	void BndEvt__add_K2Node_ComponentBoundEvent_0_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b5c1e0
	void BndEvt__minus_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b5c2c0
	void SetValue(float percent);// 0x8a873f8 0x78c3b5c3a0
	void SetMin(int Min);// 0x8a873f8 0x78c3b5c480
	void BndEvt__slid_K2Node_ComponentBoundEvent_3_OnMouseCaptureEndEvent__DelegateSignature();// 0x8a873f8 0x78c3b5c560
	void ExecuteUbergraph_BaseSettingSlider(int EntryPoint, float K2Node_ComponentBoundEvent_Value, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Round_ReturnValue, int K2Node_CustomEvent_Max, enum K2Node_CustomEvent_Type, int K2Node_CustomEvent_CurNum, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float K2Node_CustomEvent_percent, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_Clamp_ReturnValue, int K2Node_CustomEvent_min, int CallFunc_Clamp_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3b5c720
	void ValueChanged__DelegateSignature(enum Type, int Num);// 0x8a873f8 0x78c3b5c8e0

--------------------------------
Class: BaseSettingWeaponlv_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4774f80
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x78c4774f00
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78c4774e80
	delegate ChangeWeaponlv;//[Offset: 0x278, Size: 0x10] 0x78c4774e00
	enum Type;//[Offset: 0x288, Size: 0x1] 0x78c448ace0
	int Num;//[Offset: 0x28c, Size: 0x4] 0x78c4774d00
	void SetTypeAndNum(enum Type, int Num);// 0x8a873f8 0x78c3b599a0
	void BndEvt__Button_59_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3b59a80
	void UpdateStyle();// 0x8a873f8 0x78c3b59b60
	void ExecuteUbergraph_BaseSettingWeaponlv(int EntryPoint, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_CustomEvent_Type, int K2Node_CustomEvent_Num, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3b59d20
	void ChangeWeaponlv__DelegateSignature(enum Type, int Num);// 0x8a873f8 0x78c3b59ee0

--------------------------------
Class: ConcentrateColor_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4773780
	Image* Border;//[Offset: 0x268, Size: 0x8] 0x78c4773700
	Button* Button;//[Offset: 0x270, Size: 0x8] 0x78c4773680
	Image* Color;//[Offset: 0x278, Size: 0x8] 0x78c4773600
	delegate ColorClicked;//[Offset: 0x280, Size: 0x10] 0x78c4773580
	int ColorId;//[Offset: 0x290, Size: 0x4] 0x78c4773500
	void SetColorAndID(LinearColor Color, int ID);// 0x8a873f8 0x78c3b5a180
	void ToggleBorder(bool Select);// 0x8a873f8 0x78c3b5a260
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_0_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c3b5a340
	void ExecuteUbergraph_ConcentrateColor(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor K2Node_CustomEvent_Color, int K2Node_CustomEvent_id, bool K2Node_CustomEvent_Select, enum K2Node_Select_Default);// 0x8a873f8 0x78c3b5a500
	void ColorClicked__DelegateSignature(int ColorId);// 0x8a873f8 0x78c3b5a6c0

--------------------------------
Class: SobotWebWidget_C.SobotWebUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x330, Size: 0x8] 0x78b8923800
	Button* Button;//[Offset: 0x338, Size: 0x8] 0x78b8923780
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78b8923700
	WebBrowser* WebBrowser;//[Offset: 0x348, Size: 0x8] 0x78b8923680
	void GoToSobotChat(FString SobotURL);// 0x8a873f8 0x78c3b57160
	void BndEvt__Button_42_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c3b57320
	void ExecuteUbergraph_SobotWebWidget(int EntryPoint, bool CallFunc_CloseUI_ReturnValue, FString K2Node_CustomEvent_SobotURL);// 0x8a873f8 0x78c3b53b20

--------------------------------
Class: FInteractiveBtnStyle
	enum InteractiveType_5_9341744A423BFB47CF7BF58C01600DE8;//[Offset: 0x0, Size: 0x1] 0x78c5faa7e0
	PaperSprite* Sprite_9_46367E214D53BBC592D2C3996048AB06;//[Offset: 0x8, Size: 0x8] 0x78c646d680

--------------------------------
Class: SingleSkillWidget_C.SkillWidget_C.SkillBaseWidget_C.UserWidget.Widget.Visual.Object
	Image* EffectIcon1;//[Offset: 0x3c8, Size: 0x8] 0x78c6117800
	Image* EffectIcon2;//[Offset: 0x3d0, Size: 0x8] 0x78c6117880
	Image* EffectIcon3;//[Offset: 0x3d8, Size: 0x8] 0x78c6117900
	Image* HoveredImage;//[Offset: 0x3e0, Size: 0x8] 0x78c6117980
	Image* LineImage;//[Offset: 0x3e8, Size: 0x8] 0x78c6117a00
	Image* SkillEquipMake;//[Offset: 0x3f0, Size: 0x8] 0x78c6117a80
	Image* skillIcon;//[Offset: 0x3f8, Size: 0x8] 0x78c6117b00
	TextBlock* skillname;//[Offset: 0x400, Size: 0x8] 0x78c6117b80
	Image* SkillSlot;//[Offset: 0x408, Size: 0x8] 0x78c6117c00
	int[] EffectType;//[Offset: 0x410, Size: 0x10] 0x78bc9e9d40
	LinearColor DisabledColor;//[Offset: 0x420, Size: 0x10] 0x78c6117d00
	LinearColor NormalColor;//[Offset: 0x430, Size: 0x10] 0x78c6117d80
	LinearColor BuffColor;//[Offset: 0x440, Size: 0x10] 0x78c6117e00
	LinearColor DeBuffColor;//[Offset: 0x450, Size: 0x10] 0x78c6117e80
	delegate EnterSlot;//[Offset: 0x460, Size: 0x10] 0x78c6117f00
	int skillid;//[Offset: 0x470, Size: 0x4] 0x78c6117f80
	delegate LeaveSlot;//[Offset: 0x478, Size: 0x10] 0x78c6118000
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1] 0x78c6118080
	FString Description;//[Offset: 0x490, Size: 0x10] 0x78c6118100
	int Level;//[Offset: 0x4a0, Size: 0x4] 0x78c6118180
	int weapontype;//[Offset: 0x4a4, Size: 0x4] 0x78c6118200
	int SkillType;//[Offset: 0x4a8, Size: 0x4] 0x78c6118280
	PaperSprite* icon;//[Offset: 0x4b0, Size: 0x8] 0x78c6118300
	delegate BeDrop;//[Offset: 0x4b8, Size: 0x10] 0x78c6118380
	delegate OnAddSkill;//[Offset: 0x4c8, Size: 0x10] 0x78c6118400
	int EquipNumber;//[Offset: 0x4d8, Size: 0x4] 0x78c6116380
	bool K2Node_Event_state;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1] 0x78c6116400
	bool K2Node_Event_state;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 0x1] 0x78c6116480
	void OnAddSkill__DelegateSignature();// 0x8a873f8 0x78c6e7e400
	void LeaveSlot__DelegateSignature(enum bpp__Type__pf, int bpp__Index__pf, int bpp__SkillID__pf);// 0x8a873f8 0x78c6e76de0
	void EnterSlot__DelegateSignature(enum bpp__Type__pf, int bpp__Index__pf, int bpp__SkillID__pf);// 0x8a873f8 0x78c66658e0
	void SetSkillState(bool bpp__IsEnabled__pf);// 0x742fd20 0x78c6666b40
	void SetSkillName(FString bpp__name__pf__const);// 0x74301c0 0x78c5e489e0
	void SetSkillIcon(PaperSprite* bpp__Icon__pf);// 0x743027c 0x78c5e48200
	void SetInfo(FString bpp__name__pf__const, FString bpp__Descript__pf__const);// 0x742f50c 0x78c332e320
	void SetHoveredState(bool bpp__IsHovered__pf);// 0x74303e4 0x78c6e76d00
	void SetEquipState(bool bpp__IsEquip__pf);// 0x743032c 0x78c6e7e780
	void SetEffectColor(bool bpp__IsEnabled__pf);// 0x743049c 0x78c6e7e860
	void SetEffect(int bpp__Index__pf, PaperSprite* bpp__Icon__pf, int bpp__EffectType__pf);// 0x7430554 0x78c761ebe0
	EventReply OnMouseButtonUp(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x742f31c 0x78c7ba12e0
	EventReply OnMouseButtonDown(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x742f900 0x78c7eed360
	bool OnDrop(Geometry bpp__MyGeometry__pf, PointerEvent bpp__PointerEvent__pf, DragDropOperation* bpp__Operation__pf);// 0x742f620 0x78c5e44300
	void OnDragDetected(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__PointerEvent__pf__const, out DragDropOperation* bpp__Operation__pf);// 0x742faf0 0x78c77cebe0
	void OnDragDestroy();// 0x74306b8 0x78c6e76a60
	void Init(UISkillInfo bpp__SkillInfo__pf, bool bpp__IsActive__pf);// 0x742fdd8 0x78c2f76520
	void FinishDrag();// 0x743069c 0x78d1d65720
	void BeDrop__DelegateSignature(enum bpp__SSkillEquipType__pf, int bpp__SSkillIndex__pf, int bpp__SSkillID__pf, enum bpp__TSkillEquipType__pf, int bpp__TSkillIndex__pf, int bpp__TSkillID__pf);// 0x8a873f8 0x78c2f75f00

--------------------------------
Class: SkillWidget_C.SkillBaseWidget_C.UserWidget.Widget.Visual.Object
	bool IsHovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78c6113880
	int ID;//[Offset: 0x27c, Size: 0x4] 0x78c6113900
	bool IsGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78c6113980
	WuXiaXHUD* HUD;//[Offset: 0x288, Size: 0x8] 0x78c6113a00
	bool CallFunc_CanInteractive_Ok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78c6113a80
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x294, Size: 0x38] 0x78c6113b00
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x2d0, Size: 0x70] 0x78c6113b80
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x340, Size: 0x70] 0x78c6113c00
	WuXiaXHUD* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud;//[Offset: 0x3b0, Size: 0x8] 0x78c6113c80
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1] 0x78c6113d00
	void UpdateEdgeOffset(float bpp__Offset__pf);// 0x743e0cc 0x78c7888040
	void SetIsHover();// 0x743e4b4 0x78c6661c80
	void OnMouseLeave(out const PointerEvent bpp__MouseEvent__pf__const);// 0x743e350 0x78c6660240
	void OnMouseEnter(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x743e17c 0x78c65b2b60
	void Construct();// 0x743e4d0 0x78c65b76a0

--------------------------------
Class: SkillEquipSlotWidget_C.SkillBaseWidget_C.UserWidget.Widget.Visual.Object
	enum slottype;//[Offset: 0x278, Size: 0x1] 0x78bc9e9b60
	int index;//[Offset: 0x27c, Size: 0x4] 0x78c6119c00
	int SkillType;//[Offset: 0x280, Size: 0x4] 0x78c6119c80
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1] 0x78c6119d00
	Texture2D* IconTexture;//[Offset: 0x288, Size: 0x8] 0x78c6119d80
	delegate EnterSlot;//[Offset: 0x290, Size: 0x10] 0x78c6119e00
	delegate LeaveSlot;//[Offset: 0x2a0, Size: 0x10] 0x78c6119e80
	delegate BeDrop;//[Offset: 0x2b0, Size: 0x10] 0x78c6119f00
	bool IsCanUseSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78c6119f80
	int skillid;//[Offset: 0x2c4, Size: 0x4] 0x78c611a000
	delegate RemoveSlot;//[Offset: 0x2c8, Size: 0x10] 0x78c611a080
	int CompareIndex;//[Offset: 0x2d8, Size: 0x4] 0x78c611a100
	WuXiaXHUD* HUD;//[Offset: 0x2e0, Size: 0x8] 0x78c611a180
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x2e8, Size: 0x38] 0x78c611a200
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x320, Size: 0x70] 0x78c611a280
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x390, Size: 0x70] 0x78c611a300
	PointerEvent K2Node_Event_PointerEvent;//[Offset: 0x400, Size: 0x70] 0x78c611a380
	DragDropOperation* K2Node_Event_Operation;//[Offset: 0x470, Size: 0x8] 0x78c611a400
	bool CallFunc_CanInteractive_Ok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1] 0x78c611a480
	WuXiaXHUD* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud;//[Offset: 0x480, Size: 0x8] 0x78c611a500
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1] 0x78c6118480
	void RemoveSlot__DelegateSignature(enum bpp__Type__pf, int bpp__Index__pf);// 0x8a873f8 0x78c6e7b5a0
	void LeaveSlot__DelegateSignature(enum bpp__Type__pf, int bpp__Index__pf, int bpp__SkillID__pf);// 0x8a873f8 0x78c6663260
	void EnterSlot__DelegateSignature(enum bpp__Type__pf, int bpp__Index__pf, int bpp__SkillID__pf);// 0x8a873f8 0x78c6663880
	void UnHoverSkill();// 0x7438988 0x78c5e4fc80
	void SetUseState(bool bpp__CanUse__pf);// 0x7437adc 0x78c9a43c00
	void SetIsHover();// 0x74389a4 0x78c5e4cb80
	void OnMouseLeave(out const PointerEvent bpp__MouseEvent__pf__const);// 0x7438658 0x78c7885f00
	void OnMouseEnter(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x7438484 0x78c9a44ae0
	EventReply OnMouseButtonUp(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x7437b94 0x78c6e76ec0
	EventReply OnMouseButtonDown(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x7437d84 0x78c9a43f80
	bool OnDrop(Geometry bpp__MyGeometry__pf, PointerEvent bpp__PointerEvent__pf, DragDropOperation* bpp__Operation__pf);// 0x74381a4 0x78c6e7b760
	void OnDragDetected(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__PointerEvent__pf__const, out DragDropOperation* bpp__Operation__pf);// 0x7437f74 0x78c5e4fba0
	void OnDragDestroy();// 0x74389dc 0x78c5e4ff20
	void OnDragCancelled(out const PointerEvent bpp__PointerEvent__pf__const, DragDropOperation* bpp__Operation__pf);// 0x74387bc 0x78c6665c60
	void isenable(out bool bpp__Enable__pf);// 0x7437900 0x78c9a429a0
	void HoverSkill();// 0x743896c 0x78c7eed440
	void EquipSkill(Texture2D* bpp__Texture2D__pf, bool bpp__CanUseSkill__pf);// 0x74379d8 0x78c5e4fe40
	void Construct();// 0x74389c0 0x78c5e4fd60
	void ClearSkill();// 0x74379bc 0x78c6e7e4e0
	void BeDrop__DelegateSignature(enum bpp__SSkillEquipType__pf, int bpp__SSkillIndex__pf, int bpp__SSkillID__pf, enum bpp__TSkillEquipType__pf, int bpp__TSkillIndex__pf, int bpp__TSkillID__pf);// 0x8a873f8 0x78c6665b80

--------------------------------
Class: SkillBookSlotWidget_C.SkillBaseWidget_C.UserWidget.Widget.Visual.Object
	Image* BackgroundImage;//[Offset: 0x278, Size: 0x8] 0x78c6115780
	Image* HoveredImage;//[Offset: 0x280, Size: 0x8] 0x78c6115800
	Image* ItemImage;//[Offset: 0x288, Size: 0x8] 0x78c6115880
	TextBlock* ItemNameText;//[Offset: 0x290, Size: 0x8] 0x78c6115900
	Image* LevelImage;//[Offset: 0x298, Size: 0x8] 0x78c6115980
	VerticalBox* SkillBookButtonPanel;//[Offset: 0x2a0, Size: 0x8] 0x78c6115a00
	SkillBookUseButtonWidget_C* SkillBookUseButtonWidget;//[Offset: 0x2a8, Size: 0x8] 0x78c6115a80
	VerticalBox* SkillNamePanel;//[Offset: 0x2b0, Size: 0x8] 0x78c6115b00
	int itemindex;//[Offset: 0x2b8, Size: 0x4] 0x78c6115b80
	delegate UseSkillBook;//[Offset: 0x2c0, Size: 0x10] 0x78c6115c00
	int skillid;//[Offset: 0x2d0, Size: 0x4] 0x78c6115c80
	int weapontype;//[Offset: 0x2d4, Size: 0x4] 0x78c6115d00
	int Level;//[Offset: 0x2d8, Size: 0x4] 0x78c6115d80
	FString Name;//[Offset: 0x2e0, Size: 0x10] 0x78c6115e00
	FString Description;//[Offset: 0x2f0, Size: 0x10] 0x78c6115e80
	bool IsHovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x78c6115f00
	WuXiaXHUD* HUD;//[Offset: 0x308, Size: 0x8] 0x78c6115f80
	bool CallFunc_CanInteractive_Ok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x78c6116000
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x314, Size: 0x38] 0x78c6116080
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x350, Size: 0x70] 0x78c6116100
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x3c0, Size: 0x70] 0x78c6116180
	PointerEvent K2Node_Event_PointerEvent;//[Offset: 0x430, Size: 0x70] 0x78c6116200
	DragDropOperation* K2Node_Event_Operation;//[Offset: 0x4a0, Size: 0x8] 0x78c6116280
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4a8, Size: 0x10] 0x78c6116300
	bool K2Node_Event_state;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1] 0x78c6114280
	WuXiaXHUD* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud;//[Offset: 0x4c0, Size: 0x8] 0x78c6114300
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1] 0x78c6114380
	void UseSkillBookButtonDown__DelegateSignature();// 0x8a873f8 0x78c5e4cc60
	void UseSkillBook__DelegateSignature(int bpp__ItemIndex__pf);// 0x8a873f8 0x78c7ba1200
	void UseButtonDown();// 0x7433f54 0x78c2f789e0
	void SetLevel(int bpp__Level__pf);// 0x743480c 0x78c7886520
	void SetIsHover();// 0x7434dc0 0x78c5e44f40
	void SetIcon(Texture2D* bpp__Icon__pf);// 0x743475c 0x78c6e7d520
	void SetHoveredState(bool bpp__IsHovered__pf);// 0x74345ec 0x78c6e75640
	void SetButtonState(bool bpp__IsEnable__pf);// 0x74346a4 0x78c6661ba0
	void SetButtonDownState(bool bpp__IsButtonDown__pf);// 0x7433f70 0x78c2f75e20
	void OnMouseLeave(out const PointerEvent bpp__MouseEvent__pf__const);// 0x7434aac 0x78c6e71040
	void OnMouseEnter(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x74348d8 0x78c6e776a0
	bool OnDrop(Geometry bpp__MyGeometry__pf, PointerEvent bpp__PointerEvent__pf, DragDropOperation* bpp__Operation__pf);// 0x743430c 0x78c6e70be0
	void OnDragCancelled(out const PointerEvent bpp__PointerEvent__pf__const, DragDropOperation* bpp__Operation__pf);// 0x7434c10 0x78c5e44ae0
	void Init(int bpp__ItemIndex__pf, int bpp__SkillID__pf, int bpp__Weapontype__pf, int bpp__Level__pf, FString bpp__name__pf__const, FString bpp__Description__pf__const, Texture2D* bpp__Icon__pf, bool bpp__IsEnable__pf);// 0x7434028 0x78c6660080
	void Construct();// 0x74348bc 0x78c6e7ab20

--------------------------------
Class: SkillBookUseButtonWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* ButtonText;//[Offset: 0x260, Size: 0x8] 0x78c6114f80
	Image* icon;//[Offset: 0x268, Size: 0x8] 0x78c6115000
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x78c6115080
	delegate UseSkillBookButtonDown;//[Offset: 0x278, Size: 0x10] 0x78c6115100
	WuXiaXHUD* HUD;//[Offset: 0x288, Size: 0x8] 0x78c6115180
	bool CallFunc_CanInteractive_Ok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78c6115200
	Geometry K2Node_Event_MyGeometry;//[Offset: 0x294, Size: 0x38] 0x78c6115280
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x2d0, Size: 0x70] 0x78c6113200
	PointerEvent K2Node_Event_MouseEvent;//[Offset: 0x340, Size: 0x70] 0x78c6113280
	WuXiaXHUD* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud;//[Offset: 0x3b0, Size: 0x8] 0x78c6113300
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1] 0x78c6113380
	void UseSkillBookButtonDown__DelegateSignature();// 0x8a873f8 0x78c77c4760
	void SetHoveredState(bool bpp__IsHovered__pf);// 0x7436358 0x78c7ba0320
	void SetButtonState(bool bpp__IsEnabled__pf);// 0x7436410 0x78c6e70b00
	void OnMouseLeave(out const PointerEvent bpp__MouseEvent__pf__const);// 0x74366b8 0x78c7ba0400
	void OnMouseEnter(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x74364e4 0x78c6e77be0
	EventReply OnMouseButtonDown(Geometry bpp__MyGeometry__pf, out const PointerEvent bpp__MouseEvent__pf__const);// 0x7436168 0x78c65b4840
	void Construct();// 0x74364c8 0x78c6e7f9e0

--------------------------------
Class: ItemHotKeySlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4733700
	Image* Background;//[Offset: 0x268, Size: 0x8] 0x78c4733680
	TextBlock* HotKeyText;//[Offset: 0x270, Size: 0x8] 0x78c4733600
	Image* HoveredImage;//[Offset: 0x278, Size: 0x8] 0x78c4733580
	Image* ItemImage;//[Offset: 0x280, Size: 0x8] 0x78c4733500
	delegate DragToHotKey;//[Offset: 0x288, Size: 0x10] 0x78c4733480
	int hotkeyindex;//[Offset: 0x298, Size: 0x4] 0x78c4733400
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x78c4733380
	Texture2D* icon;//[Offset: 0x2a0, Size: 0x8] 0x78c4733300
	delegate RemoveHotKey;//[Offset: 0x2a8, Size: 0x10] 0x78c4733280
	delegate SwapHotKey;//[Offset: 0x2b8, Size: 0x10] 0x78c4733200
	enum bagtype;//[Offset: 0x2c8, Size: 0x1] 0x78c6045b00
	bool IsHovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1] 0x78c4735200
	delegate SetHoverItem;//[Offset: 0x2d0, Size: 0x10] 0x78c4735180
	delegate SetSelectItem;//[Offset: 0x2e0, Size: 0x10] 0x78c4735100
	BP_WuXiaX_Hud_C* HUD;//[Offset: 0x2f0, Size: 0x8] 0x78c4735080
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c3663c00
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_DetectDragIfPressed_ReturnValue, bool CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue, bool CallFunc_CanInteractive_Ok, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c3663ce0
	void SetButtonDownState(bool IsButtonDown);// 0x8a873f8 0x78c3663dc0
	void SetHoveredState(bool IsHovered);// 0x8a873f8 0x78c3663ea0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation, DragItemHotKey_C* CallFunc_CreateDragDropOperation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, DragItemWidget_C* CallFunc_Create_ReturnValue);// 0x8a873f8 0x78c3663f80
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, DragItemHotKey_C* K2Node_DynamicCast_AsDrag_Item_Hot_Key, bool K2Node_DynamicCast_bSuccess, DragItem_C* K2Node_DynamicCast_AsDrag_Item, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3664060
	void ClearHotKey();// 0x8a873f8 0x78c3664140
	void SetHotKey(Texture2D* icon);// 0x8a873f8 0x78c3664220
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c3664300
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c36643e0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x8a873f8 0x78c36644c0
	void FinishDrag();// 0x8a873f8 0x78c36645a0
	void Construct();// 0x8a873f8 0x78c3664840
	void HotKeyChange(FString Name);// 0x8a873f8 0x78c3664920
	void OnDeagDestroy();// 0x8a873f8 0x78c3664a00
	void ExecuteUbergraph_ItemHotKeySlotWidget(int EntryPoint, Geometry K2Node_Event_MyGeometry, const PointerEvent K2Node_Event_MouseEvent, const PointerEvent K2Node_Event_MouseEvent, const PointerEvent K2Node_Event_PointerEvent, DragDropOperation* K2Node_Event_Operation, bool K2Node_SwitchInteger_CmpSuccess, FString K2Node_CustomEvent_Name, FText CallFunc_Conv_StringToText_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_CanInteractive_Ok, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c3664ae0
	void SetSelectItem__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c3664bc0
	void SetHoverItem__DelegateSignature(enum bagtype, int index);// 0x8a873f8 0x78c3664ca0
	void SwapHotKey__DelegateSignature(int SIndex, int TIndex);// 0x8a873f8 0x78c3664d80
	void RemoveHotKey__DelegateSignature(int index);// 0x8a873f8 0x78c3664f40
	void DragToHotKey__DelegateSignature(enum bagtype, int index, int hotkeyindex);// 0x8a873f8 0x78c3665100

--------------------------------
Class: DragItemHotKey_C.DragDropOperation.Object
	ItemHotKeySlotWidget_C* SourceWidget;//[Offset: 0x88, Size: 0x8] 0x78c477ff00
	void FinishDrag(interface classNone K2Node_DynamicCast_AsDrag_Interface, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c3bb4f40
	void Init(ItemHotKeySlotWidget_C* Source);// 0x8a873f8 0x78c3bb5020

--------------------------------
Class: SoundPlayerWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c55c8600
	WidgetAnimation* FlashAnimation;//[Offset: 0x268, Size: 0x8] 0x78c55c8580
	Image* RedImage;//[Offset: 0x270, Size: 0x8] 0x78c55c8500
	Overlay* Sound;//[Offset: 0x278, Size: 0x8] 0x78c55c8480
	Vector Location;//[Offset: 0x280, Size: 0xc] 0x78c55ca500
	int ID;//[Offset: 0x28c, Size: 0x4] 0x78c55ca480
	bool Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78c55ca400
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3d15560
	void AnimFinish();// 0x8a873f8 0x78c3d15640
	void UpdateLocation(Vector NewLocation);// 0x8a873f8 0x78c3d11d60
	void Init(int ID, Vector Location);// 0x8a873f8 0x78c3d11e40
	void Construct();// 0x8a873f8 0x78c3d12000
	void ExecuteUbergraph_SoundPlayerWidget(int EntryPoint, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, delegate K2Node_CreateDelegate_OutputDelegate, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Vector K2Node_CustomEvent_NewLocation, PlayerController* CallFunc_GetPlayerController_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int K2Node_CustomEvent_id, Vector K2Node_CustomEvent_Location, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c3d121c0

--------------------------------
Class: LianJi_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bd9a3400
	WidgetAnimation* ComboBeAttacked;//[Offset: 0x268, Size: 0x8] 0x78bd9a3380
	WidgetAnimation* ComboDisappear;//[Offset: 0x270, Size: 0x8] 0x78bd9a3300
	WidgetAnimation* ComboBig;//[Offset: 0x278, Size: 0x8] 0x78bd9a3280
	WidgetAnimation* Combo;//[Offset: 0x280, Size: 0x8] 0x78bd9a3200
	Image* dishun;//[Offset: 0x288, Size: 0x8] 0x78bd9a5280
	Image* disone;//[Offset: 0x290, Size: 0x8] 0x78bd9a5200
	Image* disten;//[Offset: 0x298, Size: 0x8] 0x78bd9a5180
	HorizontalBox* HorizontalBox;//[Offset: 0x2a0, Size: 0x8] 0x78bd9a5100
	Image* hundreds;//[Offset: 0x2a8, Size: 0x8] 0x78bd9a5080
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78bd9a5000
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78bd9a4f80
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78bd9a4f00
	Image* Image;//[Offset: 0x2c8, Size: 0x8] 0x78bd9a4e80
	Image* Image;//[Offset: 0x2d0, Size: 0x8] 0x78bd9a4e00
	Image* One;//[Offset: 0x2d8, Size: 0x8] 0x78bd9a4d80
	Image* Ten;//[Offset: 0x2e0, Size: 0x8] 0x78bd9a4d00
	int ComboNumber;//[Offset: 0x2e8, Size: 0x4] 0x78bd9a4c80
	int ComboNumberDisplay;//[Offset: 0x2ec, Size: 0x4] 0x78bd9a4c00
	<int,PaperSprite*> Number;//[Offset: 0x2f0, Size: 0x50] 0x78c37d4540
	void SetTexture(int Number, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c32b35e0
	void SetTextureDisplay(int Number, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PaperSprite* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c32b36c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c32b37a0
	void LianJi();// 0x8a873f8 0x78c32b3880
	void ComboBreak();// 0x8a873f8 0x78c32b0080
	void ExecuteUbergraph_LianJi(int EntryPoint, bool CallFunc_Less_IntInt_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c32b0240

--------------------------------
Class: OBPlayerStateWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78ba5de300
	ProgressBar* HP;//[Offset: 0x268, Size: 0x8] 0x78ba5de280
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78ba5de200
	ProgressBar* Injury;//[Offset: 0x278, Size: 0x8] 0x78ba5de180
	SizeBox* Main;//[Offset: 0x280, Size: 0x8] 0x78ba5de100
	ProgressBar* mp;//[Offset: 0x288, Size: 0x8] 0x78ba5de080
	Image* NameColor;//[Offset: 0x290, Size: 0x8] 0x78ba5de000
	TextBlock* PlayerName;//[Offset: 0x298, Size: 0x8] 0x78ba5ddf80
	Image* TeamColor;//[Offset: 0x2a0, Size: 0x8] 0x78ba5ddf00
	TextBlock* TeamId;//[Offset: 0x2a8, Size: 0x8] 0x78ba5dde80
	Image* xinfaBG;//[Offset: 0x2b0, Size: 0x8] 0x78ba5dde00
	Image* xinfaEdge;//[Offset: 0x2b8, Size: 0x8] 0x78ba5ddd80
	Image* xinfaIcon;//[Offset: 0x2c0, Size: 0x8] 0x78ba5ddd00
	CanvasPanel* xinfaPanel;//[Offset: 0x2c8, Size: 0x8] 0x78ba5ddc80
	int PlayerID;//[Offset: 0x2d0, Size: 0x4] 0x78ba5ddc00
	bool bInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x78ba5ddb80
	Texture2D* bloodRedTex;//[Offset: 0x2d8, Size: 0x8] 0x78ba5ddb00
	Texture2D* bloodNormalTex;//[Offset: 0x2e0, Size: 0x8] 0x78ba5dda80
	bool HasGotDataFromReplayInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x78ba5dda00
	WuXiaXBaseCharacter* CharP;//[Offset: 0x2f0, Size: 0x8] 0x78ba5dd980
	void RefreshReviewInfo(LinearColor K2Node_MakeStruct_LinearColor);// 0x8a873f8 0x78c39b8200
	void OnEvt_HeadUIShow();// 0x8a873f8 0x78c39b82e0
	void OnEvt_TargetUIShow();// 0x8a873f8 0x78c39b83c0
	void OnEvt_PlayerUseItem(int PlayerID, int ItemId, float timePassed, float timeTotal);// 0x8a873f8 0x78c39b84a0
	void OnEvt_AllCharInited();// 0x8a873f8 0x78c39b8580
	void doInit(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c39b8660
	void OnEvet_ViewMethodChanged(enum New, enum Old);// 0x8a873f8 0x78c39b8740
	void OnEvt_ViewTargetChanged(int NewID);// 0x8a873f8 0x78c39b8820
	void OnEvt_CharRefreshed();// 0x8a873f8 0x78c39b8900
	void RefreshVisibility(GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsViewingTargetPlayer_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c39b89e0
	void RefreshAll(SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, Color K2Node_MakeStruct_Color, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_IsShowTeamColor_ReturnValue, Color CallFunc_getTeamColor_ReturnValue);// 0x8a873f8 0x78c39b8ac0
	void RefreshDynamic(bool Temp_bool_Variable, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, ProgressBarStyle K2Node_MakeStruct_ProgressBarStyle, ProgressBarStyle K2Node_MakeStruct_ProgressBarStyle, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, float CallFunc_GetPlayerInfo_MaxDyingHealth_ReturnValue, float CallFunc_GetPlayerInfo_MaxInjury_ReturnValue, PaperSprite* CallFunc_GetSkillIconTexture_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, ProgressBarStyle K2Node_Select_Default);// 0x8a873f8 0x78c39b8ba0
	void OnCharInfoChanged();// 0x8a873f8 0x78c39b8c80
	void Init(int PlayerID, WuXiaXBaseCharacter* char);// 0x8a873f8 0x78c39b8d60
	void SetMpValue(float Value);// 0x8a873f8 0x78c39b8e40
	void SetHpValue(float Value);// 0x8a873f8 0x78c39b8f20
	void SetInjuryValue(float Value);// 0x8a873f8 0x78c39b9000
	void SetPlayerInfo(FString TeamId, FString PlayerName, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c39b5720
	void SetTeamColor(Color TeamColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, LinearColor CallFunc_MakeColor_ReturnValue);// 0x8a873f8 0x78c39b5800
	void Construct();// 0x8a873f8 0x78c39b58e0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c39b5aa0
	void ExecuteUbergraph_OBPlayerStateWidget(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x8a873f8 0x78cac1b220

--------------------------------
Class: AnimNode_SaveCachedPose.AnimNode_Base
	PoseLink pose;//[Offset: 0x10, Size: 0x10] 0x78cf076100
	FName CachePoseName;//[Offset: 0x20, Size: 0x8] 0x78cf076180

--------------------------------
Class: AnimNode_BlendListByInt.AnimNode_BlendListBase.AnimNode_Base
	int ActiveChildIndex;//[Offset: 0x98, Size: 0x4] 0x78cf043a00

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 0x10] 0x78cf04b980
	FName SlotName;//[Offset: 0x20, Size: 0x8] 0x78cf04ba00
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78cf04ba80

--------------------------------
Class: AnimNode_UseCachedPose.AnimNode_Base
	PoseLink LinkToCachingNode;//[Offset: 0x10, Size: 0x10] 0x78cf075880
	FName CachePoseName;//[Offset: 0x20, Size: 0x8] 0x78cf075900

--------------------------------
Class: AnimNode_RotationOffsetBlendSpace.AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	PoseLink BasePose;//[Offset: 0xe8, Size: 0x10] 0x78cf04c200
	int LODThreshold;//[Offset: 0xf8, Size: 0x4] 0x78cf04c280
	float Alpha;//[Offset: 0xfc, Size: 0x4] 0x78cf04c300
	InputScaleBias AlphaScaleBias;//[Offset: 0x100, Size: 0x8] 0x78cf04c380
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x108, Size: 0x48] 0x78cf04c400
	FName AlphaCurveName;//[Offset: 0x150, Size: 0x8] 0x78cf04c480
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x158, Size: 0x30] 0x78cf04c500
	enum AlphaInputType;//[Offset: 0x18c, Size: 0x1] 0x78cefdaba0
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 0x1] 0x78cf04c600

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0, Size: 0x4] 0x78cefb3e00
	float Bias;//[Offset: 0x4, Size: 0x4] 0x78cefb3e80

--------------------------------
Class: InputAlphaBoolBlend
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x78cefb3f80
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x78cefb4000
	enum BlendOption;//[Offset: 0x8, Size: 0x1] 0x78cee5c0e0
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x78cefb4100
	CurveFloat* CustomCurve;//[Offset: 0x10, Size: 0x8] 0x78cefb4180
	AlphaBlend AlphaBlend;//[Offset: 0x18, Size: 0x30] 0x78cefb2280

--------------------------------
Class: AnimNode_LayeredBoneBlend.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x10, Size: 0x10] 0x78cf046b00
	PoseLink[] BlendPoses;//[Offset: 0x20, Size: 0x10] 0x78cefd9200
	InputBlendPose[] LayerSetup;//[Offset: 0x30, Size: 0x10] 0x78cefd9340
	float[] BlendWeights;//[Offset: 0x40, Size: 0x10] 0x78cefd93e0
	bool bMeshSpaceRotationBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78cf046e80
	bool bMeshSpaceScaleBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78cf046f00
	byte CurveBlendOption;//[Offset: 0x52, Size: 0x1] 0x78cf046f80
	bool bBlendRootMotionBasedOnRootBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x78cf047000
	int LODThreshold;//[Offset: 0x58, Size: 0x4] 0x78cf047080
	PerBoneBlendWeight[] PerBoneBlendWeights;//[Offset: 0x60, Size: 0x10] 0x78cefd9480
	Guid SkeletonGuid;//[Offset: 0x70, Size: 0x10] 0x78cf047280
	Guid VirtualBoneGuid;//[Offset: 0x80, Size: 0x10] 0x78cf047300

--------------------------------
Class: PerBoneBlendWeight
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x78cf047100
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x78cf047180

--------------------------------
Class: AnimNode_TwoBoneIK.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference IKBone;//[Offset: 0xc8, Size: 0x10] 0x78cf04f700
	float StartStretchRatio;//[Offset: 0xd8, Size: 0x4] 0x78cf04f780
	float MaxStretchScale;//[Offset: 0xdc, Size: 0x4] 0x78cf04d700
	Vector EffectorLocation;//[Offset: 0xe0, Size: 0xc] 0x78cf04d780
	BoneSocketTarget EffectorTarget;//[Offset: 0xf0, Size: 0x60] 0x78cf04d800
	Vector JointTargetLocation;//[Offset: 0x150, Size: 0xc] 0x78cf04d880
	BoneSocketTarget JointTarget;//[Offset: 0x160, Size: 0x60] 0x78cf04d900
	Axis TwistAxis;//[Offset: 0x1c0, Size: 0x10] 0x78cf04d980
	byte EffectorLocationSpace;//[Offset: 0x1d0, Size: 0x1] 0x78cf04da00
	byte JointTargetLocationSpace;//[Offset: 0x1d1, Size: 0x1] 0x78cf04da80
	bool bAllowStretching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d2, Size: 0x1] 0x78cf04db00
	bool bTakeRotationFromEffectorSpace;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d2, Size: 0x1] 0x78cf04db80
	bool bMaintainEffectorRelRot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d2, Size: 0x1] 0x78cf04dc00
	bool bAllowTwist;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d2, Size: 0x1] 0x78cf04dc80

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 0x10] 0x78cefb3b00
	int LODThreshold;//[Offset: 0x20, Size: 0x4] 0x78cefb3b80
	float ActualAlpha;//[Offset: 0x24, Size: 0x4] 0x78cefb3c00
	enum AlphaInputType;//[Offset: 0x28, Size: 0x1] 0x78cee5c040
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78cefb3d00
	float Alpha;//[Offset: 0x2c, Size: 0x4] 0x78cefb3d80
	InputScaleBias AlphaScaleBias;//[Offset: 0x30, Size: 0x8] 0x78cefb3f00
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x38, Size: 0x48] 0x78cefb2300
	FName AlphaCurveName;//[Offset: 0x80, Size: 0x8] 0x78cefb2380
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x88, Size: 0x30] 0x78cefb2a80

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: BoneSocketTarget
	bool bUseSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78cf044980
	BoneReference BoneReference;//[Offset: 0x4, Size: 0x10] 0x78cf044a00
	SocketReference SocketReference;//[Offset: 0x20, Size: 0x40] 0x78cf044b00

--------------------------------
Class: SocketReference
	FName SocketName;//[Offset: 0x30, Size: 0x8] 0x78cf044a80

--------------------------------
Class: Axis
	Vector Axis;//[Offset: 0x0, Size: 0xc] 0x78cf03dd80
	bool bInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x78cf03de00

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x10, Size: 0x10] 0x78cf075500

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 0x10] 0x78cf075480

--------------------------------
Class: AnimNode_ApplyAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x10, Size: 0x10] 0x78cf042600
	PoseLink Additive;//[Offset: 0x20, Size: 0x10] 0x78cf042680
	float Alpha;//[Offset: 0x30, Size: 0x4] 0x78cf042700
	InputScaleBias AlphaScaleBias;//[Offset: 0x34, Size: 0x8] 0x78cf042780
	int LODThreshold;//[Offset: 0x3c, Size: 0x4] 0x78cf042800
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x40, Size: 0x48] 0x78cf042880
	FName AlphaCurveName;//[Offset: 0x88, Size: 0x8] 0x78cf042900
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x90, Size: 0x30] 0x78cf042980
	enum AlphaInputType;//[Offset: 0xc4, Size: 0x1] 0x78cefd9fc0
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x78cf042a80

--------------------------------
Class: AnimNode_RotateRootBone.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x10, Size: 0x10] 0x78cf04a800
	float Pitch;//[Offset: 0x20, Size: 0x4] 0x78cf04a880
	float Yaw;//[Offset: 0x24, Size: 0x4] 0x78cf04a900
	InputScaleBiasClamp PitchScaleBiasClamp;//[Offset: 0x28, Size: 0x30] 0x78cf04a980
	InputScaleBiasClamp YawScaleBiasClamp;//[Offset: 0x58, Size: 0x30] 0x78cf04aa00
	Rotator MeshToComponent;//[Offset: 0x88, Size: 0xc] 0x78cf04aa80

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0xc8, Size: 0x10] 0x78cf047b00
	Vector Translation;//[Offset: 0xd8, Size: 0xc] 0x78cf047b80
	Rotator Rotation;//[Offset: 0xe4, Size: 0xc] 0x78cf047c00
	Vector Scale;//[Offset: 0xf0, Size: 0xc] 0x78cf047c80
	byte TranslationMode;//[Offset: 0xfc, Size: 0x1] 0x78cf047d00
	byte RotationMode;//[Offset: 0xfd, Size: 0x1] 0x78cf047d80
	byte ScaleMode;//[Offset: 0xfe, Size: 0x1] 0x78cf047e00
	byte TranslationSpace;//[Offset: 0xff, Size: 0x1] 0x78cf047e80
	byte RotationSpace;//[Offset: 0x100, Size: 0x1] 0x78cf047f00
	byte ScaleSpace;//[Offset: 0x101, Size: 0x1] 0x78cf047f80

--------------------------------
Class: AnimNode_SequenceEvaluator.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x38, Size: 0x8] 0x78cf04bb00
	float ExplicitTime;//[Offset: 0x40, Size: 0x4] 0x78cf04bb80
	bool bShouldLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78cf04bc00
	bool bTeleportToExplicitTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78cf04bc80
	byte ReinitializationBehavior;//[Offset: 0x46, Size: 0x1] 0x78cf04bd00
	float StartPosition;//[Offset: 0x48, Size: 0x4] 0x78cf04bd80

--------------------------------
Class: AnimNode_TwoWayBlend.AnimNode_Base
	PoseLink A;//[Offset: 0x10, Size: 0x10] 0x78cf04f200
	PoseLink B;//[Offset: 0x20, Size: 0x10] 0x78cf04f280
	enum AlphaInputType;//[Offset: 0x30, Size: 0x1] 0x78cefda740
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x78cf04f380
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1] 0x78cf04f400
	float Alpha;//[Offset: 0x34, Size: 0x4] 0x78cf04f480
	InputScaleBias AlphaScaleBias;//[Offset: 0x38, Size: 0x8] 0x78cf04f500
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x40, Size: 0x48] 0x78cf04f580
	FName AlphaCurveName;//[Offset: 0x88, Size: 0x8] 0x78cf04f600
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x90, Size: 0x30] 0x78cf04f680

--------------------------------
Class: BP_Base_HorseAnim_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78c122d800
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78c122d780
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2f8, Size: 0x28] 0x78c122d700
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x320, Size: 0x28] 0x78c122f780
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x348, Size: 0x28] 0x78c122f700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x370, Size: 0x80] 0x78c122f680
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x3f0, Size: 0x30] 0x78c122f600
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x420, Size: 0xc8] 0x78c122f580
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4e8, Size: 0x80] 0x78c122f500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x568, Size: 0x80] 0x78c122f480
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x5e8, Size: 0x30] 0x78c122f400
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x618, Size: 0x190] 0x78c122f380
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x7a8, Size: 0x28] 0x78c122f300
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x7d0, Size: 0x28] 0x78c122f280
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x7f8, Size: 0x28] 0x78c122f200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x820, Size: 0x28] 0x78c122f180
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x848, Size: 0x28] 0x78c122f100
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x870, Size: 0x80] 0x78c122f080
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x8f0, Size: 0xc8] 0x78c122f000
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x9b8, Size: 0x30] 0x78c122ef80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x9e8, Size: 0xc8] 0x78c122ef00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xab0, Size: 0x80] 0x78c122ee80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xb30, Size: 0xc0] 0x78c122ee00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xbf0, Size: 0x28] 0x78c122ed80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xc18, Size: 0x80] 0x78c122ed00
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0xc98, Size: 0xc8] 0x78c122ec80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xd60, Size: 0x28] 0x78c122ec00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xd88, Size: 0x30] 0x78c122eb80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xdb8, Size: 0x28] 0x78c122eb00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xde0, Size: 0x30] 0x78c122ea80
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xe10, Size: 0xb0] 0x78c122ea00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xec0, Size: 0x30] 0x78c122e980
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xef0, Size: 0xb0] 0x78c122e900
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xfa0, Size: 0xe8] 0x78c122e880
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1088, Size: 0x108] 0x78c122e800
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x1190, Size: 0x20] 0x78c122e780
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x11b0, Size: 0x20] 0x78c122ff80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x11d0, Size: 0x108] 0x78c122ff00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x12d8, Size: 0x108] 0x78c122fe80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x13e0, Size: 0x108] 0x78c122fe00
	AnimNode_TwoBoneIK AnimGraphNode_TwoBoneIK;//[Offset: 0x14f0, Size: 0x1e0] 0x78c122fd80
	AnimNode_TwoBoneIK AnimGraphNode_TwoBoneIK;//[Offset: 0x16d0, Size: 0x1e0] 0x78c122fd00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x18b0, Size: 0x158] 0x78c122fc80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x1a08, Size: 0x48] 0x78c122fc00
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x1a50, Size: 0xa0] 0x78c122fb80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1af0, Size: 0x80] 0x78c122fb00
	SkeletalMeshComponent* HorseMesh;//[Offset: 0x1b70, Size: 0x8] 0x78c122fa80
	float moveSpeed;//[Offset: 0x1b78, Size: 0x4] 0x78c122fa00
	float AimOffset;//[Offset: 0x1b7c, Size: 0x4] 0x78c122f980
	Vector IKFootBRLocation;//[Offset: 0x1b80, Size: 0xc] 0x78c122f900
	Vector IKFootBLLocation;//[Offset: 0x1b8c, Size: 0xc] 0x78c122f880
	Vector IKFootFRLocation;//[Offset: 0x1b98, Size: 0xc] 0x78c122f800
	Vector IKFootFLLocation;//[Offset: 0x1ba4, Size: 0xc] 0x78ba5d1080
	BP_WuXiaHorse_C* HorsePawn;//[Offset: 0x1bb0, Size: 0x8] 0x78ba5d1000
	Vector R_default_location;//[Offset: 0x1bb8, Size: 0xc] 0x78ba5d0f80
	Vector L_default_location;//[Offset: 0x1bc4, Size: 0xc] 0x78ba5d0f00
	bool IsJump?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd0, Size: 0x1] 0x78ba5d0e80
	Rotator Rotation;//[Offset: 0x1bd4, Size: 0xc] 0x78ba5d0e00
	float RotSpeed;//[Offset: 0x1be0, Size: 0x4] 0x78ba5d0d80
	bool IsRide?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1be4, Size: 0x1] 0x78ba5d0d00
	AnimSequenceBase* Anim_HorseIdle;//[Offset: 0x1be8, Size: 0x8] 0x78ba5d0c80
	AnimSequenceBase* Anim_HorseJumpEnd;//[Offset: 0x1bf0, Size: 0x8] 0x78ba5d0c00
	AnimSequenceBase* Anim_HorseJump;//[Offset: 0x1bf8, Size: 0x8] 0x78ba5d0b80
	AnimSequenceBase* Anim_HorseRun_Add;//[Offset: 0x1c00, Size: 0x8] 0x78ba5d0b00
	AimOffsetBlendSpace1D* AOBS_HorseOffset;//[Offset: 0x1c08, Size: 0x8] 0x78ba5d0a80
	BlendSpace1D* BS_HorseLocation;//[Offset: 0x1c10, Size: 0x8] 0x78ba5d0a00
	AnimSequenceBase* Anim_Horse_Waiting0;//[Offset: 0x1c18, Size: 0x8] 0x78ba5d0980
	AnimSequenceBase* Anim_Horse_Turn;//[Offset: 0x1c20, Size: 0x8] 0x78ba5d0900
	SoundBase*[] SoundArray_Footstep_Def;//[Offset: 0x1c28, Size: 0x10] 0x78be9f2a40
	SoundBase*[] SoundArray_Footstep_Grass;//[Offset: 0x1c38, Size: 0x10] 0x78be9f29a0
	SoundBase*[] SoundArray_Footstep_Desert;//[Offset: 0x1c48, Size: 0x10] 0x78be9f2400
	SoundBase*[] SoundArray_Footstep_Snow;//[Offset: 0x1c58, Size: 0x10] 0x78be9f24a0
	SoundBase*[] SoundArray_Footstep_Wet;//[Offset: 0x1c68, Size: 0x10] 0x78be9f4f20
	SoundBase*[] SoundArray_Footstep_Rock;//[Offset: 0x1c78, Size: 0x10] 0x78be9f4e80
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c39814a0
	void UpdateValues(BP_WuXiaX_Character_C* Driver, float CallFunc_GetCurrentFSpeed_ReturnValue, bool CallFunc_IsFalling_ReturnValue, float CallFunc_Abs_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetRider_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFalling_ReturnValue);// 0x8a873f8 0x78c3981580
	void IsPlayerJumpOnHorse?();// 0x8a873f8 0x78c3981660
	void GetFootIKLocation(FName InBoneName, float Add, Vector default_value, out Vector OutLocation, const Actor*[] Temp_object_Variable, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, const byte[] K2Node_MakeArray_Array, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd);// 0x8a873f8 0x78c3981740
	void SetMeshRotation(Rotator Rotation, float Speed, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_RInterpTo_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x8a873f8 0x78c3981820
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_TransitionResult_1447779D4786BA4EC0EAD5BCB905E36D();// 0x8a873f8 0x78c3981900
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_TwoBoneIK_083D9DF14D6F3DAF53F436AF6C732DFC();// 0x8a873f8 0x78c39819e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_TwoBoneIK_C0964CAB488B417B85E6C8B53698F3A9();// 0x8a873f8 0x78c3981ac0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_ModifyBone_F8EE33EC4608459A85210FA84930323F();// 0x8a873f8 0x78c3981ba0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_ModifyBone_38157A1D4F8C3C6D3C710190201B7CB1();// 0x8a873f8 0x78c3981c80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_ModifyBone_2E1238DB4013EF1F1FCAEA9440B9E4C0();// 0x8a873f8 0x78c37ce780
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_ModifyBone_B57EC24E4EF1A2E227293FA806A6F489();// 0x8a873f8 0x78c37ce860
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_ApplyAdditive_647B16A34B28187DDB8DD8B9524DCC22();// 0x8a873f8 0x78c37ce940
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_TransitionResult_FE74A828463299CF2636469E73396516();// 0x8a873f8 0x78c37cea20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_TransitionResult_7ED7155E472EB422243C87AC8DC12156();// 0x8a873f8 0x78c37ceb00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_TransitionResult_DEEF9522410E120AA771ECBC6DF263CF();// 0x8a873f8 0x78c37cebe0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Base_HorseAnim_AnimGraphNode_TransitionResult_91A1CE234C6559537DC4738C96E96BE1();// 0x8a873f8 0x78c37cecc0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c37ceda0
	void BlueprintInitializeAnimation();// 0x8a873f8 0x78c37cef60
	void AnimNotify_Sound_Footstep();// 0x8a873f8 0x78c37cf120
	void ExecuteUbergraph_BP_Base_HorseAnim(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, float CallFunc_Abs_ReturnValue, const Actor*[] Temp_object_Variable, float CallFunc_MapRangeClamped_ReturnValue, byte Temp_byte_Variable, float CallFunc_GetCurveValue_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_GetCurveValue_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float K2Node_Event_DeltaTimeX, Vector CallFunc_GetFootIKLocation_OutLocation, Vector CallFunc_GetFootIKLocation_OutLocation, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, BP_WuXiaHorse_C* K2Node_DynamicCast_AsBP_Wu_Xia_Horse, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFootIKLocation_OutLocation, Vector CallFunc_GetFootIKLocation_OutLocation, bool CallFunc_IsValid_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetRider_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_FloatFloat_ReturnValue, SoundBase*[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwningActor_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, byte CallFunc_GetSurfaceType_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, SoundBase*[] K2Node_Select_Default, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd);// 0x8a873f8 0x78c37cf200

--------------------------------
Class: BP_WuXiaHorse_C.WuXiaXHorse.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5e0, Size: 0x8] 0x78bd9a6800
	CableComponent* Cable_R;//[Offset: 0x5e8, Size: 0x8] 0x78bd9a6780
	CableComponent* Cable_C;//[Offset: 0x5f0, Size: 0x8] 0x78bd9a6700
	CableComponent* Cable_L;//[Offset: 0x5f8, Size: 0x8] 0x78bd9a6680
	bool IsRide?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1] 0x78bd9a6600
	void OnRep_IsRide?(FString CallFunc_Conv_BoolToString_ReturnValue);// 0x8a873f8 0x78c32b51e0
	void CE_CharacterEnter();// 0x8a873f8 0x78c32b52c0
	void CE_CharacterLeave();// 0x8a873f8 0x78c32b53a0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c32b5480
	void ReceiveBeginPlay();// 0x8a873f8 0x78c32b5640
	void ExecuteUbergraph_BP_WuXiaHorse(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetRider_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetRider_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, float K2Node_Event_DeltaSeconds);// 0x8a873f8 0x78c32b1e40

--------------------------------
Class: BP_WuXiaHorseAnim_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78c1225a00
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78c1225980
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2f8, Size: 0x28] 0x78c1225900
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x320, Size: 0x28] 0x78c1225880
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x348, Size: 0x28] 0x78c1225800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x370, Size: 0x80] 0x78c1225780
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x3f0, Size: 0x30] 0x78c1225700
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x420, Size: 0xc8] 0x78c1225680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4e8, Size: 0x80] 0x78c1225600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x568, Size: 0x80] 0x78c1225580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x5e8, Size: 0x30] 0x78c1225500
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x618, Size: 0x190] 0x78c1225480
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x7a8, Size: 0x28] 0x78c1225400
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x7d0, Size: 0x28] 0x78c1225380
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x7f8, Size: 0x28] 0x78c1225300
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x820, Size: 0x28] 0x78c1227380
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x848, Size: 0x28] 0x78c1227300
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x870, Size: 0x28] 0x78c1227280
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x898, Size: 0x28] 0x78c1227200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x8c0, Size: 0x28] 0x78c1227180
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x8e8, Size: 0x28] 0x78c1227100
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x910, Size: 0x28] 0x78c1227080
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x938, Size: 0x80] 0x78c1227000
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x9b8, Size: 0x28] 0x78c1226f80
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend;//[Offset: 0x9e0, Size: 0xc8] 0x78c1226f00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xaa8, Size: 0x30] 0x78c1226e80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xad8, Size: 0x80] 0x78c1226e00
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend;//[Offset: 0xb58, Size: 0xc8] 0x78c1226d80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xc20, Size: 0x28] 0x78c1226d00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xc48, Size: 0x30] 0x78c1226c80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xc78, Size: 0x28] 0x78c1226c00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xca0, Size: 0x80] 0x78c1226b80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xd20, Size: 0xc0] 0x78c1226b00
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0xde0, Size: 0xc8] 0x78c1226a80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xea8, Size: 0x28] 0x78c1226a00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xed0, Size: 0x30] 0x78c1226980
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xf00, Size: 0x28] 0x78c1226900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf28, Size: 0x80] 0x78c1226880
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0xfa8, Size: 0xc8] 0x78c1226800
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1070, Size: 0x30] 0x78c1226780
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x10a0, Size: 0x28] 0x78c1226700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x10c8, Size: 0x80] 0x78c1226680
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x1148, Size: 0xc8] 0x78c1226600
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1210, Size: 0x30] 0x78c1226580
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x1240, Size: 0xc8] 0x78c1226500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1308, Size: 0x80] 0x78c1226480
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x1388, Size: 0xc0] 0x78c1226400
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1448, Size: 0x28] 0x78c1226380
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1470, Size: 0x80] 0x78c1228400
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x14f0, Size: 0xc8] 0x78c1228380
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x15b8, Size: 0x28] 0x78c1228300
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x15e0, Size: 0x30] 0x78c1228280
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1610, Size: 0x28] 0x78c1228200
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1638, Size: 0x80] 0x78c1228180
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x16b8, Size: 0xc8] 0x78c1228100
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1780, Size: 0x30] 0x78c1228080
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x17b0, Size: 0xb0] 0x78c1228000
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1860, Size: 0x30] 0x78c1227f80
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x1890, Size: 0xb0] 0x78c1227f00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x1940, Size: 0xe8] 0x78c1227e80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1a28, Size: 0x108] 0x78c1227e00
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x1b30, Size: 0x20] 0x78c1227d80
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x1b50, Size: 0x20] 0x78c1227d00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1b70, Size: 0x108] 0x78c1227c80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1c78, Size: 0x108] 0x78c1227c00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1d80, Size: 0x108] 0x78c1227b80
	AnimNode_TwoBoneIK AnimGraphNode_TwoBoneIK;//[Offset: 0x1e90, Size: 0x1e0] 0x78c1227b00
	AnimNode_TwoBoneIK AnimGraphNode_TwoBoneIK;//[Offset: 0x2070, Size: 0x1e0] 0x78c1227a80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x2250, Size: 0x158] 0x78c1227a00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x23a8, Size: 0x48] 0x78c1227980
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x23f0, Size: 0xa0] 0x78c1227900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2490, Size: 0x80] 0x78c1227880
	SkeletalMeshComponent* HorseMesh;//[Offset: 0x2510, Size: 0x8] 0x78c1227800
	float moveSpeed;//[Offset: 0x2518, Size: 0x4] 0x78c1227780
	float AimOffset;//[Offset: 0x251c, Size: 0x4] 0x78c1227700
	Vector IKFootBRLocation;//[Offset: 0x2520, Size: 0xc] 0x78c1227680
	Vector IKFootBLLocation;//[Offset: 0x252c, Size: 0xc] 0x78c1227600
	Vector IKFootFRLocation;//[Offset: 0x2538, Size: 0xc] 0x78c1227580
	Vector IKFootFLLocation;//[Offset: 0x2544, Size: 0xc] 0x78c1227500
	BP_WuXiaHorse_C* HorsePawn;//[Offset: 0x2550, Size: 0x8] 0x78c1227480
	Vector R_default_location;//[Offset: 0x2558, Size: 0xc] 0x78c1227400
	Vector L_default_location;//[Offset: 0x2564, Size: 0xc] 0x78c1229480
	bool IsJump?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2570, Size: 0x1] 0x78c1229400
	Rotator Rotation;//[Offset: 0x2574, Size: 0xc] 0x78c1229380
	float RotSpeed;//[Offset: 0x2580, Size: 0x4] 0x78c1229300
	bool IsRide?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2584, Size: 0x1] 0x78c1229280
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c37cf820
	void UpdateValues(BP_WuXiaX_Character_C* Driver, float CallFunc_GetCurrentFSpeed_ReturnValue, bool CallFunc_IsFalling_ReturnValue, float CallFunc_Abs_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetRider_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFalling_ReturnValue);// 0x8a873f8 0x78c37cf900
	void IsPlayerJumpOnHorse?();// 0x8a873f8 0x78c37cf9e0
	void GetFootIKLocation(FName InBoneName, float Add, Vector default_value, out Vector OutLocation, const Actor*[] Temp_object_Variable, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, const byte[] K2Node_MakeArray_Array, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd);// 0x8a873f8 0x78c37cfac0
	void SetMeshRotation(Rotator Rotation, float Speed, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_RInterpTo_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x8a873f8 0x78c37cfba0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TwoBoneIK_B0BF7E474A092EB270253399DB46FC56();// 0x8a873f8 0x78c37cfc80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TwoBoneIK_75BF2D984DA7029138EF92B5724CCBE8();// 0x8a873f8 0x78c37cfd60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_ModifyBone_1DF9782144B26E5E9779F7A2CD93DD9D();// 0x8a873f8 0x78c37cfe40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_ModifyBone_5EC3E2FB4262E21A88DFBD97084DF4F2();// 0x8a873f8 0x78c37cff20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_ModifyBone_D0154A194D642896E035AA90BFD1B744();// 0x8a873f8 0x78c37ccaa0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_ModifyBone_E6E73CE64E0E437AE457B097A56989EE();// 0x8a873f8 0x78c37ccb80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_ApplyAdditive_F55DBDAC476FD9101D62B494CE3CBA21();// 0x8a873f8 0x78c37ccc60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TwoWayBlend_9DE0A85A48383BF3E3443EBC4EBE8732();// 0x8a873f8 0x78c37ccd40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_4007A45A40ACF2B9312360A38DD8F9DE();// 0x8a873f8 0x78c37cce20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_55C25F98450FD6BDCB823EA33EE43600();// 0x8a873f8 0x78c37ccf00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_F03377604F4F5A4F64228FB74C67C665();// 0x8a873f8 0x78c37ccfe0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_2492B39547E5C0CD5313579B1BAF80B0();// 0x8a873f8 0x78c37cd0c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_307C53444213840AE2335894B363AF83();// 0x8a873f8 0x78c37cd1a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_4C37E6554797D32079CFF993BD29055E();// 0x8a873f8 0x78c37cd280
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_F65F083B4BCB73DF278A5ABF455529D0();// 0x8a873f8 0x78c37cd360
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_344D8F6D40570A41505E70B25564A14B();// 0x8a873f8 0x78c37cd440
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_471B8BE34139C94BC88798B3CCE9E89C();// 0x8a873f8 0x78c37cd520
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_54F03F454A961C590EF03F91237EC957();// 0x8a873f8 0x78c37cd600
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_WuXiaHorseAnim_AnimGraphNode_TransitionResult_2864D7294661B68884D59DBDE1008F77();// 0x8a873f8 0x78c37cd6e0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c37cd8a0
	void BlueprintInitializeAnimation();// 0x8a873f8 0x78c37cda60
	void ExecuteUbergraph_BP_WuXiaHorseAnim(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_GetCurveValue_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_GetCurveValue_ReturnValue, float K2Node_Event_DeltaTimeX, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector CallFunc_GetFootIKLocation_OutLocation, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_GetFootIKLocation_OutLocation, Rotator CallFunc_MakeRotator_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, BP_WuXiaHorse_C* K2Node_DynamicCast_AsBP_Wu_Xia_Horse, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFootIKLocation_OutLocation, Vector CallFunc_GetFootIKLocation_OutLocation, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetRider_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c37cdb40

--------------------------------
Class: BP_Bow_Anim_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78c685e600
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78c685e700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2f8, Size: 0x80] 0x78c685c100
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x378, Size: 0xa0] 0x78c4dc5c80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x418, Size: 0x108] 0x78c4dc5c00
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x520, Size: 0x20] 0x78c4dc5b80
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x540, Size: 0x20] 0x78c4dc5b00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x560, Size: 0x80] 0x78c4dc5a80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x5e0, Size: 0x30] 0x78c4dc5a00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x610, Size: 0xb0] 0x78c4dc5980
	Vector HandLocation;//[Offset: 0x6c0, Size: 0xc] 0x78c4dc5900
	SoundBase*[] Sound_Aim;//[Offset: 0x6d0, Size: 0x10] 0x78c683e8e0
	bool bIsPulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1] 0x78c4dc5800
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c66636c0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c66637a0
	void AnimNotify_BlendIn_Aim();// 0x8a873f8 0x78c6663960
	void ExecuteUbergraph_BP_Bow_Anim(int EntryPoint, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, SoundBase* CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, float K2Node_Event_DeltaTimeX, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Fight_CheckIsInRangeWeaponState_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue);// 0x8a873f8 0x78c6663b20

--------------------------------
Class: Actor_CQ_StaticMesh_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78c62fba00
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x228, Size: 0x8] 0x78c62fb980
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8] 0x78c62fb900
	float DragTimeLine_DragValueLine_41D088C249161C1017F8C893E5505001;//[Offset: 0x238, Size: 0x4] 0x78c62fb880
	byte DragTimeLine__Direction_41D088C249161C1017F8C893E5505001;//[Offset: 0x23c, Size: 0x1] 0x78c62fb800
	TimelineComponent* DragTimeLine;//[Offset: 0x240, Size: 0x8] 0x78c62fb780
	Vector Location;//[Offset: 0x248, Size: 0xc] 0x78c62fb700
	MaterialInterface* GhostMaterial;//[Offset: 0x258, Size: 0x8] 0x78c62fb680
	MaterialInstanceDynamic* GhostMaterialInstance;//[Offset: 0x260, Size: 0x8] 0x78c62fb600
	LinearColor Color;//[Offset: 0x268, Size: 0x10] 0x78c62fd680
	Vector Scale;//[Offset: 0x278, Size: 0xc] 0x78c62fd600
	float DragValue;//[Offset: 0x284, Size: 0x4] 0x78c62fd580
	MeshComponent* WeaponMeshComponent;//[Offset: 0x288, Size: 0x8] 0x78c62fd500
	LinearColor ColorChange;//[Offset: 0x290, Size: 0x10] 0x78c62fd480
	bool BeginTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x78c62fd400
	WuXiaXBaseCharacter* WuXiaX;//[Offset: 0x2a8, Size: 0x8] 0x78c62fd380
	void DragTimeLine__FinishedFunc();// 0x8a873f8 0x78c6662e00
	void DragTimeLine__UpdateFunc();// 0x8a873f8 0x78c6662ee0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c6662fc0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c66630a0
	void PlayEmitterSystem();// 0x8a873f8 0x78c6663180
	void BeginGuest();// 0x8a873f8 0x78c6663340
	void ExecuteUbergraph_Actor_CQ_StaticMesh(int EntryPoint, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_Add_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, int CallFunc_GetNumLODs_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Vector CallFunc_K2_GetComponentScale_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponentBudgeted* CallFunc_GetTakeWeaponMeshComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c6663500

--------------------------------
Class: Actor_CQ_StaticMesh_2_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78c62fd300
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x228, Size: 0x8] 0x78c62fd280
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8] 0x78c62fd200
	float DragTimeLine_DragValueLine_1CFC400D427164B023C33AAB39E6DD12;//[Offset: 0x238, Size: 0x4] 0x78c62fd180
	byte DragTimeLine__Direction_1CFC400D427164B023C33AAB39E6DD12;//[Offset: 0x23c, Size: 0x1] 0x78c62fd100
	TimelineComponent* DragTimeLine;//[Offset: 0x240, Size: 0x8] 0x78c62fd080
	Vector Location;//[Offset: 0x248, Size: 0xc] 0x78c62fd000
	MaterialInterface* GhostMaterial;//[Offset: 0x258, Size: 0x8] 0x78c62fcf80
	MaterialInstanceDynamic* GhostMaterialInstance;//[Offset: 0x260, Size: 0x8] 0x78c62fcf00
	LinearColor Color;//[Offset: 0x268, Size: 0x10] 0x78c62fce80
	Vector Scale;//[Offset: 0x278, Size: 0xc] 0x78c62fce00
	float DragValue;//[Offset: 0x284, Size: 0x4] 0x78c62fcd80
	MeshComponent* WeaponMeshComponent;//[Offset: 0x288, Size: 0x8] 0x78c62fcd00
	LinearColor ColorChange;//[Offset: 0x290, Size: 0x10] 0x78c62fcc80
	bool BeginTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x78c62fcc00
	WuXiaXBaseCharacter* WuXiaX;//[Offset: 0x2a8, Size: 0x8] 0x78c62fcb80
	void DragTimeLine__FinishedFunc();// 0x8a873f8 0x78c6662380
	void DragTimeLine__UpdateFunc();// 0x8a873f8 0x78c6662460
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c6662540
	void ReceiveBeginPlay();// 0x8a873f8 0x78c6662620
	void PlayEmitterSystem();// 0x8a873f8 0x78c6662700
	void BeginGuest();// 0x8a873f8 0x78c66628c0
	void ExecuteUbergraph_Actor_CQ_StaticMesh(int EntryPoint, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_Add_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, int CallFunc_GetNumLODs_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Vector CallFunc_K2_GetComponentScale_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponentBudgeted* CallFunc_GetTakeWeaponMeshComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c6662a80

--------------------------------
Class: Mesh_CJ_FarAtk_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78c62fb280
	SkeletalMeshComponent* WeaponTrail;//[Offset: 0x228, Size: 0x8] 0x78c62fb200
	PoseableMeshComponent* PoseableMesh6;//[Offset: 0x230, Size: 0x8] 0x78c62fb180
	SkeletalMeshComponent* Weapon;//[Offset: 0x238, Size: 0x8] 0x78c62fb100
	PoseableMeshComponent* PoseableMesh2;//[Offset: 0x240, Size: 0x8] 0x78c62fb080
	PoseableMeshComponent* PoseableMesh3;//[Offset: 0x248, Size: 0x8] 0x78c62fb000
	PoseableMeshComponent* PoseableMesh4;//[Offset: 0x250, Size: 0x8] 0x78c62faf80
	PoseableMeshComponent* PoseableMesh5;//[Offset: 0x258, Size: 0x8] 0x78c62faf00
	PoseableMeshComponent* PoseableMesh7;//[Offset: 0x260, Size: 0x8] 0x78c62fae80
	PoseableMeshComponent* PoseableMesh1;//[Offset: 0x268, Size: 0x8] 0x78c62fae00
	StaticMeshComponent* Cube;//[Offset: 0x270, Size: 0x8] 0x78c62fad80
	SceneComponent* DefaultSceneRoot;//[Offset: 0x278, Size: 0x8] 0x78c62fad00
	float DragValueAtkCJ_DragValueLine_4B5D5745477660525AD259B78EB175A0;//[Offset: 0x280, Size: 0x4] 0x78c62fac80
	byte DragValueAtkCJ__Direction_4B5D5745477660525AD259B78EB175A0;//[Offset: 0x284, Size: 0x1] 0x78c62fac00
	TimelineComponent* DragValueAtkCJ;//[Offset: 0x288, Size: 0x8] 0x78c62fab80
	SkeletalMeshComponent* Ghost;//[Offset: 0x290, Size: 0x8] 0x78c62fab00
	SkeletalMeshComponent* L_Master;//[Offset: 0x298, Size: 0x8] 0x78c62faa80
	MaterialInterface* GhostMaterial;//[Offset: 0x2a0, Size: 0x8] 0x78c62faa00
	MaterialInstanceDynamic* L_GhostDinamMaterial;//[Offset: 0x2a8, Size: 0x8] 0x78c62fa980
	bool TickBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78c62fa900
	Vector BaseScale;//[Offset: 0x2b4, Size: 0xc] 0x78c62fa880
	LinearColor Light;//[Offset: 0x2c0, Size: 0x10] 0x78c62fa800
	Vector NowScale;//[Offset: 0x2d0, Size: 0xc] 0x78c62fa780
	WuXiaXBaseCharacter* WuXiaX;//[Offset: 0x2e0, Size: 0x8] 0x78c62fa700
	SkeletalMeshComponent* Mesh;//[Offset: 0x2e8, Size: 0x8] 0x78c62fa680
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f0, Size: 0x8] 0x78c62fa600
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f8, Size: 0x8] 0x78c62fa580
	SkeletalMeshComponent* Mesh;//[Offset: 0x300, Size: 0x8] 0x78c62fc600
	SkeletalMeshComponent* Mesh;//[Offset: 0x308, Size: 0x8] 0x78c62fc580
	SkeletalMeshComponent* Mesh;//[Offset: 0x310, Size: 0x8] 0x78c62fc500
	SkeletalMeshComponent* Mesh;//[Offset: 0x318, Size: 0x8] 0x78c62fc480
	LinearColor ColorChange;//[Offset: 0x320, Size: 0x10] 0x78c62fc400
	void SetMinLOD(SkinnedMeshComponent* SetMesh);// 0x8a873f8 0x78c6e7f040
	void SetPoseableMeshComponent(SkinnedMeshComponent* MeshNumber, SkinnedMeshComponent* PoseableMeshNumber, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_GetNumLODs_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c6e7f120
	void DragValueAtkCJ__FinishedFunc();// 0x8a873f8 0x78c6e7f200
	void DragValueAtkCJ__UpdateFunc();// 0x8a873f8 0x78c6e7f2e0
	void Begin_ghost();// 0x8a873f8 0x78c6e7f3c0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c6e7f4a0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c6e7f660
	void ExecuteUbergraph_Mesh_CJ_FarAtk(int EntryPoint, float K2Node_Event_DeltaSeconds, bool CallFunc_Less_FloatFloat_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_MakeTransform_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetTakeWeaponMeshComponent_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_GetNumLODs_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c6e7f820

--------------------------------
Class: Mesh_CY_Attach_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78c62fe380
	SkeletalMeshComponent* SkeletalMesh4;//[Offset: 0x228, Size: 0x8] 0x78c62fe300
	SkeletalMeshComponent* SkeletalMesh5;//[Offset: 0x230, Size: 0x8] 0x78c62fe280
	SkeletalMeshComponent* SkeletalMesh6;//[Offset: 0x238, Size: 0x8] 0x78c62fe200
	SkeletalMeshComponent* SkeletalMesh3;//[Offset: 0x240, Size: 0x8] 0x78c62fe180
	SkeletalMeshComponent* SkeletalMesh2;//[Offset: 0x248, Size: 0x8] 0x78c62fe100
	SkeletalMeshComponent* SkeletalMesh1;//[Offset: 0x250, Size: 0x8] 0x78c62fe080
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x258, Size: 0x8] 0x78c62fe000
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8] 0x78c62fdf80
	SkeletalMeshComponent* Ghost;//[Offset: 0x268, Size: 0x8] 0x78c62fdf00
	SkeletalMeshComponent* L_Master;//[Offset: 0x270, Size: 0x8] 0x78c62fde80
	MaterialInterface* GhostMaterial;//[Offset: 0x278, Size: 0x8] 0x78c62fde00
	MaterialInstanceDynamic* L_GhostDinamMaterial;//[Offset: 0x280, Size: 0x8] 0x78c62fdd80
	bool TickBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x78c62fdd00
	Vector BaseScale;//[Offset: 0x28c, Size: 0xc] 0x78c62fdc80
	LinearColor Light;//[Offset: 0x298, Size: 0x10] 0x78c62fdc00
	Vector NowScale;//[Offset: 0x2a8, Size: 0xc] 0x78c62fdb80
	Vector LocationBegin;//[Offset: 0x2b4, Size: 0xc] 0x78c62fdb00
	Vector ForwardVector;//[Offset: 0x2c0, Size: 0xc] 0x78c62fda80
	Vector NowLocation;//[Offset: 0x2cc, Size: 0xc] 0x78c62fda00
	BP_WuXiaX_Character_C* WuXiaX;//[Offset: 0x2d8, Size: 0x8] 0x78c62fd980
	SkeletalMeshComponent* Mesh;//[Offset: 0x2e0, Size: 0x8] 0x78c62fd900
	SkeletalMeshComponent* Mesh;//[Offset: 0x2e8, Size: 0x8] 0x78c62fd880
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f0, Size: 0x8] 0x78c62fd800
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f8, Size: 0x8] 0x78c62fd780
	SkeletalMeshComponent* Mesh;//[Offset: 0x300, Size: 0x8] 0x78c62fd700
	SkeletalMeshComponent* Mesh;//[Offset: 0x308, Size: 0x8] 0x78c62ff780
	SkeletalMeshComponent* Mesh;//[Offset: 0x310, Size: 0x8] 0x78c62ff700
	LinearColor ColorChange;//[Offset: 0x318, Size: 0x10] 0x78c62ff680
	void SetMinLOD(SkinnedMeshComponent* SetMesh);// 0x8a873f8 0x78c666f3c0
	void SetPoseableMeshComponent(SkinnedMeshComponent* MeshNumber, SkinnedMeshComponent* PoseableMeshNumber, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_GetNumLODs_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c666f4a0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c666f580
	void Begin_ghost();// 0x8a873f8 0x78c666f660
	void ReceiveBeginPlay();// 0x8a873f8 0x78c666f820
	void ExecuteUbergraph_Mesh_CY_Attach(int EntryPoint, ActorComponent* CallFunc_GetGameComponent_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_GetDirectionUnitVector_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, Transform CallFunc_MakeTransform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, Transform CallFunc_MakeTransform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult);// 0x8a873f8 0x78c666f9e0

--------------------------------
Class: PlayerStateWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c67bb000
	Image* state_image;//[Offset: 0x268, Size: 0x8] 0x78c67baf80
	enum State;//[Offset: 0x270, Size: 0x1] 0x78c441a740
	void SetTextureStateNull(SlateBrush K2Node_MakeStruct_SlateBrush);// 0x8a873f8 0x78c666a340
	void SetState(enum State);// 0x8a873f8 0x78c666a420
	void Construct();// 0x8a873f8 0x78c666a5e0
	void ExecuteUbergraph_PlayerStateWidget(int EntryPoint, enum K2Node_CustomEvent_State, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c666a7a0

--------------------------------
Class: ExprerssionWidget_C.UserWidget.Widget.Visual.Object
	Image* VideoImage;//[Offset: 0x260, Size: 0x8] 0x78b899e800
	ImgMediaSource* NewVar;//[Offset: 0x268, Size: 0x8] 0x78b899e780
	MediaPlayer* MediaPlayer;//[Offset: 0x270, Size: 0x8] 0x78b899ff80
	int ID;//[Offset: 0x278, Size: 0x4] 0x78b899ff00
	ImgMediaSource* ImageSequence;//[Offset: 0x280, Size: 0x8] 0x78b899fe80
	delegate OnAnimOpened;//[Offset: 0x288, Size: 0x10] 0x78b899fe00
	float DefaultFrameTime;//[Offset: 0x298, Size: 0x4] 0x78b899fd80
	int index;//[Offset: 0x29c, Size: 0x4] 0x78b899fd00
	FString[] Aseets;//[Offset: 0x2a0, Size: 0x10] 0x78be9f1e60
	TimerHandle AnimHandle;//[Offset: 0x2b0, Size: 0x8] 0x78b899fc00
	float[] FrameInterval;//[Offset: 0x2b8, Size: 0x10] 0x78be9f1dc0
	delegate OnAnimClosed;//[Offset: 0x2c8, Size: 0x10] 0x78b899fb00
	void OnPlayAnim(FString CallFunc_MakeLiteralString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, bool Temp_bool_Variable, float CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue);// 0x8a873f8 0x78c37ca420
	void ExprerssionWidget_AutoGenFunc1(FString FailedUrl);// 0x8a873f8 0x78c37ca500
	void CloseAnim();// 0x8a873f8 0x78c37ca5e0
	void SetTargetAnchor(Anchors Anchor, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x8a873f8 0x78c37ca6c0
	void SetTargetScale(Vector2D Scale);// 0x8a873f8 0x78c37ca7a0
	void SetTargetPosition(Vector2D Position, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x8a873f8 0x78c37ca880
	void ExprerssionWidget_AutoGenFunc(FString OpenedUrl, bool CallFunc_Play_ReturnValue, bool CallFunc_SetRate_ReturnValue);// 0x8a873f8 0x78c37ca960
	void PlayAnim(bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Array_Get_Item, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float K2Node_Select_Default, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, FString[] CallFunc_GetExpressionAsset_ReturnValue, float[] CallFunc_GetExpressionFrameInterval_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue);// 0x8a873f8 0x78c37caa40
	void SetInfo(int ID);// 0x8a873f8 0x78c37cab20
	void OnAnimClosed__DelegateSignature();// 0x8a873f8 0x78c37cace0
	void OnAnimOpened__DelegateSignature();// 0x8a873f8 0x78c37c74e0

--------------------------------
Class: BP_PlayerAnim_Sound_C.BP_PlayerAnim_C.WuXia_AnimInstance.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1a540, Size: 0x8] 0x78bc6aec80
	int Sound_Body_Tpye;//[Offset: 0x1a548, Size: 0x4] 0x78bc6aec00
	SoundBase*[] Footstep_Grass;//[Offset: 0x1a550, Size: 0x10] 0x78bc9e0100
	SoundBase*[] Footstep_Desert;//[Offset: 0x1a560, Size: 0x10] 0x78b9b0fba0
	SoundBase*[] Footstep_Snow;//[Offset: 0x1a570, Size: 0x10] 0x78bc9e3bc0
	SoundBase*[] Footstep_Rock;//[Offset: 0x1a580, Size: 0x10] 0x78bc9e3b20
	SoundBase*[] Footstep_Wet;//[Offset: 0x1a590, Size: 0x10] 0x78bc9e3a80
	SoundBase*[] Footstep_Wood;//[Offset: 0x1a5a0, Size: 0x10] 0x78bc9e39e0
	SoundBase*[] Footstep_Tile;//[Offset: 0x1a5b0, Size: 0x10] 0x78bc9e3940
	SoundBase*[] SoundArray_Body_Skin;//[Offset: 0x1a5c0, Size: 0x10] 0x78bc9e38a0
	SoundBase*[] SoundArray_Body_Cloth;//[Offset: 0x1a5d0, Size: 0x10] 0x78bc9e3800
	SoundBase*[] SoundArray_Body_Leath;//[Offset: 0x1a5e0, Size: 0x10] 0x78bc9e3760
	SoundBase*[] SoundArray_Body_Armor;//[Offset: 0x1a5f0, Size: 0x10] 0x78bc9e36c0
	SoundBase*[] SoundArray_Hit_Male;//[Offset: 0x1a600, Size: 0x10] 0x78bc9e3620
	SoundBase*[] SoundArray_Body_Cloth_Loud;//[Offset: 0x1a610, Size: 0x10] 0x78bc9e3580
	SoundBase*[] SoundArray_Body_Armor_Loud;//[Offset: 0x1a620, Size: 0x10] 0x78bc9e34e0
	SoundBase*[] SoundArray_Hit_Weapon;//[Offset: 0x1a630, Size: 0x10] 0x78bc9e3440
	SoundBase*[] SoundArray_Hit_Blood;//[Offset: 0x1a640, Size: 0x10] 0x78bc9e33a0
	SoundBase*[] SoundArray_Death_Male;//[Offset: 0x1a650, Size: 0x10] 0x78bc9e3300
	SoundBase*[] SoundArray_Male_Attack;//[Offset: 0x1a660, Size: 0x10] 0x78bc9e3260
	SoundBase*[] SoundArray_Female_Attack;//[Offset: 0x1a670, Size: 0x10] 0x78bc9e31c0
	SoundBase*[] SoundArray_Male_Attack_High;//[Offset: 0x1a680, Size: 0x10] 0x78bc9e3120
	SoundBase*[] SoundArray_Hit_Female;//[Offset: 0x1a690, Size: 0x10] 0x78bc9e3080
	SoundBase*[] SoundArray_Death_Female;//[Offset: 0x1a6a0, Size: 0x10] 0x78bc9e2fe0
	SoundBase*[] SoundArray_Swim;//[Offset: 0x1a6b0, Size: 0x10] 0x78bc9e2f40
	AudioComponent* Sound_XuRuo;//[Offset: 0x1a6c0, Size: 0x8] 0x78bc6af880
	AudioComponent* Sound_Wind;//[Offset: 0x1a6c8, Size: 0x8] 0x78bc6af800
	SkeletalMeshComponent* GetBodyCompont(enum Type, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue);// 0x8a873f8 0x78c2fd98c0
	void SelectBySexType(out SoundBase*[] Male_Sound, out SoundBase*[] Female_Sound, out SoundBase*[] OutSound, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c2fd99a0
	void AnimNotify_Sound_Body();// 0x8a873f8 0x78c2fd9a80
	void AnimNotify_Sound_Footstep();// 0x8a873f8 0x78c2fd9b60
	void AnimNotify_EnterHitBlendIn();// 0x8a873f8 0x78c2fd9c40
	void AnimNotify_Sound_Body_Loud();// 0x8a873f8 0x78c2fd9d20
	void AnimNotify_BlendIn_Jump();// 0x8a873f8 0x78c2fd9e00
	void AnimNotify_Damage();// 0x8a873f8 0x78c2fd9ee0
	void AnimNotify_Damage();// 0x8a873f8 0x78c2fd9fc0
	void AnimNotify_Damage();// 0x8a873f8 0x78c2fda0a0
	void AnimNotify_BlendIn_BinSi_Begin();// 0x8a873f8 0x78c2fda180
	void AnimNotify_Show_Ghost();// 0x8a873f8 0x78c2fda340
	void AnimNotify_Show_Ghost_More();// 0x8a873f8 0x78c2fda420
	void AnimNotify_SwimSound();// 0x8a873f8 0x78c2fda500
	void AnimNotify_Sound_HorseSpeed();// 0x8a873f8 0x78c2fda5e0
	void AnimNotify_Enter_XuanYun();// 0x8a873f8 0x78c2fda6c0
	void BlueprintBeginPlay();// 0x8a873f8 0x78c2fda7a0
	void AnimNotify_Enter_DengJi();// 0x8a873f8 0x78c2fda880
	void AnimNotify_Enter_JiangLuo();// 0x8a873f8 0x78c2fda960
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c2fdaa40
	void Event_Leave_Par();// 0x8a873f8 0x78c2fdab20
	void AnimNotify_TSBW();// 0x8a873f8 0x78c2fdac00
	void AnimNotify_Play_Skill_Skin_Niagara();// 0x8a873f8 0x78c2fdace0
	void AnimNotify_EnterBlockBeAttack();// 0x8a873f8 0x78c2fd7400
	void TriggerAnimNotifyEnterBlockBeAttack();// 0x8a873f8 0x78c2fd75c0
	void ExecuteUbergraph_BP_PlayerAnim_Sound(int EntryPoint, int CallFunc_RandomIntegerInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, SoundBase* CallFunc_Array_Get_Item, int CallFunc_RandomIntegerInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, SoundBase*[] CallFunc_SelectBySexType_OutSound, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, SoundBase* CallFunc_Array_Get_Item, const Actor*[] Temp_object_Variable, float CallFunc_RandomFloatInRange_ReturnValue, SoundBase*[] CallFunc_SelectBySexType_OutSound, SoundBase*[] CallFunc_SelectBySexType_OutSound, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, SoundBase* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, SoundBase*[] CallFunc_SelectBySexType_OutSound, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, int Temp_int_Variable, SoundBase*[] K2Node_Select_Default, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, byte Temp_byte_Variable, float CallFunc_RandomFloatInRange_ReturnValue, SoundBase*[] K2Node_MakeArray_Array, SoundBase*[] K2Node_MakeArray_Array, float CallFunc_RandomFloatInRange_ReturnValue, SoundBase*[] CallFunc_SelectBySexType_OutSound, SoundBase*[] K2Node_MakeArray_Array, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, SoundBase* CallFunc_Array_Get_Item, SoundBase*[] K2Node_MakeArray_Array, SoundBase*[] CallFunc_SelectBySexType_OutSound, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, SoundBase* CallFunc_Array_Get_Item, AudioComponent* CallFunc_CreateSound2D_ReturnValue, float K2Node_Event_DeltaTimeX, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlaying_ReturnValue, bool Temp_bool_IsClosed_Variable, SkeletalMeshComponent* CallFunc_GetBodyCompont_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwningActor_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, byte CallFunc_GetSurfaceType_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, SoundBase*[] K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, SoundBase* CallFunc_Array_Get_Item, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, ActorComponent* CallFunc_GetGameComponent_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, NiagaraSystem* CallFunc_GetSkillSkinNiagara_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, SoundBase*[] K2Node_Select_Default, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c2fd7780

--------------------------------
Class: BP_Water_World_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78c4dc5700
	StaticMeshComponent* WaterPlane1;//[Offset: 0x228, Size: 0x8] 0x78c4dc5680
	PostProcessComponent* PostProcess;//[Offset: 0x230, Size: 0x8] 0x78c4dc5600
	BoxComponent* Underwater;//[Offset: 0x238, Size: 0x8] 0x78c4dc5580
	StaticMeshComponent* WaterPlane;//[Offset: 0x240, Size: 0x8] 0x78c4dc5500
	SceneComponent* DefaultSceneRoot;//[Offset: 0x248, Size: 0x8] 0x78c4dc5480
	Vector OceanScale;//[Offset: 0x250, Size: 0xc] 0x78c4dc5400
	MaterialInterface* WaterMaterial;//[Offset: 0x260, Size: 0x8] 0x78c4dc5380
	WeightedBlendables UnderwaterMaterial;//[Offset: 0x268, Size: 0x10] 0x78c4dc5300
	float UnderwaterBlendRadius;//[Offset: 0x278, Size: 0x4] 0x78c4dc7380
	float UnderwaterBlendWeight;//[Offset: 0x27c, Size: 0x4] 0x78c4dc7300
	float Foam Scale;//[Offset: 0x280, Size: 0x4] 0x78c4dc7280
	float Foam Speed;//[Offset: 0x284, Size: 0x4] 0x78c4dc7200
	float Foam Distance;//[Offset: 0x288, Size: 0x4] 0x78c4dc7180
	float Wave1 Scale;//[Offset: 0x28c, Size: 0x4] 0x78c4dc7100
	float Wave1 Speed;//[Offset: 0x290, Size: 0x4] 0x78c4dc7080
	float Wave2 Scale;//[Offset: 0x294, Size: 0x4] 0x78c4dc7000
	float Wave2 Speed;//[Offset: 0x298, Size: 0x4] 0x78c4dc6f80
	float Refraction Scale;//[Offset: 0x29c, Size: 0x4] 0x78c4dc6f00
	float Refraction Speed;//[Offset: 0x2a0, Size: 0x4] 0x78c4dc6e80
	SkeletalMeshComponent* NewVar;//[Offset: 0x2a8, Size: 0x8] 0x78c4dc6e00
	LinearColor Water Fog Height;//[Offset: 0x2b0, Size: 0x10] 0x78c4dc6d80
	MaterialInterface* Underwater Material;//[Offset: 0x2c0, Size: 0x8] 0x78c4dc6d00
	void UserConstructionScript(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x8a873f8 0x78c666d440
	void ReceiveBeginPlay();// 0x8a873f8 0x78c666d520
	void ChangeWater(bool HasDepth);// 0x8a873f8 0x78c666d6e0
	void ExecuteUbergraph_BP_Water_World(int EntryPoint, bool K2Node_CustomEvent_HasDepth);// 0x8a873f8 0x78c666d8a0

--------------------------------
Class: BP_Water_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78bc8b0200
	PostProcessComponent* PostProcess;//[Offset: 0x228, Size: 0x8] 0x78bc8b0180
	BoxComponent* Underwater;//[Offset: 0x230, Size: 0x8] 0x78bc8b0100
	StaticMeshComponent* WaterPlane;//[Offset: 0x238, Size: 0x8] 0x78bc8b0080
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8] 0x78bc8b2100
	Vector OceanScale;//[Offset: 0x248, Size: 0xc] 0x78bc8b2080
	MaterialInterface* WaterMaterial;//[Offset: 0x258, Size: 0x8] 0x78bc8b2000
	WeightedBlendables UnderwaterMaterial;//[Offset: 0x260, Size: 0x10] 0x78bc8b1f80
	float UnderwaterBlendRadius;//[Offset: 0x270, Size: 0x4] 0x78bc8b1f00
	float UnderwaterBlendWeight;//[Offset: 0x274, Size: 0x4] 0x78bc8b1e80
	float Foam Scale;//[Offset: 0x278, Size: 0x4] 0x78bc8b1e00
	float Foam Speed;//[Offset: 0x27c, Size: 0x4] 0x78bc8b1d80
	float Foam Distance;//[Offset: 0x280, Size: 0x4] 0x78bc8b1d00
	float Wave1 Scale;//[Offset: 0x284, Size: 0x4] 0x78bc8b1c80
	float Wave1 Speed;//[Offset: 0x288, Size: 0x4] 0x78bc8b1c00
	float Wave2 Scale;//[Offset: 0x28c, Size: 0x4] 0x78bc8b1b80
	float Wave2 Speed;//[Offset: 0x290, Size: 0x4] 0x78bc8b1b00
	float Refraction Scale;//[Offset: 0x294, Size: 0x4] 0x78bc8b1a80
	float Refraction Speed;//[Offset: 0x298, Size: 0x4] 0x78bc8b1a00
	SkeletalMeshComponent* NewVar;//[Offset: 0x2a0, Size: 0x8] 0x78bc8b1980
	LinearColor Water Fog Height;//[Offset: 0x2a8, Size: 0x10] 0x78bc8b1900
	MaterialInterface* Underwater Material;//[Offset: 0x2b8, Size: 0x8] 0x78bc8b1880
	void UserConstructionScript(PostProcessSettings K2Node_MakeStruct_PostProcessSettings, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x8a873f8 0x78c2fd6de0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c666fac0
	void ExecuteUbergraph_BP_Water(int EntryPoint);// 0x8a873f8 0x78c666fc80

--------------------------------
Class: BP_PlayerAnim_Server_C.WuXia_AnimInstance.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x430, Size: 0x8] 0x78c6857b00
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x438, Size: 0x30] 0x78c6857a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x468, Size: 0x80] 0x78c6857a00
	SkeletalMeshComponent* MeshComponent;//[Offset: 0x4e8, Size: 0x8] 0x78c6857980
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c6331f20
	float WuXia_Montage_Play(AnimMontage* MontageToPlay, float Rate, float delay_time, FName section_name);// 0x8a873f8 0x78c6332000
	void OnNotifyEnd_075E808649095A4B0EC3CB90F7262E3B(FName NotifyName);// 0x8a873f8 0x78c63320e0
	void OnNotifyBegin_075E808649095A4B0EC3CB90F7262E3B(FName NotifyName);// 0x8a873f8 0x78c63321c0
	void OnInterrupted_075E808649095A4B0EC3CB90F7262E3B(FName NotifyName);// 0x8a873f8 0x78c63322a0
	void OnBlendOut_075E808649095A4B0EC3CB90F7262E3B(FName NotifyName);// 0x8a873f8 0x78c6332380
	void OnCompleted_075E808649095A4B0EC3CB90F7262E3B(FName NotifyName);// 0x8a873f8 0x78c6332460
	void PlaySkill(AnimMontage* MontageToPlay, float Rate, float StartingPosition, FName StartingSection);// 0x8a873f8 0x78c6332540
	void BlueprintInitializeAnimation();// 0x8a873f8 0x78c6332700
	void AnimNotify_TSBW();// 0x8a873f8 0x78c63328c0
	void ExecuteUbergraph_BP_PlayerAnim_Server(int EntryPoint, Actor* CallFunc_GetOwningActor_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, PlayerFightComponent* CallFunc_FightComponent_Component, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, AnimMontage* K2Node_CustomEvent_MontageToPlay, float K2Node_CustomEvent_rate, float K2Node_CustomEvent_StartingPosition, FName K2Node_CustomEvent_StartingSection, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName);// 0x8a873f8 0x78c63329a0

--------------------------------
Class: StepNear_C.BlueprintFunctionLibrary.Object
	static void StepNear(float NowValue, float TargetValue, float StepValuePerSecond, float DeltaTime, Object* __WorldContext, out float StepNearValue, bool Temp_bool_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, float K2Node_Select_Default, float CallFunc_Subtract_FloatFloat_ReturnValue, float K2Node_Select_Default, bool Temp_bool_Variable, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default);// 0x8a873f8 0x78c6335020

--------------------------------
Class: BTD_GenIdleLocationAndTime_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	FName RandomLocation;//[Offset: 0x98, Size: 0x8] 0x78c6859b00
	FName randomTime;//[Offset: 0xa0, Size: 0x8] 0x78c6859a80
	Vector Origin;//[Offset: 0xa8, Size: 0xc] 0x78c6859a00
	float IdleMinTime;//[Offset: 0xb4, Size: 0x4] 0x78c6859980
	float IdleMaxTime;//[Offset: 0xb8, Size: 0x4] 0x78c6859900
	float Range;//[Offset: 0xbc, Size: 0x4] 0x78c6859880
	FName FightStartPointKeyName;//[Offset: 0xc0, Size: 0x8] 0x78c6859800
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_GetValueAsVector_ReturnValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, NavigationSystemV1* CallFunc_GetNavigationSystem_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue);// 0x8a873f8 0x78c63343e0

--------------------------------
Class: BTD_InJail_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CharacterIsInJail_ReturnValue);// 0x8a873f8 0x78c6333dc0

--------------------------------
Class: BTD_CheckXinFaBuff_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte XinFaType;//[Offset: 0x98, Size: 0x1] 0x78c685ac80
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, byte Temp_byte_Variable, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, int64 Temp_int64_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int64 Temp_int64_Variable, int64 Temp_int64_Variable, int64 Temp_int64_Variable, int64 Temp_int64_Variable, int64 Temp_int64_Variable, int64 Temp_int64_Variable, int64 K2Node_Select_Default, bool CallFunc_Buff_CheckBuffExist_ReturnValue);// 0x8a873f8 0x78c6333c00

--------------------------------
Class: BTD_CheckInBlock_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Fight_Is_in_block_ReturnValue);// 0x8a873f8 0x78c6333a40

--------------------------------
Class: BTD_CheckCurSkillPropType_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	enum SkillPropType;//[Offset: 0x98, Size: 0x1] 0x78c4416960
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, FName CallFunc_GetTargetActor_NewParam, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, Object* CallFunc_GetValueAsObject_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetCurrentSkillId_ReturnValue, UISkillInfo CallFunc_GetSkillDetailInfo_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue);// 0x8a873f8 0x78c6337080

--------------------------------
Class: BTD_CanQiShen_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Fight_CanPlayQiShen_ReturnValue);// 0x8a873f8 0x78c6336600

--------------------------------
Class: BTD_CheckStartMove_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue);// 0x8a873f8 0x78c5e47be0

--------------------------------
Class: BTD_CheckEndMove_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_GetValueAsBool_ReturnValue);// 0x8a873f8 0x78c5e47a20

--------------------------------
Class: BTD_CanUseAction_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte ActionType;//[Offset: 0x98, Size: 0x1] 0x78c67b2a00
	enum SkillPropType;//[Offset: 0x99, Size: 0x1] 0x78c4419ac0
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, FName CallFunc_GetTargetNavDistance_NewParam, bool CallFunc_Fight_CanUseAction_ReturnValue, bool CallFunc_Fight_CanUseAction_ReturnValue, bool CallFunc_Fight_CanUseAction_ReturnValue, bool CallFunc_Fight_CanUseAction_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, int CallFunc_GetValueAsInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, AISkillInfo[] CallFunc_GetCurDistanceCanReleaseSkill_AISkillInfoArray, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c5e47780

--------------------------------
Class: BTD_CheckTargetKnockdown_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, FName CallFunc_GetTargetActor_NewParam, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, Object* CallFunc_GetValueAsObject_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_State_GetPlayerChildState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c5e474e0

--------------------------------
Class: BTD_Walk_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c5e49e00

--------------------------------
Class: BTD_Run_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c5e49c40

--------------------------------
Class: BTD_Rate_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int Rate;//[Offset: 0x98, Size: 0x4] 0x78c67b5200
	bool UsePRD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1] 0x78c67b5180
	byte PRD_rate;//[Offset: 0x9d, Size: 0x1] 0x78c67b5100
	FName PRD_Name;//[Offset: 0xa0, Size: 0x8] 0x78c67b5080
	<byte,float> PRD_Rate_Table;//[Offset: 0xa8, Size: 0x50] 0x78c6811e40
	float currentRateValue;//[Offset: 0xf8, Size: 0x4] 0x78c67b4f00
	float currentBlackBoardVale;//[Offset: 0xfc, Size: 0x4] 0x78c67b4e80
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, float CallFunc_GetValueAsFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c5e498c0

--------------------------------
Class: GetBlackBoardName_C.BlueprintFunctionLibrary.Object
	static void GetIdleRandomPoint(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4d600
	static void GetEndMove(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4d6e0
	static void GetStartMove(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4d7c0
	static void GetTargetNavDistance(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4d980
	static void GetTargetStateChange(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4da60
	static void GetSelfStateChange(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4db40
	static void GetRandomValue(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4dc20
	static void GetTargetHpPercentage(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4dd00
	static void GetSelfArmorPercentage(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4dde0
	static void GetSelfHpPercentage(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4dec0
	static void GetTargetInRange(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4dfa0
	static void GetChangeTargetTime(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e080
	static void GetOldTargetActor(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e160
	static void GetSkillCDTimeLeftMs(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e240
	static void GetNpcMoveType(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e320
	static void GetFightStartPoint(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e400
	static void GetSelfWeaponType(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e4e0
	static void GetSelfState(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e5c0
	static void GetTargetState(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e6a0
	static void GetTargetCurrentSkill(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4e780
	static void GetSelfNv(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4aea0
	static void GetSelfMP(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4af80
	static void GetSelfHp(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b060
	static void GetTargetNv(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b140
	static void GetTargetMp(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b220
	static void GetTargetHp(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b300
	static void GetMoveReachPoint(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b3e0
	static void GetTargetDistance(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b4c0
	static void GetTargetActor(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b680
	static void GetFightRange(Object* __WorldContext, out FName NewParam);// 0x8a873f8 0x78c5e4b840

--------------------------------
Class: AgoraTeamer_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c67b6480
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x78c67b6400
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78c67b6380
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x78c67b8400
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8] 0x78c67b8380
	int Uid;//[Offset: 0x288, Size: 0x4] 0x78c67b8300
	bool Close;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x78c67b8280
	ButtonStyle normalbtn;//[Offset: 0x290, Size: 0x278] 0x78c67b8200
	ButtonStyle stopbtn;//[Offset: 0x508, Size: 0x278] 0x78c67b8180
	GVoiceGameWidget* GVoice;//[Offset: 0x780, Size: 0x8] 0x78c67b8100
	void SetTeamItemInfo(int ID, int idx, GVoiceGameWidget* Target);// 0x8a873f8 0x78c5e4ce20
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c5e4cfe0
	void Construct();// 0x8a873f8 0x78c5e4d1a0
	void ExecuteUbergraph_AgoraTeamer(int EntryPoint, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_id, int K2Node_CustomEvent_idx, GVoiceGameWidget* K2Node_CustomEvent_Target, FText CallFunc_Conv_IntToText_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_GetTeamIDByPlayerID_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c5e4d280

--------------------------------
Class: WuXiaCameraShankLv3_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: WuXiaCameraShankLv2_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: WuXiaCameraShankLv1_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: OccluseReference_C.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x220, Size: 0x8] 0x78c67bc480

--------------------------------
Class: BTT_PlayQiShen_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bb880
	enum dir;//[Offset: 0xb0, Size: 0x1] 0x78c441a420
	float Delay;//[Offset: 0xb4, Size: 0x4] 0x78c67bb780
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c6336c20
	void ExecuteUbergraph_BTT_PlayQiShen(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c7ee52c0

--------------------------------
Class: BTT_RandomPlay_Skill_ID_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bb700
	int[] play_skill_id;//[Offset: 0xb0, Size: 0x10] 0x78c441a380
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c6336280
	void ExecuteUbergraph_BTT_RandomPlay_Skill_ID(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_LastIndex_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_Array_Get_Item);// 0x8a873f8 0x78c6336360

--------------------------------
Class: BTT_ForceGuiType_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bd700
	enum ForceGuideType;//[Offset: 0xb0, Size: 0x1] 0x78c441a2e0
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c633b140
	void ExecuteUbergraph_BTT_ForceGuiType(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsHadEnterForceGuide_ReturnValue);// 0x8a873f8 0x78c633aea0

--------------------------------
Class: BTT_ContiniousBlock_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bd600
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e44920
	void ExecuteUbergraph_BTT_ContiniousBlock(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Fight_Is_in_block_ReturnValue);// 0x8a873f8 0x78c5e44680

--------------------------------
Class: BTT_PlayBlock_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bd580
	float Time;//[Offset: 0xb0, Size: 0x4] 0x78c67bd500
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e443e0
	void ExecuteUbergraph_BTT_PlayBlock(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Fight_Is_in_block_ReturnValue);// 0x8a873f8 0x78c5e444c0

--------------------------------
Class: BTT_PlayHeavyAttack_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bd480
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e43f80
	void ExecuteUbergraph_BTT_PlayHeavyAttack(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c5e44060

--------------------------------
Class: BTT_GetSkillLeftCDMs_2_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bd400
	int skillid;//[Offset: 0xb0, Size: 0x4] 0x78c67bd380
	FName Name;//[Offset: 0xb4, Size: 0x8] 0x78c67bd300
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e43c00
	void ExecuteUbergraph_BTT_GetSkillLeftCDMs(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, int CallFunc_Fight_GetSkillLeftCD_ReturnValue);// 0x8a873f8 0x78c5e43ce0

--------------------------------
Class: BTT_Attack_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bd280
	int Attack_Num;//[Offset: 0xb0, Size: 0x4] 0x78c67bd200
	float Delay;//[Offset: 0xb4, Size: 0x4] 0x78c67bd180
	float Delay;//[Offset: 0xb8, Size: 0x4] 0x78c67bd100
	float Delay;//[Offset: 0xbc, Size: 0x4] 0x78c67bd080
	int left_num;//[Offset: 0xc0, Size: 0x4] 0x78c67bd000
	float delay_end;//[Offset: 0xc4, Size: 0x4] 0x78c67bcf80
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e46fa0
	void ExecuteUbergraph_BTT_Attack(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x8a873f8 0x78c5e47160

--------------------------------
Class: BTS_GetSkillLeftCD_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78c67bcf00
	FName Name;//[Offset: 0x98, Size: 0x8] 0x78c67bce80
	int skillid;//[Offset: 0xa0, Size: 0x4] 0x78c67bce00
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e46c20
	void ExecuteUbergraph_BTS_GetSkillLeftCD(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_GetSkillLeftCD_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x8a873f8 0x78c5e46d00

--------------------------------
Class: BTT_CancelBlock_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bcd80
	float Time;//[Offset: 0xb0, Size: 0x4] 0x78c67bcd00
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e46980
	void ExecuteUbergraph_BTT_CancelBlock(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Fight_Is_in_block_ReturnValue);// 0x8a873f8 0x78c5e46a60

--------------------------------
Class: BTT_pl_skill_id_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bcc80
	int play_skill_id;//[Offset: 0xb0, Size: 0x4] 0x78c67bcc00
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e466e0
	void ExecuteUbergraph_BTT_pl_skill_id(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c5e467c0

--------------------------------
Class: BTT_PlayWuDi_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bcb80
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e45f00
	void ExecuteUbergraph_BTT_PlayWuDi(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c8a1ecc0

--------------------------------
Class: BTT_PlayShanBi_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c67bcb00
	enum dir;//[Offset: 0xb0, Size: 0x1] 0x78c4419160
	float Delay;//[Offset: 0xb4, Size: 0x4] 0x78c67bca00
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e48f20
	void ExecuteUbergraph_BTT_PlayShanBi(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, Rotator CallFunc_K2_GetActorRotation_ReturnValue, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c5e49000

--------------------------------
Class: BTT_ChangeWeapon_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c4e64b00
	int weaponindex;//[Offset: 0xb0, Size: 0x4] 0x78c4e64a80
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e49fc0
	void ExecuteUbergraph_BTT_ChangeWeapon(int EntryPoint, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default);// 0x8a873f8 0x78c5e4a0a0

--------------------------------
Class: ImageItemWidget_BP_C.ImageMessageItem.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4e6c600
	WidgetAnimation* RepeatAnim;//[Offset: 0x268, Size: 0x8] 0x78c4e6c580
	WidgetAnimation* ShowingAnim;//[Offset: 0x270, Size: 0x8] 0x78c4e6c500
	WidgetAnimation* HideDetail;//[Offset: 0x278, Size: 0x8] 0x78c4e6c480
	WidgetAnimation* ShowDetail;//[Offset: 0x280, Size: 0x8] 0x78c4e6c400
	Image* Border;//[Offset: 0x288, Size: 0x8] 0x78c4e6c380
	Image* DetailBg;//[Offset: 0x290, Size: 0x8] 0x78c4e6c300
	CanvasPanel* DetialPanel;//[Offset: 0x298, Size: 0x8] 0x78c4e6c280
	Image* Image;//[Offset: 0x2a0, Size: 0x8] 0x78c4e6c200
	TextBlock* m_Detial;//[Offset: 0x2a8, Size: 0x8] 0x78c4e6c180
	TextBlock* m_DetialTitle;//[Offset: 0x2b0, Size: 0x8] 0x78c4e6c100
	Image* m_Img;//[Offset: 0x2b8, Size: 0x8] 0x78c4e6c080
	TextBlock* m_Name;//[Offset: 0x2c0, Size: 0x8] 0x78c4e6c000
	TextBlock* m_Num;//[Offset: 0x2c8, Size: 0x8] 0x78c4e6bf80
	Image* RepeatIcon;//[Offset: 0x2d0, Size: 0x8] 0x78c4e6bf00
	TextBlock* RepeatNum;//[Offset: 0x2d8, Size: 0x8] 0x78c4e6be80
	Button* ShowDetailBtn;//[Offset: 0x2e0, Size: 0x8] 0x78c4e6be00
	Image* Sign;//[Offset: 0x2e8, Size: 0x8] 0x78c4e6bd80
	SizeBox* SizeBox;//[Offset: 0x2f0, Size: 0x8] 0x78c4e6bd00
	Image* TypeBg;//[Offset: 0x2f8, Size: 0x8] 0x78c4e6bc80
	Image* TypeBg2;//[Offset: 0x300, Size: 0x8] 0x78c4e6bc00
	Image* UI_FX1;//[Offset: 0x308, Size: 0x8] 0x78c4e6bb80
	UIParticleEmitter* UI_FX2;//[Offset: 0x310, Size: 0x8] 0x78c4e6bb00
	UIParticleEmitter* UIParticleEmitter;//[Offset: 0x318, Size: 0x8] 0x78c4e6ba80
	int SaveRepeatNum;//[Offset: 0x320, Size: 0x4] 0x78c4e6ba00
	int RewardId;//[Offset: 0x324, Size: 0x4] 0x78c4e6b980
	bool NeedToGap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1] 0x78c4e6b900
	void Play Anima(bool CallFunc_Greater_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c65b0160
	void Construct();// 0x8a873f8 0x78c65b0240
	void BndEvt__ShowDetailBtn_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65b0320
	void OnUpdateQuality(enum Quality);// 0x8a873f8 0x78c65b0400
	void InitData(out const ImageMsgItemInfo Info);// 0x8a873f8 0x78c65b04e0
	void BndEvt__ShowDetailBtn_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c65b06a0
	void OnUpdateSign(FString Sign);// 0x8a873f8 0x78c65b0860
	void ExecuteUbergraph_ImageItemWidget_BP(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_Event_quality, bool K2Node_SwitchEnum_CmpSuccess, const ImageMsgItemInfo K2Node_Event_info, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_CloseUI_ReturnValue, FString K2Node_CustomEvent_Sign, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue);// 0x8a873f8 0x78c65b0940

--------------------------------
Class: MessageRichTextBlockImageDecorator_C.RichTextBlockImageDecorator.RichTextBlockDecorator.Object

--------------------------------
Class: RewardWidget_BP_C.RewardWidget.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: MessageBox_BP_C.MessageBoxWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8] 0x78c4e6b700
	Image* bg;//[Offset: 0x408, Size: 0x8] 0x78c4e6b680
	Button* Mask;//[Offset: 0x410, Size: 0x8] 0x78c4e6b600
	delegate Confirm;//[Offset: 0x418, Size: 0x10] 0x78c4e6d680
	delegate Cancel;//[Offset: 0x428, Size: 0x10] 0x78c4e6d600
	void BndEvt__m_cancelBtn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c65b2380
	void BndEvt__m_confirmBtn_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c65b2460
	void BndEvt__Button_106_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c65b2540
	void ExecuteUbergraph_MessageBox_BP(int EntryPoint);// 0x8a873f8 0x78c65b2620
	void Cancel__DelegateSignature();// 0x8a873f8 0x78c65b27e0
	void Confirm__DelegateSignature();// 0x8a873f8 0x78c65b29a0

--------------------------------
Class: ImageShow_BP_C.ImageShowWidget.UserWidgetBase.UserWidget.Widget.Visual.Object

--------------------------------
Class: BTS_RandomValue_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78c4e6cc80
	float Min;//[Offset: 0x98, Size: 0x4] 0x78c4e6cc00
	float Max;//[Offset: 0x9c, Size: 0x4] 0x78c4e6cb80
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c6333f80
	void ExecuteUbergraph_BTS_RandomValue(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, FName CallFunc_GetRandomValue_NewParam, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue);// 0x8a873f8 0x78c6334060

--------------------------------
Class: BTT_UseAction_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c6461a80
	byte ActionType;//[Offset: 0xb0, Size: 0x1] 0x78c6466a00
	enum ShanBiDirection;//[Offset: 0xb1, Size: 0x1] 0x78c441f740
	enum SkillPropType;//[Offset: 0xb2, Size: 0x1] 0x78c441f6a0
	int64 WaitTime;//[Offset: 0xb8, Size: 0x8] 0x78c6461580
	NpcCharacter* NpcCharacter;//[Offset: 0xc0, Size: 0x8] 0x78c4e6c880
	WuXiaXBaseCharacter* TargetCharacter;//[Offset: 0xc8, Size: 0x8] 0x78c6461a00
	int[] DrugArray;//[Offset: 0xd0, Size: 0x10] 0x78c441f600
	int[] ArmorArray;//[Offset: 0xe0, Size: 0x10] 0x78c441f560
	void UpdateWaitTime(ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int64 CallFunc_Fight_GetActionLastTime_ReturnValue, int64 CallFunc_Fight_GetActionLastTime_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c5e482e0
	void UseItem(int item_id, bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_ItemCtrl_GetItemBagTypeAndIndex_BagType, int CallFunc_ItemCtrl_GetItemBagTypeAndIndex_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, GameItemInfo CallFunc_GetItemInfo_ReturnValue, int CallFunc_ItemCtrl_Server_AddItem_num);// 0x8a873f8 0x78c5e483c0
	void SetMoveRun(ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c5e484a0
	void OnFail_324CBA0644E7B189DF3CEC93BB15A609(byte MovementResult);// 0x8a873f8 0x78c5e48580
	void OnSuccess_324CBA0644E7B189DF3CEC93BB15A609(byte MovementResult);// 0x8a873f8 0x78c5e48660
	void OnFail_E8769A204FE5E35BB5C1398BD2B55B61(byte MovementResult);// 0x8a873f8 0x78c5e48740
	void OnSuccess_E8769A204FE5E35BB5C1398BD2B55B61(byte MovementResult);// 0x8a873f8 0x78c5e48820
	void OnFail_43B2582445C9B5DB7DEB04A56AA59C51(byte MovementResult);// 0x8a873f8 0x78c5e48900
	void OnSuccess_43B2582445C9B5DB7DEB04A56AA59C51(byte MovementResult);// 0x8a873f8 0x78c5e48ac0
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e48c80
	void ExecuteUbergraph_BTT_UseAction(int EntryPoint, byte Temp_byte_Variable, byte K2Node_CustomEvent_MovementResult, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_MovementResult, delegate K2Node_CreateDelegate_OutputDelegate, byte Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_MovementResult, byte K2Node_CustomEvent_MovementResult, delegate K2Node_CreateDelegate_OutputDelegate, byte Temp_byte_Variable, FName CallFunc_GetTargetActor_NewParam, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, Object* CallFunc_GetValueAsObject_ReturnValue, bool CallFunc_GreaterEqual_Int64Int64_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Conv_Int64ToInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, AIAsyncTaskBlueprintProxy* CallFunc_CreateMoveToProxyObject_ReturnValue, byte K2Node_CustomEvent_MovementResult, bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, FName CallFunc_GetTargetNavDistance_NewParam, delegate K2Node_CreateDelegate_OutputDelegate, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, int CallFunc_GetValueAsInt_ReturnValue, AISkillInfo[] CallFunc_GetCurDistanceCanReleaseSkill_AISkillInfoArray, AISkillInfo CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, AIAsyncTaskBlueprintProxy* CallFunc_CreateMoveToProxyObject_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, byte K2Node_CustomEvent_MovementResult, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, AIAsyncTaskBlueprintProxy* CallFunc_CreateMoveToProxyObject_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex);// 0x8a873f8 0x78c5e48d60

--------------------------------
Class: BTS_UpdateIdlePoint_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78c4e6c780
	float MoveDistance;//[Offset: 0x98, Size: 0x4] 0x78c4e6c700
	Vector LastLocation;//[Offset: 0x9c, Size: 0xc] 0x78c4e6c680
	float MaxDistance;//[Offset: 0xa8, Size: 0x4] 0x78c4e6e780
	float TargetMinRadius;//[Offset: 0xac, Size: 0x4] 0x78c4e6e700
	float TargetMaxRadius;//[Offset: 0xb0, Size: 0x4] 0x78c4e6e680
	float MinRadius;//[Offset: 0xb4, Size: 0x4] 0x78c4e6e600
	float MaxRadius;//[Offset: 0xb8, Size: 0x4] 0x78c4e6e580
	float DIFF;//[Offset: 0xbc, Size: 0x4] 0x78c4e6e500
	bool FindPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78c4e6e480
	Vector Point;//[Offset: 0xc4, Size: 0xc] 0x78c4e6e400
	WuXiaXCharacter* TargetCharacter;//[Offset: 0xd0, Size: 0x8] 0x78c4e6e380
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78c5e47da0
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e47f60
	void ExecuteUbergraph_BTS_UpdateIdlePoint(int EntryPoint, FName CallFunc_GetEndMove_NewParam, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int Temp_int_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetTargetActor_NewParam, Object* CallFunc_GetValueAsObject_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FName CallFunc_GetStartMove_NewParam, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GetValueAsBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, Vector CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation, bool CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FName CallFunc_GetEndMove_NewParam, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName CallFunc_GetIdleRandomPoint_NewParam, Vector CallFunc_GetValueAsVector_ReturnValue, FName CallFunc_GetIdleRandomPoint_NewParam, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue);// 0x8a873f8 0x78c5e48040

--------------------------------
Class: BTT_SetMovePoint_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c4e6e300
	enum dir;//[Offset: 0xb0, Size: 0x1] 0x78c441f2e0
	float Range;//[Offset: 0xb4, Size: 0x4] 0x78c4e6e200
	Vector Result;//[Offset: 0xb8, Size: 0xc] 0x78c4e6e180
	float moveradius;//[Offset: 0xc4, Size: 0x4] 0x78c4e6e100
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c5e4a340
	void ExecuteUbergraph_BTT_SetMovePoint(int EntryPoint, bool K2Node_SwitchEnum_CmpSuccess, FName CallFunc_GetMoveReachPoint_NewParam, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Normal_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation, bool CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue);// 0x8a873f8 0x78c5e4a420

--------------------------------
Class: obBagItem_C.UserWidget.Widget.Visual.Object
	Image* icon;//[Offset: 0x260, Size: 0x8] 0x78c4e6ed80
	TextBlock* Num;//[Offset: 0x268, Size: 0x8] 0x78c4e6ed00
	int ItemId;//[Offset: 0x270, Size: 0x4] 0x78c4e6ec80
	int ItemNum;//[Offset: 0x274, Size: 0x4] 0x78c4e6ec00
	void MultiNums(int ID, int Num, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c65b66e0
	void UpdateNums(int ID, int Num, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c65b68a0
	void SetItemInfo(int ID, int Num, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PaperSprite* CallFunc_GetItemIconTexture_ReturnValue);// 0x8a873f8 0x78c65b6a60

--------------------------------
Class: obDrawCircleWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c69d9400
	OBMap_C* Parent;//[Offset: 0x268, Size: 0x8] 0x78c69d9380
	Vector2D[] Points;//[Offset: 0x270, Size: 0x10] 0x78c68309c0
	float Radius;//[Offset: 0x280, Size: 0x4] 0x78c69d9280
	LinearColor DrawColor;//[Offset: 0x284, Size: 0x10] 0x78c69d9200
	int Sides;//[Offset: 0x294, Size: 0x4] 0x78c69d9180
	bool IsDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78c69d9100
	bool IsInUIHideMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x78c69d9080
	void OnPaint(out PaintContext Context, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetPI_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Sin_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Cos_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x8a873f8 0x78c65b8820
	void Init(OBMap_C* Parent);// 0x8a873f8 0x78c65b8900
	void ExecuteUbergraph_obDrawCircleWidget(int EntryPoint, OBMap_C* K2Node_CustomEvent_parent);// 0x8a873f8 0x78c65b89e0

--------------------------------
Class: OBMap_C.OBMapUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x8] 0x78bea33180
	Image* Camera;//[Offset: 0x2f8, Size: 0x8] 0x78bea33100
	Button* CloseButton;//[Offset: 0x300, Size: 0x8] 0x78bea33080
	DrawFlyLineWidget_C* DrawFlyLine;//[Offset: 0x308, Size: 0x8] 0x78bea33000
	Image* FlyEndPoint;//[Offset: 0x310, Size: 0x8] 0x78bea32f80
	Image* FlyStartPoint;//[Offset: 0x318, Size: 0x8] 0x78bea32f00
	CanvasPanel* GlobalMap;//[Offset: 0x320, Size: 0x8] 0x78bea32e80
	Button* HideNameButton;//[Offset: 0x328, Size: 0x8] 0x78bea32e00
	Image* Image;//[Offset: 0x330, Size: 0x8] 0x78bea32d80
	CanvasPanel* InteractivePanel;//[Offset: 0x338, Size: 0x8] 0x78bea32d00
	CanvasPanel* MainUI;//[Offset: 0x340, Size: 0x8] 0x78bea32c80
	Image* MapImage;//[Offset: 0x348, Size: 0x8] 0x78bea32c00
	CanvasPanel* MapInfo;//[Offset: 0x350, Size: 0x8] 0x78bea32b80
	Image* mapStencil;//[Offset: 0x358, Size: 0x8] 0x78bea32b00
	CanvasPanel* NonInteractivePanel;//[Offset: 0x360, Size: 0x8] 0x78bea32a80
	CanvasPanel* NonScaledInfo;//[Offset: 0x368, Size: 0x8] 0x78bea32a00
	obButton_C* obButton;//[Offset: 0x370, Size: 0x8] 0x78bea32980
	obMapRightPanel_C* obMapRightPanel;//[Offset: 0x378, Size: 0x8] 0x78bea32900
	obSelfIcon_C* obSelfIcon;//[Offset: 0x380, Size: 0x8] 0x78bea32880
	HorizontalBox* OuterUI;//[Offset: 0x388, Size: 0x8] 0x78bea32800
	Overlay* Planes;//[Offset: 0x390, Size: 0x8] 0x78bea32780
	CanvasPanel* PlayerPosPanel;//[Offset: 0x398, Size: 0x8] 0x78bea32700
	obDrawCircleWidget_C* poisonCircleCur;//[Offset: 0x3a0, Size: 0x8] 0x78bea32680
	obDrawCircleWidget_C* poisonCircleNxt;//[Offset: 0x3a8, Size: 0x8] 0x78bea32600
	CanvasPanel* PoisonPanel;//[Offset: 0x3b0, Size: 0x8] 0x78bea32580
	CanvasPanel* rightPanel;//[Offset: 0x3b8, Size: 0x8] 0x78bea32500
	<int,obPlayerWidget_C*> PlayerMarks;//[Offset: 0x3c0, Size: 0x50] 0x78c39cd300
	OBClientInfo* OBClientInfo;//[Offset: 0x410, Size: 0x8] 0x78bea32380
	OBClientUIHelper* OBEventInfo;//[Offset: 0x418, Size: 0x8] 0x78bea32300
	bool _bInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1] 0x78bea32280
	Texture2D* ChineseMap;//[Offset: 0x428, Size: 0x8] 0x78bea32200
	Texture2D* EnglishMap;//[Offset: 0x430, Size: 0x8] 0x78bea32180
	bool CanMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1] 0x78bea34200
	float Size_PlayerIcon;//[Offset: 0x43c, Size: 0x4] 0x78bea34180
	<int,obMijingmen_C*> mijingmenMarks;//[Offset: 0x440, Size: 0x50] 0x78c39ce980
	<int,obBaoxiang_C*> treasureboxMarks;//[Offset: 0x490, Size: 0x50] 0x78c39ce800
	<int,obXinfa_C*> xinfaMarks;//[Offset: 0x4e0, Size: 0x50] 0x78c39ce740
	<int,obFightState_C*> fightMarks;//[Offset: 0x530, Size: 0x50] 0x78c39cfdc0
	<int,obKongtou_C*> kongtouMarks;//[Offset: 0x580, Size: 0x50] 0x78c39cfd00
	bool showName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1] 0x78bea33c00
	float scrollSize;//[Offset: 0x5d4, Size: 0x4] 0x78bea33b80
	float MaxScrollSize;//[Offset: 0x5d8, Size: 0x4] 0x78bea33b00
	float MinScrollSize;//[Offset: 0x5dc, Size: 0x4] 0x78bea33a80
	float mapScrollRate;//[Offset: 0x5e0, Size: 0x4] 0x78bea33a00
	obBoxItemInfo_C* savedKongtouInfo;//[Offset: 0x5e8, Size: 0x8] 0x78bea33980
	bool IsFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1] 0x78bea33900
	Vector FlyStart;//[Offset: 0x5f4, Size: 0xc] 0x78bea33880
	Vector FlyEnd;//[Offset: 0x600, Size: 0xc] 0x78bea33800
	bool IsMouseButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1] 0x78bea33780
	Vector2D MouseButtonDownPos;//[Offset: 0x610, Size: 0x8] 0x78bea33700
	float mapDragSpeed;//[Offset: 0x618, Size: 0x4] 0x78bea33680
	<int,obPlayerNameWidget_C*> playerNames;//[Offset: 0x620, Size: 0x50] 0x78c39cfc40
	<int,MapBuffPointWidget_C*> dldBuffPointsMap;//[Offset: 0x670, Size: 0x50] 0x78c39cca00
	PointerEvent[] Touchs;//[Offset: 0x6c0, Size: 0x10] 0x78c68397a0
	Vector2D TouchLocation;//[Offset: 0x6d0, Size: 0x8] 0x78bea33380
	float Distance;//[Offset: 0x6d8, Size: 0x4] 0x78bea33300
	Vector2D CenterPosition;//[Offset: 0x6dc, Size: 0x8] 0x78bea33280
	Vector2D OriginalSize;//[Offset: 0x6e4, Size: 0x8] 0x78bea33200
	void OnTouchLeave(int PointIndex, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PointerEvent CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, float CallFunc_GetTouchDistance_distance, Vector2D CallFunc_GetTouchDistance_Center_Pos, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c5083ce0
	void GetTouchDistance(Vector2D vec1, Vector2D vec2, out float Distance, out Vector2D Center Pos, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Sqrt_ReturnValue);// 0x8a873f8 0x78c5083dc0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue);// 0x8a873f8 0x78c5083ea0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, EventReply CallFunc_Handled_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, FString CallFunc_Conv_Vector2dToString_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, EventReply CallFunc_Handled_ReturnValue, FString CallFunc_Conv_Vector2dToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_GetTouchDistance_distance, Vector2D CallFunc_GetTouchDistance_Center_Pos, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, PointerEvent CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c5083f80
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, EventReply CallFunc_Handled_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, float CallFunc_GetTouchDistance_distance, Vector2D CallFunc_GetTouchDistance_Center_Pos);// 0x8a873f8 0x78c5084060
	void OnReplayJump();// 0x8a873f8 0x78c5084140
	void _ClearDynamicInfo(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, obPlayerWidget_C*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, obPlayerWidget_C* CallFunc_Array_Get_Item, obFightState_C*[] CallFunc_Map_Values_Values, obKongtou_C*[] CallFunc_Map_Values_Values, obFightState_C* CallFunc_Array_Get_Item, obKongtou_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, obXinfa_C*[] CallFunc_Map_Values_Values, obXinfa_C* CallFunc_Array_Get_Item, obBaoxiang_C*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, obBaoxiang_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, obMijingmen_C*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, obMijingmen_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c5084220
	void InitDamageCircle(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBDamageCircleInfo CallFunc_GetDamageCircleInfo_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x8a873f8 0x78c5084300
	void RefreshMapInfo(GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_WuXiaX_GameInstace_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_Instace, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c50843e0
	void RefreshAllBuffs(<int,BuffPointInfo> curBuffs, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, <int,BuffPointInfo> CallFunc_GetDldBuffPointInfo_ReturnValue, MapBuffPointWidget_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BuffPointInfo CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BuffPointInfo CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc__WorldPos2MapPos_MapPos, MapBuffPointWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x8a873f8 0x78c50844c0
	void RefreshCameraView(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, BPWuxiaXOBPawn_C* K2Node_DynamicCast_AsBPWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw);// 0x8a873f8 0x78c50845a0
	void OnPlayerRedbullChange(int ID, bool State, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5084680
	void _RefreshKongtouTipPos(Vector2D desiredPos, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_GetMousePosition_LocationX, float CallFunc_GetMousePosition_LocationY, bool CallFunc_GetMousePosition_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_IsValid_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c5084760
	void StopFly();// 0x8a873f8 0x78c5084840
	void OnFlyChange(Vector CallFunc_GetFlyStartInfo_pos, Vector CallFunc_GetFlyStartInfo_dir, float CallFunc_GetFlyStartInfo_time, bool CallFunc_GetFlyStartInfo_ReturnValue);// 0x8a873f8 0x78c5084920
	void StartFly(Vector Start, Vector End);// 0x8a873f8 0x78c5082c40
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c5084a00
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c5084ae0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c5084bc0
	void _RefereshCharMarkVisible(int PlayerID, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c5084ca0
	void OnPlayerClicked(int PlayerID, PlayerController* CallFunc_GetPlayerController_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c5084d80
	void OnPlayerUnhovered(int PlayerID, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5084e60
	void OnPlayerHovered(int PlayerID, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5084f40
	void OnKongtouUnhovered(int paraID, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c5085020
	void OnKongtouHovered(int paraID, GameItemInfo[] ItemInfos, OBParadropItemInfo CallFunc_GetParadropDetailInfo_info, bool CallFunc_GetParadropDetailInfo_ReturnValue, obKongtou_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obBoxItemInfo_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c5085100
	void _MapPos2MapOriginSizePos(Vector2D pos, out Vector2D OriginPos, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c50851e0
	void SetNewScrollSize(float NewSize, Vector2D CallFunc_GetViewportSize_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_GetMousePosition_LocationX, float CallFunc_GetMousePosition_LocationY, bool CallFunc_GetMousePosition_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_Abs_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, obPlayerWidget_C*[] CallFunc_Map_Values_Values, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, int Temp_int_Array_Index_Variable, obPlayerWidget_C* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c50852c0
	void OnMapScroll(float scroll, float CallFunc_Abs_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c50853a0
	void OnMapViewPlayerChange(bool CallFunc_Not_PreBool_ReturnValue);// 0x8a873f8 0x78c5085480
	void SetShowName(bool val, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, obPlayerWidget_C*[] CallFunc_Map_Values_Values, obPlayerWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c5085560
	void addNewKongtou(OBParadropPosInfo ID, Vector2D CallFunc__WorldPos2MapPos_MapPos, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obKongtou_C* CallFunc_Create_ReturnValue, obKongtou_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_res, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c5085640
	void OnKongtouInfoed(int ID, OBParadropPosInfo CallFunc_GetParadropPosInfo_info, bool CallFunc_GetParadropPosInfo_ReturnValue);// 0x8a873f8 0x78c5081d60
	void OnKongtouCreated(int ID);// 0x8a873f8 0x78c5081e40
	void OnEvtHorseRideChange(int HorseID, int newRider, int newPassager, int oldRider, int oldPassager, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5081f20
	void rmFightState(int ID, obFightState_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c5082000
	void addNewFightState(OBFightState Info, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc__WorldPos2MapPos_MapPos, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obFightState_C* CallFunc_Create_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, Vector2D CallFunc_GetMapSize_NewParam, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c50820e0
	void OnFightEnd(int ID);// 0x8a873f8 0x78c50821c0
	void OnFightStart(int worldID, OBFightState CallFunc_GetFightStateInfo_info, bool CallFunc_GetFightStateInfo_ReturnValue);// 0x8a873f8 0x78c50822a0
	void rmTreasurebox(int ID, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c5082380
	void rmPlayer(int ID, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c5082460
	void addNewTreasurebox(OBTreasureBoxInfo Info, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, WuXiaXDLDHUD* K2Node_DynamicCast_AsWu_Xia_XDLDHUD, bool K2Node_DynamicCast_bSuccess, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obBaoxiang_C* CallFunc_Create_ReturnValue, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_NewParam, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c5082540
	void addNewXinfa(OBXinfaInfo Info, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc__WorldPos2MapPos_MapPos, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obXinfa_C* CallFunc_Create_ReturnValue, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_size, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c5082620
	void addNewMijingmen(OBMijingmenInfo Info, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc__WorldPos2MapPos_MapPos, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obMijingmen_C* CallFunc_Create_ReturnValue, obMijingmen_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_size, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c5082700
	void OnTreasureBoxDestroyed(int ID, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c50827e0
	void OnXinfaLearningFinished(int ID, int PlayerID, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c50828c0
	void OnXinfaLearningFailed(int ID, int PlayerID, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c50829a0
	void OnXinfaLearning(int ID, int PlayerID, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5082a80
	void OnTreasureBoxOpened(int ID, int PlayerID, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5082b60
	void OnMijingmenExplored(int ID, int PlayerID, obMijingmen_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5082d20
	void OnXinfaCreated(int ID, Vector pos, OBXinfaInfo CallFunc_GetXinfaInfo_info, bool CallFunc_GetXinfaInfo_ReturnValue);// 0x8a873f8 0x78c5082e00
	void OnTreasureboxCreated(int ID, Vector pos, OBTreasureBoxInfo CallFunc_GetTreasureboxInfo_info, bool CallFunc_GetTreasureboxInfo_ReturnValue);// 0x8a873f8 0x78c5082ee0
	void OnMijingmenCreated(int ID, Vector pos, OBMijingmenInfo CallFunc_GetMijingenInfo_info, bool CallFunc_GetMijingenInfo_ReturnValue);// 0x8a873f8 0x78c5082fc0
	void OnCharRespawn(int PlayerID, Vector pos);// 0x8a873f8 0x78c50830a0
	void OnCharDied(int PlayerID, Vector pos);// 0x8a873f8 0x78c5083180
	void OnCharDyingRecover(int PlayerID, Vector pos);// 0x8a873f8 0x78c5083260
	void OnCharDying(int PlayerID, Vector pos);// 0x8a873f8 0x78c5083340
	void _SetPlayerWidgetPosRot(obPlayerWidget_C* Widget, Vector worldPos, float Rotation, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc_GetMapOffset_res, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue);// 0x8a873f8 0x78c5083420
	void OnCharAdded(int PlayerID);// 0x8a873f8 0x78c5083500
	void OnAllCharPosUpdated(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, <int,OBPlayerInfo> CallFunc_GetAllPlayerInfo_ReturnValue, OBPlayerInfo[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, OBPlayerInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c50835e0
	void _DoInitAll(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, <int,OBParadropItemInfo> CallFunc_GetParadropDetailInfos_ReturnValue, <int,OBPlayerInfo> CallFunc_GetAllPlayerInfo_ReturnValue, OBParadropItemInfo[] CallFunc_Map_Values_Values, OBPlayerInfo[] CallFunc_Map_Values_Values, OBParadropItemInfo CallFunc_Array_Get_Item, OBPlayerInfo CallFunc_Array_Get_Item, OBParadropPosInfo CallFunc_GetParadropPosInfo_info, bool CallFunc_GetParadropPosInfo_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, <int,OBFightState> CallFunc_GetAllFightStates_ReturnValue, OBFightState[] CallFunc_Map_Values_Values, <int,OBMijingmenInfo> CallFunc_GetAllMijingmenInfos_ReturnValue, OBFightState CallFunc_Array_Get_Item, OBMijingmenInfo[] CallFunc_Map_Values_Values, OBMijingmenInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, <int,OBTreasureBoxInfo> CallFunc_GetAllTreasureboxInfos_ReturnValue, OBTreasureBoxInfo[] CallFunc_Map_Values_Values, <int,OBXinfaInfo> CallFunc_GetAllXinfaInfos_ReturnValue, OBTreasureBoxInfo CallFunc_Array_Get_Item, OBXinfaInfo[] CallFunc_Map_Values_Values, OBXinfaInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c50836c0
	void _InitInfo(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXDLDHUD* K2Node_DynamicCast_AsWu_Xia_XDLDHUD, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue);// 0x8a873f8 0x78c50837a0
	void _WorldPos2MapPos(Vector worldPos, out Vector2D MapPos, Vector2D CallFunc_GetPercentByVector3_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue);// 0x8a873f8 0x78c5083880
	void addNewPlayer(OBPlayerInfo playerInfo, obPlayerWidget_C* cachedWidget, int recPlayerID, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obPlayerWidget_C* CallFunc_Create_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c5083960
	void SetNextCircle(float VectorPos2X, float VectorPos2Y, float Range);// 0x8a873f8 0x78c5080080
	void SetCurrentCircle(float VectorPos1X, float VectorPos1Y, float Range);// 0x8a873f8 0x78c5080160
	void Construct();// 0x8a873f8 0x78c5080240
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c5080400
	void OnInit(Vector2D original_level_size, Vector2D original_map_size, Vector2D show_map_size, Vector Center, Texture2D* chinese_map, Texture2D* english_map, bool can_mark);// 0x8a873f8 0x78c50804e0
	void OnV();// 0x8a873f8 0x78c50805c0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c50806a0
	void SetDamageCircleVisible(bool visible);// 0x8a873f8 0x78c5080780
	void OnResetLanguage();// 0x8a873f8 0x78c5080860
	void BndEvt__CloseButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c5080940
	void BndEvt__HideNameButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c5080b00
	void ExecuteUbergraph_OBMap(int EntryPoint, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_VectorPos2X, float K2Node_Event_VectorPos2Y, float K2Node_Event_range, float K2Node_Event_VectorPos1X, float K2Node_Event_VectorPos1Y, float K2Node_Event_range, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc__WorldPos2MapPos_MapPos, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D K2Node_Event_original_level_size, Vector2D K2Node_Event_original_map_size, Vector2D K2Node_Event_show_map_size, Vector K2Node_Event_center, Texture2D* K2Node_Event_chinese_map, Texture2D* K2Node_Event_english_map, bool K2Node_Event_can_mark, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, WuXiaXPlane*[] CallFunc_GetAllActorsOfClass_OutActors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, WuXiaXPlane* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, delegate K2Node_CreateDelegate_OutputDelegate, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, const PointerEvent K2Node_Event_MouseEvent, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, bool K2Node_Event_visible, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c5080cc0

--------------------------------
Class: obPlayerWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea30e80
	Image* baseImage;//[Offset: 0x268, Size: 0x8] 0x78bea30e00
	CanvasPanel* camera1;//[Offset: 0x270, Size: 0x8] 0x78bea30d80
	CanvasPanel* camera2;//[Offset: 0x278, Size: 0x8] 0x78bea30d00
	Image* dirImage;//[Offset: 0x280, Size: 0x8] 0x78bea30c80
	Image* highlightImg1;//[Offset: 0x288, Size: 0x8] 0x78bea30c00
	Image* highlightImg2;//[Offset: 0x290, Size: 0x8] 0x78bea30b80
	Image* horseImg;//[Offset: 0x298, Size: 0x8] 0x78bea30b00
	Image* Image;//[Offset: 0x2a0, Size: 0x8] 0x78bea30a80
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x78bea30a00
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78bea30980
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78bea30900
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78bea30880
	Image* Image;//[Offset: 0x2c8, Size: 0x8] 0x78bea30800
	CanvasPanel* Main;//[Offset: 0x2d0, Size: 0x8] 0x78bea30780
	CanvasPanel* mainInfo;//[Offset: 0x2d8, Size: 0x8] 0x78bea30700
	Image* midImage1;//[Offset: 0x2e0, Size: 0x8] 0x78bea30680
	Image* midImage2;//[Offset: 0x2e8, Size: 0x8] 0x78bea30600
	SizeBox* name1;//[Offset: 0x2f0, Size: 0x8] 0x78bea30580
	SizeBox* name2;//[Offset: 0x2f8, Size: 0x8] 0x78bea30500
	Image* nameImg1;//[Offset: 0x300, Size: 0x8] 0x78bea30480
	Image* nameImg2;//[Offset: 0x308, Size: 0x8] 0x78bea30400
	TextBlock* nameText1;//[Offset: 0x310, Size: 0x8] 0x78bea30380
	TextBlock* nameText2;//[Offset: 0x318, Size: 0x8] 0x78bea30300
	Button* playerButton;//[Offset: 0x320, Size: 0x8] 0x78bea30280
	Image* redBull;//[Offset: 0x328, Size: 0x8] 0x78bea30200
	Image* selImage;//[Offset: 0x330, Size: 0x8] 0x78bea30180
	TextBlock* TeamNum;//[Offset: 0x338, Size: 0x8] 0x78bea30100
	VerticalBox* whole;//[Offset: 0x340, Size: 0x8] 0x78bea30080
	OBClientInfo* clientInfo;//[Offset: 0x348, Size: 0x8] 0x78bea32100
	int PlayerID;//[Offset: 0x350, Size: 0x4] 0x78bea32080
	Color TeamColor;//[Offset: 0x354, Size: 0x4] 0x78bea32000
	bool showName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x78bea31f80
	bool isHighLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1] 0x78bea31f00
	bool bCanOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 0x1] 0x78bea31e80
	float MapScale;//[Offset: 0x35c, Size: 0x4] 0x78bea31e00
	void RefreshCamera(bool CallFunc_IsViewingTargetPlayer_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_IsViewingTargetPlayer_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, OBHorseInfo CallFunc_GetHorseInfo_info, bool CallFunc_GetHorseInfo_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c65be780
	void OnEvt_ViewTargetChange(int NewID);// 0x8a873f8 0x78c65be860
	void OnEvt_PlayerAnimusChange(int ID, bool NewParam1, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c65be940
	void OnEvt_PlayerChange();// 0x8a873f8 0x78c65bea20
	void _RefreshDead(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c65beb00
	void RefreshRedBull(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, bool CallFunc_IsPlayerAnimus_ReturnValue);// 0x8a873f8 0x78c65bebe0
	void GetMapOffset(out Vector2D res, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c65bb300
	void SetMapScale(float NewParam, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c65bb3e0
	void SetOperatable(bool canClick);// 0x8a873f8 0x78c65bb4c0
	void SetHighlight(bool bHigh);// 0x8a873f8 0x78c65bb5a0
	void SetShowPlayerName(bool val, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x8a873f8 0x78c65bb680
	void Init(OBClientInfo* Info, int PlayerID, bool showPlayerName, float MapScale, float teamImgOpacity, bool CallFunc_IsShowTeamColor_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x8a873f8 0x78c65bb760
	void UpdateState(OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, OBHorseInfo CallFunc_GetHorseInfo_info, bool CallFunc_GetHorseInfo_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x8a873f8 0x78c65bb840
	void SetTeamID(FString TeamId, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c65bb920
	void SetColor(Color Color, SlateColor K2Node_MakeStruct_SlateColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, bool CallFunc_IsShowTeamColor_ReturnValue);// 0x8a873f8 0x78c65bba00
	void SetPlayerRot(float Angle);// 0x8a873f8 0x78c65bbae0
	void Construct();// 0x8a873f8 0x78c65bbbc0
	void BndEvt__playerButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c65bbca0
	void BndEvt__playerButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65bbd80
	void BndEvt__playerButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65bbf40
	void ExecuteUbergraph_obPlayerWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentUIState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Color K2Node_MakeStruct_Color);// 0x8a873f8 0x78c65bc100

--------------------------------
Class: obFightState_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea31d00
	WidgetAnimation* animBattleBlink;//[Offset: 0x268, Size: 0x8] 0x78bea31c80
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78bea31c00
	float MapScale;//[Offset: 0x278, Size: 0x4] 0x78bea31b80
	void SetMapScale(float NewParam);// 0x8a873f8 0x78c65bd0c0
	void GetMapSize(out Vector2D NewParam, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c65bd1a0
	void Construct();// 0x8a873f8 0x78c65bd360
	void ExecuteUbergraph_obFightState(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c65bd520

--------------------------------
Class: obKongtou_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c69ded00
	Button* buton;//[Offset: 0x268, Size: 0x8] 0x78c69dec80
	Image* kongtouImage;//[Offset: 0x270, Size: 0x8] 0x78c69dec00
	int paraID;//[Offset: 0x278, Size: 0x4] 0x78c69deb80
	OBMap_C* ownerMap;//[Offset: 0x280, Size: 0x8] 0x78c69deb00
	void GetMapSize(out Vector2D res, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c65bd7c0
	void Init(int paraID, OBMap_C* owningMap);// 0x8a873f8 0x78c65bd8a0
	void BndEvt__buton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c65bd980
	void BndEvt__buton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65bdb40
	void BndEvt__buton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65bdd00
	void ExecuteUbergraph_obKongtou(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BPWuxiaXOBPawn_C* K2Node_DynamicCast_AsBPWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentUIState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c65bdde0

--------------------------------
Class: BPWuxiaXOBPawn_C.WuxiaXOBPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 0x8] 0x78c4dc9d80
	MaterialInstance* PostProcessMaterial;//[Offset: 0x3a8, Size: 0x8] 0x78c4dc9d00
	void ReceiveBeginPlay();// 0x8a873f8 0x78c4702ee0
	void OnSetPostEffectShow(bool isShow);// 0x8a873f8 0x78c47030a0
	void ExecuteUbergraph_BPWuxiaXOBPawn(int EntryPoint, bool K2Node_Event_isShow);// 0x8a873f8 0x78c4703260

--------------------------------
Class: obXinfa_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* blink;//[Offset: 0x260, Size: 0x8] 0x78c69db180
	Image* xinfaImg;//[Offset: 0x268, Size: 0x8] 0x78c69db100
	Texture2D* notlearning;//[Offset: 0x270, Size: 0x8] 0x78c69db080
	Texture2D* learning;//[Offset: 0x278, Size: 0x8] 0x78c69db000
	void GetMapSize(out Vector2D Size, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c65bc800
	void Init(OBXinfaInfo Info, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c65bc9c0
	void SetLearning(bool isLearning, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c65bcb80

--------------------------------
Class: obBaoxiang_C.UserWidget.Widget.Visual.Object
	Image* baoxiangImage;//[Offset: 0x260, Size: 0x8] 0x78c62d1a00
	Texture2D* Closed;//[Offset: 0x268, Size: 0x8] 0x78c62d1980
	Texture2D* opened;//[Offset: 0x270, Size: 0x8] 0x78c62d1900
	void SetMapScroll(float NewParam);// 0x8a873f8 0x78c65bf040
	void GetMapSize(out Vector2D NewParam, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c65bf120
	void Init(OBTreasureBoxInfo Info);// 0x8a873f8 0x78c65bf2e0
	void SetOpened(bool isOpened);// 0x8a873f8 0x78c65bf4a0

--------------------------------
Class: obMijingmen_C.UserWidget.Widget.Visual.Object
	Image* mijingIcon;//[Offset: 0x260, Size: 0x8] 0x78bc8b7780
	Texture2D* unexplored;//[Offset: 0x268, Size: 0x8] 0x78bc8b7700
	Texture2D* explored;//[Offset: 0x270, Size: 0x8] 0x78bc8b7680
	void GetMapSize(out Vector2D Size, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c8a1f120
	void Init(OBMijingmenInfo Info, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c65bdfa0
	void SetExplored(bool explored);// 0x8a873f8 0x78c65be160

--------------------------------
Class: BP_WuXiaX_GameInstace_C.WuXiaXGameInstance.GameInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6168, Size: 0x8] 0x78c4ad8b00
	void CreateReconnectUI(out PlayerReconnectWidget_C* ReconnectUI, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerReconnectWidget_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, PlayerReconnectWidget_C* CallFunc_Create_ReturnValue, PlayerReconnectWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c378ab20
	void ShowReconnectFailed(const bool isgamefinish);// 0x8a873f8 0x78c3786b40
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x8a873f8 0x78c378a880
	void TryReconnect();// 0x8a873f8 0x78c3785d40
	void ReconnectHideUI();// 0x8a873f8 0x78c37898c0
	void LoadHDRAndLDRLevel();// 0x8a873f8 0x78c37890e0
	void CreateLuaObjectManager();// 0x8a873f8 0x78c378c2c0
	void ExecuteUbergraph_BP_WuXiaX_GameInstace(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const bool K2Node_Event_isgamefinish, byte K2Node_Event_FailureType, bool K2Node_Event_bIsServer, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsGameOver_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_WuXiaX_GameState_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LostConnect_isreconnecting, bool CallFunc_LostConnect_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetKickReason_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ClientLoginHUD* K2Node_DynamicCast_AsClient_Login_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, PlayerReconnectWidget_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, PlayerReconnectWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetCurrentLevelName_ReturnValue, FString CallFunc_GetCurrentLevelName_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_GetConsoleVariableBoolValue_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerReconnectWidget_C* CallFunc_CreateReconnectUI_ReconnectUI, PlayerReconnectWidget_C* CallFunc_CreateReconnectUI_ReconnectUI, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c2fd9620

--------------------------------
Class: PlayerReconnectWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bc6a2780
	Button* CancelButton;//[Offset: 0x268, Size: 0x8] 0x78bc6a2700
	Button* ReconnectButton;//[Offset: 0x270, Size: 0x8] 0x78bc6a2680
	CircularThrobber* ReconnectCircularThrobber;//[Offset: 0x278, Size: 0x8] 0x78bc6a2600
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8] 0x78bc6a2580
	void ShowConnectFail(bool isgamefinish);// 0x8a873f8 0x78c2fd67c0
	void ShowConnectSuccess();// 0x8a873f8 0x78c2fd68a0
	void ShowTryConnect();// 0x8a873f8 0x78c2fd6980
	void BndEvt__ReconnectButton_K2Node_ComponentBoundEvent_17_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c2fd6a60
	void BndEvt__CancelButton_K2Node_ComponentBoundEvent_18_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c2fd6b40
	void SetConnectState(bool State);// 0x8a873f8 0x78c2fd6d00
	void ExecuteUbergraph_PlayerReconnectWidget(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_State, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c2fd6ec0

--------------------------------
Class: MapBuffPointWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c5080
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c5000
	Vector Location;//[Offset: 0x350, Size: 0xc] 0x78c55c4f80
	int index;//[Offset: 0x35c, Size: 0x4] 0x78c55c4f00
	PaperSprite* icon;//[Offset: 0x360, Size: 0x8] 0x78c55c4e80
	void Init(int index);// 0x8a873f8 0x78c3cb8ac0
	void SetCurrentState(Vector Location, int Type);// 0x8a873f8 0x78c3cb8c80
	void ExecuteUbergraph_MapBuffPointWidget(int EntryPoint, int K2Node_CustomEvent_index, Vector K2Node_CustomEvent_Location, int K2Node_CustomEvent_Type, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c3cb8e40

--------------------------------
Class: obBoxItemInfo_C.UserWidget.Widget.Visual.Object
	Image* bg;//[Offset: 0x260, Size: 0x8] 0x78c62d0200
	VerticalBox* emptyInfo;//[Offset: 0x268, Size: 0x8] 0x78c62d0180
	TextBlock* emptyNotice;//[Offset: 0x270, Size: 0x8] 0x78c62d0100
	VerticalBox* list;//[Offset: 0x278, Size: 0x8] 0x78c62d0080
	OBClientUIHelper* UIEvents;//[Offset: 0x280, Size: 0x8] 0x78c62d2100
	OBClientInfo* dataInfo;//[Offset: 0x288, Size: 0x8] 0x78c62d2080
	int paraID;//[Offset: 0x290, Size: 0x4] 0x78c62d2000
	void RefreshItemList(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, OBParadropItemInfo CallFunc_GetParadropDetailInfo_info, bool CallFunc_GetParadropDetailInfo_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obSimpleItem_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, GameItemInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c65bf660
	void OnParadropItemPickup(int paraID, int ItemId, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c65bf820
	void Init(out int paraID, OBClientUIHelper* obUIevents, out OBClientInfo* obData, delegate K2Node_CreateDelegate_OutputDelegate);// 0x8a873f8 0x78c65bf9e0

--------------------------------
Class: obSimpleItem_C.UserWidget.Widget.Visual.Object
	Image* entryBG;//[Offset: 0x260, Size: 0x8] 0x78c69d9e80
	Image* ItemBG;//[Offset: 0x268, Size: 0x8] 0x78c69d9e00
	Image* ItemIcon;//[Offset: 0x270, Size: 0x8] 0x78c69d9d80
	TextBlock* NameText;//[Offset: 0x278, Size: 0x8] 0x78c69d9d00
	TextBlock* NumText;//[Offset: 0x280, Size: 0x8] 0x78c69d9c80
	Image* outBG;//[Offset: 0x288, Size: 0x8] 0x78c69d9c00
	Image* outIcon;//[Offset: 0x290, Size: 0x8] 0x78c69d9b80
	int ItemNum;//[Offset: 0x298, Size: 0x4] 0x78c69d9b00
	int ItemId;//[Offset: 0x29c, Size: 0x4] 0x78c69d9a80
	Texture2D* imageTex;//[Offset: 0x2a0, Size: 0x8] 0x78c69d9a00
	void Init(int ID, int Num, FText CallFunc_Conv_IntToText_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PaperSprite* CallFunc_GetItemIconTexture_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetItemDetailById_name, FString CallFunc_GetItemDetailById_detail, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c65ba500

--------------------------------
Class: obButton_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c62fe800
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x78c62fe780
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78c62fff80
	TextBlock* textStr;//[Offset: 0x278, Size: 0x8] 0x78c62fff00
	FText text;//[Offset: 0x280, Size: 0x18] 0x78c62ffe80
	void Init(bool NewParam);// 0x8a873f8 0x78c65b8120
	void SetText(FText text);// 0x8a873f8 0x78c65b8200
	void Construct();// 0x8a873f8 0x78c65b83c0
	void ExecuteUbergraph_obButton(int EntryPoint);// 0x8a873f8 0x78c65b8580

--------------------------------
Class: obMapRightPanel_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4dc7f00
	Image* bg;//[Offset: 0x268, Size: 0x8] 0x78c4dc7e80
	Image* btnImage;//[Offset: 0x270, Size: 0x8] 0x78c4dc7e00
	Button* buttonHead;//[Offset: 0x278, Size: 0x8] 0x78c4dc7d80
	Image* focusImg;//[Offset: 0x280, Size: 0x8] 0x78c4dc7d00
	CanvasPanel* Main;//[Offset: 0x288, Size: 0x8] 0x78c4dc7c80
	obMapTeamInfo_C* obMapTeamInfo;//[Offset: 0x290, Size: 0x8] 0x78c4dc7c00
	bool isShowDteail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78c4dc7b80
	OBClientInfo* dataInfo;//[Offset: 0x2a0, Size: 0x8] 0x78c4dc7b00
	OBClientUIHelper* eventInfo;//[Offset: 0x2a8, Size: 0x8] 0x78c4dc7a80
	OBMap_C* OBMapUI;//[Offset: 0x2b0, Size: 0x8] 0x78c4dc7a00
	void Init(OBClientInfo* clientInfo, OBClientUIHelper* eventInfo, OBMap_C* MapUI);// 0x8a873f8 0x78c508e160
	void SetShowDetail(bool Show, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c508e240
	void Construct();// 0x8a873f8 0x78c508e320
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c508e400
	void BndEvt__buttonHead_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c508e4e0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c508e5c0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c508e780
	void ExecuteUbergraph_obMapRightPanel(int EntryPoint, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Geometry K2Node_Event_MyGeometry, const PointerEvent K2Node_Event_MouseEvent, const PointerEvent K2Node_Event_MouseEvent);// 0x8a873f8 0x78c508b760

--------------------------------
Class: obMapTeamInfo_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea31600
	Button* btnReset;//[Offset: 0x268, Size: 0x8] 0x78bea31580
	ScrollBox* PlayerList;//[Offset: 0x270, Size: 0x8] 0x78bea31500
	Button* searchBtn;//[Offset: 0x278, Size: 0x8] 0x78bea31480
	EditableTextBox* searchTxt;//[Offset: 0x280, Size: 0x8] 0x78bea31400
	OBClientInfo* dataInfo;//[Offset: 0x288, Size: 0x8] 0x78bea31380
	OBClientUIHelper* eventInfo;//[Offset: 0x290, Size: 0x8] 0x78bea31300
	<int,obPlayerListItem_C*> playerLists;//[Offset: 0x298, Size: 0x50] 0x78c39cbbc0
	OBMap_C* OBMap;//[Offset: 0x2e8, Size: 0x8] 0x78bea31180
	FString SearchText;//[Offset: 0x2f0, Size: 0x10] 0x78bea31100
	void OnCharDetailRefreshed();// 0x8a873f8 0x78c5081040
	void OnCharChanged();// 0x8a873f8 0x78c5081120
	void rmPlayer(int PlayerID, obPlayerListItem_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c5081200
	void ReAddAllPlayers(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, <int,OBPlayerInfo> CallFunc_GetAllPlayerInfo_ReturnValue, int[] CallFunc_GetPlayersSortedByTeamIndex_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, OBPlayerInfo CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c50812e0
	bool _CanPlayerAct(int PlayerID, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c50813c0
	void OnCharDeleted(int PlayerID, const int Temp_int_Variable, obPlayerListItem_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c50814a0
	void OnCharDied(int PlayerID, Vector pos, obPlayerListItem_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5081580
	void OnCharRespawned(int NewParam, Vector pos, bool CallFunc__CanPlayerAct_ReturnValue, obPlayerListItem_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c5081660
	void Init(OBClientInfo* clientInfo, OBClientUIHelper* eventInfo, OBMap_C* MapUI, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsLookInputIgnored_ReturnValue, bool CallFunc_IsMoveInputIgnored_ReturnValue);// 0x8a873f8 0x78c5081740
	void AddPlayer(int PlayerID, bool CallFunc__CanPlayerAct_ReturnValue, obPlayerListItem_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obPlayerListItem_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c5081820
	void OnHide();// 0x8a873f8 0x78c5081900
	void OnShow();// 0x8a873f8 0x78c50819e0
	void Construct();// 0x8a873f8 0x78c5081ac0
	void BndEvt__searchTxt_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText text);// 0x8a873f8 0x78c5081ba0
	void BndEvt__btnReset_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c5081c80
	void BndEvt__searchTxt_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78c65becc0
	void ExecuteUbergraph_obMapTeamInfo(int EntryPoint, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, const FText K2Node_ComponentBoundEvent_Text, FString CallFunc_Conv_TextToString_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsLookInputIgnored_ReturnValue, bool CallFunc_IsMoveInputIgnored_ReturnValue, bool CallFunc_IsLookInputIgnored_ReturnValue, bool CallFunc_IsMoveInputIgnored_ReturnValue);// 0x8a873f8 0x78c7617240

--------------------------------
Class: obPlayerListItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c62ffd80
	Button* btn;//[Offset: 0x268, Size: 0x8] 0x78c62ffd00
	Image* focusImg;//[Offset: 0x270, Size: 0x8] 0x78c62ffc80
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x78c62ffc00
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x78c62ffb80
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x78c62ffb00
	TextBlock* playerTxt;//[Offset: 0x290, Size: 0x8] 0x78c62ffa80
	TextBlock* teamTxt;//[Offset: 0x298, Size: 0x8] 0x78c62ffa00
	int PlayerID;//[Offset: 0x2a0, Size: 0x4] 0x78c62ff980
	OBClientInfo* dataInfo;//[Offset: 0x2a8, Size: 0x8] 0x78c62ff900
	bool canAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78c62ff880
	OBMap_C* OBMap;//[Offset: 0x2b8, Size: 0x8] 0x78c62ff800
	void SetCanInteractive(bool can);// 0x8a873f8 0x78c65badc0
	void Refresh(OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c65baea0
	void Init(OBClientInfo* dataInfo, int PlayerID, bool canAct, OBMap_C* OBMap);// 0x8a873f8 0x78c65baf80
	void BndEvt__btn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c65bb060
	void BndEvt__btn_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65bb140
	void BndEvt__btn_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65b7780
	void Construct();// 0x8a873f8 0x78c65b7860
	void PreConstruct(bool IsDesignTime);// 0x8a873f8 0x78c65b7940
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c65b7a20
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c65b7be0
	void ExecuteUbergraph_obPlayerListItem(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, const PointerEvent K2Node_Event_MouseEvent, const PointerEvent K2Node_Event_MouseEvent);// 0x8a873f8 0x78c65b7da0

--------------------------------
Class: obSelfIcon_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea31080
	Image* obImage;//[Offset: 0x268, Size: 0x8] 0x78bea31000
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c65bc3a0
	void ExecuteUbergraph_obSelfIcon(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw);// 0x8a873f8 0x78c65bc560

--------------------------------
Class: obPlayerNameWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c62ff180
	Spacer* dirDiv;//[Offset: 0x268, Size: 0x8] 0x78c62ff100
	Image* highlightImg1;//[Offset: 0x270, Size: 0x8] 0x78c62ff080
	Image* highlightImg2;//[Offset: 0x278, Size: 0x8] 0x78c62ff000
	VerticalBox* Main;//[Offset: 0x280, Size: 0x8] 0x78c62fef80
	Image* midImage1;//[Offset: 0x288, Size: 0x8] 0x78c62fef00
	Image* midImage2;//[Offset: 0x290, Size: 0x8] 0x78c62fee80
	SizeBox* name1;//[Offset: 0x298, Size: 0x8] 0x78c62fee00
	SizeBox* name2;//[Offset: 0x2a0, Size: 0x8] 0x78c62fed80
	Image* nameImg1;//[Offset: 0x2a8, Size: 0x8] 0x78c62fed00
	Image* nameImg2;//[Offset: 0x2b0, Size: 0x8] 0x78c62fec80
	TextBlock* nameText1;//[Offset: 0x2b8, Size: 0x8] 0x78c62fec00
	TextBlock* nameText2;//[Offset: 0x2c0, Size: 0x8] 0x78c62feb80
	obPlayerWidget_C* playerWidget;//[Offset: 0x2c8, Size: 0x8] 0x78c62feb00
	int PlayerID;//[Offset: 0x2d0, Size: 0x4] 0x78c62fea80
	Color TeamColor;//[Offset: 0x2d4, Size: 0x4] 0x78c62fea00
	bool showName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78c62fe980
	bool isHighLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x78c62fe900
	bool bCanOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1] 0x78c62fe880
	void GetMapSize(out Vector2D res);// 0x8a873f8 0x78c65b8f20
	void SetHighlight(bool bHigh);// 0x8a873f8 0x78c65b9000
	void SetShowPlayerName(bool val, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x8a873f8 0x78c65b90e0
	void Init(obPlayerWidget_C* playerWidget, int PlayerID, bool showPlayerName, float teamImgOpacity, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_IsShowTeamColor_ReturnValue, Color CallFunc_getTeamColor_ReturnValue);// 0x8a873f8 0x78c65b91c0
	void UpdateState(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, OBHorseInfo CallFunc_GetHorseInfo_info, bool CallFunc_GetHorseInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x8a873f8 0x78c65b92a0
	void SetColor(Color Color, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x8a873f8 0x78c65b9380
	void BndEvt__playerButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c65b58e0
	void BndEvt__playerButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65b59c0
	void BndEvt__playerButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x8a873f8 0x78c65b5aa0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c65b5b80
	void Construct();// 0x8a873f8 0x78c65b5d40
	void ExecuteUbergraph_obPlayerNameWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, Color K2Node_MakeStruct_Color, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsVisible_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Vector2D CallFunc_LocalToAbsolute_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, PanelWidget* CallFunc_GetParent_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c65b5f00

--------------------------------
Class: PVPKillNumRankElementWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c685cc80
	TextBlock* KillNumText;//[Offset: 0x268, Size: 0x8] 0x78c685d200
	TextBlock* NameText;//[Offset: 0x270, Size: 0x8] 0x78c685d280
	Border* RankBorder;//[Offset: 0x278, Size: 0x8] 0x78c685d300
	TextBlock* RankText;//[Offset: 0x280, Size: 0x8] 0x78c62ff580
	Border* SelfBorder;//[Offset: 0x288, Size: 0x8] 0x78c62ff500
	Border* TeamBorder;//[Offset: 0x290, Size: 0x8] 0x78c62ff480
	int index;//[Offset: 0x298, Size: 0x4] 0x78c62ff400
	int TeamId;//[Offset: 0x29c, Size: 0x4] 0x78c62ff380
	FString PlayerName;//[Offset: 0x2a0, Size: 0x10] 0x78c62ff300
	int KillNum;//[Offset: 0x2b0, Size: 0x4] 0x78c62ff280
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1] 0x78c62ff200
	void Construct();// 0x8a873f8 0x78c65b7240
	void ExecuteUbergraph_PVPKillNumRankElementWidget(int EntryPoint, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, PaperSprite* K2Node_Select_Default, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default);// 0x8a873f8 0x78c65b7400

--------------------------------
Class: obDrawCircleSmall_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea31a80
	OBMapBase_C* Parent;//[Offset: 0x268, Size: 0x8] 0x78bea31a00
	Vector2D[] Points;//[Offset: 0x270, Size: 0x10] 0x78c6839840
	float Radius;//[Offset: 0x280, Size: 0x4] 0x78bea31900
	LinearColor DrawColor;//[Offset: 0x284, Size: 0x10] 0x78bea31880
	int Sides;//[Offset: 0x294, Size: 0x4] 0x78bea31800
	bool IsDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78bea31780
	bool IsInUIHideMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x78bea31700
	void OnPaint(out PaintContext Context, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetPI_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Sin_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Cos_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x8a873f8 0x78c65bfc80
	void Init(OBMapBase_C* Parent);// 0x8a873f8 0x78c65bfd60
	void ExecuteUbergraph_obDrawCircleSmall(int EntryPoint, OBMapBase_C* K2Node_CustomEvent_parent);// 0x8a873f8 0x78c65bfe40

--------------------------------
Class: OBMapBase_C.OBMapUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x8] 0x78c4dc7900
	DrawFlyLineWidget_C* DrawFlyLine;//[Offset: 0x2f8, Size: 0x8] 0x78c4dc7880
	Image* FlyEndPoint;//[Offset: 0x300, Size: 0x8] 0x78c4dc7800
	Image* FlyStartPoint;//[Offset: 0x308, Size: 0x8] 0x78c4dc7780
	CanvasPanel* GlobalMap;//[Offset: 0x310, Size: 0x8] 0x78c4dc7700
	CanvasPanel* HighPanel;//[Offset: 0x318, Size: 0x8] 0x78c4dc7680
	Image* MapImage;//[Offset: 0x320, Size: 0x8] 0x78c4dc7600
	CanvasPanel* MapInfo;//[Offset: 0x328, Size: 0x8] 0x78c4dc7580
	Image* mapStencil;//[Offset: 0x330, Size: 0x8] 0x78c4dc7500
	CanvasPanel* NonInteractivePanel;//[Offset: 0x338, Size: 0x8] 0x78c4dc7480
	obSelfIcon_C* obSelfIcon;//[Offset: 0x340, Size: 0x8] 0x78c4dc7400
	Overlay* Planes;//[Offset: 0x348, Size: 0x8] 0x78c4dc9480
	CanvasPanel* PlayerPosPanel;//[Offset: 0x350, Size: 0x8] 0x78c4dc9400
	obDrawCircleSmall_C* poisonCircleCur;//[Offset: 0x358, Size: 0x8] 0x78c4dc9380
	obDrawCircleSmall_C* poisonCircleNxt;//[Offset: 0x360, Size: 0x8] 0x78c4dc9300
	<int,obPlayerWidget_C*> PlayerMarks;//[Offset: 0x368, Size: 0x50] 0x78c338f340
	OBClientInfo* OBClientInfo;//[Offset: 0x3b8, Size: 0x8] 0x78c4dc9180
	OBClientUIHelper* OBEventInfo;//[Offset: 0x3c0, Size: 0x8] 0x78c4dc9100
	bool _bInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1] 0x78c4dc9080
	Texture2D* ChineseMap;//[Offset: 0x3d0, Size: 0x8] 0x78c4dc9000
	Texture2D* EnglishMap;//[Offset: 0x3d8, Size: 0x8] 0x78c4dc8f80
	bool CanMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1] 0x78c4dc8f00
	float Size_PlayerIcon;//[Offset: 0x3e4, Size: 0x4] 0x78c4dc8e80
	<int,obMijingmen_C*> mijingmenMarks;//[Offset: 0x3e8, Size: 0x50] 0x78c338f580
	<int,obBaoxiang_C*> treasureboxMarks;//[Offset: 0x438, Size: 0x50] 0x78c338fb80
	<int,obXinfa_C*> xinfaMarks;//[Offset: 0x488, Size: 0x50] 0x78c338fa00
	<int,obFightState_C*> fightMarks;//[Offset: 0x4d8, Size: 0x50] 0x78c338f940
	float interactiveSize;//[Offset: 0x528, Size: 0x4] 0x78c4dc8a00
	<int,obKongtou_C*> kongtouMarks;//[Offset: 0x530, Size: 0x50] 0x78c338b800
	float scrollSize;//[Offset: 0x580, Size: 0x4] 0x78c4dc8880
	float MaxScrollSize;//[Offset: 0x584, Size: 0x4] 0x78c4dc8800
	float MinScrollSize;//[Offset: 0x588, Size: 0x4] 0x78c4dc8780
	float mapScrollRate;//[Offset: 0x58c, Size: 0x4] 0x78c4dc8700
	obBoxItemInfo_C* savedKongtouInfo;//[Offset: 0x590, Size: 0x8] 0x78c4dc8680
	bool IsFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1] 0x78c4dc8600
	Vector FlyStart;//[Offset: 0x59c, Size: 0xc] 0x78c4dc8580
	Vector FlyEnd;//[Offset: 0x5a8, Size: 0xc] 0x78c4dc8500
	bool IsMouseButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1] 0x78c4dc8480
	Vector2D MouseButtonDownPos;//[Offset: 0x5b8, Size: 0x8] 0x78c4dca500
	float mapDragSpeed;//[Offset: 0x5c0, Size: 0x4] 0x78c4dca480
	bool DamageVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1] 0x78c4dca400
	<int,MapBuffPointWidget_C*> dldBuffPointsMap;//[Offset: 0x5c8, Size: 0x50] 0x78c3380b80
	void OnReplayJump();// 0x8a873f8 0x78c4700cc0
	void _ClearDynamicInfo(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, obPlayerWidget_C*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, obPlayerWidget_C* CallFunc_Array_Get_Item, obFightState_C*[] CallFunc_Map_Values_Values, obKongtou_C*[] CallFunc_Map_Values_Values, obFightState_C* CallFunc_Array_Get_Item, obKongtou_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, obXinfa_C*[] CallFunc_Map_Values_Values, obXinfa_C* CallFunc_Array_Get_Item, obBaoxiang_C*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, obBaoxiang_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, obMijingmen_C*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, obMijingmen_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c4700da0
	void InitDamageCircle(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBDamageCircleInfo CallFunc_GetDamageCircleInfo_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x8a873f8 0x78c4700e80
	void RefreshMapInfo(GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_WuXiaX_GameInstace_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_Instace, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c4700f60
	void OnSetHideAll(bool needHide);// 0x8a873f8 0x78c4701040
	void RefreshAllBuffs(<int,BuffPointInfo> Cur Buffs, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, <int,BuffPointInfo> CallFunc_GetDldBuffPointInfo_ReturnValue, MapBuffPointWidget_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BuffPointInfo CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BuffPointInfo CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc__WorldPos2MapPos_MapPos, MapBuffPointWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x8a873f8 0x78c4701120
	void OnRedbullChange(int ID, bool State, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c4701200
	void SetDamageCircleVisibility(bool visible);// 0x8a873f8 0x78c508f9e0
	void SetCenterPos(Vector Center, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c47012e0
	void StopFly();// 0x8a873f8 0x78c47013c0
	void OnFlyChange(Vector CallFunc_GetFlyStartInfo_pos, Vector CallFunc_GetFlyStartInfo_dir, float CallFunc_GetFlyStartInfo_time, bool CallFunc_GetFlyStartInfo_ReturnValue);// 0x8a873f8 0x78c47014a0
	void StartFly(Vector Start, Vector End);// 0x8a873f8 0x78c4701580
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_DetectDragIfPressed_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetMousePosition_LocationX, float CallFunc_GetMousePosition_LocationY, bool CallFunc_GetMousePosition_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c4701660
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_DetectDragIfPressed_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_GetMousePosition_LocationX, float CallFunc_GetMousePosition_LocationY, bool CallFunc_GetMousePosition_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Abs_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c4701740
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent, EventReply CallFunc_DetectDragIfPressed_ReturnValue);// 0x8a873f8 0x78c4701820
	void _RefereshCharMarkVisible(int PlayerID, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c4701900
	void OnPlayerClicked(int PlayerID, PlayerController* CallFunc_GetPlayerController_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c47019e0
	void OnPlayerUnhovered(int PlayerID, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, obPlayerWidget_C*[] CallFunc_Map_Values_Values, obPlayerWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c4701ac0
	void OnPlayerHovered(int PlayerID, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c4701ba0
	void OnKongtouUnhovered(int paraID, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c4701c80
	void OnKongtouHovered(int paraID, GameItemInfo[] ItemInfos);// 0x8a873f8 0x78c508e860
	void _MapPos2MapOriginSizePos(Vector2D pos, out Vector2D OriginPos, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue);// 0x8a873f8 0x78c508e940
	void SetNewScrollSize(float NewSize, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_GetMousePosition_LocationX, float CallFunc_GetMousePosition_LocationY, bool CallFunc_GetMousePosition_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_Abs_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, obPlayerWidget_C*[] CallFunc_Map_Values_Values, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_Array_Length_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, int Temp_int_Array_Index_Variable, obPlayerWidget_C* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c508ea20
	void OnMapScroll(float scroll);// 0x8a873f8 0x78c508eb00
	void OnMapViewPlayerChange(bool CallFunc_Not_PreBool_ReturnValue);// 0x8a873f8 0x78c508ebe0
	void SetShowName(bool val);// 0x8a873f8 0x78c508ecc0
	void addNewKongtou(OBParadropPosInfo ID, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc__WorldPos2MapPos_MapPos, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obKongtou_C* CallFunc_Create_ReturnValue, obKongtou_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_res, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c508eda0
	void OnKongtouInfoed(int ID, OBParadropPosInfo CallFunc_GetParadropPosInfo_info, bool CallFunc_GetParadropPosInfo_ReturnValue);// 0x8a873f8 0x78c508ee80
	void OnKongtouCreated(int ID);// 0x8a873f8 0x78c508ef60
	void OnEvtHorseRideChange(int HorseID, int newRider, int newPassager, int oldRider, int oldPassager, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508f040
	void rmFightState(int ID, obFightState_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c508f120
	void addNewFightState(OBFightState Info, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc__WorldPos2MapPos_MapPos, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obFightState_C* CallFunc_Create_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, Vector2D CallFunc_GetMapSize_NewParam, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c508f200
	void OnFightEnd(int ID);// 0x8a873f8 0x78c508f2e0
	void OnFightStart(int worldID, OBFightState CallFunc_GetFightStateInfo_info, bool CallFunc_GetFightStateInfo_ReturnValue);// 0x8a873f8 0x78c508f3c0
	void rmTreasurebox(int ID, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c508f4a0
	void rmPlayer(int ID, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c508f580
	void addNewTreasurebox(OBTreasureBoxInfo Info, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, WuXiaXDLDHUD* K2Node_DynamicCast_AsWu_Xia_XDLDHUD, bool K2Node_DynamicCast_bSuccess, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obBaoxiang_C* CallFunc_Create_ReturnValue, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_NewParam, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c508f660
	void addNewXinfa(OBXinfaInfo Info, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc__WorldPos2MapPos_MapPos, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obXinfa_C* CallFunc_Create_ReturnValue, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_size, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c508f740
	void addNewMijingmen(OBMijingmenInfo Info, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc__WorldPos2MapPos_MapPos, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obMijingmen_C* CallFunc_Create_ReturnValue, obMijingmen_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetMapSize_size, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x8a873f8 0x78c508f820
	void OnTreasureBoxDestroyed(int ID, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0x8a873f8 0x78c508f900
	void OnXinfaLearningFinished(int ID, int PlayerID, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508fac0
	void OnXinfaLearningFailed(int ID, int PlayerID, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508fba0
	void OnXinfaLearning(int ID, int PlayerID, obXinfa_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508fc80
	void OnTreasureBoxOpened(int ID, int PlayerID, obBaoxiang_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508fd60
	void OnMijingmenExplored(int ID, int PlayerID, obMijingmen_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508fe40
	void OnXinfaCreated(int ID, Vector pos, OBXinfaInfo CallFunc_GetXinfaInfo_info, bool CallFunc_GetXinfaInfo_ReturnValue);// 0x8a873f8 0x78c508ff20
	void OnTreasureboxCreated(int ID, Vector pos, OBTreasureBoxInfo CallFunc_GetTreasureboxInfo_info, bool CallFunc_GetTreasureboxInfo_ReturnValue);// 0x8a873f8 0x78c508cb80
	void OnMijingmenCreated(int ID, Vector pos, OBMijingmenInfo CallFunc_GetMijingenInfo_info, bool CallFunc_GetMijingenInfo_ReturnValue);// 0x8a873f8 0x78c508cc60
	void OnCharRespawn(int PlayerID, Vector pos);// 0x8a873f8 0x78c508cd40
	void OnCharDied(int PlayerID, Vector pos);// 0x8a873f8 0x78c508ce20
	void OnCharDyingRecover(int PlayerID, Vector pos);// 0x8a873f8 0x78c508cf00
	void OnCharDying(int PlayerID, Vector pos);// 0x8a873f8 0x78c508cfe0
	void _SetPlayerWidgetPosRot(obPlayerWidget_C* Widget, Vector worldPos, float Rotation, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc_GetMapOffset_res, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue);// 0x8a873f8 0x78c508d0c0
	void OnCharAdded(int PlayerID);// 0x8a873f8 0x78c508d1a0
	void OnAllCharPosUpdated(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, <int,OBPlayerInfo> CallFunc_GetAllPlayerInfo_ReturnValue, OBPlayerInfo[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, OBPlayerInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508d280
	void _DoInitAll(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, <int,OBParadropItemInfo> CallFunc_GetParadropDetailInfos_ReturnValue, <int,OBPlayerInfo> CallFunc_GetAllPlayerInfo_ReturnValue, OBParadropItemInfo[] CallFunc_Map_Values_Values, OBPlayerInfo[] CallFunc_Map_Values_Values, OBParadropItemInfo CallFunc_Array_Get_Item, OBPlayerInfo CallFunc_Array_Get_Item, OBParadropPosInfo CallFunc_GetParadropPosInfo_info, bool CallFunc_GetParadropPosInfo_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, <int,OBFightState> CallFunc_GetAllFightStates_ReturnValue, OBFightState[] CallFunc_Map_Values_Values, <int,OBMijingmenInfo> CallFunc_GetAllMijingmenInfos_ReturnValue, OBFightState CallFunc_Array_Get_Item, OBMijingmenInfo[] CallFunc_Map_Values_Values, OBMijingmenInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, <int,OBTreasureBoxInfo> CallFunc_GetAllTreasureboxInfos_ReturnValue, OBTreasureBoxInfo[] CallFunc_Map_Values_Values, <int,OBXinfaInfo> CallFunc_GetAllXinfaInfos_ReturnValue, OBTreasureBoxInfo CallFunc_Array_Get_Item, OBXinfaInfo[] CallFunc_Map_Values_Values, OBXinfaInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c508d360
	void _InitInfo(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue);// 0x8a873f8 0x78c508d440
	void _WorldPos2MapPos(Vector worldPos, out Vector2D MapPos, Vector2D CallFunc_GetPercentByVector3_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue);// 0x8a873f8 0x78c508d520
	void addNewPlayer(OBPlayerInfo playerInfo, obPlayerWidget_C* cachedWidget, int recPlayerID, Anchors K2Node_MakeStruct_Anchors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obPlayerWidget_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, obPlayerWidget_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c508d600
	void SetNextCircle(float VectorPos2X, float VectorPos2Y, float Range);// 0x8a873f8 0x78c508d6e0
	void SetCurrentCircle(float VectorPos1X, float VectorPos1Y, float Range);// 0x8a873f8 0x78c508d7c0
	void Construct();// 0x8a873f8 0x78c508d8a0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c508d980
	void OnInit(Vector2D original_level_size, Vector2D original_map_size, Vector2D show_map_size, Vector Center, Texture2D* chinese_map, Texture2D* english_map, bool can_mark);// 0x8a873f8 0x78c508da60
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c508db40
	void OnResetLanguage();// 0x8a873f8 0x78c508dd00
	void ExecuteUbergraph_OBMapBase(int EntryPoint, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_VectorPos2X, float K2Node_Event_VectorPos2Y, float K2Node_Event_range, float K2Node_Event_VectorPos1X, float K2Node_Event_VectorPos1Y, float K2Node_Event_range, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc__WorldPos2MapPos_MapPos, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D K2Node_Event_original_level_size, Vector2D K2Node_Event_original_map_size, Vector2D K2Node_Event_show_map_size, Vector K2Node_Event_center, Texture2D* K2Node_Event_chinese_map, Texture2D* K2Node_Event_english_map, bool K2Node_Event_can_mark, bool CallFunc_Not_PreBool_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, WuXiaXPlane*[] CallFunc_GetAllActorsOfClass_OutActors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, WuXiaXPlane* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector2D CallFunc__WorldPos2MapPos_MapPos, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x8a873f8 0x78c508dec0

--------------------------------
Class: AdvPoolEffectInfoEquipWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea34b00
	Image* iconImage;//[Offset: 0x268, Size: 0x8] 0x78bea34a80
	Border* LevelBorder;//[Offset: 0x270, Size: 0x8] 0x78bea34a00
	int Level;//[Offset: 0x278, Size: 0x4] 0x78bea34980
	FString IconPath;//[Offset: 0x280, Size: 0x10] 0x78bea34900
	void Construct();// 0x8a873f8 0x78c65b5fe0
	void ExecuteUbergraph_AdvPoolEffectInfoEquipWidget(int EntryPoint, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, bool CallFunc_SetImageTexture_ReturnValue, PaperSprite* K2Node_Select_Default, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue);// 0x8a873f8 0x78c65b61a0

--------------------------------
Class: AdvPoolItemWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea36000
	Image* BackgroundImage;//[Offset: 0x268, Size: 0x8] 0x78bea35f80
	Image* BackgroundSelectImage;//[Offset: 0x270, Size: 0x8] 0x78bea35f00
	WidgetSwitcher* BackgroundSwitcher;//[Offset: 0x278, Size: 0x8] 0x78bea35e80
	TextBlock* DescTextBlock;//[Offset: 0x280, Size: 0x8] 0x78bea35e00
	Image* iconImage;//[Offset: 0x288, Size: 0x8] 0x78bea35d80
	TextBlock* NameText;//[Offset: 0x290, Size: 0x8] 0x78bea35d00
	Button* SelectButton;//[Offset: 0x298, Size: 0x8] 0x78bea35c80
	delegate SelectRaffledItemEvent;//[Offset: 0x2a0, Size: 0x10] 0x78bea35c00
	AdvPoolRaffleItemInfo iteminfo;//[Offset: 0x2b0, Size: 0x50] 0x78bea35b80
	int RaffleItemIndex;//[Offset: 0x300, Size: 0x4] 0x78bea35b00
	void CancelSelect();// 0x8a873f8 0x78c5088740
	void Construct();// 0x8a873f8 0x78c5088820
	void BndEvt__SelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c5088900
	void ExecuteUbergraph_AdvPoolItemWidget(int EntryPoint, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool CallFunc_SetImageTexture_ReturnValue, Object* K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, enum Temp_byte_Variable, Object* K2Node_Select_Default);// 0x8a873f8 0x78c5088ac0
	void SelectRaffledItemEvent__DelegateSignature(int RaffleItemIndex);// 0x8a873f8 0x78c5088c80

--------------------------------
Class: AdvPoolItemSelectWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bea36680
	AdvPoolItemWidget_C* AdvPoolItemWidget;//[Offset: 0x268, Size: 0x8] 0x78bea36600
	AdvPoolItemWidget_C* AdvPoolItemWidget;//[Offset: 0x270, Size: 0x8] 0x78bea36580
	AdvPoolItemWidget_C* AdvPoolItemWidget;//[Offset: 0x278, Size: 0x8] 0x78bea36500
	Border* Border;//[Offset: 0x280, Size: 0x8] 0x78bea36480
	HorizontalBox* ItemBox;//[Offset: 0x288, Size: 0x8] 0x78bea36400
	Button* SubmitSelectButton;//[Offset: 0x290, Size: 0x8] 0x78bea36380
	int RaffleItemIndex;//[Offset: 0x298, Size: 0x4] 0x78bea38400
	delegate SelectRaffledItemEvent;//[Offset: 0x2a0, Size: 0x10] 0x78bea38380
	AdvPoolRaffleItemInfoGroup ItemInfoGroup;//[Offset: 0x2b0, Size: 0x18] 0x78bea38300
	EventReply OnBorderMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, AdvPoolItemWidget_C* K2Node_DynamicCast_AsAdv_Pool_Item_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c508ac00
	void SelectItem(int RaffleItemIndex, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, AdvPoolItemWidget_C* K2Node_DynamicCast_AsAdv_Pool_Item_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c508ace0
	void UpdateItemInfoGroup(AdvPoolRaffleItemInfoGroup NewItemInfoGroup, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AdvPoolRaffleItemInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, AdvPoolItemWidget_C* CallFunc_Create_ReturnValue, SlateChildSize K2Node_MakeStruct_SlateChildSize, PanelSlot* CallFunc_AddChild_ReturnValue, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c508adc0
	void BndEvt__SubmitSelectButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c5087400
	void ExecuteUbergraph_AdvPoolItemSelectWidget(int EntryPoint);// 0x8a873f8 0x78c50875c0
	void SelectRaffledItemEvent__DelegateSignature(int RaffleItemIndex);// 0x8a873f8 0x78c5087780

--------------------------------
Class: AdvPoolEffectInfoWidget_C.UserWidget.Widget.Visual.Object
	TextBlock* AttackBonusTextBlock;//[Offset: 0x260, Size: 0x8] 0x78bea39b00
	Border* Border;//[Offset: 0x268, Size: 0x8] 0x78bea39a80
	TextBlock* DefenseBonusTextBlock;//[Offset: 0x270, Size: 0x8] 0x78bea39a00
	Overlay* EffectOverlay;//[Offset: 0x278, Size: 0x8] 0x78bea39980
	WidgetSwitcher* EquipSwitcher;//[Offset: 0x280, Size: 0x8] 0x78bea39900
	WrapBox* EquipWarpBox;//[Offset: 0x288, Size: 0x8] 0x78bea39880
	TextBlock* ExplosionBonusTextBlock;//[Offset: 0x290, Size: 0x8] 0x78bea39800
	TextBlock* MoveBonusTextBlock;//[Offset: 0x298, Size: 0x8] 0x78bea39780
	TextBlock* NoneEquipText;//[Offset: 0x2a0, Size: 0x8] 0x78bea39700
	TextBlock* NoneSelectText;//[Offset: 0x2a8, Size: 0x8] 0x78bea39680
	TextBlock* NoneSkillText;//[Offset: 0x2b0, Size: 0x8] 0x78bea39600
	TextBlock* RangeBonusTextBlock;//[Offset: 0x2b8, Size: 0x8] 0x78bea39580
	WidgetSwitcher* SelectSwitcher;//[Offset: 0x2c0, Size: 0x8] 0x78bea39500
	WrapBox* SelectWarpBox;//[Offset: 0x2c8, Size: 0x8] 0x78bea3b580
	HorizontalBox* SkillHorizontalBox;//[Offset: 0x2d0, Size: 0x8] 0x78bea3b500
	WidgetSwitcher* SkillSwitcher;//[Offset: 0x2d8, Size: 0x8] 0x78bea3b480
	AdvPoolEffectInfo Effect Info;//[Offset: 0x2e0, Size: 0x60] 0x78bea3b400
	void AddSkillWidget(int skillid, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UISkillInfo CallFunc_GetSkillDetailInfo_ReturnValue, AdvPoolEffectInfoSkillWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c508a340
	void UpdateBuffBonuses(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum Temp_byte_Variable, AdvPoolBuffInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, TextBlock* K2Node_Select_Default);// 0x8a873f8 0x78c508a420
	void UpdateSelectInfo(AdvPoolEffectInfoSelectWidget_C* SelectWidget, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, AdvPoolEffectInfoSelectWidget_C* CallFunc_Create_ReturnValue, Widget* CallFunc_Array_Get_Item, PanelSlot* CallFunc_AddChild_ReturnValue, AdvPoolEffectInfoSelectWidget_C* K2Node_DynamicCast_AsAdv_Pool_Effect_Info_Select_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, AdvPoolRaffleItemInfo CallFunc_Array_Get_Item, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckAddNum_IsSame, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Widget* K2Node_Select_Default);// 0x8a873f8 0x78c508a500
	void UpdateSkillInfo(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Widget* K2Node_Select_Default);// 0x8a873f8 0x78c508a5e0
	void UpdateEquipInfo(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, AdvPoolEffectInfoEquipWidget_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_Variable, PanelSlot* CallFunc_AddChild_ReturnValue, Widget* K2Node_Select_Default, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetItemInfoById_name, FString CallFunc_GetItemInfoById_detail, enum CallFunc_GetItemInfoById_sexType, int CallFunc_GetItemInfoById_level, FString CallFunc_GetItemIconPathById_ReturnValue);// 0x8a873f8 0x78c508a6c0
	void UpdateEffectInfo(AdvPoolEffectInfo NewEffectInfo, int[] NewLocalVar);// 0x8a873f8 0x78c508a880
	EventReply OnBorderMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c508a960

--------------------------------
Class: AdvPoolEffectInfoSkillWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c67b4e00
	Image* iconImage;//[Offset: 0x268, Size: 0x8] 0x78c685de00
	TextBlock* NameTextBlock;//[Offset: 0x270, Size: 0x8] 0x78c4dc6c80
	FText Name;//[Offset: 0x278, Size: 0x18] 0x78c4dc6c00
	FString IconPath;//[Offset: 0x290, Size: 0x10] 0x78c4dc6b80
	void Construct();// 0x8a873f8 0x78c5085aa0
	void ExecuteUbergraph_AdvPoolEffectInfoSkillWidget(int EntryPoint, bool CallFunc_SetImageTexture_ReturnValue);// 0x8a873f8 0x78c5085d40

--------------------------------
Class: AdvPoolEffectInfoSelectWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bc8b8d80
	Image* SelectItemImage;//[Offset: 0x268, Size: 0x8] 0x78bc8b8d00
	TextBlock* SelectItemNumText;//[Offset: 0x270, Size: 0x8] 0x78bc8b8c80
	AdvPoolRaffleItemInfo SelectItemInfo;//[Offset: 0x278, Size: 0x50] 0x78bc8b8c00
	int SelectItemNum;//[Offset: 0x2c8, Size: 0x4] 0x78bc8b8b80
	void CheckAddNum(AdvPoolRaffleItemInfo CheckSelectItemInfo, out bool IsSame, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78d1d635e0
	void Construct();// 0x8a873f8 0x78c65be080
	void ExecuteUbergraph_AdvPoolEffectInfoSelectWidget(int EntryPoint, bool CallFunc_SetImageTexture_ReturnValue);// 0x8a873f8 0x78c5085720

--------------------------------
Class: obWeaponSkillIcon_C.UserWidget.Widget.Visual.Object
	obSkillIcon_C* obSkillIcon;//[Offset: 0x260, Size: 0x8] 0x78bea3ad00
	TextBlock* skillIdx;//[Offset: 0x268, Size: 0x8] 0x78bea3ac80
	TextBlock* skillNameTxt;//[Offset: 0x270, Size: 0x8] 0x78bea3ac00
	void SetInfo(int skillid, FText text, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, FString CallFunc_GetSkillName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c50892a0

--------------------------------
Class: obSkillIcon_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4dc6380
	Image* bgImage;//[Offset: 0x268, Size: 0x8] 0x78c4dc8400
	Image* Boarder;//[Offset: 0x270, Size: 0x8] 0x78c4dc8380
	Image* iconImage;//[Offset: 0x278, Size: 0x8] 0x78c4dc8300
	ProgressBar* skillcd;//[Offset: 0x280, Size: 0x8] 0x78c4dc8280
	Image* skillCDBG;//[Offset: 0x288, Size: 0x8] 0x78c4dc8200
	bool inCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78c4dc8180
	int skillid;//[Offset: 0x294, Size: 0x4] 0x78c4dc8100
	float timePassed;//[Offset: 0x298, Size: 0x4] 0x78c4dc8080
	float timeTotal;//[Offset: 0x29c, Size: 0x4] 0x78c4dc8000
	float timeAcced;//[Offset: 0x2a0, Size: 0x4] 0x78c4dc7f80
	void refreshSkillCDShow(float B, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x8a873f8 0x78c508b220
	void DebugPrint(FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x8a873f8 0x78c508b300
	void OnEvt_SkillCD(int PlayerID, int skillid, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, bool CallFunc_IsViewingTargetPlayer_ReturnValue, float CallFunc_GetPlayerPlaySkillCDInfo_timePassed, float CallFunc_GetPlayerPlaySkillCDInfo_timeTotal, bool CallFunc_GetPlayerPlaySkillCDInfo_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c508b3e0
	void RefreshCD(float timePassed, float timeTotal);// 0x8a873f8 0x78c508b4c0
	void SetInfo(int skillinfo, FText text, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, float CallFunc_GetPlayerPlaySkillCDInfo_timePassed, float CallFunc_GetPlayerPlaySkillCDInfo_timeTotal, bool CallFunc_GetPlayerPlaySkillCDInfo_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PaperSprite* CallFunc_GetSkillIconTexture_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c508b5a0
	void Construct();// 0x8a873f8 0x78c508b680
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c508b840
	void ExecuteUbergraph_obSkillIcon(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue);// 0x8a873f8 0x78c508ba00

--------------------------------
Class: obWeaponIndex_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x260, Size: 0x8] 0x78bea3a600
	TextBlock* Info;//[Offset: 0x268, Size: 0x8] 0x78bea3a580
	void SetText(FText NewParam);// 0x8a873f8 0x78c508c8e0

--------------------------------
Class: obSkillIconWithName_C.UserWidget.Widget.Visual.Object
	Image* skillIcon;//[Offset: 0x260, Size: 0x8] 0x78bea3d300
	TextBlock* skillname;//[Offset: 0x268, Size: 0x8] 0x78bea3d280
	void SetInfo(int skillid, bool CallFunc_Greater_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, PaperSprite* CallFunc_GetSkillIconTexture_ReturnValue, FString CallFunc_GetSkillName_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c508c3a0

--------------------------------
Class: obTeamPlayerMemInfo_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4dc6a80
	WidgetAnimation* PlayerDeathAnim;//[Offset: 0x268, Size: 0x8] 0x78c4dc6a00
	Image* bgImage;//[Offset: 0x270, Size: 0x8] 0x78c4dc6980
	Button* btn;//[Offset: 0x278, Size: 0x8] 0x78c4dc6900
	TextBlock* damageTxt;//[Offset: 0x280, Size: 0x8] 0x78c4dc6880
	ProgressBar* DyingHpProgressBar;//[Offset: 0x288, Size: 0x8] 0x78c4dc6800
	ProgressBar* FightHPProgressBar;//[Offset: 0x290, Size: 0x8] 0x78c4dc6780
	WidgetSwitcher* HpSwitcher;//[Offset: 0x298, Size: 0x8] 0x78c4dc6700
	TextBlock* killTxt;//[Offset: 0x2a0, Size: 0x8] 0x78c4dc6680
	TextBlock* nameTxt;//[Offset: 0x2a8, Size: 0x8] 0x78c4dc6600
	Image* RightState;//[Offset: 0x2b0, Size: 0x8] 0x78c4dc6580
	Image* spaceImage;//[Offset: 0x2b8, Size: 0x8] 0x78c4dc6500
	int PlayerID;//[Offset: 0x2c0, Size: 0x4] 0x78c4dc6480
	void _RefreshStateInfo(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c508c100
	void Init(int PlayerID);// 0x8a873f8 0x78c508c1e0
	void Refresh(bool CallFunc_IsAnimationPlaying_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, float CallFunc_GetPlayerInfo_MaxDyingHealth_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x8a873f8 0x78c508c2c0
	void BndEvt__btn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c508c480
	void ExecuteUbergraph_obTeamPlayerMemInfo(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c508c560

--------------------------------
Class: obItemIcon_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4dca280
	Image* bgImage;//[Offset: 0x268, Size: 0x8] 0x78c4dca200
	Image* iconImage;//[Offset: 0x270, Size: 0x8] 0x78c4dca180
	TextBlock* text;//[Offset: 0x278, Size: 0x8] 0x78c4dca100
	int ItemId;//[Offset: 0x280, Size: 0x4] 0x78c4dca080
	void SetInfo(int ItemId, FText text, bool useSimple, PaperSprite* useImage, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PaperSprite* CallFunc_GetWeaponStateIconTextureSquare_ReturnValue, PaperSprite* CallFunc_GetWeaponStateIconTexture_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PaperSprite* CallFunc_GetEquipStateIconTexture_ReturnValue, PaperSprite* CallFunc_GetItemIconTexture_ReturnValue);// 0x8a873f8 0x78c4700400
	void Construct();// 0x8a873f8 0x78c47005c0
	void ExecuteUbergraph_obItemIcon(int EntryPoint);// 0x8a873f8 0x78c4700780

--------------------------------
Class: HorseWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4dc9f80
	ProgressBar* PowerProgress;//[Offset: 0x268, Size: 0x8] 0x78c4dc9f00
	TextBlock* SpeedText;//[Offset: 0x270, Size: 0x8] 0x78c4dc9e80
	void SetSpeed(float CurrentSpeed, float MaxSpeed);// 0x8a873f8 0x78c47035e0
	void SetPower(float CurrentPower, float MaxPower);// 0x8a873f8 0x78c47037a0
	void ExecuteUbergraph_HorseWidget(int EntryPoint, float K2Node_CustomEvent_CurrentSpeed, float K2Node_CustomEvent_MaxSpeed, int CallFunc_FTrunc_ReturnValue, float K2Node_CustomEvent_CurrentPower, float K2Node_CustomEvent_MaxPower, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c4703960

--------------------------------
Class: AdvPoolWidget_C.AdvPoolUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a8, Size: 0x8] 0x78c4dc9c80
	AdvPoolEffectInfoWidget_C* AdvPoolEffectInfoWidget;//[Offset: 0x3b0, Size: 0x8] 0x78c4dc9c00
	AdvPoolItemSelectWidget_C* AdvPoolItemSelectWidget;//[Offset: 0x3b8, Size: 0x8] 0x78c4dc9b80
	Image* LevelImage;//[Offset: 0x3c0, Size: 0x8] 0x78c4dc9b00
	Border* LightBorder;//[Offset: 0x3c8, Size: 0x8] 0x78c4dc9a80
	Button* OpenButton;//[Offset: 0x3d0, Size: 0x8] 0x78c4dc9a00
	WidgetSwitcher* PanelSwitcher;//[Offset: 0x3d8, Size: 0x8] 0x78c4dc9980
	Image* ProgressImage;//[Offset: 0x3e0, Size: 0x8] 0x78c4dc9900
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x3e8, Size: 0x8] 0x78c4dc9880
	LinearColor Center;//[Offset: 0x3f0, Size: 0x10] 0x78c4dc9800
	int ShowLevel;//[Offset: 0x400, Size: 0x4] 0x78c4dc9780
	int Level;//[Offset: 0x404, Size: 0x4] 0x78c4dc9700
	float ExpProgress;//[Offset: 0x408, Size: 0x4] 0x78c4dc9680
	float ShowExpProgress;//[Offset: 0x40c, Size: 0x4] 0x78c4dc9600
	void UpdateIcon(enum Temp_byte_Variable, int Temp_int_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, Object* K2Node_Select_Default, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c4702380
	void Construct();// 0x8a873f8 0x78c4702460
	void BndEvt__OpenButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c4702540
	void UpdateExpProgress(const float NewExpProgress);// 0x8a873f8 0x78c4702620
	void SelectRaffleItem(int RaffleItemIndex);// 0x8a873f8 0x78c4702700
	void UpdateRaffleItemInfoGroup(out const AdvPoolRaffleItemInfoGroup NewRaffleItemInfoGroup);// 0x8a873f8 0x78c47027e0
	void UpdateEffectInfo(out const AdvPoolEffectInfo NewEffectInfo);// 0x8a873f8 0x78c47028c0
	void UpdateLevel(const int NewLevel);// 0x8a873f8 0x78c4702a80
	void ExecuteUbergraph_AdvPoolWidget(int EntryPoint, const float K2Node_Event_NewExpProgress, int K2Node_Event_RaffleItemIndex, const AdvPoolRaffleItemInfoGroup K2Node_Event_NewRaffleItemInfoGroup, const AdvPoolRaffleItemInfoGroup CallFunc_GetRaffleItemInfoGroup_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsRaffleItemSelected_ReturnValue, const AdvPoolEffectInfo K2Node_Event_NewEffectInfo, const int K2Node_Event_NewLevel, Object* CallFunc_GetBrushResource_ReturnValue, PaperSprite* K2Node_DynamicCast_AsPaper_Sprite, bool K2Node_DynamicCast_bSuccess, SpriteAtlasData CallFunc_GetSpriteAtlasData_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float Temp_float_Variable, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_Select_Default, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x8a873f8 0x78c4702c40

--------------------------------
Class: PopInfoWidgetBase_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4dcca00
	delegate PopTimeOut;//[Offset: 0x268, Size: 0x10] 0x78c4dcc980
	bool StartDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78c4dcc900
	float CalculateTimer;//[Offset: 0x27c, Size: 0x4] 0x78c4dcc880
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c47059c0
	void ExecuteUbergraph_PopInfoWidgetBase(int EntryPoint, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x8a873f8 0x78c4705b80
	void PopTimeOut__DelegateSignature(PopInfoWidgetBase_C* SelfWidget);// 0x8a873f8 0x78c4705d40

--------------------------------
Class: PVPKillNumRankWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4917000
	Image* ButtonImage;//[Offset: 0x268, Size: 0x8] 0x78c4916f80
	WrapBox* ElementWrapBox;//[Offset: 0x270, Size: 0x8] 0x78c4916f00
	Button* SettingButton;//[Offset: 0x278, Size: 0x8] 0x78c4916e80
	Button* ShowHideButton;//[Offset: 0x280, Size: 0x8] 0x78c4916e00
	PVPKillNumRankElementWidget_C*[] Elements;//[Offset: 0x288, Size: 0x10] 0x78c4481dc0
	bool IsOtherTeamHid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78c4916d00
	<int,int> KillNumMap;//[Offset: 0x2a0, Size: 0x50] 0x78c37d1b40
	<int,int> TeamIdMap;//[Offset: 0x2f0, Size: 0x50] 0x78c37d19c0
	<int,FString> PlayerNameMap;//[Offset: 0x340, Size: 0x50] 0x78c37d1900
	TimerHandle CheckHideTimerHandle;//[Offset: 0x390, Size: 0x8] 0x78c4916980
	delegate OpenSetting;//[Offset: 0x398, Size: 0x10] 0x78c4916900
	void UpdateElementsVisibility(bool isHide, int Temp_int_Array_Index_Variable, enum Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Widget* CallFunc_Array_Get_Item, PVPKillNumRankElementWidget_C* K2Node_DynamicCast_AsPVPKill_Num_Rank_Element_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_TeamIdToSquadId_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, enum Temp_byte_Variable, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Team_GetSquadID_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c42d1c80
	void UpdateKillNum(int PlayerID, int TeamId, FString PlayerName, int NewKillNum, Character* CallFunc_GetPlayerCharacter_ReturnValue, int Temp_int_Loop_Counter_Variable, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetPlayerUniqueId_ReturnValue, int Temp_int_Array_Index_Variable, <int,int> CallFunc_SortIntMap_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PVPKillNumRankElementWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c470e6a0
	void CheckHide();// 0x8a873f8 0x78c470e780
	void BndEvt__ShowHideButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e860
	void BndEvt__SettingButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e940
	void ExecuteUbergraph_PVPKillNumRankWidget(int EntryPoint, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool CallFunc_Not_PreBool_ReturnValue, Vector2D CallFunc_GetTouchScreenPosition_ScreenPosition, bool CallFunc_GetTouchScreenPosition_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float K2Node_Select_Default);// 0x8a873f8 0x78c470eb00
	void OpenSetting__DelegateSignature();// 0x8a873f8 0x78c470ecc0

--------------------------------
Class: PVPSelectRollBarSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4918f80
	delegate OnSelect;//[Offset: 0x268, Size: 0x10] 0x78c4918f00
	int ID;//[Offset: 0x278, Size: 0x4] 0x78c4918e80
	PVPSelectRollBar_C* ScrollBar;//[Offset: 0x280, Size: 0x8] 0x78c4918e00
	float ScrollOffset;//[Offset: 0x288, Size: 0x4] 0x78c4918d80
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, bool CallFunc_Not_PreBool_ReturnValue);// 0x8a873f8 0x78c42d3880
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x8a873f8 0x78c42d1200
	void Init(FString icon, FText Name, FText Desc, int ID);// 0x8a873f8 0x78c42d12e0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c42d13c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c42d1580
	void ExecuteUbergraph_PVPSelectRollBarSlot(int EntryPoint, const PointerEvent K2Node_Event_MouseEvent, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x8a873f8 0x78c42d1660
	void OnSelect__DelegateSignature(int SlotId);// 0x8a873f8 0x78c42d1820

--------------------------------
Class: PVPSelectRollBar_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c491c680
	Image* Background;//[Offset: 0x268, Size: 0x8] 0x78c491e700
	ScrollBox* ScrollBar;//[Offset: 0x270, Size: 0x8] 0x78c491e680
	delegate OnSelectButtonClick;//[Offset: 0x278, Size: 0x10] 0x78c491e600
	int Type;//[Offset: 0x288, Size: 0x4] 0x78c491e580
	int index;//[Offset: 0x28c, Size: 0x4] 0x78c491e500
	bool IsScrolled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x78c491e480
	PVPSelectRollBarSlot_C* SelectedItem;//[Offset: 0x298, Size: 0x8] 0x78c491e400
	void OnSelectClick(int ID);// 0x8a873f8 0x78c42d44c0
	void Init(int Type, int index, out FString[] icons, out FString[] names, out FString[] Descs, out int[] IDs, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, PVPEmptySlotWidget_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, class UserWidget Temp_class_Variable, class UserWidget Temp_class_Variable, PanelSlot* CallFunc_AddChild_ReturnValue, class UserWidget K2Node_Select_Default, UserWidget* CallFunc_Create_ReturnValue, PVPSelectRollBarSlot_C* K2Node_DynamicCast_AsPVPSelect_Roll_Bar_Slot, bool K2Node_DynamicCast_bSuccess, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c42d45a0
	void BndEvt__ScrollBar_K2Node_ComponentBoundEvent_0_OnUserScrolledEvent__DelegateSignature(float CurrentOffset);// 0x8a873f8 0x78c42d4680
	void ExecuteUbergraph_PVPSelectRollBar(int EntryPoint, float K2Node_ComponentBoundEvent_CurrentOffset);// 0x8a873f8 0x78c42d4840
	void OnSelectButtonClick__DelegateSignature(int Type, int index, int ID);// 0x8a873f8 0x78c42d4a00

--------------------------------
Class: PVPEmptySlotWidget_C.PVPSelectRollBarSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x78b8921480
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x78b8921400
	TextBlock* Name;//[Offset: 0x2a0, Size: 0x8] 0x78b8921380
	void Init(FString icon, FText Name, FText Desc, int ID);// 0x8a873f8 0x78c42d0240
	void ExecuteUbergraph_PVPEmptySlotWidget(int EntryPoint, FString K2Node_Event_icon, FText K2Node_Event_name, FText K2Node_Event_Desc, int K2Node_Event_id);// 0x8a873f8 0x78c42d0400

--------------------------------
Class: PVPSelectSlotWidget_C.UserWidget.Widget.Visual.Object
	FText SlotNameText;//[Offset: 0x260, Size: 0x18] 0x78c4919f00
	int Type;//[Offset: 0x278, Size: 0x4] 0x78c4919e80
	int index;//[Offset: 0x27c, Size: 0x4] 0x78c4919e00
	void SetHovered(bool Hovered);// 0x8a873f8 0x78c42d2ee0

--------------------------------
Class: PVPWeaponSelectWidget_C.PVPSelectSlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78c491c380
	Image* Hovered;//[Offset: 0x288, Size: 0x8] 0x78c491c300
	PVPWeaponSkillSelectWidget_C* Skill0;//[Offset: 0x290, Size: 0x8] 0x78c491c280
	PVPWeaponSkillSelectWidget_C* Skill1;//[Offset: 0x298, Size: 0x8] 0x78c491c200
	PVPWeaponSkillSelectWidget_C* Skill2;//[Offset: 0x2a0, Size: 0x8] 0x78c491c180
	TextBlock* SlotName;//[Offset: 0x2a8, Size: 0x8] 0x78c491c100
	Image* titlebg;//[Offset: 0x2b0, Size: 0x8] 0x78c491c080
	Button* Weapon;//[Offset: 0x2b8, Size: 0x8] 0x78c491c000
	Image* weapon_icon;//[Offset: 0x2c0, Size: 0x8] 0x78c491bf80
	FString[] skillicons;//[Offset: 0x2c8, Size: 0x10] 0x78c4483260
	int[] skillids;//[Offset: 0x2d8, Size: 0x10] 0x78c44831c0
	FString[] skillnames;//[Offset: 0x2e8, Size: 0x10] 0x78c4483120
	FString[] skilldescs;//[Offset: 0x2f8, Size: 0x10] 0x78c4483080
	int weaponid;//[Offset: 0x308, Size: 0x4] 0x78c491bd00
	int SkillType;//[Offset: 0x30c, Size: 0x4] 0x78c491bc80
	delegate OnSkillBeClick;//[Offset: 0x310, Size: 0x10] 0x78c491bc00
	delegate OnWeaponBeClick;//[Offset: 0x320, Size: 0x10] 0x78c491bb80
	void GetSkillSlot(int index, out PVPSelectSlotWidget_C* SkillSlot, int Temp_int_Variable, PVPWeaponSkillSelectWidget_C* K2Node_Select_Default);// 0x8a873f8 0x78c42d4d80
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c42d4e60
	void InitEvents(delegate K2Node_CreateDelegate_OutputDelegate);// 0x8a873f8 0x78c42d4f40
	void SetSkill(int index, int ID, PaperSprite* icon, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BP_WuXiaX_GameInstace_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_Instace, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Find_ReturnValue, PaperSprite* CallFunc_GetSprite_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c42d5020
	void SetSkillHotKey(int index, FText HotKey, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c42d5100
	void SetWeapon(int weaponid, PaperSprite* WeaponIcon, out int[] skillids, out FString[] skillnames, out FString[] skilldescs, out FString[] icons, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput);// 0x8a873f8 0x78c42d51e0
	void OnSkillClick(int index, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c42d52c0
	void SetHovered(bool Hovered);// 0x8a873f8 0x78c42d53a0
	void Construct();// 0x8a873f8 0x78c42d5480
	void ExecuteUbergraph_PVPWeaponSelectWidget(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_Hovered, enum K2Node_Select_Default, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c42d5560
	void OnWeaponBeClick__DelegateSignature(int Type, int index);// 0x8a873f8 0x78c42d1d60
	void OnSkillBeClick__DelegateSignature(int Type, int index, out FString[] skillicons, out FString[] skillnames, out FString[] skilldescs, out int[] skillids);// 0x8a873f8 0x78c42d1f20

--------------------------------
Class: PVPWeaponSkillSelectWidget_C.PVPSelectSlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78b8921280
	Image* Background;//[Offset: 0x288, Size: 0x8] 0x78b8921200
	Image* Hovered;//[Offset: 0x290, Size: 0x8] 0x78b8921180
	Button* SkillButton;//[Offset: 0x298, Size: 0x8] 0x78b8921100
	Image* SkillImage;//[Offset: 0x2a0, Size: 0x8] 0x78b8923180
	delegate OnSkillClick;//[Offset: 0x2a8, Size: 0x10] 0x78b8923100
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c42d22a0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c42d2380
	void Init(bool IsValid, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c42d2460
	void SetHotKey(FText hotkeyname);// 0x8a873f8 0x78c42d2540
	void SetSkill(PaperSprite* icon, bool CallFunc_IsValid_ReturnValue, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput);// 0x8a873f8 0x78c42d2620
	void SetHovered(bool Hovered);// 0x8a873f8 0x78c42d2700
	void BndEvt__SkillButton_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42d27e0
	void ExecuteUbergraph_PVPWeaponSkillSelectWidget(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_Hovered, enum K2Node_Select_Default);// 0x8a873f8 0x78c42d29a0
	void OnSkillClick__DelegateSignature(int index);// 0x8a873f8 0x78c42d2b60

--------------------------------
Class: PVPItemSelectWidget_C.PVPSelectSlotWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78c491da00
	Button* ClickButton;//[Offset: 0x288, Size: 0x8] 0x78c491d980
	Image* Hovered;//[Offset: 0x290, Size: 0x8] 0x78c491d900
	Image* ItemIcon;//[Offset: 0x298, Size: 0x8] 0x78c491d880
	TextBlock* Number;//[Offset: 0x2a0, Size: 0x8] 0x78c491d800
	TextBlock* SlotName;//[Offset: 0x2a8, Size: 0x8] 0x78c491d780
	int ItemId;//[Offset: 0x2b0, Size: 0x4] 0x78c491d700
	delegate OnItemClick;//[Offset: 0x2b8, Size: 0x10] 0x78c491f780
	void SetHotKey(FText SetHotKey);// 0x8a873f8 0x78c42d3b20
	void SetItem(int ID, PaperSprite* icon, int Number, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput);// 0x8a873f8 0x78c42d3c00
	void SetHovered(bool Hovered);// 0x8a873f8 0x78c42d3ce0
	void BndEvt__ClickButton_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42d3dc0
	void ExecuteUbergraph_PVPItemSelectWidget(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_Hovered, enum K2Node_Select_Default);// 0x8a873f8 0x78c42d3f80
	void OnItemClick__DelegateSignature(int Type, int index);// 0x8a873f8 0x78c42d4140

--------------------------------
Class: PVPSelectWidget_C.PVPSelectUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5c0, Size: 0x8] 0x78c3fb2200
	Image* Background;//[Offset: 0x5c8, Size: 0x8] 0x78c3fb2180
	Button* Cancle;//[Offset: 0x5d0, Size: 0x8] 0x78c3fb4200
	HorizontalBox* GameTime;//[Offset: 0x5d8, Size: 0x8] 0x78c3fb4180
	PVPWeaponSelectWidget_C* Hand;//[Offset: 0x5e0, Size: 0x8] 0x78c3fb4100
	PVPItemSelectWidget_C* Item0;//[Offset: 0x5e8, Size: 0x8] 0x78c3fb4080
	PVPItemSelectWidget_C* item1;//[Offset: 0x5f0, Size: 0x8] 0x78c3fb4000
	PVPItemSelectWidget_C* item2;//[Offset: 0x5f8, Size: 0x8] 0x78c3fb3f80
	PVPItemSelectWidget_C* Missle;//[Offset: 0x600, Size: 0x8] 0x78c3fb3f00
	PVPSelectRollBar_C* PVPSelectRollBar;//[Offset: 0x608, Size: 0x8] 0x78c3fb3e80
	Button* Random;//[Offset: 0x610, Size: 0x8] 0x78c3fb3e00
	PVPItemSelectWidget_C* RangeWeapon;//[Offset: 0x618, Size: 0x8] 0x78c3fb3d80
	Button* Save;//[Offset: 0x620, Size: 0x8] 0x78c3fb3d00
	HorizontalBox* SelectRollPanel;//[Offset: 0x628, Size: 0x8] 0x78c3fb3c80
	TextBlock* TimeText;//[Offset: 0x630, Size: 0x8] 0x78c3fb3c00
	PVPItemSelectWidget_C* TongYong;//[Offset: 0x638, Size: 0x8] 0x78c3fb3b80
	PVPWeaponSelectWidget_C* Weapon0;//[Offset: 0x640, Size: 0x8] 0x78c3fb3b00
	PVPWeaponSelectWidget_C* Weapon1;//[Offset: 0x648, Size: 0x8] 0x78c3fb3a80
	PVPItemSelectWidget_C* xinfa;//[Offset: 0x650, Size: 0x8] 0x78c3fb3a00
	PVPSelectSlotWidget_C* SelectItem;//[Offset: 0x658, Size: 0x8] 0x78c3fb3980
	PVPSelectSlotWidget_C* SelectSkill;//[Offset: 0x660, Size: 0x8] 0x78c3fb3900
	void UpdateGameTime(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, WuxiaXGameStateLeitai* K2Node_DynamicCast_AsWuxia_XGame_State_Leitai, bool K2Node_DynamicCast_bSuccess, WuxiaXLeitaiMatchState* CallFunc_GetClientMatchState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsVisible_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_PVP_WuXiaXHud_C* K2Node_DynamicCast_AsBP_PVP_Wu_Xia_XHud, bool K2Node_DynamicCast_bSuccess, WuXiaXLeitaiHUD* K2Node_DynamicCast_AsWu_Xia_XLeitai_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetText_ReturnValue, bool CallFunc_IsVisibleInView_ReturnValue, FText CallFunc_GetText_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsVisibleInView_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, bool CallFunc_IsVisibleInView_ReturnValue, FText CallFunc_GetText_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c42d7e80
	void SetSkillHovered(PVPSelectSlotWidget_C* skill, bool Hovered, PVPSelectSlotWidget_C* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, PVPSelectSlotWidget_C* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c42d7f60
	void SetHovered(PVPSelectSlotWidget_C* SelectSlot, bool Hovered, PVPSelectSlotWidget_C* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, PVPSelectSlotWidget_C* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c42d8040
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c42d8120
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c42d8200
	void SetOpenState(int Type, int index, bool IsOpen, int I, bool Open, bool K2Node_SwitchInteger_CmpSuccess, PVPSelectSlotWidget_C* CallFunc_GetSkillSlot_SkillSlot, PVPSelectSlotWidget_C* CallFunc_GetSkillSlot_SkillSlot, PVPSelectSlotWidget_C* CallFunc_GetSkillSlot_SkillSlot, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c42d82e0
	void OnSkillClick(int Type, int index, out FString[] icons, out FString[] names, out FString[] Descs, out int[] IDs);// 0x8a873f8 0x78c42d83c0
	void OnItemClick(int Type, int index, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c42d84a0
	void OnWeaponClick(int Type, int index, int I, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c42d8580
	void ShowSelectBar(int Type, int index, out FString[] icons, out FString[] names, out FString[] Descs, out int[] IDs);// 0x8a873f8 0x78c42d8660
	void OnSelectClick(int Type, int index, int ID, int SelectID, int SelectIndex, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c42d8740
	void Construct();// 0x8a873f8 0x78c42d8820
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c42d8900
	void InitAllEvents();// 0x8a873f8 0x78c42d89e0
	void SetUIWeapon(int index, int ID, const PaperSprite* icon, out const int[] skillids, out const FString[] skillnames, out const FString[] skilldescs, out const FString[] skillicons);// 0x8a873f8 0x78c42d8ac0
	void SetUIRangeWeapon(int ID, const PaperSprite* icon, const PaperSprite* consumablesicon, int Number);// 0x8a873f8 0x78c42d8ba0
	void SetUIMissile(int ID, const PaperSprite* icon, int Number);// 0x8a873f8 0x78c42d8c80
	void SetUIItem(int index, int ID, const PaperSprite* icon, int Number);// 0x8a873f8 0x78c42d8d60
	void SetUISkill(int Type, int index, int ID);// 0x8a873f8 0x78c42d8e40
	void SetHandSkills(out const int[] skillids, out const FString[] skillnames, out const FString[] skilldescs, out const FString[] icons);// 0x8a873f8 0x78c42d8f20
	void SetSkillHotKey(int index, out const FText hotkeyname);// 0x8a873f8 0x78c42d9000
	void SetItemHotKey(int index, out const FText hotkeyname);// 0x8a873f8 0x78c42d5720
	void BndEvt__Save_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42d5800
	void BndEvt__Cancle_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42d58e0
	void BndEvt__Random_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42d5aa0
	void InitFromConfig(enum NewGameMode);// 0x8a873f8 0x78c42d5c60
	void ExecuteUbergraph_PVPSelectWidget(int EntryPoint, enum K2Node_Event_NewGameMode, int K2Node_Event_id, const PaperSprite* K2Node_Event_icon, const PaperSprite* K2Node_Event_consumablesicon, int K2Node_Event_number, int K2Node_Event_id, const PaperSprite* K2Node_Event_icon, int K2Node_Event_number, int K2Node_Event_Index, int K2Node_Event_id, const PaperSprite* K2Node_Event_icon, int K2Node_Event_number, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_Event_Index, int K2Node_Event_id, const PaperSprite* K2Node_Event_icon, const int[] K2Node_Event_skillids, const FString[] K2Node_Event_skillnames, const FString[] K2Node_Event_skilldescs, const FString[] K2Node_Event_skillicons, bool K2Node_SwitchInteger_CmpSuccess, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int K2Node_Event_Type, int K2Node_Event_Index, int K2Node_Event_id, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const int[] K2Node_Event_skillids, const FString[] K2Node_Event_skillnames, const FString[] K2Node_Event_skilldescs, const FString[] K2Node_Event_icons, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_Event_Index, const FText K2Node_Event_hotkeyname, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_Event_Index, const FText K2Node_Event_hotkeyname, bool K2Node_SwitchInteger_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_WuXiaX_GameInstace_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_Instace, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_GameInstace_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_Instace, bool K2Node_DynamicCast_bSuccess, PaperSprite* CallFunc_GetSprite_ReturnValue, PaperSprite* CallFunc_GetSprite_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, ClientLoginHUD* CallFunc_GetClientLoginHud_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CloseUI_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c42d5d40

--------------------------------
Class: BP_PVP_WuXiaXHud_C.WuXiaXDLDHUD.WuXiaXHUD.WuXiaXHUDBase.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x750, Size: 0x8] 0x78bc688000
	SceneComponent* DefaultSceneRoot;//[Offset: 0x758, Size: 0x8] 0x78bc687f80
	PVPTeamScoreWidget_C* PVPTeamScoreWidget;//[Offset: 0x760, Size: 0x8] 0x78bc687f00
	PVPGameTimeWidget_C* PVPTimeWidget;//[Offset: 0x768, Size: 0x8] 0x78bc687e80
	PVPStatisticsWidget_C* PVPStatisticsWidget;//[Offset: 0x770, Size: 0x8] 0x78bc687e00
	PVPWaitResurrectionWidget_C* PVPWaitResurrectionWidget;//[Offset: 0x778, Size: 0x8] 0x78bc687d80
	PVPKillInfoWidget_C* PVPKillInfo;//[Offset: 0x780, Size: 0x8] 0x78bc687d00
	Widget* curPopup;//[Offset: 0x788, Size: 0x8] 0x78bc687c80
	PVP_MainWidget_C* PVPMainWidget;//[Offset: 0x790, Size: 0x8] 0x78bc687c00
	<int,int> TeamIdMap;//[Offset: 0x798, Size: 0x50] 0x78c3bca540
	<int,FString> PlayerNameMap;//[Offset: 0x7e8, Size: 0x50] 0x78c3bca3c0
	void GetMiniMap(out UI_MiniMap_C* Map, UI_MiniMap_C* K2Node_DynamicCast_AsUI_Mini_Map, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, UI_MapBase_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0x8a873f8 0x78c34e53a0
	void HideCurPopup(bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78cac145a0
	void ShowPopup(FText str, float Time, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, PopupStr_C* CallFunc_Create_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x8a873f8 0x78c34e1ac0
	void getInitShowOpacity(out float Opacity, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, bool CallFunc_IsValid_ReturnValue, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c34e19e0
	void TimerToAddOBEventListeners(bool CallFunc_AddOBEventListeners_added, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x8a873f8 0x78d1d64680
	void AddOBEventListeners(out bool added, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c332eda0
	void OnEvt_OBAllUIShowHide(float tarOpacity, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue);// 0x8a873f8 0x78c78891c0
	void MapCreate(PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78cac13a40
	void ReceiveBeginPlay();// 0x8a873f8 0x78c34eb5a0
	void SetPVPGameTime(float Time);// 0x8a873f8 0x78c34eb4c0
	void ShowWaitResurrection(float Time);// 0x8a873f8 0x78c332ecc0
	void HideWaitResurrection();// 0x8a873f8 0x78c332ebe0
	void AppendContinuousKillInfo(FString PlayerName, int killnumber);// 0x8a873f8 0x78c332eb00
	void AppendShutDown(FString killname, FString DeadName, int kill_num);// 0x8a873f8 0x78cac14760
	void AppendFirstBlood(FString PlayerName, FString DeadName);// 0x8a873f8 0x78c2f768a0
	void SetBuffInfo(out const <int,BuffPointInfo> buff_info);// 0x8a873f8 0x78c2f76de0
	void DLD_PlayerSortInfo(int Rank, int kill, int Reward, int rank_point, int kill_point, int damage_point, int all_team_number);// 0x8a873f8 0x78c2f76ec0
	void SetContinuousKillNumber(int Number);// 0x8a873f8 0x78c2f76a60
	void CreateMainGameUI();// 0x8a873f8 0x78c2f76b40
	void ShowMapWidget();// 0x8a873f8 0x78c2f76c20
	void HideMapWidget();// 0x8a873f8 0x78c2f77080
	void Mobile_Temporary_HaveBook(enum bagtype, int index);// 0x8a873f8 0x78c2f77160
	void Mobile_Temporary_NoBook();// 0x8a873f8 0x78c2f77240
	void Mobile_Temporary_HaveDrug();// 0x8a873f8 0x78c2f77320
	void Mobile_Temporary_NoDrug();// 0x8a873f8 0x78c2f73dc0
	void Mobile_Temporary_HaveTrap(enum bagtype, int index, PaperSprite* icon);// 0x8a873f8 0x78c7883a40
	void Mobile_Temporary_NoTrap();// 0x8a873f8 0x78c2f73b20
	void OnUserSettingChanged(enum Type, int Value);// 0x8a873f8 0x78c2f73c00
	void UpdatePlayerMoveState(enum State, bool Value);// 0x8a873f8 0x78c2f73ce0
	void ResetPlayerMoveState();// 0x8a873f8 0x78c2f73ea0
	void UpdatePlayerMovementMode(byte Mode);// 0x8a873f8 0x78c2f73f80
	void AutoPickUpdate();// 0x8a873f8 0x78c2f7e5c0
	void RemoveAllGameWidgets();// 0x8a873f8 0x78c2f74140
	void UpdateExpProgress(const float NewExpProgress);// 0x8a873f8 0x78c2f743e0
	void UpdateRaffleItemInfoGroup(out const AdvPoolRaffleItemInfoGroup NewRaffleItemInfoGroup);// 0x8a873f8 0x78c8e983c0
	void UpdateTeamScore(int TeamId, int NewTeamScore);// 0x8a873f8 0x78c2f745a0
	void UpdateTeamPointInfo(int red, int blue, int green);// 0x8a873f8 0x78c2f74060
	void UpdateKillNum(int PlayerID, int TeamId, FString PlayerName, int NewKillNum);// 0x8a873f8 0x78d1d637a0
	void UpdateEffectInfo(out const AdvPoolEffectInfo NewEffectInfo);// 0x8a873f8 0x78c2f74220
	void UpdateLevel(const int NewLevel);// 0x8a873f8 0x78c8e943e0
	void OpenSetting();// 0x8a873f8 0x78c42d6ec0
	void SetChangeVisionEnable(bool bIsEnabled);// 0x8a873f8 0x78c42d7080
	void ExecuteUbergraph_BP_PVP_WuXiaXHud(int EntryPoint, float K2Node_Event_time, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_time, bool CallFunc_IsValid_ReturnValue, Margin K2Node_MakeStruct_Margin, FString K2Node_Event_playername, int K2Node_Event_killnumber, bool CallFunc_IsValid_ReturnValue, FString K2Node_Event_killname, FString K2Node_Event_DeadName, int K2Node_Event_kill_num, FString K2Node_Event_playername, FString K2Node_Event_DeadName, bool CallFunc_IsValid_ReturnValue, const <int,BuffPointInfo> K2Node_Event_buff_info, Anchors K2Node_MakeStruct_Anchors, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, WuXiaMiniMapWidget* CallFunc_GetMapWidget_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_rank, int K2Node_Event_kill, int K2Node_Event_reward, int K2Node_Event_rank_point, int K2Node_Event_kill_point, int K2Node_Event_damage_point, int K2Node_Event_all_team_number, int K2Node_Event_number, bool CallFunc_IsValid_ReturnValue, PVPStatisticsWidget_C* K2Node_DynamicCast_AsPVPStatistics_Widget, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AddOBEventListeners_added, TimerHandle CallFunc_K2_SetTimer_ReturnValue, float CallFunc_getInitShowOpacity_opacity, float CallFunc_getInitShowOpacity_opacity, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, bool CallFunc_IsViewingTargetPlayer_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, Margin K2Node_MakeStruct_Margin, UI_MiniMap_C* CallFunc_GetMiniMap_Map, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, UI_MiniMap_C* CallFunc_GetMiniMap_Map, enum K2Node_Event_bagtype, int K2Node_Event_Index, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, enum K2Node_Event_bagtype, int K2Node_Event_Index, PaperSprite* K2Node_Event_icon, Anchors K2Node_MakeStruct_Anchors, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, enum K2Node_Event_Type, int K2Node_Event_value, float CallFunc_Conv_IntToFloat_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_Event_state, bool K2Node_Event_value, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, byte K2Node_Event_mode, PVP_MainWidget_C* CallFunc_Create_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, OBTargetView_C* K2Node_DynamicCast_AsOBTarget_View, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetActiveWidget_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_WuXiaX_Character_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Character, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, class UserWidget CallFunc_Array_Get_Item, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, const float K2Node_Event_NewExpProgress, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, const AdvPoolRaffleItemInfoGroup K2Node_Event_NewRaffleItemInfoGroup, bool CallFunc_IsValid_ReturnValue, PVPWaitResurrectionWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_TeamId, int K2Node_Event_NewTeamScore, int K2Node_Event_red, int K2Node_Event_blue, int K2Node_Event_green, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, UserWidget* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_playerid, int K2Node_Event_TeamId, FString K2Node_Event_playername, int K2Node_Event_NewKillNum, const AdvPoolEffectInfo K2Node_Event_NewEffectInfo, const int K2Node_Event_NewLevel, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PVPGameTimeWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, float CallFunc_getInitShowOpacity_opacity, PVPKillInfoWidget_C* CallFunc_Create_ReturnValue, bool K2Node_Event_bIsEnabled, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c42d7160

--------------------------------
Class: PVPStatisticsWidget_C.StatisticsWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f0, Size: 0x8] 0x78bc8bfc00
	WrapBox* AllPlayerWrapBox;//[Offset: 0x3f8, Size: 0x8] 0x78bc8bfb80
	Button* CloseButton;//[Offset: 0x400, Size: 0x8] 0x78bc8bfb00
	Button* ContinueButton;//[Offset: 0x408, Size: 0x8] 0x78bc8bfa80
	Button* MoreButton;//[Offset: 0x410, Size: 0x8] 0x78bc8bfa00
	TextBlock* MVPDamageText;//[Offset: 0x418, Size: 0x8] 0x78bc8bf980
	TextBlock* MVPGetHurtText;//[Offset: 0x420, Size: 0x8] 0x78bc8bf900
	Image* MVPHeadImage;//[Offset: 0x428, Size: 0x8] 0x78bc8bf880
	TextBlock* MVPKillScoreText;//[Offset: 0x430, Size: 0x8] 0x78bc8bf800
	TextBlock* MVPNameText;//[Offset: 0x438, Size: 0x8] 0x78bcf81080
	WidgetSwitcher* StatisticsSwitcher;//[Offset: 0x440, Size: 0x8] 0x78bcf81000
	WrapBox* TeammateWrapBox;//[Offset: 0x448, Size: 0x8] 0x78bcf80f80
	WidgetSwitcher* WinLoseSwitcher;//[Offset: 0x450, Size: 0x8] 0x78bcf80f00
	PlayerCaptureSettlement_C* SelfPlayerCapture;//[Offset: 0x458, Size: 0x8] 0x78bcf80e80
	PlayerCaptureSettlement_C* MVPPlayerCapture;//[Offset: 0x460, Size: 0x8] 0x78bcf80e00
	GameStatisticInfo StatisticInfo;//[Offset: 0x468, Size: 0x190] 0x78bcf80d80
	bool IsWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1] 0x78bcf80d00
	Transform ModelTransform;//[Offset: 0x600, Size: 0x30] 0x78bcf80c80
	Transform CameraTransform;//[Offset: 0x630, Size: 0x30] 0x78bcf80c00
	void SpawnPlayerCapture(HeroData HeroData, out PlayerCaptureSettlement_C* PlayerCapture, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, <int,int> CallFunc_GetCharacterColorMap_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, int[] CallFunc_FilterSkinIds_OutSkinIds, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PlayerCaptureSettlement_C* CallFunc_FinishSpawningActor_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x8a873f8 0x78c2f74760
	void FilterSkinIds(out int[] SkinIds, out int[] OutSkinIds, int[] TempSkinIds, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, int CallFunc_GetSkinType_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c2f74840
	void OnLoaded_5BFEB1CE498EAFD73AC5669CA16145D4(Object* Loaded);// 0x8a873f8 0x78c2f74920
	void BndEvt__ReturnHall_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c2f74a00
	void BndEvt__ContinueButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c2f74ae0
	void Init(out const GameStatisticInfo StatisticInfo);// 0x8a873f8 0x78c2f74bc0
	void SetAllPlayerData(out const SimplePlayerData[] AllPlayerDataArray);// 0x8a873f8 0x78c2f7d980
	void InitMVPInfo(SimplePlayerData MVPPlayerData);// 0x8a873f8 0x78c2f7b5a0
	void InitTeammateInfo();// 0x8a873f8 0x78c2f7c800
	void Destruct();// 0x8a873f8 0x78d1d62ee0
	void Construct();// 0x8a873f8 0x78c8e98900
	void PlayerCaptuePlayAnim(PlayerCaptureSettlement_C* PlayerCapture);// 0x8a873f8 0x78c2f7b4c0
	void BndEvt__MoreButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470c8e0
	void ExecuteUbergraph_PVPStatisticsWidget(int EntryPoint, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_WuXiaX_GameState_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_State, bool K2Node_DynamicCast_bSuccess, const GameStatisticInfo K2Node_Event_StatisticInfo, const SimplePlayerData[] K2Node_Event_AllPlayerDataArray, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerStatisticsWidget_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerStatisticsWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int Temp_int_Variable, SimplePlayerData K2Node_CustomEvent_MVPPlayerData, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, PlayerCaptureSettlement_C* CallFunc_SpawnPlayerCapture_PlayerCapture, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, SimplePlayerData CallFunc_Array_Get_Item, PlayerCaptureSettlement_C* CallFunc_SpawnPlayerCapture_PlayerCapture, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, SimplePlayerData CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerCaptureSettlement_C* K2Node_CustomEvent_PlayerCapture, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, SceneComponent* CallFunc_GetChildComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, PlayerCaptureABP_C* K2Node_DynamicCast_AsPlayer_Capture_ABP, bool K2Node_DynamicCast_bSuccess, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_GetStaticWinAnimByFaceId_AnimPath, bool CallFunc_GetStaticWinAnimByFaceId_ReturnValue, FString CallFunc_GetStaticIdleAnimByFaceId_AnimPath, bool CallFunc_GetStaticIdleAnimByFaceId_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, AnimSequence* K2Node_DynamicCast_AsAnim_Sequence, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, bool K2Node_Select_Default, FString K2Node_Select_Default, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, int K2Node_Select_Default, Object* CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PVPGameTimeWidget_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, PVPGameTimeWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c4704840

--------------------------------
Class: PlayerCaptureSettlement_C.PlayerCapture_C.PlayerCaptureActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x680, Size: 0x8] 0x78c4ad4a00
	StaticMeshComponent* StaticMesh;//[Offset: 0x688, Size: 0x8] 0x78c4ad4980
	void SetBGTransform(Transform InTransform, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult);// 0x8a873f8 0x78c32b66e0
	void SetCharacterRotation(Rotator Rotation, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x8a873f8 0x78c32b67c0
	void ShowCharacter();// 0x8a873f8 0x78c32b68a0
	void SetBackground(MaterialInstance* Background);// 0x8a873f8 0x78c32b6980
	void ShowBackGround(bool IsVisible);// 0x8a873f8 0x78c32b6a60
	void PlayFadeEffect(Vector CallFunc_K2_GetActorLocation_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAtLocation_ReturnValue);// 0x8a873f8 0x78c32b6b40
	void FadeIn();// 0x8a873f8 0x78c32b6d00
	void ReceiveBeginPlay();// 0x8a873f8 0x78c32b7b00
	void FadeOut();// 0x8a873f8 0x78c32b6ec0
	void ExecuteUbergraph_PlayerCaptureSettlement(int EntryPoint);// 0x8a873f8 0x78c32b6fa0

--------------------------------
Class: PlayerCapture_C.PlayerCaptureActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4a8, Size: 0x8] 0x78c5063a00
	SkeletalMeshComponent* SK_Hat;//[Offset: 0x4b0, Size: 0x8] 0x78c5063980
	PointLightComponent* PointLight1;//[Offset: 0x4b8, Size: 0x8] 0x78c5063900
	BP_GhostTrailComponent_C* BP_GhostTrailComponent;//[Offset: 0x4c0, Size: 0x8] 0x78c5063880
	SpringArmComponent* SpringArm;//[Offset: 0x4c8, Size: 0x8] 0x78c5063800
	SkeletalMeshComponent* Weapon_R;//[Offset: 0x4d0, Size: 0x8] 0x78c5063780
	SkeletalMeshComponent* Weapon_L;//[Offset: 0x4d8, Size: 0x8] 0x78c5063700
	StaticMeshComponent* BattleLeft;//[Offset: 0x4e0, Size: 0x8] 0x78c5063680
	StaticMeshComponent* BattleRight;//[Offset: 0x4e8, Size: 0x8] 0x78c5063600
	StaticMeshComponent* BattleFlag;//[Offset: 0x4f0, Size: 0x8] 0x78c5063580
	SkeletalMeshComponent* SK_Foot;//[Offset: 0x4f8, Size: 0x8] 0x78c5063500
	SkeletalMeshComponent* SK_Leg;//[Offset: 0x500, Size: 0x8] 0x78c5063480
	SkeletalMeshComponent* WeaponMesh12;//[Offset: 0x508, Size: 0x8] 0x78c5063400
	SkeletalMeshComponent* SK_PlayerThing;//[Offset: 0x510, Size: 0x8] 0x78c5063380
	SkeletalMeshComponent* WeaponMesh15;//[Offset: 0x518, Size: 0x8] 0x78c5063300
	SkeletalMeshComponent* WeaponMesh14;//[Offset: 0x520, Size: 0x8] 0x78c5063280
	SkeletalMeshComponent* WeaponMesh13;//[Offset: 0x528, Size: 0x8] 0x78c5063200
	SkeletalMeshComponent* WeaponMesh11;//[Offset: 0x530, Size: 0x8] 0x78c5065280
	SkeletalMeshComponent* WeaponMesh10;//[Offset: 0x538, Size: 0x8] 0x78c5065200
	SkeletalMeshComponent* WeaponMesh9;//[Offset: 0x540, Size: 0x8] 0x78c5065180
	SkeletalMeshComponent* WeaponMesh8;//[Offset: 0x548, Size: 0x8] 0x78c5065100
	SkeletalMeshComponent* WeaponMesh7;//[Offset: 0x550, Size: 0x8] 0x78c5065080
	SkeletalMeshComponent* WeaponMesh6;//[Offset: 0x558, Size: 0x8] 0x78c5065000
	SkeletalMeshComponent* WeaponMesh5;//[Offset: 0x560, Size: 0x8] 0x78c5064f80
	SkeletalMeshComponent* WeaponMesh4;//[Offset: 0x568, Size: 0x8] 0x78c5064f00
	SkeletalMeshComponent* WeaponMesh3;//[Offset: 0x570, Size: 0x8] 0x78c5064e80
	SkeletalMeshComponent* WeaponMesh2;//[Offset: 0x578, Size: 0x8] 0x78c5064e00
	SkeletalMeshComponent* WeaponMesh1;//[Offset: 0x580, Size: 0x8] 0x78c5064d80
	SkeletalMeshComponent* WeaponMesh0;//[Offset: 0x588, Size: 0x8] 0x78c5064d00
	SkeletalMeshComponent* SkeletalMesh4;//[Offset: 0x590, Size: 0x8] 0x78c5064c80
	SkeletalMeshComponent* SkeletalMesh3;//[Offset: 0x598, Size: 0x8] 0x78c5064c00
	SkeletalMeshComponent* SkeletalMesh2;//[Offset: 0x5a0, Size: 0x8] 0x78c5064b80
	SkeletalMeshComponent* SkeletalMesh1;//[Offset: 0x5a8, Size: 0x8] 0x78c5064b00
	SkeletalMeshComponent* SK_Shawl;//[Offset: 0x5b0, Size: 0x8] 0x78c5064a80
	StaticMeshComponent* Bag;//[Offset: 0x5b8, Size: 0x8] 0x78c5064a00
	SkeletalMeshComponent* SK_Veil;//[Offset: 0x5c0, Size: 0x8] 0x78c5064980
	SceneCaptureComponent2D* SceneCaptureComponent2D;//[Offset: 0x5c8, Size: 0x8] 0x78c5064900
	SceneComponent* Scene;//[Offset: 0x5d0, Size: 0x8] 0x78c5064880
	SkeletalMeshComponent* SK_Hair;//[Offset: 0x5d8, Size: 0x8] 0x78c5064800
	SkeletalMeshComponent* SK_Body;//[Offset: 0x5e0, Size: 0x8] 0x78c5064780
	SkeletalMeshComponent* SK_Head;//[Offset: 0x5e8, Size: 0x8] 0x78c5064700
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5f0, Size: 0x8] 0x78c5064680
	float Timeline_0_NewTrack_0_3A00F6AE43BD449B227AFD8BE9C69325;//[Offset: 0x5f8, Size: 0x4] 0x78c5064600
	byte Timeline_0__Direction_3A00F6AE43BD449B227AFD8BE9C69325;//[Offset: 0x5fc, Size: 0x1] 0x78c5064580
	TimelineComponent* Timeline;//[Offset: 0x600, Size: 0x8] 0x78c5064500
	MaterialInstanceDynamic* Material;//[Offset: 0x608, Size: 0x8] 0x78c5064480
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x610, Size: 0x8] 0x78c5064400
	int weapontype;//[Offset: 0x618, Size: 0x4] 0x78c5064380
	bool IsWeaponDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1] 0x78c5064300
	bool IsHoldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1] 0x78c5064280
	bool UpdateEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e, Size: 0x1] 0x78c5066300
	WuXiaXGameInstance* GameInstance;//[Offset: 0x620, Size: 0x8] 0x78c5066280
	int CurrentFaceId;//[Offset: 0x628, Size: 0x4] 0x78c5066200
	int[] EquipMeshIds;//[Offset: 0x630, Size: 0x10] 0x78b9b04480
	int UserId;//[Offset: 0x640, Size: 0x4] 0x78c5066100
	bool Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 0x1] 0x78c5066080
	float DefaultRotationYaw;//[Offset: 0x648, Size: 0x4] 0x78c5066000
	PlayerDetailWidget_C* DetailWidget;//[Offset: 0x650, Size: 0x8] 0x78c5065f80
	bool bEnterPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1] 0x78c5065f00
	ExprerssionWidget_C* ExpressionWidget;//[Offset: 0x660, Size: 0x8] 0x78c5065e80
	TimerHandle PlayerExpressionEvent;//[Offset: 0x668, Size: 0x8] 0x78c5065e00
	float MontageTime;//[Offset: 0x670, Size: 0x4] 0x78c5065d80
	bool bPlayerDetailVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1] 0x78c5065d00
	int CurrChostCount;//[Offset: 0x678, Size: 0x4] 0x78c5065c80
	bool IsGameEyclopedia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1] 0x78c5065c00
	void ClearWeapon(HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x8a873f8 0x78c32ba960
	float GetAnimLeftTime();// 0x8a873f8 0x78c32baa40
	void ChangeHeroNotify(enum HeroType, int SkinId, bool bHaveEntranceAnim, SkeletalMesh* Temp_object_Variable, AnimSequenceBase* CallFunc_LoadEntranceAnim_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimSequenceBase* CallFunc_LoadPerformAnim2_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimSequenceBase* CallFunc_LoadPerformAnim1_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimSequenceBase* CallFunc_LoadIdleAnim_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, enum Temp_byte_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, class Object Temp_class_Variable, bool Temp_bool_Variable, class Object K2Node_Select_Default, SkeletalMesh* Temp_object_Variable, bool CallFunc_SetBpAnim_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SkeletalMesh* Temp_object_Variable, enum Temp_byte_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* K2Node_Select_Default, SkeletalMesh* Temp_object_Variable, bool Temp_bool_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, enum Temp_byte_Variable, SkeletalMesh* CallFunc_GetHeroSkinWeapon_Left, SkeletalMesh* CallFunc_GetHeroSkinWeapon_Right, bool CallFunc_IsValid_ReturnValue, SkeletalMesh* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, SkeletalMesh* K2Node_Select_Default, SkeletalMesh* K2Node_Select_Default, HitResult CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue, HitResult CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimMontage* CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, float CallFunc_GetPlayLength_ReturnValue, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PlayerCaptureABP_C* K2Node_DynamicCast_AsPlayer_Capture_ABP, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x8a873f8 0x78c32bab20
	void GetExpressionWidget(out ExprerssionWidget_C* Output, ExprerssionWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c32bac00
	void GetUserWidget(out PlayerDetailWidget_C* UserWidget, PlayerDetailWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c32bace0
	void HideAllUserHallFlag(bool flag, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c32b5800
	void HideAllBattleReadyFlag(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c32b7400
	void ShowBattleReadyFlag(bool bShow, Vector PosOffset, int FlagIndex, StaticMeshComponent* CurerntFlag);// 0x8a873f8 0x78c32b74e0
	void SetWeaponMesh(SkeletalMeshComponent* PlayerComp, SkeletalMeshComponent* SelfComp, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x8a873f8 0x78c32b75c0
	void ResetMaterials(SkinnedMeshComponent* Mesh, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, SkeletalMaterial CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c32b76a0
	void SetSkeletalMeshById(int ItemId, SkeletalMeshComponent* MeshComp, out bool Result, bool CallFunc_NotEqual_IntInt_ReturnValue, Object* CallFunc_GetItemMeshById_ReturnValue, SkeletalMesh* K2Node_DynamicCast_AsSkeletal_Mesh, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c32b7780
	void SetStaticMeshById(int ItemId, StaticMeshComponent* MeshComp, out bool Result, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, Object* CallFunc_GetItemMeshById_ReturnValue, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue);// 0x8a873f8 0x78c32b7860
	void SetActive(bool Active);// 0x8a873f8 0x78c32b7940
	void Init(TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x8a873f8 0x78c32b7be0
	void UserConstructionScript(bool CallFunc_Not_PreBool_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, SkeletalMeshComponent*[] K2Node_MakeArray_Array);// 0x8a873f8 0x78c32b7cc0
	void Timeline_0__FinishedFunc();// 0x8a873f8 0x78c32b7da0
	void Timeline_0__UpdateFunc();// 0x8a873f8 0x78c32b7e80
	void OnNotifyEnd_A14670D34AE340C5A925849F15A77B8C(FName NotifyName);// 0x8a873f8 0x78c32b7f60
	void OnNotifyBegin_A14670D34AE340C5A925849F15A77B8C(FName NotifyName);// 0x8a873f8 0x78c32b8040
	void OnInterrupted_A14670D34AE340C5A925849F15A77B8C(FName NotifyName);// 0x8a873f8 0x78c32b8120
	void OnBlendOut_A14670D34AE340C5A925849F15A77B8C(FName NotifyName);// 0x8a873f8 0x78c32b8200
	void OnCompleted_A14670D34AE340C5A925849F15A77B8C(FName NotifyName);// 0x8a873f8 0x78c32b82e0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c32b83c0
	void ItemChange(int ID, enum bagtype, int index);// 0x8a873f8 0x78c32b84a0
	void UpdateSex(enum sextype);// 0x8a873f8 0x78c32b8580
	void UpdateHair(int ID);// 0x8a873f8 0x78c32b8660
	void UpdateHead(int ID);// 0x8a873f8 0x78c32b8740
	void UpdateSkinColor(int ID);// 0x8a873f8 0x78c32b8820
	void UpdateHairColor(int ID);// 0x8a873f8 0x78c32b8900
	void SetName(FString Name);// 0x8a873f8 0x78c32b89e0
	void ConfirmMaster(int Master, bool SelfIsMaster);// 0x8a873f8 0x78c32b8ac0
	void SetPlayerOnlineState(int State);// 0x8a873f8 0x78c32b8ba0
	void SetPlayerReadyState(int ReadyState);// 0x8a873f8 0x78c32b8c80
	void DelayShow();// 0x8a873f8 0x78c32b8d60
	void SetRoomState(bool State);// 0x8a873f8 0x78c32b8e40
	void ToggleWidgetSwitcher(int index);// 0x8a873f8 0x78c32b8f20
	void SetLeaveTeamState(bool State);// 0x8a873f8 0x78c32b9000
	void TeamerIsFriend(bool friend);// 0x8a873f8 0x78c32b5720
	void SelfIsMaster(bool Master);// 0x8a873f8 0x78c32b58e0
	void BP_UpdateChatStatus(int PlayerID, bool chatting);// 0x8a873f8 0x78c32b59c0
	void SetUserID(int ID);// 0x8a873f8 0x78c32b5aa0
	void NameHiddenInGame(bool bHide);// 0x8a873f8 0x78c32b5b80
	void SetHeadIcon(PaperSprite* Sprite);// 0x8a873f8 0x78c32b5c60
	void ResetDetailWidgetPosition();// 0x8a873f8 0x78c32b5d40
	void PlayerExpression(int ID, int index);// 0x8a873f8 0x78c32b5e20
	void UpdateShowWeapon(bool bShow);// 0x8a873f8 0x78c32b5f00
	void OnPlayerExpression();// 0x8a873f8 0x78c32b5fe0
	void StopPlayExpression();// 0x8a873f8 0x78c32b60c0
	void OnMontagePlayEnd();// 0x8a873f8 0x78c32b61a0
	void OnAnimOpned();// 0x8a873f8 0x78c32b6280
	void LightMeshColor(Vector Color);// 0x8a873f8 0x78c32b6360
	void PlayNSPo();// 0x8a873f8 0x78c32b7080
	void RefreshWeapon(enum index, int64 weaponid, int NewParam);// 0x8a873f8 0x78c32b7160
	void SetKnockDown(bool Value);// 0x8a873f8 0x78c32b7240
	void MontagePlay(AnimMontage* Montage, float PlayRate, float StartingPostion, FName StartingSection);// 0x8a873f8 0x78c32b7320
	void SetShanbiState(bool Value);// 0x8a873f8 0x78c32b3a40
	void SetHeadBorderIcon(PaperSprite* Sprite);// 0x8a873f8 0x78c32b3b20
	void PlayByAttackEffect();// 0x8a873f8 0x78c32b3c00
	void Show_GhostTrail();// 0x8a873f8 0x78c32b3ce0
	void Show_GhostTrails();// 0x8a873f8 0x78c32b3dc0
	void CE_ShowShanBiEffect();// 0x8a873f8 0x78c32b3ea0
	void KnockDown();// 0x8a873f8 0x78c32b3f80
	void BlockHit();// 0x8a873f8 0x78c32b4060
	void PlayQinggong(bool NewParam);// 0x8a873f8 0x78c32b4220
	void PlayBlock(bool NewParam);// 0x8a873f8 0x78c32b43e0
	void ExecuteUbergraph_PlayerCapture(int EntryPoint, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, enum Temp_byte_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Array_Index_Variable, SkeletalMesh* Temp_object_Variable, int Temp_int_Array_Index_Variable, int K2Node_CustomEvent_id, enum K2Node_CustomEvent_bagtype, int K2Node_CustomEvent_index, GameInstance* CallFunc_GetGameInstance_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_CustomEvent_SexType, int K2Node_CustomEvent_id, int K2Node_CustomEvent_id, int K2Node_CustomEvent_id, int K2Node_CustomEvent_id, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString K2Node_CustomEvent_Name, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_CustomEvent_master, bool K2Node_CustomEvent_SelfIsMaster, int K2Node_CustomEvent_State, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_CustomEvent_ReadyState, int Temp_int_Array_Index_Variable, bool K2Node_CustomEvent_State, SkeletalMesh* Temp_object_Variable, int K2Node_CustomEvent_index, bool K2Node_CustomEvent_State, bool K2Node_CustomEvent_friend, bool K2Node_CustomEvent_master, int K2Node_Event_playerid, bool K2Node_Event_chatting, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_id, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_Event_bHide, PaperSprite* K2Node_CustomEvent_Sprite, bool CallFunc_Not_PreBool_ReturnValue, PlayerDetailWidget_C* CallFunc_GetUserWidget_UserWidget, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, PlayerDetailWidget_C* CallFunc_GetUserWidget_UserWidget, Vector CallFunc_MakeVector_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, int K2Node_Event_id, int K2Node_Event_Index, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, float K2Node_Select_Default, bool K2Node_SwitchInteger_CmpSuccess, float K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, ExprerssionWidget_C* CallFunc_GetExpressionWidget_Output, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool K2Node_Event_bShow, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector2D CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition, bool CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SkeletalMesh* Temp_object_Variable, enum Temp_byte_Variable, ExprerssionWidget_C* CallFunc_GetExpressionWidget_Output, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, Vector K2Node_CustomEvent_Color, bool CallFunc_IsValidExpression_ReturnValue, bool Temp_bool_Variable, SkeletalMeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, enum K2Node_Select_Default, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, int Temp_int_Array_Index_Variable, SkeletalMeshComponent* CallFunc_Array_Get_Item, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, delegate K2Node_CreateDelegate_OutputDelegate, HitResult CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, HitResult CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue, enum K2Node_CustomEvent_index, int64 K2Node_CustomEvent_WeaponId, int K2Node_CustomEvent_NewParam, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchInteger_CmpSuccess, SkeletalMesh* CallFunc_GetSkinTableMesh_Left, SkeletalMesh* CallFunc_GetSkinTableMesh_Right, bool CallFunc_IsValid_ReturnValue, SkeletalMesh* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, SkeletalMesh* K2Node_Select_Default, SkeletalMesh* K2Node_Select_Default, SkeletalMesh* K2Node_Select_Default, bool K2Node_CustomEvent_Value, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimMontage* K2Node_Event_Montage, float K2Node_Event_PlayRate, float K2Node_Event_StartingPostion, FName K2Node_Event_StartingSection, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerCaptureABP_C* K2Node_DynamicCast_AsPlayer_Capture_ABP, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_Value, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerCaptureABP_C* K2Node_DynamicCast_AsPlayer_Capture_ABP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, HitResult CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, Vector2D Temp_struct_Variable, bool CallFunc_K2_AttachToComponent_ReturnValue, PaperSprite* K2Node_CustomEvent_Sprite, Vector2D Temp_struct_Variable, PlayerDetailWidget_C* K2Node_DynamicCast_AsPlayer_Detail_Widget, bool K2Node_DynamicCast_bSuccess, Vector2D Temp_struct_Variable, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, Vector2D K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, bool K2Node_CustomEvent_NewParam, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, PlayerCaptureABP_C* K2Node_DynamicCast_AsPlayer_Capture_ABP, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_NewParam, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, PlayerCaptureABP_C* K2Node_DynamicCast_AsPlayer_Capture_ABP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c32b44c0

--------------------------------
Class: PlayerDetailWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b899cb80
	CanvasPanel* BattleStatePanel;//[Offset: 0x268, Size: 0x8] 0x78b899cb00
	Image* bg;//[Offset: 0x270, Size: 0x8] 0x78b899ca80
	CanvasPanel* CanvasPanel;//[Offset: 0x278, Size: 0x8] 0x78b899ca00
	Image* Cap;//[Offset: 0x280, Size: 0x8] 0x78b899c980
	CombatPlayerRotatorWidget_C* CombatPlayerRotatorWidget;//[Offset: 0x288, Size: 0x8] 0x78b899c900
	Button* expand;//[Offset: 0x290, Size: 0x8] 0x78b899c880
	Image* head;//[Offset: 0x298, Size: 0x8] 0x78b899c800
	Image* HeadBorder;//[Offset: 0x2a0, Size: 0x8] 0x78b899c780
	TextBlock* HeroName;//[Offset: 0x2a8, Size: 0x8] 0x78b899c700
	Button* HeroSelBtn;//[Offset: 0x2b0, Size: 0x8] 0x78b899c680
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78b899e700
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78b899e680
	Image* Image;//[Offset: 0x2c8, Size: 0x8] 0x78b899e600
	Image* Image;//[Offset: 0x2d0, Size: 0x8] 0x78b899e580
	Image* jobImg;//[Offset: 0x2d8, Size: 0x8] 0x78b899e500
	Button* leave;//[Offset: 0x2e0, Size: 0x8] 0x78b899e480
	TextBlock* Name;//[Offset: 0x2e8, Size: 0x8] 0x78b899e400
	PlayerDetailExpand_C* PlayerDetailExpand;//[Offset: 0x2f0, Size: 0x8] 0x78b899e380
	PLayerTalkWidget_C* PLayerTalkWidget;//[Offset: 0x2f8, Size: 0x8] 0x78b899e300
	Image* ready;//[Offset: 0x300, Size: 0x8] 0x78b899e280
	Image* sex;//[Offset: 0x308, Size: 0x8] 0x78b899e200
	WidgetSwitcher* Switcher;//[Offset: 0x310, Size: 0x8] 0x78b899e180
	WidgetSwitcher* teamsw;//[Offset: 0x318, Size: 0x8] 0x78b899e100
	Image* touxiang;//[Offset: 0x320, Size: 0x8] 0x78b899e080
	bool isexpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1] 0x78b899e000
	float ori;//[Offset: 0x32c, Size: 0x4] 0x78b899df80
	void SetTargetPosition(Vector2D Position, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x8a873f8 0x78c37c7f60
	void SetUserHallTeamerBtn(bool NewParam);// 0x8a873f8 0x78c37c8040
	void ShowBattleReady(bool bShow);// 0x8a873f8 0x78c37c8120
	void ChangeBattleReadyState(bool IsChoosing, FString HeroName, FString UserName, int64 HeroId, PaperSprite* userIcon, PaperSprite* userIconBox, enum userSex, enum Temp_byte_Variable, bool CallFunc_IsEmpty_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, enum CallFunc_GetTacticsByHeroId_ReturnValue, PaperSprite* K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x8a873f8 0x78c37c8200
	void Set Sel Btn Touchabled(bool isMySelf);// 0x8a873f8 0x78c37c82e0
	void SetReadyState(int State);// 0x8a873f8 0x78c37c83c0
	void BndEvt__leave_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c37c84a0
	void SetLeaveTeamState(bool State);// 0x8a873f8 0x78c37c8580
	void SetOtherMaster(bool Master, bool SelfIsMaster);// 0x8a873f8 0x78c37c8660
	void SetIsFriend(bool friend);// 0x8a873f8 0x78c37c8740
	void SetName(FString Name);// 0x8a873f8 0x78c37c8820
	void SetUserID(int UserId);// 0x8a873f8 0x78c37c8900
	void SetTalkState(bool State);// 0x8a873f8 0x78c37c89e0
	void SetSelfMaster(bool Master);// 0x8a873f8 0x78c37c8ac0
	void BndEvt__Button_95_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x8a873f8 0x78c37c8ba0
	void SetSex(enum sex);// 0x8a873f8 0x78c37c8c80
	void Construct();// 0x8a873f8 0x78c37c8d60
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c37c8e40
	void SetHeadIcon(PaperSprite* Sprite);// 0x8a873f8 0x78c37c8f20
	void SetHeadBorderIcon(PaperSprite* Sprite);// 0x8a873f8 0x78c37c5720
	void ExecuteUbergraph_PlayerDetailWidget(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int K2Node_CustomEvent_State, bool K2Node_SwitchInteger_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_CustomEvent_State, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, BaseNetHandle* CallFunc_GetNetActor_ReturnValue, ClientNetMessageHandle* K2Node_DynamicCast_AsClient_Net_Message_Handle, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_master, bool K2Node_CustomEvent_SelfIsMaster, bool K2Node_CustomEvent_friend, FString K2Node_CustomEvent_Name, FText CallFunc_Conv_StringToText_ReturnValue, int K2Node_CustomEvent_UserID, bool K2Node_CustomEvent_State, bool K2Node_CustomEvent_master, enum K2Node_CustomEvent_sex, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, enum K2Node_Select_Default, PaperSprite* K2Node_CustomEvent_Sprite, PaperSprite* K2Node_CustomEvent_Sprite, bool CallFunc_NotEqual_ObjectObject_ReturnValue, enum K2Node_Select_Default);// 0x8a873f8 0x78c37c58e0

--------------------------------
Class: CombatPlayerRotatorWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8999b00
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78b8999a80
	<int,Vector2D> PointMap;//[Offset: 0x270, Size: 0x50] 0x78d9cb8b00
	int CharacterIndex;//[Offset: 0x2c0, Size: 0x4] 0x78b8999900
	FString CharacterShowType;//[Offset: 0x2c8, Size: 0x10] 0x78b8999880
	delegate OnRotateBegin;//[Offset: 0x2d8, Size: 0x10] 0x78b8999800
	delegate OnRotateEnd;//[Offset: 0x2e8, Size: 0x10] 0x78b8999780
	bool IsStartTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x78b8999700
	bool IsSequenceCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1] 0x78b8999680
	void SetPlayerRotateInfo(FString ShowType, bool bIsSequenceCharacter);// 0x8a873f8 0x78c37c5aa0
	void CheckClickActor(const Actor*[] Temp_object_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetInputTouchState_LocationX, float CallFunc_GetInputTouchState_LocationY, bool CallFunc_GetInputTouchState_bIsCurrentlyPressed, Vector CallFunc_DeprojectScreenPositionToWorld_WorldLocation, Vector CallFunc_DeprojectScreenPositionToWorld_WorldDirection, bool CallFunc_DeprojectScreenPositionToWorld_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, interface classNone K2Node_DynamicCast_AsActor_Click_Interface, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c37c5b80
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, Object* NewLocalVar, EventReply CallFunc_Unhandled_ReturnValue);// 0x8a873f8 0x78c37c5c60
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, int CallFunc_PointerEvent_GetTouchpadIndex_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CharacterShowManager* CallFunc_GetCharacterShowDirector_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, EventReply CallFunc_Unhandled_ReturnValue);// 0x8a873f8 0x78c37c5d40
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, int CallFunc_PointerEvent_GetTouchpadIndex_ReturnValue, UserWidgetBase* CallFunc_GetUI_ReturnValue, UserHallUI* K2Node_DynamicCast_AsUser_Hall_UI, bool K2Node_DynamicCast_bSuccess, EventReply CallFunc_Handled_ReturnValue);// 0x8a873f8 0x78c37c5e20
	void Construct();// 0x8a873f8 0x78c37c5f00
	void ExecuteUbergraph_CombatPlayerRotatorWidget(int EntryPoint, CharacterShowManager* CallFunc_GetCharacterShowDirector_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c37c5fe0
	void OnRotateEnd__DelegateSignature();// 0x8a873f8 0x78c37c61a0
	void OnRotateBegin__DelegateSignature();// 0x8a873f8 0x78ca5ebd80

--------------------------------
Class: PlayerDetailExpand_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8999580
	Button* addfriend;//[Offset: 0x268, Size: 0x8] 0x78b8999500
	Image* bg;//[Offset: 0x270, Size: 0x8] 0x78b899b580
	SizeBox* fbox;//[Offset: 0x278, Size: 0x8] 0x78b899b500
	SizeBox* gbox;//[Offset: 0x280, Size: 0x8] 0x78b899b480
	Button* givecap;//[Offset: 0x288, Size: 0x8] 0x78b899b400
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x78b899b380
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x78b899b300
	Image* Image;//[Offset: 0x2a0, Size: 0x8] 0x78b899b280
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x78b899b200
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78b899b180
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78b899b100
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78b899b080
	Button* Info;//[Offset: 0x2c8, Size: 0x8] 0x78b899b000
	SizeBox* kbox;//[Offset: 0x2d0, Size: 0x8] 0x78b899af80
	Button* kick;//[Offset: 0x2d8, Size: 0x8] 0x78b899af00
	FString Name;//[Offset: 0x2e0, Size: 0x10] 0x78b899ae80
	int UserId;//[Offset: 0x2f0, Size: 0x4] 0x78b899ae00
	void GetMsgHandle(out ClientNetMessageHandle* Handle, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, BaseNetHandle* CallFunc_GetNetActor_ReturnValue, ClientNetMessageHandle* K2Node_DynamicCast_AsClient_Net_Message_Handle, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c37c66e0
	void SetName(FString Name);// 0x8a873f8 0x78c37c67c0
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c37c68a0
	void ShowAddFirend(bool friend);// 0x8a873f8 0x78c37c6980
	void ShowMaster(bool selfmaster);// 0x8a873f8 0x78c37c6a60
	void BndEvt__kick_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c37c6b40
	void SetID(int UserId);// 0x8a873f8 0x78c37c6c20
	void BndEvt__givecap_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c37c6d00
	void BndEvt__info_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c37c6ec0
	void ExecuteUbergraph_PlayerDetailExpand(int EntryPoint, FString K2Node_CustomEvent_Name, ClientNetMessageHandle* CallFunc_GetMsgHandle_handle, bool K2Node_CustomEvent_friend, bool K2Node_CustomEvent_selfmaster, int K2Node_CustomEvent_UserID, ClientNetMessageHandle* CallFunc_GetMsgHandle_handle);// 0x8a873f8 0x78c37c7080

--------------------------------
Class: PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x430, Size: 0x8] 0x78bc6a6500
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x438, Size: 0x30] 0x78bc6a6480
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x468, Size: 0x28] 0x78bc6a6400
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x490, Size: 0x28] 0x78bc6a6380
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4b8, Size: 0x28] 0x78bc6a8400
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4e0, Size: 0x28] 0x78bc6a8380
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x508, Size: 0x28] 0x78bc6a8300
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x530, Size: 0x28] 0x78bc6a8280
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x558, Size: 0x28] 0x78bc6a8200
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x580, Size: 0x28] 0x78bc6a8180
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x5a8, Size: 0x28] 0x78bc6a8100
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x5d0, Size: 0x28] 0x78bc6a8080
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x5f8, Size: 0x28] 0x78bc6a8000
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x620, Size: 0x80] 0x78bc6a7f80
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x6a0, Size: 0xa0] 0x78bc6a7f00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x740, Size: 0x80] 0x78bc6a7e80
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x7c0, Size: 0xa0] 0x78bc6a7e00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x860, Size: 0x80] 0x78bc6a7d80
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x8e0, Size: 0xa0] 0x78bc6a7d00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x980, Size: 0x80] 0x78bc6a7c80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa00, Size: 0x80] 0x78bc6a7c00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa80, Size: 0x80] 0x78bc6a7b80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xb00, Size: 0x80] 0x78bc6a7b00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xb80, Size: 0x80] 0x78bc6a7a80
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xc00, Size: 0x80] 0x78bc6a7a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xc80, Size: 0x80] 0x78bc6a7980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd00, Size: 0x80] 0x78bc6a7900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xd80, Size: 0x80] 0x78bc6a7880
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0xe00, Size: 0xa0] 0x78bc6a7800
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xea0, Size: 0x30] 0x78bc6a7780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xed0, Size: 0x80] 0x78bc6a7700
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xf50, Size: 0x30] 0x78bc6a7680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xf80, Size: 0x80] 0x78bc6a7600
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1000, Size: 0x30] 0x78bc6a7580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1030, Size: 0x30] 0x78bc6a7500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1060, Size: 0x80] 0x78bc6a7480
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x10e0, Size: 0x30] 0x78bc6a7400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1110, Size: 0x80] 0x78bc6a9480
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt;//[Offset: 0x1190, Size: 0xa0] 0x78bc6a9400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x1230, Size: 0x80] 0x78bc6a9380
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x12b0, Size: 0x30] 0x78bc6a9300
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x12e0, Size: 0x80] 0x78bc6a9280
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1360, Size: 0x30] 0x78bc6a9200
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x1390, Size: 0xb0] 0x78bc6a9180
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x1440, Size: 0x158] 0x78bc6a9100
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x1598, Size: 0xc0] 0x78bc6a9080
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1658, Size: 0x28] 0x78bc6a9000
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1680, Size: 0x28] 0x78bc6a8f80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x16a8, Size: 0x48] 0x78bc6a8f00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x16f0, Size: 0x48] 0x78bc6a8e80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x1738, Size: 0x48] 0x78bc6a8e00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x1780, Size: 0x48] 0x78bc6a8d80
	int weapon_anim_type;//[Offset: 0x17c8, Size: 0x4] 0x78bc6a8d00
	bool weapon_show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17cc, Size: 0x1] 0x78bc6a8c80
	int RandomXiuXianID_Femal;//[Offset: 0x17d0, Size: 0x4] 0x78bc6a8c00
	int RandomXiuXianID_Man;//[Offset: 0x17d4, Size: 0x4] 0x78bc6a8b80
	SkeletalMeshComponent* CharacterMesh;//[Offset: 0x17d8, Size: 0x8] 0x78bc6a8b00
	bool CanEnterEntrance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e0, Size: 0x1] 0x78bc6a8a80
	PlayerCaptureActor* PlayerCaptureActor;//[Offset: 0x17e8, Size: 0x8] 0x78bc6a8a00
	AnimSequenceBase* EntranceAnimation;//[Offset: 0x17f0, Size: 0x8] 0x78bc6a8980
	bool HasEntranceAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f8, Size: 0x1] 0x78bc6a8900
	AnimSequenceBase* IdleAnimation;//[Offset: 0x1800, Size: 0x8] 0x78bc6a8880
	AnimSequenceBase* PerformAnimation1;//[Offset: 0x1808, Size: 0x8] 0x78bc6a8800
	AnimSequenceBase* PerformAnimation2;//[Offset: 0x1810, Size: 0x8] 0x78bc6a8780
	bool ShanBiFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1818, Size: 0x1] 0x78bc6a8700
	bool IsGameEncyldic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1819, Size: 0x1] 0x78bc6a8680
	bool IsQianggong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181a, Size: 0x1] 0x78bc6a8600
	bool IsBeBlockAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181b, Size: 0x1] 0x78bc6a8580
	int SexId;//[Offset: 0x181c, Size: 0x4] 0x78bc6a8500
	int weapontype;//[Offset: 0x1820, Size: 0x4] 0x78bc6a8480
	void AnimGraph(out PoseLink AnimGraph);// 0x8a873f8 0x78c2fd7a20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_PlayerCaptureABP_AnimGraphNode_TransitionResult_DA1EF4C144C16E125C91AFBA3D2C23BF();// 0x8a873f8 0x78c2fd7b00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_PlayerCaptureABP_AnimGraphNode_TransitionResult_6CEC267E46F8D75D2108098FCA7352B1();// 0x8a873f8 0x78c2fd7be0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_PlayerCaptureABP_AnimGraphNode_TransitionResult_7D9E953A4942AB814B43DCAE9070ABDC();// 0x8a873f8 0x78c2fd7cc0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x8a873f8 0x78c2fd7da0
	void AnimNotify_Enter_XiuXianState();// 0x8a873f8 0x78c2fd7e80
	void BlueprintBeginPlay();// 0x8a873f8 0x78c2fd7f60
	void AnimNotify_EntranceEnd();// 0x8a873f8 0x78c2fd8120
	void ExecuteUbergraph_PlayerCaptureABP(int EntryPoint, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float K2Node_Event_DeltaTimeX, int CallFunc_RandomIntegerInRange_ReturnValue, Actor* CallFunc_GetOwningActor_ReturnValue, PlayerCaptureActor* K2Node_DynamicCast_AsPlayer_Capture_Actor, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c2fd82e0

--------------------------------
Class: PlayerStatisticsWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bdbd2900
	TextBlock* DamageText;//[Offset: 0x268, Size: 0x8] 0x78bdbd2880
	TextBlock* GetHurtText;//[Offset: 0x270, Size: 0x8] 0x78bdbd2800
	Image* HeadImage;//[Offset: 0x278, Size: 0x8] 0x78bdbd2780
	TextBlock* KillScoreText;//[Offset: 0x280, Size: 0x8] 0x78bdbd2700
	TextBlock* NameText;//[Offset: 0x288, Size: 0x8] 0x78bdbd2680
	SizeBox* RankSizeBox;//[Offset: 0x290, Size: 0x8] 0x78bdbd2600
	TextBlock* RankText;//[Offset: 0x298, Size: 0x8] 0x78bdbd2580
	Image* SelfImage;//[Offset: 0x2a0, Size: 0x8] 0x78bdbd2500
	SimplePlayerData PlayerData;//[Offset: 0x2a8, Size: 0x128] 0x78bdbd2480
	int Rank;//[Offset: 0x3d0, Size: 0x4] 0x78bdbd2400
	int MaxShowRank;//[Offset: 0x3d4, Size: 0x4] 0x78bdbd2380
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x78bdbd2300
	void Construct();// 0x8a873f8 0x78c4707320
	void ExecuteUbergraph_PlayerStatisticsWidget(int EntryPoint, bool Temp_bool_Variable, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_SetImageTexture_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c4703b20

--------------------------------
Class: PVPGameTimeWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bdbd3f00
	TextBlock* TimeText;//[Offset: 0x268, Size: 0x8] 0x78bdbd3e80
	int GameTime;//[Offset: 0x270, Size: 0x4] 0x78bdbd3e00
	void SetTimeToText(float Time, FString NewLocalVar, int S, int M, bool Temp_bool_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Percent_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c470c1e0
	void SetGameTime(float Time);// 0x8a873f8 0x78c470c2c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c470c480
	void ExecuteUbergraph_PVPGameTimeWidget(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x8a873f8 0x78c470c640

--------------------------------
Class: PVPTeamScoreWidget_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* AnimResource;//[Offset: 0x260, Size: 0x8] 0x78bc8bc280
	WidgetAnimation* AnimResource;//[Offset: 0x268, Size: 0x8] 0x78bc8bc200
	WidgetAnimation* AnimResource;//[Offset: 0x270, Size: 0x8] 0x78bc8bc180
	WidgetAnimation* AnimResource;//[Offset: 0x278, Size: 0x8] 0x78bc8bc100
	TextBlock* BlueTeamScoreText;//[Offset: 0x280, Size: 0x8] 0x78bc8bc080
	TextBlock* GreenTeamScoreText;//[Offset: 0x288, Size: 0x8] 0x78bc8bc000
	TextBlock* RedTeamScoreText;//[Offset: 0x290, Size: 0x8] 0x78bc8bbf80
	void UpdateTeamScore(int TeamId, int TeamScore, TextBlock* Temp_object_Variable, FText CallFunc_Conv_IntToText_ReturnValue, int Temp_int_Variable, TextBlock* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c47090e0

--------------------------------
Class: PVP_MainWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bdbd3d00
	AdvPoolWidget_C* AdvPoolWidget;//[Offset: 0x268, Size: 0x8] 0x78bdbd3c80
	PVPKillNumRankWidget_C* PVPKillNumRankWidget;//[Offset: 0x270, Size: 0x8] 0x78bdbd3c00
	PVPTeamScoreWidget_C* TeamScoreWidget;//[Offset: 0x278, Size: 0x8] 0x78bdbd3b80
	Button* WuXue;//[Offset: 0x280, Size: 0x8] 0x78bdbd3b00
	void UpdateEffectInfo(AdvPoolEffectInfo NewEffectInfo);// 0x8a873f8 0x78c470b840
	void UpdateKillNum(int PlayerID, int TeamId, FString PlayerName, int NewKillNum);// 0x8a873f8 0x78c470b920
	void UpdateRaffleItemInfoGroup(AdvPoolRaffleItemInfoGroup NewRaffleItemInfoGroup);// 0x8a873f8 0x78c470ba00
	void UpdateLevel(int NewLevel);// 0x8a873f8 0x78c470bae0
	void UpdateExpProgress(float NewExpProgress);// 0x8a873f8 0x78c470bbc0
	void BndEvt__WuXue_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470bd80
	void ExecuteUbergraph_PVP_MainWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c470bf40

--------------------------------
Class: OBTargetView_C.OBTargetViewUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bdbd7000
	TextBlock* aliveTeamNum;//[Offset: 0x268, Size: 0x8] 0x78bdbd6f80
	obItemIcon_C* armorItem;//[Offset: 0x270, Size: 0x8] 0x78bdbd6f00
	Image* bgSkillInfo;//[Offset: 0x278, Size: 0x8] 0x78bdbd6e80
	Button* btn_setting;//[Offset: 0x280, Size: 0x8] 0x78bdbd6e00
	Button* Button;//[Offset: 0x288, Size: 0x8] 0x78bdbd6d80
	CircleSliderWidget_C* CircleSliderWidget;//[Offset: 0x290, Size: 0x8] 0x78bdbd6d00
	CanvasPanel* CompassPanel;//[Offset: 0x298, Size: 0x8] 0x78bdbd6c80
	BuffBarWidget_C* curBuffs;//[Offset: 0x2a0, Size: 0x8] 0x78bdbd6c00
	CanvasPanel* DCAllInfo;//[Offset: 0x2a8, Size: 0x8] 0x78bdbd6b80
	CanvasPanel* DCTimerInfo;//[Offset: 0x2b0, Size: 0x8] 0x78bdbd6b00
	Button* DetailButton;//[Offset: 0x2b8, Size: 0x8] 0x78bdbd6a80
	Button* DrugButton;//[Offset: 0x2c0, Size: 0x8] 0x78bdbd6a00
	TextBlock* GameStartTimeCounter;//[Offset: 0x2c8, Size: 0x8] 0x78bdbd6980
	obItemIcon_C* HeadItem;//[Offset: 0x2d0, Size: 0x8] 0x78bdbd6900
	Button* HideUIButton;//[Offset: 0x2d8, Size: 0x8] 0x78bdbd6880
	TextBlock* HideUIStateText;//[Offset: 0x2e0, Size: 0x8] 0x78bdbd6800
	HorseWidget_C* HorseInfo;//[Offset: 0x2e8, Size: 0x8] 0x78bdbd6780
	ProgressBar* HPBar;//[Offset: 0x2f0, Size: 0x8] 0x78bdbd6700
	Image* Image;//[Offset: 0x2f8, Size: 0x8] 0x78bdbd6680
	Image* imgeBG;//[Offset: 0x300, Size: 0x8] 0x78bdbd6600
	ProgressBar* InjuryBar;//[Offset: 0x308, Size: 0x8] 0x78bdbd6580
	obItemIcon_C* itemIcon1;//[Offset: 0x310, Size: 0x8] 0x78bdbd6500
	obItemIcon_C* itemIcon2;//[Offset: 0x318, Size: 0x8] 0x78bdbd6480
	obItemIcon_C* itemIcon3;//[Offset: 0x320, Size: 0x8] 0x78bdbd6400
	obItemIcon_C* itemThrow;//[Offset: 0x328, Size: 0x8] 0x78bdbd8480
	HorizontalBox* killNoticePanel;//[Offset: 0x330, Size: 0x8] 0x78bdbd8400
	TextBlock* livenum_text;//[Offset: 0x338, Size: 0x8] 0x78bdbd8380
	CanvasPanel* LivePanel;//[Offset: 0x340, Size: 0x8] 0x78bdbd8300
	Button* LookAroundButton;//[Offset: 0x348, Size: 0x8] 0x78bdbd8280
	Image* MapBorder;//[Offset: 0x350, Size: 0x8] 0x78bdbd8200
	CanvasPanel* MiChuanPanel;//[Offset: 0x358, Size: 0x8] 0x78bdbd8180
	TextBlock* miChuanskillName;//[Offset: 0x360, Size: 0x8] 0x78bdbd8100
	progressBar_C* MPBar;//[Offset: 0x368, Size: 0x8] 0x78bdbd8080
	obDrugsPanel_C* obDrugsPanel;//[Offset: 0x370, Size: 0x8] 0x78bdbd8000
	obInfoList_C* obInfoList;//[Offset: 0x378, Size: 0x8] 0x78bdbd7f80
	obMapRightPanel_C* obMapRightPanel;//[Offset: 0x380, Size: 0x8] 0x78bdbd7f00
	CanvasPanel* OBOtherSetting;//[Offset: 0x388, Size: 0x8] 0x78bdbd7e80
	Button* OBSetting;//[Offset: 0x390, Size: 0x8] 0x78bdbd7e00
	CanvasPanel* OperationPanel;//[Offset: 0x398, Size: 0x8] 0x78bdbd7d80
	CanvasPanel* PlayerDetail;//[Offset: 0x3a0, Size: 0x8] 0x78bdbd7d00
	Image* playerImageBG;//[Offset: 0x3a8, Size: 0x8] 0x78bdbd7c80
	Image* playerImageBGName;//[Offset: 0x3b0, Size: 0x8] 0x78bdbd7c00
	TextBlock* playerNameTxt;//[Offset: 0x3b8, Size: 0x8] 0x78bdbd7b80
	TextBlock* playerTeamTxt;//[Offset: 0x3c0, Size: 0x8] 0x78bdbd7b00
	CanvasPanel* PlayerWeaponPanel;//[Offset: 0x3c8, Size: 0x8] 0x78bdbd7a80
	CanvasPanel* playInfoMinimap;//[Offset: 0x3d0, Size: 0x8] 0x78bdbd7a00
	obItemIcon_C* rangeIcon;//[Offset: 0x3d8, Size: 0x8] 0x78bdbd7980
	CanvasPanel* rightPanel;//[Offset: 0x3e0, Size: 0x8] 0x78bdbd7900
	obWeaponSkillIcon_C* Skill1;//[Offset: 0x3e8, Size: 0x8] 0x78bdbd7880
	obWeaponSkillIcon_C* Skill2;//[Offset: 0x3f0, Size: 0x8] 0x78bdbd7800
	obWeaponSkillIcon_C* skill3;//[Offset: 0x3f8, Size: 0x8] 0x78bdbd7780
	Image* skillBG;//[Offset: 0x400, Size: 0x8] 0x78bdbd7700
	obSkillIcon_C* skillMichuan;//[Offset: 0x408, Size: 0x8] 0x78bdbd7680
	TextBlock* stageText;//[Offset: 0x410, Size: 0x8] 0x78bdbd7600
	HorizontalBox* StartTimeCounter;//[Offset: 0x418, Size: 0x8] 0x78bdbd7580
	Overlay* StartTimeCounterPanel;//[Offset: 0x420, Size: 0x8] 0x78bdbd7500
	Button* SwitchKillerButton;//[Offset: 0x428, Size: 0x8] 0x78bdbd7480
	CanvasPanel* TargetUIAll;//[Offset: 0x430, Size: 0x8] 0x78bdbd9500
	Image* teamBg;//[Offset: 0x438, Size: 0x8] 0x78bdbd9480
	CanvasPanel* TeamInfo;//[Offset: 0x440, Size: 0x8] 0x78bdbd9400
	VerticalBox* teamMems;//[Offset: 0x448, Size: 0x8] 0x78bdbd9380
	TextBlock* teamTxt;//[Offset: 0x450, Size: 0x8] 0x78bdbd9300
	TextBlock* TextBlock;//[Offset: 0x458, Size: 0x8] 0x78bdbd9280
	TextBlock* TextBlock;//[Offset: 0x460, Size: 0x8] 0x78bdbd9200
	TextBlock* TimeText;//[Offset: 0x468, Size: 0x8] 0x78bdbd9180
	Button* TouShiButton;//[Offset: 0x470, Size: 0x8] 0x78bdbd9100
	TextBlock* TouShiStateText;//[Offset: 0x478, Size: 0x8] 0x78bdbd9080
	OBMapBase_C* UIMiniMap;//[Offset: 0x480, Size: 0x8] 0x78bdbd9000
	VirtualJoystick* WalkJoystick;//[Offset: 0x488, Size: 0x8] 0x78bdbd8f80
	Image* Weapon;//[Offset: 0x490, Size: 0x8] 0x78bdbd8f00
	Button* Weapon1Button;//[Offset: 0x498, Size: 0x8] 0x78bdbd8e80
	Button* Weapon2Button;//[Offset: 0x4a0, Size: 0x8] 0x78bdbd8e00
	Button* Weapon3Button;//[Offset: 0x4a8, Size: 0x8] 0x78bdbd8d80
	Button* weaponChange;//[Offset: 0x4b0, Size: 0x8] 0x78bdbd8d00
	obWeaponIndex_C* weaponIndex1;//[Offset: 0x4b8, Size: 0x8] 0x78bdbd8c80
	obWeaponIndex_C* weaponIndex2;//[Offset: 0x4c0, Size: 0x8] 0x78bdbd8c00
	obWeaponIndex_C* weaponIndex3;//[Offset: 0x4c8, Size: 0x8] 0x78bdbd8b80
	HorizontalBox* weaponIndices;//[Offset: 0x4d0, Size: 0x8] 0x78bdbd8b00
	CanvasPanel* weaponSharp;//[Offset: 0x4d8, Size: 0x8] 0x78bdbd8a80
	TextBlock* weaponSharpLevel;//[Offset: 0x4e0, Size: 0x8] 0x78bdbd8a00
	obSkillIconWithName_C* xinfaIcon;//[Offset: 0x4e8, Size: 0x8] 0x78bdbd8980
	<int,obTeamPlayerMemInfo_C*> teamMatesInfo;//[Offset: 0x4f0, Size: 0x50] 0x78c338cc40
	int[] curAddedBuffs;//[Offset: 0x540, Size: 0x10] 0x78bd424700
	bool viewTargetInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1] 0x78bdbd8780
	Texture2D* bloodRedTex;//[Offset: 0x558, Size: 0x8] 0x78bdbd8700
	Texture2D* bloodNormalTex;//[Offset: 0x560, Size: 0x8] 0x78bdbd8680
	int LastUsedWeaponIndex;//[Offset: 0x568, Size: 0x4] 0x78bdbd8600
	int CurViewedWeaponIndex;//[Offset: 0x56c, Size: 0x4] 0x78bdbd8580
	int DesiredViewWeaponIndex;//[Offset: 0x570, Size: 0x4] 0x78bdbd8500
	TimerHandle switchWeaponTimerHandle;//[Offset: 0x578, Size: 0x8] 0x78bdbda580
	bool InDesiredWeaponTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1] 0x78bdbda500
	bool SomeThingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1] 0x78bdbda480
	UI_MobileSetting* MobileSettingUI;//[Offset: 0x588, Size: 0x8] 0x78bdbda400
	bool TouShiFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1] 0x78bdbda380
	TouchEvent TouchEvent;//[Offset: 0x598, Size: 0xa8] 0x78bdbda300
	void SetGameLeftStateAndTime(FString State, float Time);// 0x8a873f8 0x78c470eda0
	void OnTouchReleased(PointerEvent InTouchEvent, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_TouchEnded_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c470ee80
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_TouchEnded_ReturnValue);// 0x8a873f8 0x78c470ef60
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, EventReply CallFunc_Handled_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c470d600
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_OnTouchStarted_Handled, EventReply CallFunc_OnTouchStarted_ReturnValue);// 0x8a873f8 0x78c470f040
	void OnJoystickReleased(Geometry MyGeomery, PointerEvent Event);// 0x8a873f8 0x78c470f120
	void OnJoystickEnded(Geometry MyGeomery, PointerEvent Event);// 0x8a873f8 0x78c470f200
	void OnJoystickMoved(Geometry MyGeomery, PointerEvent Event);// 0x8a873f8 0x78c470f2e0
	void OnJoystickStarted(Geometry MyGeomery, PointerEvent Event);// 0x8a873f8 0x78c470f3c0
	void CreateSettingUI(Margin K2Node_MakeStruct_Margin, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Anchors K2Node_MakeStruct_Anchors, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUDBase* K2Node_DynamicCast_AsWu_Xia_XHUDBase, bool K2Node_DynamicCast_bSuccess, UserWidget* CallFunc_CreatePanel_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, UI_MobileSetting* K2Node_DynamicCast_AsUI_Mobile_Setting, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c470f4a0
	void OnTimer_ViewWeaponExpired(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue);// 0x8a873f8 0x78c470f580
	void OnEvt_ViewWeaponIndex(int index, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c470f660
	void OnEvt_ParadropOverlapEnd(WuXiaParadrop* paradrop);// 0x8a873f8 0x78c470f740
	void OnEvt_ParadropOverlapBeg(WuXiaParadrop* paradrop);// 0x8a873f8 0x78c470f820
	void OnEvt_CharRespawned(int PlayerID, Vector pos);// 0x8a873f8 0x78c470f900
	void RefreshDeadNotice(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, bool CallFunc_IsViewingTargetPlayer_ReturnValue, int CallFunc_GetLatestKiller_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c470f9e0
	void RefreshVisible(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXDLDHUD* K2Node_DynamicCast_AsWu_Xia_XDLDHUD, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue);// 0x8a873f8 0x78c470fac0
	void OnEvt_TargetUIPartShowChange(enum NewParam);// 0x8a873f8 0x78c470fba0
	void OnEvt_TargetUIShowChange();// 0x8a873f8 0x78c470fc80
	void OnEvt_CharDetailInfoUpdated();// 0x8a873f8 0x78c470fd60
	void OnEvt_CharDied(int NewParam, Vector NewParam1);// 0x8a873f8 0x78c470fe40
	void OnEvt_TreasureViewChange();// 0x8a873f8 0x78c470ff20
	void RefreshParadropInfo();// 0x8a873f8 0x78c470c9c0
	void refreshPlayerName(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c470caa0
	void RefreshAliveInfo(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, int CallFunc_GetAlivePlayerNum_ReturnValue, int CallFunc_GetAliveTeamNum_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78c470cb80
	void RefreshStartTime(GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, float CallFunc_GetStartTime_timeInMS, bool CallFunc_GetStartTime_ReturnValue, float CallFunc_GetTimeToGameStart_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c470cc60
	void OnEvt_AlivePlayerNum(int NewParam);// 0x8a873f8 0x78c470cd40
	void OnEvt_StartTimeInit();// 0x8a873f8 0x78c470ce20
	void OnEvt_Gonggao(enum NewParam, FText gonggaoInfo);// 0x8a873f8 0x78c470cf00
	void OnEvt_KillInfo(FString Attack, FString Dead, int causeID, enum reason, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c470cfe0
	void OnEvt_CharKillRefreshed();// 0x8a873f8 0x78c470d0c0
	void RefreshAll();// 0x8a873f8 0x78c470d1a0
	void OnEvt_ObserveTypeChange(enum newType, enum oldType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c470d280
	void OnEvt_CharPosRefreshed();// 0x8a873f8 0x78c470d360
	void OnEvt_ViewTargetChange(int Target);// 0x8a873f8 0x78c470d440
	void OnEvt_CharDynamicRefreshed();// 0x8a873f8 0x78c470d520
	void RefreshTargetTeamView(obTeamPlayerMemInfo_C*[] notUsedMateInfo, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obTeamPlayerMemInfo_C* CallFunc_Create_ReturnValue, obTeamPlayerMemInfo_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, int Temp_int_Loop_Counter_Variable, obTeamPlayerMemInfo_C*[] CallFunc_Map_Values_Values, obTeamPlayerMemInfo_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, bool CallFunc_IsShowTeamColor_ReturnValue, int CallFunc_GetViewTargetPlayerID_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, bool CallFunc_IsViewingTargetPlayer_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, OBPlayerInfo[] CallFunc_GetTeamMemInfo_infos, bool CallFunc_GetTeamMemInfo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, OBPlayerInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, obTeamPlayerMemInfo_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x8a873f8 0x78c470d6e0
	void _refreshTargetDetailInfo(int PlayerID, int localSharpLevel, int localWeaponID, int localTargetIndex, int[] localSkills, int[] savedBuffs, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, ProgressBarStyle K2Node_MakeStruct_ProgressBarStyle, ProgressBarStyle K2Node_MakeStruct_ProgressBarStyle, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, LinearColor Temp_struct_Variable, int CallFunc_Array_Get_Item, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_Variable, ProgressBarStyle K2Node_Select_Default, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PaperSprite* CallFunc_GetWeaponStateIconTextureSquare_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, LinearColor Temp_struct_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, float CallFunc_GetPlayerInfo_MaxInjury_ReturnValue, float CallFunc_GetPlayerInfo_MaxDyingHealth_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, OBPlayerTargetDetailInfo CallFunc_GetPlayerTargetDetailInfo_info, bool CallFunc_GetPlayerTargetDetailInfo_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, GameItemInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, enum CallFunc_GetItemChildTypeById_ReturnValue, OBBuffSimpleInfo CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Length_ReturnValue, PaperSprite* CallFunc_GetBuffIconSprite_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsBuffShowInBufflist_ReturnValue, int CallFunc_Array_Add_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, OBHorseBasicInfoToShow CallFunc_GetHorseBaseInfo_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, LinearColor K2Node_Select_Default, FString CallFunc_GetSkillName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_GetArmorMaxEndurance_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_GetItemQuality_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_GetItemQuality_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x8a873f8 0x78c470d7c0
	void RefreshTargetView(int tmpPlayerID, OBClientInfo* tmpOBClient, int CallFunc_GetViewTargetPlayerID_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, OBPlayerTargetDetailInfo CallFunc_GetPlayerTargetDetailInfo_info, bool CallFunc_GetPlayerTargetDetailInfo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsViewingTargetPlayer_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, bool CallFunc_IsShowTeamColor_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBPlayerInfo CallFunc_GetPlayerInfo_info, bool CallFunc_GetPlayerInfo_ReturnValue, Color CallFunc_getTeamColor_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x8a873f8 0x78c470d8a0
	void ShowDamageCircle();// 0x8a873f8 0x78c470d980
	void HideDamageCircle();// 0x8a873f8 0x78c470da60
	void SetCurrentCircle(float VectorPos1X, float VectorPos1Y, float Range);// 0x8a873f8 0x78c470db40
	void BndEvt__DetailButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470dc20
	void HideSomething();// 0x8a873f8 0x78c470dd00
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470dde0
	void BndEvt__LookAroundButton_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470dec0
	void BndEvt__Weapon1Button_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470dfa0
	void BndEvt__Weapon2Button_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e080
	void BndEvt__Weapon3Button_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e160
	void BndEvt__SwitchKillerButton_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e240
	void BndEvt__DrugButton_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e320
	void BndEvt__btn_setting_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e400
	void BndEvt__weaponChange_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e4e0
	void BndEvt__OBSetting_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470e5c0
	void BndEvt__HideUIButton_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470ace0
	void BndEvt__TouShiButton_K2Node_ComponentBoundEvent_16_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c470adc0
	void SetShingCircle(float VectorPos1X, float VectorPos1Y, float Range);// 0x8a873f8 0x78c470aea0
	void SetNextCircle(float VectorPos2X, float VectorPos2Y, float Range);// 0x8a873f8 0x78c470af80
	void Construct();// 0x8a873f8 0x78c470b060
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c470b140
	void AppendGongGao(enum Type, out const FText Info);// 0x8a873f8 0x78c470b220
	void AppendKillInfo(FString attack_player_name, FString dead_player_name, out const int cause_id, enum reason);// 0x8a873f8 0x78c470b300
	void OnResetLanguage();// 0x8a873f8 0x78c470b4c0
	void ExecuteUbergraph_OBTargetView(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float K2Node_Event_VectorPos1X, float K2Node_Event_VectorPos1Y, float K2Node_Event_range, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, BPWuxiaXOBPawn_C* K2Node_DynamicCast_AsBPWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, enum K2Node_Select_Default, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, enum K2Node_Select_Default, float K2Node_Event_VectorPos1X, float K2Node_Event_VectorPos1Y, float K2Node_Event_range, float K2Node_Event_VectorPos2X, float K2Node_Event_VectorPos2Y, float K2Node_Event_range, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, enum K2Node_Event_Type, const FText K2Node_Event_info, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, FString K2Node_Event_attack_player_name, FString K2Node_Event_dead_player_name, const int K2Node_Event_cause_id, enum K2Node_Event_reason, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetTimeToNxtStage_ReturnValue, float CallFunc_GetNxtStageWaitTime_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, WuXiaXGameStateBase* K2Node_DynamicCast_AsWu_Xia_XGame_State_Base, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, BPWuxiaXOBPawn_C* K2Node_DynamicCast_AsBPWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, FText CallFunc_MakeLiteralText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue);// 0x8a873f8 0x78c470b680

--------------------------------
Class: progressBar_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bc8ba080
	ProgressBar* ProgressBar;//[Offset: 0x268, Size: 0x8] 0x78bc8ba000
	float startProgress;//[Offset: 0x270, Size: 0x4] 0x78bc8b9f80
	float targetProgress;//[Offset: 0x274, Size: 0x4] 0x78bc8b9f00
	bool progressProcessing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x78bc8b9e80
	float playTime;//[Offset: 0x27c, Size: 0x4] 0x78bc8b9e00
	float timeLeft;//[Offset: 0x280, Size: 0x4] 0x78bc8b9d80
	void SetFillColor(Color FillColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x8a873f8 0x78d1d63500
	void SetProgressTo(float NewParam, float CallFunc_FClamp_ReturnValue);// 0x8a873f8 0x78d1d63880
	void PlayProgressFromTo(float Start, float End, float Time, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x8a873f8 0x78c2f7e320
	void PlayProgressTo(float Target, float TimeSec, float CallFunc_FClamp_ReturnValue);// 0x8a873f8 0x78d1d63420
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c5089a80
	void ExecuteUbergraph_progressBar(int EntryPoint, bool CallFunc_Less_FloatFloat_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x8a873f8 0x78c5089c40

--------------------------------
Class: obDrugsPanel_C.UserWidget.Widget.Visual.Object
	UniformGridPanel* DrugsPanel;//[Offset: 0x260, Size: 0x8] 0x78bc8baa00
	int[] DrugItemIds;//[Offset: 0x268, Size: 0x10] 0x78bc9e5420
	obBagItem_C*[] DrugItemWidgets;//[Offset: 0x278, Size: 0x10] 0x78bc9e5380
	int[] ValidDrugIds;//[Offset: 0x288, Size: 0x10] 0x78bc9e52e0
	void CheckValidBegin(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, obBagItem_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78d1d63960
	void CheckValidEnd(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, obBagItem_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UniformGridSlot* CallFunc_SlotAsUniformGridSlot_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c2f7b3e0
	void AddDrug(int ID, int Num, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_Array_Add_ReturnValue, obBagItem_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Array_Find_ReturnValue, UniformGridSlot* K2Node_DynamicCast_AsUniform_Grid_Slot, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x8a873f8 0x78c2f7e240
	void UpdateDrug(int ID, int Num, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, obBagItem_C* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c2f7e4e0
	void RemoveDrug(int drugid, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_RemoveChildAt_ReturnValue);// 0x8a873f8 0x78c4700160

--------------------------------
Class: obInfoList_C.PopInfoBoxWidgetBase_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78c55cd500
	Image* back;//[Offset: 0x288, Size: 0x8] 0x78c55cd480
	ScrollBox* Box;//[Offset: 0x290, Size: 0x8] 0x78c55cd400
	Image* Highlight;//[Offset: 0x298, Size: 0x8] 0x78c55cd380
	CanvasPanel* whole;//[Offset: 0x2a0, Size: 0x8] 0x78c55cd300
	bool bMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x78c55cd280
	int MaxNum;//[Offset: 0x2ac, Size: 0x4] 0x78c55cd200
	void OnSetLanguage(int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, obInfoEntry_C* K2Node_DynamicCast_AsOb_Info_Entry, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c470a7a0
	void _AdjustVisibility(int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c470a880
	void AppendGongGao(enum GongGaoType, FText Info);// 0x8a873f8 0x78c470a960
	void Construct();// 0x8a873f8 0x78c470aa40
	void AppendKillInfo(FString AttackPlayerName, FString DeadPlayerName, int causeID, enum reason);// 0x8a873f8 0x78c470ab20
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x8a873f8 0x78c470ac00
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x8a873f8 0x78c47074e0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c47075c0
	void ExecuteUbergraph_obInfoList(int EntryPoint, enum K2Node_CustomEvent_GongGaoType, FText K2Node_CustomEvent_Info, FString K2Node_CustomEvent_AttackPlayerName, FString K2Node_CustomEvent_DeadPlayerName, int K2Node_CustomEvent_CauseId, enum K2Node_CustomEvent_Reason, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PopInfoWidgetBase_C* CallFunc_Create_ReturnValue, PopInfoWidgetBase_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, obInfoEntry_C* K2Node_DynamicCast_AsOb_Info_Entry, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, obInfoEntry_C* K2Node_DynamicCast_AsOb_Info_Entry, bool K2Node_DynamicCast_bSuccess, Geometry K2Node_Event_MyGeometry, const PointerEvent K2Node_Event_MouseEvent, const PointerEvent K2Node_Event_MouseEvent, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_RemoveChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_RemoveChildAt_ReturnValue);// 0x8a873f8 0x78c4707780

--------------------------------
Class: PopInfoBoxWidgetBase_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bdbd2180
	PopInfoWidgetBase_C*[] Pops;//[Offset: 0x268, Size: 0x10] 0x78bd424de0
	class PopInfoWidgetBase_C* WidgetClass;//[Offset: 0x278, Size: 0x8] 0x78bd424d40
	void PushWidget(PopInfoWidgetBase_C* Widget, int CallFunc_Array_Add_ReturnValue);// 0x8a873f8 0x78c4707940
	void GetEmptyPop(out PopInfoWidgetBase_C* pop, PopInfoWidgetBase_C* TempPop, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, PopInfoWidgetBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, PopInfoWidgetBase_C* CallFunc_Create_ReturnValue);// 0x8a873f8 0x78c4707a20
	void PopTimeOutPushBack(PopInfoWidgetBase_C* Widget);// 0x8a873f8 0x78c4707b00
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c4707cc0
	void ExecuteUbergraph_PopInfoBoxWidgetBase(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PopInfoWidgetBase_C* K2Node_CustomEvent_Widget);// 0x8a873f8 0x78c4707e80

--------------------------------
Class: obInfoEntry_C.PopInfoWidgetBase_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78c55cb980
	SizeBox* gonggaoEntry;//[Offset: 0x288, Size: 0x8] 0x78c55cb900
	TextBlock* GongGaoType;//[Offset: 0x290, Size: 0x8] 0x78c55cb880
	TextBlock* Info;//[Offset: 0x298, Size: 0x8] 0x78c55cb800
	SizeBox* killEntry;//[Offset: 0x2a0, Size: 0x8] 0x78c55cb780
	Image* textbg;//[Offset: 0x2a8, Size: 0x8] 0x78c55cb700
	TextBlock* TextOne;//[Offset: 0x2b0, Size: 0x8] 0x78c55cb680
	FString Attack;//[Offset: 0x2b8, Size: 0x10] 0x78c55cb600
	FString Dead;//[Offset: 0x2c8, Size: 0x10] 0x78c55cd700
	int causeID;//[Offset: 0x2d8, Size: 0x4] 0x78c55cd680
	enum reason;//[Offset: 0x2dc, Size: 0x1] 0x78c3d290c0
	bool isKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1] 0x78c55cd580
	void OnSetLanguage();// 0x8a873f8 0x78c4708ba0
	void _SetKillText(FString val, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c4708c80
	void RefreshKillInfo(WuXiaXGameInstance* GameInstance, enum Language, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, enum Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString K2Node_Select_Default, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetBuffNameById_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetSkillNameById_ReturnValue, FString CallFunc_GetItemDetailById_name, FString CallFunc_GetItemDetailById_detail, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString K2Node_Select_Default);// 0x8a873f8 0x78c4708d60
	void SetGongaoInfo(enum GongGaoType, FText Info);// 0x8a873f8 0x78c4708e40
	void SetKillInfo(FString AttackPlayer, FString DeadPlayer, int causeID, enum reason);// 0x8a873f8 0x78c4709000
	void ExecuteUbergraph_obInfoEntry(int EntryPoint, enum K2Node_CustomEvent_GongGaoType, FText K2Node_CustomEvent_Info, bool K2Node_SwitchEnum_CmpSuccess, FString K2Node_CustomEvent_AttackPlayer, FString K2Node_CustomEvent_DeadPlayer, int K2Node_CustomEvent_CauseId, enum K2Node_CustomEvent_Reason);// 0x8a873f8 0x78c4705800

--------------------------------
Class: PVPKillInfoWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bcf82100
	WidgetAnimation* KillAnim;//[Offset: 0x268, Size: 0x8] 0x78bcf80980
	HorizontalBox* KillHorizontalPanel;//[Offset: 0x270, Size: 0x8] 0x78bcf80100
	Image* LianSha;//[Offset: 0x278, Size: 0x8] 0x78bcf80080
	PVPKillInfoListBoxWidget_C* PVPKillInfoListBox;//[Offset: 0x280, Size: 0x8] 0x78bcf82080
	void SetSkillNum(int Num);// 0x8a873f8 0x78c8a1fd60
	void ExecuteUbergraph_PVPKillInfoWidget(int EntryPoint, int K2Node_CustomEvent_Num, int Temp_int_Variable, bool CallFunc_InRange_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Len_ReturnValue, KillNumWidget_C* CallFunc_Create_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c470c800

--------------------------------
Class: KillNumWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bdbd4100
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78bdbd4080
	PaperSprite* Texture;//[Offset: 0x270, Size: 0x8] 0x78bdbd4000
	void SetNum(int Num);// 0x8a873f8 0x78c4709620
	void ExecuteUbergraph_KillNumWidget(int EntryPoint, int K2Node_CustomEvent_Num, bool K2Node_SwitchInteger_CmpSuccess);// 0x8a873f8 0x78c47097e0

--------------------------------
Class: PVPKillInfoListBoxWidget_C.PopInfoBoxWidgetBase_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78c927df80
	VerticalBox* KillBox;//[Offset: 0x288, Size: 0x8] 0x78c55cce00
	void GetKillInfo(out PVPKillInfoChildWidget_C* KillInfo, bool CallFunc_RemoveChildAt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, PopInfoWidgetBase_C* K2Node_DynamicCast_AsPop_Info_Widget_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_IntInt_ReturnValue, PopInfoWidgetBase_C* CallFunc_GetEmptyPop_Pop, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PVPKillInfoChildWidget_C* K2Node_DynamicCast_AsPVPKill_Info_Child_Widget, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c4709ee0
	void Construct();// 0x8a873f8 0x78c4709fc0
	void FirstBlood(FString kill, FString Dead);// 0x8a873f8 0x78c470a0a0
	void ShutDown(FString kill, FString Dead, int KillNum);// 0x8a873f8 0x78c470a180
	void MultiKill(FString kill, int KillNum);// 0x8a873f8 0x78c470a340
	void ExecuteUbergraph_PVPKillInfoListBoxWidget(int EntryPoint, PVPKillInfoChildWidget_C* CallFunc_GetKillInfo_KillInfo, FString K2Node_CustomEvent_Kill, FString K2Node_CustomEvent_Dead, FString K2Node_CustomEvent_Kill, FString K2Node_CustomEvent_Dead, int K2Node_CustomEvent_KillNum, FString K2Node_CustomEvent_Kill, int K2Node_CustomEvent_KillNum);// 0x8a873f8 0x78c470a500

--------------------------------
Class: PVPKillInfoChildWidget_C.PopInfoWidgetBase_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78c55cd180
	TextBlock* TextFive;//[Offset: 0x288, Size: 0x8] 0x78c55cd100
	TextBlock* TextFour;//[Offset: 0x290, Size: 0x8] 0x78c55cd080
	TextBlock* TextOne;//[Offset: 0x298, Size: 0x8] 0x78c55cd000
	TextBlock* TextSix;//[Offset: 0x2a0, Size: 0x8] 0x78c55ccf80
	TextBlock* TextThree;//[Offset: 0x2a8, Size: 0x8] 0x78c55ccf00
	TextBlock* TextTwo;//[Offset: 0x2b0, Size: 0x8] 0x78c55cce80
	void ResetText();// 0x8a873f8 0x78c4708200
	void FirstBlood(FString kill, FString Dead);// 0x8a873f8 0x78c47082e0
	void ShutDown(FString kill, FString Dead, int KillNum);// 0x8a873f8 0x78c47083c0
	void MultiKill(FString kill, int KillNum);// 0x8a873f8 0x78c4708580
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c4708660
	void ExecuteUbergraph_PVPKillInfoChildWidget(int EntryPoint, FString K2Node_CustomEvent_Kill, FString K2Node_CustomEvent_Dead, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString K2Node_CustomEvent_Kill, FString K2Node_CustomEvent_Dead, int K2Node_CustomEvent_KillNum, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString K2Node_CustomEvent_Kill, int K2Node_CustomEvent_KillNum, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_InRange_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x8a873f8 0x78c4708820

--------------------------------
Class: OperationSettingWidget_C.MobileOperationSettingUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x338, Size: 0x8] 0x78c3fbc300
	CanvasPanel* AutoRun;//[Offset: 0x340, Size: 0x8] 0x78c3fbc280
	Slider* ButtonSizeSlider;//[Offset: 0x348, Size: 0x8] 0x78c3fbc200
	TextBlock* ButtonSizeText;//[Offset: 0x350, Size: 0x8] 0x78c3fbc180
	Button* Exit;//[Offset: 0x358, Size: 0x8] 0x78c3fbc100
	CanvasPanel* MainCanvas;//[Offset: 0x360, Size: 0x8] 0x78c3fbc080
	Button* Reset;//[Offset: 0x368, Size: 0x8] 0x78c3fbc000
	CanvasPanel* ScalePanel;//[Offset: 0x370, Size: 0x8] 0x78c3fbbf80
	ProgressBar* spbar;//[Offset: 0x378, Size: 0x8] 0x78c3fbbf00
	Slider* SprintingSlider;//[Offset: 0x380, Size: 0x8] 0x78c3fbbe80
	Button* use;//[Offset: 0x388, Size: 0x8] 0x78c3fbbe00
	Border* WalkJoystick;//[Offset: 0x390, Size: 0x8] 0x78c3fbbd80
	Border* SelectedSlot;//[Offset: 0x398, Size: 0x8] 0x78c3fbbd00
	bool IsTouchValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1] 0x78c3fbbc80
	<FString,Vector> OperationMap;//[Offset: 0x3a8, Size: 0x50] 0x78c37d0100
	<Border*,Vector2D> SlotOriginalMap;//[Offset: 0x3f8, Size: 0x50] 0x78c37d2ec0
	void SetSlotPosition(Vector2D Position, float CallFunc_GetSlotSize_Size, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue);// 0x8a873f8 0x78c42d9b60
	void GetSlotPosition(out Vector2D Position, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue);// 0x8a873f8 0x78c42d9c40
	void SetSlotSize(float Size, Vector2D CallFunc_GetSlotPosition_Position, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue);// 0x8a873f8 0x78c42d9d20
	void GetSlotSize(out float Size, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0x8a873f8 0x78c42d9e00
	void SetSprintingRange(float SliderValue);// 0x8a873f8 0x78c42d9ee0
	void InitSprintingRange(float CallFunc_ReadConfigFloat_ReturnValue);// 0x8a873f8 0x78c42d9fc0
	void LoadOperationSetting(bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, <FString,Vector> CallFunc_ReadOperationSetting_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Border* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_GetPosition_ReturnValue);// 0x8a873f8 0x78c42da0a0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue);// 0x8a873f8 0x78c42da180
	void CheckOffset(Widget* Slot, Vector2D Offset, out Vector2D Offset_, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector2D CallFunc_ClampRect_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_CheckOffset_Offset_);// 0x8a873f8 0x78c42da260
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_CheckOffset_Offset_, EventReply CallFunc_Handled_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue);// 0x8a873f8 0x78c42da340
	void SetHovered(Border* Slot, bool Hovered, LinearColor Temp_struct_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor K2Node_Select_Default);// 0x8a873f8 0x78c42da420
	void SelectSlot(Vector2D TouchPosition, out Border* Slot, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetSlotSize_Size, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, Border* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, const Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsUnderLocation_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c42da500
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Handled_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Border* CallFunc_SelectSlot_Slot, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c42da5e0
	void OnInitialized();// 0x8a873f8 0x78c42da6c0
	void BndEvt__Reset_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42da7a0
	void BndEvt__Save_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42da880
	void BndEvt__Exit_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42daa40
	void BndEvt__ButtonSizeSlider_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x8a873f8 0x78c42dac00
	void ExecuteUbergraph_OperationSettingWidget(int EntryPoint, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_SaveOperationSetting_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, float CallFunc_GetValue_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, float K2Node_ComponentBoundEvent_Value, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int Temp_int_Variable, bool CallFunc_CloseUI_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Border* K2Node_DynamicCast_AsBorder, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ClientLoginHUD* CallFunc_GetClientLoginHud_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c42dace0

--------------------------------
Class: NewGuideWidget_C.NewGuideUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e8, Size: 0x8] 0x78c45e4000
	WidgetAnimation* fadetitle;//[Offset: 0x3f0, Size: 0x8] 0x78c45e3f80
	WidgetAnimation* showtitle;//[Offset: 0x3f8, Size: 0x8] 0x78c45e3f00
	WidgetAnimation* TipSlider;//[Offset: 0x400, Size: 0x8] 0x78c45e3e80
	WidgetAnimation* Tip301;//[Offset: 0x408, Size: 0x8] 0x78c45e3e00
	WidgetAnimation* Tip201;//[Offset: 0x410, Size: 0x8] 0x78c45e3d80
	WidgetAnimation* Tip101;//[Offset: 0x418, Size: 0x8] 0x78c45e3d00
	Image* Anim201;//[Offset: 0x420, Size: 0x8] 0x78c45e3c80
	Image* Anim201;//[Offset: 0x428, Size: 0x8] 0x78c45e3c00
	Image* Anim201;//[Offset: 0x430, Size: 0x8] 0x78c45e3b80
	Image* Anim201;//[Offset: 0x438, Size: 0x8] 0x78c45e3b00
	Image* Anim201;//[Offset: 0x440, Size: 0x8] 0x78c45e3a80
	Image* Anim201;//[Offset: 0x448, Size: 0x8] 0x78c45e3a00
	CanvasPanel* ArmorGuide;//[Offset: 0x450, Size: 0x8] 0x78c45e3980
	CanvasPanel* AtkCancel;//[Offset: 0x458, Size: 0x8] 0x78c45e3900
	CanvasPanel* BlockCancel;//[Offset: 0x460, Size: 0x8] 0x78c45e3880
	CanvasPanel* CancelBlockGuide;//[Offset: 0x468, Size: 0x8] 0x78c45e3800
	Button* CloseButton;//[Offset: 0x470, Size: 0x8] 0x78c45e3780
	CanvasPanel* DrugGuide;//[Offset: 0x478, Size: 0x8] 0x78c45e3700
	TextBlock* FlyOperatorTextDown后推减速下降                                                               ;//[Offset: 0x480, Size: 0x8] 0x78c45e3680
	TextBlock* FlyOperatorTextUp;//[Offset: 0x488, Size: 0x8] 0x78c45e3600
	CanvasPanel* FWeaponGuide;//[Offset: 0x490, Size: 0x8] 0x78c45e3580
	CanvasPanel* GilderGuide;//[Offset: 0x498, Size: 0x8] 0x78c45e3500
	Button* GlidingInteractive;//[Offset: 0x4a0, Size: 0x8] 0x78c45e3480
	Image* Image;//[Offset: 0x4a8, Size: 0x8] 0x78c45e3400
	Image* Image;//[Offset: 0x4b0, Size: 0x8] 0x78c45e3380
	Image* Image;//[Offset: 0x4b8, Size: 0x8] 0x78c45e3300
	Image* Image;//[Offset: 0x4c0, Size: 0x8] 0x78c45e3280
	Image* Image;//[Offset: 0x4c8, Size: 0x8] 0x78c45e3200
	Image* Image;//[Offset: 0x4d0, Size: 0x8] 0x78c45e5280
	Image* Image;//[Offset: 0x4d8, Size: 0x8] 0x78c45e5200
	Image* Image;//[Offset: 0x4e0, Size: 0x8] 0x78c45e5180
	Image* Image;//[Offset: 0x4e8, Size: 0x8] 0x78c45e5100
	Image* Image;//[Offset: 0x4f0, Size: 0x8] 0x78c45e5080
	Image* Image;//[Offset: 0x4f8, Size: 0x8] 0x78c45e5000
	Image* Image;//[Offset: 0x500, Size: 0x8] 0x78c45e4f80
	Image* Image;//[Offset: 0x508, Size: 0x8] 0x78c45e4f00
	Image* Image;//[Offset: 0x510, Size: 0x8] 0x78c45e4e80
	Image* Image;//[Offset: 0x518, Size: 0x8] 0x78c45e4e00
	Image* Image;//[Offset: 0x520, Size: 0x8] 0x78c45e4d80
	Image* Image;//[Offset: 0x528, Size: 0x8] 0x78c45e4d00
	Image* Image;//[Offset: 0x530, Size: 0x8] 0x78c45e4c80
	Image* Image;//[Offset: 0x538, Size: 0x8] 0x78c45e4c00
	Image* Image;//[Offset: 0x540, Size: 0x8] 0x78c45e4b80
	Image* Image;//[Offset: 0x548, Size: 0x8] 0x78c45e4b00
	Image* Image;//[Offset: 0x550, Size: 0x8] 0x78c45e4a80
	Image* Image;//[Offset: 0x558, Size: 0x8] 0x78c45e4a00
	Image* Image;//[Offset: 0x560, Size: 0x8] 0x78c45e4980
	Image* Image;//[Offset: 0x568, Size: 0x8] 0x78c45e4900
	Image* Image;//[Offset: 0x570, Size: 0x8] 0x78c45e4880
	Image* Image;//[Offset: 0x578, Size: 0x8] 0x78c45e4800
	Image* Image;//[Offset: 0x580, Size: 0x8] 0x78c45e4780
	Image* Image;//[Offset: 0x588, Size: 0x8] 0x78c45e4700
	Image* Image;//[Offset: 0x590, Size: 0x8] 0x78c45e4680
	Image* Image;//[Offset: 0x598, Size: 0x8] 0x78c45e4600
	Button* InterBtn;//[Offset: 0x5a0, Size: 0x8] 0x78c45e4580
	CanvasPanel* InterGuide;//[Offset: 0x5a8, Size: 0x8] 0x78c45e4500
	CanvasPanel* learnguide;//[Offset: 0x5b0, Size: 0x8] 0x78c45e4480
	CanvasPanel* LeaveDragon;//[Offset: 0x5b8, Size: 0x8] 0x78c45e4400
	Button* OpenDragonGilder;//[Offset: 0x5c0, Size: 0x8] 0x78c45e4380
	CanvasPanel* PickItemGuide;//[Offset: 0x5c8, Size: 0x8] 0x78c45e4300
	RichTextBlock* r_guidecont;//[Offset: 0x5d0, Size: 0x8] 0x78c45e4280
	RichTextBlock* r_guidetitle;//[Offset: 0x5d8, Size: 0x8] 0x78c45e6300
	CanvasPanel* RangeWeaponPanel;//[Offset: 0x5e0, Size: 0x8] 0x78c45e6280
	CanvasPanel* RideGuide;//[Offset: 0x5e8, Size: 0x8] 0x78c45e6200
	CanvasPanel* SWeaponGuide;//[Offset: 0x5f0, Size: 0x8] 0x78c45e6180
	Button* TempLearnBook;//[Offset: 0x5f8, Size: 0x8] 0x78c45e6100
	TextBlock* TextBlock;//[Offset: 0x600, Size: 0x8] 0x78c45e6080
	TextBlock* TextBlock;//[Offset: 0x608, Size: 0x8] 0x78c45e6000
	CanvasPanel* TitlePanel;//[Offset: 0x610, Size: 0x8] 0x78c45e5f80
	CanvasPanel* UnRideGuide;//[Offset: 0x618, Size: 0x8] 0x78c45e5f00
	CanvasPanel* WalkGuide;//[Offset: 0x620, Size: 0x8] 0x78c45e5e80
	Button* WeaponEquip01;//[Offset: 0x628, Size: 0x8] 0x78c45e5e00
	Button* WeaponEquip02;//[Offset: 0x630, Size: 0x8] 0x78c45e5d80
	float dt;//[Offset: 0x638, Size: 0x4] 0x78c45e5d00
	bool IsTipGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 0x1] 0x78c45e5c80
	GuideData Data;//[Offset: 0x640, Size: 0x18] 0x78c45e5c00
	enum CurGuide;//[Offset: 0x658, Size: 0x1] 0x78c4486a00
	enum CurInterGuide;//[Offset: 0x659, Size: 0x1] 0x78c4486960
	float DelayTime;//[Offset: 0x65c, Size: 0x4] 0x78c45e5a80
	float circleCD;//[Offset: 0x660, Size: 0x4] 0x78c45e5a00
	float spCD;//[Offset: 0x664, Size: 0x4] 0x78c45e5980
	void ToggleGlidGuide(bool Open, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetActiveWidgetIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c42de6a0
	void RSetText(RichTextBlock* Ref, FText cont);// 0x8a873f8 0x78c42dadc0
	void UpdateTipPanel(enum Type, int Temp_int_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, NewGuideData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PaperSprite* K2Node_Select_Default);// 0x8a873f8 0x78c42daea0
	void ShowTitlePanel(bool Show, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c42daf80
	bool CheckGuideCondition(enum Type, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Property_GetCurrentPlayerHP_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Team_GetCurrentFollowPlayerID_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ActorComponent* CallFunc_GetGameComponent_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasArmorPiece_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Property_GetCurrentPlayerMaxHP_ReturnValue, int CallFunc_Property_GetCurrentPlayerHP_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PlayerItemCtrlComponent* K2Node_DynamicCast_AsPlayer_Item_Ctrl_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_HasDrug_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_GuideCanInteractive_ReturnValue, enum CallFunc_State_GetPlayerMainState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, WuXiaXHUD* CallFunc_GetHUD_hud, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetAmmoIdByItemId_ReturnValue, int CallFunc_GetItemNumById_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c42db060
	void CorrectPos(enum Type, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, <FString,Vector> CallFunc_ReadOperationSetting_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue);// 0x8a873f8 0x78c42db140
	void GetHUD(out WuXiaXHUD* HUD, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, WuXiaXHUD* K2Node_DynamicCast_AsWu_Xia_XHUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c42db220
	void ReadCustomSetting(CanvasPanel* Container, int CallFunc_GetChildrenCount_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, <FString,Vector> CallFunc_ReadOperationSetting_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x8a873f8 0x78c42db300
	void ActiveGuide();// 0x8a873f8 0x78c42db3e0
	void BndEvt__WeaponEquip02_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42db4c0
	void BndEvt__WeaponEquip01_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42db5a0
	void AfterAddGuideType();// 0x8a873f8 0x78c42db680
	void BndEvt__OpenDragonGilder_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42db760
	void BndEvt__GlidingInteractive_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42db840
	void ExpandDrugPanel();// 0x8a873f8 0x78c42db920
	void BndEvt__CloseButton_K2Node_ComponentBoundEvent_12_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42dba00
	void PrepareForUseTool();// 0x8a873f8 0x78c42dbae0
	void BndEvt__TempLearnBook_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c42dbbc0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c42dbca0
	void StartGuide(enum Type);// 0x8a873f8 0x78c42dbd80
	void Construct();// 0x8a873f8 0x78c42dbe60
	void GuideInterClosed();// 0x8a873f8 0x78c42dbf40
	void CloseGuide(enum Type);// 0x8a873f8 0x78c42dc100
	void BndEvt__InterBtn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78c42dc2c0
	void ExecuteUbergraph_NewGuideWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_BP_InputKey_ReturnValue, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, BP_WuXiaX_Hud_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Hud, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, MainGameWidget_C* K2Node_DynamicCast_AsMain_Game_Widget, bool K2Node_DynamicCast_bSuccess, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BP_InputKey_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, enum K2Node_Event_Type, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BP_InputKey_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum K2Node_Event_Type, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsGuideRunning_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c42dc3a0

--------------------------------
Class: PVPSkillSlotWidget_C.PVPSelectRollBarSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x78b8922100
	ProgressBar* curpro;//[Offset: 0x298, Size: 0x8] 0x78b8922080
	TextBlock* Desc;//[Offset: 0x2a0, Size: 0x8] 0x78b8922000
	Image* icon;//[Offset: 0x2a8, Size: 0x8] 0x78b8921f80
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78b8921f00
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x78b8921e80
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x78b8921e00
	Image* Image;//[Offset: 0x2c8, Size: 0x8] 0x78b8921d80
	Image* Image;//[Offset: 0x2d0, Size: 0x8] 0x78b8921d00
	TextBlock* Name;//[Offset: 0x2d8, Size: 0x8] 0x78b8921c80
	ProgressBar* toupro;//[Offset: 0x2e0, Size: 0x8] 0x78b8921c00
	void Init(FString icon, FText Name, FText Desc, int ID);// 0x8a873f8 0x78c42d0f60
	void ExecuteUbergraph_PVPSkillSlotWidget(int EntryPoint, FString K2Node_Event_icon, FText K2Node_Event_name, FText K2Node_Event_Desc, int K2Node_Event_id, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, UISkillInfo CallFunc_GetSkillDetailInfo_ReturnValue, PaperSprite* CallFunc_GetSprite_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c42d1120

--------------------------------
Class: PVPItemSlotWidget_C.PVPSelectRollBarSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x78b8921980
	TextBlock* Desc;//[Offset: 0x298, Size: 0x8] 0x78b8921900
	Image* icon;//[Offset: 0x2a0, Size: 0x8] 0x78b8921880
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x78b8921800
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x78b8921780
	TextBlock* Name;//[Offset: 0x2b8, Size: 0x8] 0x78b8921700
	void SetItemInfo(int skill_id, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, PaperSprite* CallFunc_GetSprite_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c42d0860
	void Init(FString icon, FText Name, FText Desc, int ID);// 0x8a873f8 0x78c42d0940
	void ExecuteUbergraph_PVPItemSlotWidget(int EntryPoint, FString K2Node_Event_icon, FText K2Node_Event_name, FText K2Node_Event_Desc, int K2Node_Event_id, GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_WuXiaX_GameInstace_C* K2Node_DynamicCast_AsBP_Wu_Xia_X_Game_Instace, bool K2Node_DynamicCast_bSuccess, PaperSprite* CallFunc_GetSprite_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput);// 0x8a873f8 0x78c42d0a20

--------------------------------
Class: ReplayWaitingAnim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8922c00
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78b8922b80
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8] 0x78b8922b00
	void Construct();// 0x8a873f8 0x78c42d76a0
	void ExecuteUbergraph_ReplayWaitingAnim(int EntryPoint);// 0x8a873f8 0x78c42d7860

--------------------------------
Class: MessageManager_BP_C.MessageManagerWidget.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a8, Size: 0x8] 0x78b8922a00
	void OnCloseWidget();// 0x8a873f8 0x78c42ddb40
	void ExecuteUbergraph_MessageManager_BP(int EntryPoint, bool CallFunc_CloseUI_ReturnValue);// 0x8a873f8 0x78c42ddd00

--------------------------------
Class: MobileSkill_StaticEntry_C.UI_MobileSkill_StaticNode.UI_MobileUIFrame.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x268, Size: 0x8] 0x78b8926080
	TextBlock* Description;//[Offset: 0x270, Size: 0x8] 0x78b8926000
	Image* icon;//[Offset: 0x278, Size: 0x8] 0x78b8925f80
	Image* Line;//[Offset: 0x280, Size: 0x8] 0x78b8925f00
	Image* Line;//[Offset: 0x288, Size: 0x8] 0x78b8925e80
	TextBlock* Name;//[Offset: 0x290, Size: 0x8] 0x78b8925e00
	TextBlock* Name;//[Offset: 0x298, Size: 0x8] 0x78b8925d80
	VerticalBox* VerticalBox;//[Offset: 0x2a0, Size: 0x8] 0x78b8925d00
	VerticalBox* VerticalBox;//[Offset: 0x2a8, Size: 0x8] 0x78b8925c80
	void UpdateUI(PaperSprite* icon, FString Name, FString Description);// 0x8a873f8 0x78c3c012e0
	void UpdateLearned(bool Learned);// 0x8a873f8 0x78c3c014a0
	void ExecuteUbergraph_MobileSkill_StaticEntry(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, PaperSprite* K2Node_Event_icon, FString K2Node_Event_name, FString K2Node_Event_description, FText CallFunc_Conv_StringToText_ReturnValue, interface classNone CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_Event_learned, enum K2Node_Select_Default, float K2Node_Select_Default, LinearColor K2Node_MakeStruct_LinearColor);// 0x8a873f8 0x78c3c01660

--------------------------------
Class: AltarChildWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78b8925800
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x78b8925780
	void ActiveTag(bool Active);// 0x8a873f8 0x78c3c08e40
	void ExecuteUbergraph_AltarChildWidget(int EntryPoint, bool K2Node_CustomEvent_active);// 0x8a873f8 0x78c3c09000

--------------------------------
Class: FoTouWidget_C.FoTouUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Vector Location;//[Offset: 0x340, Size: 0xc] 0x78ba931500

--------------------------------
Class: GameEndTipDecorator_C.RichTextBlockImageDecorator.RichTextBlockDecorator.Object

--------------------------------
Class: BTT_ClearTarget_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78b87c6900
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c3788900
	void ExecuteUbergraph_BTT_ClearTarget(int EntryPoint, FName CallFunc_GetTargetActor_NewParam, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue);// 0x8a873f8 0x78c37889e0

--------------------------------
Class: BTS_SetFightValue_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78b87cbc80
	BP_NpcCharacter_C* NpcCharacter;//[Offset: 0x98, Size: 0x8] 0x78b87cbc00
	WuXiaXBaseCharacter* TargetCharacter;//[Offset: 0xa0, Size: 0x8] 0x78b87cbb80
	void SetSelfArmorPercentage(FName CallFunc_GetSelfArmorPercentage_NewParam, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_ItemCtrl_GetCurrentArmor_ReturnValue, int CallFunc_ItemCtrl_GetMaxArmor_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3787400
	void SetTargetHpPercantage(FName CallFunc_GetTargetHpPercentage_NewParam, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Property_GetCurrentPlayerHP_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Property_GetCurrentPlayerMaxHP_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78c37874e0
	void SetSelfHpPercentage(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetSelfHpPercentage_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Property_GetCurrentPlayerMaxHP_ReturnValue, int CallFunc_Property_GetCurrentPlayerHP_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x8a873f8 0x78c37875c0
	void SetNavTargetDistance(FName CallFunc_GetTargetNavDistance_NewParam, FName CallFunc_GetTargetNavDistance_NewParam, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, NavigationPath* CallFunc_FindPathToLocationSynchronously_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetPathLength_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x8a873f8 0x78c37876a0
	void SetMoveNpcType(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetNpcMoveType_NewParam);// 0x8a873f8 0x78c3787780
	void SetSelfWeaponType(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetSelfWeaponType_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Fight_CurrentWeaponType_ReturnValue);// 0x8a873f8 0x78c3787860
	void SetTargetState(FName CallFunc_GetTargetStateChange_NewParam, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetTargetState_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, byte CallFunc_GetValueAsEnum_ReturnValue, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, byte CallFunc_TranslateState_output, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c3787940
	void SetSelfState(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetSelfStateChange_NewParam, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetSelfState_NewParam, byte CallFunc_TranslateState_output, byte CallFunc_GetValueAsEnum_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x8a873f8 0x78c3787a20
	void SetTargetSkill(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetTargetCurrentSkill_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Fight_GetCurrentSkillId_ReturnValue);// 0x8a873f8 0x78c3787b00
	void SetSelfNv(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetSelfNv_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, float CallFunc_Property_GetCurrentInjury_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x8a873f8 0x78c3787be0
	void SetSelfMp(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetSelfMP_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Property_GetCurrentPlayerMP_ReturnValue);// 0x8a873f8 0x78c3787cc0
	void SetSelfHp(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetSelfHp_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, int CallFunc_Property_GetCurrentPlayerHP_ReturnValue);// 0x8a873f8 0x78c3787da0
	void SetTargetNv(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetTargetNv_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Property_GetCurrentInjury_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x8a873f8 0x78c3787e80
	void SetTargetMp(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetTargetMp_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Property_GetCurrentPlayerMP_ReturnValue);// 0x8a873f8 0x78c3787f60
	void SetTargetHp(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetTargetHp_NewParam, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Property_GetCurrentPlayerHP_ReturnValue);// 0x8a873f8 0x78c3788040
	void SetTargetDistance(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetTargetDistance_NewParam, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x8a873f8 0x78c3788120
	void SetFightRange(BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, FName CallFunc_GetFightRange_NewParam, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x8a873f8 0x78c3788200
	void TranslateState(WuXiaXBaseCharacter* Character, out byte Output, byte temp_state, bool Temp_bool_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, byte Temp_byte_Variable, bool CallFunc_ItemCtrl_IsUsingItem_ReturnValue, enum CallFunc_State_GetPlayerChildState_ReturnValue, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_Select_Default);// 0x8a873f8 0x78c37882e0
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c37884a0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78c3788660
	void ExecuteUbergraph_BTS_SetFightValue(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, FName CallFunc_GetTargetActor_NewParam, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, FName CallFunc_GetTargetActor_NewParam, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetOwnersBlackboard_ReturnValue, Object* CallFunc_GetValueAsObject_ReturnValue, Object* CallFunc_GetValueAsObject_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetPlayerUniqueId_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x8a873f8 0x78c3788740

--------------------------------
Class: BTD_HGTT_NOIdle_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x8a873f8 0x78c378ac00

--------------------------------
Class: BTD_CheckTargetNew_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int CheckRangeSquared;//[Offset: 0x98, Size: 0x4] 0x78b87ccb80
	float ChangeTargetRate;//[Offset: 0x9c, Size: 0x4] 0x78b87ccb00
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, WuXiaXBaseCharacter* CallFunc_Fight_GetTarget_ReturnValue, FName CallFunc_GetChangeTargetTime_NewParam, float CallFunc_GetGameTimeInSeconds_ReturnValue, float CallFunc_GetValueAsFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetHatredTarget_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FName CallFunc_GetTargetActor_NewParam, Object* CallFunc_GetValueAsObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x8a873f8 0x78c378a960

--------------------------------
Class: BTD_CheckTargetInRange_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, FName CallFunc_GetTargetInRange_NewParam, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x8a873f8 0x78c378a7a0

--------------------------------
Class: BTD_CheckTarget_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int RangSquared;//[Offset: 0x98, Size: 0x4] 0x78b87ce180
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, FName CallFunc_GetFightStartPoint_NewParam, Vector CallFunc_K2_GetActorLocation_ReturnValue, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, WuXiaXBaseCharacter* CallFunc_GetHatredTarget_ReturnValue, FName CallFunc_GetTargetActor_NewParam, bool CallFunc_IsValid_ReturnValue, Object* CallFunc_GetValueAsObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c378a500

--------------------------------
Class: BTD_CanRunAI_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c378a340

--------------------------------
Class: BTD_AroundNobodyAllowStart_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c378a180

--------------------------------
Class: BTD_CheckHurttarget_C.BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int RangSquared;//[Offset: 0x98, Size: 0x4] 0x78b87cf780
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, FName CallFunc_GetTargetActor_NewParam, WuXiaXBaseCharacter* CallFunc_GetHatredTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c3789ee0

--------------------------------
Class: MapEffectPointWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c3900
	Image* EffectPointImage;//[Offset: 0x348, Size: 0x8] 0x78c55c3880
	EffectPointInfo EffectPointInfo;//[Offset: 0x350, Size: 0x18] 0x78c55c3800
	void UpdateInfo(EffectPointInfo NewEffectPointInfo);// 0x8a873f8 0x78c3cb6280
	void ExecuteUbergraph_MapEffectPointWidget(int EntryPoint, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, LinearColor Temp_struct_Variable, Object* K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, EffectPointInfo K2Node_CustomEvent_NewEffectPointInfo, LinearColor K2Node_Select_Default);// 0x8a873f8 0x78c3cb6440

--------------------------------
Class: SingPointWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c3700
	WidgetAnimation* NewAnimation;//[Offset: 0x348, Size: 0x8] 0x78c55c3680
	Image* Image_in;//[Offset: 0x350, Size: 0x8] 0x78c55c3600
	Image* Image_Item;//[Offset: 0x358, Size: 0x8] 0x78c55c3580
	Image* Image_out;//[Offset: 0x360, Size: 0x8] 0x78c55c3500
	UIParticleEmitter* UIParticleEmitter;//[Offset: 0x368, Size: 0x8] 0x78c55c3480
	int Key;//[Offset: 0x370, Size: 0x4] 0x78c55c3400
	int PlayerIndex;//[Offset: 0x374, Size: 0x4] 0x78c55c3380
	int tempNumber;//[Offset: 0x378, Size: 0x4] 0x78c55c3300
	void Play Anim(enum mainType, int PlayerIndex, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3cb5c60
	void Event_Init(int Key, enum mainType, enum childType, int PlayerIndex, int Quality);// 0x8a873f8 0x78c3cb5e20
	void ExecuteUbergraph_SingPointWidget(int EntryPoint, int K2Node_CustomEvent_key, enum K2Node_CustomEvent_mainType, enum K2Node_CustomEvent_childType, int K2Node_CustomEvent_playerIndex, int K2Node_CustomEvent_Quality, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x8a873f8 0x78c3cb5fe0

--------------------------------
Class: SoundItemWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c3280
	int ID;//[Offset: 0x348, Size: 0x4] 0x78c55c3200

--------------------------------
Class: AltarTagWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	VerticalBox* VerticalBox;//[Offset: 0x340, Size: 0x8] 0x78c55c5200
	int ID;//[Offset: 0x348, Size: 0x4] 0x78c55c5180
	AltarChildWidget_C*[] AltarTagArr;//[Offset: 0x350, Size: 0x10] 0x78c3d2ab00
	void InitNum(int ID, int Num, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Variable, AltarChildWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c3cb5720
	void SetNum(int ID, int Num, bool CallFunc_GreaterEqual_IntInt_ReturnValue, AltarChildWidget_C* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c3cb58e0

--------------------------------
Class: WaistPointWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c4e00
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c4d80
	int ID;//[Offset: 0x350, Size: 0x4] 0x78c55c4d00
	int Num;//[Offset: 0x354, Size: 0x4] 0x78c55c4c80
	void InitNum(int ID, int Num);// 0x8a873f8 0x78c3cb8740
	void ExecuteUbergraph_WaistPointWidget(int EntryPoint, int Temp_int_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor K2Node_Select_Default, int K2Node_CustomEvent_id, int K2Node_CustomEvent_Num);// 0x8a873f8 0x78c3cb8900

--------------------------------
Class: MarkedPointWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c4b80
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c4b00
	int ID;//[Offset: 0x350, Size: 0x4] 0x78c55c4a80
	enum Type;//[Offset: 0x354, Size: 0x1] 0x78c3d2a920
	void SetInfo(int ID, enum Type);// 0x8a873f8 0x78c3cb82e0
	void ExecuteUbergraph_MarkedPointWidget(int EntryPoint, bool K2Node_SwitchEnum_CmpSuccess, int K2Node_CustomEvent_id, enum K2Node_CustomEvent_Type);// 0x8a873f8 0x78c3cb84a0

--------------------------------
Class: AdDrugWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c4900
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c4880
	Image* Image;//[Offset: 0x350, Size: 0x8] 0x78c55c4800
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x358, Size: 0x8] 0x78c55c4780
	int SortPriority;//[Offset: 0x360, Size: 0x4] 0x78c55c4700
	bool bIsExisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1] 0x78c55c4680
	void UpdateInCaveState(bool bIsInCave, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3cb7cc0
	void SetSortPriority(int NewSortPriority, bool Temp_bool_Variable, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, int Temp_int_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* K2Node_Select_Default, PaperSprite* K2Node_Select_Default, PaperSprite* K2Node_Select_Default);// 0x8a873f8 0x78c3cb7e80
	void UpdateState(bool bIsExisted, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3cb8040

--------------------------------
Class: FlyPointWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c4600

--------------------------------
Class: TouGongWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c4500
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c4480
	void UpdateInCaveState(bool bIsInCave, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3cb7860

--------------------------------
Class: MoWenWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c4400
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c4380
	Image* Image;//[Offset: 0x350, Size: 0x8] 0x78c55c4300
	TextBlock* TextBlock;//[Offset: 0x358, Size: 0x8] 0x78c55c4280
	float RemainingTime;//[Offset: 0x360, Size: 0x4] 0x78c55c6300
	bool bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1] 0x78c55c6280
	bool bIsPulled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1] 0x78c55c6200
	TimerHandle TimerHandle;//[Offset: 0x368, Size: 0x8] 0x78c55c6180
	void UpdateText(bool Temp_bool_Variable, FText Temp_text_Variable, FString CallFunc_FormatTime_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText K2Node_Select_Default);// 0x8a873f8 0x78c3cba7a0
	void UpdateState(bool bIsOpen, bool Temp_bool_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, PaperSprite* K2Node_Select_Default);// 0x8a873f8 0x78c3cba880
	void Countdown();// 0x8a873f8 0x78c3cba960
	void SetRemainingTime(float RemainingTime);// 0x8a873f8 0x78c3cbaa40
	void OnInitialized();// 0x8a873f8 0x78c3cbab20
	void Construct();// 0x8a873f8 0x78c3cbace0
	void ExecuteUbergraph_MoWenWidget(int EntryPoint, float K2Node_CustomEvent_RemainingTime, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x8a873f8 0x78c3cb74e0

--------------------------------
Class: DragonRockWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c6100
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c6080
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x350, Size: 0x8] 0x78c55c6000
	void UpdateState(bool bOpen, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default);// 0x8a873f8 0x78c3cba5e0

--------------------------------
Class: SacrificeWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c5f80
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x78c55c5f00
	void SetIsBroken(bool bIsBroken, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, float K2Node_Select_Default);// 0x8a873f8 0x78c3cba260

--------------------------------
Class: keyBoxWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c5e00
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c5d80
	void UpdateInCaveState(bool bIsInCave, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3cb9ee0

--------------------------------
Class: ParadropWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c5d00
	void SetIsOpened(bool bIsOpened, bool Temp_bool_Variable, PaperSprite* Temp_object_Variable, PaperSprite* Temp_object_Variable, PaperSprite* K2Node_Select_Default);// 0x8a873f8 0x78c3cb9b60

--------------------------------
Class: TeamPlayerMarkWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c5c00
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c5b80
	int ID;//[Offset: 0x350, Size: 0x4] 0x78c55c5b00
	Vector Location;//[Offset: 0x354, Size: 0xc] 0x78c55c5a80
	int Number;//[Offset: 0x360, Size: 0x4] 0x78c55c5a00
	void Init(int ID, int Num);// 0x8a873f8 0x78c3cb9620
	void ExecuteUbergraph_TeamPlayerMarkWidget(int EntryPoint, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_CustomEvent_id, int K2Node_CustomEvent_Num);// 0x8a873f8 0x78c7617780

--------------------------------
Class: MapTeamPlayerWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c5900
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c5880
	TextBlock* IndexText;//[Offset: 0x350, Size: 0x8] 0x78c55c5800
	int ID;//[Offset: 0x358, Size: 0x4] 0x78c55c5780
	float Yaw;//[Offset: 0x35c, Size: 0x4] 0x78c55c5700
	int Number;//[Offset: 0x360, Size: 0x4] 0x78c55c5680
	bool Rotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1] 0x78c55c5600
	void Init(int PlayerID, int Num, int teammode, PaperSprite* Sprite);// 0x8a873f8 0x78c3cbc9c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c3cb91c0
	void ExecuteUbergraph_MapTeamPlayerWidget(int EntryPoint, int K2Node_CustomEvent_playerId, int K2Node_CustomEvent_Num, int K2Node_CustomEvent_TeamMode, PaperSprite* K2Node_CustomEvent_Sprite, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c3cb9380

--------------------------------
Class: TouTuoWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x340, Size: 0x8] 0x78c55c5500
	Image* Image;//[Offset: 0x348, Size: 0x8] 0x78c55c5480
	void UpdateActiveState(bool bIsActive, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3cbc640
	void UpdateInCaveState(bool bIsInCave, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x8a873f8 0x78c3cbc800

--------------------------------
Class: MapResourcePointWidget_C.MapPointBase_C.MapPointBaseUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78c55c5400
	WidgetAnimation* AnimFlash;//[Offset: 0x348, Size: 0x8] 0x78c55c5380
	Image* point_flag;//[Offset: 0x350, Size: 0x8] 0x78c55c5300
	Image* point_icon;//[Offset: 0x358, Size: 0x8] 0x78c55c7380
	LinearColor Color;//[Offset: 0x360, Size: 0x10] 0x78c55c7300
	int ID;//[Offset: 0x370, Size: 0x4] 0x78c55c7280
	void Init(int NewID);// 0x8a873f8 0x78c3cbc020
	void SetGetTeam(int Team);// 0x8a873f8 0x78c3cbc1e0
	void ExecuteUbergraph_MapResourcePointWidget(int EntryPoint, bool Temp_bool_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, bool Temp_bool_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Texture2D* Temp_object_Variable, Texture2D* K2Node_Select_Default, Texture2D* Temp_object_Variable, int K2Node_CustomEvent_NewId, Texture2D* K2Node_Select_Default, int K2Node_CustomEvent_Team, bool K2Node_SwitchInteger_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x8a873f8 0x78c3cbc3a0

--------------------------------
Class: ActorClickInterface_C.Interface.Object
	void ClickActorHit();// 0x8a873f8 0x78c37c4a00

--------------------------------
Class: BTT_UseDrug_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78c55cc680
	TimerHandle TimerHandle;//[Offset: 0xb0, Size: 0x8] 0x78b8995400
	NpcCharacter* NPC;//[Offset: 0xb8, Size: 0x8] 0x78b8995380
	void UseDrug(bool CallFunc_IsValid_ReturnValue, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_ItemCtrl_GetItemBagTypeAndIndex_BagType, int CallFunc_ItemCtrl_GetItemBagTypeAndIndex_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, GameItemInfo CallFunc_GetItemInfo_ReturnValue, int CallFunc_ItemCtrl_Server_AddItem_num);// 0x8a873f8 0x78c3788c80
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78c3788d60
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c3788f20
	void ExecuteUbergraph_BTT_UseDrug(int EntryPoint, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, enum CallFunc_State_GetPlayerChildState_ReturnValue, enum CallFunc_State_GetPlayerMotionState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_K2_TimerExistsHandle_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_IsClosed_Variable);// 0x8a873f8 0x78c3785720

--------------------------------
Class: BP_Child_TigerAnim_C.BP_Base_HorseAnim_C.AnimInstance.Object

--------------------------------
Class: BP_Child_HorseAnim_C.BP_Base_HorseAnim_C.AnimInstance.Object

--------------------------------
Class: BP_WuXiaHorseAnim_Sound_C.BP_WuXiaHorseAnim_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2588, Size: 0x8] 0x78ba5d3280
	SoundBase*[] SoundArray_Footstep_Def;//[Offset: 0x2590, Size: 0x10] 0x78be9f52e0
	SoundBase*[] SoundArray_Footstep_Grass;//[Offset: 0x25a0, Size: 0x10] 0x78be9f5240
	SoundBase*[] SoundArray_Footstep_Desert;//[Offset: 0x25b0, Size: 0x10] 0x78be9f51a0
	SoundBase*[] SoundArray_Footstep_Snow;//[Offset: 0x25c0, Size: 0x10] 0x78be9f5100
	SoundBase*[] SoundArray_Footstep_Wet;//[Offset: 0x25d0, Size: 0x10] 0x78be9f5060
	SoundBase*[] SoundArray_Footstep_Rock;//[Offset: 0x25e0, Size: 0x10] 0x78be9f4fc0
	void AnimNotify_Sound_Footstep();// 0x8a873f8 0x78c39827e0
	void ExecuteUbergraph_BP_WuXiaHorseAnim_Sound(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, const Actor*[] Temp_object_Variable, byte Temp_byte_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, SoundBase* CallFunc_Array_Get_Item, SoundBase*[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwningActor_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, byte CallFunc_GetSurfaceType_ReturnValue, SoundBase*[] K2Node_Select_Default, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, SoundBase* CallFunc_Array_Get_Item);// 0x8a873f8 0x78c39829a0

--------------------------------
Class: BuffTipWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78ba5d5100
	WidgetAnimation* StateAnimation;//[Offset: 0x268, Size: 0x8] 0x78ba5d5080
	WidgetAnimation* DebuffAnimation;//[Offset: 0x270, Size: 0x8] 0x78ba5d5000
	WidgetAnimation* BuffAnimation;//[Offset: 0x278, Size: 0x8] 0x78ba5d4f80
	Image* BuffTipImage;//[Offset: 0x280, Size: 0x8] 0x78ba5d4f00
	ScaleBox* BuffTipScaleBox;//[Offset: 0x288, Size: 0x8] 0x78ba5d4e80
	enum BuffTipType;//[Offset: 0x290, Size: 0x1] 0x78be9f6fa0
	bool IsBindFirstPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1] 0x78ba5d4d80
	delegate FinishedEvent;//[Offset: 0x298, Size: 0x10] 0x78ba5d4d00
	void OnFinished();// 0x8a873f8 0x78c3982000
	void SelectBrush(out Object* Brush, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x8a873f8 0x78c39820e0
	void SelectAnimation(out WidgetAnimation* Animation, enum Temp_byte_Variable, WidgetAnimation* K2Node_Select_Default);// 0x8a873f8 0x78c39821c0
	void Construct();// 0x8a873f8 0x78c39822a0
	void ExecuteUbergraph_BuffTipWidget(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, WidgetAnimation* CallFunc_SelectAnimation_Animation, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, Object* CallFunc_SelectBrush_Brush, bool Temp_bool_Variable, LinearColor K2Node_Select_Default, float K2Node_Select_Default);// 0x8a873f8 0x78c3982460
	void FinishedEvent__DelegateSignature();// 0x8a873f8 0x78c3982620

--------------------------------
Class: BP_BuffTipActor_C.BuffTipActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8] 0x78bd9a5500
	WidgetComponent* Widget;//[Offset: 0x230, Size: 0x8] 0x78bd9a5480
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8] 0x78bd9a5400
	float StateOffset;//[Offset: 0x240, Size: 0x4] 0x78bd9a5380
	float BuffOffset;//[Offset: 0x244, Size: 0x4] 0x78bd9a5300
	float DebuffOffset;//[Offset: 0x248, Size: 0x4] 0x78bd9a7380
	void OnFinished(Actor* CallFunc_GetOwner_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c32b22a0
	void SelectLocation(Vector DefaultLocation, Vector UpVector, out Vector Location, enum Temp_byte_Variable, float K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x8a873f8 0x78c32b2380
	void Show();// 0x8a873f8 0x78c32b2540
	void ExecuteUbergraph_BP_BuffTipActor(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BuffTipWidget_C* CallFunc_Create_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector CallFunc_GetActorUpVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_SelectLocation_Location, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x8a873f8 0x78c32b2700

--------------------------------
Class: BP_AI_Control_C.NpcAIController.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x330, Size: 0x8] 0x78bd9a6580
	FName TargetActorKeyName;//[Offset: 0x338, Size: 0x8] 0x78bd9a6500
	bool IsInSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x78bd9a6480
	void ReceiveBeginPlay();// 0x8a873f8 0x78c32b4840
	void BndEvt__ai_perception__K2Node_ComponentBoundEvent_1_ActorPerceptionUpdatedDelegate__DelegateSignature(Actor* Actor, AIStimulus Stimulus);// 0x8a873f8 0x78c32b4a00
	void ExecuteUbergraph_BP_AI_Control(int EntryPoint, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_NpcCharacter_C* K2Node_DynamicCast_AsBP_Npc_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RunBehaviorTree_ReturnValue, Actor* K2Node_ComponentBoundEvent_Actor, AIStimulus K2Node_ComponentBoundEvent_Stimulus, WuXiaXBaseCharacter* K2Node_DynamicCast_AsWu_Xia_XBase_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetPlayerUniqueId_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c32b4ae0

--------------------------------
Class: Mesh_CY_ShanBi_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78c5067600
	PoseableMeshComponent* L_Mesh;//[Offset: 0x228, Size: 0x8] 0x78c5067580
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8] 0x78c5067500
	SkeletalMeshComponent* Ghost;//[Offset: 0x238, Size: 0x8] 0x78c5067480
	SkeletalMeshComponent* L_Master;//[Offset: 0x240, Size: 0x8] 0x78c5067400
	MaterialInterface* GhostMaterial;//[Offset: 0x248, Size: 0x8] 0x78c5069480
	MaterialInstanceDynamic* L_GhostDinamMaterial;//[Offset: 0x250, Size: 0x8] 0x78c5069400
	bool TickBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x78c5069380
	Vector BaseScale;//[Offset: 0x25c, Size: 0xc] 0x78c5069300
	LinearColor Light;//[Offset: 0x268, Size: 0x10] 0x78c5069280
	Vector NowScale;//[Offset: 0x278, Size: 0xc] 0x78c5069200
	Vector LocationBegin;//[Offset: 0x284, Size: 0xc] 0x78c5069180
	Vector ForwardVector;//[Offset: 0x290, Size: 0xc] 0x78c5069100
	Vector NowLocation;//[Offset: 0x29c, Size: 0xc] 0x78c5069080
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c32bb680
	void Begin_ghost();// 0x8a873f8 0x78c32bb840
	void ExecuteUbergraph_Mesh_CY_ShanBi(int EntryPoint, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetComponentScale_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, Vector CallFunc_GetDirectionUnitVector_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c32bba00

--------------------------------
Class: Mesh_CY_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78c506b180
	PoseableMeshComponent* PoseableMesh2;//[Offset: 0x228, Size: 0x8] 0x78c506b100
	PoseableMeshComponent* PoseableMesh3;//[Offset: 0x230, Size: 0x8] 0x78c506b080
	PoseableMeshComponent* PoseableMesh4;//[Offset: 0x238, Size: 0x8] 0x78c506b000
	PoseableMeshComponent* PoseableMesh5;//[Offset: 0x240, Size: 0x8] 0x78c506af80
	PoseableMeshComponent* PoseableMesh7;//[Offset: 0x248, Size: 0x8] 0x78c506af00
	PoseableMeshComponent* PoseableMesh1;//[Offset: 0x250, Size: 0x8] 0x78c506ae80
	PoseableMeshComponent* PoseableMesh6;//[Offset: 0x258, Size: 0x8] 0x78c506ae00
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8] 0x78c506ad80
	SkeletalMeshComponent* Ghost;//[Offset: 0x268, Size: 0x8] 0x78c506ad00
	SkeletalMeshComponent* L_Master;//[Offset: 0x270, Size: 0x8] 0x78c506ac80
	MaterialInterface* GhostMaterial;//[Offset: 0x278, Size: 0x8] 0x78c506ac00
	MaterialInstanceDynamic* L_GhostDinamMaterial;//[Offset: 0x280, Size: 0x8] 0x78c506ab80
	bool TickBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x78c506ab00
	Vector BaseScale;//[Offset: 0x28c, Size: 0xc] 0x78c506aa80
	LinearColor Light;//[Offset: 0x298, Size: 0x10] 0x78c506aa00
	Vector NowScale;//[Offset: 0x2a8, Size: 0xc] 0x78c506a980
	Vector LocationBegin;//[Offset: 0x2b4, Size: 0xc] 0x78c506a900
	Vector ForwardVector;//[Offset: 0x2c0, Size: 0xc] 0x78c506a880
	Vector NowLocation;//[Offset: 0x2cc, Size: 0xc] 0x78c506a800
	WuXiaXBaseCharacter* WuXiaX;//[Offset: 0x2d8, Size: 0x8] 0x78c506a780
	SkeletalMeshComponent* Mesh;//[Offset: 0x2e0, Size: 0x8] 0x78c506a700
	SkeletalMeshComponent* Mesh;//[Offset: 0x2e8, Size: 0x8] 0x78c506a680
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f0, Size: 0x8] 0x78c506a600
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f8, Size: 0x8] 0x78c506a580
	SkeletalMeshComponent* Mesh;//[Offset: 0x300, Size: 0x8] 0x78c506c600
	SkeletalMeshComponent* Mesh;//[Offset: 0x308, Size: 0x8] 0x78c506c580
	SkeletalMeshComponent* Mesh;//[Offset: 0x310, Size: 0x8] 0x78c506c500
	LinearColor ColorChange;//[Offset: 0x318, Size: 0x10] 0x78c506c480
	void SetMinLOD(SkinnedMeshComponent* SetMesh);// 0x8a873f8 0x78c32be5c0
	void SetPoseableMeshComponent(SkinnedMeshComponent* MeshNumber, SkinnedMeshComponent* PoseableMeshNumber, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_GetNumLODs_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8a873f8 0x78c32be6a0
	void Begin_ghost();// 0x8a873f8 0x78c32badc0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c32baea0
	void ReceiveBeginPlay();// 0x8a873f8 0x78c32baf80
	void BeginGhost(PlayerCapture_C* Player);// 0x8a873f8 0x78c32bb140
	void ExecuteUbergraph_Mesh_CY(int EntryPoint, Vector CallFunc_K2_GetComponentLocation_ReturnValue, ActorComponent* CallFunc_GetGameComponent_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, PlayerViewComponent* K2Node_DynamicCast_AsPlayer_View_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, Vector CallFunc_GetDirectionUnitVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, SkeletalMeshComponentBudgeted* CallFunc_GetBodyMeshCompByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, PlayerCapture_C* K2Node_CustomEvent_Player, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_DeltaSeconds, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, Vector CallFunc_GetDirectionUnitVector_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x8a873f8 0x78c32bb300

--------------------------------
Class: BP_GuideUI_C.GuideUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390, Size: 0x8] 0x78c4c12c00
	Button* BackButton;//[Offset: 0x398, Size: 0x8] 0x78c4c12b80
	GuideTeachSpriteWidget_C* GuideTeachSpriteWidget;//[Offset: 0x3a0, Size: 0x8] 0x78c4c12b00
	Button* IKnowButton;//[Offset: 0x3a8, Size: 0x8] 0x78c4c12a80
	WidgetSwitcher* IntroductionSwitcher;//[Offset: 0x3b0, Size: 0x8] 0x78c4c12a00
	Image* Line;//[Offset: 0x3b8, Size: 0x8] 0x78c4c12980
	Image* Line;//[Offset: 0x3c0, Size: 0x8] 0x78c4c12900
	Image* Line;//[Offset: 0x3c8, Size: 0x8] 0x78c4c12880
	Image* Line;//[Offset: 0x3d0, Size: 0x8] 0x78c4c12800
	Image* Line;//[Offset: 0x3d8, Size: 0x8] 0x78c4c12780
	Image* Line;//[Offset: 0x3e0, Size: 0x8] 0x78c4c12700
	Image* Line;//[Offset: 0x3e8, Size: 0x8] 0x78c4c12680
	Image* Line;//[Offset: 0x3f0, Size: 0x8] 0x78c4c12600
	Image* Line;//[Offset: 0x3f8, Size: 0x8] 0x78c4c12580
	Image* Line;//[Offset: 0x400, Size: 0x8] 0x78c4c12500
	Image* Line;//[Offset: 0x408, Size: 0x8] 0x78c4c12480
	Image* Line;//[Offset: 0x410, Size: 0x8] 0x78c4c12400
	Image* Line;//[Offset: 0x418, Size: 0x8] 0x78c4c12380
	Image* Line;//[Offset: 0x420, Size: 0x8] 0x78c4c12300
	RichTextBlock* RichTextBlock;//[Offset: 0x428, Size: 0x8] 0x78c4c12280
	RichTextBlock* RichTextBlock;//[Offset: 0x430, Size: 0x8] 0x78c4c12200
	RichTextBlock* RichTextBlock;//[Offset: 0x438, Size: 0x8] 0x78c4c12180
	ScaleBox* TutorialBox;//[Offset: 0x440, Size: 0x8] 0x78c4c14200
	Image* TutorialImage;//[Offset: 0x448, Size: 0x8] 0x78c4c14180
	FText[] names;//[Offset: 0x450, Size: 0x10] 0x78b9b0d120
	GuideTaskPanelWidget_C* TaskWidget;//[Offset: 0x460, Size: 0x8] 0x78c4c14080
	void ShowMessage(out const FText Content);// 0x8a873f8 0x78c2f77940
	void UpdateCullWidgetType(enum Type, bool bForceFade, bool bForceFadeCircle);// 0x8a873f8 0x78c2f77a20
	void Construct();// 0x8a873f8 0x78c2f77b00
	void ShowSpirit(out const FText Content);// 0x8a873f8 0x78c2f77be0
	void UpdateTaskState(out const FText TaskText, bool bFinished);// 0x8a873f8 0x78c2f77cc0
	void UpdateTasks(out const FText title, out const GuideTaskAdv*[] Tasks);// 0x8a873f8 0x78c2f77da0
	void FadeoutTaskPanel();// 0x8a873f8 0x78c2f77e80
	void ShowTutorial(Texture2D* Tex);// 0x8a873f8 0x78c2f77f60
	void ShowIntroduction(int index);// 0x8a873f8 0x78c2f78040
	void BndEvt__IKnowButton_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c2f78120
	void BndEvt__BackButton_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x8a873f8 0x78c2f78200
	void PlayFocusAnim(enum Type);// 0x8a873f8 0x78c2f782e0
	void Destruct();// 0x8a873f8 0x78c2f784a0
	void ExecuteUbergraph_BP_GuideUI(int EntryPoint, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GuideTaskPanelWidget_C* CallFunc_Create_ReturnValue, const FText K2Node_Event_Content, enum K2Node_Event_Type, bool K2Node_Event_bForceFade, bool K2Node_Event_bForceFadeCircle, bool CallFunc_TextIsEmpty_ReturnValue, BP_GuideTouchCulling_C* K2Node_DynamicCast_AsBP_Guide_Touch_Culling, bool K2Node_DynamicCast_bSuccess, const FText K2Node_Event_Content, BP_GuideTouchCulling_C* K2Node_DynamicCast_AsBP_Guide_Touch_Culling, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_TextToString_ReturnValue, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, const FText K2Node_Event_TaskText, bool K2Node_Event_bFinished, const FText K2Node_Event_Title, const GuideTaskAdv*[] K2Node_Event_Tasks, GuideTaskAdv* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, Texture2D* K2Node_Event_Tex, bool CallFunc_IsValid_ReturnValue, int K2Node_Event_Index, bool CallFunc_GreaterEqual_IntInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsInLobby_ReturnValue, enum K2Node_Event_Type, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, BP_GuideTouchCulling_C* K2Node_DynamicCast_AsBP_Guide_Touch_Culling, bool K2Node_DynamicCast_bSuccess, BP_GuideTouchCulling_C* K2Node_DynamicCast_AsBP_Guide_Touch_Culling, bool K2Node_DynamicCast_bSuccess, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, bool CallFunc_FinishTask_IsAllFinished);// 0x8a873f8 0x78c2f78660

--------------------------------
Class: BP_LuaCycleEventManager_C.LuaObjectBase.Object
	<int,SoftClassPath> WidgetsPath;//[Offset: 0x30, Size: 0x50] 0x78c33879c0
	FString GetModuleName();// 0x8a873f8 0x78c2f7ace0
	void GetSoftClassPath(SoftClassPath SoftClassPath, out FString Ret, FString CallFunc_BreakSoftClassPath_PathString);// 0x8a873f8 0x78c2f774e0

--------------------------------
Class: BP_LightDebugInfo_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4c13300
	EditableText* EditableText;//[Offset: 0x268, Size: 0x8] 0x78c4c13280
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8] 0x78c4c13200
	LightTriggerBox* LightTriggerBox;//[Offset: 0x278, Size: 0x8] 0x78c4c15280
	FName Property Name;//[Offset: 0x280, Size: 0x8] 0x78c4c15200
	void UpdateValue(WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetValueFromName_Value, FString CallFunc_Conv_FloatToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c2f7a500
	void PreConstruct(bool IsDesignTime);// 0x8a873f8 0x78c2f7a5e0
	void Construct();// 0x8a873f8 0x78c2f7a6c0
	void BndEvt__EditableText_131_K2Node_ComponentBoundEvent_0_OnEditableTextCommittedEvent__DelegateSignature(out const FText text, byte CommitMethod);// 0x8a873f8 0x78c2f7a880
	void ExecuteUbergraph_BP_LightDebugInfo(int EntryPoint, bool K2Node_Event_IsDesignTime, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, FString CallFunc_Conv_TextToString_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FText CallFunc_Conv_NameToText_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x8a873f8 0x78c2f7aa40

--------------------------------
Class: obTreasureBoxItemList_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78c4c15d00
	CanvasPanel* emptyNotice;//[Offset: 0x268, Size: 0x8] 0x78c4c15c00
	TextBlock* emptyNoticeTxt;//[Offset: 0x270, Size: 0x8] 0x78c4c15b80
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x78c4c15b00
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x78c4c15a80
	VerticalBox* itemList;//[Offset: 0x288, Size: 0x8] 0x78c4c15a00
	obParadropShowHideNotice_C* obParadropShowHideNotice;//[Offset: 0x290, Size: 0x8] 0x78c4c15980
	CanvasPanel* paraList;//[Offset: 0x298, Size: 0x8] 0x78c4c15900
	int paradropID;//[Offset: 0x2a0, Size: 0x4] 0x78c4c15880
	bool inited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1] 0x78c4c15800
	void Refresh(bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, obTreasureBoxItemEntry_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientInfo* CallFunc_GetOBClientInfo_ReturnValue, OBParadropItemInfo CallFunc_GetParadropDetailInfo_info, bool CallFunc_GetParadropDetailInfo_ReturnValue, GameItemInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c2f7c8e0
	void OnParadropChange(int paraID, int ItemId, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c2f7c9c0
	void SetInfo(int paraID, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue);// 0x8a873f8 0x78c2f790e0
	void Construct();// 0x8a873f8 0x78c2f791c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c2f79380
	void ExecuteUbergraph_obTreasureBoxItemList(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, OBClientUIHelper* CallFunc_GetOBClientUIHelper_ReturnValue, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue);// 0x8a873f8 0x78c2f79540

--------------------------------
Class: obTreasureBoxItemEntry_C.UserWidget.Widget.Visual.Object
	Image* BackgroundImage;//[Offset: 0x260, Size: 0x8] 0x78bc8b0e00
	Image* HoveredImage;//[Offset: 0x268, Size: 0x8] 0x78bc8b0d80
	Image* ItemImage;//[Offset: 0x270, Size: 0x8] 0x78bc8b0d00
	TextBlock* ItemNameText;//[Offset: 0x278, Size: 0x8] 0x78bc8b0c80
	TextBlock* ItemNumberText;//[Offset: 0x280, Size: 0x8] 0x78bc8b0c00
	TextBlock* Learn;//[Offset: 0x288, Size: 0x8] 0x78bc8b0b80
	Image* LevelImage;//[Offset: 0x290, Size: 0x8] 0x78bc8b0b00
	void SetInfo(int ItemId, int temNum, FText CallFunc_Conv_IntToText_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PaperSprite* CallFunc_GetItemIconTexture_ReturnValue, FString CallFunc_GetItemName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x8a873f8 0x78c761d8a0

--------------------------------
Class: BP_LightDebugWidget_C.LightDebugWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78bc6a1e80
	BP_LightDebugInfo_C* BloomIntensity;//[Offset: 0x268, Size: 0x8] 0x78bc6a1e00
	BP_LightDebugInfo_C* DirectionalLightIntensity;//[Offset: 0x270, Size: 0x8] 0x78bc6a1d80
	BP_LightDebugInfo_C* ExposureCompensation;//[Offset: 0x278, Size: 0x8] 0x78bc6a1d00
	BP_LightDebugInfo_C* ExposureMaxBrightness;//[Offset: 0x280, Size: 0x8] 0x78bc6a1c80
	BP_LightDebugInfo_C* ExposureMinBrightness;//[Offset: 0x288, Size: 0x8] 0x78bc6a1c00
	BP_LightDebugInfo_C* FogDensity;//[Offset: 0x290, Size: 0x8] 0x78bc6a1b80
	BP_LightDebugInfo_C* FogHeightFalloff;//[Offset: 0x298, Size: 0x8] 0x78bc6a1b00
	BP_LightDebugInfo_C* ForMaxOpacity;//[Offset: 0x2a0, Size: 0x8] 0x78bc6a1a80
	BP_LightDebugInfo_C* ImageEffectsVignetteIntensity;//[Offset: 0x2a8, Size: 0x8] 0x78bc6a1a00
	ScrollBox* ScrollBox;//[Offset: 0x2b0, Size: 0x8] 0x78bc6a1980
	BP_LightDebugInfo_C* SkyLightIntensity;//[Offset: 0x2b8, Size: 0x8] 0x78bc6a1900
	BP_LightDebugInfo_C* StartDistance;//[Offset: 0x2c0, Size: 0x8] 0x78bc6a1880
	BP_LightDebugInfo_C* WhiteBalanceTemp;//[Offset: 0x2c8, Size: 0x8] 0x78bc6a1800
	FName Property Name;//[Offset: 0x2d0, Size: 0x8] 0x78bc6a1780
	void UpdateInfo(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Array_Length_ReturnValue, Widget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_LightDebugInfo_C* K2Node_DynamicCast_AsBP_Light_Debug_Info, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c2fd5800
	void Construct();// 0x8a873f8 0x78c2fd59c0
	void ExecuteUbergraph_BP_LightDebugWidget(int EntryPoint);// 0x8a873f8 0x78c2fd6280

--------------------------------
Class: BP_Paradrop_C.WuXiaParadrop.WuXiaInteractiveActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 0x8] 0x78bc6a1500
	SphereComponent* Sphere;//[Offset: 0x3a8, Size: 0x8] 0x78bc6a1480
	StaticMeshComponent* StaticMesh1;//[Offset: 0x3b0, Size: 0x8] 0x78bc6a1400
	StaticMeshComponent* StaticMesh;//[Offset: 0x3b8, Size: 0x8] 0x78bc6a1380
	BoxComponent* Box1;//[Offset: 0x3c0, Size: 0x8] 0x78bc6a1300
	WidgetComponent* Widget;//[Offset: 0x3c8, Size: 0x8] 0x78bc6a1280
	BoxComponent* Box;//[Offset: 0x3d0, Size: 0x8] 0x78bc6a1200
	float Timeline_0_NewTrack_0_6584331841F60C8346D5B4AB29ECC26D;//[Offset: 0x3d8, Size: 0x4] 0x78bc6a1180
	byte Timeline_0__Direction_6584331841F60C8346D5B4AB29ECC26D;//[Offset: 0x3dc, Size: 0x1] 0x78bc6a1100
	TimelineComponent* Timeline;//[Offset: 0x3e0, Size: 0x8] 0x78bc6a3180
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1] 0x78bc6a3100
	float InteractiveRange;//[Offset: 0x3ec, Size: 0x4] 0x78bc6a3080
	bool paraInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1] 0x78bc6a3000
	Vector lastDistVec;//[Offset: 0x3f4, Size: 0xc] 0x78bc6a2f80
	Actor* savedPawnActor;//[Offset: 0x400, Size: 0x8] 0x78bc6a2f00
	void FindAndSignOtherParadrop(Character* self2, Vector OtherParadropEndLocation, float Distance, Vector CallFunc_K2_GetActorLocation_ReturnValue, Controller* CallFunc_GetController_ReturnValue, int Temp_int_Array_Index_Variable, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetAutoSignDis_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, BP_Paradrop_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_Paradrop_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x8a873f8 0x78c2fd20e0
	bool GetStandAndLookLocation(Vector playerlocation, out Vector standlocation, out Vector LookAtLocation, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x8a873f8 0x78c2fd21c0
	enum GetInteractiveType(WuXiaXBaseCharacter* Player);// 0x8a873f8 0x78c2fd22a0
	bool InteractiveUITips(WuXiaXBaseCharacter* Player, out FText text, FText CallFunc_InteractiveUITips_text, bool CallFunc_InteractiveUITips_ReturnValue);// 0x8a873f8 0x78c2fd2380
	bool CanInteractive(WuXiaXBaseCharacter* Player, enum Trigger, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x8a873f8 0x78c2fd2460
	void Timeline_0__FinishedFunc();// 0x8a873f8 0x78c2fd2540
	void Timeline_0__UpdateFunc();// 0x8a873f8 0x78c2fd2620
	void ReceiveBeginPlay();// 0x8a873f8 0x78c2fd2700
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c2fd27e0
	void PlaySound();// 0x8a873f8 0x78c2fd28c0
	void StopSound();// 0x8a873f8 0x78c2fd29a0
	void Interactive(int PlayerID);// 0x8a873f8 0x78c2fd2a80
	void BeginKeepInteractive();// 0x8a873f8 0x78c2fd2b60
	void BreakKeepInteractive();// 0x8a873f8 0x78c2fd2c40
	void OnStateUpdate();// 0x8a873f8 0x78c2fd2d20
	void ForceParadropOpened();// 0x8a873f8 0x78c2fd2e00
	void OnComponentBeginOverlap_Event(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8a873f8 0x78c2fd2ee0
	void OnComponentEndOverlap_Event(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x8a873f8 0x78c2fd2fc0
	void BndEvt__Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8a873f8 0x78c2fd30a0
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8a873f8 0x78c2fd3420
	void ExecuteUbergraph_BP_Paradrop(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Rotator CallFunc_GetControlRotation_ReturnValue, WuXiaXOBController* K2Node_DynamicCast_AsWu_Xia_XOBController, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetAxes_X, Vector CallFunc_GetAxes_Y, Vector CallFunc_GetAxes_Z, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, obTreasureBoxItemList_C* K2Node_DynamicCast_AsOb_Treasure_Box_Item_List, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetGlobalID_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, Rotator CallFunc_MakeRotFromX_ReturnValue, WuxiaXOBPawn* K2Node_DynamicCast_AsWuxia_XOBPawn, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetAxes_X, Vector CallFunc_GetAxes_Y, Vector CallFunc_GetAxes_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_VSizeXY_ReturnValue, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, int K2Node_Event_playerid, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, InteractiveInfo K2Node_MakeStruct_InteractiveInfo, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, PrimitiveComponent* K2Node_CustomEvent_OverlappedComponent, Actor* K2Node_CustomEvent_OtherActor, PrimitiveComponent* K2Node_CustomEvent_OtherComp, int K2Node_CustomEvent_OtherBodyIndex, bool K2Node_CustomEvent_bFromSweep, const HitResult K2Node_CustomEvent_SweepResult, float CallFunc_GetAutoSignDis_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, Controller* CallFunc_GetController_ReturnValue, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetAutoClearSignDis_ReturnValue, PrimitiveComponent* K2Node_CustomEvent_OverlappedComponent, Actor* K2Node_CustomEvent_OtherActor, PrimitiveComponent* K2Node_CustomEvent_OtherComp, int K2Node_CustomEvent_OtherBodyIndex, bool CallFunc_HasAuthority_ReturnValue, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, const Transform Temp_struct_Variable, WuXiaXPlayerController* K2Node_DynamicCast_AsWu_Xia_XPlayer_Controller, bool K2Node_DynamicCast_bSuccess, SphereComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerFightComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, WuXiaXCharacter* K2Node_DynamicCast_AsWu_Xia_XCharacter, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const Transform Temp_struct_Variable, bool CallFunc_RandomBool_ReturnValue, SphereComponent* CallFunc_AddComponent_ReturnValue, float CallFunc_SelectFloat_ReturnValue);// 0x8a873f8 0x78c2fd35e0

--------------------------------
Class: BP_OutJamming_C.WuXiaOutJamming.WuXiaInteractiveActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 0x8] 0x78bc6a2e80
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8] 0x78bc6a2e00
	bool GetStandAndLookLocation(Vector playerlocation, out Vector standlocation, out Vector LookAtLocation);// 0x8a873f8 0x78c2fd4ca0
	void Interactive(int PlayerID);// 0x8a873f8 0x78c2fd4e60
	void ExecuteUbergraph_BP_OutJamming(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, int K2Node_Event_playerid);// 0x8a873f8 0x78c2fd5020

--------------------------------
Class: BP_ClientParadrop_C.ClientParadrop.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8] 0x78bc6a2d80
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x230, Size: 0x8] 0x78bc6a2d00
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8] 0x78bc6a2c80
	void PlaySound();// 0x8a873f8 0x78c2fd4760
	void ExecuteUbergraph_BP_ClientParadrop(int EntryPoint, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x8a873f8 0x78c2fd4920

--------------------------------
Class: BP_PickItem_C.PickItem.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x300, Size: 0x8] 0x78bc6a2c00
	NiagaraComponent* Niagara;//[Offset: 0x308, Size: 0x8] 0x78bc6a2b80
	SplineComponent* Spline;//[Offset: 0x310, Size: 0x8] 0x78bc6a2b00
	Vector EndLocation;//[Offset: 0x318, Size: 0xc] 0x78bc6a2a80
	TimerHandle MoveHandle;//[Offset: 0x328, Size: 0x8] 0x78bc6a2a00
	Vector Velocity;//[Offset: 0x330, Size: 0xc] 0x78bc6a2980
	float Time;//[Offset: 0x33c, Size: 0x4] 0x78bc6a2900
	bool bBeginShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x78bc6a2880
	Vector InitialLocation;//[Offset: 0x344, Size: 0xc] 0x78bc6a2800
	void DynamicAjustSpline(float Horizontal, float Vertical, bool CallFunc_RandomBool_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_SelectInt_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_RandomFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x8a873f8 0x78c2fd3c00
	void ReceiveBeginPlay();// 0x8a873f8 0x78c2fd3ce0
	void ReceiveTick(float DeltaSeconds);// 0x8a873f8 0x78c2fd3dc0
	void ShowSpecialEffect();// 0x8a873f8 0x78c2fd3ea0
	void HideSpecialEffect();// 0x8a873f8 0x78c2fd3f80
	void BoxItemBeginShow();// 0x8a873f8 0x78c2fd4140
	void ExecuteUbergraph_BP_PickItem(int EntryPoint, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float K2Node_Event_DeltaSeconds, int Temp_int_Variable, Vector CallFunc_GetLocationAtTime_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, int Temp_int_Variable, Vector CallFunc_GetLocationAtSplinePoint_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int K2Node_Select_Default, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x8a873f8 0x78c2fd4300

--------------------------------
Class: LoadingWidget_C.LoadingUI.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8] 0x78bc6a2500
	Image* bg_image;//[Offset: 0x278, Size: 0x8] 0x78bc6a2480
	CanvasPanel* CanvasPanel;//[Offset: 0x280, Size: 0x8] 0x78bc6a2400
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x78bc6a2380
	Image* LightImage;//[Offset: 0x290, Size: 0x8] 0x78bc6a2300
	Image* LoadingHead;//[Offset: 0x298, Size: 0x8] 0x78bc6a2280
	ProgressBar* LoadingProgressBarButtom;//[Offset: 0x2a0, Size: 0x8] 0x78bc6a2200
	CanvasPanel* OutPanel;//[Offset: 0x2a8, Size: 0x8] 0x78bc6a2180
	CanvasPanel* Panel;//[Offset: 0x2b0, Size: 0x8] 0x78bc6a4200
	TextBlock* TextBlock;//[Offset: 0x2b8, Size: 0x8] 0x78bc6a4180
	UIParticleEmitter* UIP_FX_01;//[Offset: 0x2c0, Size: 0x8] 0x78bc6a4100
	Image* UIP_FX_03;//[Offset: 0x2c8, Size: 0x8] 0x78bc6a4080
	UIParticleEmitter* UIP_FX_04;//[Offset: 0x2d0, Size: 0x8] 0x78bc6a4000
	FText[] RemindText;//[Offset: 0x2d8, Size: 0x10] 0x78bc9e0240
	float guideshowtime;//[Offset: 0x2e8, Size: 0x4] 0x78bc6a3f00
	float barspeed;//[Offset: 0x2ec, Size: 0x4] 0x78bc6a3e80
	float force_remove_time;//[Offset: 0x2f0, Size: 0x4] 0x78bc6a3e00
	void TickAutoRemove(float DeltaTime, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, AIAutoRunHandle* CallFunc_GetAIAutoRunHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, ClientLoginHUD* K2Node_DynamicCast_AsClient_Login_HUD, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x8a873f8 0x78c2fd5f00
	void Construct();// 0x8a873f8 0x78c2fd5fe0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x8a873f8 0x78c2fd60c0
	void SetPercent(float percent);// 0x8a873f8 0x78c2fd61a0
	void CompleteAndRemoveSelf();// 0x8a873f8 0x78c2fd6360
	void ExecuteUbergraph_LoadingWidget(int EntryPoint, WuXiaXGameInstance* CallFunc_GetGameInstance_ReturnValue, bool Temp_bool_IsClosed_Variable, float CallFunc_Subtract_FloatFloat_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int CallFunc_RandomIntegerInRange_ReturnValue, float K2Node_Event_percent, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, ClientLoginHUD* K2Node_DynamicCast_AsClient_Login_HUD, bool K2Node_DynamicCast_bSuccess, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, Texture2D* CallFunc_GetTexture_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, ClientLoginHUD* K2Node_DynamicCast_AsClient_Login_HUD, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c2fd6520

--------------------------------
Class: BP_GuideAdv_C.Guide.Object

--------------------------------
Class: BP_LuaObjectManager_C.LuaObjectManager.LuaObjectBase.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x40, Size: 0x8] 0x78bc6a5980
	<FName,LuaObjectBase*> Managers;//[Offset: 0x48, Size: 0x50] 0x78c338ee00
	FString GetModuleName();// 0x8a873f8 0x78c2fd89e0
	void CreateManagers(<FName,class LuaObjectBase> LocalManagers, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, <FName,class LuaObjectBase> K2Node_MakeVariable_MakeVariableOutput, int CallFunc_Map_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, Object* CallFunc_GetOwner_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, class LuaObjectBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, LuaObjectBase* CallFunc_SpawnObject_ReturnValue);// 0x8a873f8 0x78c2fd8ac0
	void GetManager(FName ManagerName, out LuaObjectBase* Value, LuaObjectBase* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x8a873f8 0x78c2fd8ba0
	void ReceiveInit();// 0x8a873f8 0x78c2fd8d60
	void ExecuteUbergraph_BP_LuaObjectManager(int EntryPoint);// 0x8a873f8 0x78c2fd8f20

--------------------------------
Class: PlayerCaptureABP_YueHua_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_XZM_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_TMR_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_ShenLian_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_QinShi_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_MaNingEr_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_LYZT_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_DingYuan_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: PlayerCaptureABP_DingXiu_C.PlayerCaptureABP_C.WuXia_AnimInstance.AnimInstance.Object

--------------------------------
Class: BTT_RangeAttack_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78bc8b4a80
	int RangeWeaponItemId;//[Offset: 0xb0, Size: 0x4] 0x78bc8b4a00
	int MissileItemId;//[Offset: 0xb4, Size: 0x4] 0x78bc8b4980
	int LaunchNum;//[Offset: 0xb8, Size: 0x4] 0x78bc8b4900
	int LeftLaunchNum;//[Offset: 0xbc, Size: 0x4] 0x78bc8b4880
	float LaunchDelay;//[Offset: 0xc0, Size: 0x4] 0x78bc8b4800
	float LaunchRemainingTime;//[Offset: 0xc4, Size: 0x4] 0x78bc8b4780
	int RangeWeaponMode;//[Offset: 0xc8, Size: 0x4] 0x78bc8b4700
	int CostItemID;//[Offset: 0xcc, Size: 0x4] 0x78bc8b4680
	int CostItemNum;//[Offset: 0xd0, Size: 0x4] 0x78bc8b4600
	void ResetLaunchRemainingTime(int Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float K2Node_Select_Default);// 0x8a873f8 0x78c2fd4ae0
	void CheckLaunchNum(ComponentMiddle* MiddleComponent, enum CallFunc_State_GetPlayerChildState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c2fd4d80
	void CheckLaunch(ComponentMiddle* MiddleComponent, float DeltaSeconds, enum CallFunc_State_GetPlayerChildState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Fight_Is_in_block_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue);// 0x8a873f8 0x78c2fd43e0
	void InitRangeWeaponMode(GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetWeaponModeByWeaponItemId_ReturnValue);// 0x8a873f8 0x78c2fd4680
	void InitRangeWeaponType(NpcCharacter* NpcCharacter, int RangeWeaponType, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, WuXiaXGameInstance* K2Node_DynamicCast_AsWu_Xia_XGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetWeaponTypeByWeaponItemId_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c2fd7080
	void CheckIsWeaponTook(ComponentMiddle* MiddleComponent, int WeaponItemId, bool CallFunc_IsValid_ReturnValue, enum CallFunc_ItemCtrl_GetItemBagTypeAndIndex_BagType, int CallFunc_ItemCtrl_GetItemBagTypeAndIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Fight_GetCurrentWeapon_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x8a873f8 0x78c2fd6600
	void CheckIsWeaponEquiped(ComponentMiddle* MiddleComponent, int WeaponItemId, bool CallFunc_IsValid_ReturnValue, enum CallFunc_ItemCtrl_GetItemBagTypeAndIndex_BagType, int CallFunc_ItemCtrl_GetItemBagTypeAndIndex_ReturnValue, GameItemInfo CallFunc_ItemCtrl_GetItemInfo_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x8a873f8 0x78c2fd66e0
	void CheckItemNum(ComponentMiddle* MiddleComponent, int ItemId, int ItemNum, bool CallFunc_IsValid_ReturnValue, int CallFunc_ItemCtrl_GetItemNumById_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8a873f8 0x78c2fd6c20
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x8a873f8 0x78c2fd84a0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x8a873f8 0x78ce57f3c0
	void ExecuteUbergraph_BTT_RangeAttack(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, bool CallFunc_Greater_IntInt_ReturnValue, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess, ComponentMiddle* CallFunc_GetMiddleComponent_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, NpcCharacter* K2Node_DynamicCast_AsNpc_Character, bool K2Node_DynamicCast_bSuccess);// 0x8a873f8 0x78c6334140

--------------------------------
Class: ImageUIBasic_BP_C.ImageMessageUI.UserWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8] 0x78bc8b7d00
	WidgetAnimation* ShowTitleAnim;//[Offset: 0x348, Size: 0x8] 0x78bc8b7c80
	Image* bg;//[Offset: 0x350, Size: 0x8] 0x78bc8b7c00
	Button* closebtn;//[Offset: 0x358, Size: 0x8] 0x78bc8b7b80
	Image* Image;//[Offset: 0x360, Size: 0x8] 0x78bc8b7b00
	Image* Image;//[Offset: 0x368, Size: 0x8] 0x78bc8b7a80
	WrapBox* LargeContainer;//[Offset: 0x370, Size: 0x8] 0x78bc8b7a00
	ImageMsgItemInfo[] Info;//[Offset: 0x378, Size: 0x10] 0x78bc9e5ba0
	void Construct();// 0x8a873f8 0x78c2f7d7c0
	void BndEvt__BgBtn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x8a873f8 0x78d1d63340
	void InitData(out const ImageMsgItemInfo[] Info);// 0x8a873f8 0x78c5e4c720
	void ExecuteUbergraph_ImageUIBasic_BP(int EntryPoint, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ImageMsgItemInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const ImageMsgItemInfo[] K2Node_Event_info, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, ImageItemWidget_BP_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x8a873f8 0x78c65b2c40

--------------------------------
Class: BP_Anim_NPCLeader_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78bc2cb280
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78bc2cb200
	AnimNode_LinkedInputPose AnimGraphNode_SubInput;//[Offset: 0x2f8, Size: 0x118] 0x78bc2cb180
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x410, Size: 0x108] 0x78bc2cb100
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x518, Size: 0x20] 0x78bc2cb080
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x538, Size: 0x20] 0x78bc2cb000
	void AnimGraph(PoseLink InPose, out PoseLink AnimGraph);// 0x8a873f8 0x78c9a43880
	void ExecuteUbergraph_BP_Anim_NPCLeader(int EntryPoint);// 0x8a873f8 0x78c39ae780

--------------------------------
Class: AnimNode_LinkedInputPose.AnimNode_Base
	FName Name;//[Offset: 0x10, Size: 0x8] 0x78cf076200
	FName Graph;//[Offset: 0x18, Size: 0x8] 0x78cf076280
	PoseLink InputPose;//[Offset: 0x20, Size: 0x10] 0x78cf076300

--------------------------------
