Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8]
	Level*[] Levels;//[Offset: 0x138, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 0x8]
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x1f8, Size: 0x8]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x200, Size: 0x50]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x250, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x260, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x5e0, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x678, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x2d78d0be4041
	void HandleTimelineScrubbed();// 0x2d77d0be4041

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x9a4d0be4031

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 0x10]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x460, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x20c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x20d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x20e, Size: 0x1]
	enum LightmapType;//[Offset: 0x20f, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 0x1]
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 0x1]
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x218, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x21a, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x21b, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x21c, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x220, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x228, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x238, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x250, Size: 0x4]
	float TranslucencySortDistanceOffset;//[Offset: 0x254, Size: 0x4]
	int VisibilityId;//[Offset: 0x258, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x260, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x270, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x271, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x272, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x273, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x278, Size: 0x4]
	float BoundsScale;//[Offset: 0x284, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x298, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a8, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 0x150]
	delegate OnComponentHit;//[Offset: 0x418, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x419, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x41a, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x41b, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x41c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x41e, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x41f, Size: 0x1]
	delegate OnClicked;//[Offset: 0x420, Size: 0x1]
	delegate OnReleased;//[Offset: 0x421, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x422, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x423, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x424, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x425, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x440, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x159ed0be4041
	void WakeRigidBody(FName BoneName);// 0x1237d0be4041
	void WakeAllRigidBodies();// 0x1236d0be4041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x1235d0be4041
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0x1234d0be4041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x1233d0be4041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x1232d0be4041
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0x1231d0be4041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x1230d0be4041
	void SetSimulatePhysics(bool bSimulate);// 0x122fd0be4041
	void SetRenderInMainPass(bool bValue);// 0x122ed0be4041
	void SetRenderCustomDepth(bool bValue);// 0x122dd0be4041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x122cd0be4041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x122bd0be4041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x122ad0be4041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x1229d0be4041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x1228d0be4041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x1227d0be4041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x1226d0be4041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x1225d0be4041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x1224d0be4041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x1223d0be4041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x1222d0be4041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x1221d0be4041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x1220d0be4041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x121fd0be4041
	void SetMassScale(FName BoneName, float InMassScale);// 0x121ed0be4041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x121dd0be4041
	void SetLinearDamping(float InDamping);// 0x121cd0be4041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x121bd0be4041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x121ad0be4041
	void SetHiddenInSceneCapture(bool bValue);// 0x1219d0be4041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x1218d0be4041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x157dd0be4041
	void SetEnableGravity(bool bGravityEnabled);// 0x1216d0be4041
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x1215d0be4041
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x1214d0be4041
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x1213d0be4041
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x1212d0be4041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x1211d0be4041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x1210d0be4041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x120fd0be4041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x120ed0be4041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x120dd0be4041
	void SetCustomDepthStencilValue(int Value);// 0x120cd0be4041
	void SetCullDistance(float NewCullDistance);// 0x120bd0be4041
	void SetConstraintMode(byte ConstraintMode);// 0x120ad0be4041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x1209d0be4041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x1208d0be4041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x1c11d0be4041
	void SetCollisionObjectType(byte Channel);// 0x1206d0be4041
	void SetCollisionEnabled(byte NewType);// 0x1205d0be4041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x1204d0be4041
	void SetCastShadow(bool NewCastShadow);// 0x1203d0be4041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x1202d0be4041
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0x1201d0be4041
	void SetBoundsScale(float NewBoundsScale);// 0x1200d0be4041
	void SetAngularDamping(float InDamping);// 0x11ffd0be4041
	void SetAllUseCCD(bool InUseCCD);// 0x11fed0be4041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x11fdd0be4041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x11fcd0be4041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x11fbd0be4041
	void SetAllMassScale(float InMassScale);// 0x11fad0be4041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x11f9d0be4041
	void PutRigidBodyToSleep(FName BoneName);// 0x11f8d0be4041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x1238d0be4041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x11f6d0be4041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x11f5d0be4041
	bool K2_IsQueryCollisionEnabled();// 0x11f4d0be4041
	bool K2_IsPhysicsCollisionEnabled();// 0x11f3d0be4041
	bool K2_IsCollisionEnabled();// 0x11f2d0be4041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x11f1d0be4041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x11f0d0be4041
	bool IsOverlappingActor(const Actor* Other);// 0x11efd0be4041
	bool IsGravityEnabled();// 0x11eed0be4041
	bool IsAnyRigidBodyAwake();// 0x11edd0be4041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x11ecd0be4041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x11ead0be4041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x11e9d0be4041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x11e8d0be4041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x11e7d0be4041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x11e6d0be4041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x11e5d0be4041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x11e4d0be4041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x11e3d0be4041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x11e2d0be4041
	int GetNumMaterials();// 0x11e1d0be4041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x11e0d0be4041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x11dfd0be4041
	float GetMassScale(FName BoneName);// 0x11ded0be4041
	float GetMass();// 0x11ddd0be4041
	float GetLinearDamping();// 0x11dcd0be4041
	Vector GetInertiaTensor(FName BoneName);// 0x11dbd0be4041
	bool GetGenerateOverlapEvents();// 0x11dad0be4041
	byte GetCollisionResponseToChannel(byte Channel);// 0x11d9d0be4041
	FName GetCollisionProfileName();// 0x11d8d0be4041
	byte GetCollisionObjectType();// 0x11d7d0be4041
	byte GetCollisionEnabled();// 0x11d6d0be4041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x1217d0be4041
	Vector GetCenterOfMass(FName BoneName);// 0x11d4d0be4041
	float GetAngularDamping();// 0x11d3d0be4041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x11d2d0be4041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x11d1d0be4041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x11d0d0be4041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x11cfd0be4041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x11ced0be4041
	void ClearMoveIgnoreComponents();// 0x11cdd0be4041
	void ClearMoveIgnoreActors();// 0x11ccd0be4041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x11cbd0be4041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x11cad0be4041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x11c9d0be4041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x11c8d0be4041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x11c7d0be4041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x11c6d0be4041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x11c5d0be4041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x11c4d0be4041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x11c3d0be4041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x11c2d0be4041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x11c1d0be4041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x11c0d0be4041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x11bfd0be4041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x11bdd0be4041

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0xdbdd0be4041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0xdbcd0be4041
	void SetWorldScale3D(Vector NewScale);// 0xdbbd0be4041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xdbad0be4041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xdb9d0be4041
	void SetRelativeScale3D(Vector NewScale3D);// 0xdb7d0be4041
	void SetMobility(byte NewMobility);// 0xdb6d0be4041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xdb5d0be4041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xdb4d0be4041
	void ResetRelativeTransform();// 0xdb3d0be4041
	void OnRep_Visibility(bool OldValue);// 0xdb2d0be4041
	void OnRep_Transform();// 0xdb1d0be4041
	void OnRep_AttachSocketName();// 0xdb0d0be4041
	void OnRep_AttachParent();// 0xdafd0be4041
	void OnRep_AttachChildren();// 0xdaed0be4041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xdadd0be4041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xdacd0be4041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xdabd0be4041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xdaad0be4041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xda9d0be4041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xda8d0be4041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xda7d0be4041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xda6d0be4041
	Transform K2_GetComponentToWorld();// 0xe68d0be4041
	Vector K2_GetComponentScale();// 0xda4d0be4041
	Rotator K2_GetComponentRotation();// 0xda3d0be4041
	Vector K2_GetComponentLocation();// 0xda1d0be4041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xd9fd0be4041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xd9dd0be4041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xd9cd0be4041
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd9bd0be4041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd9ad0be4041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd99d0be4041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd98d0be4041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd97d0be4041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd96d0be4041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd95d0be4041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd94d0be4041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd93d0be4041
	bool IsVisible();// 0xd92d0be4041
	bool IsSimulatingPhysics(FName BoneName);// 0xd91d0be4041
	bool IsAnySimulatingPhysics();// 0xd90d0be4041
	Vector GetUpVector();// 0xd8ed0be4041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xd8dd0be4041
	Rotator GetSocketRotation(FName InSocketName);// 0xd8cd0be4041
	Quat GetSocketQuaternion(FName InSocketName);// 0xd8bd0be4041
	Vector GetSocketLocation(FName InSocketName);// 0xd8ad0be4041
	bool GetShouldUpdatePhysicsVolume();// 0xd89d0be4041
	Vector GetRightVector();// 0xd88d0be4041
	Transform GetRelativeTransform();// 0xd87d0be4041
	PhysicsVolume* GetPhysicsVolume();// 0xd86d0be4041
	void GetParentComponents(out SceneComponent*[] Parents);// 0xffffff82d0be4000
	int GetNumChildrenComponents();// 0xd84d0be4041
	Vector GetForwardVector();// 0xd83d0be4041
	Vector GetComponentVelocity();// 0xd82d0be4041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xd81d0be4041
	SceneComponent* GetChildComponent(int ChildIndex);// 0xd80d0be4041
	FName GetAttachSocketName();// 0xd7fd0be4041
	SceneComponent* GetAttachParent();// 0xd7ed0be4041
	FName[] GetAllSocketNames();// 0xd7dd0be4041
	bool DoesSocketExist(FName InSocketName);// 0xd7cd0be4041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xd7bd0be4041

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0xbead0be4041
	void SetTickGroup(byte NewTickGroup);// 0xbe9d0be4041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xbe8d0be4041
	void SetIsReplicated(bool ShouldReplicate);// 0xbe7d0be4041
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0xbe6d0be4041
	void SetComponentTickInterval(float TickInterval);// 0xbe5d0be4041
	void SetComponentTickEnabled(bool bEnabled);// 0xbe4d0be4041
	void SetAutoActivate(bool bNewAutoActivate);// 0xbe3d0be4041
	void SetActive(bool bNewActive, bool bReset);// 0xbe2d0be4041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xbe1d0be4041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xbe0d0be4041
	void ReceiveTick(float DeltaSeconds);// 0xbdfd0be4041
	void ReceiveEndPlay(byte EndPlayReason);// 0xbded0be4041
	void ReceiveBeginPlay();// 0xc2ad0be4041
	void OnRep_IsActive();// 0xbdcd0be4041
	void K2_DestroyComponent(Object* Object);// 0xbdbd0be4041
	bool IsComponentTickEnabled();// 0xbdad0be4041
	bool IsBeingDestroyed();// 0xbd9d0be4041
	bool IsActive();// 0xbd8d0be4041
	Actor* GetOwner();// 0xbd7d0be4041
	float GetComponentTickInterval();// 0xbd6d0be4041
	void Deactivate();// 0xbd5d0be4041
	bool ComponentHasTag(FName Tag);// 0xbd4d0be4041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xbd3d0be4041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xbd2d0be4041
	void Activate(bool bReset);// 0xbd1d0be4041

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float Restitution;//[Offset: 0x34, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float Density;//[Offset: 0x3c, Size: 0x4]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8]
	byte SurfaceType;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x20fcd0be4041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x20fbd0be4041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x213cd0be4041
	PhysicalMaterial* GetPhysicalMaterial();// 0x20f9d0be4041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x20f8d0be4041
	Material* GetBaseMaterial();// 0x20f7d0be4041

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0x14]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0x14]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0x14]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0x14]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0x14]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0x14]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0x14]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0x14]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x18]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0x14]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0x14]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool WriteDepthToTranslucentMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	byte ShadingRate;//[Offset: 0x1ff, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x202, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1]
	byte StencilCompare;//[Offset: 0x204, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x205, Size: 0x1]
	byte RefractionMode;//[Offset: 0x206, Size: 0x1]
	int BlendablePriority;//[Offset: 0x208, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x210, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x214, Size: 0x4]
	Guid StateId;//[Offset: 0x218, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x228, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x260, Size: 0x1d8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x4, Size: 0x8]
	FName ExpressionName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x4, Size: 0x8]
	FName ExpressionName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x150]
	Object*[] ReferencedTextures;//[Offset: 0x150, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x160, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x170, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x180, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x190, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1a0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x1b0, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x1c0, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 0x30]
	float[] ScalarValues;//[Offset: 0xf0, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x100, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x110, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x120, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x130, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10]
	int LODBias;//[Offset: 0x78, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x7c, Size: 0x1]
	byte Filter;//[Offset: 0x7d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x7e, Size: 0x1]
	byte LODGroup;//[Offset: 0x7f, Size: 0x1]
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x84, Size: 0x1]
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4]
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0x178, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0x17c, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	byte AddressX;//[Offset: 0x181, Size: 0x1]
	byte AddressY;//[Offset: 0x182, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0x184, Size: 0x8]
	int Blueprint_GetSizeY();// 0x25eed0be4041
	int Blueprint_GetSizeX();// 0x262fd0be4041

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4]
	int TileSize;//[Offset: 0x2c, Size: 0x4]
	int TileBorderSize;//[Offset: 0x30, Size: 0x4]
	enum MaterialType;//[Offset: 0x34, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	byte LODGroup;//[Offset: 0x40, Size: 0x1]
	int Size;//[Offset: 0x44, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	int GetTileSize();// 0x2c30d0be4041
	int GetTileCount();// 0x2c2fd0be4041
	int GetTileBorderSize();// 0x2c2ed0be4041
	int GetSize();// 0x2c2dd0be4041
	int GetPageTableSize();// 0x2c2cd0be4041

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float PlacementJitter;//[Offset: 0x20, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4]
	int MinLOD;//[Offset: 0x2c, Size: 0x4]
	enum Scaling;//[Offset: 0x30, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x98, Size: 0x4]
	int LightMapResolution;//[Offset: 0x9c, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x140, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 0x8]
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x2d0cd0be4041
	void RemoveSocket(StaticMeshSocket* Socket);// 0x2d0bd0be4041
	StaticMaterial[] GetStaticMaterials();// 0x2d0ad0be4041
	int GetNumSections(int InLOD);// 0x2d09d0be4041
	int GetNumLODs();// 0x2d08d0be4041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0xffffff82d0be4000
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x2d06d0be4041
	int GetMaterialIndex(FName MaterialSlotName);// 0x2d05d0be4041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x2d04d0be4041
	BoxSphereBounds GetBounds();// 0x2d03d0be4041
	Box GetBoundingBox();// 0x2d02d0be4041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x2d01d0be4041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x2d00d0be4041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x2cffd0be4041
	void AddSocket(StaticMeshSocket* Socket);// 0x2cfed0be4041
	FName AddMaterial(MaterialInterface* Material);// 0x2cfdd0be4041

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 0x58]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x150]
	Vector BuildScale3D;//[Offset: 0x280, Size: 0xc]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8]
	byte PhysicsType;//[Offset: 0x30, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1]
	enum SleepFamily;//[Offset: 0x51, Size: 0x1]
	byte DOFMode;//[Offset: 0x52, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x54, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x64, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x6c, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x6d, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x70, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0xa0, Size: 0x4]
	float MassInKgOverride;//[Offset: 0xa4, Size: 0x4]
	float LinearDamping;//[Offset: 0xb0, Size: 0x4]
	float AngularDamping;//[Offset: 0xb4, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0xb8, Size: 0xc]
	Vector COMNudge;//[Offset: 0xc4, Size: 0xc]
	float MassScale;//[Offset: 0xd0, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0xd4, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf0, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x100, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0x108, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0x10c, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0x110, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x2487d0be4041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x2444d0be4041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x2443d0be4041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x2442d0be4041

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x2441d0be4041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x2440d0be4041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x243fd0be4041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x243ed0be4041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x243dd0be4041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x243cd0be4041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x243bd0be4041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x243ad0be4041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x2439d0be4041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x2438d0be4041
	bool IsVertexValid(VertexID VertexID);// 0x2437d0be4041
	bool IsVertexOrphaned(VertexID VertexID);// 0x2436d0be4041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x2435d0be4041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x2434d0be4041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x2433d0be4041
	bool IsPolygonValid(PolygonID PolygonID);// 0x2432d0be4041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x2431d0be4041
	bool IsEmpty();// 0x2430d0be4041
	bool IsEdgeValid(EdgeID EdgeID);// 0x242fd0be4041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x242ed0be4041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x242dd0be4041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x242cd0be4041
	Vector GetVertexPosition(VertexID VertexID);// 0x242bd0be4041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x242ad0be4041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x2429d0be4041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x2428d0be4041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x2427d0be4041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x2426d0be4041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x2425d0be4041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x2466d0be4041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x2423d0be4041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x2422d0be4041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x2421d0be4041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x2420d0be4041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x241fd0be4041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x241ed0be4041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x241dd0be4041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x241cd0be4041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x241bd0be4041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x241ad0be4041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x2419d0be4041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x2418d0be4041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2417d0be4041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x2416d0be4041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x2415d0be4041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2414d0be4041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2413d0be4041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x2412d0be4041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x2411d0be4041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x2410d0be4041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x240fd0be4041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x240ed0be4041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x240dd0be4041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x240cd0be4041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x240bd0be4041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x240ad0be4041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x2409d0be4041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x2408d0be4041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x2407d0be4041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x2406d0be4041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x2405d0be4041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x2404d0be4041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x2445d0be4041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x2402d0be4041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x2401d0be4041
	void Empty();// 0x2400d0be4041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x23ffd0be4041
	void DeleteVertex(VertexID VertexID);// 0x23fed0be4041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x23fdd0be4041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x23fcd0be4041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x23fbd0be4041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x23fad0be4041
	void CreateVertexWithID(VertexID VertexID);// 0x23f9d0be4041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x23f8d0be4041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x23f7d0be4041
	VertexID CreateVertex();// 0x23f6d0be4041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x23f5d0be4041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x23f4d0be4041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x23f3d0be4041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x23f2d0be4041
	PolygonGroupID CreatePolygonGroup();// 0x23f1d0be4041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x23f0d0be4041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x23efd0be4041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x23eed0be4041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x23edd0be4041

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Distance;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x54, Size: 0x4]
	int Item;//[Offset: 0x58, Size: 0x4]
	byte ElementIndex;//[Offset: 0x5c, Size: 0x1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1]
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x94, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0x98, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 0x40]
	Actor* Owner;//[Offset: 0xe0, Size: 0x8]
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8]
	byte Role;//[Offset: 0xf0, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 0x1]
	int InputPriority;//[Offset: 0xf4, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 0x4]
	int NetTag;//[Offset: 0x104, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 0x4]
	float NetPriority;//[Offset: 0x110, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x118, Size: 0x8]
	Actor*[] Children;//[Offset: 0x120, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 0x10]
	FName[] Layers;//[Offset: 0x150, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 0x8]
	FName[] Tags;//[Offset: 0x170, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 0x1]
	delegate OnClicked;//[Offset: 0x187, Size: 0x1]
	delegate OnReleased;//[Offset: 0x188, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x18d, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x18e, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x18f, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x15f1d0be4041
	void UserConstructionScript();// 0x15f0d0be4041
	void TearOff();// 0x15efd0be4041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x15eed0be4041
	void SetTickGroup(byte NewTickGroup);// 0x15edd0be4041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x15ecd0be4041
	void SetReplicates(bool bInReplicates);// 0x15ebd0be4041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x15ead0be4041
	void SetOwner(Actor* NewOwner);// 0x15e9d0be4041
	void SetNetDormancy(byte NewDormancy);// 0x15e8d0be4041
	void SetLifeSpan(float InLifespan);// 0x15e7d0be4041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x15e6d0be4041
	void SetActorTickInterval(float TickInterval);// 0x15e5d0be4041
	void SetActorTickEnabled(bool bEnabled);// 0x15e4d0be4041
	void SetActorScale3D(Vector NewScale3D);// 0x15e3d0be4041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x15e2d0be4041
	void SetActorHiddenInGame(bool bNewHidden);// 0x15e1d0be4041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x15e0d0be4041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x15dfd0be4041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x15ded0be4041
	void ReceiveTick(float DeltaSeconds);// 0x15ddd0be4041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x15dcd0be4041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x18fdd0be4041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x15dad0be4041
	void ReceiveEndPlay(byte EndPlayReason);// 0x15d9d0be4041
	void ReceiveDestroyed();// 0x15d8d0be4041
	void ReceiveBeginPlay();// 0x15d7d0be4041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x15d6d0be4041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x15d5d0be4041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x15d4d0be4041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x15d3d0be4041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x15d2d0be4041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x15d1d0be4041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x15d0d0be4041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x15cfd0be4041
	void ReceiveActorEndCursorOver();// 0x15ced0be4041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x15cdd0be4041
	void ReceiveActorBeginCursorOver();// 0x15ccd0be4041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x15cbd0be4041
	void OnRep_ReplicateMovement();// 0x15cad0be4041
	void OnRep_ReplicatedMovement();// 0x15c9d0be4041
	void OnRep_Owner();// 0x15c8d0be4041
	void OnRep_Instigator();// 0x15c7d0be4041
	void OnRep_AttachmentReplication();// 0x15c6d0be4041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x15c5d0be4041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x15c4d0be4041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x15c3d0be4041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15c2d0be4041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x15c1d0be4041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15c0d0be4041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15bfd0be4041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15bed0be4041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15bdd0be4041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15bcd0be4041
	void K2_OnReset();// 0x15bbd0be4041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1600d0be4041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x15b9d0be4041
	SceneComponent* K2_GetRootComponent();// 0x15b8d0be4041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x15b7d0be4041
	Rotator K2_GetActorRotation();// 0x15b6d0be4041
	Vector K2_GetActorLocation();// 0x15b5d0be4041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x15b4d0be4041
	void K2_DestroyComponent(ActorComponent* Component);// 0x15b3d0be4041
	void K2_DestroyActor();// 0x15b2d0be4041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x15b1d0be4041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x15b0d0be4041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x15afd0be4041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x15aed0be4041
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15add0be4041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15acd0be4041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15abd0be4041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15aad0be4041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15a9d0be4041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15a8d0be4041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x15a7d0be4041
	bool IsOverlappingActor(const Actor* Other);// 0x15a6d0be4041
	bool IsChildActor();// 0x15a5d0be4041
	bool IsActorTickEnabled();// 0x15a4d0be4041
	bool IsActorBeingDestroyed();// 0x15a3d0be4041
	bool HasAuthority();// 0x15a2d0be4041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x15a1d0be4041
	Vector GetVelocity();// 0x15a0d0be4041
	Transform GetTransform();// 0x159fd0be4041
	bool GetTickableWhenPaused();// 0xffffff82d0be4000
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x159dd0be4041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x159cd0be4041
	byte GetRemoteRole();// 0x159bd0be4041
	ChildActorComponent* GetParentComponent();// 0x159ad0be4041
	Actor* GetParentActor();// 0x1599d0be4041
	Actor* GetOwner();// 0x1598d0be4041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x1597d0be4041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x1596d0be4041
	byte GetLocalRole();// 0x1595d0be4041
	float GetLifeSpan();// 0x1594d0be4041
	Controller* GetInstigatorController();// 0x1593d0be4041
	Pawn* GetInstigator();// 0x1592d0be4041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x1591d0be4041
	float GetInputAxisValue(const FName InputAxisName);// 0x1590d0be4041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x158fd0be4041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x158ed0be4041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x158dd0be4041
	float GetGameTimeSinceCreation();// 0x158cd0be4041
	float GetDotProductTo(const Actor* OtherActor);// 0x158bd0be4041
	float GetDistanceTo(const Actor* OtherActor);// 0x158ad0be4041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x1589d0be4041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x1588d0be4041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x1587d0be4041
	FName GetAttachParentSocketName();// 0x1586d0be4041
	Actor* GetAttachParentActor();// 0x1585d0be4041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x1584d0be4041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x1583d0be4041
	Vector GetActorUpVector();// 0x1582d0be4041
	float GetActorTimeDilation();// 0x1581d0be4041
	float GetActorTickInterval();// 0x1580d0be4041
	Vector GetActorScale3D();// 0x157fd0be4041
	Vector GetActorRightVector();// 0x157ed0be4041
	Vector GetActorRelativeScale3D();// 0x15bad0be4041
	Vector GetActorForwardVector();// 0x157cd0be4041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x157bd0be4041
	bool GetActorEnableCollision();// 0x157ad0be4041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x1579d0be4041
	void ForceNetUpdate();// 0x1578d0be4041
	void FlushNetDormancy();// 0x1577d0be4041
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x1576d0be4041
	void EnableInput(PlayerController* PlayerController);// 0x1575d0be4041
	void DisableInput(PlayerController* PlayerController);// 0x1574d0be4041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x1573d0be4041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1572d0be4041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1571d0be4041
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x1570d0be4041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x156ed0be4041
	bool ActorHasTag(FName Tag);// 0xffffff82d0be3fff

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x238, Size: 0x10]
	FName StateName;//[Offset: 0x248, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x250, Size: 0x8]
	Character* Character;//[Offset: 0x260, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x288, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	void UnPossess();// 0x1fb8d0be4041
	void StopMovement();// 0x1fb7d0be4041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x1fb6d0be4041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x1ff7d0be4041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x1fb4d0be4041
	void SetControlRotation(out const Rotator NewRotation);// 0x1fb3d0be4041
	void ResetIgnoreMoveInput();// 0x1fb2d0be4041
	void ResetIgnoreLookInput();// 0x1fb1d0be4041
	void ResetIgnoreInputFlags();// 0x1fb0d0be4041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1fafd0be4041
	void ReceivePossess(Pawn* PossessedPawn);// 0x1faed0be4041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1fadd0be4041
	void Possess(Pawn* InPawn);// 0x1facd0be4041
	void OnRep_PlayerState();// 0x1fabd0be4041
	void OnRep_Pawn();// 0x1faad0be4041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x1fa9d0be4041
	Pawn* K2_GetPawn();// 0x1fa8d0be4041
	bool IsPlayerController();// 0x1fa7d0be4041
	bool IsMoveInputIgnored();// 0x1fa6d0be4041
	bool IsLookInputIgnored();// 0x1fa5d0be4041
	bool IsLocalPlayerController();// 0x1fa4d0be4041
	bool IsLocalController();// 0x1fa3d0be4041
	Actor* GetViewTarget();// 0x1fa2d0be4041
	Rotator GetDesiredRotation();// 0x1fa1d0be4041
	Rotator GetControlRotation();// 0x1fa0d0be4041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x1f9fd0be4041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x1f9ed0be4041
	PlayerController* CastToPlayerController();// 0x1f9dd0be4041

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 0x4]
	int PlayerId;//[Offset: 0x224, Size: 0x4]
	byte Ping;//[Offset: 0x228, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 0x1]
	int StartTime;//[Offset: 0x22c, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x2f8, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xffffff82d0be4000
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x2be2d0be4041
	void OnRep_UniqueId();// 0x2be1d0be4041
	void OnRep_Score();// 0x2be0d0be4041
	void OnRep_PlayerName();// 0x2bdfd0be4041
	void OnRep_PlayerId();// 0x2bded0be4041
	void OnRep_bIsInactive();// 0x2bddd0be4041
	bool IsOnlyASpectator();// 0x2bdcd0be4041
	FString GetPlayerName();// 0x2bdbd0be4041

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x22c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x231, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x232, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x240, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x250, Size: 0x8]
	Controller* Controller;//[Offset: 0x258, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x264, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x270, Size: 0xc]
	void SpawnDefaultController();// 0x19a3d0be4041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0xffffff82d0be4000
	void ReceiveUnpossessed(Controller* OldController);// 0x19a1d0be4041
	void ReceivePossessed(Controller* NewController);// 0x19a0d0be4041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x199fd0be4041
	void OnRep_PlayerState();// 0x199ed0be4041
	void OnRep_Controller();// 0x199dd0be4041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x199cd0be4041
	Vector K2_GetMovementInputVector();// 0x199bd0be4041
	bool IsPlayerControlled();// 0x199ad0be4041
	bool IsPawnControlled();// 0x1999d0be4041
	bool IsMoveInputIgnored();// 0x1998d0be4041
	bool IsLocallyControlled();// 0x1997d0be4041
	bool IsControlled();// 0x1996d0be4041
	bool IsBotControlled();// 0x1995d0be4041
	Vector GetPendingMovementInputVector();// 0x1994d0be4041
	Vector GetNavAgentLocation();// 0x1993d0be4041
	PawnMovementComponent* GetMovementComponent();// 0x1992d0be4041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x1991d0be4041
	Vector GetLastMovementInputVector();// 0x1990d0be4041
	Rotator GetControlRotation();// 0x198fd0be4041
	Controller* GetController();// 0x198ed0be4041
	Rotator GetBaseAimRotation();// 0x198dd0be4041
	void DetachFromControllerPendingDestroy();// 0x198cd0be4041
	Vector ConsumeMovementInputVector();// 0x198bd0be4041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x198ad0be4041
	void AddControllerYawInput(float Val);// 0x1989d0be4041
	void AddControllerRollInput(float Val);// 0x1988d0be4041
	void AddControllerPitchInput(float Val);// 0x1987d0be4041

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x1d3cd0be4041
	bool IsMoveInputIgnored();// 0x1d3bd0be4041
	Vector GetPendingInputVector();// 0x1d3ad0be4041
	Pawn* GetPawnOwner();// 0x1d39d0be4041
	Vector GetLastInputVector();// 0x1d38d0be4041
	Vector ConsumeInputVector();// 0x1d37d0be4041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x1d36d0be4041

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x1d35d0be4041
	void StopActiveMovement();// 0x1d34d0be4041
	bool IsSwimming();// 0x1d33d0be4041
	bool IsMovingOnGround();// 0x1d32d0be4041
	bool IsFlying();// 0x1d31d0be4041
	bool IsFalling();// 0x1d30d0be4041
	bool IsCrouching();// 0x1d2fd0be4041

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0xc22d0be4041
	void SnapUpdatedComponentToPlane();// 0xc21d0be4041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xc20d0be4041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xc1fd0be4041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xc1ed0be4041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xc1dd0be4041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xc1cd0be4041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xc1bd0be4041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xc1ad0be4041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xc19d0be4041
	float K2_GetModifiedMaxSpeed();// 0xc18d0be4041
	float K2_GetMaxSpeedModifier();// 0xc17d0be4041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xc16d0be4041
	Vector GetPlaneConstraintOrigin();// 0xc15d0be4041
	Vector GetPlaneConstraintNormal();// 0xc13d0be4041
	enum GetPlaneConstraintAxisSetting();// 0xc12d0be4041
	PhysicsVolume* GetPhysicsVolume();// 0xc11d0be4041
	float GetMaxSpeed();// 0xc10d0be4041
	float GetGravityZ();// 0xc0fd0be4041
	Vector ConstrainNormalToPlane(Vector Normal);// 0xc0ed0be4041
	Vector ConstrainLocationToPlane(Vector Location);// 0xc0dd0be4041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xc0cd0be4041

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 0x4]
	int Priority;//[Offset: 0x25c, Size: 0x4]
	float FluidFriction;//[Offset: 0x260, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 0x1]
	Color BrushColor;//[Offset: 0x224, Size: 0x4]
	int PolyFlags;//[Offset: 0x228, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 0x1]
	Model* Brush;//[Offset: 0x230, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x448, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x450, Size: 0x8]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2b0, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 0xc]
	int ClientCap;//[Offset: 0x330, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x338, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3d1, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x418, Size: 0x8]
	float InputYawScale;//[Offset: 0x42c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x430, Size: 0x4]
	float InputRollScale;//[Offset: 0x434, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x454, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x558, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x203fd0be4041
	bool WasInputKeyJustPressed(Key Key);// 0x203ed0be4041
	void ToggleSpeaking(bool bInSpeaking);// 0x203dd0be4041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x203cd0be4041
	void SwitchLevel(FString URL);// 0x203bd0be4041
	void StopHapticEffect(enum Hand);// 0x203ad0be4041
	void StartFire(byte FireModeNum);// 0x207bd0be4041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x2038d0be4041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x2037d0be4041
	void SetName(FString S);// 0x2036d0be4041
	void SetMouseLocation(const int X, const int Y);// 0x2035d0be4041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x2034d0be4041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x2033d0be4041
	void SetDisableHaptics(bool bNewDisabled);// 0x2032d0be4041
	void SetControllerLightColor(Color Color);// 0x2031d0be4041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2030d0be4041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x202fd0be4041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x202ed0be4041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x202dd0be4041
	void ServerViewPrevPlayer();// 0x202cd0be4041
	void ServerViewNextPlayer();// 0x202bd0be4041
	void ServerVerifyViewTarget();// 0x202ad0be4041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x2029d0be4041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x2028d0be4041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x2027d0be4041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x2026d0be4041
	void ServerToggleAILogging();// 0x2025d0be4041
	void ServerShortTimeout();// 0x2024d0be4041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x2023d0be4041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x2022d0be4041
	void ServerRestartPlayer();// 0x2021d0be4041
	void ServerPause();// 0x2020d0be4041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x201fd0be4041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x201ed0be4041
	void ServerExecRPC(FString Msg);// 0x201dd0be4041
	void ServerExec(FString Msg);// 0x201cd0be4041
	void ServerCheckClientPossessionReliable();// 0x201bd0be4041
	void ServerCheckClientPossession();// 0x201ad0be4041
	void ServerChangeName(FString S);// 0x2019d0be4041
	void ServerCamera(FName NewMode);// 0x205ad0be4041
	void ServerAcknowledgePossession(Pawn* P);// 0x2017d0be4041
	void SendToConsole(FString Command);// 0x2016d0be4041
	void RestartLevel();// 0x2015d0be4041
	void ResetControllerLightColor();// 0x2014d0be4041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x2013d0be4041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x2012d0be4041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x2011d0be4041
	void Pause();// 0x2010d0be4041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x200fd0be4041
	void LocalTravel(FString URL);// 0x200ed0be4041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x200dd0be4041
	bool IsInputKeyDown(Key Key);// 0x200cd0be4041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x200bd0be4041
	SpectatorPawn* GetSpectatorPawn();// 0x200ad0be4041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x2009d0be4041
	Vector GetInputVectorKeyState(Key Key);// 0x2008d0be4041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2007d0be4041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x2006d0be4041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x2005d0be4041
	float GetInputKeyTimeDown(Key Key);// 0x2004d0be4041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2003d0be4041
	float GetInputAnalogKeyState(Key Key);// 0x2002d0be4041
	HUD* GetHUD();// 0x2001d0be4041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x2000d0be4041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1fffd0be4041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1ffed0be4041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x1ffdd0be4041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1ffcd0be4041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x1ffbd0be4041
	Vector GetFocalLocation();// 0x1ffad0be4041
	void FOV(float NewFOV);// 0x1ff9d0be4041
	void EnableCheats();// 0x1ff8d0be4041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x2039d0be4041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x1ff6d0be4041
	void ConsoleKey(Key Key);// 0x1ff5d0be4041
	void ClientWasKicked(const FText KickReason);// 0x1ff4d0be4041
	void ClientVoiceHandshakeComplete();// 0x1ff3d0be4041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x1ff2d0be4041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x1ff1d0be4041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x1ff0d0be4041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1fefd0be4041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1feed0be4041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x1fedd0be4041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x1fecd0be4041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x1febd0be4041
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x1fead0be4041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x1fe9d0be4041
	void ClientStartOnlineSession();// 0x1fe8d0be4041
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x1fe7d0be4041
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x1fe6d0be4041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x1fe5d0be4041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x1fe4d0be4041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x1fe3d0be4041
	void ClientSetHUD(class HUD NewHUDClass);// 0x1fe2d0be4041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x1fe1d0be4041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x1fe0d0be4041
	void ClientSetCameraMode(FName NewCamMode);// 0x1fdfd0be4041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x1fded0be4041
	void ClientSetBlockOnAsyncLoading();// 0x1fddd0be4041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x1fdcd0be4041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x1fdbd0be4041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x1fdad0be4041
	void ClientRestart(Pawn* NewPawn);// 0x1fd9d0be4041
	void ClientReset();// 0x1fd8d0be4041
	void ClientRepObjRef(Object* Object);// 0x1fd7d0be4041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x2018d0be4041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x1fd5d0be4041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x1fd4d0be4041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x1fd3d0be4041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x1fd2d0be4041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x1fd1d0be4041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x1fd0d0be4041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x1fcfd0be4041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x1fced0be4041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x1fcdd0be4041
	void ClientIgnoreLookInput(bool bIgnore);// 0x1fccd0be4041
	void ClientGotoState(FName NewState);// 0x1fcbd0be4041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x1fcad0be4041
	void ClientForceGarbageCollection();// 0x1fc9d0be4041
	void ClientFlushLevelStreaming();// 0x1fc8d0be4041
	void ClientEndOnlineSession();// 0x1fc7d0be4041
	void ClientEnableNetworkVoice(bool bEnable);// 0x1fc6d0be4041
	void ClientCommitMapChange();// 0x1fc5d0be4041
	void ClientClearCameraLensEffects();// 0x1fc4d0be4041
	void ClientCapBandwidth(int Cap);// 0x1fc3d0be4041
	void ClientCancelPendingMapChange();// 0x1fc2d0be4041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x1fc1d0be4041
	void ClearAudioListenerOverride();// 0x1fc0d0be4041
	void ClearAudioListenerAttenuationOverride();// 0x1fbfd0be4041
	bool CanRestartPlayer();// 0x1fbed0be4041
	void Camera(FName NewMode);// 0x1fbdd0be4041
	void AddYawInput(float Val);// 0x1fbcd0be4041
	void AddRollInput(float Val);// 0x1fbbd0be4041
	void AddPitchInput(float Val);// 0x1fbad0be4041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x1fb9d0be4041

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10]
	delegate OnVisibilityChanged;//[Offset: 0x168, Size: 0x10]
	Margin Padding;//[Offset: 0x190, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 0x8]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8]
	int Priority;//[Offset: 0x1e0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10]
	void UnregisterInputComponent();// 0x22cfd0be4041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x22ced0be4041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x22cdd0be4041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x22ccd0be4041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x22cbd0be4041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x22cad0be4041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x22c9d0be4041
	void StopListeningForAllInputActions();// 0x22c8d0be4041
	void StopAnimationsAndLatentActions();// 0x22c7d0be4041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x22c6d0be4041
	void StopAllAnimations();// 0x22c5d0be4041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x22c4d0be4041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xffffff82d0be4000
	void SetPadding(Margin InPadding);// 0x22c2d0be4041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x22c1d0be4041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x22c0d0be4041
	void SetInputActionPriority(int NewPriority);// 0x22bfd0be4041
	void SetInputActionBlocking(bool bShouldBlock);// 0x22bed0be4041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x22bdd0be4041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x22bcd0be4041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x22bbd0be4041
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x22bad0be4041
	void SetAnchorsInViewport(Anchors Anchors);// 0x22b9d0be4041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x22b8d0be4041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x22b7d0be4041
	void RemoveFromViewport();// 0x22b6d0be4041
	void RegisterInputComponent();// 0x22b5d0be4041
	void PreConstruct(bool IsDesignTime);// 0x22b4d0be4041
	void PlaySound(SoundBase* SoundToPlay);// 0x22b3d0be4041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x22b2d0be4041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x22b1d0be4041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x22b0d0be4041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x22afd0be4041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x22aed0be4041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x22add0be4041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x22acd0be4041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x22abd0be4041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x22aad0be4041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x22a9d0be4041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x22a8d0be4041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x22a7d0be4041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x22a6d0be4041
	void OnPaint(out PaintContext Context);// 0x22a5d0be4041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x22a4d0be4041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x22a3d0be4041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x22dfd0be4041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x22a1d0be4041
	void OnMouseCaptureLost();// 0x22a0d0be4041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x229fd0be4041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x229ed0be4041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x229dd0be4041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x229cd0be4041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x229bd0be4041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x229ad0be4041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x2299d0be4041
	void OnInitialized();// 0x2298d0be4041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x2297d0be4041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2296d0be4041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2295d0be4041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2294d0be4041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2293d0be4041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2292d0be4041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x2291d0be4041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2290d0be4041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x228fd0be4041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x228ed0be4041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x228dd0be4041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x228cd0be4041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x228bd0be4041
	bool IsPlayingAnimation();// 0x228ad0be4041
	bool IsListeningForInputAction(FName ActionName);// 0x2289d0be4041
	bool IsInViewport();// 0x2288d0be4041
	bool IsInteractable();// 0x2287d0be4041
	bool IsAnyAnimationPlaying();// 0x2286d0be4041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x2285d0be4041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x2284d0be4041
	Pawn* GetOwningPlayerPawn();// 0x2283d0be4041
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x2282d0be4041
	bool GetIsVisible();// 0x22c3d0be4041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x2280d0be4041
	Anchors GetAnchorsInViewport();// 0x227fd0be4041
	Vector2D GetAlignmentInViewport();// 0x227ed0be4041
	void FlushAnimations();// 0x227dd0be4041
	void Destruct();// 0x227cd0be4041
	void Construct();// 0x227bd0be4041
	void CancelLatentActions();// 0x227ad0be4041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x2279d0be4041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x2278d0be4041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x2277d0be4041
	void AddToViewport(int ZOrder);// 0x2276d0be4041
	bool AddToPlayerScreen(int ZOrder);// 0x2275d0be4041

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0xeacd0be4041
	void SetUserFocus(PlayerController* PlayerController);// 0xeabd0be4041
	void SetToolTipText(out const FText InToolTipText);// 0xeaad0be4041
	void SetToolTip(Widget* Widget);// 0xea9d0be4041
	void SetRenderTranslation(Vector2D Translation);// 0xea8d0be4041
	void SetRenderTransformPivot(Vector2D Pivot);// 0xea7d0be4041
	void SetRenderTransformAngle(float Angle);// 0xea5d0be4041
	void SetRenderTransform(WidgetTransform InTransform);// 0xea4d0be4041
	void SetRenderShear(Vector2D Shear);// 0xea3d0be4041
	void SetRenderScale(Vector2D Scale);// 0xea2d0be4041
	void SetRenderOpacity(float InOpacity);// 0xea1d0be4041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0xea0d0be4041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0xe9fd0be4041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0xe9ed0be4041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0xe9dd0be4041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0xe9cd0be4041
	void SetKeyboardFocus();// 0xe9bd0be4041
	void SetIsEnabled(bool bInIsEnabled);// 0xe9ad0be4041
	void SetFocus();// 0xe99d0be4041
	void SetCursor(byte InCursor);// 0xe98d0be4041
	void SetClipping(enum InClipping);// 0xe97d0be4041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0xe96d0be4041
	void ResetCursor();// 0xe95d0be4041
	void RemoveFromParent();// 0xe94d0be4041
	EventReply OnReply__DelegateSignature();// 0xe90d0be4041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xe8fd0be4041
	bool IsVisible();// 0xed9d0be4041
	bool IsHovered();// 0xe8dd0be4041
	void InvalidateLayoutAndVolatility();// 0xe8cd0be4041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0xe8bd0be4041
	bool HasUserFocus(PlayerController* PlayerController);// 0xe8ad0be4041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0xe89d0be4041
	bool HasMouseCapture();// 0xe88d0be4041
	bool HasKeyboardFocus();// 0xe87d0be4041
	bool HasFocusedDescendants();// 0xe86d0be4041
	bool HasAnyUserFocus();// 0xe85d0be4041
	Widget* GetWidget__DelegateSignature();// 0xe84d0be4041
	enum GetVisibility();// 0xe83d0be4041
	Geometry GetTickSpaceGeometry();// 0xe82d0be4041
	FText GetText__DelegateSignature();// 0xe80d0be4041
	enum GetSlateVisibility__DelegateSignature();// 0xe7fd0be4041
	SlateColor GetSlateColor__DelegateSignature();// 0xe7bd0be4041
	SlateBrush GetSlateBrush__DelegateSignature();// 0xe7ad0be4041
	float GetRenderTransformAngle();// 0xe79d0be4041
	float GetRenderOpacity();// 0xe78d0be4041
	PanelWidget* GetParent();// 0xe77d0be4041
	Geometry GetPaintSpaceGeometry();// 0xe76d0be4041
	PlayerController* GetOwningPlayer();// 0xe75d0be4041
	LocalPlayer* GetOwningLocalPlayer();// 0xe74d0be4041
	byte GetMouseCursor__DelegateSignature();// 0xe73d0be4041
	LinearColor GetLinearColor__DelegateSignature();// 0xe72d0be4041
	bool GetIsEnabled();// 0xe71d0be4041
	int GetInt32__DelegateSignature();// 0xe70d0be4041
	GameInstance* GetGameInstance();// 0xe6fd0be4041
	float GetFloat__DelegateSignature();// 0xe6ed0be4041
	Vector2D GetDesiredSize();// 0xe6dd0be4041
	enum GetClipping();// 0xe6cd0be4041
	enum GetCheckBoxState__DelegateSignature();// 0xe6ad0be4041
	Geometry GetCachedGeometry();// 0xe69d0be4041
	bool GetBool__DelegateSignature();// 0xeb3d0be4041
	FText GetAccessibleText();// 0xe67d0be4041
	FText GetAccessibleSummaryText();// 0xe66d0be4041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xe65d0be4041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xe64d0be4041
	void ForceVolatile(bool bForce);// 0xe63d0be4041
	void ForceLayoutPrepass();// 0xe62d0be4041

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10]
	bool RemoveChildAt(int Index);// 0xf48d0be4041
	bool RemoveChild(Widget* Content);// 0xf47d0be4041
	bool HasChild(Widget* Content);// 0xf46d0be4041
	bool HasAnyChildren();// 0xf45d0be4041
	int GetChildrenCount();// 0xf44d0be4041
	int GetChildIndex(const Widget* Content);// 0xf43d0be4041
	Widget* GetChildAt(int Index);// 0xf42d0be4041
	Widget*[] GetAllChildren();// 0xf41d0be4041
	void ClearChildren();// 0xf40d0be4041
	PanelSlot* AddChild(Widget* Content);// 0xf3fd0be4041

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x22e3d0be4041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x22e2d0be4041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x22e1d0be4041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x22e0d0be4041
	float GetStartTime();// 0x2321d0be4041
	float GetEndTime();// 0x22ded0be4041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x22ddd0be4041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x22dcd0be4041

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x1a83d0be4041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x1a82d0be4041

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int[] RowsDisabled;//[Offset: 0x58, Size: 0x10]
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 0x10]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4]
	enum Flags;//[Offset: 0x1c, Size: 0x1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4]
	int RowIndex;//[Offset: 0xa8, Size: 0x4]
	int OverlapPriority;//[Offset: 0xac, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	float StartTime;//[Offset: 0xb4, Size: 0x4]
	float EndTime;//[Offset: 0xb8, Size: 0x4]
	float PrerollTime;//[Offset: 0xbc, Size: 0x4]
	float PostrollTime;//[Offset: 0xc0, Size: 0x4]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2]
	void SetRowIndex(int NewRowIndex);// 0x1ac3d0be4041
	void SetPreRollFrames(int InPreRollFrames);// 0x1ac2d0be4041
	void SetPostRollFrames(int InPostRollFrames);// 0x1ac1d0be4041
	void SetOverlapPriority(int NewPriority);// 0x1ac0d0be4041
	void SetIsLocked(bool bInIsLocked);// 0x1abfd0be4041
	void SetIsActive(bool bInIsActive);// 0x1abed0be4041
	void SetCompletionMode(enum InCompletionMode);// 0x1abdd0be4041
	void SetBlendType(enum InBlendType);// 0x1abcd0be4041
	bool IsLocked();// 0x1abbd0be4041
	bool IsActive();// 0x1abad0be4041
	int GetRowIndex();// 0x1ab9d0be4041
	int GetPreRollFrames();// 0x1ab8d0be4041
	int GetPostRollFrames();// 0x1ab7d0be4041
	int GetOverlapPriority();// 0x1ab6d0be4041
	enum GetCompletionMode();// 0x1ab5d0be4041
	OptionalMovieSceneBlendType GetBlendType();// 0x1ab4d0be4041

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum CompletionMode;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4]
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4]
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	FrameNumber Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 0x20]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x58, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 0x4]
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 0x10]
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 0x4]
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 0x4]
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 0x4]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 0x10]
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 0x2]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8]
	uint32 EntityID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 0x4]
	enum Flags;//[Offset: 0x18, Size: 0x1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8]
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2]
	enum Flags;//[Offset: 0x2, Size: 0x1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int SequenceID;//[Offset: 0x10, Size: 0x4]
	int ResolveParentIndex;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x260, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x270, Size: 0xe8]
	void SetUserTag(FName InUserTag);// 0x226cd0be4041
	FName GetUserTag();// 0x226bd0be4041

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 0x138]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 0x50]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x275ed0be4041
	void ShowTitleSafeArea();// 0x275dd0be4041
	void SetConsoleTarget(int PlayerIndex);// 0x275cd0be4041

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10]
	void ReceiveShutdown();// 0xc5cd0be4041
	void ReceiveInit();// 0xc5ad0be4041
	void HandleTravelError(byte FailureType);// 0xc58d0be4041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xc57d0be4041
	void DebugRemovePlayer(int ControllerId);// 0xc56d0be4041
	void DebugCreatePlayer(int ControllerId);// 0xc55d0be4041

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24]
	float Duration;//[Offset: 0x104, Size: 0x4]
	float MaxDistance;//[Offset: 0x108, Size: 0x4]
	float TotalSamples;//[Offset: 0x10c, Size: 0x4]
	float Priority;//[Offset: 0x110, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x78]
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float LFEBleed;//[Offset: 0x10, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 0x4]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 0x40]
	byte OutputTarget;//[Offset: 0x68, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x69, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	enum GainMode;//[Offset: 0x68, Size: 0x1]
	float OutputVolume;//[Offset: 0x6c, Size: 0x4]
	float WetLevel;//[Offset: 0x70, Size: 0x4]
	float DryLevel;//[Offset: 0x74, Size: 0x4]
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x78, Size: 0x10]
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x88, Size: 0x10]
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0x98, Size: 0x10]
	delegate OnSubmixRecordedFileDone;//[Offset: 0xa8, Size: 0x10]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x2cd9d0be4041
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x2cd8d0be4041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x2cd7d0be4041
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x2cd6d0be4041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x2cd5d0be4041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x2cd4d0be4041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x2cd3d0be4041
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x2cd2d0be4041
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x2cd1d0be4041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x2cd0d0be4041

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x170, Size: 0x4]
	int StreamingPriority;//[Offset: 0x174, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x178, Size: 0x1]
	byte SoundGroup;//[Offset: 0x17a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x17c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17e, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17e, Size: 0x1]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x180, Size: 0x48]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 0x4]
	FString SpokenText;//[Offset: 0x240, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x250, Size: 0x4]
	float Volume;//[Offset: 0x254, Size: 0x4]
	float Pitch;//[Offset: 0x258, Size: 0x4]
	int NumChannels;//[Offset: 0x25c, Size: 0x4]
	int SampleRate;//[Offset: 0x260, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x280, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1]
	enum PitchRouting;//[Offset: 0x41, Size: 0x1]
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1]
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4]
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float QFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float RetriggerTime;//[Offset: 0x8, Size: 0x4]
	float VolumeScale;//[Offset: 0xc, Size: 0x4]
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x25e9d0be4041

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x25e8d0be4041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x25e7d0be4041

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	enum SendStage;//[Offset: 0x1, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8]
	float SendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4]
	float MinSendDistance;//[Offset: 0x24, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x36c, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x370, Size: 0x4]
	AudioBus* AudioBus;//[Offset: 0x378, Size: 0x8]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x2192d0be4041
	void Dragged(out const PointerEvent PointerEvent);// 0x2191d0be4041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x2190d0be4041

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8]
	float DefaultFOV;//[Offset: 0x238, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x248, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 0x600]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x890, Size: 0x600]
	TViewTarget ViewTarget;//[Offset: 0xe90, Size: 0x610]
	TViewTarget PendingViewTarget;//[Offset: 0x14a0, Size: 0x610]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1ae0, Size: 0x600]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x20e0, Size: 0x600]
	CameraModifier*[] ModifierList;//[Offset: 0x26e0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26f0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2700, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2704, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2710, Size: 0xc]
	delegate OnAudioFadeChangeEvent;//[Offset: 0x2720, Size: 0x10]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2740, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2750, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2758, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2798, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x27b8, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x27c8, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x27d8, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27e0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27e0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27e0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27e0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27e1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x27e4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x27e8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x27ec, Size: 0x4]
	float ViewYawMax;//[Offset: 0x27f0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x27f4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x27f8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2800, Size: 0x4]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x2bd5d0be4041
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x2bd4d0be4041
	void StopCameraFade();// 0x2bd3d0be4041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x2bd2d0be4041
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x2bd1d0be4041
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x2bd0d0be4041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x2bcfd0be4041
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x2bced0be4041
	void StopAllCameraShakes(bool bImmediately);// 0x2bcdd0be4041
	void StopAllCameraAnims(bool bImmediate);// 0x2bccd0be4041
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x2bcbd0be4041
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x2bcad0be4041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x2bc9d0be4041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x2bc8d0be4041
	void SetGameCameraCutThisFrame();// 0x2bc7d0be4041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x2bc6d0be4041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x2bc5d0be4041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x2bc4d0be4041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x2bc3d0be4041
	void OnPhotographySessionStart();// 0x2bffd0be4041
	void OnPhotographySessionEnd();// 0x2bc1d0be4041
	void OnPhotographyMultiPartCaptureStart();// 0x2bc0d0be4041
	void OnPhotographyMultiPartCaptureEnd();// 0x2bbfd0be4041
	PlayerController* GetOwningPlayerController();// 0x2bbed0be4041
	float GetFOVAngle();// 0x2bbdd0be4041
	Rotator GetCameraRotation();// 0x2bbcd0be4041
	Vector GetCameraLocation();// 0x2bbbd0be4041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x2bbad0be4041
	void ClearCameraLensEffects();// 0x2bb9d0be4041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x2bb8d0be4041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x2bb7d0be4041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x2bb6d0be4041

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ShakeScale;//[Offset: 0x2c, Size: 0x4]
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 0x8]
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 0x8]
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x1a7ad0be4041
	CameraShakePattern* GetRootShakePattern();// 0x1a79d0be4041

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	enum PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x2592d0be4041
	void SetScale(float NewDuration);// 0x2591d0be4041
	void SetDuration(float NewDuration);// 0x2590d0be4041

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x560]
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	byte TemperatureType;//[Offset: 0x1a, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float ToneCurveAmount;//[Offset: 0x180, Size: 0x4]
	float FilmSlope;//[Offset: 0x184, Size: 0x4]
	float FilmToe;//[Offset: 0x188, Size: 0x4]
	float FilmShoulder;//[Offset: 0x18c, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x190, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x194, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1c0, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 0x10]
	float FilmContrast;//[Offset: 0x1f4, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x200, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 0x4]
	float BloomIntensity;//[Offset: 0x21c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x220, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x224, Size: 0x4]
	float Bloom1Size;//[Offset: 0x228, Size: 0x4]
	float Bloom2Size;//[Offset: 0x22c, Size: 0x4]
	float Bloom3Size;//[Offset: 0x230, Size: 0x4]
	float Bloom4Size;//[Offset: 0x234, Size: 0x4]
	float Bloom5Size;//[Offset: 0x238, Size: 0x4]
	float Bloom6Size;//[Offset: 0x23c, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 0x4]
	float CameraISO;//[Offset: 0x304, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x314, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x348, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x34c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x354, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x368, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x36c, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3f8, Size: 0x4]
	float GrainJitter;//[Offset: 0x3fc, Size: 0x4]
	float GrainIntensity;//[Offset: 0x400, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 0x4]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x440, Size: 0x4]
	float RayTracingAOIntensity;//[Offset: 0x444, Size: 0x4]
	float RayTracingAORadius;//[Offset: 0x448, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x44c, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x45c, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x460, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x464, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x468, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x46c, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x470, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x478, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x47c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x480, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x484, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x488, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x48c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x490, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x494, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x498, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x49c, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4a8, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4ac, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4b0, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4b4, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 0x4]
	float LPVSize;//[Offset: 0x4c4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x4f0, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f4, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f8, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4fc, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x500, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x504, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x508, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x50c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x50e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x510, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x514, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x518, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x51c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x520, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x524, Size: 0x4]
	float PathTracingFilterWidth;//[Offset: 0x528, Size: 0x4]
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52c, Size: 0x1]
	float PathTracingMaxPathExposure;//[Offset: 0x530, Size: 0x4]
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 0x1]
	float LPVFadeRange;//[Offset: 0x538, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x53c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x540, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x548, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f1, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x1f4, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x1f8, Size: 0x4]
	class CameraShakeBase* CameraShake;//[Offset: 0x200, Size: 0x8]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x259dd0be4041
	void StopAllCameraShakes(bool bImmediately);// 0x259cd0be4041
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x259bd0be4041
	void Start();// 0x259ad0be4041
	float GetAttenuationFactor(out const Vector Location);// 0x2599d0be4041

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x2598d0be4041
	Actor* GetViewTarget();// 0x2597d0be4041
	void EnableModifier();// 0x2596d0be4041
	void DisableModifier(bool bImmediate);// 0x2595d0be4041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x2594d0be4041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x2593d0be4041

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30]
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x230, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x240, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x250, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x260, Size: 0x10]
	void ToggleActive();// 0x267ad0be4041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2679d0be4041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2678d0be4041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2677d0be4041
	void SetFloatParameter(FName ParameterName, float Param);// 0x2676d0be4041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2675d0be4041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2674d0be4041
	void OnRep_bCurrentlyActive();// 0x2673d0be4041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x2672d0be4041
	bool IsActive();// 0x2671d0be4041
	void Deactivate();// 0x2670d0be4041
	void Activate();// 0x266fd0be4041

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4]
	float WarmupTime;//[Offset: 0x38, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x2b53d0be4041

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x448, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x450, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x460, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x471, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x471, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x471, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x471, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x471, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x472, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x472, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x472, Size: 0x1]
	byte LODMethod;//[Offset: 0x47d, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x47e, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x480, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x490, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x4a0, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x4b0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x4c0, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	Vector OldPosition;//[Offset: 0x4d4, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x4e0, Size: 0xc]
	float WarmupTime;//[Offset: 0x4ec, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x4f0, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x4f8, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x500, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x520, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x538, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x590, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x598, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x5a0, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x5a1, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x5a2, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x5d0, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2b6bd0be4041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2b6ad0be4041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2b69d0be4041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x2b68d0be4041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x2b67d0be4041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x2b66d0be4041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x2b65d0be4041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x2b64d0be4041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x2b63d0be4041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x2b62d0be4041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x2b61d0be4041
	int GetNumActiveParticles();// 0x2b60d0be4041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x2ba1d0be4041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x2b5ed0be4041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x2b5dd0be4041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x2b5cd0be4041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x2b5bd0be4041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x2b5ad0be4041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x2b59d0be4041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x2b58d0be4041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x2b57d0be4041
	void EndTrails();// 0x2b56d0be4041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x2b55d0be4041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2b54d0be4041

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x1c44d0be4041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x1c43d0be4041
	void SetIntParameter(FName ParameterName, int Param);// 0x1c42d0be4041
	void SetFloatParameter(FName ParameterName, float Param);// 0x1c41d0be4041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x1c40d0be4041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x1c3fd0be4041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x1c3ed0be4041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x1c3dd0be4041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x1c3cd0be4041
	void ReleaseToPool();// 0x1c3bd0be4041
	FXSystemAsset* GetFXSystemAsset();// 0x1c3ad0be4041

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6b0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6b8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x6e8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x6f4, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x730, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x740, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x750, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x8b0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x8b4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8b5, Size: 0x1]
	byte AnimationMode;//[Offset: 0x8b7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b9, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b9, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b9, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b9, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b9, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ba, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c0, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c0, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c0, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c1, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c1, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c1, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c1, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c1, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c1, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c1, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c2, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c2, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c2, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c2, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c2, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c2, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c2, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c2, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c3, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c3, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c3, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c3, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c3, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c3, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8c6, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x8c8, Size: 0x4]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8d0, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x8e0, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x8f0, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x900, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x9d8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x9dc, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9e8, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa40, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xb10, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x2cafd0be4041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x2caed0be4041
	void ToggleDisablePostProcessBlueprint();// 0x2cadd0be4041
	void TermBodiesBelow(FName ParentBoneName);// 0x2cacd0be4041
	void SuspendClothingSimulation();// 0x2cabd0be4041
	void Stop();// 0x2caad0be4041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x2ca9d0be4041
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x2ca8d0be4041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x2ca7d0be4041
	void SetTeleportRotationThreshold(float Threshold);// 0x2ca6d0be4041
	void SetTeleportDistanceThreshold(float Threshold);// 0x2ca5d0be4041
	void SetPosition(float InPos, bool bFireNotifies);// 0x2ce6d0be4041
	void SetPlayRate(float Rate);// 0x2ca3d0be4041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x2ca2d0be4041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x2ca1d0be4041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x2ca0d0be4041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x2c9fd0be4041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x2c9ed0be4041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x2c9dd0be4041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x2c9cd0be4041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x2c9bd0be4041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x2c9ad0be4041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x2c99d0be4041
	void SetClothMaxDistanceScale(float Scale);// 0x2c98d0be4041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x2c97d0be4041
	void SetAnimClass(class Object NewClass);// 0x2c96d0be4041
	void SetAnimationMode(byte InAnimationMode);// 0x2c95d0be4041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x2c94d0be4041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x2c93d0be4041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x2c92d0be4041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x2c91d0be4041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x2c90d0be4041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2c8fd0be4041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2c8ed0be4041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x2c8dd0be4041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x2c8cd0be4041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2c8bd0be4041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x2c8ad0be4041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x2c89d0be4041
	void ResumeClothingSimulation();// 0x2c88d0be4041
	void ResetClothTeleportMode();// 0x2c87d0be4041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x2c86d0be4041
	void ResetAllowedAnimCurveEvaluation();// 0x2c85d0be4041
	void ResetAllBodiesSimulatePhysics();// 0x2c84d0be4041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x2cc5d0be4041
	void Play(bool bLooping);// 0x2c82d0be4041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x2c81d0be4041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x2c80d0be4041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x2c7fd0be4041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x2c7ed0be4041
	bool IsPlaying();// 0x2c7dd0be4041
	bool IsClothingSimulationSuspended();// 0x2c7cd0be4041
	bool IsBodyGravityEnabled(FName BoneName);// 0x2c7bd0be4041
	bool HasValidAnimationInstance();// 0x2c7ad0be4041
	float GetTeleportRotationThreshold();// 0x2c79d0be4041
	float GetTeleportDistanceThreshold();// 0x2c78d0be4041
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x2c77d0be4041
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x2c76d0be4041
	Vector GetSkeletalCenterOfMass();// 0x2c75d0be4041
	AnimInstance* GetPostProcessInstance();// 0x2c74d0be4041
	float GetPosition();// 0x2c73d0be4041
	float GetPlayRate();// 0x2c72d0be4041
	float GetMorphTarget(FName MorphTargetName);// 0x2c71d0be4041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x2c70d0be4041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x2c6fd0be4041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x2c6ed0be4041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x2c6dd0be4041
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x2c6cd0be4041
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x2c6bd0be4041
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x2c6ad0be4041
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x2c69d0be4041
	bool GetDisablePostProcessBlueprint();// 0x2c68d0be4041
	bool GetDisableAnimCurves();// 0x2c67d0be4041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x2c66d0be4041
	float GetClothMaxDistanceScale();// 0x2c65d0be4041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x2c64d0be4041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x2c63d0be4041
	AnimInstance* GetAnimInstance();// 0x2ca4d0be4041
	class Object GetAnimClass();// 0x2c61d0be4041
	byte GetAnimationMode();// 0x2c60d0be4041
	bool GetAllowRigidBodyAnimNode();// 0x2c5fd0be4041
	bool GetAllowedAnimCurveEvaluate();// 0x2c5ed0be4041
	void ForceClothNextUpdateTeleportAndReset();// 0x2c5dd0be4041
	void ForceClothNextUpdateTeleport();// 0x2c5cd0be4041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x2c5bd0be4041
	void ClearMorphTargets();// 0x2c5ad0be4041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x2c59d0be4041
	void BindClothToMasterPoseComponent();// 0x2c58d0be4041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x2c57d0be4041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x2c56d0be4041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x2c55d0be4041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2c54d0be4041

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x478, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x480, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x488, Size: 0x10]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x498, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5a0, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x5a8, Size: 0x4]
	int MinLodModel;//[Offset: 0x5ac, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5b8, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5c8, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5fc, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5fe, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5fe, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5fe, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5fe, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5fe, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ff, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ff, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5ff, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5ff, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5ff, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5ff, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5ff, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5ff, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x600, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x600, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x600, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x600, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x600, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x600, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x601, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x601, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x604, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x618, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x640, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x2c13d0be4041
	void UnHideBoneByName(FName BoneName);// 0x2c12d0be4041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2c11d0be4041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2c10d0be4041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x2c0fd0be4041
	void ShowAllMaterialSections(int LODIndex);// 0x2c0ed0be4041
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x2c0dd0be4041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x2c0cd0be4041
	bool SetSkinWeightProfile(FName InProfileName);// 0x2c0bd0be4041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x2c0ad0be4041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x2c09d0be4041
	void SetRenderStatic(bool bNewValue);// 0x2c08d0be4041
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x2c07d0be4041
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x2c06d0be4041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x2c05d0be4041
	void SetMinLOD(int InNewMinLOD);// 0x2c04d0be4041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x2c03d0be4041
	void SetForcedLOD(int InNewForcedLOD);// 0x2c02d0be4041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x2c01d0be4041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x2c00d0be4041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x2c41d0be4041
	bool IsUsingSkinWeightProfile();// 0x2bfed0be4041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x2bfdd0be4041
	bool IsBoneHiddenByName(FName BoneName);// 0x2bfcd0be4041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x2bfbd0be4041
	int GetVertexOffsetUsage(int LODIndex);// 0x2bfad0be4041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x2bf9d0be4041
	FName GetSocketBoneName(FName InSocketName);// 0x2bf8d0be4041
	Vector GetRefPosePosition(int BoneIndex);// 0x2bf7d0be4041
	FName GetParentBone(FName BoneName);// 0x2bf6d0be4041
	int GetNumLODs();// 0x2bf5d0be4041
	int GetNumBones();// 0x2bf4d0be4041
	int GetForcedLOD();// 0x2bf3d0be4041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x2bf2d0be4041
	FName GetCurrentSkinWeightProfileName();// 0x2bf1d0be4041
	FName GetBoneName(int BoneIndex);// 0x2bf0d0be4041
	int GetBoneIndex(FName BoneName);// 0x2befd0be4041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x2beed0be4041
	void ClearVertexColorOverride(int LODIndex);// 0x2bedd0be4041
	void ClearSkinWeightProfile();// 0x2becd0be4041
	void ClearSkinWeightOverride(int LODIndex);// 0x2bebd0be4041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x2bead0be4041

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x448, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x1246d0be4041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x1245d0be4041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x1244d0be4041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x1243d0be4041
	FName[] GetMaterialSlotNames();// 0x1242d0be4041
	MaterialInterface*[] GetMaterials();// 0x1241d0be4041
	int GetMaterialIndex(FName MaterialSlotName);// 0x1239d0be4041

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x160, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 0x10]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 0x10]
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x2c4fd0be4041
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x2c4ed0be4041
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x2c4dd0be4041
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x2c4cd0be4041
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x2c4bd0be4041
	int NumSockets();// 0x2c4ad0be4041
	FString[] K2_GetAllMorphTargetNames();// 0x2c49d0be4041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x2c48d0be4041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x2c47d0be4041
	Skeleton* GetSkeleton();// 0x2c46d0be4041
	PhysicsAsset* GetShadowPhysicsAsset();// 0x2c45d0be4041
	PhysicsAsset* GetPhysicsAsset();// 0x2c44d0be4041
	NodeMappingContainer*[] GetNodeMappingData();// 0x2c43d0be4041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x2c42d0be4041
	MorphTarget*[] GetMorphTargets();// 0x2c83d0be4041
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x2c40d0be4041
	SkeletalMaterial[] GetMaterials();// 0x2c3fd0be4041
	SkeletalMeshLODSettings* GetLODSettings();// 0x2c3ed0be4041
	BoxSphereBounds GetImportedBounds();// 0x2c3dd0be4041
	Object* GetDefaultAnimatingRig();// 0x2c3cd0be4041
	BoxSphereBounds GetBounds();// 0x2c3bd0be4041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x2c3ad0be4041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x2c39d0be4041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x2c38d0be4041

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x2cb1d0be4041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x2cb0d0be4041

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x170, Size: 0x10]
	enum Interpolation;//[Offset: 0x180, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 0x10]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1b0, Size: 0x10]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x24e7d0be4041

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1cd3d0be4041
	FString GetNotifyName();// 0x1cd2d0be4041

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x1cd8d0be4041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x1cd7d0be4041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x1cd6d0be4041
	FString GetNotifyName();// 0x1cd5d0be4041

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x24e8d0be4041

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 0x10]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 0x10]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 0x10]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10]
	int DefaultValue;//[Offset: 0x78, Size: 0x4]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x6e, Size: 0x1]
	SimpleCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x1c]
	enum SolverType;//[Offset: 0x7c, Size: 0x1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a0, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1c8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1f0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x200, Size: 0x114]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x114]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 0x4]
	float LinearPlasticityThreshold;//[Offset: 0x14, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0x18, Size: 0x4]
	float AngularPlasticityThreshold;//[Offset: 0x1c, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x20, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x3c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x5c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x78, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xc4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1]
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 0x1]
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x114]
	FName ProfileName;//[Offset: 0x114, Size: 0x8]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4]
	int SolverIterations;//[Offset: 0x4, Size: 0x4]
	int JointIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionIterations;//[Offset: 0xc, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	byte TimelineTickGroup;//[Offset: 0x90, Size: 0x1]
	FName VariableName;//[Offset: 0x94, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xac, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x25f3d0be4041

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x25ecd0be4041
	LinearColor GetLinearColorValue(float InTime);// 0x25ebd0be4041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x25ead0be4041

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x1b12d0be4041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x1b11d0be4041
	Pawn* TryGetPawnOwner();// 0x1b10d0be4041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x1b0fd0be4041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x1b0ed0be4041
	void SetRootMotionMode(byte Value);// 0x1b0dd0be4041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x1b0cd0be4041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x1b0bd0be4041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x1b0ad0be4041
	void SavePoseSnapshot(FName SnapshotName);// 0x1b09d0be4041
	void ResetDynamics(enum InTeleportType);// 0x1b08d0be4041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x1b07d0be4041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x1b06d0be4041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x1b05d0be4041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x1b04d0be4041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x1b45d0be4041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x1b02d0be4041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x1b01d0be4041
	void Montage_Resume(const AnimMontage* Montage);// 0x1b00d0be4041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x1affd0be4041
	void Montage_Pause(const AnimMontage* Montage);// 0x1afed0be4041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x1afdd0be4041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x1afcd0be4041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x1afbd0be4041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x1afad0be4041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x1af9d0be4041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x1af8d0be4041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x1af7d0be4041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x1af6d0be4041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x1af5d0be4041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x1af4d0be4041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x1af3d0be4041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x1af2d0be4041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x1af1d0be4041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x1af0d0be4041
	bool IsAnyMontagePlaying();// 0x1aefd0be4041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x1aeed0be4041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x1aedd0be4041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x1aecd0be4041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x1aebd0be4041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x1aead0be4041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x1ae9d0be4041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x1ae8d0be4041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x1ae7d0be4041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x1ae6d0be4041
	bool GetPropagateNotifiesToLinkedInstances();// 0x1ae5d0be4041
	SkeletalMeshComponent* GetOwningComponent();// 0x1ae4d0be4041
	Actor* GetOwningActor();// 0x1ae3d0be4041
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x1b24d0be4041
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x1ae1d0be4041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x1ae0d0be4041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x1adfd0be4041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x1aded0be4041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x1addd0be4041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x1adcd0be4041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x1adbd0be4041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x1adad0be4041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x1ad9d0be4041
	float GetInstanceMachineWeight(int MachineIndex);// 0x1ad8d0be4041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x1ad7d0be4041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x1ad6d0be4041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x1ad5d0be4041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x1ad4d0be4041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x1ad3d0be4041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x1ad2d0be4041
	float GetCurveValue(FName CurveName);// 0x1ad1d0be4041
	FName GetCurrentStateName(int MachineIndex);// 0x1ad0d0be4041
	AnimMontage* GetCurrentActiveMontage();// 0x1acfd0be4041
	void GetAllCurveNames(out FName[] OutNames);// 0x1aced0be4041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x1acdd0be4041
	void ClearMorphTargets();// 0x1accd0be4041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x1acbd0be4041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1acad0be4041
	void BlueprintPostEvaluateAnimation();// 0x1ac9d0be4041
	void BlueprintLinkedAnimationLayersInitialized();// 0x1ac8d0be4041
	void BlueprintInitializeAnimation();// 0x1ac7d0be4041
	void BlueprintBeginPlay();// 0xffffff82d0be4000

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 0x50]
	void SetNumSubsteps(int NumSubsteps);// 0x1ba0d0be4041
	void SetNumIterations(int NumIterations);// 0x1b9fd0be4041
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x1b9ed0be4041
	void PhysicsAssetUpdated();// 0x1b9dd0be4041
	float GetSimulationTime();// 0x1b9cd0be4041
	int GetNumSubsteps();// 0x1b9bd0be4041
	int GetNumKinematicParticles();// 0x1b9ad0be4041
	int GetNumIterations();// 0x1b99d0be4041
	int GetNumDynamicParticles();// 0x1b98d0be4041
	int GetNumCloths();// 0x1b97d0be4041
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x1b96d0be4041
	void EnableGravityOverride(out const Vector InVector);// 0x1b95d0be4041
	void DisableGravityOverride();// 0x1b94d0be4041
	void ClothConfigUpdated();// 0x1b93d0be4041

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x2b45d0be4041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x2b44d0be4041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x2b43d0be4041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x2b42d0be4041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x2b41d0be4041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x2b40d0be4041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x2b3fd0be4041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x2b80d0be4041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x2b3dd0be4041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x2b3cd0be4041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x2b3bd0be4041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x2b3ad0be4041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x2b39d0be4041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x2b38d0be4041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x2b37d0be4041
	void CopyInterpParameters(MaterialInstance* Source);// 0x2b36d0be4041

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x150]
	Object*[] CachedReferencedTextures;//[Offset: 0x2d8, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5f0]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x560]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5a0, Size: 0x8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5f0]
	PlayerState* PlayerState;//[Offset: 0x600, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]
	float AspectRatio;//[Offset: 0x244, Size: 0x4]
	float FOVAngle;//[Offset: 0x248, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 0x560]
	int GetAutoActivatePlayerIndex();// 0x2349d0be4041

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f4, Size: 0x4]
	float OrthoWidth;//[Offset: 0x1f8, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x1fc, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x200, Size: 0x4]
	float AspectRatio;//[Offset: 0x204, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x209, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 0x560]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x1e99d0be4041
	void SetProjectionMode(byte InProjectionMode);// 0x1e98d0be4041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x1e97d0be4041
	void SetOrthoWidth(float InOrthoWidth);// 0x1e96d0be4041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x1e95d0be4041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x1e94d0be4041
	void SetFieldOfView(float InFieldOfView);// 0x1e93d0be4041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x1e92d0be4041
	void SetAspectRatio(float InAspectRatio);// 0x1ed3d0be4041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x1e90d0be4041
	void OnCameraMeshHiddenChanged();// 0x1e8fd0be4041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x1e8ed0be4041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x1e8dd0be4041

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x2775d0be4041
	bool WasControllerKeyJustPressed(Key Key);// 0x2774d0be4041
	bool IsControllerKeyDown(Key Key);// 0x2773d0be4041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2772d0be4041
	Vector GetControllerVectorKeyState(Key Key);// 0x2771d0be4041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x2770d0be4041
	float GetControllerKeyTimeDown(Key Key);// 0x27b1d0be4041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x276ed0be4041
	float GetControllerAnalogKeyState(Key Key);// 0x276dd0be4041

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x2bdad0be4041
	void SetBind(FName BindName, FString Command);// 0x2bd9d0be4041
	void InvertAxisKey(const Key AxisKey);// 0x2bd8d0be4041
	void InvertAxis(const FName AxisName);// 0x2bd7d0be4041
	void ClearSmoothing();// 0x2bd6d0be4041

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x250, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x270, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 0x8]
	void ShowHUD();// 0x261cd0be4041
	void ShowDebugToggleSubCategory(FName Category);// 0x261bd0be4041
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x261ad0be4041
	void ShowDebug(FName DebugType);// 0x2619d0be4041
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x2618d0be4041
	void RemoveAllDebugStrings();// 0x2617d0be4041
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2616d0be4041
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x2615d0be4041
	void ReceiveHitBoxClick(const FName BoxName);// 0x2614d0be4041
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2613d0be4041
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2612d0be4041
	Vector Project(Vector Location);// 0x2611d0be4041
	void PreviousDebugTarget();// 0x2610d0be4041
	void NextDebugTarget();// 0x260fd0be4041
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x264bd0be4041
	PlayerController* GetOwningPlayerController();// 0x260dd0be4041
	Pawn* GetOwningPawn();// 0x260cd0be4041
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x260bd0be4041
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x260ad0be4041
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2609d0be4041
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x2608d0be4041
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x2607d0be4041
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x2606d0be4041
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x2605d0be4041
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2604d0be4041
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x2603d0be4041
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x2602d0be4041
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x2601d0be4041
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x2600d0be4041

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x25aad0be4041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x25a9d0be4041
	Vector K2_Project(Vector WorldLocation);// 0x25a8d0be4041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x25a7d0be4041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x25a6d0be4041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x25a5d0be4041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x25a4d0be4041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x25a3d0be4041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x25a2d0be4041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x25a1d0be4041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x25a0d0be4041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x259fd0be4041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x259ed0be4041

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 0x10]
	void Walk();// 0x25e5d0be4041
	void ViewSelf();// 0x25e4d0be4041
	void ViewPlayer(FString S);// 0x25e3d0be4041
	void ViewClass(class Actor DesiredClass);// 0x25e2d0be4041
	void ViewActor(FName ActorName);// 0x25e1d0be4041
	void UpdateSafeArea();// 0x25e0d0be4041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x25dfd0be4041
	void ToggleServerStatReplicatorClientOverwrite();// 0x25ded0be4041
	void ToggleDebugCamera();// 0x25ddd0be4041
	void ToggleAILogging();// 0x25dcd0be4041
	void TestCollisionDistance();// 0x25dbd0be4041
	void Teleport();// 0x25dad0be4041
	void Summon(FString ClassName);// 0x25d9d0be4041
	void StreamLevelOut(FName PackageName);// 0x25d8d0be4041
	void StreamLevelIn(FName PackageName);// 0x25d7d0be4041
	void SpawnServerStatReplicator();// 0x25d6d0be4041
	void Slomo(float NewTimeDilation);// 0x25d5d0be4041
	void SetWorldOrigin();// 0x25d4d0be4041
	void SetMouseSensitivityToDefault();// 0x25d3d0be4041
	void ServerToggleAILogging();// 0x25d2d0be4041
	void ReceiveInitCheatManager();// 0x25d1d0be4041
	void ReceiveEndPlay();// 0x25d0d0be4041
	void PlayersOnly();// 0x25cfd0be4041
	void OnlyLoadLevel(FName PackageName);// 0x25ced0be4041
	void LogLoc();// 0x25cdd0be4041
	void InvertMouse();// 0x260ed0be4041
	void God();// 0x25cbd0be4041
	void Ghost();// 0x25cad0be4041
	void FreezeFrame(float Delay);// 0x25c9d0be4041
	void Fly();// 0x25c8d0be4041
	void FlushLog();// 0x25c7d0be4041
	void EnableDebugCamera();// 0x25c6d0be4041
	void DumpVoiceMutingState();// 0x25c5d0be4041
	void DumpPartyState();// 0x25c4d0be4041
	void DumpOnlineSessionState();// 0x25c3d0be4041
	void DumpChatState();// 0x25c2d0be4041
	void DisableDebugCamera();// 0x25c1d0be4041
	void DestroyTarget();// 0x25c0d0be4041
	void DestroyServerStatReplicator();// 0x25bfd0be4041
	void DestroyPawns(class Pawn aClass);// 0x25bed0be4041
	void DestroyAllPawnsExceptTarget();// 0x25bdd0be4041
	void DestroyAll(class Actor aClass);// 0x25bcd0be4041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x25bbd0be4041
	void DebugCapsuleSweepPawn();// 0x25bad0be4041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x25b9d0be4041
	void DebugCapsuleSweepClear();// 0x25b8d0be4041
	void DebugCapsuleSweepChannel(byte Channel);// 0x25b7d0be4041
	void DebugCapsuleSweepCapture();// 0x25b6d0be4041
	void DebugCapsuleSweep();// 0x25b5d0be4041
	void DamageTarget(float DamageAmount);// 0x25b4d0be4041
	void CheatScript(FString ScriptName);// 0x25b3d0be4041
	void ChangeSize(float F);// 0x25b2d0be4041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x25b1d0be4041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x25b0d0be4041
	void BugIt(FString ScreenShotDescription);// 0x25afd0be4041

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56d, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56d, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56d, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56d, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56d, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56d, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x578, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x580, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x588, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x610, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x618, Size: 0x8]
	float SpeedScale;//[Offset: 0x620, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x624, Size: 0x4]
	float InitialAccel;//[Offset: 0x628, Size: 0x4]
	float InitialDecel;//[Offset: 0x62c, Size: 0x4]
	void ToggleDisplay();// 0x25ffd0be4041
	void ShowDebugSelectedInfo();// 0x25fed0be4041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x25fdd0be4041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x25fcd0be4041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x25fbd0be4041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x25fad0be4041
	Actor* GetSelectedActor();// 0x25f9d0be4041

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x448, Size: 0x4]
	float FrustumAngle;//[Offset: 0x44c, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x450, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x454, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x458, Size: 0x4]
	Texture* Texture;//[Offset: 0x460, Size: 0x8]

--------------------------------
Class: CheatManagerExtension.Object

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1510, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1ba8, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x700, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x27c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x280, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	void TurnAtRate(float Rate);// 0xffffff82d0be4000
	void MoveUp_World(float Val);// 0x262ed0be4041
	void MoveRight(float Val);// 0x262dd0be4041
	void MoveForward(float Val);// 0x262cd0be4041
	void LookUpAtRate(float Rate);// 0x262bd0be4041

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x460, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x266ed0be4041
	float GetUnscaledSphereRadius();// 0x266dd0be4041
	float GetShapeScale();// 0x26aed0be4041
	float GetScaledSphereRadius();// 0x266bd0be4041

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x448, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x450, Size: 0x8]
	Color ShapeColor;//[Offset: 0x458, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x46c, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x470, Size: 0x4]
	int MinLOD;//[Offset: 0x474, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x478, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x480, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x488, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48c, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48c, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48c, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48c, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48d, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48d, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48d, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48d, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48d, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x490, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x494, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x498, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x49c, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a0, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b0, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c0, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x20cfd0be4041
	void SetReverseCulling(bool ReverseCulling);// 0x20ced0be4041
	void SetForcedLodModel(int NewForcedLodModel);// 0x20cdd0be4041
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x20ccd0be4041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x20cbd0be4041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x20cad0be4041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x20c9d0be4041

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x358, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x378, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x388, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x19d3d0be4041
	void StopJumping();// 0x19d2d0be4041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x19d1d0be4041
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x19d0d0be4041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x19cfd0be4041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x19ced0be4041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x19cdd0be4041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x19ccd0be4041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x19cbd0be4041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x19cad0be4041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x19c9d0be4041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x19c8d0be4041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x19c7d0be4041
	void OnRep_RootMotion();// 0x19c6d0be4041
	void OnRep_ReplicatedBasedMovement();// 0x19c5d0be4041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x19c4d0be4041
	void OnRep_IsCrouched();// 0x19c3d0be4041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x19c2d0be4041
	void OnLanded(out const HitResult Hit);// 0x19c1d0be4041
	void OnJumped();// 0x19c0d0be4041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x19bfd0be4041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1a00d0be4041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x19bdd0be4041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x19bcd0be4041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x19bbd0be4041
	void Jump();// 0x19bad0be4041
	bool IsPlayingRootMotion();// 0x19b9d0be4041
	bool IsPlayingNetworkedRootMotionMontage();// 0x19b8d0be4041
	bool IsJumpProvidingForce();// 0x19b7d0be4041
	bool HasAnyRootMotion();// 0x19b6d0be4041
	AnimMontage* GetCurrentMontage();// 0x19b5d0be4041
	Vector GetBaseTranslationOffset();// 0x19b4d0be4041
	Rotator GetBaseRotationOffsetRotator();// 0x19b3d0be4041
	float GetAnimRootMotionTranslationScale();// 0x19b2d0be4041
	void Crouch(bool bClientSimulation);// 0x19b1d0be4041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x19b0d0be4041
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x19afd0be4041
	void ClientCheatWalk();// 0x19aed0be4041
	void ClientCheatGhost();// 0x19add0be4041
	void ClientCheatFly();// 0x19acd0be4041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x19abd0be4041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x19aad0be4041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x19a9d0be4041
	void ClientAckGoodMove(float Timestamp);// 0x19a8d0be4041
	bool CanJumpInternal();// 0x19a7d0be4041
	bool CanJump();// 0x19a6d0be4041
	bool CanCrouch();// 0x19a5d0be4041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x19a4d0be4041

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4] // 重力
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4] // 跳跃高度
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4] // 行走速度
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float DynamicAccelerateEffectFactor;//[Offset: 0x2b4, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2bc, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c4, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2cc, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2d0, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2e0, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e4, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e8, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2ec, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2f0, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f4, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x38a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 0x1]
	bool bUseDynamicAcceleration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38d, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38f, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x980, Size: 0x38]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9b8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa80, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0xac0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x1d62d0be4041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x1d61d0be4041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x1d60d0be4041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1d5fd0be4041
	void SetGroupsToIgnore(int GroupFlags);// 0x1d5ed0be4041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1d5dd0be4041
	void SetGroupsToAvoid(int GroupFlags);// 0x1d5cd0be4041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1d5bd0be4041
	void SetAvoidanceGroup(int GroupFlags);// 0x1d5ad0be4041
	void SetAvoidanceEnabled(bool bEnable);// 0x1d59d0be4041
	float K2_GetWalkableFloorZ();// 0x1d58d0be4041
	float K2_GetWalkableFloorAngle();// 0x1d57d0be4041
	float K2_GetModifiedMaxAcceleration();// 0x1d56d0be4041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x1d55d0be4041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x1d54d0be4041
	bool IsWalking();// 0x1d53d0be4041
	bool IsWalkable(out const HitResult Hit);// 0x1d52d0be4041
	float GetValidPerchRadius();// 0x1d51d0be4041
	float GetPerchRadiusThreshold();// 0x1d50d0be4041
	PrimitiveComponent* GetMovementBase();// 0x1d4fd0be4041
	float GetMinAnalogSpeed();// 0x1d4ed0be4041
	float GetMaxJumpHeightWithJumpTime();// 0x1d4dd0be4041
	float GetMaxJumpHeight();// 0x1d8ed0be4041
	float GetMaxBrakingDeceleration();// 0x1d4bd0be4041
	float GetMaxAcceleration();// 0x1d4ad0be4041
	Vector GetLastUpdateVelocity();// 0x1d49d0be4041
	Rotator GetLastUpdateRotation();// 0x1d48d0be4041
	Vector GetLastUpdateLocation();// 0x1d47d0be4041
	Vector GetImpartedMovementBaseVelocity();// 0x1d46d0be4041
	Vector GetCurrentAcceleration();// 0x1d45d0be4041
	Character* GetCharacterOwner();// 0x1d44d0be4041
	float GetAnalogInputModifier();// 0x1d43d0be4041
	void DisableMovement();// 0x1d42d0be4041
	void ClearAccumulatedForces();// 0x1d41d0be4041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1d40d0be4041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x1d3fd0be4041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x1d3ed0be4041
	void AddForce(Vector Force);// 0x1d3dd0be4041

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x460, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x464, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x1ea7d0be4041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x1ea6d0be4041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x1ea5d0be4041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x1ea4d0be4041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x1ea3d0be4041
	float GetUnscaledCapsuleRadius();// 0x1ea2d0be4041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x1ea1d0be4041
	float GetUnscaledCapsuleHalfHeight();// 0x1ea0d0be4041
	float GetShapeScale();// 0x1e9fd0be4041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x1e9ed0be4041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x1e9dd0be4041
	float GetScaledCapsuleRadius();// 0x1e9cd0be4041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x1e9bd0be4041
	float GetScaledCapsuleHalfHeight();// 0x1e9ad0be4041

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x200, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x25e6d0be4041

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x228, Size: 0x8]
	float PlayRate;//[Offset: 0x230, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x238, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1]
	float InterpPosition;//[Offset: 0x284, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 0x1]
	delegate OnPlay;//[Offset: 0x290, Size: 0x10]
	delegate OnStop;//[Offset: 0x2a0, Size: 0x10]
	delegate OnPause;//[Offset: 0x2b0, Size: 0x10]
	void Stop();// 0x2b4dd0be4041
	void SetPosition(float NewPosition, bool bJump);// 0x2b4cd0be4041
	void SetLoopingState(bool bNewLooping);// 0x2b4bd0be4041
	void Reverse();// 0x2b4ad0be4041
	void Play();// 0x2b49d0be4041
	void Pause();// 0x2b48d0be4041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x2b47d0be4041
	void ChangePlaybackDirection();// 0x2b46d0be4041

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x2b1fd0be4041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2b1ed0be4041
	bool RemoteEvent(FName EventName);// 0x2b5fd0be4041
	void LevelReset();// 0x2b1cd0be4041

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x448, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1]
	float ScreenSize;//[Offset: 0x454, Size: 0x4]
	float U;//[Offset: 0x458, Size: 0x4]
	float UL;//[Offset: 0x45c, Size: 0x4]
	float V;//[Offset: 0x460, Size: 0x4]
	float VL;//[Offset: 0x464, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x251cd0be4041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x251bd0be4041
	void SetSprite(Texture2D* NewSprite);// 0x251ad0be4041

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 0x8]
	float WorldToMeters;//[Offset: 0x240, Size: 0x4]
	float KillZ;//[Offset: 0x244, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x250, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x254, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 0x24]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 0x8]
	float TimeDilation;//[Offset: 0x2e8, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x348, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x2d79d0be4041

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x250, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x278, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x280, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x290, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1]
	void StartPlay();// 0x1ec4d0be4041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x1ec3d0be4041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x1ec2d0be4041
	bool ShouldReset(Actor* ActorToReset);// 0x1ec1d0be4041
	void ReturnToMainMenuHost();// 0x1ec0d0be4041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x1ebfd0be4041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1ebed0be4041
	void RestartPlayer(Controller* NewPlayer);// 0x1ebdd0be4041
	void ResetLevel();// 0x1ebcd0be4041
	bool PlayerCanRestart(PlayerController* Player);// 0x1ebbd0be4041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x1ebad0be4041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1eb9d0be4041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1eb8d0be4041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1eb7d0be4041
	void K2_OnLogout(Controller* ExitingController);// 0x1eb6d0be4041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1eb5d0be4041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x1eb4d0be4041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x1eb3d0be4041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x1ef4d0be4041
	bool HasMatchStarted();// 0x1eb1d0be4041
	bool HasMatchEnded();// 0x1eb0d0be4041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x1eafd0be4041
	int GetNumSpectators();// 0x1eaed0be4041
	int GetNumPlayers();// 0x1eadd0be4041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x1eacd0be4041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x1eabd0be4041
	Actor* ChoosePlayerStart(Controller* Player);// 0x1eaad0be4041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x1ea9d0be4041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x1ea8d0be4041

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 0x4]
	int MaxPlayers;//[Offset: 0x224, Size: 0x4]
	int MaxPartySize;//[Offset: 0x228, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1]
	FName SessionName;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 0x4]
	void OnRep_SpectatorClass();// 0x1f99d0be4041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1f98d0be4041
	void OnRep_ReplicatedHasBegunPlay();// 0x1f97d0be4041
	void OnRep_GameModeClass();// 0x1f96d0be4041
	bool HasMatchStarted();// 0x1f95d0be4041
	bool HasMatchEnded();// 0x1fd6d0be4041
	bool HasBegunPlay();// 0x1f93d0be4041
	float GetServerWorldTimeSeconds();// 0x1f92d0be4041
	float GetPlayerStartTime(Controller* Controller);// 0x1f91d0be4041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x1f90d0be4041

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]
	uint32 Channels;//[Offset: 0x224, Size: 0x4]
	uint32 InRate;//[Offset: 0x228, Size: 0x4]
	uint32 OutRate;//[Offset: 0x22c, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x238, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x268, Size: 0x4]
	uint32 InPackets;//[Offset: 0x26c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x270, Size: 0x4]
	uint32 InBunches;//[Offset: 0x274, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x278, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x27c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x280, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x294, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x228, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x22c, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x238, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x258, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 0x4]
	float MoveRepSize;//[Offset: 0x260, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4]
	float GainHF;//[Offset: 0x30, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float LateDelay;//[Offset: 0x3c, Size: 0x4]
	float DecayTime;//[Offset: 0x40, Size: 0x4]
	float Density;//[Offset: 0x44, Size: 0x4]
	float Diffusion;//[Offset: 0x48, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4]
	float LateGain;//[Offset: 0x54, Size: 0x4]
	float Gain;//[Offset: 0x58, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8]
	bool ShouldBeLoaded();// 0x2b2dd0be4041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x2b2cd0be4041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x2b2bd0be4041
	void SetPriority(int NewPriority);// 0x2b2ad0be4041
	void SetLevelLODIndex(int LODIndex);// 0x2b29d0be4041
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x2b28d0be4041
	bool IsStreamingStatePending();// 0x2b27d0be4041
	bool IsLevelVisible();// 0x2b26d0be4041
	bool IsLevelLoaded();// 0x2b25d0be4041
	FName GetWorldAssetPackageFName();// 0x2b24d0be4041
	Level* GetLoadedLevel();// 0x2b23d0be4041
	LevelScriptActor* GetLevelScriptActor();// 0x2b22d0be4041
	bool GetIsRequestingUnloadAndRemoval();// 0x2b21d0be4041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x2b20d0be4041

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x269, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x858, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xa04, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa28, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa40, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x2519d0be4041
	int GetObjectCount();// 0x2518d0be4041
	int GetNewAvoidanceUID();// 0x2517d0be4041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x2516d0be4041

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 0x1]
	void SetMobility(byte InMobility);// 0x20e1d0be4041

--------------------------------
Class: BP_Sky_Sphere_C.Actor.Object
	StaticMeshComponent* SkySphereMesh;//[Offset: 0x220, Size: 0x8]
	SceneComponent* Base;//[Offset: 0x228, Size: 0x8]
	MaterialInstanceDynamic* Sky material;//[Offset: 0x230, Size: 0x8]
	bool Refresh material;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	DirectionalLight* Directional light actor;//[Offset: 0x240, Size: 0x8]
	bool Colors determined by sun position;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float Sun height;//[Offset: 0x24c, Size: 0x4]
	float Sun brightness;//[Offset: 0x250, Size: 0x4]
	float Horizon falloff;//[Offset: 0x254, Size: 0x4]
	LinearColor Zenith color;//[Offset: 0x258, Size: 0x10]
	LinearColor Horizon color;//[Offset: 0x268, Size: 0x10]
	LinearColor Cloud color;//[Offset: 0x278, Size: 0x10]
	LinearColor Overall Color;//[Offset: 0x288, Size: 0x10]
	float Cloud speed;//[Offset: 0x298, Size: 0x4]
	float Cloud opacity;//[Offset: 0x29c, Size: 0x4]
	float Stars brightness;//[Offset: 0x2a0, Size: 0x4]
	CurveLinearColor* Horizon color curve;//[Offset: 0x2a8, Size: 0x8]
	CurveLinearColor* Zenith color curve;//[Offset: 0x2b0, Size: 0x8]
	CurveLinearColor* Cloud color curve;//[Offset: 0x2b8, Size: 0x8]
	void RefreshMaterial(float CallFunc_Abs_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Lerp_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector CallFunc_Conv_RotatorToVector_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue);// 0x741bd0e64001
	void UpdateSunDirection(bool CallFunc_Less_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_SelectFloat_ReturnValue, float CallFunc_MapRangeUnclamped_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, float CallFunc_Abs_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue, LinearColor CallFunc_GetClampedLinearColorValue_ReturnValue);// 0xffffff82d0be4000
	void UserConstructionScript(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xffffff86d0be5111

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x220, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void ToggleEnabled();// 0x263cd0be4041
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x263bd0be4041
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x263ad0be4041
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2639d0be4041
	void SetLightColor(LinearColor NewLightColor);// 0x2638d0be4041
	void SetEnabled(bool bSetEnabled);// 0x2637d0be4041
	void SetCastShadows(bool bNewValue);// 0x2636d0be4041
	void SetBrightness(float NewBrightness);// 0x2635d0be4041
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2634d0be4041
	void OnRep_bEnabled();// 0x2633d0be4041
	bool IsEnabled();// 0x2632d0be4041
	LinearColor GetLightColor();// 0x2631d0be4041
	float GetBrightness();// 0x2630d0be4041

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x224, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x228, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x22c, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x234, Size: 0x4]
	float MinRoughness;//[Offset: 0x23c, Size: 0x4]
	float SpecularScale;//[Offset: 0x240, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x244, Size: 0x4]
	float ShadowBias;//[Offset: 0x248, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x24c, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x250, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x254, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x259, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x260, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x268, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x278, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x284, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x288, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x28c, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	float BloomScale;//[Offset: 0x294, Size: 0x4]
	float BloomThreshold;//[Offset: 0x298, Size: 0x4]
	float BloomMaxBrightness;//[Offset: 0x29c, Size: 0x4]
	Color BloomTint;//[Offset: 0x2a0, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x2a8, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x265ed0be4041
	void SetUseTemperature(bool bNewValue);// 0x265dd0be4041
	void SetUseIESBrightness(bool bNewValue);// 0x265cd0be4041
	void SetTransmission(bool bNewValue);// 0x265bd0be4041
	void SetTemperature(float NewTemperature);// 0x265ad0be4041
	void SetSpecularScale(float NewValue);// 0x2659d0be4041
	void SetShadowSlopeBias(float NewValue);// 0x2658d0be4041
	void SetShadowBias(float NewValue);// 0x2657d0be4041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2656d0be4041
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2655d0be4041
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2654d0be4041
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2653d0be4041
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x2652d0be4041
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x2651d0be4041
	void SetIntensity(float NewIntensity);// 0x2650d0be4041
	void SetIndirectLightingIntensity(float NewIntensity);// 0x264fd0be4041
	void SetIESTexture(TextureLightProfile* NewValue);// 0x264ed0be4041
	void SetIESBrightnessScale(float NewValue);// 0x264dd0be4041
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x264cd0be4041
	void SetEnableLightShaftBloom(bool bNewValue);// 0x268dd0be4041
	void SetBloomTint(Color NewValue);// 0x264ad0be4041
	void SetBloomThreshold(float NewValue);// 0x2649d0be4041
	void SetBloomScale(float NewValue);// 0x2648d0be4041
	void SetBloomMaxBrightness(float NewValue);// 0x2647d0be4041
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2646d0be4041
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x2645d0be4041

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1f4, Size: 0x10]
	float Brightness;//[Offset: 0x204, Size: 0x4]
	float Intensity;//[Offset: 0x208, Size: 0x4]
	Color LightColor;//[Offset: 0x20c, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 0x1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1]
	float DeepShadowLayerDistribution;//[Offset: 0x214, Size: 0x4]
	float IndirectLightingIntensity;//[Offset: 0x218, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x21c, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x220, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x2644d0be4041
	void SetCastVolumetricShadow(bool bNewValue);// 0x2643d0be4041
	void SetCastShadows(bool bNewValue);// 0x2642d0be4041
	void SetCastRaytracedShadow(bool bNewValue);// 0x2641d0be4041
	void SetCastDeepShadow(bool bNewValue);// 0x2640d0be4041
	void SetAffectReflection(bool bNewValue);// 0x263fd0be4041
	void SetAffectGlobalIllumination(bool bNewValue);// 0x263ed0be4041
	LinearColor GetLightColor();// 0x263dd0be4041

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x1a0, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x1a4, Size: 0x4]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x220, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void OnRep_bEnabled();// 0x2044d0be4041

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	byte SourceType;//[Offset: 0x225, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x228, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x230, Size: 0x4]
	int CubemapResolution;//[Offset: 0x234, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x238, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x240, Size: 0x10]
	float OcclusionMaxDistance;//[Offset: 0x250, Size: 0x4]
	float Contrast;//[Offset: 0x254, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x258, Size: 0x4]
	float MinOcclusion;//[Offset: 0x25c, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x260, Size: 0x4]
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	float CloudAmbientOcclusionStrength;//[Offset: 0x268, Size: 0x4]
	float CloudAmbientOcclusionExtent;//[Offset: 0x26c, Size: 0x4]
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x270, Size: 0x4]
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x274, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x278, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x328, Size: 0x8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2ccfd0be4041
	void SetOcclusionTint(out const Color InTint);// 0x2cced0be4041
	void SetOcclusionExponent(float InOcclusionExponent);// 0x2ccdd0be4041
	void SetOcclusionContrast(float InOcclusionContrast);// 0x2cccd0be4041
	void SetMinOcclusion(float InMinOcclusion);// 0x2ccbd0be4041
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x2ccad0be4041
	void SetLightColor(LinearColor NewLightColor);// 0x2cc9d0be4041
	void SetIntensity(float NewIntensity);// 0x2cc8d0be4041
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2cc7d0be4041
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x2cc6d0be4041
	void SetCubemap(TextureCube* NewCubemap);// 0x2d07d0be4041
	void RecaptureSky();// 0x2cc4d0be4041

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x244, Size: 0x8]

--------------------------------
Class: WeaponSpawner_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	class WeaponBase_C* WeaponClass;//[Offset: 0x238, Size: 0x8]
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff82d0be4000
	void ExecuteUbergraph_WeaponSpawner(int EntryPoint, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Character* CallFunc_GetPlayerCharacter_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess);// 0x7457d0e64008

--------------------------------
Class: CSGOCharacterBase_C.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c0, Size: 0x8]
	TestAudioComponent_C* TestAudioComponent;//[Offset: 0x4c8, Size: 0x8]
	CapsuleComponent* capsule;//[Offset: 0x4d0, Size: 0x8]
	AudioComponent* FireSound;//[Offset: 0x4d8, Size: 0x8]
	SkeletalMeshComponent* FP_Gun;//[Offset: 0x4e0, Size: 0x8]
	CameraComponent* OBCamera;//[Offset: 0x4e8, Size: 0x8]
	WidgetComponent* NameOnHead;//[Offset: 0x4f0, Size: 0x8]
	StaticMeshComponent* Cylinder11;//[Offset: 0x4f8, Size: 0x8]
	StaticMeshComponent* Cylinder10;//[Offset: 0x500, Size: 0x8]
	StaticMeshComponent* Cylinder9;//[Offset: 0x508, Size: 0x8]
	StaticMeshComponent* Cylinder8;//[Offset: 0x510, Size: 0x8]
	StaticMeshComponent* Cylinder7;//[Offset: 0x518, Size: 0x8]
	StaticMeshComponent* Cylinder6;//[Offset: 0x520, Size: 0x8]
	StaticMeshComponent* Cylinder5;//[Offset: 0x528, Size: 0x8]
	StaticMeshComponent* Cylinder4;//[Offset: 0x530, Size: 0x8]
	StaticMeshComponent* Cylinder3;//[Offset: 0x538, Size: 0x8]
	StaticMeshComponent* Cylinder2;//[Offset: 0x540, Size: 0x8]
	StaticMeshComponent* Cylinder1;//[Offset: 0x548, Size: 0x8]
	ArrowComponent* HandLocation;//[Offset: 0x550, Size: 0x8]
	SceneCaptureComponent2D* ShowArmComponent2D2;//[Offset: 0x558, Size: 0x8]
	SkeletalMeshComponent* 3PSilencer;//[Offset: 0x560, Size: 0x8]
	SkeletalMeshComponent* 3PGun;//[Offset: 0x568, Size: 0x8]
	SpringArmComponent* SpringArm1;//[Offset: 0x570, Size: 0x8]
	SkeletalMeshComponent* Silencer;//[Offset: 0x578, Size: 0x8]
	SpringArmComponent* SpringArm;//[Offset: 0x580, Size: 0x8]
	AudioComponent* ThrowSound;//[Offset: 0x588, Size: 0x8]
	AudioComponent* 2DSelfHereSound;//[Offset: 0x590, Size: 0x8]
	ArrowComponent* GunSoundLocation;//[Offset: 0x598, Size: 0x8]
	AudioComponent* FootStep;//[Offset: 0x5a0, Size: 0x8]
	SkeletalMeshComponent* Mesh2P;//[Offset: 0x5a8, Size: 0x8]
	ArrowComponent* C4Arrow1;//[Offset: 0x5b0, Size: 0x8]
	StaticMeshComponent* Cylinder;//[Offset: 0x5b8, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x5c0, Size: 0x8]
	SceneCaptureComponent2D* SceneCaptureComponent2D1;//[Offset: 0x5c8, Size: 0x8]
	BPC_MobileTouchInput_Shooter_C* BPC_MobileTouchInput_Shooter;//[Offset: 0x5d0, Size: 0x8]
	SkeletalMeshComponent* Sleeve;//[Offset: 0x5d8, Size: 0x8]
	SceneCaptureComponent2D* SceneCaptureComponent2D;//[Offset: 0x5e0, Size: 0x8]
	ArrowComponent* ThrowHigh;//[Offset: 0x5e8, Size: 0x8]
	AudioComponent* zoom;//[Offset: 0x5f0, Size: 0x8]
	ArrowComponent* ThrowGun;//[Offset: 0x5f8, Size: 0x8]
	CameraComponent* FirstPersonCamera;//[Offset: 0x600, Size: 0x8]
	float Timeline_2_NewTrack_0_695C511A4361BEDA7289FFAA2BA6717D;//[Offset: 0x608, Size: 0x4]
	byte Timeline_2__Direction_695C511A4361BEDA7289FFAA2BA6717D;//[Offset: 0x60c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x610, Size: 0x8]
	float RifleScope_NewTrack_0_463FD7DA438146A5A4D79A98B661D87C;//[Offset: 0x618, Size: 0x4]
	byte RifleScope__Direction_463FD7DA438146A5A4D79A98B661D87C;//[Offset: 0x61c, Size: 0x1]
	TimelineComponent* RifleScope;//[Offset: 0x620, Size: 0x8]
	float LowSpeedTimeLine_NewTrack_0_B87ABE874EAF7ED9D5C978941FDC89C5;//[Offset: 0x628, Size: 0x4]
	byte LowSpeedTimeLine__Direction_B87ABE874EAF7ED9D5C978941FDC89C5;//[Offset: 0x62c, Size: 0x1]
	TimelineComponent* LowSpeedTimeLine;//[Offset: 0x630, Size: 0x8]
	float NoArmorUpTimeline_NewTrack_0_2950A989489A68B0B699E0854CF2F1D3;//[Offset: 0x638, Size: 0x4]
	byte NoArmorUpTimeline__Direction_2950A989489A68B0B699E0854CF2F1D3;//[Offset: 0x63c, Size: 0x1]
	TimelineComponent* NoArmorUpTimeline;//[Offset: 0x640, Size: 0x8]
	float Timeline_1_NewTrack_1_F367764A44BD001EED4EF992865EAAA7;//[Offset: 0x648, Size: 0x4]
	float Timeline_1_NewTrack_0_F367764A44BD001EED4EF992865EAAA7;//[Offset: 0x64c, Size: 0x4]
	byte Timeline_1__Direction_F367764A44BD001EED4EF992865EAAA7;//[Offset: 0x650, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x658, Size: 0x8]
	float ZoomTimeline_NewTrack_0_4CD2F863495049AFA2083D9498C387EE;//[Offset: 0x660, Size: 0x4]
	byte ZoomTimeline__Direction_4CD2F863495049AFA2083D9498C387EE;//[Offset: 0x664, Size: 0x1]
	TimelineComponent* ZoomTimeline;//[Offset: 0x668, Size: 0x8]
	float Timeline_0_NewTrack_0_D61AAF07418B696DBB256A96ED46FA5A;//[Offset: 0x670, Size: 0x4]
	byte Timeline_0__Direction_D61AAF07418B696DBB256A96ED46FA5A;//[Offset: 0x674, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x678, Size: 0x8]
	Vector GunOffset;//[Offset: 0x680, Size: 0xc]
	float BaseTurnRate;//[Offset: 0x68c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x690, Size: 0x4]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 0x1]
	bool IsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 0x1]
	WeaponBase_C* MainWeaponActor;//[Offset: 0x698, Size: 0x8]
	WeaponBase_C* PistolWeaponActor;//[Offset: 0x6a0, Size: 0x8]
	WeaponBase_C* KnifeWeaponActor;//[Offset: 0x6a8, Size: 0x8]
	int CurrentWeapon;//[Offset: 0x6b0, Size: 0x4]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 0x1]
	TimerHandle FireEvent;//[Offset: 0x6b8, Size: 0x8]
	bool ShotGap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	bool IsLookAting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 0x1]
	int RecoilCount;//[Offset: 0x6c4, Size: 0x4]//当前后座数量
	TimerHandle ReverseRecoilEvent;//[Offset: 0x6c8, Size: 0x8]
	float NextPitchOffset;//[Offset: 0x6d0, Size: 0x4]
	float NextYawOffset;//[Offset: 0x6d4, Size: 0x4]
	float MovementOffsetMax;//[Offset: 0x6d8, Size: 0x4]
	float InputScaleShift;//[Offset: 0x6dc, Size: 0x4]
	bool IsCourching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	int ReloadAmmoNeed;//[Offset: 0x6e4, Size: 0x4]
	float CrosshairMovePitch;//[Offset: 0x6e8, Size: 0x4]
	float CrosshairMoveYaw;//[Offset: 0x6ec, Size: 0x4]
	TimerHandle ReverseCrosshairTimer;//[Offset: 0x6f0, Size: 0x8]
	bool PitchReverseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	PlayerController* CharacterContoller;//[Offset: 0x700, Size: 0x8]
	bool IsCT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	float OpenScopeOffset;//[Offset: 0x70c, Size: 0x4]
	int CurrentScope;//[Offset: 0x710, Size: 0x4]
	ScopeWidget_C* scope;//[Offset: 0x718, Size: 0x8]
	CSGOHUD_C* HUD;//[Offset: 0x720, Size: 0x8]
	bool CanZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	float SniperInputScale;//[Offset: 0x72c, Size: 0x4]
	float InputForward;//[Offset: 0x730, Size: 0x4]
	float InputRight;//[Offset: 0x734, Size: 0x4]
	int LastWeapon;//[Offset: 0x738, Size: 0x4]
	CurveFloat* KnifeCurveMove;//[Offset: 0x740, Size: 0x8]
	WeaponBase_C* GrenadeWeaponActor;//[Offset: 0x748, Size: 0x8]
	WeaponBase_C* FlashWeaponActor;//[Offset: 0x750, Size: 0x8]
	float KnifeAttackRange;//[Offset: 0x758, Size: 0x4]
	bool IsThrowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 0x1]
	bool IsLightThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75d, Size: 0x1]
	bool CanThrowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75e, Size: 0x1]
	bool SaveThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75f, Size: 0x1]
	bool CanThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 0x1]
	WeaponBase_C* SmokeWeaponActor;//[Offset: 0x768, Size: 0x8]
	WeaponBase_C* MolotovWeaponActor;//[Offset: 0x770, Size: 0x8]
	bool CanSwitchGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1]
	bool CanThrowGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 0x1]
	float MinSmokeDistance;//[Offset: 0x77c, Size: 0x4]
	bool FastScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1]
	float CHeal;//[Offset: 0x784, Size: 0x4]
	float CHealMax;//[Offset: 0x788, Size: 0x4]
	SmokeWidget_C* SmokeWidget;//[Offset: 0x790, Size: 0x8]
	class WeaponBase_C[] CTEquipment;//[Offset: 0x798, Size: 0x10]
	class WeaponBase_C[] TEquipment;//[Offset: 0x7a8, Size: 0x10]
	WeaponBase_C*[] WeaponBuff;//[Offset: 0x7b8, Size: 0x10]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	bool ShouldSoundFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 0x1]
	float NormalFOV;//[Offset: 0x7cc, Size: 0x4]
	float Scope1FOV;//[Offset: 0x7d0, Size: 0x4]
	float Scope2FOV;//[Offset: 0x7d4, Size: 0x4]
	bool IsShiftWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	TeammateIconActor_C* TeammateIcon;//[Offset: 0x7e0, Size: 0x8]
	EnemyDotActor_C* EnemyIcon;//[Offset: 0x7e8, Size: 0x8]
	bool IsShowingEnemyDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 0x1]
	float AimAssistStrong;//[Offset: 0x7f4, Size: 0x4]
	bool IsBeingFlash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]
	WeaponBase_C* C4WeaponActor;//[Offset: 0x800, Size: 0x8]
	bool IsPlantingC4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	bool CanPlantC4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 0x1]
	float BombDefuseCount;//[Offset: 0x80c, Size: 0x4]
	TimerHandle DefuseBombTimer;//[Offset: 0x810, Size: 0x8]
	bool IsDefusing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	float InputScale;//[Offset: 0x81c, Size: 0x4]
	float InputScaleBase;//[Offset: 0x820, Size: 0x4]
	float InputScaleScope1;//[Offset: 0x824, Size: 0x4]
	float InputScaleScope2;//[Offset: 0x828, Size: 0x4]
	FText CharacterName;//[Offset: 0x830, Size: 0x18]
	InGameSettingWidget_C* InGameSettingWidget;//[Offset: 0x848, Size: 0x8]
	bool IsClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 0x1]
	FlashWidget_C* FlashWidget;//[Offset: 0x858, Size: 0x8]
	Vector LefthandPosition;//[Offset: 0x860, Size: 0xc]
	bool IsMirco;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 0x1]
	bool IsBuying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d, Size: 0x1]
	WeaponBase_C* BuyingGun;//[Offset: 0x870, Size: 0x8]
	class WeaponBase_C[] InitGiveWeapon;//[Offset: 0x878, Size: 0x10]
	class WeaponBase_C[] LastRoundsWeapon;//[Offset: 0x888, Size: 0x10]
	bool LastRoundAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 0x1]
	int InitGunByCount;//[Offset: 0x89c, Size: 0x4]
	bool IsBuyingInitGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 0x1]
	float Mny;//[Offset: 0x8a4, Size: 0x4]
	bool IsInBuyArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]
	bool IsFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 0x1]
	float PitchCurrentInput;//[Offset: 0x8ac, Size: 0x4]
	float YawCurrentInput;//[Offset: 0x8b0, Size: 0x4]
	float ArmYaw;//[Offset: 0x8b4, Size: 0x4]
	float ArmPitch;//[Offset: 0x8b8, Size: 0x4]
	bool IsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 0x1]
	float NextCrossMultiply;//[Offset: 0x8c0, Size: 0x4]
	float CheckShiftWalkForward;//[Offset: 0x8c4, Size: 0x4]
	float CheckShiftWalkRight;//[Offset: 0x8c8, Size: 0x4]
	bool HaveSetGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1]
	WeaponBase_C* NotifyBuying;//[Offset: 0x8d0, Size: 0x8]
	TextureRenderTarget2D* ArmTexture;//[Offset: 0x8d8, Size: 0x8]
	TimerHandle DetectTimer;//[Offset: 0x8e0, Size: 0x8]
	WeaponBase_C*[] InitWeaponsBuffer;//[Offset: 0x8e8, Size: 0x10]
	FString UID;//[Offset: 0x8f8, Size: 0x10]
	TimerHandle DtectAm;//[Offset: 0x908, Size: 0x8]
	bool UseRadio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool bLoopback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 0x1]
	bool IsTalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 0x1]
	FString ServerKey;//[Offset: 0x918, Size: 0x10]
	bool UseTilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	float TileSensitve;//[Offset: 0x92c, Size: 0x4]
	bool IsFlashed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x930, Size: 0x1]
	bool ReverseTiltX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x931, Size: 0x1]
	bool ReverseTiltY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x932, Size: 0x1]
	bool IsPlayingFireMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x933, Size: 0x1]
	bool LocalKnifeAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x934, Size: 0x1]
	bool LocalGrenadeThrowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x935, Size: 0x1]
	bool IsLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x936, Size: 0x1]
	float Pitch;//[Offset: 0x938, Size: 0x4]
	bool IsAutoStoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 0x1]
	bool ShuoldAutoStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93d, Size: 0x1]
	bool IsC4T;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93e, Size: 0x1]
	Rotator LookRotation;//[Offset: 0x940, Size: 0xc]
	bool IsLastThrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94c, Size: 0x1]
	bool IsLastHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94d, Size: 0x1]
	bool IsContinueStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94e, Size: 0x1]
	bool HaveArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94f, Size: 0x1]
	bool HaveHeadArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1]
	bool PushCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 0x1]
	MaterialInstanceDynamic* ArmPosMat;//[Offset: 0x958, Size: 0x8]
	bool ShouldRender1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 0x1]
	bool CrossHairRed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x961, Size: 0x1]
	bool killFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x962, Size: 0x1]
	Actor*[] ThisTimeHitActor;//[Offset: 0x968, Size: 0x10]
	bool HaveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 0x1]
	Vector LhIKLocation;//[Offset: 0x97c, Size: 0xc]
	Vector JointTarget;//[Offset: 0x988, Size: 0xc]
	Vector DefaultArmPlace;//[Offset: 0x994, Size: 0xc]
	bool IsRifleScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 0x1]
	float RifleAimInputScale;//[Offset: 0x9a4, Size: 0x4]
	float RecoilScale;//[Offset: 0x9a8, Size: 0x4]
	float MoveMistakeScale;//[Offset: 0x9ac, Size: 0x4]
	float RecoilMoveScale;//[Offset: 0x9b0, Size: 0x4]
	float SpeedDropScale;//[Offset: 0x9b4, Size: 0x4]
	float LocalInputForward;//[Offset: 0x9b8, Size: 0x4]
	float LocalInputRight;//[Offset: 0x9bc, Size: 0x4]
	Skin[] UsingSkins;//[Offset: 0x9c0, Size: 0x10]
	int GrenadeThrowNum;//[Offset: 0x9d0, Size: 0x4]
	bool HaveFireCue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d4, Size: 0x1]
	CSGOCharacterBase_C*[] CanSeeEnemy;//[Offset: 0x9d8, Size: 0x10]
	Area_C* MostDangerousArea;//[Offset: 0x9e8, Size: 0x8]
	CSGOCharacterBase_C*[] CanSeeEnemyBuffer;//[Offset: 0x9f0, Size: 0x10]
	float CTAaraDangerousCaculate;//[Offset: 0xa00, Size: 0x4]
	int DetectEnemyTimerCTCount;//[Offset: 0xa04, Size: 0x4]
	TimerHandle DetectEnemyCTTimer;//[Offset: 0xa08, Size: 0x8]
	bool HaveCTPushTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	bool HaveBeenTDetectedByT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	TimerHandle DetectEnemyTTimer;//[Offset: 0xa18, Size: 0x8]
	int DetectEnemyTimerTCount;//[Offset: 0xa20, Size: 0x4]
	bool HavePushed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	float AccCounter;//[Offset: 0xa28, Size: 0x4]
	int BuyWeaponBuffer;//[Offset: 0xa2c, Size: 0x4]
	int CurrentScopeBuffer;//[Offset: 0xa30, Size: 0x4]
	float DragAimAssistStrong;//[Offset: 0xa34, Size: 0x4]
	bool ShouldDragAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1]
	bool HaveDragAATarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa39, Size: 0x1]
	HitResult DragAATarget;//[Offset: 0xa3c, Size: 0x88]
	float RotateYaw;//[Offset: 0xac4, Size: 0x4]
	float RotatePitch;//[Offset: 0xac8, Size: 0x4]
	bool ShouldReportAreaDangerous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 0x1]
	float VelocityArmBack;//[Offset: 0xad0, Size: 0x4]
	bool FirstTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 0x1]
	MaterialInstanceDynamic* AkDynamic;//[Offset: 0xad8, Size: 0x8]
	bool CanCacAirBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]
	float AccumulateAirBoostYaw;//[Offset: 0xae4, Size: 0x4]
	float CurrenttileInputYaw;//[Offset: 0xae8, Size: 0x4]
	float CurrenttileInputPitch;//[Offset: 0xaec, Size: 0x4]
	float Pitch Current Input GunwaveSmooth;//[Offset: 0xaf0, Size: 0x4]
	float Yaw Current Input GunwaveSmooth;//[Offset: 0xaf4, Size: 0x4]
	void SetAccelerate();// 0x5ce3d0e64001
	void AllCTDangerousArea(out Area_C*[] AllAreaArray1, Area_C*[] AllAreaArray, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Area_C* K2Node_DynamicCast_AsArea, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x5ce2d0e64001
	void CheckShouldTReport(out bool ShouldReport1, out Area_C* ReportArea1, Area_C* ReportArea, byte HighestDangerousArea, bool ShouldReport, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_Array_Get_Item, Area_C* K2Node_DynamicCast_AsArea, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue);// 0x5ce1d0e64001
	void HighestDangerousBaseOnAreaIndex(int B, bool IsT, out float Index, float HighestIndex, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Area_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Area_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, float K2Node_Select_Default, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x5ce0d0e64001
	void OnRep_CurrentWeapon(bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x5cdfd0e64001
	void IKLocation();// 0x5cded0e64001
	Vector CaculateFireDirection(WeaponBase_C* self2, out Vector ReturnValue2, out Vector ReturnValue3, bool Temp_bool_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, int Temp_int_Variable, float K2Node_Select_Default, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, WeaponBase_C* K2Node_Select_Default, WeaponBase_C* K2Node_Select_Default, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetUpVector_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_RandomUnitVectorInConeInDegrees_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x5cddd0e64001
	void OnRep_C4WeaponActor(bool CallFunc_IsValid_ReturnValue);// 0xffffff82d0be4000
	void OnRep_MolotovWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x5cdbd0e64001
	void OnRep_SmokeWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x5cdad0e64001
	void OnRep_FlashWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x5cd9d0e64001
	void OnRep_GrenadeWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x5cd8d0e64001
	void OnRep_KnifeWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x5cd7d0e64001
	void OnRep_PistolWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x5cd6d0e64001
	void OnRep_MainWeaponActor(bool CallFunc_IsValid_ReturnValue);// 0x5cd5d0e64001
	void CheckCanBuy(class WeaponBase_C Weapon, out bool CanBuy, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x5cd4d0e64001
	static void IfBuyGunHaveSkin(class WeaponBase_C WeaponType, out Material* Material, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Skin CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue);// 0x5cd3d0e64001
	void SetCurrentWeaponMaterialLocal(WeaponBase_C* Weapon, int ElementIndex, int Temp_int_Array_Index_Variable, WeaponBase_CZ75_C* K2Node_DynamicCast_AsWeapon_Base_CZ75, bool K2Node_DynamicCast_bSuccess, const SkeletalMaterial[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SkeletalMaterial[] CallFunc_GetMaterials_ReturnValue, int Temp_int_Loop_Counter_Variable, SkeletalMaterial CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SkeletalMaterial CallFunc_Array_Get_Item);// 0x5cd2d0e64001
	WeaponBase_C* GetCurrentWeapon(int Temp_int_Variable, WeaponBase_C* K2Node_Select_Default);// 0x5cd1d0e64001
	void GetGrenadeUse(out int GrenadeHave, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x5cd0d0e64001
	void GetShotGap(out float ShootGap, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x5ccfd0e64001
	void NoArmorUpTimeline__FinishedFunc();// 0x5cced0e64001
	void NoArmorUpTimeline__UpdateFunc();// 0x5ccdd0e64001
	void ZoomTimeline__FinishedFunc();// 0x5cccd0e64001
	void ZoomTimeline__UpdateFunc();// 0x5ccbd0e64001
	void Timeline_0__FinishedFunc();// 0x5ccad0e64001
	void Timeline_0__UpdateFunc();// 0x5cc9d0e64001
	void LowSpeedTimeLine__FinishedFunc();// 0x5cc8d0e64001
	void LowSpeedTimeLine__UpdateFunc();// 0x5cc7d0e64001
	void Timeline_1__FinishedFunc();// 0x5cc6d0e64001
	void Timeline_1__UpdateFunc();// 0x5cc5d0e64001
	void Timeline_2__FinishedFunc();// 0x5cc4d0e64001
	void Timeline_2__UpdateFunc();// 0x5cc3d0e64001
	void RifleScope__FinishedFunc();// 0x5cc2d0e64001
	void RifleScope__UpdateFunc();// 0x5cc1d0e64001
	void OnNotifyEnd_3439D9994275954F142331B6C17CDE83(FName NotifyName);// 0x5cc0d0e64001
	void OnNotifyBegin_3439D9994275954F142331B6C17CDE83(FName NotifyName);// 0x5cbfd0e64001
	void OnInterrupted_3439D9994275954F142331B6C17CDE83(FName NotifyName);// 0x5cbed0e64001
	void OnBlendOut_3439D9994275954F142331B6C17CDE83(FName NotifyName);// 0x5cbdd0e64001
	void OnCompleted_3439D9994275954F142331B6C17CDE83(FName NotifyName);// 0x5cbcd0e64001
	void OnNotifyEnd_83A0642446CF1386AF099280CBEF3F3E(FName NotifyName);// 0x5d1bd0e64008
	void OnNotifyBegin_83A0642446CF1386AF099280CBEF3F3E(FName NotifyName);// 0x5cbad0e64001
	void OnInterrupted_83A0642446CF1386AF099280CBEF3F3E(FName NotifyName);// 0x5cb9d0e64001
	void OnBlendOut_83A0642446CF1386AF099280CBEF3F3E(FName NotifyName);// 0x5cb8d0e64001
	void OnCompleted_83A0642446CF1386AF099280CBEF3F3E(FName NotifyName);// 0x5cb7d0e64001
	void OnNotifyEnd_5E9C100D4E225E68BC2C38A89C4873F8(FName NotifyName);// 0x5cb6d0e64001
	void OnNotifyBegin_5E9C100D4E225E68BC2C38A89C4873F8(FName NotifyName);// 0x5cb5d0e64001
	void OnInterrupted_5E9C100D4E225E68BC2C38A89C4873F8(FName NotifyName);// 0x5cb4d0e64001
	void OnBlendOut_5E9C100D4E225E68BC2C38A89C4873F8(FName NotifyName);// 0x5cb3d0e64001
	void OnCompleted_5E9C100D4E225E68BC2C38A89C4873F8(FName NotifyName);// 0x5cb2d0e64001
	void OnNotifyEnd_DA7F7AB04FCA10889B990E8F90F4181C(FName NotifyName);// 0x5cb1d0e64001
	void OnNotifyBegin_DA7F7AB04FCA10889B990E8F90F4181C(FName NotifyName);// 0x5cb0d0e64001
	void OnInterrupted_DA7F7AB04FCA10889B990E8F90F4181C(FName NotifyName);// 0x5cafd0e64001
	void OnBlendOut_DA7F7AB04FCA10889B990E8F90F4181C(FName NotifyName);// 0x5caed0e64001
	void OnCompleted_DA7F7AB04FCA10889B990E8F90F4181C(FName NotifyName);// 0x5cadd0e64001
	void OnNotifyEnd_FA0B52A5451B5EADE9533995239EA443(FName NotifyName);// 0x5cacd0e64001
	void OnNotifyBegin_FA0B52A5451B5EADE9533995239EA443(FName NotifyName);// 0x5cabd0e64001
	void OnInterrupted_FA0B52A5451B5EADE9533995239EA443(FName NotifyName);// 0x5caad0e64001
	void OnBlendOut_FA0B52A5451B5EADE9533995239EA443(FName NotifyName);// 0x5ca9d0e64001
	void OnCompleted_FA0B52A5451B5EADE9533995239EA443(FName NotifyName);// 0x5ca8d0e64001
	void OnNotifyEnd_6FCC8797440B691A3DCB84B3200BBBE9(FName NotifyName);// 0x5ca7d0e64001
	void OnNotifyBegin_6FCC8797440B691A3DCB84B3200BBBE9(FName NotifyName);// 0x5ca6d0e64001
	void OnInterrupted_6FCC8797440B691A3DCB84B3200BBBE9(FName NotifyName);// 0x5ca5d0e64001
	void OnBlendOut_6FCC8797440B691A3DCB84B3200BBBE9(FName NotifyName);// 0x5ca4d0e64001
	void OnCompleted_6FCC8797440B691A3DCB84B3200BBBE9(FName NotifyName);// 0x5ca3d0e64001
	void OnNotifyEnd_BF0504D143A7DBF8A3C0F98751A12A1F(FName NotifyName);// 0x5ca2d0e64001
	void OnNotifyBegin_BF0504D143A7DBF8A3C0F98751A12A1F(FName NotifyName);// 0x5ca1d0e64001
	void OnInterrupted_BF0504D143A7DBF8A3C0F98751A12A1F(FName NotifyName);// 0x5ca0d0e64001
	void OnBlendOut_BF0504D143A7DBF8A3C0F98751A12A1F(FName NotifyName);// 0x5c9fd0e64001
	void OnCompleted_BF0504D143A7DBF8A3C0F98751A12A1F(FName NotifyName);// 0x5c9ed0e64001
	void OnNotifyEnd_680D93C84D815B095442CC90496F46B5(FName NotifyName);// 0x5c9dd0e64001
	void OnNotifyBegin_680D93C84D815B095442CC90496F46B5(FName NotifyName);// 0x5c9cd0e64001
	void OnInterrupted_680D93C84D815B095442CC90496F46B5(FName NotifyName);// 0x5c9bd0e64001
	void OnBlendOut_680D93C84D815B095442CC90496F46B5(FName NotifyName);// 0x5cdcd0e64001
	void OnCompleted_680D93C84D815B095442CC90496F46B5(FName NotifyName);// 0x5c99d0e64001
	void OnNotifyEnd_E76412F34AFFB701F40B498FDB1ABA1E(FName NotifyName);// 0x5c98d0e64001
	void OnNotifyBegin_E76412F34AFFB701F40B498FDB1ABA1E(FName NotifyName);// 0x5c97d0e64001
	void OnInterrupted_E76412F34AFFB701F40B498FDB1ABA1E(FName NotifyName);// 0x5c96d0e64001
	void OnBlendOut_E76412F34AFFB701F40B498FDB1ABA1E(FName NotifyName);// 0x5c95d0e64001
	void OnCompleted_E76412F34AFFB701F40B498FDB1ABA1E(FName NotifyName);// 0x5c94d0e64001
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x5c93d0e64001
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x5c92d0e64001
	void OnNotifyEnd_C2BCA3D84E5BCB12E22F208F916424CE(FName NotifyName);// 0x5c91d0e64001
	void OnNotifyBegin_C2BCA3D84E5BCB12E22F208F916424CE(FName NotifyName);// 0x5c90d0e64001
	void OnInterrupted_C2BCA3D84E5BCB12E22F208F916424CE(FName NotifyName);// 0x5c8fd0e64001
	void OnBlendOut_C2BCA3D84E5BCB12E22F208F916424CE(FName NotifyName);// 0x5c8ed0e64001
	void OnCompleted_C2BCA3D84E5BCB12E22F208F916424CE(FName NotifyName);// 0x5c8dd0e64001
	void OnNotifyEnd_DFAE97454EC53A4AECD428908A1DAD1C(FName NotifyName);// 0x5c8cd0e64001
	void OnNotifyBegin_DFAE97454EC53A4AECD428908A1DAD1C(FName NotifyName);// 0x5c8bd0e64001
	void OnInterrupted_DFAE97454EC53A4AECD428908A1DAD1C(FName NotifyName);// 0x5c8ad0e64001
	void OnBlendOut_DFAE97454EC53A4AECD428908A1DAD1C(FName NotifyName);// 0x5c89d0e64001
	void OnCompleted_DFAE97454EC53A4AECD428908A1DAD1C(FName NotifyName);// 0x5c88d0e64001
	void OnNotifyEnd_8ABC966C4388B693B25B7F80DF6A4039(FName NotifyName);// 0x5c87d0e64001
	void OnNotifyBegin_8ABC966C4388B693B25B7F80DF6A4039(FName NotifyName);// 0x5c86d0e64001
	void OnInterrupted_8ABC966C4388B693B25B7F80DF6A4039(FName NotifyName);// 0x5c85d0e64001
	void OnBlendOut_8ABC966C4388B693B25B7F80DF6A4039(FName NotifyName);// 0x5c84d0e64001
	void OnCompleted_8ABC966C4388B693B25B7F80DF6A4039(FName NotifyName);// 0x5c83d0e64001
	void OnNotifyEnd_9FF441DC4906472B14BE2995622172AC(FName NotifyName);// 0x5c82d0e64001
	void OnNotifyBegin_9FF441DC4906472B14BE2995622172AC(FName NotifyName);// 0x5c81d0e64001
	void OnInterrupted_9FF441DC4906472B14BE2995622172AC(FName NotifyName);// 0x5c80d0e64001
	void OnBlendOut_9FF441DC4906472B14BE2995622172AC(FName NotifyName);// 0x5c7fd0e64001
	void OnCompleted_9FF441DC4906472B14BE2995622172AC(FName NotifyName);// 0x5c7ed0e64001
	void OnNotifyEnd_5BE349BA475E7DA740BB57A37C725ED3(FName NotifyName);// 0x5c7dd0e64001
	void OnNotifyBegin_5BE349BA475E7DA740BB57A37C725ED3(FName NotifyName);// 0x5c7cd0e64001
	void OnInterrupted_5BE349BA475E7DA740BB57A37C725ED3(FName NotifyName);// 0x5c7bd0e64001
	void OnBlendOut_5BE349BA475E7DA740BB57A37C725ED3(FName NotifyName);// 0x5c7ad0e64001
	void OnCompleted_5BE349BA475E7DA740BB57A37C725ED3(FName NotifyName);// 0x5cbbd0e64001
	void OnNotifyEnd_7EDBE7CF47D38555B87069B7300FA83D(FName NotifyName);// 0x5c78d0e64001
	void OnNotifyBegin_7EDBE7CF47D38555B87069B7300FA83D(FName NotifyName);// 0x5c77d0e64001
	void OnInterrupted_7EDBE7CF47D38555B87069B7300FA83D(FName NotifyName);// 0x5c76d0e64001
	void OnBlendOut_7EDBE7CF47D38555B87069B7300FA83D(FName NotifyName);// 0x5c75d0e64001
	void OnCompleted_7EDBE7CF47D38555B87069B7300FA83D(FName NotifyName);// 0x5c74d0e64001
	void OnNotifyEnd_454177874C93B93FC43DBAA449DD646B(FName NotifyName);// 0x5c73d0e64001
	void OnNotifyBegin_454177874C93B93FC43DBAA449DD646B(FName NotifyName);// 0x5c72d0e64001
	void OnInterrupted_454177874C93B93FC43DBAA449DD646B(FName NotifyName);// 0x5c71d0e64001
	void OnBlendOut_454177874C93B93FC43DBAA449DD646B(FName NotifyName);// 0x5c70d0e64001
	void OnCompleted_454177874C93B93FC43DBAA449DD646B(FName NotifyName);// 0x5c6fd0e64001
	void OnNotifyEnd_418A240E4A8F98023BD01A955425C239(FName NotifyName);// 0x5c6ed0e64001
	void OnNotifyBegin_418A240E4A8F98023BD01A955425C239(FName NotifyName);// 0x5c6dd0e64001
	void OnInterrupted_418A240E4A8F98023BD01A955425C239(FName NotifyName);// 0x5c6cd0e64001
	void OnBlendOut_418A240E4A8F98023BD01A955425C239(FName NotifyName);// 0x5c6bd0e64001
	void OnCompleted_418A240E4A8F98023BD01A955425C239(FName NotifyName);// 0x5c6ad0e64001
	void OnNotifyEnd_C245F9514E95BE0571BC739B04931DB0(FName NotifyName);// 0x5c69d0e64001
	void OnNotifyBegin_C245F9514E95BE0571BC739B04931DB0(FName NotifyName);// 0x5c68d0e64001
	void OnInterrupted_C245F9514E95BE0571BC739B04931DB0(FName NotifyName);// 0x5c67d0e64001
	void OnBlendOut_C245F9514E95BE0571BC739B04931DB0(FName NotifyName);// 0x5c66d0e64001
	void OnCompleted_C245F9514E95BE0571BC739B04931DB0(FName NotifyName);// 0x5c65d0e64001
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x5c64d0e64001
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x5c63d0e64001
	void OnNotifyEnd_C438D91549B94C719FB364A5CE93053C(FName NotifyName);// 0x5c62d0e64001
	void OnNotifyBegin_C438D91549B94C719FB364A5CE93053C(FName NotifyName);// 0x5c61d0e64001
	void OnInterrupted_C438D91549B94C719FB364A5CE93053C(FName NotifyName);// 0x5c60d0e64001
	void OnBlendOut_C438D91549B94C719FB364A5CE93053C(FName NotifyName);// 0x5c5fd0e64001
	void OnCompleted_C438D91549B94C719FB364A5CE93053C(FName NotifyName);// 0x5c5ed0e64001
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent(Key Key);// 0x5c5dd0e64001
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent(Key Key);// 0x5c5cd0e64001
	void OnNotifyEnd_BC963E6249729400961DD3A4DA9A4C97(FName NotifyName);// 0x5c5bd0e64001
	void OnNotifyBegin_BC963E6249729400961DD3A4DA9A4C97(FName NotifyName);// 0x5c5ad0e64001
	void OnInterrupted_BC963E6249729400961DD3A4DA9A4C97(FName NotifyName);// 0x5c59d0e64001
	void OnBlendOut_BC963E6249729400961DD3A4DA9A4C97(FName NotifyName);// 0x5c9ad0e64001
	void OnCompleted_BC963E6249729400961DD3A4DA9A4C97(FName NotifyName);// 0x5c57d0e64001
	void OnNotifyEnd_EC2CCBD647BA4875F7077398186D442C(FName NotifyName);// 0x5c56d0e64001
	void OnNotifyBegin_EC2CCBD647BA4875F7077398186D442C(FName NotifyName);// 0x5c55d0e64001
	void OnInterrupted_EC2CCBD647BA4875F7077398186D442C(FName NotifyName);// 0x5c54d0e64001
	void OnBlendOut_EC2CCBD647BA4875F7077398186D442C(FName NotifyName);// 0x5c53d0e64001
	void OnCompleted_EC2CCBD647BA4875F7077398186D442C(FName NotifyName);// 0x5c52d0e64001
	void OnNotifyEnd_AD55DF9F40F8079DCF129D8DA6D86754(FName NotifyName);// 0x5c51d0e64001
	void OnNotifyBegin_AD55DF9F40F8079DCF129D8DA6D86754(FName NotifyName);// 0x5c50d0e64001
	void OnInterrupted_AD55DF9F40F8079DCF129D8DA6D86754(FName NotifyName);// 0x5c4fd0e64001
	void OnBlendOut_AD55DF9F40F8079DCF129D8DA6D86754(FName NotifyName);// 0x5c4ed0e64001
	void OnCompleted_AD55DF9F40F8079DCF129D8DA6D86754(FName NotifyName);// 0x5c4dd0e64001
	void OnNotifyEnd_124932854D4EBF6BA66F009ECCE481CD(FName NotifyName);// 0x5c4cd0e64001
	void OnNotifyBegin_124932854D4EBF6BA66F009ECCE481CD(FName NotifyName);// 0x5c4bd0e64001
	void OnInterrupted_124932854D4EBF6BA66F009ECCE481CD(FName NotifyName);// 0x5c4ad0e64001
	void OnBlendOut_124932854D4EBF6BA66F009ECCE481CD(FName NotifyName);// 0x5c49d0e64001
	void OnCompleted_124932854D4EBF6BA66F009ECCE481CD(FName NotifyName);// 0x5c48d0e64001
	void OnNotifyEnd_ABE305CA440DCBADB13C9892422DF6CC(FName NotifyName);// 0x5c47d0e64001
	void OnNotifyBegin_ABE305CA440DCBADB13C9892422DF6CC(FName NotifyName);// 0x5c46d0e64001
	void OnInterrupted_ABE305CA440DCBADB13C9892422DF6CC(FName NotifyName);// 0x5c45d0e64001
	void OnBlendOut_ABE305CA440DCBADB13C9892422DF6CC(FName NotifyName);// 0x5c44d0e64001
	void OnCompleted_ABE305CA440DCBADB13C9892422DF6CC(FName NotifyName);// 0x5c43d0e64001
	void OnNotifyEnd_BB2316994C5189C12CF415BB3AEAD13F(FName NotifyName);// 0x5c42d0e64001
	void OnNotifyBegin_BB2316994C5189C12CF415BB3AEAD13F(FName NotifyName);// 0x5c41d0e64001
	void OnInterrupted_BB2316994C5189C12CF415BB3AEAD13F(FName NotifyName);// 0x5c40d0e64001
	void OnBlendOut_BB2316994C5189C12CF415BB3AEAD13F(FName NotifyName);// 0x5c3fd0e64001
	void OnCompleted_BB2316994C5189C12CF415BB3AEAD13F(FName NotifyName);// 0x5c3ed0e64001
	void OnNotifyEnd_4C5DD9B74895CB7A9D169C9A41D3D7B9(FName NotifyName);// 0x5c3dd0e64001
	void OnNotifyBegin_4C5DD9B74895CB7A9D169C9A41D3D7B9(FName NotifyName);// 0x5c3cd0e64001
	void OnInterrupted_4C5DD9B74895CB7A9D169C9A41D3D7B9(FName NotifyName);// 0x5c3bd0e64001
	void OnBlendOut_4C5DD9B74895CB7A9D169C9A41D3D7B9(FName NotifyName);// 0x5c3ad0e64001
	void OnCompleted_4C5DD9B74895CB7A9D169C9A41D3D7B9(FName NotifyName);// 0x5c39d0e64001
	void OnNotifyEnd_DAED4D954BDB62EE0E313E94CBCC79FC(FName NotifyName);// 0x5c38d0e64001
	void OnNotifyBegin_DAED4D954BDB62EE0E313E94CBCC79FC(FName NotifyName);// 0x5c79d0e64001
	void OnInterrupted_DAED4D954BDB62EE0E313E94CBCC79FC(FName NotifyName);// 0x5c36d0e64001
	void OnBlendOut_DAED4D954BDB62EE0E313E94CBCC79FC(FName NotifyName);// 0x5c35d0e64001
	void OnCompleted_DAED4D954BDB62EE0E313E94CBCC79FC(FName NotifyName);// 0x5c34d0e64001
	void OnNotifyEnd_2DCA8F6749CC0C2D69CA65921B20C970(FName NotifyName);// 0x5c33d0e64001
	void OnNotifyBegin_2DCA8F6749CC0C2D69CA65921B20C970(FName NotifyName);// 0x5c32d0e64001
	void OnInterrupted_2DCA8F6749CC0C2D69CA65921B20C970(FName NotifyName);// 0x5c31d0e64001
	void OnBlendOut_2DCA8F6749CC0C2D69CA65921B20C970(FName NotifyName);// 0x5c30d0e64001
	void OnCompleted_2DCA8F6749CC0C2D69CA65921B20C970(FName NotifyName);// 0x5c2fd0e64001
	void OnNotifyEnd_2C5CF689458979904C6328A3FD87A479(FName NotifyName);// 0x5c2ed0e64001
	void OnNotifyBegin_2C5CF689458979904C6328A3FD87A479(FName NotifyName);// 0x5c2dd0e64001
	void OnInterrupted_2C5CF689458979904C6328A3FD87A479(FName NotifyName);// 0x5c2cd0e64001
	void OnBlendOut_2C5CF689458979904C6328A3FD87A479(FName NotifyName);// 0x5c2bd0e64001
	void OnCompleted_2C5CF689458979904C6328A3FD87A479(FName NotifyName);// 0x5c2ad0e64001
	void OnNotifyEnd_6E565DF54C20B545BCD51DB887AA4850(FName NotifyName);// 0x5c29d0e64001
	void OnNotifyBegin_6E565DF54C20B545BCD51DB887AA4850(FName NotifyName);// 0x5c28d0e64001
	void OnInterrupted_6E565DF54C20B545BCD51DB887AA4850(FName NotifyName);// 0x5c27d0e64001
	void OnBlendOut_6E565DF54C20B545BCD51DB887AA4850(FName NotifyName);// 0x5c26d0e64001
	void OnCompleted_6E565DF54C20B545BCD51DB887AA4850(FName NotifyName);// 0x5c25d0e64001
	void OnNotifyEnd_0199C79B4907E9E5F45A138DCBB920D5(FName NotifyName);// 0x5c24d0e64001
	void OnNotifyBegin_0199C79B4907E9E5F45A138DCBB920D5(FName NotifyName);// 0x5c23d0e64001
	void OnInterrupted_0199C79B4907E9E5F45A138DCBB920D5(FName NotifyName);// 0x5c22d0e64001
	void OnBlendOut_0199C79B4907E9E5F45A138DCBB920D5(FName NotifyName);// 0x5c21d0e64001
	void OnCompleted_0199C79B4907E9E5F45A138DCBB920D5(FName NotifyName);// 0x5c20d0e64001
	void OnNotifyEnd_E795BB2D44E30033E0FA998602C44A04(FName NotifyName);// 0x5c1fd0e64001
	void OnNotifyBegin_E795BB2D44E30033E0FA998602C44A04(FName NotifyName);// 0x5c1ed0e64001
	void OnInterrupted_E795BB2D44E30033E0FA998602C44A04(FName NotifyName);// 0x5c1dd0e64001
	void OnBlendOut_E795BB2D44E30033E0FA998602C44A04(FName NotifyName);// 0x5c1cd0e64001
	void OnCompleted_E795BB2D44E30033E0FA998602C44A04(FName NotifyName);// 0x5c1bd0e64001
	void OnNotifyEnd_A65631C04E66C2F1ED24F99A46D28A97(FName NotifyName);// 0x5c1ad0e64001
	void OnNotifyBegin_A65631C04E66C2F1ED24F99A46D28A97(FName NotifyName);// 0x5c19d0e64001
	void OnInterrupted_A65631C04E66C2F1ED24F99A46D28A97(FName NotifyName);// 0x5c18d0e64001
	void OnBlendOut_A65631C04E66C2F1ED24F99A46D28A97(FName NotifyName);// 0x5c17d0e64001
	void OnCompleted_A65631C04E66C2F1ED24F99A46D28A97(FName NotifyName);// 0x5c58d0e64001
	void OnNotifyEnd_4B3853814B8CDC2CFBE60B85A478FE70(FName NotifyName);// 0x5c15d0e64001
	void OnNotifyBegin_4B3853814B8CDC2CFBE60B85A478FE70(FName NotifyName);// 0x5c14d0e64001
	void OnInterrupted_4B3853814B8CDC2CFBE60B85A478FE70(FName NotifyName);// 0x5c13d0e64001
	void OnBlendOut_4B3853814B8CDC2CFBE60B85A478FE70(FName NotifyName);// 0x5c12d0e64001
	void OnCompleted_4B3853814B8CDC2CFBE60B85A478FE70(FName NotifyName);// 0x5c11d0e64001
	void OnNotifyEnd_76CB2DCE44C74B7D990816B93EF33306(FName NotifyName);// 0x5c10d0e64001
	void OnNotifyBegin_76CB2DCE44C74B7D990816B93EF33306(FName NotifyName);// 0x5c0fd0e64001
	void OnInterrupted_76CB2DCE44C74B7D990816B93EF33306(FName NotifyName);// 0x5c0ed0e64001
	void OnBlendOut_76CB2DCE44C74B7D990816B93EF33306(FName NotifyName);// 0x5c0dd0e64001
	void OnCompleted_76CB2DCE44C74B7D990816B93EF33306(FName NotifyName);// 0x5c0cd0e64001
	void OnNotifyEnd_C2A61B15447DCFB58CBBD1835D3D733F(FName NotifyName);// 0x5c0bd0e64001
	void OnNotifyBegin_C2A61B15447DCFB58CBBD1835D3D733F(FName NotifyName);// 0x5c0ad0e64001
	void OnInterrupted_C2A61B15447DCFB58CBBD1835D3D733F(FName NotifyName);// 0x5c09d0e64001
	void OnBlendOut_C2A61B15447DCFB58CBBD1835D3D733F(FName NotifyName);// 0x5c08d0e64001
	void OnCompleted_C2A61B15447DCFB58CBBD1835D3D733F(FName NotifyName);// 0x5c07d0e64001
	void InpActEvt_G_K2Node_InputKeyEvent(Key Key);// 0x5c06d0e64001
	void OnNotifyEnd_13E3DF574344BF5AC0C7BDB0366B13EB(FName NotifyName);// 0x5c05d0e64001
	void OnNotifyBegin_13E3DF574344BF5AC0C7BDB0366B13EB(FName NotifyName);// 0x5c04d0e64001
	void OnInterrupted_13E3DF574344BF5AC0C7BDB0366B13EB(FName NotifyName);// 0x5c03d0e64001
	void OnBlendOut_13E3DF574344BF5AC0C7BDB0366B13EB(FName NotifyName);// 0x5c02d0e64001
	void OnCompleted_13E3DF574344BF5AC0C7BDB0366B13EB(FName NotifyName);// 0x5c01d0e64001
	void OnNotifyEnd_D400C14046454B28C80002B0090BB48E(FName NotifyName);// 0x5c00d0e64001
	void OnNotifyBegin_D400C14046454B28C80002B0090BB48E(FName NotifyName);// 0x5bffd0e64001
	void OnInterrupted_D400C14046454B28C80002B0090BB48E(FName NotifyName);// 0x5bfed0e64001
	void OnBlendOut_D400C14046454B28C80002B0090BB48E(FName NotifyName);// 0x5bfdd0e64001
	void OnCompleted_D400C14046454B28C80002B0090BB48E(FName NotifyName);// 0x5bfcd0e64001
	void OnNotifyEnd_3EE36176458A0B46505C36BA2FE8A069(FName NotifyName);// 0x5bfbd0e64001
	void OnNotifyBegin_3EE36176458A0B46505C36BA2FE8A069(FName NotifyName);// 0xff77d31cbf690c80
	void OnInterrupted_3EE36176458A0B46505C36BA2FE8A069(FName NotifyName);// 0x5bf9d0e64001
	void OnBlendOut_3EE36176458A0B46505C36BA2FE8A069(FName NotifyName);// 0x5bf8d0e64001
	void OnCompleted_3EE36176458A0B46505C36BA2FE8A069(FName NotifyName);// 0x5bf7d0e64001
	void OnNotifyEnd_084FF7E040738113C2380081D7A86AC7(FName NotifyName);// 0x5bf6d0e64001
	void OnNotifyBegin_084FF7E040738113C2380081D7A86AC7(FName NotifyName);// 0x5bf5d0e64001
	void OnInterrupted_084FF7E040738113C2380081D7A86AC7(FName NotifyName);// 0x5bf4d0e64001
	void OnBlendOut_084FF7E040738113C2380081D7A86AC7(FName NotifyName);// 0x5bf3d0e64001
	void OnCompleted_084FF7E040738113C2380081D7A86AC7(FName NotifyName);// 0x5bf2d0e64001
	void OnNotifyEnd_6406510842AB57D7648558B4CC29697C(FName NotifyName);// 0x5bf1d0e64001
	void OnNotifyBegin_6406510842AB57D7648558B4CC29697C(FName NotifyName);// 0x5bf0d0e64001
	void OnInterrupted_6406510842AB57D7648558B4CC29697C(FName NotifyName);// 0x5befd0e64001
	void OnBlendOut_6406510842AB57D7648558B4CC29697C(FName NotifyName);// 0x5beed0e64001
	void OnCompleted_6406510842AB57D7648558B4CC29697C(FName NotifyName);// 0x5bedd0e64001
	void OnNotifyEnd_943C645144E1EF9255127AA81513B422(FName NotifyName);// 0x5becd0e64001
	void OnNotifyBegin_943C645144E1EF9255127AA81513B422(FName NotifyName);// 0x5bebd0e64001
	void OnInterrupted_943C645144E1EF9255127AA81513B422(FName NotifyName);// 0x5bead0e64001
	void OnBlendOut_943C645144E1EF9255127AA81513B422(FName NotifyName);// 0x5be9d0e64001
	void OnCompleted_943C645144E1EF9255127AA81513B422(FName NotifyName);// 0x5be8d0e64001
	void OnNotifyEnd_05EE2CFE44631C590A8469A2D754224D(FName NotifyName);// 0x5be7d0e64001
	void OnNotifyBegin_05EE2CFE44631C590A8469A2D754224D(FName NotifyName);// 0x5be6d0e64001
	void OnInterrupted_05EE2CFE44631C590A8469A2D754224D(FName NotifyName);// 0x5be5d0e64001
	void OnBlendOut_05EE2CFE44631C590A8469A2D754224D(FName NotifyName);// 0x5be4d0e64001
	void OnCompleted_05EE2CFE44631C590A8469A2D754224D(FName NotifyName);// 0x5be3d0e64001
	void OnNotifyEnd_D2B7D1934E12DE5B31762B96D6001C33(FName NotifyName);// 0x5be2d0e64001
	void OnNotifyBegin_D2B7D1934E12DE5B31762B96D6001C33(FName NotifyName);// 0x5be1d0e64001
	void OnInterrupted_D2B7D1934E12DE5B31762B96D6001C33(FName NotifyName);// 0x5be0d0e64001
	void OnBlendOut_D2B7D1934E12DE5B31762B96D6001C33(FName NotifyName);// 0x5bdfd0e64001
	void OnCompleted_D2B7D1934E12DE5B31762B96D6001C33(FName NotifyName);// 0x5bded0e64001
	void OnNotifyEnd_A40DC2B74AD06E83DB26E9961382B1A0(FName NotifyName);// 0x5bddd0e64001
	void OnNotifyBegin_A40DC2B74AD06E83DB26E9961382B1A0(FName NotifyName);// 0x5bdcd0e64001
	void OnInterrupted_A40DC2B74AD06E83DB26E9961382B1A0(FName NotifyName);// 0x5bdbd0e64001
	void OnBlendOut_A40DC2B74AD06E83DB26E9961382B1A0(FName NotifyName);// 0x5bdad0e64001
	void OnCompleted_A40DC2B74AD06E83DB26E9961382B1A0(FName NotifyName);// 0x5c16d0e64001
	void InpActEvt_R_K2Node_InputKeyEvent(Key Key);// 0x5bd8d0e64001
	void OnNotifyEnd_171A544B4A3A5B09652DFE9EA02E0400(FName NotifyName);// 0x5bd7d0e64001
	void OnNotifyBegin_171A544B4A3A5B09652DFE9EA02E0400(FName NotifyName);// 0x5bd6d0e64001
	void OnInterrupted_171A544B4A3A5B09652DFE9EA02E0400(FName NotifyName);// 0x5bd5d0e64001
	void OnBlendOut_171A544B4A3A5B09652DFE9EA02E0400(FName NotifyName);// 0x5bd4d0e64001
	void OnCompleted_171A544B4A3A5B09652DFE9EA02E0400(FName NotifyName);// 0x5bd3d0e64001
	void OnNotifyEnd_91BED8AC494284A7FC046CB3B15FA372(FName NotifyName);// 0x5bd2d0e64001
	void OnNotifyBegin_91BED8AC494284A7FC046CB3B15FA372(FName NotifyName);// 0x5bd1d0e64001
	void OnInterrupted_91BED8AC494284A7FC046CB3B15FA372(FName NotifyName);// 0x5bd0d0e64001
	void OnBlendOut_91BED8AC494284A7FC046CB3B15FA372(FName NotifyName);// 0x5bcfd0e64001
	void OnCompleted_91BED8AC494284A7FC046CB3B15FA372(FName NotifyName);// 0x5bced0e64001
	void InpActEvt_F_K2Node_InputKeyEvent(Key Key);// 0x5bcdd0e64001
	void OnNotifyEnd_EE7CA8BE441BC69F7A1BE585493FB51D(FName NotifyName);// 0x5bccd0e64001
	void OnNotifyBegin_EE7CA8BE441BC69F7A1BE585493FB51D(FName NotifyName);// 0x5bcbd0e64001
	void OnInterrupted_EE7CA8BE441BC69F7A1BE585493FB51D(FName NotifyName);// 0x5bcad0e64001
	void OnBlendOut_EE7CA8BE441BC69F7A1BE585493FB51D(FName NotifyName);// 0x5bc9d0e64001
	void OnCompleted_EE7CA8BE441BC69F7A1BE585493FB51D(FName NotifyName);// 0x5bc8d0e64001
	void InpActEvt_LeftControl_K2Node_InputKeyEvent(Key Key);// 0x5bc7d0e64001
	void InpActEvt_LeftControl_K2Node_InputKeyEvent(Key Key);// 0x5bc6d0e64001
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x5bc5d0e64001
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x5bc4d0e64001
	void InpActEvt_Jump_K2Node_InputActionEvent(Key Key);// 0x5bc3d0e64001
	void InpActEvt_Five_K2Node_InputKeyEvent(Key Key);// 0x5bc2d0e64001
	void InpActEvt_Four_K2Node_InputKeyEvent(Key Key);// 0x5bc1d0e64001
	void InpActEvt_Three_K2Node_InputKeyEvent(Key Key);// 0x5bc0d0e64001
	void InpActEvt_Two_K2Node_InputKeyEvent(Key Key);// 0x5bbfd0e64001
	void InpActEvt_One_K2Node_InputKeyEvent(Key Key);// 0x5bbed0e64001
	void DragAimAssist();// 0x5bbdd0e64001
	void DetectShouldDragAimAssist();// 0x5bbcd0e64001
	void EnableDragAimAssist();// 0x5bbbd0e64001
	void FindEnemyCue();// 0x5bbad0e64001
	void DetectEnemyTimerCT();// 0x5bb9d0e64001
	void DetectCanSeeEnemy();// 0x5bfad0e64001
	void SetDetectCanSeeEnemyTimer();// 0x5bb7d0e64001
	void SendCue(FText CueContent);// 0x5bb6d0e64001
	void ReportEnemyCT();// 0x5bb5d0e64001
	void ResetFindEnemyCue();// 0x5bb4d0e64001
	void ReceiveCue(FText CueText);// 0x5bb3d0e64001
	void ServerSetAreaDangerous(Area_C* Area, bool SetCT, float AreaDangerous);// 0xffffff82d0be4000
	void DetectEnemyT();// 0x5bb1d0e64001
	void ServerSetCTBeenFoundFor20Second(CSGOCharacterBase_C* Character);// 0x5bb0d0e64001
	void BeenFoundByT();// 0x5bafd0e64001
	void ServerSetInputForward(float InputForward);// 0x5baed0e64001
	void ServerSetInputRight(float InputRight);// 0x5badd0e64001
	void PlayLocalUISound(SoundBase* Sound);// 0x5bacd0e64001
	void ClientGetSetting();// 0x5babd0e64001
	void ServerSetName(FText CharacterName, FString UID, FString ServerKey);// 0x5baad0e64001
	void ServerLossMoney(float Loss);// 0x5ba9d0e64001
	void ServerPrintName();// 0x5ba8d0e64001
	void ServerSetMats(out Skin[] UsingSkins);// 0x5ba7d0e64001
	void OwningClinetSetMaterial();// 0x5ba6d0e64001
	void ServerPlaySound2D(SoundBase* Sound);// 0x5ba5d0e64001
	void ClientPlaySound2D(SoundBase* Sound);// 0x5ba4d0e64001
	void DetectData();// 0x5ba3d0e64001
	void BanSelf();// 0x5ba2d0e64001
	void ServerSetDetectCheatTimer();// 0x5ba1d0e64001
	void ClientSetDetectCheatTimer();// 0x5ba0d0e64001
	void OwningClientSetIsLocal();// 0x5b9fd0e64001
	void ServerSetWeaponIndex (int CurrentWeapon);// 0x5b9ed0e64001
	void OwningClientKillFeedback();// 0x5b9dd0e64001
	void SetFootStepEventTimer();// 0x5b9cd0e64001
	void FootStepEvent();// 0x5b9bd0e64001
	void ServerSetIsLightThrow(bool IsLightThrow);// 0x5b9ad0e64001
	void ServerSetIsThrowing(bool IsThrowing);// 0x5b99d0e64001
	void ServerSpawnProjectileShow(Vector Spawn Transform Location, Rotator Spawn Transform Rotation);// 0x5bd9d0e64001
	void MutiSpawnProjectileShow(Vector Spawn Transform Location, Rotator Spawn Transform Rotation);// 0x5b97d0e64001
	void OwningClientCapture1P();// 0x5b96d0e64001
	void OwningClientCrossHairFeedBack();// 0x5b95d0e64001
	void Client3PMuzzleFlash();// 0x5b94d0e64001
	void NoArmorUp();// 0x5b93d0e64001
	void SetKnifeAttackHeavyTimer();// 0x5b92d0e64001
	void SetKnifeAttackLightTimer();// 0x5b91d0e64001
	void SetArmToNoWhenDead();// 0x5b90d0e64001
	void ServerCheckGameOverWhenPlayerQuit();// 0x5b8fd0e64001
	void ClientThrowSound(SoundBase* NewSound);// 0x5b8ed0e64001
	void ServerThrowSound(SoundBase* NewSound);// 0x5b8dd0e64001
	void ClientPlayFireSound(SoundBase* NewSound);// 0x5b8cd0e64001
	void ServerPlayFireSound(SoundBase* NewSound);// 0x5b8bd0e64001
	void ClientPlayThrowAnim(AnimMontage* MontageToPlay);// 0x5b8ad0e64001
	void ServerPlayThrowAnim(AnimMontage* MontageToPlay);// 0x5b89d0e64001
	void MultiKnifeAttackMontage(AnimMontage* MontageToPlay);// 0x5b88d0e64001
	void ServerKnifeAttackMontage(AnimMontage* MontageToPlay);// 0x5b87d0e64001
	void LocalKnifeAttackMontage(AnimMontage* MontageToPlay);// 0x5b86d0e64001
	void ClientPlayFireMontage(WeaponBase_C* Target);// 0x5b85d0e64001
	void ServerPlayFireMontage(WeaponBase_C* Target);// 0x5b84d0e64001
	void ServerDeathEvent();// 0x5b83d0e64001
	void ServerPlayDropMontage(AnimMontage* MontageToPlay, bool Plant);// 0x5b82d0e64001
	void ClientPlayDropMontage(AnimMontage* MontageToPlay, bool Plant);// 0x5b81d0e64001
	void ReceiveEndPlay(byte EndPlayReason);// 0x5b80d0e64001
	void LocalCreateKillWidget(FText KillerName, FText BeingKillName, Texture2D* KillGun, bool KillerIsT, bool BeingKillIsT, bool IsKiller, bool IsHeadShot, bool IsThrough);// 0x5b7fd0e64001
	void ServerPlayAnim(AnimMontage* MontageToPlay);// 0x5b7ed0e64001
	void MultiPlayAnim(AnimMontage* MontageToPlay);// 0x5b7dd0e64001
	void ServerSuccessDefuse(C4_C* c4);// 0x5b7cd0e64001
	void ClientSpawnDefuseSound(SoundBase* Sound);// 0x5b7bd0e64001
	void ServerSpawnDefuseSound(SoundBase* Sound);// 0x5b7ad0e64001
	void StopDefuseBomb();// 0x5b79d0e64001
	void DefuseOne();// 0x5b78d0e64001
	void DefuseBomb();// 0x5bb8d0e64001
	void ClientPlayStartSound();// 0x5b76d0e64001
	void ServerPlayStartSound();// 0x5b75d0e64001
	void ServerDropC4(const HitResult Hit, bool Condition);// 0x5b74d0e64001
	void StopPlantC4();// 0x5b73d0e64001
	void PlantC4();// 0x5b72d0e64001
	void AimAssistance(const Vector Start, const Vector End);// 0x5b71d0e64001
	void ResetReleaseFire();// 0x5b70d0e64001
	void ClientShowDamageDirection(int BarNum, bool ShouldSound);// 0x5b6fd0e64001
	void CaculateDamageDirection(Actor* Causer);// 0x5b6ed0e64001
	void DestroyCharacter();// 0x5b6dd0e64001
	void RemoveWidget();// 0x5b6cd0e64001
	void LocalDeath();// 0x5b6bd0e64001
	void ClientDeath();// 0x5b6ad0e64001
	void ServerDeath();// 0x5b69d0e64001
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x5b68d0e64001
	void ReleaseFire();// 0x5b67d0e64001
	void PressFire();// 0x5b66d0e64001
	void CaculateSmokeUIOpacity();// 0x5b65d0e64001
	void ServerThrowGrenade(Vector Spawn Transform Location, Rotator Spawn Transform Rotation, class Grenade_C Grenade, Vector VelocityToBeAdd, float VelocityRatio, WeaponBase_C* GrenadeInstance);// 0x5b64d0e64001
	void LocalThrowGrenadeHigh(class Grenade_C Grenade, WeaponBase_C* GrenadeInstance, int GrenadeIndex);// 0x5b63d0e64001
	void ClientThrowGrenade(Vector Spawn Transform Location, Rotator Spawn Transform Rotation, class Grenade_C Grenade, Vector VelocityToBeAdd, float VelocityRatio);// 0x5b62d0e64001
	void ThrowGrenadeLow(int GrenadeIndex);// 0x5b61d0e64001
	void PullGrenadeLow(int GrenadeIndex);// 0x5b60d0e64001
	void ThrowGrenadeHigh(int GrenadeIndex);// 0x5b5fd0e64001
	void PullGrenadeHigh(int GrenadeIndex);// 0x5b5ed0e64001
	void ReceiveTick(float DeltaSeconds);// 0x5b5dd0e64001
	void Knife3pAnimClient(bool IsHeavy);// 0x5b5cd0e64001
	void Knife3pAnimServer(bool IsHeavy);// 0x5b5bd0e64001
	void ServerUseAmmo(WeaponBase_C* Weapon);// 0x5b5ad0e64001
	void ClientFire(Vector Spawn Transform Location, Rotator Spawn Transform Rotation, HitResult HitResult, Vector BackSVector, SoundBase* Sound, bool IsHeadShot, bool IsHIt, bool HaveArmor);// 0x5b59d0e64001
	void KnifeAttackHeavy();// 0x5b58d0e64001
	void ServerKnifeAttack(bool HeavyAttack, const Vector Start, const Vector End, const HitResult Hit, bool IsHIt);// 0x5b57d0e64001
	void KnifeAttackLight();// 0x5b98d0e64001
	void ReleaseFireEvent(bool Force);// 0x5b55d0e64001
	void CaculateMovingOffset();// 0x5b54d0e64001
	void ReverseRecoil();// 0x5b53d0e64001
	void Recoil(WeaponBase_C* FireWeapon);// 0x5b52d0e64001
	void ServerFire(WeaponBase_C* FireWeapon, Vector BackSVector, float Distance, const Vector ServerTraceStart, const Vector ServerTraceEnd);// 0x5b51d0e64001
	void FireOne();// 0x5b50d0e64001
	void ServerSwitchScope(bool NewHidden, int CurrentScope, float InFieldOfView);// 0x5b4fd0e64001
	void MultiSwitchScope(bool NewHidden, int CurrentScope, float InFieldOfView);// 0x5b4ed0e64001
	void RMBRelease();// 0x5b4dd0e64001
	void RMBPress();// 0x5b4cd0e64001
	void SniperShootingZoom(float Duration);// 0x5b4bd0e64001
	void ClearZoom();// 0x5b4ad0e64001
	void Zoom2to0();// 0x5b49d0e64001
	void Zoom1to2();// 0x5b48d0e64001
	void Zoom0to1();// 0x5b47d0e64001
	void LocalPickupWeapon(const WeaponBase_C* Weapon);// 0x5b46d0e64001
	void ClientPickUpWeapon(WeaponBase_C* Weapon, int WeaponType);// 0x5b45d0e64001
	void ServerPickUpWeapon(WeaponBase_C* Weapon, int  WeaponType);// 0x5b44d0e64001
	void LocalSwitch(int Index);// 0x5b43d0e64001
	void ClientSwitchWeapon(int Index, int LastWeapon);// 0x5b42d0e64001
	void ServerSwitchWeapon(int Index);// 0x5b41d0e64001
	void LocalThrowWeapon();// 0x5b40d0e64001
	void ClientThrowWeapon(int Selection, WeaponBase_C* Weapon);// 0x5b3fd0e64001
	void ServerThrowWeapon(int Weapon);// 0x5b3ed0e64001
	void LocalShotGunReload(WeaponBase_C* Weapon);// 0x5b3dd0e64001
	void ServerShotGunReload(WeaponBase_C* Weapon);// 0x5b3cd0e64001
	void ClientPlayReload(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, WeaponBase_C* ReloadWeapon);// 0x5b3bd0e64001
	void ServerPlayReload(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, WeaponBase_C* ReloadWeapon);// 0x5b3ad0e64001
	void ServerReloadAnim(WeaponBase_C* Target);// 0x5b39d0e64001
	void ClientReload(WeaponBase_C* Target);// 0x5b38d0e64001
	void LocalReload(WeaponBase_C* ReloadWeapon);// 0x5b37d0e64001
	void reload();// 0x5b36d0e64001
	void ServerReload(WeaponBase_C* ReloadWeapon);// 0x5b77d0e64001
	void LookAtGun();// 0x5b34d0e64001
	void ShiftUp();// 0x5b33d0e64001
	void ShiftDown();// 0x5b32d0e64001
	void CtrlUp();// 0x5b31d0e64001
	void CtrlDown();// 0x5b30d0e64001
	void ServerSetSniperInputScale(float SniperInputScale);// 0x5b2fd0e64001
	void ClientSetAcc(float MaxAcceleration);// 0x5b2ed0e64001
	void ServerSetInputScale(float InputScaleShift);// 0x5b2dd0e64001
	void ServerSetAcc(float MaxAcceleration);// 0x5b2cd0e64001
	void ServerSet3PFlash(bool IsFlashed);// 0x5b2bd0e64001
	void BeingFlash(float FullBlindTime, float HalfBlindTime);// 0x5b2ad0e64001
	void ServerAddVelocity(Vector Vel);// 0x5b28d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_1_OnReleased Button Crouch__DelegateSignature();// 0x5b08d0e64001
	void StopShot();// 0x5b27d0e64001
	void shoot();// 0x5b26d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_21_OnPressedButtonSetting__DelegateSignature();// 0x5b25d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_20_OnPressedButtonSwitch__DelegateSignature();// 0x5b24d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_16_OnPressedButtonInspect__DelegateSignature();// 0x5b23d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_19_OnReleasedButtonBomb__DelegateSignature();// 0x5b22d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_18_OnPressedButtonBomb__DelegateSignature();// 0x5b21d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_17_OnPressed Button Walk__DelegateSignature();// 0x5b20d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_15_OnPressed Button Crouch__DelegateSignature();// 0x5b1fd0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_14_InputTouch Axis Turn__DelegateSignature(float AxisValue);// 0x5b1ed0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_5_InputTouch Axis LookUp__DelegateSignature(float Axis Value);// 0x5b1dd0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_12_OnPressed Nittpm WeaponSlot3__DelegateSignature();// 0x5b1cd0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_11_OnPressed Button Pickup__DelegateSignature();// 0x5b1bd0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_10_OnPressed Button Aim__DelegateSignature();// 0x5b1ad0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_9_OnRelease Button Aim__DelegateSignature();// 0x5b19d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_8_OnPressed_Button_GrenadeSlot__DelegateSignature(int IpSlotIndex);// 0x5b18d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_7_OnPressed Button WeaponSlot2__DelegateSignature();// 0x5b17d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_6_OnPressed Button WeaponSlot1__DelegateSignature();// 0x5b16d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_4_OnPressed Button Reload__DelegateSignature();// 0x5b15d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_3_OnReleased Button Fire__DelegateSignature();// 0x5b14d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_2_OnPressed Button Fire__DelegateSignature();// 0x5b56d0e64001
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x5b12d0e64001
	void ReliableSetMaxSpeed(float Rate);// 0x5b11d0e64001
	void UnreliableSetMaxSpeed(float Rate);// 0x5b10d0e64001
	void ServerLowSpeed();// 0x5b0fd0e64001
	void AdjustAccelerateMode(bool Condition);// 0x5b0ed0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_1_InputTouch Axis MoveRight__DelegateSignature(float AxisValue);// 0x5b0dd0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_0_InputTouch Axis MoveForward__DelegateSignature(float AxisValue, float JoystickAngle, float JoystickMoveLength);// 0x5b0cd0e64001
	void OwningClientSetHeadVisible();// 0x5b0bd0e64001
	void MulticastLookRotation(Rotator LookRotation, float DeltaTime);// 0x5b0ad0e64001
	void ServerCreateIcon();// 0x5b09d0e64001
	void LocalSetRenderTarget();// 0x5b29d0e64001
	void CreateHUD(PlayerController* OwningPlayer);// 0x5b07d0e64001
	void ReceivePossessed(Controller* NewController);// 0x5b06d0e64001
	void ReceiveBeginPlay();// 0x5b05d0e64001
	void BndEvt__BPC_MobileTouchInput_Shooter_K2Node_ComponentBoundEvent_13_OnPressed Button Jump__DelegateSignature();// 0x5b04d0e64001
	void InitShowArm();// 0x5b03d0e64001
	void OnJumped();// 0x5b02d0e64001
	void OnLanded(out const HitResult Hit);// 0x5b01d0e64001
	void ServerWeaponPickUp();// 0x5b00d0e64001
	void SpawnInitGun();// 0x5affd0e64001
	void ServerGetBuyingWeapon(WeaponBase_C* Weapon);// 0x5afed0e64001
	void ServerBuyGun(class WeaponBase_C GunToBuy);// 0x5afdd0e64001
	void ServerSetIsFreeze(bool IsFreeze);// 0x5afcd0e64001
	void DisableInputForTime(float Time, float FreezeTime);// 0x5afbd0e64001
	void SetGunWave(float DeltaTime);// 0x5afad0e64001
	void ReverseMoveShake();// 0x5af9d0e64001
	void StartMoveShake();// 0x5af8d0e64001
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent(float AxisValue);// 0x5af7d0e64001
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent(float AxisValue);// 0x5af6d0e64001
	void MultiRifleScope(bool IsRifleScope);// 0x5af5d0e64001
	void ServerSetIsRifleScope(bool IsRifleScope);// 0x5af4d0e64001
	void ClientUnAim();// 0x5b35d0e64001
	void ClientAim();// 0x5af2d0e64001
	void ServerShowEnemyDot(CSGOCharacterBase_C* Target);// 0x5af1d0e64001
	void SetDetectIfSeeEnemyTimer();// 0x5af0d0e64001
	void DetectIfSeeEnemy();// 0x5aefd0e64001
	void ClientShowDot();// 0x5aeed0e64001
	void ShowEnemyDotFor2Second();// 0x5aedd0e64001
	void ServerGiveGunNoBuying(class WeaponBase_C WeaponType);// 0x5aecd0e64001
	void ServerBuyArmorAndHead();// 0xffffffffc0d61fa0
	void ServerBuyArmor();// 0x5aead0e64001
	void ExecuteUbergraph_CSGOCharacterBase(int EntryPoint, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool Temp_bool_Variable, Texture2D* Temp_object_Variable, bool Temp_bool_Variable, Texture2D* Temp_object_Variable, bool Temp_bool_Variable, Texture2D* Temp_object_Variable, bool Temp_bool_Variable, Texture2D* Temp_object_Variable, int Temp_int_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, int Temp_int_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, class Grenade_C Temp_class_Variable, int Temp_int_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, int Temp_int_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, int Temp_int_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, int Temp_int_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, WeaponBase_C* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputActionEvent_Key, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, Key Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, int Temp_int_Variable, int Temp_int_Variable, Actor* Temp_object_Variable, Actor* Temp_object_Variable, Actor* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Key K2Node_InputKeyEvent_Key, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, Key K2Node_InputKeyEvent_Key, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, float Temp_float_Variable, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, Key Temp_struct_Variable, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, Key Temp_struct_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, int Temp_int_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, SkeletalMesh* Temp_object_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputKeyEvent_Key, const class WeaponBase_C Temp_class_Variable, WeightedBlendable K2Node_MakeStruct_WeightedBlendable, Transform CallFunc_MakeTransform_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName Temp_name_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, FName K2Node_CustomEvent_NotifyName, int CallFunc_Add_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, float Temp_float_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, bool Temp_bool_Has_Been_Initd_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, SoundBase* Temp_object_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const Actor*[] Temp_object_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Key Temp_struct_Variable, const Actor*[] Temp_object_Variable, int Temp_int_Array_Index_Variable, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Key K2Node_InputKeyEvent_Key, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, FName Temp_name_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_VSize_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_RInterpTo_Constant_ReturnValue, float CallFunc_Abs_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, Key K2Node_InputKeyEvent_Key, FName Temp_name_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_Array_Get_Item, Area_C* K2Node_DynamicCast_AsArea, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Length_ReturnValue, FText K2Node_CustomEvent_CueContent, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, CSGOCharacterBase_C* CallFunc_Array_Get_Item, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, int CallFunc_Array_AddUnique_ReturnValue, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Area_C* K2Node_DynamicCast_AsArea, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Array_Length_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FName CallFunc_Conv_StringToName_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, FText K2Node_CustomEvent_CueText, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, Area_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Area_C* K2Node_CustomEvent_Area, bool K2Node_CustomEvent_SetCT, float K2Node_CustomEvent_AreaDangerous, Rotator CallFunc_GetBaseAimRotation_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, C4_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_CheckShouldTReport_ShouldReport1, Area_C* CallFunc_CheckShouldTReport_ReportArea1, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Array_Length_ReturnValue, CSGOCharacterBase_C* K2Node_CustomEvent_Character, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, Area_C*[] CallFunc_AllCTDangerousArea_AllAreaArray1, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_CustomEvent_InputForward, float K2Node_CustomEvent_InputRight, SoundBase* K2Node_CustomEvent_Sound, GameInstance* CallFunc_GetGameInstance_ReturnValue, FText K2Node_CustomEvent_CharacterName, FString K2Node_CustomEvent_UID, FString K2Node_CustomEvent_ServerKey, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, float K2Node_CustomEvent_Loss, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetDeviceId_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, Skin[] K2Node_CustomEvent_UsingSkins, SoundBase* K2Node_CustomEvent_Sound, SoundBase* K2Node_CustomEvent_Sound, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int K2Node_CustomEvent_CurrentWeapon, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_K2_GetComponentLocation_ReturnValue, WeaponBase_C* Temp_object_Variable, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, bool CallFunc_IsFalling_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetVelocity_ReturnValue, bool CallFunc_IsServer_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FName K2Node_CustomEvent_NotifyName, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, FString CallFunc_Conv_FloatToString_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, FString CallFunc_Conv_FloatToString_ReturnValue, Actor* CallFunc_Array_Get_Item, Area_C* K2Node_DynamicCast_AsArea, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, WeaponBase_C* Temp_object_Variable, FText CallFunc_Format_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, int Temp_int_Variable, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Character* CallFunc_GetPlayerCharacter_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool K2Node_CustomEvent_IsLightThrow, bool K2Node_CustomEvent_IsThrowing, int CallFunc_Add_IntInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, bool CallFunc_Less_IntInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, FName K2Node_CustomEvent_NotifyName, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, MatineeCameraShake* CallFunc_StartMatineeCameraShake_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, Vector K2Node_CustomEvent_Spawn_Transform_Location, Rotator K2Node_CustomEvent_Spawn_Transform_Rotation, bool CallFunc_NotEqual_ObjectObject_ReturnValue, Vector K2Node_CustomEvent_Spawn_Transform_Location, Rotator K2Node_CustomEvent_Spawn_Transform_Rotation, bool Temp_bool_Has_Been_Initd_Variable, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, ProjectileShow_C* CallFunc_FinishSpawningActor_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_IsServer_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, FName Temp_name_Variable, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ObjectObject_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_FClamp_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FName K2Node_CustomEvent_NotifyName, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_IsClosed_Variable, Vector CallFunc_MakeVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsPlaying_ReturnValue, Rotator CallFunc_GetBaseAimRotation_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Has_Been_Initd_Variable, SoundBase* K2Node_CustomEvent_NewSound, SoundBase* K2Node_CustomEvent_NewSound, SoundBase* K2Node_CustomEvent_NewSound, SoundBase* K2Node_CustomEvent_NewSound, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, AnimMontage* K2Node_CustomEvent_MontageToPlay, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, AnimMontage* K2Node_CustomEvent_MontageToPlay, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, AnimMontage* K2Node_CustomEvent_MontageToPlay, AnimMontage* K2Node_CustomEvent_MontageToPlay, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* K2Node_CustomEvent_MontageToPlay, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, WeaponBase_C* K2Node_CustomEvent_Target, WeaponBase_C* K2Node_CustomEvent_Target, const Actor*[] K2Node_MakeArray_Array, FName K2Node_CustomEvent_NotifyName, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AnimMontage* K2Node_CustomEvent_MontageToPlay, bool K2Node_CustomEvent_Plant, AnimMontage* K2Node_CustomEvent_MontageToPlay, bool K2Node_CustomEvent_Plant, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte K2Node_Event_EndPlayReason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName Temp_name_Variable, FText K2Node_CustomEvent_KillerName, FText K2Node_CustomEvent_BeingKillName, Texture2D* K2Node_CustomEvent_KillGun, bool K2Node_CustomEvent_KillerIsT, bool K2Node_CustomEvent_BeingKillIsT, bool K2Node_CustomEvent_IsKiller, bool K2Node_CustomEvent_IsHeadShot, bool K2Node_CustomEvent_IsThrough, HitResult CallFunc_MakeHitResult_ReturnValue, WeaponBase_C* K2Node_Select_Default, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_CaculateFireDirection_ReturnValue, Vector CallFunc_CaculateFireDirection_ReturnValue2, Vector CallFunc_CaculateFireDirection_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult[] CallFunc_LineTraceMulti_OutHits, bool CallFunc_LineTraceMulti_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Vector_Distance_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, AnimMontage* K2Node_Select_Default, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, AnimMontage* K2Node_CustomEvent_MontageToPlay, AnimMontage* K2Node_CustomEvent_MontageToPlay, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, const Actor*[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, C4_C* K2Node_CustomEvent_C4, Vector CallFunc_K2_GetActorLocation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SoundBase* K2Node_CustomEvent_Sound, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, SoundBase* K2Node_CustomEvent_Sound, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_SphereTraceSingle_OutHit, bool CallFunc_SphereTraceSingle_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, C4_C* K2Node_DynamicCast_AsC4, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Has_Been_Initd_Variable, FName K2Node_CustomEvent_NotifyName, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, const HitResult K2Node_CustomEvent_Hit, bool K2Node_CustomEvent_Condition, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Transform CallFunc_MakeTransform_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, C4_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetComponentLocation_ReturnValue, const Vector K2Node_CustomEvent_Start, const Vector K2Node_CustomEvent_End, const Actor*[] K2Node_MakeArray_Array, Rotator CallFunc_FindLookAtRotation_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_K2_GetComponentLocation_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_FindLookAtRotation_ReturnValue, Rotator CallFunc_RInterpTo_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_NotEqual_BoolBool_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool Temp_bool_IsClosed_Variable, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanOR_ReturnValue, int K2Node_CustomEvent_BarNum, bool K2Node_CustomEvent_ShouldSound, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* K2Node_CustomEvent_Causer, Grenade_Molotov_C* K2Node_DynamicCast_AsGrenade_Molotov, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_Percent_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, OB_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_IsClosed_Variable, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, GrenadeHE_C* K2Node_DynamicCast_AsGrenade_HE, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Grenade_C* K2Node_DynamicCast_AsGrenade, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetInstigator_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, WeaponBase_C* K2Node_Select_Default, bool CallFunc_NotEqual_BoolBool_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, float K2Node_Select_Default, float CallFunc_Subtract_FloatFloat_ReturnValue, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, int CallFunc_GetGrenadeUse_GrenadeHave, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_Select_Default, Texture2D* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, Texture2D* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, Texture2D* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, Texture2D* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, GrenadeSmoke_C*[] CallFunc_GetAllActorsOfClass_OutActors, GrenadeSmoke_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_GetBaseAimRotation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector K2Node_CustomEvent_Spawn_Transform_Location, Rotator K2Node_CustomEvent_Spawn_Transform_Rotation, class Grenade_C K2Node_CustomEvent_Grenade, Vector K2Node_CustomEvent_VelocityToBeAdd, float K2Node_CustomEvent_VelocityRatio, WeaponBase_C* K2Node_CustomEvent_GrenadeInstance, bool CallFunc_IsValid_ReturnValue, class Grenade_C K2Node_CustomEvent_Grenade, WeaponBase_C* K2Node_CustomEvent_GrenadeInstance, int K2Node_CustomEvent_GrenadeIndex, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector K2Node_CustomEvent_Spawn_Transform_Location, Rotator K2Node_CustomEvent_Spawn_Transform_Rotation, class Grenade_C K2Node_CustomEvent_Grenade, Vector K2Node_CustomEvent_VelocityToBeAdd, float K2Node_CustomEvent_VelocityRatio, float CallFunc_Add_FloatFloat_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Grenade_C* CallFunc_FinishSpawningActor_ReturnValue, int K2Node_CustomEvent_GrenadeIndex, WeaponBase_C* K2Node_Select_Default, WeaponBase_Incendiary_C* K2Node_DynamicCast_AsWeapon_Base_Incendiary, bool K2Node_DynamicCast_bSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, int K2Node_CustomEvent_GrenadeIndex, WeaponBase_C* K2Node_Select_Default, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_GrenadeIndex, WeaponBase_C* K2Node_Select_Default, WeaponBase_Incendiary_C* K2Node_DynamicCast_AsWeapon_Base_Incendiary, bool K2Node_DynamicCast_bSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_GrenadeIndex, float K2Node_Event_DeltaSeconds, WeaponBase_C* K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_IsHeavy, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_IsHeavy, Rotator CallFunc_K2_GetActorRotation_ReturnValue, FName K2Node_CustomEvent_NotifyName, WeaponBase_C* K2Node_CustomEvent_Weapon, Vector K2Node_CustomEvent_Spawn_Transform_Location, Rotator K2Node_CustomEvent_Spawn_Transform_Rotation, HitResult K2Node_CustomEvent_HitResult, Vector K2Node_CustomEvent_BackSVector, SoundBase* K2Node_CustomEvent_Sound, bool K2Node_CustomEvent_IsHeadShot, bool K2Node_CustomEvent_IsHIt, bool K2Node_CustomEvent_HaveArmor, int CallFunc_Subtract_IntInt_ReturnValue, SoundBase* K2Node_Select_Default, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsSimulatingPhysics_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Cubit_ImpactFX_Spawner_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, Rotator CallFunc_K2_GetActorRotation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult[] CallFunc_SphereTraceMulti_OutHits, bool CallFunc_SphereTraceMulti_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Greater_IntInt_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_IsClosed_Variable, Rotator CallFunc_K2_GetActorRotation_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, AnimMontage* K2Node_Select_Default, int CallFunc_RandomIntegerInRange_ReturnValue, FName K2Node_CustomEvent_NotifyName, AnimMontage* K2Node_Select_Default, bool K2Node_CustomEvent_HeavyAttack, const Vector K2Node_CustomEvent_Start, const Vector K2Node_CustomEvent_End, const HitResult K2Node_CustomEvent_Hit, bool K2Node_CustomEvent_IsHIt, HitResult[] CallFunc_SphereTraceMulti_OutHits, bool CallFunc_SphereTraceMulti_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, HitResult CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult[] CallFunc_SphereTraceMulti_OutHits, bool CallFunc_SphereTraceMulti_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Greater_IntInt_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_CustomEvent_Force, float CallFunc_GetShotGap_ShootGap, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Vector CallFunc_GetVelocity_ReturnValue, bool CallFunc_IsFalling_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, ProjectileShow_C* CallFunc_FinishSpawningActor_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FName K2Node_CustomEvent_NotifyName, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WeaponBase_C* K2Node_CustomEvent_FireWeapon, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, WeaponBase_C* K2Node_CustomEvent_FireWeapon, Vector K2Node_CustomEvent_BackSVector, float K2Node_CustomEvent_Distance, const Vector K2Node_CustomEvent_ServerTraceStart, const Vector K2Node_CustomEvent_ServerTraceEnd, HitResult[] CallFunc_LineTraceMulti_OutHits, bool CallFunc_LineTraceMulti_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, FName CallFunc_Array_Get_Item, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, float K2Node_Select_Default, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, float K2Node_Select_Default, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_GetShotGap_ShootGap, float CallFunc_ApplyDamage_ReturnValue, float CallFunc_GetShotGap_ShootGap, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, class Grenade_C Temp_class_Variable, delegate K2Node_CreateDelegate_OutputDelegate, WeaponBase_C* K2Node_Select_Default, WeaponBase_C* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, class Grenade_C Temp_class_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool K2Node_CustomEvent_NewHidden, int K2Node_CustomEvent_CurrentScope, float K2Node_CustomEvent_InFieldOfView, bool K2Node_CustomEvent_NewHidden, int K2Node_CustomEvent_CurrentScope, float K2Node_CustomEvent_InFieldOfView, bool CallFunc_NotEqual_IntInt_ReturnValue, int Temp_int_Variable, float K2Node_Select_Default, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, float K2Node_CustomEvent_Duration, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, bool Temp_bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, class Grenade_C Temp_class_Variable, class Grenade_C K2Node_Select_Default, class Grenade_C K2Node_Select_Default, Character* CallFunc_GetPlayerCharacter_ReturnValue, class Grenade_C Temp_class_Variable, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FName Temp_name_Variable, int Temp_int_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Variable, class Grenade_C K2Node_Select_Default, bool Temp_bool_IsClosed_Variable, class Grenade_C K2Node_Select_Default, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, int Temp_int_Variable, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, Vector CallFunc_GetVectorValue_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetVectorValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, FName K2Node_CustomEvent_NotifyName, float CallFunc_Conv_IntToFloat_ReturnValue, Vector CallFunc_GetVectorValue_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetVectorValue_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, FName Temp_name_Variable, const WeaponBase_C* K2Node_CustomEvent_Weapon, FName Temp_name_Variable, FName K2Node_CustomEvent_NotifyName, int Temp_int_Array_Index_Variable, Area_C* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, WeaponBase_C* K2Node_CustomEvent_Weapon, int K2Node_CustomEvent_WeaponType, WeaponBase_C* K2Node_CustomEvent_Weapon, int K2Node_CustomEvent__WeaponType, bool K2Node_SwitchInteger_CmpSuccess, FName Temp_name_Variable, bool CallFunc_K2_AttachToComponent_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_Index, bool K2Node_SwitchInteger_CmpSuccess, FName Temp_name_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, WeaponBase_C* K2Node_DynamicCast_AsWeapon_Base, bool K2Node_DynamicCast_bSuccess, FName K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName Temp_name_Variable, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, FName Temp_name_Variable, int Temp_int_Array_Index_Variable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_Index, int K2Node_CustomEvent_LastWeapon, bool K2Node_SwitchInteger_CmpSuccess, Object* K2Node_Select_Default, int K2Node_CustomEvent_Index, WeaponBase_C* K2Node_DynamicCast_AsWeapon_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int Temp_int_Variable, FName K2Node_Select_Default, FName Temp_name_Variable, Vector CallFunc_GetVelocity_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, FName Temp_name_Variable, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int K2Node_CustomEvent_Selection, WeaponBase_C* K2Node_CustomEvent_Weapon, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_CustomEvent_Weapon, FName Temp_name_Variable, WeaponBase_C* K2Node_Select_Default, Actor* K2Node_Select_Default, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsServer_ReturnValue, FName K2Node_CustomEvent_NotifyName, WeaponBase_C* K2Node_CustomEvent_Weapon, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WeaponBase_C* K2Node_CustomEvent_Weapon, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName Temp_name_Variable, SkeletalMeshComponent* K2Node_CustomEvent_InSkeletalMeshComponent, AnimMontage* K2Node_CustomEvent_MontageToPlay, WeaponBase_C* K2Node_CustomEvent_ReloadWeapon, SkeletalMeshComponent* K2Node_CustomEvent_InSkeletalMeshComponent, AnimMontage* K2Node_CustomEvent_MontageToPlay, WeaponBase_C* K2Node_CustomEvent_ReloadWeapon, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, WeaponBase_XM1014_C* K2Node_DynamicCast_AsWeapon_Base_XM1014, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanOR_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, WeaponBase_C* K2Node_CustomEvent_Target, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, int Temp_int_Variable, FName K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, WeaponBase_C* K2Node_CustomEvent_Target, bool K2Node_SwitchInteger_CmpSuccess, WeaponBase_C* K2Node_CustomEvent_ReloadWeapon, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Variable, FName K2Node_CustomEvent_NotifyName, WeaponBase_C* K2Node_CustomEvent_ReloadWeapon, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, float K2Node_CustomEvent_SniperInputScale, float K2Node_Select_Default, float K2Node_CustomEvent_MaxAcceleration, float K2Node_CustomEvent_InputScaleShift, float K2Node_CustomEvent_MaxAcceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, float Temp_float_Variable, Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsFlashed, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_CustomEvent_FullBlindTime, float K2Node_CustomEvent_HalfBlindTime, float Temp_float_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_CustomEvent_Vel, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float Temp_float_Variable, FName K2Node_CustomEvent_NotifyName, FString CallFunc_Conv_VectorToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, bool CallFunc_IsFalling_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_Normal_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_VSize_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, InGameSettingWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float Temp_float_Variable, byte Temp_byte_Variable, float K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Add_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float K2Node_ComponentBoundEvent_AxisValue, float K2Node_ComponentBoundEvent_Axis_Value, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int K2Node_ComponentBoundEvent_IpSlotIndex, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, int Temp_int_Array_Index_Variable, Area_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_HighestDangerousBaseOnAreaIndex_Index, float K2Node_Select_Default, bool CallFunc_Greater_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, float K2Node_Select_Default, float K2Node_Select_Default, Vector K2Node_InputVectorAxisEvent_AxisValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_CustomEvent_Rate, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_CustomEvent_Rate, bool K2Node_CustomEvent_Condition, const Actor*[] Temp_object_Variable, HitResult[] CallFunc_LineTraceMulti_OutHits, bool CallFunc_LineTraceMulti_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float K2Node_ComponentBoundEvent_AxisValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_ComponentBoundEvent_AxisValue, float K2Node_ComponentBoundEvent_JoystickAngle, float K2Node_ComponentBoundEvent_JoystickMoveLength, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, int CallFunc_RandomIntegerInRange_ReturnValue, SkeletalMesh* K2Node_Select_Default, int CallFunc_RandomIntegerInRange_ReturnValue, SkeletalMesh* K2Node_Select_Default, bool CallFunc_IsServer_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, StaticMeshActor*[] CallFunc_GetAllActorsOfClass_OutActors, TeammateHead_C* K2Node_DynamicCast_AsTeammate_Head, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetPlayerPawn_ReturnValue, Rotator K2Node_CustomEvent_LookRotation, float K2Node_CustomEvent_DeltaTime, bool CallFunc_NotEqual_ObjectObject_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, FlashWidget_C* CallFunc_Create_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, EnemyDotActor_C* CallFunc_FinishSpawningActor_ReturnValue, TeammateIconActor_C* CallFunc_FinishSpawningActor_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SmokeWidget_C* CallFunc_Create_ReturnValue, ScopeWidget_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOHUD_C* CallFunc_Create_ReturnValue, PlayerController* K2Node_CustomEvent_OwningPlayer, Controller* K2Node_Event_NewController, PlayerController* K2Node_DynamicCast_AsPlayer_Controller, bool K2Node_DynamicCast_bSuccess, C4IconActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, EnemyDotActor_C*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, C4IconActor_C* CallFunc_Array_Get_Item, EnemyDotActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName Temp_name_Variable, TeammateIconActor_C*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, TeammateIconActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, EnemyDotActor_C*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, TeammateIconActor_C*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, EnemyDotActor_C* CallFunc_Array_Get_Item, TeammateIconActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, bool CallFunc_IsFalling_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue, const HitResult K2Node_Event_Hit, Vector CallFunc_GetLastUpdateVelocity_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_K2_GetActorLocation_ReturnValue, WeaponBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, int CallFunc_Array_Add_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, class WeaponBase_C CallFunc_Array_Get_Item, Actor* CallFunc_Array_Get_Item, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, WeaponBase_C* CallFunc_FinishSpawningActor_ReturnValue, Material* CallFunc_IfBuyGunHaveSkin_Material, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, class WeaponBase_C CallFunc_Array_Get_Item, class WeaponBase_C CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, class WeaponBase_C CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, WeaponBase_C* K2Node_CustomEvent_Weapon, bool K2Node_SwitchInteger_CmpSuccess, class WeaponBase_C K2Node_CustomEvent_GunToBuy, bool CallFunc_CheckCanBuy_CanBuy, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Material* CallFunc_IfBuyGunHaveSkin_Material, bool CallFunc_EqualEqual_ClassClass_ReturnValue, Vector K2Node_Select_Default, Transform CallFunc_MakeTransform_ReturnValue, bool K2Node_CustomEvent_IsFreeze, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, WeaponBase_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Subtract_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_CustomEvent_time, float K2Node_CustomEvent_FreezeTime, float K2Node_CustomEvent_DeltaTime, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_FInterpTo_ReturnValue, float CallFunc_FInterpTo_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_FInterpTo_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_FInterpTo_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FInterpTo_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FInterpTo_Constant_ReturnValue, float K2Node_InputAxisEvent_AxisValue, float K2Node_InputAxisEvent_AxisValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, bool K2Node_CustomEvent_IsRifleScope, SoundBase* K2Node_Select_Default, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, bool K2Node_CustomEvent_IsRifleScope, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Lerp_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, Vector CallFunc_VLerp_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, CSGOCharacterBase_C* K2Node_CustomEvent_Target, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, Rotator CallFunc_GetBaseAimRotation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C K2Node_CustomEvent_WeaponType, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Material* CallFunc_IfBuyGunHaveSkin_Material, WeaponBase_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x5ae8d0e64001

--------------------------------
Class: Area_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	byte AreaType;//[Offset: 0x238, Size: 0x1]
	FText AreaName;//[Offset: 0x240, Size: 0x18]
	float TAreaDangerous;//[Offset: 0x258, Size: 0x4]
	float CTAreaDangerous;//[Offset: 0x25c, Size: 0x4]
	int AreaIndex;//[Offset: 0x260, Size: 0x4]
	bool HaveBeenCTPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	bool HaveBeenTAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1]
	bool HaveBeenTEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 0x1]
	bool MainBombSite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x267, Size: 0x1]
	CSGOCharacterBase_C*[] AllCharacterArray;//[Offset: 0x268, Size: 0x10]
	bool HaveBeenTPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	static void DefendAreaCharacterNum(out Area_C*[] Array, out int Num1, int Num, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Area_C* CallFunc_Array_Get_Item, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetCTNum_Num1, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x530dd0e64001
	void GetCTNum(out Actor*[] CTNum, out int Num1, int Num, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_Array_Get_Item, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue);// 0x530cd0e64001
	void BndEvt__Area_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x530bd0e64001
	void SetDetectEmptyBombSiteTimer();// 0x530ad0e64001
	void DetectEmptyBombSite();// 0x5309d0e64001
	void EmptyBombSiteSendCue();// 0x5308d0e64001
	void ReceiveBeginPlay();// 0xffffffffc31e9720
	void ResetArea();// 0x5306d0e64001
	void ExecuteUbergraph_Area(int EntryPoint, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Array_Index_Variable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int Temp_int_Loop_Counter_Variable, bool Temp_bool_True_if_break_was_hit_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FName CallFunc_Conv_StringToName_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Area_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsServer_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Format_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, Area_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FName CallFunc_Conv_StringToName_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Area_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, int CallFunc_GetCTNum_Num1, C4_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetCTNum_Num1, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Area_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_DefendAreaCharacterNum_Num1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FName CallFunc_Conv_StringToName_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_IsServer_ReturnValue, int Temp_int_Array_Index_Variable, Area_C* CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Area_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Area_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x5303d0e64008

--------------------------------
Class: CSGOGamemode_C.MyGameMode.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8]
	PlayerController*[] TController;//[Offset: 0x318, Size: 0x10]
	PlayerController*[] CTController;//[Offset: 0x328, Size: 0x10]
	CSGOCharacterBase_C*[] TCharacter;//[Offset: 0x338, Size: 0x10]
	CSGOCharacterBase_C*[] CTCharacter;//[Offset: 0x348, Size: 0x10]
	bool IsGameStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	int TCount;//[Offset: 0x35c, Size: 0x4]
	int CTCount;//[Offset: 0x360, Size: 0x4]
	bool IsRoundEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool IsC4Plant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	int RoundTime;//[Offset: 0x368, Size: 0x4]
	TimerHandle CountDownTimer;//[Offset: 0x370, Size: 0x8]
	bool ShouldSpawnT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	int TLossCount;//[Offset: 0x37c, Size: 0x4]
	int CTLossCount;//[Offset: 0x380, Size: 0x4]
	bool LastRoundWinnerIsT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	TimerHandle BuyAreaNoCollison;//[Offset: 0x388, Size: 0x8]
	FString[] BanPlayerList;//[Offset: 0x390, Size: 0x10]
	bool IsVIPServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	FString[] BanServerKeyList;//[Offset: 0x3a8, Size: 0x10]
	int MaxPlayer;//[Offset: 0x3b8, Size: 0x4]
	int64 connectionID;//[Offset: 0x3c0, Size: 0x8]
	bool IsThisServerSutting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	ServerInformation ServerSetting;//[Offset: 0x3d0, Size: 0x70]
	TimerHandle SendServerInformationEvent;//[Offset: 0x440, Size: 0x8]
	DataTable* ServerSettingTable;//[Offset: 0x448, Size: 0x8]
	PlayerController*[] OBController;//[Offset: 0x450, Size: 0x10]
	bool ShouldBalancePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	<FString,FName> SubLevelNames;//[Offset: 0x468, Size: 0x50]
	bool IsComptitionServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	FString ComptitionServerKey;//[Offset: 0x4c0, Size: 0x10]
	FString[] MapNameArray;//[Offset: 0x4d0, Size: 0x10]
	FString ConnectIDNew;//[Offset: 0x4e0, Size: 0x10]
	FString RandomNum;//[Offset: 0x4f0, Size: 0x10]
	FString[] BeenKickPlayer;//[Offset: 0x500, Size: 0x10]
	bool ShouldUseDynamicAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool IsPratice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	int DefaultRoundTime;//[Offset: 0x514, Size: 0x4]
	FString ServerAdminKey;//[Offset: 0x518, Size: 0x10]
	void AdminCheck(FString ServerKey, out bool IsAdmin, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x563cd0e64001
	void KickAnotherPlayer(out bool success, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, PlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_CheckIsVip_IsVip1, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckIsVip_IsVip1);// 0x563bd0e64001
	void CheckIsVip(FString PlayerKey, out bool IsVip1, bool IsVip, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ServerKey CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x563ad0e64001
	void SwitchSide(int ScoreBuffer, PlayerController*[] Buffer, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc0ce5820
	void BalencePlayer(int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PlayerController* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, PlayerController* CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x5638d0e64001
	void GetAliveCount(out CSGOCharacterBase_C*[] Characters, out int AliveCount, int Count, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x5637d0e64001
	static void RemoveCurrentAndSpawnNewCharacter(CSGOCharacterBase_C* Character, PlayerController* Controller, int SpawnPoint, bool IsOB, OB_C* OBCharacter, bool IsCT, out CSGOCharacterBase_C* NewCharacter, bool HaveHeadArmor, bool HaveArmor, float LastCharacterMoney, class WeaponBase_C[] GivingAliveWeapons, bool IsAliveLastRound, bool Temp_bool_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, PlayerStart* CallFunc_Array_Get_Item, PlayerStart* CallFunc_Array_Get_Item, const Transform CallFunc_GetTransform_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, CSGOCharacterBase_C* CallFunc_FinishSpawningActor_ReturnValue, CSGOCharacterBase_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, float Temp_float_Variable, int Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, class WeaponBase_C[] Temp_class_Variable, bool Temp_bool_Variable, class WeaponBase_C[] Temp_class_Variable, const class WeaponBase_C Temp_class_Variable, bool Temp_bool_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, float K2Node_Select_Default, GameStateBase* CallFunc_GetGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, class WeaponBase_C[] K2Node_Select_Default, float K2Node_Select_Default, float K2Node_Select_Default, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C[] K2Node_Select_Default, float Temp_float_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, float K2Node_Select_Default);// 0x5636d0e64001
	void K2_PostLogin(PlayerController* NewPlayer);// 0x56a2d0e64008
	void RestartRound();// 0x5634d0e64001
	void CheckRoundOver();// 0x5633d0e64001
	void RoundOver(const bool Winner is T);// 0x5632d0e64001
	void UpdateGameStateValueManNumber();// 0x5631d0e64001
	void RoundTimeCountDown();// 0x5630d0e64001
	void ReStartGameState();// 0x562fd0e64001
	void K2_OnLogout(Controller* ExitingController);// 0x562ed0e64001
	void PlayAudio(bool Condition);// 0x562dd0e64001
	void AllBuyAreaNoCollision();// 0x562cd0e64001
	void ClearEmptyController();// 0x562bd0e64001
	void SaveBanList();// 0x562ad0e64001
	void ReceiveBeginPlay();// 0x5629d0e64001
	void LoadBanList();// 0x5628d0e64001
	void SetVIPTrue();// 0x5627d0e64001
	void SetVIPFalse();// 0x5626d0e64001
	void TryConnectCentreServer();// 0x5625d0e64001
	void ReceiveEndPlay(byte EndPlayReason);// 0x5624d0e64001
	void SendServerInformation();// 0x5623d0e64001
	void DeleteServerInCentreServer();// 0x5622d0e64001
	void LoadServerSettingFromCSV();// 0x5621d0e64001
	void BanPlayer(FString DeviceID, FString Key);// 0x5620d0e64001
	void RefreshServer();// 0x561fd0e64001
	void GameOver();// 0x561ed0e64001
	void LoadingFinish(PlayerController* NewParam);// 0x1b0082d0d24100
	void RefreshServerNoLoad();// 0x561cd0e64001
	void ExecuteUbergraph_CSGOGamemode(int EntryPoint, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FString Temp_string_Variable, FName CallFunc_Array_Get_Item, ServerSetting CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ServerInformation K2Node_MakeStruct_ServerInformation, bool K2Node_SwitchString_CmpSuccess, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, PlayerController* K2Node_Event_NewPlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_Array_Get_Item, CSGOCharacterBase_C* CallFunc_RemoveCurrentAndSpawnNewCharacter_NewCharacter, Pawn* CallFunc_K2_GetPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* CallFunc_RemoveCurrentAndSpawnNewCharacter_NewCharacter, CSGOCharacterBase_C* CallFunc_RemoveCurrentAndSpawnNewCharacter_NewCharacter, int CallFunc_Array_Length_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, CSGOCharacterBase_C* CallFunc_RemoveCurrentAndSpawnNewCharacter_NewCharacter, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, const bool K2Node_CustomEvent_Winner_is_T, int CallFunc_GetAliveCount_AliveCount, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetAliveCount_AliveCount, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_GetAliveCount_AliveCount, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetAliveCount_AliveCount, int CallFunc_Subtract_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, C4IconActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, C4IconActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Controller* K2Node_Event_ExitingController, PlayerController* K2Node_DynamicCast_AsPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Array_Length_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Format_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int K2Node_Select_Default, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, FString CallFunc_Conv_IntToString_ReturnValue, PlayerStart* CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, PlayerStart* CallFunc_Array_Get_Item, const Transform CallFunc_GetTransform_ReturnValue, CSGOCharacterBase_C* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, CSGOCharacterBase_C* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, OB_C* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, C4_C*[] CallFunc_GetAllActorsOfClass_OutActors, C4_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, OB_C* CallFunc_FinishSpawningActor_ReturnValue, bool K2Node_CustomEvent_Condition, MapAudioPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, MapAudioPlayer_C* CallFunc_Array_Get_Item, MapAudioPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_IsValid_ReturnValue, MapAudioPlayer_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, C4_C*[] CallFunc_GetAllActorsOfClass_OutActors, Grenade_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Grenade_C* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, EnemyDotActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, EnemyDotActor_C* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, TeammateIconActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Less_IntInt_ReturnValue, TeammateIconActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, C4_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BuyArea_C*[] CallFunc_GetAllActorsOfClass_OutActors, BuyArea_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BuyArea_C*[] CallFunc_GetAllActorsOfClass_OutActors, BuyArea_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_Array_Get_Item, PlayerController* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, WeaponBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, int Temp_int_Variable, WeaponBase_C* CallFunc_Array_Get_Item, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, byte K2Node_Event_EndPlayReason, int Temp_int_Loop_Counter_Variable, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetCurrentLevelName_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, ServerInformation K2Node_MakeStruct_ServerInformation, FString K2Node_CustomEvent_DeviceID, FString K2Node_CustomEvent_Key, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString K2Node_Select_Default, FString K2Node_Select_Default, FString CallFunc_RootDir_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_LoadFileToString_Content, bool CallFunc_LoadFileToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, DataTable* CallFunc_ReadCsvToDataTable_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BlueDoor_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BlueDoor_C* CallFunc_Array_Get_Item, int CallFunc_RandomInteger_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* K2Node_CustomEvent_NewParam, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, SocketClientBPLibrary* CallFunc_getSocketClientTarget_ReturnValue, SocketClientBPLibrary* CallFunc_getSocketClientTarget_ReturnValue, FString CallFunc_connectSocketClientTCP_connectionID, SocketClientBPLibrary* CallFunc_getSocketClientTarget_ReturnValue, bool CallFunc_isTCPConnected_ReturnValue, SocketClientBPLibrary* CallFunc_getSocketClientTarget_ReturnValue, SocketClientBPLibrary* CallFunc_getSocketClientTarget_ReturnValue, SocketClientBPLibrary* CallFunc_getSocketClientTarget_ReturnValue, int CallFunc_RandomInteger_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, PlayerController*[] CallFunc_GetAllActorsOfClass_OutActors, OB_C*[] CallFunc_GetAllActorsOfClass_OutActors, PlayerController* CallFunc_Array_Get_Item, OB_C* CallFunc_Array_Get_Item, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, WeaponBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, Area_C*[] CallFunc_GetAllActorsOfClass_OutActors, WeaponBase_C* CallFunc_Array_Get_Item, Area_C* CallFunc_Array_Get_Item, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Array_Length_ReturnValue, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue);// 0xffffff82d0be4000

--------------------------------
Class: MyGameMode.GameMode.GameModeBase.Info.Actor.Object
	int Port;//[Offset: 0x304, Size: 0x4]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	int NumSpectators;//[Offset: 0x2cc, Size: 0x4]
	int NumPlayers;//[Offset: 0x2d0, Size: 0x4]
	int NumBots;//[Offset: 0x2d4, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	void StartMatch();// 0x1ecfd0be4041
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x1eced0be4041
	void Say(FString Msg);// 0x1ecdd0be4041
	void RestartGame();// 0x1eccd0be4041
	bool ReadyToStartMatch();// 0x1ecbd0be4041
	bool ReadyToEndMatch();// 0x1ecad0be4041
	void K2_OnSetMatchState(FName NewState);// 0x1ec9d0be4041
	bool IsMatchInProgress();// 0x1ec8d0be4041
	FName GetMatchState();// 0x1ec7d0be4041
	void EndMatch();// 0x1ec6d0be4041
	void AbortMatch();// 0x1ec5d0be4041

--------------------------------
Class: CSGOController_C.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 0x8]
	GlobleWidget_C* GlobalWidget;//[Offset: 0x578, Size: 0x8]
	FText Name;//[Offset: 0x580, Size: 0x18]
	FString IpAddress;//[Offset: 0x598, Size: 0x10]
	FText UID;//[Offset: 0x5a8, Size: 0x18]
	FString EquipmentID;//[Offset: 0x5c0, Size: 0x10]
	FString ServerKey;//[Offset: 0x5d0, Size: 0x10]
	ServerInformation[] ServerInformation;//[Offset: 0x5e0, Size: 0x10]
	MainUIWidget_C* MainUIWidget;//[Offset: 0x5f0, Size: 0x8]
	FText[] TNameBuffer;//[Offset: 0x5f8, Size: 0x10]
	FText[] CTNameBuffer;//[Offset: 0x608, Size: 0x10]
	BanPlayerWidgetStructure[] BanPlayerList;//[Offset: 0x618, Size: 0x10]
	LoadingScreen_C* LoadingScreen;//[Offset: 0x628, Size: 0x8]
	PlayerVoiceChatActor* VoiceChat;//[Offset: 0x630, Size: 0x8]
	bool IsCT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	bool IsChatting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 0x1]
	bool VIPKeyPairFound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 0x1]
	bool HaveTryKick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63b, Size: 0x1]
	SettingLayOutWidget_C* SetLayoutWidget;//[Offset: 0x640, Size: 0x8]
	LoginWidget_C* LoginWidget;//[Offset: 0x648, Size: 0x8]
	bool VideoEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool GetReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	bool GlobalOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x652, Size: 0x1]
	static void CheckIsVip(FString A, out bool IsVip1, bool IsVip, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ServerKey CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x6bbcd0e64008
	void InpTchEvt_Moved(byte FingerIndex, Vector Location);// 0x6bb8d0e64001
	void InpTchEvt_Released(byte FingerIndex, Vector Location);// 0x6bb7d0e64001
	void InpTchEvt_Pressed(byte FingerIndex, Vector Location);// 0x6bb6d0e64001
	void ReceiveBeginPlay();// 0x2dffb0d0ed402e
	void CreateGlobalWidget();// 0xffffff82d0be4000
	void Kick();// 0xffffff82d0be4000
	void Ban();// 0x6bb2d0e64001
	void GetName();// 0xffffff82d0be4000
	void ServerSetNameAndUID(FText Name, FText UID, FString ServerKey);// 0x6bb5d0e64001
	void LocalGetDeviceID();// 0x6ba4d0e64001
	void ServerSetDeviceID(FString EquipmentID);// 0x6baed0e64001
	void NotVIP();// 0x6badd0e64001
	void ServerSetIsVIP(bool IsVIPServer);// 0x6bacd0e64001
	void SetServerMaxPeople(int MaxPlayer);// 0x6ba0d0e64001
	void CreateMainUIWidget();// 0x6ba2d0e64001
	void GetServerListInfo();// 0x6ba9d0e64001
	void ClientSaveServerListInfo(out const ServerInformation[] ServerInformation);// 0x6ba8d0e64001
	void BanOther(FText Name, FText UID, FString B);// 0x6ba7d0e64001
	void ServerBeenBan(FString B);// 0x6ba6d0e64001
	void Banned();// 0x6ba5d0e64001
	void ClientBanned();// 0xffffff85d0be4002
	void ServerSwitchSide(bool SwitchToCT);// 0xffffff82d0be4002
	void CreateSwitchSideWidget();// 0xffffffffc7f5ac10
	void OwningClientCreateSwitchSideWidget(out FText[] Tnames, out FText[] CTnames);// 0x6ba1d0e64001
	void BecomeOB();// 0x56e4d0e64001
	void SetServerShouldBalence(bool ShouldBalancePlayer);// 0x6babd0e64001
	void RefreshServer();// 0x6b9ed0e64001
	void CreateBanPlayerWidget(out BanPlayerWidgetStructure[] AllPlayerController);// 0x6b9dd0e64001
	void ServerGetAllControllerAndCreateBanWidget();// 0x6b9cd0e64001
	void CreateNotifyWidget(out const FText[] Notifys);// 0x6b9bd0e64001
	void AddNotify(FText Notify);// 0x6b9ad0e64001
	void DeleteNotify(out const FText Item);// 0x6b99d0e64001
	void ServerCreateManageNotifyWidget();// 0xffffff85d0be4002
	void ClientCreateManageNotifyWidget(out const FText[] Text);// 0x6b97d0e64001
	void CheckIsVIPServer();// 0x6b96d0e64001
	void CheckIsCompititionServer();// 0x6b95d0e64001
	void IsCompitition();// 0x6b94d0e64001
	void SetIsCompititionServer(bool IsCompitition);// 0x6b93d0e64001
	void SetCompititionServerKey(FString Key);// 0x6b92d0e64001
	void CreateGameOverWidget();// 0x602cd0e64008
	void CheckIsBannedPlayer();// 0xffffff82d0be4000
	void LoadFinish();// 0x5152d0e64001
	void ShowLoadingScreen();// 0x6ab9d0e64001
	void ClientLoadFinish();// 0x6b8bd0e64001
	void StartChat();// 0x7d01d2e1d1264000
	void StopChat();// 0x565dd0e64008
	void SetIsCT();// 0x5660d0e64001
	void ClientCheckChannel(bool Condition);// 0x5690d0e64001
	void LocalCreateKillWidget(FText KillerName, FText BeingKillName, Texture2D* KillGun, bool KillerIsT, bool BeingKillIsT, bool IsKiller, bool IsHeadShot, bool IsThrough);// 0xffffffffc85646a0
	void ServerSendChat(bool IsTeamateOnly, bool SentIsCT, FText Text);// 0x6b85d0e64001
	void LocalReveiveChat(FText Text);// 0x6b84d0e64001
	void ServerReceiveChat(bool IsTeamateOnly, bool SentIs CT, FText Text);// 0x6b83d0e64001
	void ServerShowUITalking();// 0xffffffffc85734a0
	void OwningClientShowUITalking(FText Name, bool IsCT);// 0x56e6d0e64001
	void ServerStopUITalking();// 0x56e5d0e64001
	void OwningClientStopUITalking(out const FText B);// 0x6b9fd0e64001
	void CentreServerBanPlayer(FString DeviceID, FString ServerKey);// 0x56e3d0e64001
	void CentreServerShowBanList();// 0x56e2d0e64001
	void OwningClientShowCentreServerBan(out const BanPlayerList[] BanPlayerList, out FString[] BanPlayer, out FString[] BanKey);// 0x56e1d0e64001
	void CentreServerUnban(FString DeviceID, FString ServerKey);// 0x56e0d0e64001
	void Leave();// 0x56dfd0e64001
	void ServerCheckBan(FString EquipId, FString ServerKey, out const FText UID);// 0x56ded0e64001
	void StartKickOhter(FText KickName, FText KickUID);// 0x56ddd0e64001
	void ClientKickWidget();// 0x56dcd0e64001
	void ServerBeenKicked();// 0x56dbd0e64001
	void ServerKickOtherStart();// 0x56dad0e64001
	void ClientCreateKickOtherWidget(out BanPlayerWidgetStructure[] AllPlayerController);// 0xffffffffc0ced1c0
	void Agree();// 0x56d8d0e64001
	void NoAgree();// 0x56d7d0e64001
	void OwningClientBeenKick();// 0x56d6d0e64001
	void CheckIsBeenKickServer(out const FString[] Kick);// 0x56d5d0e64001
	void LocalCheckBan();// 0x56d4d0e64001
	void LocalGetName();// 0x56d3d0e64001
	void ServerTryLogin(FText UserName, FText Password);// 0x56d2d0e64001
	void CreateLoginWidget();// 0x56d1d0e64001
	void OpenBox(bool FixSkin, Skin Skin);// 0x56d0d0e64001
	void UseCDK(FString CDK);// 0x56cfd0e64001
	void IronSourceVideoStateDelegate_Event(enum Event);// 0x56ced0e64001
	void WatchVideo();// 0x56cdd0e64001
	void AddRoundBox();// 0x56ccd0e64001
	void ServerTryOpenAdminWidget();// 0x56cbd0e64001
	void ClientOpenAdminWidget();// 0x56cad0e64001
	void ServerAdminCheckInitGlobalWidget();// 0x56c9d0e64001
	void OwningClientShowAdminButton();// 0x56c8d0e64001
	void ShowAdminAndNotifyButton();// 0xffffffffc0cec200
	void OwningClientShowAdminAndNotifyWidget();// 0x56c6d0e64001
	void ExecuteUbergraph_CSGOController(int EntryPoint, const PlayerController* Temp_object_Variable, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte Temp_byte_Variable, Vector Temp_struct_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString Temp_string_Variable, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, ManageNotifyWidget_C* CallFunc_Create_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, GlobleWidget_C* CallFunc_Create_ReturnValue, CueUI_C* CallFunc_Create_ReturnValue, CueUI_C* CallFunc_Create_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, FText K2Node_CustomEvent_Name, FText K2Node_CustomEvent_UID, FString K2Node_CustomEvent_ServerKey, FString CallFunc_GetDeviceId_ReturnValue, FString K2Node_CustomEvent_EquipmentID, CueUI_C* CallFunc_Create_ReturnValue, bool K2Node_CustomEvent_IsVIPServer, GameModeBase* CallFunc_GetGameMode_ReturnValue, int K2Node_CustomEvent_MaxPlayer, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, MainUIWidget_C* CallFunc_Create_ReturnValue, const ServerInformation[] K2Node_CustomEvent_ServerInformation, GameModeBase* CallFunc_GetGameMode_ReturnValue, MainUIWidget_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, MainUIWidget_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FText K2Node_CustomEvent_Name, FText K2Node_CustomEvent_UID, FString K2Node_CustomEvent_B, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, FString K2Node_CustomEvent_B, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDeviceId_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool K2Node_CustomEvent_SwitchToCT, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Find_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, FText[] K2Node_CustomEvent_Tnames, FText[] K2Node_CustomEvent_CTnames, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, SideChooseWidget_C* CallFunc_Create_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_RemoveItem_ReturnValue, bool K2Node_CustomEvent_ShouldBalancePlayer, bool CallFunc_Array_RemoveItem_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, BanPlayerWidgetStructure[] K2Node_CustomEvent_AllPlayerController, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, BanPlayerWidget_C* CallFunc_Create_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Length_ReturnValue, BanPlayerWidgetStructure K2Node_MakeStruct_BanPlayerWidgetStructure, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, const FText[] K2Node_CustomEvent_Notifys, FText CallFunc_Array_Get_Item, MainUIInformationWidget_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FText K2Node_CustomEvent_Notify, GameModeBase* CallFunc_GetGameMode_ReturnValue, const FText K2Node_CustomEvent_Item, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, const FText[] K2Node_CustomEvent_text, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, bool CallFunc_CheckIsVip_IsVip1, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, CueUI_C* CallFunc_Create_ReturnValue, bool K2Node_CustomEvent_IsCompitition, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default, FString K2Node_CustomEvent_Key, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, FText Temp_text_Variable, LeaderBoard_C* CallFunc_Create_ReturnValue, int Temp_int_Array_Index_Variable, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, LoadingScreen_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText Temp_text_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, bool CallFunc_VoiceChatStartSpeak_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_VoiceChatStopSpeak_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_VoiceChatSetMicrophoneVolume_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, bool CallFunc_VoiceChatAddChannel_ReturnValue, bool CallFunc_VoiceChatRemoveChannel_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, bool CallFunc_VoiceChatAddChannel_ReturnValue, bool CallFunc_VoiceChatRemoveChannel_ReturnValue, bool CallFunc_VoiceChatStartSpeak_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, bool CallFunc_VoiceChatAddChannel_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, bool CallFunc_VoiceChatCheckRegisteredToChannel_ReturnValue, bool CallFunc_VoiceChatAddChannel_ReturnValue, bool CallFunc_VoiceChatRemoveChannel_ReturnValue, bool CallFunc_VoiceChatRemoveChannel_ReturnValue, bool K2Node_CustomEvent_Condition, FText K2Node_CustomEvent_KillerName, FText K2Node_CustomEvent_BeingKillName, Texture2D* K2Node_CustomEvent_KillGun, bool K2Node_CustomEvent_KillerIsT, bool K2Node_CustomEvent_BeingKillIsT, bool K2Node_CustomEvent_IsKiller, bool K2Node_CustomEvent_IsHeadShot, bool K2Node_CustomEvent_IsThrough, bool K2Node_CustomEvent_IsTeamateOnly, bool K2Node_CustomEvent_SentIsCT, FText K2Node_CustomEvent_text, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText K2Node_CustomEvent_text, FText K2Node_Select_Default, bool K2Node_CustomEvent_IsTeamateOnly, bool K2Node_CustomEvent_SentIs_CT, FText K2Node_CustomEvent_text, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, int Temp_int_Variable, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int Temp_int_Array_Index_Variable, PlayerController* CallFunc_Array_Get_Item, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FText K2Node_CustomEvent_Name, bool K2Node_CustomEvent_IsCT, int CallFunc_Array_Add_ReturnValue, const FText K2Node_CustomEvent_B, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString K2Node_CustomEvent_DeviceID, FString K2Node_CustomEvent_ServerKey, GameModeBase* CallFunc_GetGameMode_ReturnValue, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, const BanPlayerList[] K2Node_CustomEvent_BanPlayerList, FString[] K2Node_CustomEvent_BanPlayer, FString[] K2Node_CustomEvent_BanKey, BanPlayerList CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BanUnBanWidget_C* CallFunc_Create_ReturnValue, FString K2Node_CustomEvent_DeviceID, FString K2Node_CustomEvent_ServerKey, GameModeBase* CallFunc_GetGameMode_ReturnValue, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_EquipId, FString K2Node_CustomEvent_ServerKey, const FText K2Node_CustomEvent_UID, GameModeBase* CallFunc_GetGameMode_ReturnValue, FText K2Node_CustomEvent_KickName, FText K2Node_CustomEvent_KickUID, ServerCenterGamemode_C* K2Node_DynamicCast_AsServer_Center_Gamemode, bool K2Node_DynamicCast_bSuccess, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, KickVoteQWidget_C* CallFunc_Create_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, BanPlayerWidgetStructure K2Node_MakeStruct_BanPlayerWidgetStructure, BanPlayerWidgetStructure[] K2Node_CustomEvent_AllPlayerController, int CallFunc_Array_Add_ReturnValue, KickPlayerWidget_C* CallFunc_Create_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, const FString[] K2Node_CustomEvent_Kick, CueUI_C* CallFunc_Create_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_GetDeviceId_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, CueUI_C* CallFunc_Create_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, interface classNone CallFunc_OnMoved_InputTouch_self_CastInput, Pawn* CallFunc_K2_GetPawn_ReturnValue, int Temp_int_Loop_Counter_Variable, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, const FText Temp_text_Variable, interface classNone CallFunc_OnMoved_InputTouch_self_CastInput, interface classNone CallFunc_OnReleased_InputTouch_self_CastInput, interface classNone CallFunc_OnPressed_InputTouch_self_CastInput, FText K2Node_CustomEvent_Username, FText K2Node_CustomEvent_Password, int Temp_int_Array_Index_Variable, LoginWidget_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_Array_Get_Item, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, bool K2Node_CustomEvent_FixSkin, Skin K2Node_CustomEvent_Skin, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor* CallFunc_Array_Get_Item, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, OpenBox_C* CallFunc_FinishSpawningActor_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, const FText Temp_text_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, Skin CallFunc_GetValidSkin_Skin, bool CallFunc_GetValidSkin_Find, bool CallFunc_BooleanOR_ReturnValue, Skin K2Node_Select_Default, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor* CallFunc_Array_Get_Item, Pawn* CallFunc_GetActorOfClass_ReturnValue, FString K2Node_CustomEvent_CDK, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_CheckIsVip_IsVip1, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetDisplayName_ReturnValue, Skin CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, IronSourceProxy* CallFunc_GetIronSourceInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsRewardedVideoAvailable_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_CustomEvent_Event, bool K2Node_SwitchEnum_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_MakeTransform_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PlayerVoiceChatActor* CallFunc_FinishSpawningActor_ReturnValue, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_VoiceChatRemoveChannel_ReturnValue, bool CallFunc_VoiceChatRemoveChannel_ReturnValue, PlayerStart* CallFunc_GetActorOfClass_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, OB_C* CallFunc_FinishSpawningActor_ReturnValue, const FText Temp_text_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsProAdminKey_IsAdmin, GameModeBase* CallFunc_GetGameMode_ReturnValue, interface classNone K2Node_DynamicCast_AsCheck_Is_Admin, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AdminCheck_IsAdmin, const FText Temp_text_Variable, AdminWidget_C* CallFunc_Create_ReturnValue, int Temp_int_Loop_Counter_Variable, GameModeBase* CallFunc_GetGameMode_ReturnValue, interface classNone K2Node_DynamicCast_AsCheck_Is_Admin, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, const FText Temp_text_Variable, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, GameModeBase* CallFunc_GetGameMode_ReturnValue, interface classNone K2Node_DynamicCast_AsCheck_Is_Admin, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AdminCheck_IsAdmin, const FText Temp_text_Variable, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, interface classNone CallFunc_AdminCheck_self_CastInput, bool CallFunc_AdminCheck_IsAdmin, GameModeBase* CallFunc_GetGameMode_ReturnValue, interface classNone K2Node_DynamicCast_AsCheck_Is_Admin, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AdminCheck_IsAdmin);// 0xffffffffc0ceaa60

--------------------------------
Class: ServerKey
	FString Key_2_525DB362476B425E9D0CB1B4D14B76C9;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ServerInformation
	FString IPAddress_2_DF18233F4FA111002AE2C194E022DC22;//[Offset: 0x0, Size: 0x10]
	FString ServerName_4_140DFD854D1C2C92AA481BA68AA09A2D;//[Offset: 0x10, Size: 0x10]
	FString ServerMap_6_92C0E0CF4E52FD3DF5A74D90B3E25968;//[Offset: 0x20, Size: 0x10]
	FString ServerCurrentPeople_8_1E17DF5F4419120011D757BE9BC0F735;//[Offset: 0x30, Size: 0x10]
	FString ServerMaxPeople_10_EF1FE1A74E39BD8A790A8CA5DF12B043;//[Offset: 0x40, Size: 0x10]
	FString IsVIP_13_7D400A3C4AD9A32017398EB38F3BA948;//[Offset: 0x50, Size: 0x10]
	FString Password_16_44E181A8421943C6283B188BA5E1131E;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: BanPlayerWidgetStructure
	FText Name_4_F0F7FF274100A82FF35DD89EA5A2DEDF;//[Offset: 0x0, Size: 0x18]
	FText UID_5_68FFB37749F58EC7AA0D99BB61CB1F7D;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: BanPlayerList
	FString DeviceID_13_D5C52E664916DB226FDBDEB93E3F1339;//[Offset: 0x0, Size: 0x10]
	FString ServerKey_12_61FE5BF34EDA3FF36EBBA2BD893A323B;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Skin
	int SkinIndex_2_BD814AC9483D3FC927F3399C022BDDB5;//[Offset: 0x0, Size: 0x4]
	Material* Material_5_EBA09E70469581CFCE2AC9B694F80930;//[Offset: 0x8, Size: 0x8]
	Texture2D* Icon_13_9891A85E47BF95829D4910B707425EB7;//[Offset: 0x10, Size: 0x8]
	class WeaponBase_C* Gun_12_754E2EDB47335E96DFF66BA82653B767;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WeaponBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x228, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x230, Size: 0x8]
	ArrowComponent* LefthandPosition;//[Offset: 0x238, Size: 0x8]
	SkeletalMeshComponent* Silencer;//[Offset: 0x240, Size: 0x8]
	ArrowComponent* Muzzle;//[Offset: 0x248, Size: 0x8]
	AnimMontage* DrawAnim;//[Offset: 0x250, Size: 0x8]
	AnimMontage* ReloadAnim;//[Offset: 0x258, Size: 0x8]
	AnimMontage* FireAnim;//[Offset: 0x260, Size: 0x8]
	AnimMontage* LookAtAnim;//[Offset: 0x268, Size: 0x8]
	float SGp;//[Offset: 0x270, Size: 0x4] //射击间隔
	SkeletalMesh* SKType;//[Offset: 0x278, Size: 0x8]
	class AnimInstance* ABPClass;//[Offset: 0x280, Size: 0x8]
	int WeaponType;//[Offset: 0x288, Size: 0x4]
	SkeletalMesh* SKArm;//[Offset: 0x290, Size: 0x8]
	int WeaponA;//[Offset: 0x298, Size: 0x4] // 弹夹子弹
	int WeaponMaxA;//[Offset: 0x29c, Size: 0x4] // 弹夹最大
	int GunAmBackup;//[Offset: 0x2a0, Size: 0x4]
	int GunAmBackupMax;//[Offset: 0x2a4, Size: 0x4]
	bool IsSniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	CSGOCharacterBase_C* LastOwner;//[Offset: 0x2b0, Size: 0x8]
	bool WeaponIsAT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	ParticleSystem* MuzzleFlash;//[Offset: 0x2c0, Size: 0x8]
	FName MuzzleBoneName;//[Offset: 0x2c8, Size: 0x8]
	SoundBase* FireSound;//[Offset: 0x2d0, Size: 0x8]
	CurveVector* CrosshairCruve;//[Offset: 0x2d8, Size: 0x8]
	float RecoilReverseSpeed;//[Offset: 0x2e0, Size: 0x4]
	CurveVector* OffsetCurve;//[Offset: 0x2e8, Size: 0x8]
	float WSped;//[Offset: 0x2f0, Size: 0x4]
	float WspedCrouch;//[Offset: 0x2f4, Size: 0x4]
	float RecoilStartToReverseTime;//[Offset: 0x2f8, Size: 0x4]
	CurveFloat* MovementCurve;//[Offset: 0x300, Size: 0x8]
	float SideMuzzleJump;//[Offset: 0x308, Size: 0x4] // 准心抖动
	float UpMuzzleJump;//[Offset: 0x30c, Size: 0x4] // 准心抖动
	AnimMontage* LightAttackAnimMiss1;//[Offset: 0x310, Size: 0x8]
	AnimMontage* LightAttackAnimMiss2;//[Offset: 0x318, Size: 0x8]
	AnimMontage* LightAttackAnimHit1;//[Offset: 0x320, Size: 0x8]
	AnimMontage* LightAttackAnimHit2;//[Offset: 0x328, Size: 0x8]
	AnimMontage* LightAttackAnimBack;//[Offset: 0x330, Size: 0x8]
	AnimMontage* HeavyAttackAnimMiss;//[Offset: 0x338, Size: 0x8]
	AnimMontage* HeavyAttackAnimHit;//[Offset: 0x340, Size: 0x8]
	AnimMontage* HeavyAttackAnimBack;//[Offset: 0x348, Size: 0x8]
	bool HaveSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	SkeletalMesh* SilencerMesh;//[Offset: 0x358, Size: 0x8]
	FName AttachWeaponSocket;//[Offset: 0x360, Size: 0x8]
	AnimMontage* GrenadePullOutAnim;//[Offset: 0x368, Size: 0x8]
	AnimMontage* GrenadeThrowHighAnim;//[Offset: 0x370, Size: 0x8]
	AnimMontage* GrenadeThrowLowAnim;//[Offset: 0x378, Size: 0x8]
	class 3PMuzzleFlash_C* 3PMuzzleFlash;//[Offset: 0x380, Size: 0x8]
	Texture2D* Icon;//[Offset: 0x388, Size: 0x8]
	float Dg;//[Offset: 0x390, Size: 0x4] // 伤害
	float DgH;//[Offset: 0x394, Size: 0x4] // 伤害
	float DistanceFalloff;//[Offset: 0x398, Size: 0x4] // 子弹下坠？
	bool IsMirco;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	Material* GunMaterial;//[Offset: 0x3a0, Size: 0x8]
	bool CanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	int Money;//[Offset: 0x3ac, Size: 0x4]
	bool ShouldAutoStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	int MaterialSlot;//[Offset: 0x3b4, Size: 0x4]
	bool IsShotGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	int BulletNum;//[Offset: 0x3bc, Size: 0x4]
	int KillMoney;//[Offset: 0x3c0, Size: 0x4]
	float NoArmorDmg;//[Offset: 0x3c4, Size: 0x4]
	float NoArmorDmgHead;//[Offset: 0x3c8, Size: 0x4]
	Vector HandRelative;//[Offset: 0x3cc, Size: 0xc]
	bool ShouldAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	bool IsScopeRifle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1]
	Vector ScopePlace;//[Offset: 0x3dc, Size: 0xc]
	AnimMontage* FireAnimRifleScope;//[Offset: 0x3e8, Size: 0x8]
	SoundCue* RifleZoomInAudio;//[Offset: 0x3f0, Size: 0x8]
	SoundCue* RifleZoomOutAudio;//[Offset: 0x3f8, Size: 0x8]
	AnimMontage* ShotgunInsertAnim;//[Offset: 0x400, Size: 0x8]
	AnimMontage* ShotgunReloadFinishAnim;//[Offset: 0x408, Size: 0x8]
	void ReceiveBeginPlay();// 0x5d7bd0e64001
	void ServerClearLastOwner();// 0x5d7ad0e64001
	void ClientClearLastOwner();// 0x5d79d0e64001
	void PickUp(CSGOCharacterBase_C* Character);// 0x5d78d0e64001
	void ServerWeaponPickUp(CSGOCharacterBase_C* Character);// 0x5d77d0e64001
	void CheckIfTouchByPlayer();// 0xffffffffc0e233c0
	void ExecuteUbergraph_WeaponBase(int EntryPoint, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, CSGOCharacterBase_C* K2Node_CustomEvent_Character, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, CSGOCharacterBase_C* K2Node_CustomEvent_Character, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue);// 0x5d74d0e64008

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x448, Size: 0x4]
	float ArrowSize;//[Offset: 0x44c, Size: 0x4]
	float ArrowLength;//[Offset: 0x450, Size: 0x4]
	float ScreenSize;//[Offset: 0x454, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x24f7d0be4041

--------------------------------
Class: 3PMuzzleFlash_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	void ReceiveBeginPlay();// 0xffffffffc0e23820
	void ExecuteUbergraph_3PMuzzleFlash(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess);// 0x5d6dd0e64008

--------------------------------
Class: OB_C.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	SceneCaptureComponent2D* SceneCaptureComponent2D1;//[Offset: 0x288, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x290, Size: 0x8]
	int CurrentOBPlayer;//[Offset: 0x298, Size: 0x4]
	bool IsCT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	CSGOCharacterBase_C* CurrentOB;//[Offset: 0x2a0, Size: 0x8]
	bool IsFirstOBChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	float Money;//[Offset: 0x2ac, Size: 0x4]
	CSGOCharacterBase_C*[] CurrentTeamatePlayer;//[Offset: 0x2b0, Size: 0x10]
	CSGOCharacterBase_C* LastOB;//[Offset: 0x2c0, Size: 0x8]
	bool GlobalOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	OBHUD_C* OBHUD;//[Offset: 0x2d0, Size: 0x8]
	ScopeWidgetOB_C* ScopeWidget;//[Offset: 0x2d8, Size: 0x8]
	GlobalOBHUD_C* GlobalOBHUD;//[Offset: 0x2e0, Size: 0x8]
	FlashWidgetOB_C* FlashHUD;//[Offset: 0x2e8, Size: 0x8]
	void ChangeOB(CSGOCharacterBase_C* SpecialCharacter, bool Special?);// 0x7371d0e64001
	void Set3PAnd1PCanSee(CSGOCharacterBase_C* Next, CSGOCharacterBase_C* Last);// 0x7370d0e64001
	void ServerSet3pand1pvisible(CSGOCharacterBase_C* Next, CSGOCharacterBase_C* Last);// 0x736fd0e64001
	void Touch();// 0x736ed0e64001
	void ReceivePossessed(Controller* NewController);// 0x736dd0e64001
	void CreateOBHUD();// 0x736cd0e64001
	void ReceiveTick(float DeltaSeconds);// 0x736bd0e64001
	void CreateGlobalOBHUD();// 0x736ad0e64001
	void RefreshGlobalOB();// 0x735dd0e64001
	void RefreshMiniMapNoEnemyDot();// 0xffffffffc0d5f5a0
	void ReceiveUnpossessed(Controller* OldController);// 0x5aa2d0e64001
	static void ExecuteUbergraph_OB(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, GlobalOBHUD_C* CallFunc_Create_ReturnValue, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FlashWidgetOB_C* CallFunc_Create_ReturnValue, ScopeWidgetOB_C* CallFunc_Create_ReturnValue, OBHUD_C* CallFunc_Create_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, CSGOCharacterBase_C* K2Node_CustomEvent_SpecialCharacter, bool K2Node_CustomEvent_Special_, Controller* CallFunc_GetController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_BoolBool_ReturnValue, int CallFunc_Array_Add_ReturnValue, CSGOCharacterBase_C* K2Node_CustomEvent_Next, CSGOCharacterBase_C* K2Node_CustomEvent_Last, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, CSGOCharacterBase_C* K2Node_CustomEvent_Next, CSGOCharacterBase_C* K2Node_CustomEvent_Last, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Controller* K2Node_Event_NewController, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_DeltaSeconds, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, WeightedBlendable K2Node_MakeStruct_WeightedBlendable, WeightedBlendable[] K2Node_MakeArray_Array, WeightedBlendables K2Node_MakeStruct_WeightedBlendables, bool CallFunc_IsValid_ReturnValue, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, WeightedBlendable K2Node_MakeStruct_WeightedBlendable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, WeightedBlendable[] K2Node_MakeArray_Array, WeightedBlendables K2Node_MakeStruct_WeightedBlendables, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor* CallFunc_Array_Get_Item, Vector CallFunc_GetActorScale3D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, TeammateIconActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, Vector CallFunc_MakeVector_ReturnValue, TeammateIconActor_C* CallFunc_Array_Get_Item, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_Select_Default, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Find_ReturnValue, CSGOCharacterBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, int Temp_int_Variable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor* CallFunc_Array_Get_Item, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Vector CallFunc_GetActorScale3D_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, TeammateIconActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, TeammateIconActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, Controller* K2Node_Event_OldController, C4IconActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, C4IconActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, C4IconActor_C*[] CallFunc_GetAllActorsOfClass_OutActors, C4IconActor_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x5aa0d0e64001

--------------------------------
Class: GlobalOBHUD_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x268, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x270, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x278, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x280, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x288, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x290, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x298, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x2a0, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x2a8, Size: 0x8]
	OBPlayerInfoOne_C* OBPlayerInfoOne;//[Offset: 0x2b0, Size: 0x8]
	VerticalBox* VerticalBox_ct;//[Offset: 0x2b8, Size: 0x8]
	VerticalBox* VerticalBox_t;//[Offset: 0x2c0, Size: 0x8]
	void Construct();// 0xffffffffc670c660
	void RefreshInfoWidget();// 0x51c0d0e64001
	static void ExecuteUbergraph_GlobalOBHUD(int EntryPoint, int Temp_int_Array_Index_Variable, OBPlayerInfoOne_C* CallFunc_Create_ReturnValue, CSGOPlayerState_C*[] CallFunc_GetAllActorsOfClass_OutActors, int Temp_int_Loop_Counter_Variable, CSGOPlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, OBPlayerInfoOne_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue);// 0xffffffffc670c900

--------------------------------
Class: OBPlayerInfoOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	Image* Image;//[Offset: 0x278, Size: 0x8]
	Image* Image;//[Offset: 0x280, Size: 0x8]
	Image* Image;//[Offset: 0x288, Size: 0x8]
	Image* Image;//[Offset: 0x290, Size: 0x8]
	Image* Image;//[Offset: 0x298, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x2a0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2b0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2b8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2c0, Size: 0x8]
	CSGOPlayerState_C* PlayerState;//[Offset: 0x2c8, Size: 0x8]
	enum GetVisibility(bool CallFunc_IsValid_ReturnValue);// 0x5117d0e64001
	SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, bool CallFunc_IsValid_ReturnValue);// 0x5116d0e64001
	static FText GetText(CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x5115d0e64001
	enum GetVisibility(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x5114d0e64001
	enum GetVisibility(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x5113d0e64001
	enum GetVisibility(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x5112d0e64001
	enum GetVisibility(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x5111d0e64001
	float GetPercent(bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x5110d0e64001
	LinearColor GetFillColorAndOpacity();// 0x510fd0e64001
	FText GetText(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x510ed0e64001
	static FText GetText(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x510dd0e64001
	static SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Blueprint_GetSizeY_ReturnValue, int CallFunc_Blueprint_GetSizeX_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x510ad0e64001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x7d021bc6b1264000
	void BndEvt__OBPlayerInfoOne_Button_85_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc6705900
	void ExecuteUbergraph_OBPlayerInfoOne(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x510cd0e64001

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278]
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10]
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1]
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1]
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10]
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10]
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10]
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x216bd0be4041
	void SetStyle(out const ButtonStyle InStyle);// 0x216ad0be4041
	void SetPressMethod(byte InPressMethod);// 0x2169d0be4041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x2168d0be4041
	void SetClickMethod(byte InClickMethod);// 0x2167d0be4041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x2166d0be4041
	bool IsPressed();// 0x2165d0be4041

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0xf4bd0be4041
	PanelSlot* GetContentSlot();// 0xf4ad0be4041
	Widget* GetContent();// 0xf49d0be4041

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88]
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88]
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 0x88]
	delegate BrushDelegate;//[Offset: 0x190, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x21bdd0be4041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x21bcd0be4041
	void SetBrushTintColor(SlateColor TintColor);// 0x21fdd0be4041
	void SetBrushSize(Vector2D DesiredSize);// 0x21bad0be4041
	void SetBrushResourceObject(Object* ResourceObject);// 0x21b9d0be4041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x21b8d0be4041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x21b7d0be4041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x21b6d0be4041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x21b5d0be4041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x21b4d0be4041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x21b3d0be4041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x21b2d0be4041
	void SetBrush(out const SlateBrush InBrush);// 0x21b1d0be4041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x21b0d0be4041

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x180, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x1a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 0x8]
	float percent;//[Offset: 0x2c8, Size: 0x4]
	byte BarFillType;//[Offset: 0x2cc, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10]
	void SetPercent(float InPercent);// 0x21f0d0be4041
	void SetIsMarquee(bool InbIsMarquee);// 0x21efd0be4041
	void SetFillColorAndOpacity(LinearColor InColor);// 0x21eed0be4041

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x188, Size: 0x58]
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 0x88]
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x290, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x296, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x225fd0be4041
	void SetText(FText InText);// 0x225ed0be4041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x225dd0be4041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x225cd0be4041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x225bd0be4041
	void SetOpacity(float InOpacity);// 0x225ad0be4041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x2259d0be4041
	void SetFont(SlateFontInfo InFontInfo);// 0x2258d0be4041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x2257d0be4041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x2256d0be4041
	FText GetText();// 0x2255d0be4041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x2254d0be4041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x2253d0be4041

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 0x3]
	byte Justification;//[Offset: 0x10b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x110, Size: 0x4]
	Margin Margin;//[Offset: 0x114, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x124, Size: 0x4]
	void SetJustification(byte InJustification);// 0xf56d0be4041

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CSGOPlayerState_C.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x318, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x320, Size: 0x8]
	int Kill;//[Offset: 0x328, Size: 0x4]
	int Dead;//[Offset: 0x32c, Size: 0x4]
	bool IsCT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	FText Name;//[Offset: 0x338, Size: 0x18]
	CSGOCharacterBase_C* CurrentCSGOCharacter;//[Offset: 0x350, Size: 0x8]
	bool IsGlobalOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	void ReceiveBeginPlay();// 0x5707d0e64001
	void ReceiveTick(float DeltaSeconds);// 0xffffffffc0cebe80
	void ExecuteUbergraph_CSGOPlayerState(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x56f3d0e64001

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x22d4d0be4041
	void SetSize(SlateChildSize InSize);// 0x22d3d0be4041
	void SetPadding(Margin InPadding);// 0x22d2d0be4041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x22d1d0be4041

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x22d0d0be4041

--------------------------------
Class: FlashWidgetOB_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	float FullBlindTime;//[Offset: 0x278, Size: 0x4]
	float HalfBlindTime;//[Offset: 0x27c, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x280, Size: 0x4]
	bool StartHalfBlind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	TimerHandle HalfBlindTimer;//[Offset: 0x288, Size: 0x8]
	LinearColor GetColorAndOpacity(LinearColor K2Node_MakeStruct_LinearColor);// 0x5185d0e64001
	LinearColor GetColorAndOpacity(LinearColor K2Node_MakeStruct_LinearColor);// 0x5184d0e64001
	void Flash(float Full, float Half);// 0x5183d0e64001
	void HalfBlind();// 0x5182d0e64001
	void ClearFlash();// 0xffffffffc670e960
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x5180d0e64001
	void ExecuteUbergraph_FlashWidgetOB(int EntryPoint, bool CallFunc_LessEqual_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_CustomEvent_Full, float K2Node_CustomEvent_Half, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FInterpTo_Constant_ReturnValue, float CallFunc_FClamp_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc670ec00

--------------------------------
Class: ScopeWidgetOB_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Cross1;//[Offset: 0x268, Size: 0x8]
	Image* Cross1;//[Offset: 0x270, Size: 0x8]
	Image* Image;//[Offset: 0x278, Size: 0x8]
	Image* Image;//[Offset: 0x280, Size: 0x8]
	Image* Image;//[Offset: 0x288, Size: 0x8]
	Image* Image;//[Offset: 0x290, Size: 0x8]
	Image* Image;//[Offset: 0x298, Size: 0x8]
	Image* Image;//[Offset: 0x2a0, Size: 0x8]
	CSGOCharacterBase_C* Owner;//[Offset: 0x2a8, Size: 0x8]
	CurveVector* crosshaircurve;//[Offset: 0x2b0, Size: 0x8]
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x5138d0e64001
	static void ExecuteUbergraph_ScopeWidgetOB(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc670c9e0

--------------------------------
Class: OBHUD_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* CrossHairDown;//[Offset: 0x268, Size: 0x8]
	Image* CrossHairLeft;//[Offset: 0x270, Size: 0x8]
	Image* CrossHairRight;//[Offset: 0x278, Size: 0x8]
	Image* CrossHairUp;//[Offset: 0x280, Size: 0x8]
	Image* Dot;//[Offset: 0x288, Size: 0x8]
	Image* Image;//[Offset: 0x290, Size: 0x8]
	float TargetKillIconOpacity;//[Offset: 0x298, Size: 0x4]
	bool ShouldHitBarShort;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	enum Get_Dot_Visibility(Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x515fd0e64001
	void GetText();// 0x515ed0e64001
	void GetVisibility();// 0x515dd0e64001
	void GetPercent();// 0x515cd0e64001
	enum GetVisibility(Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x515bd0e64001
	void Construct();// 0x515ad0e64001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x5159d0e64001
	void Remove();// 0x5158d0e64001
	void killFeedBack();// 0x5157d0e64001
	void SwitchToDot();// 0x5156d0e64001
	void SwitchToCrosshair();// 0x5155d0e64001
	void SetDotRecoil();// 0x5154d0e64001
	void HideCrosshair();// 0x5153d0e64001
	void AdjustCrosshair(float Length, float Gap, float Thickness);// 0x6b8ed0e64001
	void LoadCrosshair();// 0x5151d0e64001
	void ExecuteUbergraph_OBHUD(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float K2Node_CustomEvent_Length, float K2Node_CustomEvent_Gap, float K2Node_CustomEvent_Thickness, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetPlayerPawn_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0xffffffffc670b160

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x2181d0be4041
	void SetSize(Vector2D InSize);// 0x2180d0be4041
	void SetPosition(Vector2D InPosition);// 0x217fd0be4041
	void SetOffsets(Margin InOffset);// 0x21bbd0be4041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x217dd0be4041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x217cd0be4041
	void SetLayout(out const AnchorData InLayoutData);// 0x217bd0be4041
	void SetAutoSize(bool InbAutoSize);// 0x217ad0be4041
	void SetAnchors(Anchors InAnchors);// 0x2179d0be4041
	void SetAlignment(Vector2D InAlignment);// 0x2178d0be4041
	int GetZOrder();// 0x2177d0be4041
	Vector2D GetSize();// 0x2176d0be4041
	Vector2D GetPosition();// 0x2175d0be4041
	Margin GetOffsets();// 0x2174d0be4041
	AnchorData GetLayout();// 0x2173d0be4041
	bool GetAutoSize();// 0x2172d0be4041
	Anchors GetAnchors();// 0x2171d0be4041
	Vector2D GetAlignment();// 0x2170d0be4041

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CSGOGameInstance_C.GameInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1a8, Size: 0x8]
	CSGOSaveGame_C* SaveGame;//[Offset: 0x1b0, Size: 0x8]
	FString Mink;//[Offset: 0x1b8, Size: 0x10]
	float Sensitive;//[Offset: 0x1c8, Size: 0x4]
	float SensitiveScope1;//[Offset: 0x1cc, Size: 0x4]
	float SensitiveScope2;//[Offset: 0x1d0, Size: 0x4]
	FText PlayerName;//[Offset: 0x1d8, Size: 0x18]
	FString GameMapToLoad;//[Offset: 0x1f0, Size: 0x10]
	FString ServerToJoin;//[Offset: 0x200, Size: 0x10]
	BanSaveGame_C* BanSaveGame;//[Offset: 0x210, Size: 0x8]
	FString Version;//[Offset: 0x218, Size: 0x10]
	FString[] MapNameArray;//[Offset: 0x228, Size: 0x10]
	SkinHaveSaveGame_C* SkinSaveGame;//[Offset: 0x238, Size: 0x8]
	Skin[] AllSkinArray;//[Offset: 0x240, Size: 0x10]
	FString K1;//[Offset: 0x250, Size: 0x10]
	FString K2;//[Offset: 0x260, Size: 0x10]
	FString K3;//[Offset: 0x270, Size: 0x10]
	FString K4;//[Offset: 0x280, Size: 0x10]
	FString K5;//[Offset: 0x290, Size: 0x10]
	FString K6;//[Offset: 0x2a0, Size: 0x10]
	FString K7;//[Offset: 0x2b0, Size: 0x10]
	FString K8;//[Offset: 0x2c0, Size: 0x10]
	FString K9;//[Offset: 0x2d0, Size: 0x10]
	FString K10;//[Offset: 0x2e0, Size: 0x10]
	<FString,Skin> CDKSkin;//[Offset: 0x2f0, Size: 0x50]
	void IsNormalAdmin(out bool IsAdmin, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x5e3fd0e64001
	void IsProAdminKey(out bool IsAdmin, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x5e3ed0e64001
	void GetValidSkin(out Skin Skin, out bool Find, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, Skin CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x5e3dd0e64001
	void ReceiveInit();// 0x5e3cd0e64001
	void ReceiveShutdown();// 0x5e3bd0e64001
	void InstanceSave();// 0x5e3ad0e64001
	void PremissionFinish(out const FString[] Permissions, out const bool[] GrantResults);// 0x5e39d0e64001
	void Finish(out const FString[] Permissions, out const bool[] GrantResults);// 0xffffffffc0e6b080
	static void ExecuteUbergraph_CSGOGameInstance(int EntryPoint, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, CSGOSaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_SaveGameToSlot_ReturnValue, BanSaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_SaveGameToSlot_ReturnValue, int64 CallFunc_RandomInteger64_ReturnValue, int64 CallFunc_RandomInteger64_ReturnValue, FText CallFunc_Conv_Int64ToText_ReturnValue, FText CallFunc_Conv_Int64ToText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, int64 CallFunc_RandomInteger64_ReturnValue, FText CallFunc_Conv_Int64ToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_DoesSaveGameExist_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_DoesSaveGameExist_ReturnValue, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, CSGOSaveGame_C* K2Node_DynamicCast_AsCSGOSave_Game, bool K2Node_DynamicCast_bSuccess, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, BanSaveGame_C* K2Node_DynamicCast_AsBan_Save_Game, bool K2Node_DynamicCast_bSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, SkinHaveSaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_DoesSaveGameExist_ReturnValue, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, SkinHaveSaveGame_C* K2Node_DynamicCast_AsSkin_Have_Save_Game, bool K2Node_DynamicCast_bSuccess, IronSourceProxy* CallFunc_GetIronSourceInstance_ReturnValue, bool CallFunc_SaveGameToSlot_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_CheckPermission_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const FString[] K2Node_MakeArray_Array, const FString[] K2Node_CustomEvent_Permissions, const bool[] K2Node_CustomEvent_GrantResults, AndroidPermissionCallbackProxy* CallFunc_AcquirePermissions_ReturnValue, bool CallFunc_CheckPermission_ReturnValue, const FString[] K2Node_MakeArray_Array, const FString[] K2Node_CustomEvent_Permissions, const bool[] K2Node_CustomEvent_GrantResults, AndroidPermissionCallbackProxy* CallFunc_AcquirePermissions_ReturnValue);// 0xffffffffc0e6b240

--------------------------------
Class: CSGOSaveGame_C.SaveGame.Object
	float OverallInputScale;//[Offset: 0x28, Size: 0x4]
	float Scope1Scale;//[Offset: 0x2c, Size: 0x4]
	float Scope2Scale;//[Offset: 0x30, Size: 0x4]
	FText PlayerName;//[Offset: 0x38, Size: 0x18]
	UISetting UISetting;//[Offset: 0x50, Size: 0x84]
	float FOV;//[Offset: 0xd4, Size: 0x4]
	FText UID;//[Offset: 0xd8, Size: 0x18]
	FString ServerKey;//[Offset: 0xf0, Size: 0x10]
	bool UseTilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float TiltSensitive;//[Offset: 0x104, Size: 0x4]
	int FAMASVALUEINDEX;//[Offset: 0x108, Size: 0x4]
	bool ReverseTiltX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool ReverseTiltY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool AutoStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	Material*[] M4A1SMAT;//[Offset: 0x110, Size: 0x10]
	Material*[] ButterFlyMAT;//[Offset: 0x120, Size: 0x10]
	int M4A1SVALUEINDEX;//[Offset: 0x130, Size: 0x4]
	int ButterflyVALUEINDEX;//[Offset: 0x134, Size: 0x4]
	bool ContinueAutoStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool PushCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool ShouldCrossHairRed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	bool ShouldKillFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1]
	bool IsMoveJoyStick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	bool AntiYoungFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 0x1]
	float CrosshairThickness;//[Offset: 0x140, Size: 0x4]
	float CrosshairGap;//[Offset: 0x144, Size: 0x4]
	float CrosshairLength;//[Offset: 0x148, Size: 0x4]
	FText SaveUsername;//[Offset: 0x150, Size: 0x18]
	FText SavePassword;//[Offset: 0x168, Size: 0x18]
	int RoundPlay;//[Offset: 0x180, Size: 0x4]
	bool ShouldDragAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool ShouldModAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	bool FirstTimeSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186, Size: 0x1]
	bool ShouldUseAutoAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187, Size: 0x1]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: UISetting
	float ButtonJumpPositionX_3_B40509CD473392DE410120ADA4C04274;//[Offset: 0x0, Size: 0x4]
	float ButtonJumpPositionY_11_D5E1494643EAA865C60FED9D54854DF4;//[Offset: 0x4, Size: 0x4]
	float ButtonJumpSize_15_2EFBE5824783A63AB833B2AF502B7EA0;//[Offset: 0x8, Size: 0x4]
	float ButtonCrouchPositionX_17_C09EEDB44586D67F89FBCAA2CAC025C3;//[Offset: 0xc, Size: 0x4]
	float ButtonCrouchPositionY_19_B213B50941E382AA1C9641A314B0F9B8;//[Offset: 0x10, Size: 0x4]
	float ButtonCrouchSize_21_C4CF924D41D117275BA980911E56C26D;//[Offset: 0x14, Size: 0x4]
	float ButtonReloadPositionX_29_89CCFB4C4187859A96CAEC8309CE0C55;//[Offset: 0x18, Size: 0x4]
	float ButtonReloadPositionY_30_89C2EB934F666778626C17B1CF9858BA;//[Offset: 0x1c, Size: 0x4]
	float ButtonReloadSize_31_833B40F843135C707FF3859BB62F5861;//[Offset: 0x20, Size: 0x4]
	float ButtonAimPositionX_32_58E1DF3C443182581FA7A68549B6C857;//[Offset: 0x24, Size: 0x4]
	float ButtonAimPositionY_33_45C0597440455A2B5FBED7B0E852F2F7;//[Offset: 0x28, Size: 0x4]
	float ButtonAimSize_34_5772ABDA4C897FB190E03AAE1EA9B917;//[Offset: 0x2c, Size: 0x4]
	float ButtonPickupPositionX_41_C355ED1240BF0FE276FD20B5D2CD5FA3;//[Offset: 0x30, Size: 0x4]
	float ButtonPickupPositionY_42_584B0E454DD1F86F78E8F7B0BEBDD68A;//[Offset: 0x34, Size: 0x4]
	float ButtonPickSize_43_E885873649421A83BBED6ABC1E783254;//[Offset: 0x38, Size: 0x4]
	float TouchButtonFirePositionX_44_17D1B46F4408F86C08463AA84033734A;//[Offset: 0x3c, Size: 0x4]
	float TouchButtonFirePositionY_45_5B014E9C4A8F29E0E3F736A7024CAB06;//[Offset: 0x40, Size: 0x4]
	float TouchButtonFireSize_46_08BF4A044106B0FEAFD9F89472852810;//[Offset: 0x44, Size: 0x4]
	float ButtonFireLeftPositionX_51_0E74183849457C924049D3B303771A79;//[Offset: 0x48, Size: 0x4]
	float ButtonFireLeftPositionY_52_1F62C5944789EE9900FD279B7939B70D;//[Offset: 0x4c, Size: 0x4]
	float ButtonFireLeftSize_53_F968800D445BBB2DAF23B38E5789C415;//[Offset: 0x50, Size: 0x4]
	float ButtonShiftWalkPositionX_54_3CF9F8DD4115593ABDBF5FB9B677DF7F;//[Offset: 0x54, Size: 0x4]
	float ButtonShiftWalkPositionY_55_56E503434C95B23FC03CD3860C1FE8F7;//[Offset: 0x58, Size: 0x4]
	float ButtonShiftWalkSize_58_9B29360C4B58C84BD3062A9A41C65F72;//[Offset: 0x5c, Size: 0x4]
	float ButtonBombPositionX_61_36B7DBC646D73C24F22D4BAF05EE030F;//[Offset: 0x60, Size: 0x4]
	float ButtonBombPositionY_62_116917DC43407D9B3600338B9352BFD6;//[Offset: 0x64, Size: 0x4]
	float ButtonBombSize_63_0F89F1704F60CD93A3A2AAA2AAE47510;//[Offset: 0x68, Size: 0x4]
	float ButtonSwitchPositionX_67_0B16A8A54F56BD1BE7A2CFB2224807BD;//[Offset: 0x6c, Size: 0x4]
	float ButtonSwitchPositionY_68_43B9E9CF430562C566F5A4A7B1600DBC;//[Offset: 0x70, Size: 0x4]
	float ButtonSwitchSize_69_5A3C648046CF4D2BC02B74B36483E7C5;//[Offset: 0x74, Size: 0x4]
	float ButtonCancelPositionX_76_3BD1FB0349D572DAD0AFE0AEE567011A;//[Offset: 0x78, Size: 0x4]
	float ButtonCancelPositionY_78_1580222848DFAA6C60AFFCBCE7456A9D;//[Offset: 0x7c, Size: 0x4]
	float ButtonCancelPSize_79_AA85413B413E87AE43F983AB1E54EB6B;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: BanSaveGame_C.SaveGame.Object
	bool IsBan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString[] BanPlayerList;//[Offset: 0x30, Size: 0x10]
	BanPlayerList[] BanPlayerCentre;//[Offset: 0x40, Size: 0x10]
	FString[] BanVIPList;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x275bd0be4041
	bool SupportsHDRDisplayOutput();// 0x275ad0be4041
	void SetVSyncEnabled(bool bEnable);// 0x2759d0be4041
	void SetVisualEffectQuality(int Value);// 0x2758d0be4041
	void SetViewDistanceQuality(int Value);// 0x2757d0be4041
	void SetToDefaults();// 0x2756d0be4041
	void SetTextureQuality(int Value);// 0x2755d0be4041
	void SetShadowQuality(int Value);// 0x2754d0be4041
	void SetShadingQuality(int Value);// 0xffffff82d0be4000
	void SetScreenResolution(IntPoint Resolution);// 0x2752d0be4041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x2751d0be4041
	void SetResolutionScaleValue(int NewScaleValue);// 0x2750d0be4041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x274fd0be4041
	void SetPostProcessingQuality(int Value);// 0x274ed0be4041
	void SetOverallScalabilityLevel(int Value);// 0x274dd0be4041
	void SetFullscreenMode(byte InFullscreenMode);// 0x274cd0be4041
	void SetFrameRateLimit(float NewLimit);// 0x274bd0be4041
	void SetFoliageQuality(int Value);// 0x274ad0be4041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x2749d0be4041
	void SetBenchmarkFallbackValues();// 0x2748d0be4041
	void SetAudioQualityLevel(int QualityLevel);// 0x2747d0be4041
	void SetAntiAliasingQuality(int Value);// 0x2746d0be4041
	void SaveSettings();// 0x2745d0be4041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x2744d0be4041
	void RevertVideoMode();// 0x2743d0be4041
	void ResetToCurrentSettings();// 0x2742d0be4041
	void LoadSettings(bool bForceReload);// 0x2741d0be4041
	bool IsVSyncEnabled();// 0x2740d0be4041
	bool IsVSyncDirty();// 0x273fd0be4041
	bool IsScreenResolutionDirty();// 0x273ed0be4041
	bool IsHDREnabled();// 0x273dd0be4041
	bool IsFullscreenModeDirty();// 0x273cd0be4041
	bool IsDynamicResolutionEnabled();// 0x273bd0be4041
	bool IsDynamicResolutionDirty();// 0x273ad0be4041
	bool IsDirty();// 0x2739d0be4041
	int GetVisualEffectQuality();// 0x2738d0be4041
	int GetViewDistanceQuality();// 0x2737d0be4041
	int GetTextureQuality();// 0x2736d0be4041
	int GetSyncInterval();// 0x2735d0be4041
	int GetShadowQuality();// 0x2734d0be4041
	int GetShadingQuality();// 0x2733d0be4041
	IntPoint GetScreenResolution();// 0x276fd0be4041
	float GetResolutionScaleNormalized();// 0x2731d0be4041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x2730d0be4041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x272fd0be4041
	float GetRecommendedResolutionScale();// 0x272ed0be4041
	byte GetPreferredFullscreenMode();// 0x272dd0be4041
	int GetPostProcessingQuality();// 0x272cd0be4041
	int GetOverallScalabilityLevel();// 0x272bd0be4041
	IntPoint GetLastConfirmedScreenResolution();// 0x272ad0be4041
	byte GetLastConfirmedFullscreenMode();// 0x2729d0be4041
	GameUserSettings* GetGameUserSettings();// 0x2728d0be4041
	byte GetFullscreenMode();// 0x2727d0be4041
	float GetFrameRateLimit();// 0x2726d0be4041
	int GetFramePace();// 0x2725d0be4041
	int GetFoliageQuality();// 0x2724d0be4041
	IntPoint GetDesktopResolution();// 0x2723d0be4041
	IntPoint GetDefaultWindowPosition();// 0x2722d0be4041
	byte GetDefaultWindowMode();// 0x2721d0be4041
	float GetDefaultResolutionScale();// 0x2720d0be4041
	IntPoint GetDefaultResolution();// 0x271fd0be4041
	int GetCurrentHDRDisplayNits();// 0x271ed0be4041
	int GetAudioQualityLevel();// 0x271dd0be4041
	int GetAntiAliasingQuality();// 0x271cd0be4041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x271bd0be4041
	void ConfirmVideoMode();// 0x271ad0be4041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x2719d0be4041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x2718d0be4041
	void ApplyNonResolutionSettings();// 0x2717d0be4041
	void ApplyHardwareBenchmarkResults();// 0x2716d0be4041

--------------------------------
Class: SkinHaveSaveGame_C.SaveGame.Object
	Skin[] HaveSkinArray;//[Offset: 0x28, Size: 0x10]
	Skin[] UsingSkin;//[Offset: 0x38, Size: 0x10]
	<FString,Skin> CDKSkin;//[Offset: 0x48, Size: 0x50]
	int BoxNum;//[Offset: 0x98, Size: 0x4]
	bool HaveGetVIPBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]

--------------------------------
Class: IronSourceProxy.Object
	delegate IronSourceVideoStateDelegate;//[Offset: 0x28, Size: 0x10]
	delegate onIronSourceInterstitialAdReady;//[Offset: 0x38, Size: 0x10]
	delegate onIronSourceInterstitialAdLoadFailed;//[Offset: 0x48, Size: 0x10]
	delegate onIronSourceInterstitialAdOpened;//[Offset: 0x58, Size: 0x10]
	delegate onIronSourceInterstitialAdClosed;//[Offset: 0x68, Size: 0x10]
	delegate onIronSourceInterstitialAdShowSucceeded;//[Offset: 0x78, Size: 0x10]
	delegate onIronSourceInterstitialAdShowFailed;//[Offset: 0x88, Size: 0x10]
	delegate onIronSourceInterstitialAdClicked;//[Offset: 0x98, Size: 0x10]
	delegate onIronSourceBannerAdLoaded;//[Offset: 0xa8, Size: 0x10]
	delegate onIronSourceBannerAdLoadFailed;//[Offset: 0xb8, Size: 0x10]
	delegate onIronSourceBannerAdClicked;//[Offset: 0xc8, Size: 0x10]
	delegate onIronSourceBannerAdScreenPresented;//[Offset: 0xd8, Size: 0x10]
	delegate onIronSourceBannerAdScreenDismissed;//[Offset: 0xe8, Size: 0x10]
	delegate onIronSourceBannerAdLeftApplication;//[Offset: 0xf8, Size: 0x10]
	delegate onIronSourceImpressionDataSuccess;//[Offset: 0x108, Size: 0x10]
	void ShowRewardedVideo(FString PlacementName);// 0x1985d0be4041
	void ShowInterstitial(FString PlacementName);// 0x1984d0be4041
	void ShowBanner(const bool bShowOnTop, FString PlacementName);// 0x1983d0be4041
	void SetMetaDataWithKey(FString Key, FString Value);// 0x1982d0be4041
	void SetConsent(const bool SetCons);// 0x19bed0be4041
	void LoadInterstitial();// 0x1980d0be4041
	bool IsRewardedVideoCappedForPlacement(FString PlacementName);// 0x197fd0be4041
	bool IsRewardedVideoAvailable();// 0x197ed0be4041
	bool IsInterstitialReady();// 0x197dd0be4041
	bool IsInitialized();// 0x197cd0be4041
	void InitIronSource(FString UserId);// 0x197bd0be4041
	void HideBanner();// 0x197ad0be4041
	FString GetPlacementRewardName(FString PlacementName);// 0x1979d0be4041
	FString GetPlacementRewardAmount(FString PlacementName);// 0x1978d0be4041
	void ForceUpdateIronSourceUser(FString UserId);// 0x1977d0be4041

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2a8, Size: 0x1]
	float FOVAngle;//[Offset: 0x2ac, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2b0, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2b8, Size: 0x8]
	byte CompositeMode;//[Offset: 0x2c0, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 0x560]
	float PostProcessBlendWeight;//[Offset: 0x830, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x834, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x838, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x840, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x884, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x890, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89c, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89c, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 0x1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x2c35d0be4041
	void CaptureScene();// 0x2c34d0be4041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x2c33d0be4041

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x1f1, Size: 0x1]
	byte CaptureSource;//[Offset: 0x1f2, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x1f8, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x208, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x218, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x228, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x238, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x23c, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x240, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x248, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x288, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x2bb2d0be4041
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x2bb1d0be4041
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x2bb0d0be4041
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x2bafd0be4041
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x2baed0be4041
	void HideComponent(PrimitiveComponent* InComponent);// 0x2badd0be4041
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x2bacd0be4041
	void ClearShowOnlyComponents();// 0x2babd0be4041
	void ClearHiddenComponents();// 0x2baad0be4041

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 0x4]
	int SizeY;//[Offset: 0x184, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x188, Size: 0x10]
	byte AddressX;//[Offset: 0x198, Size: 0x1]
	byte AddressY;//[Offset: 0x199, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19a, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19a, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x19b, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x19d, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x19e, Size: 0x1]
	byte MipsAddressV;//[Offset: 0x19f, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x1a0, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TeammateIconActor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	PaperSpriteComponent* PaperSprite;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	bool IsCT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	void ReceiveBeginPlay();// 0x7294d0e64001
	void ServerADDTag();// 0x728bd0e64008
	void ClientAddTag();// 0xffffffffc31e8e60
	void ExecuteUbergraph_TeammateIconActor(int EntryPoint, const FName Temp_name_Variable, const FName Temp_name_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xffffffffc31e7b20

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x470, Size: 0x8]
	MaterialInterface* MaterialOverride;//[Offset: 0x478, Size: 0x8]
	LinearColor SpriteColor;//[Offset: 0x480, Size: 0x10]
	void SetSpriteColor(LinearColor NewColor);// 0x19fed0be4041
	bool SetSprite(PaperSprite* NewSprite);// 0x19fdd0be4041
	PaperSprite* GetSprite();// 0x19fcd0be4041

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: C4IconActor_C.Actor.Object
	PaperSpriteComponent* PaperSprite;//[Offset: 0x220, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	SoundNode* FirstNode;//[Offset: 0x178, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0x180, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x184, Size: 0x4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x188, Size: 0x3a0]
	float SubtitlePriority;//[Offset: 0x528, Size: 0x4]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 0x1]
	int CookedQualityIndex;//[Offset: 0x534, Size: 0x4]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x538, Size: 0x1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ManageNotifyWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Border* Border;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button;//[Offset: 0x288, Size: 0x8]
	MultiLineEditableTextBox* MultiLineEditableTextBox;//[Offset: 0x290, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x298, Size: 0x8]
	FText[] Notifys;//[Offset: 0x2a0, Size: 0x10]
	void Construct();// 0x54eed0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x54edd0e64001
	void BndEvt__Button_158_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x54ecd0e64001
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x6a2ed0e64001
	void BndEvt__Button_42_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x54ead0e64001
	static void ExecuteUbergraph_ManageNotifyWidget(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, FText CallFunc_GetText_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, NotifyManageOne_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue);// 0xffffffffc14dcc80

--------------------------------
Class: NotifyManageOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	FText Text;//[Offset: 0x278, Size: 0x18]
	FText GetText();// 0xffffffffc8626380
	void BndEvt__Button_76_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0xffffff82d0be4000
	void ExecuteUbergraph_NotifyManageOne(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc47f5580

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x119, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x11a, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x12c, Size: 0x10]
	Margin Padding;//[Offset: 0x13c, Size: 0x10]
	SlateBrush background;//[Offset: 0x150, Size: 0x88]
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x214, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x224, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x234, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x244, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2160d0be4041
	void SetPadding(Margin InPadding);// 0x215fd0be4041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x215ed0be4041
	void SetDesiredSizeScale(Vector2D InScale);// 0x219fd0be4041
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x215cd0be4041
	void SetBrushFromTexture(Texture2D* Texture);// 0x215bd0be4041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x215ad0be4041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x2159d0be4041
	void SetBrushColor(LinearColor InBrushColor);// 0x2158d0be4041
	void SetBrush(out const SlateBrush InBrush);// 0x2157d0be4041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x2156d0be4041

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	FText HintText;//[Offset: 0x140, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x168, Size: 0x7f8]
	TextBlockStyle TextStyle;//[Offset: 0x960, Size: 0x270]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd1, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xbd2, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xbd3, Size: 0x1]
	SlateWidgetStyleAsset* Style;//[Offset: 0xbd8, Size: 0x8]
	SlateFontInfo Font;//[Offset: 0xbe0, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0xc38, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0xc48, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xc58, Size: 0x10]
	delegate OnTextChanged;//[Offset: 0xc68, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0xc78, Size: 0x10]
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0xf67d0be4041
	void SetText(FText InText);// 0xf66d0be4041
	void SetIsReadOnly(bool bReadOnly);// 0xf65d0be4041
	void SetHintText(FText InHintText);// 0xf64d0be4041
	void SetError(FText InError);// 0xf63d0be4041
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xf62d0be4041
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0xf61d0be4041
	FText GetText();// 0xf60d0be4041
	FText GetHintText();// 0xf5fd0be4041

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x88]
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 0x88]
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 0x88]

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x88]
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 0x88]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 0x88]
	Margin Padding;//[Offset: 0x228, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x238, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0x290, Size: 0x28]
	SlateColor BackgroundColor;//[Offset: 0x2b8, Size: 0x28]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2e0, Size: 0x28]
	Margin HScrollBarPadding;//[Offset: 0x308, Size: 0x10]
	Margin VScrollBarPadding;//[Offset: 0x318, Size: 0x10]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x328, Size: 0x4d0]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GlobleWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* AdminButton;//[Offset: 0x268, Size: 0x8]
	Border* Border;//[Offset: 0x270, Size: 0x8]
	Border* Border;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button;//[Offset: 0x288, Size: 0x8]
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Button* Button;//[Offset: 0x298, Size: 0x8]
	Button* Button;//[Offset: 0x2a0, Size: 0x8]
	Button* Button;//[Offset: 0x2a8, Size: 0x8]
	Button* Button;//[Offset: 0x2b0, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x2b8, Size: 0x8]
	Image* Image;//[Offset: 0x2c0, Size: 0x8]
	Image* Image;//[Offset: 0x2c8, Size: 0x8]
	Image* Image;//[Offset: 0x2d0, Size: 0x8]
	Image* Image;//[Offset: 0x2d8, Size: 0x8]
	Image* Image;//[Offset: 0x2e0, Size: 0x8]
	Image* Image;//[Offset: 0x2e8, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x2f0, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x2f8, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x300, Size: 0x8]
	ScrollBox* ScrollBox;//[Offset: 0x308, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x310, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x318, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x320, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x328, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x330, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x338, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x340, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x348, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x350, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x358, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x360, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x368, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x370, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x378, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x380, Size: 0x8]
	VerticalBox* VerticalBox_ShowVoiceChat;//[Offset: 0x388, Size: 0x8]
	float FPS;//[Offset: 0x390, Size: 0x4]
	bool SwitchSideEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	FText TextToSend;//[Offset: 0x398, Size: 0x18]
	bool IsChatTeamateOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	ShowVoiceChatOne_C*[] VoiceChatShowWidgetArray;//[Offset: 0x3b8, Size: 0x10]
	LeaderBoard_C* LeaderBoard;//[Offset: 0x3c8, Size: 0x8]
	LinearColor GetBrushColor(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6abbd0e64001
	LinearColor GetFillColorAndOpacity(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6ab7d0e64001
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6b8cd0e64001
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6abad0e64001
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffffffc8573660
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6ab6d0e64001
	SlateBrush GetBrush();// 0x6ab5d0e64001
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6ab4d0e64001
	SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, SlateBrush K2Node_MakeStruct_SlateBrush, bool CallFunc_IsValid_ReturnValue);// 0x6ab3d0e64001
	float Get Percent 1(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6ab2d0e64001
	enum GetVisibility(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6ab1d0e64001
	FText GetText();// 0x6ab0d0e64001
	LinearColor GetBrushColor(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess);// 0x6aafd0e64001
	static SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess);// 0x6aaed0e64001
	void GetPercent();// 0x6aadd0e64001
	static SlateBrush Get_Image_Button_Aim_2_Brush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0x6aacd0e64001
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess);// 0x6aabd0e64001
	static FText GetText(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x6aaad0e64001
	enum GetVisibility(GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsNormalAdmin_IsAdmin);// 0x6aa9d0e64001
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess);// 0x6aa8d0e64001
	FText GetText(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x6aa7d0e64001
	FText GetText(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, CSGOPlayerState_C* K2Node_DynamicCast_AsCSGOPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x6aa6d0e64001
	FText GetText(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6aa5d0e64001
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x16d0c4d0be3fff
	enum GetVisibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, OB_C* K2Node_DynamicCast_AsOB, bool K2Node_DynamicCast_bSuccess);// 0x6aa3d0e64001
	FText GetText(int64 CallFunc_FCeil64_ReturnValue, FText CallFunc_Conv_Int64ToText_ReturnValue);// 0x6aa2d0e64001
	static SlateColor GetColorAndOpacity(SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, C4_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0xffffffffc8567dc0
	void GetColorAndOpacity();// 0x55a9d0e64001
	enum GetVisibility(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess);// 0x55a8d0e64001
	FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess);// 0x55a7d0e64001
	FText GetText(C4_C*[] CallFunc_GetAllActorsOfClass_OutActors, GameStateBase* CallFunc_GetGameState_ReturnValue, C4_C* CallFunc_Array_Get_Item, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x55a6d0e64001
	FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x55a5d0e64001
	static FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x55a4d0e64001
	static FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x55a3d0e64001
	static FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x55a2d0e64001
	void Construct();// 0x55a1d0e64001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x55a0d0e64001
	void AddKillerWidget(FText KillerName, FText BeingKillName, Texture2D* KillGun, bool KillerIsT, bool BeingKillIsT, bool IsKillerSelf, bool IsHeadShot, bool IsThrough);// 0x559fd0e64001
	void BndEvt__Button_108_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x559ed0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x559dd0e64001
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x559cd0e64001
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x559bd0e64001
	void ReceiveChat(FText Text);// 0x559ad0e64001
	void BndEvt__EditableTextBox_549_K2Node_ComponentBoundEvent_29_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x5599d0e64001
	void BndEvt__Button_116_K2Node_ComponentBoundEvent_30_OnButtonPressedEvent__DelegateSignature();// 0x5598d0e64001
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x5597d0e64001
	void AddVoiceChat(FText Name, bool IsCT);// 0x5596d0e64001
	void RemoveVoiceChat(out const FText B);// 0x5595d0e64001
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x560cd0e64008
	void BndEvt__GlobleWidget_Button_106_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x5593d0e64001
	void ExecuteUbergraph_GlobleWidget(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, FText K2Node_CustomEvent_KillerName, FText K2Node_CustomEvent_BeingKillName, Texture2D* K2Node_CustomEvent_KillGun, bool K2Node_CustomEvent_KillerIsT, bool K2Node_CustomEvent_BeingKillIsT, bool K2Node_CustomEvent_IsKillerSelf, bool K2Node_CustomEvent_IsHeadShot, bool K2Node_CustomEvent_IsThrough, float CallFunc_Divide_FloatFloat_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KillPlayerWidget_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, InGameSettingWidget_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FText K2Node_CustomEvent_text, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, ChatText_C* CallFunc_Create_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FText K2Node_CustomEvent_Name, bool K2Node_CustomEvent_IsCT, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, ShowVoiceChatOne_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Add_ReturnValue, const FText K2Node_CustomEvent_B, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, int Temp_int_Loop_Counter_Variable, ShowVoiceChatOne_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, LeaderBoard_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x7d01d2e011264000

--------------------------------
Class: CSGOGameState_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x288, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x290, Size: 0x8]
	int TManNumber;//[Offset: 0x298, Size: 0x4]
	int CTManNumber;//[Offset: 0x29c, Size: 0x4]
	int TScore;//[Offset: 0x2a0, Size: 0x4]
	int CTScore;//[Offset: 0x2a4, Size: 0x4]
	int RoundTime;//[Offset: 0x2a8, Size: 0x4]
	bool IsWiningWidgetShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	bool Is T Win;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1]
	bool IsGameStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae, Size: 0x1]
	FString ServerName;//[Offset: 0x2b0, Size: 0x10]
	bool IsKicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	CSGOController_C* KickPlayer;//[Offset: 0x2c8, Size: 0x8]
	FText KickPlayerName;//[Offset: 0x2d0, Size: 0x18]
	int AgreeVote;//[Offset: 0x2e8, Size: 0x4]
	int NoAgreeVote;//[Offset: 0x2ec, Size: 0x4]
	PlayerController*[] VotedController;//[Offset: 0x2f0, Size: 0x10]
	void StartKick(CSGOController_C* CSGOController);// 0x5710d0e64001
	void FinishKick();// 0x570fd0e64001
	void ServerAgree(PlayerController* Controller);// 0x570ed0e64001
	void ServerNoAgree(out const PlayerController* Controller);// 0xffffffffc0ceece0
	void ExecuteUbergraph_CSGOGameState(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, CSGOController_C* K2Node_CustomEvent_CSGOController, FText CallFunc_Conv_StringToText_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, CSGOController_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, CSGOController_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, PlayerController* K2Node_CustomEvent_Controller, const PlayerController* K2Node_CustomEvent_Controller, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0xffffffffc0ceb6a0

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x26c, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x274, Size: 0x8]
	int ElapsedTime;//[Offset: 0x27c, Size: 0x4]
	void OnRep_MatchState();// 0x1f9bd0be4041
	void OnRep_ElapsedTime();// 0x1f9ad0be4041

--------------------------------
Class: C4_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x228, Size: 0x8]
	AudioComponent* Beep;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	int CountDown;//[Offset: 0x248, Size: 0x4]
	TimerHandle CountDownTimer;//[Offset: 0x250, Size: 0x8]
	int BeepSoundGap;//[Offset: 0x258, Size: 0x4]
	int BeepCount;//[Offset: 0x25c, Size: 0x4]
	void ReceiveBeginPlay();// 0x53a3d0e64001
	void CountDownOnce();// 0x53a2d0e64001
	void ServerBoom();// 0x5443d0e64001
	void ClientBoom();// 0x53a0d0e64001
	void ServerDefuse();// 0x539fd0e64001
	void ServerSetCountDownTimer();// 0x539ed0e64001
	void BeepVoice();// 0x539dd0e64001
	void Serverplay2DAudio(SoundBase* Sound);// 0xffffffffc31ed8c0
	void ClientPlay2DAudio(SoundBase* Sound);// 0x539bd0e64001
	static void ExecuteUbergraph_C4(int EntryPoint, int Temp_int_Variable, const Actor*[] Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SoundBase* K2Node_CustomEvent_Sound, SoundBase* K2Node_CustomEvent_Sound, Vector CallFunc_K2_GetActorLocation_ReturnValue, WeaponBase_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_ApplyRadialDamageWithFalloff_ReturnValue, WeaponBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsSimulatingPhysics_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, CSGOCharacterBase_C* CallFunc_Array_Get_Item, CSGOCharacterBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xffffffffc31f3ac0

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 0x8]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 0x10]
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 0x1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 0x1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 0x1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 0x1]
	FName AudioComponentUserID;//[Offset: 0x220, Size: 0x8]
	float PitchModulationMin;//[Offset: 0x228, Size: 0x4]
	float PitchModulationMax;//[Offset: 0x22c, Size: 0x4]
	float VolumeModulationMin;//[Offset: 0x230, Size: 0x4]
	float VolumeModulationMax;//[Offset: 0x234, Size: 0x4]
	float VolumeMultiplier;//[Offset: 0x238, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 0x4]
	float Priority;//[Offset: 0x244, Size: 0x4]
	float SubtitlePriority;//[Offset: 0x248, Size: 0x4]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 0x8]
	float PitchMultiplier;//[Offset: 0x258, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 0x50]
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 0x1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 0x48]
	delegate OnAudioPlayStateChanged;//[Offset: 0x6c0, Size: 0x10]
	delegate OnAudioVirtualizationChanged;//[Offset: 0x6e8, Size: 0x10]
	delegate OnAudioFinished;//[Offset: 0x710, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x738, Size: 0x10]
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x760, Size: 0x10]
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x788, Size: 0x10]
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 0x8]
	void StopDelayed(float DelayTime);// 0x1b3cd0be4041
	void Stop();// 0x1b3bd0be4041
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x1b3ad0be4041
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x1b39d0be4041
	void SetUISound(bool bInUISound);// 0x1b38d0be4041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x1b37d0be4041
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x1b36d0be4041
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x1b35d0be4041
	void SetSound(SoundBase* NewSound);// 0x1b34d0be4041
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x1b33d0be4041
	void SetPaused(bool bPause);// 0x1b32d0be4041
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x1b31d0be4041
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x1b30d0be4041
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x1b2fd0be4041
	void SetIntParameter(FName InName, int inInt);// 0x1b2ed0be4041
	void SetFloatParameter(FName InName, float InFloat);// 0x1b2dd0be4041
	void SetBoolParameter(FName InName, bool InBool);// 0x1b2cd0be4041
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x1b2bd0be4041
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x1b2ad0be4041
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x1b29d0be4041
	void Play(float StartTime);// 0x1b28d0be4041
	bool IsVirtualized();// 0x1b27d0be4041
	bool IsPlaying();// 0x1b26d0be4041
	bool HasCookedFFTData();// 0x1b25d0be4041
	bool HasCookedAmplitudeEnvelopeData();// 0x1b66d0be4041
	enum GetPlayState();// 0x1b23d0be4041
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x1b22d0be4041
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x1b21d0be4041
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x1b20d0be4041
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x1b1fd0be4041
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x1b1ed0be4041
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x1b1dd0be4041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x1b1cd0be4041
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x1b1bd0be4041
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x1b1ad0be4041

--------------------------------
Class: QuartzClockHandle.Object
	QuartzSubsystem* QuartzSubsystem;//[Offset: 0x168, Size: 0x8]
	World* WorldPtr;//[Offset: 0x188, Size: 0x8]
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0x238fd0be4041
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x238ed0be4041
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x238dd0be4041
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x238cd0be4041
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0x238bd0be4041
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0x238ad0be4041
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2389d0be4041
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0x2388d0be4041
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0x2387d0be4041
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0x2386d0be4041
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0x2385d0be4041
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0x23c6d0be4041
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2383d0be4041
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0x2382d0be4041
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x2381d0be4041
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2380d0be4041
	bool IsClockRunning(const Object* WorldContextObject);// 0x237fd0be4041
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x237ed0be4041
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x237dd0be4041
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x237cd0be4041
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x237bd0be4041
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0x237ad0be4041
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0x2379d0be4041
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0x2378d0be4041
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x2377d0be4041

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0x23a9d0be4041
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0x23a8d0be4041
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x23a7d0be4041
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x23a6d0be4041
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x23e7d0be4041
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x23a4d0be4041
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x23a3d0be4041
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x23a2d0be4041
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x23a1d0be4041
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0x23a0d0be4041
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0x239fd0be4041
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0x239ed0be4041
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x239dd0be4041
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x239cd0be4041
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x239bd0be4041
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x239ad0be4041
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0x2399d0be4041
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0x2398d0be4041
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0x2397d0be4041

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 0x4]
	int Beat;//[Offset: 0x4, Size: 0x4]
	float BeatFraction;//[Offset: 0x8, Size: 0x4]
	float Seconds;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18]
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4]
	enum BeatType;//[Offset: 0x4, Size: 0x1]
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4]
	enum PulseDuration;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1]
	float Multiplier;//[Offset: 0x4, Size: 0x4]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1]
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float FloatParam;//[Offset: 0x8, Size: 0x4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int IntParam;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10]
	float PlaybackTime;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4]
	float PlaybackTime;//[Offset: 0x4, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: KillPlayerWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Border* Border;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	Image* Image;//[Offset: 0x278, Size: 0x8]
	Image* Image;//[Offset: 0x280, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x288, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x290, Size: 0x8]
	FText KillerName;//[Offset: 0x298, Size: 0x18]
	FText BeingKillName;//[Offset: 0x2b0, Size: 0x18]
	Texture2D* KillGun;//[Offset: 0x2c8, Size: 0x8]
	bool KillerIsT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool BeingKillIsT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool IsKillerSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool IsWallbang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	enum GetVisibility();// 0x537ed0e64001
	enum GetVisibility();// 0x537dd0e64001
	LinearColor GetBrushColor();// 0x537cd0e64001
	LinearColor GetBrushColor();// 0x537bd0e64001
	SlateColor GetColorAndOpacity(SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x537ad0e64001
	FText GetText(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x5379d0e64001
	static SlateBrush GetBrush(int CallFunc_Blueprint_GetSizeX_ReturnValue, int CallFunc_Blueprint_GetSizeY_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x5378d0e64001
	SlateColor GetColorAndOpacity(SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x5377d0e64001
	FText GetText(FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x5376d0e64001
	void Construct();// 0xffffffffc31f3d60
	void ExecuteUbergraph_KillPlayerWidget(int EntryPoint);// 0xffffffffc31f0c60

--------------------------------
Class: InGameSettingWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Border* Border_ConfirmReset;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button;//[Offset: 0x288, Size: 0x8]
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Button* Button;//[Offset: 0x298, Size: 0x8]
	Button* Button;//[Offset: 0x2a0, Size: 0x8]
	CheckBox* CheckBox;//[Offset: 0x2a8, Size: 0x8]
	CheckBox* CheckBox;//[Offset: 0x2b0, Size: 0x8]
	CheckBox* CheckBox;//[Offset: 0x2b8, Size: 0x8]
	CheckBox* CheckBox_AutoAudio;//[Offset: 0x2c0, Size: 0x8]
	CheckBox* CheckBox_AutpStop;//[Offset: 0x2c8, Size: 0x8]
	CheckBox* CheckBox_AutpStop;//[Offset: 0x2d0, Size: 0x8]
	CheckBox* CheckBox_Crossred;//[Offset: 0x2d8, Size: 0x8]
	CheckBox* CheckBox_KillFeedback;//[Offset: 0x2e0, Size: 0x8]
	CheckBox* CheckBox_MoveJoyStick;//[Offset: 0x2e8, Size: 0x8]
	CheckBox* CheckBox_PushCrouch;//[Offset: 0x2f0, Size: 0x8]
	CheckBox* CheckBox_REX;//[Offset: 0x2f8, Size: 0x8]
	CheckBox* CheckBox_REY;//[Offset: 0x300, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x308, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x310, Size: 0x8]
	EditableTextBox* EditableTextBox_VIP;//[Offset: 0x318, Size: 0x8]
	Slider* Slider_L1;//[Offset: 0x320, Size: 0x8]
	Slider* Slider_L2;//[Offset: 0x328, Size: 0x8]
	Slider* Slider_L3;//[Offset: 0x330, Size: 0x8]
	Slider* Slider_L3;//[Offset: 0x338, Size: 0x8]
	Slider* Slider_L3;//[Offset: 0x340, Size: 0x8]
	Slider* Slider_L3;//[Offset: 0x348, Size: 0x8]
	Slider* Slider_L3;//[Offset: 0x350, Size: 0x8]
	Slider* Slider_L3;//[Offset: 0x358, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x360, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x368, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x370, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x378, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x380, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x388, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x390, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x398, Size: 0x8]
	bool HaveChangeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	static FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x5486d0e64001
	static FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x5485d0e64001
	static FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x5484d0e64001
	FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x5483d0e64001
	enum GetCheckedState();// 0x5482d0e64001
	FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x5481d0e64001
	void GetText();// 0x5480d0e64001
	FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x547fd0e64001
	FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x547ed0e64001
	FText GetText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x547dd0e64001
	void Construct();// 0x547cd0e64001
	void BndEvt__Button_69_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x547bd0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x547ad0e64001
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x5479d0e64001
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x5478d0e64001
	void BndEvt__Button_5_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc14db4e0
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x5476d0e64001
	void BndEvt__Button_82_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x5475d0e64001
	void BndEvt__ComboBoxString_342_K2Node_ComponentBoundEvent_8_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0xffffff82d0d19fd8
	void BndEvt__InGameSettingWidget_EditableTextBox_VIP_K2Node_ComponentBoundEvent_3_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x5473d0e64001
	void ExecuteUbergraph_InGameSettingWidget(int EntryPoint, bool Temp_bool_Variable, bool CallFunc_IsChecked_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Array_Index_Variable, enum Temp_byte_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetValue_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_GetValue_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, FText CallFunc_GetText_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SettingLayOutWidget_C* CallFunc_Create_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetValue_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, enum CallFunc_GetCheckedState_ReturnValue, float CallFunc_GetValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsChecked_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CSGOSaveGame_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_IsChecked_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FString[] CallFunc_GetLocalizedCultures_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetCurrentCulture_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, FString CallFunc_GetSelectedOption_ReturnValue, bool CallFunc_SetCurrentCulture_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsChecked_ReturnValue, enum K2Node_Select_Default, float CallFunc_GetValue_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_GetValue_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue);// 0x5471d0e64001

--------------------------------
Class: SettingLayOutWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button_Aim;//[Offset: 0x288, Size: 0x8]
	Button* Button_Bomb;//[Offset: 0x290, Size: 0x8]
	Button* Button_Cancel;//[Offset: 0x298, Size: 0x8]
	Button* Button_Crouch;//[Offset: 0x2a0, Size: 0x8]
	Button* Button_Fire_Left;//[Offset: 0x2a8, Size: 0x8]
	Button* Button_Jump;//[Offset: 0x2b0, Size: 0x8]
	Button* Button_Pause;//[Offset: 0x2b8, Size: 0x8]
	Button* Button_Pickup;//[Offset: 0x2c0, Size: 0x8]
	Button* Button_Reload;//[Offset: 0x2c8, Size: 0x8]
	Button* Button_RightFire;//[Offset: 0x2d0, Size: 0x8]
	Button* Button_ShiftWalk;//[Offset: 0x2d8, Size: 0x8]
	Button* Button_Switch;//[Offset: 0x2e0, Size: 0x8]
	CanvasPanel* CanvasPanel_Main;//[Offset: 0x2e8, Size: 0x8]
	Image* Image;//[Offset: 0x2f0, Size: 0x8]
	Image* Image;//[Offset: 0x2f8, Size: 0x8]
	Image* Image;//[Offset: 0x300, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x308, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x310, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x318, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x320, Size: 0x8]
	Image* Image_Button_Crouch;//[Offset: 0x328, Size: 0x8]
	Image* Image_Button_Crouch;//[Offset: 0x330, Size: 0x8]
	Image* Image_Button_Jump;//[Offset: 0x338, Size: 0x8]
	Image* Image_Button_Jump;//[Offset: 0x340, Size: 0x8]
	Image* Image_Button_Reload;//[Offset: 0x348, Size: 0x8]
	Image* Image_Debug_Finger1;//[Offset: 0x350, Size: 0x8]
	Image* Image_Debug_Finger2;//[Offset: 0x358, Size: 0x8]
	Image* Image_Pickup;//[Offset: 0x360, Size: 0x8]
	Slider* Slider;//[Offset: 0x368, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x370, Size: 0x8]
	Widget_TouchDragArea_C* WD_TouchDragArea;//[Offset: 0x378, Size: 0x8]
	delegate OnAxis_MoveVirtualJoystick;//[Offset: 0x380, Size: 0x10]
	delegate InputTouch Axis MoveForward;//[Offset: 0x390, Size: 0x10]
	delegate InputTouch Axis MoveRight;//[Offset: 0x3a0, Size: 0x10]
	delegate InputTouch Axis LookUp;//[Offset: 0x3b0, Size: 0x10]
	delegate InputTouch Axis Turn;//[Offset: 0x3c0, Size: 0x10]
	delegate InputTouch Axis Fire;//[Offset: 0x3d0, Size: 0x10]
	delegate OnPressed_Button_Fire;//[Offset: 0x3e0, Size: 0x10]
	delegate OnReleased_Button_Fire;//[Offset: 0x3f0, Size: 0x10]
	delegate OnPressed_Button_Reload;//[Offset: 0x400, Size: 0x10]
	delegate OnPressed_Button_Jump;//[Offset: 0x410, Size: 0x10]
	delegate OnPressed_Button_Crouch;//[Offset: 0x420, Size: 0x10]
	delegate OnPressed_Button_Aim;//[Offset: 0x430, Size: 0x10]
	delegate OnReleased_Button_Jump;//[Offset: 0x440, Size: 0x10]
	delegate OnReleased_Button_Crouch;//[Offset: 0x450, Size: 0x10]
	delegate OnStart_SprintInput;//[Offset: 0x460, Size: 0x10]
	delegate OnEnd_SprintInput;//[Offset: 0x470, Size: 0x10]
	delegate OnPressed_Button_Pickup;//[Offset: 0x480, Size: 0x10]
	delegate OnPressed_Button_WeaponSlot1;//[Offset: 0x490, Size: 0x10]
	delegate OnPressed_Button_WeaponSlot2;//[Offset: 0x4a0, Size: 0x10]
	delegate OnPressed_Button_GrenadeSlot;//[Offset: 0x4b0, Size: 0x10]
	delegate OnReleased_Button_Aim;//[Offset: 0x4c0, Size: 0x10]
	delegate On Pressed Button Weapon Slot3;//[Offset: 0x4d0, Size: 0x10]
	delegate OnPressed_Button_Walk;//[Offset: 0x4e0, Size: 0x10]
	delegate OnPressed_Button_Bomb;//[Offset: 0x4f0, Size: 0x10]
	delegate OnReleased_Button_Bomb;//[Offset: 0x500, Size: 0x10]
	delegate OnPressed_ButtonSwitch;//[Offset: 0x510, Size: 0x10]
	delegate OnPressed_Button_Inspect;//[Offset: 0x520, Size: 0x10]
	delegate OnPressed_Button_Setting;//[Offset: 0x530, Size: 0x10]
	WidgetComponent* NewVar;//[Offset: 0x540, Size: 0x8]
	Widget* CurrentSelectWidget;//[Offset: 0x548, Size: 0x8]
	float AdjustMultiply;//[Offset: 0x550, Size: 0x4]
	Vector ReleasedTouchPoint;//[Offset: 0x554, Size: 0xc]
	byte FingerIndex;//[Offset: 0x560, Size: 0x1]
	FText GetText(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x6a32d0e64001
	float GetValue();// 0xffffff82d0be4000
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0xffffffffc8570d40
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0xffffffffc856e340
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0xffffffffc856eb20
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0xffffffffc856ec00
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0xffffffffc85662a0
	void BndEvt__Button_Fire_Left_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x69ccd0e64001
	void BndEvt__Button_Pickup_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x69d1d0e64001
	void BndEvt__Button_Bomb_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0xffffffffc856cba0
	void BndEvt__Button_Switch_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x69cfd0e64001
	void BndEvt__Button_Aim_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x69ced0e64001
	void BndEvt__Button_Jump_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x69cdd0e64001
	void BndEvt__Button_Reload_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0xffffffffc856d1c0
	void BndEvt__Button_Crouch_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();// 0xffffffffc8570640
	void BndEvt__Button_ShiftWalk_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0xffffffffc856e7a0
	void MoveWidget(float X, float Y, float Size);// 0x2dffb0d0ed402e
	void BndEvt__Slider_239_K2Node_ComponentBoundEvent_13_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0xffffffffc8566fc0
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_17_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc856b240
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_18_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc856ad00
	void BndEvt__Button_5_K2Node_ComponentBoundEvent_19_OnButtonPressedEvent__DelegateSignature();// 0x69bcd0e64001
	void BndEvt__Button_6_K2Node_ComponentBoundEvent_20_OnButtonPressedEvent__DelegateSignature();// 0x69c1d0e64001
	void BndEvt__Button_RightFire_K2Node_ComponentBoundEvent_21_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc8568ca0
	void SetButtonPosition();// 0xffffffffc8569560
	void Construct();// 0x69b8d0e64001
	void BndEvt__Button_Cancel_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x69c0d0e64001
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x68aad0e64001
	void ExecuteUbergraph_SettingLayOutWidget(int EntryPoint, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float K2Node_CustomEvent_x, float K2Node_CustomEvent_y, float K2Node_CustomEvent_Size, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float K2Node_ComponentBoundEvent_Value, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, UISetting K2Node_MakeStruct_UISetting, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors CallFunc_GetAnchors_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0xffffff82d0be4000
	void OnPressed_Button_Setting__DelegateSignature();// 0x2dffb0d0ed402e
	void OnPressed_Button_Inspect__DelegateSignature();// 0x545cd0e64001
	void OnPressed_ButtonSwitch__DelegateSignature();// 0xffffffffc14d9480
	void OnReleased_Button_Bomb__DelegateSignature();// 0x68abd0e64001
	void OnPressed_Button_Bomb__DelegateSignature();// 0xffffffffc85691e0
	void OnPressed_Button_Walk__DelegateSignature();// 0x54e4d0e64001
	void On Pressed Button Weapon Slot3__DelegateSignature();// 0x54e3d0e64001
	void OnReleased_Button_Aim__DelegateSignature();// 0x54e2d0e64001
	void OnPressed_Button_GrenadeSlot__DelegateSignature(int IpSlotIndex);// 0x54e1d0e64001
	void OnPressed_Button_WeaponSlot2__DelegateSignature();// 0x54e0d0e64001
	void OnPressed_Button_WeaponSlot1__DelegateSignature();// 0x54dfd0e64001
	void OnPressed_Button_Pickup__DelegateSignature();// 0x54ded0e64001
	void OnEnd_SprintInput__DelegateSignature();// 0x54ddd0e64001
	void OnStart_SprintInput__DelegateSignature();// 0x54dcd0e64001
	void OnReleased_Button_Crouch__DelegateSignature();// 0x54dbd0e64001
	void OnReleased_Button_Jump__DelegateSignature();// 0x54dad0e64001
	void OnPressed_Button_Aim__DelegateSignature();// 0x54d9d0e64001
	void OnPressed_Button_Crouch__DelegateSignature();// 0x54d8d0e64001
	void OnPressed_Button_Jump__DelegateSignature();// 0x54d7d0e64001
	void OnPressed_Button_Reload__DelegateSignature();// 0x54d6d0e64001
	void OnReleased_Button_Fire__DelegateSignature();// 0x54d5d0e64001
	void OnPressed_Button_Fire__DelegateSignature();// 0x54d4d0e64001
	void InputTouch Axis Fire__DelegateSignature();// 0x54d3d0e64001
	void InputTouch Axis Turn__DelegateSignature(float AxisValue);// 0x54d2d0e64001
	void InputTouch Axis LookUp__DelegateSignature(float AxisValue);// 0x54d1d0e64001
	void InputTouch Axis MoveRight__DelegateSignature(float AxisValue);// 0x54d0d0e64001
	void InputTouch Axis MoveForward__DelegateSignature(float AxisValue, float JoystickAngle, float JoystickMoveLength);// 0xffffffffe0919ec0
	void OnAxis_MoveVirtualJoystick__DelegateSignature();// 0x54cdd0e64001

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x216fd0be4041

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10]
	float MinValue;//[Offset: 0x11c, Size: 0x4]
	float MaxValue;//[Offset: 0x120, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x128, Size: 0x340]
	byte Orientation;//[Offset: 0x468, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x46c, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x47c, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 0x1]
	float StepSize;//[Offset: 0x490, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x498, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x4a8, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x4b8, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x4c8, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x4d8, Size: 0x10]
	void SetValue(float InValue);// 0x224fd0be4041
	void SetStepSize(float InValue);// 0x224ed0be4041
	void SetSliderHandleColor(LinearColor InValue);// 0x224dd0be4041
	void SetSliderBarColor(LinearColor InValue);// 0x224cd0be4041
	void SetMinValue(float InValue);// 0x224bd0be4041
	void SetMaxValue(float InValue);// 0x224ad0be4041
	void SetLocked(bool InValue);// 0x2249d0be4041
	void SetIndentHandle(bool InValue);// 0x2248d0be4041
	float GetValue();// 0x2247d0be4041
	float GetNormalizedValue();// 0x2246d0be4041

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 0x88]
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 0x88]
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 0x88]
	float BarThickness;//[Offset: 0x338, Size: 0x4]

--------------------------------
Class: Widget_TouchDragArea_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image;//[Offset: 0x268, Size: 0x8]
	delegate AxisLookUp;//[Offset: 0x270, Size: 0x10]
	delegate AxisTurn;//[Offset: 0x280, Size: 0x10]
	Vector2D PressedPosition;//[Offset: 0x290, Size: 0x8]
	Vector2D PrevMovedPosition;//[Offset: 0x298, Size: 0x8]
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x592bd0e64001
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x592ad0e64001
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0x5929d0e64001
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x5928d0e64001
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0x5927d0e64001
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0x5926d0e64001
	void Construct();// 0x5925d0e64001
	void ExecuteUbergraph_Widget_TouchDragArea(int EntryPoint, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0x5924d0e64001
	void AxisTurn__DelegateSignature(float Axis);// 0xffffffffc73e1440
	void AxisLookUp__DelegateSignature(float Axis);// 0xffffffffc73e2da0

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x469, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x46a, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x470, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x478, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	float RedrawTime;//[Offset: 0x484, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x490, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x49c, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x4a6, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a7, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x4a8, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x4b0, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x4c0, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x4d0, Size: 0x4]
	enum BlendMode;//[Offset: 0x4d4, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x4d8, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x4e0, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x4e8, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x4f0, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x4f8, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x500, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x508, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x510, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x518, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x524, Size: 0x8]
	int LayerZOrder;//[Offset: 0x52c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x530, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x534, Size: 0x4]
	enum TickMode;//[Offset: 0x538, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x560, Size: 0x8]
	void SetWindowVisibility(enum InVisibility);// 0x230cd0be4041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x230bd0be4041
	void SetWidgetSpace(enum NewSpace);// 0x230ad0be4041
	void SetWidget(UserWidget* Widget);// 0x2309d0be4041
	void SetTwoSided(const bool bWantTwoSided);// 0x2308d0be4041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x2307d0be4041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x2306d0be4041
	void SetTickMode(enum InTickMode);// 0x2305d0be4041
	void SetRedrawTime(float InRedrawTime);// 0x2304d0be4041
	void SetPivot(out const Vector2D InPivot);// 0x2303d0be4041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x2302d0be4041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x2301d0be4041
	void SetGeometryMode(enum InGeometryMode);// 0x2342d0be4041
	void SetDrawSize(Vector2D Size);// 0x22ffd0be4041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x22fed0be4041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x22fdd0be4041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x22fcd0be4041
	void RequestRenderUpdate();// 0x22fbd0be4041
	void RequestRedraw();// 0x22fad0be4041
	bool IsWidgetVisible();// 0x22f9d0be4041
	enum GetWindowVisiblility();// 0x22f8d0be4041
	bool GetWindowFocusable();// 0x22f7d0be4041
	enum GetWidgetSpace();// 0x22f6d0be4041
	UserWidget* GetWidget();// 0x22f5d0be4041
	UserWidget* GetUserWidgetObject();// 0x22f4d0be4041
	bool GetTwoSided();// 0x22f3d0be4041
	bool GetTickWhenOffscreen();// 0x22f2d0be4041
	TextureRenderTarget2D* GetRenderTarget();// 0x22f1d0be4041
	float GetRedrawTime();// 0x22f0d0be4041
	Vector2D GetPivot();// 0x22efd0be4041
	LocalPlayer* GetOwnerPlayer();// 0x22eed0be4041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x22edd0be4041
	bool GetManuallyRedraw();// 0x22ecd0be4041
	enum GetGeometryMode();// 0x22ebd0be4041
	Vector2D GetDrawSize();// 0x22ead0be4041
	bool GetDrawAtDesiredSize();// 0x22e9d0be4041
	float GetCylinderArcAngle();// 0x22e8d0be4041
	Vector2D GetCurrentDrawSize();// 0x22e7d0be4041

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x119, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x11c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x580]
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b0, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6b8, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c0, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6c8, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d0, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6d8, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e0, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6e8, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f0, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6f8, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x700, Size: 0x1]
	Margin Padding;//[Offset: 0x704, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x718, Size: 0x28]
	byte ClickMethod;//[Offset: 0x740, Size: 0x1]
	byte TouchMethod;//[Offset: 0x741, Size: 0x1]
	byte PressMethod;//[Offset: 0x742, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x743, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x748, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x2189d0be4041
	void SetPressMethod(byte InPressMethod);// 0x2188d0be4041
	void SetIsChecked(bool InIsChecked);// 0x2187d0be4041
	void SetClickMethod(byte InClickMethod);// 0x2186d0be4041
	void SetCheckedState(enum InCheckedState);// 0x2185d0be4041
	bool IsPressed();// 0x2184d0be4041
	bool IsChecked();// 0x2183d0be4041
	enum GetCheckedState();// 0x2182d0be4041

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88]
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88]
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88]
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88]
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88]
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88]
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88]
	Margin Padding;//[Offset: 0x4d8, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18]

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x108, Size: 0x10]
	FString SelectedOption;//[Offset: 0x118, Size: 0x10]
	ComboBoxStyle WidgetStyle;//[Offset: 0x128, Size: 0x3f0]
	TableRowStyle ItemStyle;//[Offset: 0x518, Size: 0x7c8]
	Margin ContentPadding;//[Offset: 0xce0, Size: 0x10]
	float MaxListHeight;//[Offset: 0xcf0, Size: 0x4]
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1]
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0xcf8, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0xd50, Size: 0x28]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 0x1]
	delegate OnGenerateWidgetEvent;//[Offset: 0xd7c, Size: 0x10]
	delegate OnSelectionChanged;//[Offset: 0xd90, Size: 0x10]
	delegate OnOpening;//[Offset: 0xda0, Size: 0x10]
	void SetSelectedOption(FString Option);// 0xf08d0be4041
	void SetSelectedIndex(const int Index);// 0xf07d0be4041
	bool RemoveOption(FString Option);// 0xf06d0be4041
	void RefreshOptions();// 0xf05d0be4041
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0xf04d0be4041
	void OnOpeningEvent__DelegateSignature();// 0xf03d0be4041
	bool IsOpen();// 0xf02d0be4041
	FString GetSelectedOption();// 0xf01d0be4041
	int GetSelectedIndex();// 0xf00d0be4041
	int GetOptionCount();// 0xeffd0be4041
	FString GetOptionAtIndex(int Index);// 0xefed0be4041
	int FindOptionIndex(FString Option);// 0xefdd0be4041
	void ClearSelection();// 0xf4ed0be4041
	void ClearOptions();// 0xefbd0be4041
	void AddOption(FString Option);// 0xefad0be4041

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3b8]
	SlateSound PressedSlateSound;//[Offset: 0x3c0, Size: 0x18]
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3d8, Size: 0x18]

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278]
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88]
	Vector2D ShadowOffset;//[Offset: 0x308, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x310, Size: 0x10]
	SlateBrush MenuBorderBrush;//[Offset: 0x320, Size: 0x88]
	Margin MenuBorderPadding;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88]
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88]
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88]
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88]
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88]
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28]
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28]
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88]
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88]
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88]
	SlateBrush ActiveHighlightedBrush;//[Offset: 0x6b8, Size: 0x88]
	SlateBrush InactiveHighlightedBrush;//[Offset: 0x740, Size: 0x88]

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x7f8]
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 0x8]
	FText HintText;//[Offset: 0x930, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x948, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x958, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0x9b0, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x9c0, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9d0, Size: 0x10]
	bool isReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x9e4, Size: 0x4]
	Margin Padding;//[Offset: 0x9e8, Size: 0x10]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fb, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1]
	byte KeyboardType;//[Offset: 0x9fe, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ff, Size: 0x1]
	enum VirtualKeyboardTrigger;//[Offset: 0xa00, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xa01, Size: 0x1]
	byte Justification;//[Offset: 0xa02, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xa03, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0xa08, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0xa18, Size: 0x10]
	void SetText(FText InText);// 0xf27d0be4041
	void SetJustification(byte InJustification);// 0xf26d0be4041
	void SetIsReadOnly(bool bReadOnly);// 0xf25d0be4041
	void SetIsPassword(bool bIsPassword);// 0xf24d0be4041
	void SetHintText(FText InText);// 0xf23d0be4041
	void SetError(FText InError);// 0xf22d0be4041
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0xf21d0be4041
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0xf20d0be4041
	bool HasError();// 0xf1fd0be4041
	FText GetText();// 0xf1ed0be4041
	void ClearError();// 0xf19d0be4041

--------------------------------
Class: ChatText_C.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock;//[Offset: 0x260, Size: 0x8]
	FText Text;//[Offset: 0x268, Size: 0x18]
	FText GetText();// 0xffffffffc31f3c80

--------------------------------
Class: ShowVoiceChatOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	FText Name;//[Offset: 0x278, Size: 0x18]
	bool IsCT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	SlateColor GetColorAndOpacity(SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x6ff88d0c34004
	FText GetText();// 0x5366d0e64001
	void Construct();// 0xffffffffc31f0e20
	void ExecuteUbergraph_ShowVoiceChatOne(int EntryPoint);// 0xffffffffc31f39e0

--------------------------------
Class: LeaderBoard_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x288, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x290, Size: 0x8]
	FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x595fd0e64001
	FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x595ed0e64001
	static void SortActorArray(out CSGOPlayerState_C*[] Array, out CSGOPlayerState_C*[] Sortarray1, CSGOPlayerState_C*[] Sortarray, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, CSGOPlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, CSGOPlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x595dd0e64001
	static FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x595cd0e64001
	void Construct();// 0x595bd0e64001
	void Refresh();// 0x595ad0e64001
	void BndEvt__Button_96_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x7d01d2e011264000
	void ExecuteUbergraph_LeaderBoard(int EntryPoint, FText CallFunc_MakeLiteralText_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, CSGOPlayerState_C*[] CallFunc_GetAllActorsOfClass_OutActors, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOPlayerState_C*[] CallFunc_SortActorArray_Sortarray1, LeaderBoardOne_C* CallFunc_Create_ReturnValue, CSGOPlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_TextText_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue);// 0xffffffffc0d55ac0

--------------------------------
Class: LeaderBoardOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x288, Size: 0x8]
	CSGOPlayerState_C* PlayerState;//[Offset: 0x290, Size: 0x8]
	FText GetText(FText CallFunc_Conv_ByteToText_ReturnValue);// 0x56f2d0e64001
	void GetbIsEnabled();// 0x56f1d0e64001
	FText GetText(bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x56f0d0e64001
	FText GetText(bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x56efd0e64001
	FText GetText(bool CallFunc_IsValid_ReturnValue);// 0x56eed0e64001
	void Construct();// 0x56edd0e64001
	void BndEvt__Button_57_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc0cec040
	void ExecuteUbergraph_LeaderBoardOne(int EntryPoint, bool CallFunc_VoiceChatLocalIsMutedSomeone_ReturnValue, bool CallFunc_VoiceChatLocalIsMutedSomeone_ReturnValue);// 0xffffffffc0ceb080

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x228]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 0x4d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 0x8]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 0x8]
	byte Orientation;//[Offset: 0x828, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 0x8]
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 0x1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 0x1]
	enum NavigationDestination;//[Offset: 0x848, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 0x4]
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 0x1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 0x1]
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 0x4]
	delegate OnUserScrolled;//[Offset: 0x858, Size: 0x10]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x221fd0be4041
	void SetScrollWhenFocusChanges(enum NewScrollWhenFocusChanges);// 0x2260d0be4041
	void SetScrollOffset(float NewScrollOffset);// 0x221dd0be4041
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x221cd0be4041
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x221bd0be4041
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x221ad0be4041
	void SetOrientation(byte NewOrientation);// 0x2219d0be4041
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x2218d0be4041
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x2217d0be4041
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x2216d0be4041
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x2215d0be4041
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x2214d0be4041
	void ScrollToStart();// 0x2213d0be4041
	void ScrollToEnd();// 0x2212d0be4041
	float GetViewOffsetFraction();// 0x2211d0be4041
	float GetScrollOffsetOfEnd();// 0x2210d0be4041
	float GetScrollOffset();// 0x220fd0be4041
	void EndInertialScrolling();// 0x220ed0be4041

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88]

--------------------------------
Class: CueUI_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	FText Text;//[Offset: 0x278, Size: 0x18]
	FText GetText();// 0x55aed0e64001
	void BndEvt__Button_31_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xffffffffc14e1360
	void ExecuteUbergraph_CueUI(int EntryPoint);// 0xffffffffc14e0020

--------------------------------
Class: MainUIWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Border* Border_Cue;//[Offset: 0x268, Size: 0x8]
	Border* Border_ServerList;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button;//[Offset: 0x288, Size: 0x8]
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Button* Button;//[Offset: 0x298, Size: 0x8]
	Button* Button;//[Offset: 0x2a0, Size: 0x8]
	Button* Button;//[Offset: 0x2a8, Size: 0x8]
	Button* Button;//[Offset: 0x2b0, Size: 0x8]
	Button* Button;//[Offset: 0x2b8, Size: 0x8]
	Button* Button;//[Offset: 0x2c0, Size: 0x8]
	Button* Button_Ban;//[Offset: 0x2c8, Size: 0x8]
	Button* Button_Notify;//[Offset: 0x2d0, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x2d8, Size: 0x8]
	Image* Image;//[Offset: 0x2e0, Size: 0x8]
	Image* Image;//[Offset: 0x2e8, Size: 0x8]
	Image* Image;//[Offset: 0x2f0, Size: 0x8]
	Image* Image;//[Offset: 0x2f8, Size: 0x8]
	Image* Image;//[Offset: 0x300, Size: 0x8]
	Image* Image;//[Offset: 0x308, Size: 0x8]
	Image* Image;//[Offset: 0x310, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x318, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x320, Size: 0x8]
	VerticalBox* VerticalBox_ServerList;//[Offset: 0x328, Size: 0x8]
	FText ServerIP;//[Offset: 0x330, Size: 0x18]
	FText StartGameText;//[Offset: 0x348, Size: 0x18]
	FText CueText;//[Offset: 0x360, Size: 0x18]
	bool CanUsePlayButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	ServerInformation[] Server Information;//[Offset: 0x380, Size: 0x10]
	NewChangeSkinWidget_C* SkinWidgetNew;//[Offset: 0x390, Size: 0x8]
	FText GetText(GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x7d01d2e1d1264000
	enum GetVisibility(GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsProAdminKey_IsAdmin);// 0x69d5d0e64001
	enum GetVisibility(GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsProAdminKey_IsAdmin);// 0x69c4d0e64001
	bool GetbIsEnabled();// 0xffffffffc85653c0
	FText GetText();// 0x6a30d0e64001
	void GetText();// 0x54ebd0e64001
	void GetText();// 0x5521d0e64001
	void CheckIsVip(out bool IsVip1, bool IsVip, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ServerKey CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x5520d0e64001
	void Construct();// 0x551fd0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x551ed0e64001
	void BndEvt__Button_83_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x551dd0e64001
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x551cd0e64001
	void BndEvt__Button_76_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x551bd0e64001
	void BndEvt__Button_9_K2Node_ComponentBoundEvent_13_OnButtonPressedEvent__DelegateSignature();// 0x551ad0e64001
	void RefreshServer();// 0x5519d0e64001
	void RequestRefreshServer();// 0x5518d0e64001
	void BndEvt__Button_196_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature();// 0x5517d0e64001
	void ShowCue(FText CueText);// 0x5516d0e64001
	void BndEvt__Button_117_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x5515d0e64001
	void BndEvt__Button_49_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x5514d0e64001
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x5513d0e64001
	void BndEvt__MainUIWidget_EditableTextBox_143_K2Node_ComponentBoundEvent_7_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x5512d0e64001
	void BndEvt__MainUIWidget_Button_3_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x5511d0e64001
	void BndEvt__MainUIWidget_Button_4_K2Node_ComponentBoundEvent_9_OnButtonPressedEvent__DelegateSignature();// 0x7d01d2e1d1264000
	void BndEvt__MainUIWidget_Button_226_K2Node_ComponentBoundEvent_10_OnButtonPressedEvent__DelegateSignature();// 0x550fd0e64001
	void ExecuteUbergraph_MainUIWidget(int EntryPoint, CDKWidget_C* CallFunc_Create_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, SettingWidget_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, InGameSettingWidget_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, NewChangeSkinWidget_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, ServerInformation CallFunc_Array_Get_Item, ServerOne_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FText K2Node_CustomEvent_CueText, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, IDWidget_C* CallFunc_Create_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, FString CallFunc_Conv_TextToString_ReturnValue, ServerInformation CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, ServerOne_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, ServerInformation CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc14de5e0

--------------------------------
Class: CDKWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x278, Size: 0x8]
	TextBlock* TextBlock_error;//[Offset: 0x280, Size: 0x8]
	void BndEvt__CDKWidget_Button_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc14d9d40
	void BndEvt__CDKWidget_Button_82_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x54a4d0e64001
	void ExecuteUbergraph_CDKWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0xffffffffc14da360

--------------------------------
Class: SettingWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x278, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x280, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x288, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x290, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x298, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x2a0, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x2a8, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x2b0, Size: 0x8]
	Slider* Slider;//[Offset: 0x2b8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2c0, Size: 0x8]
	float Render;//[Offset: 0x2c8, Size: 0x4]
	FText GetText(float CallFunc_Multiply_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x53edd0e64001
	float GetValue();// 0x53ecd0e64001
	Widget* On Generate Widget 0(FString Item);// 0x53ebd0e64001
	void Construct();// 0x53ead0e64001
	void BndEvt__ComboBoxString_178_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e9d0e64001
	void BndEvt__ComboBoxString_K2Node_ComponentBoundEvent_1_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e8d0e64001
	void BndEvt__Button_246_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x53e7d0e64001
	void BndEvt__Slider_183_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x53e6d0e64001
	void BndEvt__ComboBoxString_1_K2Node_ComponentBoundEvent_4_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e5d0e64001
	void BndEvt__ComboBoxString_2_K2Node_ComponentBoundEvent_5_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e4d0e64001
	void BndEvt__ComboBoxString_3_K2Node_ComponentBoundEvent_6_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e3d0e64001
	void BndEvt__ComboBoxString_4_K2Node_ComponentBoundEvent_7_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e2d0e64001
	void BndEvt__ComboBoxString_5_K2Node_ComponentBoundEvent_8_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e1d0e64001
	void BndEvt__ComboBoxString_6_K2Node_ComponentBoundEvent_9_OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x53e0d0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0xffffffffc14d77a0
	void ExecuteUbergraph_SettingWidget(int EntryPoint, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadingQuality_ReturnValue, int CallFunc_GetFoliageQuality_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, int CallFunc_GetTextureQuality_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, float CallFunc_GetResolutionScaleNormalized_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float K2Node_ComponentBoundEvent_Value, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString K2Node_ComponentBoundEvent_SelectedItem, byte K2Node_ComponentBoundEvent_SelectionType, bool K2Node_SwitchString_CmpSuccess, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue);// 0xffffffffc14e2860

--------------------------------
Class: NewChangeSkinWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button;//[Offset: 0x288, Size: 0x8]
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Button* Button;//[Offset: 0x298, Size: 0x8]
	Button* Button;//[Offset: 0x2a0, Size: 0x8]
	Button* Button;//[Offset: 0x2a8, Size: 0x8]
	Button* Button;//[Offset: 0x2b0, Size: 0x8]
	Button* Button;//[Offset: 0x2b8, Size: 0x8]
	Button* Button;//[Offset: 0x2c0, Size: 0x8]
	Button* Button;//[Offset: 0x2c8, Size: 0x8]
	Button* Button;//[Offset: 0x2d0, Size: 0x8]
	Button* Button;//[Offset: 0x2d8, Size: 0x8]
	Button* Button;//[Offset: 0x2e0, Size: 0x8]
	Button* Button;//[Offset: 0x2e8, Size: 0x8]
	Button* Button;//[Offset: 0x2f0, Size: 0x8]
	Button* Button;//[Offset: 0x2f8, Size: 0x8]
	ScrollBox* ScrollBox_SkinList;//[Offset: 0x300, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x308, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x310, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x318, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x320, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x328, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x330, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x338, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x340, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x348, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x350, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x358, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x360, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x368, Size: 0x8]
	SkinButtonOne_C* SkinButtonOne;//[Offset: 0x370, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x378, Size: 0x8]
	Skin[] ShowingSkin;//[Offset: 0x380, Size: 0x10]
	ShowSkinMesh_C* CurrentSkinMesh;//[Offset: 0x390, Size: 0x8]
	static FText GetText(GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x69bdd0e64001
	void ChangeShowSkin(class WeaponBase_C Weapon, int ElementIndex, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SkinHaveSaveGame_C* CallFunc_SkinSaveGame_SkinSaveGame, int CallFunc_Array_Length_ReturnValue, Skin CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue);// 0x6a31d0e64001
	void SetShowSkinMat(MaterialInterface* Material, int ElementIndex, bool CallFunc_IsValid_ReturnValue);// 0x5440d0e64001
	void SkinSaveGame(out SkinHaveSaveGame_C* SkinSaveGame, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess);// 0x5470d0e64001
	void Construct();// 0x546fd0e64001
	void RefreshSkin(class WeaponBase_C GunClass, class ShowSkinMesh_C ShowSkinClass);// 0x546ed0e64001
	void BndEvt__NewChangeSkinWidget_Button_205_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x546dd0e64001
	void BndEvt__NewChangeSkinWidget_Button_114_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x546cd0e64001
	void BndEvt__NewChangeSkinWidget_Button_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x546bd0e64001
	void BndEvt__NewChangeSkinWidget_Button_1_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x546ad0e64001
	void BndEvt__NewChangeSkinWidget_Button_2_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x5469d0e64001
	void BndEvt__NewChangeSkinWidget_Button_3_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x5468d0e64001
	void BndEvt__NewChangeSkinWidget_Button_4_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x5467d0e64001
	void BndEvt__NewChangeSkinWidget_Button_5_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x5466d0e64001
	void BndEvt__NewChangeSkinWidget_Button_6_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x5465d0e64001
	void BndEvt__NewChangeSkinWidget_Button_7_K2Node_ComponentBoundEvent_9_OnButtonPressedEvent__DelegateSignature();// 0x5464d0e64001
	void BndEvt__NewChangeSkinWidget_Button_8_K2Node_ComponentBoundEvent_10_OnButtonPressedEvent__DelegateSignature();// 0x5463d0e64001
	void BndEvt__NewChangeSkinWidget_Button_9_K2Node_ComponentBoundEvent_11_OnButtonPressedEvent__DelegateSignature();// 0x5462d0e64001
	void BndEvt__NewChangeSkinWidget_Button_10_K2Node_ComponentBoundEvent_12_OnButtonPressedEvent__DelegateSignature();// 0x5461d0e64001
	void BndEvt__NewChangeSkinWidget_Button_11_K2Node_ComponentBoundEvent_13_OnButtonPressedEvent__DelegateSignature();// 0x545dd0e64001
	void BndEvt__NewChangeSkinWidget_Button_12_K2Node_ComponentBoundEvent_14_OnButtonPressedEvent__DelegateSignature();// 0x545fd0e64001
	void BndEvt__NewChangeSkinWidget_Button_13_K2Node_ComponentBoundEvent_15_OnButtonPressedEvent__DelegateSignature();// 0x545ed0e64001
	void BndEvt__NewChangeSkinWidget_Button_14_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature();// 0x69bbd0e64001
	void BndEvt__NewChangeSkinWidget_Button_15_K2Node_ComponentBoundEvent_17_OnButtonPressedEvent__DelegateSignature();// 0x5460d0e64001
	void BndEvt__NewChangeSkinWidget_Button_16_K2Node_ComponentBoundEvent_18_OnButtonPressedEvent__DelegateSignature();// 0x545bd0e64001
	static void ExecuteUbergraph_NewChangeSkinWidget(int EntryPoint, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SkinButtonOne_C* CallFunc_Create_ReturnValue, class WeaponBase_C K2Node_CustomEvent_GunClass, class ShowSkinMesh_C K2Node_CustomEvent_ShowSkinClass, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, Skin CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, int CallFunc_Array_Add_ReturnValue, Skin CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetActorOfClass_ReturnValue, ShowSkinMesh_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, ShowSkinMesh_C* CallFunc_FinishSpawningActor_ReturnValue, CameraActor*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, CameraActor* CallFunc_Array_Get_Item);// 0xffffffffc14d4f60

--------------------------------
Class: ShowSkinMesh_C.Actor.Object
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x220, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: SkinButtonOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	Skin Skin;//[Offset: 0x278, Size: 0x20]
	static void ChangeSkin(out Skin[] Array, out Skin Array Element, out bool success, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Skin CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue);// 0x53c2d0e64001
	void Construct();// 0xffffffffc14d53c0
	void BndEvt__SkinButtonOne_Button_35_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x53c0d0e64001
	static void ExecuteUbergraph_SkinButtonOne(int EntryPoint, SlateColor K2Node_MakeStruct_SlateColor, SlateBrush K2Node_MakeStruct_SlateBrush, ShowSkinMesh_C* CallFunc_GetActorOfClass_ReturnValue, ShowSkinMesh_CZ75_C* K2Node_DynamicCast_AsShow_Skin_Mesh_CZ75, bool K2Node_DynamicCast_bSuccess, ShowSkinMesh_Galil_C* K2Node_DynamicCast_AsShow_Skin_Mesh_Galil, bool K2Node_DynamicCast_bSuccess, ShowSkinMesh_M9_C* K2Node_DynamicCast_AsShow_Skin_Mesh_M9, bool K2Node_DynamicCast_bSuccess, ShowSkinMesh_Butterfly_C* K2Node_DynamicCast_AsShow_Skin_Mesh_Butterfly, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, Skin CallFunc_ChangeSkin_Array_Element, bool CallFunc_ChangeSkin_Success);// 0x53b2d0e64001

--------------------------------
Class: ShowSkinMesh_CZ75_C.ShowSkinMesh_C.Actor.Object

--------------------------------
Class: ShowSkinMesh_Galil_C.ShowSkinMesh_C.Actor.Object

--------------------------------
Class: ShowSkinMesh_M9_C.ShowSkinMesh_C.Actor.Object

--------------------------------
Class: ShowSkinMesh_Butterfly_C.ShowSkinMesh_C.Actor.Object

--------------------------------
Class: ServerOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x288, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x290, Size: 0x8]
	FString Map;//[Offset: 0x298, Size: 0x10]
	FString Name;//[Offset: 0x2a8, Size: 0x10]
	FString Player;//[Offset: 0x2b8, Size: 0x10]
	FString VIP;//[Offset: 0x2c8, Size: 0x10]
	FString IP;//[Offset: 0x2d8, Size: 0x10]
	MainUIWidget_C* ParentMainWidget;//[Offset: 0x2e8, Size: 0x8]
	int CPeople;//[Offset: 0x2f0, Size: 0x4]
	int Mpeople;//[Offset: 0x2f4, Size: 0x4]
	FString Password;//[Offset: 0x2f8, Size: 0x10]
	static FText GetText(FText CallFunc_Conv_StringToText_ReturnValue);// 0x5444d0e64001
	static FText GetText(FText CallFunc_Conv_StringToText_ReturnValue);// 0xffffffffc14d99c0
	static FText GetText(FText CallFunc_Conv_StringToText_ReturnValue);// 0x5442d0e64001
	static FText GetText(FText CallFunc_Conv_StringToText_ReturnValue);// 0x5441d0e64001
	SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, bool K2Node_SwitchString_CmpSuccess);// 0x68a9d0e64001
	void BndEvt__Button_72_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x543fd0e64001
	void ExecuteUbergraph_ServerOne(int EntryPoint, IronSourceProxy* CallFunc_GetIronSourceInstance_ReturnValue, EnterPasswordWidget_C* CallFunc_Create_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsNormalAdmin_IsAdmin);// 0xffffffffc14d6380

--------------------------------
Class: EnterPasswordWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x278, Size: 0x8]
	FString IP;//[Offset: 0x280, Size: 0x10]
	FString Password;//[Offset: 0x290, Size: 0x10]
	void BndEvt__EnterPasswordWidget_Button_53_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x729ad0e64008
	void BndEvt__EnterPasswordWidget_Button_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc14d76c0
	static void ExecuteUbergraph_EnterPasswordWidget(int EntryPoint, FText CallFunc_GetText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xffffffffc14d46a0

--------------------------------
Class: IDWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock_error;//[Offset: 0x278, Size: 0x8]
	Timespan NewVar;//[Offset: 0x280, Size: 0x8]
	void BndEvt__IDWidget_Button_82_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x548ed0e64001
	static void ExecuteUbergraph_IDWidget(int EntryPoint, DateTime CallFunc_Today_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, int CallFunc_Len_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, DateTime CallFunc_MakeDateTime_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, int CallFunc_BreakTimespan_Days, int CallFunc_BreakTimespan_Hours, int CallFunc_BreakTimespan_Minutes, int CallFunc_BreakTimespan_Seconds, int CallFunc_BreakTimespan_Milliseconds, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess);// 0x5487d0e64001

--------------------------------
Class: DateTime

--------------------------------
Class: Timespan

--------------------------------
Class: ServerCenterGamemode_C.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8]
	ServerInformation[] ServerInformation;//[Offset: 0x318, Size: 0x10]
	BanPlayerList[] BanPlayerList;//[Offset: 0x328, Size: 0x10]
	DataTable* AdjustbanTable;//[Offset: 0x338, Size: 0x8]
	FText[] Notify;//[Offset: 0x340, Size: 0x10]
	FString serverID;//[Offset: 0x350, Size: 0x10]
	VIPKeyPair[] VIPKeyPairs;//[Offset: 0x360, Size: 0x10]
	FString[] BanDevcieList;//[Offset: 0x370, Size: 0x10]
	FString[] BanVIPList;//[Offset: 0x380, Size: 0x10]
	FString AdminKey;//[Offset: 0x390, Size: 0x10]
	void AdminCheck(FString ServerKey, out bool IsAdmin, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x56d9d0e64001
	void IsBannedPlayerVIP(FString DeviceID, out FString Key, out bool Yes, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, VIPKeyPair CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x5658d0e64001
	void CheckIfhasBanned(AdjustBan Adjust, out bool Isban1, bool IsBan, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x5657d0e64001
	void CloseServer(out FString[] Server, FString CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const ServerInformation Temp_struct_Variable, ServerInformation CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x5656d0e64001
	void UpdateServerInformation(out FString[] String, bool IsFind, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, ServerInformation K2Node_MakeStruct_ServerInformation, ServerInformation K2Node_MakeStruct_ServerInformation, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ServerInformation CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x5655d0e64001
	void ReceiveBeginPlay();// 0x5654d0e64001
	void K2_PostLogin(PlayerController* NewPlayer);// 0x5653d0e64001
	void LoadBanPlayerList();// 0x5652d0e64001
	void SaveBanPlayerList();// 0x5651d0e64001
	void BanPlayer(FString DeviceID, FString ServerKey);// 0x5650d0e64001
	void CheckIsBannedPlayer(PlayerController* Controller);// 0x564fd0e64001
	void LoadTableToAdjustBan();// 0x564ed0e64001
	void ShowAllBannedPlayer();// 0x564dd0e64001
	void ClearAllServerList();// 0x564cd0e64001
	void EventReceiveMessageNew(FString sessionID, FString Message, out const byte[] byteArray, FString serverID);// 0x564bd0e64001
	void Unban(FString DeviceID, FString ServerKey);// 0x564ad0e64001
	void CreateMainUI(CSGOController_C* Target);// 0xffffffffc0ce75e0
	void InitServer();// 0x5648d0e64001
	static void ExecuteUbergraph_ServerCenterGamemode(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* K2Node_Event_NewPlayer, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_DeviceID, FString K2Node_CustomEvent_ServerKey, PlayerController* K2Node_CustomEvent_Controller, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, BanPlayerList CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_RootDir_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_LoadFileToString_Content, bool CallFunc_LoadFileToString_ReturnValue, DataTable* CallFunc_ReadCsvToDataTable_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, SocketServerBPLibrary* CallFunc_getSocketServerTarget_ReturnValue, SocketServerBPLibrary* CallFunc_getSocketServerTarget_ReturnValue, FString CallFunc_startTCPServer_serverID, FString K2Node_CustomEvent_sessionID, FString K2Node_CustomEvent_message, const byte[] K2Node_CustomEvent_byteArray, FString K2Node_CustomEvent_serverID, FString K2Node_CustomEvent_DeviceID, FString K2Node_CustomEvent_ServerKey, FString[] CallFunc_ParseIntoArray_ReturnValue, CSGOController_C* K2Node_CustomEvent_Target, FString CallFunc_Array_Get_Item, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, AdjustBan CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_CheckIfhasBanned_Isban1, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue);// 0xffffffffc0cf2780

--------------------------------
Class: VIPKeyPair
	FString DeviceID_4_FA4E7CB647493FD4D9DE819A1B921BD6;//[Offset: 0x0, Size: 0x10]
	FString vipKey_5_5AB437A843AEC4FC3B088297FC8260BB;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AdjustBan
	FString Do_6_9EB22F20413A4B80A41BDF811BA4DF12;//[Offset: 0x0, Size: 0x10]
	FString DeviceID_7_D3D6B35E49776FA930C44FAC82510DCF;//[Offset: 0x10, Size: 0x10]
	FString Serverkey_8_6EB3B822417ED7E25CD06688E23693C8;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: SocketServerBPLibrary.Object
	delegate onsocketServerConnectionEventDelegate;//[Offset: 0x28, Size: 0x10]
	delegate onserverReceiveTCPMessageEventDelegate;//[Offset: 0x38, Size: 0x10]
	delegate onsocketServerUDPConnectionEventDelegate;//[Offset: 0x48, Size: 0x10]
	delegate onserverReceiveUDPMessageEventDelegate;//[Offset: 0x58, Size: 0x10]
	delegate onfileTransferOverTCPProgressEventDelegate;//[Offset: 0x68, Size: 0x10]
	delegate onfileTransferOverTCPInfoEventDelegate;//[Offset: 0x78, Size: 0x10]
	delegate onreadBytesFromFileInPartsEventDelegate;//[Offset: 0x88, Size: 0x10]
	void unregisterClientEvent(FString sessionID);// 0xbddd0be4041
	void stopUDPServer(FString optionalServerID);// 0xa38d0be4041
	void stopTCPServer(FString optionalServerID);// 0xa37d0be4041
	void stopAllUDPServers();// 0xa36d0be4041
	void stopAllTCPServers();// 0xa35d0be4041
	void startUDPServer(out FString serverID, FString IP, int Port, bool multicast, enum receiveFilter, FString customServerID, int maxPacketSize);// 0xa33d0be4041
	void startTCPServer(out FString serverID, FString IP, int Port, enum receiveFilter, FString customServerID);// 0xa32d0be4041
	void startTCPFileServer(out FString serverID, FString IP, int Port, FString customServerID, FString Aes256bitKey, bool resumeFiles);// 0xa31d0be4041
	void socketServerUDPConnectionEventDelegate__DelegateSignature(bool success, FString Message, FString serverID);// 0xa30d0be4041
	void socketServerUDPConnectionEventDelegate(const bool success, const FString Message, const FString serverID);// 0xa2fd0be4041
	void socketServerSendUDPMessageToClient(FString clientSessionID, FString Message, byte[] byteArray, bool addLineBreak, bool asynchronous, enum socketType, FString optionalServerID);// 0xa2ed0be4041
	void socketServerSendUDPMessageTo(FString IP, int Port, FString Message, byte[] byteArray, bool addLineBreak, bool asynchronous, FString optionalServerID);// 0xa2cd0be4041
	void socketServerSendUDPMessage(FString[] clientSessionIDs, FString Message, byte[] byteArray, bool addLineBreak, bool asynchronous, enum socketType, FString optionalServerID);// 0xa2bd0be4041
	void socketServerSendTCPMessageToClient(FString clientSessionID, FString Message, byte[] byteArray, bool addLineBreak, FString optionalServerID);// 0xa2ad0be4041
	void socketServerSendTCPMessage(FString[] clientSessionIDs, FString Message, byte[] byteArray, bool addLineBreak, FString optionalServerID);// 0xa29d0be4041
	void socketServerConnectionEventDelegate__DelegateSignature(enum Type, bool success, FString Message, FString sessionID, FString serverID);// 0xa27d0be4041
	void socketServerConnectionEventDelegate(const enum Type, const bool success, const FString Message, const FString sessionID, const FString serverID);// 0xa26d0be4041
	void serverReceiveUDPMessageEventDelegate__DelegateSignature(FString sessionID, FString Message, out const byte[] byteArray, FString serverID);// 0xa25d0be4041
	void serverReceiveUDPMessageEventDelegate(const FString sessionID, const FString Message, out const byte[] byteArray, const FString serverID);// 0xa24d0be4041
	void serverReceiveTCPMessageEventDelegate__DelegateSignature(FString sessionID, FString Message, out const byte[] byteArray, FString serverID);// 0xa23d0be4041
	void serverReceiveTCPMessageEventDelegate(const FString sessionID, const FString Message, out const byte[] byteArray, const FString serverID);// 0xa22d0be4041
	void serverPluginGetSocketSessionInfoByServerID(const FString serverID, const FString sessionID, out bool sessionFound, out FString IP, out int Port, out enum connectionProtocol);// 0xa20d0be4041
	void serverPluginGetSocketSessionInfo(const FString sessionID, out bool sessionFound, out FString IP, out int Port, out enum connectionProtocol, out FString serverID);// 0xa1fd0be4041
	void serverPluginGetSocketSessionIds(const FString optionalServerID, out FString[] sessionIDs);// 0xa1ed0be4041
	DNSClientSocketServer* resolveDomain(FString domain, bool useDNSCache, FString dnsIP);// 0xa1dd0be4041
	void removeSessionAndCloseConnection(FString sessionID, FString optionalServerID);// 0xa1cd0be4041
	void removeFileToken(FString token);// 0xa1bd0be4041
	void registerClientEvent(FString sessionID, out EventBean* Event);// 0xa1ad0be4041
	void readBytesFromFileInPartsEventDelegate__DelegateSignature(int64 fileSize, int64 Position, bool End, out const byte[] byteArray);// 0xa19d0be4041
	void readBytesFromFileInPartsEventDelegate(const int64 fileSize, const int64 Position, const bool End, out const byte[] byteArray);// 0xa18d0be4041
	SocketServerBPLibrary* getSocketServerTarget();// 0xa17d0be4041
	int getRandomPort(enum Type, FString IP);// 0xa16d0be4041
	FString generateUniqueID();// 0xa15d0be4041
	void fileTransferOverTCPProgressEventDelegate__DelegateSignature(FString sessionID, FString FilePath, float percent, float mbit, int64 bytesTransferred, int64 fileSize);// 0xaebd0be4041
	void fileTransferOverTCPProgressEventDelegate(const FString sessionID, const FString FilePath, const float percent, const float mbit, const int64 bytesTransferred, const int64 fileSize);// 0xa13d0be4041
	void fileTransferOverTCPInfoEventDelegate__DelegateSignature(FString Message, FString sessionID, FString FilePath, bool success);// 0xa12d0be4041
	void fileTransferOverTCPInfoEventDelegate(const FString Message, const FString sessionID, const FString FilePath, const bool success);// 0xa11d0be4041
	void deactivateTCPMessageWrappingOnServerPlugin();// 0xa0fd0be4041
	bool checkPort(enum Type, FString IP, int Port);// 0xa0dd0be4041
	void changeSocketPlatform(enum platform);// 0xa0cd0be4041
	void addFileTokens(<FString,FString> fileTokens, bool deleteAfterUse, enum directoryType);// 0xa0ad0be4041
	void addFileToken(FString token, bool deleteTokenAfterUse, enum directoryType, FString filePathOrDirectory);// 0xa09d0be4041
	void activateTCPMessageWrappingOnServerPlugin(FString Header, FString footer);// 0xa08d0be4041

--------------------------------
Class: DNSClientSocketServer.Object
	delegate onresolveDomainEventDelegate;//[Offset: 0x28, Size: 0x10]
	void resolveDomainEventDelegate__DelegateSignature(FString IP);// 0xa05d0be4041
	void resolveDomainEventDelegate(const FString IP);// 0xa02d0be4041

--------------------------------
Class: EventBean.Object
	delegate onregisteredEventDelegate;//[Offset: 0x28, Size: 0x10]
	void registeredEventDelegate__DelegateSignature(const FString Message, out const byte[] byteArray);// 0xa07d0be4041
	void registeredEventDelegate(const FString Message, out const byte[] byteArray);// 0xa06d0be4041

--------------------------------
Class: SideChooseWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	VerticalBox* VerticalBox_ct;//[Offset: 0x288, Size: 0x8]
	VerticalBox* VerticalBox_t;//[Offset: 0x290, Size: 0x8]
	FText[] Tnames;//[Offset: 0x298, Size: 0x10]
	FText[] CTnames;//[Offset: 0x2a8, Size: 0x10]
	bool GetbIsEnabled(int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x731ed0e64001
	bool GetbIsEnabled(int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x6b87d0e64001
	void Construct();// 0x731dd0e64001
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x731cd0e64001
	void BndEvt__Button_153_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x7309d0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc14d9c60
	void BndEvt__Button_491_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x54cbd0e64001
	void ExecuteUbergraph_SideChooseWidget(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FText CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SideChooseOneName_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, FText CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SideChooseOneName_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0x5524d0e64001

--------------------------------
Class: SideChooseOneName_C.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock;//[Offset: 0x260, Size: 0x8]
	FText Name;//[Offset: 0x268, Size: 0x18]
	FText GetText();// 0xffffffffc14d9aa0

--------------------------------
Class: BanPlayerWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x270, Size: 0x8]
	BanPlayerWidgetStructure[] AllPlayerController;//[Offset: 0x278, Size: 0x10]
	void Construct();// 0xffffffffc0ce8a00
	void BndEvt__Button_70_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x567cd0e64001
	void ExecuteUbergraph_BanPlayerWidget(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BanPlayerOne_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, BanPlayerWidgetStructure CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xffffffffc0ce8ae0

--------------------------------
Class: BanPlayerOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8]
	FText PlayerName;//[Offset: 0x280, Size: 0x18]
	FText PlayerUID;//[Offset: 0x298, Size: 0x18]
	FText GetText();// 0x51e0d0e64001
	FText GetText();// 0xffffffffc6712080
	void BndEvt__Button_59_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x51ded0e64001
	void ExecuteUbergraph_BanPlayerOne(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PanelWidget* CallFunc_GetParent_ReturnValue);// 0x51d9d0e64000

--------------------------------
Class: MainUIInformationWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	MultiLineEditableTextBox* MultiLineEditableTextBox;//[Offset: 0x270, Size: 0x8]
	FText Text;//[Offset: 0x278, Size: 0x18]
	FText GetText();// 0x5526d0e64001
	void Construct();// 0x5525d0e64001
	void BndEvt__Button_74_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc14dd1c0
	void ExecuteUbergraph_MainUIInformationWidget(int EntryPoint);// 0xffffffffc14db400

--------------------------------
Class: LoadingScreen_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	CircularThrobber* CircularThrobber;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	Image* Image;//[Offset: 0x278, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8]
	FText Tip;//[Offset: 0x288, Size: 0x18]
	FText[] Tips;//[Offset: 0x2a0, Size: 0x10]
	static SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, FString CallFunc_GetCurrentLevelName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x5553d0e64001
	FText GetText();// 0x5552d0e64001
	static SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, FString CallFunc_GetCurrentLevelName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x5551d0e64001
	void Construct();// 0xffffffffc14e2f60
	void ExecuteUbergraph_LoadingScreen(int EntryPoint, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, FText CallFunc_Array_Get_Item);// 0xffffffffc14e09c0

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4]
	float Period;//[Offset: 0x10c, Size: 0x4]
	float Radius;//[Offset: 0x110, Size: 0x4]
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 0x8]
	SlateBrush Image;//[Offset: 0x120, Size: 0x88]
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	void SetRadius(float InRadius);// 0x218dd0be4041
	void SetPeriod(float InPeriod);// 0x218cd0be4041
	void SetNumberOfPieces(int InNumberOfPieces);// 0x218bd0be4041

--------------------------------
Class: BanUnBanWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Border* Border_BanPlayer;//[Offset: 0x268, Size: 0x8]
	Border* Border_Unban;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button;//[Offset: 0x288, Size: 0x8]
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Button* Button;//[Offset: 0x298, Size: 0x8]
	Button* Button;//[Offset: 0x2a0, Size: 0x8]
	Button* Button;//[Offset: 0x2a8, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x2b0, Size: 0x8]
	EditableTextBox* EditableTextBox_Ban;//[Offset: 0x2b8, Size: 0x8]
	ScrollBox* ScrollBox;//[Offset: 0x2c0, Size: 0x8]
	BanPlayerList[] BanPlayerList;//[Offset: 0x2c8, Size: 0x10]
	FString Filter;//[Offset: 0x2d8, Size: 0x10]
	FString[] BanPlayer;//[Offset: 0x2e8, Size: 0x10]
	FString[] BanKey;//[Offset: 0x2f8, Size: 0x10]
	void RefreshBanPlayer();// 0x5666d0e64001
	void BndEvt__Button_267_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x5665d0e64001
	void BndEvt__Button_174_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x5664d0e64001
	void BndEvt__Button_283_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x5663d0e64001
	void BndEvt__Button_470_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x5662d0e64001
	void BndEvt__Button_117_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x5661d0e64001
	void BndEvt__Button_146_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x6b89d0e64001
	void BndEvt__Button_561_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x565fd0e64001
	void ExecuteUbergraph_BanUnBanWidget(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UnbanPlayerOne_C* CallFunc_Create_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_GetText_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Contains_ReturnValue);// 0x6b8ad0e64001

--------------------------------
Class: UnbanPlayerOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8]
	FString DeviceID;//[Offset: 0x280, Size: 0x10]
	FString ServerKey;//[Offset: 0x290, Size: 0x10]
	static FText GetText(FText CallFunc_Conv_StringToText_ReturnValue);// 0x51f0d0e64001
	static FText GetText(FText CallFunc_Conv_StringToText_ReturnValue);// 0xffffffffc6711a60
	void BndEvt__Button_62_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x51eed0e64001
	void ExecuteUbergraph_UnbanPlayerOne(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc6711d00

--------------------------------
Class: KickVoteQWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x288, Size: 0x8]
	static FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x5566d0e64001
	FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x5565d0e64001
	FText GetText(GameStateBase* CallFunc_GetGameState_ReturnValue, CSGOGameState_C* K2Node_DynamicCast_AsCSGOGame_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x5564d0e64001
	void BndEvt__Button_84_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x7d01d2e011264000
	void BndEvt__Button_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x5562d0e64001
	void ExecuteUbergraph_KickVoteQWidget(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc14e0640

--------------------------------
Class: KickPlayerWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x270, Size: 0x8]
	BanPlayerWidgetStructure[] AllPlayerController;//[Offset: 0x278, Size: 0x10]
	void Construct();// 0xffffffffc14df4c0
	void BndEvt__Button_70_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x5580d0e64001
	void ExecuteUbergraph_KickPlayerWidget(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KickPlayerOne_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, BanPlayerWidgetStructure CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xffffffffc14dfbc0

--------------------------------
Class: KickPlayerOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8]
	FText PlayerName;//[Offset: 0x280, Size: 0x18]
	FText PlayerUID;//[Offset: 0x298, Size: 0x18]
	FText GetText();// 0x53b1d0e64001
	FText GetText();// 0xffffffffc14d5660
	void BndEvt__Button_59_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x53afd0e64001
	void ExecuteUbergraph_KickPlayerOne(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc14df220

--------------------------------
Class: LoginWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	EditableTextBox* EditableTextBox_Password;//[Offset: 0x278, Size: 0x8]
	EditableTextBox* EditableTextBox_Username;//[Offset: 0x280, Size: 0x8]
	void Construct();// 0x7cf6b5d250cd4000
	void BndEvt__LoginWidget_Button_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x5538d0e64001
	static void ExecuteUbergraph_LoginWidget(int EntryPoint, FText CallFunc_GetText_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetText_ReturnValue);// 0xffffffffc14de500

--------------------------------
Class: OpenBox_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	ArrowComponent* Arrow;//[Offset: 0x228, Size: 0x8]
	ChildActorComponent* ChildActor;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* StaticMesh1;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x240, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x248, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x250, Size: 0x8]
	float Timeline_1_NewTrack_0_4EED398A45FE3044692F7EABF7ABD3DD;//[Offset: 0x258, Size: 0x4]
	byte Timeline_1__Direction_4EED398A45FE3044692F7EABF7ABD3DD;//[Offset: 0x25c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x260, Size: 0x8]
	float Timeline_0_NewTrack_0_16963F3F40DA86FC807EA092CF375041;//[Offset: 0x268, Size: 0x4]
	byte Timeline_0__Direction_16963F3F40DA86FC807EA092CF375041;//[Offset: 0x26c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x270, Size: 0x8]
	Transform InitTransform;//[Offset: 0x280, Size: 0x30]
	<class WeaponBase_C,class ShowSkinMesh_C> SkinShowModle;//[Offset: 0x2b0, Size: 0x50]
	Skin Skin;//[Offset: 0x300, Size: 0x20]
	void Timeline_0__FinishedFunc();// 0x5694d0e64001
	void Timeline_0__UpdateFunc();// 0x5693d0e64001
	void Timeline_1__FinishedFunc();// 0x5692d0e64001
	void Timeline_1__UpdateFunc();// 0x5691d0e64001
	void ReceiveBeginPlay();// 0x6b88d0e64001
	void Open();// 0x568fd0e64001
	void ExecuteUbergraph_OpenBox(int EntryPoint, ShowSkinMesh_C* K2Node_DynamicCast_AsShow_Skin_Mesh, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Lerp_ReturnValue, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Transform CallFunc_GetRelativeTransform_ReturnValue, Transform CallFunc_GetRelativeTransform_ReturnValue, Transform CallFunc_TLerp_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, class ShowSkinMesh_C CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int K2Node_Select_Default);// 0x567ed0e64001

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x2d4ad0be4041
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x2d49d0be4041
	void SetTimelineLengthMode(byte NewLengthMode);// 0x2d48d0be4041
	void SetTimelineLength(float NewLength);// 0x2d47d0be4041
	void SetPlayRate(float NewRate);// 0x2d46d0be4041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x2d45d0be4041
	void SetNewTime(float NewTime);// 0x2d86d0be4041
	void SetLooping(bool bNewLooping);// 0x2d43d0be4041
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x2d42d0be4041
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x2d41d0be4041
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x2d40d0be4041
	void ReverseFromEnd();// 0x2d3fd0be4041
	void Reverse();// 0x2d3ed0be4041
	void PlayFromStart();// 0x2d3dd0be4041
	void Play();// 0x2d3cd0be4041
	void OnRep_Timeline();// 0x2d3bd0be4041
	bool IsReversing();// 0x2d3ad0be4041
	bool IsPlaying();// 0x2d39d0be4041
	bool IsLooping();// 0x2d38d0be4041
	float GetTimelineLength();// 0x2d37d0be4041
	float GetPlayRate();// 0x2d36d0be4041
	float GetPlaybackPosition();// 0x2d35d0be4041
	bool GetIgnoreTimeDilation();// 0x2d34d0be4041

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: PlayerVoiceChatActor.Actor.Object
	SceneComponent* RootSceneComponent;//[Offset: 0x220, Size: 0x8]
	MicrophoneSpeakComponent* MicrophoneSpeakComponent;//[Offset: 0x228, Size: 0x8]
	PlayerState* ownerPlayerState;//[Offset: 0x230, Size: 0x8]
	int idVoiceChat;//[Offset: 0x238, Size: 0x4]
	float voiceVolume;//[Offset: 0x23c, Size: 0x4]
	int[] radioChannelSubscribed;//[Offset: 0x240, Size: 0x10]
	FString pathToAttenuationAsset;//[Offset: 0x250, Size: 0x10]
	bool ServerPerformAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool AntiCheatAllowUseProximity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	bool AntiCheatAllowUseGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1]
	float AntiCheatMaxProximityRange;//[Offset: 0x264, Size: 0x4]
	void ServerSetMaxProximityRange(float _maxProximityRange);// 0x1910d0be4041
	void ServerSetAttenuation(bool enableAttenuation, FString _pathToAttenuationAsset);// 0x190fd0be4041
	void ServerSetAllowUseProximity(bool _allowUseRange);// 0x190ed0be4041
	void ServerSetAllowUseGlobal(bool _allowUseGlobal);// 0x190dd0be4041
	void ServerRemoveChannel(int channelToRemove);// 0x190cd0be4041
	void ServerAddChannel(int channelToAdd);// 0x190bd0be4041
	void RPCServerUpdatePosAudioComp(Vector worldPos);// 0x190ad0be4041
	void RPCClientSetMicrophoneVolume(float Volume);// 0x1909d0be4041
	void RPCClientAskRemoveChannel(int channelToRemove);// 0x1908d0be4041
	void RPCClientAskAddChannel(int channelToAdd);// 0x1907d0be4041
	void RepNotifyVoiceVolume();// 0x1906d0be4041
	void RepNotifyMicComp();// 0x1905d0be4041
	void RepNotifyAttenuationAsset();// 0x1904d0be4041
	void muteAudio(bool isMute);// 0x1903d0be4041
	void DelegateEndPlayOwner(Actor* act, byte EndPlayReason);// 0x1902d0be4041

--------------------------------
Class: MicrophoneSpeakComponent.ActorComponent.Object
	delegate OnDataMicrophoneReceived;//[Offset: 0xb0, Size: 0x10]
	AudioComponent* VoiceCaptureAudioComponent;//[Offset: 0xe8, Size: 0x8]
	SoundWaveProcedural* VoiceCaptureSoundWaveProcedural;//[Offset: 0xf0, Size: 0x8]
	bool startSpeaking(bool _shouldHearMyOwnVoice, bool isGlobal, int radioChannel, bool useRange, float MaxRange);// 0x193fd0be4041
	void SetVoiceVolume(float Volume);// 0x18fcd0be4041
	void setAttenuationAssetPath(bool enableAttenuation, FString _pathToAttenuationAsset);// 0x18fbd0be4041
	void RPCServerBroadcastVoiceData(const byte[] Data, int SampleRate, int NumChannels, int PCMSize);// 0x18fad0be4041
	void RPCReceiveVoiceFromServer(MicrophoneSpeakComponent* compToOutputVoice, const byte[] dataEncoded, int SampleRate, int NumChannels, int PCMSize);// 0x18f9d0be4041
	void RPCClientTransmitVoiceData(const byte[] Data, int SampleRate, int NumChannels, int PCMSize, bool _isGlobal, int _radioChannel, bool _useRange, float _maxRange);// 0x18f8d0be4041
	void payloadReceivedVoiceData(out const byte[] dataEncoded, int SampleRate, int NumChannels, int PCMSize);// 0x18f7d0be4041
	void muteAudio(bool _isMuted);// 0x18f6d0be4041
	bool isPlayingAudioVoice();// 0x18f5d0be4041
	bool initAudioResources(int voiceSampleRate, int _voiceNumChannels);// 0x18f4d0be4041
	void endSpeaking();// 0x18f3d0be4041
	void DataMicrophoneReceived__DelegateSignature(out const byte[] Data);// 0x18f2d0be4041

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: AdminWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	bool GetbIsEnabled(GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsProAdminKey_IsAdmin);// 0x56abd0e64001
	void BndEvt__Button_78_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x56aad0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc0ceb320
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x56a8d0e64001
	void ExecuteUbergraph_AdminWidget(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SetServerWidget_C* CallFunc_Create_ReturnValue);// 0xffffffffc0ce8760

--------------------------------
Class: SetServerWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	CheckBox* CheckBox;//[Offset: 0x288, Size: 0x8]
	CheckBox* CheckBox;//[Offset: 0x290, Size: 0x8]
	CheckBox* CheckBox_shouldBalence;//[Offset: 0x298, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x2a0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a8, Size: 0x8]
	int ServerMaxPeople;//[Offset: 0x2b0, Size: 0x4]
	FText GetText(FText CallFunc_Conv_IntToText_ReturnValue);// 0x51c2d0e64001
	void BndEvt__CheckBox_216_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x51c1d0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc6712860
	void BndEvt__Button_110_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x51bfd0e64001
	void BndEvt__Button_167_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x51bed0e64001
	void BndEvt__CheckBox_shouldBalence_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x51bdd0e64001
	void BndEvt__Button_64_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x51bcd0e64001
	void BndEvt__CheckBox_K2Node_ComponentBoundEvent_6_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x2dffb0d0ed402e
	void BndEvt__EditableTextBox_148_K2Node_ComponentBoundEvent_7_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x51bad0e64001
	static void ExecuteUbergraph_SetServerWidget(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int Temp_int_Variable, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool K2Node_ComponentBoundEvent_bIsChecked, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool K2Node_ComponentBoundEvent_bIsChecked, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, bool K2Node_ComponentBoundEvent_bIsChecked, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_TextToString_ReturnValue);// 0xffffffffc670e6c0

--------------------------------
Class: ServerSetting
	FString ServerIP_2_F3F6C53E4161206DD78FE0A0E3EB4E05;//[Offset: 0x0, Size: 0x10]
	FString ServerName_6_6405413B4A586CB98717528B7ADFC365;//[Offset: 0x10, Size: 0x10]
	FString ServerMap_7_615FCF874A71D104FD8BFEA1952B4068;//[Offset: 0x20, Size: 0x10]
	FString ServerMaxPeople_8_0F2069424C27150BD2F2D99AF15D8037;//[Offset: 0x30, Size: 0x10]
	FString IsVIP_13_C42FAA2742ED0D62087CCEB0616A2B8B;//[Offset: 0x40, Size: 0x10]
	FString Password_16_7FFE1ABE41CF541EEEA2D59CFD924CB9;//[Offset: 0x50, Size: 0x10]
	FString AdminKey_20_E98BA21545B6BE43EDCF15A2B6A31E3A;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: MapAudioPlayer_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	void ServerPlayTWin();// 0x5271d0e64001
	void ServerPlayCTWin();// 0x5270d0e64001
	void ClientPlayTwin();// 0x526fd0e64001
	void ClientPlayCTWin();// 0x526ed0e64001
	void GoT();// 0x526dd0e64001
	void GoCT();// 0xffffffffc31e93a0
	void ExecuteUbergraph_MapAudioPlayer(int EntryPoint);// 0xffffffffc31f2be0

--------------------------------
Class: Grenade_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	PaperSpriteComponent* PaperSprite;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x230, Size: 0x8]
	ArrowComponent* Arrow;//[Offset: 0x238, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x240, Size: 0x8]
	ProjectileMovementComponent* ProjectileMovement;//[Offset: 0x248, Size: 0x8]
	Vector VelocityToBeAdd;//[Offset: 0x250, Size: 0xc]
	Texture2D* Icon;//[Offset: 0x260, Size: 0x8]
	float VelocityRatio;//[Offset: 0x268, Size: 0x4]
	void ReceiveBeginPlay();// 0x529ed0e64001
	void ReceiveTick(float DeltaSeconds);// 0x5314d0e64008
	void BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x529cd0e64001
	static void ExecuteUbergraph_Grenade(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, const HitResult K2Node_ComponentBoundEvent_ImpactResult, const Vector K2Node_ComponentBoundEvent_ImpactVelocity, HitResult CallFunc_K2_AddLocalRotation_SweepHitResult, OB_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, OB_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x5295d0e64008

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x460, Size: 0xc]
	float LineThickness;//[Offset: 0x46c, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x258fd0be4041
	Vector GetUnscaledBoxExtent();// 0x258ed0be4041
	Vector GetScaledBoxExtent();// 0x258dd0be4041

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4]
	float Buoyancy;//[Offset: 0x10c, Size: 0x4]
	float Bounciness;//[Offset: 0x110, Size: 0x4]
	float Friction;//[Offset: 0x114, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0xc54d0be4041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xc53d0be4041
	void SetInterpolatedComponent(SceneComponent* Component);// 0xc98d0be4041
	void ResetInterpolation();// 0xc51d0be4041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xc50d0be4041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xc4fd0be4041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xc4ed0be4041
	Vector LimitVelocity(Vector NewVelocity);// 0xc4dd0be4041
	bool IsVelocityUnderSimulationThreshold();// 0xc4cd0be4041
	bool IsInterpolationComplete();// 0xc4bd0be4041

--------------------------------
Class: EnemyDotActor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	PaperSpriteComponent* PaperSprite;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	float Timeline_0_NewTrack_0_085D979049234FD6DA11BFB45F91CD2D;//[Offset: 0x238, Size: 0x4]
	byte Timeline_0__Direction_085D979049234FD6DA11BFB45F91CD2D;//[Offset: 0x23c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x240, Size: 0x8]
	bool IsCT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	void Timeline_0__FinishedFunc();// 0x525cd0e64001
	void Timeline_0__UpdateFunc();// 0x525bd0e64001
	void ReceiveBeginPlay();// 0x525ad0e64001
	void ServerADDTag();// 0x5259d0e64001
	void ClientAddTag();// 0x5258d0e64001
	void ShowFor2Seconds();// 0xffffffffc31e8680
	void ExecuteUbergraph_EnemyDotActor(int EntryPoint, const FName Temp_name_Variable, const FName Temp_name_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xffffffffc31e8bc0

--------------------------------
Class: BuyArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	bool CanBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	void ReceiveTick(float DeltaSeconds);// 0xffffffffc0d576c0
	void ServerSetCollision(bool Enable);// 0x5991d0e64001
	static void ExecuteUbergraph_BuyArea(int EntryPoint, bool CallFunc_IsServer_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, bool K2Node_CustomEvent_Enable, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue);// 0xffffff82d0be4000

--------------------------------
Class: BlueDoor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	AudioComponent* metal_door_open_01_Cue;//[Offset: 0x228, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x230, Size: 0x8]
	BoxComponent* Box1;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x240, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x248, Size: 0x8]
	float Timeline_3_NewTrack_0_AC4CBE1343674A5FC9D8B4887CFCFA25;//[Offset: 0x250, Size: 0x4]
	byte Timeline_3__Direction_AC4CBE1343674A5FC9D8B4887CFCFA25;//[Offset: 0x254, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x258, Size: 0x8]
	float Timeline_2_NewTrack_0_404BF3A04524826247B062ABCB845983;//[Offset: 0x260, Size: 0x4]
	byte Timeline_2__Direction_404BF3A04524826247B062ABCB845983;//[Offset: 0x264, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x268, Size: 0x8]
	float Timeline_1_NewTrack_0_C964C3624193CF7C225E0B8CF3DE19D7;//[Offset: 0x270, Size: 0x4]
	byte Timeline_1__Direction_C964C3624193CF7C225E0B8CF3DE19D7;//[Offset: 0x274, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x278, Size: 0x8]
	float Timeline_0_NewTrack_0_26032C8A4E12A569E5D88E97AE8672AC;//[Offset: 0x280, Size: 0x4]
	byte Timeline_0__Direction_26032C8A4E12A569E5D88E97AE8672AC;//[Offset: 0x284, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x288, Size: 0x8]
	bool OpenLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool OpenRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool Close;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	bool IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x293, Size: 0x1]
	float DefaultXRotation;//[Offset: 0x294, Size: 0x4]
	void Timeline_0__FinishedFunc();// 0x5285d0e64001
	void Timeline_0__UpdateFunc();// 0x5284d0e64001
	void Timeline_1__FinishedFunc();// 0x5283d0e64001
	void Timeline_1__UpdateFunc();// 0x5282d0e64001
	void Timeline_2__FinishedFunc();// 0x5281d0e64001
	void Timeline_2__UpdateFunc();// 0x5280d0e64001
	void Timeline_3__FinishedFunc();// 0x527fd0e64001
	void Timeline_3__UpdateFunc();// 0x527ed0e64001
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x527dd0e64001
	void BndEvt__Box1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xffffffffc31eda80
	void ClientClose();// 0x527bd0e64001
	void ExecuteUbergraph_BlueDoor(int EntryPoint, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult);// 0xffffffffc31eaa60

--------------------------------
Class: SocketClientBPLibrary.Object
	delegate onsocketClientTCPConnectionEventDelegate;//[Offset: 0x28, Size: 0x10]
	delegate onreceiveTCPMessageEventDelegate;//[Offset: 0x38, Size: 0x10]
	delegate onsocketClientUDPConnectionEventDelegate;//[Offset: 0x48, Size: 0x10]
	delegate onreceiveUDPMessageEventDelegate;//[Offset: 0x58, Size: 0x10]
	delegate onreadBytesFromFileInPartsEventDelegate;//[Offset: 0x68, Size: 0x10]
	delegate ontransferFileOverTCPProgressEventDelegate;//[Offset: 0x78, Size: 0x10]
	delegate onfileTransferOverTCPInfoEventDelegate;//[Offset: 0x88, Size: 0x10]
	void transferFileOverTCPProgressEventDelegate__DelegateSignature(FString clientConnectionID, FString FilePath, float percent, float mbit, int64 bytesTransferred, int64 fileSize);// 0x9f5d0be4041
	void transferFileOverTCPProgressEventDelegate(const FString clientConnectionID, const FString FilePath, const float percent, const float mbit, const int64 bytesTransferred, const int64 fileSize);// 0x9f4d0be4041
	void socketClientUDPConnectionEventDelegate__DelegateSignature(bool success, FString Message, FString clientConnectionID);// 0x9f3d0be4041
	void socketClientUDPConnectionEventDelegate(const bool success, const FString Message, const FString clientConnectionID);// 0x9f2d0be4041
	void socketClientTCPConnectionEventDelegate__DelegateSignature(bool success, FString Message, FString clientConnectionID);// 0x9f1d0be4041
	void socketClientTCPConnectionEventDelegate(const bool success, const FString Message, const FString clientConnectionID);// 0x9f0d0be4041
	void socketClientSendUDP(FString domainOrIP, enum ipType, int Port, FString Message, byte[] byteArray, bool addLineBreak, FString connectionID);// 0x9efd0be4041
	void socketClientSendTCP(FString connectionID, FString Message, byte[] byteArray, bool addLineBreak);// 0xa39d0be4041
	void socketClientSendFileOverTCP(out FString connectionID, FString domainOrIP, enum ipType, int Port, enum directoryType, FString FilePath, FString token, FString Aes256bitKey);// 0x9ecd0be4041
	void socketClientRequestFileOverTCP(out FString connectionID, FString domainOrIP, enum ipType, int Port, enum directoryType, FString downloadDirectory, bool resume, FString token, FString Aes256bitKey);// 0x9ebd0be4041
	void socketClientInitUDPReceiver(out FString connectionID, FString domainOrIP, enum ipType, int Port, enum receiveFilter, int maxPacketSize);// 0x9ead0be4041
	void receiveUDPMessageEventDelegate__DelegateSignature(FString Message, out const byte[] byteArray, FString IP_FromSender, int portFromSender, FString clientConnectionID);// 0x9e9d0be4041
	void receiveUDPMessageEventDelegate(const FString Message, out const byte[] byteArray, const FString IP, const int Port, const FString clientConnectionID);// 0x9e8d0be4041
	void receiveTCPMessageEventDelegate__DelegateSignature(FString Message, out const byte[] byteArray, FString clientConnectionID);// 0x9e7d0be4041
	void receiveTCPMessageEventDelegate(const FString Message, out const byte[] byteArray, const FString clientConnectionID);// 0x9e6d0be4041
	void readBytesFromFileInPartsEventDelegate__DelegateSignature(int64 fileSize, int64 Position, bool End, out const byte[] byteArray);// 0x9e5d0be4041
	void readBytesFromFileInPartsEventDelegate(const int64 fileSize, const int64 Position, const bool End, out const byte[] byteArray);// 0x9e4d0be4041
	void parseIntegerToBytesPure(out byte[] byteArray, int Value, bool switchByteOrder);// 0x9e3d0be4041
	void parseIntegerToBytes(out byte[] byteArray, int Value, bool switchByteOrder);// 0x9e2d0be4041
	void parseInteger64ToBytesPure(out byte[] byteArray, int64 Value, bool switchByteOrder);// 0x9e1d0be4041
	void parseInteger64ToBytes(out byte[] byteArray, int64 Value, bool switchByteOrder);// 0x9e0d0be4041
	FString parseHexToStringPure(FString hex);// 0x9dfd0be4041
	FString parseHexToString(FString hex);// 0x9ded0be4041
	byte[] parseHexToBytesPure(FString hex);// 0x9ddd0be4041
	byte[] parseHexToBytes(FString hex);// 0x9dcd0be4041
	void parseFloatToBytesPure(out byte[] byteArray, float Value, bool switchByteOrder);// 0x9dbd0be4041
	void parseFloatToBytes(out byte[] byteArray, float Value, bool switchByteOrder);// 0x9dad0be4041
	void parseBytesToIntegerPure(byte[] bytes, out int Value);// 0x9d9d0be4041
	void parseBytesToIntegerEndian(byte[] bytes, out int littleEndian, out int bigEndian);// 0x9d8d0be4041
	void parseBytesToInteger64Pure(byte[] bytes, out int64 Value);// 0x9d7d0be4041
	void parseBytesToInteger64Endian(byte[] bytes, out int64 littleEndian, out int64 bigEndian);// 0x9d6d0be4041
	void parseBytesToInteger64(byte[] bytes, out int64 Value);// 0x9d5d0be4041
	void parseBytesToInteger(byte[] bytes, out int Value);// 0x9d4d0be4041
	FString parseBytesToHexPure(byte[] bytes);// 0x9d3d0be4041
	FString parseBytesToHex(byte[] bytes);// 0xffffff82d0be4000
	void parseBytesToFloatPure(byte[] bytes, out float Value);// 0x9d0d0be4041
	void parseBytesToFloatEndian(byte[] bytes, out float littleEndian, out float bigEndian);// 0x9bad0be4041
	void parseBytesToFloat(byte[] bytes, out float Value);// 0x9c6d0be4041
	bool isUDPInitialized(FString connectionID);// 0x9c5d0be4031
	bool isTCPConnected(FString connectionID);// 0x9cfd0be4041
	int getUniquePlayerID(PlayerController* PlayerController);// 0x9ced0be4041
	void getUDPInitializationByConnectionID(FString connectionID, out bool found, out SocketClientPluginUDPClient* connection);// 0x9cdd0be4041
	void getTCPConnectionByConnectionID(FString connectionID, out bool found, out SocketClientPluginTCPClient* connection);// 0x9ccd0be4041
	void getSystemType(out enum System);// 0x9cbd0be4041
	SocketClientBPLibrary* getSocketClientTarget();// 0x9c9d0be4041
	FString getRandomID();// 0x2effb1d0f84073
	FString getLocalIP();// 0x9c8d0be4041
	void fileTransferOverTCPInfoEventDelegate__DelegateSignature(FString Message, FString clientConnectionID, FString FilePath, bool success);// 0x9bfd0be4041
	void fileTransferOverTCPInfoEventDelegate(const FString Message, const FString clientConnectionID, const FString FilePath, const bool success);// 0x9c2d0be4041
	void deactivateTCPMessageWrappingOnClientPlugin();// 0x9bed0be4041
	void connectSocketClientTCP(FString domainOrIP, enum ipType, int Port, enum receiveFilters, out FString connectionID, bool disableNaglesAlgorithm);// 0x2dffb0d0ed402e
	void closeSocketClientConnectionUDP(FString connectionID);// 0x9bdd0be4041
	void closeSocketClientConnectionTCP(FString connectionID);// 0x9d1d0be4041
	void changeSocketPlatform(enum platform);// 0xffffff82d0be4001
	void activateTCPMessageWrappingOnClientPlugin(FString Header, FString footer);// 0x9bbd0be4041

--------------------------------
Class: SocketClientPluginUDPClient.Object
	delegate onsocketClientUDPConnectionEventDelegate;//[Offset: 0x28, Size: 0x10]
	delegate onreceiveUDPMessageEventDelegate;//[Offset: 0x38, Size: 0x10]
	void socketClientUDPConnectionEventDelegate__DelegateSignature(bool success, FString Message, FString clientConnectionID);// 0xa01d0be4041
	void socketClientUDPConnectionEventDelegate(const bool success, const FString Message, const FString clientConnectionID);// 0xa00d0be4041
	void receiveUDPMessageEventDelegate__DelegateSignature(FString Message, out const byte[] byteArray, FString IP_FromSender, int portFromSender, FString clientConnectionID);// 0x9ffd0be4041
	void receiveUDPMessageEventDelegate(const FString Message, out const byte[] byteArray, const FString IP, const int Port, const FString clientConnectionID);// 0x9fed0be4041

--------------------------------
Class: SocketClientPluginTCPClient.Object
	delegate onsocketClientTCPConnectionEventDelegate;//[Offset: 0x28, Size: 0x10]
	delegate onreceiveTCPMessageEventDelegate;//[Offset: 0x38, Size: 0x10]
	delegate ontransferFileOverTCPProgressEventDelegate;//[Offset: 0x48, Size: 0x10]
	delegate onfileTransferOverTCPInfoEventDelegate;//[Offset: 0x58, Size: 0x10]
	void transferFileOverTCPProgressEventDelegate__DelegateSignature(FString clientConnectionID, FString FilePath, float percent, float mbit, int64 bytesTransferred, int64 fileSize);// 0x9fdd0be4041
	void transferFileOverTCPProgressEventDelegate(const FString clientConnectionID, const FString FilePath, const float percent, const float mbit, const int64 bytesTransferred, const int64 fileSize);// 0x9fcd0be4041
	void socketClientTCPConnectionEventDelegate__DelegateSignature(bool success, FString Message, FString clientConnectionID);// 0x9fbd0be4041
	void socketClientTCPConnectionEventDelegate(const bool success, const FString Message, const FString clientConnectionID);// 0x9fad0be4041
	void receiveTCPMessageEventDelegate__DelegateSignature(FString Message, out const byte[] byteArray, FString clientConnectionID);// 0x9f9d0be4041
	void receiveTCPMessageEventDelegate(const FString Message, out const byte[] byteArray, const FString clientConnectionID);// 0x9f8d0be4041
	void fileTransferOverTCPInfoEventDelegate__DelegateSignature(FString Message, FString clientConnectionID, FString FilePath, bool success);// 0x9f7d0be4041
	void fileTransferOverTCPInfoEventDelegate(const FString Message, const FString clientConnectionID, const FString FilePath, const bool success);// 0x9f6d0be4041

--------------------------------
Class: WeaponBase_CZ75_C.WeaponBase_C.Actor.Object

--------------------------------
Class: TestAudioComponent_C.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x200, Size: 0x8]
	QueueAudio[] 2DAudioQueue;//[Offset: 0x208, Size: 0x10]
	QueueAudio PlayingAudio;//[Offset: 0x218, Size: 0x28]
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	bool ShouldTriggerNext;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	CharacterDialogue[] CoolDownBuffer;//[Offset: 0x248, Size: 0x10]
	AudioComponent* PlayingGPAudio;//[Offset: 0x258, Size: 0x8]
	3DGPAudioBuffer[] Playing3DGPAudio;//[Offset: 0x260, Size: 0x10]
	void GetQueueAudioPriority(QueueAudio QueueAudio, out int Priority);// 0x5ae7d0e64001
	void IsCoolingDownAudio(QueueAudio TryQueueAudio, out bool IsCoolingDown, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, CharacterDialogue CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x5ae6d0e64001
	void Play2DAudio(bool Interrupt, QueueAudio Audio);// 0x5ae5d0e64001
	void PushAudioToQueue(QueueAudio QueueAudio);// 0x5ae4d0e64001
	void AudioCoolDown(QueueAudio QueueAudio);// 0x5ae3d0e64001
	void Play3DAudio(QueueAudio QueueAudio);// 0x5ae2d0e64001
	void CoolDownTimer();// 0x5ae1d0e64001
	void ReceiveBeginPlay();// 0x5ae0d0e64001
	void CharacterAddAudioQueue(FName RowName, int PriorityOverride);// 0x5adfd0e64001
	void ServerAddAudioQueue(QueueAudio QueueAudio, int PriorityOverride);// 0x5aded0e64001
	void ClientAddAudioQueue(QueueAudio QueueAudio, int PriorityOverride);// 0x7cf757da3e4000
	void PlayOver();// 0x5adcd0e64001
	static void ExecuteUbergraph_TestAudioComponent(int EntryPoint, FString CallFunc_GetCurrentLevelName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_CustomEvent_Interrupt, QueueAudio K2Node_CustomEvent_Audio, Vector CallFunc_K2_GetActorLocation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, QueueAudio K2Node_CustomEvent_QueueAudio, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_GetQueueAudioPriority_Priority, int CallFunc_GetQueueAudioPriority_Priority, bool CallFunc_IsCoolingDownAudio_IsCoolingDown, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, QueueAudio K2Node_CustomEvent_QueueAudio, QueueAudio K2Node_CustomEvent_QueueAudio, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, 3DGPAudioBuffer K2Node_MakeStruct_3DGPAudioBuffer, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Max_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetQueueAudioPriority_Priority, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, CharacterDialogue CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_Max_ReturnValue, CharacterDialogue K2Node_SetFieldsInStruct_StructOut, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, QueueAudio CallFunc_Array_Get_Item, int CallFunc_GetQueueAudioPriority_Priority, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, 3DGPAudioBuffer CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FName K2Node_CustomEvent_RowName, int K2Node_CustomEvent_PriorityOverride, CharacterDialogue CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, QueueAudio K2Node_CustomEvent_QueueAudio, int K2Node_CustomEvent_PriorityOverride, QueueAudio K2Node_MakeStruct_QueueAudio, Character*[] CallFunc_GetAllActorsOfClass_OutActors, Character* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, TestAudioComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, QueueAudio K2Node_CustomEvent_QueueAudio, int K2Node_CustomEvent_PriorityOverride, bool CallFunc_NotEqual_IntInt_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, CharacterDialogue K2Node_MakeStruct_CharacterDialogue, QueueAudio K2Node_MakeStruct_QueueAudio, Actor* CallFunc_GetOwner_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x5adad0e64001

--------------------------------
Class: QueueAudio
	CharacterDialogue Dialogue_2_EA1756824A1E79E6075E0EB5557D9EB5;//[Offset: 0x0, Size: 0x20]
	Character* Source_5_DBE6B0A34B450DE66D04BB8B78E58606;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CharacterDialogue
	SoundCue* CharacterAudio_9_6ED8EBFF42646FDAC67BB4801F664AFA;//[Offset: 0x0, Size: 0x8]
	int Priority_11_95DE5D3040815BF421916AB8402B4F66;//[Offset: 0x8, Size: 0x4]
	bool IsRoundPlayOnce_12_2B745F4F4A7A1630EF4F6693BC4E6B4F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool IsGamePlayOnce_13_183F1ED24DB5983D5343189E5AE918EC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float CoolDown_15_B42D5052468D86078D5CF1A318BD0132;//[Offset: 0x10, Size: 0x4]
	bool Is3DAOnlyaudio_16_0B7F2DAA4B2A11B4324A259BEEFD328A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool ShouldClearBuffer_17_CD56D1DC413E66FB65F2EEA187CF2E65;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float 3DAudioRange_19_C03DCDDB4A0ADDD6F02F8684D5389DDF;//[Offset: 0x18, Size: 0x4]
	bool SounldInterruptSamePriority_24_90F783A84C91617F28DD7BA9614D7501;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool Is2DOnlyAudio_25_B9432ADC4EF9814591BB43BCB9133D40;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: 3DGPAudioBuffer
	AudioComponent* PlayingAudio_6_553E7F494C6826240B17458111CFE2F0;//[Offset: 0x0, Size: 0x8]
	Character* PlayingCharacter_5_F8E6B001488FE2C5663B1CA3615E0241;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f4, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x1f8, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x204, Size: 0xc]
	float ProbeSize;//[Offset: 0x210, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x214, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x218, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x21c, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x220, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x224, Size: 0x4]
	bool IsCollisionFixApplied();// 0x2cfcd0be4041
	Vector GetUnfixedCameraPosition();// 0x2cfbd0be4041
	Rotator GetTargetRotation();// 0x2cfad0be4041

--------------------------------
Class: BPC_MobileTouchInput_Shooter_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	Widget_MobileShootingMain_C* MainWidget;//[Offset: 0xb8, Size: 0x8]
	delegate InputTouch Axis MoveForward;//[Offset: 0xc0, Size: 0x10]
	delegate InputTouch Axis MoveRight;//[Offset: 0xd0, Size: 0x10]
	delegate InputTouch Axis LookUp;//[Offset: 0xe0, Size: 0x10]
	delegate InputTouch Axis Turn;//[Offset: 0xf0, Size: 0x10]
	delegate InputTouch Axis Fire;//[Offset: 0x100, Size: 0x10]
	delegate OnPressed Button Fire;//[Offset: 0x110, Size: 0x10]
	delegate OnReleased Button Fire;//[Offset: 0x120, Size: 0x10]
	delegate OnPressed Button Reload;//[Offset: 0x130, Size: 0x10]
	delegate OnPressed Button Jump;//[Offset: 0x140, Size: 0x10]
	delegate OnPressed Button Crouch;//[Offset: 0x150, Size: 0x10]
	delegate OnPressed Button Aim;//[Offset: 0x160, Size: 0x10]
	delegate OnReleased Button Jump;//[Offset: 0x170, Size: 0x10]
	delegate OnReleased Button Crouch;//[Offset: 0x180, Size: 0x10]
	delegate OnStart Sprint Input;//[Offset: 0x190, Size: 0x10]
	delegate OnEnd Sprint Input;//[Offset: 0x1a0, Size: 0x10]
	delegate OnPressed Button Pickup;//[Offset: 0x1b0, Size: 0x10]
	delegate OnPressed Button WeaponSlot1;//[Offset: 0x1c0, Size: 0x10]
	delegate OnPressed Button WeaponSlot2;//[Offset: 0x1d0, Size: 0x10]
	delegate OnPressed_Button_GrenadeSlot;//[Offset: 0x1e0, Size: 0x10]
	delegate OnRelease Button Aim;//[Offset: 0x1f0, Size: 0x10]
	delegate OnPressed Nittpm WeaponSlot3;//[Offset: 0x200, Size: 0x10]
	delegate OnPressed Button Walk;//[Offset: 0x210, Size: 0x10]
	delegate OnPressedButtonBomb;//[Offset: 0x220, Size: 0x10]
	delegate OnReleasedButtonBomb;//[Offset: 0x230, Size: 0x10]
	delegate OnPressedButtonSwitch;//[Offset: 0x240, Size: 0x10]
	delegate OnPressedButtonInspect;//[Offset: 0x250, Size: 0x10]
	delegate OnPressedButtonSetting;//[Offset: 0x260, Size: 0x10]
	void ReceiveBeginPlay();// 0x6e49d0e64001
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0x6e48d0e64001
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0x6e46d0e64001
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x6d7ad0e64001
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0x6e45d0e64001
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x6e44d0e64001
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x6e43d0e64001
	void OwningClientCreateWidget();// 0x6e42d0e64001
	void Event OnpressedButtonSetting();// 0x6e41d0e64001
	void Event OnpressedButtonInspect();// 0x6e40d0e64001
	void Event OnpressedButtonSwitch();// 0x6e3fd0e64001
	void Event OnReleased_Button Bomb();// 0x6e3ed0e64001
	void Event OnPressed_Button Bomb();// 0x6e3dd0e64001
	void Event OnPressed_Button Walk();// 0x6e3cd0e64001
	void Event OnPressed_Button_WeaponSlot3();// 0x6e3bd0e64001
	void Event OnRelease_Button_Aim();// 0x6e3ad0e64001
	void Event OnPressed_Button_GrenadeSlot(int IpSlotIndex);// 0x6e39d0e64001
	void Event OnPressed_Button_WeaponSlot2();// 0x6e38d0e64001
	void Event OnPressed_Button_WeaponSlot1();// 0x6e37d0e64001
	void Event OnPressed_Button_Pickup();// 0x6e36d0e64001
	void Event OnEnd_SprintInput();// 0x6e35d0e64001
	void Event OnStart_SprintInput();// 0x6e34d0e64001
	void Event OnReleased_Button_Crouch();// 0x6e33d0e64001
	void Event OnReleased_Button_Jump();// 0x6e32d0e64001
	void Event OnPressed_Button_Aim();// 0x6f28d0e64008
	void Event OnPressed_Button_Crouch();// 0x6e30d0e64001
	void Event OnPressed_Button_Jump();// 0x6e2fd0e64001
	void Event OnPressed_Button_Reload();// 0x6e2ed0e64001
	void Event OnReleased_Button_Fire();// 0x6e2dd0e64001
	void Event OnPressed_Button_Fire();// 0x6e2cd0e64001
	void Event Axis Fire();// 0x6e2bd0e64001
	void Event Axis Turn(float AxisValue);// 0xffffff85d0be4002
	void Event Axis LookUp(float AxisValue);// 0x6c06d0e64001
	void Event Axis MoveRight(float AxisValue);// 0xffffffffca5c8220
	void Event Axis MoveForward(float AxisValue, float JoystickAngle, float JoystickMoveLength);// 0x6e29d0e64001
	void ExecuteUbergraph_BPC_MobileTouchInput_Shooter(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, interface classNone CallFunc_OnPressed_InputTouch_self_CastInput, interface classNone CallFunc_OnReleased_InputTouch_self_CastInput, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, interface classNone CallFunc_OnMoved_InputTouch_self_CastInput, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, PlayerController* CallFunc_GetPlayerController_ReturnValue, Widget_MobileShootingMain_C* CallFunc_Create_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, PlayerController* K2Node_DynamicCast_AsPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_IsLocalPlayerController_ReturnValue, PlayerController* K2Node_DynamicCast_AsPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemodePratice_C* K2Node_DynamicCast_AsCSGOGamemode_Pratice, bool K2Node_DynamicCast_bSuccess, int K2Node_CustomEvent_IpSlotIndex, float K2Node_CustomEvent_AxisValue, float K2Node_CustomEvent_AxisValue, float K2Node_CustomEvent_AxisValue, float K2Node_CustomEvent_AxisValue, float K2Node_CustomEvent_JoystickAngle, float K2Node_CustomEvent_JoystickMoveLength);// 0x6e28d0e64001
	void OnPressedButtonSetting__DelegateSignature();// 0x7220d0e64001
	void OnPressedButtonInspect__DelegateSignature();// 0xffffffffca5c8840
	void OnPressedButtonSwitch__DelegateSignature();// 0x5ad9d0e64001
	void OnReleasedButtonBomb__DelegateSignature();// 0x5ad8d0e64001
	void OnPressedButtonBomb__DelegateSignature();// 0xffffff82d0be4000
	void OnPressed Button Walk__DelegateSignature();// 0x5ad6d0e64001
	void OnPressed Nittpm WeaponSlot3__DelegateSignature();// 0x5ad5d0e64001
	void OnRelease Button Aim__DelegateSignature();// 0x5ad4d0e64001
	void OnPressed_Button_GrenadeSlot__DelegateSignature(int IpSlotIndex);// 0x5ad3d0e64001
	void OnPressed Button WeaponSlot2__DelegateSignature();// 0x5ad2d0e64001
	void OnPressed Button WeaponSlot1__DelegateSignature();// 0x5ad1d0e64001
	void OnPressed Button Pickup__DelegateSignature();// 0x5ad0d0e64001
	void OnEnd Sprint Input__DelegateSignature();// 0x5acfd0e64001
	void OnStart Sprint Input__DelegateSignature();// 0x5aced0e64001
	void OnReleased Button Crouch__DelegateSignature();// 0x5acdd0e64001
	void OnReleased Button Jump__DelegateSignature();// 0x5accd0e64001
	void OnPressed Button Aim__DelegateSignature();// 0x5acbd0e64001
	void OnPressed Button Crouch__DelegateSignature();// 0x5acad0e64001
	void OnPressed Button Jump__DelegateSignature();// 0x5ac9d0e64001
	void OnPressed Button Reload__DelegateSignature();// 0x5ac8d0e64001
	void OnReleased Button Fire__DelegateSignature();// 0x5ac7d0e64001
	void OnPressed Button Fire__DelegateSignature();// 0x5ac6d0e64001
	void InputTouch Axis Fire__DelegateSignature();// 0x5ac5d0e64001
	void InputTouch Axis Turn__DelegateSignature(float AxisValue);// 0x5ac4d0e64001
	void InputTouch Axis LookUp__DelegateSignature(float Axis Value);// 0x5ac3d0e64001
	void InputTouch Axis MoveRight__DelegateSignature(float AxisValue);// 0xffffff8fd0c73f94
	void InputTouch Axis MoveForward__DelegateSignature(float AxisValue, float JoystickAngle, float JoystickMoveLength);// 0xffffffffc0d5ef80

--------------------------------
Class: Widget_MobileShootingMain_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button_Aim;//[Offset: 0x270, Size: 0x8]
	Button* Button_Bomb;//[Offset: 0x278, Size: 0x8]
	Button* Button_Cancel;//[Offset: 0x280, Size: 0x8]
	Button* Button_Crouch;//[Offset: 0x288, Size: 0x8]
	Button* Button_Fire_Left;//[Offset: 0x290, Size: 0x8]
	Button* Button_Inspect;//[Offset: 0x298, Size: 0x8]
	Button* Button_Jump;//[Offset: 0x2a0, Size: 0x8]
	Button* Button_Pause;//[Offset: 0x2a8, Size: 0x8]
	Button* Button_Pickup;//[Offset: 0x2b0, Size: 0x8]
	Button* Button_Reload;//[Offset: 0x2b8, Size: 0x8]
	Button* Button_Setting;//[Offset: 0x2c0, Size: 0x8]
	Button* Button_ShiftWalk;//[Offset: 0x2c8, Size: 0x8]
	Button* Button_Switch;//[Offset: 0x2d0, Size: 0x8]
	Button* Button_Switch;//[Offset: 0x2d8, Size: 0x8]
	CanvasPanel* CanvasPanel_Main;//[Offset: 0x2e0, Size: 0x8]
	CanvasPanel* CanvasPanel_WeaponSlots;//[Offset: 0x2e8, Size: 0x8]
	Image* Image;//[Offset: 0x2f0, Size: 0x8]
	Image* Image;//[Offset: 0x2f8, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x300, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x308, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x310, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x318, Size: 0x8]
	Image* Image_Button_Aim;//[Offset: 0x320, Size: 0x8]
	Image* Image_Button_Crouch;//[Offset: 0x328, Size: 0x8]
	Image* Image_Button_Crouch;//[Offset: 0x330, Size: 0x8]
	Image* Image_Button_Jump;//[Offset: 0x338, Size: 0x8]
	Image* Image_Button_Reload;//[Offset: 0x340, Size: 0x8]
	Image* Image_Debug_Finger1;//[Offset: 0x348, Size: 0x8]
	Image* Image_Debug_Finger2;//[Offset: 0x350, Size: 0x8]
	Image* Image_Pickup;//[Offset: 0x358, Size: 0x8]
	Image* Image_Pickup;//[Offset: 0x360, Size: 0x8]
	Image* Image_Pickup;//[Offset: 0x368, Size: 0x8]
	ProgressBar* ProgressBar_HP;//[Offset: 0x370, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x378, Size: 0x8]
	Widget_TouchDragArea_C* WD_TouchDragArea;//[Offset: 0x380, Size: 0x8]
	Widget_UseItemSlot_C* WD_UseItemSlot_Item;//[Offset: 0x388, Size: 0x8]
	Widget_VirtualJoystick_C* WD_VirtualJoystick;//[Offset: 0x390, Size: 0x8]
	Widget_WeaponSlot_C* WD_WeaponSlot1;//[Offset: 0x398, Size: 0x8]
	Widget_WeaponSlot_C* WD_WeaponSlot2;//[Offset: 0x3a0, Size: 0x8]
	Widget_WeaponSlot_C* WD_WeaponSlot3;//[Offset: 0x3a8, Size: 0x8]
	Widget_UseItemSlotAry_C* Widget_GrenadeItemSlotAry;//[Offset: 0x3b0, Size: 0x8]
	Widget_TouchButton_C* Widget_TouchButton_Fire;//[Offset: 0x3b8, Size: 0x8]
	Widget_TouchButtonAim_C* Widget_TouchButtonAim;//[Offset: 0x3c0, Size: 0x8]
	Widget_TouchButtonJump_C* Widget_TouchButtonJump;//[Offset: 0x3c8, Size: 0x8]
	S_WidgetTouchInfo[] TouchInfoAry;//[Offset: 0x3d0, Size: 0x10]
	Vector PressedTouchPoint;//[Offset: 0x3e0, Size: 0xc]
	byte FingerIndex;//[Offset: 0x3ec, Size: 0x1]
	Widget*[] WidgetAry;//[Offset: 0x3f0, Size: 0x10]
	Widget*[] PickWidgetAry;//[Offset: 0x400, Size: 0x10]
	Vector2D PressedLoc_WidgetInputTouchMoved;//[Offset: 0x410, Size: 0x8]
	Vector2D DirFromCenter;//[Offset: 0x418, Size: 0x8]
	Vector2D MoveLoc_WidgetInputTouchMoved;//[Offset: 0x420, Size: 0x8]
	float VirtualMaxRadius;//[Offset: 0x428, Size: 0x4]
	delegate OnAxis_MoveVirtualJoystick;//[Offset: 0x430, Size: 0x10]
	float JoystickMoveLength;//[Offset: 0x440, Size: 0x4]
	Vector2D MoveDisVec2D;//[Offset: 0x444, Size: 0x8]
	Widget* PressedWidget;//[Offset: 0x450, Size: 0x8]
	Vector ReleasedTouchPoint;//[Offset: 0x458, Size: 0xc]
	Vector MovedTouchPoint;//[Offset: 0x464, Size: 0xc]
	Vector MovedTouchPrevPoint;//[Offset: 0x470, Size: 0xc]
	bool IsFireInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1]
	delegate InputTouch Axis MoveForward;//[Offset: 0x480, Size: 0x10]
	delegate InputTouch Axis MoveRight;//[Offset: 0x490, Size: 0x10]
	delegate InputTouch Axis LookUp;//[Offset: 0x4a0, Size: 0x10]
	delegate InputTouch Axis Turn;//[Offset: 0x4b0, Size: 0x10]
	delegate InputTouch Axis Fire;//[Offset: 0x4c0, Size: 0x10]
	delegate OnPressed_Button_Fire;//[Offset: 0x4d0, Size: 0x10]
	delegate OnReleased_Button_Fire;//[Offset: 0x4e0, Size: 0x10]
	delegate OnPressed_Button_Reload;//[Offset: 0x4f0, Size: 0x10]
	delegate OnPressed_Button_Jump;//[Offset: 0x500, Size: 0x10]
	delegate OnPressed_Button_Crouch;//[Offset: 0x510, Size: 0x10]
	delegate OnPressed_Button_Aim;//[Offset: 0x520, Size: 0x10]
	delegate OnReleased_Button_Jump;//[Offset: 0x530, Size: 0x10]
	delegate OnReleased_Button_Crouch;//[Offset: 0x540, Size: 0x10]
	LinearColor ToggleButtonColor;//[Offset: 0x550, Size: 0x10]
	float JoystickAngle;//[Offset: 0x560, Size: 0x4]
	bool IsSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 0x1]
	delegate OnStart_SprintInput;//[Offset: 0x568, Size: 0x10]
	delegate OnEnd_SprintInput;//[Offset: 0x578, Size: 0x10]
	LinearColor SprintMoveBGColor;//[Offset: 0x588, Size: 0x10]
	LinearColor OriginMoveBGColor;//[Offset: 0x598, Size: 0x10]
	Widget_WeaponSlot_C*[] WeaponSlotWidgetAry;//[Offset: 0x5a8, Size: 0x10]
	delegate OnPressed_Button_Pickup;//[Offset: 0x5b8, Size: 0x10]
	delegate OnPressed_Button_WeaponSlot1;//[Offset: 0x5c8, Size: 0x10]
	delegate OnPressed_Button_WeaponSlot2;//[Offset: 0x5d8, Size: 0x10]
	S_WidgetTouchInfo TempAddTouchInfo;//[Offset: 0x5e8, Size: 0x38]
	S_WidgetTouchInfo TempUpdateTouchInfo;//[Offset: 0x620, Size: 0x38]
	bool IsDebugTouchPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	Widget* TempPickWidget;//[Offset: 0x660, Size: 0x8]
	S_WidgetTouchInfo[] TempTouchInfoAry;//[Offset: 0x668, Size: 0x10]
	delegate OnPressed_Button_GrenadeSlot;//[Offset: 0x678, Size: 0x10]
	delegate OnReleased_Button_Aim;//[Offset: 0x688, Size: 0x10]
	delegate On Pressed Button Weapon Slot3;//[Offset: 0x698, Size: 0x10]
	delegate OnPressed_Button_Walk;//[Offset: 0x6a8, Size: 0x10]
	delegate OnPressed_Button_Bomb;//[Offset: 0x6b8, Size: 0x10]
	delegate OnReleased_Button_Bomb;//[Offset: 0x6c8, Size: 0x10]
	delegate OnPressed_ButtonSwitch;//[Offset: 0x6d8, Size: 0x10]
	delegate OnPressed_Button_Inspect;//[Offset: 0x6e8, Size: 0x10]
	delegate OnPressed_Button_Setting;//[Offset: 0x6f8, Size: 0x10]
	FText TextToSend;//[Offset: 0x708, Size: 0x18]
	bool IsChatTeamateOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	SlateBrush NewVar;//[Offset: 0x728, Size: 0x88]
	LeaderBoard_C* LeaderBoard;//[Offset: 0x7b0, Size: 0x8]
	enum GetVisibility(Character* CallFunc_GetPlayerCharacter_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess);// 0x7d01d85471264000
	static SlateBrush GetBrush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Character* CallFunc_GetPlayerCharacter_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess);// 0x6dc3d0e64001
	static FText GetText(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x6dc2d0e64001
	enum Get_Button_Switch_1_Visibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc8564860
	enum Get_Button_Switch_2_Visibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffffc8564320
	enum Get_Button_Bomb_Visibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xffffffffc8572be0
	SlateBrush Get_Image_Button_Aim_Brush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x6dbad0e64001
	FText GetText();// 0xffffffffca5d3820
	SlateBrush Get_Image_Button_Aim_1_Brush(SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess);// 0x6dbcd0e64001
	enum Get_Button_Switch_1_Visibility(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess);// 0x6db7d0e64001
	void UpdateWeaponSlotWidgets2(Texture2D* IpWeapon3Icon, int IpWeapon3Ammo, int IpWeapon3TotalAmmo, int IpSelectSlotIndex, bool IpIsSelect, bool CallFunc_EqualEqual_IntInt_ReturnValue, Widget_WeaponSlot_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffffc85661c0
	void UpdateWeaponSlotWidgets1(Texture2D* IpWeapon2Icon, int IpWeapon2Ammo, int IpWeapon2TotalAmmo, int IpSelectSlotIndex, bool IpIsSelect, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Widget_WeaponSlot_C* CallFunc_Array_Get_Item);// 0x6dbed0e64001
	static void FindTouchInfoAry_AryIndex(byte FingerIndex, out int[] Result, int[] LocalIndexAry, S_WidgetTouchInfo[] LocalTouchInfoAry, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2dffb0d0ed402e
	static void FindTouchInfoAry(byte FingerIndex, out S_WidgetTouchInfo[] Result, S_WidgetTouchInfo[] LocalTouchInfoAry, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6db0d0e64001
	void UpdateHpWidget(float IpHp, float IpMaxHp, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6db9d0e64001
	void UpdateWeaponSlotWidgets0(Texture2D* IpWeapon1Icon, int IpWeapon1Ammo, int IpWeapon1TotalAmmo, int IpSelectSlotIndex, bool IpIsSelect, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Widget_WeaponSlot_C* CallFunc_Array_Get_Item);// 0x6db6d0e64001
	void UpdateButtonWidgets(bool IpIsSprint, bool IpIsAiming, bool IpIsCrouch, bool IpCanPickup);// 0x6db4d0e64001
	static void RemoveTouchInfo_FingerIndex(byte FingerIndex, out S_WidgetTouchInfo[] RemoveTouchInfoAry, int[] LocalArrayIndexAry, S_WidgetTouchInfo[] LocalTouchInfoAry, S_WidgetTouchInfo LocalTouchInfo, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, S_WidgetTouchInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2dffb0d0ed402e
	void UpdateDebugTouchPoint(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int CallFunc_Array_Length_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xffffff82d0be4000
	void UpdatePickupButton(bool IpCanPickup);// 0xffffffffca5d1de0
	static void SetPosition(Widget* IpWidget, Vector2D IpPoint, Vector2D LocalScreenSize, Vector2D CallFunc_GetScreenSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors CallFunc_GetAnchors_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue);// 0x6db5d0e64001
	Vector2D GetScreenSize(Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x6dbbd0e64001
	void ConverToWidgetLoc(Vector Location, out Vector2D WidgetLoc2D, float CallFunc_CalculateWidgetSizeScaledbyDPI_SizeScaledbyDPI, Vector CallFunc_Divide_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x6d9ad0e64001
	void PickWidget(Vector PickLoc, out Widget*[] IgnoreWidgetAry, out bool IsPick, out Widget*[] ResultWidgetAry, Widget*[] LocalWidgetAry, Widget* LocalWidget, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsPointInButton_Result, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Max_ReturnValue);// 0x6da8d0e64001
	void FindTouchInfo_FingerIndex(byte FingerIndex, out bool IsFind, out S_WidgetTouchInfo Result, out int ResultIndex, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6dacd0e64001
	static void IsPointInButton(Vector IpPoint, Widget* IpButtonRef, out bool Result, Vector2D LocalSize, Vector2D LocalPosition, Vector2D LocalAnchorMinPoint, Vector2D LocalScreenSize, Vector LocalPoint, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors CallFunc_GetAnchors_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_GetScreenSize_ReturnValue, float CallFunc_CalculateWidgetSizeScaledbyDPI_SizeScaledbyDPI, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_CalculateWidgetSizeScaledbyDPI_SizeScaledbyDPI, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_CalculateWidgetSizeScaledbyDPI_SizeScaledbyDPI, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_CalculateWidgetSizeScaledbyDPI_SizeScaledbyDPI, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffff82d0be4000
	void CalculateWidgetSizeScaledbyDPI(out float SizeScaledbyDPI, float CallFunc_GetViewportScale_ReturnValue);// 0x6da7d0e64001
	void FindTouchInfo_ButtonRef(Widget* WidgetRef, out bool IsFind, out S_WidgetTouchInfo Result, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x6da9d0e64001
	void RemoveTouchInfo(Widget* IpWidget, byte FingerIndex, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d98d0e64001
	void FindTouchInfo(Button* ButtonRef, byte FingerIndex, out bool IsFind, out S_WidgetTouchInfo Result, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, S_WidgetTouchInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffff91d0be4002
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x6da6d0e64001
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0xffffffffca5d1b40
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0xffffffffca5d3200
	void Construct();// 0xffffffffca5cf220
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6dabd0e64001
	void BndEvt__Button_Fire_Left_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x6da1d0e64001
	void BndEvt__Button_Fire_Left_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x6d99d0e64001
	void BndEvt__Button_Reload_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x6d9fd0e64001
	void BndEvt__Button_Jump_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x6da5d0e64001
	void BndEvt__Button_Crouch_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x6da4d0e64001
	void BndEvt__Button_Aim_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0xffffff82d0be4000
	void BndEvt__Button_Jump_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();// 0x6d9bd0e64001
	void BndEvt__Button_Crouch_K2Node_ComponentBoundEvent_9_OnButtonReleasedEvent__DelegateSignature();// 0x6c27d0e64001
	void TickSprintInput();// 0x6d9cd0e64001
	void BndEvt__Button_Pickup_K2Node_ComponentBoundEvent_10_OnButtonPressedEvent__DelegateSignature();// 0xffffff82d0be4000
	void BndEvt__WD_WeaponSlot1_K2Node_ComponentBoundEvent_13_OnPressed__DelegateSignature();// 0xffffffffca5ca360
	void BndEvt__WD_WeaponSlot2_K2Node_ComponentBoundEvent_14_OnPressed__DelegateSignature();// 0xffffffffca5d2be0
	void BndEvt__WD_VirtualJoystick_K2Node_ComponentBoundEvent_11_AxisForward__DelegateSignature(float Axis, float Angle, float MoveLength);// 0x6d90d0e64001
	void BndEvt__WD_VirtualJoystick_K2Node_ComponentBoundEvent_12_AxisRight__DelegateSignature(float Axis);// 0x6d94d0e64001
	void BndEvt__WD_TouchDragArea_K2Node_ComponentBoundEvent_15_AxisLookUp__DelegateSignature(float Axis);// 0x5a4dd0e64001
	void BndEvt__WD_TouchDragArea_K2Node_ComponentBoundEvent_16_AxisTurn__DelegateSignature(float Axis);// 0x6da2d0e64001
	void BndEvt__Button_Pause_K2Node_ComponentBoundEvent_17_OnButtonClickedEvent__DelegateSignature();// 0x6c23d0e64001
	void BndEvt__Widget_TouchButton_K2Node_ComponentBoundEvent_18_OnPressed__DelegateSignature();// 0x6c1ed0e64001
	void BndEvt__Widget_TouchButton-Fire_K2Node_ComponentBoundEvent_19_OnReleased__DelegateSignature();// 0x6d8fd0e64001
	void BndEvt__Widget_TouchButton-Fire_K2Node_ComponentBoundEvent_20_OnDragMove__DelegateSignature(float X, float Y);// 0x6d8ed0e64001
	void BndEvt__Widget_GrenadeItemSlotAry_K2Node_ComponentBoundEvent_3_OnPressed_UseItemSlotButton__DelegateSignature(int IpSlotIndex);// 0x6d8dd0e64001
	void BndEvt__Button_Aim_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0xffffffffca5ccd60
	void BndEvt__WD_WeaponSlot3_K2Node_ComponentBoundEvent_21_OnPressed__DelegateSignature();// 0x6bfcd0e64001
	void BndEvt__Button_ShiftWalk_K2Node_ComponentBoundEvent_22_OnButtonPressedEvent__DelegateSignature();// 0x6c19d0e64001
	void BndEvt__Button_Aim_1_K2Node_ComponentBoundEvent_23_OnButtonPressedEvent__DelegateSignature();// 0x6d84d0e64001
	void BndEvt__Button_Aim_1_K2Node_ComponentBoundEvent_24_OnButtonReleasedEvent__DelegateSignature();// 0x6d86d0e64001
	void BndEvt__Button_Switch_K2Node_ComponentBoundEvent_25_OnButtonPressedEvent__DelegateSignature();// 0xffffffffca5c9c60
	void BndEvt__Button_Inspect_K2Node_ComponentBoundEvent_27_OnButtonPressedEvent__DelegateSignature();// 0x6bf8d0e64001
	void BndEvt__Button_Inspect_1_K2Node_ComponentBoundEvent_26_OnButtonPressedEvent__DelegateSignature();// 0x6d87d0e64001
	void SetButtonPosition();// 0xffffffffca5cc900
	void BndEvt__Button_Switch_1_K2Node_ComponentBoundEvent_28_OnButtonPressedEvent__DelegateSignature();// 0xffffff86d0be4730
	void BndEvt__Button_709_K2Node_ComponentBoundEvent_32_OnButtonPressedEvent__DelegateSignature();// 0x6d82d0e64001
	void BndEvt__Button_Switch_2_K2Node_ComponentBoundEvent_33_OnButtonHoverEvent__DelegateSignature();// 0x6d81d0e64001
	void BndEvt__Widget_TouchButtonAim_K2Node_ComponentBoundEvent_34_OnPressed__DelegateSignature();// 0x6d80d0e64001
	void BndEvt__Widget_TouchButtonAim_K2Node_ComponentBoundEvent_35_OnReleased__DelegateSignature();// 0xffffffffca5c9b80
	void BndEvt__Widget_TouchButtonAim_K2Node_ComponentBoundEvent_36_OnDragMove__DelegateSignature(float X, float Y);// 0x6d7ed0e64001
	void BndEvt__Widget_MobileShootingMain_Widget_TouchButtonJump_K2Node_ComponentBoundEvent_30_OnPressed__DelegateSignature();// 0x6d7dd0e64001
	void BndEvt__Widget_MobileShootingMain_Widget_TouchButtonJump_K2Node_ComponentBoundEvent_31_OnReleased__DelegateSignature();// 0x6d7cd0e64001
	void BndEvt__Widget_MobileShootingMain_Widget_TouchButtonJump_K2Node_ComponentBoundEvent_37_OnDragMove__DelegateSignature(float X, float Y);// 0x6d83d0e64001
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0x5a54d0e64001
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x5a53d0e64001
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0x5a52d0e64001
	void UpdateCrouch(bool IsCrouch);// 0x5a51d0e64001
	void UpdateAim(bool IsAim);// 0xffffffffc0d5f920
	void UpdateSprint(bool IsSprint);// 0x5a4fd0e64001
	static void ExecuteUbergraph_Widget_MobileShootingMain(int EntryPoint, bool K2Node_CustomEvent_IsSprint, bool CallFunc_FindTouchInfo_ButtonRef_IsFind, S_WidgetTouchInfo CallFunc_FindTouchInfo_ButtonRef_Result, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Widget* CallFunc_Array_Get_Item, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Widget_WeaponSlot_C* K2Node_DynamicCast_AsWidget_Weapon_Slot, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, float K2Node_ComponentBoundEvent_Axis, float K2Node_ComponentBoundEvent_Angle, float K2Node_ComponentBoundEvent_MoveLength, float K2Node_ComponentBoundEvent_Axis, float K2Node_ComponentBoundEvent_Axis, float K2Node_ComponentBoundEvent_Axis, float K2Node_ComponentBoundEvent_X, float K2Node_ComponentBoundEvent_Y, int K2Node_ComponentBoundEvent_IpSlotIndex, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BuyWidget_C* CallFunc_Create_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, LeaderBoard_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float K2Node_ComponentBoundEvent_X, float K2Node_ComponentBoundEvent_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float K2Node_ComponentBoundEvent_X, float K2Node_ComponentBoundEvent_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_ConverToWidgetLoc_WidgetLoc2D, int CallFunc_GetChildrenCount_ReturnValue, Vector2D CallFunc_ConverToWidgetLoc_WidgetLoc2D, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, interface classNone K2Node_DynamicCast_AsTouch_Input_Interface, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, S_WidgetTouchInfo[] CallFunc_RemoveTouchInfo_FingerIndex_RemoveTouchInfoAry, S_WidgetTouchInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int Temp_int_Variable, interface classNone K2Node_DynamicCast_AsTouch_Input_Interface, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsTouch_Input_Interface, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector2D CallFunc_ConverToWidgetLoc_WidgetLoc2D, Vector2D CallFunc_ConverToWidgetLoc_WidgetLoc2D, S_WidgetTouchInfo K2Node_MakeStruct_S_WidgetTouchInfo, int CallFunc_Array_Add_ReturnValue, Widget*[] K2Node_MakeArray_Array, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, bool CallFunc_PickWidget_IsPick, Widget*[] CallFunc_PickWidget_ResultWidgetAry, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, int[] CallFunc_FindTouchInfoAry_AryIndex_Result, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_CustomEvent_IsCrouch, bool K2Node_CustomEvent_IsAim);// 0x5a4ed0e64001
	void OnPressed_Button_Setting__DelegateSignature();// 0x6d92d0e64001
	void OnPressed_Button_Inspect__DelegateSignature();// 0x5a4cd0e64001
	void OnPressed_ButtonSwitch__DelegateSignature();// 0x5a4bd0e64001
	void OnReleased_Button_Bomb__DelegateSignature();// 0x5a4ad0e64001
	void OnPressed_Button_Bomb__DelegateSignature();// 0x5a49d0e64001
	void OnPressed_Button_Walk__DelegateSignature();// 0x5a48d0e64001
	void On Pressed Button Weapon Slot3__DelegateSignature();// 0x5a46d0e64001
	void OnReleased_Button_Aim__DelegateSignature();// 0xffffffffc47f70a0
	void OnPressed_Button_GrenadeSlot__DelegateSignature(int IpSlotIndex);// 0x5a45d0e64001
	void OnPressed_Button_WeaponSlot2__DelegateSignature();// 0x5a44d0e64001
	void OnPressed_Button_WeaponSlot1__DelegateSignature();// 0x5a43d0e64001
	void OnPressed_Button_Pickup__DelegateSignature();// 0x5a42d0e64001
	void OnEnd_SprintInput__DelegateSignature();// 0x5a41d0e64001
	void OnStart_SprintInput__DelegateSignature();// 0x5a40d0e64001
	void OnReleased_Button_Crouch__DelegateSignature();// 0x5a3fd0e64001
	void OnReleased_Button_Jump__DelegateSignature();// 0x5a3ed0e64001
	void OnPressed_Button_Aim__DelegateSignature();// 0x5a3dd0e64001
	void OnPressed_Button_Crouch__DelegateSignature();// 0x5a3cd0e64001
	void OnPressed_Button_Jump__DelegateSignature();// 0x5a3bd0e64001
	void OnPressed_Button_Reload__DelegateSignature();// 0x5a3ad0e64001
	void OnReleased_Button_Fire__DelegateSignature();// 0x5a39d0e64001
	void OnPressed_Button_Fire__DelegateSignature();// 0x5a38d0e64001
	void InputTouch Axis Fire__DelegateSignature();// 0x5a37d0e64001
	void InputTouch Axis Turn__DelegateSignature(float AxisValue);// 0x5a36d0e64001
	void InputTouch Axis LookUp__DelegateSignature(float AxisValue);// 0x5a35d0e64001
	void InputTouch Axis MoveRight__DelegateSignature(float AxisValue);// 0x5a34d0e64001
	void InputTouch Axis MoveForward__DelegateSignature(float AxisValue, float JoystickAngle, float JoystickMoveLength);// 0xffffffffc5e82cc0
	void OnAxis_MoveVirtualJoystick__DelegateSignature();// 0xffffffffc0d5d000

--------------------------------
Class: Widget_WeaponSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button_WeaponSlot;//[Offset: 0x268, Size: 0x8]
	Image* Image_BG;//[Offset: 0x270, Size: 0x8]
	Image* Image_Normal;//[Offset: 0x278, Size: 0x8]
	Image* Image_Selected;//[Offset: 0x280, Size: 0x8]
	Image* Image_WeaponIcon;//[Offset: 0x288, Size: 0x8]
	TextBlock* Text_Ammo;//[Offset: 0x290, Size: 0x8]
	Texture2D* IconTexture;//[Offset: 0x298, Size: 0x8]
	delegate OnPressed;//[Offset: 0x2a0, Size: 0x10]
	bool ShowAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	float Left;//[Offset: 0x2b4, Size: 0x4]
	float Top;//[Offset: 0x2b8, Size: 0x4]
	float Right;//[Offset: 0x2bc, Size: 0x4]
	float Bottom;//[Offset: 0x2c0, Size: 0x4]
	void UpdateWidget(Texture2D* IpWeaponIcon, int IpAmmoCount, int IpTotalAmmoCount, bool IpSelected, bool CallFunc_IsValid_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x58cfd0e64001
	void BndEvt__Button_WeaponSlot_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x58ced0e64001
	void PreConstruct(bool IsDesignTime);// 0x58cdd0e64001
	void ExecuteUbergraph_Widget_WeaponSlot(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool K2Node_Event_IsDesignTime);// 0xffffffffc73dfae0
	void OnPressed__DelegateSignature();// 0xffffffffc73d6540

--------------------------------
Class: S_WidgetTouchInfo
	Widget* WidgetRef_10_551F878F46CA8385664E348F72AC4738;//[Offset: 0x0, Size: 0x8]
	byte FingerIndex_6_BB6DAD1B4605A77D1D23D298EB696140;//[Offset: 0x8, Size: 0x1]
	Vector PressedLocation_14_8A28745D473F0B75B034F9AB2204333C;//[Offset: 0xc, Size: 0xc]
	Vector Location_8_F0D8D8514828C9676D22DE93D01BE5F2;//[Offset: 0x18, Size: 0xc]
	Vector2D PressedLoc2D_WidgetSpace_19_2936EEF943BEE20C579CF4977D086B64;//[Offset: 0x24, Size: 0x8]
	Vector2D Loc2D_WidgetSpace_21_DAF1CBA24DD15BB627053AB20F78BAFC;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: BuyWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button;//[Offset: 0x268, Size: 0x8]
	Button* Button;//[Offset: 0x270, Size: 0x8]
	Button* Button;//[Offset: 0x278, Size: 0x8]
	Button* Button;//[Offset: 0x280, Size: 0x8]
	Button* Button;//[Offset: 0x288, Size: 0x8]
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Button* Button;//[Offset: 0x298, Size: 0x8]
	Button* Button;//[Offset: 0x2a0, Size: 0x8]
	Button* Button;//[Offset: 0x2a8, Size: 0x8]
	Button* Button;//[Offset: 0x2b0, Size: 0x8]
	Button* Button;//[Offset: 0x2b8, Size: 0x8]
	Button* Button;//[Offset: 0x2c0, Size: 0x8]
	Button* Button;//[Offset: 0x2c8, Size: 0x8]
	Button* Button;//[Offset: 0x2d0, Size: 0x8]
	Button* Button;//[Offset: 0x2d8, Size: 0x8]
	Button* Button;//[Offset: 0x2e0, Size: 0x8]
	Button* Button;//[Offset: 0x2e8, Size: 0x8]
	Button* Button;//[Offset: 0x2f0, Size: 0x8]
	Button* Button;//[Offset: 0x2f8, Size: 0x8]
	Button* Button;//[Offset: 0x300, Size: 0x8]
	Button* Button;//[Offset: 0x308, Size: 0x8]
	Button* Button;//[Offset: 0x310, Size: 0x8]
	Button* Button;//[Offset: 0x318, Size: 0x8]
	Button* Button;//[Offset: 0x320, Size: 0x8]
	Button* Button;//[Offset: 0x328, Size: 0x8]
	Button* Button;//[Offset: 0x330, Size: 0x8]
	Button* Button;//[Offset: 0x338, Size: 0x8]
	Button* Button;//[Offset: 0x340, Size: 0x8]
	Button* Button;//[Offset: 0x348, Size: 0x8]
	Button* Button;//[Offset: 0x350, Size: 0x8]
	Button* Button;//[Offset: 0x358, Size: 0x8]
	Button* Button;//[Offset: 0x360, Size: 0x8]
	Button* Button;//[Offset: 0x368, Size: 0x8]
	Button* Button;//[Offset: 0x370, Size: 0x8]
	Button* Button;//[Offset: 0x378, Size: 0x8]
	Image* Image;//[Offset: 0x380, Size: 0x8]
	Image* Image;//[Offset: 0x388, Size: 0x8]
	Image* Image;//[Offset: 0x390, Size: 0x8]
	Image* Image;//[Offset: 0x398, Size: 0x8]
	Image* Image;//[Offset: 0x3a0, Size: 0x8]
	Image* Image;//[Offset: 0x3a8, Size: 0x8]
	Image* Image;//[Offset: 0x3b0, Size: 0x8]
	Image* Image;//[Offset: 0x3b8, Size: 0x8]
	Image* Image;//[Offset: 0x3c0, Size: 0x8]
	Image* Image;//[Offset: 0x3c8, Size: 0x8]
	Image* Image;//[Offset: 0x3d0, Size: 0x8]
	Image* Image;//[Offset: 0x3d8, Size: 0x8]
	Image* Image;//[Offset: 0x3e0, Size: 0x8]
	Image* Image;//[Offset: 0x3e8, Size: 0x8]
	Image* Image;//[Offset: 0x3f0, Size: 0x8]
	Image* Image;//[Offset: 0x3f8, Size: 0x8]
	Image* Image;//[Offset: 0x400, Size: 0x8]
	Image* Image;//[Offset: 0x408, Size: 0x8]
	Image* Image;//[Offset: 0x410, Size: 0x8]
	Image* Image;//[Offset: 0x418, Size: 0x8]
	Image* Image;//[Offset: 0x420, Size: 0x8]
	Image* Image;//[Offset: 0x428, Size: 0x8]
	Image* Image;//[Offset: 0x430, Size: 0x8]
	Image* Image;//[Offset: 0x438, Size: 0x8]
	Image* Image;//[Offset: 0x440, Size: 0x8]
	Image* Image;//[Offset: 0x448, Size: 0x8]
	Image* Image;//[Offset: 0x450, Size: 0x8]
	Image* Image;//[Offset: 0x458, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x460, Size: 0x8]
	VerticalBox* VerticalBox;//[Offset: 0x468, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x470, Size: 0x8]
	CSGOCharacterBase_C* OwningCharacter;//[Offset: 0x478, Size: 0x8]
	bool CanBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	enum GetVisibility();// 0xffffffffca5d18a0
	bool GetbIsEnabled(bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffffca5d3120
	enum GetVisibility();// 0x6c29d0e64001
	enum GetVisibility();// 0x6c28d0e64001
	enum GetVisibility();// 0x6c08d0e64001
	bool GetbIsEnabled(bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6daed0e64001
	bool GetbIsEnabled(bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffffca5cf3e0
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c24d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffffca5c9aa0
	enum GetVisibility();// 0x6c22d0e64001
	enum GetVisibility();// 0x6c21d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c20d0e64001
	bool GetbIsEnabled();// 0x6c1fd0e64001
	bool GetbIsEnabled(bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffffca5c7880
	bool GetbIsEnabled(bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float K2Node_Select_Default, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c1dd0e64001
	FText GetText(bool CallFunc_IsValid_ReturnValue);// 0x6c1cd0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c17d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c1ad0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6da0d0e64001
	enum GetVisibility();// 0x6c14d0e64001
	enum GetVisibility();// 0x6c18d0e64001
	enum GetVisibility();// 0x6c16d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c0ed0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6bf3d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffffca5cec00
	enum GetVisibility();// 0x6c12d0e64001
	enum GetVisibility();// 0x6c11d0e64001
	enum GetVisibility();// 0x6c10d0e64001
	enum GetVisibility();// 0x6c0fd0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6bf6d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c0dd0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c0cd0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c0bd0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c0ad0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c09d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffff90d0be4002
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c05d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c04d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c03d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c02d0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6c01d0e64001
	enum GetVisibility();// 0x6bffd0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6bfdd0e64001
	enum GetVisibility(bool CallFunc_IsValid_ReturnValue);// 0x6d7bd0e64001
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class WeaponBase_C CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d89d0e64001
	void BndEvt__Button_3_K2Node_ComponentBoundEvent_9_OnButtonPressedEvent__DelegateSignature();// 0xffffffffca5cc580
	void BndEvt__Button_6_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0xffffffffca5d0720
	void BndEvt__Button_8_K2Node_ComponentBoundEvent_10_OnButtonPressedEvent__DelegateSignature();// 0x6d8ad0e64001
	void BndEvt__Button_9_K2Node_ComponentBoundEvent_11_OnButtonPressedEvent__DelegateSignature();// 0x6bfbd0e64001
	void BndEvt__Button_11_K2Node_ComponentBoundEvent_12_OnButtonPressedEvent__DelegateSignature();// 0x6bfad0e64001
	void BndEvt__Button_5_K2Node_ComponentBoundEvent_6_OnButtonPressedEvent__DelegateSignature();// 0x6bf9d0e64001
	void BndEvt__Button_12_K2Node_ComponentBoundEvent_13_OnButtonPressedEvent__DelegateSignature();// 0x6bf4d0e64001
	void BndEvt__Button_13_K2Node_ComponentBoundEvent_14_OnButtonPressedEvent__DelegateSignature();// 0x6bf7d0e64001
	void BndEvt__Button_14_K2Node_ComponentBoundEvent_15_OnButtonPressedEvent__DelegateSignature();// 0x6beed0e64001
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0xffffff82d0be4000
	void BndEvt__Button_15_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature();// 0xffffffffca5cce40
	void BndEvt__Button_16_K2Node_ComponentBoundEvent_17_OnButtonPressedEvent__DelegateSignature();// 0x6c13d0e64001
	void BndEvt__Button_17_K2Node_ComponentBoundEvent_18_OnButtonPressedEvent__DelegateSignature();// 0x6bf2d0e64001
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x6bf1d0e64001
	void BndEvt__Button_10_K2Node_ComponentBoundEvent_19_OnButtonPressedEvent__DelegateSignature();// 0x6bf0d0e64001
	void BndEvt__Button_19_K2Node_ComponentBoundEvent_20_OnButtonPressedEvent__DelegateSignature();// 0x6befd0e64001
	void BndEvt__Button_18_K2Node_ComponentBoundEvent_21_OnButtonPressedEvent__DelegateSignature();// 0x598ed0e64001
	void BndEvt__Button_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x598dd0e64001
	void BndEvt__Button_80_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0xffffffffc0d57b20
	void BndEvt__Button_7_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();// 0x598bd0e64001
	void BndEvt__Button_472_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x598ad0e64001
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x5989d0e64001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x5988d0e64001
	void Construct();// 0x5987d0e64001
	void BndEvt__Button_20_K2Node_ComponentBoundEvent_22_OnButtonPressedEvent__DelegateSignature();// 0x5986d0e64001
	void BndEvt__Button_27_K2Node_ComponentBoundEvent_23_OnButtonPressedEvent__DelegateSignature();// 0x5985d0e64001
	void BndEvt__Button_21_K2Node_ComponentBoundEvent_24_OnButtonPressedEvent__DelegateSignature();// 0x5984d0e64001
	void BndEvt__Button_22_K2Node_ComponentBoundEvent_25_OnButtonPressedEvent__DelegateSignature();// 0x5983d0e64001
	void BndEvt__Button_23_K2Node_ComponentBoundEvent_26_OnButtonPressedEvent__DelegateSignature();// 0x5982d0e64001
	void BndEvt__Button_24_K2Node_ComponentBoundEvent_27_OnButtonPressedEvent__DelegateSignature();// 0x5981d0e64001
	void BndEvt__Button_25_K2Node_ComponentBoundEvent_28_OnButtonPressedEvent__DelegateSignature();// 0x5980d0e64001
	void BndEvt__Button_26_K2Node_ComponentBoundEvent_29_OnButtonPressedEvent__DelegateSignature();// 0x597fd0e64001
	void BndEvt__Button_28_K2Node_ComponentBoundEvent_30_OnButtonPressedEvent__DelegateSignature();// 0x597ed0e64001
	void BndEvt__BuyWidget_Button_29_K2Node_ComponentBoundEvent_31_OnButtonPressedEvent__DelegateSignature();// 0x597dd0e64001
	void BndEvt__BuyWidget_Button_30_K2Node_ComponentBoundEvent_32_OnButtonPressedEvent__DelegateSignature();// 0x597cd0e64001
	void BndEvt__BuyWidget_Button_31_K2Node_ComponentBoundEvent_33_OnButtonPressedEvent__DelegateSignature();// 0x7d021bc6b1264000
	void BndEvt__BuyWidget_Button_32_K2Node_ComponentBoundEvent_34_OnButtonPressedEvent__DelegateSignature();// 0x597ad0e64001
	void ExecuteUbergraph_BuyWidget(int EntryPoint, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x5960d0e64001

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x11c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x2337d0be4041
	void SetActiveWidget(Widget* Widget);// 0x2336d0be4041
	Widget* GetWidgetAtIndex(int Index);// 0x2335d0be4041
	int GetNumWidgets();// 0x2334d0be4041
	int GetActiveWidgetIndex();// 0x2333d0be4041
	Widget* GetActiveWidget();// 0x2332d0be4041

--------------------------------
Class: Widget_UseItemSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button_UseItemSlot;//[Offset: 0x268, Size: 0x8]
	Image* Image_BG;//[Offset: 0x270, Size: 0x8]
	Image* Image_Icon;//[Offset: 0x278, Size: 0x8]
	Image* Image_Selected;//[Offset: 0x280, Size: 0x8]
	TextBlock* TextBlock_Count;//[Offset: 0x288, Size: 0x8]
	delegate OnPressed_UseItemSlot;//[Offset: 0x290, Size: 0x10]
	int SlotIndex;//[Offset: 0x2a0, Size: 0x4]
	void UpdateWidget(int SlotIndex, Texture2D* IconTexture, int ItemCount, bool InIsSelect);// 0x590fd0e64001
	void BndEvt__Button_UseItemSlot_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x590ed0e64001
	static void ExecuteUbergraph_Widget_UseItemSlot(int EntryPoint, int K2Node_CustomEvent_SlotIndex, Texture2D* K2Node_CustomEvent_IconTexture, int K2Node_CustomEvent_ItemCount, bool K2Node_CustomEvent_InIsSelect, FText CallFunc_Conv_IntToText_ReturnValue);// 0xffffffffc73e1980
	void OnPressed_UseItemSlot__DelegateSignature(int IpSlotIndex);// 0xffffffffc73e2080

--------------------------------
Class: Widget_VirtualJoystick_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	Image* Image;//[Offset: 0x278, Size: 0x8]
	float JoystickAngle;//[Offset: 0x280, Size: 0x4]
	float MaxMoveRadius;//[Offset: 0x284, Size: 0x4]
	Vector2D PressedPosition;//[Offset: 0x288, Size: 0x8]
	Vector2D LPressedPostion;//[Offset: 0x290, Size: 0x8]
	delegate AxisForward;//[Offset: 0x298, Size: 0x10]
	delegate AxisRight;//[Offset: 0x2a8, Size: 0x10]
	Vector2D LastMovePosition;//[Offset: 0x2b8, Size: 0x8]
	LinearColor OriginColor_Image2;//[Offset: 0x2c0, Size: 0x10]
	void UpdateAxis(Vector2D IpCenterPoint, Vector2D IpMovePoint, float LocalJoystickMoveLength, Vector2D LocalDirFromCenter, Vector2D LocalMoveDisVector, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_VSize2D_ReturnValue, float CallFunc_DegAtan2_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x58ebd0e64001
	void UpdatePosition(Vector2D IpCenterPoint, Vector2D IpMovePoint, float LocalJoystickMoveLength, Vector2D LocalDirFromCenter, Vector2D LocalMoveDisVec, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_VSize2D_ReturnValue, float CallFunc_DegAtan2_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue);// 0x58ead0e64001
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0x58e9d0e64001
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x58e8d0e64001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffffffc73e2860
	void Construct();// 0x58e6d0e64001
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x58e5d0e64001
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x58e4d0e64001
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0x58e3d0e64001
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0x58e2d0e64001
	void ExecuteUbergraph_Widget_VirtualJoystick(int EntryPoint, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors CallFunc_GetAnchors_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D CallFunc_GetSize_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, GameInstance* CallFunc_GetGameInstance_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors CallFunc_GetAnchors_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue);// 0x58e1d0e64001
	void AxisRight__DelegateSignature(float Axis);// 0xffffffffc73dd380
	void AxisForward__DelegateSignature(float Axis, float Angle, float MoveLength);// 0x58d0d0e64001

--------------------------------
Class: Widget_UseItemSlotAry_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Widget_UseItemExpandButton_C* Widget_UseItemExpandButton;//[Offset: 0x268, Size: 0x8]
	Widget_UseItemSlot_C* Widget_UseItemSlot;//[Offset: 0x270, Size: 0x8]
	Widget_UseItemSlot_C* Widget_UseItemSlot;//[Offset: 0x278, Size: 0x8]
	Widget_UseItemSlot_C* Widget_UseItemSlot;//[Offset: 0x280, Size: 0x8]
	Widget_UseItemSlot_C* Widget_UseItemSlot;//[Offset: 0x288, Size: 0x8]
	bool IsExpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	delegate OnPressed_UseItemSlotButton;//[Offset: 0x298, Size: 0x10]
	void UpdateWidgets(int IpSelectSlotIndex, Texture2D* IpIconTexture1, int IpItemCount1, Texture2D* IpIconTexture2, int IpItemCount2, Texture2D* IpIconTexture3, int IpItemCount3, Texture2D* IpIconTexture4, int IpItemCount4, bool InIsSelect, bool CanExpand, Widget_UseItemSlot_C*[] LocalWidgetAry, int LocalAryIndex, int LocalAddIndex, int[] LocalItemCountAry, Texture2D*[] LocalIconTextureAry, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Texture2D* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, Widget_UseItemSlot_C*[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array, Texture2D*[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Get_Item, Texture2D* CallFunc_Array_Get_Item, Widget_UseItemSlot_C* CallFunc_Array_Get_Item, Widget_UseItemSlot_C* CallFunc_Array_Get_Item, Texture2D* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Get_Item, Texture2D* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x5900d0e64001
	void BndEvt__Widget_UseItemExpandButton_K2Node_ComponentBoundEvent_0_OnClick_UseItemExpand__DelegateSignature();// 0x58ffd0e64001
	void BndEvt__Widget_UseItemSlot_1_K2Node_ComponentBoundEvent_5_OnPressed_UseItemSlot__DelegateSignature(int IpSlotIndex);// 0x58fed0e64001
	void BndEvt__Widget_UseItemSlot_2_K2Node_ComponentBoundEvent_6_OnPressed_UseItemSlot__DelegateSignature(int IpSlotIndex);// 0x58fdd0e64001
	void BndEvt__Widget_UseItemSlot_3_K2Node_ComponentBoundEvent_7_OnPressed_UseItemSlot__DelegateSignature(int IpSlotIndex);// 0x58fcd0e64001
	void BndEvt__Widget_UseItemSlot_4_K2Node_ComponentBoundEvent_8_OnPressed_UseItemSlot__DelegateSignature(int IpSlotIndex);// 0x58fbd0e64001
	void ExecuteUbergraph_Widget_UseItemSlotAry(int EntryPoint, int K2Node_ComponentBoundEvent_IpSlotIndex, bool CallFunc_Not_PreBool_ReturnValue, int K2Node_ComponentBoundEvent_IpSlotIndex, int K2Node_ComponentBoundEvent_IpSlotIndex, int K2Node_ComponentBoundEvent_IpSlotIndex);// 0xffffffffc73e2240
	void OnPressed_UseItemSlotButton__DelegateSignature(int IpSlotIndex);// 0xffffffffc73df920

--------------------------------
Class: Widget_UseItemExpandButton_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* Button_UseItemExpand;//[Offset: 0x268, Size: 0x8]
	Texture2D* IconTexture;//[Offset: 0x270, Size: 0x8]
	delegate OnClick_UseItemExpand;//[Offset: 0x278, Size: 0x10]
	void PreConstruct(bool IsDesignTime);// 0x572dd0e64001
	void BndEvt__Button_UseItemExpand_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xffffffffc0ced8c0
	void ExecuteUbergraph_Widget_UseItemExpandButton(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffffffc0cf1520
	void OnClick_UseItemExpand__DelegateSignature();// 0xffffffffc0cef140

--------------------------------
Class: Widget_TouchButton_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image_BG;//[Offset: 0x268, Size: 0x8]
	Image* Image_Normal;//[Offset: 0x270, Size: 0x8]
	Image* Image_Pressed;//[Offset: 0x278, Size: 0x8]
	Vector2D PressedPosition;//[Offset: 0x280, Size: 0x8]
	Vector2D PrevMovedPosition;//[Offset: 0x288, Size: 0x8]
	delegate OnPressed;//[Offset: 0x290, Size: 0x10]
	delegate OnReleased;//[Offset: 0x2a0, Size: 0x10]
	delegate OnDragMove;//[Offset: 0x2b0, Size: 0x10]
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x735cd0e64001
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x735bd0e64001
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0xffffff82d0be4002
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x7359d0e64001
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0x7358d0e64001
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0x7357d0e64001
	void Construct();// 0x7356d0e64001
	void ExecuteUbergraph_Widget_TouchButton(int EntryPoint, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x7355d0e64001
	void OnDragMove__DelegateSignature(float X, float Y);// 0x7348d0e64001
	void OnReleased__DelegateSignature();// 0xffffffffc73e2f60
	void OnPressed__DelegateSignature();// 0xffffffffc73dc9e0

--------------------------------
Class: Widget_TouchButtonAim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image_BG;//[Offset: 0x268, Size: 0x8]
	Image* Image_Normal;//[Offset: 0x270, Size: 0x8]
	Image* Image_Pressed;//[Offset: 0x278, Size: 0x8]
	Vector2D PressedPosition;//[Offset: 0x280, Size: 0x8]
	Vector2D PrevMovedPosition;//[Offset: 0x288, Size: 0x8]
	delegate OnPressed;//[Offset: 0x290, Size: 0x10]
	delegate OnReleased;//[Offset: 0x2a0, Size: 0x10]
	delegate OnDragMove;//[Offset: 0x2b0, Size: 0x10]
	static SlateBrush Get_Image_Normal_Brush(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x593fd0e64001
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x593ed0e64001
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x593dd0e64001
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0x593cd0e64001
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x593bd0e64001
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0x593ad0e64001
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0x5939d0e64001
	void Construct();// 0x5938d0e64001
	void ExecuteUbergraph_Widget_TouchButtonAim(int EntryPoint, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0x5937d0e64001
	void OnDragMove__DelegateSignature(float X, float Y);// 0x5936d0e64001
	void OnReleased__DelegateSignature();// 0xffffffffc73e3ba0
	void OnPressed__DelegateSignature();// 0xffffffffc73df3e0

--------------------------------
Class: Widget_TouchButtonJump_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image_BG;//[Offset: 0x268, Size: 0x8]
	Image* Image_Normal;//[Offset: 0x270, Size: 0x8]
	Image* Image_Pressed;//[Offset: 0x278, Size: 0x8]
	Vector2D PressedPosition;//[Offset: 0x280, Size: 0x8]
	Vector2D PrevMovedPosition;//[Offset: 0x288, Size: 0x8]
	delegate OnPressed;//[Offset: 0x290, Size: 0x10]
	delegate OnReleased;//[Offset: 0x2a0, Size: 0x10]
	delegate OnDragMove;//[Offset: 0x2b0, Size: 0x10]
	void OnWidgetPressed_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x7347d0e64001
	void OnWidgetReleased_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition);// 0x7346d0e64001
	void OnWidgetMoved_InputTouch(Widget* IpWidgetRef, Vector2D IpPosition, Vector2D IpDelta);// 0x7345d0e64001
	void OnMoved_InputTouch(Vector Location, byte FingerIndex);// 0x7344d0e64001
	void OnReleased_InputTouch(Vector Location, byte FingerIndex);// 0x7343d0e64001
	void OnPressed_InputTouch(Vector Location, byte FingerIndex);// 0x7342d0e64001
	void Construct();// 0x7341d0e64001
	void ExecuteUbergraph_Widget_TouchButtonJump(int EntryPoint, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D K2Node_Event_IpDelta, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Widget* K2Node_Event_IpWidgetRef, Vector2D K2Node_Event_IpPosition, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0x7340d0e64001
	void OnDragMove__DelegateSignature(float X, float Y);// 0x733ed0e64001
	void OnReleased__DelegateSignature();// 0xffffffffc73e3f20
	void OnPressed__DelegateSignature();// 0xffffffffc73e1280

--------------------------------
Class: CSGOGamemodePratice_C.CSGOGamemode_C.MyGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: ScopeWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Cross1;//[Offset: 0x268, Size: 0x8]
	Image* Cross1;//[Offset: 0x270, Size: 0x8]
	Image* Image;//[Offset: 0x278, Size: 0x8]
	Image* Image;//[Offset: 0x280, Size: 0x8]
	Image* Image;//[Offset: 0x288, Size: 0x8]
	Image* Image;//[Offset: 0x290, Size: 0x8]
	Image* Image;//[Offset: 0x298, Size: 0x8]
	Image* Image;//[Offset: 0x2a0, Size: 0x8]
	CSGOCharacterBase_C* Owner;//[Offset: 0x2a8, Size: 0x8]
	CurveVector* crosshaircurve;//[Offset: 0x2b0, Size: 0x8]
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x5037d0e64001
	static void ExecuteUbergraph_ScopeWidget(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetVelocity_ReturnValue, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, float CallFunc_VSize_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetVectorValue_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0xffffffffc37e3d60

--------------------------------
Class: CSGOHUD_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* CrossHairDown;//[Offset: 0x268, Size: 0x8]
	Image* CrossHairLeft;//[Offset: 0x270, Size: 0x8]
	Image* CrossHairRight;//[Offset: 0x278, Size: 0x8]
	Image* CrossHairUp;//[Offset: 0x280, Size: 0x8]
	Image* Dot;//[Offset: 0x288, Size: 0x8]
	Image* DownBar;//[Offset: 0x290, Size: 0x8]
	Border* HitCrossBorder;//[Offset: 0x298, Size: 0x8]
	Border* HitCrossBorder;//[Offset: 0x2a0, Size: 0x8]
	Border* HitCrossBorder;//[Offset: 0x2a8, Size: 0x8]
	Border* HitCrossBorder;//[Offset: 0x2b0, Size: 0x8]
	Image* Image;//[Offset: 0x2b8, Size: 0x8]
	Image* Image;//[Offset: 0x2c0, Size: 0x8]
	Image* Image;//[Offset: 0x2c8, Size: 0x8]
	Image* Image;//[Offset: 0x2d0, Size: 0x8]
	Image* Image;//[Offset: 0x2d8, Size: 0x8]
	Image* Image;//[Offset: 0x2e0, Size: 0x8]
	Image* LeftBar;//[Offset: 0x2e8, Size: 0x8]
	ProgressBar* ProgressBar;//[Offset: 0x2f0, Size: 0x8]
	Image* RightBar;//[Offset: 0x2f8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x300, Size: 0x8]
	Image* UpBar;//[Offset: 0x308, Size: 0x8]
	ScrollBox* VerticalBox_AutoCue;//[Offset: 0x310, Size: 0x8]
	CSGOCharacterBase_C* Owner;//[Offset: 0x318, Size: 0x8]
	float TargetKillIconOpacity;//[Offset: 0x320, Size: 0x4]
	bool ShouldHitBarShort;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	static FText GetText(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x50a4d0e64001
	enum GetVisibility();// 0x50a3d0e64001
	float GetPercent(float CallFunc_Divide_FloatFloat_ReturnValue);// 0x50a2d0e64001
	enum GetVisibility(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x50a1d0e64001
	void Construct();// 0x50a0d0e64001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x509fd0e64001
	void HitBar(int Num);// 0x509ed0e64001
	void Remove();// 0x509dd0e64001
	void HitFeedBack();// 0x509cd0e64001
	void killFeedBack();// 0x509bd0e64001
	void SwitchToDot();// 0x509ad0e64001
	void SwitchToCrosshair();// 0x5099d0e64001
	void SetDotRecoil();// 0x5098d0e64001
	void HideCrosshair();// 0x5097d0e64001
	void AdjustCrosshair(float Length, float Gap, float Thickness);// 0x5096d0e64001
	void LoadCrosshair();// 0x5095d0e64001
	void HitCross(bool HeadShot, bool KillShot);// 0x61a82d0c34100
	void AddAutoCue(FText CueText);// 0x5093d0e64001
	static void ExecuteUbergraph_CSGOHUD(int EntryPoint, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, AutoCueOne_C* CallFunc_Create_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int K2Node_CustomEvent_Num, float CallFunc_Multiply_FloatFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_GetRenderOpacity_ReturnValue, float CallFunc_FInterpTo_Constant_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float K2Node_CustomEvent_Length, float K2Node_CustomEvent_Gap, float K2Node_CustomEvent_Thickness, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CSGOGameInstance_C* K2Node_DynamicCast_AsCSGOGame_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_HeadShot, bool K2Node_CustomEvent_KillShot, bool CallFunc_BooleanOR_ReturnValue, float K2Node_Select_Default, Vector2D CallFunc_MakeVector2D_ReturnValue, LinearColor K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, FText K2Node_CustomEvent_CueText, float CallFunc_FClamp_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0xffffffffc6712cc0

--------------------------------
Class: AutoCueOne_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x268, Size: 0x8]
	FText CueText;//[Offset: 0x270, Size: 0x18]
	FText GetText();// 0xffffffffc37db400
	void Construct();// 0xffffffffc37e2b00
	void ExecuteUbergraph_AutoCueOne(int EntryPoint);// 0xffffffffc37df760

--------------------------------
Class: SmokeWidget_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x260, Size: 0x8]
	CSGOCharacterBase_C* Owner;//[Offset: 0x268, Size: 0x8]
	CurveFloat* Curve;//[Offset: 0x270, Size: 0x8]
	LinearColor GetColorAndOpacity(float CallFunc_GetFloatValue_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor);// 0xffffff82d0be4000

--------------------------------
Class: FlashWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	float FullBlindTime;//[Offset: 0x278, Size: 0x4]
	float HalfBlindTime;//[Offset: 0x27c, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x280, Size: 0x4]
	bool StartHalfBlind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	TimerHandle HalfBlindTimer;//[Offset: 0x288, Size: 0x8]
	LinearColor GetColorAndOpacity(LinearColor K2Node_MakeStruct_LinearColor);// 0x5089d0e64001
	LinearColor GetColorAndOpacity(LinearColor K2Node_MakeStruct_LinearColor);// 0x5088d0e64001
	void Construct();// 0x5087d0e64001
	void Flash(float Full, float Half);// 0x50dbd0e64001
	void HalfBlind();// 0xffffffffc37e2a20
	static void ExecuteUbergraph_FlashWidget(int EntryPoint, bool CallFunc_LessEqual_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_CustomEvent_Full, float K2Node_CustomEvent_Half, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FInterpTo_Constant_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0xffffffffc37d8840

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10]
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10]
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10]
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10]
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10]
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x212dd0be4041
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x212cd0be4041
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x212bd0be4041
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x212ad0be4041
	PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x2129d0be4041

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xa8, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0xac, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0xb0, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0xb4, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0xd8, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0xfc, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x108, Size: 0x4]
	float AnimScale;//[Offset: 0x10c, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x110, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x114, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x118, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x120, Size: 0x8]
	CameraAnimationSequence* AnimSequence;//[Offset: 0x128, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	float OscillatorTimeRemaining;//[Offset: 0x134, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x138, Size: 0x8]
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x180, Size: 0x8]
	MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x1a80d0be4041
	MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x1a7fd0be4041
	void ReceiveStopShake(bool bImmediately);// 0x1a7ed0be4041
	void ReceivePlayShake(float Scale);// 0x1a7dd0be4041
	bool ReceiveIsFinished();// 0x1a7cd0be4041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x1a7bd0be4041

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28]
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28]
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50]

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 0x8]
	float PlayRate;//[Offset: 0x30, Size: 0x4]
	float Scale;//[Offset: 0x34, Size: 0x4]
	float BlendInTime;//[Offset: 0x38, Size: 0x4]
	float BlendOutTime;//[Offset: 0x3c, Size: 0x4]
	float RandomSegmentDuration;//[Offset: 0x40, Size: 0x4]
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0x48, Size: 0x8]
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x2d0, Size: 0x8]
	MovieSceneSequence* Sequence;//[Offset: 0x2d8, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e0, Size: 0xe8]

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	float AspectRatio;//[Offset: 0x38, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x560]
	float PostProcessBlendWeight;//[Offset: 0x5a0, Size: 0x4]
	CameraFilmbackSettings Filmback;//[Offset: 0x5a4, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x5b0, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x5c8, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x620, Size: 0x4]
	float CurrentAperture;//[Offset: 0x624, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x628, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ProjectileShow_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	ProjectileMovementComponent* ProjectileMovement;//[Offset: 0x228, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void ReceiveBeginPlay();// 0x50aed0e64001
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xffffffffc67045c0
	void ExecuteUbergraph_ProjectileShow(int EntryPoint, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult);// 0xffffffffc6713120

--------------------------------
Class: Grenade_Molotov_C.Grenade_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	AudioComponent* BounceSound;//[Offset: 0x278, Size: 0x8]
	ArrowComponent* Arrow41;//[Offset: 0x280, Size: 0x8]
	ArrowComponent* Arrow40;//[Offset: 0x288, Size: 0x8]
	ArrowComponent* Arrow39;//[Offset: 0x290, Size: 0x8]
	ArrowComponent* Arrow38;//[Offset: 0x298, Size: 0x8]
	ArrowComponent* Arrow37;//[Offset: 0x2a0, Size: 0x8]
	ArrowComponent* Arrow36;//[Offset: 0x2a8, Size: 0x8]
	ArrowComponent* Arrow35;//[Offset: 0x2b0, Size: 0x8]
	ArrowComponent* Arrow34;//[Offset: 0x2b8, Size: 0x8]
	ArrowComponent* Arrow33;//[Offset: 0x2c0, Size: 0x8]
	ArrowComponent* Arrow32;//[Offset: 0x2c8, Size: 0x8]
	ArrowComponent* Arrow31;//[Offset: 0x2d0, Size: 0x8]
	ArrowComponent* Arrow30;//[Offset: 0x2d8, Size: 0x8]
	ArrowComponent* Arrow29;//[Offset: 0x2e0, Size: 0x8]
	ArrowComponent* Arrow28;//[Offset: 0x2e8, Size: 0x8]
	ArrowComponent* Arrow27;//[Offset: 0x2f0, Size: 0x8]
	ArrowComponent* Arrow26;//[Offset: 0x2f8, Size: 0x8]
	ArrowComponent* Arrow25;//[Offset: 0x300, Size: 0x8]
	ArrowComponent* Arrow24;//[Offset: 0x308, Size: 0x8]
	ArrowComponent* Arrow23;//[Offset: 0x310, Size: 0x8]
	ArrowComponent* Arrow22;//[Offset: 0x318, Size: 0x8]
	ArrowComponent* Arrow21;//[Offset: 0x320, Size: 0x8]
	ArrowComponent* Arrow20;//[Offset: 0x328, Size: 0x8]
	ArrowComponent* Arrow19;//[Offset: 0x330, Size: 0x8]
	ArrowComponent* Arrow18;//[Offset: 0x338, Size: 0x8]
	ArrowComponent* Arrow17;//[Offset: 0x340, Size: 0x8]
	ArrowComponent* Arrow16;//[Offset: 0x348, Size: 0x8]
	ArrowComponent* Arrow15;//[Offset: 0x350, Size: 0x8]
	ArrowComponent* Arrow14;//[Offset: 0x358, Size: 0x8]
	ArrowComponent* Arrow13;//[Offset: 0x360, Size: 0x8]
	ArrowComponent* Arrow12;//[Offset: 0x368, Size: 0x8]
	ArrowComponent* Arrow11;//[Offset: 0x370, Size: 0x8]
	ArrowComponent* Arrow10;//[Offset: 0x378, Size: 0x8]
	ArrowComponent* Arrow2;//[Offset: 0x380, Size: 0x8]
	ArrowComponent* Arrow9;//[Offset: 0x388, Size: 0x8]
	ArrowComponent* Arrow8;//[Offset: 0x390, Size: 0x8]
	ArrowComponent* Arrow7;//[Offset: 0x398, Size: 0x8]
	ArrowComponent* Arrow6;//[Offset: 0x3a0, Size: 0x8]
	ArrowComponent* Arrow5;//[Offset: 0x3a8, Size: 0x8]
	ArrowComponent* Arrow4;//[Offset: 0x3b0, Size: 0x8]
	ArrowComponent* Arrow3;//[Offset: 0x3b8, Size: 0x8]
	ArrowComponent* Arrow1;//[Offset: 0x3c0, Size: 0x8]
	StaticMeshComponent* Cylinder1;//[Offset: 0x3c8, Size: 0x8]
	AudioComponent* BeSmoke;//[Offset: 0x3d0, Size: 0x8]
	AudioComponent* End;//[Offset: 0x3d8, Size: 0x8]
	AudioComponent* Loop;//[Offset: 0x3e0, Size: 0x8]
	AudioComponent* Start;//[Offset: 0x3e8, Size: 0x8]
	bool IsFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	float Damage;//[Offset: 0x3f4, Size: 0x4]
	TimerHandle DamageTimer;//[Offset: 0x3f8, Size: 0x8]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	ParticleSystemComponent* Emitter;//[Offset: 0x408, Size: 0x8]
	ParticleSystemComponent* Emitter2;//[Offset: 0x410, Size: 0x8]
	float FireCount;//[Offset: 0x418, Size: 0x4]
	ArrowComponent*[] AllArrow;//[Offset: 0x420, Size: 0x10]
	MolotovFireOne_C*[] AllFire;//[Offset: 0x430, Size: 0x10]
	CSGOCharacterBase_C*[] DamageCharacter;//[Offset: 0x440, Size: 0x10]
	static void SpawnFire(const Actor*[] Temp_object_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_Array_Length_ReturnValue, ArrowComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, MolotovFireOne_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x7227d0e64001
	void ReceiveBeginPlay();// 0x7226d0e64001
	void ReceiveTick(float DeltaSeconds);// 0x72d3d0e64008
	void BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x7224d0e64001
	void DamageEvent();// 0x7223d0e64001
	void BndEvt__Cylinder1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7222d0e64001
	void DownLineTrace();// 0x7221d0e64001
	void DownLineTraceFail();// 0xffffffffc8633660
	void DownLineTraceSuccess();// 0x6e47d0e64001
	void ReceiveDestroyed();// 0x52f0d0e64001
	static void ExecuteUbergraph_Grenade_Molotov(int EntryPoint, const Actor*[] Temp_object_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, float Temp_float_Variable, float K2Node_Event_DeltaSeconds, const HitResult K2Node_ComponentBoundEvent_ImpactResult, const Vector K2Node_ComponentBoundEvent_ImpactVelocity, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, GrenadeSmoke_C* K2Node_DynamicCast_AsGrenade_Smoke, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, HitResult CallFunc_K2_AddLocalRotation_SweepHitResult, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsValid_ReturnValue, ArrowComponent*[] CallFunc_GetComponentsByTag_ReturnValue, MolotovFireOne_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_Array_Get_Item, float CallFunc_ApplyDamage_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, MolotovFireOne_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue);// 0x52eed0e64008

--------------------------------
Class: MolotovFireOne_C.Actor.Object
	BoxComponent* Box;//[Offset: 0x220, Size: 0x8]
	ParticleSystemComponent* ParticleSystem1;//[Offset: 0x228, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x230, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: GrenadeSmoke_C.Grenade_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* Cylinder1;//[Offset: 0x278, Size: 0x8]
	StaticMeshComponent* Cylinder;//[Offset: 0x280, Size: 0x8]
	AudioComponent* Emit;//[Offset: 0x288, Size: 0x8]
	AudioComponent* Explode;//[Offset: 0x290, Size: 0x8]
	AudioComponent* Boucne;//[Offset: 0x298, Size: 0x8]
	float Timeline_0_NewTrack_0_E02E474B48B43ED54BD094AA8145DE39;//[Offset: 0x2a0, Size: 0x4]
	byte Timeline_0__Direction_E02E474B48B43ED54BD094AA8145DE39;//[Offset: 0x2a4, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x2a8, Size: 0x8]
	CurveFloat* FlashCurve;//[Offset: 0x2b0, Size: 0x8]
	CurveFloat* FlashCurveHalf;//[Offset: 0x2b8, Size: 0x8]
	bool IsExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	float Zbasic;//[Offset: 0x2c4, Size: 0x4]
	Vector LocationlastTick;//[Offset: 0x2c8, Size: 0xc]
	void Timeline_0__FinishedFunc();// 0xffffffffc31ef920
	void Timeline_0__UpdateFunc();// 0x52b0d0e64001
	void ReceiveBeginPlay();// 0x52afd0e64001
	void BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x52aed0e64001
	void BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x52add0e64001
	void Burst();// 0x52acd0e64001
	void ReceiveTick(float DeltaSeconds);// 0xffffffffc31ede00
	static void ExecuteUbergraph_GrenadeSmoke(int EntryPoint, bool Temp_bool_Has_Been_Initd_Variable, const HitResult K2Node_ComponentBoundEvent_ImpactResult, const Vector K2Node_ComponentBoundEvent_ImpactVelocity, const HitResult K2Node_ComponentBoundEvent_ImpactResult, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool Temp_bool_IsClosed_Variable, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_AddLocalRotation_SweepHitResult, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x52a9d0e64008

--------------------------------
Class: GrenadeHE_C.Grenade_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 0x8]
	AudioComponent* Expolode;//[Offset: 0x278, Size: 0x8]
	AudioComponent* BounceSound;//[Offset: 0x280, Size: 0x8]
	void ReceiveBeginPlay();// 0x52ccd0e64001
	void ReceiveTick(float DeltaSeconds);// 0x52cbd0e64001
	void BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xffffffffc31ecac0
	static void ExecuteUbergraph_GrenadeHE(int EntryPoint, const Actor*[] Temp_object_Variable, float K2Node_Event_DeltaSeconds, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, const HitResult K2Node_ComponentBoundEvent_ImpactResult, const Vector K2Node_ComponentBoundEvent_ImpactVelocity, bool CallFunc_ApplyRadialDamageWithFalloff_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, HitResult CallFunc_K2_AddLocalRotation_SweepHitResult, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x52c5d0e64008

--------------------------------
Class: WeaponBase_Incendiary_C.WeaponBase_Molotov_C.WeaponBase_C.Actor.Object

--------------------------------
Class: WeaponBase_Molotov_C.WeaponBase_C.Actor.Object

--------------------------------
Class: Cubit_ImpactFX_Spawner_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	HitResult HitResult;//[Offset: 0x230, Size: 0x88]
	MaterialInterface* SplasherDecalMat;//[Offset: 0x2b8, Size: 0x8]
	FXMaterialData MaterialValues;//[Offset: 0x2c0, Size: 0x88]
	byte SurfaceTypeFeed;//[Offset: 0x348, Size: 0x1]
	MaterialInterface* ImpactDecalMat;//[Offset: 0x350, Size: 0x8]
	Vector RicochetVector;//[Offset: 0x358, Size: 0xc]
	bool Decals Attached?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	ParticleSystemComponent* Main FX Emitter;//[Offset: 0x368, Size: 0x8]
	Vector Location;//[Offset: 0x370, Size: 0xc]
	Vector Impact Normal;//[Offset: 0x37c, Size: 0xc]
	PrimitiveComponent* Hit Component;//[Offset: 0x388, Size: 0x8]
	byte FXSize;//[Offset: 0x390, Size: 0x1]
	bool ParticleDecalSpawnerON?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	AudioComponent* RicochetSoundComponent;//[Offset: 0x398, Size: 0x8]
	ParticleSystemComponent* RicochetParticleComponent;//[Offset: 0x3a0, Size: 0x8]
	Vector Impact Point;//[Offset: 0x3a8, Size: 0xc]
	float Impact Speed;//[Offset: 0x3b4, Size: 0x4]
	float NormalisedRangeMin;//[Offset: 0x3b8, Size: 0x4]
	float NormalisedRangeMax;//[Offset: 0x3bc, Size: 0x4]
	float ImpactForceMultiplier;//[Offset: 0x3c0, Size: 0x4]
	float RicochetExitVelocity;//[Offset: 0x3c4, Size: 0x4]
	FName Hit Bone;//[Offset: 0x3c8, Size: 0x8]
	float Decal Life;//[Offset: 0x3d0, Size: 0x4]
	byte FX Type;//[Offset: 0x3d4, Size: 0x1]
	Vector ParticleCollisionLocation;//[Offset: 0x3d8, Size: 0xc]
	byte CollisionSurface;//[Offset: 0x3e4, Size: 0x1]
	bool ParticleCollisionSoundsON;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 0x1]
	Vector ParticleCollisionVelocity;//[Offset: 0x3e8, Size: 0xc]
	Vector ParticleCollisionNormal;//[Offset: 0x3f4, Size: 0xc]
	MaterialProperties MaterialProperties;//[Offset: 0x400, Size: 0xc]
	MaterialProperties ParticleCollisionMaterialProperties;//[Offset: 0x40c, Size: 0xc]
	byte Impact Type;//[Offset: 0x418, Size: 0x1]
	FName SurfaceName;//[Offset: 0x41c, Size: 0x8]
	bool FirePropagationON;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	FName ParticleCollisonHitBone;//[Offset: 0x428, Size: 0x8]
	bool UseLineTraceParticleCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	PrimitiveComponent* ParticleCollisionLineCheckComponent;//[Offset: 0x438, Size: 0x8]
	bool CanvasTargetDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool BacksplatterDecalsON;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	Transform ProjectilesVector;//[Offset: 0x450, Size: 0x30]
	Actor* HitActor;//[Offset: 0x480, Size: 0x8]
	float BacksplatterChance;//[Offset: 0x488, Size: 0x4]
	MaterialInstanceDynamic* BacksplatterDecalMat;//[Offset: 0x490, Size: 0x8]
	void ReceiveBeginPlay();// 0x50e0d0e64001
	void Get FX Type();// 0x50dfd0e64001
	void ParticleCollisionSounds();// 0x50ded0e64001
	void WetSplash();// 0x50ddd0e64001
	void DrySplash();// 0x50dcd0e64001
	void SizzleDry();// 0xffffffffc670cba0
	void SizzleWet();// 0x50dad0e64001
	void SpawnParticleDecals();// 0x50d9d0e64001
	void Sizzle Liquid FX();// 0x50d8d0e64001
	void Debris FX Spawn();// 0x50d7d0e64001
	void Sizzle Dry FX();// 0x50d6d0e64001
	void FX Type Chosen();// 0x50d5d0e64001
	void DebrisFXInitialise();// 0x50d4d0e64001
	void SpawnParticleCollisionFX();// 0x50d3d0e64001
	void Penetration Event();// 0x50d2d0e64001
	void InitiateFXTasks();// 0x50d1d0e64001
	void FirePropagation();// 0x50d0d0e64001
	void BackSplatter();// 0x50cfd0e64001
	void OnParticleCollide_Event(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, FName BoneName, PhysicalMaterial* PhysMat);// 0x50cbd0e64001
	void DestroyFXSpawner();// 0x50cdd0e64001
	void SpawnDecals();// 0x50ccd0e64001
	void SpawnSounds();// 0xffffffffc6706ee0
	void Ricochet_Event();// 0x50ced0e64001
	void Impact_Event();// 0x50c9d0e64001
	void ExecuteUbergraph_Cubit_ImpactFX_Spawner(int EntryPoint, int CallFunc_RandomIntegerInRange_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FXMaterialData CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector Temp_struct_Variable, FName CallFunc_GetEnumeratorName_ReturnValue, FXMaterialData CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte Temp_byte_Variable, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, FXMaterialData CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, FName CallFunc_GetEnumeratorName_ReturnValue, MaterialProperties CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector Temp_struct_Variable, FName CallFunc_GetEnumeratorName_ReturnValue, MaterialProperties CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_MakeRotFromZ_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector Temp_struct_Variable, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector Temp_struct_Variable, Vector Temp_struct_Variable, Vector Temp_struct_Variable, byte Temp_byte_Variable, Vector Temp_struct_Variable, bool CallFunc_IsValid_ReturnValue, Vector Temp_struct_Variable, Vector Temp_struct_Variable, byte Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, const Actor*[] K2Node_MakeArray_Array, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, const Actor*[] Temp_object_Variable, byte Temp_byte_Variable, Vector K2Node_Select_Default, Vector Temp_struct_Variable, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_IsActive_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector Temp_struct_Variable, Rotator CallFunc_MakeRotFromZ_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector Temp_struct_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_RandomUnitVectorInEllipticalConeInDegrees_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, Vector K2Node_Select_Default, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, FXMaterialData CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_MakeLiteralFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, DecalComponent* CallFunc_SpawnDecalAttached_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte Temp_byte_Variable, float CallFunc_RandomFloatInRange_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue, FXMaterialData CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_EventName, float K2Node_CustomEvent_EmitterTime, int K2Node_CustomEvent_ParticleTime, Vector K2Node_CustomEvent_Location, Vector K2Node_CustomEvent_Velocity, Vector K2Node_CustomEvent_Direction, Vector K2Node_CustomEvent_Normal, FName K2Node_CustomEvent_BoneName, PhysicalMaterial* K2Node_CustomEvent_PhysMat, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, byte CallFunc_MakeLiteralByte_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, Vector Temp_struct_Variable, Vector Temp_struct_Variable, Vector CallFunc_Multiply_VectorInt_ReturnValue, Rotator CallFunc_MakeRotFromZ_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_GetGlobalTimeDilation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, Vector Temp_struct_Variable, bool CallFunc_IsValid_ReturnValue, byte Temp_byte_Variable, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector K2Node_Select_Default, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, DecalComponent* CallFunc_SpawnDecalAttached_ReturnValue, DecalComponent* CallFunc_SpawnDecalAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Normal_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, float CallFunc_SignOfFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector Temp_struct_Variable, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector Temp_struct_Variable, float CallFunc_SignOfFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector Temp_struct_Variable, Rotator CallFunc_MakeRotator_ReturnValue, DecalComponent* CallFunc_SpawnDecalAttached_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, DecalComponent* CallFunc_SpawnDecalAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue, DecalComponent* CallFunc_SpawnDecalAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffffffc67117c0

--------------------------------
Class: FXMaterialData
	byte Surface_5_A13BA84C444F7DFF70888788C6FCCCC2;//[Offset: 0x0, Size: 0x1]
	ParticleSystem* ImpactParticleFX_47_2D1ADA5E4AE492B40F6A018E974AFC88;//[Offset: 0x8, Size: 0x8]
	ParticleSystem* RicochetParticleTrailFX_89_A804146D4F1C22B014298B9F801BFD53;//[Offset: 0x10, Size: 0x8]
	ParticleSystem* DebrisParticleFX_78_0D9CC68F469BBA2E68FE8BAD0FBA4293;//[Offset: 0x18, Size: 0x8]
	SoundCue* ImpactSoundFX_52_26AFC5FF4B225EF2B2C41E94EB0ED683;//[Offset: 0x20, Size: 0x8]
	Material* ImpactDecal_72_AFAE4BE8469F751D5996A58C8AC0177C;//[Offset: 0x28, Size: 0x8]
	Material* RicochetDecal_73_BA1A3A3147C74AFF1BE4C1823C48F711;//[Offset: 0x30, Size: 0x8]
	Vector DecalSize_39_3448E2FF4BC678271EB742853872E7C2;//[Offset: 0x38, Size: 0xc]
	Material* ParticleDecal_92_D26A7B3D4F10A3F168E1D0A0B8A04E1A;//[Offset: 0x48, Size: 0x8]
	Vector ParticleDecalSize_90_662BB5AF4483ED558A378B991B0319FB;//[Offset: 0x50, Size: 0xc]
	Material* RearSpatterDecal_124_69E3B9034ED961553C1830B154855E80;//[Offset: 0x60, Size: 0x8]
	SoundCue* ParticleCollisionSounds_95_D12C7B394C9112DB7312428752345A16;//[Offset: 0x68, Size: 0x8]
	bool LiquidSurface_24_C03386A444373E401ED1CE9CBDE432C5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool HotSurface_97_40A8C1CC41B1B65462A21B98D09A678D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool ColdSurface_103_8A3EDA61407CAA9014059DA8707DE7BD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool Absorbant_99_1EA3FC5043D2C407F4FCD49B1484CF9F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool Conductive_101_68E6B3B1478513C4738E5690BE4F6175;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool Flammable_110_20E5C07646851E782F138697A7FC19FC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool Caustic_121_992CDE584A6F006FC3F901A49916A947;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	byte MaterialState_109_530FAB1948850D8B126EC3A58F6426F5;//[Offset: 0x77, Size: 0x1]
	float Temperature_113_01E4F81C469340C33D67C88676011699;//[Offset: 0x78, Size: 0x4]
	float Flammability_115_635CCA024B0C5A5736CA668C10996472;//[Offset: 0x7c, Size: 0x4]
	float Conductivity_117_BCB9477E4295BFB34F4BC2A04ECDFF8E;//[Offset: 0x80, Size: 0x4]
	float Absorbance_119_E906A72E4D061790AAA8D59C0A9C5580;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialProperties
	byte Surface_17_698FEFE845775A207845AE99FFBAF96B;//[Offset: 0x0, Size: 0x1]
	byte State_14_61E0B712481824F4BA6280AB67960F45;//[Offset: 0x1, Size: 0x1]
	bool Hot_1_7675291340422B4D62A20890042B3A8E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool Cold_3_EAF04D7947F23AEB869676AD44B3E911;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool Absorbant_5_78457C98416340E4819BCBBD380296B7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool Flammable_8_C0F512C9460008173C1A59A4477B1EE0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool Rough_11_8F6CBB0C4510DF49CAE693AB50E894DC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool Metal_26_2A9345284DD8B91ACCE945A9D8727884;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool Conductive_19_3114916748B571EA1C1BDCB2325A29B4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool Explosive_21_83F672664CE9B5DA467EDDA780CC0D92;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool Extinguisher_23_9E8FBD3744EAB0239E2152BEB1654964;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool Caustic_28_11BB6B0D4809CFF94C53D18EF603EF0A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 0x8]
	int SortOrder;//[Offset: 0x200, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x204, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x208, Size: 0x4]
	float FadeDuration;//[Offset: 0x20c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x210, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x214, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	Vector DecalSize;//[Offset: 0x21c, Size: 0xc]
	void SetSortOrder(int Value);// 0x262ad0be4041
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x2629d0be4041
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x2628d0be4041
	void SetFadeIn(float StartDelay, float Duaration);// 0x2627d0be4041
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2626d0be4041
	float GetFadeStartDelay();// 0x2625d0be4041
	float GetFadeInStartDelay();// 0x2624d0be4041
	float GetFadeInDuration();// 0x2623d0be4041
	float GetFadeDuration();// 0x2622d0be4041
	MaterialInterface* GetDecalMaterial();// 0x2621d0be4041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x2620d0be4041

--------------------------------
Class: WeaponBase_XM1014_C.WeaponBase_C.Actor.Object

--------------------------------
Class: TeammateHead_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Image;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x278, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x288, Size: 0x8]
	CSGOCharacterBase_C* Parent;//[Offset: 0x290, Size: 0x8]
	LinearColor GetColorAndOpacity();// 0x501cd0e64001
	static FText GetText(float CallFunc_FClamp_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x501bd0e64001
	FText GetText();// 0x5018d0e64001
	SlateBrush GetBrush(WeaponBase_C* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Blueprint_GetSizeX_ReturnValue, int CallFunc_Blueprint_GetSizeY_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x6ff88d0c34004
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffffffc37e1280
	static void ExecuteUbergraph_TeammateHead(int EntryPoint, bool Temp_bool_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_Greater_FloatFloat_ReturnValue, float K2Node_Select_Default, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_MakeStruct_LinearColor, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0xffffffffc37e11a0

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x119, Size: 0x1]
	byte StretchDirection;//[Offset: 0x11a, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x11c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x2209d0be4041
	void SetStretchDirection(byte InStretchDirection);// 0x2208d0be4041
	void SetStretch(byte InStretch);// 0x2207d0be4041
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x2206d0be4041

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x220, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x448, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x460, Size: 0x8]
	Font* Font;//[Offset: 0x468, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x470, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x471, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x474, Size: 0x4]
	float XScale;//[Offset: 0x478, Size: 0x4]
	float YScale;//[Offset: 0x47c, Size: 0x4]
	float WorldSize;//[Offset: 0x480, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x484, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x488, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x48c, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	void SetYScale(float Value);// 0x2d33d0be4041
	void SetXScale(float Value);// 0x2d32d0be4041
	void SetWorldSize(float Value);// 0x2d31d0be4041
	void SetVertSpacingAdjust(float Value);// 0x2d30d0be4041
	void SetVerticalAlignment(byte Value);// 0x2d2fd0be4041
	void SetTextRenderColor(Color Value);// 0x2d2ed0be4041
	void SetTextMaterial(MaterialInterface* Material);// 0x2d2dd0be4041
	void SetText(FString Value);// 0x2d2cd0be4041
	void SetHorizSpacingAdjust(float Value);// 0x2d2bd0be4041
	void SetHorizontalAlignment(byte Value);// 0x2d2ad0be4041
	void SetFont(Font* Value);// 0x2d29d0be4041
	void K2_SetText(out const FText Value);// 0x2d28d0be4041
	Vector GetTextWorldSize();// 0x2d27d0be4041
	Vector GetTextLocalSize();// 0x2d26d0be4041

--------------------------------
Class: PraticeEnemySpawner_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	CSGOCharacterBase_C*[] CharacterArray;//[Offset: 0x238, Size: 0x10]
	void ReceiveBeginPlay();// 0x744bd0e64001
	void CreateOne();// 0x744cd0e64001
	void DetectShouldRespawn();// 0xffffff91d0be4000
	static void ExecuteUbergraph_PraticeEnemySpawner(int EntryPoint, Rotator CallFunc_MakeRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool Temp_bool_Variable, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, ParticeAIController_C* CallFunc_FinishSpawningActor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetScaledBoxExtent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_RandomPointInBoundingBox_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, CSGOCharacterBase_C* CallFunc_FinishSpawningActor_ReturnValue, const FText Temp_text_Variable, GameModeBase* CallFunc_GetGameMode_ReturnValue, CSGOGamemode_C* K2Node_DynamicCast_AsCSGOGamemode, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_IsServer_ReturnValue, CSGOCharacterBase_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, int Temp_int_Variable, CSGOCharacterBase_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x7450d0e64008

--------------------------------
Class: ParticeAIController_C.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x328, Size: 0x8]
	bool GoLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool ShouldMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	void ReceiveBeginPlay();// 0x745bd0e64001
	void ReceiveTick(float DeltaSeconds);// 0x7466d0e64008
	void ExecuteUbergraph_ParticeAIController(int EntryPoint, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, float K2Node_Event_DeltaSeconds, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, float K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, int CallFunc_RandomInteger_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue);// 0xffffff86d0be4ede

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x310, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x2dcbd0be4041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x2dcad0be4041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x2dc9d0be4041
	void SetMoveBlockDetection(bool bEnable);// 0x2e0ad0be4041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x2dc7d0be4041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x2dc6d0be4041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x2dc5d0be4041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x2dc4d0be4041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x2dc3d0be4041
	void K2_SetFocus(Actor* NewFocus);// 0x2dc2d0be4041
	void K2_SetFocalPoint(Vector FP);// 0x2dc1d0be4041
	void K2_ClearFocus();// 0x2dc0d0be4041
	bool HasPartialPath();// 0x2dbfd0be4041
	PathFollowingComponent* GetPathFollowingComponent();// 0x2dbed0be4041
	byte GetMoveStatus();// 0x2dbdd0be4041
	Vector GetImmediateMoveDestination();// 0x2dbcd0be4041
	Actor* GetFocusActor();// 0x2dbbd0be4041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x2dbad0be4041
	Vector GetFocalPoint();// 0x2db9d0be4041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x2db8d0be4041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x2db7d0be4041

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x2e0ed0be4041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x2e0dd0be4041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x2e0cd0be4041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x2e0bd0be4041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x2e47d0be4041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x2e09d0be4041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x2e08d0be4041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x2e07d0be4041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x2e06d0be4041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x2e05d0be4041
	bool IsVectorValueSet(out const FName KeyName);// 0x2e04d0be4041
	Vector GetValueAsVector(out const FName KeyName);// 0x2e03d0be4041
	FString GetValueAsString(out const FName KeyName);// 0x2e02d0be4041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x2e01d0be4041
	Object* GetValueAsObject(out const FName KeyName);// 0x2e00d0be4041
	FName GetValueAsName(out const FName KeyName);// 0x2dffd0be4041
	int GetValueAsInt(out const FName KeyName);// 0x2dfed0be4041
	float GetValueAsFloat(out const FName KeyName);// 0x2dfdd0be4041
	byte GetValueAsEnum(out const FName KeyName);// 0x2dfcd0be4041
	class Object GetValueAsClass(out const FName KeyName);// 0x2dfbd0be4041
	bool GetValueAsBool(out const FName KeyName);// 0x2dfad0be4041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x2df9d0be4041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x2df8d0be4041
	void ClearValue(out const FName KeyName);// 0x2df7d0be4041

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString Reason);// 0x2df2d0be4041
	void StartLogic();// 0x2df1d0be4041
	void RestartLogic();// 0x2df0d0be4041
	bool IsRunning();// 0x2defd0be4041
	bool IsPaused();// 0x2deed0be4041

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x2e50d0be4041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x2e4fd0be4041
	Vector GetPathDestination();// 0x2e4ed0be4041
	byte GetPathActionType();// 0x2e4dd0be4041

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2a9, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2ac, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2b0, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x2dd5d0be4041
	void RequestStimuliListenerUpdate();// 0x2dd4d0be4041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x2dd3d0be4041
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x2dd2d0be4041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x2dd1d0be4041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x2dd0d0be4041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x2dcfd0be4041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x2dced0be4041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x2dcdd0be4041
	void ForgetAll();// 0x2dccd0be4041

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x2dded0be4041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x2dddd0be4041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x2ddcd0be4041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x2ddbd0be4041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x2ddad0be4041

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x2debd0be4041
	void AIIgnorePlayers();// 0x2dead0be4041

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x2df5d0be4041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x2df4d0be4041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x2df3d0be4041

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x2e5ad0be4041

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x1173d0be4041
	Vector[] GetResultsAsLocations();// 0x1172d0be4041
	Actor*[] GetResultsAsActors();// 0x1171d0be4041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x1170d0be4041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x116fd0be4041
	float GetItemScore(int ItemIndex);// 0x116dd0be4041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x116cd0be4041

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x2da6d0be4041

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x2e66d0be4041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x2e65d0be4041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x2e64d0be4041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2e63d0be4041
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2e62d0be4041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2e61d0be4041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2e60d0be4041

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x2e72d0be4041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x2e71d0be4041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x2e70d0be4041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x2e6fd0be4041

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x2e69d0be4041
	void Finish(byte WithResult);// 0x2eaad0be4041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x2e67d0be4041

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x2da5d0be4041
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x2da4d0be4041

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x115ed0be4041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x115dd0be4041
	void EndTask();// 0x1158d0be4041

--------------------------------
Class: Pratice_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	void ReceiveBeginPlay();// 0xffffff86d0be4d20
	void ExecuteUbergraph_Pratice(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, CSGOController_C* K2Node_DynamicCast_AsCSGOController, bool K2Node_DynamicCast_bSuccess);// 0xffffff82d0be4000

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CSGOCamera_C.PlayerCameraManager.Actor.Object

--------------------------------
Class: FirstPersonHUD_C.HUD.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8]
	bool HMDEnabled?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]

--------------------------------
Class: WeaponBase_BUTTERFLY_C.WeaponBase_C.Actor.Object

--------------------------------
Class: WeaponBase_glock18_C.WeaponBase_C.Actor.Object

--------------------------------
Class: WeaponBase_c4_C.WeaponBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x410, Size: 0x8]
	WidgetComponent* Widget;//[Offset: 0x418, Size: 0x8]
	C4IconActor_C* C4Icon;//[Offset: 0x420, Size: 0x8]
	void ReceiveBeginPlay();// 0x5d84d0e64001
	void ReceiveTick(float DeltaSeconds);// 0xffffffffc0e662a0
	void ServerCreateIcon();// 0xffffffffc0e23660
	void ExecuteUbergraph_WeaponBase_c4(int EntryPoint, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, C4IconActor_C* CallFunc_FinishSpawningActor_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsServer_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, BombWidget_C* K2Node_DynamicCast_AsBomb_Widget, bool K2Node_DynamicCast_bSuccess);// 0x5d7cd0e64001

--------------------------------
Class: BombWidget_C.UserWidget.Widget.Visual.Object
	Border* Border;//[Offset: 0x260, Size: 0x8]
	Image* Image;//[Offset: 0x268, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8]
	WeaponBase_c4_C* Parent;//[Offset: 0x278, Size: 0x8]
	enum GetVisibility(Character* CallFunc_GetPlayerCharacter_ReturnValue, CSGOCharacterBase_C* K2Node_DynamicCast_AsCSGOCharacter_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffffffc37dbbe0
	FText GetText(Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0xffffffffc37d7f80

--------------------------------
