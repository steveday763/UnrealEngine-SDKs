Class: World.Object
	<Actor*,ActorSet> LifeCycleDependencyMap;//[Offset: 0x30, Size: 0x50]// 0x75a828c0c0
	UGCSpawnActorNumLimitCfg[] UGCSpawnActorNumLimit;//[Offset: 0x80, Size: 0x10]// 0x75a8273680
	Level* PersistentLevel;//[Offset: 0x90, Size: 0x8]// 0x75a8273700
	NetDriver* NetDriver;//[Offset: 0x98, Size: 0x8]// 0x75a8273780
	LineBatchComponent* LineBatcher;//[Offset: 0xa0, Size: 0x8]// 0x75a8273800
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0xa8, Size: 0x8]// 0x75a8273880
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0xb0, Size: 0x8]// 0x75a8273900
	GameNetworkManager* NetworkManager;//[Offset: 0xb8, Size: 0x8]// 0x75a8273980
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0xc0, Size: 0x8]// 0x75a8273a00
	Object*[] ExtraReferencedObjects;//[Offset: 0xc8, Size: 0x10]// 0x75a8273b00
	Object*[] PerModuleDataObjects;//[Offset: 0xd8, Size: 0x10]// 0x75a8273c00
	LevelStreaming*[] StreamingLevels;//[Offset: 0xe8, Size: 0x10]// 0x75a8273d00
	FString StreamingLevelsPrefix;//[Offset: 0xf8, Size: 0x10]// 0x75a825f2b0
	Level* CurrentLevelPendingVisibility;//[Offset: 0x108, Size: 0x8]// 0x75a8273d80
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x110, Size: 0x8]// 0x75a8273e00
	DemoNetDriver* DemoNetDriver;//[Offset: 0x118, Size: 0x8]// 0x75a8273e80
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x120, Size: 0x8]// 0x75a8273f00
	WorldRegionManager RegionManager;//[Offset: 0x1f8, Size: 0x2a8]// 0x75a8273f80
	WorldParallelismManager ParallelismManager;//[Offset: 0x4a0, Size: 0xf0]// 0x75a8274000
	Level* PVSLevel;//[Offset: 0x590, Size: 0x8]// 0x75a8274080
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x598, Size: 0x8]// 0x75a8274100
	Actor*[] ActiveLevelActors;//[Offset: 0x5d8, Size: 0x10]// 0x75a8274200
	NavigationSystem* NavigationSystem;//[Offset: 0x5e8, Size: 0x8]// 0x75a8274280
	GameModeBase* AuthorityGameMode;//[Offset: 0x5f0, Size: 0x8]// 0x75a8274300
	GameStateBase* GameState;//[Offset: 0x5f8, Size: 0x8]// 0x75a8274380
	AISystemBase* AISystem;//[Offset: 0x600, Size: 0x8]// 0x75a8274400
	AvoidanceManager* AvoidanceManager;//[Offset: 0x608, Size: 0x8]// 0x75a8274480
	Level*[] Levels;//[Offset: 0x610, Size: 0x10]// 0x75a8274580
	LevelCollection[] LevelCollections;//[Offset: 0x620, Size: 0x10]// 0x75a8274680
	Level* CurrentLevel;//[Offset: 0x638, Size: 0x8]// 0x75a8274700
	GameInstance* OwningGameInstance;//[Offset: 0x640, Size: 0x8]// 0x75a8274780
	bool bSupportParallelWorlds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]// 0x75a8274800
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x650, Size: 0x10]// 0x75a8274900
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x660, Size: 0x8]// 0x75a8274980
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x668, Size: 0x8]// 0x75a8274a00
	WorldComposition* WorldComposition;//[Offset: 0xf20, Size: 0x8]// 0x75a8274a80
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf7e, Size: 0x1]// 0x75a8274b00
	LevelStreaming*[] LoadingLevelsToCheck;//[Offset: 0xf90, Size: 0x10]// 0x75a8274c00

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xffffff8a17adf2b0

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x58]// 0x7611d5a9d0
	float CustomTimeDilation;//[Offset: 0x80, Size: 0x4]// 0x7611d5a960
	bool bAllowBPReceiveTickEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]// 0x7611d5a8e0
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1]// 0x7611d5a860
	bool bHidden;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1]// 0x7611d5a7e0
	bool bConsideredHidden;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1]// 0x7611d5a760
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1]// 0x7611d5a6e0
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1]// 0x7611d5a660
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1]// 0x7611d5a5e0
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x85, Size: 0x1]// 0x7611d5a560
	bool bFastDistBasedNetRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x85, Size: 0x1]// 0x7611d5a4e0
	bool bGroupBasedNetRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86, Size: 0x1]// 0x7611d5a460
	bool bLazyNetReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86, Size: 0x1]// 0x7611d5a3e0
	bool bClientSimulatedRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86, Size: 0x1]// 0x7611d5a360
	bool bCheckAllRelyOnAttachment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86, Size: 0x1]// 0x7611d5a2e0
	float NetCullFactorSquared;//[Offset: 0x88, Size: 0x4]// 0x7611d5a270
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]// 0x7611d5a1f0
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]// 0x7611d5a170
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1]// 0x7611d5a0f0
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1]// 0x7611d5a070
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1]// 0x7611d59ff0
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c, Size: 0x1]// 0x7611d59f70
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c, Size: 0x1]// 0x7611d59ef0
	bool bCanBeBaseForCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d, Size: 0x1]// 0x7611d59e70
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d, Size: 0x1]// 0x7611d59df0
	FName[] OptimizeDuplicatedComponentName;//[Offset: 0x90, Size: 0x10]// 0x7611d59d00
	bool bRemoveStaticChildActorComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]// 0x7611d59c80
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 0x1]// 0x7611d59c00
	byte RemoteRole;//[Offset: 0xa2, Size: 0x1]// 0x7611d59b80
	Actor* Owner;//[Offset: 0xa8, Size: 0x8]// 0x7611d59b00
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]// 0x7611d59a80
	DeferedComponentUnit[] PendingConstructComponents;//[Offset: 0xb8, Size: 0x10]// 0x7611d598e0
	ActorComponent*[] PreSCSComponentsBeforeDeferContruction;//[Offset: 0xc8, Size: 0x10]// 0x7611d597e0
	bool bEnableDeferredConstructComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]// 0x7611d59760
	float AsyncReplicatedActorSpawnDistA;//[Offset: 0xdc, Size: 0x4]// 0x7611d596f0
	float AsyncReplicatedActorSpawnDistB;//[Offset: 0xe0, Size: 0x4]// 0x7611d59680
	bool bUseSpawnReplicatedActorMaxFrameDelayFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]// 0x7611d59600
	int SpawnReplicatedActorMaxFrameDelayFromConfig;//[Offset: 0xe8, Size: 0x4]// 0x7611d59590
	ScriptNetworkReplicatedPropertyWrapper ScriptNetworkReplicatedPropertyWrapper;//[Offset: 0x148, Size: 0x10]// 0x7611d59470
	FName NetDriverName;//[Offset: 0x168, Size: 0x8]// 0x7611d59400
	RepMovement ReplicatedMovement;//[Offset: 0x170, Size: 0x34]// 0x7611d58c20
	float InitialLifeSpan;//[Offset: 0x1a4, Size: 0x4]// 0x7611d58bb0
	RepAttachment AttachmentReplication;//[Offset: 0x1a8, Size: 0x48]// 0x7611d58680
	byte Role;//[Offset: 0x1f0, Size: 0x1]// 0x7611d58600
	byte NetDormancy;//[Offset: 0x1f1, Size: 0x1]// 0x7611d58580
	byte AutoReceiveInput;//[Offset: 0x1f2, Size: 0x1]// 0x7611d584a0
	int InputPriority;//[Offset: 0x1f4, Size: 0x4]// 0x7611d58430
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]// 0x7611d583b0
	float NetCullDistanceSquared;//[Offset: 0x200, Size: 0x4]// 0x7611d58340
	float OBRelevantFactor;//[Offset: 0x204, Size: 0x4]// 0x7611d582d0
	int NetTag;//[Offset: 0x208, Size: 0x4]// 0x7611d58260
	float NetConsiderFrequency;//[Offset: 0x210, Size: 0x4]// 0x7611d581f0
	float NetUpdateFrequency;//[Offset: 0x214, Size: 0x4]// 0x7611d58180
	float MinNetUpdateFrequency;//[Offset: 0x218, Size: 0x4]// 0x7611d58110
	float NetPriority;//[Offset: 0x220, Size: 0x4]// 0x7611d580a0
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]// 0x7611d58020
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]// 0x7611d57fa0
	bool bCanNotifyDamager;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]// 0x7611d57f20
	bool bRepParentUpdatePhx;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1]// 0x7611d57ea0
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x228, Size: 0x1]// 0x7611d57e20
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x228, Size: 0x1]// 0x7611d57da0
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x228, Size: 0x1]// 0x7611d57d20
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1]// 0x7611d57ca0
	bool bForcedRelevancyCheckForReplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x229, Size: 0x1]// 0x7611d57c20
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x229, Size: 0x1]// 0x7611d57ba0
	bool bSupportAsyncSpawnInReplay;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x229, Size: 0x1]// 0x7611d57b20
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x229, Size: 0x1]// 0x7611d57aa0
	bool bCanCachedInWorldSpecialActorList;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x229, Size: 0x1]// 0x7611d57a20
	bool bShouldDumpCallstackWhenMovingfast;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x229, Size: 0x1]// 0x7611d579a0
	float CollisionCheckMoveDisStep;//[Offset: 0x22c, Size: 0x4]// 0x7611d57930
	float CollisionCheckMoveDegreeStep;//[Offset: 0x230, Size: 0x4]// 0x7611d578c0
	float CollisionCheckCircleRadius;//[Offset: 0x234, Size: 0x4]// 0x7611d57850
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]// 0x7611d577d0
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]// 0x7611d57750
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x238, Size: 0x1]// 0x7611d576d0
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x238, Size: 0x1]// 0x7611d57650
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x238, Size: 0x1]// 0x7611d575d0
	enum SpawnCollisionHandlingMethod;//[Offset: 0x239, Size: 0x1]// 0x7611d57470
	Pawn* Instigator;//[Offset: 0x240, Size: 0x8]// 0x7611d573f0
	Actor*[] Children;//[Offset: 0x248, Size: 0x10]// 0x7611d572f0
	SceneComponent* RootComponent;//[Offset: 0x258, Size: 0x8]// 0x7611d57270
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x260, Size: 0x10]// 0x7611d57170
	FName[] Layers;//[Offset: 0x278, Size: 0x10]// 0x7611d57080
	ChildActorComponent* ParentComponent;//[Offset: 0x288, Size: 0x8]// 0x7611d57000
	FName[] Tags;//[Offset: 0x290, Size: 0x10]// 0x7611d56f10
	FName[] DynamicTags;//[Offset: 0x2a0, Size: 0x10]// 0x7611d56e20
	uint64 HiddenEditorViews;//[Offset: 0x2b0, Size: 0x8]// 0x7611d56db0
	delegate OnTakeAnyDamage;//[Offset: 0x2b8, Size: 0x10]// 0x7611d56d30
	delegate OnTakePointDamage;//[Offset: 0x2c8, Size: 0x10]// 0x7611d56cb0
	delegate OnActorBeginOverlap;//[Offset: 0x2d8, Size: 0x10]// 0x7611d56c30
	delegate OnActorEndOverlap;//[Offset: 0x2e8, Size: 0x10]// 0x7611d56bb0
	delegate OnBeginCursorOver;//[Offset: 0x2f8, Size: 0x10]// 0x7611d56b30
	delegate OnEndCursorOver;//[Offset: 0x308, Size: 0x10]// 0x7611d56ab0
	delegate OnClicked;//[Offset: 0x318, Size: 0x10]// 0x7611d56a30
	delegate OnReleased;//[Offset: 0x328, Size: 0x10]// 0x7611d569b0
	delegate OnInputTouchBegin;//[Offset: 0x338, Size: 0x10]// 0x7611d56930
	delegate OnInputTouchEnd;//[Offset: 0x348, Size: 0x10]// 0x7611d568b0
	delegate OnInputTouchEnter;//[Offset: 0x358, Size: 0x10]// 0x7611d56830
	delegate OnInputTouchLeave;//[Offset: 0x368, Size: 0x10]// 0x7611d567b0
	delegate OnActorHit;//[Offset: 0x378, Size: 0x10]// 0x7611d56730
	delegate OnActorHitNew;//[Offset: 0x388, Size: 0x10]// 0x7611d566b0
	delegate OnDestroyed;//[Offset: 0x398, Size: 0x10]// 0x7611d56630
	delegate OnEndPlay;//[Offset: 0x3a8, Size: 0x10]// 0x7611d565b0
	<Object*,AnimNotifyStateBoneRetargetAdaptInfo> AnimNotifyStateBoneRetargetAdaptInfoMap;//[Offset: 0x3b8, Size: 0x50]// 0x7611d56260
	delegate OnBecomeViewTargetEvent;//[Offset: 0x408, Size: 0x10]// 0x7611d561e0
	delegate OnEndViewTargetEvent;//[Offset: 0x418, Size: 0x10]// 0x7611d56160
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x4c8, Size: 0x10]// 0x7611d56060
	ActorComponent*[] InstanceComponents;//[Offset: 0x4d8, Size: 0x10]// 0x7611d55f60
	bool WasRecentlyRendered(float Tolerance);// 0x6d7436c
	void UserConstructionScript();// 0xffffff8a17adf2b0
	Object* TryGetBoneRetargetObjForNotifyState(Object* InTargetNotifyState);// 0x6d742d8
	Object* TryGetBoneRetargetObj(Object* InSourceObj);// 0x6d74244
	void TearOff();// 0x6d74228
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x6d74174
	void SetTickGroup(byte NewTickGroup);// 0x6d740f8
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6d74074
	void SetReplicates(bool bInReplicates);// 0x6d73ff0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x6d73f64
	void SetOwner(Actor* NewOwner);// 0x6d73ee0
	void SetNetDormancy(byte NewDormancy);// 0x6d73e64
	void SetLifeSpan(float InLifespan);// 0x6d73de0
	void SetActorTickInterval(float TickInterval);// 0x6d73d64
	void SetActorTickEnabled(bool bEnabled);// 0x6d73ce0
	void SetActorSimulatedRelevancy(bool bIsRelevant);// 0x6d73c5c
	void SetActorScale3D(Vector NewScale3D);// 0x6d73bdc
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x6d73b5c
	void SetActorHiddenInGame(bool bNewHidden);// 0x6d73ad0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x6d73a4c
	void SetActorConsideredHidden(bool bNewHidden);// 0x6d739c8
	void ServerSendScriptNetworkRemoteContent_Unreliable(const ScriptNetworkRemoteContent Content);// 0x6d7390c
	void ServerSendScriptNetworkRemoteContent(const ScriptNetworkRemoteContent Content);// 0x6d73850
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6d737cc
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6d73748
	void RemoveDynamicTag(FName Tag);// 0x6d736cc
	void ReceiveTick(float DeltaSeconds);// 0xffffff8a17adf2b0
	void ReceiveScriptNetworkRemoteContent(out const ScriptNetworkRemoteContent Content);// 0x6d73634
	void ReceiveReInitForReplay();// 0xffffff8a17adf2b0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8a17adf2b0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xffffff8a17adf2b0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0xffffff8a17adf2b0
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8a17adf2b0
	void ReceiveDestroyed();// 0xffffff8a17adf2b0
	void ReceiveBeginPlay();// 0xffffff8a17adf2b0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8a17adf2b0
	void ReceiveActorSimulatedRelevant(bool bIsRelevant, bool bConsiderHidden);// 0xffffff8a17adf2b0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xffffff8a17adf2b0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xffffff8a17adf2b0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xffffff8a17adf2b0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xffffff8a17adf2b0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xffffff8a17adf2b0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xffffff8a17adf2b0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xffffff8a17adf2b0
	void ReceiveActorEndCursorOver();// 0xffffff8a17adf2b0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xffffff8a17adf2b0
	void ReceiveActorBeginCursorOver();// 0xffffff8a17adf2b0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x6d73528
	void OnRep_TearOff();// 0x6d7350c
	void OnRep_ScriptNetworkReplicatedPropertyWrapper();// 0x6d734f8
	void OnRep_Role();// 0x6d734dc
	void OnRep_ReplicateMovement();// 0x6d734c0
	void OnRep_ReplicatedMovement();// 0x6d734a4
	void OnRep_RemoteRole();// 0x6d73488
	void OnRep_Owner();// 0x6d7346c
	void OnRep_Instigator();// 0x6d73450
	void OnRep_Hidden();// 0x6d73434
	void OnRep_CanBeDamaged();// 0x6d73418
	void OnRep_AttachmentReplication();// 0x6d733fc
	void OnActorSimulatedRelevant(bool bIsRelevant, bool bConsiderHidden);// 0x6d73324
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x6d731b0
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x6d73124
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x6d73050
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d72e94
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x6d72dc0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d72c18
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d72aa8
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d72930
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d72768
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d725dc
	void K2_OnReset();// 0xffffff8a17adf2b0
	void K2_OnEndViewTarget(PlayerController* PC);// 0xffffff8a17adf2b0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xffffff8a17adf2b0
	SceneComponent* K2_GetRootComponent();// 0x6d725c0
	Rotator K2_GetActorRotation();// 0x6d724f4
	Vector K2_GetActorLocation();// 0x6d724b0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6d723bc
	void K2_DestroyComponent(ActorComponent* Component);// 0x6d72340
	void K2_DestroyActor();// 0x6d72324
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6d72178
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6d71fcc
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x6d71e98
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x6d71d64
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d71bbc
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d71a4c
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d718d4
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d7172c
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d715bc
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d71444
	bool IsOverlappingActor(const Actor* Other);// 0x6d713b4
	bool IsChildActor();// 0x6d7137c
	bool IsAnimNotifyStateBoneRetargetAdaptInitDone(Object* InTargetNotifyState);// 0x6d712e4
	bool IsActorTickEnabled();// 0x6d712ac
	bool IsActorBeingDestroyed();// 0x6d7128c
	void InitAnimNotifyStateBoneRetargetInfo(Object* InTargetNotifyState, Object* InBoneRetargetObj);// 0x6d711d0
	bool HasAuthority();// 0x6d711ac
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x6d71120
	Vector GetVelocity();// 0x6d710e0
	Transform GetTransform();// 0x6d710a4
	FString GetToString();// 0x6d7101c
	bool GetTickableWhenPaused();// 0x6d70fe4
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x6d70f58
	byte GetRole();// 0x6d70f24
	byte GetRemoteRole();// 0x6d70f08
	ChildActorComponent* GetParentComponent();// 0x6d70ed4
	Actor* GetParentActor();// 0x6d70ea0
	Actor* GetOwner();// 0x6d70e84
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x6d70df0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6d70d10
	byte GetLocalRole();// 0x6d70cf4
	float GetLifeSpan();// 0x6d70cb8
	FString GetLevelName();// 0x6d70c38
	Controller* GetInstigatorController();// 0x6d70c04
	Pawn* GetInstigator();// 0x6d70bd0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x6d70a64
	float GetInputAxisValue(const FName InputAxisName);// 0x6d709d8
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x6d70870
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x6d707e4
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x6d70758
	float GetGameTimeSinceCreation();// 0x6d70724
	float GetDotProductTo(const Actor* OtherActor);// 0x6d70698
	float GetDistanceTo(const Actor* OtherActor);// 0x6d7060c
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x6d70504
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x6d70434
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x6d703a8
	FName GetAttachParentSocketName();// 0x6d70374
	Actor* GetAttachParentActor();// 0x6d70340
	void GetAttachedActors(out Actor*[] OutActors);// 0x6d702ac
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x6d701c4
	Vector GetActorUpVector();// 0x6d70170
	float GetActorTimeDilation();// 0x6d7013c
	float GetActorTickInterval();// 0x6d70108
	Vector GetActorScale3D();// 0x6d700d0
	Vector GetActorRightVector();// 0x6d7007c
	Vector GetActorRelativeScale3D();// 0x6d70044
	Vector GetActorForwardVector();// 0x6d6fff0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x6d6ff04
	bool GetActorEnableCollision();// 0x6d6fee4
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x6d6fdb4
	void ForceNetUpdate();// 0x6d6fd98
	void ForceNetConsider();// 0x6d6fd7c
	void FlushNetDormancy();// 0x6d6fd68
	void EnableInput(PlayerController* PlayerController);// 0x6d6fce4
	void DisableInput(PlayerController* PlayerController);// 0x6d6fc60
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x6d6fbdc
	void ClientSendScriptNetworkRemoteContent_Unreliable(const ScriptNetworkRemoteContent Content);// 0x6d6fb4c
	void ClientSendScriptNetworkRemoteContent(const ScriptNetworkRemoteContent Content);// 0x6d6fabc
	void ClearAnimNotifyStateBoneRetargetAdaptState(Object* InTargetNotifyState);// 0x6d6fa38
	bool CanBeBaseForCharacter(Pawn* Pawn);// 0x6d6f9a0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6d6f91c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6d6f898
	void AddDynamicTag(FName Tag);// 0x6d6f81c
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x6d6f6a0
	bool ActorHasTag(FName Tag);// 0x6d6f610

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]// 0x7611ceaf00
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]// 0x7611ceae80
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]// 0x7611ceae00
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]// 0x7611cead80
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]// 0x7611cead00
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]// 0x7611ceac80
	bool bPureLogicTick;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]// 0x7611ceac00
	float TickInterval;//[Offset: 0x40, Size: 0x4]// 0x7611ceab90

--------------------------------
Class: DeferedComponentUnit

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x58]// 0x7611ceaa70
	FName[] ComponentTags;//[Offset: 0x88, Size: 0x10]// 0x7611cea980
	float NetUpdateFrequency;//[Offset: 0x98, Size: 0x4]// 0x7611cea910
	bool bAllowBPReceiveTickEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]// 0x7611cea890
	bool bDeferedConstructComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1]// 0x7611cea810
	AssetUserData*[] AssetUserData;//[Offset: 0xa0, Size: 0x10]// 0x7611cea710
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]// 0x7611cea690
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]// 0x7611cea610
	bool bReplicates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]// 0x7611cea590
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]// 0x7611cea510
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2, Size: 0x1]// 0x7611cea490
	bool bIsActive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb2, Size: 0x1]// 0x7611cea410
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb2, Size: 0x1]// 0x7611cea390
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb2, Size: 0x1]// 0x7611cea310
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb3, Size: 0x1]// 0x7611cea290
	enum CreationMethod;//[Offset: 0xb5, Size: 0x1]// 0x7611cea130
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xb8, Size: 0x10]// 0x7611ce9e20
	delegate OnComponentActivated;//[Offset: 0xe8, Size: 0x10]// 0x7611ce9da0
	delegate OnComponentDeactivated;//[Offset: 0xf8, Size: 0x10]// 0x7611ce9ca0
	void ToggleActive();// 0x6d784cc
	void SetTickGroup(byte NewTickGroup);// 0x6d78448
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6d783c4
	void SetIsReplicated(bool ShouldReplicate);// 0x6d78340
	void SetComponentTickInterval(float TickInterval);// 0x6d782c4
	void SetComponentTickEnabled(bool bEnabled);// 0x6d78238
	void SetAutoActivate(bool bNewAutoActivate);// 0x6d781ac
	void SetActive(bool bNewActive, bool bReset);// 0x6d780d4
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6d78050
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6d77fcc
	void ReceiveTick(float DeltaSeconds);// 0xffffff8a17adf2b0
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8a17adf2b0
	void ReceiveBeginPlay();// 0xffffff8a17adf2b0
	void OnRep_Replicates();// 0x6d77fb8
	void OnRep_IsActive();// 0x6d77f9c
	void K2_DestroyComponent(Object* Object);// 0x6d77f20
	bool IsComponentTickEnabled();// 0x6d77ee0
	bool IsBeingDestroyed();// 0x6d77ec0
	bool IsActive();// 0x6d77e80
	FString GetToString();// 0x6d77df8
	Actor* GetOwner();// 0x6d77ddc
	float GetComponentTickInterval();// 0x6d77da8
	void ForceNetUpdate();// 0x6d77d8c
	void Deactivate();// 0x6d77d70
	bool ComponentHasTag(FName Tag);// 0x6d77ce0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6d77c5c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6d77bd8
	void Activate(bool bReset);// 0x6d77b4c

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]// 0x7611cea0b0
	FName MemberName;//[Offset: 0x8, Size: 0x8]// 0x7611cea040
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]// 0x7611ce9fc0

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]// 0x7611cd8ee0
	int B;//[Offset: 0x4, Size: 0x4]// 0x7611cd8e70
	int C;//[Offset: 0x8, Size: 0x4]// 0x7611cd8e00
	int D;//[Offset: 0xc, Size: 0x4]// 0x7611cd8d90

--------------------------------
Class: ScriptNetworkReplicatedPropertyWrapper

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]// 0x7611d59380
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]// 0x7611d59300
	Vector Location;//[Offset: 0x18, Size: 0xc]// 0x7611d59280
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]// 0x7611d59200
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]// 0x7611d59180
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]// 0x7611d59100
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]// 0x7611d59000
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]// 0x7611d58ea0
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]// 0x7611d58d40

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]// 0x7611cd9140
	float Y;//[Offset: 0x4, Size: 0x4]// 0x7611cd90d0
	float Z;//[Offset: 0x8, Size: 0x4]// 0x7611cd8ff0

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]// 0x7611cd9a40
	float Yaw;//[Offset: 0x4, Size: 0x4]// 0x7611cd99d0
	float Roll;//[Offset: 0x8, Size: 0x4]// 0x7611cd9960

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]// 0x7611d58b30
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]// 0x7611d58ab0
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]// 0x7611d58990
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]// 0x7611d58910
	FName AttachSocket;//[Offset: 0x30, Size: 0x8]// 0x7611d588a0
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]// 0x7611d58820
	Actor* AttachParent_Direct;//[Offset: 0x40, Size: 0x8]// 0x7611d587a0

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x120, Size: 0x8]// 0x7611cf36a0
	SceneComponent* AttachParent;//[Offset: 0x128, Size: 0x8]// 0x7611cf3620
	FName AttachSocketName;//[Offset: 0x130, Size: 0x8]// 0x7611cf35b0
	SceneComponent*[] AttachChildren;//[Offset: 0x138, Size: 0x10]// 0x7611cf34b0
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x148, Size: 0x10]// 0x7611cf33b0
	Vector RelativeLocation;//[Offset: 0x184, Size: 0xc]// 0x7611cf3330
	Rotator RelativeRotation;//[Offset: 0x190, Size: 0xc]// 0x7611cf32b0
	Vector RelativeScale3D;//[Offset: 0x19c, Size: 0xc]// 0x7611cf3230
	Vector ComponentVelocity;//[Offset: 0x210, Size: 0xc]// 0x7611cf31b0
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 0x1]// 0x7611cf3130
	bool bAttachCycleCheckFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 0x1]// 0x7611cf30b0
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 0x1]// 0x7611cf3030
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21c, Size: 0x1]// 0x7611cf2fb0
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21c, Size: 0x1]// 0x7611cf2f30
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21c, Size: 0x1]// 0x7611cf2eb0
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21c, Size: 0x1]// 0x7611cf2e30
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21c, Size: 0x1]// 0x7611cf2db0
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21d, Size: 0x1]// 0x7611cf2d30
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21d, Size: 0x1]// 0x7611cf2cb0
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21d, Size: 0x1]// 0x7611cf2c30
	bool bForceUpdateChildCompTransform;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21d, Size: 0x1]// 0x7611cf2bb0
	bool bEnableUpdateTransformOption;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21d, Size: 0x1]// 0x7611cf2b30
	byte Mobility;//[Offset: 0x21f, Size: 0x1]// 0x7611cf2ab0
	byte DetailMode;//[Offset: 0x220, Size: 0x1]// 0x7611cf29d0
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x270, Size: 0x10]// 0x7611cf2950
	enum UpdateTransformOption;//[Offset: 0x2b4, Size: 0x1]// 0x7611cf27f0
	void ToggleVisibility(bool bPropagateToChildren);// 0x6f069f8
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x6f06930
	void SetWorldScale3D(Vector NewScale);// 0x6f068b0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren, bool bForceNoPropagate);// 0x6f06794
	void SetRelativeScale3D(Vector NewScale3D);// 0x6f0670c
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x6f06638
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x6f06524
	void ResetRelativeTransform();// 0x6f06510
	void OnRep_Visibility(bool OldValue);// 0x6f0648c
	void OnRep_Transform();// 0x6f06478
	void OnRep_AttachSocketName();// 0x6f06464
	void OnRep_AttachParent();// 0x6f06450
	void OnRep_AttachChildren();// 0x6f0643c
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f06294
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f06124
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f05f70
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f05df8
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f05c50
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f05ae0
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f0592c
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f057b4
	void K2_SetMobility(byte NewMobility);// 0x6f05738
	Transform K2_GetComponentToWorld();// 0x6f056e4
	Vector K2_GetComponentScale();// 0x6f056ac
	Rotator K2_GetComponentRotation();// 0x6f05674
	Vector K2_GetComponentLocation();// 0x6f0563c
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x6f05504
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6f05344
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x6f051fc
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f05054
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f04ee4
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f04d6c
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f04bfc
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f04a84
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f048dc
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f0476c
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6f045f4
	bool IsVisible();// 0x6f045b4
	bool IsSimulatingPhysics(FName BoneName);// 0x6f0451c
	bool IsAnySimulatingPhysics();// 0x6f044dc
	Vector GetUpVector();// 0x6f044a4
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x6f043bc
	Rotator GetSocketRotation(FName InSocketName);// 0x6f04324
	Quat GetSocketQuaternion(FName InSocketName);// 0x6f04288
	Vector GetSocketLocation(FName InSocketName);// 0x6f041f0
	Vector GetRightVector();// 0x6f041b8
	Transform GetRelativeTransform();// 0x6f04164
	PhysicsVolume* GetPhysicsVolume();// 0x6f04130
	void GetParentComponents(out SceneComponent*[] Parents);// 0x6f0409c
	int GetNumChildrenComponents();// 0x6f04068
	Vector GetForwardVector();// 0x6f04030
	Vector GetComponentVelocity();// 0x6f03ff0
	Transform GetComponentTransformViewTranslatedBP();// 0x6f03fcc
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x6f03f00
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x6f03e1c
	SceneComponent* GetChildComponent(int ChildIndex);// 0x6f03d90
	FName GetAttachSocketName();// 0x6f03d74
	SceneComponent* GetAttachParent();// 0x6f03d58
	FName[] GetAllSocketNames();// 0x6f03cd8
	bool DoesSocketExist(FName InSocketName);// 0x6f03c40
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x6f03b68

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x548, Size: 0x4]// 0x75b4da6c70
	int Priority;//[Offset: 0x54c, Size: 0x4]// 0x75b4da6ce0
	float FluidFriction;//[Offset: 0x550, Size: 0x4]// 0x75b4da6d50
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 0x1]// 0x75b4d44b00
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 0x1]// 0x75b4d44b80

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x510, Size: 0x1]// 0x75c98d3d00
	Color BrushColor;//[Offset: 0x514, Size: 0x4]// 0x75c98d3d80
	int PolyFlags;//[Offset: 0x518, Size: 0x4]// 0x75c9917130
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51c, Size: 0x1]// 0x75c98d3e00
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51c, Size: 0x1]// 0x75c98d3e80
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51c, Size: 0x1]// 0x75c98d3f00
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51c, Size: 0x1]// 0x75c98d3f80
	Model* Brush;//[Offset: 0x520, Size: 0x8]// 0x75c98d4000
	BrushComponent* BrushComponent;//[Offset: 0x528, Size: 0x8]// 0x75c98d4080
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1]// 0x75c98d4100
	GeomSelection[] SavedSelections;//[Offset: 0x538, Size: 0x10]// 0x75c98d4200

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]// 0x7611cda850
	byte G;//[Offset: 0x1, Size: 0x1]// 0x7611cda7d0
	byte R;//[Offset: 0x2, Size: 0x1]// 0x7611cda750
	byte A;//[Offset: 0x3, Size: 0x1]// 0x7611cda6d0

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x6a8, Size: 0x8]// 0x75a7893000
	BodySetup* BrushBodySetup;//[Offset: 0x6b0, Size: 0x8]// 0x75a7893080
	Vector PrePivot;//[Offset: 0x6b8, Size: 0xc]// 0x75a7893100

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x2c0, Size: 0x4]// 0x7611d06350
	float MinDrawDistance;//[Offset: 0x2c4, Size: 0x4]// 0x7611d062e0
	float LDMaxDrawDistance;//[Offset: 0x2c8, Size: 0x4]// 0x7611d06270
	bool bUseAsPVSOC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]// 0x7611d061f0
	bool bUseDynamicPVS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]// 0x7611d06170
	float CachedMaxDrawDistance;//[Offset: 0x2d0, Size: 0x4]// 0x7611d06100
	byte DepthPriorityGroup;//[Offset: 0x2d4, Size: 0x1]// 0x7611d06080
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2d5, Size: 0x1]// 0x7611d05fa0
	enum LightmapType;//[Offset: 0x2d6, Size: 0x1]// 0x7611d05e40
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 0x1]// 0x7611d05dc0
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d8, Size: 0x1]// 0x7611d05d40
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d8, Size: 0x1]// 0x7611d05cc0
	bool bUpdateOverlapEventsWhenMove;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d8, Size: 0x1]// 0x7611d05c40
	bool bUseSingleSweep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d8, Size: 0x1]// 0x7611d05bc0
	enum OverrideQueryMobilityType;//[Offset: 0x2d9, Size: 0x1]// 0x7611d05a60
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2da, Size: 0x1]// 0x7611d059e0
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2da, Size: 0x1]// 0x7611d05960
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2da, Size: 0x1]// 0x7611d058e0
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2da, Size: 0x1]// 0x7611d05860
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2da, Size: 0x1]// 0x7611d057e0
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2da, Size: 0x1]// 0x7611d05760
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2da, Size: 0x1]// 0x7611d056e0
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2da, Size: 0x1]// 0x7611d05660
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2db, Size: 0x1]// 0x7611d055e0
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2db, Size: 0x1]// 0x7611d05560
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2db, Size: 0x1]// 0x7611d054e0
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2db, Size: 0x1]// 0x7611d05460
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2db, Size: 0x1]// 0x7611d053e0
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2db, Size: 0x1]// 0x7611d05360
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2db, Size: 0x1]// 0x7611d052e0
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2db, Size: 0x1]// 0x7611d05260
	bool bIdeaOutlineNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 0x1]// 0x7611d051e0
	bool bIdeaOutlineOcclusionHighlight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 0x1]// 0x7611d05160
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc, Size: 0x1]// 0x7611d050e0
	LinearColor IdeaOutlineColor;//[Offset: 0x2e0, Size: 0x10]// 0x7611d05060
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]// 0x7611d04fe0
	float IdeaOutlineThickness;//[Offset: 0x2f4, Size: 0x4]// 0x7611d04f70
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]// 0x7611d04ef0
	enum DrawDyeingMode;//[Offset: 0x2f9, Size: 0x1]// 0x7611d04df0
	LinearColor VisibleDyeingColor;//[Offset: 0x2fc, Size: 0x10]// 0x7611d04d70
	LinearColor OccludedDyeingColor;//[Offset: 0x30c, Size: 0x10]// 0x7611d04cf0
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1]// 0x7611d04c70
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 0x1]// 0x7611d04bf0
	bool bForceIBL;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c, Size: 0x1]// 0x7611d04b70
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31c, Size: 0x1]// 0x7611d04af0
	bool bOnlyAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31c, Size: 0x1]// 0x7611d04a70
	bool bSelectable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31c, Size: 0x1]// 0x7611d049f0
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31c, Size: 0x1]// 0x7611d04970
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31c, Size: 0x1]// 0x7611d048f0
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31d, Size: 0x1]// 0x7611d04870
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31d, Size: 0x1]// 0x7611d047f0
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31d, Size: 0x1]// 0x7611d04770
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31d, Size: 0x1]// 0x7611d046f0
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31d, Size: 0x1]// 0x7611d04670
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31d, Size: 0x1]// 0x7611d045f0
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31d, Size: 0x1]// 0x7611d04570
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31d, Size: 0x1]// 0x7611d044f0
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31e, Size: 0x1]// 0x7611d04470
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31e, Size: 0x1]// 0x7611d043f0
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31e, Size: 0x1]// 0x7611d04370
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31e, Size: 0x1]// 0x7611d042f0
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31e, Size: 0x1]// 0x7611d04270
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31e, Size: 0x1]// 0x7611d041f0
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31e, Size: 0x1]// 0x7611d04170
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31e, Size: 0x1]// 0x7611d040f0
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31f, Size: 0x1]// 0x7611d04070
	bool bReceiveLandscapeShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31f, Size: 0x1]// 0x7611d03ff0
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31f, Size: 0x1]// 0x7611d03f70
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31f, Size: 0x1]// 0x7611d03ef0
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31f, Size: 0x1]// 0x7611d03e70
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31f, Size: 0x1]// 0x7611d03df0
	bool bCorrectPXTrans;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31f, Size: 0x1]// 0x7611d03d70
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31f, Size: 0x1]// 0x7611d03cf0
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]// 0x7611d03c70
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]// 0x7611d03bf0
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]// 0x7611d03b70
	bool bUpdateTransformUseTeleportPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1]// 0x7611d03af0
	bool bUseAsyncCompilePSO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x320, Size: 0x1]// 0x7611d03a70
	byte bHasCustomNavigableGeometry;//[Offset: 0x321, Size: 0x1]// 0x7611d03990
	byte CanCharacterStepUpOn;//[Offset: 0x323, Size: 0x1]// 0x7611d038b0
	LightingChannels LightingChannels;//[Offset: 0x324, Size: 0x1]// 0x7611d03610
	enum CustomDepthStencilWriteMask;//[Offset: 0x325, Size: 0x1]// 0x7611d03510
	int CustomDepthStencilValue;//[Offset: 0x328, Size: 0x4]// 0x7611d034a0
	int TranslucencySortPriority;//[Offset: 0x32c, Size: 0x4]// 0x7611d03430
	int VisibilityId;//[Offset: 0x330, Size: 0x4]// 0x7611d033c0
	int PVSHandlerID;//[Offset: 0x334, Size: 0x4]// 0x7611d03350
	int NumInstanceVisibilityVolumes;//[Offset: 0x338, Size: 0x4]// 0x7611d032e0
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x344, Size: 0x4]// 0x7611d03270
	float BoundsScale;//[Offset: 0x34c, Size: 0x4]// 0x7611d03200
	float OCBoundsScale;//[Offset: 0x350, Size: 0x4]// 0x7611d03190
	int OCBoundsExtent;//[Offset: 0x354, Size: 0x4]// 0x7611d03120
	float LastSubmitTime;//[Offset: 0x358, Size: 0x4]// 0x7611d030b0
	float LastRenderTime;//[Offset: 0x35c, Size: 0x4]// 0x7611d03040
	float LastRenderTimeOnScreen;//[Offset: 0x360, Size: 0x4]// 0x7611d02fd0
	Actor*[] MoveIgnoreActors;//[Offset: 0x368, Size: 0x10]// 0x7611d02ed0
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x378, Size: 0x10]// 0x7611d02dd0
	BodyInstance BodyInstance;//[Offset: 0x3a8, Size: 0x1a0]// 0x7611d00240
	delegate OnComponentHit;//[Offset: 0x548, Size: 0x10]// 0x7611d001c0
	delegate OnComponentBeginOverlap;//[Offset: 0x558, Size: 0x10]// 0x7611d00140
	delegate OnComponentEndOverlap;//[Offset: 0x568, Size: 0x10]// 0x7611d000c0
	delegate OnComponentWake;//[Offset: 0x578, Size: 0x10]// 0x7611d00040
	delegate OnComponentSleep;//[Offset: 0x588, Size: 0x10]// 0x7611cfffc0
	delegate OnBeginCursorOver;//[Offset: 0x5a8, Size: 0x10]// 0x7611cfff40
	delegate OnEndCursorOver;//[Offset: 0x5b8, Size: 0x10]// 0x7611cffec0
	delegate OnClicked;//[Offset: 0x5c8, Size: 0x10]// 0x7611cffe40
	delegate OnReleased;//[Offset: 0x5d8, Size: 0x10]// 0x7611cffdc0
	delegate OnInputTouchBegin;//[Offset: 0x5e8, Size: 0x10]// 0x7611cffd40
	delegate OnInputTouchEnd;//[Offset: 0x5f8, Size: 0x10]// 0x7611cffcc0
	delegate OnInputTouchEnter;//[Offset: 0x608, Size: 0x10]// 0x7611cffc40
	delegate OnInputTouchLeave;//[Offset: 0x618, Size: 0x10]// 0x7611cffbc0
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x640, Size: 0x8]// 0x7611cffb40
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x648, Size: 0x58]// 0x7611cffa20
	bool bIgnoreOtherCanBeOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]// 0x7611cff9a0
	void WakeRigidBody(FName BoneName);// 0x6ef0008
	void WakeAllRigidBodies();// 0x6eeffec
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x6eeff58
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x6eefed0
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x6eefe54
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x6eefdd0
	void SetSimulatePhysics(bool bSimulate);// 0x6eefd44
	void SetRenderInMono(bool bValue);// 0x6eefcc0
	void SetRenderInMainPass(bool bValue);// 0x6eefc3c
	void SetRenderCustomDepth(bool bValue);// 0x6eefbb8
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x6eefb34
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x6eefab0
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6eef9ac
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6eef89c
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6eef78c
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x6eef680
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x6eef574
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x6eef454
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x6eef334
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x6eef2b0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x6eef22c
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x6eef1a4
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x6eef118
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x6eef05c
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x6eeef9c
	void SetMassScale(FName BoneName, float InMassScale);// 0x6eeeedc
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x6eeedd8
	void SetLockedAxis(byte LockedAxis);// 0x6eeed54
	void SetLinearDamping(float InDamping);// 0x6eeecd0
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x6eeec4c
	void SetIdeaOutlineOcclusionHighlight(bool bOcclusionHighlight);// 0x6eeebc8
	void SetIdeaOutlineNew(bool bNew);// 0x6eeeb44
	void SetForceIBL(bool InForceIBL);// 0x6eeeac0
	void SetEnableGravity(bool bGravityEnabled);// 0x6eeea34
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x6eee9b0
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x6eee934
	void SetDrawDyeing(bool bNewDrawOutline);// 0x6eee8b0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x6eee834
	void SetCustomDepthStencilValue(int Value);// 0x6eee7b8
	void SetCullDistance(float NewCullDistance);// 0x6eee73c
	void SetConstraintMode(byte ConstraintMode);// 0x6eee6b8
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x6eee5f8
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x6eee574
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x6eee4f0
	void SetCollisionObjectType(byte Channel);// 0x6eee46c
	void SetCollisionEnabled(byte NewType);// 0x6eee3e8
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x6eee328
	void SetCastShadow(bool NewCastShadow);// 0x6eee2a4
	void SetCastPhotonShadow(bool bNewCastPhotonShadow);// 0x6eee220
	void SetBoundsScale(float NewBoundsScale);// 0x6eee1a4
	void SetAngularDamping(float InDamping);// 0x6eee120
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x6eee050
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x6eedf68
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x6eede5c
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x6eedd74
	void SetAllMassScale(float InMassScale);// 0x6eedcf0
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x6eedc14
	void PutRigidBodyToSleep(FName BoneName);// 0x6eedb98
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x6eedad0
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x6eed9fc
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x6eed728
	bool K2_IsQueryCollisionEnabled();// 0x6eed6e0
	bool K2_IsPhysicsCollisionEnabled();// 0x6eed698
	bool K2_IsCollisionEnabled();// 0x6eed654
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x6eed5c4
	bool IsOverlappingActor(const Actor* Other);// 0x6eed534
	bool IsGravityEnabled();// 0x6eed4f4
	bool IsAnyRigidBodyAwake();// 0x6eed4b4
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x6eed3f4
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x6eed334
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x6eed2ec
	PhysicalMaterial* GetPhysMaterial(int Item);// 0x6eed258
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x6eed184
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x6eed0f4
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x6eed064
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x6eecfc0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x6eecf1c
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x6eece88
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6eecda8
	int GetNumMaterials();// 0x6eecd6c
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x6eecc8c
	MaterialInterface* GetMaterial(int ElementIndex);// 0x6eecbf8
	float GetMassScale(FName BoneName);// 0x6eecb64
	float GetMass();// 0x6eecb28
	float GetLinearDamping();// 0x6eecaec
	Vector GetInertiaTensor(FName BoneName);// 0x6eeca54
	byte GetCollisionResponseToChannel(byte Channel);// 0x6eec9c0
	FName GetCollisionProfileName();// 0x6eec98c
	byte GetCollisionObjectType();// 0x6eec950
	byte GetCollisionEnabled();// 0x6eec914
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x6eec7d8
	Vector GetCenterOfMass(FName BoneName);// 0x6eec748
	float GetAngularDamping();// 0x6eec70c
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x6eec63c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x6eec56c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x6eec4d8
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x6eec458
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x6eec3d8
	void ClearMoveIgnoreComponents();// 0x6eec3ac
	void ClearMoveIgnoreActors();// 0x6eec398
	bool CanCharacterStepUp(Pawn* Pawn);// 0x6eec300
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x6eec1fc
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x6eec0e4
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x6eebfe0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x6eebe60
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x6eebce0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x6eebbd4
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x6eebac8
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x6eeb9bc
	void AddForceAtLocation_AssumesLocked(Vector Force, Vector Location, FName BoneName);// 0x6eeb8b0
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x6eeb7a4
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x6eeb698
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x6eeb58c
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x6eeb46c
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x6eeb360

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x48]// 0x75a7893e80
	FName BoneName;//[Offset: 0x70, Size: 0x8]// 0x75a788b970
	byte PhysicsType;//[Offset: 0x78, Size: 0x1]// 0x75a7893f00
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1]// 0x75a7893f80
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79, Size: 0x1]// 0x75a7894000
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x79, Size: 0x1]// 0x75a7894080
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x79, Size: 0x1]// 0x75a7894100
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x79, Size: 0x1]// 0x75a7894180
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x79, Size: 0x1]// 0x75a7894200
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x79, Size: 0x1]// 0x75a7894280
	PhysicalMaterial* PhysMaterial;//[Offset: 0x80, Size: 0x8]// 0x75a7894300
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]// 0x75a7894380
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x90, Size: 0x10]// 0x75a7894480
	byte CollisionReponse;//[Offset: 0xa0, Size: 0x1]// 0x75a7894500
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 0x1]// 0x75a7894580
	byte[] SphereCollisionEnabledList;//[Offset: 0xa8, Size: 0x10]// 0x75a7894680
	byte[] CapsuleCollisionEnabledList;//[Offset: 0xb8, Size: 0x10]// 0x75a7894780
	byte[] BoxCollisionEnabledList;//[Offset: 0xc8, Size: 0x10]// 0x75a7894880
	byte[] ConvexCollisionEnabledList;//[Offset: 0xd8, Size: 0x10]// 0x75a7894980
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xe8, Size: 0x10]// 0x75a7894a80
	byte CollisionTraceFlag;//[Offset: 0xf8, Size: 0x1]// 0x75a7894b00
	BodyInstance DefaultInstance;//[Offset: 0x100, Size: 0x1a0]// 0x75a7894b80
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x2a0, Size: 0x10]// 0x75a7894c00
	float BuildScale;//[Offset: 0x2b0, Size: 0x4]// 0x75a788b9e0
	Vector BuildScale3D;//[Offset: 0x2b4, Size: 0xc]// 0x75a7894c80

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]// 0x7612189220
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]// 0x7612188d30
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]// 0x76121888b0
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]// 0x7612188470

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]// 0x76121894b0
	Vector Center;//[Offset: 0x60, Size: 0xc]// 0x7612189430
	float Radius;//[Offset: 0x6c, Size: 0x4]// 0x76121893c0

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]// 0x7611cdb790
	Plane YPlane;//[Offset: 0x10, Size: 0x10]// 0x7611cdb710
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]// 0x7611cdb690
	Plane WPlane;//[Offset: 0x30, Size: 0x10]// 0x7611cdb610

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]// 0x7611cd9850

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]// 0x76121891a0
	Quat Orientation;//[Offset: 0x60, Size: 0x10]// 0x7612189120
	Vector Center;//[Offset: 0x70, Size: 0xc]// 0x76121890a0
	Rotator Rotation;//[Offset: 0x7c, Size: 0xc]// 0x7612189020
	float X;//[Offset: 0x88, Size: 0x4]// 0x7612188fb0
	float Y;//[Offset: 0x8c, Size: 0x4]// 0x7612188f40
	float Z;//[Offset: 0x90, Size: 0x4]// 0x7612188ed0

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]// 0x7611cd9ca0
	float Y;//[Offset: 0x4, Size: 0x4]// 0x7611cd9c30
	float Z;//[Offset: 0x8, Size: 0x4]// 0x7611cd9bc0
	float W;//[Offset: 0xc, Size: 0x4]// 0x7611cd9b50

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]// 0x7612188cb0
	Quat Orientation;//[Offset: 0x60, Size: 0x10]// 0x7612188c30
	Vector Center;//[Offset: 0x70, Size: 0xc]// 0x7612188bb0
	Rotator Rotation;//[Offset: 0x7c, Size: 0xc]// 0x7612188b30
	float Radius;//[Offset: 0x88, Size: 0x4]// 0x7612188ac0
	float Length;//[Offset: 0x8c, Size: 0x4]// 0x7612188a50

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x20, Size: 0x10]// 0x76121887b0
	Box ElemBox;//[Offset: 0x30, Size: 0x1c]// 0x7612188730
	Transform Transform;//[Offset: 0x50, Size: 0x30]// 0x76121886b0

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]// 0x7611cdacd0
	Vector Max;//[Offset: 0xc, Size: 0xc]// 0x7611cdac50
	byte IsValid;//[Offset: 0x18, Size: 0x1]// 0x7611cdabd0

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]// 0x7611cddc80
	Vector Translation;//[Offset: 0x10, Size: 0xc]// 0x7611cddc00
	Vector Scale3D;//[Offset: 0x20, Size: 0xc]// 0x7611cddb80

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]// 0x75a82cad20
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]// 0x75a829cc80
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]// 0x75a829cd00
	float Restitution;//[Offset: 0x30, Size: 0x4]// 0x75a82cad90
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]// 0x75a829cd80
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]// 0x75a829ce00
	float Density;//[Offset: 0x38, Size: 0x4]// 0x75a82cae00
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]// 0x75a82cae70
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]// 0x75a82caee0
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]// 0x75a829ce80
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]// 0x75a829cf00
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]// 0x75a82caf50
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]// 0x75a829d000

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]// 0x75cdbde700
	float FrictionScale;//[Offset: 0x8, Size: 0x4]// 0x75d0a7df30

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]// 0x75a8260ba0

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]// 0x75c98a0500

--------------------------------
Class: StaticMesh.Object
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x75a8278f80
	MaterialInterface* ReplaceMaterial;//[Offset: 0x50, Size: 0x8]// 0x75a8279000
	MeshPerLODBiasArray[] PerLODBiasTypeInfo;//[Offset: 0x58, Size: 0x10]// 0x75a8279100
	int MinLOD;//[Offset: 0x68, Size: 0x4]// 0x75a8261850
	MaterialInterface*[] Materials;//[Offset: 0x70, Size: 0x10]// 0x75a8279200
	StaticMaterial[] StaticMaterials;//[Offset: 0x80, Size: 0x10]// 0x75a8279300
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]// 0x75a82618c0
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]// 0x75a8261930
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]// 0x75a82619a0
	float DistanceFieldSelfShadowBias;//[Offset: 0x9c, Size: 0x4]// 0x75a8261a10
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]// 0x75a8279380
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]// 0x75a8279400
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]// 0x75a8261a80
	float CullingScreenSize;//[Offset: 0xb4, Size: 0x4]// 0x75a8261af0
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]// 0x75a8279480
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 0x1]// 0x75a8279500
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]// 0x75a8279580
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 0x1]// 0x75a8279600
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]// 0x75a8279680
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]// 0x75a8279700
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]// 0x75a8279780
	bool bCompressData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]// 0x75a8279800
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]// 0x75a8279880
	float LpvBiasMultiplier;//[Offset: 0x100, Size: 0x4]// 0x75a8261b60
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]// 0x75a8279900
	int EncodeBits_Position;//[Offset: 0x128, Size: 0x4]// 0x75a8261bd0
	int EncodeBits_TexCoord;//[Offset: 0x12c, Size: 0x4]// 0x75a8261c40
	int EncodeBits_Normal;//[Offset: 0x130, Size: 0x4]// 0x75a8261cb0
	int EncodeBits_Generic;//[Offset: 0x134, Size: 0x4]// 0x75a8261d20
	int EncodeBits_VertexColor;//[Offset: 0x138, Size: 0x4]// 0x75a8261d90
	int EncodeSpeed;//[Offset: 0x13c, Size: 0x4]// 0x75a8261e00
	int DecodeSpeed;//[Offset: 0x140, Size: 0x4]// 0x75a8261e70
	StaticMeshSocket*[] Sockets;//[Offset: 0x158, Size: 0x10]// 0x75a8279a00
	Vector PositiveBoundsExtension;//[Offset: 0x178, Size: 0xc]// 0x75a8279a80
	Vector NegativeBoundsExtension;//[Offset: 0x184, Size: 0xc]// 0x75a8279b00
	BoxSphereBounds ExtendedBounds;//[Offset: 0x190, Size: 0x1c]// 0x75a8279b80
	BoxSphereBounds[] SubLocalBounds;//[Offset: 0x1b0, Size: 0x10]// 0x75a8279c80
	Vector4[] OcclusionCullingVertex;//[Offset: 0x1c0, Size: 0x10]// 0x75a8279d80
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x1d0, Size: 0xc]// 0x75a8279e00
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]// 0x75a8279e80
	int ElementToIgnoreForTexFactor;//[Offset: 0x1e0, Size: 0x4]// 0x75a8261ee0
	AssetUserData*[] AssetUserData;//[Offset: 0x1e8, Size: 0x10]// 0x75a8279f80
	NavCollision* NavCollision;//[Offset: 0x1f8, Size: 0x8]// 0x75a827a000
	StaticSimpleMaterial[] SimpleMaterials;//[Offset: 0x200, Size: 0x10]// 0x75a827a100
	int GetNumSections(int InLOD);// 0x6f2ea5c
	int GetNumLODs();// 0x6f2ea28
	int GetMaterialIndex(FName MaterialSlotName);// 0x6f2e99c
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x6f2e910
	BoxSphereBounds GetBounds();// 0x6f2e8c4
	Box GetBoundingBox();// 0x6f2e878

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x30, Size: 0x8]// 0x75a7971300
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x48, Size: 0x14]// 0x75a7971380
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]// 0x75a7971480
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x6e94db8
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x6e94c68
	PhysicalMaterial* GetPhysicalMaterial();// 0x6e94c2c
	Material* GetBaseMaterial();// 0x6e94bf8

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x24]// 0x75a8278280

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]// 0x760d287af0
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]// 0x75c997a280
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]// 0x75c997a300

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]// 0x7611cdaac0
	float G;//[Offset: 0x4, Size: 0x4]// 0x7611cdaa50
	float B;//[Offset: 0x8, Size: 0x4]// 0x7611cda9e0
	float A;//[Offset: 0xc, Size: 0x4]// 0x7611cda970

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75cdbe8e00
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]// 0x75d0a81d50
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]// 0x75d0a81dc0
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]// 0x75d0a81e30
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x75cdbe8e80
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]// 0x75cdbe8f00
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]// 0x75cdbe8f80
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]// 0x75cdbe9000

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]// 0x75d0a81ea0
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]// 0x75d0a81f10
	FName TextureName;//[Offset: 0x8, Size: 0x8]// 0x75d0a81f80

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 0x8]// 0x75a831a580
	ColorMaterialInput DiffuseColor;//[Offset: 0x80, Size: 0x40]// 0x75a831a600
	ColorMaterialInput SpecularColor;//[Offset: 0xc0, Size: 0x40]// 0x75a831a680
	ColorMaterialInput BaseColor;//[Offset: 0x100, Size: 0x40]// 0x75a831a700
	ScalarMaterialInput Metallic;//[Offset: 0x140, Size: 0x40]// 0x75a831a780
	ScalarMaterialInput Specular;//[Offset: 0x180, Size: 0x40]// 0x75a831a800
	ScalarMaterialInput Roughness;//[Offset: 0x1c0, Size: 0x40]// 0x75a831a880
	VectorMaterialInput Normal;//[Offset: 0x200, Size: 0x48]// 0x75a831a980
	ColorMaterialInput EmissiveColor;//[Offset: 0x248, Size: 0x40]// 0x75a831aa00
	ScalarMaterialInput Opacity;//[Offset: 0x288, Size: 0x40]// 0x75a831aa80
	ScalarMaterialInput OpacityMask;//[Offset: 0x2c8, Size: 0x40]// 0x75a831ab00
	byte MaterialDomain;//[Offset: 0x308, Size: 0x1]// 0x75a831ab80
	byte BlendMode;//[Offset: 0x309, Size: 0x1]// 0x75a831ac00
	byte DecalBlendMode;//[Offset: 0x30a, Size: 0x1]// 0x75a831ac80
	byte MaterialDecalResponse;//[Offset: 0x30b, Size: 0x1]// 0x75a831ad00
	byte ShadingModel;//[Offset: 0x30c, Size: 0x1]// 0x75a831ad80
	float OpacityMaskClipValue;//[Offset: 0x310, Size: 0x4]// 0x75a836dd20
	float VertexOffsetAlongNormal;//[Offset: 0x314, Size: 0x4]// 0x75a836dd90
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]// 0x75a831ae00
	byte OITBlendMode;//[Offset: 0x319, Size: 0x1]// 0x75a831ae80
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x320, Size: 0x48]// 0x75a831af00
	VectorMaterialInput WorldDisplacement;//[Offset: 0x368, Size: 0x48]// 0x75a831af80
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x3b0, Size: 0x40]// 0x75a831b000
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x3f0, Size: 0x40]// 0x75a831b080
	ScalarMaterialInput ClearCoat;//[Offset: 0x430, Size: 0x40]// 0x75a831b100
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x470, Size: 0x40]// 0x75a831b180
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x4b0, Size: 0x40]// 0x75a831b200
	ScalarMaterialInput Refraction;//[Offset: 0x4f0, Size: 0x40]// 0x75a831b280
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x530, Size: 0x48]// 0x75a831b300
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x770, Size: 0x40]// 0x75a831b380
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x7b0, Size: 0x40]// 0x75a831b400
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x7f0, Size: 0x50]// 0x75a831b480
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x840, Size: 0x50]// 0x75a831b500
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]// 0x75a831b580
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x890, Size: 0x1]// 0x75a831b600
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x890, Size: 0x1]// 0x75a831b680
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x890, Size: 0x1]// 0x75a831b700
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x890, Size: 0x1]// 0x75a831b780
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x890, Size: 0x1]// 0x75a831b800
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x890, Size: 0x1]// 0x75a831b880
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x890, Size: 0x1]// 0x75a831b900
	int NumCustomizedUVs;//[Offset: 0x894, Size: 0x4]// 0x75a836de00
	byte TranslucencyLightingMode;//[Offset: 0x898, Size: 0x1]// 0x75a831b980
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x89c, Size: 0x4]// 0x75a836de70
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 0x1]// 0x75a831ba00
	float TranslucentShadowDensityScale;//[Offset: 0x8a4, Size: 0x4]// 0x75a836dee0
	float TranslucentSelfShadowDensityScale;//[Offset: 0x8a8, Size: 0x4]// 0x75a836df50
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x8ac, Size: 0x4]// 0x75a836dfc0
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x8b0, Size: 0x4]// 0x75a836e030
	float TranslucentBackscatteringExponent;//[Offset: 0x8b4, Size: 0x4]// 0x75a836e0a0
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x8b8, Size: 0x10]// 0x75a831ba80
	float TranslucentShadowStartOffset;//[Offset: 0x8c8, Size: 0x4]// 0x75a836e110
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cc, Size: 0x1]// 0x75a831bb00
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cc, Size: 0x1]// 0x75a831bb80
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cc, Size: 0x1]// 0x75a831bc00
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cc, Size: 0x1]// 0x75a831bc80
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cc, Size: 0x1]// 0x75a831bd00
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cc, Size: 0x1]// 0x75a831bd80
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cc, Size: 0x1]// 0x75a831be00
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cc, Size: 0x1]// 0x75a831bf00
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cd, Size: 0x1]// 0x75a831bf80
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cd, Size: 0x1]// 0x75a831c000
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cd, Size: 0x1]// 0x75a831c080
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cd, Size: 0x1]// 0x75a831c100
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cd, Size: 0x1]// 0x75a831c180
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cd, Size: 0x1]// 0x75a831c200
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cd, Size: 0x1]// 0x75a831c280
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cd, Size: 0x1]// 0x75a831c300
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ce, Size: 0x1]// 0x75a831c380
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ce, Size: 0x1]// 0x75a831c400
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ce, Size: 0x1]// 0x75a831c480
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8ce, Size: 0x1]// 0x75a831c500
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ce, Size: 0x1]// 0x75a831c580
	bool bUsedWithInstancedWidget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8ce, Size: 0x1]// 0x75a831c600
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8ce, Size: 0x1]// 0x75a831c680
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8ce, Size: 0x1]// 0x75a831c700
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cf, Size: 0x1]// 0x75a831c780
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cf, Size: 0x1]// 0x75a831c800
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cf, Size: 0x1]// 0x75a831c880
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cf, Size: 0x1]// 0x75a831c900
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cf, Size: 0x1]// 0x75a831c980
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cf, Size: 0x1]// 0x75a831ca00
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cf, Size: 0x1]// 0x75a831ca80
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cf, Size: 0x1]// 0x75a831cb00
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1]// 0x75a831cb80
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d0, Size: 0x1]// 0x75a831cc00
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d0, Size: 0x1]// 0x75a831cc80
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d0, Size: 0x1]// 0x75a831cd00
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d0, Size: 0x1]// 0x75a831cd80
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d0, Size: 0x1]// 0x75a831ce00
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d0, Size: 0x1]// 0x75a831ce80
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d0, Size: 0x1]// 0x75a831cf00
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d1, Size: 0x1]// 0x75a831cf80
	bool bShadowUseTentFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d1, Size: 0x1]// 0x75a831d000
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d1, Size: 0x1]// 0x75a831d080
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d1, Size: 0x1]// 0x75a831d100
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d1, Size: 0x1]// 0x75a831d180
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d1, Size: 0x1]// 0x75a831d200
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d1, Size: 0x1]// 0x75a831d280
	bool bUsedWithLandscapeShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d1, Size: 0x1]// 0x75a831d300
	bool bUseLandscapeMultiLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d2, Size: 0x1]// 0x75a831d380
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d2, Size: 0x1]// 0x75a831d400
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d2, Size: 0x1]// 0x75a831d480
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d2, Size: 0x1]// 0x75a831d500
	bool bUsedWithDynamicBatching;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d2, Size: 0x1]// 0x75a831d580
	bool bUsedWithDynamicMergeSkeletalMesh;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d2, Size: 0x1]// 0x75a831d600
	byte ShadowOverride;//[Offset: 0x8d3, Size: 0x1]// 0x75a831d680
	byte SimpleVertexNormalSituation;//[Offset: 0x8d4, Size: 0x1]// 0x75a831d700
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d5, Size: 0x1]// 0x75a831d780
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d5, Size: 0x1]// 0x75a831d800
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d5, Size: 0x1]// 0x75a831d880
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d5, Size: 0x1]// 0x75a831d900
	bool bGPUSkinForceUseBonesUniformBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d5, Size: 0x1]// 0x75a831d980
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d5, Size: 0x1]// 0x75a831da00
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d5, Size: 0x1]// 0x75a831da80
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d5, Size: 0x1]// 0x75a831db00
	bool bACESOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d6, Size: 0x1]// 0x75a831db80
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d6, Size: 0x1]// 0x75a831dc00
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d6, Size: 0x1]// 0x75a831dc80
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d6, Size: 0x1]// 0x75a831dd00
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d6, Size: 0x1]// 0x75a831dd80
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d6, Size: 0x1]// 0x75a831de00
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d6, Size: 0x1]// 0x75a831de80
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d6, Size: 0x1]// 0x75a831df00
	byte D3D11TessellationMode;//[Offset: 0x8d7, Size: 0x1]// 0x75a831df80
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d8, Size: 0x1]// 0x75a831e000
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d8, Size: 0x1]// 0x75a831e080
	float MaxDisplacement;//[Offset: 0x8dc, Size: 0x4]// 0x75a836e180
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e0, Size: 0x1]// 0x75a831e100
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e0, Size: 0x1]// 0x75a831e180
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e0, Size: 0x1]// 0x75a831e200
	byte ShadingRate;//[Offset: 0x8e1, Size: 0x1]// 0x75a831e280
	int EditorX;//[Offset: 0x8e4, Size: 0x4]// 0x75a836e1f0
	int EditorY;//[Offset: 0x8e8, Size: 0x4]// 0x75a836e260
	int EditorPitch;//[Offset: 0x8ec, Size: 0x4]// 0x75a836e2d0
	int EditorYaw;//[Offset: 0x8f0, Size: 0x4]// 0x75a836e340
	MaterialExpression*[] Expressions;//[Offset: 0x8f8, Size: 0x10]// 0x75a831e380
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x908, Size: 0x10]// 0x75a831e480
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x918, Size: 0x10]// 0x75a831e580
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]// 0x75a831e600
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x928, Size: 0x1]// 0x75a831e680
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x928, Size: 0x1]// 0x75a831e700
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x928, Size: 0x1]// 0x75a831e780
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x928, Size: 0x1]// 0x75a831e800
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x928, Size: 0x1]// 0x75a831e880
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x928, Size: 0x1]// 0x75a831e900
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x928, Size: 0x1]// 0x75a831e980
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x929, Size: 0x1]// 0x75a831ea00
	bool bAllowLandscapeVertexMorph;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x929, Size: 0x1]// 0x75a831ea80
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x929, Size: 0x1]// 0x75a831eb00
	uint32 UsageFlagWarnings;//[Offset: 0x92c, Size: 0x4]// 0x75a836e3b0
	byte BlendableLocation;//[Offset: 0x930, Size: 0x1]// 0x75a831eb80
	int BlendablePriority;//[Offset: 0x934, Size: 0x4]// 0x75a836e420
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 0x1]// 0x75a831ec00
	byte RefractionMode;//[Offset: 0x939, Size: 0x1]// 0x75a831ec80
	float RefractionDepthBias;//[Offset: 0x93c, Size: 0x4]// 0x75a836e490
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x940, Size: 0x1]// 0x75a831ed00
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x940, Size: 0x1]// 0x75a831ed80
	bool bEnableMeshDiscard;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x940, Size: 0x1]// 0x75a831ee00
	bool bEnableMeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x940, Size: 0x1]// 0x75a831ee80
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x940, Size: 0x1]// 0x75a831ef00
	Guid stateID;//[Offset: 0x944, Size: 0x10]// 0x75a831ef80
	Texture*[] ExpressionTextureReferences;//[Offset: 0xa50, Size: 0x10]// 0x75a831f080

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x7611ce0c50
	Color Constant;//[Offset: 0x3c, Size: 0x4]// 0x7611ce0bd0

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]// 0x7611ce0ac0
	FString InputName;//[Offset: 0x8, Size: 0x10]// 0x7611ce0a50
	int Mask;//[Offset: 0x18, Size: 0x4]// 0x7611ce09e0
	int MaskR;//[Offset: 0x1c, Size: 0x4]// 0x7611ce0970
	int MaskG;//[Offset: 0x20, Size: 0x4]// 0x7611ce0900
	int MaskB;//[Offset: 0x24, Size: 0x4]// 0x7611ce0890
	int MaskA;//[Offset: 0x28, Size: 0x4]// 0x7611ce0820
	FName ExpressionName;//[Offset: 0x30, Size: 0x8]// 0x7611ce07b0

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x7611ce0de0
	float Constant;//[Offset: 0x3c, Size: 0x4]// 0x7611ce0d70

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x7611ce0f80
	Vector Constant;//[Offset: 0x3c, Size: 0xc]// 0x7611ce0f00

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x7611ce1320
	float ConstantX;//[Offset: 0x3c, Size: 0x4]// 0x7611ce12b0
	float ConstantY;//[Offset: 0x40, Size: 0x4]// 0x7611ce1240

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x38, Size: 0x4]// 0x7611ce0360

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]// 0x7611ce0250
	FString InputName;//[Offset: 0x8, Size: 0x10]// 0x7611ce01e0
	int Mask;//[Offset: 0x18, Size: 0x4]// 0x7611ce0170
	int MaskR;//[Offset: 0x1c, Size: 0x4]// 0x7611ce0100
	int MaskG;//[Offset: 0x20, Size: 0x4]// 0x7611ce0090
	int MaskB;//[Offset: 0x24, Size: 0x4]// 0x7611ce0020
	int MaskA;//[Offset: 0x28, Size: 0x4]// 0x7611cdffb0
	FName ExpressionName;//[Offset: 0x30, Size: 0x8]// 0x7611cdff40

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x7611ce1120
	Vector4 Constant;//[Offset: 0x40, Size: 0x10]// 0x7611ce10a0

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]// 0x7611cd93a0
	float Y;//[Offset: 0x4, Size: 0x4]// 0x7611cd9330
	float Z;//[Offset: 0x8, Size: 0x4]// 0x7611cd92c0
	float W;//[Offset: 0xc, Size: 0x4]// 0x7611cd9250

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]// 0x75a796f380
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]// 0x75a796f400
	FString Desc;//[Offset: 0x38, Size: 0x10]// 0x75a799f9d0
	Color BorderColor;//[Offset: 0x48, Size: 0x4]// 0x75a796f480
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]// 0x75a796f500
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]// 0x75a796f580
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]// 0x75a796f600
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]// 0x75a796f680
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]// 0x75a796f700
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c, Size: 0x1]// 0x75a796f780
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c, Size: 0x1]// 0x75a796f800
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c, Size: 0x1]// 0x75a796f880
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1]// 0x75a796f900
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1]// 0x75a796f980
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1]// 0x75a796fa00
	ExpressionOutput[] Outputs;//[Offset: 0x50, Size: 0x10]// 0x75a796fb00

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x28, Size: 0x10]// 0x75a8311b80
	FString Description;//[Offset: 0x38, Size: 0x10]// 0x75a82d10e0
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]// 0x75a8311c00
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]// 0x75a8311c80
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x50, Size: 0x10]// 0x75a8311d80
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]// 0x75a8311e00

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 0x10]// 0x7611ce06a0
	int Mask;//[Offset: 0x10, Size: 0x4]// 0x7611ce0630
	int MaskR;//[Offset: 0x14, Size: 0x4]// 0x7611ce05c0
	int MaskG;//[Offset: 0x18, Size: 0x4]// 0x7611ce0550
	int MaskB;//[Offset: 0x1c, Size: 0x4]// 0x7611ce04e0
	int MaskA;//[Offset: 0x20, Size: 0x4]// 0x7611ce0470

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 0x10]// 0x75cdbea000
	MaterialFunction* Function;//[Offset: 0x10, Size: 0x8]// 0x75cdbea080

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 0x10]// 0x75cdbea100
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]// 0x75cdbea180

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x28, Size: 0x10]// 0x75a8311380
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]// 0x75a8311480
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]// 0x75a8311580

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]// 0x75d0a81ab0

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x75d0a81b20
	Guid ID;//[Offset: 0x8, Size: 0x10]// 0x75cdbe8080

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]// 0x75cdbe8000

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 0x10]// 0x75a788fb80
	int LODBias;//[Offset: 0x40, Size: 0x4]// 0x75a788a940
	int NumCinematicMipLevels;//[Offset: 0x44, Size: 0x4]// 0x75a788a9b0
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]// 0x75a788fc00
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]// 0x75a788fc80
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]// 0x75a788fd00
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]// 0x75a788fd80
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 0x1]// 0x75a788fe00
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48, Size: 0x1]// 0x75a788fe80
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48, Size: 0x1]// 0x75a788ff00
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 0x10]// 0x75a7890000
	int CachedCombinedLODBias;//[Offset: 0x60, Size: 0x4]// 0x75a788aa20
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]// 0x75a7890080
	byte CompressionSettings;//[Offset: 0x65, Size: 0x1]// 0x75a7890100
	byte Filter;//[Offset: 0x66, Size: 0x1]// 0x75a7890180
	byte LODGroup;//[Offset: 0x67, Size: 0x1]// 0x75a7890200
	byte CrunchSetting;//[Offset: 0x68, Size: 0x1]// 0x75a7890280
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]// 0x75a7890300
	float CrunchCompressionAmount;//[Offset: 0x6c, Size: 0x4]// 0x75a788aa90
	byte BasisSetting;//[Offset: 0x70, Size: 0x1]// 0x75a7890380
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1]// 0x75a7890400
	float BasisCompressionAmount;//[Offset: 0x74, Size: 0x4]// 0x75a788ab00

--------------------------------
Class: MeshPerLODBiasArray
	enum[] LODBiasArray;//[Offset: 0x0, Size: 0x10]// 0x75d0adb400

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]// 0x75c997b300
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]// 0x760d287fc0
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]// 0x75c997b380
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 0x18]// 0x75c997b400

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75d0a91a00
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x75d0a91a80
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]// 0x75d0a88b20

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]// 0x7611cde140
	FString SubPathString;//[Offset: 0x8, Size: 0x10]// 0x7611cde060

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]// 0x75a8261770
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]// 0x75a8278e00
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]// 0x75a8278e80
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]// 0x75a8278f00
	FString Tag;//[Offset: 0x58, Size: 0x10]// 0x75a82617e0

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]// 0x7611cdb100
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]// 0x7611cdb080
	float SphereRadius;//[Offset: 0x18, Size: 0x4]// 0x7611cdb010

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x78, Size: 0x10]// 0x75a82c1580
	NavCollisionBox[] BoxCollision;//[Offset: 0x88, Size: 0x10]// 0x75a82c1680
	class NavArea* AreaClass;//[Offset: 0x98, Size: 0x8]// 0x75a82c1700
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]// 0x75a82c1780
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]// 0x75a82c1800

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc]// 0x75cdbe5380
	float Radius;//[Offset: 0xc, Size: 0x4]// 0x75d0a808c0
	float Height;//[Offset: 0x10, Size: 0x4]// 0x75d0a80930

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc]// 0x75cdbe5480
	Vector Extent;//[Offset: 0xc, Size: 0xc]// 0x75cdbe5500

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x28, Size: 0x4]// 0x75a8879bf0
	float FixedAreaEnteringCost;//[Offset: 0x2c, Size: 0x4]// 0x75a8879c60
	Color DrawColor;//[Offset: 0x30, Size: 0x4]// 0x75a887f400
	NavAgentSelector SupportedAgents;//[Offset: 0x34, Size: 0x4]// 0x75a887f480
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x75a887f500
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]// 0x75a887f580
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]// 0x75a887f600
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]// 0x75a887f680
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]// 0x75a887f700
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]// 0x75a887f780
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]// 0x75a887f800
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]// 0x75a887f880
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]// 0x75a887f900
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]// 0x75a887f980
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 0x1]// 0x75a887fa00
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 0x1]// 0x75a887fa80
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39, Size: 0x1]// 0x75a887fb00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39, Size: 0x1]// 0x75a887fb80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39, Size: 0x1]// 0x75a887fc00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39, Size: 0x1]// 0x75a887fc80

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75cdbe2e00
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75cdbe2e80
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75cdbe2f00
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x75cdbe2f80
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]// 0x75cdbe3000
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]// 0x75cdbe3080
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]// 0x75cdbe3100
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]// 0x75cdbe3180
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]// 0x75cdbe3200
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]// 0x75cdbe3280
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]// 0x75cdbe3300
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]// 0x75cdbe3380
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]// 0x75cdbe3400
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]// 0x75cdbe3480
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]// 0x75cdbe3500
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]// 0x75cdbe3580

--------------------------------
Class: StaticSimpleMaterial
	int MaterialIndex;//[Offset: 0x0, Size: 0x4]// 0x760d288030
	MaterialInterface* SimpleMaterial;//[Offset: 0x8, Size: 0x8]// 0x75c997b480

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x21, Size: 0x1]// 0x7611d02c70
	byte DOFMode;//[Offset: 0x22, Size: 0x1]// 0x7611d02bf0
	byte CollisionEnabled;//[Offset: 0x23, Size: 0x1]// 0x7611d02b70
	FName CollisionProfileName;//[Offset: 0x28, Size: 0x8]// 0x7611d02b00
	CollisionResponse CollisionResponses;//[Offset: 0x30, Size: 0x38]// 0x7611d01630
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]// 0x7611d015b0
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1]// 0x7611d01530
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x69, Size: 0x1]// 0x7611d014b0
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x69, Size: 0x1]// 0x7611d01430
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x69, Size: 0x1]// 0x7611d013b0
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x69, Size: 0x1]// 0x7611d01330
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x69, Size: 0x1]// 0x7611d012b0
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x69, Size: 0x1]// 0x7611d01230
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a, Size: 0x1]// 0x7611d011b0
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a, Size: 0x1]// 0x7611d01130
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a, Size: 0x1]// 0x7611d010b0
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a, Size: 0x1]// 0x7611d01030
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a, Size: 0x1]// 0x7611d00fb0
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6a, Size: 0x1]// 0x7611d00f30
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6a, Size: 0x1]// 0x7611d00eb0
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6a, Size: 0x1]// 0x7611d00e30
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b, Size: 0x1]// 0x7611d00db0
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b, Size: 0x1]// 0x7611d00d30
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b, Size: 0x1]// 0x7611d00cb0
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6b, Size: 0x1]// 0x7611d00c30
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6b, Size: 0x1]// 0x7611d00bb0
	float MaxDepenetrationVelocity;//[Offset: 0x6c, Size: 0x4]// 0x7611d00b40
	float MassInKgOverride;//[Offset: 0x78, Size: 0x4]// 0x7611d00ad0
	float LinearDamping;//[Offset: 0x7c, Size: 0x4]// 0x7611d00a60
	float AngularDamping;//[Offset: 0x80, Size: 0x4]// 0x7611d009f0
	Vector CustomDOFPlaneNormal;//[Offset: 0x84, Size: 0xc]// 0x7611d00970
	Vector COMNudge;//[Offset: 0x90, Size: 0xc]// 0x7611d008f0
	float MassScale;//[Offset: 0x9c, Size: 0x4]// 0x7611d00880
	Vector InertiaTensorScale;//[Offset: 0xa0, Size: 0xc]// 0x7611d00800
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]// 0x7611d00780
	byte ObjectType;//[Offset: 0xad, Size: 0x1]// 0x7611d00700
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xc0, Size: 0x10]// 0x7611d00680
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xd0, Size: 0x8]// 0x7611d00600
	float MaxAngularVelocity;//[Offset: 0xd8, Size: 0x4]// 0x7611d00590
	float CustomSleepThresholdMultiplier;//[Offset: 0xdc, Size: 0x4]// 0x7611d00520
	float StabilizationThresholdMultiplier;//[Offset: 0xe0, Size: 0x4]// 0x7611d004b0
	float PhysicsBlendWeight;//[Offset: 0xe4, Size: 0x4]// 0x7611d00440
	int PositionSolverIterationCount;//[Offset: 0xe8, Size: 0x4]// 0x7611d003d0
	int VelocitySolverIterationCount;//[Offset: 0x138, Size: 0x4]// 0x7611d00360

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x1, Size: 0x20]// 0x7611d019e0
	ResponseChannel[] ResponseArray;//[Offset: 0x28, Size: 0x10]// 0x7611d01750

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]// 0x7611d02a80
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]// 0x7611d02a00
	byte Pawn;//[Offset: 0x2, Size: 0x1]// 0x7611d02980
	byte Visibility;//[Offset: 0x3, Size: 0x1]// 0x7611d02900
	byte Camera;//[Offset: 0x4, Size: 0x1]// 0x7611d02880
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]// 0x7611d02800
	byte Vehicle;//[Offset: 0x6, Size: 0x1]// 0x7611d02780
	byte Destructible;//[Offset: 0x7, Size: 0x1]// 0x7611d02700
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]// 0x7611d02680
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]// 0x7611d02600
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]// 0x7611d02580
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]// 0x7611d02500
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]// 0x7611d02480
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]// 0x7611d02400
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]// 0x7611d02380
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]// 0x7611d02300
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]// 0x7611d02280
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]// 0x7611d02200
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]// 0x7611d02180
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]// 0x7611d02100
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]// 0x7611d02080
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]// 0x7611d02000
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]// 0x7611d01f80
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]// 0x7611d01f00
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]// 0x7611d01e80
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]// 0x7611d01e00
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]// 0x7611d01d80
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]// 0x7611d01d00
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]// 0x7611d01c80
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]// 0x7611d01c00
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]// 0x7611d01b80
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]// 0x7611d01b00

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]// 0x7611d01970
	byte Response;//[Offset: 0x8, Size: 0x1]// 0x7611d018f0

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]// 0x7611cf8d00
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]// 0x7611cf8c90

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x7611d03830
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x7611d037b0
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x7611d03730

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x7611ce4620
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x7611ce45a0
	float Time;//[Offset: 0x4, Size: 0x4]// 0x7611ce4530
	float Distance;//[Offset: 0x8, Size: 0x4]// 0x7611ce44c0
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 0xc]// 0x7611ce4440
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 0xc]// 0x7611ce43c0
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 0xc]// 0x7611ce4340
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 0xc]// 0x7611ce4220
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 0xc]// 0x7611ce41a0
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 0xc]// 0x7611ce4080
	float PenetrationDepth;//[Offset: 0x54, Size: 0x4]// 0x7611ce4010
	int Item;//[Offset: 0x58, Size: 0x4]// 0x7611ce3fa0
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 0x8]// 0x7611ce3f20
	Actor* Actor;//[Offset: 0x64, Size: 0x8]// 0x7611ce3ea0
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 0x8]// 0x7611ce3da0
	FName BoneName;//[Offset: 0x78, Size: 0x8]// 0x7611ce3d30
	int FaceIndex;//[Offset: 0x80, Size: 0x4]// 0x7611ce3cc0

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x6e94258
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x6e941a4
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6e940ec
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6e93ffc
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6e93f6c
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6e93ee0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x6e93e54
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x6e93dd8
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x6e93d5c
	void CopyInterpParameters(MaterialInstance* Source);// 0x6e93ce0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	int MeshLogicType;//[Offset: 0x74, Size: 0x4]// 0x75a799fc00
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 0x8]// 0x75a7970a00
	MaterialInterface* Parent;//[Offset: 0x80, Size: 0x8]// 0x75a7970b00
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]// 0x75a7970b80
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]// 0x75a7970c00
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 0x10]// 0x75a7970d00
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xa0, Size: 0x10]// 0x75a7970e00
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xb0, Size: 0x10]// 0x75a7970f00
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xc0, Size: 0x10]// 0x75a7971000
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0xd0, Size: 0x50]// 0x75a795c040
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]// 0x75a7971100
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x124, Size: 0x10]// 0x75a7971180
	Texture*[] PermutationTextureReferences;//[Offset: 0x158, Size: 0x10]// 0x75a7971280

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x75d0a82060
	Font* FontValue;//[Offset: 0x8, Size: 0x8]// 0x75cdbe9700
	int FontPage;//[Offset: 0x10, Size: 0x4]// 0x75d0a820d0
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]// 0x75cdbe9780

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]// 0x75bca6ad00
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]// 0x75bca6ae00
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]// 0x75bca6af00
	int IsRemapped;//[Offset: 0x58, Size: 0x4]// 0x75a7883a20
	float EmScale;//[Offset: 0x5c, Size: 0x4]// 0x75a7883a90
	float Ascent;//[Offset: 0x60, Size: 0x4]// 0x75a7883b00
	float Descent;//[Offset: 0x64, Size: 0x4]// 0x75a7883b70
	float Leading;//[Offset: 0x68, Size: 0x4]// 0x75a7883be0
	int Kerning;//[Offset: 0x6c, Size: 0x4]// 0x75a7883c50
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]// 0x75bca6af80
	int NumCharacters;//[Offset: 0x118, Size: 0x4]// 0x75a7883cc0
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]// 0x75bca6b000
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]// 0x75a7883da0
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]// 0x75a7883e10
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]// 0x75a7883e80
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x20]// 0x75bca6b080

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]// 0x75d0a84ec0
	int StartV;//[Offset: 0x4, Size: 0x4]// 0x75d0a84f30
	int USize;//[Offset: 0x8, Size: 0x4]// 0x75d0a84fa0
	int VSize;//[Offset: 0xc, Size: 0x4]// 0x75d0a85010
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]// 0x75d0a89500
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]// 0x75d0a85080

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xd8, Size: 0x4]// 0x75a7885b60
	int LevelIndex;//[Offset: 0xdc, Size: 0x4]// 0x75a7885bd0
	int FirstResourceMemMip;//[Offset: 0xe0, Size: 0x4]// 0x75a7885c40
	IntPoint ImportedSize;//[Offset: 0xe4, Size: 0x8]// 0x75bca6d480
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xf0, Size: 0x8]// 0x75a7885cb0
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]// 0x75bca6d500
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]// 0x75bca6d580
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1]// 0x75bca6d600
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 0x1]// 0x75bca6d680
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 0x1]// 0x75bca6d700
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfa, Size: 0x1]// 0x75bca6d780
	byte AddressX;//[Offset: 0xfb, Size: 0x1]// 0x75bca6d800
	byte AddressY;//[Offset: 0xfc, Size: 0x1]// 0x75bca6d880
	int Blueprint_GetSizeY();// 0x6f360e8
	int Blueprint_GetSizeX();// 0x6f360b4

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]// 0x7611cda3d0
	int Y;//[Offset: 0x4, Size: 0x4]// 0x7611cda360

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]// 0x75d0a84750
	float Height;//[Offset: 0x10, Size: 0x4]// 0x75d0a847c0
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]// 0x75cdbedf00
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]// 0x75cdbedf80
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]// 0x75d0a89000
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]// 0x75d0a89080
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]// 0x75d0a89100
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]// 0x75d0a89180
	FString Chars;//[Offset: 0x18, Size: 0x10]// 0x75d0a84830
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]// 0x75d0a848a0
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]// 0x75d0a84910
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]// 0x75d0a84980
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]// 0x75d0a89200
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]// 0x75d0a89280
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]// 0x75d0a89300
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]// 0x75d0a89380
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]// 0x75d0a849f0
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]// 0x75d0a84a60
	int XPadding;//[Offset: 0x78, Size: 0x4]// 0x75d0a84ad0
	int YPadding;//[Offset: 0x7c, Size: 0x4]// 0x75d0a84b40
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]// 0x75d0a84bb0
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]// 0x75d0a84c20
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]// 0x75d0a84c90
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]// 0x75d0a84d00
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]// 0x75d0a89400
	int Kerning;//[Offset: 0x94, Size: 0x4]// 0x75d0a84d70
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]// 0x75d0a89480
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]// 0x75d0a84de0
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]// 0x75d0a84e50

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]// 0x760d1f7700
	CompositeSubFont[] SubTypefaces;//[Offset: 0x10, Size: 0x10]// 0x760d1f7d80

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]// 0x760d1f7c00

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x760d202b10
	FontData Font;//[Offset: 0x8, Size: 0x20]// 0x760d1f7b00

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]// 0x760d202b80
	enum Hinting;//[Offset: 0x10, Size: 0x1]// 0x760d1f7900
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]// 0x760d1f7a00
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]// 0x760d1f7a80

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]// 0x760d1f7800
	FString Cultures;//[Offset: 0x28, Size: 0x10]// 0x760d202aa0

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]// 0x760d1f7c80
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]// 0x760d202bf0

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]// 0x7611cdebd0
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]// 0x7611cdeb50

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]// 0x7611cdea30
	int Value;//[Offset: 0x4, Size: 0x4]// 0x7611cde9c0

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x75d0a82140
	float ParameterValue;//[Offset: 0x8, Size: 0x4]// 0x75d0a821b0
	Guid ExpressionGUID;//[Offset: 0xc, Size: 0x10]// 0x75cdbe9800

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x75d0a82220
	Texture* ParameterValue;//[Offset: 0x8, Size: 0x8]// 0x75cdbe9880
	Guid ExpressionGUID;//[Offset: 0x10, Size: 0x10]// 0x75cdbe9900

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x75d0a82290
	LinearColor ParameterValue;//[Offset: 0x8, Size: 0x10]// 0x75cdbe9980
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]// 0x75cdbe9a00

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75cdbe9080
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x75cdbe9100
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x75cdbe9180
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]// 0x75cdbe9200
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x75cdbe9280
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]// 0x75cdbe9300
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]// 0x75cdbe9380
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]// 0x75d0a81ff0
	byte BlendMode;//[Offset: 0xc, Size: 0x1]// 0x75cdbe9400
	byte ShadingModel;//[Offset: 0xd, Size: 0x1]// 0x75cdbe9480
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]// 0x75cdbe9500
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]// 0x75cdbe9580
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]// 0x75cdbe9600
	byte ShadingRate;//[Offset: 0xf, Size: 0x1]// 0x75cdbe9680

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x7611e2f5f0
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x518, Size: 0x1]// 0x7611e2f570
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x518, Size: 0x1]// 0x7611e2f4f0
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x518, Size: 0x1]// 0x7611e2f470
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x518, Size: 0x1]// 0x7611e2f3f0
	float BaseEyeHeight;//[Offset: 0x51c, Size: 0x4]// 0x7611e2f380
	byte AutoPossessPlayer;//[Offset: 0x520, Size: 0x1]// 0x7611e2f300
	enum AutoPossessAI;//[Offset: 0x521, Size: 0x1]// 0x7611e2f1a0
	class Controller* AIControllerClass;//[Offset: 0x528, Size: 0x8]// 0x7611e2f120
	PlayerState* PlayerState;//[Offset: 0x530, Size: 0x8]// 0x7611e2f0a0
	byte RemoteViewPitch;//[Offset: 0x538, Size: 0x1]// 0x7611e2f020
	Controller* LastHitBy;//[Offset: 0x540, Size: 0x8]// 0x7611e2efa0
	Controller* Controller;//[Offset: 0x548, Size: 0x8]// 0x7611e2ef20
	delegate OnControllerArrived;//[Offset: 0x558, Size: 0x10]// 0x7611e2eea0
	delegate OnPawnClientRestart;//[Offset: 0x570, Size: 0x10]// 0x7611e2ee20
	Vector ControlInputVector;//[Offset: 0x580, Size: 0xc]// 0x7611e2eda0
	Vector LastControlInputVector;//[Offset: 0x58c, Size: 0xc]// 0x7611e2ed20
	void SpawnDefaultController();// 0x6ecca7c
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x6ecc9f0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x6ecc920
	void ReceiveUnpossessed(Controller* OldController);// 0xffffff8a17adf2b0
	void ReceivePossessed(Controller* NewController);// 0xffffff8a17adf2b0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x6ecc7dc
	void OnRep_PlayerState();// 0x6ecc7c0
	void OnRep_Controller();// 0x6ecc7a4
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6ecc690
	Vector K2_GetMovementInputVector();// 0x6ecc658
	bool IsPlayerControlled();// 0x6ecc618
	bool IsMoveInputIgnored();// 0x6ecc5d8
	bool IsLocallyControlled();// 0x6ecc598
	bool IsControlled();// 0x6ecc560
	Vector GetPendingMovementInputVector();// 0x6ecc528
	Vector GetNavAgentLocation();// 0x6ecc4e8
	PawnMovementComponent* GetMovementComponent();// 0x6ecc4ac
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x6ecc430
	Vector GetLastMovementInputVector();// 0x6ecc3f8
	Rotator GetControlRotation();// 0x6ecc3b8
	Controller* GetController();// 0x6ecc39c
	Rotator GetBaseAimRotation();// 0x6ecc35c
	void DetachFromControllerPendingDestroy();// 0x6ecc340
	Vector ConsumeMovementInputVector();// 0x6ecc300
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x6ecc1f4
	void AddControllerYawInput(float Val);// 0x6ecc170
	void AddControllerRollInput(float Val);// 0x6ecc0ec
	void AddControllerPitchInput(float Val);// 0x6ecc068

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x518, Size: 0x8]// 0x7611dad4d0
	Character* Character;//[Offset: 0x528, Size: 0x8]// 0x7611dad450
	PlayerState* PlayerState;//[Offset: 0x530, Size: 0x8]// 0x7611dad3d0
	SceneComponent* TransformComponent;//[Offset: 0x538, Size: 0x8]// 0x7611dad350
	Rotator ControlRotation;//[Offset: 0x540, Size: 0xc]// 0x7611dad2d0
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54c, Size: 0x1]// 0x7611dad250
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54c, Size: 0x1]// 0x7611dad1d0
	FName StateName;//[Offset: 0x558, Size: 0x8]// 0x7611dad160
	delegate OnInstigatedAnyDamage;//[Offset: 0x560, Size: 0x10]// 0x7611dad0e0
	void UnPossess();// 0x6dce458
	void StopMovement();// 0x6dce43c
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x6dce350
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x6dce2c4
	void SetIgnoreLookInput(bool bNewLookInput);// 0x6dce238
	void SetControlRotation(out const Rotator NewRotation);// 0x6dce1a8
	void ResetIgnoreMoveInput();// 0x6dce18c
	void ResetIgnoreLookInput();// 0x6dce170
	void ResetIgnoreInputFlags();// 0x6dce154
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xffffff8a17adf2b0
	void Possess(Pawn* InPawn);// 0x6dce0d0
	void OnRep_PlayerState();// 0x6dce0b4
	void OnRep_Pawn();// 0x6dce098
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x6dcdf78
	Pawn* K2_GetPawn();// 0x6dcdf44
	bool IsPlayerController();// 0x6dcdf24
	bool IsMoveInputIgnored();// 0x6dcdee4
	bool IsLookInputIgnored();// 0x6dcdea4
	bool IsLocalPlayerController();// 0x6dcde54
	bool IsLocalController();// 0x6dcde14
	Actor* GetViewTarget();// 0x6dcddd8
	Rotator GetDesiredRotation();// 0x6dcdd98
	Rotator GetControlRotation();// 0x6dcdd58
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x6dcdc90
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x6dcdbc8
	PlayerController* CastToPlayerController();// 0x6dcdb94

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x598, Size: 0x8]// 0x7611e34c20
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x5a0, Size: 0x8]// 0x7611e34ba0
	CapsuleComponent* CapsuleComponent;//[Offset: 0x5a8, Size: 0x8]// 0x7611e34b20
	BasedMovementInfo BasedMovement;//[Offset: 0x5b0, Size: 0x38]// 0x7611e34aa0
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x5e8, Size: 0x38]// 0x7611e34590
	float AnimRootMotionTranslationScale;//[Offset: 0x620, Size: 0x4]// 0x7611e34520
	Vector BaseTranslationOffset;//[Offset: 0x624, Size: 0xc]// 0x7611e344a0
	Quat BaseRotationOffset;//[Offset: 0x630, Size: 0x10]// 0x7611e34420
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x640, Size: 0x4]// 0x7611e343b0
	byte ReplicatedMovementMode;//[Offset: 0x644, Size: 0x1]// 0x7611e34330
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 0x1]// 0x7611e342b0
	float CrouchedEyeHeight;//[Offset: 0x648, Size: 0x4]// 0x7611e34240
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64c, Size: 0x1]// 0x7611e341c0
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64c, Size: 0x1]// 0x7611e34140
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64c, Size: 0x1]// 0x7611e340c0
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64c, Size: 0x1]// 0x7611e34040
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64c, Size: 0x1]// 0x7611e33fc0
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x64c, Size: 0x1]// 0x7611e33f40
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x64c, Size: 0x1]// 0x7611e33ec0
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x64c, Size: 0x1]// 0x7611e33e40
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64d, Size: 0x1]// 0x7611e33dc0
	float JumpKeyHoldTime;//[Offset: 0x650, Size: 0x4]// 0x7611e33d50
	float JumpMaxHoldTime;//[Offset: 0x654, Size: 0x4]// 0x7611e33ce0
	int JumpMaxCount;//[Offset: 0x658, Size: 0x4]// 0x7611e33c70
	int JumpCurrentCount;//[Offset: 0x65c, Size: 0x4]// 0x7611e33c00
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x660, Size: 0x1]// 0x7611e33b80
	delegate OnReachedJumpApex;//[Offset: 0x668, Size: 0x10]// 0x7611e33b00
	delegate MovementModeChangedDelegate;//[Offset: 0x688, Size: 0x10]// 0x7611e33a80
	delegate OnCharacterMovementUpdated;//[Offset: 0x698, Size: 0x10]// 0x7611e33a00
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x6a8, Size: 0x100]// 0x7611e33980
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x7b0, Size: 0x40]// 0x7611e336f0
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x7f0, Size: 0x10]// 0x7611e33460
	RepRootMotionMontage RepRootMotion;//[Offset: 0x800, Size: 0x160]// 0x7611e32880
	bool bObeyNetFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 0x1]// 0x7611e32800
	bool bReplicateBasedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x961, Size: 0x1]// 0x7611e32780
	void UnCrouch(bool bClientSimulation);// 0x6dc37fc
	void StopJumping();// 0x6dc37e0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x6dc375c
	void SetReplicateMovement(bool bInReplicateMovement);// 0x6dc36d0
	void SetReplicateBasedMovement(bool bInReplicateBasedMovement);// 0x6dc3644
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x6dc35b8
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x6dc34ac
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x6dc331c
	void OnRep_RootMotion();// 0x6dc3308
	void OnRep_ReplicatedMovementMode(byte LastReplicatedMovementMode);// 0x6dc3284
	void OnRep_ReplicatedBasedMovement();// 0x6dc3268
	void OnRep_IsCrouched();// 0x6dc324c
	void OnLaunched(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xffffff8a17adf2b0
	void OnLanded(out const HitResult Hit);// 0xffffff8a17adf2b0
	void OnJumped();// 0x6dc3230
	void LaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6dc3104
	void K2_UpdateCustomMovement(float DeltaTime);// 0xffffff8a17adf2b0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff8a17adf2b0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xffffff8a17adf2b0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xffffff8a17adf2b0
	void Jump();// 0x6dc30e8
	bool IsPlayingRootMotion();// 0x6dc30b0
	bool IsPlayingNetworkedRootMotionMontage();// 0x6dc3078
	bool IsJumpProvidingForce();// 0x6dc3038
	PrimitiveComponent* GetReplicatedMovementBase();// 0x6dc301c
	PrimitiveComponent* GetMovementBase();// 0x6dc3000
	AnimMontage* GetCurrentMontage();// 0x6dc2fcc
	Vector GetBaseTranslationOffset();// 0x6dc2fa4
	Rotator GetBaseRotationOffsetRotator();// 0x6dc2f50
	float GetAnimRootMotionTranslationScale();// 0x6dc2f1c
	void Crouch(bool bClientSimulation);// 0x6dc2e90
	void ClientCheatWalk();// 0x6dc2e74
	void ClientCheatGhost();// 0x6dc2e58
	void ClientCheatFly();// 0x6dc2e3c
	bool CanJumpInternal();// 0x6dc2dfc
	bool CanJump();// 0x6dc2dc4
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x6dc2cfc

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x948, Size: 0x1]// 0x75a7b49680
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x950, Size: 0x8]// 0x75a7b49700
	class AnimInstance* AnimClass;//[Offset: 0x958, Size: 0x8]// 0x75a7b49780
	AnimInstance* AnimScriptInstance;//[Offset: 0x960, Size: 0x8]// 0x75a7b49800
	AnimInstance*[] SubInstances;//[Offset: 0x968, Size: 0x10]// 0x75a7b49900
	AnimInstance*[] NewSubInstances;//[Offset: 0x978, Size: 0x10]// 0x75a7b49a00
	AnimInstance*[] DirtySubInstances;//[Offset: 0x988, Size: 0x10]// 0x75a7b49b00
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x998, Size: 0x8]// 0x75a7b49b80
	SingleAnimationPlayData AnimationData;//[Offset: 0x9a0, Size: 0x18]// 0x75a7b49c00
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x9f0, Size: 0x10]// 0x75a7b49d00
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0xa00, Size: 0x10]// 0x75a7b49e00
	float GlobalAnimRateScale;//[Offset: 0xa30, Size: 0x4]// 0x75a7b84220
	enum UseAsyncScene;//[Offset: 0xa34, Size: 0x1]// 0x75a7b49f00
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa35, Size: 0x1]// 0x75a7b49f80
	byte KinematicBonesUpdateType;//[Offset: 0xa36, Size: 0x1]// 0x75a7b4a000
	int UpdateKinematicBonesRate;//[Offset: 0xa38, Size: 0x4]// 0x75a7b84290
	byte PhysicsTransformUpdateMode;//[Offset: 0xa3c, Size: 0x1]// 0x75a7b4a080
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3d, Size: 0x1]// 0x75a7b4a100
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa3d, Size: 0x1]// 0x75a7b4a180
	bool bNeedUpdatePhysicsTickRegisteredState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3e, Size: 0x1]// 0x75a7b4a200
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3f, Size: 0x1]// 0x75a7b4a280
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa3f, Size: 0x1]// 0x75a7b4a300
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa3f, Size: 0x1]// 0x75a7b4a380
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa3f, Size: 0x1]// 0x75a7b4a400
	FName[] DisallowedAnimCurves;//[Offset: 0xa40, Size: 0x10]// 0x75a7b4a480
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa50, Size: 0x1]// 0x75a7b4a500
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa50, Size: 0x1]// 0x75a7b4a580
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa50, Size: 0x1]// 0x75a7b4a600
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa50, Size: 0x1]// 0x75a7b4a680
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa50, Size: 0x1]// 0x75a7b4a700
	float ClothBlendWeight;//[Offset: 0xa54, Size: 0x4]// 0x75a7b84370
	Vector RootBoneTranslation;//[Offset: 0xa5c, Size: 0xc]// 0x75a7b4a780
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa68, Size: 0x1]// 0x75a7b4a800
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa68, Size: 0x1]// 0x75a7b4a880
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa68, Size: 0x1]// 0x75a7b4a900
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa69, Size: 0x1]// 0x75a7b4a980
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6a, Size: 0x1]// 0x75a7b4aa00
	BodySetup* BodySetup;//[Offset: 0xa70, Size: 0x8]// 0x75a7b4aa80
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 0x1]// 0x75a7b4ab00
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa79, Size: 0x1]// 0x75a7b4ab80
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa79, Size: 0x1]// 0x75a7b4ac00
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa79, Size: 0x1]// 0x75a7b4ac80
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa79, Size: 0x1]// 0x75a7b4ad00
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa79, Size: 0x1]// 0x75a7b4ad80
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa79, Size: 0x1]// 0x75a7b4ae00
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa79, Size: 0x1]// 0x75a7b4ae80
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa79, Size: 0x1]// 0x75a7b4af00
	uint16 CachedAnimCurveUidVersion;//[Offset: 0xa7a, Size: 0x2]// 0x75a7b843e0
	Vector LineCheckBoundsScale;//[Offset: 0xa7c, Size: 0xc]// 0x75a7b4af80
	delegate OnConstraintBroken;//[Offset: 0xa90, Size: 0x10]// 0x75a7b4b080
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xb90, Size: 0x8]// 0x75a7b4b100
	float TeleportDistanceThreshold;//[Offset: 0xb98, Size: 0x4]// 0x75a7b84450
	float TeleportRotationThreshold;//[Offset: 0xb9c, Size: 0x4]// 0x75a7b844c0
	delegate OnAnimInitialized;//[Offset: 0xcd8, Size: 0x10]// 0x75a7b4b180
	AnimSequence* SequenceToPlay;//[Offset: 0xdc8, Size: 0x8]// 0x75a7b4b200
	AnimationAsset* AnimToPlay;//[Offset: 0xdd0, Size: 0x8]// 0x75a7b4b280
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdd8, Size: 0x1]// 0x75a7b4b300
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdd8, Size: 0x1]// 0x75a7b4b380
	float DefaultPosition;//[Offset: 0xddc, Size: 0x4]// 0x75a7b84530
	float DefaultPlayRate;//[Offset: 0xde0, Size: 0x4]// 0x75a7b845a0
	uint32 LastPoseTickFrame;//[Offset: 0xde4, Size: 0x4]// 0x75a7b84610
	float LastPoseTickTime;//[Offset: 0xde8, Size: 0x4]// 0x75a7b84680
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 0x1]// 0x75a7b4b400
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe22, Size: 0x1]// 0x75a7b4b480
	BoneRetargetInfo[] BoneRetargetInfoList;//[Offset: 0xe58, Size: 0x10]// 0x75a7b4b580
	Transform MeshShiftTransform;//[Offset: 0xe70, Size: 0x30]// 0x75a7b4b600
	FName MeshShiftRefBone;//[Offset: 0xea0, Size: 0x8]// 0x75a7b846f0
	bool bUseMeshShiftFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea8, Size: 0x1]// 0x75a7b4b680
	enum MeshShiftCompensationType;//[Offset: 0xea9, Size: 0x1]// 0x75a7b4b780
	SkeletalMeshComponent* MeshShiftCompensationBaseSkelComp;//[Offset: 0xeac, Size: 0x8]// 0x75a7b4b800
	bool bIsEnableBatchSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb4, Size: 0x1]// 0x75a7b4b880
	DynamicBatchSectionInfo[] BatchSectionList;//[Offset: 0xeb8, Size: 0x10]// 0x75a7b4b980
	MaterialInterface*[] OriginalMaterials;//[Offset: 0xec8, Size: 0x10]// 0x75a7b4ba80
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x6f107e0
	void SuspendClothingSimulation();// 0x6f107cc
	void Stop();// 0x6f107b8
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x6f10708
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x6f10684
	void SetTeleportRotationThreshold(float Threshold);// 0x6f10608
	void SetTeleportDistanceThreshold(float Threshold);// 0x6f1058c
	void SetPosition(float InPos, bool bFireNotifies);// 0x6f104cc
	void SetPlayRate(float Rate);// 0x6f10450
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x6f103d4
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x6f102c0
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x6f101c4
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x6f10140
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x6f10034
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x6f0ff6c
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x6f0fee8
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x6f0fe28
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x6f0fd30
	void SetClothMaxDistanceScale(float Scale);// 0x6f0fcb4
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x6f0fbe4
	void SetAnimInstanceClass(class Object NewClass);// 0x6f0fb68
	void SetAnimationMode(byte InAnimationMode);// 0x6f0faec
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x6f0fa70
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x6f0f944
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x6f0f85c
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x6f0f7d8
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x6f0f6c4
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x6f0f5b0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x6f0f47c
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x6f0f3f8
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x6f0f338
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x6f0f218
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x6f0f0bc
	void ResumeClothingSimulation();// 0x6f0f0a8
	void ResetClothTeleportMode();// 0x6f0f094
	void ResetAllowedAnimCurveEvaluation();// 0x6f0f080
	void ResetAllBodiesSimulatePhysics();// 0x6f0f06c
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x6f0efac
	void Play(bool bLooping);// 0x6f0ef28
	void PauseIMSimulation(int InPauseFrameCount);// 0x6f0eeac
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x6f0ed2c
	void MarkMeshShiftFeature(const bool InIsUseShiftFeature, out const Transform InShiftTransform, const FName InShiftRefBone);// 0x6f0ebfc
	void MarkMeshShiftCompensation(const enum InMeshShiftCompensationType, SkeletalMeshComponent* InCompensationBaseSkelComp);// 0x6f0eb44
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x6f0e948
	bool IsSectionBatched(int LODIndex);// 0x6f0e8b0
	bool IsPlaying();// 0x6f0e878
	bool IsClothingSimulationSuspended();// 0x6f0e840
	bool IsBodyGravityEnabled(FName BoneName);// 0x6f0e7b0
	bool HandleExistingParallelEvaluationTask(bool bBlockOnTask, bool bPerformPostAnimEvaluation);// 0x6f0e6d4
	float GetTeleportRotationThreshold();// 0x6f0e6a0
	float GetTeleportDistanceThreshold();// 0x6f0e66c
	AnimInstance*[] GetSubAnimInstances();// 0x6f0e5ec
	Vector GetSkeletalCenterOfMass();// 0x6f0e5b4
	AnimInstance* GetPostProcessInstance();// 0x6f0e580
	float GetPosition();// 0x6f0e54c
	float GetPlayRate();// 0x6f0e518
	AnimInstance*[] GetNewSubAnimInstances();// 0x6f0e498
	float GetMorphTarget(FName MorphTargetName);// 0x6f0e40c
	bool GetDisableAnimCurves();// 0x6f0e3e8
	AnimInstance*[] GetDirtySubAnimInstances();// 0x6f0e368
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x6f0e1f8
	float GetClothMaxDistanceScale();// 0x6f0e1c4
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x6f0e0f4
	AnimInstance* GetAnimInstance();// 0x6f0e0c0
	float GetAnimationPosition(AnimationAsset* Animation);// 0x6f0e034
	byte GetAnimationMode();// 0x6f0e000
	AnimInstance*[] GetAllSubAnimInstances();// 0x6f0df80
	bool GetAllowedAnimCurveEvaluate();// 0x6f0df60
	void ForceClothNextUpdateTeleportAndReset();// 0x6f0df4c
	void ForceClothNextUpdateTeleport();// 0x6f0df38
	FName FindConstraintBoneName(int ConstraintIndex);// 0x6f0deac
	void ClearMorphTargets();// 0x6f0de98
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x6f0dd94
	void BindClothToMasterPoseComponent();// 0x6f0dd80
	void BatchSectionsWithAtlas(int LodIdx, bool IsBatchSection);// 0x6f0dcc0
	void AutoBatchSection(int LodIdx, int[] BatchIndices, bool IsBatchSection);// 0x6f0db5c
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x6f0da9c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x6f0d944
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x6f0d7ec
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x6f0d6d4

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x6d0, Size: 0x8]// 0x7611d0df50
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x6d8, Size: 0x8]// 0x7611d0ded0
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x740, Size: 0x1]// 0x7611d0de50
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x768, Size: 0x8]// 0x7611d0ddd0
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 0x1]// 0x7611d0dd50
	int ForcedLodModel;//[Offset: 0x774, Size: 0x4]// 0x7611d0dce0
	int MinLodModel;//[Offset: 0x778, Size: 0x4]// 0x7611d0dc70
	int MaxLodModel;//[Offset: 0x77c, Size: 0x4]// 0x7611d0dc00
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x790, Size: 0x10]// 0x7611d0d960
	float StreamingDistanceMultiplier;//[Offset: 0x7a0, Size: 0x4]// 0x7611d0d8f0
	Color WireframeColor;//[Offset: 0x7a4, Size: 0x4]// 0x7611d0d870
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a8, Size: 0x1]// 0x7611d0d7f0
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a8, Size: 0x1]// 0x7611d0d770
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a8, Size: 0x1]// 0x7611d0d6f0
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a8, Size: 0x1]// 0x7611d0d670
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c0, Size: 0x1]// 0x7611d0d5f0
	byte UpdateBoundsRate;//[Offset: 0x7c1, Size: 0x1]// 0x7611d0d570
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c3, Size: 0x1]// 0x7611d0d4f0
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c3, Size: 0x1]// 0x7611d0d470
	bool bFixCachedLocalBoundsIssue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c3, Size: 0x1]// 0x7611d0d3f0
	byte MeshComponentUpdateFlag;//[Offset: 0x7c4, Size: 0x1]// 0x7611d0d310
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c5, Size: 0x1]// 0x7611d0d290
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c6, Size: 0x1]// 0x7611d0d210
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d4, Size: 0x1]// 0x7611d0d190
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d4, Size: 0x1]// 0x7611d0d110
	byte CustomSortAlternateIndexMode;//[Offset: 0x7d5, Size: 0x1]// 0x7611d0d090
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 0x1]// 0x7611d0d010
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 0x1]// 0x7611d0cf90
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x7d8, Size: 0x4]// 0x7611d0cf20
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1]// 0x7611d0cea0
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x7f4, Size: 0x1c]// 0x7611d0ce20
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]// 0x7611d0cda0
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x811, Size: 0x1]// 0x7611d0cd20
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x812, Size: 0x1]// 0x7611d0cca0
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x813, Size: 0x1]// 0x7611d0cc20
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 0x1]// 0x7611d0cba0
	bool bOverrideAnimUpdateRateParameters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x815, Size: 0x1]// 0x7611d0cb20
	AnimUpdateRateParameters CustomAnimUpdateRateParams;//[Offset: 0x818, Size: 0x98]// 0x7611d0bf00
	void UnloadSkinWeightProfile(FName InProfileName);// 0x6f16f94
	void UnHideBoneByName(FName BoneName);// 0x6f16f18
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x6f16d78
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x6f16bd8
	void SwitchToOverrideSkinWeights(int LODIndex);// 0x6f16b5c
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x6f16a88
	bool SetSkinWeightProfile(FName InProfileName);// 0x6f169f8
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x6f16924
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bCheckBoneMap);// 0x6f16810
	void SetRenderStatic(bool bNewValue);// 0x6f1678c
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x6f166c4
	void SetMinLOD(int InNewMinLOD);// 0x6f16648
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x6f16588
	void SetForcedLOD(int InNewForcedLOD);// 0x6f1650c
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x6f16488
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x6f16404
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x6f16388
	void RemoveMasterPoseComponent();// 0x6f16374
	void RefreshUpdateRateParams();// 0x6f16360
	void OnSkinnedMeshComponentMeshInited__DelegateSignature(int PredicatedLOD);// 0xffffff8a17adf2b0
	void OnSkinnedMeshComponentLODResourceUpdated__DelegateSignature(int PredicatedLOD);// 0xffffff8a17adf2b0
	bool IsUsingSkinWeightProfile();// 0x6f16340
	bool IsSectionBatched(int LODIndex);// 0x6f162a8
	bool IsBoneHiddenByName(FName BoneName);// 0x6f16218
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x6f16160
	bool HasSkinweightProfileByName(FName InProfileName);// 0x6f160c8
	FName GetSocketBoneName(FName InSocketName);// 0x6f1603c
	SkeletalMesh* GetSkeletalMesh();// 0x6f16000
	FName GetParentBone(FName BoneName);// 0x6f15f74
	int GetNumLODs();// 0x6f15f40
	int GetNumBones();// 0x6f15f0c
	FName GetCurrentSkinWeightProfileName();// 0x6f15ef0
	Transform GetBoneTransform(int BoneIndex);// 0x6f15e4c
	FName GetBoneName(int BoneIndex);// 0x6f15dc0
	Vector GetBoneLocation(FName BoneName, byte Space);// 0x6f15cf4
	int GetBoneIndex(FName BoneName);// 0x6f15c68
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x6f15b00
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x6f15a20
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x6f15928
	void DisableMeshClipPlane(int PlaneIndex);// 0x6f158a4
	void DisableMeshClipArc();// 0x6f15888
	void ClearVertexColorOverride(int LODIndex);// 0x6f1580c
	void ClearSkinWeightProfile();// 0x6f157f8
	void ClearSkinWeightOverride(int LODIndex);// 0x6f1577c
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x6f156b4

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x6a8, Size: 0x10]// 0x7611d075d0
	bool bIsEnableRetrieveDefaultMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 0x1]// 0x7611d07550
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x6e9a5a4
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x6e9a4ec
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x6e9a3e0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x6e9a348
	FName[] GetMaterialSlotNames();// 0x6e9a2c0
	MaterialInterface*[] GetMaterials();// 0x6e9a238
	int GetMaterialIndex(FName MaterialSlotName);// 0x6e9a1a4
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x6e9a0c4
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x6e99fcc
	void DisableMeshClipPlane(int PlaneIndex);// 0x6e99f48
	void DisableMeshClipArc();// 0x6e99f2c

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8]// 0x75a827fb80
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x75a827fc00
	int EncodeBits_Position;//[Offset: 0x54, Size: 0x4]// 0x75a82c4810
	int EncodeBits_TexCoord;//[Offset: 0x58, Size: 0x4]// 0x75a82c4880
	int EncodeBits_Normal;//[Offset: 0x5c, Size: 0x4]// 0x75a82c48f0
	int EncodeBits_Generic;//[Offset: 0x60, Size: 0x4]// 0x75a82c4960
	int EncodeBits_VertexColor;//[Offset: 0x64, Size: 0x4]// 0x75a82c49d0
	int EncodeSpeed;//[Offset: 0x68, Size: 0x4]// 0x75a82c4a40
	int DecodeSpeed;//[Offset: 0x6c, Size: 0x4]// 0x75a82c4ab0
	BoxSphereBounds ImportedBounds;//[Offset: 0x70, Size: 0x1c]// 0x75a827fc80
	BoxSphereBounds ExtendedBounds;//[Offset: 0x8c, Size: 0x1c]// 0x75a827fd00
	Vector PositiveBoundsExtension;//[Offset: 0xa8, Size: 0xc]// 0x75a827fd80
	Vector NegativeBoundsExtension;//[Offset: 0xb4, Size: 0xc]// 0x75a827fe00
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]// 0x75a827fe80
	bool bCompressData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]// 0x75a827ff00
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xc4, Size: 0xc]// 0x75a827ff80
	SkeletalMaterial[] Materials;//[Offset: 0x150, Size: 0x10]// 0x75a8280080
	MaterialInterface* ReplaceMaterialInterface;//[Offset: 0x160, Size: 0x8]// 0x75a8280100
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x168, Size: 0x10]// 0x75a8280200
	byte SkelMirrorAxis;//[Offset: 0x178, Size: 0x1]// 0x75a8280280
	byte SkelMirrorFlipAxis;//[Offset: 0x179, Size: 0x1]// 0x75a8280300
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x180, Size: 0x10]// 0x75a8280400
	MeshPerLODBiasArray[] PerLODBiasTypeInfo;//[Offset: 0x190, Size: 0x10]// 0x75a8280500
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 0x1]// 0x75a8280580
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a0, Size: 0x1]// 0x75a8280600
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a0, Size: 0x1]// 0x75a8280680
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a0, Size: 0x1]// 0x75a8280700
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a0, Size: 0x1]// 0x75a8280780
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a0, Size: 0x1]// 0x75a8280800
	BodySetup* BodySetup;//[Offset: 0x1a8, Size: 0x8]// 0x75a8280880
	PhysicsAsset* PhysicsAsset;//[Offset: 0x1b0, Size: 0x8]// 0x75a8280900
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x1b8, Size: 0x8]// 0x75a8280980
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x1c0, Size: 0x10]// 0x75a8280a80
	bool LodModelsHasSkinweight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]// 0x75a8280b00
	MorphTarget*[] MorphTargets;//[Offset: 0x1d8, Size: 0x10]// 0x75a8280c00
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x358, Size: 0x10]// 0x75a8280d00
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x368, Size: 0x8]// 0x75a8280d80
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x370, Size: 0x10]// 0x75a8280e80
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 0x10]// 0x75a8280f80
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x398, Size: 0x10]// 0x75a8281080
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x3b8, Size: 0x10]// 0x75a8281180
	int NumSockets();// 0x6f09c34
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x6f09b60
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x6f09ad4
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x6f09a48
	BoxSphereBounds GetImportedBounds();// 0x6f099fc
	BoxSphereBounds GetBounds();// 0x6f099b0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x6f098d8
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x6f0984c

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x30, Size: 0x10]// 0x75a827eb00
	Transform[] RefLocalPoses;//[Offset: 0x40, Size: 0x10]// 0x75a827ec00
	Guid VirtualBoneGuid;//[Offset: 0x160, Size: 0x10]// 0x75a827ec80
	VirtualBone[] VirtualBones;//[Offset: 0x170, Size: 0x10]// 0x75a827ed80
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x180, Size: 0x10]// 0x75a827ee80
	SmartNameContainer SmartNames;//[Offset: 0x1e0, Size: 0x50]// 0x75a827ef00
	BlendProfile*[] BlendProfiles;//[Offset: 0x248, Size: 0x10]// 0x75a827f000
	AnimSlotGroup[] SlotGroups;//[Offset: 0x258, Size: 0x10]// 0x75a827f100
	AssetUserData*[] AssetUserData;//[Offset: 0x330, Size: 0x10]// 0x75a827f200

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x75d0a7a340
	int ParentIndex;//[Offset: 0x8, Size: 0x4]// 0x75d0a7a3b0
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]// 0x75c997d380

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]// 0x75d0a7a6c0
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]// 0x75d0a7a730
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]// 0x75d0a7a7a0

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]// 0x75a82c4730
	FName BoneName;//[Offset: 0x30, Size: 0x8]// 0x75a82c47a0
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]// 0x75a827f280
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]// 0x75a827f300
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]// 0x75a827f380
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]// 0x75a827f400
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x6f12578
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x6f124e8

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]// 0x75a7895700
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]// 0x75a7895800

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]// 0x75d0a93d00
	float BlendScale;//[Offset: 0x18, Size: 0x4]// 0x75d100e880

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]// 0x76121d87d0

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]// 0x75d0a7a5e0
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]// 0x75c997d700

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]// 0x75c997f580
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c997f600
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x75c997f680
	FName MaterialSlotName;//[Offset: 0x10, Size: 0x8]// 0x75d0a7bc30
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]// 0x75c997f700
	SoftObjectPath MaterialSoftRef;//[Offset: 0x30, Size: 0x18]// 0x75c997f780

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]// 0x75d0a7a8f0
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]// 0x75c997dd80

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 0x4]// 0x75d0a7ac00
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]// 0x75d0a7ac70
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]// 0x75c997e080
	Vector4[] UVOffsets;//[Offset: 0x38, Size: 0x10]// 0x75c997e180
	bool[] bEnableShadowCasting;//[Offset: 0x50, Size: 0x10]// 0x75c997e280
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x60, Size: 0x10]// 0x75c997e480
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]// 0x75c997e500
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x78, Size: 0x170]// 0x75c997e580
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x1e8, Size: 0xa8]// 0x75c997e600
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x290, Size: 0x240]// 0x75c997f180
	FName[] RemovedBones;//[Offset: 0x4d0, Size: 0x10]// 0x75c997f200
	BoneReference[] BonesToRemove;//[Offset: 0x4e0, Size: 0x10]// 0x75c997f300
	AnimSequence* BakePose;//[Offset: 0x4f0, Size: 0x8]// 0x75c997f380
	FString SourceImportFilename;//[Offset: 0x4f8, Size: 0x10]// 0x75d0a7b220
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508, Size: 0x1]// 0x75c997f400

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 0x1]// 0x75c997e300
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 0x1]// 0x75c997e380
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 0x8]// 0x75d0a7ad50

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 0x1]// 0x75c997e800
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]// 0x75d0a7adc0
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 0x4]// 0x75d0a7ae30
	int ScreenSize;//[Offset: 0xc, Size: 0x4]// 0x75d0a7aea0
	float WeldingThreshold;//[Offset: 0x10, Size: 0x4]// 0x75d0a7af10
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]// 0x75c997e880
	float NormalsThreshold;//[Offset: 0x18, Size: 0x4]// 0x75d0a7af80
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 0x1]// 0x75c997e900
	byte TextureImportance;//[Offset: 0x1d, Size: 0x1]// 0x75c997e980
	byte ShadingImportance;//[Offset: 0x1e, Size: 0x1]// 0x75c997ea00
	byte SkinningImportance;//[Offset: 0x1f, Size: 0x1]// 0x75c997ea80
	float BoneReductionRatio;//[Offset: 0x20, Size: 0x4]// 0x75d0a7aff0
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 0x4]// 0x75d0a7b060
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75c997eb00
	BoneReference[] BonesToRemove;//[Offset: 0x30, Size: 0x10]// 0x75c997ec00
	int BaseLOD;//[Offset: 0x40, Size: 0x4]// 0x75d0a7b0d0
	int LODChainLastIndex;//[Offset: 0x44, Size: 0x4]// 0x75d0a7b140
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x75c997ec80
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]// 0x75c997ed00
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]// 0x75c997ed80
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x50, Size: 0x80]// 0x75c997ee00
	MaterialProxySettings MaterialSettings;//[Offset: 0xd0, Size: 0x94]// 0x75c997ee80
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]// 0x75c997ef00
	AnimSequence* BakePose;//[Offset: 0x168, Size: 0x8]// 0x75c997ef80

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75cdbe8100
	byte MaterialLODType;//[Offset: 0x1, Size: 0x1]// 0x75cdbe8180
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x75cdbe8200
	byte TextureWidth;//[Offset: 0x3, Size: 0x1]// 0x75cdbe8280
	byte TextureHeight;//[Offset: 0x4, Size: 0x1]// 0x75cdbe8300
	byte SamplingQuality;//[Offset: 0x5, Size: 0x1]// 0x75cdbe8380
	int GutterSpace;//[Offset: 0x8, Size: 0x4]// 0x75d0a81b90
	byte TextureStrech;//[Offset: 0xc, Size: 0x1]// 0x75cdbe8400
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x75cdbe8480
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 0x10]// 0x75cdbe8a00
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x75cdbe8a80
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x75cdbe8b00
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]// 0x75cdbe8b80
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]// 0x75cdbe8c00
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x75cdbe8c80
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x28, Size: 0x58]// 0x75cdbe8d00

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 0x1]// 0x75cdbe8500
	byte Caster;//[Offset: 0x1, Size: 0x1]// 0x75cdbe8580
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x75cdbe8600
	byte ColorChannels;//[Offset: 0x3, Size: 0x1]// 0x75cdbe8680
	int BitsPerChannel;//[Offset: 0x4, Size: 0x4]// 0x75d0a81c00
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75cdbe8700
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x75cdbe8780
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]// 0x75cdbe8800
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]// 0x75cdbe8880
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x75cdbe8900

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8]// 0x75cdbeaa00
	byte TextureSizingType;//[Offset: 0x8, Size: 0x1]// 0x75cdbeaa80
	float GutterSpace;//[Offset: 0xc, Size: 0x4]// 0x75d0a82990
	enum SamplingQuality;//[Offset: 0x10, Size: 0x1]// 0x75cdbeab80
	enum UVStrech;//[Offset: 0x11, Size: 0x1]// 0x75cdbeac80
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]// 0x75cdbead00
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]// 0x75cdbead80
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]// 0x75cdbeae00
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]// 0x75cdbeae80
	float MetallicConstant;//[Offset: 0x18, Size: 0x4]// 0x75d0a82a00
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]// 0x75cdbeaf00
	float RoughnessConstant;//[Offset: 0x20, Size: 0x4]// 0x75d0a82a70
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x75cdbeaf80
	float SpecularConstant;//[Offset: 0x28, Size: 0x4]// 0x75d0a82ae0
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x75cdbeb000
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]// 0x75cdbeb080
	float OpacityConstant;//[Offset: 0x30, Size: 0x4]// 0x75d0a82b50
	float AOConstant;//[Offset: 0x34, Size: 0x4]// 0x75d0a82bc0
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x75cdbeb100
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 0x4]// 0x75d0a82c30
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x75cdbeb180
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 0x4]// 0x75d0a82ca0
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 0x8]// 0x75cdbeb200
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 0x8]// 0x75cdbeb280
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 0x8]// 0x75cdbeb300
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 0x8]// 0x75cdbeb380
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 0x8]// 0x75cdbeb400
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 0x8]// 0x75cdbeb480
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 0x8]// 0x75cdbeb500
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 0x8]// 0x75cdbeb580
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 0x8]// 0x75cdbeb600
	byte MaterialMergeType;//[Offset: 0x90, Size: 0x1]// 0x75cdbeb680
	byte BlendMode;//[Offset: 0x91, Size: 0x1]// 0x75cdbeb700

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]// 0x75a7930a00
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]// 0x75a789b380
	float StreamableFirstChunkSize;//[Offset: 0xd0, Size: 0x4]// 0x75a7930a70
	float StreamableFollowingChunkSize;//[Offset: 0xd4, Size: 0x4]// 0x75a7930ae0
	float OverrideChunkFreeTime;//[Offset: 0xd8, Size: 0x4]// 0x75a7930b50
	float OverrideFollowingChunkSize;//[Offset: 0xdc, Size: 0x4]// 0x75a7930bc0
	bool bIshugeAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]// 0x75a789b400
	bool bImmediateLoadChunk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]// 0x75a789b480
	bool bForceUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]// 0x75a789b500
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]// 0x75a789b580
	byte AdditiveAnimType;//[Offset: 0x20c, Size: 0x1]// 0x75a789b600
	byte RefPoseType;//[Offset: 0x20d, Size: 0x1]// 0x75a789b680
	AnimSequence* RefPoseSeq;//[Offset: 0x210, Size: 0x8]// 0x75a789b700
	int RefFrameIndex;//[Offset: 0x218, Size: 0x4]// 0x75a7930c30
	int EncodingPkgVersion;//[Offset: 0x21c, Size: 0x4]// 0x75a7930ca0
	FName RetargetSource;//[Offset: 0x220, Size: 0x8]// 0x75a7930d10
	enum Interpolation;//[Offset: 0x228, Size: 0x1]// 0x75a789b800
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]// 0x75a789b880
	byte RootMotionRootLock;//[Offset: 0x22a, Size: 0x1]// 0x75a789b900
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22b, Size: 0x1]// 0x75a789b980
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]// 0x75a789ba00
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x230, Size: 0x10]// 0x75a789bb00
	CurveVector* CurveForRootPosition;//[Offset: 0x250, Size: 0x8]// 0x75a789bb80
	CurveVector* CurveForRootRotation;//[Offset: 0x258, Size: 0x8]// 0x75a789bc00
	CurveVector* CurveForRootScale;//[Offset: 0x260, Size: 0x8]// 0x75a789bc80

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]// 0x75a789db00
	float SequenceLength;//[Offset: 0x90, Size: 0x4]// 0x75a7932130
	float RateScale;//[Offset: 0x94, Size: 0x4]// 0x75a79321a0
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]// 0x75a789db80
	float GetPlayLength();// 0x6d8e8c4

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x30, Size: 0x8]// 0x75a78cf500
	AnimMetaData*[] MetaData;//[Offset: 0x58, Size: 0x10]// 0x75a78cf600
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]// 0x75a78cf700
	bool bUseBoneRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x75a78cf780

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]// 0x75d1010c60

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]// 0x75d1011e50
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]// 0x75d1011ec0
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]// 0x75d1011f30
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]// 0x75d1011fa0
	FName NotifyName;//[Offset: 0x40, Size: 0x8]// 0x75d1012010
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]// 0x75d0ad9180
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]// 0x75d0ad9200
	float Duration;//[Offset: 0x58, Size: 0x4]// 0x75d1012080
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]// 0x75d0ad9280
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]// 0x75d0ad9300
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]// 0x75d0ad9380
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]// 0x75d10120f0
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]// 0x75d0ad9400
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]// 0x75d1012160
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]// 0x75d0ad9480
	bool bTriggerOnSequenceChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]// 0x75d0ad9500
	bool bBroadcastOverPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]// 0x75d0ad9580
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]// 0x75d10121d0

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]// 0x75d0ad9780
	int SlotIndex;//[Offset: 0x10, Size: 0x4]// 0x75d1012390
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]// 0x75d1012400
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]// 0x75d0ad9800
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]// 0x75d0ad9880
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]// 0x75d1012470
	float SegmentLength;//[Offset: 0x20, Size: 0x4]// 0x75d10124e0
	float LinkValue;//[Offset: 0x24, Size: 0x4]// 0x75d1012550
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]// 0x75d0ad9900

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x38]// 0x75a789c100
	float BlendInTime;//[Offset: 0xe0, Size: 0x4]// 0x75a7931020
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x38]// 0x75a789c180
	float BlendOutTime;//[Offset: 0x120, Size: 0x4]// 0x75a7931090
	float BlendOutTriggerTime;//[Offset: 0x124, Size: 0x4]// 0x75a7931100
	InputBlendPose FilteredBones;//[Offset: 0x128, Size: 0x10]// 0x75a789c200
	FName SyncGroup;//[Offset: 0x138, Size: 0x8]// 0x75a7931170
	int SyncSlotIndex;//[Offset: 0x140, Size: 0x4]// 0x75a79311e0
	MarkerSyncData MarkerData;//[Offset: 0x148, Size: 0x20]// 0x75a789c280
	CompositeSection[] CompositeSections;//[Offset: 0x168, Size: 0x10]// 0x75a789c380
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x178, Size: 0x10]// 0x75a789c480
	BranchingPoint[] BranchingPoints;//[Offset: 0x188, Size: 0x10]// 0x75a789c580
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]// 0x75a789c600
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]// 0x75a789c680
	byte RootMotionRootLock;//[Offset: 0x19a, Size: 0x1]// 0x75a789c700
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x1a0, Size: 0x10]// 0x75a789c800
	CurveVector* CurveForRootPosition;//[Offset: 0x1b0, Size: 0x8]// 0x75a789c880
	CurveVector* CurveForRootRotation;//[Offset: 0x1b8, Size: 0x8]// 0x75a789c900
	CurveVector* CurveForRootScale;//[Offset: 0x1c0, Size: 0x8]// 0x75a789c980
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1c8, Size: 0x10]// 0x75a789ca00
	FString[] IgnoreNotifyType;//[Offset: 0x1d8, Size: 0x10]// 0x75a789ca80
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1e8, Size: 0x28]// 0x75a789cb00
	FName TimeStretchCurveName;//[Offset: 0x210, Size: 0x8]// 0x75a7931330

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 0x1]// 0x75d1066300
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 0x8]// 0x75d1066380
	float BlendTime;//[Offset: 0x10, Size: 0x4]// 0x75d101b9a0

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x70]// 0x75bca73d00
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]// 0x75bca73d80
	float GetFloatValue(float InTime);// 0x6dd284c

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x6dd2184
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x6dd20a0

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 0x1]// 0x75d1060400
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 0x1]// 0x75d1060480
	float DefaultValue;//[Offset: 0x5c, Size: 0x4]// 0x75d1019e80
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 0x10]// 0x75d1060700

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x50]// 0x75d1060780

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]// 0x75d1060500
	byte TangentMode;//[Offset: 0x1, Size: 0x1]// 0x75d1060580
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]// 0x75d1060600
	float Time;//[Offset: 0x4, Size: 0x4]// 0x75d1019ef0
	float Value;//[Offset: 0x8, Size: 0x4]// 0x75d1019f60
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]// 0x75d1019fd0
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]// 0x75d101a040
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]// 0x75d101a0b0
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]// 0x75d101a120

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10]// 0x75d1062c00

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]// 0x75d101a900
	int BlendDepth;//[Offset: 0x8, Size: 0x4]// 0x75d101a970
	bool bIsIgnoreChildrenBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x75d1062b00

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]// 0x75d0a96780

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]// 0x75d100ff40
	float Time;//[Offset: 0x8, Size: 0x4]// 0x75d100ffb0

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]// 0x75d10118a0
	float StartTime;//[Offset: 0x38, Size: 0x4]// 0x75d1011910
	FName NextSectionName;//[Offset: 0x40, Size: 0x8]// 0x75d1011980
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]// 0x75d0a98d80

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]// 0x75d10119f0
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]// 0x75d0a98e00

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]// 0x75d0ada680

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]// 0x75d0ada580
	float StartPos;//[Offset: 0x8, Size: 0x4]// 0x75d1012c50
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]// 0x75d1012cc0
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]// 0x75d1012d30
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]// 0x75d1012da0
	int LoopingCount;//[Offset: 0x18, Size: 0x4]// 0x75d1012e10

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]// 0x75d1011a60
	float DisplayTime;//[Offset: 0x38, Size: 0x4]// 0x75d1011ad0
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]// 0x75d1011b40

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]// 0x75d1011bb0
	float TriggerTime;//[Offset: 0x4, Size: 0x4]// 0x75d1011c20
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]// 0x75d0a98e80

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]// 0x75bca73a00
	Vector GetVectorValue(float InTime);// 0x6dd3b4c

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]// 0x760d286dd0
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]// 0x760d286e40
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]// 0x75c9978b80
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]// 0x760d286f90

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]// 0x760d286eb0
	float Alpha;//[Offset: 0xc, Size: 0x4]// 0x760d286f20

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff8a17adf2b0
	FString GetNotifyName();// 0x6d8ca48

--------------------------------
Class: AnimNotifyState.Object
	bool bEnableBoneRetargetAdaptFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x75c989b580
	SkeletalMeshComponent* TryGetBoneRetargetAdaptSkelMeshComp(SkeletalMeshComponent* InTargetSkelMeshComp, const bool InIsInitCall);// 0x6d8d468
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0xffffff8a17adf2b0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xffffff8a17adf2b0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0xffffff8a17adf2b0
	bool IsEnableBoneRetargetAdaptFeature();// 0x6d8d430
	bool IsBoneRetargetAdaptInitDone(SkeletalMeshComponent* InTargetSkelMeshComp);// 0x6d8d3a0
	FString GetNotifyName();// 0x6d8d318
	void ClearBoneRetargetAdaptState(SkeletalMeshComponent* InTargetSkelMeshComp);// 0x6d8d29c

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]// 0x75d0ada480

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x20, Size: 0x70]// 0x75d0ada300

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]// 0x75d1012a20
	SmartName Name;//[Offset: 0x8, Size: 0x10]// 0x75d0ada380
	int CurveTypeFlags;//[Offset: 0x18, Size: 0x4]// 0x75d1012b00

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]// 0x75d1012a90

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75cdbe7900
	int ScreenSize;//[Offset: 0x4, Size: 0x4]// 0x75d0a816c0
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75cdbe7980
	float HardAngleThreshold;//[Offset: 0xc, Size: 0x4]// 0x75d0a81730
	int MergeDistance;//[Offset: 0x10, Size: 0x4]// 0x75d0a817a0
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]// 0x75cdbe7a00
	float ClippingLevel;//[Offset: 0x18, Size: 0x4]// 0x75d0a81810
	int AxisIndex;//[Offset: 0x1c, Size: 0x4]// 0x75d0a81880
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x75cdbe7a80
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x75cdbe7b00
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]// 0x75cdbe7b80
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x28, Size: 0x80]// 0x75cdbe7c00

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75c997e680
	enum LevelOfDetailType;//[Offset: 0x1, Size: 0x1]// 0x75c997e780
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x8, Size: 0x170]// 0x75c997f000
	MeshProxySettings ProxySettings;//[Offset: 0x178, Size: 0xc4]// 0x75c997f080
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]// 0x75c997f100

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4]// 0x75d0a81030
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 0x94]// 0x75cdbe6280
	int TextureWidth;//[Offset: 0x98, Size: 0x4]// 0x75d0a810a0
	int TextureHeight;//[Offset: 0x9c, Size: 0x4]// 0x75d0a81110
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]// 0x75cdbe6300
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]// 0x75cdbe6380
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]// 0x75cdbe6400
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1]// 0x75cdbe6480
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]// 0x75cdbe6500
	float MergeDistance;//[Offset: 0xa8, Size: 0x4]// 0x75d0a81180
	float HardAngleThreshold;//[Offset: 0xac, Size: 0x4]// 0x75d0a811f0
	int LightMapResolution;//[Offset: 0xb0, Size: 0x4]// 0x75d0a81260
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]// 0x75cdbe6580
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]// 0x75cdbe6600
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]// 0x75cdbe6680
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 0x1]// 0x75cdbe6700
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 0x1]// 0x75cdbe6780
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]// 0x75cdbe6800
	int LODGroupIndex;//[Offset: 0xbc, Size: 0x4]// 0x75d0a812d0
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]// 0x75cdbe6880
	enum AggregatorMode;//[Offset: 0xc1, Size: 0x1]// 0x75cdbe6980
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]// 0x75cdbe6a00

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x28, Size: 0x10]// 0x75a829c800
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x38, Size: 0x10]// 0x75a829c900
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x48, Size: 0x10]// 0x75a829ca00
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]// 0x75a829ca80
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x100, Size: 0x8]// 0x75a829cb00
	BodySetup*[] BodySetup;//[Offset: 0x108, Size: 0x10]// 0x75a829cc00

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bClientOnlyBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 0x1]// 0x75a829c680
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x378, Size: 0x10]// 0x75a829c780

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]// 0x75d0a7dec0
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x28]// 0x75cdbde680

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]// 0x75d0a7dfa0
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]// 0x75cdbde780
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]// 0x75d0a7e010
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]// 0x75d0a7e080
	float PositionStrength;//[Offset: 0x14, Size: 0x4]// 0x75d0a7e0f0
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]// 0x75d0a7e160
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]// 0x75d0a7e1d0
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]// 0x75d0a7e240

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]// 0x75a829a900
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]// 0x75a829aa00
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]// 0x75a829aa80

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]// 0x75d0a88260
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]// 0x75d0a882d0
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]// 0x75d0a88340
	Vector Pos1;//[Offset: 0x30, Size: 0xc]// 0x75d0a90580
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]// 0x75d0a90600
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]// 0x75d0a90680
	Vector Pos2;//[Offset: 0x54, Size: 0xc]// 0x75d0a90700
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]// 0x75d0a90780
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]// 0x75d0a90800
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]// 0x75d0a90880
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]// 0x75d0a90900
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]// 0x75d0a91200

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]// 0x75d0a883b0
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]// 0x75d0a88420
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]// 0x75d0a88490
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]// 0x75d0a88500
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]// 0x75d0a90b00
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]// 0x75d0a90c80
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]// 0x75d0a90e00
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]// 0x75d0a90e80
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]// 0x75d0a90f00
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]// 0x75d0a90f80
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]// 0x75d0a91000
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]// 0x75d0a91080
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]// 0x75d0a91100
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]// 0x75d0a91180

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]// 0x75d0a88570
	byte XMotion;//[Offset: 0x18, Size: 0x1]// 0x75d0a90980
	byte YMotion;//[Offset: 0x19, Size: 0x1]// 0x75d0a90a00
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]// 0x75d0a90a80

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]// 0x75d0a88730
	float Damping;//[Offset: 0x4, Size: 0x4]// 0x75d0a887a0
	float Restitution;//[Offset: 0x8, Size: 0x4]// 0x75d0a88810
	float ContactDistance;//[Offset: 0xc, Size: 0x4]// 0x75d0a88880
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x75d0a90d80

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]// 0x75d0a885e0
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]// 0x75d0a88650
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]// 0x75d0a90b80
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]// 0x75d0a90c00

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]// 0x75d0a886c0
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]// 0x75d0a90d00

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]// 0x75d0a91280
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]// 0x75d0a91300
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]// 0x75d0a91380
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]// 0x75d0a91400
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]// 0x75d0a91480
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]// 0x75d0a91500

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]// 0x75d0a888f0
	float Damping;//[Offset: 0x4, Size: 0x4]// 0x75d0a88960
	float MaxForce;//[Offset: 0x8, Size: 0x4]// 0x75d0a889d0
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]// 0x75d0a91680
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]// 0x75d0a91700

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]// 0x75d0a91580
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]// 0x75d0a91600
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]// 0x75d0a91780
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]// 0x75d0a91800
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]// 0x75d0a91880
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]// 0x75d0a91900

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]// 0x75cdbde600
	FName ProfileName;//[Offset: 0x108, Size: 0x8]// 0x75d0a7de50

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x28, Size: 0x50]// 0x75a8326240
	Blueprint* SourceAsset;//[Offset: 0x78, Size: 0x28]// 0x75a82bd180

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 0x8]// 0x75d0a80000
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 0x30]// 0x75cdbe1980

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]// 0x75a78d0d00
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]// 0x75a78d0d80
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x58, Size: 0x8]// 0x75a78d0e00
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]// 0x75a78d0e80
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]// 0x75a78d0f00
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x68, Size: 0x8]// 0x75a78d0f80
	ActorComponent*[] ComponentTemplates;//[Offset: 0x70, Size: 0x10]// 0x75a78d1080
	TimelineTemplate*[] Timelines;//[Offset: 0x80, Size: 0x10]// 0x75a78d1180
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x90, Size: 0x8]// 0x75a78d1200
	byte BlueprintType;//[Offset: 0x98, Size: 0x1]// 0x75a78d1280
	int BlueprintSystemVersion;//[Offset: 0x9c, Size: 0x4]// 0x75a7932fa0
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]// 0x75a78d1300

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]// 0x75a78d1380
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]// 0x75a78d1400
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x75a78d1480
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]// 0x75a78d1500
	Guid BlueprintGUID;//[Offset: 0x3c, Size: 0x10]// 0x75a78d1580

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]// 0x75a8281700
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]// 0x75a8281800
	SCS_Node*[] NodesRemovedInCompile;//[Offset: 0x48, Size: 0x10]// 0x75a8281900
	SCS_Node*[] AllNodesIncludeEditorOnly;//[Offset: 0x58, Size: 0x10]// 0x75a8281a00
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x68, Size: 0x8]// 0x75a8281a80
	SCS_Node* RootNode;//[Offset: 0x70, Size: 0x8]// 0x75a8281b00
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x78, Size: 0x10]// 0x75a8281c00

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]// 0x75a8281d00
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]// 0x75a8281d80
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50]// 0x75a8281e00
	FName VariableName;//[Offset: 0x88, Size: 0x8]// 0x75a82c4dc0
	FName AttachToName;//[Offset: 0x90, Size: 0x8]// 0x75a82c4e30
	FName ParentComponentOrVariableName;//[Offset: 0x98, Size: 0x8]// 0x75a82c4ea0
	FName ParentComponentOwnerClassName;//[Offset: 0xa0, Size: 0x8]// 0x75a82c4f10
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]// 0x75a8281e80
	SCS_Node*[] ChildNodes;//[Offset: 0xb0, Size: 0x10]// 0x75a8281f80
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xc0, Size: 0x10]// 0x75a8282080
	Guid VariableGuid;//[Offset: 0xd0, Size: 0x10]// 0x75a8282100
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]// 0x75a8282180
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]// 0x75a8282200
	FName NativeComponentName;//[Offset: 0xe8, Size: 0x8]// 0x75a82c4f80
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]// 0x75a8282280
	FName InternalVariableName;//[Offset: 0xf8, Size: 0x8]// 0x75a82c4ff0

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75d0a92b00
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10]// 0x75d0a92c80

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]// 0x75d100dc40
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]// 0x75d100dcb0
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]// 0x75d0a92b80

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]// 0x75d100e260
	FString DataValue;//[Offset: 0x8, Size: 0x10]// 0x75d100e2d0

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]// 0x75a8260c10
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]// 0x75a8276c80
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]// 0x75a8276d00
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]// 0x75a8276d80
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]// 0x75a8276e00
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]// 0x75a8276e80
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 0x1]// 0x75a8276f00
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]// 0x75a8277000
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]// 0x75a8277100
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]// 0x75a8277200
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]// 0x75a8277300
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]// 0x75a8277400
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]// 0x75a8277480

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 0x8]// 0x75c9978c80

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 0x8]// 0x760d287000
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c9978e80

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 0x8]// 0x75c9978d00

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 0x8]// 0x75c9978d80

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 0x8]// 0x75c9978e00

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]// 0x75bca73c00
	LinearColor GetLinearColorValue(float InTime);// 0x6dd2cec

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]// 0x75bca4b280
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]// 0x75bca4b380

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]// 0x75cdbecf80
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]// 0x75cdbed000
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]// 0x75cdbed180
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50]// 0x75cdbed200

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]// 0x75cdbed080
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]// 0x75d0a84280
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]// 0x75cdbed100

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]// 0x75a82c2a80

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 0x8]// 0x75d0a7b290
	FString ApexFileName;//[Offset: 0x8, Size: 0x10]// 0x75d0a7b300
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x75c997f480
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x1c, Size: 0x50]// 0x75c997f500

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 0x4]// 0x75d0a7b370
	float HorizontalResistance;//[Offset: 0x4, Size: 0x4]// 0x75d0a7b3e0
	float BendResistance;//[Offset: 0x8, Size: 0x4]// 0x75d0a7b450
	float ShearResistance;//[Offset: 0xc, Size: 0x4]// 0x75d0a7b4c0
	float Friction;//[Offset: 0x10, Size: 0x4]// 0x75d0a7b530
	float Damping;//[Offset: 0x14, Size: 0x4]// 0x75d0a7b5a0
	float TetherStiffness;//[Offset: 0x18, Size: 0x4]// 0x75d0a7b610
	float TetherLimit;//[Offset: 0x1c, Size: 0x4]// 0x75d0a7b680
	float Drag;//[Offset: 0x20, Size: 0x4]// 0x75d0a7b6f0
	float StiffnessFrequency;//[Offset: 0x24, Size: 0x4]// 0x75d0a7b760
	float GravityScale;//[Offset: 0x28, Size: 0x4]// 0x75d0a7b7d0
	float MassScale;//[Offset: 0x2c, Size: 0x4]// 0x75d0a7b840
	float InertiaBlend;//[Offset: 0x30, Size: 0x4]// 0x75d0a7b8b0
	float SelfCollisionThickness;//[Offset: 0x34, Size: 0x4]// 0x75d0a7b920
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 0x4]// 0x75d0a7b990
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 0x4]// 0x75d0a7ba00
	float SolverFrequency;//[Offset: 0x40, Size: 0x4]// 0x75d0a7ba70
	float FiberCompression;//[Offset: 0x44, Size: 0x4]// 0x75d0a7bae0
	float FiberExpansion;//[Offset: 0x48, Size: 0x4]// 0x75d0a7bb50
	float FiberResistance;//[Offset: 0x4c, Size: 0x4]// 0x75d0a7bbc0

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x28, Size: 0x4]// 0x75c98adff0
	Skeleton* CurrentSkeleton;//[Offset: 0x30, Size: 0x8]// 0x75c989dc00
	byte RootMotionMode;//[Offset: 0x38, Size: 0x1]// 0x75c989dc80
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]// 0x75c989dd00
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]// 0x75c989dd80
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]// 0x75c989de00
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]// 0x75c989de80
	delegate OnMontageBlendingOut;//[Offset: 0x40, Size: 0x10]// 0x75c989df00
	delegate OnMontageStarted;//[Offset: 0x50, Size: 0x10]// 0x75c989df80
	delegate OnMontageEnded;//[Offset: 0x60, Size: 0x10]// 0x75c989e000
	delegate OnAllMontageInstancesEnded;//[Offset: 0x70, Size: 0x10]// 0x75c989e080
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]// 0x75c989e100
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x180, Size: 0x10]// 0x75c989e200
	bool bIsOnlyMasterTriggerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]// 0x75c989e280
	bool bIsMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]// 0x75c989e300
	bool bDynamicDisableBoneRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 0x1]// 0x75c989e380
	AnimInstance* FollowedAnimInstance;//[Offset: 0x3d0, Size: 0x8]// 0x75c989e400
	AnimInstance*[] FollowerAnimInstances;//[Offset: 0x3d8, Size: 0x10]// 0x75c989e500
	AnimInstance* ParentAnimInstance;//[Offset: 0x3f8, Size: 0x8]// 0x75c989e580
	AnimInstance*[] SubAnimInstances;//[Offset: 0x400, Size: 0x10]// 0x75c989e680
	AnimInstance*[] SubAnimInstancesTempRef;//[Offset: 0x410, Size: 0x10]// 0x75c989e780
	AnimSequenceBase*[] CachedSwitchNotifySequence;//[Offset: 0x420, Size: 0x10]// 0x75c989e880
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x6d85470
	Pawn* TryGetPawnOwner();// 0x6d85434
	void TriggerAllSequenceSwitchNotify();// 0x6d85420
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x6d85360
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x6d852a8
	void SetRootMotionMode(byte Value);// 0x6d85224
	void SetParentAnimInstance(AnimInstance* InParentAnimInstance);// 0x6d851a0
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x6d850e8
	void SetInstanceAssetPlayerTime(int AssetPlayerIndex, float Time);// 0x6d85030
	void SetFollowedAnimInstance(AnimInstance* InputFollowedInstance);// 0x6d84fb4
	void SavePoseSnapshot(FName SnapshotName);// 0x6d84f30
	void ResetSubAnimNodeAnimClass(FName SubInstanceSlotName);// 0x6d84eb4
	void ResetFollowedAnimInstance();// 0x6d84ea0
	AnimInstance* ReplaceSubAnimNodeAnimClass(FName SubInstanceSlotName, class AnimInstance NewAnimClass);// 0x6d84ddc
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x6d84bb8
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x6d84a08
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x6d84948
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x6d84888
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x6d847d0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x6d846d8
	void Montage_Resume(const AnimMontage* Montage);// 0x6d8465c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x6d84514
	void Montage_Pause(const AnimMontage* Montage);// 0x6d84498
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x6d843e4
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x6d84328
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x6d84290
	bool Montage_IsActive(const AnimMontage* Montage);// 0x6d84200
	float Montage_GetPosition(const AnimMontage* Montage);// 0x6d84174
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x6d840e8
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x6d84024
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x6d83f94
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x6d83f08
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x6d83e7c
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x6d83dac
	bool IsUseSubAnimInstanceBySlot(FName SubInstanceSlotName);// 0x6d83d14
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x6d83bcc
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName, bool bcheckTransientPackage);// 0x6d83ac0
	bool IsFollowing();// 0x6d83a9c
	bool IsAnyMontagePlaying();// 0x6d83a64
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x6d8399c
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x6d83888
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x6d837ec
	AnimInstance* GetSubAnimInstanceBySlot(FName SubInstanceSlotName);// 0x6d83760
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6d83660
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6d83560
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6d83460
	float GetRelevantAnimTime(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6d83360
	float GetRelevantAnimLength(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x6d83260
	SkeletalMeshComponent* GetOwningComponent();// 0x6d8322c
	Actor* GetOwningActor();// 0x6d831f8
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x6d83134
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x6d83070
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x6d82fac
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x6d82ee8
	float GetInstanceMachineWeight(int MachineIndex);// 0x6d82e5c
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x6d82dd0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x6d82d44
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x6d82cb8
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x6d82c2c
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x6d82ba0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x6d82b14
	float GetCurveValue(FName CurveName);// 0x6d82a88
	FName GetCurrentStateName(int MachineIndex);// 0x6d829fc
	AnimMontage* GetCurrentActiveMontage();// 0x6d829c8
	AnimMontage* GetCurMontageBySlot(FName SlotName);// 0x6d8293c
	void ForceTriggerAnimEndedEvent();// 0x6d82928
	void ClearMorphTargets();// 0x6d82914
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x6d82828
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xffffff8a17adf2b0
	void BlueprintPostEvaluateAnimation();// 0xffffff8a17adf2b0
	void BlueprintInitializeAnimation();// 0xffffff8a17adf2b0
	void BlueprintBeginPlay();// 0xffffff8a17adf2b0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]// 0x75d105f700
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]// 0x75d105f780
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]// 0x75d1019be0
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]// 0x75d1019c50
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x75d105f800

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]// 0x75d10132e0
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]// 0x75d1013350
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]// 0x75d10133c0

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]// 0x75a79335c0
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]// 0x75a78d3600

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x75d0a7a180
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c997d200
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]// 0x75d0a7a1f0

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]// 0x7611d0db00

--------------------------------
Class: AnimUpdateRateParameters
	int UpdateRate;//[Offset: 0x4, Size: 0x4]// 0x7611d0cab0
	int EvaluationRate;//[Offset: 0x8, Size: 0x4]// 0x7611d0ca40
	bool bInterpolateSkippedFrames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]// 0x7611d0c9c0
	bool bShouldUseLodMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]// 0x7611d0c940
	bool bShouldUseMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]// 0x7611d0c8c0
	bool bSkipUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]// 0x7611d0c840
	bool bSkipEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]// 0x7611d0c7c0
	float TickedPoseOffestTime;//[Offset: 0x10, Size: 0x4]// 0x7611d0c750
	float AdditionalTime;//[Offset: 0x14, Size: 0x4]// 0x7611d0c6e0
	int BaseNonRenderedUpdateRate;//[Offset: 0x1c, Size: 0x4]// 0x7611d0c670
	int BaseNonRenderedUpdateRateHigh;//[Offset: 0x20, Size: 0x4]// 0x7611d0c600
	float MaxDistFromMainChar;//[Offset: 0x24, Size: 0x4]// 0x7611d0c590
	float[] BaseVisibleDistanceFactorThesholds;//[Offset: 0x28, Size: 0x10]// 0x7611d0c4a0
	int LockAnimUpdateRate;//[Offset: 0x38, Size: 0x4]// 0x7611d0c430
	<int,int> LODToFrameSkipMap;//[Offset: 0x40, Size: 0x50]// 0x7611d0c1f0
	int MaxEvalRateForInterpolation;//[Offset: 0x90, Size: 0x4]// 0x7611d0c180
	enum ShiftBucket;//[Offset: 0x94, Size: 0x1]// 0x7611d0c020

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]// 0x7611d0b050
	byte Weights;//[Offset: 0x20, Size: 0x1]// 0x7611d0afd0

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]// 0x75c997f800
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]// 0x75c997f880
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]// 0x75c997f900
	float SavedPosition;//[Offset: 0xc, Size: 0x4]// 0x75d0a7bca0
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]// 0x75d0a7bd10

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: BoneRetargetInfo
	SkeletalMeshComponent* RetargetSkeletalMeshComponent;//[Offset: 0x0, Size: 0x8]// 0x75c997dd00

--------------------------------
Class: DynamicBatchSectionInfo
	MaterialBatchInfo[] TransientMatInfo;//[Offset: 0x28, Size: 0x10]// 0x75c997db00
	MaterialInterface*[] BatchMatList;//[Offset: 0x38, Size: 0x10]// 0x75c997dc00
	<int,MaterialInstanceDynamic*> CacheAtlasMaterials;//[Offset: 0x48, Size: 0x50]// 0x760d21d4c0

--------------------------------
Class: MaterialBatchInfo
	<enum,DynamicAtlasTexture2D*> AtlasTextures;//[Offset: 0x8, Size: 0x50]// 0x760d21d400

--------------------------------
Class: DynamicAtlasTexture2D.Texture2D.Texture.Object

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x1f0, Size: 0x8]// 0x75b4df6d80
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]// 0x75b4df6e00
	float GravityScale;//[Offset: 0x1fc, Size: 0x4]// 0x75b4e0b120
	float MaxStepHeight;//[Offset: 0x200, Size: 0x4]// 0x75b4e0b190
	float JumpZVelocity;//[Offset: 0x204, Size: 0x4]// 0x75b4e0b200
	float JumpOffJumpZFactor;//[Offset: 0x208, Size: 0x4]// 0x75b4e0b270
	float WalkableFloorAngle;//[Offset: 0x20c, Size: 0x4]// 0x75b4e0b2e0
	float WalkableFloorZ;//[Offset: 0x210, Size: 0x4]// 0x75b4e0b350
	byte MovementMode;//[Offset: 0x214, Size: 0x1]// 0x75b4df6e80
	byte CustomMovementMode;//[Offset: 0x215, Size: 0x1]// 0x75b4df6f00
	float GroundFriction;//[Offset: 0x250, Size: 0x4]// 0x75b4e0b3c0
	float MaxWalkSpeed;//[Offset: 0x254, Size: 0x4]// 0x75b4e0b430
	float MaxWalkSpeedCrouched;//[Offset: 0x258, Size: 0x4]// 0x75b4e0b4a0
	float MaxSwimSpeed;//[Offset: 0x25c, Size: 0x4]// 0x75b4e0b510
	float MaxFlySpeed;//[Offset: 0x260, Size: 0x4]// 0x75b4e0b580
	float MaxCustomMovementSpeed;//[Offset: 0x264, Size: 0x4]// 0x75b4e0b5f0
	float MaxAcceleration;//[Offset: 0x268, Size: 0x4]// 0x75b4e0b660
	float MinAnalogWalkSpeed;//[Offset: 0x26c, Size: 0x4]// 0x75b4e0b6d0
	float BrakingFrictionFactor;//[Offset: 0x270, Size: 0x4]// 0x75b4e0b740
	float BrakingFriction;//[Offset: 0x274, Size: 0x4]// 0x75b4e0b7b0
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]// 0x75b4df6f80
	float BrakingDecelerationWalking;//[Offset: 0x27c, Size: 0x4]// 0x75b4e0b820
	float BrakingDecelerationFalling;//[Offset: 0x280, Size: 0x4]// 0x75b4e0b890
	float BrakingDecelerationSwimming;//[Offset: 0x284, Size: 0x4]// 0x75b4e0b900
	float BrakingDecelerationFlying;//[Offset: 0x288, Size: 0x4]// 0x75b4e0b970
	float AirControl;//[Offset: 0x28c, Size: 0x4]// 0x75b4e0b9e0
	float AirControlBoostMultiplier;//[Offset: 0x290, Size: 0x4]// 0x75b4e0ba50
	float AirControlBoostVelocityThreshold;//[Offset: 0x294, Size: 0x4]// 0x75b4e0bac0
	float FallingLateralFriction;//[Offset: 0x298, Size: 0x4]// 0x75b4e0bb30
	float CrouchedHalfHeight;//[Offset: 0x29c, Size: 0x4]// 0x75b4e0bba0
	float Buoyancy;//[Offset: 0x2a0, Size: 0x4]// 0x75b4e0bc10
	float PerchRadiusThreshold;//[Offset: 0x2a4, Size: 0x4]// 0x75b4e0bc80
	float PerchAdditionalHeight;//[Offset: 0x2a8, Size: 0x4]// 0x75b4e0bcf0
	Rotator RotationRate;//[Offset: 0x2ac, Size: 0xc]// 0x75b4df7000
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]// 0x75b4df7080
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]// 0x75b4df7100
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]// 0x75b4df7180
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]// 0x75b4df7200
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b8, Size: 0x1]// 0x75b4df7280
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b8, Size: 0x1]// 0x75b4df7300
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b8, Size: 0x1]// 0x75b4df7380
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b9, Size: 0x1]// 0x75b4df7400
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b9, Size: 0x1]// 0x75b4df7480
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b9, Size: 0x1]// 0x75b4df7500
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b9, Size: 0x1]// 0x75b4df7580
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b9, Size: 0x1]// 0x75b4df7600
	bool bForceNoSimulatePrediction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b9, Size: 0x1]// 0x75b4df7680
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b9, Size: 0x1]// 0x75b4df7700
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x2c0, Size: 0x8]// 0x75b4df7780
	float MaxOutOfWaterStepHeight;//[Offset: 0x2c8, Size: 0x4]// 0x75b4e0bd60
	float OutofWaterZ;//[Offset: 0x2cc, Size: 0x4]// 0x75b4e0bdd0
	float Mass;//[Offset: 0x2d0, Size: 0x4]// 0x75b4e0be40
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]// 0x75b4df7800
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]// 0x75b4df7880
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]// 0x75b4df7900
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]// 0x75b4df7980
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]// 0x75b4df7a00
	float StandingDownwardForceScale;//[Offset: 0x2dc, Size: 0x4]// 0x75b4e0beb0
	float InitialPushForceFactor;//[Offset: 0x2e0, Size: 0x4]// 0x75b4e0bf20
	float PushForceFactor;//[Offset: 0x2e4, Size: 0x4]// 0x75b4e0bf90
	float PushForcePointZOffsetFactor;//[Offset: 0x2e8, Size: 0x4]// 0x75b4e0c000
	float TouchForceFactor;//[Offset: 0x2ec, Size: 0x4]// 0x75b4e0c070
	float MinTouchForce;//[Offset: 0x2f0, Size: 0x4]// 0x75b4e0c0e0
	float MaxTouchForce;//[Offset: 0x2f4, Size: 0x4]// 0x75b4e0c150
	float RepulsionForce;//[Offset: 0x2f8, Size: 0x4]// 0x75b4e0c1c0
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]// 0x75b4df7a80
	float CrouchedSpeedMultiplier;//[Offset: 0x300, Size: 0x4]// 0x75b4e0c230
	float UpperImpactNormalScale;//[Offset: 0x304, Size: 0x4]// 0x75b4e0c2a0
	Vector Acceleration;//[Offset: 0x308, Size: 0xc]// 0x75b4df7b00
	Vector LastUpdateLocation;//[Offset: 0x314, Size: 0xc]// 0x75b4df7b80
	Quat LastUpdateRotation;//[Offset: 0x320, Size: 0x10]// 0x75b4df7c00
	Vector LastUpdateVelocity;//[Offset: 0x330, Size: 0xc]// 0x75b4df7c80
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x33c, Size: 0x4]// 0x75b4e0c310
	Vector PendingImpulseToApply;//[Offset: 0x340, Size: 0xc]// 0x75b4df7d00
	Vector PendingForceToApply;//[Offset: 0x34c, Size: 0xc]// 0x75b4df7d80
	float AnalogInputModifier;//[Offset: 0x358, Size: 0x4]// 0x75b4e0c380
	float LastPrintApplyImpactPhysicsForcesLog;//[Offset: 0x364, Size: 0x4]// 0x75b4e0c3f0
	float MaxSimulationTimeStep;//[Offset: 0x368, Size: 0x4]// 0x75b4e0c460
	int MaxSimulationIterations;//[Offset: 0x36c, Size: 0x4]// 0x75b4e0c4d0
	float MaxDepenetrationWithGeometry;//[Offset: 0x370, Size: 0x4]// 0x75b4e0c540
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x374, Size: 0x4]// 0x75b4e0c5b0
	float MaxDepenetrationWithPawn;//[Offset: 0x378, Size: 0x4]// 0x75b4e0c620
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x37c, Size: 0x4]// 0x75b4e0c690
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x380, Size: 0x4]// 0x75b4e0c700
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x384, Size: 0x4]// 0x75b4e0c770
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x388, Size: 0x4]// 0x75b4e0c7e0
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x38c, Size: 0x4]// 0x75b4e0c850
	float NetProxyShrinkRadius;//[Offset: 0x390, Size: 0x4]// 0x75b4e0c8c0
	float NetProxyShrinkHalfHeight;//[Offset: 0x394, Size: 0x4]// 0x75b4e0c930
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x398, Size: 0x4]// 0x75b4e0c9a0
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x39c, Size: 0x4]// 0x75b4e0ca10
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]// 0x75b4df7e80
	enum NetworkSmoothingMode;//[Offset: 0x3a1, Size: 0x1]// 0x75b4df7f80
	float LedgeCheckThreshold;//[Offset: 0x3a4, Size: 0x4]// 0x75b4e0ca80
	float JumpOutOfWaterPitch;//[Offset: 0x3a8, Size: 0x4]// 0x75b4e0caf0
	FindFloorResult CurrentFloor;//[Offset: 0x3b0, Size: 0x98]// 0x75b4df8000
	byte DefaultLandMovementMode;//[Offset: 0x448, Size: 0x1]// 0x75b4df8080
	byte DefaultWaterMovementMode;//[Offset: 0x449, Size: 0x1]// 0x75b4df8100
	byte GroundMovementMode;//[Offset: 0x44a, Size: 0x1]// 0x75b4df8180
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44b, Size: 0x1]// 0x75b4df8200
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44b, Size: 0x1]// 0x75b4df8280
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44b, Size: 0x1]// 0x75b4df8300
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44b, Size: 0x1]// 0x75b4df8380
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44b, Size: 0x1]// 0x75b4df8400
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44b, Size: 0x1]// 0x75b4df8480
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44b, Size: 0x1]// 0x75b4df8500
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44b, Size: 0x1]// 0x75b4df8580
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44c, Size: 0x1]// 0x75b4df8600
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44c, Size: 0x1]// 0x75b4df8680
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44c, Size: 0x1]// 0x75b4df8700
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44c, Size: 0x1]// 0x75b4df8780
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44c, Size: 0x1]// 0x75b4df8800
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44c, Size: 0x1]// 0x75b4df8880
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44c, Size: 0x1]// 0x75b4df8900
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44c, Size: 0x1]// 0x75b4df8980
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44d, Size: 0x1]// 0x75b4df8a00
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44d, Size: 0x1]// 0x75b4df8a80
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44d, Size: 0x1]// 0x75b4df8b00
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44d, Size: 0x1]// 0x75b4df8b80
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44d, Size: 0x1]// 0x75b4df8c00
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44d, Size: 0x1]// 0x75b4df8c80
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44d, Size: 0x1]// 0x75b4df8d00
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44e, Size: 0x1]// 0x75b4df8d80
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44e, Size: 0x1]// 0x75b4df8e00
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44e, Size: 0x1]// 0x75b4df8e80
	float AvoidanceConsiderationRadius;//[Offset: 0x460, Size: 0x4]// 0x75b4e0cb60
	Vector RequestedVelocity;//[Offset: 0x464, Size: 0xc]// 0x75b4df8f00
	int AvoidanceUID;//[Offset: 0x470, Size: 0x4]// 0x75b4e0cbd0
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x474, Size: 0x4]// 0x75b4df8f80
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x478, Size: 0x4]// 0x75b4df9000
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x47c, Size: 0x4]// 0x75b4df9080
	float AvoidanceWeight;//[Offset: 0x480, Size: 0x4]// 0x75b4e0cc40
	Vector PendingLaunchVelocity;//[Offset: 0x484, Size: 0xc]// 0x75b4df9100
	float NavMeshProjectionInterval;//[Offset: 0x530, Size: 0x4]// 0x75b4e0ccb0
	float NavMeshProjectionTimer;//[Offset: 0x534, Size: 0x4]// 0x75b4e0cd20
	float NavMeshProjectionInterpSpeed;//[Offset: 0x538, Size: 0x4]// 0x75b4e0cd90
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x53c, Size: 0x4]// 0x75b4e0ce00
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x540, Size: 0x4]// 0x75b4e0ce70
	float NavWalkingFloorDistTolerance;//[Offset: 0x544, Size: 0x4]// 0x75b4e0cee0
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x548, Size: 0x58]// 0x75b4df9180
	float MinTimeBetweenTimeStampResets;//[Offset: 0x5b0, Size: 0x4]// 0x75b4e0cf50
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x5b8, Size: 0x100]// 0x75b4df9200
	RootMotionMovementParams RootMotionParams;//[Offset: 0x750, Size: 0x40]// 0x75b4df9280
	Vector AnimRootMotionVelocity;//[Offset: 0x790, Size: 0xc]// 0x75b4df9300
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 0x1]// 0x75b4df9380
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79d, Size: 0x1]// 0x75b4df9400
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x6dc73dc
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x6dc7360
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x6dc72a0
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x6dc7218
	void SetGroupsToIgnore(int GroupFlags);// 0x6dc719c
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x6dc7114
	void SetGroupsToAvoid(int GroupFlags);// 0x6dc7098
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x6dc7010
	void SetAvoidanceGroup(int GroupFlags);// 0x6dc6f94
	void SetAvoidanceEnabled(bool bEnable);// 0x6dc6f10
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x6dc6dd4
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6dc6a00
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6dc662c
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6dc6374
	float K2_GetWalkableFloorZ();// 0x6dc6340
	float K2_GetWalkableFloorAngle();// 0x6dc630c
	float K2_GetModifiedMaxAcceleration();// 0x6dc62d0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x6dc61e0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x6dc6040
	bool IsWalking();// 0x6dc6000
	bool IsWalkable(out const HitResult Hit);// 0x6dc5f44
	float GetValidPerchRadius();// 0x6dc5f10
	FString GetToString();// 0x6dc5e88
	float GetPerchRadiusThreshold();// 0x6dc5e54
	PrimitiveComponent* GetMovementBase();// 0x6dc5e20
	float GetMinAnalogSpeed();// 0x6dc5de4
	float GetMaxJumpHeightWithJumpTime();// 0x6dc5da8
	float GetMaxJumpHeight();// 0x6dc5d6c
	float GetMaxBrakingDeceleration();// 0x6dc5d30
	float GetMaxAcceleration();// 0x6dc5cf4
	Vector GetImpartedMovementBaseVelocity();// 0x6dc5cb4
	Vector GetCurrentAcceleration();// 0x6dc5c7c
	Character* GetCharacterOwner();// 0x6dc5c60
	float GetAnalogInputModifier();// 0x6dc5c2c
	void DisableMovement();// 0x6dc5c10
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6dc5a08
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6dc5680
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6dc53c4
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6dc5178
	void ClientAckGoodMove(float TimeStamp);// 0x6dc50f4
	void ClearAccumulatedForces();// 0x6dc50d8
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6dc4ef8
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x6dc4db4
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x6dc4ce4
	void AddForce(Vector Force);// 0x6dc4c5c

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x198, Size: 0x8]// 0x761202f900
	Vector K2_GetInputVector();// 0x6ecd76c
	bool IsMoveInputIgnored();// 0x6ecd72c
	Vector GetPendingInputVector();// 0x6ecd6f4
	Pawn* GetPawnOwner();// 0x6ecd6c0
	Vector GetLastInputVector();// 0x6ecd688
	Vector ConsumeInputVector();// 0x6ecd648
	void AddInputVector(Vector WorldVector, bool bForce);// 0x6ecd578

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x158, Size: 0x28]// 0x761202ebf0
	float FixedPathBrakingDistance;//[Offset: 0x180, Size: 0x4]// 0x761202eb80
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1]// 0x761202eb00
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x184, Size: 0x1]// 0x761202ea80
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 0x1]// 0x761202ea00
	MovementProperties MovementState;//[Offset: 0x188, Size: 0x4]// 0x761202e660
	void StopMovementKeepPathing();// 0x6eab378
	void StopActiveMovement();// 0x6eab35c
	bool IsSwimming();// 0x6eab31c
	bool IsMovingOnGround();// 0x6eab2dc
	bool IsFlying();// 0x6eab29c
	bool IsFalling();// 0x6eab25c
	bool IsCrouching();// 0x6eab21c

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0x118, Size: 0x8]// 0x7611d12500
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x120, Size: 0x8]// 0x7611d12480
	Vector Velocity;//[Offset: 0x12c, Size: 0xc]// 0x7611d12400
	Vector PlaneConstraintNormal;//[Offset: 0x138, Size: 0xc]// 0x7611d12380
	Vector PlaneConstraintOrigin;//[Offset: 0x144, Size: 0xc]// 0x7611d12300
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]// 0x7611d12280
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1]// 0x7611d12200
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1]// 0x7611d12180
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1]// 0x7611d12100
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1]// 0x7611d12080
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1]// 0x7611d12000
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1]// 0x7611d11f80
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1]// 0x7611d11f00
	enum PlaneConstraintAxisSetting;//[Offset: 0x153, Size: 0x1]// 0x7611d11e00
	void StopMovementImmediately();// 0x6e9cf9c
	void SnapUpdatedComponentToPlane();// 0x6e9cf80
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x6e9cefc
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x6e9ce74
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x6e9cdec
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x6e9cd1c
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x6e9cc90
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x6e9cc0c
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x6e9cb88
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x6e9c9c0
	float K2_GetModifiedMaxSpeed();// 0x6e9c984
	float K2_GetMaxSpeedModifier();// 0x6e9c948
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x6e9c8b0
	Vector GetPlaneConstraintOrigin();// 0x6e9c870
	Vector GetPlaneConstraintNormal();// 0x6e9c830
	enum GetPlaneConstraintAxisSetting();// 0x6e9c814
	PhysicsVolume* GetPhysicsVolume();// 0x6e9c7d8
	float GetMaxSpeed();// 0x6e9c79c
	float GetGravityZ();// 0x6e9c760
	Vector ConstrainNormalToPlane(Vector Normal);// 0x6e9c6c4
	Vector ConstrainLocationToPlane(Vector Location);// 0x6e9c628
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x6e9c58c

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]// 0x761202ef50
	float AgentHeight;//[Offset: 0x8, Size: 0x4]// 0x761202eee0
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]// 0x761202ee70
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]// 0x761202ee00
	class NavigationData* PreferredNavData;//[Offset: 0x18, Size: 0x8]// 0x761202ed80
	int AgentType;//[Offset: 0x20, Size: 0x4]// 0x761202ed10

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x761202e980
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x761202e900
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x761202e880
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x761202e800
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]// 0x761202e780

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x510, Size: 0x8]// 0x75a8536280
	NavDataConfig NavDataConfig;//[Offset: 0x518, Size: 0x60]// 0x75a8536300
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578, Size: 0x1]// 0x75a8536380
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x578, Size: 0x1]// 0x75a8536400
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x578, Size: 0x1]// 0x75a8536480
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x578, Size: 0x1]// 0x75a8536500
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x578, Size: 0x1]// 0x75a8536580
	enum RuntimeGeneration;//[Offset: 0x579, Size: 0x1]// 0x75a8536680
	float ObservedPathsTickInterval;//[Offset: 0x57c, Size: 0x4]// 0x75a89bd510
	int AgentType;//[Offset: 0x580, Size: 0x4]// 0x75a89bd580
	uint32 DataVersion;//[Offset: 0x584, Size: 0x4]// 0x75a89bd5f0
	SupportedAreaData[] SupportedAreas;//[Offset: 0x658, Size: 0x10]// 0x75a8536780

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x28, Size: 0x8]// 0x75d0a805b0
	Color Color;//[Offset: 0x30, Size: 0x4]// 0x75cdbe3600
	Vector DefaultQueryExtent;//[Offset: 0x34, Size: 0xc]// 0x75cdbe3680
	class NavigationData* NavigationDataClass;//[Offset: 0x40, Size: 0x8]// 0x75cdbe3700
	SoftClassPath NavigationDataClassName;//[Offset: 0x48, Size: 0x18]// 0x75cdbe3780

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]// 0x75d0a807e0
	int AreaID;//[Offset: 0x10, Size: 0x4]// 0x75d0a80850
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]// 0x75cdbe4300

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75d0a92000
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75d0a92080
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75d0a92100
	float FloorDist;//[Offset: 0x4, Size: 0x4]// 0x75d0a88f10
	float LineDist;//[Offset: 0x8, Size: 0x4]// 0x75d0a88f80
	HitResult HitResult;//[Offset: 0x10, Size: 0x88]// 0x75d0a92180

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75cdbe4380
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75cdbe4400
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75cdbe4480
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x75cdbe4500
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]// 0x75cdbe4580
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]// 0x75cdbe4600
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]// 0x75cdbe4680
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]// 0x75cdbe4700
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]// 0x75cdbe4780
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]// 0x75cdbe4800
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]// 0x75cdbe4880
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]// 0x75cdbe4900
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]// 0x75cdbe4980
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]// 0x75cdbe4a00
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]// 0x75cdbe4a80
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]// 0x75cdbe4b00
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]// 0x75cdbe4b80
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]// 0x75cdbe4c00
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]// 0x75cdbe4c80
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]// 0x75cdbe4d00
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]// 0x75cdbe4d80
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]// 0x75cdbe4e00
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]// 0x75cdbe4e80
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]// 0x75cdbe4f00
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]// 0x75cdbe4f80
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]// 0x75cdbe5000
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]// 0x75cdbe5080
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]// 0x75cdbe5100
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]// 0x75cdbe5180
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]// 0x75cdbe5200
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]// 0x75cdbe5280
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]// 0x75cdbe5300

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]// 0x7611e32f80
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]// 0x7611e32f00
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc]// 0x7611e32e80
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]// 0x7611e32e00
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xf9, Size: 0x1]// 0x7611e32c60

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]// 0x7611e32d80

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611e33900
	float BlendWeight;//[Offset: 0x4, Size: 0x4]// 0x7611e33890
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]// 0x7611e33810

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x6c0, Size: 0x4]// 0x75a85a3dc0
	float CapsuleRadius;//[Offset: 0x6c4, Size: 0x4]// 0x75a85a3e30
	float CapsuleHeight;//[Offset: 0x6c8, Size: 0x4]// 0x75a85a3ea0
	void SetCapsuleSize(float InRadius, float inHalfHeight, bool bUpdateOverlaps);// 0x6dc1b9c
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x6dc1ad8
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x6dc1a14
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x6dc1924
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x6dc183c
	float GetUnscaledCapsuleRadius();// 0x6dc1820
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x6dc17fc
	float GetUnscaledCapsuleHalfHeight();// 0x6dc17e0
	float GetShapeScale();// 0x6dc1780
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x6dc1640
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x6dc1508
	float GetScaledCapsuleRadius();// 0x6dc14a0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x6dc1430
	float GetScaledCapsuleHalfHeight();// 0x6dc13c8

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x6a4, Size: 0x4]// 0x75b4dfc900
	BodySetup* ShapeBodySetup;//[Offset: 0x6a8, Size: 0x8]// 0x75b4dfc980
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b0, Size: 0x1]// 0x75b4dfca00
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b0, Size: 0x1]// 0x75b4dfca80
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b0, Size: 0x1]// 0x75b4dfcb00
	class NavArea* AreaClass;//[Offset: 0x6b8, Size: 0x8]// 0x75b4dfcb80

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]// 0x7611e34a20
	Actor* MovementBaseActor;//[Offset: 0x8, Size: 0x8]// 0x7611e349a0
	FName BoneName;//[Offset: 0x10, Size: 0x8]// 0x7611e34930
	Vector_NetQuantize100 Location;//[Offset: 0x18, Size: 0xc]// 0x7611e348b0
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]// 0x7611e34830
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611e347b0
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]// 0x7611e34730
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]// 0x7611e346b0

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]// 0x7611e33680
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x160]// 0x7611e33600

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611e333e0
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]// 0x7611e33360
	float Position;//[Offset: 0x10, Size: 0x4]// 0x7611e332f0
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]// 0x7611e33270
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]// 0x7611e331f0
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]// 0x7611e33170
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]// 0x7611e33100
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x7611e33080
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x7611e33000
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x100]// 0x7611e32b40
	Vector_NetQuantize10 Acceleration;//[Offset: 0x148, Size: 0xc]// 0x7611e32ac0
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x154, Size: 0xc]// 0x7611e329a0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x510, Size: 0x4]// 0x7611efe0a0
	byte Ping;//[Offset: 0x514, Size: 0x1]// 0x7611efe020
	FString PlayerName;//[Offset: 0x518, Size: 0x10]// 0x7611efdfb0
	int PlayerID;//[Offset: 0x538, Size: 0x4]// 0x7611efdf40
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53c, Size: 0x1]// 0x7611efdec0
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53c, Size: 0x1]// 0x7611efde40
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53c, Size: 0x1]// 0x7611efddc0
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53c, Size: 0x1]// 0x7611efdd40
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53c, Size: 0x1]// 0x7611efdcc0
	int StartTime;//[Offset: 0x540, Size: 0x4]// 0x7611efdc50
	class LocalMessage* EngineMessageClass;//[Offset: 0x548, Size: 0x8]// 0x7611efdbd0
	FString SavedNetworkAddress;//[Offset: 0x558, Size: 0x10]// 0x7611efdb60
	UniqueNetIdRepl UniqueID;//[Offset: 0x568, Size: 0x18]// 0x7611efdae0
	int PingBucketSize;//[Offset: 0x588, Size: 0x4]// 0x7611efda70
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xffffff8a17adf2b0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xffffff8a17adf2b0
	void OnRep_UniqueId();// 0x6ee71d8
	void OnRep_Score();// 0x6ee71bc
	void OnRep_PlayerName();// 0x6ee71a0
	void OnRep_bIsInactive();// 0x6ee7184

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]// 0x75b4e32680
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]// 0x75b4e32700
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]// 0x75b4e32780
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]// 0x75b4eb7fb0
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]// 0x75b4eb8020
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]// 0x75b4eb8090
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]// 0x75b4eb8100

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x570, Size: 0x8]// 0x7611dbd030
	Pawn* AcknowledgedPawn;//[Offset: 0x580, Size: 0x8]// 0x7611dbcfb0
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x588, Size: 0x8]// 0x7611dbcf30
	HUD* MyHUD;//[Offset: 0x598, Size: 0x8]// 0x7611dbceb0
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x5a0, Size: 0x8]// 0x7611dbce30
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x5a8, Size: 0x8]// 0x7611dbcdb0
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]// 0x7611dbcd30
	float SmoothTargetViewRotationSpeed;//[Offset: 0x5b4, Size: 0x4]// 0x7611dbccc0
	Actor*[] HiddenActors;//[Offset: 0x5b8, Size: 0x10]// 0x7611dbcbc0
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x5c8, Size: 0x10]// 0x7611dbcac0
	float LastSpectatorStateSynchTime;//[Offset: 0x5dc, Size: 0x4]// 0x7611dbca50
	Vector LastSpectatorSyncLocation;//[Offset: 0x5e0, Size: 0xc]// 0x7611dbc9d0
	Rotator LastSpectatorSyncRotation;//[Offset: 0x5ec, Size: 0xc]// 0x7611dbc950
	int ClientCap;//[Offset: 0x5f8, Size: 0x4]// 0x7611dbc8e0
	CheatManager* CheatManager;//[Offset: 0x600, Size: 0x8]// 0x7611dbc860
	class CheatManager* CheatClass;//[Offset: 0x608, Size: 0x8]// 0x7611dbc7e0
	PlayerInput* PlayerInput;//[Offset: 0x610, Size: 0x8]// 0x7611dbc760
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x618, Size: 0x10]// 0x7611dbc540
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b8, Size: 0x1]// 0x7611dbc4c0
	byte NetPlayerIndex;//[Offset: 0x6b9, Size: 0x1]// 0x7611dbc440
	NetConnection* PendingSwapConnection;//[Offset: 0x6f8, Size: 0x8]// 0x7611dbc3c0
	NetConnection* NetConnection;//[Offset: 0x700, Size: 0x8]// 0x7611dbc340
	float InputYawScale;//[Offset: 0x714, Size: 0x4]// 0x7611dbc2d0
	float InputPitchScale;//[Offset: 0x718, Size: 0x4]// 0x7611dbc260
	float InputRollScale;//[Offset: 0x71c, Size: 0x4]// 0x7611dbc1f0
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x720, Size: 0x1]// 0x7611dbc170
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x720, Size: 0x1]// 0x7611dbc0f0
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x720, Size: 0x1]// 0x7611dbc070
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x720, Size: 0x1]// 0x7611dbbff0
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x720, Size: 0x1]// 0x7611dbbf70
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x720, Size: 0x1]// 0x7611dbbef0
	float ForceFeedbackScale;//[Offset: 0x724, Size: 0x4]// 0x7611dbbe80
	Key[] ClickEventKeys;//[Offset: 0x728, Size: 0x10]// 0x7611dbbd80
	byte DefaultMouseCursor;//[Offset: 0x738, Size: 0x1]// 0x7611dbbd00
	byte CurrentMouseCursor;//[Offset: 0x739, Size: 0x1]// 0x7611dbbc80
	byte DefaultClickTraceChannel;//[Offset: 0x73a, Size: 0x1]// 0x7611dbbc00
	byte CurrentClickTraceChannel;//[Offset: 0x73b, Size: 0x1]// 0x7611dbbb80
	float HitResultTraceDistance;//[Offset: 0x73c, Size: 0x4]// 0x7611dbbb10
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750, Size: 0x1]// 0x7611dbba90
	bool bActiveReplayViewer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x750, Size: 0x1]// 0x7611dbba10
	bool bEnableReplayRecord;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x750, Size: 0x1]// 0x7611dbb990
	InputComponent* InactiveStateInputComponent;//[Offset: 0x7d0, Size: 0x8]// 0x7611dbb910
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]// 0x7611dbb890
	TouchInterface* CurrentTouchInterface;//[Offset: 0x7f0, Size: 0x8]// 0x7611dbb810
	SpectatorPawn* SpectatorPawn;//[Offset: 0x840, Size: 0x8]// 0x7611dbb790
	Vector SpawnLocation;//[Offset: 0x848, Size: 0xc]// 0x7611dbb710
	bool bIsActorChannelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]// 0x7611dbb690
	bool bIsDemoViewController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 0x1]// 0x7611dbb610
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 0x1]// 0x7611dbb590
	uint16 SeamlessTravelCount;//[Offset: 0x85e, Size: 0x2]// 0x7611dbb520
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x860, Size: 0x2]// 0x7611dbb4b0
	bool bNeedResetCameraOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 0x1]// 0x7611dbb430
	LevelVisibilityInfo[] LevelVisibilityInfoList;//[Offset: 0x878, Size: 0x10]// 0x7611dbb330
	bool WasInputKeyJustReleased(Key Key);// 0x6ee2d08
	bool WasInputKeyJustPressed(Key Key);// 0x6ee2b9c
	void ToggleSpeaking(bool bInSpeaking);// 0x6ee2b10
	void SwitchLevel(FString URL);// 0x6ee2a84
	void StopHapticEffect(enum Hand);// 0x6ee2a08
	void StartFire(byte FireModeNum);// 0x6ee2984
	void SetVirtualJoystickVisibility(bool bVisible);// 0x6ee28f8
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x6ee277c
	void SetName(FString S);// 0x6ee26f0
	void SetMouseLocation(const int X, const int Y);// 0x6ee263c
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x6ee2584
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x6ee2494
	void SetControllerLightColor(Color Color);// 0x6ee241c
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6ee2270
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x6ee2174
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x6ee2060
	void ServerViewPrevPlayer();// 0x6ee2000
	void ServerViewNextPlayer();// 0x6ee1fa0
	void ServerVerifyViewTarget();// 0x6ee1f40
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x6ee1e4c
	void ServerUpdateLevelListVisibility(const FName[] PackageNames, bool bIsVisible);// 0x6ee1d4c
	void ServerUpdateLevelListPackageVisibility(const LevelVisibilityInfo[] PackageInfo);// 0x6ee1ca4
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x6ee1ba8
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x6ee1954
	void ServerToggleAILogging();// 0x6ee18f4
	void ServerShortTimeout();// 0x6ee1894
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x6ee17d0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x6ee16d0
	void ServerRestartPlayer();// 0x6ee1670
	void ServerPause();// 0x6ee1610
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x6ee1570
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x6ee131c
	void ServerCheckClientPossessionReliable();// 0x6ee12bc
	void ServerCheckClientPossession();// 0x6ee125c
	void ServerChangeName(FString S);// 0x6ee11a4
	void ServerCamera(FName NewMode);// 0x6ee10f4
	void ServerAcknowledgePossession(Pawn* P);// 0x6ee1044
	void SendToConsole(FString Command);// 0x6ee0fb8
	void RestartLevel();// 0x6ee0f9c
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x6ee0e74
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x6ee0d3c
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x6ee0acc
	void Pause();// 0x6ee0ab0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x6ee0a24
	void LocalTravel(FString URL);// 0x6ee0998
	bool IsInputKeyDown(Key Key);// 0x6ee082c
	void InitVirtualJoystickBySetting();// 0x6ee0810
	void GetViewportSize(out int SizeX, out int SizeY);// 0x6ee072c
	SpectatorPawn* GetSpectatorPawn();// 0x6ee0710
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x6ee0620
	Vector GetInputVectorKeyState(Key Key);// 0x6ee04b4
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6ee0344
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x6ee0260
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x6ee00c4
	float GetInputKeyTimeDown(Key Key);// 0x6edff5c
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6edfe3c
	float GetInputAnalogKeyState(Key Key);// 0x6edfcd4
	HUD* GetHUD();// 0x6edfca0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x6edfb08
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6edf998
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6edf828
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x6edf6cc
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6edf598
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6edf464
	Vector GetFocalLocation();// 0x6edf424
	void FOV(float NewFOV);// 0x6edf3a0
	void FadeOutVirtualJoystick(float FadeDuration);// 0x6edf324
	void FadeInVirtualJoystick(float FadeDuration);// 0x6edf2a8
	void EnableCheats();// 0x6edf28c
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x6edf11c
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x6edf024
	void ConsoleKey(Key Key);// 0x6edeec4
	void ClientWasKicked(const FText KickReason);// 0x6edede4
	void ClientVoiceHandshakeComplete();// 0x6ededc8
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x6edec2c
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x6edea9c
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x6ede948
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x6ede7fc
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x6ede6b8
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x6ede5fc
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x6ede534
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x6ede4b0
	void ClientStartOnlineSession();// 0x6ede494
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6ede410
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x6ede304
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x6ede278
	void ClientSetHUD(class HUD NewHUDClass);// 0x6ede1f4
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x6ede0f8
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x6eddf90
	void ClientSetCameraMode(FName NewCamMode);// 0x6eddf0c
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x6eddd88
	void ClientSetBlockOnAsyncLoading();// 0x6eddd6c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x6eddce0
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x6eddc5c
	void ClientRestart(Pawn* NewPawn);// 0x6eddbd8
	void ClientReset();// 0x6eddbbc
	void ClientRepObjRef(Object* Object);// 0x6eddb38
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x6edd9c8
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x6edd880
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x6edd76c
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x6edd630
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x6edd538
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x6edd3e8
	void ClientPlayCameraShakeWithWorldLocation(class CameraShake Shake, Vector WorldLocation, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6edd26c
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6edd134
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x6edcec0
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x6edcd30
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x6edcc28
	void ClientIgnoreMoveInput(bool bIgnore);// 0x6edcb9c
	void ClientIgnoreLookInput(bool bIgnore);// 0x6edcb10
	void ClientGotoState(FName NewState);// 0x6edca8c
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x6edc9c4
	void ClientForceGarbageCollection();// 0x6edc9a8
	void ClientFlushLevelStreaming();// 0x6edc994
	void ClientEndOnlineSession();// 0x6edc978
	void ClientEnableNetworkVoice(bool bEnable);// 0x6edc8ec
	void ClientCommitMapChange();// 0x6edc8d0
	void ClientClearCameraLensEffects();// 0x6edc8b4
	void ClientCapBandwidth(int Cap);// 0x6edc830
	void ClientCancelPendingMapChange();// 0x6edc814
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x6edc710
	void ClearAudioListenerOverride();// 0x6edc6fc
	void Camera(FName NewMode);// 0x6edc678
	void AddYawInput(float Val);// 0x6edc5f4
	void AddRollInput(float Val);// 0x6edc570
	void AddPitchInput(float Val);// 0x6edc4ec
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x6edc468

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]// 0x75a7b49200
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]// 0x75a7b840d0
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]// 0x75a7b84140
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]// 0x75a7b841b0

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]// 0x75bca47500

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x510, Size: 0x8]// 0x75a86d6980
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x75a86d6a00
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x518, Size: 0x1]// 0x75a86d6a80
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x518, Size: 0x1]// 0x75a86d6b00
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x518, Size: 0x1]// 0x75a86d6b80
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x518, Size: 0x1]// 0x75a86d6c00
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x518, Size: 0x1]// 0x75a86d6c80
	Actor*[] PostRenderedActors;//[Offset: 0x520, Size: 0x10]// 0x75a86d6d80
	FName[] DebugDisplay;//[Offset: 0x538, Size: 0x10]// 0x75a86d6e00
	FName[] ToggledDebugCategories;//[Offset: 0x548, Size: 0x10]// 0x75a86d6e80
	Canvas* Canvas;//[Offset: 0x558, Size: 0x8]// 0x75a86d6f00
	Canvas* DebugCanvas;//[Offset: 0x560, Size: 0x8]// 0x75a86d6f80
	DebugTextInfo[] DebugTextList;//[Offset: 0x568, Size: 0x10]// 0x75a86d7080
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x578, Size: 0x8]// 0x75a86d7100
	Actor* ShowDebugTargetActor;//[Offset: 0x580, Size: 0x8]// 0x75a86d7180
	void ShowHUD();// 0x6e1307c
	void ShowDebugToggleSubCategory(FName Category);// 0x6e13000
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x6e12f84
	void ShowDebug(FName DebugType);// 0x6e12f00
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x6e12e40
	void RemoveAllDebugStrings();// 0x6e12e2c
	void ReceiveHitBoxRelease(const FName BoxName);// 0xffffff8a17adf2b0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xffffff8a17adf2b0
	void ReceiveHitBoxClick(const FName BoxName);// 0xffffff8a17adf2b0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0xffffff8a17adf2b0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0xffffff8a17adf2b0
	Vector Project(Vector Location);// 0x6e12d98
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x6e12bf0
	PlayerController* GetOwningPlayerController();// 0x6e12bbc
	Pawn* GetOwningPawn();// 0x6e12b88
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x6e12980
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x6e12810
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6e1243c
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x6e12248
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x6e120e4
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x6e11e44
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x6e11c60
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6e1190c
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x6e11764
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x6e11600
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x6e1148c
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x6e11134

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]// 0x75a788ab70
	float OrgY;//[Offset: 0x2c, Size: 0x4]// 0x75a788abe0
	float ClipX;//[Offset: 0x30, Size: 0x4]// 0x75a788ac50
	float ClipY;//[Offset: 0x34, Size: 0x4]// 0x75a788acc0
	Color DrawColor;//[Offset: 0x38, Size: 0x4]// 0x75a7890480
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]// 0x75a7890500
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]// 0x75a7890580
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]// 0x75a7890600
	int SizeX;//[Offset: 0x40, Size: 0x4]// 0x75a788ad30
	int SizeY;//[Offset: 0x44, Size: 0x4]// 0x75a788ada0
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]// 0x75a7890680
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]// 0x75a7890700
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]// 0x75a7890780
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]// 0x75a7890800
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x6dbd598
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x6dbd4c4
	Vector K2_Project(Vector WorldLocation);// 0x6dbd430
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x6dbd314
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x6dbd0bc
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x6dbcda8
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x6dbcc44
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x6dbcb28
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x6dbc950
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x6dbc820
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x6dbc734
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x6dbc344
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x6dbc220

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]// 0x7611cd9520
	float Y;//[Offset: 0x4, Size: 0x4]// 0x7611cd94b0

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]// 0x75d0a8d800
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]// 0x75d0a8d880
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]// 0x75d0a8d900
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]// 0x75d0a8d980
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]// 0x75d0a8da00
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]// 0x75d0a8da80
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]// 0x75d0a8db00
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]// 0x75d0a8db80
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]// 0x75d0a8dc00

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]// 0x75d0a8fd80
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]// 0x75d0a8fe00
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]// 0x75d0a8fe80
	FString DebugText;//[Offset: 0x20, Size: 0x10]// 0x75d0a87d20
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]// 0x75d0a87d90
	float Duration;//[Offset: 0x34, Size: 0x4]// 0x75d0a87e00
	Color TextColor;//[Offset: 0x38, Size: 0x4]// 0x75d0a8ff00
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]// 0x75d0a8ff80
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]// 0x75d0a90000
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]// 0x75d0a90080
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]// 0x75d0a90100
	Font* Font;//[Offset: 0x50, Size: 0x8]// 0x75d0a90180
	float FontScale;//[Offset: 0x58, Size: 0x4]// 0x75d0a87e70

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x510, Size: 0x8]// 0x75a85c0200
	SceneComponent* TransformComponent;//[Offset: 0x518, Size: 0x8]// 0x75a85c0280
	float DefaultFOV;//[Offset: 0x528, Size: 0x4]// 0x75a85d9550
	float DefaultOrthoWidth;//[Offset: 0x530, Size: 0x4]// 0x75a85d95c0
	float DefaultAspectRatio;//[Offset: 0x538, Size: 0x4]// 0x75a85d9630
	CameraCacheEntry CameraCache;//[Offset: 0x580, Size: 0x5d0]// 0x75a85c0300
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xb50, Size: 0x5d0]// 0x75a85c0380
	TViewTarget ViewTarget;//[Offset: 0x1120, Size: 0x5e0]// 0x75a85c0400
	TViewTarget PendingViewTarget;//[Offset: 0x1700, Size: 0x5e0]// 0x75a85c0480
	CameraModifier*[] ModifierList;//[Offset: 0x1cf8, Size: 0x10]// 0x75a85c0580
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1d08, Size: 0x10]// 0x75a85c0680
	float FreeCamDistance;//[Offset: 0x1d18, Size: 0x4]// 0x75a85d96a0
	Vector FreeCamOffset;//[Offset: 0x1d1c, Size: 0xc]// 0x75a85c0700
	Vector ViewTargetOffset;//[Offset: 0x1d28, Size: 0xc]// 0x75a85c0780
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1d48, Size: 0x10]// 0x75a85c0880
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1d58, Size: 0x8]// 0x75a85c0900
	CameraAnimInst* AnimInstPool;//[Offset: 0x1d60, Size: 0x8]// 0x75a85c0980
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1da0, Size: 0x10]// 0x75a85c0a80
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1dc0, Size: 0x10]// 0x75a85c0b80
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1dd0, Size: 0x10]// 0x75a85c0c80
	CameraActor* AnimCameraActor;//[Offset: 0x1de0, Size: 0x8]// 0x75a85c0d00
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1de8, Size: 0x1]// 0x75a85c0d80
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1de8, Size: 0x1]// 0x75a85c0e00
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1de8, Size: 0x1]// 0x75a85c0e80
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1de9, Size: 0x1]// 0x75a85c0f00
	float ViewPitchMin;//[Offset: 0x1dec, Size: 0x4]// 0x75a85d9710
	float ViewPitchMax;//[Offset: 0x1df0, Size: 0x4]// 0x75a85d9780
	float ViewYawMin;//[Offset: 0x1df4, Size: 0x4]// 0x75a85d97f0
	float ViewYawMax;//[Offset: 0x1df8, Size: 0x4]// 0x75a85d9860
	float ViewRollMin;//[Offset: 0x1dfc, Size: 0x4]// 0x75a85d98d0
	float ViewRollMax;//[Offset: 0x1e00, Size: 0x4]// 0x75a85d9940
	Transform BaseCamAnimTrans;//[Offset: 0x1e10, Size: 0x30]// 0x75a85c0f80
	CameraActor* NotifyCameraActor;//[Offset: 0x1e40, Size: 0x8]// 0x75a85c1000
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x6ed9e68
	void StopCameraFade();// 0x6ed9e4c
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x6ed9d84
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x6ed9cbc
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x6ed9bf4
	void StopAllCameraShakes(bool bImmediately);// 0x6ed9b68
	void StopAllCameraAnims(bool bImmediate);// 0x6ed9adc
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x6ed9918
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x6ed9814
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x6ed977c
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x6ed96f8
	CameraShake* PlayCameraShakeWithWorldLocation(class CameraShake ShakeClass, Vector WorldLocation, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6ed956c
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6ed9424
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6ed9164
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x6ed8ff8
	void OnPhotographySessionStart();// 0x6ed8fdc
	void OnPhotographySessionEnd();// 0x6ed8fc0
	void OnPhotographyMultiPartCaptureStart();// 0x6ed8fa4
	void OnPhotographyMultiPartCaptureEnd();// 0x6ed8f88
	PlayerController* GetOwningPlayerController();// 0x6ed8f4c
	float GetFOVAngle();// 0x6ed8f10
	Rotator GetCameraRotation();// 0x6ed8ed8
	Vector GetCameraLocation();// 0x6ed8ea0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass, bool bIncludeSuper);// 0x6ed8dc8
	void ClearCameraLensEffects();// 0x6ed8dac
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xffffff8a17adf2b0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x6ed8d18
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6ed8c84

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 0x4]// 0x75d0a7dd70
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5c0]// 0x75cdbde280

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]// 0x7611eca200
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 0xc]// 0x7611eca180
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]// 0x7611eca100
	float FOV;//[Offset: 0x24, Size: 0x4]// 0x7611eca090
	float OrthoWidth;//[Offset: 0x28, Size: 0x4]// 0x7611eca020
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 0x4]// 0x7611ec9fb0
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 0x4]// 0x7611ec9f40
	float AspectRatio;//[Offset: 0x34, Size: 0x4]// 0x7611ec9ed0
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x7611ec9e50
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]// 0x7611ec9dd0
	byte ProjectionMode;//[Offset: 0x39, Size: 0x1]// 0x7611ec9cf0
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 0x4]// 0x7611ec9c80
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x570]// 0x7611ebf240
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5b0, Size: 0x8]// 0x7611ebf1c0

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x7611ec9c00
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x7611ec9b80
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x7611ec9b00
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x7611ec9a80
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]// 0x7611ec9a00
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]// 0x7611ec9980
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]// 0x7611ec9900
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]// 0x7611ec9880
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]// 0x7611ec9800
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]// 0x7611ec9780
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]// 0x7611ec9700
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]// 0x7611ec9680
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]// 0x7611ec9600
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]// 0x7611ec9580
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]// 0x7611ec9500
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]// 0x7611ec9480
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]// 0x7611ec9400
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]// 0x7611ec9380
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]// 0x7611ec9300
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]// 0x7611ec9280
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]// 0x7611ec9200
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]// 0x7611ec9180
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]// 0x7611ec9100
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]// 0x7611ec9080
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]// 0x7611ec9000
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]// 0x7611ec8f80
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]// 0x7611ec8f00
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]// 0x7611ec8e80
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]// 0x7611ec8e00
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]// 0x7611ec8d80
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]// 0x7611ec8d00
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]// 0x7611ec8c80
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]// 0x7611ec8c00
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]// 0x7611ec8b80
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]// 0x7611ec8b00
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]// 0x7611ec8a80
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]// 0x7611ec8a00
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]// 0x7611ec8980
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]// 0x7611ec8900
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]// 0x7611ec8880
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]// 0x7611ec8800
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]// 0x7611ec8780
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]// 0x7611ec8700
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]// 0x7611ec8680
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]// 0x7611ec8600
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]// 0x7611ec8580
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]// 0x7611ec8500
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]// 0x7611ec8480
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]// 0x7611ec8400
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]// 0x7611ec8380
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]// 0x7611ec8300
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]// 0x7611ec8280
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]// 0x7611ec8200
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]// 0x7611ec8180
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]// 0x7611ec8100
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]// 0x7611ec8080
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]// 0x7611ec8000
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]// 0x7611ec7f80
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]// 0x7611ec7f00
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]// 0x7611ec7e80
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]// 0x7611ec7e00
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]// 0x7611ec7d80
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]// 0x7611ec7d00
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]// 0x7611ec7c80
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]// 0x7611ec7c00
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]// 0x7611ec7b80
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]// 0x7611ec7b00
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]// 0x7611ec7a80
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]// 0x7611ec7a00
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]// 0x7611ec7980
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]// 0x7611ec7900
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]// 0x7611ec7880
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]// 0x7611ec7800
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]// 0x7611ec7780
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]// 0x7611ec7700
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]// 0x7611ec7680
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]// 0x7611ec7600
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]// 0x7611ec7580
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]// 0x7611ec7500
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]// 0x7611ec7480
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]// 0x7611ec7400
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]// 0x7611ec7380
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]// 0x7611ec7300
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]// 0x7611ec7280
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]// 0x7611ec7200
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]// 0x7611ec7180
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]// 0x7611ec7100
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]// 0x7611ec7080
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]// 0x7611ec7000
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]// 0x7611ec6f80
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]// 0x7611ec6f00
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]// 0x7611ec6e80
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]// 0x7611ec6e00
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]// 0x7611ec6d80
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]// 0x7611ec6d00
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]// 0x7611ec6c80
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]// 0x7611ec6c00
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]// 0x7611ec6b80
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]// 0x7611ec6b00
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]// 0x7611ec6a80
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]// 0x7611ec6a00
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]// 0x7611ec6980
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]// 0x7611ec6900
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]// 0x7611ec6880
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]// 0x7611ec6800
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]// 0x7611ec6780
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]// 0x7611ec6700
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]// 0x7611ec6680
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]// 0x7611ec6600
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]// 0x7611ec6580
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]// 0x7611ec6500
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]// 0x7611ec6480
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]// 0x7611ec6400
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]// 0x7611ec6380
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]// 0x7611ec6300
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]// 0x7611ec6280
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]// 0x7611ec6200
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]// 0x7611ec6180
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]// 0x7611ec6100
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]// 0x7611ec6080
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]// 0x7611ec6000
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]// 0x7611ec5f80
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]// 0x7611ec5f00
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]// 0x7611ec5e80
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]// 0x7611ec5e00
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]// 0x7611ec5d80
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]// 0x7611ec5d00
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]// 0x7611ec5c80
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x7611ec5c00
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]// 0x7611ec5b80
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]// 0x7611ec5b00
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]// 0x7611ec5a80
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]// 0x7611ec5a00
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]// 0x7611ec5980
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]// 0x7611ec5900
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]// 0x7611ec5880
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]// 0x7611ec5800
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]// 0x7611ec5780
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]// 0x7611ec5700
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]// 0x7611ec5680
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]// 0x7611ec5600
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]// 0x7611ec5580
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]// 0x7611ec5500
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]// 0x7611ec5480
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]// 0x7611ec5400
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]// 0x7611ec5380
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]// 0x7611ec5300
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]// 0x7611ec5280
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]// 0x7611ec5200
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]// 0x7611ec5180
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]// 0x7611ec5100
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]// 0x7611ec5080
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]// 0x7611ec5000
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]// 0x7611ec4f80
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]// 0x7611ec4f00
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]// 0x7611ec4e80
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]// 0x7611ec4e00
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]// 0x7611ec4d80
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]// 0x7611ec4d00
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]// 0x7611ec4c80
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]// 0x7611ec4c00
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]// 0x7611ec4b80
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]// 0x7611ec4b00
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]// 0x7611ec4a80
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]// 0x7611ec4a00
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]// 0x7611ec4980
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]// 0x7611ec4900
	float WhiteTemp;//[Offset: 0x18, Size: 0x4]// 0x7611ec4890
	float WhiteTint;//[Offset: 0x1c, Size: 0x4]// 0x7611ec4820
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10]// 0x7611ec47a0
	Vector4 ColorContrast;//[Offset: 0x30, Size: 0x10]// 0x7611ec4720
	Vector4 ColorGamma;//[Offset: 0x40, Size: 0x10]// 0x7611ec46a0
	Vector4 ColorGain;//[Offset: 0x50, Size: 0x10]// 0x7611ec4620
	Vector4 ColorOffset;//[Offset: 0x60, Size: 0x10]// 0x7611ec45a0
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 0x10]// 0x7611ec4520
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 0x10]// 0x7611ec44a0
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 0x10]// 0x7611ec4420
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 0x10]// 0x7611ec43a0
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 0x10]// 0x7611ec4320
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 0x4]// 0x7611ec42b0
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]// 0x7611ec4230
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]// 0x7611ec41b0
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]// 0x7611ec4130
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]// 0x7611ec40b0
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]// 0x7611ec4030
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]// 0x7611ec3fb0
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]// 0x7611ec3f30
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]// 0x7611ec3eb0
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]// 0x7611ec3e30
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]// 0x7611ec3db0
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]// 0x7611ec3d40
	float FilmSlope;//[Offset: 0x174, Size: 0x4]// 0x7611ec3cd0
	float FilmToe;//[Offset: 0x178, Size: 0x4]// 0x7611ec3c60
	float FilmShoulder;//[Offset: 0x17c, Size: 0x4]// 0x7611ec3bf0
	float FilmBlackClip;//[Offset: 0x180, Size: 0x4]// 0x7611ec3b80
	float FilmWhiteClip;//[Offset: 0x184, Size: 0x4]// 0x7611ec3b10
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 0x10]// 0x7611ec3a90
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 0x10]// 0x7611ec3a10
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 0x4]// 0x7611ec39a0
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 0x4]// 0x7611ec3930
	float FilmSaturation;//[Offset: 0x1b0, Size: 0x4]// 0x7611ec38c0
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 0x10]// 0x7611ec3840
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 0x10]// 0x7611ec37c0
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 0x10]// 0x7611ec3740
	float FilmContrast;//[Offset: 0x1e4, Size: 0x4]// 0x7611ec36d0
	float FilmToeAmount;//[Offset: 0x1e8, Size: 0x4]// 0x7611ec3660
	float FilmHealAmount;//[Offset: 0x1ec, Size: 0x4]// 0x7611ec35f0
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 0x4]// 0x7611ec3580
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 0x10]// 0x7611ec3500
	float SceneFringeIntensity;//[Offset: 0x204, Size: 0x4]// 0x7611ec3490
	byte BloomMethod;//[Offset: 0x208, Size: 0x1]// 0x7611ec33b0
	float BloomIntensity;//[Offset: 0x20c, Size: 0x4]// 0x7611ec3340
	float BloomThreshold;//[Offset: 0x210, Size: 0x4]// 0x7611ec32d0
	float BloomSizeScale;//[Offset: 0x214, Size: 0x4]// 0x7611ec3260
	float Bloom1Size;//[Offset: 0x218, Size: 0x4]// 0x7611ec31f0
	float Bloom2Size;//[Offset: 0x21c, Size: 0x4]// 0x7611ec3180
	float Bloom3Size;//[Offset: 0x220, Size: 0x4]// 0x7611ec3110
	float Bloom4Size;//[Offset: 0x224, Size: 0x4]// 0x7611ec30a0
	float Bloom5Size;//[Offset: 0x228, Size: 0x4]// 0x7611ec3030
	float Bloom6Size;//[Offset: 0x22c, Size: 0x4]// 0x7611ec2fc0
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 0x10]// 0x7611ec2f40
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 0x10]// 0x7611ec2ec0
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 0x10]// 0x7611ec2e40
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 0x10]// 0x7611ec2dc0
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 0x10]// 0x7611ec2d40
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 0x10]// 0x7611ec2cc0
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 0x8]// 0x7611ec2c40
	float BloomConvolutionSize;//[Offset: 0x298, Size: 0x4]// 0x7611ec2bd0
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x29c, Size: 0x8]// 0x7611ec2b50
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a4, Size: 0xc]// 0x7611ec2ad0
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b0, Size: 0x4]// 0x7611ec2a60
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b4, Size: 0x4]// 0x7611ec29f0
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b8, Size: 0x4]// 0x7611ec2980
	float BloomConvolutionBufferScale;//[Offset: 0x2bc, Size: 0x4]// 0x7611ec2910
	Texture* BloomDirtMask;//[Offset: 0x2c0, Size: 0x8]// 0x7611ec2890
	float BloomDirtMaskIntensity;//[Offset: 0x2c8, Size: 0x4]// 0x7611ec2820
	LinearColor BloomDirtMaskTint;//[Offset: 0x2cc, Size: 0x10]// 0x7611ec27a0
	Vector2D RadialBlurCenterPos;//[Offset: 0x2dc, Size: 0x8]// 0x7611ec2720
	float RadialBlurIntensity;//[Offset: 0x2e4, Size: 0x4]// 0x7611ec26b0
	float RadialBlurDistance;//[Offset: 0x2e8, Size: 0x4]// 0x7611ec2640
	LinearColor AmbientCubemapTint;//[Offset: 0x2ec, Size: 0x10]// 0x7611ec25c0
	float AmbientCubemapIntensity;//[Offset: 0x2fc, Size: 0x4]// 0x7611ec2550
	TextureCube* AmbientCubemap;//[Offset: 0x300, Size: 0x8]// 0x7611ec24d0
	byte AutoExposureMethod;//[Offset: 0x308, Size: 0x1]// 0x7611ec23f0
	float AutoExposureLowPercent;//[Offset: 0x30c, Size: 0x4]// 0x7611ec2380
	float AutoExposureHighPercent;//[Offset: 0x310, Size: 0x4]// 0x7611ec2310
	float AutoExposureMinBrightness;//[Offset: 0x314, Size: 0x4]// 0x7611ec22a0
	float AutoExposureMaxBrightness;//[Offset: 0x318, Size: 0x4]// 0x7611ec2230
	float AutoExposureSpeedUp;//[Offset: 0x31c, Size: 0x4]// 0x7611ec21c0
	float AutoExposureSpeedDown;//[Offset: 0x320, Size: 0x4]// 0x7611ec2150
	bool BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]// 0x7611ec20d0
	bool ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 0x1]// 0x7611ec2050
	Texture2D* BlindWatermarkingTexture;//[Offset: 0x328, Size: 0x8]// 0x7611ec1fd0
	bool bOverride_BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]// 0x7611ec1f50
	bool bOverride_ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]// 0x7611ec1ed0
	bool bOverride_BlindWatermarkingTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]// 0x7611ec1e50
	float AutoExposureBias;//[Offset: 0x334, Size: 0x4]// 0x7611ec1de0
	float HistogramLogMin;//[Offset: 0x338, Size: 0x4]// 0x7611ec1d70
	float HistogramLogMax;//[Offset: 0x33c, Size: 0x4]// 0x7611ec1d00
	float LensFlareIntensity;//[Offset: 0x340, Size: 0x4]// 0x7611ec1c90
	LinearColor LensFlareTint;//[Offset: 0x344, Size: 0x10]// 0x7611ec1c10
	float LensFlareBokehSize;//[Offset: 0x354, Size: 0x4]// 0x7611ec1ba0
	int LensFlareCount;//[Offset: 0x358, Size: 0x4]// 0x7611ec1b30
	float LensFlareThreshold;//[Offset: 0x35c, Size: 0x4]// 0x7611ec1ac0
	Texture* LensFlareBokehShape;//[Offset: 0x360, Size: 0x8]// 0x7611ec1a40
	LinearColor LensFlareTints;//[Offset: 0x368, Size: 0x10]// 0x7611ec19c0
	float VignetteIntensity;//[Offset: 0x3e8, Size: 0x4]// 0x7611ec1950
	float GrainJitter;//[Offset: 0x3ec, Size: 0x4]// 0x7611ec18e0
	float GrainIntensity;//[Offset: 0x3f0, Size: 0x4]// 0x7611ec1870
	float AmbientOcclusionIntensity;//[Offset: 0x3f4, Size: 0x4]// 0x7611ec1800
	float AmbientOcclusionStaticFraction;//[Offset: 0x3f8, Size: 0x4]// 0x7611ec1790
	float AmbientOcclusionRadius;//[Offset: 0x3fc, Size: 0x4]// 0x7611ec1720
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]// 0x7611ec16a0
	float AmbientOcclusionFadeDistance;//[Offset: 0x404, Size: 0x4]// 0x7611ec1630
	float AmbientOcclusionFadeRadius;//[Offset: 0x408, Size: 0x4]// 0x7611ec15c0
	float AmbientOcclusionDistance;//[Offset: 0x40c, Size: 0x4]// 0x7611ec1550
	float AmbientOcclusionPower;//[Offset: 0x410, Size: 0x4]// 0x7611ec14e0
	float AmbientOcclusionBias;//[Offset: 0x414, Size: 0x4]// 0x7611ec1470
	float AmbientOcclusionQuality;//[Offset: 0x418, Size: 0x4]// 0x7611ec1400
	float AmbientOcclusionMipBlend;//[Offset: 0x41c, Size: 0x4]// 0x7611ec1390
	float AmbientOcclusionMipScale;//[Offset: 0x420, Size: 0x4]// 0x7611ec1320
	float AmbientOcclusionMipThreshold;//[Offset: 0x424, Size: 0x4]// 0x7611ec12b0
	LinearColor SRTIndirectLightingColor;//[Offset: 0x428, Size: 0x10]// 0x7611ec1230
	float SRTIndirectLightingIntensity;//[Offset: 0x438, Size: 0x4]// 0x7611ec11c0
	float SRTMaxOcclusionDistance;//[Offset: 0x43c, Size: 0x4]// 0x7611ec1150
	float SRTOcclusionContrast;//[Offset: 0x440, Size: 0x4]// 0x7611ec10e0
	float SRTOcclusionExponent;//[Offset: 0x444, Size: 0x4]// 0x7611ec1070
	float SRTMinOcclusion;//[Offset: 0x448, Size: 0x4]// 0x7611ec1000
	float SRTSpecularOcclusionExponent;//[Offset: 0x44c, Size: 0x4]// 0x7611ec0f90
	float SRTSpecularMinOcclusion;//[Offset: 0x450, Size: 0x4]// 0x7611ec0f20
	LinearColor SRTOcclusionTint;//[Offset: 0x454, Size: 0x10]// 0x7611ec0ea0
	float SRTFilterSmoothness;//[Offset: 0x464, Size: 0x4]// 0x7611ec0e30
	LinearColor IndirectLightingColor;//[Offset: 0x468, Size: 0x10]// 0x7611ec0db0
	float IndirectLightingIntensity;//[Offset: 0x478, Size: 0x4]// 0x7611ec0d40
	float ColorGradingIntensity;//[Offset: 0x47c, Size: 0x4]// 0x7611ec0cd0
	Texture* ColorGradingLUT;//[Offset: 0x480, Size: 0x8]// 0x7611ec0c50
	byte DepthOfFieldMethod;//[Offset: 0x488, Size: 0x1]// 0x7611ec0b70
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x489, Size: 0x1]// 0x7611ec0af0
	float DepthOfFieldFstop;//[Offset: 0x48c, Size: 0x4]// 0x7611ec0a80
	float DepthOfFieldSensorWidth;//[Offset: 0x490, Size: 0x4]// 0x7611ec0a10
	float DepthOfFieldFocalDistance;//[Offset: 0x494, Size: 0x4]// 0x7611ec09a0
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x498, Size: 0x4]// 0x7611ec0930
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x49c, Size: 0x4]// 0x7611ec08c0
	float DepthOfFieldFocalRegion;//[Offset: 0x4a0, Size: 0x4]// 0x7611ec0850
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4a4, Size: 0x4]// 0x7611ec07e0
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4a8, Size: 0x4]// 0x7611ec0770
	float DepthOfFieldScale;//[Offset: 0x4ac, Size: 0x4]// 0x7611ec0700
	float DepthOfFieldMaxBokehSize;//[Offset: 0x4b0, Size: 0x4]// 0x7611ec0690
	float DepthOfFieldNearBlurSize;//[Offset: 0x4b4, Size: 0x4]// 0x7611ec0620
	float DepthOfFieldFarBlurSize;//[Offset: 0x4b8, Size: 0x4]// 0x7611ec05b0
	Texture* DepthOfFieldBokehShape;//[Offset: 0x4c0, Size: 0x8]// 0x7611ec0530
	float DepthOfFieldOcclusion;//[Offset: 0x4c8, Size: 0x4]// 0x7611ec04c0
	float DepthOfFieldColorThreshold;//[Offset: 0x4cc, Size: 0x4]// 0x7611ec0450
	float DepthOfFieldSizeThreshold;//[Offset: 0x4d0, Size: 0x4]// 0x7611ec03e0
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4d4, Size: 0x4]// 0x7611ec0370
	float DepthOfFieldVignetteSize;//[Offset: 0x4d8, Size: 0x4]// 0x7611ec0300
	float MotionBlurAmount;//[Offset: 0x4dc, Size: 0x4]// 0x7611ec0290
	float MotionBlurMax;//[Offset: 0x4e0, Size: 0x4]// 0x7611ec0220
	float MotionBlurPerObjectSize;//[Offset: 0x4e4, Size: 0x4]// 0x7611ec01b0
	float LPVIntensity;//[Offset: 0x4e8, Size: 0x4]// 0x7611ec0140
	float LPVVplInjectionBias;//[Offset: 0x4ec, Size: 0x4]// 0x7611ec00d0
	float LPVSize;//[Offset: 0x4f0, Size: 0x4]// 0x7611ec0060
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4f4, Size: 0x4]// 0x7611ebfff0
	float LPVSecondaryBounceIntensity;//[Offset: 0x4f8, Size: 0x4]// 0x7611ebff80
	float LPVGeometryVolumeBias;//[Offset: 0x4fc, Size: 0x4]// 0x7611ebff10
	float LPVEmissiveInjectionIntensity;//[Offset: 0x500, Size: 0x4]// 0x7611ebfea0
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x504, Size: 0x4]// 0x7611ebfe30
	float LPVDirectionalOcclusionRadius;//[Offset: 0x508, Size: 0x4]// 0x7611ebfdc0
	float LPVDiffuseOcclusionExponent;//[Offset: 0x50c, Size: 0x4]// 0x7611ebfd50
	float LPVSpecularOcclusionExponent;//[Offset: 0x510, Size: 0x4]// 0x7611ebfce0
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x514, Size: 0x4]// 0x7611ebfc70
	float LPVSpecularOcclusionIntensity;//[Offset: 0x518, Size: 0x4]// 0x7611ebfc00
	float ScreenSpaceReflectionIntensity;//[Offset: 0x51c, Size: 0x4]// 0x7611ebfb90
	float ScreenSpaceReflectionQuality;//[Offset: 0x520, Size: 0x4]// 0x7611ebfb20
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x524, Size: 0x4]// 0x7611ebfab0
	float LPVFadeRange;//[Offset: 0x528, Size: 0x4]// 0x7611ebfa40
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x52c, Size: 0x4]// 0x7611ebf9d0
	float ScreenPercentage;//[Offset: 0x530, Size: 0x4]// 0x7611ebf960
	WeightedBlendables WeightedBlendables;//[Offset: 0x538, Size: 0x10]// 0x7611ebf5b0
	float FxaaConsoleEdgeSharpness;//[Offset: 0x548, Size: 0x4]// 0x7611ebf540
	float FxaaConsoleEdgeThreshold;//[Offset: 0x54c, Size: 0x4]// 0x7611ebf4d0
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x550, Size: 0x4]// 0x7611ebf460
	Object*[] Blendables;//[Offset: 0x558, Size: 0x10]// 0x7611ebf360

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]// 0x7611ebf6d0

--------------------------------
Class: WeightedBlendable
	float weight;//[Offset: 0x0, Size: 0x4]// 0x7611ebf8f0
	Object* Object;//[Offset: 0x8, Size: 0x8]// 0x7611ebf870

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]// 0x75cdbde300
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5c0]// 0x75cdbde380
	PlayerState* PlayerState;//[Offset: 0x5d0, Size: 0x8]// 0x75cdbde400

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]// 0x75bdd3f000
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]// 0x75bdd3f080
	byte Priority;//[Offset: 0x29, Size: 0x1]// 0x75bdd3f100
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]// 0x75bdd3f180
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]// 0x75d0af0140
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]// 0x75d0af01b0
	float Alpha;//[Offset: 0x40, Size: 0x4]// 0x75d0af0220
	bool IsDisabled();// 0x6dba940
	Actor* GetViewTarget();// 0x6dba904
	void EnableModifier();// 0x6dba8e8
	void DisableModifier(bool bImmediate);// 0x6dba85c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xffffff8a17adf2b0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xffffff8a17adf2b0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x560, Size: 0x8]// 0x75b4d3b200
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x568, Size: 0x8]// 0x75b4d3b280
	PlayerCameraManager* BaseCamera;//[Offset: 0x570, Size: 0x8]// 0x75b4d3b300
	Transform RelativeTransform;//[Offset: 0x580, Size: 0x30]// 0x75b4d3b380
	float BaseFOV;//[Offset: 0x5b0, Size: 0x4]// 0x75b4d22260
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b4, Size: 0x1]// 0x75b4d3b400
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b4, Size: 0x1]// 0x75b4d3b480
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x5b8, Size: 0x10]// 0x75b4d3b580
	float DistFromCamera;//[Offset: 0x5c8, Size: 0x4]// 0x75b4d222d0

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x510, Size: 0x8]// 0x75b4d3b600
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x75b4d3b680
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x518, Size: 0x1]// 0x75b4d3b700
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x518, Size: 0x1]// 0x75b4d3b780
	delegate OnParticleSpawn;//[Offset: 0x520, Size: 0x10]// 0x75b4d3b800
	delegate OnParticleBurst;//[Offset: 0x530, Size: 0x10]// 0x75b4d3b880
	delegate OnParticleDeath;//[Offset: 0x540, Size: 0x10]// 0x75b4d3b900
	delegate OnParticleCollide;//[Offset: 0x550, Size: 0x10]// 0x75b4d3b980
	void ToggleActive();// 0x6de63dc
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6de631c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6de6298
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6de61e4
	void SetFloatParameter(FName ParameterName, float Param);// 0x6de612c
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6de6074
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x6de5fc0
	void OnRep_bCurrentlyActive();// 0x6de5fa4
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x6de5f20
	bool IsActive();// 0x6de5ee8
	void Deactivate();// 0x6de5ed4
	void Activate();// 0x6de5ec0

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1]// 0x75a829d780
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]// 0x75a82cb7a0
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]// 0x75a82cb810
	float WarmUpTime;//[Offset: 0x34, Size: 0x4]// 0x75a82cb880
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]// 0x75a82cb8f0
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]// 0x75a829d880
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]// 0x75a829d900
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]// 0x75a829d980
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]// 0x75a829da00
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 0x4]// 0x75a82cb960
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]// 0x75a829da80
	byte LODMethod;//[Offset: 0x69, Size: 0x1]// 0x75a829db00
	float[] LODDistances;//[Offset: 0x70, Size: 0x10]// 0x75a829db80
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]// 0x75a829dc00
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 0x10]// 0x75a829dd00
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]// 0x75a829dd80
	Box FixedRelativeBoundingBox;//[Offset: 0x9c, Size: 0x1c]// 0x75a829de00
	float SecondsBeforeInactive;//[Offset: 0xb8, Size: 0x4]// 0x75a82cba40
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]// 0x75a829de80
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]// 0x75a829df00
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]// 0x75a829df80
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1]// 0x75a829e000
	float Delay;//[Offset: 0xc0, Size: 0x4]// 0x75a82cbab0
	float DelayLow;//[Offset: 0xc4, Size: 0x4]// 0x75a82cbb20
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]// 0x75a829e080
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]// 0x75a829e100
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]// 0x75a829e180
	uint32 MinTimeBetweenTicks;//[Offset: 0xcc, Size: 0x4]// 0x75a82cbb90
	enum InsignificantReaction;//[Offset: 0xd0, Size: 0x1]// 0x75a829e280
	float InsignificanceDelay;//[Offset: 0xd4, Size: 0x4]// 0x75a82cbc00
	enum MaxSignificanceLevel;//[Offset: 0xd8, Size: 0x1]// 0x75a829e380
	Vector MacroUVPosition;//[Offset: 0xdc, Size: 0xc]// 0x75a829e400
	float MacroUVRadius;//[Offset: 0xe8, Size: 0x4]// 0x75a82cbc70
	byte OcclusionBoundsMethod;//[Offset: 0xec, Size: 0x1]// 0x75a829e480
	Box CustomOcclusionBounds;//[Offset: 0xf0, Size: 0x1c]// 0x75a829e500
	LODSoloTrack[] SoloTracking;//[Offset: 0x110, Size: 0x10]// 0x75a829e600
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x120, Size: 0x10]// 0x75a829e700
	bool ContainsEmitterType(class Object TypeData);// 0x6ec5a94

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]// 0x75a82cead0
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]// 0x75a82ceb40
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]// 0x75a82bb480
	ParticleLODLevel*[] LODLevels;//[Offset: 0x38, Size: 0x10]// 0x75a82bb580
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]// 0x75a82bb600
	int PeakActiveParticles;//[Offset: 0x4c, Size: 0x4]// 0x75a82cebb0
	int InitialAllocationCount;//[Offset: 0x50, Size: 0x4]// 0x75a82cec20
	float MediumDetailSpawnRateScale;//[Offset: 0x54, Size: 0x4]// 0x75a82cec90
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]// 0x75a82ced00
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x5c, Size: 0x4]// 0x75a82ced70
	byte DetailMode;//[Offset: 0x60, Size: 0x1]// 0x75a82bb680
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 0x1]// 0x75a82bb700
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 0x1]// 0x75a82bb780
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 0x1]// 0x75a82bb800
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 0x1]// 0x75a82bb880
	enum SignificanceLevel;//[Offset: 0x62, Size: 0x1]// 0x75a82bb980
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 0x1]// 0x75a82bba00

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]// 0x75a82ce980
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]// 0x75a82bab80
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]// 0x75a82bac00
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]// 0x75a82bad00
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]// 0x75a82bad80
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]// 0x75a82bae00
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]// 0x75a82bae80
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]// 0x75a82baf80
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]// 0x75a82bb080
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]// 0x75a82bb180
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]// 0x75a82bb280
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]// 0x75a82bb380
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]// 0x75a82bb400
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]// 0x75a82ce9f0
	int ActualPeakParticles;//[Offset: 0xb8, Size: 0x4]// 0x75a82cea60

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]// 0x75a82a2380
	Vector EmitterOrigin;//[Offset: 0x38, Size: 0xc]// 0x75a82a2400
	Rotator EmitterRotation;//[Offset: 0x44, Size: 0xc]// 0x75a82a2480
	Vector EmitterOrbitOrigin;//[Offset: 0x50, Size: 0xc]// 0x75a82a2500
	enum EmitterRotateAxis;//[Offset: 0x5c, Size: 0x1]// 0x75a82a2600
	float EmitterOrbitRadius;//[Offset: 0x60, Size: 0x4]// 0x75a82ccbc0
	float EmitterOrbitSpeed;//[Offset: 0x64, Size: 0x4]// 0x75a82ccc30
	float EmitterInitialDegree;//[Offset: 0x68, Size: 0x4]// 0x75a82ccca0
	float EmitterInitialRotation;//[Offset: 0x6c, Size: 0x4]// 0x75a82ccd10
	enum EmitterSelfRotateAxis;//[Offset: 0x70, Size: 0x1]// 0x75a82a2700
	float EmitterSelfRotationSpeed;//[Offset: 0x74, Size: 0x4]// 0x75a82ccd80
	byte ScreenAlignment;//[Offset: 0x90, Size: 0x1]// 0x75a82a2780
	float MinFacingCameraBlendDistance;//[Offset: 0x94, Size: 0x4]// 0x75a82ccdf0
	float MaxFacingCameraBlendDistance;//[Offset: 0x98, Size: 0x4]// 0x75a82cce60
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]// 0x75a82a2800
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]// 0x75a82a2880
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 0x1]// 0x75a82a2900
	byte SortMode;//[Offset: 0x9d, Size: 0x1]// 0x75a82a2980
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1]// 0x75a82a2a00
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 0x1]// 0x75a82a2a80
	float EmitterDuration;//[Offset: 0xa0, Size: 0x4]// 0x75a82cced0
	float EmitterDurationLow;//[Offset: 0xa4, Size: 0x4]// 0x75a82ccf40
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]// 0x75a82a2b00
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]// 0x75a82a2b80
	int EmitterLoops;//[Offset: 0xac, Size: 0x4]// 0x75a82ccfb0
	RawDistributionFloat SpawnRate;//[Offset: 0xb0, Size: 0x38]// 0x75a82a2c00
	byte ParticleBurstMethod;//[Offset: 0xe8, Size: 0x1]// 0x75a82a2c80
	ParticleBurst[] BurstList;//[Offset: 0xf0, Size: 0x10]// 0x75a82a2d80
	float EmitterDelay;//[Offset: 0x100, Size: 0x4]// 0x75a82cd020
	float EmitterDelayLow;//[Offset: 0x104, Size: 0x4]// 0x75a82cd090
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]// 0x75a82a2e00
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]// 0x75a82a2e80
	byte InterpolationMethod;//[Offset: 0x109, Size: 0x1]// 0x75a82a2f00
	int SubImages_Horizontal;//[Offset: 0x10c, Size: 0x4]// 0x75a82cd100
	int SubImages_Vertical;//[Offset: 0x110, Size: 0x4]// 0x75a82cd170
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1]// 0x75a82a2f80
	float RandomImageTime;//[Offset: 0x118, Size: 0x4]// 0x75a82cd1e0
	int RandomImageChanges;//[Offset: 0x11c, Size: 0x4]// 0x75a82cd250
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]// 0x75a82b3000
	Vector MacroUVPosition;//[Offset: 0x124, Size: 0xc]// 0x75a82b3080
	float MacroUVRadius;//[Offset: 0x130, Size: 0x4]// 0x75a82cd2c0
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]// 0x75a82b3100
	int MaxDrawCount;//[Offset: 0x138, Size: 0x4]// 0x75a82cd330
	enum UVFlippingMode;//[Offset: 0x13c, Size: 0x1]// 0x75a82b3200
	Texture2D* CutoutTexture;//[Offset: 0x140, Size: 0x8]// 0x75a82b3280
	byte BoundingMode;//[Offset: 0x148, Size: 0x1]// 0x75a82b3300
	byte OpacitySourceMode;//[Offset: 0x149, Size: 0x1]// 0x75a82b3380
	float AlphaThreshold;//[Offset: 0x14c, Size: 0x4]// 0x75a82cd3a0
	int CutoutSubImagesX;//[Offset: 0x150, Size: 0x4]// 0x75a82cd410
	int CutoutSubImagesY;//[Offset: 0x154, Size: 0x4]// 0x75a82cd480
	byte EmitterNormalsMode;//[Offset: 0x158, Size: 0x1]// 0x75a82b3400
	Vector NormalsSphereCenter;//[Offset: 0x15c, Size: 0xc]// 0x75a82b3480
	Vector NormalsCylinderDirection;//[Offset: 0x168, Size: 0xc]// 0x75a82b3500
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 0x1]// 0x75a82b3580
	FName[] NamedMaterialOverrides;//[Offset: 0x178, Size: 0x10]// 0x75a82b3600
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x188, Size: 0x10]// 0x75a82b3700
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1]// 0x75a82b3780

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]// 0x75a8425c80
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]// 0x75a8425d00
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]// 0x75a8425d80
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]// 0x75a8425e00
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]// 0x75a8425e80
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]// 0x75a8425f00
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]// 0x75a8425f80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]// 0x75a8426000
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]// 0x75a8426080
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]// 0x75a8426100
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]// 0x75a8426180
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]// 0x75a8426200
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]// 0x75a8426280

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]// 0x75d0a87af0
	float MaxValue;//[Offset: 0x2c, Size: 0x4]// 0x75d0a87b60
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8]// 0x75d0a8f580

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28]// 0x7611ce1930

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]// 0x75bca6e800
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]// 0x75bca6e880

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]// 0x7611ce1810
	byte EntryCount;//[Offset: 0x1, Size: 0x1]// 0x7611ce1790
	byte EntryStride;//[Offset: 0x2, Size: 0x1]// 0x7611ce1710
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]// 0x7611ce1690
	float TimeScale;//[Offset: 0x4, Size: 0x4]// 0x7611ce1620
	float TimeBias;//[Offset: 0x8, Size: 0x4]// 0x7611ce15b0
	float[] Values;//[Offset: 0x10, Size: 0x10]// 0x7611ce14c0
	byte LockFlag;//[Offset: 0x20, Size: 0x1]// 0x7611ce1440

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]// 0x75d0a7f430
	int CountLow;//[Offset: 0x4, Size: 0x4]// 0x75d0a7f4a0
	float Time;//[Offset: 0x8, Size: 0x4]// 0x75d0a7f510

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x38]// 0x75a82a1500
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x38]// 0x75a82a1580
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 0x1]// 0x75a82a1600
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10]// 0x75a82a1700
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 0x38]// 0x75a82a1780
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]// 0x75a82a1800

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]// 0x75a82a1880
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]// 0x75a82a1900

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]// 0x75a82b7400

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]// 0x75cdbe0e80
	int Frequency;//[Offset: 0x4, Size: 0x4]// 0x75d0a7f190
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]// 0x75d0a7f200
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]// 0x75cdbe0f00
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]// 0x75cdbe0f80
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]// 0x75cdbe1000
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]// 0x75cdbe1080
	FName CustomName;//[Offset: 0x10, Size: 0x8]// 0x75d0a7f270
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]// 0x75cdbe1180

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]// 0x75a82b3b00
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x50]// 0x75a82b3b80
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 0x4]// 0x75a82b3c00
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 0x50]// 0x75a82b3c80
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4]// 0x75a82b3d00
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x50]// 0x75a82b3d80
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 0x4]// 0x75a82b3e00

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]// 0x75a82b3e80

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]// 0x75d0a87a10
	float MaxValue;//[Offset: 0x2c, Size: 0x4]// 0x75d0a87a80
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc]// 0x75d0a8f400
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc]// 0x75d0a8f480
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8]// 0x75d0a8f500

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]// 0x75bca6e580
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]// 0x75bca6e600
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]// 0x75bca6e680

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75cdbe0c80
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75cdbe0d00
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75cdbe0d80

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]// 0x75a8425c00
	FName EventName;//[Offset: 0x30, Size: 0x8]// 0x75a83fcd50

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x6b8, Size: 0x8]// 0x75b4ddf180
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x6c0, Size: 0x10]// 0x75b4ddf280
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x6d0, Size: 0x10]// 0x75b4ddf380
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6e0, Size: 0x1]// 0x75b4ddf400
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e1, Size: 0x1]// 0x75b4ddf480
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e1, Size: 0x1]// 0x75b4ddf500
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e1, Size: 0x1]// 0x75b4ddf580
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6e1, Size: 0x1]// 0x75b4ddf600
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e2, Size: 0x1]// 0x75b4ddf680
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e2, Size: 0x1]// 0x75b4ddf700
	byte LODMethod;//[Offset: 0x6e5, Size: 0x1]// 0x75b4ddf780
	enum RequiredSignificance;//[Offset: 0x6e6, Size: 0x1]// 0x75b4ddf880
	bool bShouldUseTagGetSkeletalMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]// 0x75b4ddf900
	FName SkeletalMeshTagName;//[Offset: 0x6f0, Size: 0x8]// 0x75b4e07680
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6f8, Size: 0x10]// 0x75b4ddfa00
	delegate OnParticleSpawn;//[Offset: 0x708, Size: 0x10]// 0x75b4ddfa80
	delegate OnParticleBurst;//[Offset: 0x718, Size: 0x10]// 0x75b4ddfb00
	delegate OnParticleDeath;//[Offset: 0x728, Size: 0x10]// 0x75b4ddfb80
	delegate OnParticleCollide;//[Offset: 0x738, Size: 0x10]// 0x75b4ddfc00
	Vector OldPosition;//[Offset: 0x748, Size: 0xc]// 0x75b4ddfc80
	Vector PartSysVelocity;//[Offset: 0x754, Size: 0xc]// 0x75b4ddfd00
	float WarmUpTime;//[Offset: 0x760, Size: 0x4]// 0x75b4e076f0
	float WarmupTickRate;//[Offset: 0x764, Size: 0x4]// 0x75b4e07760
	float SecondsBeforeInactive;//[Offset: 0x76c, Size: 0x4]// 0x75b4e077d0
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x774, Size: 0x4]// 0x75b4e07840
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x798, Size: 0x10]// 0x75b4ddfe00
	float CustomTimeDilation;//[Offset: 0x7b0, Size: 0x4]// 0x75b4e078b0
	SceneComponent* AutoAttachParent;//[Offset: 0x808, Size: 0x8]// 0x75b4ddfe80
	FName AutoAttachSocketName;//[Offset: 0x810, Size: 0x8]// 0x75b4e07920
	enum AutoAttachLocationRule;//[Offset: 0x818, Size: 0x1]// 0x75b4ddff80
	enum AutoAttachRotationRule;//[Offset: 0x819, Size: 0x1]// 0x75b4de0080
	enum AutoAttachScaleRule;//[Offset: 0x81a, Size: 0x1]// 0x75b4de0180
	delegate OnSystemFinished;//[Offset: 0x848, Size: 0x10]// 0x75b4de0200
	bool bForceNoAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]// 0x75b4de0280
	void SetWarmUp(float WarmUpTime, float WarmUpRate);// 0x6ecab38
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6ecaa78
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6eca94c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6eca8d0
	void SetSocketName(FName InSocketName);// 0x6eca854
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6eca7a0
	void SetFloatParameter(FName ParameterName, float Param);// 0x6eca6e8
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x6eca620
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6eca568
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x6eca464
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x6eca368
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x6eca264
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x6eca160
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x6eca064
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x6ec9f60
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x6ec9e98
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x6ec9d88
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6ec9c00
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x6ec9b4c
	void RewindEmitterInstances();// 0x6ec9b30
	void ManuallyTickComponent(float DeltaTime);// 0x6ec9ab4
	int GetNumActiveParticles();// 0x6ec9a80
	MaterialInterface* GetNamedMaterial(FName InName);// 0x6ec99ec
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x6ec98cc
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x6ec97b0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x6ec9690
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x6ec9570
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x6ec9454
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x6ec9334
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x6ec924c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x6ec90c4
	void EndTrails();// 0x6ec90b0
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x6ec8fe4
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6ec8eb8

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x75d0a7e2b0
	byte ParamType;//[Offset: 0x8, Size: 0x1]// 0x75cdbde800
	float Scalar;//[Offset: 0xc, Size: 0x4]// 0x75d0a7e320
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]// 0x75d0a7e390
	Vector Vector;//[Offset: 0x14, Size: 0xc]// 0x75cdbde880
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]// 0x75cdbde900
	Color Color;//[Offset: 0x2c, Size: 0x4]// 0x75cdbde980
	Actor* Actor;//[Offset: 0x30, Size: 0x8]// 0x75cdbdea00
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]// 0x75cdbdea80

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]// 0x75a82cb730

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]// 0x75bca49380
	int ActiveTab;//[Offset: 0x38, Size: 0x4]// 0x75bca41510

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]// 0x75d0a83950
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]// 0x75cdbeca80
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]// 0x75d0a83cd0
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]// 0x75d0a83d40
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]// 0x75d0a83db0
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]// 0x75d0a83e20

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]// 0x75cdbec900
	Color CurveColor;//[Offset: 0x8, Size: 0x4]// 0x75cdbec980
	FString CurveName;//[Offset: 0x10, Size: 0x10]// 0x75d0a839c0
	int bHideCurve;//[Offset: 0x20, Size: 0x4]// 0x75d0a83a30
	int bColorCurve;//[Offset: 0x24, Size: 0x4]// 0x75d0a83aa0
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]// 0x75d0a83b10
	int bClamp;//[Offset: 0x2c, Size: 0x4]// 0x75d0a83b80
	float ClampLow;//[Offset: 0x30, Size: 0x4]// 0x75d0a83bf0
	float ClampHigh;//[Offset: 0x34, Size: 0x4]// 0x75d0a83c60

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]// 0x75cdbdeb80

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x75d0a7e400
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]// 0x75cdbdec00

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 0x10]// 0x75a7892880
	float SplitScreenShakeScale;//[Offset: 0x58, Size: 0x4]// 0x75a788b270
	<class CameraShake,CacheCameraShakeData> CacheShakeInsMap;//[Offset: 0x60, Size: 0x50]// 0x75a78b7540

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]// 0x75a8158000
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]// 0x75a81369a0
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]// 0x75a8136a10
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]// 0x75a8136a80
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]// 0x75a8158080
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]// 0x75a8158100
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]// 0x75a8158180
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]// 0x75a8136af0
	float AnimScale;//[Offset: 0x90, Size: 0x4]// 0x75a8136b60
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]// 0x75a8136bd0
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]// 0x75a8136c40
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]// 0x75a8136cb0
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]// 0x75a8158200
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]// 0x75a8158280
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]// 0x75a8158300
	float shakeScale;//[Offset: 0x148, Size: 0x4]// 0x75a8136d20
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]// 0x75a8136d90
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]// 0x75a8158380
	CurveFloat* AttenuationFloatCurve;//[Offset: 0x158, Size: 0x8]// 0x75a8158400
	void ReceiveStopShake(bool bImmediately);// 0xffffff8a17adf2b0
	void ReceivePlayShake(float Scale);// 0xffffff8a17adf2b0
	bool ReceiveIsFinished();// 0x6dbbb20
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0xffffff8a17adf2b0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]// 0x75d0a92480
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]// 0x75d0a92500
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]// 0x75d0a92580

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]// 0x75d100d3f0
	float Frequency;//[Offset: 0x4, Size: 0x4]// 0x75d100d460
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]// 0x75d0a92700

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]// 0x75d0a92600
	FOscillator Y;//[Offset: 0xc, Size: 0xc]// 0x75d0a92680
	FOscillator Z;//[Offset: 0x18, Size: 0xc]// 0x75d0a92780

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]// 0x75a7892d00
	float AnimLength;//[Offset: 0x30, Size: 0x4]// 0x75a788b4a0
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]// 0x75a7892d80
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]// 0x75a7892e00
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]// 0x75a7892e80
	float BaseFOV;//[Offset: 0x54, Size: 0x4]// 0x75a788b510
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x570]// 0x75a7892f00
	float BasePostProcessBlendWeight;//[Offset: 0x5d0, Size: 0x4]// 0x75a788b580

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]// 0x75bca48c80
	FName GroupName;//[Offset: 0x40, Size: 0x8]// 0x75bca41200
	Color GroupColor;//[Offset: 0x48, Size: 0x4]// 0x75bca48d00
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]// 0x75bca48d80
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]// 0x75bca48e00
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]// 0x75bca48e80
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]// 0x75bca48f00
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]// 0x75bca48f80

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]// 0x75bca48400
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]// 0x75bca48480
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]// 0x75bca48500
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]// 0x75bca41120
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]// 0x75bca48580
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]// 0x75bca48600
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]// 0x75bca48680
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]// 0x75bca48700
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]// 0x75bca48780
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]// 0x75bca48800
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]// 0x75bca48880
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]// 0x75bca48900

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]// 0x75a7892a00
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]// 0x75a7892a80
	float PlayRate;//[Offset: 0x50, Size: 0x4]// 0x75a788b2e0
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]// 0x75a7892b00
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]// 0x75a7892b80
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]// 0x75a7892c00
	void Stop(bool bImmediate);// 0x6db8e5c
	void SetScale(float NewDuration);// 0x6db8de0
	void SetDuration(float NewDuration);// 0x6db8d64
	void SetCurrentTime(float NewTime);// 0x6db8ce8

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]// 0x75bca48980
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]// 0x75bca48a00
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]// 0x75bca48b00

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]// 0x75bca46480
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]// 0x75bca46500
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]// 0x75bca46580
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]// 0x75bca40630
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]// 0x75bca406a0
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]// 0x75bca40710
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]// 0x75bca46600
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]// 0x75bca46680
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]// 0x75bca46700
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]// 0x75bca46780
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]// 0x75bca46800
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]// 0x75bca46880
	byte RotMode;//[Offset: 0xc1, Size: 0x1]// 0x75bca46900

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]// 0x7611cdc900
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611cdc880
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]// 0x7611cdc810

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]// 0x7611cdc700
	Vector OutVal;//[Offset: 0x4, Size: 0xc]// 0x7611cdc680
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]// 0x7611cdc600
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]// 0x7611cdc580
	byte InterpMode;//[Offset: 0x28, Size: 0x1]// 0x7611cdc500

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]// 0x75cdbec100

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]// 0x75d0a83100
	float Time;//[Offset: 0x8, Size: 0x4]// 0x75d0a83170

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]// 0x75bca47000
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]// 0x75bca47080

--------------------------------
Class: CacheCameraShakeData
	CameraShake*[] InsList;//[Offset: 0x0, Size: 0x10]// 0x75d0a92880

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x510, Size: 0x1]// 0x75b4c88680
	CameraComponent* CameraComponent;//[Offset: 0x518, Size: 0x8]// 0x75b4c88700
	SceneComponent* SceneComponent;//[Offset: 0x520, Size: 0x8]// 0x75b4c88780
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1]// 0x75b4c88800
	float AspectRatio;//[Offset: 0x534, Size: 0x4]// 0x75d0b2bdf0
	float FOVAngle;//[Offset: 0x538, Size: 0x4]// 0x75d0b2be60
	float PostProcessBlendWeight;//[Offset: 0x53c, Size: 0x4]// 0x75d0b2bed0
	PostProcessSettings PostProcessSettings;//[Offset: 0x540, Size: 0x570]// 0x75b4c88880
	int GetAutoActivatePlayerIndex();// 0x6db8660

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2b8, Size: 0x4]// 0x75b4e0e760
	float OrthoWidth;//[Offset: 0x2bc, Size: 0x4]// 0x75b4e0e7d0
	float OrthoNearClipPlane;//[Offset: 0x2c0, Size: 0x4]// 0x75b4e0e840
	float OrthoFarClipPlane;//[Offset: 0x2c4, Size: 0x4]// 0x75b4e0e8b0
	float AspectRatio;//[Offset: 0x2c8, Size: 0x4]// 0x75b4e0e920
	Vector2D WidthHeight;//[Offset: 0x2cc, Size: 0x8]// 0x75b4dfbb80
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]// 0x75b4dfbc00
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]// 0x75b4dfbc80
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 0x1]// 0x75b4dfbd00
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 0x1]// 0x75b4dfbd80
	byte ProjectionMode;//[Offset: 0x2d5, Size: 0x1]// 0x75b4dfbe00
	float PostProcessBlendWeight;//[Offset: 0x2d8, Size: 0x4]// 0x75b4e0e990
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 0x570]// 0x75b4dfbe80
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a8, Size: 0x1]// 0x75b4dfbf00
	void SetWidthHeight(Vector2D InWidthHeight);// 0x6db9d24
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x6db9c94
	void SetProjectionMode(byte InProjectionMode);// 0x6db9c1c
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x6db9ba4
	void SetOrthoWidth(float InOrthoWidth);// 0x6db9b2c
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x6db9ab4
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x6db9a3c
	void SetFieldOfView(float InFieldOfView);// 0x6db99b8
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x6db992c
	void SetAspectRatio(float InAspectRatio);// 0x6db98b4
	void SetActive(bool bNewActive, bool bReset);// 0x6db97dc
	void RemoveBlendable(interface classNone InBlendableObject);// 0x6db9744
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x6db95dc
	void ClearAdditiveOffset();// 0x6db95c8
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x6db954c
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6db9474
	void AddAdditiveOffset(out const Transform Transform, float FOV);// 0x6db9388

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]// 0x75b4c2ea00
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]// 0x75b4c2eb00
	void Walk();// 0x6dca668
	void ViewSelf();// 0x6dca64c
	void ViewPlayer(FString S);// 0x6dca5c0
	void ViewClass(class Actor DesiredClass);// 0x6dca53c
	void ViewActor(FName actorName);// 0x6dca4b8
	void ToggleDebugCamera();// 0x6dca49c
	void ToggleAILogging();// 0x6dca480
	void TestCollisionDistance();// 0x6dca464
	void Teleport();// 0x6dca448
	void Summon(FString ClassName);// 0x6dca3bc
	void StreamLevelOut(FName PackageName);// 0x6dca338
	void StreamLevelIn(FName PackageName);// 0x6dca2b4
	void Slomo(float NewTimeDilation);// 0x6dca230
	void SetWorldOrigin();// 0x6dca21c
	void SetNavDrawDistance(float DrawDistance);// 0x6dca1a0
	void SetMouseSensitivityToDefault();// 0x6dca18c
	void ServerToggleAILogging();// 0x6dca12c
	void ReceiveInitCheatManager();// 0xffffff8a17adf2b0
	void ReceiveEndPlay();// 0xffffff8a17adf2b0
	void RebuildNavigation();// 0x6dca110
	void PlayersOnly();// 0x6dca0f4
	void OnlyLoadLevel(FName PackageName);// 0x6dca070
	void LogLoc();// 0x6dca054
	void InvertMouse();// 0x6dca040
	void God();// 0x6dca024
	void Ghost();// 0x6dca008
	void FreezeFrame(float Delay);// 0x6dc9f84
	void Fly();// 0x6dc9f68
	void FlushLog();// 0x6dc9f4c
	void EnableDebugCamera();// 0x6dc9f30
	void DumpVoiceMutingState();// 0x6dc9f14
	void DumpPartyState();// 0x6dc9ef8
	void DumpOnlineSessionState();// 0x6dc9edc
	void DumpChatState();// 0x6dc9ec0
	void DisableDebugCamera();// 0x6dc9ea4
	void DestroyTarget();// 0x6dc9e88
	void DestroyPawns(class Pawn aClass);// 0x6dc9e04
	void DestroyAllPawnsExceptTarget();// 0x6dc9de8
	void DestroyAll(class Actor aClass);// 0x6dc9d64
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x6dc9ca8
	void DebugCapsuleSweepPawn();// 0x6dc9c8c
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x6dc9c00
	void DebugCapsuleSweepClear();// 0x6dc9be4
	void DebugCapsuleSweepChannel(byte Channel);// 0x6dc9b60
	void DebugCapsuleSweepCapture();// 0x6dc9b44
	void DebugCapsuleSweep();// 0x6dc9b28
	void DamageTarget(float DamageAmount);// 0x6dc9aa4
	void CheatScript(FString ScriptName);// 0x6dc99cc
	void ChangeSize(float F);// 0x6dc9948
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x6dc97c4
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x6dc961c
	void BugIt(FString ScreenShotDescription);// 0x6dc9590

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x889, Size: 0x1]// 0x75bca72f00
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x889, Size: 0x1]// 0x75bca72f80
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x890, Size: 0x8]// 0x75bca73000
	float SpeedScale;//[Offset: 0x8b8, Size: 0x4]// 0x75a78890c0
	float InitialMaxSpeed;//[Offset: 0x8bc, Size: 0x4]// 0x75a7889130
	float InitialAccel;//[Offset: 0x8c0, Size: 0x4]// 0x75a78891a0
	float InitialDecel;//[Offset: 0x8c4, Size: 0x4]// 0x75a7889210
	void ToggleDisplay();// 0x6dd5e5c
	void ShowDebugSelectedInfo();// 0x6dd5e40
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x6dd5dc4
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xffffff8a17adf2b0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0xffffff8a17adf2b0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xffffff8a17adf2b0
	Actor* GetSelectedActor();// 0x6dd5d90

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x6a4, Size: 0x4]// 0x75bca6d900
	float FrustumAngle;//[Offset: 0x6a8, Size: 0x4]// 0x75a7885e00
	float FrustumAspectRatio;//[Offset: 0x6ac, Size: 0x4]// 0x75a7885e70
	float FrustumStartDist;//[Offset: 0x6b0, Size: 0x4]// 0x75a7885ee0
	float FrustumEndDist;//[Offset: 0x6b4, Size: 0x4]// 0x75a7885f50
	Texture* Texture;//[Offset: 0x6b8, Size: 0x8]// 0x75bca6d980

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]// 0x75a8297800
	InputTouchCacheData[] InputTouchCacheDataList;//[Offset: 0x1a8, Size: 0x10]// 0x75a8297900
	KeyBind[] DebugExecBindings;//[Offset: 0x1c8, Size: 0x10]// 0x75a8297a00
	FName[] InvertedAxis;//[Offset: 0x208, Size: 0x10]// 0x75a8297a80
	void SetMouseSensitivity(const float Sensitivity);// 0x6ee6898
	void SetBind(FName BindName, FString Command);// 0x6ee67d4
	void InvertAxisKey(const Key AxisKey);// 0x6ee667c
	void InvertAxis(const FName AxisName);// 0x6ee6600
	void ClearSmoothing();// 0x6ee65ec

--------------------------------
Class: InputTouchCacheData
	int ITCDHandle;//[Offset: 0x0, Size: 0x4]// 0x75d0a7db40
	int ITCDType;//[Offset: 0x4, Size: 0x4]// 0x75d0a7dbb0
	Vector2D ITCDTouchLocation;//[Offset: 0x8, Size: 0x8]// 0x75cdbde200
	int ITCDTouchpadIndex;//[Offset: 0x10, Size: 0x4]// 0x75d0a7dc20
	float ITCDforce;//[Offset: 0x14, Size: 0x4]// 0x75d0a7dc90
	float ITCDTimeStamp;//[Offset: 0x18, Size: 0x4]// 0x75d0a7dd00

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]// 0x75c9982900
	FString Command;//[Offset: 0x18, Size: 0x10]// 0x75d0a7d7c0
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]// 0x75c9982980
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]// 0x75c9982a00
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]// 0x75c9982a80
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]// 0x75c9982b00
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]// 0x75c9982b80
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]// 0x75c9982c00
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]// 0x75c9982c80
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]// 0x75c9982d00
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]// 0x75c9982d80

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]// 0x7611ce4c80

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]// 0x7611dbc6e0

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]// 0x75bca6a180
	float Duration;//[Offset: 0x38, Size: 0x4]// 0x75a78837f0

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75cdbedc80
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75cdbedd00
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75cdbedd80
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x75cdbede00
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x78]// 0x75cdbede80

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x70]// 0x75d0ae7a00
	CurveFloat* ExternalCurve;//[Offset: 0x70, Size: 0x8]// 0x75d0ae7a80

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]// 0x75a7b48a80
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]// 0x75a7b48b00
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]// 0x75a7b48b80
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]// 0x75a7b48c00
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]// 0x75a7b48d00
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]// 0x75a7b48e00
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]// 0x75a7b48e80
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]// 0x75a7b48f00
	int MaxPacket;//[Offset: 0xa8, Size: 0x4]// 0x75a7b83c70
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]// 0x75a7b48f80
	UniqueNetIdRepl PlayerID;//[Offset: 0x160, Size: 0x18]// 0x75a7b49000
	double LastReceiveTime;//[Offset: 0x1e0, Size: 0x8]// 0x75a7b83ce0
	float NoPacketTimeOut;//[Offset: 0x7b8, Size: 0x4]// 0x75a7b83d50
	float NoAckTimeOut;//[Offset: 0x7bc, Size: 0x4]// 0x75a7b83dc0
	int PacketsLateFramesArrayCount;//[Offset: 0x7c0, Size: 0x4]// 0x75a7b83e30
	int PacketsArriveFramesArrayCount;//[Offset: 0x7c4, Size: 0x4]// 0x75a7b83ea0
	Channel*[] ChannelsToTick;//[Offset: 0x666c8, Size: 0x10]// 0x75a7b49100
	bool bOpenClientClampDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66704, Size: 0x1]// 0x75a7b49180
	float ClientClampDeltaTimeMin;//[Offset: 0x66708, Size: 0x4]// 0x75a7b83f10
	float ClientClampDeltaTimeMax;//[Offset: 0x6670c, Size: 0x4]// 0x75a7b83f80
	int SizeofDSPacketRecord;//[Offset: 0x66790, Size: 0x4]// 0x75a7b83ff0
	int SizeofClientPacketRecord;//[Offset: 0x66794, Size: 0x4]// 0x75a7b84060

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x667d0, Size: 0x8]// 0x75a788f280

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]// 0x75b4d81390
	int MaxDownloadSize;//[Offset: 0x40, Size: 0x4]// 0x75b4d81400
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]// 0x75a8039a00
	int NetServerMaxTickRate;//[Offset: 0x48, Size: 0x4]// 0x75b4d81470
	int MaxInternetClientRate;//[Offset: 0x4c, Size: 0x4]// 0x75b4d814e0
	int MaxClientRate;//[Offset: 0x50, Size: 0x4]// 0x75b4d81550
	float ServerTravelPause;//[Offset: 0x54, Size: 0x4]// 0x75b4d815c0
	float SpawnPrioritySeconds;//[Offset: 0x58, Size: 0x4]// 0x75b4d81630
	float RelevantTimeout;//[Offset: 0x5c, Size: 0x4]// 0x75b4d816a0
	float KeepAliveTime;//[Offset: 0x60, Size: 0x4]// 0x75b4d81710
	float InitialConnectTimeout;//[Offset: 0x64, Size: 0x4]// 0x75b4d81780
	int IgnoreNetReadyReplicateActorCount;//[Offset: 0x68, Size: 0x4]// 0x75b4d817f0
	float ConnectionTimeout;//[Offset: 0x6c, Size: 0x4]// 0x75b4d81860
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x70, Size: 0x4]// 0x75b4d818d0
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]// 0x75a8039a80
	NetConnection* ServerConnection;//[Offset: 0x78, Size: 0x8]// 0x75a8039b00
	NetConnection*[] ClientConnections;//[Offset: 0x80, Size: 0x10]// 0x75a8039c00
	World* World;//[Offset: 0xa8, Size: 0x8]// 0x75a8039c80
	class Object* NetConnectionClass;//[Offset: 0xd0, Size: 0x8]// 0x75a8039d00
	Property* RoleProperty;//[Offset: 0xd8, Size: 0x8]// 0x75a8039d80
	Property* RemoteRoleProperty;//[Offset: 0xe0, Size: 0x8]// 0x75a8039e00
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8]// 0x75b4d81940
	float Time;//[Offset: 0x138, Size: 0x4]// 0x75b4d819b0
	bool bOpenClientClampDriverDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]// 0x75a8039e80
	float ClientClampDriverDeltaTimeMin;//[Offset: 0x140, Size: 0x4]// 0x75b4d81a20
	float ClientClampDriverDeltaTimeMax;//[Offset: 0x144, Size: 0x4]// 0x75b4d81a90

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]// 0x75a78cfb80

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x6e18c20
	bool WasControllerKeyJustPressed(Key Key);// 0x6e18ab4
	bool IsControllerKeyDown(Key Key);// 0x6e18948
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6e187d8
	Vector GetControllerVectorKeyState(Key Key);// 0x6e1866c
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x6e18588
	float GetControllerKeyTimeDown(Key Key);// 0x6e18420
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6e18300
	float GetControllerAnalogKeyState(Key Key);// 0x6e18198

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]// 0x75a8276b80
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]// 0x75a8260900
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]// 0x75a8260970
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]// 0x75a82609e0
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]// 0x75a8260a50
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]// 0x75a8260ac0
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]// 0x75a8276c00
	float StartupDelay;//[Offset: 0x50, Size: 0x4]// 0x75a8260b30

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]// 0x75c9978580
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]// 0x75c9978600
	SlateBrush Brush1;//[Offset: 0x10, Size: 0x78]// 0x75c9978680
	SlateBrush Brush2;//[Offset: 0x88, Size: 0x78]// 0x75c9978700
	Vector2D Center;//[Offset: 0x100, Size: 0x8]// 0x75c9978780
	Vector2D VisualSize;//[Offset: 0x108, Size: 0x8]// 0x75c9978800
	Vector2D ThumbSize;//[Offset: 0x110, Size: 0x8]// 0x75c9978880
	Vector2D InteractionSize;//[Offset: 0x118, Size: 0x8]// 0x75c9978900
	Vector2D InputScale;//[Offset: 0x120, Size: 0x8]// 0x75c9978980
	Key MainInputKey;//[Offset: 0x128, Size: 0x18]// 0x75c9978a00
	Key AltInputKey;//[Offset: 0x140, Size: 0x18]// 0x75c9978a80

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]// 0x7611dea7c0
	Margin Margin;//[Offset: 0x10, Size: 0x10]// 0x7611dea4e0
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]// 0x7611dea460
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]// 0x7611dea3e0
	FName ResourceName;//[Offset: 0x50, Size: 0x8]// 0x7611dea370
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]// 0x7611dea2f0
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]// 0x7611dea210
	byte Tiling;//[Offset: 0x6d, Size: 0x1]// 0x7611dea130
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]// 0x7611dea050
	byte ImageType;//[Offset: 0x6f, Size: 0x1]// 0x7611de9f70
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]// 0x7611de9ef0
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]// 0x7611de9e70

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]// 0x7611dea750
	float Top;//[Offset: 0x4, Size: 0x4]// 0x7611dea6e0
	float Right;//[Offset: 0x8, Size: 0x4]// 0x7611dea670
	float Bottom;//[Offset: 0xc, Size: 0x4]// 0x7611dea600

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]// 0x7611d644c0
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]// 0x7611d643e0

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]// 0x7611cdaef0
	Vector2D Max;//[Offset: 0x8, Size: 0x8]// 0x7611cdae70
	byte bIsValid;//[Offset: 0x10, Size: 0x1]// 0x7611cdadf0

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x598, Size: 0x4]// 0x75c98b2970
	float BaseLookUpRate;//[Offset: 0x59c, Size: 0x4]// 0x75c98b29e0
	PawnMovementComponent* MovementComponent;//[Offset: 0x5a0, Size: 0x8]// 0x75c98c5d80
	SphereComponent* CollisionComponent;//[Offset: 0x5a8, Size: 0x8]// 0x75c98c5e00
	StaticMeshComponent* MeshComponent;//[Offset: 0x5b0, Size: 0x8]// 0x75c98c5e80
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 0x1]// 0x75c98c5f00
	void TurnAtRate(float Rate);// 0x6dd8b30
	void MoveUp_World(float Val);// 0x6dd8aac
	void MoveRight(float Val);// 0x6dd8a28
	void MoveForward(float Val);// 0x6dd89a4
	void LookUpAtRate(float Rate);// 0x6dd8928

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x6c0, Size: 0x4]// 0x75b4e070d0
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x6f21238
	float GetUnscaledSphereRadius();// 0x6f2121c
	float GetShapeScale();// 0x6f211bc
	float GetScaledSphereRadius();// 0x6f21154

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x6cc, Size: 0x4]// 0x75d0b2fe40
	int PreviousLODLevel;//[Offset: 0x6d0, Size: 0x4]// 0x75d0b2feb0
	int MinLOD;//[Offset: 0x6d4, Size: 0x4]// 0x75d0b2ff20
	int MaxLOD;//[Offset: 0x6d8, Size: 0x4]// 0x75d0b2ff90
	StaticMesh* StaticMesh;//[Offset: 0x6e0, Size: 0x8]// 0x75b4c8cd80
	Vector TightBoundsOrigin;//[Offset: 0x6e8, Size: 0xc]// 0x75b4c8ce00
	Vector TightBoundsBoxExtent;//[Offset: 0x6f4, Size: 0xc]// 0x75b4c8ce80
	float TightBoundsSphereRadius;//[Offset: 0x700, Size: 0x4]// 0x75d0b30000
	bool bEnableSimpleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]// 0x75b4c8cf00
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x705, Size: 0x1]// 0x75b4c8cf80
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x705, Size: 0x1]// 0x75b4c8d000
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x705, Size: 0x1]// 0x75b4c8d080
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x705, Size: 0x1]// 0x75b4c8d100
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x705, Size: 0x1]// 0x75b4c8d180
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x705, Size: 0x1]// 0x75b4c8d200
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x705, Size: 0x1]// 0x75b4c8d280
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x705, Size: 0x1]// 0x75b4c8d300
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x706, Size: 0x1]// 0x75b4c8d380
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x706, Size: 0x1]// 0x75b4c8d400
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x706, Size: 0x1]// 0x75b4c8d480
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x706, Size: 0x1]// 0x75b4c8d500
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x706, Size: 0x1]// 0x75b4c8d580
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x706, Size: 0x1]// 0x75b4c8d600
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x706, Size: 0x1]// 0x75b4c8d680
	int OverriddenLightMapRes;//[Offset: 0x708, Size: 0x4]// 0x75d0b30070
	float StreamingDistanceMultiplier;//[Offset: 0x70c, Size: 0x4]// 0x75d0b300e0
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x710, Size: 0x10]// 0x75b4c8d780
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x720, Size: 0x10]// 0x75b4c8d880
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 0x1]// 0x75b4c8d900
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x738, Size: 0x50]// 0x75b4c9b580
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x788, Size: 0x18]// 0x75b4c8da00
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x7a0, Size: 0x14]// 0x75b4c8da80
	Actor*[] AffectPointLightBPActors;//[Offset: 0x7b8, Size: 0x10]// 0x75b4c8db80
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x7c8, Size: 0x10]// 0x75b4c8dc80
	byte[] LODSectionHiddenFlags;//[Offset: 0x7d8, Size: 0x10]// 0x75b4c8dd80
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x6f2f9a0
	void SetForcedLodModel(int NewForcedLodModel);// 0x6f2f924
	int SetDynamicInstancingParameter(int MaterialIndex, FString Name, out const Vector4 Value);// 0x6f2f7fc
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x6f2f780
	void SetDirty();// 0x6f2f76c
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x6f2f6f0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x6f2f604
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x6f2f524
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x6f2f42c
	void DisableMeshClipPlane(int PlaneIndex);// 0x6f2f3a8
	void DisableMeshClipArc();// 0x6f2f38c
	void CheckSwitchSimpleMaterial();// 0x6f2f378

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 0x10]// 0x75c997a780

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]// 0x75c997a580
	PackedNormal Normal;//[Offset: 0xc, Size: 0x4]// 0x75c997a600
	Color Color;//[Offset: 0x10, Size: 0x4]// 0x75c997a680

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 0x1]// 0x7611cd9fb0
	byte Y;//[Offset: 0x1, Size: 0x1]// 0x7611cd9f30
	byte Z;//[Offset: 0x2, Size: 0x1]// 0x7611cd9eb0
	byte W;//[Offset: 0x3, Size: 0x1]// 0x7611cd9db0

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]// 0x760d287620
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]// 0x760d287690
	float TexelFactor;//[Offset: 0x8, Size: 0x4]// 0x760d287700

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75d0a8be80
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75d0a8bf00
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75d0a8bf80
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x75d0a8c000
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]// 0x75d0a85c50
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]// 0x75d0a85cc0
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]// 0x75d0a85d30
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]// 0x75d0a85da0
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]// 0x75d0a85e10

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 0x4]// 0x75d0a85a20
	float LightmapBoost;//[Offset: 0x4, Size: 0x4]// 0x75d0a85a90
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 0x4]// 0x75d0a85b00
	float SunIntensity;//[Offset: 0xc, Size: 0x4]// 0x75d0a85b70
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 0x4]// 0x75d0a85be0

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 0x10]// 0x75c997a500

--------------------------------
Class: LevelVisibilityInfo
	bool Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611db8fb0
	FName PackageName;//[Offset: 0x8, Size: 0x8]// 0x7611db8f40

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x138, Size: 0x10]// 0x76120f9a80
	delegate ColorAndOpacityDelegate;//[Offset: 0x148, Size: 0x10]// 0x76120f9a00
	SlateColor ForegroundColor;//[Offset: 0x158, Size: 0x28]// 0x76120f9980
	delegate ForegroundColorDelegate;//[Offset: 0x180, Size: 0x10]// 0x76120f9900
	Margin Padding;//[Offset: 0x190, Size: 0x10]// 0x76120f9880
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10]// 0x76120f9780
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b0, Size: 0x10]// 0x76120f9680
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c0, Size: 0x10]// 0x76120f93f0
	WidgetTree* WidgetTree;//[Offset: 0x1d0, Size: 0x8]// 0x76120f9370
	bool bOptimiseAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]// 0x76120f92f0
	int Priority;//[Offset: 0x1dc, Size: 0x4]// 0x76120f9280
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e0, Size: 0x1]// 0x76120f9200
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e0, Size: 0x1]// 0x76120f9180
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e0, Size: 0x1]// 0x76120f9100
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e0, Size: 0x1]// 0x76120f9080
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e0, Size: 0x1]// 0x76120f9000
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1e0, Size: 0x1]// 0x76120f8f80
	InputComponent* InputComponent;//[Offset: 0x1e8, Size: 0x8]// 0x76120f8f00
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1f0, Size: 0x10]// 0x76120f8af0
	void UnregisterInputComponent();// 0x60ba614
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x60ba53c
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x60ba464
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x60ba3e8
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x60ba36c
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffff8a17adf2b0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x60ba2ac
	void StopListeningForAllInputActions();// 0x60ba298
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x60ba21c
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x60ba160
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x60ba0a8
	void SetPadding(Margin InPadding);// 0x60ba02c
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x60b9fb0
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x60b9f34
	void SetOffsetsInViewport(Margin Margin);// 0x60b9eb8
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x60b9e00
	void SetInputActionPriority(int NewPriority);// 0x60b9d84
	void SetInputActionBlocking(bool bShouldBlock);// 0x60b9d00
	void SetForegroundColor(SlateColor InForegroundColor);// 0x60b9b94
	void SetDesiredSizeInViewport(Vector2D Size);// 0x60b9b1c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x60b9aa0
	void SetAnchorsInViewport(Anchors Anchors);// 0x60b9a24
	void SetAlignmentInViewport(Vector2D Alignment);// 0x60b99ac
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x60b9930
	void RemoveFromViewport();// 0x60b991c
	void RegisterInputComponent();// 0x60b9908
	void PreConstruct(bool IsDesignTime);// 0xffffff8a17adf2b0
	void PlaySound(SoundBase* SoundToPlay);// 0x60b988c
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x60b96e8
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x60b957c
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x60b94f0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8a17adf2b0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8a17adf2b0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xffffff8a17adf2b0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xffffff8a17adf2b0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xffffff8a17adf2b0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8a17adf2b0
	void OnPaint(out PaintContext Context);// 0xffffff8a17adf2b0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	void OnMouseCaptureLost();// 0xffffff8a17adf2b0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xffffff8a17adf2b0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0xffffff8a17adf2b0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8a17adf2b0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xffffff8a17adf2b0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0xffffff8a17adf2b0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xffffff8a17adf2b0
	void OnFocusLost(FocusEvent InFocusEvent);// 0xffffff8a17adf2b0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8a17adf2b0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8a17adf2b0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8a17adf2b0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8a17adf2b0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xffffff8a17adf2b0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xffffff8a17adf2b0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x60b946c
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x60b93e8
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0xffffff8a17adf2b0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xffffff8a17adf2b0
	static UserWidget* NewWidgetObjectBP(Object* Outer, class Object UserWidgetClass);// 0x60b9334
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate CallBack);// 0x60b91d0
	void JumpAnimation(WidgetAnimation* InAnimation, float JumpAtTime);// 0x60b9118
	bool IsPlayingAnimation();// 0x60b90f4
	bool IsListeningForInputAction(FName ActionName);// 0x60b9064
	bool IsInViewport();// 0x60b902c
	bool IsInteractable();// 0xffffff8a17adf2b0
	bool IsAnyAnimationPlaying();// 0x60b8ff4
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x60b8f64
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x60b8ed4
	Widget* GetWidgetFromName(out const FName Name);// 0x60b8e38
	Widget* GetVariableWidgetFromName(out const FName Name);// 0x60b8d9c
	void GetTypedChildrenOfWidget(Widget* Parent, FString Type, out Widget*[] Children);// 0x60b8c20
	Pawn* GetOwningPlayerPawn();// 0x60b8bec
	PlayerController* GetOwningPlayer();// 0x60b8bb0
	LocalPlayer* GetOwningLocalPlayer();// 0x60b8b7c
	bool GetIsVisible();// 0x60b8b44
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x60b8ab8
	Anchors GetAnchorsInViewport();// 0x60b8a80
	Vector2D GetAlignmentInViewport();// 0x60b8a4c
	void Destruct();// 0xffffff8a17adf2b0
	void Construct();// 0xffffff8a17adf2b0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x60b8974
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x60b889c
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x60b874c
	void AddToViewport(int ZOrder);// 0x60b86d0
	bool AddToPlayerScreen(int ZOrder);// 0x60b8640

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]// 0x76120133f0
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]// 0x7612013370
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]// 0x7612013300
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]// 0x7612013280
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]// 0x7612013200
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]// 0x7612013180
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]// 0x7612013100
	bool IgnorePixelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]// 0x7612013080
	delegate IgnorePixelSnappingDelegate;//[Offset: 0x98, Size: 0x10]// 0x7612013000
	WidgetTransform RenderTransform;//[Offset: 0xa8, Size: 0x1c]// 0x7612012f80
	Vector2D RenderTransformPivot;//[Offset: 0xc4, Size: 0x8]// 0x7612012f00
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]// 0x7612012e80
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1]// 0x7612012e00
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc, Size: 0x1]// 0x7612012d80
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc, Size: 0x1]// 0x7612012d00
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcc, Size: 0x1]// 0x7612012c80
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xcc, Size: 0x1]// 0x7612012c00
	byte UsedLayerPolicy;//[Offset: 0xcd, Size: 0x1]// 0x7612012b80
	byte PreservedLayerNum;//[Offset: 0xce, Size: 0x1]// 0x7612012b00
	byte FixedLayerPolicy;//[Offset: 0xcf, Size: 0x1]// 0x7612012a80
	byte FixedLayerNum;//[Offset: 0xd0, Size: 0x1]// 0x7612012a00
	bool IngoreRectMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd1, Size: 0x1]// 0x7612012980
	byte Cursor;//[Offset: 0xd2, Size: 0x1]// 0x7612012900
	enum Clipping;//[Offset: 0xd3, Size: 0x1]// 0x7612012800
	enum Visibility;//[Offset: 0xd4, Size: 0x1]// 0x7612012700
	float RenderOpacity;//[Offset: 0xd8, Size: 0x4]// 0x7612012690
	WidgetNavigation* Navigation;//[Offset: 0xe0, Size: 0x8]// 0x7612012610
	bool bCatchVisibilityChangedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]// 0x7612012590
	PropertyBinding*[] NativeBindings;//[Offset: 0x118, Size: 0x10]// 0x7612012490
	void SubAdvancedCollapsedCount(byte Num);// 0x60c012c
	void SetWriteSceneZBuffer(bool bInWriteSceneZBuffer);// 0x60c00a8
	void SetVisibility(enum InVisibility);// 0x60c0024
	void SetUserFocus(PlayerController* PlayerController);// 0x60bffa8
	void SetToolTipText(out const FText InToolTipText);// 0x60bfec0
	void SetToolTip(Widget* Widget);// 0x60bfe44
	void SetRenderTranslation(Vector2D Translation);// 0x60bfdcc
	void SetRenderTransformPivot(Vector2D Pivot);// 0x60bfd54
	void SetRenderTransform(WidgetTransform InTransform);// 0x60bfca8
	void SetRenderShear(Vector2D Shear);// 0x60bfc30
	void SetRenderScale(Vector2D Scale);// 0x60bfbb8
	void SetRenderOpacity(float InOpacity);// 0x60bfb3c
	void SetRenderAngle(float angle);// 0x60bfac0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x60bf9cc
	void SetKeyboardFocus();// 0x60bf9b8
	void SetIsEnabled(bool bInIsEnabled);// 0x60bf92c
	void SetIgnorePixelSnapping(bool Ignore);// 0x60bf8a8
	void SetCursor(byte InCursor);// 0x60bf82c
	void SetClipping(enum InClipping);// 0x60bf7b0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x60bf6f8
	void SetAdvancedCollapsed(bool IsAdvancedCollapsed);// 0x60bf674
	void ResetCursor();// 0x60bf660
	void RemoveFromParent();// 0x60bf644
	EventReply OnReply__DelegateSignature();// 0xffffff8a17adf2b0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xffffff8a17adf2b0
	bool IsVisible();// 0x60bf60c
	bool IsHovered();// 0x60bf5d4
	void InvalidateLayoutAndVolatility();// 0x60bf5c0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x60bf530
	bool HasUserFocus(PlayerController* PlayerController);// 0x60bf4a0
	bool HasMouseCapture();// 0x60bf468
	bool HasKeyboardFocus();// 0x60bf430
	bool HasFocusedDescendants();// 0x60bf3f8
	bool HasAnyUserFocus();// 0x60bf3c0
	Widget* GetWidget__DelegateSignature();// 0xffffff8a17adf2b0
	enum GetVisibility();// 0x60bf38c
	FText GetText__DelegateSignature();// 0xffffff8a17adf2b0
	enum GetSlateVisibility__DelegateSignature();// 0xffffff8a17adf2b0
	SlateColor GetSlateColor__DelegateSignature();// 0xffffff8a17adf2b0
	SlateBrush GetSlateBrush__DelegateSignature();// 0xffffff8a17adf2b0
	float GetRenderOpacity();// 0x60bf358
	PanelWidget* GetParent();// 0x60bf324
	PlayerController* GetOwningPlayer();// 0x60bf2e8
	byte GetMouseCursor__DelegateSignature();// 0xffffff8a17adf2b0
	LinearColor GetLinearColor__DelegateSignature();// 0xffffff8a17adf2b0
	bool GetIsEnabled();// 0x60bf2b0
	int GetInt32__DelegateSignature();// 0xffffff8a17adf2b0
	float GetFloat__DelegateSignature();// 0xffffff8a17adf2b0
	Vector2D GetDesiredSize();// 0x60bf27c
	enum GetClipping();// 0x60bf248
	enum GetCheckBoxState__DelegateSignature();// 0xffffff8a17adf2b0
	Geometry GetCachedGeometry();// 0x60bf210
	Geometry GetCachedAllottedGeometry();// 0x60bf1d8
	bool GetBool__DelegateSignature();// 0xffffff8a17adf2b0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xffffff8a17adf2b0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xffffff8a17adf2b0
	void ForceVolatile(bool bForce);// 0x60bf154
	void ForceLayoutPrepass();// 0x60bf140
	void AddAdvancedCollapsedCount(byte Num);// 0x60bf0c4

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]// 0x75b4ddde00
	Widget* Content;//[Offset: 0x30, Size: 0x8]// 0x75b4ddde80

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x130, Size: 0x10]// 0x761201f8c0
	bool RemoveChildAt(int Index);// 0x60a4b58
	bool RemoveChild(Widget* Content);// 0x60a4ac8
	bool HasChild(Widget* Content);// 0x60a4a38
	bool HasAnyChildren();// 0x60a4a00
	int GetChildrenCount();// 0x60a49cc
	int GetChildIndex(Widget* Content);// 0x60a4940
	Widget* GetChildAt(int Index);// 0x60a48b4
	void ClearChildren();// 0x60a48a0
	PanelSlot* AddChild(Widget* Content);// 0x60a4814

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x370, Size: 0x8]// 0x75a791c100
	void SetUserTag(FName InUserTag);// 0x60b1fb4
	FName GetUserTag();// 0x60b1f98

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x2e0, Size: 0x10]// 0x75a791a680
	delegate OnAnimationFinished;//[Offset: 0x2f0, Size: 0x10]// 0x75a791a700
	MovieScene* MovieScene;//[Offset: 0x300, Size: 0x8]// 0x75a791a780
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x308, Size: 0x10]// 0x75a791a880
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x60c1674
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x60c159c
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x60c1520
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x60c14a4
	float GetStartTime();// 0x60c1470
	float GetEndTime();// 0x60c143c
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x60c1364
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x60c128c

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x50, Size: 0x220]// 0x75a794d280
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x270, Size: 0x2]// 0x75a794d300
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x278, Size: 0x50]// 0x75a795bb00
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]// 0x75a794d480

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]// 0x75a796e900

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]// 0x75a796e380
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]// 0x75a796e480
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]// 0x75a796e580
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10]// 0x75a796e680
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8]// 0x75a796e700
	FloatRange SelectionRange;//[Offset: 0x98, Size: 0x10]// 0x75a796e780
	FloatRange PlaybackRange;//[Offset: 0xa8, Size: 0x10]// 0x75a796e800
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]// 0x75a796e880
	float FixedFrameInterval;//[Offset: 0xbc, Size: 0x4]// 0x75a799f3b0
	float InTime;//[Offset: 0xc0, Size: 0x4]// 0x75a799f420
	float OutTime;//[Offset: 0xc4, Size: 0x4]// 0x75a799f490
	float StartTime;//[Offset: 0xc8, Size: 0x4]// 0x75a799f500
	float EndTime;//[Offset: 0xcc, Size: 0x4]// 0x75a799f570

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 0x10]// 0x75d106b480
	FString Name;//[Offset: 0x10, Size: 0x10]// 0x760d1ff700
	Object* ObjectTemplate;//[Offset: 0x20, Size: 0x8]// 0x75d106b500
	Guid[] ChildPossessables;//[Offset: 0x28, Size: 0x10]// 0x75d106b600
	enum Ownership;//[Offset: 0x38, Size: 0x1]// 0x75d106b700

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 0x10]// 0x75d106c080
	FString Name;//[Offset: 0x10, Size: 0x10]// 0x760d1fff50
	class Object* PossessedObjectClass;//[Offset: 0x20, Size: 0x8]// 0x75d106c100
	Guid ParentGuid;//[Offset: 0x28, Size: 0x10]// 0x75d106c180

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]// 0x760d1f0380
	FString BindingName;//[Offset: 0x10, Size: 0x10]// 0x760d200730
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]// 0x760d1f0480

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]// 0x75a794d980
	int EvaluationRunSide;//[Offset: 0x54, Size: 0x4]// 0x75a799f110

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75d106b200
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75d106b280
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75d106b300
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x75d106b380
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]// 0x75d106b400

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]// 0x7611cde8a0
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]// 0x7611cde820

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]// 0x7611cde6a0
	float Value;//[Offset: 0x4, Size: 0x4]// 0x7611cde630

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]// 0x75d1016990
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]// 0x75d1016a00
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]// 0x75d0ae0c00
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x75d0ae0c80

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]// 0x760d21dc40
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]// 0x75d106ca00
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]// 0x760d1ef080
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x170, Size: 0xa8]// 0x760d1ef400
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]// 0x760d1ef480
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]// 0x760d1ef500

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]// 0x75d106c480
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]// 0x760d1fffc0
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]// 0x75d106c580
	int EvaluationRunSide;//[Offset: 0x14, Size: 0x4]// 0x760d200030
	MovieSceneSegment[] Segments;//[Offset: 0x18, Size: 0x10]// 0x75d106c680
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x28, Size: 0x10]// 0x75d106c780
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x38, Size: 0x38]// 0x75d106c800
	FName EvaluationGroup;//[Offset: 0x70, Size: 0x8]// 0x760d2000a0
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]// 0x75d106c880
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]// 0x75d106c900

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 0x10]// 0x760d1ef600
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]// 0x760d1efa00
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]// 0x760d1efe80

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]// 0x760d1ef700
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]// 0x760d1ef900

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]// 0x760d200420
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]// 0x760d200490
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]// 0x760d200500

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 0x4]// 0x760d200570

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]// 0x760d1ef780
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]// 0x760d1ef800

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]// 0x76120577e0

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]// 0x760d2005e0

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]// 0x760d1efb00
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]// 0x760d1efd80

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]// 0x760d1efc80
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]// 0x760d2006c0

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]// 0x760d1efb80
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]// 0x760d1efc00
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 0x4]// 0x760d200650

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]// 0x760d21dd00
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]// 0x760d21ddc0

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 0x8]// 0x75d106ca80
	Object* SequenceKeyObject;//[Offset: 0x8, Size: 0x8]// 0x75d106cb00
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x10, Size: 0x8]// 0x75d106cb80
	Guid SourceSequenceSignature;//[Offset: 0x18, Size: 0x10]// 0x75d106cc00
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x28, Size: 0x4]// 0x75d106cc80
	FloatRange PreRollRange;//[Offset: 0x2c, Size: 0x10]// 0x75d106cd00
	FloatRange PostRollRange;//[Offset: 0x3c, Size: 0x10]// 0x75d106cd80
	int HierarchicalBias;//[Offset: 0x4c, Size: 0x4]// 0x760d200260

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]// 0x760d200180
	float Offset;//[Offset: 0x4, Size: 0x4]// 0x760d2001f0

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]// 0x75d106ce80
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]// 0x75d106cf80

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]// 0x760d1ef100
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x8, Size: 0x50]// 0x760d21de80
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x58, Size: 0x50]// 0x760d21df40

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 0x10]// 0x760d1ef280

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75d106b100
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x75d106b180

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]// 0x76120119a0
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]// 0x7612011920
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]// 0x76120118a0
	float angle;//[Offset: 0x18, Size: 0x4]// 0x7612011830

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x18]// 0x75a7913280
	WidgetNavigationData Down;//[Offset: 0x40, Size: 0x18]// 0x75a7913300
	WidgetNavigationData Left;//[Offset: 0x58, Size: 0x18]// 0x75a7913380
	WidgetNavigationData Right;//[Offset: 0x70, Size: 0x18]// 0x75a7913400
	WidgetNavigationData Next;//[Offset: 0x88, Size: 0x18]// 0x75a7913480
	WidgetNavigationData Previous;//[Offset: 0xa0, Size: 0x18]// 0x75a7913500

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]// 0x75d0ae0880
	FName WidgetToFocus;//[Offset: 0x8, Size: 0x8]// 0x75d1016680
	Widget* Widget;//[Offset: 0x10, Size: 0x8]// 0x75d0ae0900

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]// 0x75a7946200
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x10]// 0x75a7946280
	FName DestinationProperty;//[Offset: 0x40, Size: 0x8]// 0x75a793d110

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]// 0x75d0ae1f80

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x75d1016c30
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]// 0x75d1016d80
	Struct* Struct;//[Offset: 0x10, Size: 0x8]// 0x75d0ae1e00
	Field* Field;//[Offset: 0x18, Size: 0x8]// 0x75d0ae1e80

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x76120f9610
	Widget* Content;//[Offset: 0x8, Size: 0x8]// 0x76120f9590

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]// 0x75a7912a80
	int[] VariableWidgetMarks;//[Offset: 0x30, Size: 0x10]// 0x75a7912b00
	Widget*[] AllWidgets;//[Offset: 0x50, Size: 0x10]// 0x75a7912c00

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]// 0x76120f8e80
	delegate Delegate;//[Offset: 0x8, Size: 0x10]// 0x76120f8e00
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]// 0x76120f8d00
	FName UserTag;//[Offset: 0x20, Size: 0x8]// 0x76120f8c90

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x58, Size: 0x8]// 0x75a831f400
	byte AspectRatioAxisConstraint;//[Offset: 0x7c, Size: 0x1]// 0x75a831f480
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x80, Size: 0x8]// 0x75a831f500
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]// 0x75a831f580
	int ControllerId;//[Offset: 0x108, Size: 0x4]// 0x75a836e650

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x38, Size: 0x8]// 0x75bca4c480
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x40, Size: 0x10]// 0x75bca4c580
	World* World;//[Offset: 0x78, Size: 0x8]// 0x75bca4c600
	GameInstance* GameInstance;//[Offset: 0x80, Size: 0x8]// 0x75bca4c680
	void SSSwapControllers();// 0x6e0f794
	void ShowTitleSafeArea();// 0x6e0f778
	void SetConsoleTarget(int PlayerIndex);// 0x6e0f6f4

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]// 0x75a788e880
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]// 0x75a788e900
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]// 0x75a788e980
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]// 0x75a788ea00

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]// 0x75d0a90200
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]// 0x75d0a90280

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x38, Size: 0x10]// 0x7611d181f0
	LocalPlayer*[] LocalPlayers;//[Offset: 0x48, Size: 0x10]// 0x7611d180f0
	OnlineSession* OnlineSession;//[Offset: 0x58, Size: 0x8]// 0x7611d18070
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]// 0x7611d17ff0
	void ReceiveShutdown();// 0xffffff8a17adf2b0
	void ReceiveInit();// 0xffffff8a17adf2b0
	void HandleTravelError(byte FailureType);// 0xffffff8a17adf2b0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xffffff8a17adf2b0
	void DebugRemovePlayer(int ControllerId);// 0x6df9850
	void DebugCreatePlayer(int ControllerId);// 0x6df97cc

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]// 0x7612024be0
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]// 0x7612024b60

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]// 0x75bca70e80
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]// 0x75bca70f00
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]// 0x75bca70f80
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]// 0x75bca71000
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]// 0x75bca71080
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 0x8]// 0x75bca71100
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x40, Size: 0xc]// 0x75bca71180
	byte MaxConcurrentResolutionRule;//[Offset: 0x4c, Size: 0x1]// 0x75bca71200
	int MaxConcurrentPlayCount;//[Offset: 0x50, Size: 0x4]// 0x75a78883a0
	float Duration;//[Offset: 0x54, Size: 0x4]// 0x75a7888410
	SoundAttenuation* AttenuationSettings;//[Offset: 0x58, Size: 0x8]// 0x75bca71280
	float Priority;//[Offset: 0x60, Size: 0x4]// 0x75a7888480
	SoundSubmix* SoundSubmixObject;//[Offset: 0x68, Size: 0x8]// 0x75bca71300
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x70, Size: 0x10]// 0x75bca71400
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x80, Size: 0x8]// 0x75bca71480
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x88, Size: 0x10]// 0x75bca71580

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x28]// 0x75a827de80
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 0x10]// 0x75a827df80
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 0x10]// 0x75a827e080
	SoundClass* ParentClass;//[Offset: 0x70, Size: 0x8]// 0x75a827e100

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]// 0x75d0a790e0
	float Pitch;//[Offset: 0x4, Size: 0x4]// 0x75d0a79150
	float StereoBleed;//[Offset: 0x8, Size: 0x4]// 0x75d0a791c0
	float LFEBleed;//[Offset: 0xc, Size: 0x4]// 0x75d0a79230
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]// 0x75d0a792a0
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]// 0x75d0a79310
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]// 0x75d0a79380
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]// 0x75c997c200
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]// 0x75c997c280
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]// 0x75c997c300
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]// 0x75c997c380
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]// 0x75c997c400
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]// 0x75d0a793f0
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]// 0x75c997c480
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]// 0x75c997c500
	byte OutputTarget;//[Offset: 0x25, Size: 0x1]// 0x75c997c580

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]// 0x75c997c600
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]// 0x75d0a79460
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]// 0x75d0a794d0

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]// 0x75a827d800
	float EQPriority;//[Offset: 0x2c, Size: 0x4]// 0x75a82c3d90
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x38]// 0x75a827d880
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 0x10]// 0x75a827d980
	float InitialDelay;//[Offset: 0x78, Size: 0x4]// 0x75a82c3e00
	float FadeInTime;//[Offset: 0x7c, Size: 0x4]// 0x75a82c3e70
	float Duration;//[Offset: 0x80, Size: 0x4]// 0x75a82c3ee0
	float FadeOutTime;//[Offset: 0x84, Size: 0x4]// 0x75a82c3f50

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]// 0x760d288880
	float Gain0;//[Offset: 0xc, Size: 0x4]// 0x760d2888f0
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]// 0x760d288960
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]// 0x760d2889d0
	float Gain1;//[Offset: 0x18, Size: 0x4]// 0x760d288a40
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]// 0x760d288ab0
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]// 0x760d288b20
	float Gain2;//[Offset: 0x24, Size: 0x4]// 0x760d288b90
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]// 0x760d288c00
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]// 0x760d288c70
	float Gain3;//[Offset: 0x30, Size: 0x4]// 0x760d288ce0
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]// 0x760d288d50

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]// 0x75c997be00
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]// 0x760d288dc0
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]// 0x760d288e30
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x75c997be80
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 0x4]// 0x760d288ea0

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0xc]// 0x75a827de00

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]// 0x75d0a79000
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]// 0x75c997c100
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]// 0x75c997c180
	float VolumeScale;//[Offset: 0x8, Size: 0x4]// 0x75d0a79070

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x2b8]// 0x75a827e180

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]// 0x75c997c680
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 0x1]// 0x75c997c700
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 0x1]// 0x75c997c780
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa4, Size: 0x1]// 0x75c997c800
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa4, Size: 0x1]// 0x75c997c880
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa4, Size: 0x1]// 0x75c997c900
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa4, Size: 0x1]// 0x75c997c980
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa4, Size: 0x1]// 0x75c997ca00
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]// 0x75c997ca80
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 0x1]// 0x75c997cb00
	byte DistanceType;//[Offset: 0xa6, Size: 0x1]// 0x75c997cb80
	float OmniRadius;//[Offset: 0xa8, Size: 0x4]// 0x75d0a79540
	float StereoSpread;//[Offset: 0xac, Size: 0x4]// 0x75d0a795b0
	byte SpatializationAlgorithm;//[Offset: 0xb0, Size: 0x1]// 0x75c997cc00
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0xb8, Size: 0x8]// 0x75c997cc80
	float RadiusMin;//[Offset: 0xc0, Size: 0x4]// 0x75d0a79620
	float RadiusMax;//[Offset: 0xc4, Size: 0x4]// 0x75d0a79690
	float LPFRadiusMin;//[Offset: 0xc8, Size: 0x4]// 0x75d0a79700
	float LPFRadiusMax;//[Offset: 0xcc, Size: 0x4]// 0x75d0a79770
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 0x1]// 0x75c997cd80
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd8, Size: 0x78]// 0x75c997ce00
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 0x78]// 0x75c997ce80
	float LPFFrequencyAtMin;//[Offset: 0x1c8, Size: 0x4]// 0x75d0a797e0
	float LPFFrequencyAtMax;//[Offset: 0x1cc, Size: 0x4]// 0x75d0a79850
	float HPFFrequencyAtMin;//[Offset: 0x1d0, Size: 0x4]// 0x75d0a798c0
	float HPFFrequencyAtMax;//[Offset: 0x1d4, Size: 0x4]// 0x75d0a79930
	float FocusAzimuth;//[Offset: 0x1d8, Size: 0x4]// 0x75d0a799a0
	float NonFocusAzimuth;//[Offset: 0x1dc, Size: 0x4]// 0x75d0a79a10
	float FocusDistanceScale;//[Offset: 0x1e0, Size: 0x4]// 0x75d0a79a80
	float NonFocusDistanceScale;//[Offset: 0x1e4, Size: 0x4]// 0x75d0a79af0
	float FocusPriorityScale;//[Offset: 0x1e8, Size: 0x4]// 0x75d0a79b60
	float NonFocusPriorityScale;//[Offset: 0x1ec, Size: 0x4]// 0x75d0a79bd0
	float FocusVolumeAttenuation;//[Offset: 0x1f0, Size: 0x4]// 0x75d0a79c40
	float NonFocusVolumeAttenuation;//[Offset: 0x1f4, Size: 0x4]// 0x75d0a79cb0
	float FocusAttackInterpSpeed;//[Offset: 0x1f8, Size: 0x4]// 0x75d0a79d20
	float FocusReleaseInterpSpeed;//[Offset: 0x1fc, Size: 0x4]// 0x75d0a79d90
	byte OcclusionTraceChannel;//[Offset: 0x200, Size: 0x1]// 0x75c997cf00
	float OcclusionLowPassFilterFrequency;//[Offset: 0x204, Size: 0x4]// 0x75d0a79e00
	float OcclusionVolumeAttenuation;//[Offset: 0x208, Size: 0x4]// 0x75d0a79e70
	float OcclusionInterpolationTime;//[Offset: 0x20c, Size: 0x4]// 0x75d0a79ee0
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x210, Size: 0x8]// 0x75c997cf80
	enum ReverbSendMethod;//[Offset: 0x218, Size: 0x1]// 0x75c997d080
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x220, Size: 0x8]// 0x75c997d100
	float ReverbWetLevelMin;//[Offset: 0x228, Size: 0x4]// 0x75d0a79f50
	float ReverbWetLevelMax;//[Offset: 0x22c, Size: 0x4]// 0x75d0a79fc0
	float ReverbDistanceMin;//[Offset: 0x230, Size: 0x4]// 0x75d0a7a030
	float ReverbDistanceMax;//[Offset: 0x234, Size: 0x4]// 0x75d0a7a0a0
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x78]// 0x75c997d180
	float ManualReverbSendLevel;//[Offset: 0x2b0, Size: 0x4]// 0x75d0a7a110

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]// 0x75d0a95700
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x10, Size: 0x78]// 0x75d0a95780
	byte AttenuationShape;//[Offset: 0x88, Size: 0x1]// 0x75d0a95800
	float dBAttenuationAtMax;//[Offset: 0x8c, Size: 0x4]// 0x75d100f3e0
	Vector AttenuationShapeExtents;//[Offset: 0x90, Size: 0xc]// 0x75d0a95880
	float ConeOffset;//[Offset: 0x9c, Size: 0x4]// 0x75d100f450
	float FalloffDistance;//[Offset: 0xa0, Size: 0x4]// 0x75d100f4c0

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]// 0x75a827be80
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 0x8]// 0x75a827bf00
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x40, Size: 0x10]// 0x75a827c000

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]// 0x760d2882d0
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 0x8]// 0x75c997bc80

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]// 0x75a827db80
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x75a827dc00

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]// 0x75c997c000
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]// 0x75c997c080

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]// 0x760d288340
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]// 0x75c997bd00

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x27c, Size: 0x1]// 0x75a827c100
	float SourceBusDuration;//[Offset: 0x280, Size: 0x4]// 0x75a8262a40
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 0x1]// 0x75a827c180

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x9c, Size: 0x4]// 0x75a8262ab0
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]// 0x75a827c200
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]// 0x75a827c280
	int StreamingPriority;//[Offset: 0xa4, Size: 0x4]// 0x75a8262b20
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]// 0x75a827c300
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1]// 0x75a827c380
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1]// 0x75a827c400
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1]// 0x75a827c480
	byte SoundGroup;//[Offset: 0xaa, Size: 0x1]// 0x75a827c500
	FString SpokenText;//[Offset: 0xb0, Size: 0x10]// 0x75a8262b90
	float SubtitlePriority;//[Offset: 0xc0, Size: 0x4]// 0x75a8262c00
	float Volume;//[Offset: 0xc4, Size: 0x4]// 0x75a8262c70
	float Pitch;//[Offset: 0xc8, Size: 0x4]// 0x75a8262ce0
	int NumChannels;//[Offset: 0xcc, Size: 0x4]// 0x75a8262d50
	int SampleRate;//[Offset: 0xd0, Size: 0x4]// 0x75a8262dc0
	int RawPCMDataSize;//[Offset: 0xd4, Size: 0x4]// 0x75a8262e30
	SubtitleCue[] Subtitles;//[Offset: 0xd8, Size: 0x10]// 0x75a827c600
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xe8, Size: 0x10]// 0x75a827c700
	CurveTable* Curves;//[Offset: 0xf8, Size: 0x8]// 0x75a827c780
	CurveTable* InternalCurves;//[Offset: 0x100, Size: 0x8]// 0x75a827c800

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]// 0x7611d0f300
	float Time;//[Offset: 0x18, Size: 0x4]// 0x7611d0f290

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 0x10]// 0x75d0a85860
	SubtitleCue[] Subtitles;//[Offset: 0x10, Size: 0x10]// 0x75d0a8bc00
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]// 0x75d0a8bc80
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]// 0x75d0a8bd00
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]// 0x75d0a8bd80

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]// 0x75a793ccb0
	Object* Payload;//[Offset: 0x38, Size: 0x8]// 0x75a7943900
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]// 0x75a7943980
	enum Pivot;//[Offset: 0x48, Size: 0x1]// 0x75a7943a80
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]// 0x75a7943b00
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]// 0x75a7943b80
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]// 0x75a7943c00
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]// 0x75a7943c80
	void Drop(out const PointerEvent PointerEvent);// 0x609ac34
	void Dragged(out const PointerEvent PointerEvent);// 0x609aaf0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x609a9ac

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]// 0x7611db1f20
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]// 0x7611db1e40
	float BlendExp;//[Offset: 0x8, Size: 0x4]// 0x7611db1dd0
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]// 0x7611db1d50

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]// 0x7611d25ad0
	int UUID;//[Offset: 0x4, Size: 0x4]// 0x7611d25a60
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]// 0x7611d259f0
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]// 0x7611d25970

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]// 0x75d100da80
	int Index;//[Offset: 0x4, Size: 0x4]// 0x75d100daf0
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]// 0x75d100db60

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x510, Size: 0x8]// 0x75a8310200
	FName MatineeControllerName;//[Offset: 0x518, Size: 0x8]// 0x75a82d09e0
	float PlayRate;//[Offset: 0x520, Size: 0x4]// 0x75a82d0a50
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x524, Size: 0x1]// 0x75a8310280
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x524, Size: 0x1]// 0x75a8310300
	float ForceStartPosition;//[Offset: 0x528, Size: 0x4]// 0x75a82d0ac0
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52c, Size: 0x1]// 0x75a8310380
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x52c, Size: 0x1]// 0x75a8310400
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x52c, Size: 0x1]// 0x75a8310480
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x52c, Size: 0x1]// 0x75a8310500
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x52c, Size: 0x1]// 0x75a8310580
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x52c, Size: 0x1]// 0x75a8310600
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x52c, Size: 0x1]// 0x75a8310680
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x52c, Size: 0x1]// 0x75a8310700
	int PreferredSplitScreenNum;//[Offset: 0x530, Size: 0x4]// 0x75a82d0b30
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 0x1]// 0x75a8310780
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x534, Size: 0x1]// 0x75a8310800
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x534, Size: 0x1]// 0x75a8310880
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x534, Size: 0x1]// 0x75a8310900
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x538, Size: 0x10]// 0x75a8310a00
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]// 0x75a8310a80
	InterpGroupInst*[] GroupInst;//[Offset: 0x550, Size: 0x10]// 0x75a8310b80
	CameraCutInfo[] CameraCuts;//[Offset: 0x560, Size: 0x10]// 0x75a8310c80
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]// 0x75a8310d00
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x570, Size: 0x1]// 0x75a8310d80
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x570, Size: 0x1]// 0x75a8310e00
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x570, Size: 0x1]// 0x75a8310e80
	float InterpPosition;//[Offset: 0x574, Size: 0x4]// 0x75a82d0ba0
	byte ReplicationForceIsPlaying;//[Offset: 0x57c, Size: 0x1]// 0x75a8310f00
	delegate OnPlay;//[Offset: 0x580, Size: 0x10]// 0x75a8310f80
	delegate OnStop;//[Offset: 0x590, Size: 0x10]// 0x75a8311000
	delegate OnPause;//[Offset: 0x5a0, Size: 0x10]// 0x75a8311080
	void Stop();// 0x6e96970
	void SetPosition(float NewPosition, bool bJump);// 0x6e968b0
	void SetLoopingState(bool bNewLooping);// 0x6e96824
	void Reverse();// 0x6e96808
	void Play();// 0x6e967ec
	void Pause();// 0x6e967d0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x6e966b4
	void ChangePlaybackDirection();// 0x6e96698

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]// 0x75bca412e0
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]// 0x75bca41350
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]// 0x75bca49080
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]// 0x75bca49100
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]// 0x75bca413c0
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]// 0x75bca41430
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]// 0x75bca49180
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]// 0x75bca49200
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]// 0x75bca49280

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]// 0x75d0a81a40
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]// 0x75cdbe7f80

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]// 0x75cdbe7e80
	float TimeStamp;//[Offset: 0xc, Size: 0x4]// 0x75d0a819d0

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2b8, Size: 0x8]// 0x75b4dff500
	Actor* ChildActor;//[Offset: 0x2c0, Size: 0x8]// 0x75b4dff580
	bool bAllowTemplateModification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]// 0x75b4dff600
	Actor* ChildActorTemplate;//[Offset: 0x2d0, Size: 0x8]// 0x75b4dff680
	bool IsDestoryChildActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]// 0x75b4dff700
	delegate OnChildActorRep;//[Offset: 0x2f0, Size: 0x10]// 0x75b4dff780
	bool bKeepChildActorComponet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]// 0x75b4dff800
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]// 0x75b4dff880
	bool bDumpChildActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 0x1]// 0x75b4dff900
	void SetChildActorClass(class Actor InClass);// 0x6dcb740
	void OnRep_ChildActor();// 0x6dcb72c

--------------------------------
Class: AnimNotifyStateBoneRetargetAdaptInfo
	Object* BoneRetargetObj;//[Offset: 0x0, Size: 0x8]// 0x7611d56530
	bool bBoneRetargetAdaptInitDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611d564b0

--------------------------------
Class: ScriptNetworkRemoteContent
	byte[] Content;//[Offset: 0x0, Size: 0x10]// 0x7611d47160
	int ContentNumBits;//[Offset: 0x10, Size: 0x4]// 0x7611d470f0

--------------------------------
Class: ActorSet
	<Actor*> Actors;//[Offset: 0x0, Size: 0x50]// 0x75cdbd88c0

--------------------------------
Class: UGCSpawnActorNumLimitCfg
	FString actorName;//[Offset: 0x0, Size: 0x10]// 0x760d286c80
	int NumLimit;//[Offset: 0x10, Size: 0x4]// 0x760d286cf0

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 0x8]// 0x75a837de80
	Model* Model;//[Offset: 0xc8, Size: 0x8]// 0x75a837df00
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 0x10]// 0x75a837e000
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 0x8]// 0x75a837e080
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 0x4]// 0x75a836eb90
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 0x4]// 0x75a836ec00
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 0x8]// 0x75a837e100
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 0x8]// 0x75a837e180
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 0x8]// 0x75a837e200
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 0x10]// 0x75a837e300
	float LightmapTotalSize;//[Offset: 0x118, Size: 0x4]// 0x75a836ec70
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 0x4]// 0x75a836ece0
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 0x10]// 0x75a837e400
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 0x10]// 0x75a837e500
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]// 0x75a837e580
	Guid LevelBuildDataId;//[Offset: 0x26c, Size: 0x10]// 0x75a837e600
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x280, Size: 0x8]// 0x75a837e680
	IntVector LightBuildLevelOffset;//[Offset: 0x288, Size: 0xc]// 0x75a837e700
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]// 0x75a837e780
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]// 0x75a837e800
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1]// 0x75a837e880
	bool bPVSDirty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1]// 0x75a837e900
	WorldSettings* WorldSettings;//[Offset: 0x2e0, Size: 0x8]// 0x75a837e980
	SoftClassPath RCRCommunicatorClassName;//[Offset: 0x2f0, Size: 0x18]// 0x75a837ea00
	RCRCommunicator* RCRCommunicator;//[Offset: 0x308, Size: 0x8]// 0x75a837ea80
	AssetUserData*[] AssetUserData;//[Offset: 0x310, Size: 0x10]// 0x75a837eb80

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x6c0, Size: 0x8]// 0x75a82c2b00

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]// 0x75a837de00

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510, Size: 0x1]// 0x75c989cd80
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xffffff8a17adf2b0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6e75aa8
	bool RemoteEvent(FName EventName);// 0x6e75a10
	void LevelReset();// 0xffffff8a17adf2b0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]// 0x7611cda5c0
	int Y;//[Offset: 0x4, Size: 0x4]// 0x7611cda550
	int Z;//[Offset: 0x8, Size: 0x4]// 0x7611cda4e0

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x518, Size: 0x8]// 0x75a8637480
	BillboardComponent* GoodSprite;//[Offset: 0x520, Size: 0x8]// 0x75a8637500
	BillboardComponent* BadSprite;//[Offset: 0x528, Size: 0x8]// 0x75a8637580
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1]// 0x75a8637600

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x6a8, Size: 0x8]// 0x75a7895880
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b0, Size: 0x1]// 0x75a7895900
	float ScreenSize;//[Offset: 0x6b4, Size: 0x4]// 0x75a788d880
	float U;//[Offset: 0x6b8, Size: 0x4]// 0x75a788d8f0
	float UL;//[Offset: 0x6bc, Size: 0x4]// 0x75a788d960
	float V;//[Offset: 0x6c0, Size: 0x4]// 0x75a788d9d0
	float VL;//[Offset: 0x6c4, Size: 0x4]// 0x75a788da40
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x6da4b7c
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x6da4a10
	void SetSprite(Texture2D* NewSprite);// 0x6da498c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]// 0x75a82d05f0

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]// 0x75a831f100

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x75b4c94d00
	Vector2D[] FOVCulling;//[Offset: 0x520, Size: 0x10]// 0x75b4c94e00
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1]// 0x75b4c94e80
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 0x1]// 0x75b4c94f00
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x530, Size: 0x1]// 0x75b4c94f80
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x530, Size: 0x1]// 0x75b4c95000
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x530, Size: 0x1]// 0x75b4c95080
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x530, Size: 0x1]// 0x75b4c95100
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x530, Size: 0x1]// 0x75b4c95180
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x530, Size: 0x1]// 0x75b4c95200
	float KillZ;//[Offset: 0x534, Size: 0x4]// 0x75d0b326f0
	class DamageType* KillZDamageType;//[Offset: 0x538, Size: 0x8]// 0x75b4c95280
	float WorldGravityZ;//[Offset: 0x540, Size: 0x4]// 0x75d0b32760
	float GlobalGravityZ;//[Offset: 0x544, Size: 0x4]// 0x75d0b327d0
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x548, Size: 0x8]// 0x75b4c95300
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x550, Size: 0x8]// 0x75b4c95380
	class GameModeBase* DefaultGameMode;//[Offset: 0x558, Size: 0x8]// 0x75b4c95400
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x560, Size: 0x8]// 0x75b4c95480
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x568, Size: 0x4]// 0x75d0b32840
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]// 0x75b4c95500
	Vector DefaultColorScale;//[Offset: 0x570, Size: 0xc]// 0x75b4c95580
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x57c, Size: 0x4]// 0x75d0b328b0
	float GlobalDistanceFieldViewDistance;//[Offset: 0x580, Size: 0x4]// 0x75d0b32920
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x584, Size: 0x1]// 0x75b4c95600
	float MaxWorldSize;//[Offset: 0x588, Size: 0x4]// 0x75d0b32990
	int RegionSizeNear;//[Offset: 0x58c, Size: 0x4]// 0x75d0b32a00
	int RegionSizeFar;//[Offset: 0x590, Size: 0x4]// 0x75d0b32a70
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]// 0x75b4c95680
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]// 0x75b4c95700
	bool UnlimitedRegionZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x596, Size: 0x1]// 0x75b4c95780
	int Graduation;//[Offset: 0x598, Size: 0x4]// 0x75d0b32ae0
	int CompositionSize;//[Offset: 0x59c, Size: 0x4]// 0x75d0b32b50
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x5a0, Size: 0x4]// 0x75d0b32bc0
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a4, Size: 0x1]// 0x75b4c95800
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a4, Size: 0x1]// 0x75b4c95880
	int VisibilityCellSize;//[Offset: 0x5a8, Size: 0x4]// 0x75d0b32c30
	byte VisibilityAggressiveness;//[Offset: 0x5ac, Size: 0x1]// 0x75b4c95900
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ad, Size: 0x1]// 0x75b4c95980
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x5b0, Size: 0x50]// 0x75b4c95a00
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x600, Size: 0x64]// 0x75b4c95a80
	ReverbSettings DefaultReverbSettings;//[Offset: 0x668, Size: 0x18]// 0x75b4c95b00
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x680, Size: 0x24]// 0x75b4c95b80
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x6a8, Size: 0x8]// 0x75b4c95c00
	float WorldToMeters;//[Offset: 0x6b0, Size: 0x4]// 0x75d0b32ca0
	float MonoCullingDistance;//[Offset: 0x6b4, Size: 0x4]// 0x75d0b32d10
	BookMark* BookMarks;//[Offset: 0x6b8, Size: 0x8]// 0x75b4c95c80
	float TimeDilation;//[Offset: 0x708, Size: 0x4]// 0x75d0b32d80
	float MatineeTimeDilation;//[Offset: 0x70c, Size: 0x4]// 0x75d0b32df0
	float DemoPlayTimeDilation;//[Offset: 0x710, Size: 0x4]// 0x75d0b32e60
	float MinGlobalTimeDilation;//[Offset: 0x714, Size: 0x4]// 0x75d0b32ed0
	float MaxGlobalTimeDilation;//[Offset: 0x718, Size: 0x4]// 0x75d0b32f40
	float MinUndilatedFrameTime;//[Offset: 0x71c, Size: 0x4]// 0x75d0b32fb0
	float MaxUndilatedFrameTime;//[Offset: 0x720, Size: 0x4]// 0x75d0b33020
	PlayerState* Pauser;//[Offset: 0x728, Size: 0x8]// 0x75b4c95d00
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x730, Size: 0x1]// 0x75b4c95d80
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x730, Size: 0x1]// 0x75b4c95e00
	NetViewer[] ReplicationViewers;//[Offset: 0x738, Size: 0x10]// 0x75b4c95f00
	AssetUserData*[] AssetUserData;//[Offset: 0x748, Size: 0x10]// 0x75b4d03000
	float[] LODRelativeDistances;//[Offset: 0x758, Size: 0x10]// 0x75b4d03080
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]// 0x75b4d03100
	int WorldCompositionNums;//[Offset: 0x76c, Size: 0x4]// 0x75d0b33100
	int CompositionBlockLength;//[Offset: 0x770, Size: 0x4]// 0x75d0b33170
	bool bEnableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]// 0x75b4d03180
	void OnRep_WorldGravityZ();// 0x6f470dc

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]// 0x75a82cab60
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]// 0x75a82cabd0
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]// 0x75a829c600
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]// 0x75a82cac40

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x518, Size: 0x10]// 0x7611d8ae90
	class GameSession* GameSessionClass;//[Offset: 0x528, Size: 0x8]// 0x7611d8ae10
	class GameStateBase* GameStateClass;//[Offset: 0x530, Size: 0x8]// 0x7611d8ad90
	class PlayerController* PlayerControllerClass;//[Offset: 0x538, Size: 0x8]// 0x7611d8ad10
	class PlayerState* PlayerStateClass;//[Offset: 0x540, Size: 0x8]// 0x7611d8ac90
	class HUD* HUDClass;//[Offset: 0x548, Size: 0x8]// 0x7611d8ac10
	class Pawn* DefaultPawnClass;//[Offset: 0x550, Size: 0x8]// 0x7611d8ab90
	class SpectatorPawn* SpectatorClass;//[Offset: 0x558, Size: 0x8]// 0x7611d8ab10
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x560, Size: 0x8]// 0x7611d8aa90
	GameSession* GameSession;//[Offset: 0x568, Size: 0x8]// 0x7611d8aa10
	GameStateBase* GameState;//[Offset: 0x570, Size: 0x8]// 0x7611d8a990
	FText DefaultPlayerName;//[Offset: 0x578, Size: 0x18]// 0x7611d8a920
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 0x1]// 0x7611d8a8a0
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x590, Size: 0x1]// 0x7611d8a820
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x590, Size: 0x1]// 0x7611d8a7a0
	void StartPlay();// 0x6dfb9ac
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x6dfb8e0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x6dfb7e8
	bool ShouldReset(Actor* ActorToReset);// 0x6dfb750
	void ReturnToMainMenuHost();// 0x6dfb734
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x6dfb64c
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x6dfb590
	void RestartPlayer(Controller* NewPlayer);// 0x6dfb50c
	void ResetLevel();// 0x6dfb4f0
	bool PlayerCanRestart(PlayerController* Player);// 0x6dfb458
	bool MustSpectate(PlayerController* NewPlayerController);// 0x6dfb3c0
	void K2_PostLogin(PlayerController* NewPlayer);// 0xffffff8a17adf2b0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xffffff8a17adf2b0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xffffff8a17adf2b0
	void K2_OnLogout(Controller* ExitingController);// 0xffffff8a17adf2b0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xffffff8a17adf2b0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x6dfb2ec
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x6dfb230
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x6dfb1ac
	bool HasMatchStarted();// 0x6dfb16c
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x6dfb0e8
	int GetNumSpectators();// 0x6dfb0ac
	int GetNumPlayers();// 0x6dfb070
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x6dfafdc
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x6dfaf00
	Actor* ChoosePlayerStart(Controller* Player);// 0x6dfae6c
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x6dfad5c
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x6dfac8c

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x510, Size: 0x4]// 0x761209c0e0
	int MaxPlayers;//[Offset: 0x514, Size: 0x4]// 0x761209c070
	int MaxPartySize;//[Offset: 0x518, Size: 0x4]// 0x761209c000
	byte MaxSplitscreensPerConnection;//[Offset: 0x51c, Size: 0x1]// 0x761209bf80
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 0x1]// 0x761209bf00
	FName SessionName;//[Offset: 0x520, Size: 0x8]// 0x761209be90

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x510, Size: 0x8]// 0x7611f3da90
	GameModeBase* AuthorityGameMode;//[Offset: 0x518, Size: 0x8]// 0x7611f3da10
	class SpectatorPawn* SpectatorClass;//[Offset: 0x520, Size: 0x8]// 0x7611f3d990
	PlayerState*[] PlayerArray;//[Offset: 0x528, Size: 0x10]// 0x7611f3d890
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]// 0x7611f3d810
	float ReplicatedWorldTimeSeconds;//[Offset: 0x53c, Size: 0x4]// 0x7611f3d7a0
	float ServerWorldTimeSecondsDelta;//[Offset: 0x540, Size: 0x4]// 0x7611f3d730
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x544, Size: 0x4]// 0x7611f3d6c0
	bool bRecordControllerReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]// 0x7611f3d640
	void OnRep_SpectatorClass();// 0x6e0c868
	void OnRep_ReplicatedWorldTimeSeconds(out const float OldValue);// 0x6e0c7d4
	void OnRep_ReplicatedHasBegunPlay();// 0x6e0c7b8
	void OnRep_RecordControllerReplay();// 0x6e0c79c
	void OnRep_GameModeClass();// 0x6e0c780
	bool HasMatchStarted();// 0x6e0c740
	bool HasBegunPlay();// 0x6e0c700
	float GetServerWorldTimeSecondsForReplay();// 0x6e0c6cc
	float GetServerWorldTimeSeconds();// 0x6e0c690
	float GetPlayerStartTime(Controller* Controller);// 0x6e0c5fc
	float GetPlayerRespawnDelay(Controller* Controller);// 0x6e0c568

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x510, Size: 0x4]// 0x75a7882bb0
	float LastNetSpeedUpdateTime;//[Offset: 0x514, Size: 0x4]// 0x75a7882c20
	int TotalNetBandwidth;//[Offset: 0x518, Size: 0x4]// 0x75a7882c90
	int MinDynamicBandwidth;//[Offset: 0x51c, Size: 0x4]// 0x75a7882d00
	int MaxDynamicBandwidth;//[Offset: 0x520, Size: 0x4]// 0x75a7882d70
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x524, Size: 0x1]// 0x75bca69d80
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x524, Size: 0x1]// 0x75bca69e00
	float StandbyRxCheatTime;//[Offset: 0x528, Size: 0x4]// 0x75a7882de0
	float StandbyTxCheatTime;//[Offset: 0x52c, Size: 0x4]// 0x75a7882e50
	int BadPingThreshold;//[Offset: 0x530, Size: 0x4]// 0x75a7882ec0
	float PercentMissingForRxStandby;//[Offset: 0x534, Size: 0x4]// 0x75a7882f30
	float PercentMissingForTxStandby;//[Offset: 0x538, Size: 0x4]// 0x75a7882fa0
	float PercentForBadPing;//[Offset: 0x53c, Size: 0x4]// 0x75a7883010
	float JoinInProgressStandbyWaitTime;//[Offset: 0x540, Size: 0x4]// 0x75a7883080
	float MoveRepSize;//[Offset: 0x544, Size: 0x4]// 0x75a78830f0
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x548, Size: 0x4]// 0x75a7883160
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x54c, Size: 0x4]// 0x75a78831d0
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x550, Size: 0x4]// 0x75a7883240
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x554, Size: 0x4]// 0x75a78832b0
	float MaxMoveDeltaTime;//[Offset: 0x558, Size: 0x4]// 0x75a7883320
	float ClientNetSendMoveDeltaTime;//[Offset: 0x55c, Size: 0x4]// 0x75a7883390
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x560, Size: 0x4]// 0x75a7883400
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x564, Size: 0x4]// 0x75a7883470
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x568, Size: 0x4]// 0x75a78834e0
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x56c, Size: 0x4]// 0x75a7883550
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]// 0x75bca69e80
	float ClientErrorUpdateRateLimit;//[Offset: 0x574, Size: 0x4]// 0x75a78835c0
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]// 0x75bca69f00
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]// 0x75bca69f80
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x57c, Size: 0x4]// 0x75a7883630
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x580, Size: 0x4]// 0x75a78836a0
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x584, Size: 0x4]// 0x75a7883710
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x588, Size: 0x4]// 0x75a7883780
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]// 0x75bca6a000
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 0x1]// 0x75bca6a080

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4]// 0x760d286040
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4]// 0x760d2860b0
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4]// 0x760d286120
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4]// 0x760d286190
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4]// 0x760d286200
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4]// 0x75c9977580
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4]// 0x760d286270
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4]// 0x760d2862e0
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4]// 0x760d286350
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1]// 0x75c9977600
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4]// 0x760d2863c0
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4]// 0x760d286430
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 0x4]// 0x760d2864a0
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]// 0x75c9977680
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]// 0x75c9977700
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 0x4]// 0x760d286510
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4]// 0x760d286580
	float OcclusionExponent;//[Offset: 0x40, Size: 0x4]// 0x760d2865f0
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 0x4]// 0x760d286660
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 0x4]// 0x760d2866d0
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]// 0x75c9977780
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]// 0x75c9977800
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]// 0x75c9977880
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]// 0x75c9977900

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 0x1]// 0x75c9977180
	int NumCoarseSamples;//[Offset: 0x4, Size: 0x4]// 0x760d2856a0
	int NumSamples;//[Offset: 0x8, Size: 0x4]// 0x760d285710
	int NumLightingBounces;//[Offset: 0xc, Size: 0x4]// 0x760d285780
	float LightmapBoost;//[Offset: 0x10, Size: 0x4]// 0x760d2857f0
	float SunHardness;//[Offset: 0x14, Size: 0x4]// 0x760d285860
	enum BakingMode;//[Offset: 0x18, Size: 0x1]// 0x75c9977280
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]// 0x75c9977300
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]// 0x75c9977380
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]// 0x75c9977400
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 0x4]// 0x760d2858d0
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 0x4]// 0x760d285940
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 0x4]// 0x760d2859b0
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 0x4]// 0x760d285a20
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 0x4]// 0x760d285a90
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 0x4]// 0x760d285b00
	float LocalOcclusionPower;//[Offset: 0x34, Size: 0x4]// 0x760d285b70
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 0x4]// 0x760d285be0
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 0x4]// 0x760d285c50
	int NumDenoisingIterators;//[Offset: 0x40, Size: 0x4]// 0x760d285cc0
	int NumDilationIterators;//[Offset: 0x44, Size: 0x4]// 0x760d285d30
	int DirectLightDenoising;//[Offset: 0x48, Size: 0x4]// 0x760d285da0
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 0x4]// 0x760d285e10
	float RayTraceBias;//[Offset: 0x50, Size: 0x4]// 0x760d285e80
	float RetraceDistance;//[Offset: 0x54, Size: 0x4]// 0x760d285ef0
	float SmallestTexelRadius;//[Offset: 0x58, Size: 0x4]// 0x760d285f60
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 0x4]// 0x760d285fd0
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]// 0x75c9977480
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]// 0x75c9977500

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75d0a95380
	byte ReverbType;//[Offset: 0x1, Size: 0x1]// 0x75d0a95400
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]// 0x75d0a95480
	float Volume;//[Offset: 0x10, Size: 0x4]// 0x75d100ed50
	float FadeTime;//[Offset: 0x14, Size: 0x4]// 0x75d100edc0

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]// 0x75a82c5220
	float Diffusion;//[Offset: 0x2c, Size: 0x4]// 0x75a82c5290
	float Gain;//[Offset: 0x30, Size: 0x4]// 0x75a82c5300
	float GainHF;//[Offset: 0x34, Size: 0x4]// 0x75a82c5370
	float DecayTime;//[Offset: 0x38, Size: 0x4]// 0x75a82c53e0
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]// 0x75a82c5450
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]// 0x75a82c54c0
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]// 0x75a82c5530
	float LateGain;//[Offset: 0x48, Size: 0x4]// 0x75a82c55a0
	float LateDelay;//[Offset: 0x4c, Size: 0x4]// 0x75a82c5610
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]// 0x75a82c5680
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]// 0x75a82c56f0

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75d0a95500
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]// 0x75d100ee30
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]// 0x75d100eea0
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]// 0x75d100ef10
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]// 0x75d100ef80
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]// 0x75d100eff0
	float InteriorTime;//[Offset: 0x18, Size: 0x4]// 0x75d100f060
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]// 0x75d100f0d0
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]// 0x75d100f140

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]// 0x75a7893c00
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]// 0x75a7893c80
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10]// 0x75a7893d00

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]// 0x75cdbe1a00
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]// 0x75cdbe1a80
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]// 0x75cdbe1b00
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]// 0x75cdbe1b80
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]// 0x75cdbe1c00

--------------------------------
Class: RCRCommunicator.Object

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x28, Size: 0x8]// 0x75a836e810
	World* WorldAsset;//[Offset: 0x30, Size: 0x28]// 0x75a831fe00
	FName PackageNameToLoad;//[Offset: 0x58, Size: 0x8]// 0x75a836e880
	FName[] LODPackageNames;//[Offset: 0x60, Size: 0x10]// 0x75a831fe80
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]// 0x75a831ff00
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 0x1]// 0x75a831ff80
	bool bLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd0, Size: 0x1]// 0x75a837d000
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd0, Size: 0x1]// 0x75a837d080
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd0, Size: 0x1]// 0x75a837d100
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd1, Size: 0x1]// 0x75a837d180
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd1, Size: 0x1]// 0x75a837d200
	int LevelLODIndex;//[Offset: 0xd4, Size: 0x4]// 0x75a836e960
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]// 0x75a837d280
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1]// 0x75a837d300
	Color DrawColor;//[Offset: 0xdc, Size: 0x4]// 0x75a837d380
	LinearColor LevelColor;//[Offset: 0xe0, Size: 0x10]// 0x75a837d400
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xf0, Size: 0x10]// 0x75a837d500
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0x100, Size: 0x4]// 0x75a836e9d0
	FString[] Keywords;//[Offset: 0x108, Size: 0x10]// 0x75a837d580
	delegate OnLevelLoaded;//[Offset: 0x118, Size: 0x10]// 0x75a837d600
	delegate OnLevelUnloaded;//[Offset: 0x128, Size: 0x10]// 0x75a837d680
	delegate OnLevelShown;//[Offset: 0x138, Size: 0x10]// 0x75a837d700
	delegate OnLevelHidden;//[Offset: 0x148, Size: 0x10]// 0x75a837d780
	Level* LoadedLevel;//[Offset: 0x158, Size: 0x8]// 0x75a837d800
	Level* PendingUnloadLevel;//[Offset: 0x160, Size: 0x8]// 0x75a837d880
	Level*[] UnloadingLevels;//[Offset: 0x168, Size: 0x10]// 0x75a837d980
	bool IsStreamingStatePending();// 0x6e76358
	bool IsLevelVisible();// 0x6e76320
	bool IsLevelLoaded();// 0x6e762fc
	FName GetWorldAssetPackageFName();// 0x6e762c8
	Level* GetLoadedLevel();// 0x6e762ac
	LevelScriptActor* GetLevelScriptActor();// 0x6e76278
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6e76198

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x548, Size: 0x10]// 0x75a831f880
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1]// 0x75a831f900
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 0x1]// 0x75a831f980
	byte StreamingUsage;//[Offset: 0x559, Size: 0x1]// 0x75a831fa00

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x628, Size: 0x50]// 0x75a802d480
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x97c, Size: 0x4]// 0x75b4d81320
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 0x1]// 0x75a8039900
	GameInstance* GameInstance;//[Offset: 0x9d0, Size: 0x8]// 0x75a8039980

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]// 0x75d0a8fa00
	Level* Level;//[Offset: 0x28, Size: 0x8]// 0x75d0a8fa80

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: WorldRegionManager
	World* World;//[Offset: 0x198, Size: 0x8]// 0x75c9981b00
	<RegionID,RegionObjectItemList> RegionIDToObjectList_Static;//[Offset: 0x1a0, Size: 0x50]// 0x760d21d580
	<RegionID,RegionObjectItemList> RegionIDToObjectList_NonStatic;//[Offset: 0x1f0, Size: 0x50]// 0x760d21d640
	<Object*,RegionID> ObjectToRegionID_NonStatic;//[Offset: 0x240, Size: 0x50]// 0x760d21d700

--------------------------------
Class: RegionID

--------------------------------
Class: RegionObjectItemList
	RegionObjectItem[] List;//[Offset: 0x0, Size: 0x10]// 0x75c9981d80

--------------------------------
Class: RegionObjectItem
	Object* Target;//[Offset: 0x0, Size: 0x8]// 0x75c9981c80

--------------------------------
Class: WorldParallelismManager
	World* World;//[Offset: 0x38, Size: 0x8]// 0x75c9977d80
	ParallelWorldPlayerInfo[] Players;//[Offset: 0x40, Size: 0x10]// 0x75c9977f00
	<uint32,GameModeBase*> ParallelGameModes;//[Offset: 0x50, Size: 0x50]// 0x760d21d1c0
	<uint32,GameStateBase*> ParallelGameStates;//[Offset: 0xa0, Size: 0x50]// 0x760d21d280

--------------------------------
Class: ParallelWorldPlayerInfo
	uint32 WorldParallelismID;//[Offset: 0x0, Size: 0x4]// 0x760d286a50
	FString PlayerName;//[Offset: 0x8, Size: 0x10]// 0x760d286ac0
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]// 0x75c9977e00

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8]// 0x75a82bda00
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8]// 0x75a82bda80
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x68, Size: 0x8]// 0x75a82bdb00
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]// 0x75a82bdb80
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]// 0x75a82bdc00
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]// 0x75a82bdc80
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x70, Size: 0x1]// 0x75a82bdd00
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x70, Size: 0x1]// 0x75a82bdd80
	enum DataGatheringMode;//[Offset: 0x71, Size: 0x1]// 0x75a82bde80
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72, Size: 0x1]// 0x75a82bdf00
	float ActiveTilesUpdateInterval;//[Offset: 0x74, Size: 0x4]// 0x75a82cfe80
	NavDataConfig[] SupportedAgents;//[Offset: 0x78, Size: 0x10]// 0x75a82be000
	float DirtyAreasUpdateFreq;//[Offset: 0x88, Size: 0x4]// 0x75a82cfef0
	NavigationData*[] NavDataSet;//[Offset: 0x90, Size: 0x10]// 0x75a82be100
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xa0, Size: 0x10]// 0x75a82be200
	delegate OnNavDataRegisteredEvent;//[Offset: 0x110, Size: 0x10]// 0x75a82be280
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0x120, Size: 0x10]// 0x75a82be300
	enum OperationMode;//[Offset: 0x1fc, Size: 0x1]// 0x75a82be400
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x6ea5cec
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x6ea5c70
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x6ea5bac
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x6ea5b00
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x6ea5a84
	void SetGeometryGatheringMode(enum NewMode);// 0x6ea5a08
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x6ea59f4
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x6ea5904
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x6ea5770
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x6ea56f4
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x6ea54f4
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x6ea530c
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6ea512c
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6ea4f4c
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x6ea4ecc
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x6ea4e4c
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6ea4cc0
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6ea4b34
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6ea493c
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x6ea4744
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x6ea46c8
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x6ea4528
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x6ea4364

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 0xc]// 0x75cdbe3800
	float GenerateRadiusMin;//[Offset: 0xc, Size: 0x4]// 0x75d0a80620
	float GenerateRadiusMax;//[Offset: 0x10, Size: 0x4]// 0x75d0a80690

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]// 0x75a844ce80
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]// 0x75a844cf00
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]// 0x75a844cf80

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]// 0x75cdbe3880
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]// 0x75d0a80700
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]// 0x75d0a80770
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x75cdbe3900
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]// 0x75cdbe3980
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]// 0x75cdbe3a00

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75cdbe3a80
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75cdbe3b00
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75cdbe3b80
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x75cdbe3c00
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]// 0x75cdbe3c80
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]// 0x75cdbe3d00
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]// 0x75cdbe3d80
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]// 0x75cdbe3e00
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]// 0x75cdbe3e80
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]// 0x75cdbe3f00
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]// 0x75cdbe3f80
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]// 0x75cdbe4000
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]// 0x75cdbe4080
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]// 0x75cdbe4100
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]// 0x75cdbe4180
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]// 0x75cdbe4200

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x548, Size: 0x4]// 0x75a82bd680

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10]// 0x75a82c0e80
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10]// 0x75a82c0f80
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1]// 0x75a82c1000
	bool IsValid();// 0x6ea383c
	bool IsStringPulled();// 0x6ea3804
	bool IsPartial();// 0x6ea37cc
	float GetPathLength();// 0x6ea3798
	float GetPathCost();// 0x6ea3764
	FString GetDebugString();// 0x6ea36e4
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x6ea3660
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x6ea3598

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]// 0x75a78e5000
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]// 0x75a7936ce0
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x75a78e5080

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]// 0x75a788de30
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]// 0x75a788dea0
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]// 0x75a788df10
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]// 0x75a788df80
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]// 0x75a792e000
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]// 0x75a792e070
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]// 0x75a792e0e0
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x6da44b0
	int GetObjectCount();// 0x6da447c
	int GetNewAvoidanceUID();// 0x6da4448
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x6da43b8

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]// 0x75c9978200
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]// 0x75c9978280
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]// 0x75c9978300
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]// 0x75c9978380
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]// 0x75cdbd8780

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]// 0x75a8311280
	World* World;//[Offset: 0x38, Size: 0x8]// 0x75a8311300

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xe0, Size: 0x10]// 0x75a8273000
	double TilesStreamingTimeThreshold;//[Offset: 0xf0, Size: 0x8]// 0x75a825ee50
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]// 0x75a8273080
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]// 0x75a8273100
	float RebaseOriginDistance;//[Offset: 0xfc, Size: 0x4]// 0x75a825eec0
	float TileBoundsVerifyScale;//[Offset: 0x100, Size: 0x4]// 0x75a825ef30
	bool bFlushPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]// 0x75a8273180
	FString[] ServerExcludedLevels;//[Offset: 0x108, Size: 0x10]// 0x75a8273200
	FString[] ClientExcludedLevels;//[Offset: 0x118, Size: 0x10]// 0x75a8273280
	FString[] UGCWhiteListSubLevelPaths;//[Offset: 0x128, Size: 0x10]// 0x75a8273300
	FString[] DeviceExcludedLevels;//[Offset: 0x138, Size: 0x10]// 0x75a8273380
	FString[] DynamicSubLevelPaths;//[Offset: 0x148, Size: 0x10]// 0x75a8273400
	FString[] BlackLevelPaths;//[Offset: 0x158, Size: 0x10]// 0x75a8273480
	float ClientLoadRadiusFactor;//[Offset: 0x178, Size: 0x4]// 0x75a825f240

--------------------------------
Class: STWorldSettings.WorldSettings.Info.Actor.Object
	Box WorldBounds;//[Offset: 0x778, Size: 0x1c]// 0x75a85bbb00

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x538, Size: 0x8]// 0x75bcaf7450

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]// 0x75a78d1880
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x520, Size: 0x28]// 0x75a78d1900
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x548, Size: 0x8]// 0x75a78d1980
	SoftObjectPath LevelSequence;//[Offset: 0x550, Size: 0x18]// 0x75a78d1a00
	LevelSequence* TempLevelSequence;//[Offset: 0x568, Size: 0x8]// 0x75a78d1a80
	Actor*[] AdditionalEventReceivers;//[Offset: 0x570, Size: 0x10]// 0x75a78d1b80
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x580, Size: 0x8]// 0x75a78d1c00
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x588, Size: 0x8]// 0x75a78d1c80
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]// 0x75a78d1d00
	int ReduceFrameCount;//[Offset: 0x594, Size: 0x4]// 0x75a7933010
	float IgnoreFrameTolerance;//[Offset: 0x598, Size: 0x4]// 0x75a7933080
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59c, Size: 0x1]// 0x75a78d1d80
	Object* DefaultInstanceData;//[Offset: 0x5a0, Size: 0x8]// 0x75a78d1e00
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x5a8, Size: 0x8]// 0x75a78d1e80
	Actor* OwnCharacter;//[Offset: 0x5b0, Size: 0x8]// 0x75a78d1f00
	void SetSequence(LevelSequence* InSequence);// 0x6362a90
	void SetOwnCharacter(Actor* Actor);// 0x6362a14
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x636293c
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x63627f0
	void ResetBindings();// 0x6362740
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x6362668
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x6362554
	void ReceiveInitailizePlayer();// 0xffffff8a17adf2b0
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x636247c
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x636232c

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 0x4]// 0x760d1ff770
	float PlayRate;//[Offset: 0x4, Size: 0x4]// 0x760d1ff7e0
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75d106b780
	float StartTime;//[Offset: 0xc, Size: 0x4]// 0x760d1ff850
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x75d106b800
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x75d106b880
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]// 0x75d106b900
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]// 0x75d106b980
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]// 0x75d106ba00
	bool bEnableHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]// 0x75d106ba80
	interface class * BindingOverrides;//[Offset: 0x18, Size: 0x10]// 0x75d106bb00

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x7a0, Size: 0x10]// 0x75a78d0900
	Object*[] AdditionalEventReceivers;//[Offset: 0x7e0, Size: 0x10]// 0x75a78d0a00
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x6364018

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x370, Size: 0x10]// 0x75a794c900
	delegate OnPlayReverse;//[Offset: 0x380, Size: 0x10]// 0x75a794c980
	delegate OnStop;//[Offset: 0x390, Size: 0x10]// 0x75a794ca00
	delegate OnPause;//[Offset: 0x3a0, Size: 0x10]// 0x75a794ca80
	delegate OnFinished;//[Offset: 0x3b0, Size: 0x10]// 0x75a794cb00
	delegate OnObjectSpawnedEvent;//[Offset: 0x3c0, Size: 0x10]// 0x75a794cb80
	byte Status;//[Offset: 0x3d0, Size: 0x1]// 0x75a794cc00
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d1, Size: 0x1]// 0x75a794cc80
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d1, Size: 0x1]// 0x75a794cd00
	MovieSceneSequence* Sequence;//[Offset: 0x3d8, Size: 0x8]// 0x75a794cd80
	float TimeCursorPosition;//[Offset: 0x3e0, Size: 0x4]// 0x75a799e690
	float StartTime;//[Offset: 0x3e4, Size: 0x4]// 0x75a799e700
	float EndTime;//[Offset: 0x3e8, Size: 0x4]// 0x75a799e770
	int CurrentNumLoops;//[Offset: 0x3ec, Size: 0x4]// 0x75a799e7e0
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x400, Size: 0x28]// 0x75a794ce80
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x428, Size: 0x300]// 0x75a794cf00
	void Stop();// 0x5ea8064
	void StartPlayingNextTick();// 0x5ea8050
	void SetPlayRate(float PlayRate);// 0x5ea7fd4
	void SetPlayLoopCount(int NumLoops);// 0x5ea7f58
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x5ea7ea4
	void SetPlaybackPostionWithloop(float NewTime);// 0x5ea7e28
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x5ea7dac
	void Scrub();// 0x5ea7d98
	void PlayReverse();// 0x5ea7d84
	void PlayLooping(int NumLoops);// 0x5ea7d08
	void Play();// 0x5ea7cf4
	void Pause();// 0x5ea7ce0
	void JumpToPositionEx(float NewPlaybackPosition);// 0x5ea7c64
	void JumpToPosition(float NewPlaybackPosition);// 0x5ea7be8
	bool IsPlaying();// 0x5ea7bb0
	bool IsPaused();// 0x5ea7b78
	void GoToEndAndStop();// 0x5ea7b64
	float GetPlayRate();// 0x5ea7b30
	float GetPlaybackStart();// 0x5ea7b14
	float GetPlaybackPosition();// 0x5ea7ae0
	float GetPlaybackEnd();// 0x5ea7ac4
	float GetLength();// 0x5ea7a90
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x5ea7998
	void ChangePlaybackDirection();// 0x5ea7984

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x2b0, Size: 0x50]// 0x760d21db80

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]// 0x7612057bd0
	enum Space;//[Offset: 0x4, Size: 0x1]// 0x7612057a70
	Guid Guid;//[Offset: 0x8, Size: 0x10]// 0x76120579f0

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x2e0, Size: 0x8]// 0x75a78d2980
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x2e8, Size: 0x50]// 0x75a78d2a00
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x338, Size: 0x50]// 0x75a78d2a80
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x388, Size: 0x50]// 0x75a78fe540
	class Object* DirectorClass;//[Offset: 0x3d8, Size: 0x8]// 0x75a78d2b80

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]// 0x760d21d940

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]// 0x75d0adc100

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]// 0x75d1013c80
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]// 0x75d0adc000
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]// 0x75d1013cf0

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]// 0x75d0adbf00
	FString ComponentName;//[Offset: 0x20, Size: 0x10]// 0x75d1013c10
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]// 0x75d0adbf80

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75a78d2800
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]// 0x75a78d2880
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]// 0x75a78d2900

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x30, Size: 0x10]// 0x75a794de80
	MovieSceneObjectBindingID MakeBindingID(out const Guid InBindingID, MovieSceneSequenceID InSequenceID, enum InSpace);// 0x5ea3c58
	FString GetGuidStr(out const MovieSceneObjectBindingID BindingID);// 0x5ea3b60
	MovieSceneBindingOverrideData[] GetBindingData();// 0x5ea3ab4

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18]// 0x760d1f0200
	Object* Object;//[Offset: 0x18, Size: 0x8]// 0x760d1f0280
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x760d1f0300

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x258, Size: 0x58]// 0x75a78d1680
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2b0, Size: 0x8]// 0x75a78d1700
	void SetSettings(Object* InSettings);// 0xffffff8a17adf2b0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x6363538

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 0x18]// 0x75d10139e0
	float MasterTime;//[Offset: 0x18, Size: 0x4]// 0x75d1013a50
	FText CurrentShotName;//[Offset: 0x20, Size: 0x18]// 0x75d1013ac0
	float CurrentShotLocalTime;//[Offset: 0x38, Size: 0x4]// 0x75d1013b30
	CameraComponent* CameraComponent;//[Offset: 0x40, Size: 0x8]// 0x75d0adbc80
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x48, Size: 0x8]// 0x75d0adbd80
	MovieSceneSequenceID ShotID;//[Offset: 0x50, Size: 0x4]// 0x75d0adbe00

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]// 0x75d0adbd00
	float FrameRate;//[Offset: 0x4, Size: 0x4]// 0x75d1013ba0

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x510, Size: 0x8]// 0x75bca70580
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x75bca70600
	void ToggleEnabled();// 0x6e7774c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x6e776cc
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6e77650
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6e775d4
	void SetLightColor(LinearColor NewLightColor);// 0x6e77558
	void SetEnabled(bool bSetEnabled);// 0x6e774d4
	void SetCastShadows(bool bNewValue);// 0x6e77450
	void SetBrightness(float NewBrightness);// 0x6e773d4
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6e77350
	void OnRep_bEnabled();// 0x6e77334
	bool IsEnabled();// 0x6e772fc
	LinearColor GetLightColor();// 0x6e772c4
	float GetBrightness();// 0x6e77290

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2e0, Size: 0x4]// 0x75a78874c0
	float MaxDrawDistance;//[Offset: 0x2e4, Size: 0x4]// 0x75a7887530
	float MaxDistanceFadeRange;//[Offset: 0x2e8, Size: 0x4]// 0x75a78875a0
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]// 0x75bca6f380
	int ShadowMapChannel;//[Offset: 0x2f0, Size: 0x4]// 0x75a7887610
	float MinRoughness;//[Offset: 0x2f8, Size: 0x4]// 0x75a7887680
	float ShadowResolutionScale;//[Offset: 0x2fc, Size: 0x4]// 0x75a78876f0
	int LightPriority;//[Offset: 0x300, Size: 0x4]// 0x75a7887760
	float ShadowBias;//[Offset: 0x304, Size: 0x4]// 0x75a78877d0
	float ShadowSharpen;//[Offset: 0x308, Size: 0x4]// 0x75a7887840
	float ContactShadowLength;//[Offset: 0x30c, Size: 0x4]// 0x75a78878b0
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]// 0x75bca6f400
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1]// 0x75bca6f480
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 0x1]// 0x75bca6f500
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310, Size: 0x1]// 0x75bca6f580
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x310, Size: 0x1]// 0x75bca6f600
	LightingChannels LightingChannels;//[Offset: 0x311, Size: 0x1]// 0x75bca6f680
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x318, Size: 0x8]// 0x75bca6f700
	Vector LightFunctionScale;//[Offset: 0x320, Size: 0xc]// 0x75bca6f780
	TextureLightProfile* IESTexture;//[Offset: 0x330, Size: 0x8]// 0x75bca6f800
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]// 0x75bca6f880
	float IESBrightnessScale;//[Offset: 0x33c, Size: 0x4]// 0x75a7887920
	float LightFunctionFadeDistance;//[Offset: 0x340, Size: 0x4]// 0x75a7887990
	float DisabledBrightness;//[Offset: 0x344, Size: 0x4]// 0x75a7887a00
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]// 0x75bca6f900
	float BloomScale;//[Offset: 0x34c, Size: 0x4]// 0x75a7887a70
	float BloomThreshold;//[Offset: 0x350, Size: 0x4]// 0x75a7887ae0
	Color BloomTint;//[Offset: 0x354, Size: 0x4]// 0x75bca6f980
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]// 0x75bca6fa00
	float RayStartOffsetDepthScale;//[Offset: 0x35c, Size: 0x4]// 0x75a7887b50
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x6e78578
	void SetTemperature(float NewTemperature);// 0x6e784fc
	void SetShadowBias(float NewValue);// 0x6e78480
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x6e78400
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x6e78384
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x6e78308
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x6e7828c
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x6e781cc
	void SetIntensity(float NewIntensity);// 0x6e78150
	void SetIndirectLightingIntensity(float NewIntensity);// 0x6e780d4
	void SetIESTexture(TextureLightProfile* NewValue);// 0x6e78058
	void SetEnableLightShaftBloom(bool bNewValue);// 0x6e77fd4
	void SetBloomTint(Color NewValue);// 0x6e77f5c
	void SetBloomThreshold(float NewValue);// 0x6e77ee0
	void SetBloomScale(float NewValue);// 0x6e77e64
	void SetAffectTranslucentLighting(bool bNewValue);// 0x6e77de0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x6e77d5c
	void ForceUpdateShadowState();// 0x6e77d48

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2b8, Size: 0x10]// 0x75bca70000
	float Brightness;//[Offset: 0x2c8, Size: 0x4]// 0x75a7887fb0
	float Intensity;//[Offset: 0x2cc, Size: 0x4]// 0x75a7888020
	Color LightColor;//[Offset: 0x2d0, Size: 0x4]// 0x75bca70080
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]// 0x75bca70100
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]// 0x75bca70180
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 0x1]// 0x75bca70200
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 0x1]// 0x75bca70280
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d4, Size: 0x1]// 0x75bca70300
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d4, Size: 0x1]// 0x75bca70380
	float IndirectLightingIntensity;//[Offset: 0x2d8, Size: 0x4]// 0x75a7888090
	float VolumetricScatteringIntensity;//[Offset: 0x2dc, Size: 0x4]// 0x75a7888100
	void SetCastVolumetricShadow(bool bNewValue);// 0x6e7adb4
	void SetCastShadows(bool bNewValue);// 0x6e7ad30
	LinearColor GetLightColor();// 0x6e7acf8

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0x11c, Size: 0x4]// 0x75a8261150
	float TextureMultiplier;//[Offset: 0x120, Size: 0x4]// 0x75a82611c0

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x510, Size: 0x8]// 0x75a827e980
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x75a827ea00
	void OnRep_bEnabled();// 0x6f18074

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2e0, Size: 0x1]// 0x75a827e280
	TextureCube* Cubemap;//[Offset: 0x2e8, Size: 0x8]// 0x75a827e300
	TextureCube* ProcessedCubemap;//[Offset: 0x2f0, Size: 0x8]// 0x75a827e380
	float SourceCubemapAngle;//[Offset: 0x2f8, Size: 0x4]// 0x75a82c4110
	int CubemapResolution;//[Offset: 0x2fc, Size: 0x4]// 0x75a82c4180
	float SkyDistanceThreshold;//[Offset: 0x300, Size: 0x4]// 0x75a82c41f0
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]// 0x75a827e400
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]// 0x75a827e480
	LinearColor LowerHemisphereColor;//[Offset: 0x308, Size: 0x10]// 0x75a827e500
	float OcclusionMaxDistance;//[Offset: 0x318, Size: 0x4]// 0x75a82c4260
	float Contrast;//[Offset: 0x31c, Size: 0x4]// 0x75a82c42d0
	float OcclusionExponent;//[Offset: 0x320, Size: 0x4]// 0x75a82c4340
	float MinOcclusion;//[Offset: 0x324, Size: 0x4]// 0x75a82c43b0
	Color OcclusionTint;//[Offset: 0x328, Size: 0x4]// 0x75a827e580
	byte OcclusionCombineMode;//[Offset: 0x32c, Size: 0x1]// 0x75a827e600
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3d8, Size: 0x8]// 0x75a827e680
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x6f18a0c
	void SetOcclusionTint(out const Color InTint);// 0x6f18984
	void SetOcclusionExponent(float InOcclusionExponent);// 0x6f18908
	void SetOcclusionContrast(float InOcclusionContrast);// 0x6f1888c
	void SetMinOcclusion(float InMinOcclusion);// 0x6f18810
	void SetLightColor(LinearColor NewLightColor);// 0x6f18794
	void SetIntensity(float NewIntensity);// 0x6f18718
	void SetIndirectLightingIntensity(float NewIntensity);// 0x6f1869c
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x6f185ac
	void SetCubemap(TextureCube* NewCubemap);// 0x6f18530
	void RecaptureSky();// 0x6f1851c

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x510, Size: 0x8]// 0x75a7898800

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x2b8, Size: 0x4]// 0x75a792f420
	float FogMultiplier;//[Offset: 0x2bc, Size: 0x4]// 0x75a792f490
	float DensityMultiplier;//[Offset: 0x2c0, Size: 0x4]// 0x75a792f500
	float DensityOffset;//[Offset: 0x2c4, Size: 0x4]// 0x75a792f570
	float DistanceScale;//[Offset: 0x2c8, Size: 0x4]// 0x75a792f5e0
	float AltitudeScale;//[Offset: 0x2cc, Size: 0x4]// 0x75a792f650
	float DistanceOffset;//[Offset: 0x2d0, Size: 0x4]// 0x75a792f6c0
	float GroundOffset;//[Offset: 0x2d4, Size: 0x4]// 0x75a792f730
	float StartDistance;//[Offset: 0x2d8, Size: 0x4]// 0x75a792f7a0
	float SunDiscScale;//[Offset: 0x2dc, Size: 0x4]// 0x75a792f810
	float DefaultBrightness;//[Offset: 0x2e0, Size: 0x4]// 0x75a792f880
	Color DefaultLightColor;//[Offset: 0x2e4, Size: 0x4]// 0x75a7898380
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]// 0x75a7898400
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]// 0x75a7898480
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x2ec, Size: 0x2c]// 0x75a7898500
	Texture2D* TransmittanceTexture;//[Offset: 0x318, Size: 0x8]// 0x75a7898580
	Texture2D* IrradianceTexture;//[Offset: 0x320, Size: 0x8]// 0x75a7898600
	void StartPrecompute();// 0x6d9ba14
	void SetSunMultiplier(float NewSunMultiplier);// 0x6d9b998
	void SetStartDistance(float NewStartDistance);// 0x6d9b91c
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0x6d9b82c
	void SetFogMultiplier(float NewFogMultiplier);// 0x6d9b7b0
	void SetDistanceScale(float NewDistanceScale);// 0x6d9b734
	void SetDistanceOffset(float NewDistanceOffset);// 0x6d9b6b8
	void SetDensityOffset(float NewDensityOffset);// 0x6d9b63c
	void SetDensityMultiplier(float NewDensityMultiplier);// 0x6d9b5c0
	void SetDefaultLightColor(LinearColor NewLightColor);// 0x6d9b544
	void SetDefaultBrightness(float NewBrightness);// 0x6d9b4c8
	void SetAltitudeScale(float NewAltitudeScale);// 0x6d9b44c
	void DisableSunDisk(bool NewSunDisk);// 0x6d9b3c8
	void DisableGroundScattering(bool NewGroundScattering);// 0x6d9b344

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0, Size: 0x4]// 0x75d100f6f0
	float DecayHeight;//[Offset: 0x4, Size: 0x4]// 0x75d100f760
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4]// 0x75d100f7d0
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4]// 0x75d100f840
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4]// 0x75d100f8b0
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4]// 0x75d100f920
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4]// 0x75d100f990
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4]// 0x75d100fa00
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4]// 0x75d100fa70
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4]// 0x75d100fae0
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4]// 0x75d100fb50

--------------------------------
Class: Editor_login_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x520, Size: 0x8]// 0x75948cb000
	void InitSplashUI();// 0xffffff8a17adf2b0
	void InpActEvt_Escape_K2Node_InputKeyEvent(Key Key);// 0xffffff8a17adf2b0
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0xffffff8a17adf2b0
	void ReceiveBeginPlay();// 0xffffff8a17adf2b0
	void ExecuteUbergraph_Editor_login(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue2, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, int CallFunc_GetDeviceLevel_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess3, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, Key K2Node_InputKeyEvent_Key, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess4, GameInstance* CallFunc_GetGameInstance_ReturnValue4, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess5, FrontendUtils* CallFunc_GetUtils_ReturnValue, bool CallFunc_UseStartupLevel_ReturnValue, Key K2Node_InputKeyEvent_Key2);// 0xffffff8a17adf2b0
	UAEUserWidget* loginWindow;//[Offset: 0x528, Size: 0x8]// 0x758993d400
	CameraActor* CameraActorLogin_ExecuteUbergraph_Editor_login_RefProperty;//[Offset: 0x530, Size: 0x8]// 0x7589691c80

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x1a8, Size: 0xd8]// 0x7611ee4790
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x2c0, Size: 0x8]// 0x7611ee4710
	UIMsgRouter* AssociatedUIMsgRouter;//[Offset: 0x2c8, Size: 0x8]// 0x7611ee4690
	bool StopRecordingReplayByType(enum ReplayType);// 0x492a724
	bool StartRecordingReplayByType(enum ReplayType, bool bSkipConditionCheck, enum RecordCondition, FString TargetName);// 0x492a5c4
	void StartLocalReplayContex();// 0x492a5b0
	void LocalReplayRecordingStop();// 0x492a59c
	void LocalReplayRecording(FString ReplayFile);// 0x492a518
	void LocalReplayPlaying(FString ReplayFile);// 0x492a494
	float GetWeatherTime();// 0x492a478
	int GetWeatherID();// 0x492a45c
	FString GetGameID();// 0x492a3d0
	int GetDeviceLevel();// 0x492a394
	FrontendHUD* GetAssociatedFrontendHUD();// 0x492a360
	void ClientStartLuaDebuger(bool bDebugDS, FString IP, int Port);// 0x492a250
	void AkEvents();// 0x492a23c
	void AkBanks();// 0x492a228

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 0x10]// 0x7611ee5180
	uint64 RoleID;//[Offset: 0x10, Size: 0x8]// 0x7611ee5110
	FString GameSvrId;//[Offset: 0x18, Size: 0x10]// 0x7611ee50a0
	FString GameAppID;//[Offset: 0x28, Size: 0x10]// 0x7611ee5030
	int8 AreaID;//[Offset: 0x38, Size: 0x1]// 0x7611ee4fc0
	int8 PlatID;//[Offset: 0x39, Size: 0x1]// 0x7611ee4f50
	FString ZoneID;//[Offset: 0x40, Size: 0x10]// 0x7611ee4ee0
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]// 0x7611ee4e70
	uint64 GameID;//[Offset: 0x58, Size: 0x8]// 0x7611ee4e00
	FString BattleServerIP;//[Offset: 0x60, Size: 0x10]// 0x7611ee4d90
	uint32 BattleServerPort;//[Offset: 0x70, Size: 0x4]// 0x7611ee4d20
	FString UserName;//[Offset: 0x78, Size: 0x10]// 0x7611ee4cb0
	FString PicURL;//[Offset: 0x88, Size: 0x10]// 0x7611ee4c40
	uint32 PlayerKey;//[Offset: 0x98, Size: 0x4]// 0x7611ee4bd0
	int SubModeId;//[Offset: 0x9c, Size: 0x4]// 0x7611ee4b60
	int8 WeatherID;//[Offset: 0xa4, Size: 0x1]// 0x7611ee4af0
	FString WeatherLevelName;//[Offset: 0xa8, Size: 0x10]// 0x7611ee4a80
	float WeatherTime;//[Offset: 0xb8, Size: 0x4]// 0x7611ee4a10
	int[] MrpcsData;//[Offset: 0xc0, Size: 0x10]// 0x7611ee4920
	uint32 loginChannel;//[Offset: 0xd4, Size: 0x4]// 0x7611ee48b0

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x40, Size: 0x8]// 0x75a87abb80
	FString FrontendUtilsClassName;//[Offset: 0x50, Size: 0x10]// 0x75a7b29540
	FrontendUtils* Utils;//[Offset: 0x60, Size: 0x8]// 0x75a87abc00
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x68, Size: 0x10]// 0x75a87abd00
	<FName,LogicManagerBase*> LogicManagerMap;//[Offset: 0x78, Size: 0x50]// 0x75a7b33d40
	int UnusedWidgetMinCount;//[Offset: 0xc8, Size: 0x4]// 0x75a7b29620
	int UnusedWidgetMaxCount;//[Offset: 0xcc, Size: 0x4]// 0x75a7b29690
	int UnusedWidgetKeepTime;//[Offset: 0xd0, Size: 0x4]// 0x75a7b29700
	FName CurrentGameStatus;//[Offset: 0xe8, Size: 0x8]// 0x75a7b29770
	FName PendingGameStatus;//[Offset: 0xf0, Size: 0x8]// 0x75a7b297e0
	FName FromGameStatus;//[Offset: 0xf8, Size: 0x8]// 0x75a7b29850
	FString LatestGameStatusURL;//[Offset: 0x108, Size: 0x10]// 0x75a7b298c0
	World* CurrentGameStatusWorld;//[Offset: 0x168, Size: 0x8]// 0x75a87abe00
	FrontendHUDExtension* Extension;//[Offset: 0x170, Size: 0x8]// 0x75a87abe80
	void UninstallExtension();// 0x6fc63f8
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x6fc632c
	void OnWidgetAnimationFinished(FString AnimName);// 0x6fc62a0
	void OnPreLoadMap(FString MapName);// 0x6fc6214
	void OnPostLoadMapWithWorld(World* World);// 0x6fc6190
	void OnLoadMapWorldCleanup(FString MapName);// 0x6fc6104
	void OnGameViewportClientCreated();// 0x6fc60f0
	void OnClientGameModeStartPlay(FString GameModeName);// 0x6fc6064
	World* GetWorld();// 0x6fc6028
	FrontendUtils* GetUtils();// 0x6fc5ff4
	PlayerController* GetPlayerController();// 0x6fc5fc0
	LogicManagerBase*[] GetLogicManagerList();// 0x6fc5f3c
	LogicManagerBase* GetLogicManagerByName(FName LogicManagerTagName);// 0x6fc5eb0
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x6fc5e24
	GameViewportClient* GetGameViewportClient();// 0x6fc5df0
	GameMode* GetGameMode();// 0x6fc5dbc
	GameInstance* GetGameInstance();// 0x6fc5d88
	FrontendHUDExtension* GetExtension();// 0x6fc5d54
	FrontendHUDExtension* ExtendHUD(class Object InClass);// 0x6fc5cc8
	void ClearLogicManagerByName(FString managerName);// 0x6fc5c44
	void BroadcastMsgWithTarget(FString strMsg, FString module, out const FName TargetName);// 0x6fc5b20
	void BroadCastMSG(FString strMsg, FString module);// 0x6fc5a48

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 0x8]// 0x75a87a5780
	FName CurrentSceneCameraName;//[Offset: 0x48, Size: 0x8]// 0x75a7b22a80
	CameraActor*[] SceneCameraList;//[Offset: 0x50, Size: 0x10]// 0x75a87a5880
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x60, Size: 0x50]// 0x75a8796c40
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0xb0, Size: 0x10]// 0x75a87a5a00
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0xc0, Size: 0x50]// 0x75a8796d00
	PointLight*[] ScenePointLightList;//[Offset: 0x110, Size: 0x10]// 0x75a87a5b80
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0x120, Size: 0x50]// 0x75a8796dc0
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x170, Size: 0x50]// 0x75a8796e80
	<FName,Actor*> SceneMatChangeableMeshMap;//[Offset: 0x1c0, Size: 0x50]// 0x75a8796f40
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x278, Size: 0x10]// 0x75a7b22d20
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x288, Size: 0x8]// 0x75a87a5d80
	Object* GlobalUIEventDispatcher;//[Offset: 0x290, Size: 0x8]// 0x75a87a5e00
	FString GlobalUIContainerClassName;//[Offset: 0x298, Size: 0x10]// 0x75a7b22d90
	FName[] GlobalUIContainerNames;//[Offset: 0x2a8, Size: 0x10]// 0x75a87a5e80
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x2b8, Size: 0x50]// 0x75a8797000
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x308, Size: 0x10]// 0x75a87a6000
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x318, Size: 0x50]// 0x75a87970c0
	void UnRegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x6fc7ec0
	void SwitchSceneCameraToTransform(Transform TargetTrans, byte ProjectionMode, float FOV, float BlendTime, bool bForce);// 0x6fc7d20
	void SwitchSceneCamera(FName SceneCameraName, float BlendTime, bool bForce);// 0x6fc7c24
	void SetSceneSkyLightProperty(FName sceneLightName, Transform TargetTrans, float Intensity, LinearColor Color);// 0x6fc7acc
	void SetScenePointLightProperty(FName sceneLightName, Transform TargetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x6fc78fc
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform TargetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x6fc7764
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x6fc76b0
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x6fc75fc
	void RegisterSceneMatChangeableMesh(FName MeshName, Actor* Mesh);// 0x6fc7548
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x6fc7494
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x6fc73e0
	void PopAllPushedUI();// 0x6fc73cc
	void OnAllSceneCamerasRegistered();// 0x6fc73b0
	bool IsSameCamera(Transform TargetTrans, byte ProjectionMode, float FOV);// 0x6fc7278
	bool IsPushedPanel(out const FName managerName);// 0x6fc71d8
	bool IsPopping();// 0x6fc71a0
	void HideAllOtherPanelExceptOwnThisWidget(const Widget* Widget, bool Hide);// 0x6fc70e0
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x6fc6ffc
	FString GetUIStackTopSrcTag();// 0x6fc6f7c
	FString GetUIStackTopDstTag();// 0x6fc6efc
	FString GetUIStackTop();// 0x6fc6e7c
	Actor* GetSceneMatChangeableMeshByIdx(FName MeshName);// 0x6fc6df0
	int GetPushedUICount();// 0x6fc6dbc
	FrontendHUD* GetOwningFrontendHUD();// 0x6fc6d88
	Object* GetGlobalUIEventDispatcher();// 0x6fc6d54
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x6fc6cc8
	CameraActor* GetCurrentSceneCamera();// 0x6fc6c94
	void ClearLobbyAsset();// 0x6fc6c80

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x520, Size: 0x8]// 0x75a8297780
	void SetRadius(float NewRadius);// 0x6ee7854
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x6ee77d8

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x3ec, Size: 0x4]// 0x75a82c7360
	float AttenuationRadius;//[Offset: 0x3f0, Size: 0x4]// 0x75a82c73d0
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 0x1]// 0x75a8297400
	float LightFalloffExponent;//[Offset: 0x3f8, Size: 0x4]// 0x75a82c7440
	float SourceRadius;//[Offset: 0x3fc, Size: 0x4]// 0x75a82c74b0
	float SoftSourceRadius;//[Offset: 0x400, Size: 0x4]// 0x75a82c7520
	float SourceLength;//[Offset: 0x404, Size: 0x4]// 0x75a82c7590
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 0x1]// 0x75a8297480
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x408, Size: 0x1]// 0x75a8297500
	float RectLightSourceWidth;//[Offset: 0x40c, Size: 0x4]// 0x75a82c7600
	float RectLightSourceHeight;//[Offset: 0x410, Size: 0x4]// 0x75a82c7670
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x414, Size: 0x1]// 0x75a8297580
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x418, Size: 0xc]// 0x75a8297600
	void SetSourceRadius(float bNewValue);// 0x6ee80f8
	void SetSourceLength(float NewValue);// 0x6ee807c
	void SetSoftSourceRadius(float bNewValue);// 0x6ee8000
	void SetSimulateRectLight(bool NewValue);// 0x6ee7f7c
	void SetSimulatePortalLight(bool NewValue);// 0x6ee7ef8
	void SetRectLightSourceWidth(float NewValue);// 0x6ee7e7c
	void SetRectLightSourceHeight(float NewValue);// 0x6ee7e00
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x6ee7d84
	void SetAttenuationRadius(float NewRadius);// 0x6ee7d08

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]// 0x75d0a85940
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]// 0x75d0a859b0
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75d0a8be00

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UAEUserWidget*[] WidgetList;//[Offset: 0x458, Size: 0x10]// 0x75a824f680
	void RemoveWidgetInternal(UAEUserWidget* Widget);// 0x6fcdea4
	void RemoveWidget(UAEUserWidget* Widget);// 0x6fcde28
	void AddWidgetInternal(UAEUserWidget* Widget);// 0x6fcdda4
	void AddWidget(UAEUserWidget* Widget);// 0x6fcdd28

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x258, Size: 0x8]// 0x75c98fa680
	LogicManagerBase* OwningLogicManager;//[Offset: 0x260, Size: 0x8]// 0x75c98fa700
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x268, Size: 0x8]// 0x75c98fa780
	UAEUserWidget* ParentWidget;//[Offset: 0x270, Size: 0x8]// 0x75c98fa800
	Property*[] Params;//[Offset: 0x320, Size: 0x10]// 0x75c98fa900
	FName IndexName;//[Offset: 0x340, Size: 0x8]// 0x75c991c530
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x348, Size: 0x28]// 0x75c98fa980
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x370, Size: 0x28]// 0x75c98faa00
	bool bLimitTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]// 0x75c98faa80
	float TickRate;//[Offset: 0x39c, Size: 0x4]// 0x75c991c5a0
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]// 0x75c98fab00
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]// 0x75c98fab80
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1]// 0x75c98fac00
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1]// 0x75c98fac80
	bool bConsiderPawnStateChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]// 0x75c98fad00
	bool needCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 0x1]// 0x75c98fad80
	Vector2D ScreenPos;//[Offset: 0x3b0, Size: 0x8]// 0x75c98fae00
	Vector2D LastMouseEventScreenPos;//[Offset: 0x3b8, Size: 0x8]// 0x75c98fae80
	delegate OnMouseButtonDownHandler;//[Offset: 0x3c0, Size: 0x10]// 0x75c98faf00
	delegate OnMouseButtonUpHandler;//[Offset: 0x3d0, Size: 0x10]// 0x75c98faf80
	FString WidgetTlogName;//[Offset: 0x3e0, Size: 0x10]// 0x75c991c610
	bool bEnableDestroyStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]// 0x75c98fb000
	bool bApplyDestroyStrategyLowDeviceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 0x1]// 0x75c98fb080
	float CheckDestroyTime;//[Offset: 0x3f4, Size: 0x4]// 0x75c991c680
	enum FadingStatus;//[Offset: 0x411, Size: 0x1]// 0x75c98fb180
	float CurrentOpacity;//[Offset: 0x414, Size: 0x4]// 0x75c991c6f0
	float FadingInTime;//[Offset: 0x418, Size: 0x4]// 0x75c991c760
	float FadingOutTime;//[Offset: 0x41c, Size: 0x4]// 0x75c991c7d0
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]// 0x75c98fb200
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]// 0x75c98fb280
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1]// 0x75c98fb300
	int StandWidth;//[Offset: 0x424, Size: 0x4]// 0x75c991c840
	int StandHeight;//[Offset: 0x428, Size: 0x4]// 0x75c991c8b0
	bool bReceiveOnTouchBeganEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]// 0x75c98fb380
	bool bReceiveOnTouchEndedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 0x1]// 0x75c98fb400
	Object* AssociatedDataObject;//[Offset: 0x450, Size: 0x8]// 0x75c98fb480
	bool Visible();// 0x6fcc150
	void UnRegistTouchEvent();// 0x6fcc13c
	void UnRegistFromGameFrontendHUD();// 0x6fcc120
	void SynchronizeBlueprintProperties();// 0xffffff8a17adf2b0
	void Show();// 0x6fcc10c
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x6fcc090
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x6fcc014
	void SetAssociatedObject(Object* AssociatedObj);// 0x6fcbf90
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x6fcbe64
	void RespawnInitWidget();// 0x6fcbe48
	void RegistTouchEvent();// 0x6fcbe34
	void RegistToGameFrontendHUD();// 0x6fcbe18
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x6fcbd58
	void ReceiveShow();// 0xffffff8a17adf2b0
	void ReceivePreDestroy();// 0xffffff8a17adf2b0
	void ReceiveHide();// 0xffffff8a17adf2b0
	void ReceivedNetObjEvent(FString NetObj);// 0xffffff8a17adf2b0
	void ReceivedInitWidget();// 0xffffff8a17adf2b0
	void PostLocalMainCharInitialized(PlayerController* InPlayerController);// 0xffffff8a17adf2b0
	void PostInitWidget();// 0xffffff8a17adf2b0
	void OnViewportTouchEnded(int touchIndex, Vector2D touchLocation);// 0x6fcbc9c
	void OnViewportTouchBegan(int touchIndex, Vector2D touchLocation);// 0x6fcbbe0
	void OnSetAssociatedObject();// 0xffffff8a17adf2b0
	void OnRightClicked(Vector2D TempScreenPos);// 0xffffff8a17adf2b0
	void OnFadeOutFinished();// 0x6fcbbc4
	void OnFadeInFinished();// 0x6fcbba8
	void OnDoubleClicked(Vector2D TempScreenPos);// 0xffffff8a17adf2b0
	void OnClicked(Vector2D TempScreenPos);// 0xffffff8a17adf2b0
	void OnApplyDestroyStrategy();// 0x6fcbb8c
	static void InvalidateAllWidgets();// 0x6fcbb78
	void InitWidget(bool Recursive, bool DynamicCreation, bool TopWidget);// 0x6fcba64
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x6fcb9a8
	void Hide();// 0x6fcb994
	void HandleUIMessageBattle(FString UIMessage);// 0x6fcb910
	void HandleUIMessage(FString UIMessage);// 0x6fcb88c
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains, bool bUseStartWith);// 0x6fcb724
	static <FName,int> GetUsrWidgetOpenFrequency();// 0x6fcb6ec
	Margin GetUIAdaptation();// 0x6fcb6b4
	UAEUserWidget* GetParentWidget();// 0x6fcb680
	PlayerController* GetOwningPlayer();// 0x6fcb644
	LogicManagerBase* GetOwningLogicManager();// 0x6fcb610
	FrontendHUD* GetOwningFrontendHUD();// 0x6fcb5dc
	FName GetOwnerModuleName();// 0x6fcb5a4
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x6fcb518
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x6fcb408
	UserWidget* GetChildWidget(FString WName);// 0x6fcb374
	Object* GetAssociatedObject();// 0x6fcb338
	static void ClearUsrWidgetOpenFrequency();// 0x6fcb324
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x6fcb2a0
	void ClearFunctionCache();// 0x6fcb28c
	void BP_DestroyWidget();// 0x6fcb278
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x6fcb1bc
	void AddUIFunctionToParent(FString UIMessage, Widget* Child);// 0x6fcb0f8
	void AddAllUIFunctionToParent(Widget* Child);// 0x6fcb07c

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x38, Size: 0x8]// 0x75a87aca80
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x75a87acb00
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x75a87acb80
	bool bUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]// 0x75a87acc00
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]// 0x75a87acc80
	int iUIControlState;//[Offset: 0x48, Size: 0x4]// 0x75a7b2a110
	int DefaultSceneCameraIndex;//[Offset: 0x4c, Size: 0x4]// 0x75a7b2a180
	int SceneCameraBlendTime;//[Offset: 0x50, Size: 0x4]// 0x75a7b2a1f0
	int DefaultSceneInfoIdx;//[Offset: 0x54, Size: 0x4]// 0x75a7b2a260
	FName[] GameStatusList;//[Offset: 0x68, Size: 0x10]// 0x75a87acd00
	class Object[] WidgetUClassList;//[Offset: 0xf8, Size: 0x10]// 0x75a87ace00
	<FString,class Object> ReplaceUClassList;//[Offset: 0x108, Size: 0x50]// 0x75a7b35240
	UAEUserWidget*[] WidgetList;//[Offset: 0x158, Size: 0x10]// 0x75a87acf80
	<FName,WidgetsMapList> WidgetsMap;//[Offset: 0x1b8, Size: 0x50]// 0x75a7b35300
	<FString,UAEUserWidget*> SingleWidgetMap;//[Offset: 0x208, Size: 0x50]// 0x75a7b353c0
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x6fc9450
	bool IsEnableRemoveDynamicWidgets();// 0x6fc9418
	int GetSceneCameraBlendTime();// 0x6fc93e4
	FrontendHUD* GetOwningFrontendHUD();// 0x6fc93b0
	int GetDefaultSceneCamera();// 0x6fc937c
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x6fc9280
	void ClearUIMessageCache(out const FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x6fc9168

--------------------------------
Class: WidgetsMapList
	UAEUserWidget*[] Widgets;//[Offset: 0x0, Size: 0x10]// 0x75c9974e00

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 0x10]// 0x760d282ae0
	FName ContainerName;//[Offset: 0x10, Size: 0x8]// 0x760d282b50
	int ZOrder;//[Offset: 0x18, Size: 0x4]// 0x760d282bc0
	UAEUserWidget* Widget;//[Offset: 0x20, Size: 0x8]// 0x75c9974c80

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x6ca, Size: 0x1]// 0x75b4dd9680
	enum TimingPolicy;//[Offset: 0x6cb, Size: 0x1]// 0x75b4dd9780
	class UserWidget* WidgetClass;//[Offset: 0x6d0, Size: 0x8]// 0x75b4dd9800
	IntPoint DrawSize;//[Offset: 0x6d8, Size: 0x8]// 0x75b4dd9880
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]// 0x75b4dd9900
	bool bCheckLowDeviceQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 0x1]// 0x75b4dd9980
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e2, Size: 0x1]// 0x75b4dd9a00
	float RedrawTime;//[Offset: 0x6e4, Size: 0x4]// 0x75b4e068f0
	IntPoint CurrentDrawSize;//[Offset: 0x6f0, Size: 0x8]// 0x75b4dd9a80
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]// 0x75b4dd9b00
	Vector2D Pivot;//[Offset: 0x6fc, Size: 0x8]// 0x75b4dd9b80
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]// 0x75b4dd9c00
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705, Size: 0x1]// 0x75b4dd9c80
	LocalPlayer* OwnerPlayer;//[Offset: 0x708, Size: 0x8]// 0x75b4dd9d00
	LinearColor BackgroundColor;//[Offset: 0x710, Size: 0x10]// 0x75b4dd9d80
	LinearColor TintColorAndOpacity;//[Offset: 0x720, Size: 0x10]// 0x75b4dd9e00
	float OpacityFromTexture;//[Offset: 0x730, Size: 0x4]// 0x75b4e06960
	enum BlendMode;//[Offset: 0x734, Size: 0x1]// 0x75b4dd9f00
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 0x1]// 0x75b4dd9f80
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 0x1]// 0x75b4dda000
	UserWidget* Widget;//[Offset: 0x738, Size: 0x8]// 0x75b4dda080
	BodySetup* BodySetup;//[Offset: 0x760, Size: 0x8]// 0x75b4dda100
	MaterialInterface* TranslucentMaterial;//[Offset: 0x768, Size: 0x8]// 0x75b4dda180
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x770, Size: 0x8]// 0x75b4dda200
	MaterialInterface* OpaqueMaterial;//[Offset: 0x778, Size: 0x8]// 0x75b4dda280
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x780, Size: 0x8]// 0x75b4dda300
	MaterialInterface* MaskedMaterial;//[Offset: 0x788, Size: 0x8]// 0x75b4dda380
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x790, Size: 0x8]// 0x75b4dda400
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x798, Size: 0x8]// 0x75b4dda480
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x7a0, Size: 0x8]// 0x75b4dda500
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]// 0x75b4dda580
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 0x1]// 0x75b4dda600
	FName SharedLayerName;//[Offset: 0x7b0, Size: 0x8]// 0x75b4e069d0
	int LayerZOrder;//[Offset: 0x7b8, Size: 0x4]// 0x75b4e06a40
	enum GeometryMode;//[Offset: 0x7bc, Size: 0x1]// 0x75b4dda700
	float CylinderArcAngle;//[Offset: 0x7c0, Size: 0x4]// 0x75b4e06ab0
	Vector FlipVector;//[Offset: 0x7c4, Size: 0xc]// 0x75b4dda780
	void SetWidget(UserWidget* Widget);// 0x60c85a8
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x60c852c
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x60c84b0
	void SetDrawSize(Vector2D Size);// 0x60c8438
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x60c83bc
	void RequestRedraw();// 0x60c83a0
	UserWidget* GetUserWidgetObject();// 0x60c836c
	TextureRenderTarget2D* GetRenderTarget();// 0x60c8338
	LocalPlayer* GetOwnerPlayer();// 0x60c8304
	MaterialInstanceDynamic* GetMaterialInstance();// 0x60c82d0
	Vector2D GetDrawSize();// 0x60c829c
	void ForceWidgetUpdateImmediate();// 0x60c8288
	void ForceUpdateRenderTarget();// 0x60c8274

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xe0, Size: 0x4]// 0x75a788a7f0
	int SizeY;//[Offset: 0xe4, Size: 0x4]// 0x75a788a860
	LinearColor ClearColor;//[Offset: 0xe8, Size: 0x10]// 0x75a788f700
	byte AddressX;//[Offset: 0xf8, Size: 0x1]// 0x75a788f780
	byte AddressY;//[Offset: 0xf9, Size: 0x1]// 0x75a788f800
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1]// 0x75a788f880
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 0x1]// 0x75a788f900
	byte RenderTargetFormat;//[Offset: 0xfb, Size: 0x1]// 0x75a788f980
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]// 0x75a788fa00
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]// 0x75a788fa80
	byte OverrideFormat;//[Offset: 0xfd, Size: 0x1]// 0x75a788fb00

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xd8, Size: 0x4]// 0x75a788a8d0

--------------------------------
Class: Image.Widget.Visual.Object
	Object* BrushImage;//[Offset: 0x130, Size: 0x28]// 0x76120e9160
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x76120e90e0
	SoftObjectPath BrushAssetReference;//[Offset: 0x160, Size: 0x18]// 0x76120e9060
	SlateBrush Brush;//[Offset: 0x190, Size: 0x78]// 0x76120e8fe0
	delegate BrushDelegate;//[Offset: 0x208, Size: 0x10]// 0x76120e8f60
	LinearColor ColorAndOpacity;//[Offset: 0x218, Size: 0x10]// 0x76120e8ee0
	delegate ColorAndOpacityDelegate;//[Offset: 0x228, Size: 0x10]// 0x76120e8e60
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]// 0x76120e8de0
	float HitTestAreaRadius;//[Offset: 0x23c, Size: 0x4]// 0x76120e8d70
	delegate OnMouseButtonDownEvent;//[Offset: 0x240, Size: 0x10]// 0x76120e8cf0
	void SetOpacity(float InOpacity);// 0x60a0018
	void SetColorRGBStr(FString HexString);// 0x609ff94
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x609ff18
	void SetBrushImageReferenceWithMatchSize(SoftObjectPath AssetReference, bool bMatchSize);// 0x609fdf4
	void SetBrushImageReferenceWithColor(SoftObjectPath AssetReference, LinearColor Color, bool bMatchSize);// 0x609fc94
	void SetBrushImageReference(SoftObjectPath AssetReference);// 0x609fbb4
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x609faf4
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x609fa34
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x609f9b8
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x609f93c
	void SetBrush(out const SlateBrush InBrush);// 0x609f7ec
	void OnAsyncLoadImageAssetComplete();// 0x609f7d8
	void OnAsyncLoadAssetComplete();// 0x609f7c4
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x609f790

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xe0, Size: 0x1]// 0x75a8277e80

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x78]// 0x75a827e200

--------------------------------
Class: FrontendHUDExtension.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x5a8, Size: 0x8]// 0x7611d8c0e0
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b0, Size: 0x1]// 0x7611d8c060
	int NumSpectators;//[Offset: 0x5b4, Size: 0x4]// 0x7611d8bff0
	int NumPlayers;//[Offset: 0x5b8, Size: 0x4]// 0x7611d8bf80
	int NumBots;//[Offset: 0x5bc, Size: 0x4]// 0x7611d8bf10
	float MinRespawnDelay;//[Offset: 0x5c0, Size: 0x4]// 0x7611d8bea0
	int NumTravellingPlayers;//[Offset: 0x5c4, Size: 0x4]// 0x7611d8be30
	class LocalMessage* EngineMessageClass;//[Offset: 0x5c8, Size: 0x8]// 0x7611d8bdb0
	PlayerState*[] InactivePlayerArray;//[Offset: 0x5d0, Size: 0x10]// 0x7611d8bcb0
	float InactivePlayerStateLifeSpan;//[Offset: 0x5e0, Size: 0x4]// 0x7611d8bc40
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]// 0x7611d8bbc0
	void StartMatch();// 0x6df9f44
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x6df9ec0
	void Say(FString Msg);// 0x6df9e34
	void RestartGame();// 0x6df9e18
	bool ReadyToStartMatch();// 0x6df9dd8
	bool ReadyToEndMatch();// 0x6df9d98
	void K2_OnSetMatchState(FName NewState);// 0xffffff8a17adf2b0
	bool IsMatchInProgress();// 0x6df9d58
	bool HasMatchEnded();// 0x6df9d18
	FName GetMatchState();// 0x6df9cfc
	void EndMatch();// 0x6df9ce0
	void AbortMatch();// 0x6df9cc4

--------------------------------
Class: UIMsgRouter.GameMsgRouter.BlueprintFunctionLibrary.Object
	static void UnRegistUIMsgListener(const FString InMsgName, const Object* InMsgLisenter);// 0x493acfc
	static void RouteUIMsg_8Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6, int Param7, int Param8);// 0x493ab44
	static void RouteUIMsg_7Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6, int Param7);// 0x493a98c
	static void RouteUIMsg_6Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6);// 0x493a7d4
	static void RouteUIMsg_5Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5);// 0x493a61c
	static void RouteUIMsg_4Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4);// 0x493a464
	static void RouteUIMsg_3Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3);// 0x493a2ac
	static void RouteUIMsg_2Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2);// 0x493a054
	static void RouteUIMsg_1Param(const Object* WorldContextObj, FString InMsgName, int param1);// 0x4939eac
	static void RouteUIMsg(const Object* WorldContextObj, FString InMsgName);// 0x4939df0
	static bool RegistUIMsgListener(FString InMsgName, const Object* InMsgLisenter, const FString InMsgCallbackFuncName, const bool bInLogMsgCall);// 0x4939c40

--------------------------------
Class: GameMsgRouter.BlueprintFunctionLibrary.Object
	<FString,GameMsgListenerGroup*> MsgListenerGroupMap;//[Offset: 0x28, Size: 0x50]// 0x75a7b69740
	void UnRegistMsgListener(FString InMsgName, const Object* InMsgLisenter);// 0x4914ad0
	bool RouteMsg(FString InMsgName);// 0x4914a38
	bool RegistMsgListener(const FString InMsgName, const Object* InMsgLisenter, const FString InMsgCallbackFuncName, const bool bInLogMsgCall);// 0x4914838

--------------------------------
Class: GameMsgListenerGroup.Object
	FString MsgName;//[Offset: 0x28, Size: 0x10]// 0x75a7b8c720
	MsgListenerMeta[] MsgListenerGroup;//[Offset: 0x38, Size: 0x10]// 0x75a7b59400
	Object* CurFrameMsgListenerObj;//[Offset: 0x48, Size: 0x8]// 0x75a7b59480

--------------------------------
Class: MsgListenerMeta
	FName MsgCallbackFuncName;//[Offset: 0x0, Size: 0x8]// 0x76119be850
	Object* MsgListenerObj;//[Offset: 0xc, Size: 0x8]// 0x760d23e380

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x2d8, Size: 0x10]// 0x7611ef5ac0
	delegate OnUserMsaaSettingChanged;//[Offset: 0x2e8, Size: 0x10]// 0x7611ef5a40
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x2f8, Size: 0x10]// 0x7611ef59c0
	delegate OnReplayBeginRecordingDelegate;//[Offset: 0x308, Size: 0x10]// 0x7611ef5940
	delegate OnReplayLivePreLoadMapPendingFinish;//[Offset: 0x318, Size: 0x10]// 0x7611ef58c0
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x358, Size: 0xc]// 0x7611ef5840
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x364, Size: 0xc]// 0x7611ef57c0
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x370, Size: 0xc]// 0x7611ef5740
	UserDetailSetting UserDetailSetting;//[Offset: 0x37c, Size: 0x78]// 0x7611ef48e0
	RenderQualitySettings renderQualitySettingsLastSetTA;//[Offset: 0x3f4, Size: 0xc]// 0x7611ef4860
	RenderQualitySettings renderQualitySettingsInitTA;//[Offset: 0x400, Size: 0xc]// 0x7611ef47e0
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]// 0x7611ef4760
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 0x1]// 0x7611ef46e0
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 0x1]// 0x7611ef4660
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 0x1]// 0x7611ef45e0
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]// 0x7611ef4560
	bool bUseUGCSwitchesInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1]// 0x7611ef44e0
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x418, Size: 0x10]// 0x7611ef3f70
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x428, Size: 0x10]// 0x7611ef3e70
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x438, Size: 0x10]// 0x7611ef3d70
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x448, Size: 0x10]// 0x7611ef3c70
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x458, Size: 0x10]// 0x7611ef3b70
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x468, Size: 0x10]// 0x7611ef3a70
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x478, Size: 0x10]// 0x7611ef3970
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x488, Size: 0x10]// 0x7611ef3870
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x498, Size: 0x10]// 0x7611ef3770
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x4a8, Size: 0x10]// 0x7611ef3670
	RenderItem[] TournamentMobileHDROpenConfig;//[Offset: 0x4b8, Size: 0x10]// 0x7611ef3570
	RenderItem[] TournamentMobileHDRCloseConfig;//[Offset: 0x4c8, Size: 0x10]// 0x7611ef3470
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x4d8, Size: 0x10]// 0x7611ef3370
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x4e8, Size: 0x10]// 0x7611ef3270
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x4f8, Size: 0x10]// 0x7611ef3170
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x508, Size: 0x10]// 0x7611ef3070
	RenderItem[] TournamentMobileUltralHighOpenConfig;//[Offset: 0x518, Size: 0x10]// 0x7611ef2f70
	RenderItem[] TournamentMobileUltralHighCloseConfig;//[Offset: 0x528, Size: 0x10]// 0x7611ef2e70
	bool bEnhanceMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]// 0x7611ef2df0
	RenderItem[] MobileEnhanceOpenConfig;//[Offset: 0x540, Size: 0x10]// 0x7611ef2cf0
	RenderItem[] MobileEnhanceCloseConfig;//[Offset: 0x550, Size: 0x10]// 0x7611ef2bf0
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x560, Size: 0x10]// 0x7611ef2af0
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x570, Size: 0x10]// 0x7611ef29f0
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x580, Size: 0x10]// 0x7611ef28f0
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x590, Size: 0x10]// 0x7611ef27f0
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x5a0, Size: 0x10]// 0x7611ef26f0
	RenderItem[] TournamentMobilePPOpenConfig;//[Offset: 0x5b0, Size: 0x10]// 0x7611ef25f0
	RenderItem[] TournamentMobilePPCloseConfig;//[Offset: 0x5c0, Size: 0x10]// 0x7611ef24f0
	FString[] RePairDeleteDir;//[Offset: 0x5d0, Size: 0x10]// 0x7611ef2400
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x5e0, Size: 0x10]// 0x7611ef1cb0
	RenderItem[] HighLevelSequenceOpenConfig;//[Offset: 0x5f0, Size: 0x10]// 0x7611ef1bb0
	RenderItem[] MiddleLevelSequenceOpenConfig;//[Offset: 0x600, Size: 0x10]// 0x7611ef1ab0
	RenderItem[] LowLevelSequenceOpenConfig;//[Offset: 0x610, Size: 0x10]// 0x7611ef19b0
	RenderItem[] HighLevelSequenceCloseConfig;//[Offset: 0x620, Size: 0x10]// 0x7611ef18b0
	RenderItem[] MiddleLevelSequenceCloseConfig;//[Offset: 0x630, Size: 0x10]// 0x7611ef17b0
	RenderItem[] LowLevelSequenceCloseConfig;//[Offset: 0x640, Size: 0x10]// 0x7611ef16b0
	RenderItem[] CachedDifferentCommand;//[Offset: 0x650, Size: 0x10]// 0x7611ef15b0
	RemoteDecorator ObjectDecorator;//[Offset: 0x660, Size: 0x50]// 0x7611ef0be0
	bool AutoTestTriggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]// 0x7611ef0b60
	FString DeviceNum4WebGM;//[Offset: 0x6b8, Size: 0x10]// 0x7611ef0af0
	FString CustomLineStr;//[Offset: 0x6c8, Size: 0x10]// 0x7611ef0a80
	Vector2D FOVRange;//[Offset: 0x6d8, Size: 0x8]// 0x7611ef0a00
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x6e0, Size: 0x8]// 0x7611ef0980
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]// 0x7611ef0900
	float SwimRotateX;//[Offset: 0x6ec, Size: 0x4]// 0x7611ef0890
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0, Size: 0x1]// 0x7611ef0810
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x710, Size: 0x8]// 0x7611ef0790
	DeathPlayback* DeathPlayback;//[Offset: 0x718, Size: 0x8]// 0x7611ef0710
	Replay_SkeletalData_Manager* SkeletalDataManager;//[Offset: 0x720, Size: 0x8]// 0x7611ef0690
	ReplayCameraDataManager* ReplayCameraDataManager;//[Offset: 0x728, Size: 0x8]// 0x7611ef0610
	AssetRefStrategicManager* AssetRefStrategicManager;//[Offset: 0x730, Size: 0x8]// 0x7611ef0590
	CompletePlayback* CompletePlayback;//[Offset: 0x738, Size: 0x8]// 0x7611ef0510
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x740, Size: 0x8]// 0x7611ef0490
	ObPlayback* ObPlayback;//[Offset: 0x748, Size: 0x8]// 0x7611ef0410
	LivePlayback* LivePlayback;//[Offset: 0x750, Size: 0x8]// 0x7611ef0390
	AntiCheatConfig* ACConfig;//[Offset: 0x7c0, Size: 0x8]// 0x7611ef0310
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x7d8, Size: 0x8]// 0x7611ef0290
	AvatarVisibilityCollection* AvatarVisibilityCollection;//[Offset: 0x7e0, Size: 0x8]// 0x7611ef0210
	FString AvatarVisibilityCollectionClassPath;//[Offset: 0x7e8, Size: 0x10]// 0x7611ef01a0
	<class Object,FrequncyAccessActorList> FrequencyAccessActorMap;//[Offset: 0x7f8, Size: 0x50]// 0x7611eefe50
	ObjectPoolConfig[] ObjectPoolConfigs;//[Offset: 0x848, Size: 0x10]// 0x7611eefa80
	bool bOpenStartupLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]// 0x7611eefa00
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x85c, Size: 0xc]// 0x7611eef8e0
	float DefaultGray;//[Offset: 0x868, Size: 0x4]// 0x7611eef870
	RenderItem[] ResultAvatarShadowRenderSettingsHigh;//[Offset: 0x870, Size: 0x10]// 0x7611eef770
	RenderItem[] ResultAvatarShadowRenderSettingsMid;//[Offset: 0x880, Size: 0x10]// 0x7611eef670
	RenderItem[] ResultAvatarShadowRenderSettingsLow;//[Offset: 0x890, Size: 0x10]// 0x7611eef3f0
	FName[] UILeakWhiteList;//[Offset: 0x8a0, Size: 0x10]// 0x7611eef300
	class Object[] ObjectLeakFilterClassList;//[Offset: 0x8b0, Size: 0x10]// 0x7611eef200
	Object* ClientEventCenterIns;//[Offset: 0x8d8, Size: 0x8]// 0x7611eef180
	FString AvatarDynamicCacheStrategy_Player_DefaultCalssPath;//[Offset: 0x8e0, Size: 0x10]// 0x7611eef110
	AvatarDynamicCacheStrategy* AvatarDynamicCacheStrategy_Player_Default;//[Offset: 0x8f0, Size: 0x8]// 0x7611eef090
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0xffffff8a17adf2b0
	bool UseStartupLevel();// 0x4606a78
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0xffffff8a17adf2b0
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0xffffff8a17adf2b0
	void TryStopRecordingReplayOnFinishState();// 0x4606a64
	void TryStartRecordingReplayOnFightState();// 0x4606a50
	void TestReadBattleItemTable();// 0x4606a3c
	bool SupportTournamentMap();// 0x4606a18
	bool StopRecordingReplayByType(enum ReplayType);// 0x4606980
	bool StartRecordingReplayByType(enum ReplayType, bool bSkipConditionCheck, enum RecordCondition, FString TargetName);// 0x4606820
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x4606768
	void SetWaterReflectionSetting(bool bDoOpen);// 0x46066e4
	void SetVulkanSwitch(bool flag);// 0x4606660
	void SetUserSetingShadowQuality(bool bShadow);// 0x46065dc
	void SetUserSetingMobilceContentSCale(float mcs);// 0x4606560
	bool SetSoundEffectQuality(int Type);// 0x46064d0
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x4606408
	void SetHZBMobileState();// 0x46063f4
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x4606378
	static void SetDeviceNum4WebGM();// 0x4606364
	static void SetCustomRouteLine();// 0x4606350
	void RunLuaTest();// 0x460633c
	void ReSetFOVScreenSizeCullingFactor();// 0x4606328
	void ReportInfoToXpcall(FString InfoType, FString InMsg, FString CallStack);// 0x4606130
	void ReportInfoToBugly(FString InfoType, FString InMsg, FString CallStack);// 0x4605f38
	void ReplayLivePreLoadMapPendingFinish__DelegateSignature();// 0xffffff8a17adf2b0
	void ReplayBeginRecordingDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void RenderForLowFPS();// 0x4605f24
	void ReleasePlayerAvatarDynamicCacheDefaultStrategy();// 0x4605f10
	void RefuseRenderForLowFPS();// 0x4605efc
	void QuitGame();// 0x4605ee8
	void ProfileShot();// 0x4605ed4
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x4605dc0
	static void PostGameStage(FString StageKey, FString StageValue);// 0x4605cf8
	void PostFileToTGPA(FString ExtraStr, FString FilePath);// 0x4605b90
	void OpenSequenceConfig();// 0x4605b7c
	void OnStopAutoTest();// 0x4605b68
	void OnStartAutoTest();// 0x4605b54
	void OnAutoTestTriggleOpen();// 0x4605b40
	void OnAutoTestTriggleClosed();// 0x4605b2c
	bool IsVukanRealOpen();// 0x4605af4
	bool isUsingAssumedNameInReplay();// 0x4605abc
	bool IsTournamentSettingOpen();// 0x4605a84
	bool IsSupportVulkan();// 0x4605a4c
	bool IsSupportVerySmooth();// 0x4605a14
	bool IsSupportTagCulling();// 0x46059f8
	bool IsSupportSwitchSoundEffectQuality();// 0x46059c0
	bool IsSupportSwitchRenderLevelRuntime();// 0x4605988
	bool IsSupportMSAA();// 0x4605964
	bool IsSupportLDR();// 0x4605940
	bool IsSupportEnhancement();// 0x4605908
	bool IsSupportCivilVoiceDevice();// 0x46058d0
	bool IsRecordingReplayOfType(enum ReplayType);// 0x4605840
	bool IsPlayingReplayOfType(enum ReplayType);// 0x46057b0
	bool IsPlayingAnyPlayback();// 0x4605778
	bool IsOpenMSAA();// 0x4605744
	bool IsOpenHDR();// 0x460570c
	bool IsInTournamentMap();// 0x46056d4
	bool IsFoldingScreenDevice(float baseValue);// 0x4605654
	bool IsFastForwardingReplay();// 0x460561c
	static bool IsAutoRunTestGameBindCompoment();// 0x46055e4
	static bool IsAutoRunTestGame();// 0x46055ac
	void InitRenderQualityLastSetTA(RenderQualitySettings TASetting);// 0x46054e4
	void GMStandalone(FString Map);// 0x460540c
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x46053d8
	WonderfulPlayback* GetWonderfulPlayback();// 0x46053a4
	bool GetWaterReflectionSetting();// 0x460536c
	bool GetVulkanSwitch();// 0x4605334
	bool GetUserSetingShadowQuality();// 0x46052fc
	int GetUserQualitySettingLevel();// 0x46052e0
	int GetSoundEffectQuality();// 0x46052ac
	Replay_SkeletalData_Manager* GetSkeletalDataManager();// 0x4605278
	ReplayCameraDataManager* GetReplayCameraDataManager();// 0x4605244
	RenderQualitySettings GetRenderQualityLastSet(bool isClassic);// 0x4605188
	RenderQualitySettings GetRenderQualityApplying(bool isClassic);// 0x46050cc
	AvatarDynamicCacheStrategy* GetPlayerAvatarDynamicCacheDefaultStrategy(Object* InContextObj);// 0x4605040
	ObPlayback* GetObPlayback();// 0x460500c
	LivePlayback* GetLivePlayback();// 0x4604fd8
	bool GetIsFirstInitWaterReflectionSetting();// 0x4604fa0
	static FString GetGetActiveProfileName();// 0x4604f20
	void GetGameInstanceInfo(out FString OutSettingString);// 0x4604e8c
	int GetDeviceUpdateVersionFlag();// 0x4604e50
	int GetDeviceTCQualityGrade();// 0x4604e14
	byte GetDeviceMaxSupportLevel();// 0x4604de0
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel, bool isClassic);// 0x4604d10
	int GetDeviceLimit();// 0x4604cdc
	int GetDeviceLevel();// 0x4604ca0
	bool GetDefaultSoundEffectQuality();// 0x4604c68
	byte GetDefaultRenderQualityTA();// 0x4604c34
	int GetDefaultFPS();// 0x4604c00
	DeathPlayback* GetDeathPlayback();// 0x4604bcc
	enum GetCurPlayingReplayType();// 0x4604b98
	CompletePlayback* GetCompletePlayback();// 0x4604b64
	Object* GetClientEventCenter();// 0x4604b30
	static int GetAutoRunTestServerIdx();// 0x4604afc
	static FString GetAutoRunPassWD();// 0x4604a7c
	static FString GetAutoRunLuaTest();// 0x46049fc
	static FString GetAutoRunAccount();// 0x460497c
	AssetRefStrategicManager* GetAssetRefStrategicManager();// 0x4604948
	bool GetApplyingShadowQuality();// 0x4604910
	GameReplay* GetAnyRecordingPlayback();// 0x46048dc
	GameReplay* GetAnyPlayingPlayback();// 0x46048a8
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x4604740
	void EnableStreamingLevelLOD(bool bEnable);// 0x46046bc
	bool DeleteSavedFiles(bool allfilesSaved);// 0x4604624
	FString CollectExtraMsgBeforeReport();// 0x46045a4
	void CloseSequenceConfig();// 0x4604590
	void CheckShadowReductionForResultAvatarShow();// 0x460457c
	void CheckShadowForResultAvatarShow(int InShadowQuality);// 0x4604500
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x460447c
	void AutoActiveUltralHighRenderItems();// 0x4604468
	void AutoActiveLDR();// 0x4604454
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x4604348
	void ActiveStyle_PP(byte Level);// 0x46042c4
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x46041b8
	void ActiveStyle(byte Level);// 0x4604134
	void ActiveNightVision(bool bSet);// 0x46040b0
	void ActiveMSAA(bool bOpenMSAA);// 0x460402c
	void ActiveEnhance(int OpenValue);// 0x4603fb0
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x4603e60

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 0x1]// 0x7611ee92e0
	byte RenderStyleSetting;//[Offset: 0x1, Size: 0x1]// 0x7611ee9260
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x7611ee91e0
	int TeamQualityEnhanceSetting;//[Offset: 0x4, Size: 0x4]// 0x7611ee9170
	bool IsClassicalSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611ee90f0

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 0x4]// 0x7611ef56d0
	int TCQualityGrade;//[Offset: 0x4, Size: 0x4]// 0x7611ef5660
	int DeviceMaxQualityLevel;//[Offset: 0x8, Size: 0x4]// 0x7611ef55f0
	int UserQualitySetting;//[Offset: 0xc, Size: 0x4]// 0x7611ef5580
	int UserQualitySettingTA;//[Offset: 0x10, Size: 0x4]// 0x7611ef5510
	int DeviceSupportHDR;//[Offset: 0x14, Size: 0x4]// 0x7611ef54a0
	int IsOpenHDR;//[Offset: 0x18, Size: 0x4]// 0x7611ef5430
	int UserHDRSetting;//[Offset: 0x1c, Size: 0x4]// 0x7611ef53c0
	int IsSupportMSAA;//[Offset: 0x20, Size: 0x4]// 0x7611ef5350
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x7611ef52d0
	float UserMCSSetting;//[Offset: 0x28, Size: 0x4]// 0x7611ef5260
	int UserShadowSetting;//[Offset: 0x2c, Size: 0x4]// 0x7611ef51f0
	int UserShadowSwitch;//[Offset: 0x30, Size: 0x4]// 0x7611ef5180
	int UserTeamQualityEnhanceSetting;//[Offset: 0x34, Size: 0x4]// 0x7611ef5110
	int PUBGLimitSetting;//[Offset: 0x38, Size: 0x4]// 0x7611ef50a0
	int PUBGDeviceUpdateFlag;//[Offset: 0x3c, Size: 0x4]// 0x7611ef5030
	int PUBGDeviceFPSDef;//[Offset: 0x40, Size: 0x4]// 0x7611ef4fc0
	int PUBGDeviceFPSLow;//[Offset: 0x44, Size: 0x4]// 0x7611ef4f50
	int PUBGDeviceFPSMid;//[Offset: 0x48, Size: 0x4]// 0x7611ef4ee0
	int PUBGDeviceFPSHigh;//[Offset: 0x4c, Size: 0x4]// 0x7611ef4e70
	int PUBGDeviceFPSHDR;//[Offset: 0x50, Size: 0x4]// 0x7611ef4e00
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x54, Size: 0x4]// 0x7611ef4d90
	int PUBGDeviceFPSLowTA;//[Offset: 0x58, Size: 0x4]// 0x7611ef4d20
	int PUBGDeviceFPSMidTA;//[Offset: 0x5c, Size: 0x4]// 0x7611ef4cb0
	int PUBGDeviceFPSHighTA;//[Offset: 0x60, Size: 0x4]// 0x7611ef4c40
	int PUBGDeviceFPSHDRTA;//[Offset: 0x64, Size: 0x4]// 0x7611ef4bd0
	int PUBGDeviceFPSUltralHighTA;//[Offset: 0x68, Size: 0x4]// 0x7611ef4b60
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]// 0x7611ef4ae0
	int PUBGTeamQualityEnhance;//[Offset: 0x70, Size: 0x4]// 0x7611ef4a70
	int UserVulkanSetting;//[Offset: 0x74, Size: 0x4]// 0x7611ef4a00

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 0x10]// 0x7611ef4470
	SwitchesItem[] Switches;//[Offset: 0x10, Size: 0x10]// 0x7611ef4110

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 0x10]// 0x7611ef4400
	float Value;//[Offset: 0x10, Size: 0x4]// 0x7611ef4390
	FString DependKey;//[Offset: 0x18, Size: 0x10]// 0x7611ef4320
	float DependValue;//[Offset: 0x28, Size: 0x4]// 0x7611ef42b0

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 0x10]// 0x7611eef600
	float RenderValue;//[Offset: 0x10, Size: 0x4]// 0x7611eef590

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 0x1]// 0x7611ef2380
	FString[] PostProcessParams;//[Offset: 0x8, Size: 0x10]// 0x7611ef2290
	ACESParameter ACESParams;//[Offset: 0x18, Size: 0x28]// 0x7611ef1e50

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 0x10]// 0x7611ef2210
	float Bright;//[Offset: 0x10, Size: 0x4]// 0x7611ef21a0
	float Gray;//[Offset: 0x14, Size: 0x4]// 0x7611ef2130
	float ShoulderStrength;//[Offset: 0x18, Size: 0x4]// 0x7611ef20c0
	float ToeStrength;//[Offset: 0x1c, Size: 0x4]// 0x7611ef2050
	float LinearStrength;//[Offset: 0x20, Size: 0x4]// 0x7611ef1fe0
	float LinearAngle;//[Offset: 0x24, Size: 0x4]// 0x7611ef1f70

--------------------------------
Class: RemoteDecorator
	<FString,ObjectDecorator> ObjectDecorators;//[Offset: 0x0, Size: 0x50]// 0x7611ef0d00

--------------------------------
Class: ObjectDecorator
	PropertyDecorator[] PropertyDecorators;//[Offset: 0x0, Size: 0x10]// 0x7611ef0f40

--------------------------------
Class: PropertyDecorator
	FString PropertyValue;//[Offset: 0x0, Size: 0x10]// 0x7611ef1540
	bool bReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611ef14c0
	ObjectPropertyInfo[] PropertyChain;//[Offset: 0x18, Size: 0x10]// 0x7611ef10e0

--------------------------------
Class: ObjectPropertyInfo
	enum PropertyType;//[Offset: 0x0, Size: 0x1]// 0x7611ef1360
	int PropertyIndex;//[Offset: 0x4, Size: 0x4]// 0x7611ef12f0
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]// 0x7611ef1280

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x28, Size: 0x10]// 0x75a7b5fd80
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x38, Size: 0x10]// 0x75a7b5fe80
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]// 0x75a7b5ff00
	float ChickenDinnerTimeSecs;//[Offset: 0x78, Size: 0x4]// 0x75a7b90230
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]// 0x75a7b5ff80
	float ShowSmallCircleTimeSecs;//[Offset: 0x80, Size: 0x4]// 0x75a7b902a0
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x88, Size: 0x10]// 0x75a7b60080
	void StopRecord(bool bRankFirst);// 0x483683c
	void StartRecord();// 0x4836828
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x48366dc
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x4836620
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x48363ec
	void BuildOutputData();// 0x48363d8
	void BuildContinuousKillOutputData();// 0x48363c4

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 0x4]// 0x76119bb830
	float EndTimeSecs;//[Offset: 0x4, Size: 0x4]// 0x76119bb7c0
	byte WonderfulCutType;//[Offset: 0x8, Size: 0x1]// 0x760d23fc00
	float ShootDistance;//[Offset: 0xc, Size: 0x4]// 0x76119bb750
	FString CauserName;//[Offset: 0x10, Size: 0x10]// 0x76119bb6e0

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 0x4]// 0x76119bb670
	float EndTimeSecs;//[Offset: 0x4, Size: 0x4]// 0x76119bb600
	int KillNum;//[Offset: 0x8, Size: 0x4]// 0x76119bb590
	float FarthestKillDistance;//[Offset: 0xc, Size: 0x4]// 0x76119bb520

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 0x4]// 0x76119bbbb0
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x8, Size: 0x10]// 0x760d23fa00

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x760d23f800
	byte CaptureType;//[Offset: 0x1, Size: 0x1]// 0x760d23f880
	byte ShootDamageType;//[Offset: 0x2, Size: 0x1]// 0x760d23f900
	float DamageTimeSecs;//[Offset: 0x4, Size: 0x4]// 0x76119bbad0
	float ShootDistance;//[Offset: 0x8, Size: 0x4]// 0x76119bbb40
	FString CauserName;//[Offset: 0x10, Size: 0x10]// 0x76119bba60

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 0x4]// 0x76119bb9f0
	float DamageTimeSecs;//[Offset: 0x4, Size: 0x4]// 0x76119bb980
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x760d23fa80
	byte CaptureType;//[Offset: 0x9, Size: 0x1]// 0x760d23fb00
	byte ShootDamageType;//[Offset: 0xa, Size: 0x1]// 0x760d23fb80
	float ShootDistance;//[Offset: 0xc, Size: 0x4]// 0x76119bb910
	FString CauserName;//[Offset: 0x10, Size: 0x10]// 0x76119bb8a0

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]// 0x75b4da0080
	FString[] EnabledGameModeWhiteList;//[Offset: 0x358, Size: 0x10]// 0x75b4da0100
	FString[] EnabledGameModeBlackList;//[Offset: 0x368, Size: 0x10]// 0x75b4da0180
	float PlaybackTimeBeforeDeath;//[Offset: 0x378, Size: 0x4]// 0x75b4db2270
	float PlaybackTimeBeforeDeathForAI;//[Offset: 0x37c, Size: 0x4]// 0x75b4db22e0
	float MinValidRecordLenthRequired;//[Offset: 0x380, Size: 0x4]// 0x75b4db2350
	float DeathToStopRecordTime;//[Offset: 0x384, Size: 0x4]// 0x75b4db23c0
	void OnPlayerControllerReconnected();// 0x42ac7bc
	bool IsSwitchedOffByDevice();// 0x42ac784
	FString GetReplayVictimName();// 0x42ac704
	FString GetReplayTargetName();// 0x42ac684
	void EnableDeathPlayback(bool bEnable);// 0x42ac600

--------------------------------
Class: GameReplay.Object
	bool bJumpCheckCameraView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x75b4e03e80
	UserWidget* GMUI;//[Offset: 0x98, Size: 0x8]// 0x75b4e03f00
	class UserWidget* GMUIClass;//[Offset: 0xa0, Size: 0x28]// 0x75b4e03f80
	float VolumeValueMax;//[Offset: 0xcc, Size: 0x4]// 0x75b4e120b0
	bool IsLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]// 0x75b4e04000
	float SimulateLiveTotalTime;//[Offset: 0xd4, Size: 0x4]// 0x75b4e12120
	bool IsLivePlayEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]// 0x75b4e04080
	int RecordHz;//[Offset: 0x124, Size: 0x4]// 0x75b4e12190
	float BufferHintSeconds;//[Offset: 0x128, Size: 0x4]// 0x75b4e12200
	float MaxDesiredRecordTimeMS;//[Offset: 0x12c, Size: 0x4]// 0x75b4e12270
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x130, Size: 0x4]// 0x75b4e122e0
	float CheckpointUploadDelayInSeconds;//[Offset: 0x134, Size: 0x4]// 0x75b4e12350
	bool bUseCheckPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]// 0x75b4e04100
	float ViewDistanceFactorFlying;//[Offset: 0x13c, Size: 0x4]// 0x75b4e123c0
	float ScreenSizeCullingFactorFlying;//[Offset: 0x140, Size: 0x4]// 0x75b4e12430
	float ViewDistanceFactorLand;//[Offset: 0x144, Size: 0x4]// 0x75b4e124a0
	float ScreenSizeCullingFactorLand;//[Offset: 0x148, Size: 0x4]// 0x75b4e12510
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]// 0x75b4e04180
	STExtraBaseCharacter* ViewCharacter;//[Offset: 0x1ac, Size: 0x8]// 0x75b4e04200
	STExtraVehicleBase* ViewVehicle;//[Offset: 0x1b4, Size: 0x8]// 0x75b4e04280
	STExtraPlayerController* PlayerController;//[Offset: 0x1c0, Size: 0x8]// 0x75b4e04300
	ReplayWidgetBase* ReplayWidgetPtr;//[Offset: 0x1d4, Size: 0x8]// 0x75b4e04380
	ReplayProgressbarWidget* ReplayProgressWidgetPtr;//[Offset: 0x1dc, Size: 0x8]// 0x75b4e04400
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]// 0x75b4e04480
	delegate OnReplayReadyInitUIDelegate;//[Offset: 0x1e8, Size: 0x10]// 0x75b4e04500
	delegate OnReplayGotoTimeResetUIDelegate;//[Offset: 0x1f8, Size: 0x10]// 0x75b4e04580
	delegate OnReplayResetViewTargetDelegate;//[Offset: 0x208, Size: 0x10]// 0x75b4e04600
	class ReplayWidgetBase* ReplayWidgetClass;//[Offset: 0x218, Size: 0x28]// 0x75b4e04680
	class ReplayProgressbarWidget* ReplayProgressWidgetClass;//[Offset: 0x240, Size: 0x28]// 0x75b4e04700
	void SwitchFreeViewMode();// 0x435de58
	bool StopRecordingReplay();// 0x435de18
	bool StopPlay();// 0x435ddd8
	bool StartRecordingReplay(bool bSkipConditionCheck, enum RecordCondition);// 0x435dcfc
	void SetTickable(bool bTickble);// 0x435dc7c
	void SetSpectatorName(FString SpectatorName, bool bgm, bool isChangeViewTarget, bool isAutoSetName);// 0x435db18
	bool SetReplayTimeDilation(float InDilation);// 0x435da88
	void SetIsGMSpectator(bool bgm);// 0x435da08
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x435d98c
	void RefreshFlags(bool bSkipConditionCheck, enum RecordCondition);// 0x435d8bc
	bool PlayReplay();// 0x435d87c
	bool PlayCurOverDemoWithTime(float Time);// 0x435d7ec
	bool PauseReplay(bool bPaused);// 0x435d74c
	void OnPostLoadMapWithWorld(World* World);// 0x435d6c8
	bool IsInRecordState();// 0x435d690
	bool IsInPlayState();// 0x435d658
	bool IsFastForwarding();// 0x435d620
	bool HaveRecordingData();// 0x435d5e0
	void HandleOnPlayerExit(UAEPlayerController* UAEPC);// 0x435d55c
	STExtraBaseCharacter* GetViewCharacter();// 0x435d528
	FString GetSpectatorName();// 0x435d4a8
	float GetReplayStartRecordTime();// 0x435d474
	float GetCurrentReplayTotalTimeInSeconds();// 0x435d438
	float GetCurrentReplayCurTimeInSeconds();// 0x435d404
	void ClearReplayUI();// 0x435d3f0

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x1348, Size: 0x10]// 0x7611ed0180
	delegate OnPlayerHealthStatusChangedDelegate;//[Offset: 0x1358, Size: 0x10]// 0x7611ed0100
	delegate OnBulletChange;//[Offset: 0x1368, Size: 0x10]// 0x7611ed0080
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x1378, Size: 0x10]// 0x7611ed0000
	delegate OnPlayerEnterBeRescueingStatus;//[Offset: 0x1388, Size: 0x10]// 0x7611ecff80
	delegate OnPlayerCarringStatus;//[Offset: 0x1398, Size: 0x10]// 0x7611ecff00
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x13a8, Size: 0x10]// 0x7611ecfe80
	delegate OnPlayerPickUp;//[Offset: 0x13b8, Size: 0x10]// 0x7611ecfe00
	delegate OnPlayerWeaponChangeState;//[Offset: 0x13c8, Size: 0x10]// 0x7611ecfd80
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0x13d8, Size: 0x10]// 0x7611ecfd00
	delegate OnBulletHitOnceDelegate;//[Offset: 0x13e8, Size: 0x10]// 0x7611ecfc80
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x13f8, Size: 0x10]// 0x7611ecfc00
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0x1408, Size: 0x10]// 0x7611ecfb80
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x1418, Size: 0x10]// 0x7611ecfb00
	delegate OnPostAttachmentReplication;//[Offset: 0x1428, Size: 0x10]// 0x7611ecfa80
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x1438, Size: 0x10]// 0x7611ecfa00
	delegate IsEnterNearDeathDelegate;//[Offset: 0x1448, Size: 0x10]// 0x7611ecf980
	delegate OnCharacterAimModeChanged;//[Offset: 0x1458, Size: 0x10]// 0x7611ecf900
	delegate OnDeathDelegate;//[Offset: 0x1468, Size: 0x10]// 0x7611ecf880
	delegate OnTakeDamageModify_Override;//[Offset: 0x1478, Size: 0x10]// 0x7611ecf800
	delegate OnTakeDamageModify_ExHealth;//[Offset: 0x1488, Size: 0x10]// 0x7611ecf780
	delegate OnPostTakeDamage;//[Offset: 0x1498, Size: 0x10]// 0x7611ecf700
	delegate OnNotifyAddHealth;//[Offset: 0x14a8, Size: 0x10]// 0x7611ecf680
	bool bBroadcastNotifyInitialDamageDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b8, Size: 0x1]// 0x7611ecf600
	delegate OnNotifyInitialDamage;//[Offset: 0x14c0, Size: 0x10]// 0x7611ecf580
	delegate OnSelfEnterState;//[Offset: 0x14d0, Size: 0x10]// 0x7611ecf500
	delegate OnSelfLeaveState;//[Offset: 0x14e0, Size: 0x10]// 0x7611ecf480
	delegate OnReconnectNotifyDelegate;//[Offset: 0x14f0, Size: 0x10]// 0x7611ecf400
	delegate OnStartInitDelegate;//[Offset: 0x1500, Size: 0x10]// 0x7611ecf380
	delegate AnimMontagePlayDelegate;//[Offset: 0x1550, Size: 0x10]// 0x7611ecf300
	delegate AnimMontageJumpSectionDelegate;//[Offset: 0x1560, Size: 0x10]// 0x7611ecf280
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x1570, Size: 0x10]// 0x7611ecf200
	delegate OnCharacterStartFireDelegate;//[Offset: 0x1580, Size: 0x10]// 0x7611ecf180
	delegate OnCharacterStopFireDelegate;//[Offset: 0x1590, Size: 0x10]// 0x7611ecf100
	delegate OnCharacterShootDelegate;//[Offset: 0x15a0, Size: 0x10]// 0x7611ecf080
	delegate OnChangedFlyWingStateDelegate;//[Offset: 0x15b0, Size: 0x10]// 0x7611ecf000
	delegate OnCharacterBecomeViewTarget;//[Offset: 0x15c0, Size: 0x10]// 0x7611ecef80
	delegate OnCharacterEndViewTarget;//[Offset: 0x15d0, Size: 0x10]// 0x7611ecef00
	delegate OnPostLocalEquipWeapon;//[Offset: 0x15e0, Size: 0x10]// 0x7611ecee80
	delegate OnWeaponEquipmentUpdateDelegate;//[Offset: 0x15f0, Size: 0x10]// 0x7611ecee00
	delegate OnCharacterHpChange;//[Offset: 0x1600, Size: 0x10]// 0x7611eced80
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x1610, Size: 0x10]// 0x7611eced00
	delegate OnCharacterTeamIDChange;//[Offset: 0x1620, Size: 0x10]// 0x7611ecec80
	delegate OnCharacterSignalHPChange;//[Offset: 0x1630, Size: 0x10]// 0x7611ecec00
	delegate OnPlayerSwitchWeaponDelegate;//[Offset: 0x1640, Size: 0x10]// 0x7611eceb80
	delegate OnCharacterHiddenChange;//[Offset: 0x1650, Size: 0x10]// 0x7611eceb00
	delegate ShowActicityUIDelegate;//[Offset: 0x1660, Size: 0x10]// 0x7611ecea80
	delegate OnPlayerOpenDoorDelegate;//[Offset: 0x1670, Size: 0x10]// 0x7611ecea00
	AkAudioEvent* DeathSound;//[Offset: 0x1680, Size: 0x8]// 0x7611ece980
	AkAudioEvent* PickupSound;//[Offset: 0x1688, Size: 0x8]// 0x7611ece900
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0x1690, Size: 0x8]// 0x7611ece880
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0x1698, Size: 0x8]// 0x7611ece800
	AkAudioEvent* SwitchSightSound;//[Offset: 0x16a0, Size: 0x8]// 0x7611ece780
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0x16a8, Size: 0x8]// 0x7611ece700
	bool bShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b0, Size: 0x1]// 0x7611ece680
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b0, Size: 0x1]// 0x7611ece600
	float NetDelayMinAniCompensate;//[Offset: 0x16b4, Size: 0x4]// 0x7611ece590
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b8, Size: 0x1]// 0x7611ece510
	float Money;//[Offset: 0x16bc, Size: 0x4]// 0x7611ece4a0
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c0, Size: 0x1]// 0x7611ece420
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c1, Size: 0x1]// 0x7611ece3a0
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16c1, Size: 0x1]// 0x7611ece320
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c2, Size: 0x1]// 0x7611ece2a0
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c3, Size: 0x1]// 0x7611ece220
	float MaxSwimSprintSpeed;//[Offset: 0x16c4, Size: 0x4]// 0x7611ece1b0
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c8, Size: 0x1]// 0x7611ece130
	class PlayerTombBox* OverrideTombBox;//[Offset: 0x16d0, Size: 0x8]// 0x7611ece0b0
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d8, Size: 0x1]// 0x7611ece030
	bool bOpenCostSpecMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d9, Size: 0x1]// 0x7611ecdfb0
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16da, Size: 0x1]// 0x7611ecdf30
	float AllowToggleADSCoolDownLength;//[Offset: 0x16e0, Size: 0x4]// 0x7611ecdec0
	float PreviousValueToSetForHealthPredict;//[Offset: 0x16e8, Size: 0x4]// 0x7611ecde50
	float ValueLimitForHealthPredict;//[Offset: 0x16ec, Size: 0x4]// 0x7611ecdde0
	float ValueLimitForSignalHPPredict;//[Offset: 0x16f0, Size: 0x4]// 0x7611ecdd70
	float ValueForSignalHPPredict;//[Offset: 0x16f4, Size: 0x4]// 0x7611ecdd00
	FName HeadSocketName;//[Offset: 0x16f8, Size: 0x8]// 0x7611ecdc90
	FName LFootSocketName;//[Offset: 0x1700, Size: 0x8]// 0x7611ecdc20
	FName RFootSocketName;//[Offset: 0x1708, Size: 0x8]// 0x7611ecdbb0
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x1710, Size: 0x8]// 0x7611ecdb30
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x1718, Size: 0x8]// 0x7611ecdab0
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x1720, Size: 0x8]// 0x7611ecda30
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x1728, Size: 0x8]// 0x7611ecd9b0
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x1730, Size: 0x8]// 0x7611ecd930
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1738, Size: 0x1]// 0x7611ecd8b0
	Rotator ServerControlRotation;//[Offset: 0x173c, Size: 0xc]// 0x7611ecd830
	byte PoseState;//[Offset: 0x1748, Size: 0x1]// 0x7611ecd7b0
	Actor* ThePlane;//[Offset: 0x1750, Size: 0x8]// 0x7611ecd730
	float ReplicatedNowShovelingSpeed;//[Offset: 0x1758, Size: 0x4]// 0x7611ecd6c0
	Rotator ReplicatedShovelingRotation;//[Offset: 0x175c, Size: 0xc]// 0x7611ecd640
	Vector AdditiveVelocity;//[Offset: 0x1768, Size: 0xc]// 0x7611ecd5c0
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1774, Size: 0x1]// 0x7611ecd540
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1775, Size: 0x1]// 0x7611ecd4c0
	bool bIsOpenShovelAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1780, Size: 0x1]// 0x7611ecd440
	float RadialDamageScale;//[Offset: 0x178c, Size: 0x4]// 0x7611ecd3d0
	byte LastPoseState;//[Offset: 0x1790, Size: 0x1]// 0x7611ecd350
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1791, Size: 0x1]// 0x7611ecd2d0
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1792, Size: 0x1]// 0x7611ecd250
	float AnimDeathLifeSpan;//[Offset: 0x1794, Size: 0x4]// 0x7611ecd1e0
	float RequestPaintDecalCD;//[Offset: 0x1798, Size: 0x4]// 0x7611ecd170
	float MaxRequestPaintDecalCD;//[Offset: 0x179c, Size: 0x4]// 0x7611ecd100
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x17a0, Size: 0x10]// 0x7611ecce00
	Actor*[] PlayerSlotData;//[Offset: 0x17b0, Size: 0x10]// 0x7611eccd00
	Actor*[] InventoryData;//[Offset: 0x17c0, Size: 0x10]// 0x7611eccc00
	AkComponent* SoundComp;//[Offset: 0x1820, Size: 0x8]// 0x7611eccb80
	AkComponent* AmbientSoundComp;//[Offset: 0x1828, Size: 0x8]// 0x7611eccb00
	MoveableBaseSmoothComp* MoveableBaseSmooth;//[Offset: 0x1830, Size: 0x8]// 0x7611ecca80
	VelocitySimulatorSmoothComp* VelocitySimulatorSmooth;//[Offset: 0x1838, Size: 0x8]// 0x7611ecca00
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1840, Size: 0x1]// 0x7611ecc980
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1841, Size: 0x1]// 0x7611ecc900
	AkAudioEvent* FootstepSound;//[Offset: 0x1848, Size: 0x8]// 0x7611ecc880
	AkAudioEvent* FallLandingSound;//[Offset: 0x1850, Size: 0x8]// 0x7611ecc800
	AkAudioEvent* AmbientSound;//[Offset: 0x1858, Size: 0x8]// 0x7611ecc780
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x1860, Size: 0x50]// 0x7611ecc3e0
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b0, Size: 0x1]// 0x7611ecc360
	SceneComponent* MeshContainer;//[Offset: 0x18b8, Size: 0x8]// 0x7611ecc2e0
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c0, Size: 0x1]// 0x7611ecc260
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c1, Size: 0x1]// 0x7611ecc1e0
	Actor* WaterObj;//[Offset: 0x18c8, Size: 0x8]// 0x7611ecc160
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d0, Size: 0x1]// 0x7611ecc0e0
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d1, Size: 0x1]// 0x7611ecc060
	bool Temp_ChangeSwitchLogic_VehSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d2, Size: 0x1]// 0x7611ecbfe0
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x18d8, Size: 0x8]// 0x7611ecbf60
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x18e0, Size: 0x8]// 0x7611ecbee0
	STCharacterCarryOtherComp* CarryOtherComponent;//[Offset: 0x18e8, Size: 0x8]// 0x7611ecbe60
	CarryRepData CarryRepData;//[Offset: 0x18f0, Size: 0x10]// 0x7611ecbb40
	STExtraBaseCharacter* BeCarriedByWho;//[Offset: 0x1900, Size: 0x8]// 0x7611ecbac0
	class WeaponAutoAimingComponent* AutoAimCompTemplate;//[Offset: 0x1908, Size: 0x8]// 0x7611ecba40
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x1910, Size: 0x8]// 0x7611ecb9c0
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x1918, Size: 0x8]// 0x7611ecb940
	STNewCharacterFollowComp* NewAutoFollowFollowComp;//[Offset: 0x1920, Size: 0x8]// 0x7611ecb8c0
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x1928, Size: 0x4]// 0x7611ecb850
	bool bIsRescuingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192c, Size: 0x1]// 0x7611ecb7d0
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192d, Size: 0x1]// 0x7611ecb750
	float RescueOtherDuration;//[Offset: 0x1930, Size: 0x4]// 0x7611ecb6e0
	float DetectionInterval;//[Offset: 0x1934, Size: 0x4]// 0x7611ecb670
	float CachedDetectionInterval;//[Offset: 0x1938, Size: 0x4]// 0x7611ecb600
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193c, Size: 0x1]// 0x7611ecb580
	STExtraBaseCharacter* MyCandidateGiftGiver;//[Offset: 0x1940, Size: 0x8]// 0x7611ecb500
	GiftTypeData GiftType;//[Offset: 0x1948, Size: 0x8]// 0x7611ecb2f0
	BonfireActor* CurBonfire;//[Offset: 0x1950, Size: 0x8]// 0x7611ecb270
	BonfireActor* BuiltBonfire;//[Offset: 0x1958, Size: 0x8]// 0x7611ecb1f0
	delegate OnEnterLandingHeavy;//[Offset: 0x1980, Size: 0x10]// 0x7611ecb170
	delegate OnEnterLandingCombat;//[Offset: 0x1990, Size: 0x10]// 0x7611ecb0f0
	delegate OnEnterLanding;//[Offset: 0x19a0, Size: 0x10]// 0x7611ecb070
	delegate OnCharacterHpGoZero;//[Offset: 0x19b0, Size: 0x10]// 0x7611ecaff0
	Vector ScopeNewIdleLoc;//[Offset: 0x19c0, Size: 0xc]// 0x7611ecaf70
	Vector ScopeNewAimLoc;//[Offset: 0x19cc, Size: 0xc]// 0x7611ecaef0
	float ScopeMoveInOutSpeed;//[Offset: 0x19d8, Size: 0x4]// 0x7611ecae80
	Vector ScopeAimShootSpreadDir;//[Offset: 0x19dc, Size: 0xc]// 0x7611ecae00
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x19e8, Size: 0x4]// 0x7611ecad90
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x19ec, Size: 0x4]// 0x7611ecad20
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x19f0, Size: 0x4]// 0x7611ecacb0
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x19f8, Size: 0xc]// 0x7611ecac30
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1a04, Size: 0x4]// 0x7611ecabc0
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1a08, Size: 0x4]// 0x7611ecab50
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1a0c, Size: 0x4]// 0x7611ecaae0
	float ScopeLagScale;//[Offset: 0x1a14, Size: 0x4]// 0x7611ecaa70
	float ScopeAimCrosshairUIScale;//[Offset: 0x1a18, Size: 0x4]// 0x7611ecaa00
	float ScopeFov;//[Offset: 0x1a1c, Size: 0x4]// 0x7611eca990
	float FPPDefaultFov;//[Offset: 0x1a20, Size: 0x4]// 0x7611eca920
	float TPPDefaultFov;//[Offset: 0x1a24, Size: 0x4]// 0x7611eca8b0
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x1a28, Size: 0x4]// 0x7611eca840
	int FirstDamageTypeSpesificID;//[Offset: 0x1a2c, Size: 0x4]// 0x7611eca7d0
	float RefreshUITimeAfterSpawn;//[Offset: 0x1a30, Size: 0x4]// 0x7611eca760
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x1a34, Size: 0x4]// 0x7611eca6f0
	int FistIconOverride;//[Offset: 0x1a38, Size: 0x4]// 0x7611eca680
	Vector ScopeNewTargetLoc;//[Offset: 0x1a44, Size: 0xc]// 0x7611eca600
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a50, Size: 0x1]// 0x7611eca580
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x1a58, Size: 0x8]// 0x7611eca500
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x1a60, Size: 0x8]// 0x7611eca480
	CameraComponent* FPPCameraComp;//[Offset: 0x1a68, Size: 0x8]// 0x7611eca400
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x1a70, Size: 0x8]// 0x7611eca380
	CameraComponent* ScopeCameraComp;//[Offset: 0x1a78, Size: 0x8]// 0x7611eca300
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x1a80, Size: 0x8]// 0x7611eca280
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x1a90, Size: 0x5c0]// 0x7611ebf0a0
	float CameraInfoAdditiveWeight;//[Offset: 0x2050, Size: 0x4]// 0x7611ebf030
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2054, Size: 0x1]// 0x7611ebefb0
	SyncAKEvent SyncAKEvent;//[Offset: 0x2058, Size: 0x10]// 0x7611ebeda0
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x2068, Size: 0x10]// 0x7611ebed20
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x2078, Size: 0x10]// 0x7611ebeca0
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x2088, Size: 0x10]// 0x7611ebec20
	delegate OnMovementBaseChanged;//[Offset: 0x2098, Size: 0x10]// 0x7611ebeba0
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a8, Size: 0x1]// 0x7611ebeb20
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a9, Size: 0x1]// 0x7611ebeaa0
	BoxComponent* ProneBoxComponent;//[Offset: 0x20b0, Size: 0x8]// 0x7611ebea20
	Vector ProneBoxRelativeLocation;//[Offset: 0x20b8, Size: 0xc]// 0x7611ebe9a0
	CapsuleComponent* SecondCapsuleCollision;//[Offset: 0x20c8, Size: 0x8]// 0x7611ebe920
	bool bCreateSecondCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d0, Size: 0x1]// 0x7611ebe8a0
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x20d8, Size: 0x10]// 0x7611ebe7a0
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x20e8, Size: 0x10]// 0x7611ebe6a0
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x20f8, Size: 0x8]// 0x7611ebe620
	ObserverSmoothComponent* ObserverSmooth;//[Offset: 0x2100, Size: 0x8]// 0x7611ebe5a0
	float PickUpRadius;//[Offset: 0x2108, Size: 0x4]// 0x7611ebe530
	SimViewData SimulateViewData;//[Offset: 0x210c, Size: 0xc]// 0x7611ebe0e0
	FString MedalClubID;//[Offset: 0x2120, Size: 0x10]// 0x7611ebe070
	int MedalClubLevel;//[Offset: 0x2130, Size: 0x4]// 0x7611ebe000
	AnchorPlatData AnchorPlat;//[Offset: 0x2134, Size: 0x8]// 0x7611ebde00
	int PassCardBuyType;//[Offset: 0x213c, Size: 0x4]// 0x7611ebdd90
	int PassCardBuyLevel;//[Offset: 0x2140, Size: 0x4]// 0x7611ebdd20
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2144, Size: 0x1]// 0x7611ebdca0
	int Likedlevel;//[Offset: 0x2148, Size: 0x4]// 0x7611ebdc30
	int ShouldShowLikeLevel;//[Offset: 0x214c, Size: 0x4]// 0x7611ebdbc0
	bool OnRepCommonFlagDataNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2150, Size: 0x1]// 0x7611ebdb40
	CommonFlagData[] ShoudldCheckFlagData;//[Offset: 0x2158, Size: 0x10]// 0x7611ebda40
	CommonFlagData[] CommonFlagData;//[Offset: 0x2168, Size: 0x10]// 0x7611ebd940
	CommonFlagData[] CommonFlagDataCustom;//[Offset: 0x2178, Size: 0x10]// 0x7611ebd840
	<FName,FName> CommonFlagDataMap;//[Offset: 0x2188, Size: 0x50]// 0x7611ebd6b0
	<int,int> SceneFlagIDMap;//[Offset: 0x21d8, Size: 0x50]// 0x7611ebd520
	delegate CommonFlagDataChange;//[Offset: 0x2228, Size: 0x10]// 0x7611ebd4a0
	delegate OnCarryDelegate;//[Offset: 0x2238, Size: 0x10]// 0x7611ebd420
	CustomMovementRepData CustomMovementRepData;//[Offset: 0x2258, Size: 0xc]// 0x7611ebd1b0
	CustomSimulateMovementRepData CustomMovementSimulateRepData;//[Offset: 0x2264, Size: 0x4]// 0x7611ebd020
	World* TheWorld;//[Offset: 0x2270, Size: 0x8]// 0x7611ebcfa0
	bool bIsSkipCheckMeshRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2278, Size: 0x1]// 0x7611ebcf20
	delegate OnPlayerUnderAttackedDelegate;//[Offset: 0x2280, Size: 0x10]// 0x7611ebcea0
	bool IgnoreCheckCanSetBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2290, Size: 0x1]// 0x7611ebce20
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x2298, Size: 0x28]// 0x7611ebcda0
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x22c0, Size: 0x8]// 0x7611ebcd20
	DamageReductionComponent* DamageReductionComponent;//[Offset: 0x22d0, Size: 0x8]// 0x7611ebcca0
	FName ClientGetShotBuffName;//[Offset: 0x22f0, Size: 0x8]// 0x7611ebcc30
	float SmoothRotateMeshYawSpeed;//[Offset: 0x22f8, Size: 0x4]// 0x7611ebcbc0
	FName[] DynamicMovementBaseTags;//[Offset: 0x2308, Size: 0x10]// 0x7611ebcad0
	delegate OnScopeInComplete;//[Offset: 0x2318, Size: 0x10]// 0x7611ebca50
	delegate OnScopeOutComplete;//[Offset: 0x2328, Size: 0x10]// 0x7611ebc9d0
	bool bCheckSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2338, Size: 0x1]// 0x7611ebc950
	float FootSoundIgnoreDist;//[Offset: 0x233c, Size: 0x4]// 0x7611ebc8e0
	float FootSoundTraceDist;//[Offset: 0x2340, Size: 0x4]// 0x7611ebc870
	<byte,FootprintActorArrayInfo> FootprintMap;//[Offset: 0x2348, Size: 0x50]// 0x7611ebc520
	float MaxDispalyFootprintDistance;//[Offset: 0x2398, Size: 0x4]// 0x7611ebc4b0
	Rotator DefaultMeshRot;//[Offset: 0x239c, Size: 0xc]// 0x7611ebc430
	class AnimInstance* MainCharAnimClass;//[Offset: 0x23b8, Size: 0x8]// 0x7611ebc3b0
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x23c0, Size: 0x8]// 0x7611ebc330
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x23c8, Size: 0x8]// 0x7611ebc2b0
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d8, Size: 0x1]// 0x7611ebc230
	byte CurrentCameraMode;//[Offset: 0x23d9, Size: 0x1]// 0x7611ebc1b0
	byte CurrentCameraModeSaved;//[Offset: 0x23da, Size: 0x1]// 0x7611ebc130
	bool bSkillLockTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23db, Size: 0x1]// 0x7611ebc0b0
	EmoteComponent* EmoteComponent;//[Offset: 0x23e0, Size: 0x8]// 0x7611ebc030
	delegate EmoteMontageFinishedEvent;//[Offset: 0x23e8, Size: 0x10]// 0x7611ebbfb0
	delegate OnPlayerTryToPlayEmote;//[Offset: 0x23f8, Size: 0x10]// 0x7611ebbf30
	delegate OnPlayerEmoteBePlayedSuccessfully;//[Offset: 0x2408, Size: 0x10]// 0x7611ebbeb0
	delegate OnPlayerStartPlayEmoteDS;//[Offset: 0x2418, Size: 0x10]// 0x7611ebbe30
	AnimationAsset* TempEmoteResource;//[Offset: 0x2428, Size: 0x28]// 0x7611ebbdb0
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2450, Size: 0x1]// 0x7611ebbd30
	Vector MoveInputState;//[Offset: 0x2454, Size: 0xc]// 0x7611ebbcb0
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2460, Size: 0x1]// 0x7611ebbc30
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x2468, Size: 0x8]// 0x7611ebbbb0
	bool bPressedShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2471, Size: 0x1]// 0x7611ebbb30
	float ShovelingKeyHoldTime;//[Offset: 0x2474, Size: 0x4]// 0x7611ebbac0
	bool bHasEnteredShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2478, Size: 0x1]// 0x7611ebba40
	Vector CurInputVector;//[Offset: 0x247c, Size: 0xc]// 0x7611ebb9c0
	bool bEnableSpringArmOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248c, Size: 0x1]// 0x7611ebb940
	StaticMeshComponent* ScopComp;//[Offset: 0x2490, Size: 0x8]// 0x7611ebb8c0
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x2498, Size: 0x8]// 0x7611ebb840
	PhysicsAsset* PhysicsAssetOverride_DeadForReplay;//[Offset: 0x24a0, Size: 0x28]// 0x7611ebb7c0
	float voiceCheckCD;//[Offset: 0x24c8, Size: 0x4]// 0x7611ebb750
	float voiceCheckShowCD;//[Offset: 0x24cc, Size: 0x4]// 0x7611ebb6e0
	float VoiceCheckDis;//[Offset: 0x24d0, Size: 0x4]// 0x7611ebb670
	float voiceDistScale;//[Offset: 0x24d4, Size: 0x4]// 0x7611ebb600
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x24d8, Size: 0x4]// 0x7611ebb590
	<byte> DanyinCompletedIDSet;//[Offset: 0x24f8, Size: 0x50]// 0x7611ebb470
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x2548, Size: 0x8]// 0x7611ebb3f0
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x2560, Size: 0x8]// 0x7611ebb370
	byte MovementModeBeforeNearDeath;//[Offset: 0x2568, Size: 0x1]// 0x7611ebb2f0
	float MoveableSwitchPoseTime;//[Offset: 0x256c, Size: 0x4]// 0x7611ebb280
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x2570, Size: 0x8]// 0x7611ebb200
	DamageCauserRecordData WhoKillMeRecordData;//[Offset: 0x2578, Size: 0x20]// 0x7611ebae30
	STExtraPlayerState* KnockDownMeRecord;//[Offset: 0x2598, Size: 0x8]// 0x7611ebadb0
	int HandFolderRatio;//[Offset: 0x25a0, Size: 0x4]// 0x7611ebad40
	bool bIsIgnoreRecoverty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a4, Size: 0x1]// 0x7611ebacc0
	FString IgnoreRecovertyPropertyName;//[Offset: 0x25a8, Size: 0x10]// 0x7611ebac50
	float SwimUpRate;//[Offset: 0x25b8, Size: 0x4]// 0x7611ebabe0
	PlayerSwimComponent* swimComponet;//[Offset: 0x25c0, Size: 0x8]// 0x7611ebab60
	OceanManager* OceanManager;//[Offset: 0x25c8, Size: 0x8]// 0x7611ebaae0
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x25d0, Size: 0x10]// 0x7611eba9e0
	float SwitchPoseCD;//[Offset: 0x262c, Size: 0x4]// 0x7611eba970
	PrimitiveComponent* AbsolutelyMovingFollowTargetComp;//[Offset: 0x2638, Size: 0x8]// 0x7611eba8f0
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2650, Size: 0x1]// 0x7611eba870
	float CollideByTeammateCDConfig;//[Offset: 0x266c, Size: 0x4]// 0x7611eba800
	float LandedLogCDConfig;//[Offset: 0x2678, Size: 0x4]// 0x7611eba790
	PoseChangeTime SwitchPoseTime;//[Offset: 0x2680, Size: 0x10]// 0x7611eba4b0
	Transform HitBoxLeanTransL;//[Offset: 0x2690, Size: 0x30]// 0x7611eba430
	Transform HitBoxLeanTransR;//[Offset: 0x26c0, Size: 0x30]// 0x7611eba3b0
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x2708, Size: 0x8]// 0x7611eba330
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x2710, Size: 0x8]// 0x7611eba2b0
	float DelayHideDuration;//[Offset: 0x2718, Size: 0x4]// 0x7611eba240
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x271c, Size: 0x4]// 0x7611eba1d0
	float DelaySpawnDeadTombBox;//[Offset: 0x2720, Size: 0x4]// 0x7611eba160
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2724, Size: 0x1]// 0x7611eba0e0
	float MaxRagdollActiveDuration;//[Offset: 0x2728, Size: 0x4]// 0x7611eba070
	bool bShouldGenerateOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272c, Size: 0x1]// 0x7611eb9ff0
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x2740, Size: 0x30]// 0x7611eb9f70
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x2770, Size: 0x190]// 0x7611eb9ef0
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x2900, Size: 0x2c]// 0x7611eb9e70
	bool CheckNeedUpdate_LastIsOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292c, Size: 0x1]// 0x7611eb9df0
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x2930, Size: 0x28]// 0x7611eb9d70
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x2958, Size: 0x28]// 0x7611eb9bd0
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x2980, Size: 0x10]// 0x7611eb9b50
	enum ThrowGrenadeMode;//[Offset: 0x2990, Size: 0x1]// 0x7611eb9a50
	enum PrevThrowGrenadeMode;//[Offset: 0x2991, Size: 0x1]// 0x7611eb9950
	byte PeekMark;//[Offset: 0x2992, Size: 0x1]// 0x7611eb9870
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a0, Size: 0x1]// 0x7611eb97f0
	float PeekCheckAdditionalLen;//[Offset: 0x29a4, Size: 0x4]// 0x7611eb9780
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a8, Size: 0x1]// 0x7611eb9700
	float PeekCheckCollisionTimer;//[Offset: 0x29ac, Size: 0x4]// 0x7611eb9690
	float PeekCheckCollisionTimerFPP;//[Offset: 0x29b0, Size: 0x4]// 0x7611eb9620
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b8, Size: 0x1]// 0x7611eb95a0
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x29bc, Size: 0x4]// 0x7611eb9530
	int IsEnableReportPlayerBehavior;//[Offset: 0x29c0, Size: 0x4]// 0x7611eb94c0
	delegate OnCharacterPeek;//[Offset: 0x29d0, Size: 0x10]// 0x7611eb9440
	AttrRegisterItem[] RegAttrCache;//[Offset: 0x2a48, Size: 0x10]// 0x7611eb9340
	float HighWalkSpeed;//[Offset: 0x2a58, Size: 0x4]// 0x7611eb92d0
	float WalkSpeedChangeRate;//[Offset: 0x2a5c, Size: 0x4]// 0x7611eb9260
	float WalkSpeedThreshold;//[Offset: 0x2a60, Size: 0x4]// 0x7611eb91f0
	float MaxCrouchSpeed;//[Offset: 0x2a64, Size: 0x4]// 0x7611eb9180
	float MaxProneSpeed;//[Offset: 0x2a68, Size: 0x4]// 0x7611eb9110
	float MaxSprintSpeed;//[Offset: 0x2a6c, Size: 0x4]// 0x7611eb90a0
	float MaxSprintCrouchSpeed;//[Offset: 0x2a70, Size: 0x4]// 0x7611eb9030
	float MaxSwimSpeed;//[Offset: 0x2a74, Size: 0x4]// 0x7611eb8fc0
	float HealthPredict;//[Offset: 0x2a78, Size: 0x4]// 0x7611eb8f50
	float BreathAmount;//[Offset: 0x2a7c, Size: 0x4]// 0x7611eb8ee0
	float TurnInPlaceAngel;//[Offset: 0x2a80, Size: 0x4]// 0x7611eb8e70
	byte HealthStatus;//[Offset: 0x2a84, Size: 0x1]// 0x7611eb8df0
	<FString,DamageScale> DamageScale;//[Offset: 0x2a88, Size: 0x50]// 0x7611eb8a50
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x2ad8, Size: 0x50]// 0x7611eb84c0
	ExtraDamageReduceCfg[] ExtraDamageReduceList;//[Offset: 0x2b28, Size: 0x10]// 0x7611eb83c0
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b38, Size: 0x1]// 0x7611eb8340
	float EnergySpeedScale;//[Offset: 0x2b3c, Size: 0x4]// 0x7611eb82d0
	float PawnBackpackCapacity;//[Offset: 0x2b40, Size: 0x4]// 0x7611eb8260
	float SkillBackpackCapacity;//[Offset: 0x2b44, Size: 0x4]// 0x7611eb81f0
	float ArmorDurableReducePercent;//[Offset: 0x2b48, Size: 0x4]// 0x7611eb8180
	float ArmorDamageReduceIgnore;//[Offset: 0x2b4c, Size: 0x4]// 0x7611eb8110
	CharacterEnergyData Energy;//[Offset: 0x2b50, Size: 0x30]// 0x7611eb8090
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x2b80, Size: 0x10]// 0x7611eb7f90
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b90, Size: 0x1]// 0x7611eb7f10
	float FarDistanceAimFOV;//[Offset: 0x2b94, Size: 0x4]// 0x7611eb7ea0
	float FarRelevantDistanceSqured;//[Offset: 0x2b98, Size: 0x4]// 0x7611eb7e30
	float MiddleDistanceAimFOV;//[Offset: 0x2b9c, Size: 0x4]// 0x7611eb7dc0
	float MiddleRelevantDistanceSqured;//[Offset: 0x2ba0, Size: 0x4]// 0x7611eb7d50
	float ReplicatedAndOverridedSwimSpeed;//[Offset: 0x2ba4, Size: 0x4]// 0x7611eb7ce0
	int bIsInTheInvincible;//[Offset: 0x2bb4, Size: 0x4]// 0x7611eb7c70
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x2bb8, Size: 0x4]// 0x7611eb7c00
	float VerticalFallingDamageCoefficient;//[Offset: 0x2bbc, Size: 0x4]// 0x7611eb7b90
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x2bc0, Size: 0x4]// 0x7611eb7b20
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x2bc8, Size: 0x8]// 0x7611eb7aa0
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x2bd0, Size: 0x8]// 0x7611eb7a20
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x2bd8, Size: 0x28]// 0x7611eb79a0
	float StandHalfHeight;//[Offset: 0x2c00, Size: 0x4]// 0x7611eb7930
	float CrouchHalfHeight;//[Offset: 0x2c04, Size: 0x4]// 0x7611eb78c0
	float ProneHalfHeight;//[Offset: 0x2c08, Size: 0x4]// 0x7611eb7850
	float CrouchEnableCheckTolerance;//[Offset: 0x2c0c, Size: 0x4]// 0x7611eb77e0
	float FPPCollisionRadius;//[Offset: 0x2c10, Size: 0x4]// 0x7611eb7770
	float StandRadius;//[Offset: 0x2c14, Size: 0x4]// 0x7611eb7700
	float DyingRadius;//[Offset: 0x2c18, Size: 0x4]// 0x7611eb7690
	float CollisionRadiusOverride;//[Offset: 0x2c1c, Size: 0x4]// 0x7611eb7620
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x2c20, Size: 0x10]// 0x7611eb7520
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x2c30, Size: 0x10]// 0x7611eb70d0
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x2c40, Size: 0x8]// 0x7611eb7050
	float OverlapsOnVehicleTimerInterval;//[Offset: 0x2c5c, Size: 0x4]// 0x7611eb6fe0
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c60, Size: 0x1]// 0x7611eb6f60
	int VehicleSeatIdx;//[Offset: 0x2c64, Size: 0x4]// 0x7611eb6ef0
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6e, Size: 0x1]// 0x7611eb6e70
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x2c70, Size: 0x4]// 0x7611eb6e00
	bool bCanCharacterHideOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c85, Size: 0x1]// 0x7611eb6d80
	bool bHideOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c86, Size: 0x1]// 0x7611eb6d00
	CharacterAvatarComponent* AvatarComponent;//[Offset: 0x2c90, Size: 0x8]// 0x7611eb6c80
	delegate PreAttachedToVehicle;//[Offset: 0x2ca0, Size: 0x10]// 0x7611eb6c00
	delegate OnAttachedToVehicle;//[Offset: 0x2cb0, Size: 0x10]// 0x7611eb6b80
	delegate PreDetachedFromVehicle;//[Offset: 0x2cc0, Size: 0x10]// 0x7611eb6b00
	delegate OnDetachedFromVehicle;//[Offset: 0x2cd0, Size: 0x10]// 0x7611eb6a80
	delegate OnChangedVehicleSeat;//[Offset: 0x2ce0, Size: 0x10]// 0x7611eb6a00
	AutoAimingConfig HandFightAutoAimingConfig;//[Offset: 0x2cf0, Size: 0x94]// 0x7611eb5ef0
	bool bUseHandFightAutoAimingConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d84, Size: 0x1]// 0x7611eb5e70
	delegate OnPlayerStateUpdated;//[Offset: 0x2d88, Size: 0x10]// 0x7611eb5df0
	delegate OnSimulateViewDataUpdated;//[Offset: 0x2d98, Size: 0x10]// 0x7611eb5d70
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x2da8, Size: 0x10]// 0x7611eb5cf0
	Rotator AngledSightRotOffset;//[Offset: 0x2db8, Size: 0xc]// 0x7611eb5c70
	bool bHasInitOnClientWithGameState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e78, Size: 0x1]// 0x7611eb5bf0
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x2e80, Size: 0x8]// 0x7611eb5b70
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e89, Size: 0x1]// 0x7611eb5af0
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2e8c, Size: 0x4]// 0x7611eb5a80
	int DamageMagnifierIdx;//[Offset: 0x2e90, Size: 0x4]// 0x7611eb5a10
	STParachuteState STReplicateParchuteState;//[Offset: 0x2e98, Size: 0x18]// 0x7611eb5720
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x2eb0, Size: 0x8]// 0x7611eb56a0
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x2eb8, Size: 0x24]// 0x7611eb5400
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2edc, Size: 0x1]// 0x7611eb5380
	float MoveForwardInputValue;//[Offset: 0x2ee0, Size: 0x4]// 0x7611eb5310
	float MoveRightInputValue;//[Offset: 0x2ee4, Size: 0x4]// 0x7611eb52a0
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee8, Size: 0x1]// 0x7611eb5220
	float ParachuteLandingHeightAdded;//[Offset: 0x2eec, Size: 0x4]// 0x7611eb51b0
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef0, Size: 0x1]// 0x7611eb5130
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2ef4, Size: 0x4]// 0x7611eb50c0
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2ef8, Size: 0x4]// 0x7611eb5050
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2f00, Size: 0x8]// 0x7611eb4fd0
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x2f08, Size: 0x10]// 0x7611eb4ed0
	STExtraBaseCharacter* Leader;//[Offset: 0x2f18, Size: 0x8]// 0x7611eb4e50
	enum FollowState;//[Offset: 0x2f20, Size: 0x1]// 0x7611eb4d50
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x2f28, Size: 0x10]// 0x7611eb4c50
	FString LatestInviter;//[Offset: 0x2f38, Size: 0x10]// 0x7611eb4be0
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f48, Size: 0x1]// 0x7611eb4b60
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x2f50, Size: 0x4]// 0x7611eb4af0
	float maxShowAlpha;//[Offset: 0x2f58, Size: 0x4]// 0x7611eb4a80
	float MoveMaxShowDis;//[Offset: 0x2f5c, Size: 0x4]// 0x7611eb4a10
	float WeaponMaxShowDis;//[Offset: 0x2f60, Size: 0x4]// 0x7611eb49a0
	float VehicleMaxShowDis;//[Offset: 0x2f64, Size: 0x4]// 0x7611eb4930
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2fa0, Size: 0x4]// 0x7611eb48c0
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x2fa4, Size: 0x4]// 0x7611eb4850
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2fa8, Size: 0x4]// 0x7611eb47e0
	float FPPSwitchPoseWeaponSmoothTime;//[Offset: 0x2fac, Size: 0x4]// 0x7611eb4770
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3024, Size: 0x1]// 0x7611eb46f0
	int IsEnableReportRoute;//[Offset: 0x30cc, Size: 0x4]// 0x7611eb4680
	int IsEnableLogAIPlayerPos;//[Offset: 0x30e0, Size: 0x4]// 0x7611eb4610
	delegate PaintDecalClientCallBackDelegate;//[Offset: 0x30e8, Size: 0x10]// 0x7611eb4590
	float PaintDecalMaxDistance;//[Offset: 0x30f8, Size: 0x4]// 0x7611eb4520
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30fc, Size: 0x1]// 0x7611eb44a0
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30fd, Size: 0x1]// 0x7611eb4420
	bool bSkillFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30fe, Size: 0x1]// 0x7611eb43a0
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3108, Size: 0x1]// 0x7611eb4320
	bool bNightVisionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3109, Size: 0x1]// 0x7611eb42a0
	float MaxRelavantDistance;//[Offset: 0x3110, Size: 0x4]// 0x7611eb4230
	int IsEnableReportPlayerKillFlow;//[Offset: 0x3118, Size: 0x4]// 0x7611eb41c0
	int IsEnableReportGameSetting;//[Offset: 0x311c, Size: 0x4]// 0x7611eb4150
	int EnableReportGameSettingLevel;//[Offset: 0x3120, Size: 0x4]// 0x7611eb40e0
	bool bEnableMainMeshAnimNodeInitOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3124, Size: 0x1]// 0x7611eb4060
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x3128, Size: 0x4]// 0x7611eb3ff0
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x312c, Size: 0x4]// 0x7611eb3f80
	int IsEnableReportMrpcsFlow;//[Offset: 0x3130, Size: 0x4]// 0x7611eb3f10
	BaseFPPComponent* FPPComp;//[Offset: 0x3138, Size: 0x8]// 0x7611eb3e90
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x3140, Size: 0x8]// 0x7611eb3e10
	float EquipingScopeDelay;//[Offset: 0x314c, Size: 0x4]// 0x7611eb3da0
	delegate OnEquipZoomScope;//[Offset: 0x3158, Size: 0x10]// 0x7611eb3d20
	float DistSquaredInterruptRevival;//[Offset: 0x3170, Size: 0x4]// 0x7611eb3cb0
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x3174, Size: 0x20]// 0x7611eb3810
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x3194, Size: 0x10]// 0x7611eb3530
	float CharacterFallingVelocityZFactor;//[Offset: 0x31a4, Size: 0x4]// 0x7611eb34c0
	int ShowingHeadWidgetParam;//[Offset: 0x31b0, Size: 0x4]// 0x7611eb3450
	WeaponOwnerComponent* WeaponOwnerComponent;//[Offset: 0x31c0, Size: 0x8]// 0x7611eb33d0
	bool bHasFinishedRegisterPlayerPickUpList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c8, Size: 0x1]// 0x7611eb3350
	enum[] BuildUIHideState;//[Offset: 0x31d0, Size: 0x10]// 0x7611eb31d0
	bool bDieInHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e0, Size: 0x1]// 0x7611eb3150
	int CurrentTaskTriggerAreaID;//[Offset: 0x31e4, Size: 0x4]// 0x7611eb30e0
	float SignalHPBeforeEnterBreath;//[Offset: 0x31e8, Size: 0x4]// 0x7611eb3070
	float ProduceSoundInterval;//[Offset: 0x31ec, Size: 0x4]// 0x7611eb3000
	float ProduceSoundVelocitySquared;//[Offset: 0x31f0, Size: 0x4]// 0x7611eb2f90
	float HearRadius;//[Offset: 0x31f4, Size: 0x4]// 0x7611eb2f20
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x3228, Size: 0x4]// 0x7611eb2eb0
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322c, Size: 0x1]// 0x7611eb2e30
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322e, Size: 0x1]// 0x7611eb2db0
	bool bSupplyBulletOnBorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322f, Size: 0x1]// 0x7611eb2d30
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3234, Size: 0x1]// 0x7611eb2cb0
	float SignalHPRemainingTime;//[Offset: 0x3238, Size: 0x4]// 0x7611eb2c40
	int MurderWeaponID;//[Offset: 0x3240, Size: 0x4]// 0x7611eb2bd0
	float SmoothNetUpdateRotationTime;//[Offset: 0x324c, Size: 0x4]// 0x7611eb2b60
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3250, Size: 0x1]// 0x7611eb2ae0
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3251, Size: 0x1]// 0x7611eb2a60
	float FixMovementOnVehicleInterval;//[Offset: 0x3254, Size: 0x4]// 0x7611eb29f0
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x325c, Size: 0x4]// 0x7611eb2980
	Transform DefaultParticleAttachTransform;//[Offset: 0x3270, Size: 0x30]// 0x7611eb2900
	byte DefaultParticleAttachLocationType;//[Offset: 0x32a0, Size: 0x1]// 0x7611eb2880
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x32a8, Size: 0x10]// 0x7611eb2560
	float ParticleShowingInterval;//[Offset: 0x32b8, Size: 0x4]// 0x7611eb24f0
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c0, Size: 0x1]// 0x7611eb2470
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c1, Size: 0x1]// 0x7611eb23f0
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x32c8, Size: 0x28]// 0x7611eb2370
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x32f0, Size: 0x8]// 0x7611eb22f0
	bool bLogAIFloatInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f8, Size: 0x1]// 0x7611eb2270
	KOFActivityData KOFActivityData;//[Offset: 0x3300, Size: 0xe8]// 0x7611eb1c90
	FName[] ObjectPoolCheckIgnorePropertyNames;//[Offset: 0x33e8, Size: 0x10]// 0x7611eb1ba0
	float JoystickSensitivity;//[Offset: 0x33f8, Size: 0x4]// 0x7611eb1b30
	float SwitchWeaponCD;//[Offset: 0x33fc, Size: 0x4]// 0x7611eb1ac0
	float CurSwitchWeaponCD;//[Offset: 0x3400, Size: 0x4]// 0x7611eb1a50
	bool bIsInFortress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340e, Size: 0x1]// 0x7611eb19d0
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340f, Size: 0x1]// 0x7611eb1950
	AnimInstance* MainAnimInstance;//[Offset: 0x3410, Size: 0x8]// 0x7611eb18d0
	STExtraAnimInstanceBase* TPPAnimInstance;//[Offset: 0x3418, Size: 0x8]// 0x7611eb1850
	STExtraAnimInstanceBase* FPPAnimInstance;//[Offset: 0x3420, Size: 0x8]// 0x7611eb17d0
	float VehicleDetailedTraceDist;//[Offset: 0x3430, Size: 0x4]// 0x7611eb1760
	float SpringArmTraceDist;//[Offset: 0x3434, Size: 0x4]// 0x7611eb16f0
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0x3438, Size: 0x50]// 0x7611eb12a0
	delegate OnDSSkillStartDelegate;//[Offset: 0x34a8, Size: 0x10]// 0x7611eb1220
	CurveFloat* VehicleSpeedDeviationFactorCurve;//[Offset: 0x34b8, Size: 0x8]// 0x7611eb11a0
	bool bUseCustomAnimUpdateRateParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c0, Size: 0x1]// 0x7611eb1120
	float MaxDistFromMainChar;//[Offset: 0x34c4, Size: 0x4]// 0x7611eb10b0
	int BaseNonRenderedUpdateRate;//[Offset: 0x34c8, Size: 0x4]// 0x7611eb1040
	int BaseNonRenderedUpdateRateHigh;//[Offset: 0x34cc, Size: 0x4]// 0x7611eb0fd0
	float[] CustomAnimUpdateRateParams;//[Offset: 0x34d0, Size: 0x10]// 0x7611eb0ee0
	float ShootWeaponADSTime;//[Offset: 0x34e0, Size: 0x4]// 0x7611eb0e70
	float ShootWeaponFireAnimAlphaRate;//[Offset: 0x34e4, Size: 0x4]// 0x7611eb0e00
	float ShootWeaponFireAnimADSAlphaRate;//[Offset: 0x34e8, Size: 0x4]// 0x7611eb0d90
	bool DonotPlayFootstepSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34ec, Size: 0x1]// 0x7611eb0d10
	PersistClientStateComponent* PersistClientStateComponent;//[Offset: 0x34f0, Size: 0x8]// 0x7611eb0c90
	<PlayMontageData> MontageQueue;//[Offset: 0x34f8, Size: 0x50]// 0x7611eb0780
	bool IsHelmetFightingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3548, Size: 0x1]// 0x7611eb0700
	bool bSkipLandSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3549, Size: 0x1]// 0x7611eb0680
	bool bCanBeControlledByLimitZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354a, Size: 0x1]// 0x7611eb0600
	Actor* AssociatedHelicoptor;//[Offset: 0x3550, Size: 0x8]// 0x7611eb0580
	Actor* AssociatedLion;//[Offset: 0x3558, Size: 0x8]// 0x7611eb0500
	Actor* TempViewerForReplay;//[Offset: 0x3560, Size: 0x8]// 0x7611eb0480
	float CurrentNetCullDistanceSquared;//[Offset: 0x3568, Size: 0x4]// 0x7611eb0410
	bool IsBunkerEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356c, Size: 0x1]// 0x7611eb0390
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x3570, Size: 0x10]// 0x7611eb02a0
	float LastSyncHealthChange;//[Offset: 0x3580, Size: 0x4]// 0x7611eb0230
	SkeletalMesh* DefaultCharacterMesh;//[Offset: 0x3588, Size: 0x8]// 0x7611eb01b0
	bool CheckNetRelevantInScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3590, Size: 0x1]// 0x7611eb0130
	bool ReplicationPausedInScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3591, Size: 0x1]// 0x7611eb00b0
	bool bIgnoreBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3592, Size: 0x1]// 0x7611eb0030
	int CheckCircleIndex;//[Offset: 0x3594, Size: 0x4]// 0x7611eaffc0
	delegate OnMainCharAnimInstanceInit;//[Offset: 0x35b8, Size: 0x10]// 0x7611eaff40
	delegate OnClientPlayerLanded;//[Offset: 0x35c8, Size: 0x10]// 0x7611eafec0
	float UGCMoveSpeedScale;//[Offset: 0x35d8, Size: 0x4]// 0x7611eafe50
	UGCMoveSpeedScaleModifyItem[] UGCMoveSpeedModifyList;//[Offset: 0x35e0, Size: 0x10]// 0x7611eaf9e0
	bool bSkipDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f0, Size: 0x1]// 0x7611eaf960
	delegate OnBecomeOBViewTarget;//[Offset: 0x35f8, Size: 0x10]// 0x7611eaf8e0
	delegate OnLeaveOBViewTarget;//[Offset: 0x3608, Size: 0x10]// 0x7611eaf860
	CameraModifyData[] DefaultModifys;//[Offset: 0x3618, Size: 0x10]// 0x7611ead5f0
	delegate OnAnimInstanceChangeEvent;//[Offset: 0x3628, Size: 0x10]// 0x7611ead570
	SkeletalMeshComponent* LastSkeletalMesh;//[Offset: 0x3638, Size: 0x8]// 0x7611ead4f0
	AnimInstance* LastAnimInstance;//[Offset: 0x3640, Size: 0x8]// 0x7611ead470
	float CurrentGravityScale;//[Offset: 0x36b0, Size: 0x4]// 0x7611ead400
	float CheckCurWeaponMeshVisibleInterval;//[Offset: 0x36b4, Size: 0x4]// 0x7611ead390
	int CheckCurWeaponMaxFailedCount;//[Offset: 0x36b8, Size: 0x4]// 0x7611ead320
	float CurCheckCurWeaponMeshVisibleInterval;//[Offset: 0x36bc, Size: 0x4]// 0x7611ead2b0
	bool bHasReportWeaponMeshVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c0, Size: 0x1]// 0x7611ead230
	float DistanceBetweenLastShootHitPosAndSelfLoc;//[Offset: 0x36c4, Size: 0x4]// 0x7611ead1c0
	float PlayerHitBoxPositionOffsetCheckInterval;//[Offset: 0x36c8, Size: 0x4]// 0x7611ead150
	float PlayerHitBoxPositionOffsetCheckThreshold;//[Offset: 0x36cc, Size: 0x4]// 0x7611ead0e0
	int CheckPlayerHitBoxPositionOffsetFailedCntThreshold;//[Offset: 0x36d0, Size: 0x4]// 0x7611ead070
	float ReportPlayerHitBoxPositionOffsetCheckColdTimeSecs;//[Offset: 0x36d4, Size: 0x4]// 0x7611ead000
	float ReportPlayerHitBoxPositionMaxDisToCamera;//[Offset: 0x36d8, Size: 0x4]// 0x7611eacf90
	FString PhysBoxBoneName;//[Offset: 0x36e0, Size: 0x10]// 0x7611eacf20
	float CurCheckPlayerHitBoxPositionOffsetInterval;//[Offset: 0x36f0, Size: 0x4]// 0x7611eaceb0
	int CurCheckPlayerHitBoxPositionOffsetFailedCnt;//[Offset: 0x36f4, Size: 0x4]// 0x7611eace40
	FString[] CurCheckPlayerHitBoxPositionOffsetFailedInfoList;//[Offset: 0x36f8, Size: 0x10]// 0x7611eacd50
	float LastReportPlayerHitBoxPositionOffsetCheckTimeSecs;//[Offset: 0x3708, Size: 0x4]// 0x7611eacce0
	float PlayerPickupAvailableActorPoolCheckInterval;//[Offset: 0x370c, Size: 0x4]// 0x7611eacc70
	int CheckPlayerPickupAvailableActorPoolFailedCntThreshold;//[Offset: 0x3710, Size: 0x4]// 0x7611eacc00
	float CurCheckPlayerPickupAvailableActorPoolInterval;//[Offset: 0x3714, Size: 0x4]// 0x7611eacb90
	bool bHasReportPlayerPickupAvailableActorPoolMiss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3718, Size: 0x1]// 0x7611eacb10
	<Actor*,int> CachePlayerPickupAvailableActorPoolMissData;//[Offset: 0x3720, Size: 0x50]// 0x7611eac970
	int CheckAutoFireFailedCntThreshold;//[Offset: 0x3770, Size: 0x4]// 0x7611eac900
	bool bHasReportCheckAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3774, Size: 0x1]// 0x7611eac880
	int CurCheckAutoFireFailedCnt;//[Offset: 0x3778, Size: 0x4]// 0x7611eac810
	bool bLockAddControllerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377c, Size: 0x1]// 0x7611eac790
	int CameraDebugReportCount;//[Offset: 0x3784, Size: 0x4]// 0x7611eac720
	float CameraLocationErrorThreshold;//[Offset: 0x3788, Size: 0x4]// 0x7611eac6b0
	byte[] SuddenDeathDamageTypes;//[Offset: 0x3790, Size: 0x10]// 0x7611eac5b0
	bool bIsOpenWeaponSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a0, Size: 0x1]// 0x7611eac530
	float f_MaxFallingSpeed;//[Offset: 0x37a8, Size: 0x4]// 0x7611eac4c0
	bool bShowWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37ac, Size: 0x1]// 0x7611eac440
	bool bInCirclePainVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37ad, Size: 0x1]// 0x7611eac3c0
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x45a2d64
	void VaultFailPawnCPP(const FString Content);// 0x45a2cd8
	void VaultFailPawnBluePrint(out const FString Content);// 0x45a2c3c
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x45a2b88
	bool UseSimulateView();// 0x45a2b50
	void UserCancelRescue();// 0x45a2b3c
	void UpdateUGCMoveSpeedScale();// 0x45a2b28
	bool UpdateShovelingState();// 0x45a2af0
	void UpdateShovelingHoldStateRelease();// 0x45a2adc
	void UpdateShovelingHoldStatePressed();// 0x45a2ac8
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x45a2a10
	void UpdateDynamicHoldGunOption();// 0x45a29fc
	void UpdateCurrentShootWeaponTick();// 0x45a29e8
	void UpdateCommonFlagData();// 0x45a29cc
	void UpdateCirclePainVolumeStatus();// 0x45a29b8
	void UpdateCachedControlRotAndActorRot(out const Rotator InControlRot, out const Rotator InActorRot);// 0x45a28c4
	void UpdateAttrRegisteredData();// 0x45a28b0
	void UnRegisterPlayerPickUpList();// 0x45a2894
	void UnequipWeaponFinish();// 0x45a2880
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x45a27c0
	void UGCClientTakeDamage(int DamageType, float Damage, Pawn* InstiagatorPawn, float CurHealth, bool bFatalDamage, bool bHeadShot, Vector HitLocation, Vector HitFromDirection);// 0xffffff8a17adf2b0
	void UGC_WeaponSwitchEvent();// 0xffffff8a17adf2b0
	void UGC_WeaponStopFireEvent();// 0xffffff8a17adf2b0
	void UGC_WeaponStartFireEvent(byte isAuto);// 0xffffff8a17adf2b0
	void UGC_WeaponShootBulletEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0xffffff8a17adf2b0
	void UGC_WeaponBulletHitEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, HitResult HitInfo);// 0xffffff8a17adf2b0
	float UGC_TakeDamageOverrideEvent(float Damage, byte DamageType, Controller* EventInstigator, Actor* DamageCauser, HitResult Hit);// 0x45a25d4
	void UGC_ReloadStartEvent();// 0xffffff8a17adf2b0
	void UGC_ReloadEndEvent();// 0xffffff8a17adf2b0
	void UGC_PlayerSignalChangeEvent(float CurrentSignal);// 0xffffff8a17adf2b0
	void UGC_PlayerPickUpEvent();// 0xffffff8a17adf2b0
	void UGC_PlayerHealthChangeEvent(float CurrentHealth);// 0xffffff8a17adf2b0
	void UGC_PlayerDeadEvent(Controller* Killer, byte DamageType);// 0xffffff8a17adf2b0
	void UGC_OpenScopeEvent();// 0xffffff8a17adf2b0
	void UGC_LeavePawnStateEvent(enum PawnState);// 0xffffff8a17adf2b0
	void UGC_EquipWeaponEvent(byte Slot);// 0xffffff8a17adf2b0
	void UGC_EnterPawnStateEvent(enum PawnState);// 0xffffff8a17adf2b0
	void UGC_CloseScopeEvent();// 0xffffff8a17adf2b0
	void UGC_ChangeCurrentUsingWeaponEvent(byte UsingWeaponSlot, byte LastSlot);// 0xffffff8a17adf2b0
	void TryToBroadcastFatalDamageEvent(Controller* causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser, bool deadToFinished);// 0x45a23f4
	void TryPeek(bool IsLeft, bool ButtonDown, bool IsManual);// 0x45a22e0
	void TryFollowInitialParachuteLeader(FString Name);// 0x45a2208
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x45a2170
	void TimerDelayShowDeadTombBox(PlayerTombBox* DeadTombBox);// 0x45a20f4
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(enum NewMode, enum PrevMode);// 0xffffff8a17adf2b0
	void TakeoutWeapons();// 0x45a20e0
	bool TakeOtherDamage(STExtraBaseCharacter* attacher, float InDamageVal, Vector DamageDir);// 0x45a1fd4
	float TakeDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x45a1e70
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x45a1d74
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x45a1cf0
	void SwitchWeaponModuleSystemModificationScheme(int ThemeID);// 0x45a1c40
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x45a1ae8
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte InPoseState, float TimeStamp);// 0x45a19b8
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState);// 0x45a18bc
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte InPoseState);// 0x45a17fc
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x45a1654
	void SwitchBackToPreviousDiffSlotWeaponOnServer();// 0x45a1640
	void STServerUpdateState_New(Float_NetQuantize8 InThrottleInput, Float_NetQuantize8 InSteeringInput, int8 State, const Rotator ControlRotation);// 0x45a14d4
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator ControlRotation);// 0x45a1368
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float BlendTime);// 0x45a1268
	void StopShoveling();// 0x45a1254
	void StopMove();// 0x45a1240
	bool StopFireFilter();// 0x45a1200
	void StopCharacterAfterDead();// 0x45a11e4
	bool StartFireFilter();// 0x45a11a4
	void SpawnFootprint(enum FootprintType);// 0x45a1128
	void SpawnAndSwithToGrenadeServerCall(int GrenadeID);// 0x45a1078
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot, int GrenadeID, bool UseSwitchAnim);// 0x45a0f6c
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x45a0ea4
	void ShowNightVisionFrame();// 0x45a0e88
	void ShowInjuryScreenEffect();// 0x45a0e74
	void ShowDebugRole();// 0x45a0e60
	void ShowDebugRecordData();// 0x45a0e4c
	void ShowDebugPickUpFlow();// 0x45a0e38
	void ShowDebugEquipOrUnequipFlow();// 0x45a0e24
	void Shoveling();// 0x45a0e10
	bool ShouldUpdateHPOnUI();// 0x45a0dd0
	bool ShouldShowPassCardBuyType();// 0x45a0d90
	bool ShouldShowMedal();// 0x45a0d58
	bool ShouldShowLiked();// 0x45a0d20
	bool ShouldShowHeadWidget();// 0x45a0ce8
	bool ShouldShowEnjoyCard();// 0x45a0cb0
	bool ShouldShowCorp();// 0x45a0c78
	bool ShouldShowCommonData();// 0x45a0c40
	bool ShouldShowAnchor();// 0x45a0c08
	bool ShouldClearWeaponDelegatesOnRecycleInner();// 0x45a0bc8
	bool ShouldClearWeaponDelegatesOnRecycle();// 0x45a0b88
	bool ShouldCharacterRepSimulateViewData();// 0x45a0b50
	bool ShouldAutoScopeWhenPeek();// 0x45a0b10
	void SetWeaponSightStateServer(bool IsOpenWeaponSight);// 0x45a0a4c
	void SetWeaponSightStateLocal(bool IsOpenWeaponSight);// 0x45a09c0
	void SetWeaponSightState(bool IsOpenWeaponSight);// 0x45a093c
	void SetWeaponShootType(byte ShootType, STExtraShootWeapon* TargetWeapon);// 0x45a087c
	void SetViewTargetAgainForOB();// 0x45a0868
	void SetUpUIStyleServer(bool bSetUp, UserWidgetStyle* UserWidgetStyle);// 0x45a07a0
	void SetUpUIMaskServer(bool bSetUp, FString Param);// 0x45a0684
	void SetUpSubViewTargetServer(bool bSetUp, Actor* TargetActor, float BlendTime);// 0x45a0580
	void SetUpSubAnimInstanceServer(bool bSetUp, class AnimInstance SubInstanceClass, FName SlotName, Actor* OwningActor, int SubAnimTypes);// 0x45a0408
	void SetUpActivityActionServer(bool bDo, out FName[] ActionName, Actor* OwningActor);// 0x45a02e4
	void SetUGCMoveSpeedScaleByName(float Scale, FString AttrModifyItemName);// 0x45a0220
	void SetTPPDefaultFov(float InFov);// 0x45a019c
	void SetThrowGrenadeMode(enum ThrowMode);// 0x45a0120
	void SetSwimSpeedScale(float Scale);// 0x45a00a4
	void SetSwimSpeedModifier(float NewModifier);// 0x45a0028
	void SetSprintSpeedScale(float Scale);// 0x459ffac
	void SetSpeedScaleUGC(float Scale);// 0x459ff30
	void SetSimClientLocationOrRotation(Vector Location, Rotator Rotation, bool setLoc, bool setRot);// 0x459fdd8
	void SetShowWeapon(bool bShow);// 0x459fd54
	void SetProneSpeedScale(float Scale);// 0x459fcd8
	void SetPoseStateAttrModifierEnable(byte InPoseState, bool Enable);// 0x459fc18
	void SetPlayerVehAnimationNeedUpdate();// 0x459fc04
	void SetParachuteServerAuthorized();// 0x459fbf0
	void SetMyGiftGiverCandidate(STExtraBaseCharacter* candidate, byte tempGiftType, int SubGiftType);// 0x459faf4
	void SetMoveSpeedModifier(float NewModifier);// 0x459fa78
	void SetJumpZVelocity(float JumpZVelocity);// 0x459f9fc
	void SetJumpHeightModifier(float NewModifier);// 0x459f980
	void SetIsDuringTransferLeader(bool isTransfer);// 0x459f8fc
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x459f834
	void SetIsAutoAimEnabled(bool IsEnable);// 0x459f7b0
	void SetIgnoreBlueCircle(bool bIgnore);// 0x459f72c
	void SetHighWalkSpeed(float WalkSpeed);// 0x459f6b0
	void SetHealthMax(float NewHealthMax);// 0x459f634
	void SetHealth(float NewHealth, byte Reason);// 0x459f57c
	void SetHandFoldRatio(int Ratio);// 0x459f500
	void SetGravityScale(float NewGravity);// 0x459f484
	void SetFPPDefaultFov(float InFov);// 0x459f400
	void SetExitingParachute(bool ExitParachute);// 0x459f37c
	void SetEnergySpeedScaleUGC(float Scale);// 0x459f300
	void SetEnergySpeedScale(float InEnergySpeedScale);// 0x459f284
	void SetDelayStateSwitchTime(float DelayTime);// 0x459f20c
	void SetCurScopeFov(float InFov);// 0x459f190
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x459f0b4
	void SetCurBonfire(BonfireActor* newBonfire);// 0x459f038
	void SetCrouchSpeedScale(float Scale);// 0x459efbc
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x459eef4
	void SetCommonFlagData(out const CommonFlagData[] InFlagDataList);// 0x459ee60
	void SetClientLocationOrRotationAndAttach(Vector Location, Rotator Rotation, SceneComponent* AttachScene, FName SocketName);// 0x459ed24
	void SetClientLocationOrRotation(Vector Location, Rotator Rotation, bool setLoc, bool setRot);// 0x459ebcc
	void SetCheatSpeedModifier(float NewModifier);// 0x459eb48
	void SetCharacterMaxEnergy(const float InEnergyMax, const bool InIsUpdatePhase);// 0x459ea88
	void SetCharacterEnergy(const float InEnergy);// 0x459ea10
	void SetCharacterAttrModifierEnable(FString ModifierName, bool IsEnable);// 0x459e944
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x459e884
	void SetBaseSlow(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x459e78c
	void SetAnimParamIsRescueing(bool bIsRescuing, bool bIsRescuingSelf);// 0x459e6bc
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x459e638
	void SetAnimParamCarringState(bool bEnter, bool bCarried);// 0x459e568
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x459e4e4
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x459e42c
	void SetAnimListComponentChild(UAECharAnimListCompBase* ChildComp, bool Add, byte AddLayer, byte AnimOverrideType);// 0x459e2ec
	void SetAmbientRTPC(FString RTPC, float Value);// 0x459e1d8
	void SetAllWeaponBulletNumToMaxOnServer(bool bCheckHasExtendDJ, bool bCheckAndConsumeBullet);// 0x459e108
	int SetAdditiveVelocity(out const Vector InAdditiveVelocity);// 0x459e06c
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, int ConsecutivelyShovelingCount, float TimeStamp);// 0x459deec
	void ServerUpdateShovelingHoldState(bool ishold);// 0x459de28
	void ServerTriggerJump();// 0x459ddc8
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x459dcb8
	void ServerSetPeekCollision(bool HasCollision);// 0x459dbf4
	void ServerSetMovementState(Vector Input);// 0x459db3c
	void ServerSetCurrentCameraMode(byte InCameraMode);// 0x459da8c
	void ServerSendToLobbyServerUseItem(int ItemID, int Count, bool bUseDirectly);// 0x459d98c
	void ServerSendToLobbyServerUseGiftItem(int ItemID, int Count, STExtraBaseCharacter* receiver, bool bUseDirectly);// 0x459d854
	void ServerSendPreDetachFromVehicleToAllClinet(STExtraVehicleBase* InVehicle, enum SeatType, Vector LeavePos);// 0x459d750
	void ServerSendPreAttachToVehicleToAllClinet(STExtraVehicleBase* InVehicle, enum SeatType);// 0x459d690
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x459d500
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x459d3b8
	void ServerNightVisionUse(bool bUse);// 0x459d2f4
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x459d1f8
	void ServerHandleForceClearClientCreateWeaponCacheLocal();// 0x459d1dc
	void ServerForceStopVaultCPP();// 0x459d17c
	void ServerForceStopVaultBluePrint();// 0x459d160
	void ServerFollowTeammate(FString Name);// 0x459d0a8
	void ServerExitCustomFlying();// 0x459d048
	void ServerEnterCustomFlying(byte Mode, byte MoveFlag);// 0x459cf58
	void ServerChangeThrowGrenadeMode(enum ThrowMode);// 0x459cea8
	void ServerCancelFollow();// 0x459ce48
	void Server_SpawnActor(class Actor ActorTemplate, Quat Rotation, Vector RelativeLocation);// 0x459ccd8
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x459cb9c
	void SendServerMoveToClientReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x459ca60
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x459c8ec
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x459c778
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x459c728
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x459c560
	bool SearchGroundWrappersAndTombBoxes(out SearchedPickUpItemResult[] OutGroundWrappers, out SearchedTombBoxAndWrapperListResult[] OutTombBoxes);// 0x459c404
	void Scoping(byte NewType);// 0x459c388
	void ScopeOut(byte NewType);// 0x459c30c
	void ScopeInterrupt(byte NewType, bool ForceInterrupt);// 0x459c24c
	bool ScopeIn(byte NewType);// 0x459c1bc
	void SaveMeshUpdateFlag();// 0x459c19c
	void SafetyTeleportTo(out const Vector TargetPos, out const Rotator TargetRot);// 0x459c0b8
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x459bfc8
	void RPC_Server_SwitchBackToPreviousDiffSlotWeapon();// 0x459bf68
	void RPC_Server_StopReload();// 0x459bf08
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot, int GrenadeID, bool UseSwitchAnim);// 0x459bdc4
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x459bd14
	void RPC_Server_SetFPPDefaultFov(float InFov);// 0x459bc64
	void RPC_Server_SetCurScopeFov(float InFov);// 0x459bbb4
	void RPC_Server_PlayerPickUpErrorRsp(PickUpListWrapperActor* ListWrapper, int InstanceID, int TypeSpesificID, int Count, bool bInUIList, const PickUpItemData[] SearchTargetData, const PickUpItemData[] ListWrapperData);// 0x459b8c0
	void RPC_Server_OnDeathPlaybackMsg(FString VictimUID, FString AttackerUID, FString Msg);// 0x459b76c
	void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x459b6a8
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x459b648
	void RPC_Server_ChangeWeaponState(enum State, STExtraWeapon* Weapon);// 0x459b558
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x459b4a8
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x459b3f8
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot, int GrenadeID, bool UseSwitchAnim);// 0x459b2b4
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x459b204
	void RPC_Client_PlayerPickUpErrorReq(PickUpListWrapperActor* ListWrapper, int InstanceID, int TypeSpesificID, int Count);// 0x459b09c
	void RPC_Client_PlayerDisuseFixWeapon(bool bCurIsFpp);// 0x459b010
	void RPC_Client_PickUpListDataReport(PickUpListWrapperActor* FailedListWrapper);// 0x459af60
	void RPC_Client_OnNearDeathRecordingNotify(FString VictimName, FString VictimUID, FString SpectatorName, FString AttackerUID, bool bSpectatorIsAI);// 0x459ad6c
	void RPC_Client_OnDeathStopRecordingNotify(FString VictimName, FString VictimUID, FString SpectatorName, FString AttackerUID, bool bSpectatorIsAI, bool bForce);// 0x459ab2c
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName, int ItemID);// 0x459a8a8
	void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x459a7e4
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x459a784
	void RestoreMeshUpdateFlag();// 0x459a764
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x459a620
	void ResetValueLimitForHealthPredict();// 0x459a60c
	void ResetUGCMoveSpeedScale();// 0x459a5f8
	void ResetSignalOnServer(bool bRescued);// 0x459a574
	void ResetRescueAndCarryData(bool bResetRescue, bool bResetCarry);// 0x459a4a4
	void ResetJumpZVelocity();// 0x459a490
	void ResetDamageReductionData();// 0x459a47c
	void ResetCharacterEnergy();// 0x459a468
	void ResetCamera();// 0x459a454
	void RequestUserCancleRescue();// 0x459a3f4
	bool RequestPaintDecal(int DecalId);// 0x459a364
	void ReportWeaponSlotDataChange(byte TargetChangeSlot);// 0x459a2e8
	void ReportUIStyleDSException();// 0x459a2d4
	void ReportLocationError();// 0x459a2c0
	void ReportItemEquipmentInfo(int SlotID, FString EquipmentInfo);// 0x459a1fc
	void ReportItemAvatarInfo(enum SlotType, FString EquipmentInfo);// 0x459a138
	void ReportAntiCheatInfo();// 0x459a124
	void RemoveOneCommonFlagDataCustom(out const CommonFlagData InFlagData);// 0x459a060
	void RemoveDynamicExtraDamageReduceCfg(FString AttachmentID);// 0x4599f88
	void RemoveDamageReductionData(int Key);// 0x4599f0c
	bool ReloadCurrentWeapon();// 0x4599ecc
	void RegisterPlayerPickUpList();// 0x4599eb0
	void RefreshPersonPerspective();// 0x4599e9c
	void RefreshPawnVaultTypeServer();// 0x4599e3c
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x4599db0
	void RefreshMoveAttrModifier();// 0x4599d9c
	void RefreshHeadWidget(bool IsAdd, int InParam);// 0x4599ccc
	void RefreshAvatar(int SlotType, bool IsEquipped);// 0x4599c0c
	void RefreshAllWeaponVisibility();// 0x4599bf8
	void RecordFinalParachuteLeader();// 0x4599be4
	void ReceiveLocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0xffffff8a17adf2b0
	void ReceiveInitPlayerOrAI(bool bInIsAI);// 0xffffff8a17adf2b0
	void ReceiveAddRadialImpulse(out const Vector Origin, float Radius, float Strength, class DamageType DamageTypeClass, bool bLinearFalloff, bool bVelChange);// 0xffffff8a17adf2b0
	void ReadDefaultFov();// 0xffffff8a17adf2b0
	void PutDownAllPropAndGenerateInventoryBox(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x4599b10
	void ProcessDragonBoatDrumSeat(bool enterDrumSeat);// 0x4599a8c
	void PrintAIPolicyDecisionData();// 0x4599a78
	void PreSkillCacheWeaponSolt();// 0x4599a64
	void PostSpawnAndSwitchToGrenadOnClientBP(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x45999a4
	void PostLocalEquipWeaponLeanInOutBP(STExtraWeapon* Weapon, byte Slot);// 0x45998e4
	void PostGetPlayerAnimation();// 0xffffff8a17adf2b0
	void PossessedBy(Controller* NewController);// 0x4599860
	void PlaySwitchSightSound();// 0x459984c
	void PlaySwitchFireModeSound();// 0x4599838
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x45997bc
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float BlendTime);// 0x4599684
	void PlaySelfThrowAwayWeaponSound();// 0x4599670
	void PlayPullBoltSound();// 0x459965c
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x45994f4
	void PlayMountAccessoriesSound();// 0x45994e0
	void PlayMagOUTSound();// 0x45994cc
	void PlayMagINSound();// 0x45994b8
	void PlayLocalShellDropFX();// 0x45994a4
	void PlayLoadBulletSound();// 0x4599490
	void PlayFootstepSound(byte FootStepState, Vector DSNotifyLocation);// 0x45993d0
	bool PlayerConfirmToRescue();// 0x4599398
	bool PlayerConfirmToPutDown();// 0x4599360
	bool PlayerConfirmToCarry();// 0x4599328
	void PlayEmoteClient(int EmoteID);// 0x45992ac
	void PlayCharacterDeadAnim(out const Vector KillingHitImpulseDir, out const DamageEvent DamageEvent, out const HitResult KillingHitInfo);// 0x459914c
	void PlayChangeMagazineSound();// 0x4599138
	void PlayAmbientSound();// 0x4599124
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount);// 0x4598fcc
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount);// 0x4598edc
	void PawnVaultStopCPP();// 0x4598ec0
	void PawnVaultStopBluePrint();// 0x4598ea4
	void PawnVaultServerStopCheckCPP();// 0x4598e44
	void PawnVaultServerStopCheckBluePrint();// 0x4598e28
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x4598ab8
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x459879c
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir);// 0x45984d8
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir);// 0x45981f8
	FString ParsePlayerNameFromRemoteURL(FString RemoteURL);// 0x45980d4
	void PackupWeapons();// 0x45980c0
	float OverrideDamageValueWhenTakeDamage(float Damage, int DamageType, Controller* EventInstigator, Actor* DamageCauser, out const HitResult Hit);// 0x4597f1c
	void OpenScope(bool IsOpenScope);// 0x4597e98
	void OnWeaponEquipmentUpdate();// 0x4597e7c
	void OnUnEquipWeapon();// 0xffffff8a17adf2b0
	void OnSwitchPersonPerspective(bool bIsFPP);// 0x4597df8
	void OnStopFire();// 0xffffff8a17adf2b0
	void OnStateLeave(enum LeavedState);// 0x4597d74
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x4597cb8
	void OnStateEnter(enum EnteredState);// 0x4597c34
	void OnStartFire(byte isAuto);// 0xffffff8a17adf2b0
	void OnShowName(bool _IsShow, FString _Name);// 0xffffff8a17adf2b0
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x4597bb0
	void OnScopeNotHandFold();// 0x4597b9c
	void OnScopeHandFold();// 0x4597b88
	void OnRescueOtherSucceed();// 0x4597b74
	void OnRep_WeaponSightStateChanged();// 0x4597b60
	void OnRep_WaterObj();// 0x4597b4c
	void OnRep_VehicleSeatIdx();// 0x4597b38
	void OnRep_UnmannedVehicleSyncData();// 0x4597b1c
	void OnRep_TPPDefaultFov();// 0x4597b08
	void OnRep_ThrowGrenadeMode(enum PrevMode);// 0x4597a8c
	void OnRep_ThePlane();// 0x4597a78
	void OnRep_Temperature(float LastValue);// 0x45979f4
	void OnRep_TeamID();// 0x45979d8
	void OnRep_SmoothNetUpdateRotationTime();// 0x45979c4
	void OnRep_SimulateViewData();// 0x45979b0
	void OnRep_SignalHPRemainingTime();// 0x459799c
	void OnRep_SignalHP(float PrevVal);// 0x4597918
	void OnRep_ShowRevivalPointIcon();// 0x4597904
	void OnRep_ShowNicknameChangeEx();// 0x45978e8
	void OnRep_ScopeFov();// 0x45978d4
	void OnRep_ReplicatedParachuteState();// 0x45978c0
	void OnRep_ReplicatedMoveState();// 0x45978ac
	void OnRep_ReplicatedIsStartParachute();// 0x4597898
	void OnRep_ReplicatedAndOverridedSwimSpeed();// 0x4597884
	void OnRep_PoseStateNotify(byte LastState);// 0x4597800
	void OnRep_PlayerName();// 0x45977e4
	void OnRep_PlayerKey();// 0x45977c8
	void OnRep_PeekHasCollision();// 0x45977b4
	void OnRep_PassCardBuyType();// 0x45977a0
	void OnRep_MoneyNotify();// 0x459778c
	void OnRep_MedalPicUrl();// 0x4597778
	void OnRep_IsRescuingOtherStatusChange();// 0x4597764
	void OnRep_IsInFortress();// 0x4597750
	void OnRep_IsFPPChanged();// 0x459773c
	void OnRep_IsBeingRescuedStatusChange();// 0x4597728
	void OnRep_HideOnVehicle();// 0x4597714
	void OnRep_HealthStatusChanged(byte PrevStatus);// 0x4597690
	void OnRep_HealthPredict();// 0x459767c
	void OnRep_Health(float PrevHealth);// 0x45975f8
	void OnRep_HandFolderRatio();// 0x45975e4
	void OnRep_GiftGiverCandidateTypeChanged();// 0x45975d0
	void OnRep_GiftGiverCandidateChanged();// 0x45975bc
	void OnRep_FPPDefaultFov();// 0x45975a8
	void OnRep_FollowState();// 0x4597594
	void OnRep_EnergyChange();// 0x4597580
	void OnRep_DamageMagnifierIdx();// 0x459756c
	void OnRep_CustomMovementSimulateRepData();// 0x4597558
	void OnRep_CustomMovementRepData();// 0x4597544
	void OnRep_CurSignalHPIsFullOrRecovering();// 0x4597528
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x45974ac
	void OnRep_CurrentStates(uint64 prevStates);// 0x4597428
	void OnRep_CurrentNetCullDistanceSquared();// 0x4597414
	void OnRep_CurrentGravityScale();// 0x4597400
	void OnRep_CurrentCameraMode();// 0x45973ec
	void OnRep_CurRemoteControlPawn();// 0x45973d0
	void OnRep_CurBonFire();// 0x45973bc
	void OnRep_CommonFlagData();// 0x45973a8
	void OnRep_CollisionRadiusOverride();// 0x4597394
	void OnRep_CharacterFallingVelocityZFactor();// 0x4597380
	void OnRep_CarryRepData();// 0x459736c
	void OnRep_bShowWeapon();// 0x4597358
	void OnRep_BreathAmmountChange();// 0x4597344
	void OnRep_bNightVisionUseTest();// 0x4597330
	void OnRep_bNightVisionUse();// 0x459731c
	void OnRep_bIsCallingForRevival();// 0x4597308
	void OnRep_bIsAI();// 0x45972ec
	void OnRep_bIgnoreBlueCircle();// 0x45972d8
	void OnRep_BeCarriedByWho();// 0x45972c4
	void OnRep_AngleSightRotOffsetChanged();// 0x45972b0
	void OnRep_AnchorPlat();// 0x459729c
	void OnRep_AKEventNotify();// 0x4597288
	void OnReconnectOnClient();// 0x4597274
	void OnPostGetWeapon(STExtraWeapon* Weapon);// 0x45971f0
	void OnPostFlushHealthChangeHistoryOnServer();// 0x45971d4
	void OnPostEquipOrUnEquipWeapon(STExtraWeapon* Weapon, bool bEquip);// 0x459710c
	void OnPoseStateChange(byte LastState, byte CurState);// 0xffffff8a17adf2b0
	void OnPlayerUnderAttacked(bool bNewUnderAttack);// 0x4597080
	void OnPlayerFinished();// 0x459706c
	void OnPlayEmoteSequence(out const int[] PlayEmoteIDList, bool Loop);// 0x4596f84
	void OnPlayEmote(int EmoteID);// 0x4596f08
	void OnOpenDoor(PUBGDoor* Door, int DoorState);// 0x4596e48
	void OnNotifyHurt();// 0xffffff8a17adf2b0
	void OnMyObserversChange(STExtraPlayerController* ObserverController, bool IsEnter);// 0x4596d88
	void OnLoadActivityParticleCompleted(SoftObjectPath SoftObjectPath, bool NeedOffset);// 0x4596c64
	void OnLoadActivityAudioCompleted();// 0x4596c50
	void OnLoadActivityAnimationCompleted(SoftObjectPath SoftObjectPath);// 0x4596b70
	void OnInterruptCurrentEmote();// 0x4596b5c
	void OnGameModeStateChanged(FName State);// 0x4596ae0
	void OnGameEnterFightServer();// 0x4596a80
	void OnGameEnterFightMulticast();// 0x4596a20
	void OnFollowStateChange();// 0x4596a04
	void OnFollowNearPlayerEmote();// 0x45969f0
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x4596954
	void OnExitCirclePainVolume(FString Msg);// 0x45968d0
	void OnEquipWeapon(byte Slot);// 0xffffff8a17adf2b0
	void OnEnterCirclePainVolume(FString Msg);// 0x459684c
	void OnDetectPaintDecalTarget(bool bStart);// 0xffffff8a17adf2b0
	void OnCurEquipedShootWeaponChangeState(enum LastState, enum State);// 0x459678c
	void OnCharacterAvatarLoadFinish(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x45966d4
	void OnChangeCurrentUsingWeapon(byte TargetChangeSlot);// 0x4596650
	void OnCameraModeChange(byte NewMode);// 0x45965d4
	void OnBPMoneyChange();// 0xffffff8a17adf2b0
	void OnBPHealthChange();// 0xffffff8a17adf2b0
	void OnBeforeGetUp();// 0xffffff8a17adf2b0
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x45964fc
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x459646c
	float Montage_GetPosition(const AnimMontage* AnimMontage);// 0x45963e0
	void MeleeServer();// 0x4596380
	void MeleeReleased();// 0x459636c
	void MeleeLocal();// 0xffffff8a17adf2b0
	void MeleeBroadcastOtherClients();// 0x459630c
	void Melee(bool IsForCE);// 0x4596288
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x4596274
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x459614c
	void LocallySetCurrentCameraMode(byte InCameraMode);// 0x45960d0
	void LocalHandlePlayerDisuseFixWeapon(bool bCurIsFpp);// 0x4596044
	void LocalExitCustomFlying();// 0x4596030
	bool LocalEnterCustomFlying(byte Mode, byte MoveFlag);// 0x4595f64
	bool LeaveState(enum State);// 0x4595ecc
	void LeaveServerState(enum State, bool bForce);// 0x4595dc8
	bool IsWeaponSkinKillNeedReportBattleResult(BattleItemHandleBase* InCauserWeaponAvatarHandle);// 0x4595d30
	bool IsVelocitySimulated();// 0x4595cf8
	bool IsValidPaintDecalTarget_Simple();// 0x4595cd8
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x4595b88
	bool IsValidFootEffectTarget(out Vector OutEnd);// 0x4595ae8
	bool IsUsingGrenade();// 0x4595ab0
	int IsUseCameraProcess();// 0x4595a7c
	bool IsTeammateWith(STExtraPlayerController* InPC);// 0x45959ec
	bool IsSwimOnWaterSuface();// 0x45959b4
	bool IsStanding();// 0x4595980
	bool IsSkipSpawnDeadTombBox(Controller* EventInstigater);// 0x45958e8
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x4595858
	bool IsReplayViewTarget();// 0x4595818
	bool IsProning();// 0x45957e4
	bool IsProneMove();// 0x45957ac
	bool IsPlayingEmoteSequence();// 0x4595774
	bool IsOnVehicleNotUAV();// 0x4595714
	bool IsOnVehicle();// 0x45956f0
	bool IsNowUpWater();// 0x45956b8
	bool IsNotRelevantInScript(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x4595598
	bool IsNearDeath();// 0x4595560
	bool IsLocalViewed();// 0x4595520
	bool IsInFlyingTeam();// 0x45954e8
	bool IsInFallingState();// 0x45954b0
	bool IsInEditor();// 0x4595478
	bool IsHideOnVehicle();// 0x4595458
	bool IsHealthyAlive();// 0x4595420
	bool IsHealthAlive();// 0x45953e8
	bool IsHandleInFold();// 0x45953b0
	bool IsGivenCameraMode(byte CamMode);// 0x4595318
	bool IsFirstPerson();// 0x45952e0
	bool IsFatalDead();// 0x45952a0
	bool IsExitingParachute();// 0x4595268
	bool IsEnterWaterSuface();// 0x4595230
	bool IsDynamicMovementBase(PrimitiveComponent* Component);// 0x45951a0
	bool IsDetectingPaintDecalTarget();// 0x4595180
	bool IsCrouching();// 0x459514c
	bool IsCharacterSprinting();// 0x4595114
	bool IsCarringOther();// 0x45950dc
	bool IsBeingCarried();// 0x45950a4
	bool IsAngledSight();// 0x459506c
	bool IsAllowScopeIn();// 0x4595034
	bool IsAlive();// 0x4594ff4
	void InviteTeammate(FString Name, enum InvitationType);// 0x4594f30
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x4594e78
	bool InDragonBoatDrumSeat();// 0x4594e40
	void HideNightVisionFrame();// 0x4594e24
	void HideDeadBody(float DelayTime);// 0x4594da0
	bool HaveAngledSight();// 0x4594d68
	bool HasState(enum State);// 0x4594cd0
	bool HasItemFromBackPack(int InItemDefineID);// 0x4594c40
	bool HasDynamicMovementBase();// 0x4594c08
	bool HasAnyStates(enum[] states);// 0x4594b24
	bool HasAllStates(enum[] states);// 0x4594a40
	void HandleWeaponOnShoot();// 0x4594a24
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x4594930
	void HandleUnmannedVehicleChanged();// 0x4594914
	void HandleRemoteControlChanged();// 0x45948f8
	void HandlePlayOperateItemSoundOnServer(FString BankName, FString SoundName);// 0x4594790
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x45946d8
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x4594620
	void HandleOpenPickUpBoxAction();// 0x459460c
	void HandleOnCharAnimLoadingFinished();// 0x45945f0
	void HandleCurWeaponMeshUnVisible();// 0xffffff8a17adf2b0
	void HandleConsumeItemSkillBreak();// 0x45945d4
	void HandleClientNetShutDownOnShowResultUI();// 0x45945c0
	void HandleAutoSwitchWeaponDelay();// 0x45945ac
	void GrenadeBackToWeaponServerCall();// 0x459454c
	void GotoDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadShot);// 0x45942c0
	void GMTestZengzuo();// 0x45942ac
	void GMTestUIStyleServer(bool bSetUp, UserWidgetStyle* UserWidgetStyle);// 0x45941a8
	void GMShowName();// 0x4594194
	bool GlobalFollowPlayEmoteSwitch();// 0x4594154
	WeaponManagerComponent* GetWeaponManager();// 0x4594120
	Rotator GetViewRotation();// 0x45940e0
	Vector GetVelocitySafety();// 0x45940a0
	float GetValueLimitForHealthPredict();// 0x459406c
	float GetUGCMoveSpeedScaleByName(FString AttrModifyItemName);// 0x4593fd8
	float GetUGCMoveSpeedScale();// 0x4593fa4
	enum GetUAVState();// 0x4593f88
	float GetTPPDefaultFov();// 0x4593f4c
	enum GetThrowGrenadeMode();// 0x4593f2c
	SpringArmComponent* GetThirdPersonSpringArm();// 0xffffff8a17adf2b0
	CameraComponent* GetThirdPersonCamera();// 0xffffff8a17adf2b0
	ParachuteFollowState[] GetTeammateParachuteFollowStateList();// 0x4593ea8
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x4593e1c
	float GetSwimSpeedScale();// 0x4593de8
	float GetSwimSpeedModifier();// 0x4593db4
	float GetStandRadius();// 0x4593d80
	float GetStandHalfHeight();// 0x4593d4c
	float GetSprintSpeedScale();// 0x4593d18
	float GetSpeedScaleUGC();// 0x4593ce4
	AkComponent* GetSoundComponent();// 0x4593ca8
	Vector GetSimulatedVelocity();// 0x4593c70
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0xffffff8a17adf2b0
	Actor*[] GetShootLineTraceExtraIgnoreActors(STExtraShootWeapon* OwnerShootWeapon, Rotator shootRot);// 0x4593b5c
	SpringArmComponent* GetScopeSpringArm();// 0x4593b28
	CameraComponent* GetScopeCamera();// 0xffffff8a17adf2b0
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold, bool ShouldPutDownOffset);// 0x4593a54
	float GetProneSpeedScale();// 0x4593a20
	BoxComponent* GetProneShapeComponent();// 0x4593a04
	float GetProneHalfHeight();// 0x45939d0
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x4593908
	PlayerVehAnimList GetPlayerVehAnimation();// 0x45938cc
	int GetPlayerTeamIndex();// 0x4593898
	STExtraPlayerState* GetPlayerStateSafety();// 0x4593864
	PersistClientStateComponent* GetPlayerPersistClientState();// 0x4593830
	Vector GetPlayerMovementDir();// 0x45937f0
	byte GetPlayerJumpType();// 0x45937bc
	STExtraPlayerController* GetPlayerControllerSafety();// 0x4593780
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x459374c
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType, byte AnimListOverride, byte PoseTypeOverride);// 0x4593644
	PlayerAnimList GetPlayerAnimation();// 0x45935fc
	byte GetPersistentRole();// 0x45935e0
	ParachuteFollowState GetParachuteFollowStateByPlayerIndex(const int InPlayerIndex);// 0x4593554
	float GetMoveSpeedModifier();// 0x4593520
	bool GetMovementAttrModifier(float Value, int Dir, out FString OutValue, byte PoseType);// 0x45933bc
	void GetMoveInputState(out Vector OutMoveInputState);// 0x4593324
	Vector GetMoveInputLocalDir();// 0x45932ec
	FString GetLatestInviter();// 0x459326c
	void GetLastMoveInputState(out Vector OutMoveInputState);// 0x45931d4
	float GetJumpHeight();// 0x45931a0
	bool GetIsPlayingEmote();// 0x4593168
	bool GetIsFPP();// 0x4593128
	bool GetIsEffectMotionEmote(int EmoteID);// 0x4593090
	bool GetIsAutoAimEnabled();// 0x4593058
	float GetHearRadius();// 0x4593024
	float GetHealthMax();// 0x4592ff0
	float GetHealth();// 0x4592fbc
	FString GetGrenadeNameByGrenadeType(int grenadeType);// 0x4592ee4
	float GetFPPDefaultFov();// 0x4592ea8
	BaseFPPComponent* GetFPPComp();// 0x4592e74
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x4592de4
	SpringArmComponent* GetFirstPersonSpringArm();// 0xffffff8a17adf2b0
	CameraComponent* GetFirstPersonCamera();// 0xffffff8a17adf2b0
	MeshComponent*[] GetExtraDisplayMeshComps();// 0xffffff8a17adf2b0
	float GetExtraDamageBySignalHP(float InDamge);// 0x4592d58
	STExtraAnimInstanceBase* GetExtraAnimInstanceBase(bool bIsFPP);// 0x4592cc4
	float GetEnergySpeedScaleUGC();// 0x4592c90
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x4592c04
	FString GetEmote(int ItemDefineID);// 0xffffff8a17adf2b0
	float GetDeadBodyDisappearTime();// 0x4592bd0
	STExtraWeapon* GetCurrentWeapon();// 0x4592b94
	STExtraVehicleBase* GetCurrentVehicle();// 0x4592b58
	STExtraWeapon* GetCurrentShieldWeapon();// 0x4592b24
	float GetCurrentFOV();// 0x4592af0
	float GetCrouchSpeedScale();// 0x4592abc
	float GetCrouchHalfHeight();// 0x4592a88
	FString GetCorpName();// 0x4592a08
	Controller* GetControllerSafety();// 0x45929cc
	bool GetCommonFlagDataItemString(FString InFlagName, out FString OutStr);// 0x45928d8
	bool GetCommonFlagDataItemInt64(FString InFlagName, out int64 OutInt64);// 0x45927f0
	bool GetCommonFlagDataItemBoolean(FString InFlagName, out bool OutBool);// 0x4592708
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x45926d4
	float GetCharacterXYPlaneVelocity();// 0x45926a0
	STCharacterRescueOtherComp* GetCharacterRescueOtherComponent();// 0x459266c
	CharacterParachuteComponent* GetCharacterParachuteComponent();// 0x4592638
	STCharacterNearDeathComp* GetCharacterNearDeathComponent();// 0x4592604
	STCharacterMovementComponent* GetCharacterMovementComponent();// 0x45925d0
	CharacterEnergyData GetCharacterEnergy();// 0x4592530
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x45924f4
	STExtraBaseCharacter* GetCarrier();// 0x45924c0
	STExtraBaseCharacter* GetCarriedPawn();// 0x459248c
	Rotator GetCachedControlRotation();// 0x4592454
	Rotator GetCachedActorRotation();// 0x459242c
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x45923f8
	bool GetBisAllTeammateDied();// 0x45923c0
	CharacterAvatarComponent* GetAvatarComponent();// 0x459238c
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x4592300
	Vector GetAdditiveVelocity();// 0x45922c8
	SpringArmComponent* GetActiveSpringArm();// 0x459228c
	CameraComponent* GetActiveCamera();// 0x4592258
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x4591fe8
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x4591dd4
	void ForceUpdateSpringArm();// 0x4591db8
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x4591cf0
	void ForcePlayerUpdateAnimation();// 0x4591cdc
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x4591bdc
	void FollowTeammate(FString Name);// 0x4591b04
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x4591a64
	void ExitCustomFlying();// 0x4591a50
	void ExecFollowTeammate(FString Name);// 0x4591978
	void EquipZoomScope(int WeaponID, int ScopeID);// 0x45918c4
	void EquipWeaponFinish();// 0x45918b0
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x45917f0
	bool EnterState(enum State);// 0x4591758
	void EnterServerState(enum State);// 0x45916a8
	bool EnterCustomFlying(byte Mode, byte MoveFlag);// 0x45915dc
	void EnableStanbyAnim(bool bIsEnable);// 0x4591558
	void EnableGameModeOverrideAttrs();// 0x4591544
	void EnableFollowPlayEmote(bool Enable);// 0x45914c0
	void EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x459143c
	void EnableAllMoveAttrModifier();// 0x4591428
	void DynamicSetupMoveInputStateExRep(bool bForceOpenWithReplay);// 0x45913a4
	void DSTeleportToLocationOrRotation(Vector Location, Rotator Rotation, bool setLoc, bool setRot);// 0x4591254
	void DrawTraceEnemyLine(Vector StartPos, Vector EndPos, bool bCanNotSeeTarget);// 0x4591140
	void DoFootEffectTarget(bool bStart);// 0xffffff8a17adf2b0
	void DoDetectPaintDecalTarget(bool bStart);// 0x45910bc
	void DisappearOnDeath();// 0x45910a8
	void DisablePawnCollision();// 0x459108c
	void DisableAllMoveAttrModifier(byte PoseType);// 0x4591010
	void DettachWeapon();// 0x4590ffc
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x4590fe8
	void DelayMoveEnd();// 0x4590fd4
	void DelayMove(float Time);// 0x4590f58
	void DelayCustomDepth(float Time);// 0x4590edc
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x4590e48
	void CostEmoteSpecMotion(bool IsCost, int ItemID);// 0x4590d80
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x4590cec
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, int ConsecutivelyShovelingCount);// 0x4590bac
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x4590aa4
	void ClientStopShoveling();// 0x4590a44
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x459093c
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x4590870
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully);// 0x45907e4
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x459075c
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x459068c
	void ClientResponseFeedback(enum res);// 0x4590608
	void ClientPaintDecalResponse(int DecalId, int FancyDecalDyeNum);// 0x4590520
	void ClientOnPossessBy(Controller* NewController);// 0x4590470
	void ClientHealthMaxChanged(out const AttrAffected[] AffectedAttrS);// 0x45903b4
	void ClientForceSetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x4590278
	void ClientExitCustomFlying();// 0x4590218
	void ClientCheckStartShovelingFail();// 0x45901b8
	void ClientBulletLineTrace(Vector BornPos, Vector EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x4590070
	void Client_All_ShowActivityHPOverUI(int CurrentAH, STExtraBaseCharacter* attacher, Vector DamageDir);// 0x458ff6c
	void ClearMoveInput();// 0x458ff50
	void ClearMoveAntiCheat();// 0x458ff3c
	void ClearHPUI();// 0x458ff20
	void ClearClientJump();// 0x458ff0c
	void ClearAnimListChild(byte AnimLayer);// 0x458fe88
	void ClearAdditiveVelocity(int AdditiveVelocityID);// 0x458fe0c
	void ClearActivityActionServer();// 0x458fdf8
	void CheckSimulatePoseState();// 0x458fde4
	bool CheckPoseStateChange(byte State, bool ShouldShowPrompt);// 0x458fd10
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x458fc70
	void CheckPlayerHitBoxPositionOffset(float DeltaTime);// 0x458fbec
	bool CheckPickWeaponCanAutoUse();// 0x458fbac
	void CheckPickupAvailableActorPoolMissInternal(Actor* TargetActor, PickupManagerComponent* PickUpComp, out FString OutInfo);// 0x458fa98
	void CheckPickupAvailableActorPoolMiss(float DeltaTime);// 0x458fa14
	bool CheckOnMoveablePlatform();// 0x458f9dc
	bool CheckNearLocation(out const Vector TargetLoc, float Range);// 0x458f8f8
	bool CheckLocationError();// 0x458f8c0
	void CheckInitShootWeaponShootIDAndClipID();// 0x458f8a4
	bool CheckDisableShootImpact();// 0x458f864
	bool CheckDisableImpact(out const HitResult _FinalImpactResult);// 0x458f7a8
	FString CheckCurWeaponMeshVisibleInner(STExtraWeapon* Weapon, MeshComponent* TargetMesh);// 0x458f698
	bool CheckCurWeaponMeshVisibleCondition();// 0x458f658
	void CheckCurWeaponMeshVisible(float DeltaTime);// 0x458f5d4
	bool CheckCanSwitchFPP();// 0x458f594
	bool CheckCanPaintDecalOnServer();// 0x458f554
	void CheckBaseIsClear();// 0x458f540
	void CheckAutoFire(float DeltaTime);// 0x458f4bc
	void CheckAnimInstanceChange();// 0x458f4a8
	void CheckActivitySyncData();// 0x458f48c
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x458f388
	void ChangeVehWeaponCameraData(bool Enable);// 0x458f304
	bool CanStartReceive();// 0x458f2cc
	bool CanPlayPairEmote();// 0x458f28c
	bool CanPaintDecal(int DecalId);// 0x458f1fc
	bool CanHearWeaponLockSound();// 0x458f1bc
	bool CanEnterState(enum NewState);// 0x458f12c
	bool CanEnterCustomFlying(byte Mode, byte MoveFlag);// 0x458f060
	bool CanChangeThrowMode();// 0x458f028
	void CancelFollow();// 0x458f014
	Vector CalShootTargetLocationBP(STExtraShootWeapon* OwnerShootWeapon, Rotator shootRot, Vector Ret);// 0x458eefc
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x458ed8c
	void CalculateKillDataAdditional(STExtraBaseCharacter* KillerPlayer, STExtraBaseCharacter* VictimPlayer, STExtraPlayerState* RealKillerPlayerState, Actor* DamageCauser, out const KillDataAdditional AdditionalData);// 0x458ebfc
	void CalculateActivityEventFlowExt(int EventId, int InCount, int ExtraParam, Vector Loc, FString Str);// 0x458ea00
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x458e93c
	void CalculateActivityEventDistinctFlow(TLog_ActivityEventType InEventID, int InCount);// 0x458e878
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x458e734
	void BulletChange();// 0x458e6d4
	void bShouldDumpCallstackWhenMovingfast_ToTrue();// 0x458e6c0
	void bShouldDumpCallstackWhenMovingfast_Tofalse();// 0x458e6ac
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x458e478
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458e274
	void BroadcastClientsSimulateSTCustomRadialDamage(float BaseDamage, const STCustomRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458e05c
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458de58
	void BroadcastClientsSimulatePoisonWaterDamage(float BaseDamage, const STPoisonWaterDamageEvent PoisonWaterDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458dc5c
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458da5c
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458d85c
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458d650
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458d438
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458d238
	void BroadcastClientsSimulateDamage_UGCRadialDamage(float BaseDamage, const UGCRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458d018
	void BroadcastClientsSimulateDamage_UGCPointDamage(float BaseDamage, const UGCPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458ce14
	void BroadcastClientsSimulateDamage_STRadial(float BaseDamage, const STRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458cbfc
	void BroadcastClientsSimulateDamage_ShootWeaponNew(float BaseDamage, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte AvatarDamagePosition, Vector_NetQuantize ImpactPoint, class DamageType DamageTypeClass, Vector_NetQuantizeNormal ShootDir, FName HitBone);// 0x458c934
	void BroadcastClientsSimulateDamage_ShootWeapon(float BaseDamage, const ShootWeaponDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458c714
	void BroadcastClientsSimulateDamage_LowTemperature(float BaseDamage, const LowTemperatureDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458c514
	void BroadcastClientsSimulateDamage_LastBreathWithoutRescue(float BaseDamage, const LastBreathWithoutRescueDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458c314
	void BroadcastClientsSimulateDamage_Electric(float BaseDamage, const ElectricDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458c114
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458bf14
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x458bd08
	void BroadcastClientsDeath(float Damage, const DamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x458bb78
	void BroadcastClientDeath_ShootWeaponDamageNew(float Damage, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage, byte AvatarDamagePosition, Vector_NetQuantize ImpactPoint, class DamageType DamageTypeClass, Vector_NetQuantizeNormal ShootDir, FName HitBone);// 0x458b930
	void BroadcastClientDeath_ShootWeaponDamage(float Damage, const ShootWeaponDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x458b790
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x458b630
	void BPResetCharacter();// 0xffffff8a17adf2b0
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0xffffff8a17adf2b0
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xffffff8a17adf2b0
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8a17adf2b0
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8a17adf2b0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8a17adf2b0
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8a17adf2b0
	void BPLua_PostNetInit();// 0xffffff8a17adf2b0
	void BPDie(float KillingDamage, Controller* EventInstigator, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, out const DamageEvent DamageEvent, bool IsClient, bool IsPointDamage, bool IsHeadShotDamage, int DamageTypeID);// 0x458b310
	bool BPCanSetWeaponActorHiddenInGame(bool bNewHidden);// 0x458b270
	bool BPCanSetActorHiddenInGame(bool bNewHidden);// 0x458b1d0
	void BP_RegisterModifiedAttributes();// 0xffffff8a17adf2b0
	bool BornIslandFollowPlayEmoteSwitch();// 0x458b190
	bool BlueprintUpdateMoveSpeed(out float OutMaxSpeed);// 0xffffff8a17adf2b0
	bool BlueprintSetPoseStateAttrModifierEnable(byte InPoseState, bool bNewEnable);// 0xffffff8a17adf2b0
	bool BlueprintSetCharacterAttrModifierEnable(FString ModifierName, bool bNewEnable);// 0xffffff8a17adf2b0
	bool BlueprintRefreshMoveAttrModifier();// 0xffffff8a17adf2b0
	bool BlueprintGetMovementAttrModifier(float Value, int Dir, out FString OutValue, byte PoseType, out bool bIsValid);// 0xffffff8a17adf2b0
	bool BlueprintEnableAllMoveAttrModifier();// 0xffffff8a17adf2b0
	bool BlueprintDisableAllMoveAttrModifier(byte PoseType);// 0xffffff8a17adf2b0
	void AutoScopeWhenPeek();// 0x458b17c
	void AttachWeapon();// 0x458b168
	void AsyncAnimOpenDoorCallback(AnimationAsset* retAsset);// 0x458b0ec
	void AddOneDamageCauserRecord(Controller* causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x458af50
	void AddOneCommonFlagDataCustom(out const CommonFlagData InFlagData);// 0x458ae8c
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x458ad9c
	void AddDynamicExtraDamageReduceCfg(ExtraDamageReduceCfg AddCfg);// 0x458ac68
	int AddDamageReductionData(DamageReductionRule Rule, int Key);// 0x458aa78

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnDeath;//[Offset: 0xc10, Size: 0x10]// 0x7611e4cd50
	delegate OnCharacterStatesChange;//[Offset: 0xc20, Size: 0x10]// 0x7611e4ccd0
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xc30, Size: 0x10]// 0x7611e4cc50
	delegate OnCharacterPostNetInit;//[Offset: 0xc40, Size: 0x10]// 0x7611e4cbd0
	int MonsterID;//[Offset: 0xc50, Size: 0x4]// 0x7611e4cb60
	delegate CharacterAnimEventDelegate;//[Offset: 0xc58, Size: 0x10]// 0x7611e4cae0
	enum[] CanMoveNavLinkTypeList;//[Offset: 0xc68, Size: 0x10]// 0x7611e4c900
	<enum> CanMoveNavLinkExtendedFlagList;//[Offset: 0xc78, Size: 0x50]// 0x7611e4c700
	enum[] CanNotMoveNavLinkDirectionList;//[Offset: 0xcc8, Size: 0x10]// 0x7611e4c520
	bool bInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 0x1]// 0x7611e4c4a0
	enum[] DamageableGameObjectTypeList;//[Offset: 0xce0, Size: 0x10]// 0x7611e4c320
	float Health;//[Offset: 0xcf0, Size: 0x4]// 0x7611e4c2b0
	float HealthAddScale;//[Offset: 0xcf4, Size: 0x4]// 0x7611e4c240
	float HealthMax;//[Offset: 0xcf8, Size: 0x4]// 0x7611e4c1d0
	float SignalHP;//[Offset: 0xcfc, Size: 0x4]// 0x7611e4c160
	float PreSignalHP;//[Offset: 0xd00, Size: 0x4]// 0x7611e4c0f0
	float PreviousSignalHP;//[Offset: 0xd04, Size: 0x4]// 0x7611e4c080
	float SignalHPRatio;//[Offset: 0xd08, Size: 0x4]// 0x7611e4c010
	float SignalHPMax;//[Offset: 0xd0c, Size: 0x4]// 0x7611e4bfa0
	float SignalHPRecoverCDMax;//[Offset: 0xd10, Size: 0x4]// 0x7611e4bf30
	float SignalHPRecoverSpeed;//[Offset: 0xd14, Size: 0x4]// 0x7611e4bec0
	float CurSignalHPRecoverCD;//[Offset: 0xd18, Size: 0x4]// 0x7611e4be50
	bool bCurSignalHPIsFullOrRecovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c, Size: 0x1]// 0x7611e4bdd0
	FString EnergyBuffListName;//[Offset: 0xd20, Size: 0x10]// 0x7611e4bd60
	float ResetSignalHP_FatalDamage;//[Offset: 0xd30, Size: 0x4]// 0x7611e4bcf0
	float ResetSignalHP_Rescued;//[Offset: 0xd34, Size: 0x4]// 0x7611e4bc80
	float CheckCirclePainDeltaTimeMax;//[Offset: 0xd38, Size: 0x4]// 0x7611e4bc10
	float DefaultSpeedValue;//[Offset: 0xd3c, Size: 0x4]// 0x7611e4bba0
	float SpeedValue;//[Offset: 0xd40, Size: 0x4]// 0x7611e4bb30
	float SpeedScale;//[Offset: 0xd44, Size: 0x4]// 0x7611e4bac0
	float SpeedWeaponModuleModifier;//[Offset: 0xd48, Size: 0x4]// 0x7611e4ba50
	float SwimSpeedDynamicScale;//[Offset: 0xd4c, Size: 0x4]// 0x7611e4b9e0
	FName BulletBlockComponentTag;//[Offset: 0xd50, Size: 0x8]// 0x7611e4b970
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd58, Size: 0x1]// 0x7611e4b8f0
	bool bHideAllPrimitiveOnDead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd58, Size: 0x1]// 0x7611e4b870
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0xd60, Size: 0x50]// 0x7611e4b650
	byte TeamNum;//[Offset: 0xdb0, Size: 0x1]// 0x7611e4b570
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xdb8, Size: 0x10]// 0x7611e4b4f0
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc, Size: 0x1]// 0x7611e4b470
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcd, Size: 0x1]// 0x7611e4b3f0
	Vector VehicleVelocitySafty;//[Offset: 0xdd0, Size: 0xc]// 0x7611e4b370
	Vector VelocitySafty;//[Offset: 0xddc, Size: 0xc]// 0x7611e4b2f0
	float threatenValue;//[Offset: 0xde8, Size: 0x4]// 0x7611e4b280
	float Temperature;//[Offset: 0xdec, Size: 0x4]// 0x7611e4b210
	float TemperatureMax;//[Offset: 0xdf0, Size: 0x4]// 0x7611e4b1a0
	float TemperatureMin;//[Offset: 0xdf4, Size: 0x4]// 0x7611e4b130
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0xdf8, Size: 0x8]// 0x7611e4b0b0
	TickControlComponent* TickControlComp;//[Offset: 0xe08, Size: 0x8]// 0x7611e4b030
	class PawnStateSwitchCDCfg* PawnStateCDCfgClsPtr;//[Offset: 0xe18, Size: 0x28]// 0x7611e4afb0
	class PawnStateSwitchCDCfg* PawnStateCDCfgCls;//[Offset: 0xe40, Size: 0x8]// 0x7611e4af30
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xe98, Size: 0x8]// 0x7611e4aeb0
	VehicleMotorbikeComponent* motorbikeComp;//[Offset: 0xea0, Size: 0x8]// 0x7611e4ae30
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xea8, Size: 0x10]// 0x7611e4adb0
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xeb8, Size: 0x10]// 0x7611e4aab0
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xec8, Size: 0x8]// 0x7611e4aa30
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xed0, Size: 0x8]// 0x7611e4a9b0
	RemoteControlComponent* CurRemoteControlPawn;//[Offset: 0xed8, Size: 0x8]// 0x7611e4a930
	RemoteControlComponent* LastRemoteControlPawn;//[Offset: 0xee0, Size: 0x8]// 0x7611e4a8b0
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 0x1]// 0x7611e4a830
	delegate StateInterruptedHandlerBP;//[Offset: 0xef0, Size: 0x10]// 0x7611e4a7b0
	delegate StateEnterHandler;//[Offset: 0xf00, Size: 0x10]// 0x7611e4a730
	delegate TargetStateEnterHandler;//[Offset: 0xf10, Size: 0x10]// 0x7611e4a6b0
	delegate StateLeaveHandler;//[Offset: 0xf30, Size: 0x10]// 0x7611e4a630
	delegate TargetStateLeaveHandler;//[Offset: 0xf40, Size: 0x10]// 0x7611e4a5b0
	PawnStateRepSyncData PawnStateRepSyncData;//[Offset: 0xf70, Size: 0x10]// 0x7611e4a530
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xf80, Size: 0x10]// 0x7611e4a220
	delegate OnPawnStateDisabled;//[Offset: 0xf90, Size: 0x10]// 0x7611e4a1a0
	delegate OnPawnStateEnabled;//[Offset: 0xfa0, Size: 0x10]// 0x7611e4a120
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xfd0, Size: 0x8]// 0x7611e4a0a0
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xfd8, Size: 0x8]// 0x7611e4a020
	delegate OnPlayerPoseChange;//[Offset: 0xfe0, Size: 0x10]// 0x7611e49fa0
	delegate OnPlayerPoseChange_Animation;//[Offset: 0xff0, Size: 0x10]// 0x7611e49f20
	EffectComponent* NewEffectComponent;//[Offset: 0x1000, Size: 0x8]// 0x7611e49ea0
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1008, Size: 0x1]// 0x7611e49e20
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1009, Size: 0x1]// 0x7611e49da0
	delegate CharacterInDoorStateChanged;//[Offset: 0x1010, Size: 0x10]// 0x7611e49d20
	HitResult ShootTargetHitResult;//[Offset: 0x1020, Size: 0x88]// 0x7611e49ca0
	delegate OnShootTargetActorChangedDelegate;//[Offset: 0x10a8, Size: 0x10]// 0x7611e49c20
	delegate OnOneShootDelegate;//[Offset: 0x10b8, Size: 0x10]// 0x7611e49ba0
	float CompVisionOpDis;//[Offset: 0x10c8, Size: 0x4]// 0x7611e49b30
	float CompVisionOpDelay;//[Offset: 0x10cc, Size: 0x4]// 0x7611e49ac0
	float CheckVisionOpMeshMissInterval;//[Offset: 0x10d0, Size: 0x4]// 0x7611e49a50
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d4, Size: 0x1]// 0x7611e499d0
	float CurCheckVisionOpMeshMissTime;//[Offset: 0x10d8, Size: 0x4]// 0x7611e49960
	bool bHasReportRevertVisionOpMeshError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dc, Size: 0x1]// 0x7611e498e0
	bool bHasReportCheckVisionOpMeshMiss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dd, Size: 0x1]// 0x7611e49860
	FString PawnStatesExtend;//[Offset: 0x1140, Size: 0x10]// 0x7611e497f0
	PartHitComponent* PartHitComponent;//[Offset: 0x1158, Size: 0x8]// 0x7611e49770
	UTSkillManagerComponent* SkillManagerComponent;//[Offset: 0x1160, Size: 0x8]// 0x7611e496f0
	AIShootingOffsetComponent* AIShootingOffsetComp;//[Offset: 0x1168, Size: 0x8]// 0x7611e49670
	bool bEnableWrappedLightBeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1174, Size: 0x1]// 0x7611e495f0
	Controller* PrevController;//[Offset: 0x1178, Size: 0x8]// 0x7611e49570
	float GravityScaleAuthorized;//[Offset: 0x1180, Size: 0x4]// 0x7611e49500
	bool bShouldCheckAttachedParentIsNull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1184, Size: 0x1]// 0x7611e49480
	ActivitySyncData ActicitySyncData;//[Offset: 0x1188, Size: 0x20]// 0x7611e49060
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 0x1]// 0x7611e48fe0
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0x11f0, Size: 0x8]// 0x7611e48f60
	AimOffsetViewComponent* AimOffsetViewComp;//[Offset: 0x11f8, Size: 0x8]// 0x7611e48ee0
	PlayerVaultComponent* PlayerVaultComp;//[Offset: 0x1200, Size: 0x8]// 0x7611e48e60
	bool bShouldDisableGunValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 0x1]// 0x7611e48de0
	Actor* CachedOldAttach;//[Offset: 0x1210, Size: 0x8]// 0x7611e48d60
	SubAnimInstanceMap* SubAnimInstanceMap;//[Offset: 0x1220, Size: 0x28]// 0x7611e48ce0
	SubAnimInstanceMap* SubAnimInstanceMap_Ins;//[Offset: 0x1248, Size: 0x8]// 0x7611e48c60
	STExtraPlayerVaultComponent* CachedPlayerVaultComponent;//[Offset: 0x1258, Size: 0x8]// 0x7611e48be0
	float PlayerInitTimestamp;//[Offset: 0x1260, Size: 0x4]// 0x7611e48b70
	bool IsRCRRelevantForConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1264, Size: 0x1]// 0x7611e48af0
	Vector RCRDSNotifyLoction;//[Offset: 0x1268, Size: 0xc]// 0x7611e48a70
	float RCRCheckMinViewCos;//[Offset: 0x1274, Size: 0x4]// 0x7611e48a00
	float RCRViewCosDelayTimeMin;//[Offset: 0x1278, Size: 0x4]// 0x7611e48990
	float RCRViewCosDelayTimeMax;//[Offset: 0x127c, Size: 0x4]// 0x7611e48920
	float RCROutViewCheckTime;//[Offset: 0x1280, Size: 0x4]// 0x7611e488b0
	float RCRCheckMinDistanceSquared;//[Offset: 0x1284, Size: 0x4]// 0x7611e48840
	float RCRCheckMaxDistanceSquared;//[Offset: 0x1288, Size: 0x4]// 0x7611e487d0
	float RCRClientRandomXYMin;//[Offset: 0x128c, Size: 0x4]// 0x7611e48760
	float RCRClientRandomXYMax;//[Offset: 0x1290, Size: 0x4]// 0x7611e486f0
	float RCRDSCheckProneSprintCD;//[Offset: 0x1294, Size: 0x4]// 0x7611e48680
	float RCRDSCheckProneWalkCD;//[Offset: 0x1298, Size: 0x4]// 0x7611e48610
	float RCRDSCheckSprintCD;//[Offset: 0x129c, Size: 0x4]// 0x7611e485a0
	float RCRDSCheckWalkCD;//[Offset: 0x12a0, Size: 0x4]// 0x7611e48530
	float RCRDSCheckDyingWalkCD;//[Offset: 0x12a4, Size: 0x4]// 0x7611e484c0
	float RCRNotReleventCheckTime;//[Offset: 0x12a8, Size: 0x4]// 0x7611e48450
	float RCRModifyLargeBuildingBoxDisSquared;//[Offset: 0x12ac, Size: 0x4]// 0x7611e483e0
	float RCRModifyMediumBuildingBoxDisSquared;//[Offset: 0x12b0, Size: 0x4]// 0x7611e48370
	float RCRLargeBuildingBoxMultiple;//[Offset: 0x12b4, Size: 0x4]// 0x7611e48300
	float RCRMediumBuildingBoxMultiple;//[Offset: 0x12b8, Size: 0x4]// 0x7611e48290
	float RCRModifyLargeLandBoxDisSquared;//[Offset: 0x12bc, Size: 0x4]// 0x7611e48220
	float RCRModifyMediumLandBoxDisSquared;//[Offset: 0x12c0, Size: 0x4]// 0x7611e481b0
	float RCRLargeLandBoxMultiple;//[Offset: 0x12c4, Size: 0x4]// 0x7611e48140
	float RCRMediumLandBoxMultiple;//[Offset: 0x12c8, Size: 0x4]// 0x7611e480d0
	float RCRDSContinuousLineTraceFrequency;//[Offset: 0x12cc, Size: 0x4]// 0x7611e48060
	bool IsTrueSightRelevantForConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 0x1]// 0x7611e47fe0
	PickupManagerComponent* PickupManagerComponentRef;//[Offset: 0x12d8, Size: 0x8]// 0x7611e47f60
	delegate OnMoveBlockDelegate;//[Offset: 0x12e0, Size: 0x10]// 0x7611e47ee0
	FeatureCustomModule*[] featureComs;//[Offset: 0x12f0, Size: 0x10]// 0x7611e47de0
	delegate UGC_OnHPChangedDelegate;//[Offset: 0x1300, Size: 0x10]// 0x7611e47d60
	delegate UGC_OnTakeDamageDelegate;//[Offset: 0x1310, Size: 0x10]// 0x7611e47ce0
	void VaultOnServer(float ForwardBlockDist, float BlockHeight, float VaultDist, byte VaultDataMapKeyIndex, Vector_NetQuantize10 PlayerStartLoc, Actor* CheckActor, float CurJumpLandingHeight, float CurJumpLandingDist, Vector_NetQuantize10 ForwardHitPoint, Vector_NetQuantize100 ForwardBlockDir);// 0x45ec2d0
	void VaultNetMulticast(float ForwardBlockDist, float BlockHeight, float VaultDist, byte VaultDataMapKeyIndex, Vector_NetQuantize10 PlayerStartLoc, Actor* CheckActor, float CurJumpLandingHeight, float CurJumpLandingDist, Vector_NetQuantize10 ForwardHitPoint, Vector_NetQuantize100 ForwardBlockDir);// 0x45ec00c
	void VaultFailedOnClient(const FString Content);// 0x45ebf80
	float UGC_PreTakeDamageEvent(float Damage, Controller* EventInstigator, DamageEvent DamageEvent, Actor* DamageCauser);// 0x45ebe1c
	int UGC_GetDamageNumberConfigIndex(float Damage, bool bHeadShot, Controller* EventInstigator, Actor* DamageCauser, int DamageTypeID);// 0x45ebc94
	bool TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x45ebb60
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x45eba20
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x45eb94c
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x45eb8b4
	void TriggerCustomEvent_Implementation(byte EventType);// 0x45eb830
	FString ToStringHasLocation(FString Subtitle);// 0x45eb74c
	FString ToStringHasExtendInfoHasMiddleSimply(FString Subtitle, FString MiddleSimplyStr);// 0x45eb620
	FString ToStringHasExtendInfo(FString Subtitle);// 0x45eb53c
	bool StartFireCheck();// 0x45eb4fc
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x45eb43c
	void SetInvincible(bool Invincible);// 0x45eb3b8
	void SetHealthMax(float NewHealthMax);// 0x45eb33c
	void SetGravityScaleAuthorized(float InScale);// 0x45eb2c0
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x45eb1ec
	void Server_RemoveEmoteBuff(FName BuffName);// 0x45eb13c
	void Server_RemoveAllEmoteBuff();// 0x45eb0dc
	void Server_AddEmoteBuff(FName BuffName);// 0x45eb02c
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x45eaf70
	void ResetSubAnimNodeAnimClass(FName SubInstanceSlotName, int Types);// 0x45eaeb8
	void ResetPawnStateDisabled(enum State);// 0x45eae3c
	AnimInstance*[] ReplaceSubAnimNodeAnimClass(FName SubInstanceSlotName, class AnimInstance SubInstanceClass, int Types);// 0x45eacf8
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x45eabe0
	bool ReloadWeaponFilter();// 0x45eaba0
	void ReceiveStatisticsReloadTime(int ItemID, int Times);// 0xffffff8a17adf2b0
	void ReceiveChangeImpactEffectVolume();// 0xffffff8a17adf2b0
	void PreCacheCriticalVerifyMoveParam(out const CacheCriticalVerifyMoveParam InParam, out CacheCriticalVerifyMoveParam OutParam);// 0x45eaa34
	void PostApplyAllCompOptimizationByVision(bool bApply);// 0x45ea9a8
	void PossessedBy(Controller* NewController);// 0x45ea924
	void PickupNewItem(ItemHandleBase* ItemHandle);// 0x45ea8a8
	void OwningClient_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x45ea764
	void OpenPawnHitBodyCollison(float countTime);// 0x45ea6e8
	void OpenBoxHitCollison(float countTime);// 0x45ea66c
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x45ea5ac
	void OnUnEquipCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x45ea528
	void OnStateLeave(enum LeavedState);// 0x45ea4a4
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x45ea3e8
	void OnStateEnter(enum EnteredState);// 0x45ea364
	void OnRep_UnmannedVehicleSyncData();// 0x45ea348
	void OnRep_Temperature(float LastValue);// 0x45ea2c4
	void OnRep_SignalHP(float PrevVal);// 0x45ea240
	void OnRep_PawnStateRepSyncData(out const PawnStateRepSyncData PrevData);// 0x45ea1b0
	void OnRep_IsTrueSightRelevantForConnection();// 0x45ea19c
	void OnRep_IsRCRRelevantForConnection();// 0x45ea188
	void OnRep_IsInvincible();// 0x45ea174
	void OnRep_Health(float PrevHealth);// 0x45ea0f0
	void OnRep_GravityScaleAuthorized();// 0x45ea0dc
	void OnRep_CurSignalHPIsFullOrRecovering();// 0x45ea0c0
	void OnRep_CurrentStates(uint64 prevStates);// 0x45ea03c
	void OnRep_CurRemoteControlPawn();// 0x45ea020
	void OnRep_ActivitySyncData();// 0x45ea004
	bool OnlyHasStates(out const enum[] InStates);// 0x45e9f54
	void OnBPIsInvincibleChange();// 0xffffff8a17adf2b0
	bool LocalStartFireCheck();// 0x45e9f14
	void LeaveStuckStateOnClient(Vector NewLoc, Rotator NewRot);// 0x45e9e4c
	bool LeaveState(enum State);// 0x45e9db4
	bool IsSameTeam(const Pawn* Other);// 0x45e9d1c
	static bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x45e9c60
	bool IsPawnStateDisabled(enum State);// 0x45e9bd0
	bool IsLocalViewed();// 0x45e9b90
	bool IsLocalAutonomousControlled();// 0x45e9b50
	bool IsInvincible();// 0x45e9b34
	bool IsGrenadeEmpty();// 0x45e9af4
	bool IsFatalDead();// 0x45e9ab4
	bool IsAlive();// 0x45e9a74
	void HideTheCharacter(bool bHide, enum HiddenMask);// 0x45e99ac
	void HidePlayerMagOnGunReload();// 0x45e9990
	void HideCharacterWeapon(bool bHide, enum HiddenMask);// 0x45e98c8
	bool HasState(enum State);// 0x45e9830
	bool HasBuff(FName BuffName);// 0x45e9798
	void HandleConsumeItemSkillBreak();// 0x45e977c
	Actor* GetWeaponOwnerProxyFactory();// 0x45e9740
	MeshComponent* GetWeaponAttachMeshCommon(STExtraWeapon* Weapon);// 0x45e96ac
	SkeletalMeshComponent* GetWeaponAttachMesh(STExtraWeapon* Weapon);// 0x45e9618
	SceneComponent* GetWeaponAttachComp(const byte InWeaponSlot);// 0x45e9584
	STExtraVehicleBase* GetUnmannedVehicle();// 0x45e9568
	FString GetToString();// 0x45e94e0
	UTSkillManagerComponent* GetSkillManagerComponent();// 0x45e94ac
	UTSkillManagerComponent* GetSkillManager();// 0x45e9470
	Actor* GetShootTargetActor(STExtraShootWeapon* OwnerShootWeapon);// 0x45e93dc
	float GetScaledSpeed();// 0x45e93a0
	STExtraVehicleBase* GetRemoteControlledVehicle();// 0x45e9384
	FString GetRemarkNameSafety();// 0x45e92fc
	FString GetPlayerNameSafety();// 0x45e9274
	FString GetPlayerDetailInfo();// 0x45e91f4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x45e91b8
	PickupManagerComponent* GetPickupManagerComponent();// 0x45e919c
	enum GetObserverType();// 0x45e9160
	bool GetIsAI();// 0x45e9128
	Vector GetHeadLocation(bool bUseHeadBone);// 0x45e9088
	FeatureCustomModule* GetFeatureCMByClass_BP(class Object ClassType);// 0x45e8fd0
	float GetElapseTimeSinceInit();// 0x45e8f9c
	enum[] GetDamageableGameObjectType();// 0x45e8f14
	UTSkill* GetCurSkillWithCache();// 0x45e8ee0
	UTSkill* GetCurSkill();// 0x45e8ea4
	STExtraVehicleBase* GetCurrentVehicle();// 0x45e8e68
	bool GetClientHasFinishedReloadWeapon();// 0x45e8e30
	float GetCheckedSignalHPRatio();// 0x45e8dfc
	PrimitiveComponent* GetCharacterMovementBaseComp();// 0x45e8dc0
	UAECharAnimListCompBase* GetCharacterAnimComponent();// 0x45e8d84
	FName GetBulletBlockComponentTag();// 0x45e8d48
	FString GetBuffListString();// 0x45e8cc8
	float GetBuffExpiry(FName BuffName);// 0x45e8c34
	SubAnimInstanceMap* GetAnimInstanceMap();// 0x45e8c00
	void FPPVaultOnServer(Vector_NetQuantize10 FPPVaultStartLoc, Vector_NetQuantize10 FPPVaultTopLoc, float CurJumpLandingHeight, float CurJumpLandingDist, bool bIsJumping, Vector_NetQuantize100 ForwardBlockDir, float VaultDist);// 0x45e8988
	void FPPVaultNetMulticast(Vector_NetQuantize10 FPPVaultStartLoc, Vector_NetQuantize10 FPPVaultTopLoc, float CurJumpLandingHeight, float CurJumpLandingDist, bool bIsJumping, Vector_NetQuantize100 ForwardBlockDir, float VaultDist);// 0x45e876c
	void ForceCancelVaultOnServer();// 0x45e870c
	void ExtendPawnStates();// 0x45e86f8
	bool EnterState(enum State);// 0x45e8660
	bool DisableImpactActor(Actor* Actor);// 0x45e85c8
	void DelayHidden();// 0x45e85b4
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x45e8528
	void Client_ShowLogDebugInfo(bool bLogInfo);// 0x45e849c
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x45e8318
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x45e81dc
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x45e8098
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x45e7edc
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x45e7ce4
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x45e7b50
	void ClearOneItem(ItemHandleBase* ItemHandle);// 0x45e7ad4
	void CheckSignalHP();// 0x45e7ac0
	bool CheckDisableShootTarget();// 0x45e7a80
	bool CheckCanLeanOutOnVehicle(bool bCheckState);// 0x45e79e0
	static bool CheckBackpackWeaponByStateOnServer(STExtraWeapon* Weapon, enum State);// 0x45e7924
	void CharacterInDoorStateChanged__DelegateSignature(bool bIsPlayerInDoor);// 0xffffff8a17adf2b0
	void CancelVaultOnServer();// 0x45e78c4
	void CancelVaultNetMulticast();// 0x45e78a8
	void BPUpdateCompTransform(SceneComponent* Comp);// 0x45e782c
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xffffff8a17adf2b0
	void BPOnRespawned();// 0xffffff8a17adf2b0
	void BPOnRecycled();// 0xffffff8a17adf2b0
	int64 BP_GetCurrentStates();// 0x45e77f8
	float BP_CharacterModifyDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x45e7694
	void ApplyCompOptimizationByVision(FString OwnerName, SceneComponent* Comp, bool bApply);// 0x45e7584
	void ApplyAllCompOptimizationByVision(bool bApply);// 0x45e74f8
	bool AllowState(enum State, bool withLog);// 0x45e741c
	bool AddSignalHPSafety(float AddVal);// 0x45e7384
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x45e7208

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	byte CharacterRegionSize;//[Offset: 0x979, Size: 0x1]// 0x7611e36f40
	FName PlayerType;//[Offset: 0x980, Size: 0x8]// 0x7611e36ed0
	FString PlayerName;//[Offset: 0x988, Size: 0x10]// 0x7611e36e60
	FString RemarkName;//[Offset: 0x998, Size: 0x10]// 0x7611e36df0
	uint32 PlayerKey;//[Offset: 0x9a8, Size: 0x4]// 0x7611e36d80
	FString PlayerUID;//[Offset: 0x9b0, Size: 0x10]// 0x7611e36d10
	FString PlayerOpenID;//[Offset: 0x9c0, Size: 0x10]// 0x7611e36ca0
	bool IsPossessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 0x1]// 0x7611e36c20
	int TeamID;//[Offset: 0x9f8, Size: 0x4]// 0x7611e36bb0
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 0x1]// 0x7611e36b30
	enum DefaultCharacterGender;//[Offset: 0x9fd, Size: 0x1]// 0x7611e36a30
	GameModePlayerItem[] InitialItemList;//[Offset: 0xa00, Size: 0x10]// 0x7611e36930
	int playerFaceHandleID;//[Offset: 0xa10, Size: 0x4]// 0x7611e368c0
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14, Size: 0x1]// 0x7611e36840
	bool bIsAIModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa15, Size: 0x1]// 0x7611e367c0
	bool bCalcuPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 0x1]// 0x7611e36740
	TimerHandle TimerHandle_ForceUpdateSpringArm;//[Offset: 0xa48, Size: 0x8]// 0x7611e366c0
	SceneComponentState[] SpringArmStateList;//[Offset: 0xa50, Size: 0x10]// 0x7611e364a0
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0xa60, Size: 0x8]// 0x7611e36420
	bool showNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 0x1]// 0x7611e363a0
	void SetShowNickname(bool isShow);// 0x4eb8b3c
	void ServerSetShowNicknameValue(bool flag);// 0x4eb8a78
	void OnRep_TeamID();// 0x4eb8a5c
	void OnRep_ShowNicknameChangeEx();// 0x4eb8a40
	void OnRep_RemarkName();// 0x4eb8a24
	void OnRep_PlayerUID();// 0x4eb8a10
	void OnRep_PlayerOpenID();// 0x4eb89fc
	void OnRep_PlayerName();// 0x4eb89e0
	void OnRep_PlayerKey();// 0x4eb89c4
	void OnRep_bIsAI();// 0x4eb89a8
	void OnForceUpdateSpringArmTimer();// 0x4eb8994
	bool IsAlive();// 0x4eb8954
	FString GetToString();// 0x4eb88cc
	FString GetPlayerKey();// 0x4eb884c
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x4eb87c4
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x4eb873c
	ActorComponent*[] GetNonSimulatedComponents();// 0x4eb86b4
	ActorComponent*[] GetNonDedicatedComponents();// 0x4eb862c
	int64 GetInt64PlayerKey();// 0x4eb8610
	void ForceUpdateSpringArm();// 0x4eb85f4
	void ClientAcknowledgeReconnection(uint32 Token);// 0x4eb8570

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]// 0x75a824b300
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 0x4]// 0x75a825b110
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x75a824b380
	float MinimumDuration;//[Offset: 0x38, Size: 0x4]// 0x75a825b180
	float MaximumDuration;//[Offset: 0x3c, Size: 0x4]// 0x75a825b1f0
	AkEventCustomPostData AkEventCustomPostData;//[Offset: 0x40, Size: 0x10]// 0x75a824b400
	float GetAkEventMaxDuration();// 0x7796f9c

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75a824d580
	bool bLoadAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x75a824d600
	bool bHasLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]// 0x75a824d680

--------------------------------
Class: AkEventCustomPostData
	bool bUseCustomSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75c994aa00
	float CustomClippingRadius;//[Offset: 0x4, Size: 0x4]// 0x75c99520e0
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c994aa80
	int CustomMaxInstanceCount;//[Offset: 0xc, Size: 0x4]// 0x75c9952150

--------------------------------
Class: PlayerTombBox.Actor.Object
	class PickUpListWrapperActor* ListWrapperTemplate;//[Offset: 0x5c0, Size: 0x8]// 0x75b4ed0a00
	int DefaultObjectPoolSize;//[Offset: 0x5c8, Size: 0x4]// 0x75b4ec41f0
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x5d0, Size: 0x10]// 0x75b4ed0a80
	float CustomPickUpRadius;//[Offset: 0x5e0, Size: 0x4]// 0x75b4ec4260
	float CustomPickUpZLimit;//[Offset: 0x5e4, Size: 0x4]// 0x75b4ec42d0
	FName tombName;//[Offset: 0x5e8, Size: 0x8]// 0x75b4ec4340
	int TeamID;//[Offset: 0x5f0, Size: 0x4]// 0x75b4ec43b0
	uint32[] TeamPlayerIDs;//[Offset: 0x5f8, Size: 0x10]// 0x75b4ed0b00
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x610, Size: 0x8]// 0x75b4ed0b80
	FString TombPlayerUID;//[Offset: 0x618, Size: 0x10]// 0x75b4ec4490
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x628, Size: 0x8]// 0x75b4ed0c00
	int DeadTime;//[Offset: 0x638, Size: 0x4]// 0x75b4ec4500
	int BoxLifeSpan;//[Offset: 0x63c, Size: 0x4]// 0x75b4ec4570
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]// 0x75b4ed0c80
	float HandleCollisionDelay;//[Offset: 0x644, Size: 0x4]// 0x75b4ec45e0
	Actor* AttachedActor;//[Offset: 0x648, Size: 0x8]// 0x75b4ed0d00
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]// 0x75b4ed0d80
	enum BoxType;//[Offset: 0x651, Size: 0x1]// 0x75b4ed0e80
	uint32 OwnerUniqueID;//[Offset: 0x654, Size: 0x4]// 0x75b4ec4650
	enum PickUpItemFlowSourceType;//[Offset: 0x658, Size: 0x1]// 0x75b4ed0f80
	FString[] SkinResList;//[Offset: 0x660, Size: 0x10]// 0x75b4ed1000
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]// 0x75b4ed1080
	Character* BoxOwner;//[Offset: 0x678, Size: 0x8]// 0x75b4ed1100
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]// 0x75b4ed1180
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x688, Size: 0x8]// 0x75b4ed1200
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x690, Size: 0x8]// 0x75b4ed1280
	float TombBoxSkinAnimPlayDelay;//[Offset: 0x698, Size: 0x4]// 0x75b4ec4730
	TombboxDeadEffect TombBoxSkinList;//[Offset: 0x6a0, Size: 0xa0]// 0x75b4ed1300
	FString TombBoxSkinTable;//[Offset: 0x740, Size: 0x10]// 0x75b4ec47a0
	int TLogID;//[Offset: 0x750, Size: 0x4]// 0x75b4ec4810
	bool bRecordAllPlayerPickUpData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 0x1]// 0x75b4ed1380
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x755, Size: 0x1]// 0x75b4ed1400
	int DropGroupID;//[Offset: 0x758, Size: 0x4]// 0x75b4ec4880
	Vector DropStartLocation;//[Offset: 0x75c, Size: 0xc]// 0x75b4ed1480
	<uint32,byte> CollisionCache;//[Offset: 0x768, Size: 0x50]// 0x75b4edb600
	void SwitchToDeadTombBox();// 0x449fe74
	void ShowTombBoxSkin();// 0x449fe60
	void SetVisible(bool IsVisible);// 0x449fde0
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x449fc88
	void RegisterToCurveAnimComponent();// 0x449fc6c
	void RegisterModifyItems();// 0x449fc58
	void RecoverCollision();// 0x449fc44
	void PlayTombBoxParticle();// 0x449fc28
	void OnTombBoxResLoaded(int ReqID, FString ResName);// 0x449fb10
	void OnRespawned();// 0x449faf4
	void OnRep_VisibilityChange();// 0x449fae0
	void OnRep_UseDropCurve();// 0x449facc
	void OnRep_TargetPlayer();// 0x449fab8
	void OnRep_LoadDefaultSkin();// 0x449faa4
	void OnRep_HandleCollisionDelay();// 0x449fa90
	void OnRep_DisableCollision();// 0x449fa7c
	void OnRep_ChangeBoxMesh();// 0x449fa68
	void OnRep_BoxType();// 0x449fa54
	void OnRep_BoxPickupWrapperActor();// 0x449fa40
	void OnRep_BoxLifeSpan();// 0x449fa2c
	void OnRep_AttachmentReplication();// 0x449fa10
	void OnRep_AttachedActor();// 0x449f9fc
	void OnRemoveItemInWrapper();// 0x449f9e8
	void OnRecycled();// 0x449f9cc
	void OnOwnerPawnDead(STExtraCharacter* DeadCharacter, Controller* InKiller, Actor* DamageCaster, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x449f75c
	void HideDeadTombApparence();// 0x449f740
	enum HandleGetClientPlayerType(FString InPlayerKey);// 0x449f6a4
	int GetUniqueInstanceID();// 0x449f670
	int GetTombboxLifespan();// 0x449f63c
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x449f620
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x449f538
	void GeneratePlayerBackpackWrappersToGround();// 0x449f51c
	void GeneratePlayerBackpackWrappers();// 0x449f500
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x449f340
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x449f208
	void GenerateBoxWrappersByItemsData(out const AirDropBoxGenerateWrapperItemData[] ItemsData, FName BoxName);// 0x449f120
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID, int StaticEvtID);// 0x449efc4
	PickUpItemData[] CustomTombBoxItemList(STExtraBaseCharacter* InCauser, STExtraBaseCharacter* InDeadPlayer, out const DamageEvent InDamageEvent, out const PickUpItemData[] InDefaultItemList);// 0x449ed00
	void CollectPlayerTombBoxDropWrapperList(out PickUpItemData[] OutItemDataList);// 0x449ec0c
	void BPRecoverCollision();// 0xffffff8a17adf2b0
	void BPOnRespawned();// 0xffffff8a17adf2b0
	void BPOnRecycled();// 0xffffff8a17adf2b0
	void ApplyTombSkin(int SkinType);// 0x449eb90

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x978, Size: 0x10]// 0x76120ae350
	int PickUpFailedCountCache;//[Offset: 0x998, Size: 0x4]// 0x76120ae2e0
	Actor* PickUpFailedPawnCache;//[Offset: 0x9a0, Size: 0x8]// 0x76120ae260
	float LastPickUpFailedTime;//[Offset: 0x9a8, Size: 0x4]// 0x76120ae1f0
	bool bUseDataListDoRepMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 0x1]// 0x76120ae170
	bool bUseModifyCountRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ad, Size: 0x1]// 0x76120ae0f0
	bool bDestroyAfterEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ae, Size: 0x1]// 0x76120ae070
	bool bAutoRecoverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9af, Size: 0x1]// 0x76120adff0
	float AutoRecoverDataInterval;//[Offset: 0x9b0, Size: 0x4]// 0x76120adf80
	PickUpItemData[] CachePickUpDataList;//[Offset: 0x9e8, Size: 0x10]// 0x76120ade80
	delegate OnSomeonePickItem64;//[Offset: 0x9f8, Size: 0x10]// 0x76120ade00
	enum BoxType;//[Offset: 0xa08, Size: 0x1]// 0x76120add00
	void TlogRecordPickUpPlayer(int64 PlayerKey);// 0x44807f4
	void SetDataListOnServer(out const PickUpItemData[] DataList);// 0x4480708
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x4480620
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x4480510
	void PostChangePickUpDataListOnServer();// 0x44804fc
	void OnWrapperEmptyDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0xffffff8a17adf2b0
	void OnSomeonePickItemDelegate64__DelegateSignature(int64 PlayerKey);// 0xffffff8a17adf2b0
	void OnRep_PickUpDataList();// 0x44804e8
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);// 0xffffff8a17adf2b0
	PickUpItemData[] GetDataList();// 0x44803ac
	bool FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x44802a0
	void DoAutoRecoverDataOnServer();// 0x448028c
	void AddAdditionalDataInPickUpDataList(out const BattleItemAdditionalData AdditionalData, int InSpecificID);// 0x44801a0

--------------------------------
Class: PickUpWrapperActor.UAENetActor.Actor.Object
	float CustomPickUpRadius;//[Offset: 0x5f8, Size: 0x4]// 0x7611d6f170
	float CustomPickUpZLimit;//[Offset: 0x5fc, Size: 0x4]// 0x7611d6f100
	bool bClientEnableMarkHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]// 0x7611d6f080
	bool bDestroyStaticMeshComponentDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 0x1]// 0x7611d6f000
	ItemDefineID DefineID;//[Offset: 0x608, Size: 0x18]// 0x7611d6ef80
	int Count;//[Offset: 0x620, Size: 0x4]// 0x7611d6ef10
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]// 0x7611d6ee90
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 0x1]// 0x7611d6ee10
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 0x1]// 0x7611d6ed90
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x627, Size: 0x1]// 0x7611d6ed10
	FName OwnerName;//[Offset: 0x628, Size: 0x8]// 0x7611d6eca0
	uint32 OwnerUniqueID;//[Offset: 0x630, Size: 0x4]// 0x7611d6ec30
	Actor* AttachedActor;//[Offset: 0x638, Size: 0x8]// 0x7611d6ebb0
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x640, Size: 0x10]// 0x7611d6eab0
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]// 0x7611d6ea30
	float TrainingModePickUpColdCD;//[Offset: 0x654, Size: 0x4]// 0x7611d6e9c0
	bool bUseCustomTrainingModePickUpColdCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]// 0x7611d6e940
	bool bEnableTrainingModeRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 0x1]// 0x7611d6e8c0
	float TrainingModeDropLifeTime;//[Offset: 0x65c, Size: 0x4]// 0x7611d6e850
	bool bUseRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x660, Size: 0x1]// 0x7611d6e7d0
	bool bForceRelevantForNetworkRepays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x668, Size: 0x1]// 0x7611d6e750
	bool bOnRepCountInBP;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x668, Size: 0x1]// 0x7611d6e6d0
	FString PedestalClassPath;//[Offset: 0x670, Size: 0x10]// 0x7611d6e660
	int DefaultObjectPoolSize;//[Offset: 0x680, Size: 0x4]// 0x7611d6e5f0
	int DefaultObjectPoolCleanupTime;//[Offset: 0x684, Size: 0x4]// 0x7611d6e580
	StaticMeshComponent* RootMeshComp;//[Offset: 0x688, Size: 0x8]// 0x7611d6e500
	bool bPostNetChangeUIDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]// 0x7611d6e480
	float SpawnTime;//[Offset: 0x694, Size: 0x4]// 0x7611d6e410
	bool bCanBePickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]// 0x7611d6e390
	enum PickUpItemFlowSourceType;//[Offset: 0x699, Size: 0x1]// 0x7611d6e230
	SoftObjectPath LightBeamConfig;//[Offset: 0x6a8, Size: 0x18]// 0x7611d6e1b0
	Vector LightBeamSpawnRelatedPosition;//[Offset: 0x6c0, Size: 0xc]// 0x7611d6e130
	ParticleSystemComponent* LightBeamComonent;//[Offset: 0x6d0, Size: 0x8]// 0x7611d6e0b0
	bool bRecycled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]// 0x7611d6e030
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x6f8, Size: 0x8]// 0x7611d6dfb0
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]// 0x7611d6df30
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x710, Size: 0x80]// 0x7611d6deb0
	bool bInitialShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]// 0x7611d6de30
	float InitialShowGroundEffectTime;//[Offset: 0x794, Size: 0x4]// 0x7611d6ddc0
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x7a0, Size: 0x80]// 0x7611d6dd40
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x820, Size: 0x8]// 0x7611d6dcc0
	delegate UGC_PickUpWrapperHideDelegate;//[Offset: 0x858, Size: 0x10]// 0x7611d6dc40
	delegate UGC_PickUpWrapperShowDelegate;//[Offset: 0x868, Size: 0x10]// 0x7611d6dbc0
	delegate UGC_PickUpWrapperDestroyDelegate;//[Offset: 0x878, Size: 0x10]// 0x7611d6db40
	float LightBeamLiftSpan;//[Offset: 0x888, Size: 0x4]// 0x7611d6dad0
	Object* TriggerHost;//[Offset: 0x898, Size: 0x8]// 0x7611d6da50
	Object* TriggerHostActor;//[Offset: 0x8a0, Size: 0x8]// 0x7611d6d9d0
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]// 0x7611d6d950
	int DropGroupID;//[Offset: 0x8ac, Size: 0x4]// 0x7611d6d8e0
	Vector DropStartLocation;//[Offset: 0x8b0, Size: 0xc]// 0x7611d6d860
	DropItemPerformanceInfo PerformanceInfo;//[Offset: 0x8c0, Size: 0x48]// 0x7611d6d7e0
	bool bOnceRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]// 0x7611d6d760
	float PickupAsyncReplicatedActorSpawnDistA;//[Offset: 0x90c, Size: 0x4]// 0x7611d6d6f0
	float PickupAsyncReplicatedActorSpawnDistB;//[Offset: 0x910, Size: 0x4]// 0x7611d6d680
	ParticleSystem* NewTrailEffect;//[Offset: 0x918, Size: 0x28]// 0x7611d6d600
	ParticleSystem* NewGroundEffect;//[Offset: 0x940, Size: 0x28]// 0x7611d6d580
	ParticleSystem* NewTrailEffectCache;//[Offset: 0x968, Size: 0x8]// 0x7611d6d500
	ParticleSystem* NewGroundEffectCache;//[Offset: 0x970, Size: 0x8]// 0x7611d6d480
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x448499c
	void ToggoleGroundEffectOnServer(bool bShow, float Time, bool bUseDefaultGroundEffect);// 0x4484890
	FString ToDetailString();// 0x4484808
	void TakeRepOnceAttachment();// 0x44847f4
	void ShowMesh(bool bShow);// 0x4484770
	void ShowActor();// 0x448475c
	void SetPerformanceInfo(DropItemPerformanceInfo InPerformanceInfo);// 0x4484684
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x448452c
	void SetDefineID(out const ItemDefineID DID);// 0x448449c
	void SetCountOnServerAfterSpawn(int _Count);// 0x4484420
	void SetActorToGround(Actor* IgnoreActor);// 0x4484370
	void SetActorAttachTo(Actor* TargetActor, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies, FName SocketName);// 0x448416c
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x448408c
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time, bool bPendingDestroy);// 0x4483f88
	void RegisterToCurveAnimComponent();// 0x4483f74
	void ReceiveOnRep_Count();// 0xffffff8a17adf2b0
	void PickUpWrapperShow__DelegateSignature();// 0xffffff8a17adf2b0
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0xffffff8a17adf2b0
	void PickUpWrapperDestroy__DelegateSignature();// 0xffffff8a17adf2b0
	void OnWrapperPickedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRep_TearOff();// 0x4483f58
	void OnRep_Role();// 0x4483f3c
	void OnRep_ReplicateMovement();// 0x4483f20
	void OnRep_ReplicatedMovement();// 0x4483f04
	void OnRep_RemoteRole();// 0x4483ee8
	void OnRep_PerformanceInfo();// 0x4483ed4
	void OnRep_Instigator();// 0x4483eb8
	void OnRep_Hidden();// 0x4483e9c
	void OnRep_DropGroundEffectInfo();// 0x4483e88
	void OnRep_Count();// 0x4483e74
	void OnRep_CanBeDamaged();// 0x4483e58
	void OnRep_AttachmentReplication();// 0x4483e3c
	void OnRep_AttachedActor();// 0x4483e28
	void OnPostSetActorHiddenInGame(bool bNewHidden);// 0xffffff8a17adf2b0
	void OnLoadNewTrailEffect(SoftObjectPath TrailEffectPath);// 0x4483d48
	void OnLoadNewGroundEffect(SoftObjectPath GroundEffectPath);// 0x4483c68
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x4483aa8
	void OnAsyncLoadLightBeam(SoftObjectPath _softPath, bool bShowParticle);// 0x4483984
	void ModifyData(int _Count);// 0x4483908
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget, PrimitiveComponent* AttachComponent);// 0x4483808
	void LoadLightBeam(bool bShowParticle, bool bForceLight);// 0x4483738
	ParticleSystem* GetNewTrailEffect(bool bTryLoad);// 0x44836a4
	ParticleSystem* GetNewGroundEffect(bool bTryLoad);// 0x4483610
	int GetNetGUIDOffsetValue();// 0x44835dc
	PickUpItemData[] GetDataList();// 0x44834a0
	void ForceNetUpdate();// 0x4483484
	bool FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x4483378
	bool CheckPickUpDataIsWeapon();// 0x4483340
	void BPOnRespawned();// 0xffffff8a17adf2b0
	void BPOnRecycled();// 0xffffff8a17adf2b0
	void BPDoPickUp(Actor* PickUpOwner, int AdditionalParam, int pickCount);// 0xffffff8a17adf2b0
	void AddToRegionBasedNetConsideration();// 0x448332c
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x44831a4

--------------------------------
Class: UAENetActor.Actor.Object

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 0x4]// 0x7611d615f0
	int TypeSpecificID;//[Offset: 0x4, Size: 0x4]// 0x7611d61580
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611d61500
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x7611d61480
	uint64 InstanceID;//[Offset: 0x10, Size: 0x8]// 0x7611d61410

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x18]// 0x7611d693f0
	int Count;//[Offset: 0x18, Size: 0x4]// 0x7611d69380
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x20, Size: 0x10]// 0x7611d69280
	int InstanceID;//[Offset: 0x30, Size: 0x4]// 0x7611d69210

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x7611d68640
	float FloatData;//[Offset: 0x8, Size: 0x4]// 0x7611d685d0
	FString StringData;//[Offset: 0x10, Size: 0x10]// 0x7611d68560
	int IntData;//[Offset: 0x20, Size: 0x4]// 0x7611d684f0

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 0x4]// 0x7611d6a4e0
	Transform EffectTransform;//[Offset: 0x10, Size: 0x30]// 0x7611d6a460
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 0x28]// 0x7611d6a3e0
	FString EffectPath;//[Offset: 0x68, Size: 0x10]// 0x7611d6a370
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x7611d6a2f0
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]// 0x7611d6a270
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]// 0x7611d6a1f0

--------------------------------
Class: DropItemPerformanceInfo
	bool IsPerforming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611d6cc20
	Actor* DropItemsProducer;//[Offset: 0x8, Size: 0x8]// 0x7611d6cba0
	SceneComponent* ProducerComponent;//[Offset: 0x10, Size: 0x8]// 0x7611d6cb20
	Actor* ItemActor;//[Offset: 0x18, Size: 0x8]// 0x7611d6caa0
	Actor* AttachActor;//[Offset: 0x20, Size: 0x8]// 0x7611d6ca20
	PrimitiveComponent* AttachComponent;//[Offset: 0x28, Size: 0x8]// 0x7611d6c9a0
	Vector SourcePos;//[Offset: 0x30, Size: 0xc]// 0x7611d6c920
	Vector TargetPos;//[Offset: 0x3c, Size: 0xc]// 0x7611d6c8a0

--------------------------------
Class: TombboxDeadEffect
	StaticMesh* DefaultStaticMesh;//[Offset: 0x0, Size: 0x8]// 0x76121bf0e0
	ParticleSystem* DeadBoxSmokeEffect;//[Offset: 0x8, Size: 0x8]// 0x76121bf060
	ParticleSystem* DeadBoxTwinkleEffect;//[Offset: 0x10, Size: 0x8]// 0x76121befe0
	ParticleSystem* DeadBoxEnhancedTwinkleEffect;//[Offset: 0x18, Size: 0x8]// 0x76121bef60
	<int,ItemTombParticle> ItemEffect;//[Offset: 0x20, Size: 0x50]// 0x76121bec20
	StaticMesh* DeadBoxMesh;//[Offset: 0x70, Size: 0x8]// 0x76121beba0
	SkeletalMesh* DeadBoxAnimMesh;//[Offset: 0x78, Size: 0x8]// 0x76121beb20
	class Object* DeadBoxAnimInstanceClass;//[Offset: 0x80, Size: 0x8]// 0x76121beaa0
	AnimMontage* DeadBoxAnimMontage;//[Offset: 0x88, Size: 0x8]// 0x76121bea20
	ParticleSystemComponent* SmokeParticle;//[Offset: 0x90, Size: 0x8]// 0x76121be9a0
	ParticleSystemComponent* TwinkleParticle;//[Offset: 0x98, Size: 0x8]// 0x76121be920

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 0x28]// 0x76121beee0
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 0x8]// 0x76121bee60

--------------------------------
Class: STExtraDamageType.DamageType.Object
	<enum,float> DamageAdditionalRateMap;//[Offset: 0x48, Size: 0x50]// 0x75a807c440
	<enum,float> AdditionaAbsoluteDamageMap;//[Offset: 0x98, Size: 0x50]// 0x75a807c500
	<enum,float> MomentumAbsoluteRateMap;//[Offset: 0xe8, Size: 0x50]// 0x75a807c5c0
	byte STExtraDamageType;//[Offset: 0x138, Size: 0x1]// 0x75b4d88380
	int DamageTag;//[Offset: 0x13c, Size: 0x4]// 0x75b4d83e00
	float STExtraDamage;//[Offset: 0x140, Size: 0x4]// 0x75b4d83e70
	int STExtraDamageAdditionalParam;//[Offset: 0x144, Size: 0x4]// 0x75b4d83ee0
	bool bForceWeaponAttackFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75b4d88400
	bool isCanDamageSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]// 0x75b4d88480
	float DamageScaleOfSelf;//[Offset: 0x14c, Size: 0x4]// 0x75b4d83f50
	bool isCanDamageTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]// 0x75b4d88500
	float DamageScaleOfTeammate;//[Offset: 0x154, Size: 0x4]// 0x75b4d83fc0
	bool bPlayCamersShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75b4d88580
	bool isCanOverrideDamageTeammateByMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]// 0x75b4d88600
	bool bUseNewKillInfoCaculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1]// 0x75b4d88680
	Texture2D* WeaponIcon;//[Offset: 0x160, Size: 0x8]// 0x75b4d88700
	FText KillTemplate;//[Offset: 0x168, Size: 0x18]// 0x75b4d84030
	FText KillDownTemplate;//[Offset: 0x180, Size: 0x18]// 0x75b4d840a0
	FText DamageName;//[Offset: 0x198, Size: 0x18]// 0x75b4d84110
	FText LocalCauserKillInfoTemplate;//[Offset: 0x1b0, Size: 0x18]// 0x75b4d84180
	FText LocalVictimKillInfoTemplate;//[Offset: 0x1c8, Size: 0x18]// 0x75b4d841f0
	FText CauserTeammateKillInfoTemplate;//[Offset: 0x1e0, Size: 0x18]// 0x75b4d84260
	FText VictimTeammateKillInfoTemplate;//[Offset: 0x1f8, Size: 0x18]// 0x75b4d842d0
	int VictimerTlogStatisticsID;//[Offset: 0x210, Size: 0x4]// 0x75b4d84340
	int CauserTlogStatisticsID;//[Offset: 0x214, Size: 0x4]// 0x75b4d843b0
	bool bIsVictimerCaculateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]// 0x75b4d88780
	bool bIsCauserCaculateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]// 0x75b4d88800
	FString GetVictimName(UAECharacter* causer, UAECharacter* Victim, Controller* CauserInstigator, FString NormalName);// 0x45f7618
	<enum,float> GetMomentumAbsoluteRateMap(Actor* InAttacker);// 0x45f7460
	void GetKillOrPutDownMessageData(out const ClientFatalDamageRecordData Data, out KillOrPutDownMessage Message, bool bIsLocalCauser, bool bIsLocalVictim, bool bIsVictimTeammate, bool bIsCauserTeammate);// 0x45f714c
	FString GetIsTeammateVictim(FString CauserName, FString VictimeName, FString DamageResult);// 0x45f6fd8
	FString GetIsTeammateCauser(FString CauserName, FString VictimeName, FString DamageResult);// 0x45f6e64
	FString GetIsLocalVictim(FString CauserName, FString DamageResult);// 0x45f6d38
	FString GetIsLocalCauser(FString VictimName, FString DamageResult);// 0x45f6c0c
	<enum,float> GetDamageAdditionalRateMap(Actor* InAttacker);// 0x45f6a54
	FString GetCauserName(UAECharacter* causer, UAECharacter* Victim, Controller* CauserInstigator, FString NormalName);// 0x45f68c0
	<enum,float> GetAdditionaAbsoluteDamageMap(Actor* InAttacker);// 0x45f6708

--------------------------------
Class: ClientFatalDamageRecordData
	byte ClientFatalItemType;//[Offset: 0x0, Size: 0x1]// 0x7611f47cb0
	FString causer;//[Offset: 0x8, Size: 0x10]// 0x7611f47c40
	UAECharacter* CauserPtr;//[Offset: 0x18, Size: 0x8]// 0x7611f47bc0
	FName HitBoneName;//[Offset: 0x20, Size: 0x8]// 0x7611f47b50
	FString CauserUID;//[Offset: 0x28, Size: 0x10]// 0x7611f47ae0
	uint32 CauserKey;//[Offset: 0x38, Size: 0x4]// 0x7611f47a70
	int CauserTeamId;//[Offset: 0x3c, Size: 0x4]// 0x7611f47a00
	FString VictimName;//[Offset: 0x40, Size: 0x10]// 0x7611f47990
	FString VictimUID;//[Offset: 0x50, Size: 0x10]// 0x7611f47920
	uint32 VictimKey;//[Offset: 0x60, Size: 0x4]// 0x7611f478b0
	int DamageType;//[Offset: 0x64, Size: 0x4]// 0x7611f47840
	int AdditionalParam;//[Offset: 0x68, Size: 0x4]// 0x7611f477d0
	int[] KillFXItemID;//[Offset: 0x70, Size: 0x10]// 0x7611f476e0
	ExtractDamageParamKillTipsData KillTipsData;//[Offset: 0x80, Size: 0xc]// 0x7611f47470
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]// 0x7611f473f0
	bool bIsVictimMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]// 0x7611f47370
	int ResultHealthStatus;//[Offset: 0x90, Size: 0x4]// 0x7611f47300
	byte RecordRelationShip;//[Offset: 0x94, Size: 0x1]// 0x7611f47220
	int PreviousHealthStatus;//[Offset: 0x98, Size: 0x4]// 0x7611f471b0
	bool IsKilledByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]// 0x7611f47130
	int causerAnchorPlatformResID;//[Offset: 0xa0, Size: 0x4]// 0x7611f470c0
	int causerAnchorPlatformColorID;//[Offset: 0xa4, Size: 0x4]// 0x7611f47050
	int realKillerAnchorPlatformResID;//[Offset: 0xa8, Size: 0x4]// 0x7611f46fe0
	int realKillerAnchorPlatformColorID;//[Offset: 0xac, Size: 0x4]// 0x7611f46f70
	int victimAnchorPlatformResID;//[Offset: 0xb0, Size: 0x4]// 0x7611f46f00
	int victimAnchorPlatformColorID;//[Offset: 0xb4, Size: 0x4]// 0x7611f46e90
	FString CauserPicURL;//[Offset: 0xb8, Size: 0x10]// 0x7611f46e20
	FString VictimPicURL;//[Offset: 0xc8, Size: 0x10]// 0x7611f46db0
	FString CauserMedalPicUrl;//[Offset: 0xd8, Size: 0x10]// 0x7611f46d40
	FString VictimMedalPicUrl;//[Offset: 0xe8, Size: 0x10]// 0x7611f46cd0
	FString RealKillerName;//[Offset: 0xf8, Size: 0x10]// 0x7611f46c60
	int RealKillNum;//[Offset: 0x108, Size: 0x4]// 0x7611f46bf0
	int AliveTeamNum;//[Offset: 0x10c, Size: 0x4]// 0x7611f46b80
	int LocalPlayerAssistNum;//[Offset: 0x110, Size: 0x4]// 0x7611f46b10
	int KillDistance;//[Offset: 0x114, Size: 0x4]// 0x7611f46aa0
	byte MaxKillerStatus;//[Offset: 0x118, Size: 0x1]// 0x7611f469c0
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x120, Size: 0x10]// 0x7611f46730
	bool AllTeammateDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]// 0x7611f466b0
	bool AllTeammateKillBySameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]// 0x7611f46630
	class DamageType* DamageTypeClass;//[Offset: 0x138, Size: 0x8]// 0x7611f465b0

--------------------------------
Class: ExtractDamageParamKillTipsData
	int KillTipsAbilityHandleItemID;//[Offset: 0x0, Size: 0x4]// 0x7611f47670
	int CauserWeaponAvatarID;//[Offset: 0x4, Size: 0x4]// 0x7611f47600
	int WeaponAvatarKillsNum;//[Offset: 0x8, Size: 0x4]// 0x7611f47590

--------------------------------
Class: ExcellentOperationRecordData
	byte OperationResultType;//[Offset: 0x0, Size: 0x1]// 0x7611f46940
	int AdditionalNum;//[Offset: 0x4, Size: 0x4]// 0x7611f468d0

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 0x1]// 0x7612003c60
	FString AttackActionName;//[Offset: 0x8, Size: 0x10]// 0x7612003bf0
	FString AttackName;//[Offset: 0x18, Size: 0x10]// 0x7612003b80
	bool bIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7612003b00
	int KillNum;//[Offset: 0x2c, Size: 0x4]// 0x7612003a90
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7612003a10
	FString FullMsg;//[Offset: 0x38, Size: 0x10]// 0x76120039a0
	int victimAnchorPlatformResID;//[Offset: 0x48, Size: 0x4]// 0x7612003930
	FString CauserPlayerName;//[Offset: 0x50, Size: 0x10]// 0x76120038c0
	FString VictimPlayerName;//[Offset: 0x60, Size: 0x10]// 0x7612003850
	FString NumberMsg;//[Offset: 0x70, Size: 0x10]// 0x76120037e0
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x80, Size: 0x10]// 0x76120036e0
	bool bNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]// 0x7612003660
	ExtractDamageParamKillTipsData KillTipsData;//[Offset: 0x94, Size: 0xc]// 0x76120035e0

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class PickUpWrapperActor* WrapperClass;//[Offset: 0x0, Size: 0x8]// 0x7612139d30
	int Count;//[Offset: 0x8, Size: 0x4]// 0x7612139cc0

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]// 0x7611d9de60

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]// 0x75a8886180
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0x11c, Size: 0x4]// 0x75a887db60
	int MaxCheatTimes;//[Offset: 0x120, Size: 0x4]// 0x75a887dbd0
	float TolerateDistanceFractor;//[Offset: 0x124, Size: 0x4]// 0x75a887dc40
	float MaxPacketLossRate;//[Offset: 0x128, Size: 0x4]// 0x75a887dcb0
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x12c, Size: 0x4]// 0x75a887dd20
	int MaxTotalMoveCheatTimes;//[Offset: 0x130, Size: 0x4]// 0x75a887dd90
	int MaxTotalPassWallTimes;//[Offset: 0x134, Size: 0x4]// 0x75a887de00
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0x138, Size: 0x4]// 0x75a887de70
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]// 0x75a8886200
	int MaxMoveAntiCheatCheatSpeedTimes;//[Offset: 0x140, Size: 0x4]// 0x75a887dee0
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x1e0, Size: 0x270]// 0x75a8886280
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x450, Size: 0x58]// 0x75a8886300
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x4a8, Size: 0x570]// 0x75a8886380
	MoveCheatAntiStrategy7 MoveCheatAntiStrategy7;//[Offset: 0xa18, Size: 0x78]// 0x75a8886400
	ClientTimeAccChecker ClientTimeAccChecker;//[Offset: 0xa90, Size: 0x28]// 0x75a8886480
	MoveCheatCheckPlayerStuck MoveCheatAntiPlayerStuck;//[Offset: 0xab8, Size: 0x10]// 0x75a8886500
	MoveCheatCheckPlayerStuck2 MoveCheatAntiPlayerStuck2;//[Offset: 0xac8, Size: 0x1c]// 0x75a8886580
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0xae4, Size: 0x90]// 0x75a8886600
	CheckMoveInputStateUseSixteenDir CheckMoveInputState;//[Offset: 0xb78, Size: 0x28]// 0x75a8886680
	CheckMoveSpeedUpFromMovementComp CheckSpeedUpFromMoveComp;//[Offset: 0xba0, Size: 0x3590]// 0x75a8886700
	JumpLimitor CharacterJumpLimitor;//[Offset: 0x4130, Size: 0x50]// 0x75a8886780
	FallingMonitor CharaFallMonitor;//[Offset: 0x4180, Size: 0x74]// 0x75a8886800
	FlyingMonitor CharaFlyMonitor;//[Offset: 0x41f8, Size: 0xe8]// 0x75a8886880
	RelSpeedInspector RelSpeedInspector;//[Offset: 0x42e0, Size: 0x60]// 0x75a8886900
	ServerMoveLimitor SrvMoveLimitor;//[Offset: 0x4340, Size: 0x68]// 0x75a8886980
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x43a8, Size: 0x80]// 0x75a8886a00
	Character* CharacterOwner;//[Offset: 0x4428, Size: 0x8]// 0x75a8886a80
	float TimeResetThreshold;//[Offset: 0x4474, Size: 0x4]// 0x75a887df50
	float ColdMovePunishMaxTime;//[Offset: 0x4478, Size: 0x4]// 0x75a887dfc0
	float MaxJumpHeight;//[Offset: 0x4570, Size: 0x4]// 0x75a887e030
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x4428270
	void SendForceAdjust(const ForceAdjustInf InForceAdjust);// 0x44281e4
	void SendClientVerifyInfo(const ClientVerifyInfos InClientVerifyInfo);// 0x442812c
	void RefreshRealMaxJumpHeight();// 0x4428118
	void Ping2Server(const Mc3ClientInfo ClientInfo);// 0x442804c
	void Ping2Client(Mc3IndexInfo ServerTime);// 0x4427fcc
	void OnTimeInspectorColdMoveEx();// 0x4427fb8
	void OnTimeInspectorColdMove();// 0x4427fa4
	void OnSkillStartDel(int InSkillUID);// 0x4427f28
	void OnSkillFinishedDel(enum InStopReason, int SkillID, bool HasThrownGrenade);// 0x4427e2c
	void OnPreReconnectOnServer();// 0x4427e18
	void OnMovementModeChange(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x4427d24
	void OnCharacterMovementUpdated(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x4427c20
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x44279bc
	void DebugDrawLine(const Vector Start, const Vector End);// 0x44278fc

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]// 0x76121ad300
	uint32 bIsOpenDeltailLog;//[Offset: 0x4, Size: 0x4]// 0x76121ad290
	uint32 bIsForbidServerCallPing2Client;//[Offset: 0x8, Size: 0x4]// 0x76121ad220
	float MaxAllowClientSideTimeLag;//[Offset: 0xc, Size: 0x4]// 0x76121ad1b0
	float CheckTimeSpeedIntervel;//[Offset: 0x10, Size: 0x4]// 0x76121ad140
	int MaxAllowCheatMoveTimes;//[Offset: 0x14, Size: 0x4]// 0x76121ad0d0
	float MaxMoveDistanceScaleFactor;//[Offset: 0x18, Size: 0x4]// 0x76121ad060
	float MaxPublishForbidMoveTime;//[Offset: 0x1c, Size: 0x4]// 0x76121acff0
	float ServerSendPingIntervel;//[Offset: 0x20, Size: 0x4]// 0x76121acf80
	float MaxMoveSpeedValue;//[Offset: 0x24, Size: 0x4]// 0x76121acf10
	int MaxSpeedSplitNum;//[Offset: 0x28, Size: 0x4]// 0x76121acea0
	int MaxContinuousCheatMoveTimes;//[Offset: 0x2c, Size: 0x4]// 0x76121ace30
	float MaxAllowDelaySecondsRecvPingFromClient;//[Offset: 0x30, Size: 0x4]// 0x76121acdc0
	float MaxAllowDelaySecondsRecvMovePacketFromClient;//[Offset: 0x34, Size: 0x4]// 0x76121acd50
	uint32 bIsOpenNoPingPublish;//[Offset: 0x38, Size: 0x4]// 0x76121acce0
	int MaxAllowNoPingTimes;//[Offset: 0x3c, Size: 0x4]// 0x76121acc70
	float NoPingPulishForbidMoveTime;//[Offset: 0x40, Size: 0x4]// 0x76121acc00
	bool bPunishVeirfyLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]// 0x76121acb80
	float VerifyLostPunishTime;//[Offset: 0x48, Size: 0x4]// 0x76121acb10
	float AllowNoVerifyTime;//[Offset: 0x4c, Size: 0x4]// 0x76121acaa0

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]// 0x76121abdf0
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 0x4]// 0x76121abd80
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 0x4]// 0x76121abd10
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 0x4]// 0x76121abca0
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 0x4]// 0x76121abc30
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 0x4]// 0x76121abbc0
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 0x4]// 0x76121abb50

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]// 0x76121ac8f0
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 0x4]// 0x76121ac880
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 0x4]// 0x76121ac810
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 0x4]// 0x76121ac7a0
	float MaxSumVectorLength;//[Offset: 0x10, Size: 0x4]// 0x76121ac730
	float MaxVectorAccTime;//[Offset: 0x14, Size: 0x4]// 0x76121ac6c0
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 0x4]// 0x76121ac650

--------------------------------
Class: MoveCheatAntiStrategy7
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]// 0x76121ac4a0
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 0x4]// 0x76121ac430
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 0x4]// 0x76121ac3c0
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 0x4]// 0x76121ac350
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 0x4]// 0x76121ac2e0
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 0x4]// 0x76121ac270
	float MaxMoveSpeedValue;//[Offset: 0x18, Size: 0x4]// 0x76121ac200
	int MaxSpeedSplitNum;//[Offset: 0x1c, Size: 0x4]// 0x76121ac190

--------------------------------
Class: ClientTimeAccChecker

--------------------------------
Class: MoveCheatCheckPlayerStuck
	float StuckTime;//[Offset: 0x0, Size: 0x4]// 0x76121ac080

--------------------------------
Class: MoveCheatCheckPlayerStuck2
	int MaxServerMoveCount;//[Offset: 0x0, Size: 0x4]// 0x76121abf70
	float MaxStuckDistance;//[Offset: 0x4, Size: 0x4]// 0x76121abf00

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]// 0x76121ab700
	float MaxAllowMoveZHeight;//[Offset: 0x4, Size: 0x4]// 0x76121ab690

--------------------------------
Class: CheckMoveInputStateUseSixteenDir
	int MaxAllowCheatMoveTimes;//[Offset: 0x0, Size: 0x4]// 0x76121ab440
	int CheckCountInterval;//[Offset: 0x4, Size: 0x4]// 0x76121ab3d0

--------------------------------
Class: CheckMoveSpeedUpFromMovementComp
	int MaxAllowCheatMoveTimes;//[Offset: 0x0, Size: 0x4]// 0x76121ab2c0
	int MaxLogTimes;//[Offset: 0x4, Size: 0x4]// 0x76121ab250
	float MaxVerificationTimeInSeconds;//[Offset: 0x8, Size: 0x4]// 0x76121ab1e0
	float MaxClientSideTimeLagInSeconds;//[Offset: 0xc, Size: 0x4]// 0x76121ab170
	float MaxClientAndServerVelocityDiff;//[Offset: 0x10, Size: 0x4]// 0x76121ab100
	float MaxClientAndServerLocationDiff;//[Offset: 0x14, Size: 0x4]// 0x76121ab090
	float MaxMoveDistanceScaleFactor;//[Offset: 0x18, Size: 0x4]// 0x76121ab020
	float MinCheckTimeIntervalWhenExceedMaxTimes;//[Offset: 0x1c, Size: 0x4]// 0x76121aafb0

--------------------------------
Class: JumpLimitor.McCheckerBase

--------------------------------
Class: McCheckerBase

--------------------------------
Class: FallingMonitor
	bool bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x761218a620
	float CheckInterval;//[Offset: 0x4, Size: 0x4]// 0x761218a5b0
	float MinFallDist;//[Offset: 0x8, Size: 0x4]// 0x761218a540
	float ZThreshold;//[Offset: 0xc, Size: 0x4]// 0x761218a4d0
	float BadFallingTime;//[Offset: 0x10, Size: 0x4]// 0x761218a460
	float StartCheckFallingTime;//[Offset: 0x14, Size: 0x4]// 0x761218a3f0
	float PunishTime;//[Offset: 0x18, Size: 0x4]// 0x761218a380
	int LogTokenInit;//[Offset: 0x1c, Size: 0x4]// 0x761218a310
	float CheckStuckRadius;//[Offset: 0x20, Size: 0x4]// 0x761218a2a0
	float MoveDistanceThres;//[Offset: 0x24, Size: 0x4]// 0x761218a230

--------------------------------
Class: FlyingMonitor
	bool bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x761218d450
	int LogTokenInit;//[Offset: 0x4, Size: 0x4]// 0x761218d3e0
	float ServerTimeAddit;//[Offset: 0x8, Size: 0x4]// 0x761218d370
	float CheckDistanceThres;//[Offset: 0xc, Size: 0x4]// 0x761218d300
	float PunishTimeBias;//[Offset: 0x10, Size: 0x4]// 0x761218d290
	float CheckInterval;//[Offset: 0x14, Size: 0x4]// 0x761218d220
	<int,FlyingSkillLimit> SkillLimits;//[Offset: 0x18, Size: 0x50]// 0x761218cf00

--------------------------------
Class: FlyingSkillLimit
	uint32 ImportantMaxSpeed;//[Offset: 0x0, Size: 0x4]// 0x761218d1b0
	uint32 SkillMaxDistance;//[Offset: 0x4, Size: 0x4]// 0x761218d140

--------------------------------
Class: RelSpeedInspector.McCheckerBase
	float CheckInterval;//[Offset: 0x1c, Size: 0x4]// 0x76121ca6d0
	float MaxSpeed;//[Offset: 0x20, Size: 0x4]// 0x76121ca660
	int PunishTimeSeconds;//[Offset: 0x24, Size: 0x4]// 0x76121ca5f0

--------------------------------
Class: ServerMoveLimitor
	float InspectSpan;//[Offset: 0x0, Size: 0x4]// 0x76121d3710
	float BigVelocityWarnThres;//[Offset: 0x4, Size: 0x4]// 0x76121d36a0
	int BigVelocityLogCnt;//[Offset: 0x8, Size: 0x4]// 0x76121d3630
	int LogCntPositionJump;//[Offset: 0xc, Size: 0x4]// 0x76121d35c0

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 0x4]// 0x76121d51e0
	float DataSampleInterval;//[Offset: 0x4, Size: 0x4]// 0x76121d5170
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 0x4]// 0x76121d5100
	float CheatLockTime;//[Offset: 0xc, Size: 0x4]// 0x76121d5090
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 0x4]// 0x76121d5020
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x78, Size: 0x8]// 0x76121d4fa0

--------------------------------
Class: ShovelInfo

--------------------------------
Class: ForceAdjustInf
	Vector NewLocation;//[Offset: 0x0, Size: 0xc]// 0x76121d2820
	Vector NewVelocity;//[Offset: 0xc, Size: 0xc]// 0x76121d27a0
	PrimitiveComponent* NewBase;//[Offset: 0x18, Size: 0x8]// 0x76121d2720
	FName NewBaseBoneName;//[Offset: 0x20, Size: 0x8]// 0x76121d26b0
	bool bHasBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x76121d2630
	bool bBaseRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x76121d25b0
	byte ServerMovementMode;//[Offset: 0x2a, Size: 0x1]// 0x76121d2530

--------------------------------
Class: ClientVerifyInfos

--------------------------------
Class: Mc3ClientInfo
	Mc3IndexInfo BackSrvInfo;//[Offset: 0x0, Size: 0x4]// 0x76121a5880
	float NowTime;//[Offset: 0x4, Size: 0x4]// 0x76121a5810
	Vector_NetQuantize100 NowLocation;//[Offset: 0x8, Size: 0xc]// 0x76121a5790
	float MaxSpeed;//[Offset: 0x14, Size: 0x4]// 0x76121a5720

--------------------------------
Class: Mc3IndexInfo
	byte SrvIndex;//[Offset: 0x0, Size: 0x1]// 0x76121a5a10
	uint16 SrvInf;//[Offset: 0x2, Size: 0x2]// 0x76121a59a0

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	void OnCharacterHpGoZero();// 0x43d8e3c

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]// 0x75bca7e480
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 0x1]// 0x75bca7e500
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x273, Size: 0x1]// 0x75bca7e580
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]// 0x75bca7e600
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]// 0x75bca7e680
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1]// 0x75bca7e700
	float TolerateShootPointDistanceSqured;//[Offset: 0x278, Size: 0x4]// 0x75a88ed890
	float TolerateShootPointScaleOnFast;//[Offset: 0x27c, Size: 0x4]// 0x75a88ed900
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]// 0x75bca7e780
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x288, Size: 0x10]// 0x75bca7e880
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]// 0x75bca7e900
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x29c, Size: 0x4]// 0x75a88ed970
	float TolerateSimulatedDelayTime;//[Offset: 0x2a0, Size: 0x4]// 0x75a88ed9e0
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]// 0x75bca7e980
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]// 0x75bca7ea00
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 0x1]// 0x75bca7ea80
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 0x1]// 0x75bca7eb00
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]// 0x75bca7eb80
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]// 0x75bca7ec00
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1]// 0x75bca7ec80
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ab, Size: 0x1]// 0x75bca7ed00
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]// 0x75bca7ed80
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x2b0, Size: 0x4]// 0x75a88eda50
	float TolerateBulletFlyTimePercentage;//[Offset: 0x2b4, Size: 0x4]// 0x75a88edac0
	float TolerateMuzzleDistanceSqured;//[Offset: 0x2b8, Size: 0x4]// 0x75a88edb30
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x2bc, Size: 0x4]// 0x75a88edba0
	float TolerateShootHitAngle;//[Offset: 0x2c0, Size: 0x4]// 0x75a88edc10
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x2c4, Size: 0x4]// 0x75a88edc80
	float TolerateBulletDirOffsetSquared;//[Offset: 0x2c8, Size: 0x4]// 0x75a88edcf0
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x2cc, Size: 0x4]// 0x75a88edd60
	float TolerateShootRange;//[Offset: 0x2d0, Size: 0x4]// 0x75a88eddd0
	byte[] TraceObjectTypes;//[Offset: 0x2d8, Size: 0x10]// 0x75bca7ee80
	float ShooterWeaponRange;//[Offset: 0x2e8, Size: 0x4]// 0x75a88ede40
	float ShooterWeaponHeight;//[Offset: 0x2ec, Size: 0x4]// 0x75a88edeb0
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]// 0x75bca7ef00
	float ShortDirReverseDistance;//[Offset: 0x2f4, Size: 0x4]// 0x75a88edf20
	float TolerateShootMuzzleHeight;//[Offset: 0x2f8, Size: 0x4]// 0x75a88edf90
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]// 0x75bca7ef80
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]// 0x75bca7f000
	float TolerateLocusSingle;//[Offset: 0x300, Size: 0x4]// 0x75a88ee000
	float TolerateLocusDist;//[Offset: 0x304, Size: 0x4]// 0x75a88ee070
	float TolerateLocusSegment;//[Offset: 0x308, Size: 0x4]// 0x75a88ee0e0
	float TolerateLocusZOffsetUp;//[Offset: 0x30c, Size: 0x4]// 0x75a88ee150
	float TolerateLocusZOffsetDown;//[Offset: 0x310, Size: 0x4]// 0x75a88ee1c0
	float LocusZHistoryUpInVehicle;//[Offset: 0x314, Size: 0x4]// 0x75a88ee230
	float MaxGunPosZHeight;//[Offset: 0x318, Size: 0x4]// 0x75a88ee2a0
	float MaxGunPosLength;//[Offset: 0x31c, Size: 0x4]// 0x75a88ee310
	float LocusSearchBackTime;//[Offset: 0x320, Size: 0x4]// 0x75a88ee380
	float HistBack_SingleRadius;//[Offset: 0x324, Size: 0x4]// 0x75a88ee3f0
	float HistBack_IgnoreNearDist;//[Offset: 0x328, Size: 0x4]// 0x75a88ee460
	float HistBack_TolerateBoxExpand;//[Offset: 0x32c, Size: 0x4]// 0x75a88ee4d0
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x330, Size: 0xc]// 0x75bca7f080
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x33c, Size: 0xc]// 0x75bca7f100
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]// 0x75bca7f180
	float BonePointTorelate;//[Offset: 0x34c, Size: 0x4]// 0x75a88ee540
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x350, Size: 0x4]// 0x75a88ee5b0
	CriticalVerifyConfig CriticalVerifyConfig;//[Offset: 0x354, Size: 0x1c]// 0x75bca7f200
	Character* CharacterOwner;//[Offset: 0x370, Size: 0x8]// 0x75bca7f280
	float SimulatedCharacterServerTime();// 0x43d9518
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x43d9434

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75b4d11100
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]// 0x75b4d11180
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x11c, Size: 0x8]// 0x75b4d11200
	PhysicsAsset* VictimCollision;//[Offset: 0x128, Size: 0x28]// 0x75b4d11280
	AcBoneGeomsData AcGeomData;//[Offset: 0x150, Size: 0x78]// 0x75b4d11300

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 0x4]// 0x76121880b0
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 0x4]// 0x7612188040

--------------------------------
Class: AcBoneGeomsData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76121895a0
	FString DataInfo;//[Offset: 0x8, Size: 0x10]// 0x7612189530
	<FName,KAggregateGeom> BoneGeoms;//[Offset: 0x18, Size: 0x50]// 0x7612188230
	FString OrigPath;//[Offset: 0x68, Size: 0x10]// 0x76121881c0

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 0x1]// 0x761219f9b0
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 0xc]// 0x761219f930
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 0xc]// 0x761219f8b0
	Vector Offset;//[Offset: 0x1c, Size: 0xc]// 0x761219f830
	Vector PitchOffset;//[Offset: 0x28, Size: 0xc]// 0x761219f7b0
	float ReferenceHSlope;//[Offset: 0x34, Size: 0x4]// 0x761219f740
	float ReferenceVSlope;//[Offset: 0x38, Size: 0x4]// 0x761219f6d0
	float HMinScale;//[Offset: 0x3c, Size: 0x4]// 0x761219f660
	float VMinScale;//[Offset: 0x40, Size: 0x4]// 0x761219f5f0
	float HMaxScale;//[Offset: 0x44, Size: 0x4]// 0x761219f580
	float VMaxScale;//[Offset: 0x48, Size: 0x4]// 0x761219f510

--------------------------------
Class: CriticalVerifyConfig
	float PlayerStandChestZOffset;//[Offset: 0x0, Size: 0x4]// 0x761219f400
	float PlayerCrouchChestZOffset;//[Offset: 0x4, Size: 0x4]// 0x761219f390
	float PlayerProneChestZOffset;//[Offset: 0x8, Size: 0x4]// 0x761219f320
	float MuzzleToPlayerChestVerifyThreshold;//[Offset: 0xc, Size: 0x4]// 0x761219f2b0
	Vector2D ControlRotToCameraRotPitchRowVerifyThreshold;//[Offset: 0x10, Size: 0x8]// 0x761219f230
	float ClientShootRotVerifyThreshold;//[Offset: 0x18, Size: 0x4]// 0x761219f1c0

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 0xc]// 0x761219fe50
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]// 0x761219fdd0
	Box BoundBox;//[Offset: 0x18, Size: 0x1c]// 0x761219fd50
	Box HeadBoundBox;//[Offset: 0x34, Size: 0x1c]// 0x761219fcd0
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x761219fc50
	Vector VehicleLocation;//[Offset: 0x54, Size: 0xc]// 0x761219fbd0
	enum MoveBaseState;//[Offset: 0x60, Size: 0x1]// 0x761219fad0

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0x160, Size: 0x4]// 0x75b4ebc8c0
	float HorizontalSpeedModifier;//[Offset: 0x178, Size: 0x4]// 0x75b4ebc930
	float VerticalSpeedModifier;//[Offset: 0x17c, Size: 0x4]// 0x75b4ebc9a0
	float FreeFall_InputTriggerThreshold;//[Offset: 0x180, Size: 0x4]// 0x75b4ebca10
	float FreeFall_AcceFall;//[Offset: 0x184, Size: 0x4]// 0x75b4ebca80
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x188, Size: 0x4]// 0x75b4ebcaf0
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x18c, Size: 0x4]// 0x75b4ebcb60
	float FreeFall_AcceForward;//[Offset: 0x190, Size: 0x4]// 0x75b4ebcbd0
	float FreeFall_MaxForwardSpeed;//[Offset: 0x194, Size: 0x4]// 0x75b4ebcc40
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x198, Size: 0x4]// 0x75b4ebccb0
	float FreeFall_AcceRight;//[Offset: 0x19c, Size: 0x4]// 0x75b4ebcd20
	float FreeFall_MaxRightSpeed;//[Offset: 0x1a0, Size: 0x4]// 0x75b4ebcd90
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x1a4, Size: 0x4]// 0x75b4ebce00
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x1a8, Size: 0x4]// 0x75b4ebce70
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1ac, Size: 0x4]// 0x75b4ebcee0
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1b0, Size: 0x4]// 0x75b4ebcf50
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1b4, Size: 0x4]// 0x75b4ebcfc0
	float DifferencePitchBetweenCharcterAndCamera;//[Offset: 0x1b8, Size: 0x4]// 0x75b4ebd030
	float FreeFall_MinDiveAngle;//[Offset: 0x1bc, Size: 0x4]// 0x75b4ebd0a0
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x1c0, Size: 0x4]// 0x75b4ebd110
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x1c4, Size: 0x4]// 0x75b4ebd180
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]// 0x75b4e8e400
	float Opened_AcceFall;//[Offset: 0x1cc, Size: 0x4]// 0x75b4ebd1f0
	float Opened_MaxFreeFallSpeed;//[Offset: 0x1d0, Size: 0x4]// 0x75b4ebd260
	float Opened_AcceForward;//[Offset: 0x1d4, Size: 0x4]// 0x75b4ebd2d0
	float Opened_MaxForwardSpeed;//[Offset: 0x1d8, Size: 0x4]// 0x75b4ebd340
	float Opened_MaxBackwardSpeed;//[Offset: 0x1dc, Size: 0x4]// 0x75b4ebd3b0
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x1e0, Size: 0x4]// 0x75b4ebd420
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x1e4, Size: 0x4]// 0x75b4ebd490
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x1e8, Size: 0x4]// 0x75b4ebd500
	float Opened_AcceRight;//[Offset: 0x1ec, Size: 0x4]// 0x75b4ebd570
	float Opened_MaxRightSpeed;//[Offset: 0x1f0, Size: 0x4]// 0x75b4ebd5e0
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x1f4, Size: 0x4]// 0x75b4ebd650
	float Opened_MaxRollAngle;//[Offset: 0x1f8, Size: 0x4]// 0x75b4ebd6c0
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1fc, Size: 0x4]// 0x75b4ebd730
	float Opened_MaxPitchBackAngle;//[Offset: 0x200, Size: 0x4]// 0x75b4ebd7a0
	float Opened_MaxYawAngleSpeed;//[Offset: 0x204, Size: 0x4]// 0x75b4ebd810
	float Opened_RotationInterpSpeed;//[Offset: 0x208, Size: 0x4]// 0x75b4ebd880
	float CurrentFallSpeed;//[Offset: 0x20c, Size: 0x4]// 0x75b4ebd8f0
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x210, Size: 0x4]// 0x75b4ebd960
	float AllowVelocityZErrorTolerance;//[Offset: 0x214, Size: 0x4]// 0x75b4ebd9d0
	float AllowVelocityXYErrorTolerance;//[Offset: 0x218, Size: 0x4]// 0x75b4ebda40
	float CorrectClientInterval;//[Offset: 0x21c, Size: 0x4]// 0x75b4ebdab0
	int MaxCorrectionTimes;//[Offset: 0x220, Size: 0x4]// 0x75b4ebdb20
	float LastCorrectionTime;//[Offset: 0x224, Size: 0x4]// 0x75b4ebdb90
	int CorrectionTimes;//[Offset: 0x228, Size: 0x4]// 0x75b4ebdc00
	int MaxErrorCheckTimes;//[Offset: 0x22c, Size: 0x4]// 0x75b4ebdc70
	float OnceCheckTime;//[Offset: 0x230, Size: 0x4]// 0x75b4ebdce0
	int CachedErrorCheckTimes;//[Offset: 0x234, Size: 0x4]// 0x75b4ebdd50
	float CachedStartCheckTime;//[Offset: 0x238, Size: 0x4]// 0x75b4ebddc0
	float CachedLastZLoc;//[Offset: 0x23c, Size: 0x4]// 0x75b4ebde30
	Vector CachedStartCheckLoc;//[Offset: 0x240, Size: 0xc]// 0x75b4e8e480
	ParachuteCorrectionData ParachuteCorrectionData;//[Offset: 0x24c, Size: 0x3c]// 0x75b4e8e500
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]// 0x75b4e8e580
	bool bUseCompressedInputRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]// 0x75b4e8e600
	float FollowerDist;//[Offset: 0x2b4, Size: 0x4]// 0x75b4ebdea0
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x2b8, Size: 0x4]// 0x75b4ebdf10
	bool VerifyClientTimeStamp(float TimeStamp);// 0x4257418
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator ControlRotation);// 0x42572a4
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator ControlRotation);// 0x4257130
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x4257040
	void UpdateFreeFallRotation(out const Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x4256efc
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator ControlRotation);// 0x4256dc4
	void StopParachute();// 0x4256db0
	void StartParachute();// 0x4256d9c
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x4256d18
	void ResetVelocity();// 0x4256d04
	void PostNetReceiveNewState();// 0x4256cf0
	void OnPreReconnectOnServer();// 0x4256cdc
	void InvalidateAdjustFollowerLocation();// 0x4256cc8
	float GetReplicatedRightInput();// 0x4256c94
	float GetReplicatedForwardInput();// 0x4256c60
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x4256b5c
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x4256a58
	void BPPostNetReceiveNewState();// 0xffffff8a17adf2b0
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x4256920
	void AdjustFollowerLocation();// 0x425690c

--------------------------------
Class: ParachuteCorrectionData
	float CorrectionDist;//[Offset: 0x0, Size: 0x4]// 0x7612169a30
	Vector ClientLoc;//[Offset: 0x4, Size: 0xc]// 0x76121699b0
	Vector ClientVel;//[Offset: 0x10, Size: 0xc]// 0x7612169930
	float ClientTimeStamp;//[Offset: 0x1c, Size: 0x4]// 0x76121698c0
	Vector ServerLoc;//[Offset: 0x20, Size: 0xc]// 0x7612169840
	Vector ServerVel;//[Offset: 0x2c, Size: 0xc]// 0x76121697c0
	float ServerTimestamp;//[Offset: 0x38, Size: 0x4]// 0x7612169750

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0x118, Size: 0x4]// 0x75a82d0510
	float TileRemovalRadius;//[Offset: 0x11c, Size: 0x4]// 0x75a82d0580

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0x118, Size: 0x1]// 0x75a8585d80
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0x120, Size: 0x50]// 0x75a85a4180
	TickListItem[] NeedTickComponentList;//[Offset: 0x170, Size: 0x10]// 0x75a8586000
	byte RoleBits;//[Offset: 0x180, Size: 0x1]// 0x75a8586080

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 0x8]// 0x7612209870
	enum RoleType;//[Offset: 0x8, Size: 0x1]// 0x7612209770

--------------------------------
Class: PawnStateSwitchCDCfg.Object
	<int,float> PawnStateCDMap;//[Offset: 0x28, Size: 0x50]// 0x75a807b780
	<enum> ConfigStates;//[Offset: 0x78, Size: 0x50]// 0x75d119b900

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	TickControlComponent* TickControlComp;//[Offset: 0x690, Size: 0x8]// 0x75d0b4e580
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]// 0x75d0b4e600
	bool UseBlueprintSetMeshComponentUpdateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]// 0x75d0b4e680
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69e, Size: 0x1]// 0x75d0b4e700
	enum VehicleType;//[Offset: 0x69f, Size: 0x1]// 0x75d0b4e800
	MaterialInterface* BrokenMat;//[Offset: 0x6a0, Size: 0x8]// 0x75d0b4e880
	ParticleSystem* PS_Explosion;//[Offset: 0x6a8, Size: 0x28]// 0x75d0b4e900
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x6d0, Size: 0x28]// 0x75d0b4e980
	float HitEffectInterval;//[Offset: 0x6f8, Size: 0x4]// 0x75a812f5b0
	float HitSfxInterval;//[Offset: 0x6fc, Size: 0x4]// 0x75a812f620
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x700, Size: 0x50]// 0x75a80e5500
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x750, Size: 0x50]// 0x75a80e55c0
	<FName,ParticleSoftWrapperArray> PendantParticleCache;//[Offset: 0x7a0, Size: 0x50]// 0x75a80e5680
	Texture2D* VehicleIcon;//[Offset: 0x7f0, Size: 0x8]// 0x75d0b4eb80
	enum CameraDataType;//[Offset: 0x7f8, Size: 0x1]// 0x75d0b4ec80
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 0x1]// 0x75d0b4ed00
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fa, Size: 0x1]// 0x75d0b4ed80
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fb, Size: 0x1]// 0x75d0b4ee00
	float AdjustViewDistanceBaseDist;//[Offset: 0x7fc, Size: 0x4]// 0x75a812f7e0
	float AdjustViewDistanceBaseFactor;//[Offset: 0x800, Size: 0x4]// 0x75a812f850
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 0x1]// 0x75d0b4ee80
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x805, Size: 0x1]// 0x75d0b4ef00
	float ShowGrainyScreenMinDist;//[Offset: 0x808, Size: 0x4]// 0x75a812f8c0
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 0x1]// 0x75d0b4ef80
	float FuelConsumptionModifierBoost;//[Offset: 0x810, Size: 0x4]// 0x75a812f930
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 0x1]// 0x75d0b4f000
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x815, Size: 0x1]// 0x75d0b4f080
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x816, Size: 0x1]// 0x75d0b4f100
	float LanscapeCheckDistance;//[Offset: 0x818, Size: 0x4]// 0x75a812f9a0
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 0x1]// 0x75d0b4f180
	float LockZeroAngularDampingValue;//[Offset: 0x820, Size: 0x4]// 0x75a812fa10
	bool bProcessMultiRigidBodys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 0x1]// 0x75d0b4f200
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 0x1]// 0x75d0b4f280
	int MainMaterialIndex;//[Offset: 0x828, Size: 0x4]// 0x75a812fa80
	FText VehicleDisplayName;//[Offset: 0x830, Size: 0x18]// 0x75a812faf0
	Vector AirDropVelocity;//[Offset: 0x848, Size: 0xc]// 0x75d0b4f300
	StaticMesh* AirdropParachuteMesh;//[Offset: 0x858, Size: 0x28]// 0x75d0b4f380
	FName AirDropParachuteSocketName;//[Offset: 0x880, Size: 0x8]// 0x75a812fb60
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]// 0x75d0b4f400
	<int,float> ViewOffsetOfSpecialSeatsInFPP;//[Offset: 0x890, Size: 0x50]// 0x75a80e5740
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]// 0x75d0b4f480
	class MusicClientCompBase* MusicClientCompClass;//[Offset: 0x8e8, Size: 0x8]// 0x75d0b4f500
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]// 0x75d0b4f580
	float BackpackCapacity;//[Offset: 0x8f4, Size: 0x4]// 0x75a812fcb0
	FName BackpackName;//[Offset: 0x8f8, Size: 0x8]// 0x75a812fd20
	int[] marr_MidIndexes;//[Offset: 0x900, Size: 0x10]// 0x75d0b4f600
	float EnterVehicleCameraBlendTime;//[Offset: 0x910, Size: 0x4]// 0x75a812fe00
	float ExitVehicleCameraBlendTime;//[Offset: 0x914, Size: 0x4]// 0x75a812fe70
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x918, Size: 0x4]// 0x75a812fee0
	float voiceCheckCD;//[Offset: 0x91c, Size: 0x4]// 0x75a812ff50
	float voiceCheckShowCD;//[Offset: 0x920, Size: 0x4]// 0x75a812ffc0
	float VoiceCheckDis;//[Offset: 0x924, Size: 0x4]// 0x75a8130030
	float voiceUsingHornCheckDis;//[Offset: 0x928, Size: 0x4]// 0x75a81300a0
	float voiceCheckSpeed;//[Offset: 0x92c, Size: 0x4]// 0x75a8130110
	delegate OnSeatAttached;//[Offset: 0x958, Size: 0x10]// 0x75d0b4f680
	delegate OnSeatDetached;//[Offset: 0x968, Size: 0x10]// 0x75d0b4f700
	delegate OnSeatChange;//[Offset: 0x978, Size: 0x10]// 0x75d0b4f780
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 0x1]// 0x75d0b4f800
	float PrintTickLogInServerAuthorizeStateInterval;//[Offset: 0x98c, Size: 0x4]// 0x75a8130180
	float CurPrintTickLogInServerAuthorizeStateElapse;//[Offset: 0x990, Size: 0x4]// 0x75a81301f0
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 0x1]// 0x75d0b4f880
	float PassengerInjuryAvoidance;//[Offset: 0x998, Size: 0x4]// 0x75a8130260
	enum VehicleHealthState;//[Offset: 0x9bc, Size: 0x1]// 0x75d0b4f980
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bd, Size: 0x1]// 0x75d0b4fa00
	bool bIsEnableInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9be, Size: 0x1]// 0x75d0b4fa80
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]// 0x75d0b4fb00
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c1, Size: 0x1]// 0x75d0b4fb80
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c2, Size: 0x1]// 0x75d0b4fc00
	Vector BloodEffectScale;//[Offset: 0x9c4, Size: 0xc]// 0x75d0b4fc80
	SkeletalMeshComponent* Mesh;//[Offset: 0x9d0, Size: 0x8]// 0x75d0b4fd00
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x9d8, Size: 0x8]// 0x75d0b4fd80
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x9e0, Size: 0x8]// 0x75d0b4fe00
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x9e8, Size: 0x8]// 0x75d0b4fe80
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x9f0, Size: 0x8]// 0x75d0b4ff00
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x9f8, Size: 0x8]// 0x75d0b4ff80
	VehicleStatComponent* VehicleStatCollector;//[Offset: 0xa00, Size: 0x8]// 0x75a8108000
	VehicleComponent*[] VehicleComps;//[Offset: 0xa08, Size: 0x10]// 0x75a8108100
	bool mb_IsSkelTicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]// 0x75a8108180
	bool bNeedTickSkeletal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa19, Size: 0x1]// 0x75a8108200
	bool bProcessSkeletalTickUseShouldTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1a, Size: 0x1]// 0x75a8108280
	float NeedStopSkeletalElapse;//[Offset: 0xa1c, Size: 0x4]// 0x75a81302d0
	float StopSkeletalMaxElapse;//[Offset: 0xa20, Size: 0x4]// 0x75a8130340
	float mf_EnActiveTime;//[Offset: 0xa24, Size: 0x4]// 0x75a81303b0
	float EnActiveTimeThreshold;//[Offset: 0xa28, Size: 0x4]// 0x75a8130420
	bool mb_IsFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 0x1]// 0x75a8108300
	bool FreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 0x1]// 0x75a8108380
	bool FreezeDisableTickVehicleSuspension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa35, Size: 0x1]// 0x75a8108400
	bool mb_IsSafeSpawnedNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 0x1]// 0x75a8108480
	bool bCanVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3d, Size: 0x1]// 0x75a8108500
	bool bVehiclePushUpUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3e, Size: 0x1]// 0x75a8108580
	float VehiclePushUpZOffset;//[Offset: 0xa40, Size: 0x4]// 0x75a8130490
	bool ConditionTickVehicleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 0x1]// 0x75a8108600
	bool bNeedStopCurSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa45, Size: 0x1]// 0x75a8108680
	float VehicleHitThreshold;//[Offset: 0xa50, Size: 0x4]// 0x75a8130500
	float VehicleHitCharacterThreshold;//[Offset: 0xa54, Size: 0x4]// 0x75a8130570
	float AndroidGLES2TailLightScale;//[Offset: 0xa64, Size: 0x4]// 0x75a81305e0
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0xa70, Size: 0x10]// 0x75a8108780
	float lastForwardSpeed;//[Offset: 0xa98, Size: 0x4]// 0x75a8130650
	Transform LastVehicleTransformAtTickEnd;//[Offset: 0xaa0, Size: 0x30]// 0x75a8108800
	delegate OnClientEnterVehicleEvent;//[Offset: 0xad0, Size: 0x10]// 0x75a8108880
	delegate OnClientExitVehicleEvent;//[Offset: 0xae0, Size: 0x10]// 0x75a8108900
	delegate OnClientChangeSeatEvent;//[Offset: 0xaf0, Size: 0x10]// 0x75a8108980
	bool bEnableVehicleEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 0x1]// 0x75a8108a00
	float VehicleEnterDistance;//[Offset: 0xb04, Size: 0x4]// 0x75a81306c0
	float TickEnterSphereInterval;//[Offset: 0xb08, Size: 0x4]// 0x75a8130730
	float EnterSphereExtraHeight;//[Offset: 0xb0c, Size: 0x4]// 0x75a81307a0
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb19, Size: 0x1]// 0x75a8108a80
	float AsyncLoadResDistance;//[Offset: 0xb1c, Size: 0x4]// 0x75a8130810
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0xb20, Size: 0x4]// 0x75a8130880
	float TickEnterSphereVehicleBackpackInterval;//[Offset: 0xb2c, Size: 0x4]// 0x75a81308f0
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 0x1]// 0x75a8108b00
	float TickEnterCullWaterSphereInterval;//[Offset: 0xb38, Size: 0x4]// 0x75a8130960
	float EnterCullWaterDistanceSq;//[Offset: 0xb3c, Size: 0x4]// 0x75a81309d0
	Vector CullWaterCapsuleA;//[Offset: 0xb40, Size: 0xc]// 0x75a8108b80
	Vector CullWaterCapsuleB;//[Offset: 0xb4c, Size: 0xc]// 0x75a8108c00
	float CullWaterCapsuleRadius;//[Offset: 0xb58, Size: 0x4]// 0x75a8130a40
	float CullWaterCapsuleBlendWidth;//[Offset: 0xb5c, Size: 0x4]// 0x75a8130ab0
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 0x1]// 0x75a8108c80
	int ResetToLastTransformTlogID;//[Offset: 0xb6c, Size: 0x4]// 0x75a8130b20
	bool UseTraceUpCheckTerrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 0x1]// 0x75a8108d00
	Vector LastValidPosition;//[Offset: 0xb74, Size: 0xc]// 0x75a8108d80
	Rotator LastValidRotation;//[Offset: 0xb80, Size: 0xc]// 0x75a8108e00
	float CurPeneTerrainTotalTime;//[Offset: 0xb8c, Size: 0x4]// 0x75a8130b90
	bool ServerResetLinearVelocityWhenPeneTerrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]// 0x75a8108e80
	float PeneTerrainMaxTimeToResetPosition;//[Offset: 0xb94, Size: 0x4]// 0x75a8130c00
	float PeneTerrainProtectionInterval;//[Offset: 0xb98, Size: 0x4]// 0x75a8130c70
	float SaveValidTransformInterval;//[Offset: 0xb9c, Size: 0x4]// 0x75a8130ce0
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0xba0, Size: 0xc]// 0x75a8108f00
	Vector[] UnderTerrainTestPoints;//[Offset: 0xbb8, Size: 0x10]// 0x75a8109000
	bool UseTerrainTestPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8, Size: 0x1]// 0x75a8109080
	float PeneTerrainVelocityDamping;//[Offset: 0xbcc, Size: 0x4]// 0x75a8130d50
	int PeneTerrainDelayDisableCounter;//[Offset: 0xbd0, Size: 0x4]// 0x75a8130dc0
	int MaxPeneTerrainDelayCounter;//[Offset: 0xbd4, Size: 0x4]// 0x75a8130e30
	float SaveValidTransformInterval_2Stuck;//[Offset: 0xca0, Size: 0x4]// 0x75a8130ea0
	float SaveValidTransformIntervalDistSquared_2Stuck;//[Offset: 0xca4, Size: 0x4]// 0x75a8130f10
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcac, Size: 0x1]// 0x75a8109100
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0xcb0, Size: 0x8]// 0x75a8109180
	SoftObjectPath SoundCompClass;//[Offset: 0xcc0, Size: 0x18]// 0x75a8109200
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0xcd8, Size: 0x8]// 0x75a8109280
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0xce0, Size: 0x8]// 0x75a8109300
	AkAudioEvent* Sfx_Boost;//[Offset: 0xce8, Size: 0x8]// 0x75a8109380
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0xcf0, Size: 0x8]// 0x75a8109400
	AkAudioEvent* Sfx_Landing;//[Offset: 0xcf8, Size: 0x8]// 0x75a8109480
	AkAudioEvent* Sfx_Explosion;//[Offset: 0xd00, Size: 0x8]// 0x75a8109500
	AkAudioEvent* Sfx_HitBody;//[Offset: 0xd08, Size: 0x8]// 0x75a8109580
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0xd10, Size: 0x8]// 0x75a8109600
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0xd18, Size: 0x8]// 0x75a8109680
	AkAudioEvent* Sfx_Horn;//[Offset: 0xd20, Size: 0x8]// 0x75a8109700
	AkAudioEvent* Sfx_Throttle;//[Offset: 0xd28, Size: 0x8]// 0x75a8109780
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0xd30, Size: 0x8]// 0x75a8109800
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0xd38, Size: 0x8]// 0x75a8109880
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0xd40, Size: 0x8]// 0x75a8109900
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0xd48, Size: 0x8]// 0x75a8109980
	bool EnableAKIDNormalImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 0x1]// 0x75a8109a00
	float AKID_NormalImpulse_MaxAllow;//[Offset: 0xd54, Size: 0x4]// 0x75a8130f80
	float AKID_NormalImpulse_Max;//[Offset: 0xd58, Size: 0x4]// 0x75a8130ff0
	CarMusicConfigBlueprint[] BlueprintEditCarMusicConfigs;//[Offset: 0xd60, Size: 0x10]// 0x75a8109b00
	CarMusicConfig[] CarMusicConfigs_Table;//[Offset: 0xd70, Size: 0x10]// 0x75a8109c00
	CarMusicConfig[] OriginCarMusicConfigs_Table;//[Offset: 0xd80, Size: 0x10]// 0x75a8109d00
	CarMusicConfig[] CarMusicConfigs_Blueprint;//[Offset: 0xd90, Size: 0x10]// 0x75a8109e00
	<FString,CarMusicWrapper> LoadedMusic;//[Offset: 0xda0, Size: 0x50]// 0x75a80e5800
	bool bMusicLoops_UseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 0x1]// 0x75a8109f00
	float PlayMusicChance;//[Offset: 0xdf4, Size: 0x4]// 0x75a81310d0
	float TickCarMusicDistanceThresholdSquared;//[Offset: 0xdf8, Size: 0x4]// 0x75a8131140
	int CurMusicIndex;//[Offset: 0xdfc, Size: 0x4]// 0x75a81311b0
	float EngineSfxEndDelayTime;//[Offset: 0xe08, Size: 0x4]// 0x75a8131220
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0c, Size: 0x1]// 0x75a8109f80
	bool HornLoopStopPreEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0d, Size: 0x1]// 0x75a810a000
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0xe10, Size: 0x70]// 0x75a810a080
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0xe80, Size: 0x70]// 0x75a810a100
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0xef0, Size: 0x70]// 0x75a810a180
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0xf60, Size: 0x70]// 0x75a810a200
	AkComponent* SoundComponent;//[Offset: 0xfd0, Size: 0x8]// 0x75a810a280
	float RPMSfxScale;//[Offset: 0x100c, Size: 0x4]// 0x75a8131290
	float ThrottleSfxMinSpeed;//[Offset: 0x1010, Size: 0x4]// 0x75a8131300
	float TickVehicleAudioDistanceThreshold;//[Offset: 0x1014, Size: 0x4]// 0x75a8131370
	bool OpenTickAuidoCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1020, Size: 0x1]// 0x75a810a300
	enum[] DamageableGameObjectTypeList;//[Offset: 0x1040, Size: 0x10]// 0x75a810a480
	enum VehicleSyncTag;//[Offset: 0x1050, Size: 0x1]// 0x75a810a580
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x1054, Size: 0x4]// 0x75a81313e0
	VehicleSimViewData SimulateViewData;//[Offset: 0x1058, Size: 0x4]// 0x75a810a600
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0x105c, Size: 0x4]// 0x75a810a680
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0x1060, Size: 0x8]// 0x75a810a700
	delegate OnVehicleHealthStateChanged;//[Offset: 0x1068, Size: 0x10]// 0x75a810a780
	delegate UGC_OnVehicleHealthStateChangedDelegate;//[Offset: 0x1078, Size: 0x10]// 0x75a810a800
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1089, Size: 0x1]// 0x75a810a880
	float MinRideAngleDgree;//[Offset: 0x108c, Size: 0x4]// 0x75a8131450
	delegate OnVehicleRideCheckFail;//[Offset: 0x1098, Size: 0x10]// 0x75a810a900
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 0x1]// 0x75a810a980
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 0x1]// 0x75a810aa00
	float VehicleRadiusImulseScale;//[Offset: 0x10b4, Size: 0x4]// 0x75a81314c0
	float VehicleAdditionalBlowUp;//[Offset: 0x10b8, Size: 0x4]// 0x75a8131530
	bool bUpdateCollisionShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 0x1]// 0x75a810aa80
	float DistanceSqThreshold;//[Offset: 0x1114, Size: 0x4]// 0x75a81315a0
	float AngularThreshold;//[Offset: 0x1118, Size: 0x4]// 0x75a8131610
	VehicleBoneShapePair[] BoneShapePairs;//[Offset: 0x1120, Size: 0x10]// 0x75a810ab80
	bool bBuoyancyCompTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 0x1]// 0x75a810ac00
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 0x1]// 0x75a810ac80
	bool bResolvingStuckEnabled_DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1151, Size: 0x1]// 0x75a810ad00
	bool bAntiStuckBoxNoRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1152, Size: 0x1]// 0x75a810ad80
	float StuckMinImpulse;//[Offset: 0x1154, Size: 0x4]// 0x75a8131680
	float ContinuousStuckInterval;//[Offset: 0x1158, Size: 0x4]// 0x75a81316f0
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0x115c, Size: 0x4]// 0x75a8131760
	float StuckResovingTime;//[Offset: 0x1160, Size: 0x4]// 0x75a81317d0
	float ContinuousStuckTimer;//[Offset: 0x1168, Size: 0x4]// 0x75a8131840
	float StuckResovingTimer;//[Offset: 0x116c, Size: 0x4]// 0x75a81318b0
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 0x1]// 0x75a810ae00
	bool ServerPreventPenetrating_DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1189, Size: 0x1]// 0x75a810ae80
	bool bUseSphereSweepToPreventPenetrating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118a, Size: 0x1]// 0x75a810af00
	float[] SphereSweepToPreventPenetrating_SphereRadius;//[Offset: 0x1190, Size: 0x10]// 0x75a810af80
	Vector[] SphereSweepToPreventPenetrating_Offset;//[Offset: 0x11a0, Size: 0x10]// 0x75a810b080
	bool bUseBoxOverlapToPreventPenetrating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 0x1]// 0x75a810b100
	Vector[] BoxOverlapPreventPenetrating_BoxExtend;//[Offset: 0x11b8, Size: 0x10]// 0x75a810b200
	Vector[] BoxOverlapPreventPenetrating_Offset;//[Offset: 0x11c8, Size: 0x10]// 0x75a810b300
	bool bServerSeatPreventPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d8, Size: 0x1]// 0x75a810b380
	bool bShouldCheckSeatPreventPenetratingWhenEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d9, Size: 0x1]// 0x75a810b400
	bool bEnableCustomPreventCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11da, Size: 0x1]// 0x75a810b480
	Vector CustomPreventOffsetCenter;//[Offset: 0x11dc, Size: 0xc]// 0x75a810b500
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 0x1]// 0x75a810b580
	float bServerClearLinearVelocityDamping;//[Offset: 0x11ec, Size: 0x4]// 0x75a8131990
	bool bServerPreventPenetratingSaveMultiValidPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f0, Size: 0x1]// 0x75a810b600
	float ServerPreventPenetratingDistSquaredLimit;//[Offset: 0x11f4, Size: 0x4]// 0x75a8131a00
	int SavePreventPenetratingValidPositionLength;//[Offset: 0x11f8, Size: 0x4]// 0x75a8131a70
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1288, Size: 0x1]// 0x75a810b680
	float RespawnWaitingTime;//[Offset: 0x128c, Size: 0x4]// 0x75a8131ae0
	float RespawnTickInterval;//[Offset: 0x1290, Size: 0x4]// 0x75a8131b50
	Vector RespawnPositionSudoku;//[Offset: 0x1294, Size: 0xc]// 0x75a810b700
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a0, Size: 0x1]// 0x75a810b780
	float RemoveVehicleBecauseDestoryWaitingTime;//[Offset: 0x1320, Size: 0x4]// 0x75a8131bc0
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1338, Size: 0x1]// 0x75a810b800
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0x1340, Size: 0x10]// 0x75a810b900
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0x1350, Size: 0x10]// 0x75a810ba00
	bool bIncludeParentVacInstancedTasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 0x1]// 0x75a810ba80
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0x1368, Size: 0x10]// 0x75a810bb80
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a8, Size: 0x1]// 0x75a810bc00
	bool bForceServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a9, Size: 0x1]// 0x75a810bc80
	bool bDelayForceServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13aa, Size: 0x1]// 0x75a810bd00
	int DelayForceServerAuthorizeInterval;//[Offset: 0x13c8, Size: 0x4]// 0x75a8131c30
	bool bEnableServerAuthorizeInRoomOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13cc, Size: 0x1]// 0x75a810bd80
	int AirSwapServerThres;//[Offset: 0x13d0, Size: 0x4]// 0x75a8131ca0
	VehicleLagVerifyConfig ShootVictimVerifyConfig;//[Offset: 0x13dc, Size: 0x4]// 0x75a810be00
	<int,byte> TeammateNumInCar;//[Offset: 0x13f8, Size: 0x50]// 0x75a80e58c0
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0x1448, Size: 0x8]// 0x75a810bf00
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0x1450, Size: 0x8]// 0x75a810bf80
	SkeletalMesh* MeshAssetRef;//[Offset: 0x1458, Size: 0x28]// 0x75a810c000
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1480, Size: 0x1]// 0x75a810c080
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1481, Size: 0x1]// 0x75a810c100
	float fTlogHitTimeInter;//[Offset: 0x1484, Size: 0x4]// 0x75a8131d80
	float VehicleStateLogInterval;//[Offset: 0x148c, Size: 0x4]// 0x75a8131df0
	bool bLogVehicleStateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1490, Size: 0x1]// 0x75a810c180
	bool bLogVehicleStateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1491, Size: 0x1]// 0x75a810c200
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c8, Size: 0x1]// 0x75a810c280
	bool bForceDisableSkeletalMeshTickOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c9, Size: 0x1]// 0x75a810c300
	Vector SeekLockOffset;//[Offset: 0x14cc, Size: 0xc]// 0x75a810c380
	FName SeekLockSocket;//[Offset: 0x14d8, Size: 0x8]// 0x75a8131e60
	float ProduceSoundInterval;//[Offset: 0x14e0, Size: 0x4]// 0x75a8131ed0
	float LeaveVehicleVelocity;//[Offset: 0x14e4, Size: 0x4]// 0x75a8131f40
	delegate VehicleAnimEventDelegate;//[Offset: 0x14f0, Size: 0x10]// 0x75a810c400
	delegate VehicleExplosionDelegate;//[Offset: 0x1500, Size: 0x10]// 0x75a810c480
	delegate UGC_OnVehicleExplosionDelegate;//[Offset: 0x1510, Size: 0x10]// 0x75a810c500
	delegate ExitVehicleAnimEventDelegate;//[Offset: 0x1520, Size: 0x10]// 0x75a810c580
	BattleItemHandleBase* BindingHandle;//[Offset: 0x1530, Size: 0x8]// 0x75a810c600
	bool bServerEnterVehicleDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1538, Size: 0x1]// 0x75a810c680
	bool IsAvatarItemVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1539, Size: 0x1]// 0x75a810c700
	bool IsActivityItemVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153a, Size: 0x1]// 0x75a810c780
	FString ActivityItemId;//[Offset: 0x1540, Size: 0x10]// 0x75a8131fb0
	bool bUseExtraUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1550, Size: 0x1]// 0x75a810c800
	bool bUseExtraUIOnlyForDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1551, Size: 0x1]// 0x75a810c880
	FString ExtraUIPath;//[Offset: 0x1558, Size: 0x10]// 0x75a8132020
	bool bAlwaysForceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1568, Size: 0x1]// 0x75a810c900
	int UseSpecificOperationUIMode;//[Offset: 0x156c, Size: 0x4]// 0x75a8132090
	bool NeedCheckCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1570, Size: 0x1]// 0x75a810c980
	delegate OnEnterVehicle;//[Offset: 0x1578, Size: 0x10]// 0x75a810ca00
	STExtraPlayerController* BornLandVehicleCreator;//[Offset: 0x1598, Size: 0x8]// 0x75a810ca80
	delegate ServerEnterVehicleEventDelegate;//[Offset: 0x15a0, Size: 0x10]// 0x75a810cb00
	delegate ServerExitVehicleEventDelegate;//[Offset: 0x15b0, Size: 0x10]// 0x75a810cb80
	VehicleAvatarComponent* VehicleAvatarComponent;//[Offset: 0x15c8, Size: 0x8]// 0x75a810cc00
	delegate OnVehicleAvatarDataCopied;//[Offset: 0x15d0, Size: 0x10]// 0x75a810cc80
	delegate OnAvatarVehicleStateChanged;//[Offset: 0x15f0, Size: 0x10]// 0x75a810cd00
	enum OnVehSkirtPoseType;//[Offset: 0x1600, Size: 0x1]// 0x75a810ce00
	enum UAVOperateState;//[Offset: 0x1608, Size: 0x1]// 0x75a810cf00
	float SingleMoveRate;//[Offset: 0x160c, Size: 0x4]// 0x75a8132100
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0x1610, Size: 0x18]// 0x75a810cf80
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0x1628, Size: 0x18]// 0x75a810d000
	int CurrentVehicleStatesData;//[Offset: 0x1640, Size: 0x4]// 0x75a8132170
	bool EnableResetVehicleRootBodyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1658, Size: 0x1]// 0x75a810d080
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0x1660, Size: 0x10]// 0x75a810d180
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0x1670, Size: 0x10]// 0x75a810d280
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1680, Size: 0x1]// 0x75a810d300
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0x1688, Size: 0x8]// 0x75a81321e0
	float TombBoxTraceLength;//[Offset: 0x1690, Size: 0x4]// 0x75a8132250
	float PlayerOutAngleCosin;//[Offset: 0x1694, Size: 0x4]// 0x75a81322c0
	bool AddTagKeepMeshOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1698, Size: 0x1]// 0x75a810d380
	bool AddTagImpartedMovementBaseVelocityUpperLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1699, Size: 0x1]// 0x75a810d400
	bool EnableWalkableVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169a, Size: 0x1]// 0x75a810d480
	bool VehicleMeshWalkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169b, Size: 0x1]// 0x75a810d500
	bool LinkedMeshWalkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169c, Size: 0x1]// 0x75a810d580
	bool UseLocalPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169d, Size: 0x1]// 0x75a810d600
	bool MovebaseRelativeLocTrustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169e, Size: 0x1]// 0x75a810d680
	bool AddTagCharacterAddAllDependency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169f, Size: 0x1]// 0x75a810d700
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a0, Size: 0x1]// 0x75a810d780
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a1, Size: 0x1]// 0x75a810d800
	bool bEngineStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a2, Size: 0x1]// 0x75a810d880
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a3, Size: 0x1]// 0x75a810d900
	float CLientSleepVehicleTolerance;//[Offset: 0x16a4, Size: 0x4]// 0x75a8132330
	float StaticFixAngel;//[Offset: 0x16a8, Size: 0x4]// 0x75a81323a0
	float ClientAwakeVehicleTolerance;//[Offset: 0x16ac, Size: 0x4]// 0x75a8132410
	float SleepVehicleTickTime;//[Offset: 0x16b0, Size: 0x4]// 0x75a8132480
	float NetUpdateFrequencyInWaterDeactive;//[Offset: 0x16bc, Size: 0x4]// 0x75a81324f0
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x16c0, Size: 0x4]// 0x75a8132560
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x16c4, Size: 0x4]// 0x75a81325d0
	float DelaySetPhysActiveTimer;//[Offset: 0x16c8, Size: 0x4]// 0x75a8132640
	bool bDelaySetPhysActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16cc, Size: 0x1]// 0x75a810d980
	bool bEnableSafeSleepVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16cd, Size: 0x1]// 0x75a810da00
	bool UseSetPhysActiveTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d4, Size: 0x1]// 0x75a810da80
	bool EnableClientFallOutOfWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f0, Size: 0x1]// 0x75a810db00
	int VehicleSkinID;//[Offset: 0x16fc, Size: 0x4]// 0x75a81326b0
	uint32 LastReqChangeVehicleSkinPlayerKey;//[Offset: 0x1700, Size: 0x4]// 0x75a8132720
	float TickControlledFrequency;//[Offset: 0x1704, Size: 0x4]// 0x75a8132790
	bool bRuntimeEnableTickControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1708, Size: 0x1]// 0x75a810db80
	delegate OnVehicleEnterDelegate;//[Offset: 0x1710, Size: 0x10]// 0x75a810dc00
	delegate OnVehicleExitDelegate;//[Offset: 0x1720, Size: 0x10]// 0x75a810dc80
	delegate OnVehicleHPChangedDelegate;//[Offset: 0x1730, Size: 0x10]// 0x75a810dd00
	delegate OnVehicleWheelsHPChangedDelegate;//[Offset: 0x1740, Size: 0x10]// 0x75a810dd80
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0x1750, Size: 0x8]// 0x75a810de00
	VehiclePartDamageBox*[] DamageBoxes;//[Offset: 0x1758, Size: 0x10]// 0x75a810df00
	float TestRecord_RecordInterval;//[Offset: 0x1768, Size: 0x4]// 0x75a8132800
	float LastServerPeneTerrainProtectionRecordTime;//[Offset: 0x176c, Size: 0x4]// 0x75a8132870
	float ServerPeneTerrainProtectionBeginTime;//[Offset: 0x1770, Size: 0x4]// 0x75a81328e0
	int ServerPeneTerrainProtectionTLogCheckInterval;//[Offset: 0x1774, Size: 0x4]// 0x75a8132950
	int ServerPeneTerrainProtectionMaxCountDuringInterval;//[Offset: 0x1778, Size: 0x4]// 0x75a81329c0
	Vector LastReportPeneTerrainLoc;//[Offset: 0x177c, Size: 0xc]// 0x75a8110c80
	float ReportLocValidDistance;//[Offset: 0x1788, Size: 0x4]// 0x75a8132a30
	float LastServerPreventPenetratingRecordTime;//[Offset: 0x178c, Size: 0x4]// 0x75a8132aa0
	float ServerPreventPenetratingBeginTime;//[Offset: 0x1790, Size: 0x4]// 0x75a8132b10
	int ServerPreventPenetratingTLogCheckInterval;//[Offset: 0x1794, Size: 0x4]// 0x75a8132b80
	int ServerPreventPenetratingMaxCountDuringInterval;//[Offset: 0x1798, Size: 0x4]// 0x75a8132bf0
	Vector LastReportPreventPenetratingLoc;//[Offset: 0x179c, Size: 0xc]// 0x75a810df80
	uint32 AssignDriverPlayerKey;//[Offset: 0x17a8, Size: 0x4]// 0x75a8132c60
	int ChangeDriverSeatFailMsgID;//[Offset: 0x17ac, Size: 0x4]// 0x75a8132cd0
	bool VehicleCanPickUpConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b0, Size: 0x1]// 0x75a810e000
	int VehiclePickUpItemID;//[Offset: 0x17b4, Size: 0x4]// 0x75a8132d40
	bool UseCameraSteerInFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b8, Size: 0x1]// 0x75a810e080
	bool IgnorePlayerPunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b9, Size: 0x1]// 0x75a810e100
	CharacterMeshClipData[] CharacterMeshClipDatas;//[Offset: 0x17c0, Size: 0x10]// 0x75a810e200
	uint32 CharacterMeshClipDatas_CacheFrameNumber;//[Offset: 0x17d0, Size: 0x4]// 0x75a8132db0
	CharacterMeshClipData[] CharacterMeshClipDatas_FrameCache;//[Offset: 0x17d8, Size: 0x10]// 0x75a810e300
	int VehicleUID;//[Offset: 0x17e8, Size: 0x4]// 0x75a8132e20
	int VehicleConfigID;//[Offset: 0x17ec, Size: 0x4]// 0x75a8132e90
	bool bDriverAniTimerReferenceVehicleWheelAngel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f0, Size: 0x1]// 0x75a810e380
	bool UseNewHitEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f1, Size: 0x1]// 0x75a810e400
	bool ConsiderCharacterFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f2, Size: 0x1]// 0x75a810e480
	float NewHitDepthThreshold;//[Offset: 0x17f4, Size: 0x4]// 0x75a8132f00
	<Actor*,HitResult> NewEventHitRes;//[Offset: 0x17f8, Size: 0x50]// 0x75a80e5980
	Actor*[] AlreadyHitActors;//[Offset: 0x1848, Size: 0x10]// 0x75a810e680
	void VehicleJump();// 0x46ce0fc
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x46ce080
	void UpdateEffectParam(FName EffectName, FName ParamName, Vector Value);// 0x46cdf88
	void UGC_OnVehicleExitEvent(STExtraPlayerCharacter* Character);// 0xffffff8a17adf2b0
	void UGC_OnVehicleEnterEvent(bool IsSucc, STExtraPlayerCharacter* Character, enum SeatType);// 0xffffff8a17adf2b0
	bool TickRemoveVehicleBecauseDestory(float DeltaTime);// 0x46cdef8
	float TestTakeDamage(float Damage, out const STRadialDamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x46cdd50
	void StopFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon);// 0x46cdcd4
	void StopAutoDriving();// 0x46cdcc0
	void StartFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon, STExtraPlayerCharacter* Character);// 0x46cdc0c
	void StartAirDrop();// 0x46cdbf8
	void SpawnUnattachedEffectAsync(FName EffectName);// 0x46cdb7c
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x46cda90
	void SetVehicleWeaponTarget(VehicleShootWeapon* VehicleWeapon, out const Vector TargetLoc);// 0x46cd9c4
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x46cd8c0
	void SetVehicleHPMax(float MaxHP);// 0x46cd844
	void SetVehicleHP(float HP);// 0x46cd7c8
	void SetVehicleCustomName(FString InCustomVehicleName, const BattleItemHandleBase* InVehicleHandle);// 0x46cd6fc
	void SetVehicleCustomLicensePlateNameAndNum(FString InCustomVehicleLicensePlateName, FString InCustomVehicleLicensePlateNum, const BattleItemHandleBase* InPendantHandleFront, const int InEVehicleAvatarSlot);// 0x46cd5ac
	void SetUsingHorn(bool bUse);// 0x46cd528
	void SetUAVOperateState(enum NewState);// 0x46cd4ac
	void SetSafeSpawn(bool ab_IsSafeSpawn);// 0x46cd420
	void SetRideCheck(bool bEnabled);// 0x46cd39c
	void SetPhysActiveTimerFunc();// 0x46cd388
	void SetPhysActive(bool bActive, float Delay);// 0x46cd2c0
	void SetLastReqChangeVehicleSkinPlayerKey(int64 PlayerKey);// 0x46cd244
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x46cd1cc
	void SetHandBrake(float Rate);// 0x46cd148
	void SetFrozenStaticState(bool State);// 0x46cd0c4
	void SetEngineStaticState(bool State);// 0x46cd040
	void SetEnableVehicleEnter(bool bEnable);// 0x46ccfbc
	void SetDontDamage(bool bEnable);// 0x46ccf38
	void SetDontConsumeFuel(bool bEnable);// 0x46cceb4
	void SetBoosting(bool bEnalbed);// 0x46cce28
	void SetAvatarMID(MaterialInterface* MatDMI);// 0xffffff8a17adf2b0
	void SetAirControlF(float Rate);// 0x46ccda4
	void SetAirControlB(float Rate);// 0x46ccd20
	void ServerStopFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon);// 0x46ccc70
	void ServerSetVehicleWeaponTarget(VehicleShootWeapon* VehicleWeapon, const Vector TargetLoc);// 0x46ccb7c
	void ServerSetUsingHorn(bool bUse);// 0x46ccab8
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x46cc9f4
	void ServerSetEnableInputs(bool bEnable);// 0x46cc970
	void ServerSetDisableExitVehicle(bool bEnable);// 0x46cc8ec
	void ServerSetBoosting(bool bEnalbed);// 0x46cc828
	void ServerSetAirControlF(float Rate);// 0x46cc778
	void ServerSetAirControlB(float Rate);// 0x46cc6c8
	void ServerResetToLastValidTransform(int64 PlayerKey);// 0x46cc618
	void ServerMoveTo(bool bSetLocation, Vector NewLocation, bool bSetRotation, Rotator NewRotation);// 0x46cc4c8
	void ServerDetachEveryoneFromSeat();// 0x46cc4ac
	void ServerClearSpeed();// 0x46cc498
	void SendVehicleInUnderWaterChangedTimeToServer();// 0x46cc438
	void SendVehicleInAirChangedTimeToServer();// 0x46cc3d8
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x46cc328
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x46cc30c
	void SafeSleepVehicle();// 0x46cc2f8
	void RPC_Client_SeekLockRocketExploded();// 0x46cc2dc
	bool ResetToLastValidTransform_2Stuck();// 0x46cc2a4
	void ResetJoystickMove();// 0x46cc290
	void RemoveAntiStuckBox();// 0x46cc27c
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x46cc200
	void RecordValidTransform();// 0x46cc1ec
	void ProcessServerPreventPenetratingTLog(Vector curVehicleCenter);// 0x46cc164
	void ProcessServerPeneTerrainProtectionTLog();// 0x46cc148
	void PrintTickLogInServerAuthorizeState(float DeltaTime);// 0x46cc0cc
	void PrintStats();// 0x46cc0b0
	void PostLoadMesh();// 0x46cc094
	void PostBeginPlay();// 0xffffff8a17adf2b0
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x46cc018
	void PlayCarMusicByIndex(int ID);// 0x46cbf68
	float OverrideDamageValueWhenTakeDamage(float Damage, int DamageType, Controller* EventInstigator, Actor* DamageCauser);// 0x46cbe24
	void OnUpdateEffects();// 0xffffff8a17adf2b0
	void OnSetTailLightValue(float LightValue);// 0xffffff8a17adf2b0
	void OnRep_VehicleUID();// 0x46cbe10
	void OnRep_VehicleSyncFlag();// 0x46cbdfc
	void OnRep_VehicleSoundComp();// 0x46cbde8
	void OnRep_VehicleHealthState();// 0x46cbdd4
	void OnRep_SimulateViewData();// 0x46cbdc0
	void OnRep_SimulateFreeCameraViewData();// 0x46cbdac
	void OnRep_ServerLastReplicatedServer();// 0x46cbd98
	void OnRep_LastReqChangeVehicleSkinPlayerKey();// 0x46cbd84
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x46cbd70
	void OnRep_IsEngineStarted();// 0x46cbd5c
	void OnRep_IsBoosting();// 0x46cbd48
	void OnRep_IsAirdroppingVehicle();// 0x46cbd34
	void OnRep_FrozenStatic();// 0x46cbd20
	void OnRep_EngineStatic();// 0x46cbd04
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x46cbc88
	void OnOldHitEvent(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x46cbb30
	void OnNewHitEvent(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x46cb9d8
	void OnFreezeVehicleEvent();// 0x46cb9bc
	void OnEntirelyUnderWaterChanged(bool IsUnderWater);// 0xffffff8a17adf2b0
	void OnEngineStop();// 0xffffff8a17adf2b0
	void OnEngineStart();// 0xffffff8a17adf2b0
	void OnDrawDebugInfo();// 0xffffff8a17adf2b0
	void OnClassLoad_VehicleSoundComp(SoftObjectPath LoadClass);// 0x46cb8dc
	void OnBoostingChanged();// 0xffffff8a17adf2b0
	void OnAnimListLoaded();// 0x46cb8c0
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x46cb7c4
	void MoveUp(float Rate);// 0x46cb740
	void MoveRight(float Rate);// 0x46cb6bc
	void MoveForward(float Rate);// 0x46cb638
	void LoadPendantParticle();// 0x46cb624
	void K2_SetLinkedMeshConstraint(bool IsContraint);// 0xffffff8a17adf2b0
	SkeletalMeshComponent* K2_GetLinkedComp();// 0xffffff8a17adf2b0
	bool IsUsingFPPModel();// 0x46cb5ec
	bool IsUCAV();// 0x46cb5c8
	bool IsUAV();// 0x46cb580
	bool IsSnowboard();// 0x46cb548
	bool IsPassengerShouldPossesVehicle();// 0x46cb508
	bool IsNotInWater();// 0x46cb4c8
	bool IsMotorbike();// 0x46cb490
	bool IsLionDance();// 0x46cb46c
	bool IsInMidAir();// 0x46cb42c
	bool IsHorseVehicle();// 0x46cb408
	bool IsHelicopter();// 0x46cb3d0
	bool IsEntirelyUnderWater();// 0x46cb398
	bool IsEnableInputs();// 0x46cb360
	bool IsElectronic_Failure();// 0x46cb328
	bool IsDisableExitVehicle();// 0x46cb2f0
	bool IsCharacterMovetoVehicleSeatStraight(STExtraPlayerCharacter* InCharacter, int SeatIdx);// 0x46cb21c
	bool IsBattleship();// 0x46cb1f8
	bool IsAutoDriving();// 0x46cb1c0
	bool IsArmedVehicle();// 0x46cb188
	bool IsAmphibiousVehicle();// 0x46cb150
	bool IsAirVehicle();// 0x46cb110
	bool IsActiveEffect(FName EffectName);// 0x46cb080
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse, bool SpawnByRegonActive);// 0x46caf28
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x46cae60
	bool HasAutoDriveTarget();// 0x46cae28
	void HandleSeekLockRocketExplodedOnServer();// 0x46cae0c
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x46cad88
	void HandleOnVehicleAvatarDataCopied();// 0x46cad74
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x46cac78
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x46cab04
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x46caa08
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x46ca86c
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x46ca7e8
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x46ca764
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x46ca6e8
	void GMTestServerPreventPenetrating(Vector CheatLoc, Vector CheatCenter);// 0x46ca620
	void GMTestPeneTerrainProtectionAndPreventPenetrating();// 0x46ca60c
	void GMTestPeneTerrainProtection(Vector CheatLoc, Vector CheatCenter, Vector CheatValidPos);// 0x46ca4f8
	void GMTestAddImpluse(Vector Impluse);// 0x46ca478
	void GMTestAddForce(Vector Force);// 0x46ca3f8
	int GetWheelNum();// 0x46ca3c4
	float GetWheelHP(int Index);// 0x46ca338
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x46ca274
	int GetVehicleOperationUIMode(int GUIType);// 0x46ca1e4
	float GetVehicleMaxVelocity();// 0x46ca1b0
	float GetVehicleHPMax();// 0x46ca17c
	float GetVehicleHP();// 0x46ca148
	VehicleEnjoyVoiceComponent* GetVehicleEnjoyVoice();// 0xffffff8a17adf2b0
	Vector GetVehicleCenter();// 0x46ca110
	enum GetVehicleBaseType();// 0x46ca0dc
	VehicleAvatarComponent* GetVehicleAvatar();// 0x46ca0a8
	VehicleAIComponent* GetVehicleAIComponent();// 0x46ca08c
	Vector GetServerPreventCenter();// 0x46ca054
	bool GetSeatState(int Index);// 0x46c9fc4
	int GetSeatNum();// 0x46c9f90
	Vector GetRotationInputDir();// 0x46c9f50
	float GetMoveRightRate();// 0x46c9f34
	float GetMoveForwardRate();// 0x46c9f18
	BattleItemHandleBase* GetItemHandle();// 0x46c9efc
	bool GetIsSkelTicking();// 0x46c9ee0
	float GetHandBrakeRate();// 0x46c9ec4
	float GetForwardSpeed();// 0x46c9e88
	float GetFinalMoveRightRate();// 0x46c9e6c
	float GetFinalMoveForwardRate();// 0x46c9e50
	float GetEnActiveTime();// 0x46c9e34
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x46c9e18
	ParticleSystemComponent* GetEffectComp(FName EffectName, int Index);// 0x46c9d50
	float GetDriverAniTimer();// 0x46c9d14
	STExtraPlayerCharacter* GetDriver();// 0x46c9ce0
	float GetDistanceToController(STExtraPlayerController* PC, bool Squared);// 0x46c9c10
	float GetDistanceChangeInFrame();// 0x46c9bdc
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x46c9a48
	CharacterMeshClipData[] GetCharacterMeshClipDatas();// 0x46c99c8
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x46c9934
	float GetAirControlF();// 0x46c9900
	float GetAirControlB();// 0x46c98cc
	bool ForceTickServerPreventPenetrating(bool bQueryOnly);// 0x46c9834
	void ExitFPPVehicle();// 0x46c9820
	void EnterFPPVehicle();// 0x46c980c
	void DrawDebugPostReceivePhysicState();// 0x46c97f8
	void DestroyVehicleSelf();// 0x46c97e4
	void DestroyAndRespawnSelf();// 0x46c97d0
	void DelayForceServerAuthorizeTimerFunc();// 0x46c97bc
	void DeactiveEffect(FName EffectName);// 0x46c9740
	void CreateAntiStuckBox();// 0x46c972c
	void ClearInputs();// 0x46c9718
	bool CheckVehicleCanPickUp();// 0x46c96e0
	bool CheckValidDisToMainController(float ThresholdDis);// 0x46c9650
	bool CheckNeedVehicleTick(float DeltaTime);// 0x46c95c0
	bool CheckHaveSpecialAttachActor();// 0x46c9580
	bool CanVehicleJump();// 0x46c9540
	bool CanUseHorn();// 0x46c9508
	bool CanLeaveVehicle();// 0x46c94c8
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x46c9430
	bool CanAutoDrivingNoDriver();// 0x46c93f8
	bool CanAutoDriving();// 0x46c93c0
	void CallPlayCarMusicByIndex(int ID);// 0x46c9344
	enum CallingByPlayer(STExtraCharacter* Player);// 0x46c92b0
	void BroadCastEnterVehicleEvent(bool IsSucc);// 0x46c922c
	void BroadcastClientVehicleExplosionEffect();// 0x46c9210
	bool BPGetIsEngineStarted();// 0x46c91d0
	bool BPGetIsBoosting();// 0x46c9190
	void AutoLoadEffect();// 0x46c917c
	bool AssignVehicleDriver(int DriverPlayerKey);// 0x46c90ec
	void ApplayAvatarCustomData(BattleItemHandleBase* ItemHandle);// 0x46c9068
	void AfterTick(float DeltaTime);// 0xffffff8a17adf2b0
	void AfterBeginPlay();// 0xffffff8a17adf2b0
	void ActiveEffectAsync(FName EffectName);// 0x46c8fec
	void ActiveEffect(FName EffectName);// 0x46c8f70

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 0x10]// 0x76121571f0

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 0x28]// 0x7612157670
	Vector Location;//[Offset: 0x28, Size: 0xc]// 0x76121575f0
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]// 0x7612157570
	Vector Scale;//[Offset: 0x40, Size: 0xc]// 0x76121574f0
	FName AttachSocketName;//[Offset: 0x50, Size: 0x8]// 0x7612157480
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]// 0x7612157400
	FName EffectParamName;//[Offset: 0x60, Size: 0x8]// 0x7612157390

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 0x10]// 0x7612202160

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 0x8]// 0x7612202300

--------------------------------
Class: MusicClientCompBase.ActorComponent.Object
	byte MusicType;//[Offset: 0x118, Size: 0x1]// 0x75b4d45380
	MusicGamePlayInfo MusicGamePlayInfo;//[Offset: 0x11c, Size: 0x8]// 0x75b4d45400
	<byte,MusicConfig> MusicConfig;//[Offset: 0x1e8, Size: 0x50]// 0x75c9889980
	UAEDataTable* MusicGameTable;//[Offset: 0x238, Size: 0x8]// 0x75b4d45580
	int BaseKind;//[Offset: 0x240, Size: 0x4]// 0x75b4da7140
	float HitBiasTime;//[Offset: 0x244, Size: 0x4]// 0x75b4da71b0
	float ShowBiasTime;//[Offset: 0x248, Size: 0x4]// 0x75b4da7220
	float AnimBiasTime;//[Offset: 0x24c, Size: 0x4]// 0x75b4da7290
	float BeatEffectDelayTime;//[Offset: 0x250, Size: 0x4]// 0x75b4da7300
	float AwardTime;//[Offset: 0x254, Size: 0x4]// 0x75b4da7370
	bool SimulateComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]// 0x75b4d45600
	FString SongBankName;//[Offset: 0x260, Size: 0x10]// 0x75b4da73e0
	FString SongStartEventName;//[Offset: 0x270, Size: 0x10]// 0x75b4da7450
	MusicServerCompBase* MusicServer;//[Offset: 0x2d0, Size: 0x8]// 0x75b4d45680
	CustomSocketObject* sockobj;//[Offset: 0x2f8, Size: 0x8]// 0x75b4d45700
	bool SwitchGodPlay();// 0x442ef04
	void ServerStartMusic();// 0x442eea4
	static void ReconnectRecoverSkill(STExtraPlayerController* PC);// 0x442ee30
	void OnRep_MusicType();// 0x442ee14
	void OnRep_MusicGamePlayInfo();// 0x442edf8
	void OnPlayerHealthStatusChangedDelegate(byte PrevStatus, byte NewStatus);// 0x442ed40
	void OnLoadFinished();// 0x442ed24
	static bool IsInMusicGame(STExtraPlayerController* PC);// 0x442eca4
	void ClientStopPlayMusic();// 0x442ec88
	bool CanStartMusic();// 0x442ec48
	void BeatNote(int trackBit, bool byPlayer);// 0x442eb88

--------------------------------
Class: MusicGamePlayInfo
	float WorldTimeStarted;//[Offset: 0x0, Size: 0x4]// 0x76121ae0f0
	int SongPlayIndex;//[Offset: 0x4, Size: 0x4]// 0x76121ae080

--------------------------------
Class: MusicConfig
	int[] SongIDList;//[Offset: 0x0, Size: 0x10]// 0x76121ae3c0
	ChildPendingActiveObject uisock;//[Offset: 0x10, Size: 0x78]// 0x76121ae340

--------------------------------
Class: ChildPendingActiveObject
	class UAEUserWidget* ChildWidgetClass;//[Offset: 0x0, Size: 0x28]// 0x7612176ab0
	AnchorData Anchor;//[Offset: 0x28, Size: 0x28]// 0x7612176a30
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x76121769b0
	int ZOrder;//[Offset: 0x54, Size: 0x4]// 0x7612176940
	FString MountName;//[Offset: 0x58, Size: 0x10]// 0x76121768d0
	FString MountOuterName;//[Offset: 0x68, Size: 0x10]// 0x7612176860

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]// 0x7612024c60
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]// 0x7612024a40
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]// 0x76120249c0

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FName,Property*> nameToProperty;//[Offset: 0x90, Size: 0x50]// 0x75a828b100
	bool UsedLazyLoadTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]// 0x75a824fa80
	<FString,Property*> DataTableNameProperty;//[Offset: 0x198, Size: 0x50]// 0x75a828b1c0

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]// 0x75bca73780

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: MusicServerCompBase.ActorComponent.Object
	MusicClientCompBase*[] SeatList;//[Offset: 0x118, Size: 0x10]// 0x75b4d45c80
	class Object* ClientComponentClass;//[Offset: 0x130, Size: 0x8]// 0x75b4d45d00
	float StartServerTime;//[Offset: 0x138, Size: 0x4]// 0x75b4da75a0

--------------------------------
Class: CustomSocketObject.Object
	UAEUserWidget* CustomUserWidget;//[Offset: 0xa8, Size: 0x8]// 0x75b4ddd900
	UAEPlayerController* PlayerController;//[Offset: 0xc8, Size: 0x8]// 0x75b4ddd980
	void OnLoadFinished(UAEPlayerController* PC);// 0x429b1bc
	void MountWidget();// 0x429b1a8
	UAEUserWidget* GetActivedSocket();// 0x429b174
	void ActivateSocket(UAEPlayerController* PC, delegate DelegateToCall);// 0x429b09c

--------------------------------
Class: UAEPlayerController.PlayerController.Controller.Actor.Object
	float DelayNotifyBattleBeginPlay;//[Offset: 0x88c, Size: 0x4]// 0x7611dd11e0
	TimerHandle TimerHandle_DelayedNotifyBattleBeginPlay;//[Offset: 0x890, Size: 0x8]// 0x7611dd1160
	FName PlayerType;//[Offset: 0x8c8, Size: 0x8]// 0x7611dd10f0
	FString PlayerName;//[Offset: 0x8d0, Size: 0x10]// 0x7611dd1080
	uint32 PlayerKey;//[Offset: 0x8e0, Size: 0x4]// 0x7611dd1010
	FString PlayerUID;//[Offset: 0x8e8, Size: 0x10]// 0x7611dd0fa0
	FString PlayerOpenID;//[Offset: 0x908, Size: 0x10]// 0x7611dd0f30
	int TeamID;//[Offset: 0x918, Size: 0x4]// 0x7611dd0ec0
	byte CachedCampID;//[Offset: 0x91c, Size: 0x1]// 0x7611dd0e40
	int CachedCampPlayerIndex;//[Offset: 0x920, Size: 0x4]// 0x7611dd0dd0
	Vector CharacterLocation;//[Offset: 0x924, Size: 0xc]// 0x7611dd0d50
	int RoomMode;//[Offset: 0x930, Size: 0x4]// 0x7611dd0ce0
	WeatherInfo WeatherInfo;//[Offset: 0x938, Size: 0x18]// 0x7611dd0a70
	int PlayerStartID;//[Offset: 0x950, Size: 0x4]// 0x7611dd0a00
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 0x1]// 0x7611dd0980
	PlayerNetStats NetStats;//[Offset: 0x958, Size: 0x88]// 0x7611dd0390
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]// 0x7611dd0310
	Character* MainCharacter;//[Offset: 0x9e8, Size: 0x8]// 0x7611dd0290
	float ClientSendDSPrintLogCDConfig;//[Offset: 0x9f4, Size: 0x4]// 0x7611dd0220
	DynaConfigRep PersonalDynaConfigRepData;//[Offset: 0xa00, Size: 0x18]// 0x7611dcff80
	delegate OnDSSendMessageDelegate;//[Offset: 0xa18, Size: 0x10]// 0x7611dcff00
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]// 0x7611dcfe80
	bool bIsEnableUGCGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa29, Size: 0x1]// 0x7611dcfe00
	bool bUGCGMEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2a, Size: 0x1]// 0x7611dcfd80
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 0x1]// 0x7611dcfd00
	Actor* CastUIMsgTempActorParam;//[Offset: 0xa38, Size: 0x8]// 0x7611dcfc80
	enum DefaultCharacterGender;//[Offset: 0xa40, Size: 0x1]// 0x7611dcfb20
	GameModePlayerItem[] InitialItemList;//[Offset: 0xa48, Size: 0x10]// 0x7611dcfa20
	int playerFaceHandleID;//[Offset: 0xa58, Size: 0x4]// 0x7611dcf9b0
	SuitSkinData SuitSkinData;//[Offset: 0xa60, Size: 0x30]// 0x7611dcf930
	int[] ConfessionMessage;//[Offset: 0xa90, Size: 0x10]// 0x7611dcf840
	WeaponModData[] WeaponModDatas;//[Offset: 0xaa0, Size: 0x10]// 0x7611dcf740
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0xab0, Size: 0x10]// 0x7611dcf640
	GameModePlayer_WearInfo InitialWearInfo;//[Offset: 0xac0, Size: 0xc0]// 0x7611dcf5c0
	<int,int> WeaponAvatarItemList;//[Offset: 0xb80, Size: 0x50]// 0x7611dcf430
	VehicleAvatarItemPairData[] RepWeaponAvatarItemArray;//[Offset: 0xbd0, Size: 0x10]// 0x7611dcf330
	<int,GameModePlayerItemList> WeaponAttachmentItemList;//[Offset: 0xbe0, Size: 0x50]// 0x7611dceff0
	<int,VehicleAvatarSkinItem> VehicleAvatarItemList;//[Offset: 0xc30, Size: 0x50]// 0x7611dcedb0
	bool HasVehicleOnBornLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 0x1]// 0x7611dced30
	bool bHasVehicleDazzlingAppearanceAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc81, Size: 0x1]// 0x7611dcecb0
	bool bHasAlreadyCallVehicleOnBornLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc82, Size: 0x1]// 0x7611dcec30
	VehicleAvatarItemPairData[] RepVehicleAvatarItemList;//[Offset: 0xc88, Size: 0x10]// 0x7611dce9b0
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xc98, Size: 0x10]// 0x7611dce8b0
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0xca8, Size: 0x10]// 0x7611dce7b0
	int LobbyShowWeaponID;//[Offset: 0xcb8, Size: 0x4]// 0x7611dce740
	GameModePlayerDecalItem[] InitialDecalItemList;//[Offset: 0xcc0, Size: 0x10]// 0x7611dce640
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xcd0, Size: 0x10]// 0x7611dce540
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xce0, Size: 0x10]// 0x7611dce440
	int AnchorPlatResID;//[Offset: 0xcf0, Size: 0x4]// 0x7611dce3d0
	int AnchorPlatColorID;//[Offset: 0xcf4, Size: 0x4]// 0x7611dce360
	int PassCardBuyType;//[Offset: 0xcf8, Size: 0x4]// 0x7611dce2f0
	int PassCardBuyLevel;//[Offset: 0xcfc, Size: 0x4]// 0x7611dce280
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 0x1]// 0x7611dce200
	int LikeLevel;//[Offset: 0xd04, Size: 0x4]// 0x7611dce190
	CommonFlagData[] CommonFlagData;//[Offset: 0xd08, Size: 0x10]// 0x7611dce090
	int InitDropId;//[Offset: 0xd1c, Size: 0x4]// 0x7611dce020
	int SeasonWeekIndex;//[Offset: 0xd20, Size: 0x4]// 0x7611dcdfb0
	int JoinSourceType;//[Offset: 0xd24, Size: 0x4]// 0x7611dcdf40
	uint64[] LobbyTeammates;//[Offset: 0xd28, Size: 0x10]// 0x7611dcde50
	delegate OnHasBegunPlay;//[Offset: 0xd58, Size: 0x10]// 0x7611dcddd0
	Pawn* DefaultControlPawn;//[Offset: 0xd68, Size: 0x8]// 0x7611dcdd50
	int64 LastGameResultTime;//[Offset: 0xd70, Size: 0x8]// 0x7611dcdce0
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 0x1]// 0x7611dcdc60
	bool bIsObserverInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 0x1]// 0x7611dcdbe0
	bool bIsObserverHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7a, Size: 0x1]// 0x7611dcdb60
	int OBGM;//[Offset: 0xd7c, Size: 0x4]// 0x7611dcdaf0
	bool bIsGMWatcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 0x1]// 0x7611dcda70
	bool bEagleWatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd81, Size: 0x1]// 0x7611dcd9f0
	delegate OnRepIsEagleWatchDelegate;//[Offset: 0xd88, Size: 0x10]// 0x7611dcd970
	FString WatchPlayerUID;//[Offset: 0xd98, Size: 0x10]// 0x7611dcd900
	delegate OnRepWatchPlayerUIDDelegate;//[Offset: 0xda8, Size: 0x10]// 0x7611dcd880
	delegate OnEagleWatchEndDelegate;//[Offset: 0xdb8, Size: 0x10]// 0x7611dcd800
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 0x1]// 0x7611dcd780
	bool bNeedCloseLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc9, Size: 0x1]// 0x7611dcd700
	float CloseLoadingSecond;//[Offset: 0xdcc, Size: 0x4]// 0x7611dcd690
	bool bIsAliveSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd0, Size: 0x1]// 0x7611dcd610
	delegate OnRepIsSpectatingDelegate;//[Offset: 0xdd8, Size: 0x10]// 0x7611dcd590
	uint32 WatchPlayerKey;//[Offset: 0xde8, Size: 0x4]// 0x7611dcd520
	delegate OnRepWatchPlayerKey;//[Offset: 0xdf0, Size: 0x10]// 0x7611dcd4a0
	int ObserverEnemyDistSquare;//[Offset: 0xe00, Size: 0x4]// 0x7611dcd430
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe06, Size: 0x1]// 0x7611dcd3b0
	bool bCanBeLikedByOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 0x1]// 0x7611dcd330
	bool bCanBeLikedByFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 0x1]// 0x7611dcd2b0
	bool bCanBeLikedByTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0a, Size: 0x1]// 0x7611dcd230
	bool bIsSpectatingSameCamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 0x1]// 0x7611dcd1b0
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2c, Size: 0x1]// 0x7611dcd130
	delegate OnInitInGameUICompleted;//[Offset: 0xe38, Size: 0x10]// 0x7611dcd0b0
	UAEUserWidget* InGameUIRoot;//[Offset: 0xea0, Size: 0x8]// 0x7611dcd030
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xead, Size: 0x1]// 0x7611dccfb0
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeae, Size: 0x1]// 0x7611dccf30
	float ViewTargetCriticalLevelsLoadThreshold;//[Offset: 0xeb8, Size: 0x4]// 0x7611dccec0
	delegate PlayerControllerLostDelegate;//[Offset: 0xec8, Size: 0x10]// 0x7611dcce40
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xed8, Size: 0x10]// 0x7611dccdc0
	delegate ClientPlayerControllerRecoveredDelegate;//[Offset: 0xee8, Size: 0x10]// 0x7611dccd40
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xf08, Size: 0x10]// 0x7611dcccc0
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xf18, Size: 0x10]// 0x7611dccc40
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xf28, Size: 0x10]// 0x7611dccbc0
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xf38, Size: 0x10]// 0x7611dccb40
	int[] AvatarEditorTestList;//[Offset: 0xf50, Size: 0x10]// 0x7611dcca50
	bool bDSNeedTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 0x1]// 0x7611dcc9d0
	AllPlayerFixInfo ClientAllPlayerFixInfo;//[Offset: 0xf68, Size: 0x60]// 0x7611dcc400
	FString MedalClubID;//[Offset: 0xfc8, Size: 0x10]// 0x7611dcc390
	int MedalClubLevel;//[Offset: 0xfd8, Size: 0x4]// 0x7611dcc320
	float NegotiateDHKeyTimer;//[Offset: 0x1008, Size: 0x4]// 0x7611dcc2b0
	float NegotiateDHKeyTimeout;//[Offset: 0x100c, Size: 0x4]// 0x7611dcc240
	int DumpPlayerReplicationDetails_MaxCount;//[Offset: 0x1010, Size: 0x4]// 0x7611dcc1d0
	int DumpPlayerReplicationDetails_RatioOfMax;//[Offset: 0x1014, Size: 0x4]// 0x7611dcc160
	int DumpPlayerReplicationDetails_Threshold;//[Offset: 0x1018, Size: 0x4]// 0x7611dcc0f0
	int DumpPlayerReplicationDetails_TriggerFrames;//[Offset: 0x101c, Size: 0x4]// 0x7611dcc080
	float DumpPlayerParachuting_Interval;//[Offset: 0x1028, Size: 0x4]// 0x7611dcc010
	int DumpPlayerParachuting_TriggerFrames;//[Offset: 0x102c, Size: 0x4]// 0x7611dcbfa0
	int LastRetCodeZeroAndLenZeroThreshold;//[Offset: 0x1034, Size: 0x4]// 0x7611dcbf30
	int ContinueRetCodeZeroAndLenZeroThreshold;//[Offset: 0x1038, Size: 0x4]// 0x7611dcbec0
	bool ReportedLongTimeNoReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 0x1]// 0x7611dcbe40
	int LongTimeNoReceivedCount;//[Offset: 0x1040, Size: 0x4]// 0x7611dcbdd0
	int PathNameMappingConfig;//[Offset: 0x1044, Size: 0x4]// 0x7611dcbd60
	void UpdatePlayerOBBattleInfo(const FString UIDString, out const PlayerOBBattleInfo NewBattleInfo);// 0x4ed8c80
	void UnloadAllLandscape();// 0x4ed8c6c
	void TestShowLiveTime();// 0x4ed8c58
	void TestRemoveMapItem(int Type, int ID);// 0x4ed8ba4
	void TestRemoveLiveMapItem(int ID);// 0x4ed8b28
	void TestPushOneOBInfo();// 0x4ed8b14
	void TestLuaNetwork();// 0xffffff8a17adf2b0
	void TestLogout(int destroyController, int destroyCharacter);// 0x4ed8a60
	void TestLiveTips(int Type);// 0x4ed89e4
	void TestAddMapItem(int Type, int ID);// 0x4ed8930
	void TestAddLiveMapItem(int ID);// 0x4ed88b4
	void SetUsedSimulationCVar(bool Value);// 0x4ed8830
	void SetShowIslandNicknameValue(bool flag);// 0x4ed87ac
	void SetPanels(out const UAEUserWidget*[] panels);// 0x4ed8710
	void ServerTestLogout(bool bDestroyController, bool bDestroyCharacter);// 0x4ed8600
	void ServerStartLuaDebuger(FString IP, FString Port);// 0x4ed84f8
	void ServerSetVoiceId(int VoiceID);// 0x4ed8448
	void ServerSetVoiceChangerSwitch(bool IsOpen);// 0x4ed8384
	void ServerSetRobotVoiceId(int VoiceID);// 0x4ed82d4
	void ServerRevClientPrintLog(int InLogTypeID, int64 ClientTime, const Vector InVector, const Vector InVector2, int inInt, FString InExtendStr);// 0x4ed80d0
	void ServerReportDynaConfigMiss(DynaConfigInfo DynaConfigInfo);// 0x4ed7f2c
	void ServerReportCollectedEventDataWithPlayerValidation_OnlyIntValues(byte EventId, const CollectedEventOnlyIntValues OnlyIntValues);// 0x4ed7e30
	void ServerReportCollectedEventDataWithPlayerValidation(byte EventId, const CollectedEventKeysValues KeysValues);// 0x4ed7cd4
	void ServerReportCollectedEventData(byte EventId, const CollectedEventKeysValues KeysValues);// 0x4ed7b78
	void ServerLoadAllLevels();// 0x4ed7b64
	void ServerKickSelf();// 0x4ed7b04
	void ServerHandleClassFieldAccessDenied(uint32 InPlayerKey, const FName InClassName, const FName InFieldName);// 0x4ed79dc
	void ServerGetOneOBInfo(FString UID);// 0x4ed7924
	void ServerExitGame();// 0x4ed78c4
	void ServerCheckPathNameMapVersion(int VersionID);// 0x4ed7814
	void ServerAuthenticatePlayer(FString AuthKey);// 0x4ed775c
	void ServerAcknowledgeReconnection(uint32 Token);// 0x4ed76ac
	void SendRawDataToServer(const byte[] InData);// 0x4ed75f4
	void SendRawDataToClient(const byte[] InData);// 0x4ed7568
	void RPC_ServerNegotiateDHKey(FString ClientPublicKey, FString CRC, int8 KeyIndex, int Seq);// 0x4ed73e0
	void RPC_ClientNegotiateDHKey(FString Gen, FString Prime, FString ServerPublicKey, int8 KeyIndex, int Seq);// 0x4ed720c
	void ResetUsedSimulationCVar();// 0x4ed71f8
	void ResetToControlPawn();// 0x4ed71dc
	bool ReportCollectedEventDataWithPlayerValidation(byte EventId, delegate CollectReportedEventDataCallback);// 0x4ed70f0
	bool ReportCollectedEventData(byte EventId, out const CollectedEventData Data);// 0x4ed6fc4
	void ReleaseInGameUI();// 0x4ed6fa8
	void RecordControlPawn();// 0x4ed6f8c
	void PrintStatistics();// 0x4ed6f78
	void PrintExtendInfoHasMiddleSimply(FString Title, FString Subtitle, FString MiddleSimplyStr, FString EndStr);// 0x4ed6e10
	void PostLoginInit(UAEGameMode* GameMode);// 0x4ed6d8c
	bool PlayerWillBeRevival();// 0x4ed6d4c
	void PlayerStartIDReceived();// 0x4ed6d38
	void OnSetVoiceId(int VoiceID);// 0xffffff8a17adf2b0
	void OnRep_WeaponAvatarItemList();// 0x4ed6d24
	void OnRep_WatchPlayerUID();// 0x4ed6d08
	void OnRep_WatchPlayerKey();// 0x4ed6cec
	void OnRep_VehicleAvatarItemList();// 0x4ed6cd8
	void OnRep_UsedSimulation();// 0x4ed6cbc
	void OnRep_TeamID();// 0x4ed6ca0
	void OnRep_RoomMode();// 0x4ed6c84
	void OnRep_PlayerOBInfoList();// 0x4ed6c70
	void OnRep_PersonalDynaConfigRepData();// 0x4ed6c5c
	void OnRep_PathNameMappingConfig();// 0x4ed6c48
	void OnRep_OBGM();// 0x4ed6c2c
	void OnRep_NeedCloseLoading();// 0x4ed6c18
	void OnRep_LastGameResultTime();// 0x4ed6bfc
	void OnRep_IsUGCGMEnabled();// 0x4ed6be8
	void OnRep_IsUGCGM();// 0x4ed6bd4
	void OnRep_IsSpectatingSameCamp();// 0x4ed6bb8
	void OnRep_IsSpectatingEnemy();// 0x4ed6b9c
	void OnRep_IsSpectating();// 0x4ed6b80
	void OnRep_IsObserver();// 0x4ed6b64
	void OnRep_IsGMWatcher();// 0x4ed6b48
	void OnRep_ISGM();// 0x4ed6b34
	void OnRep_EagleWatch();// 0x4ed6b18
	void OnRep_CharacterLocation();// 0x4ed6b04
	void OnRep_CachedCampID();// 0x4ed6ae8
	void OnPreInitWatchUI();// 0xffffff8a17adf2b0
	void OnPreInitOBUI();// 0xffffff8a17adf2b0
	void OnPreInitInGameUI();// 0xffffff8a17adf2b0
	void OnLocalSettingChanged();// 0xffffff8a17adf2b0
	void OnCharacterPositionUpdatedByServer(float Distance);// 0x4ed6a38
	void NotifyClientNetworkLost();// 0x4ed6a1c
	void LoadAllLandscape();// 0x4ed6a08
	void KickSelf();// 0x4ed69f4
	bool IsSupportTPPFreeView();// 0x4ed69bc
	bool IsSpectatorOrReplaying();// 0x4ed6984
	bool IsSpectator();// 0x4ed694c
	bool IsRoomMode();// 0x4ed6928
	bool IsPureSpectator();// 0x4ed68f0
	bool IsPlayerCollectedEventDataReportingEnabled(byte EventId);// 0x4ed6860
	bool IsObserverHost();// 0x4ed6828
	bool IsObserver();// 0x4ed67f0
	bool IsOBGM();// 0x4ed67b8
	bool IsInTeamerSpeacting();// 0x4ed6780
	bool IsInSpectatingSameCamp();// 0x4ed6748
	bool IsInSpectatingEnemy();// 0x4ed6710
	bool IsInSpectating();// 0x4ed66d8
	bool IsInDead();// 0x4ed6698
	bool IsGMWatcher();// 0x4ed6660
	bool IsGlobalObserverOrReplaying();// 0x4ed6628
	bool IsGlobalObserver();// 0x4ed65f0
	bool IsFriendOrEnemySpectator();// 0x4ed65b8
	bool IsFriendObserver();// 0x4ed6580
	bool IsExited();// 0x4ed6550
	bool IsEagleWatch();// 0x4ed6518
	bool IsDemoRecSpectator();// 0x4ed64e0
	bool IsDemoPlaySpectator();// 0x4ed64a8
	bool IsCanEnterFreeView();// 0x4ed6468
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x4ed60b0
	void InitWeaponAvatarItems();// 0x4ed6094
	void InitWeaponAttachmentAvatarItems();// 0x4ed6078
	void InitVehicleAvatarItems();// 0x4ed605c
	void InitPlayerWearInfo();// 0x4ed6040
	void InitInGameUI(bool Respawn, bool bIsNetRecover);// 0x4ed5f68
	void HandlePersonalDynaConfigs(DynaConfigInfo[] DynaConfigList);// 0x4ed5de8
	void HandleFriendObserverEnter();// 0x4ed5dcc
	void HandleBreakUAEWindow(int WinNum);// 0x4ed5d48
	int GotoSpectating(int PlayerID);// 0x4ed5cb4
	Widget* GetWidgetByName(FString WidgetName, FString OuterName, bool bUseContains, FName LogicManager, bool bUseStartWith);// 0x4ed5ac0
	Widget* GetWidgetByClassPath2(FString WidgetName, class UAEUserWidget WidgetClass2);// 0x4ed5980
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x4ed58a4
	bool GetWeaponModuleListWithOutParam(int WeaponID, out int[] OutList, int ModeID);// 0x4ed577c
	int[] GetWeaponModuleList(int WeaponID, int ModeID);// 0x4ed5674
	int[] GetVehicleAvatarSkinList(const int InTargetVehicleID);// 0x4ed55a4
	FString GetToString();// 0x4ed551c
	uint32 GetSpectatingPlayerKey();// 0x4ed54e0
	Actor* GetSpecialOBViewTarget();// 0x4ed54a4
	PlayerOBInfo[] GetPlayerOBInfoListReference();// 0x4ed5410
	int GetPlayerOBInfoItemNum();// 0x4ed53dc
	float GetPlayerNetworkPing();// 0x4ed53a8
	FString GetOBPlayerUIDString(out const PlayerOBInfo PlayerOBInfo);// 0x4ed52a0
	NetRelevancyGroup GetNetRelevancyGroup();// 0x4ed5284
	int64 GetInt64UID();// 0x4ed5250
	int64 GetInt64PlayerKey();// 0x4ed521c
	UAEUserWidget* GetIngameUIRoot();// 0x4ed51e4
	uint32 GetCurrentOBPlayerKey();// 0x4ed51a8
	int GetCurrentOBPlayerInfoIndex();// 0x4ed5174
	void ForceNetReady();// 0x4ed5160
	void ExitGame();// 0x4ed514c
	void ExhaustCPU();// 0x4ed5138
	void ExecDSCommand(const FString DSCommand);// 0x4ed50ac
	void ExcuteIntRecord(FString Key, int Count);// 0x4ed4fe8
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x4ed4f24
	void EnableInGameUI();// 0x4ed4f10
	void DumpViewTargetCriticalLevels();// 0x4ed4efc
	void DumpUAENetActors();// 0x4ed4ee8
	void DumpRegions();// 0x4ed4ed4
	void DumpPlayerReplicationDetails();// 0x4ed4ec0
	void DumpPlayerLiteStatsEvent(FString Content);// 0x4ed4de8
	void DumpObjectRelations();// 0x4ed4dd4
	void DumpNetActors();// 0x4ed4dc0
	void DumpDemoNetActors();// 0x4ed4dac
	void DumpCharacters();// 0x4ed4d98
	void DumpAllUI();// 0x4ed4d84
	void DumpAllObjects();// 0x4ed4d70
	void DumpAllGCObjects();// 0x4ed4d5c
	void DumpAllActors();// 0x4ed4d48
	void DoCrash();// 0x4ed4d34
	void DisableInGameUI();// 0x4ed4d20
	void DelayedNotifyBattleBeginPlay();// 0x4ed4d0c
	void DebugCollectedEvent(bool bCollectedEventDataReportingEnabled, int CollectedEventType);// 0x4ed4c44
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameState* UAEGameState, UAEPlayerController* UAEPlayerController, byte EventId);// 0xffffff8a17adf2b0
	void ClientShowTeammateEscapeNotice();// 0x4ed4c28
	void ClientSendDSPrintLog(int InLogTypeID, out const Vector InVector, out const Vector InVector2, int inInt, FString InExtendStr);// 0x4ed4a70
	void ClientRPC_CastUIMsgTwoParams(FString strMsg, FString module, FString param1, FString param2);// 0x4ed4908
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x4ed47f4
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x4ed471c
	void ClientRPC_BroadcastRespawnComplete();// 0x4ed4700
	void ClientPushOneOBInfo(const PlayerOBInfo Info);// 0x4ed464c
	void ClientInitPlayerOBInfoButton();// 0x4ed4630
	void ClientHandleClassFieldAccessDenied(const FName InClassName, const FName InFieldName);// 0x4ed4548
	void ClientGetDSLog(FString InDSLog);// 0x4ed44bc
	void ClientBroadcastReconnectionSuccessful();// 0x4ed44a0
	void ClientAcknowledgeReconnection(uint32 Token);// 0x4ed441c
	void Client_DelFriendObservers(FString InPlayerName);// 0x4ed4390
	void Client_AddFriendObservers(FString InPlayerName);// 0x4ed4304
	void ClearWatchPlayerKey();// 0x4ed42f0
	void ClearUIFunctionCacheByUIMsg(FString strMsg, FString module);// 0x4ed4218
	void ClearRecordControlPawn();// 0x4ed41fc
	void CheckPlayerOBInfoButtonInit();// 0x4ed41e0
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x4ed4148
	void CastUIMsgWithTarget(FString strMsg, FString module, out const FName TargetName);// 0x4ed402c
	void CastUIMsgWithActorParam(FString strMsg, Actor* Actor, FString module);// 0x4ed3f18
	void CastUIMsg(FString strMsg, FString module);// 0x4ed3e40
	bool CanObserveOtherPlayer(UAEPlayerController* OtherPC);// 0x4ed3da8
	void CallLuaTableFunction(FString TableName, FString FunctionName);// 0x4ed3cd0
	void CallLuaGlobalFunction(FString FunctionName);// 0x4ed3c44
	void BroadcastRespawnComplete();// 0x4ed3c30
	void AutoSelectObservedTargetByServer();// 0x4ed3bd0

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]// 0x7611d31720

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 0x10]// 0x7611dd0c70
	int WeatherID;//[Offset: 0x10, Size: 0x4]// 0x7611dd0c00
	float WeatherTime;//[Offset: 0x14, Size: 0x4]// 0x7611dd0b90

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 0x10]// 0x7611dd0910
	FString LocalAddr;//[Offset: 0x10, Size: 0x10]// 0x7611dd08a0
	float AvgPing;//[Offset: 0x20, Size: 0x4]// 0x7611dd0830
	float MaxPing;//[Offset: 0x24, Size: 0x4]// 0x7611dd07c0
	float HighPingPercent;//[Offset: 0x28, Size: 0x4]// 0x7611dd0750
	float InBytesPerSecond;//[Offset: 0x70, Size: 0x4]// 0x7611dd06e0
	float OutBytesPerSecond;//[Offset: 0x74, Size: 0x4]// 0x7611dd0670
	float InPacketLostRate;//[Offset: 0x78, Size: 0x4]// 0x7611dd0600
	float OutPacketLostRate;//[Offset: 0x7c, Size: 0x4]// 0x7611dd0590
	float OutSaturationRate;//[Offset: 0x80, Size: 0x4]// 0x7611dd0520
	float TotalPositionUpdatedDistance;//[Offset: 0x84, Size: 0x4]// 0x7611dd04b0

--------------------------------
Class: DynaConfigRep
	DynaConfigInfo[] DynaConfigBunch;//[Offset: 0x0, Size: 0x10]// 0x7611dd0120
	bool bUseZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611dd00a0

--------------------------------
Class: DynaConfigInfo
	FString ConfigName;//[Offset: 0x0, Size: 0x10]// 0x7611d8f9a0
	int CVarHash;//[Offset: 0x10, Size: 0x4]// 0x7611d8f930
	enum Type;//[Offset: 0x14, Size: 0x1]// 0x7611d8f7d0
	float Value;//[Offset: 0x18, Size: 0x4]// 0x7611d8f760
	enum Policy;//[Offset: 0x1c, Size: 0x1]// 0x7611d8f600
	enum Owner;//[Offset: 0x1d, Size: 0x1]// 0x7611d8f4a0

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 0x4]// 0x7611d8e770
	int Count;//[Offset: 0x4, Size: 0x4]// 0x7611d8e700
	int ParentTableID;//[Offset: 0x8, Size: 0x4]// 0x7611d8e690

--------------------------------
Class: SuitSkinData
	bool Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611d99bd0
	StyleUnit[] SuitSkinList;//[Offset: 0x8, Size: 0x10]// 0x7611d996e0
	GlidSkinUnit[] GlidSkinList;//[Offset: 0x18, Size: 0x10]// 0x7611d991e0
	int SuitDefaultHeadID;//[Offset: 0x28, Size: 0x4]// 0x7611d99170

--------------------------------
Class: StyleUnit
	int stype_type;//[Offset: 0x0, Size: 0x4]// 0x7611d99b60
	int Slot;//[Offset: 0x4, Size: 0x4]// 0x7611d99af0
	int style_id;//[Offset: 0x8, Size: 0x4]// 0x7611d99a80
	bool lock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x7611d99a00
	GameModePlayerItem[] ItemList;//[Offset: 0x10, Size: 0x10]// 0x7611d99900
	GameModePlayer_WearInfo wearInfo;//[Offset: 0x20, Size: 0xc0]// 0x7611d99880

--------------------------------
Class: GameModePlayer_WearInfo
	GameModePlayer_WearItem[] EquipedSkinList;//[Offset: 0x0, Size: 0x10]// 0x7611d977a0
	GameModePlayer_WearItem[] EquipedPendantList;//[Offset: 0x10, Size: 0x10]// 0x7611d976a0
	GameModePlayer_WearItem[] WeaponPendantList;//[Offset: 0x20, Size: 0x10]// 0x7611d975a0
	GameModePlayer_WearItem[] WingAvatarList;//[Offset: 0x30, Size: 0x10]// 0x7611d97320
	GameModePlayerItem[] WeaponSkinAvatarList;//[Offset: 0x40, Size: 0x10]// 0x7611d97220
	GameModePlayerItem[] WeaponSkinAbilityList;//[Offset: 0x50, Size: 0x10]// 0x7611d97120
	GameModePlayerItem[] WeaponAttachmentAvatarList;//[Offset: 0x60, Size: 0x10]// 0x7611d97020
	GameModePlayerItem[] VehicleSkinAvatarList;//[Offset: 0x70, Size: 0x10]// 0x7611d96f20
	GameModePlayerItem[] VehicleSkinAbilityList;//[Offset: 0x80, Size: 0x10]// 0x7611d96e20
	GameModePlayer_ItemExtraInfo[] VehiclePendantInfoList;//[Offset: 0x90, Size: 0x10]// 0x7611d96b20
	GameModePlayer_ItemCustomName[] ItemCustomNameList;//[Offset: 0xa0, Size: 0x10]// 0x7611d96830
	GameModePlayerItem[] TombBoxAvatarList;//[Offset: 0xb0, Size: 0x10]// 0x7611d96730

--------------------------------
Class: GameModePlayer_WearItem
	int WearPart_ItemID;//[Offset: 0x0, Size: 0x4]// 0x7611d97530
	int WearItemID;//[Offset: 0x4, Size: 0x4]// 0x7611d974c0

--------------------------------
Class: GameModePlayer_ItemExtraInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x7611d96db0
	int[] ItemPendantList;//[Offset: 0x8, Size: 0x10]// 0x7611d96cc0

--------------------------------
Class: GameModePlayer_ItemCustomName
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x7611d96ab0
	FString CustomName;//[Offset: 0x8, Size: 0x10]// 0x7611d96a40
	FString CustomNum;//[Offset: 0x18, Size: 0x10]// 0x7611d969d0

--------------------------------
Class: GlidSkinUnit
	int glid_item_id;//[Offset: 0x0, Size: 0x4]// 0x7611d99670
	GlidCost[] cost_list;//[Offset: 0x8, Size: 0x10]// 0x7611d99380

--------------------------------
Class: GlidCost
	int cost_item_id;//[Offset: 0x0, Size: 0x4]// 0x7611d99600
	int cost_count;//[Offset: 0x4, Size: 0x4]// 0x7611d99590
	int own_count;//[Offset: 0x8, Size: 0x4]// 0x7611d99520

--------------------------------
Class: WeaponModData
	int ModeID;//[Offset: 0x0, Size: 0x4]// 0x7611d98fe0
	WeaponModificationData[] WeaponModificationDataList;//[Offset: 0x8, Size: 0x10]// 0x7611d98ce0

--------------------------------
Class: WeaponModificationData
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x7611d98f70
	int[] ModuleList;//[Offset: 0x8, Size: 0x10]// 0x7611d98e80

--------------------------------
Class: VehicleAvatarItemPairData
	int DefaultItemID;//[Offset: 0x0, Size: 0x4]// 0x7611dcebc0
	int ChangeSkinItemID;//[Offset: 0x4, Size: 0x4]// 0x7611dceb50

--------------------------------
Class: GameModePlayerItemList
	GameModePlayerItem[] PlayerItemList;//[Offset: 0x0, Size: 0x10]// 0x7611dcf230

--------------------------------
Class: VehicleAvatarSkinItem

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611d97fb0
	uint64 UID;//[Offset: 0x8, Size: 0x8]// 0x7611d97f40
	FString UIDString;//[Offset: 0x10, Size: 0x10]// 0x7611d97ed0
	uint32 PlayerKey;//[Offset: 0x20, Size: 0x4]// 0x7611d97e60
	int SegmentLevel;//[Offset: 0x24, Size: 0x4]// 0x7611d97df0
	int BattleMode;//[Offset: 0x28, Size: 0x4]// 0x7611d97d80
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7611d97d00
	int GameCount;//[Offset: 0x30, Size: 0x4]// 0x7611d97c90
	int WinCount;//[Offset: 0x34, Size: 0x4]// 0x7611d97c20
	int TopTenCount;//[Offset: 0x38, Size: 0x4]// 0x7611d97bb0
	int KillNum;//[Offset: 0x3c, Size: 0x4]// 0x7611d97b40
	float KDNum;//[Offset: 0x40, Size: 0x4]// 0x7611d97ad0
	int Title_Type;//[Offset: 0x44, Size: 0x4]// 0x7611d97a60
	int Title_RankID;//[Offset: 0x48, Size: 0x4]// 0x7611d979f0
	int Title_RankType;//[Offset: 0x4c, Size: 0x4]// 0x7611d97980
	int Title_RankNo;//[Offset: 0x50, Size: 0x4]// 0x7611d97910
	int TopSegmentTime;//[Offset: 0x54, Size: 0x4]// 0x7611d978a0
	GameModePlayer_WearInfo OBPlayerWearInfo;//[Offset: 0x58, Size: 0xc0]// 0x7611d96610
	GameModePlayer_BattlePrepareDisplayWearInfo OBPlayerBattlePrepareDisplayWearInfo;//[Offset: 0x118, Size: 0x50]// 0x7611d96040

--------------------------------
Class: GameModePlayer_BattlePrepareDisplayWearInfo
	int[] DisplayWearAvatarInfoList;//[Offset: 0x0, Size: 0x10]// 0x7611d96520
	int[] DisplayWearWeaponInfoList;//[Offset: 0x10, Size: 0x10]// 0x7611d96430
	int[] DisplayWearBackpackInfoList;//[Offset: 0x20, Size: 0x10]// 0x7611d96340
	int[] DisplayWearHelmetInfoList;//[Offset: 0x30, Size: 0x10]// 0x7611d96250
	int[] DisplayVehicleInfoList;//[Offset: 0x40, Size: 0x10]// 0x7611d96160

--------------------------------
Class: GameModePlayerDecalItem.GameModePlayerItem

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 0x4]// 0x7611d98790
	int process;//[Offset: 0x4, Size: 0x4]// 0x7611d98720
	int week_index;//[Offset: 0x8, Size: 0x4]// 0x7611d986b0
	bool is_traced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x7611d98630
	bool is_mode_fit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x7611d985b0
	FString ext_info;//[Offset: 0x10, Size: 0x10]// 0x7611d98540

--------------------------------
Class: SpecialPickItem
	int task_id;//[Offset: 0x0, Size: 0x4]// 0x7611d95bc0
	int item_id;//[Offset: 0x4, Size: 0x4]// 0x7611d95b50
	int cur_count;//[Offset: 0x8, Size: 0x4]// 0x7611d95ae0
	int total_count;//[Offset: 0xc, Size: 0x4]// 0x7611d95a70

--------------------------------
Class: CommonFlagData
	FName FlagName;//[Offset: 0x0, Size: 0x8]// 0x7611d93310
	FName FlagValue;//[Offset: 0x8, Size: 0x8]// 0x7611d932a0
	int SceneFlagID;//[Offset: 0x10, Size: 0x4]// 0x7611d93230

--------------------------------
Class: AllPlayerFixInfo
	SinglePlayerFixInfo[] RepData;//[Offset: 0x0, Size: 0x10]// 0x7611dcc520

--------------------------------
Class: SinglePlayerFixInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611dcc960
	uint32 PlayerKey;//[Offset: 0x10, Size: 0x4]// 0x7611dcc8f0
	FString PlayerUID;//[Offset: 0x18, Size: 0x10]// 0x7611dcc880
	int AnchorPlatformResID;//[Offset: 0x28, Size: 0x4]// 0x7611dcc810
	int AnchorPlatformColorID;//[Offset: 0x2c, Size: 0x4]// 0x7611dcc7a0
	FString PicURL;//[Offset: 0x30, Size: 0x10]// 0x7611dcc730
	FString MedalPicUrl;//[Offset: 0x40, Size: 0x10]// 0x7611dcc6c0

--------------------------------
Class: PlayerOBBattleInfo
	int BattleMode;//[Offset: 0x0, Size: 0x4]// 0x7611dcbc80
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7611dcbc00
	int GameCount;//[Offset: 0x8, Size: 0x4]// 0x7611dcbb90
	int WinCount;//[Offset: 0xc, Size: 0x4]// 0x7611dcbb20
	int TopTenCount;//[Offset: 0x10, Size: 0x4]// 0x7611dcbab0
	int KillNum;//[Offset: 0x14, Size: 0x4]// 0x7611dcba40
	FString KDNum;//[Offset: 0x18, Size: 0x10]// 0x7611dcb9d0
	int TopSegmentTimes;//[Offset: 0x28, Size: 0x4]// 0x7611dcb960

--------------------------------
Class: CollectedEventOnlyIntValues
	int[] IntValues;//[Offset: 0x0, Size: 0x10]// 0x7611dc9aa0

--------------------------------
Class: CollectedEventKeysValues
	FString[] Keys;//[Offset: 0x0, Size: 0x10]// 0x7611dc9590
	FString[] Values;//[Offset: 0x10, Size: 0x10]// 0x7611dc94a0

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 0x50]// 0x7611d8d020

--------------------------------
Class: UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x5e8, Size: 0x8]// 0x7611daa170
	float GridCheckSize;//[Offset: 0x5f0, Size: 0x4]// 0x7611daa100
	float DeepCheckSize;//[Offset: 0x5f4, Size: 0x4]// 0x7611daa090
	int MaxPlayerLimit;//[Offset: 0x600, Size: 0x4]// 0x7611daa020
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]// 0x7611da9fa0
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 0x1]// 0x7611da9f20
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x606, Size: 0x1]// 0x7611da9ea0
	int WeatherID;//[Offset: 0x608, Size: 0x4]// 0x7611da9e30
	FString WeatherName;//[Offset: 0x610, Size: 0x10]// 0x7611da9dc0
	int RoomMode;//[Offset: 0x620, Size: 0x4]// 0x7611da9d50
	FString RoomName;//[Offset: 0x628, Size: 0x10]// 0x7611da9ce0
	int MainModeId;//[Offset: 0x638, Size: 0x4]// 0x7611da9c70
	int CustomGameModeId;//[Offset: 0x63c, Size: 0x4]// 0x7611da9c00
	bool IsMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 0x1]// 0x7611da9b80
	int EagleWatcherCount;//[Offset: 0x648, Size: 0x4]// 0x7611da9b10
	bool IsCompetitionOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1]// 0x7611da9a90
	bool IsGMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 0x1]// 0x7611da9a10
	int SeasonIdx;//[Offset: 0x650, Size: 0x4]// 0x7611da99a0
	int AirdropId;//[Offset: 0x654, Size: 0x4]// 0x7611da9930
	float MeteorShowerRatio;//[Offset: 0x658, Size: 0x4]// 0x7611da98c0
	FString ItemTableName;//[Offset: 0x660, Size: 0x10]// 0x7611da9850
	FString ItemClassPath;//[Offset: 0x670, Size: 0x10]// 0x7611da97e0
	<FString,int> ItemTypeParam;//[Offset: 0x680, Size: 0x50]// 0x7611da9650
	<FString,int> ItemSubTypeParam;//[Offset: 0x6d0, Size: 0x50]// 0x7611da94c0
	<FString,int> VehicleTypeParam;//[Offset: 0x720, Size: 0x50]// 0x7611da9330
	<FString,int> VehicleSubTypeParam;//[Offset: 0x770, Size: 0x50]// 0x7611da91a0
	bool UseSelfAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]// 0x7611da9120
	FString PickupBoxConfigClassPath;//[Offset: 0x7c8, Size: 0x10]// 0x7611da90b0
	float DeadTombBoxLifeSpan;//[Offset: 0x7d8, Size: 0x4]// 0x7611da9040
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dc, Size: 0x1]// 0x7611da8fc0
	FString PickupBoxConfigDataTableName;//[Offset: 0x7e0, Size: 0x10]// 0x7611da8f50
	FString VehicleTableName;//[Offset: 0x7f0, Size: 0x10]// 0x7611da8ee0
	FString VehicleClassPath;//[Offset: 0x800, Size: 0x10]// 0x7611da8e70
	int GameType;//[Offset: 0x810, Size: 0x4]// 0x7611da8e00
	int SubGameType;//[Offset: 0x814, Size: 0x4]// 0x7611da8d90
	<FString,float> BattleCustomConfig;//[Offset: 0x818, Size: 0x50]// 0x7611da8c00
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x868, Size: 0x4]// 0x7611da8b90
	int AINoRepTimeInReady;//[Offset: 0x86c, Size: 0x4]// 0x7611da8b20
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x870, Size: 0x8]// 0x7611da8aa0
	int NetServerMaxTickRateInMatchRoom;//[Offset: 0x878, Size: 0x4]// 0x7611da8a30
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 0x1]// 0x7611da89b0
	bool bPlayerExitClearPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 0x1]// 0x7611da8930
	bool bKillCharacterOnPlayerExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87e, Size: 0x1]// 0x7611da88b0
	bool bUseSpawnItemZombieMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87f, Size: 0x1]// 0x7611da8830
	SpawnZombieActiveMaxCfg[] SpawnZombieActiveMaxList;//[Offset: 0x880, Size: 0x10]// 0x7611da8730
	SpawnZombieActiveMaxCfg[] SpawnZombieActiveMaxCfgList;//[Offset: 0x890, Size: 0x10]// 0x7611da84b0
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x8a0, Size: 0x10]// 0x7611da83b0
	int[] BuildingAdvertismentIds;//[Offset: 0x8b0, Size: 0x10]// 0x7611da82c0
	int MapId;//[Offset: 0x8c0, Size: 0x4]// 0x7611da8250
	FString MapName;//[Offset: 0x8c8, Size: 0x10]// 0x7611da81e0
	FString NavlinkPath;//[Offset: 0x8d8, Size: 0x10]// 0x7611da8170
	FString NavMeshPath;//[Offset: 0x8e8, Size: 0x10]// 0x7611da8100
	enum RouteSegmentMode;//[Offset: 0x8f8, Size: 0x1]// 0x7611da7fa0
	<int,RouteSegment> RouteSegmentList;//[Offset: 0x900, Size: 0x50]// 0x7611da7ba0
	<int,int> CompetitionModeTeamOrder;//[Offset: 0x950, Size: 0x50]// 0x7611da7a10
	int IsGameModeFpp;//[Offset: 0x9a0, Size: 0x4]// 0x7611da79a0
	bool bIsUGCGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]// 0x7611da7920
	bool bUseUserDefinedMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a5, Size: 0x1]// 0x7611da78a0
	DropdownSchemeData[] DropdownSchemeArray;//[Offset: 0x9a8, Size: 0x10]// 0x7611da73e0
	bool bKillThanksEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 0x1]// 0x7611da7360
	bool bEnableSoundSpatialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b9, Size: 0x1]// 0x7611da72e0
	int FilmMode;//[Offset: 0x9bc, Size: 0x4]// 0x7611da7270
	int PeakCompetitionMatchType;//[Offset: 0x9c0, Size: 0x4]// 0x7611da7200
	delegate OnPlayerStateChanged;//[Offset: 0x9f8, Size: 0x10]// 0x7611da7180
	delegate OnGameModeStateChangedMultiDelegate;//[Offset: 0xa38, Size: 0x10]// 0x7611da7100
	delegate OnGameModeExitReady;//[Offset: 0xd10, Size: 0x10]// 0x7611da7080
	delegate SendDeathMatchBattleResult;//[Offset: 0xd20, Size: 0x10]// 0x7611da7000
	delegate DeletateSendAiModelBattleResult;//[Offset: 0xd30, Size: 0x10]// 0x7611da6f80
	delegate SendDeathMatchPlayerEscapeBattleResult;//[Offset: 0xd40, Size: 0x10]// 0x7611da6f00
	delegate OnGameModeInitFinished;//[Offset: 0x10d8, Size: 0x10]// 0x7611da6e80
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 0x1]// 0x7611da6e00
	<byte,bool> EnabledCollectedEventDataEventIds;//[Offset: 0x10f0, Size: 0x50]// 0x7611da6c50
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 0x1]// 0x7611da6bd0
	float OBInfoTimeStep;//[Offset: 0x12f0, Size: 0x4]// 0x7611da6b60
	float OBFiringTimeStep;//[Offset: 0x12f4, Size: 0x4]// 0x7611da6af0
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0x1368, Size: 0x10]// 0x7611da69f0
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0x13e8, Size: 0x10]// 0x7611da6570
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0x13f8, Size: 0x10]// 0x7611da6470
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1408, Size: 0x1]// 0x7611da63f0
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x1410, Size: 0x10]// 0x7611da6380
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x1420, Size: 0x10]// 0x7611da6310
	ReplaceTextureURLCfg[] ReplaceTextureURLList;//[Offset: 0x1430, Size: 0x10]// 0x7611da6210
	ReplaceTextureURLCfg[] ReplaceMeshAssetPathList;//[Offset: 0x1440, Size: 0x10]// 0x7611da5f90
	CakeInfo CakeInfo;//[Offset: 0x1450, Size: 0x20]// 0x7611da5d90
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x1470, Size: 0x8]// 0x7611da5d10
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x1478, Size: 0x8]// 0x7611da5c90
	int GameRatingId;//[Offset: 0x1480, Size: 0x4]// 0x7611da5c20
	int ChooseRatingType;//[Offset: 0x1484, Size: 0x4]// 0x7611da5bb0
	uint32[] NeedReplayPlayers;//[Offset: 0x1488, Size: 0x10]// 0x7611da5ac0
	int TotalPlayerNum;//[Offset: 0x1498, Size: 0x4]// 0x7611da5a50
	int TotalRealPlayerNum;//[Offset: 0x149c, Size: 0x4]// 0x7611da59e0
	int TotalGeneratedPickup;//[Offset: 0x14a0, Size: 0x4]// 0x7611da5970
	DSTestComponent* DSTestComponent;//[Offset: 0x1d68, Size: 0x8]// 0x7611da58f0
	DeadBoxItem[] InitialDeadBoxItemList;//[Offset: 0x1d70, Size: 0x10]// 0x7611da57f0
	<uint64,TrainingStatisticsData> TrainingStatisticsDataMap;//[Offset: 0x1da8, Size: 0x50]// 0x7611da5650
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e50, Size: 0x1]// 0x7611da55d0
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0x1e58, Size: 0x10]// 0x7611da5560
	byte CampType;//[Offset: 0x1e68, Size: 0x1]// 0x7611da54e0
	GMDataManager* DataManager;//[Offset: 0x1f10, Size: 0x8]// 0x7611da5460
	GMComponentManager* ComponentManager;//[Offset: 0x1f18, Size: 0x8]// 0x7611da53e0
	ObjectPoolReservation[] ObjectPoolReservations;//[Offset: 0x1f20, Size: 0x10]// 0x7611da4f80
	float DelayKillDSTimeWhenClassFieldAccessDeniedTime;//[Offset: 0x1f30, Size: 0x4]// 0x7611da4f10
	bool bReadyStateWithoutCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f34, Size: 0x1]// 0x7611da4e90
	bool CheckForBunkerKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f35, Size: 0x1]// 0x7611da4e10
	int enable_MachineLearningAI_TDM;//[Offset: 0x1f38, Size: 0x4]// 0x7611da4da0
	bool enable_Tlog_MachineLearningAI_TDM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3d, Size: 0x1]// 0x7611da4d20
	bool enable_Replay_MachineLearningAI_TDM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3e, Size: 0x1]// 0x7611da4ca0
	IDIPChildActorConfig[] IDIPChildActorConfigList;//[Offset: 0x1f58, Size: 0x10]// 0x7611da4a20
	void TestPlaneBannerInEditor();// 0x4ec919c
	void SyncPlayerStaticInfo();// 0x4ec9180
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x4ec90bc
	void SyncLiveInfo(uint64 UID, FString LiveID, int LiveType);// 0x4ec8fbc
	void SyncBanLogin(uint64 UID, int EndTime, FString Reason, bool watcherOpen, bool allOpen);// 0x4ec8dc4
	void SyncBanInfo(uint64 UID, int BanType, int EndTime, FString BanReason);// 0x4ec8c18
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x4ec8b20
	void SoftKickPlayer(uint32 PlayerKey, FName PlayerType, bool bSendFailure, FString FailureMessage);// 0x4ec896c
	void SoftCloseConnection(NetConnection* Connection, bool bSendFailure, FString FailureMessage);// 0x4ec8800
	void SimulateDSGameInfos();// 0x4ec87ec
	void SetTrainingStatisticsData(uint64 UID, TrainingStatisticsData TrainingStatisticsData);// 0x4ec86fc
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x4ec8630
	void SetPlayerAllowWatch(uint32 PlayerKey, bool allowWatch);// 0x4ec8568
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x4ec84c0
	int[] RetrieveRemainingTeams();// 0x4ec8438
	GameModeMatchGoalAchievedData RetrieveGameModeMatchGoalAchievedData();// 0x4ec83fc
	void RestartPlayerAtPlayerStartWithClass(Controller* NewPlayer, Actor* StartSpot, class Pawn PawnClass);// 0x4ec8304
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x4ec8248
	void Rescue(int RescuerKey, uint32 SavorKey);// 0x4ec818c
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x4ec8064
	bool ReportCollectedEventDataWithPlayersValidation(byte EventId, delegate CollectReportedEventDataCallback);// 0x4ec7f78
	bool ReportCollectedEventData(out const FString UID, byte EventId, out const CollectedEventData Data);// 0x4ec7df0
	void RemoveUnuseComponentInternal(ActorComponent* CompToRemove);// 0x4ec7d6c
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x4ec7cb0
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x4ec7c2c
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x4ec7b6c
	void RefreshPlayerStaticInfo(uint32 InPlayerKey, FString InPlayerName, FString PlayerUID, int TeamID, byte IdxInTeam, int JumpSegmentID, bool IsLogin);// 0x4ec7960
	int RecoardAlivePlayerNum();// 0x4ec7924
	bool QuitGameIsNotEscape();// 0x4ec78e4
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x4ec7850
	void PostInitializedByDSUtils();// 0x4ec7834
	void OnPlayerStopFire(uint32 InPlayerKey);// 0x4ec77b0
	void OnPlayerStartFire(uint32 InPlayerKey);// 0x4ec772c
	void OnPlayerRealExit(PlayerController* Exiting);// 0x4ec76a8
	void OnObserverLogout(UAEPlayerController* InController);// 0x4ec762c
	void OnObserverLogin(UAEPlayerController* InController);// 0x4ec75b0
	void OnNotifyPlayerExit(UAEPlayerController* ExitPlayer, FString Message);// 0xffffff8a17adf2b0
	void OnNormalPlayerLogin(UAEPlayerController* InController);// 0x4ec752c
	void OnMsg(FString Msg);// 0x4ec74a0
	void NotifyTeamParamsSynced(out const GameModeTeamParams[] TeamParams);// 0x4ec73dc
	void NotifyPrePlayerExit(uint32 PlayerKey, FName PlayerType);// 0x4ec731c
	void NotifyPlayerPrompt(uint32 PlayerKey, int TeamID, int PromptType, FString Msg);// 0x4ec7170
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x4ec6f8c
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x4ec6ecc
	void NotifyGameModeInit();// 0x4ec6eb0
	float ModifyFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x4ec6d10
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x4ec6b70
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x4ec6a20
	void KillCharacterOnPlayerExit(PlayerController* PC);// 0x4ec699c
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController, byte EventId);// 0x4ec68d0
	bool IsFeatureSupported(enum SubSystemType);// 0x4ec6838
	bool IsCollectedEventEnabled(byte EventId);// 0x4ec67a8
	void InitAdvertisement();// 0x4ec678c
	bool HasMatchGoalAchieved();// 0x4ec674c
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x4ec65dc
	void HandlePlayerGiftItemResponse(uint32 PlayerKey, FName PlayerType, int Result, int GiftResID, int Count);// 0x4ec646c
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x4ec63b0
	int GetUniqueLogicID();// 0x4ec637c
	TrainingStatisticsData GetTrainingStatisticsDataByUID(uint64 UID);// 0x4ec62d4
	int GetSurvivingTeamCount();// 0x4ec6298
	int GetSurvivingCharacterCount();// 0x4ec625c
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x4ec6150
	UAEPlayerState* GetPlayerStateByUID(out const FString UID);// 0x4ec60ac
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x4ec5fa0
	void GetPlayerAndRealAiNum(out int OutPlayerNum, out int OutRealAiNum);// 0x4ec5eb4
	FString GetPlayerAddress(uint32 PlayerKey);// 0x4ec5de4
	UAEPlayerController*[] GetObserverControllerList();// 0x4ec5d64
	DynamicBattleRankInfo[] GetDynamicBattleRankInfoList();// 0x4ec5c80
	GameModePlayerParams[] GetDSPlayerList();// 0x4ec5bac
	float GetCircleStartTime(int CircleIndex);// 0x4ec5b20
	float GetCircleEndTime(int CircleIndex);// 0x4ec5a94
	int GetCircleConfigNum();// 0x4ec5a60
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x4ec5998
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x4ec58d0
	UAEPlayerController* FindPlayerControllerWithInt64PlayerKey(int64 PlayerKey);// 0x4ec5844
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x4ec57c0
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x4ec573c
	void CreateDynamicComponentForPlayerController(PlayerController* NewPlayer);// 0x4ec56b8
	void CreateDynamicComponentForCharacter(Pawn* NewPawn);// 0x4ec5634
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0xffffff8a17adf2b0
	bool CheckPickupItemLimitedCount(out const ItemDefineID InTargetItem, const BackpackComponent* InTargetBackpack, const int InTargetPickupCount, out int OutLimitedItemCount);// 0x4ec54c0
	bool CheckOverrideRestartPlayer();// 0x4ec5480
	bool CheckFeatureSupported(byte SubSystemId);// 0x4ec53e8
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x4ec52d8
	UAEPlayerState* BPFindPlayerStateWithPlayerKey(FString PlayerKey);// 0x4ec5244
	UAEPlayerController* BPFindPlayerControllerWithPlayerKey(FString PlayerKey);// 0x4ec51b0
	bool AllowReconnectionWhenDead();// 0x4ec5170

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object
	bool IsPureSpectator();// 0x4ed1714

--------------------------------
Class: SpawnZombieActiveMaxCfg
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x7611da86c0
	int Max;//[Offset: 0x10, Size: 0x4]// 0x7611da8650

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x2b5, Size: 0x1]// 0x75a888c500
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 0x1]// 0x75a888c580
	int WorldCompositionID;//[Offset: 0x2b8, Size: 0x4]// 0x75a88e2060
	float LastGenerateItemTime;//[Offset: 0x2bc, Size: 0x4]// 0x75a88e20d0
	float GenerateItemTimeCD;//[Offset: 0x2c0, Size: 0x4]// 0x75a88e2140
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]// 0x75a888c600
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]// 0x75a888c680
	bool bHasRegisterToGenenrator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6, Size: 0x1]// 0x75a888c700
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c7, Size: 0x1]// 0x75a888c780
	void SetGroupValid(bool Valid);// 0x4e94794
	bool IsValidGroup();// 0x4e94754
	int FindWorldCompositionID();// 0x4e94720
	void DoPickUp();// 0x4e9470c

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RouteSegment
	int Index;//[Offset: 0x0, Size: 0x4]// 0x7611da7f30
	FString SegmentName;//[Offset: 0x8, Size: 0x10]// 0x7611da7ec0
	float StartRatio;//[Offset: 0x18, Size: 0x4]// 0x7611da7e50
	float EndRatio;//[Offset: 0x1c, Size: 0x4]// 0x7611da7de0

--------------------------------
Class: DropdownSchemeData
	int SchemeId;//[Offset: 0x0, Size: 0x4]// 0x7611da7830
	int ItemID;//[Offset: 0x4, Size: 0x4]// 0x7611da77c0
	FString ItemName;//[Offset: 0x8, Size: 0x10]// 0x7611da7750
	int MaxNum;//[Offset: 0x18, Size: 0x4]// 0x7611da76e0
	int MinNum;//[Offset: 0x1c, Size: 0x4]// 0x7611da7670
	int Probability;//[Offset: 0x20, Size: 0x4]// 0x7611da7600
	byte DropType;//[Offset: 0x24, Size: 0x1]// 0x7611da7580

--------------------------------
Class: AdvertisementActorConfig
	FString resPath;//[Offset: 0x0, Size: 0x10]// 0x7611da6980
	FString HttpImgPath;//[Offset: 0x10, Size: 0x10]// 0x7611da6910
	Vector Loc;//[Offset: 0x20, Size: 0xc]// 0x7611da6890
	Rotator Rot;//[Offset: 0x2c, Size: 0xc]// 0x7611da6810
	Vector Scale;//[Offset: 0x38, Size: 0xc]// 0x7611da6790
	bool HideWhenFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]// 0x7611da6710

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x530, Size: 0x8]// 0x75a8995580
	FString StaticMeshPath;//[Offset: 0x538, Size: 0x10]// 0x75a80e8700
	FString PicURL;//[Offset: 0x548, Size: 0x10]// 0x75a80e8770
	FrontendHUD* FrontendHUD;//[Offset: 0x558, Size: 0x8]// 0x75a8995600
	float NetCullDistance;//[Offset: 0x564, Size: 0x4]// 0x75a80e87e0
	bool NeedDestroyChildActorCom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]// 0x75a8995680
	bool ShouldBeDisabled(int DisableAdvertisementCategories);// 0x4eb7054
	void SetStaticMeshPath(FString InMeshPath);// 0x4eb6fc8
	void SetScale(Vector InScale);// 0x4eb6f40
	void SetHttpImage(FString InPicURL);// 0x4eb6eb4
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x4eb6df0
	void OnRep_PicURL();// 0x4eb6ddc
	void OnRep_MeshPath();// 0x4eb6dc8
	static int GetDisableAdvertisementCategories();// 0x4eb6d90

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x510, Size: 0x8]// 0x75a8995880
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]// 0x75a8995900
	enum NavigationGeometryGatheringMode;//[Offset: 0x519, Size: 0x1]// 0x75a8995a00

--------------------------------
Class: ReplaceTextureURLCfg
	FString URL;//[Offset: 0x0, Size: 0x10]// 0x7611da61a0
	int ID;//[Offset: 0x10, Size: 0x4]// 0x7611da6130

--------------------------------
Class: CakeInfo
	FString CakeActorPath;//[Offset: 0x0, Size: 0x10]// 0x7611da5f20
	FString CakeButtonImage;//[Offset: 0x10, Size: 0x10]// 0x7611da5eb0

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x2ec, Size: 0xc]// 0x75a8998c00
	bool bUseCookedSpreadPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]// 0x75a8998c80
	byte BornIslandGroupType;//[Offset: 0x2f9, Size: 0x1]// 0x75a8998d00
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]// 0x75a8998d80
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x300, Size: 0x100]// 0x75a8998e00
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x408, Size: 0x10]// 0x75a8998f00
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]// 0x75a8998f80
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1]// 0x75a8999000
	FString[] AreaIDList;//[Offset: 0x420, Size: 0x10]// 0x75a8999080
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x430, Size: 0x10]// 0x75a8999180
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x440, Size: 0x50]// 0x75a79bae40
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x490, Size: 0x18]// 0x75a8999300
	CurveFloat* SpotRateCurve;//[Offset: 0x4a8, Size: 0x8]// 0x75a8999380
	CurveFloat* ItemRateCurve;//[Offset: 0x4b0, Size: 0x8]// 0x75a8999400
	<FString,float> CategoryRates;//[Offset: 0x4b8, Size: 0x50]// 0x75a79baf00
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x508, Size: 0x50]// 0x75a79bafc0
	Actor*[] BornIslandItems;//[Offset: 0x558, Size: 0x10]// 0x75a8999580
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x568, Size: 0x10]// 0x75a8999680
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]// 0x75a8999700
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]// 0x75a8999780
	DateTime GenerateBornIslandTime;//[Offset: 0x580, Size: 0x8]// 0x75a8999800
	DateTime GenerateMainlandTime;//[Offset: 0x588, Size: 0x8]// 0x75a8999880
	<FString,int> ItemTypeParam;//[Offset: 0x590, Size: 0x50]// 0x75a79bb080
	<FString,int> ItemSubTypeParam;//[Offset: 0x5e0, Size: 0x50]// 0x75a79bb140
	float DelayGenerateTime;//[Offset: 0x630, Size: 0x4]// 0x75a80ea530
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x688, Size: 0x10]// 0x75a8999980
	int TotalGeneratedPickup;//[Offset: 0x704, Size: 0x4]// 0x75a80ea5a0
	void WriteItemClassStatisticsDatas();// 0x4e9860c
	void WriteGroupStatisticsDatas();// 0x4e985f8
	void WriteBuildingStatisticsDatas();// 0x4e985e4
	void WriteAllStatisticsDatasToLog();// 0x4e985c8
	void WriteAllStatisticsDatas();// 0x4e985ac
	void SetCatetoryRateConfig(float Scale, out <FString,float> Rates);// 0x4e9849c
	void SetCatetoryRate(<FString,float> Rates);// 0x4e98380
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x4e98230
	void RegisterBornIslandItem(Actor* Item);// 0x4e981ac
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x4e9809c
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] items);// 0x4e97fa4
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x4e97f00
	void RandomGroups();// 0x4e97ee4
	void RandomBornIslandGroups();// 0x4e97ec8
	void LoadItemGenerateTable();// 0x4e97eac
	bool IsCatetoryEnabled();// 0x4e97e74
	void InitItemGenerator(out FString InItemTableName, out <FString,int> InItemTypeParam, out <FString,int> InItemSubTypeParam);// 0x4e97ca4
	void InitCatetorysEx();// 0x4e97c90
	void InitCatetorys();// 0x4e97c7c
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x4e97bcc
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem);// 0x4e97a1c
	int GetItemTypeParamValueByName(FString Name);// 0x4e9793c
	int GetItemSubTypeParamValueByName(FString Name);// 0x4e9785c
	float GetCatetoryRate(FString Catetory);// 0x4e977c8
	void GenerateSpotOnTick(float DeltaTime);// 0x4e97744
	void DeleteValidGroups();// 0x4e97730
	void DeleteBornIslandItems();// 0x4e9771c

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75b4c33380
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]// 0x75b4c33400
	int GenerateSpotCountPerTick;//[Offset: 0x11c, Size: 0x4]// 0x75b4c3daf0
	FString ItemTableName;//[Offset: 0x120, Size: 0x10]// 0x75b4c3db60
	UAEDataTable* ItemTable;//[Offset: 0x130, Size: 0x8]// 0x75b4c33480
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]// 0x75b4c33500
	int DefaultParam;//[Offset: 0x13c, Size: 0x4]// 0x75b4c3dbd0
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x140, Size: 0x50]// 0x75b4c25c00
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x190, Size: 0x10]// 0x75b4c33700
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x1a0, Size: 0x50]// 0x75b4c25cc0
	GroupSpotSceneComponent*[] RepeatGroups;//[Offset: 0x1f0, Size: 0x10]// 0x75b4c33880
	float DetalRepeatTime;//[Offset: 0x200, Size: 0x4]// 0x75b4c3dcb0
	float LineOffsetZ;//[Offset: 0x208, Size: 0x4]// 0x75b4c3dd20
	FString CookedFilePath;//[Offset: 0x210, Size: 0x10]// 0x75b4c3dd90
	FString[] CookedFilePathForLayers;//[Offset: 0x220, Size: 0x10]// 0x75b4c33900
	UAESpotDataSerialize SpotDataSerialize;//[Offset: 0x230, Size: 0xb0]// 0x75b4c33980
	bool bUseVehicleLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]// 0x75b4c33a00
	int MaxItemCount;//[Offset: 0x2e4, Size: 0x4]// 0x75b4c3de70
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x4e70b14
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x4e70a90
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x4e70a0c
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x4e70974
	void GenerateSpots();// 0x4e70958
	void GenerateSpotOnTick(float DeltaTime);// 0x4e708d4
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x4e70600
	void CheckTileLevelsVisible();// 0x4e705e4

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 0x1]// 0x760d239f80
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x8, Size: 0x10]// 0x760d23a080

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x2b5, Size: 0x1]// 0x75b4d10600
	float HalfHeight;//[Offset: 0x2b8, Size: 0x4]// 0x75b4d1cd80
	int SpotProbability;//[Offset: 0x2bc, Size: 0x4]// 0x75b4d1cdf0
	int WorldCompositionID;//[Offset: 0x2c0, Size: 0x4]// 0x75b4d1ce60
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]// 0x75b4d10680
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]// 0x75b4d10700
	float LineOffsetZ;//[Offset: 0x2c8, Size: 0x4]// 0x75b4d1ced0
	void SetSpotValid(bool Valid);// 0x4eb61bc
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x4eb5f40
	bool IsSpotValid();// 0x4eb5f00
	bool GenerateSpot();// 0x4eb5ec0
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x4eb5be4

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 0x4]// 0x760d208450
	class Object* ItemClass;//[Offset: 0x8, Size: 0x8]// 0x760d231600
	int ItemCount;//[Offset: 0x10, Size: 0x4]// 0x760d2084c0
	FString MetaData;//[Offset: 0x18, Size: 0x10]// 0x760d208530
	FString ItemValue;//[Offset: 0x28, Size: 0x10]// 0x760d2085a0
	FString ItemCategory;//[Offset: 0x38, Size: 0x10]// 0x760d208610
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x760d231680
	Actor* HostActor;//[Offset: 0x88, Size: 0x8]// 0x760d231700

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 0x4]// 0x76119bc710
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x8, Size: 0x10]// 0x760d23a180

--------------------------------
Class: UAESpotDataSerialize

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 0x4]// 0x760d207730
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 0x4]// 0x760d2077a0
	int AllSpotCount;//[Offset: 0x8, Size: 0x4]// 0x760d207810
	int AllValidSpotCount;//[Offset: 0xc, Size: 0x4]// 0x760d207880
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 0x50]// 0x760d21eb40
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x60, Size: 0x50]// 0x760d21ecc0
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0xb0, Size: 0x50]// 0x760d21ed80

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x8, Size: 0x1]// 0x760d230e80
	int AllGroupSpotCount;//[Offset: 0xc, Size: 0x4]// 0x760d2078f0
	int AllValidGroupSpotCount;//[Offset: 0x10, Size: 0x4]// 0x760d207960
	int AllSpotCount;//[Offset: 0x14, Size: 0x4]// 0x760d2079d0
	int AllValidSpotCount;//[Offset: 0x18, Size: 0x4]// 0x760d207a40

--------------------------------
Class: TableRowBase

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x8, Size: 0x10]// 0x760d207ab0
	float BuildingLocationX;//[Offset: 0x18, Size: 0x4]// 0x760d207b20
	float BuildingLocationY;//[Offset: 0x1c, Size: 0x4]// 0x760d207b90
	int AllGroupSpotCount;//[Offset: 0x20, Size: 0x4]// 0x760d207c00
	int AllValidGroupSpotCount;//[Offset: 0x24, Size: 0x4]// 0x760d207c70
	int AllSpotCount;//[Offset: 0x28, Size: 0x4]// 0x760d207ce0
	int AllValidSpotCount;//[Offset: 0x2c, Size: 0x4]// 0x760d207d50
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x30, Size: 0x50]// 0x760d21ec00

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 0x1]// 0x760d231000
	int AllSpotCount;//[Offset: 0xc, Size: 0x4]// 0x760d207dc0
	int AllValidSpotCount;//[Offset: 0x10, Size: 0x4]// 0x760d207e30

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x8, Size: 0x10]// 0x760d207f10
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x760d231200
	int ItemCount;//[Offset: 0x1c, Size: 0x4]// 0x760d207f80
	FString ItemTogetherPath;//[Offset: 0x20, Size: 0x10]// 0x760d207ff0
	int ItemTogetherCount;//[Offset: 0x30, Size: 0x4]// 0x760d208060
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x760d231280

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 0x1]// 0x7612210f20
	int SpotGroupPercent;//[Offset: 0x4, Size: 0x4]// 0x7612210eb0
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 0x10]// 0x7612210590

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]// 0x7612210e30
	int SpotPercentMin;//[Offset: 0x4, Size: 0x4]// 0x7612210dc0
	int SpotPercentMax;//[Offset: 0x8, Size: 0x4]// 0x7612210d50
	int SpotPercentDot;//[Offset: 0xc, Size: 0x4]// 0x7612210ce0
	int ItemPerSpotMin;//[Offset: 0x10, Size: 0x4]// 0x7612210c70
	int ItemPerSpotMax;//[Offset: 0x14, Size: 0x4]// 0x7612210c00
	int ItemPerSpotTotal;//[Offset: 0x18, Size: 0x4]// 0x7612210b90
	SpotWeight[] WeightsPerValue;//[Offset: 0x20, Size: 0x10]// 0x7612210a90
	SpotWeight[] WeightsPerCategory;//[Offset: 0x30, Size: 0x10]// 0x7612210810
	float DelayToBeginSpawn;//[Offset: 0x40, Size: 0x4]// 0x76122107a0
	float CDBetweenSpawn;//[Offset: 0x44, Size: 0x4]// 0x7612210730

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x7612210a20
	int weight;//[Offset: 0x10, Size: 0x4]// 0x76122109b0

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 0x10]// 0x7611585620
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 0x10]// 0x760d237300

--------------------------------
Class: ItemGenerateSpawnData
	int keyID;//[Offset: 0x0, Size: 0x4]// 0x76122154b0
	FString ItemValue;//[Offset: 0x8, Size: 0x10]// 0x7612215440
	FString ItemCategory;//[Offset: 0x18, Size: 0x10]// 0x76122153d0
	FString ItemSubCategory;//[Offset: 0x28, Size: 0x10]// 0x7612215360
	int ItemWeight;//[Offset: 0x38, Size: 0x4]// 0x76122152f0
	FString ItemPath;//[Offset: 0x40, Size: 0x10]// 0x7612215280
	int ItemStackCount;//[Offset: 0x50, Size: 0x4]// 0x7612215210
	FString ItemTogetherPath;//[Offset: 0x58, Size: 0x10]// 0x76122151a0
	int ItemTogetherStackCount;//[Offset: 0x68, Size: 0x4]// 0x7612215130
	int ItemTogetherCountMin;//[Offset: 0x6c, Size: 0x4]// 0x76122150c0
	int ItemTogetherCountMax;//[Offset: 0x70, Size: 0x4]// 0x7612215050
	FString MetaData;//[Offset: 0x78, Size: 0x10]// 0x7612214fe0

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2d0, Size: 0x8]// 0x75a899c300
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2d8, Size: 0x10]// 0x75a899c400
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2e8, Size: 0x10]// 0x75a899c500
	byte RegionType;//[Offset: 0x2f8, Size: 0x1]// 0x75a899c580
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x4ea0dbc
	void RepeatSpots();// 0x4ea0da8
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x4ea0d2c
	void RegisterSpotsToGenerator();// 0x4ea0d18
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x4ea0b74
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x4ea0a14
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x4ea0968

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x2cc, Size: 0x4]// 0x75a80ebfe0
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2d8, Size: 0x10]// 0x75a899cc00
	byte SpotGroupType;//[Offset: 0x2ec, Size: 0x1]// 0x75a899cc80
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2f0, Size: 0x8]// 0x75a899cd00
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x2f8, Size: 0x8]// 0x75a899cd80
	<FString,int> CacheItemValeCategory;//[Offset: 0x300, Size: 0x50]// 0x75a79d63c0
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x4ea1734
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x4ea1638
	bool GenerateSpot();// 0x4ea15f8
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x4ea1568
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x4ea1400
	int CountCacheItemValeCategory();// 0x4ea13cc

--------------------------------
Class: DateTime

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x2f0, Size: 0x10]// 0x75a8991500
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x300, Size: 0x10]// 0x75a8991600
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x310, Size: 0x10]// 0x75a8991700
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]// 0x75a8991780
	bool BisRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]// 0x75a8991800
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x328, Size: 0x50]// 0x75a79b4540
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x378, Size: 0x50]// 0x75a79b4600
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x3c8, Size: 0x50]// 0x75a79b46c0
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x418, Size: 0x60]// 0x75a8991b00
	byte RegionType;//[Offset: 0x478, Size: 0x1]// 0x75a8991b80
	UAEDataTable* VehicleDataTable;//[Offset: 0x480, Size: 0x8]// 0x75a8991c00
	<FString,int> VehicleTypeParam;//[Offset: 0x488, Size: 0x50]// 0x75a79b4780
	<FString,int> VehicleSubTypeParam;//[Offset: 0x4d8, Size: 0x50]// 0x75a79b4840
	<FString,float> CategoryRates;//[Offset: 0x528, Size: 0x50]// 0x75a79b4900
	void WriteVehicleSpotStatisticsDatas();// 0x4ee7d48
	void WriteVehicleClassStatisticsDatas();// 0x4ee7d34
	void WriteAllVehicleStatisticsDatasToLog();// 0x4ee7d20
	void WriteAllVehicleStatisticsDatas();// 0x4ee7d0c
	void SetCatetoryRate(<FString,float> Rates);// 0x4ee7bf0
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x4ee7a34
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x4ee79b0
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x4ee788c
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x4ee7768
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x4ee7644
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x4ee7520
	void RandomGroups();// 0x4ee7504
	void LoadVehicleGenerateTable();// 0xffffff8a17adf2b0
	bool IsCatetoryEnabled();// 0x4ee74cc
	void InitVehicleGenerator(out FString InItemTableName, out <FString,int> InVehicleTypeParam, out <FString,int> InVehicleSubTypeParam);// 0x4ee72fc
	void InitCatetorys();// 0x4ee72e8
	int GetVehicleTypeParamValueByName(FString Name);// 0x4ee7254
	int GetVehicleSubTypeParamValueByName(FString Name);// 0x4ee71c0
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x4ee7094
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x4ee6f2c
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x4ee6dc4
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x4ee6c10
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x4ee6af4
	float GetCatetoryRate(FString Catetory);// 0x4ee6a60
	void GenerateSpotOnTick(float DeltaTime);// 0x4ee69dc
	void DeleteGroups();// 0x4ee69c8
	void CheckTileLevelsVisible();// 0x4ee69ac
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x4ee67e0
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x4ee6688

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x2d8, Size: 0x1]// 0x75a899bf80
	byte RegionType;//[Offset: 0x2d9, Size: 0x1]// 0x75a899c000
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]// 0x75a899c080
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1]// 0x75a899c100
	float RandomRotationMin;//[Offset: 0x2dc, Size: 0x4]// 0x75a80ebe90
	float RandomRotationMax;//[Offset: 0x2e0, Size: 0x4]// 0x75a80ebf00
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x2e8, Size: 0x28]// 0x75a899c180
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x4eea07c
	bool GenerateSpot();// 0x4eea03c

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 0x10]// 0x760d2073b0
	FString VehiclePath;//[Offset: 0x10, Size: 0x10]// 0x760d207420
	float FuelPercent;//[Offset: 0x20, Size: 0x4]// 0x760d207490
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x760d230c80
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]// 0x760d230d00

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]// 0x760d230800
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 0x10]// 0x760d230900
	int FuelPercentMin;//[Offset: 0x18, Size: 0x4]// 0x760d206d90
	int FuelPercentMax;//[Offset: 0x1c, Size: 0x4]// 0x760d206e00
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x760d230980
	byte RandomType;//[Offset: 0x21, Size: 0x1]// 0x760d230a00
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x24, Size: 0x4]// 0x760d206e70
	int TotalCountRangeMin;//[Offset: 0x28, Size: 0x4]// 0x760d206ee0
	int TotalCountRangeMax;//[Offset: 0x2c, Size: 0x4]// 0x760d206f50
	float ProbabilityPersent;//[Offset: 0x30, Size: 0x4]// 0x760d206fc0
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x34, Size: 0x4]// 0x760d207030

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]// 0x760d230a80
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 0x10]// 0x760d230b80
	int TotalCountRangeMin;//[Offset: 0x18, Size: 0x4]// 0x760d2070a0
	int TotalCountRangeMax;//[Offset: 0x1c, Size: 0x4]// 0x760d207110

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 0x1]// 0x760d1fd080
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x8, Size: 0x10]// 0x760d1fd180

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 0x10]// 0x760d205c10
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 0x10]// 0x760d1fd000

--------------------------------
Class: VehicleGenerateSpawnData
	int keyID;//[Offset: 0x0, Size: 0x4]// 0x760d207180
	FString VehicleType;//[Offset: 0x8, Size: 0x10]// 0x760d2071f0
	FString VehicleSubType;//[Offset: 0x18, Size: 0x10]// 0x760d207260
	FString VehiclePath;//[Offset: 0x28, Size: 0x10]// 0x760d2072d0
	int VehicleWeight;//[Offset: 0x38, Size: 0x4]// 0x760d207340
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]// 0x760d230c00

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 0x10]// 0x760d231480
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0x10, Size: 0x50]// 0x760d21ee40

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 0x1]// 0x760d231380
	FString VehiclePath;//[Offset: 0x10, Size: 0x10]// 0x760d208140
	float VehicleLocationX;//[Offset: 0x20, Size: 0x4]// 0x760d2081b0
	float VehicleLocationY;//[Offset: 0x24, Size: 0x4]// 0x760d208220
	float VehicleLocationZ;//[Offset: 0x28, Size: 0x4]// 0x760d208290

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x8, Size: 0x10]// 0x760d208300
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x760d231500
	int AllVehicleCount;//[Offset: 0x1c, Size: 0x4]// 0x760d208370

--------------------------------
Class: DSTestComponent.ActorComponent.Object
	UAEGameMode* GameMode;//[Offset: 0x118, Size: 0x8]// 0x75a899d280
	void SpawnPlayer(int Count);// 0x4e71bc8

--------------------------------
Class: DeadBoxItem
	int item_id;//[Offset: 0x0, Size: 0x4]// 0x7611d95860
	int cur_count;//[Offset: 0x4, Size: 0x4]// 0x7611d957f0
	int total_count;//[Offset: 0x8, Size: 0x4]// 0x7611d95780
	int weight;//[Offset: 0xc, Size: 0x4]// 0x7611d95710

--------------------------------
Class: TrainingStatisticsData
	TrainingStatisticsItem[] ItemList;//[Offset: 0x0, Size: 0x10]// 0x7611d9c6e0
	TrainingStatisticsItem_Int32[] Int32ItemList;//[Offset: 0x10, Size: 0x10]// 0x7611d9c460
	TrainingStatisticsItem_Int64[] Int64ItemList;//[Offset: 0x20, Size: 0x10]// 0x7611d9c1e0

--------------------------------
Class: TrainingStatisticsItem
	FString ItemName;//[Offset: 0x0, Size: 0x10]// 0x7611d9c8f0
	float ItemValue;//[Offset: 0x10, Size: 0x4]// 0x7611d9c880

--------------------------------
Class: TrainingStatisticsItem_Int32
	FString ItemName;//[Offset: 0x0, Size: 0x10]// 0x7611d9c670
	int ItemValue;//[Offset: 0x10, Size: 0x4]// 0x7611d9c600

--------------------------------
Class: TrainingStatisticsItem_Int64
	FString ItemName;//[Offset: 0x0, Size: 0x10]// 0x7611d9c3f0
	uint64 ItemValue;//[Offset: 0x10, Size: 0x8]// 0x7611d9c380

--------------------------------
Class: GMDataManager.Object
	GMDataSource*[] DataSources;//[Offset: 0x28, Size: 0x10]// 0x75a899b380
	GMDataSource*[] GenericDataSources;//[Offset: 0x38, Size: 0x10]// 0x75a899b480

--------------------------------
Class: GMDataSource.Object

--------------------------------
Class: GMComponentManager.Object
	<enum,ActorComponent*> Components;//[Offset: 0x28, Size: 0x50]// 0x75a79bd000
	Object* OwnerGameMode;//[Offset: 0x78, Size: 0x8]// 0x75a899b680
	GMSubSystemBase*[] ComponentConfigs;//[Offset: 0x80, Size: 0x10]// 0x75a899b780
	GMSubSystemBase*[] GenericComponentConfigs;//[Offset: 0x90, Size: 0x10]// 0x75a899b880
	FName[] StatCallFunctionNameUniq;//[Offset: 0xa0, Size: 0x10]// 0x75a899b900
	static GMComponentManager* GetInstance();// 0x4e9332c

--------------------------------
Class: GMSubSystemBase.Object
	enum SubSystemId;//[Offset: 0x28, Size: 0x1]// 0x75a899ab80
	class Object* SubSystemClass;//[Offset: 0x30, Size: 0x8]// 0x75a899ac00
	DynamicCompConfig[] DynamicComponents;//[Offset: 0x38, Size: 0x10]// 0x75a899ad00

--------------------------------
Class: DynamicCompConfig
	enum CompType;//[Offset: 0x0, Size: 0x1]// 0x761203dd00
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x761203dc80
	class Object* DynamicCompClass;//[Offset: 0x8, Size: 0x8]// 0x761203dc00

--------------------------------
Class: ObjectPoolReservation
	class Object* ObjectClass;//[Offset: 0x0, Size: 0x8]// 0x7611da5360
	enum FeatureSetType;//[Offset: 0x8, Size: 0x1]// 0x7611da5200
	int MinNumOverride;//[Offset: 0xc, Size: 0x4]// 0x7611da5190
	int MaxNumOverride;//[Offset: 0x10, Size: 0x4]// 0x7611da5120

--------------------------------
Class: IDIPChildActorConfig
	int Tag;//[Offset: 0x0, Size: 0x4]// 0x7611da4c30
	FString ClassPath;//[Offset: 0x8, Size: 0x10]// 0x7611da4bc0

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 0x8]// 0x7611da4830
	FString CorpsName;//[Offset: 0x8, Size: 0x10]// 0x7611da47c0
	int Icon;//[Offset: 0x18, Size: 0x4]// 0x7611da4750
	int SegmentLevel;//[Offset: 0x1c, Size: 0x4]// 0x7611da46e0

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 0x10]// 0x7611da2f40
	int RemainTeamCount;//[Offset: 0x10, Size: 0x4]// 0x7611da2ed0
	int RemainAlivePlayerCount;//[Offset: 0x14, Size: 0x4]// 0x7611da2e60
	<FString,FString> PlayersLogoutTime;//[Offset: 0x18, Size: 0x50]// 0x7611da2cd0
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x68, Size: 0x10]// 0x7611da27b0
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x7611da2730
	<uint64,RevengeEvent> RevengeEventList;//[Offset: 0x80, Size: 0x50]// 0x7611da22f0

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x7611da2c60
	int CorpsHeadIcon;//[Offset: 0x10, Size: 0x4]// 0x7611da2bf0
	int KilledNum;//[Offset: 0x14, Size: 0x4]// 0x7611da2b80
	int SegmentLevel;//[Offset: 0x18, Size: 0x4]// 0x7611da2b10
	int RealtimeRank;//[Offset: 0x1c, Size: 0x4]// 0x7611da2aa0
	int DefeatPlayerNum;//[Offset: 0x20, Size: 0x4]// 0x7611da2a30
	float TotalDamage;//[Offset: 0x24, Size: 0x4]// 0x7611da29c0
	float SurvivalTime;//[Offset: 0x28, Size: 0x4]// 0x7611da2950

--------------------------------
Class: RevengeEvent
	<uint64,uint16> IRevengedWhom;//[Offset: 0x0, Size: 0x50]// 0x7611da2530

--------------------------------
Class: GameModeMatchGoalAchievedData
	int RemainAlivePlayerCount;//[Offset: 0x0, Size: 0x4]// 0x7611da1ef0
	int GamePlayingTime;//[Offset: 0x4, Size: 0x4]// 0x7611da1e80

--------------------------------
Class: GameModeTeamParams
	int TeamID;//[Offset: 0x0, Size: 0x4]// 0x7611d9f5f0
	int[] UIDs;//[Offset: 0x8, Size: 0x10]// 0x7611d9f500
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611d9f480
	int CollectedEventType;//[Offset: 0x1c, Size: 0x4]// 0x7611d9f410

--------------------------------
Class: UAEPlayerState.PlayerState.Info.Actor.Object
	bool binitializedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]// 0x7611f18ad0
	PlayerRestartConfig PlayerRestartConfig;//[Offset: 0x5c0, Size: 0x40]// 0x7611f187d0
	float Pronetime;//[Offset: 0x600, Size: 0x4]// 0x7611f18760
	float BeInWaterTime;//[Offset: 0x604, Size: 0x4]// 0x7611f186f0
	float SwimmingDistance;//[Offset: 0x608, Size: 0x4]// 0x7611f18680
	float marchDistance;//[Offset: 0x60c, Size: 0x4]// 0x7611f18610
	float MarchTime;//[Offset: 0x610, Size: 0x4]// 0x7611f185a0
	float travelDistance;//[Offset: 0x614, Size: 0x4]// 0x7611f18530
	float driveDistance;//[Offset: 0x618, Size: 0x4]// 0x7611f184c0
	int destroyVehicleNum;//[Offset: 0x61c, Size: 0x4]// 0x7611f18450
	int rescueTimes;//[Offset: 0x620, Size: 0x4]// 0x7611f183e0
	float NightMarchDistance;//[Offset: 0x624, Size: 0x4]// 0x7611f18370
	int KillWolfNum;//[Offset: 0x628, Size: 0x4]// 0x7611f18300
	int GVMemberID;//[Offset: 0x62c, Size: 0x4]// 0x7611f18290
	FName PlayerType;//[Offset: 0x630, Size: 0x8]// 0x7611f18220
	uint64 FinalTeamleaderUID;//[Offset: 0x638, Size: 0x8]// 0x7611f181b0
	uint32 PlayerKey;//[Offset: 0x640, Size: 0x4]// 0x7611f18140
	FString RealPlayerName;//[Offset: 0x648, Size: 0x10]// 0x7611f180d0
	uint64 UID;//[Offset: 0x658, Size: 0x8]// 0x7611f18060
	FString PlayerUID;//[Offset: 0x660, Size: 0x10]// 0x7611f17ff0
	FString PlayerOpenID;//[Offset: 0x670, Size: 0x10]// 0x7611f17f80
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]// 0x7611f17f00
	FString IconURL;//[Offset: 0x688, Size: 0x10]// 0x7611f17e90
	int Gender;//[Offset: 0x698, Size: 0x4]// 0x7611f17e20
	int PlayerLevel;//[Offset: 0x69c, Size: 0x4]// 0x7611f17db0
	int SegmentLevel;//[Offset: 0x6a0, Size: 0x4]// 0x7611f17d40
	int TopSegmentTimes;//[Offset: 0x6a4, Size: 0x4]// 0x7611f17cd0
	delegate OnTopSegmentTimesChange;//[Offset: 0x6a8, Size: 0x10]// 0x7611f17c50
	FString RemarkName;//[Offset: 0x6b8, Size: 0x10]// 0x7611f17be0
	FString LiveID;//[Offset: 0x6c8, Size: 0x10]// 0x7611f17b70
	int LiveType;//[Offset: 0x6d8, Size: 0x4]// 0x7611f17b00
	int imprint_info;//[Offset: 0x6dc, Size: 0x4]// 0x7611f17a90
	int AvatarBoxId;//[Offset: 0x6e0, Size: 0x4]// 0x7611f17a20
	int TeamID;//[Offset: 0x6e4, Size: 0x4]// 0x7611f179b0
	byte IdxInTeam;//[Offset: 0x6e8, Size: 0x1]// 0x7611f17930
	bool bIsPureWatcherReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 0x1]// 0x7611f178b0
	uint64 RoomTeammatesID;//[Offset: 0x6f0, Size: 0x8]// 0x7611f17840
	delegate OnTeamIDChange;//[Offset: 0x6f8, Size: 0x10]// 0x7611f177c0
	delegate OnLiveStatusChange;//[Offset: 0x708, Size: 0x10]// 0x7611f17740
	FString UDPSenderAddress;//[Offset: 0x718, Size: 0x10]// 0x7611f176d0
	int PlayerBornPointID;//[Offset: 0x728, Size: 0x4]// 0x7611f17660
	int Kills;//[Offset: 0x72c, Size: 0x4]// 0x7611f175f0
	int Assists;//[Offset: 0x738, Size: 0x4]// 0x7611f17580
	byte PlatformGender;//[Offset: 0x750, Size: 0x1]// 0x7611f17500
	bool bIsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1]// 0x7611f17480
	int MatchLabel;//[Offset: 0x754, Size: 0x4]// 0x7611f17410
	bool IsBanPublicMic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1]// 0x7611f17390
	int JumpSegmentID;//[Offset: 0x75c, Size: 0x4]// 0x7611f17320
	PrivacyProtectDetail PrivacyDetail;//[Offset: 0x760, Size: 0x20]// 0x7611f172a0
	delegate OnPrivacyDataReady;//[Offset: 0x780, Size: 0x10]// 0x7611f17220
	uint32 Killer;//[Offset: 0x790, Size: 0x4]// 0x7611f171b0
	FString KillerName;//[Offset: 0x798, Size: 0x10]// 0x7611f17140
	HitDownPlayerTypeInfoData[] HitDownPlayersInfoData;//[Offset: 0x7a8, Size: 0x10]// 0x7611f17040
	int HitDownOther;//[Offset: 0x7b8, Size: 0x4]// 0x7611f16fd0
	int8 is_regress;//[Offset: 0x7bc, Size: 0x1]// 0x7611f16f60
	int8 not_counter_ai;//[Offset: 0x7bd, Size: 0x1]// 0x7611f16ef0
	int KillerWeaponId;//[Offset: 0x7c0, Size: 0x4]// 0x7611f16e80
	float KillerDistance;//[Offset: 0x7c4, Size: 0x4]// 0x7611f16e10
	int ShootWeaponShotNum;//[Offset: 0x7c8, Size: 0x4]// 0x7611f16da0
	delegate OnAddWeaponShootNum;//[Offset: 0x7d0, Size: 0x10]// 0x7611f16d20
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x7e0, Size: 0x4]// 0x7611f16cb0
	int HeadShotNum;//[Offset: 0x7e4, Size: 0x4]// 0x7611f16c40
	int HealTimes;//[Offset: 0x7e8, Size: 0x4]// 0x7611f16bd0
	float DamageAmount;//[Offset: 0x7ec, Size: 0x4]// 0x7611f16b60
	float DamageAmountExceptAI;//[Offset: 0x7f0, Size: 0x4]// 0x7611f16af0
	float ShootWeaponDamageAmount;//[Offset: 0x7f4, Size: 0x4]// 0x7611f16a80
	float HealAmount;//[Offset: 0x7f8, Size: 0x4]// 0x7611f16a10
	<int,WeaponKillData> WeaponKillsMap;//[Offset: 0x800, Size: 0x50]// 0x7611f16670
	<int,int> WeaponSkinHistoryKillCounter;//[Offset: 0x850, Size: 0x50]// 0x7611f164e0
	FString[] KillFlow;//[Offset: 0x8a0, Size: 0x10]// 0x7611f163f0
	SuitSkinFlow SuitSkinFlow;//[Offset: 0x910, Size: 0x10]// 0x7611f15e20
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x930, Size: 0x10]// 0x7611f15d20
	UseItemFlow[] UseItemFlow;//[Offset: 0x940, Size: 0x10]// 0x7611f15c20
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x950, Size: 0x10]// 0x7611f15b20
	float OutsideBlueCircleTime;//[Offset: 0x960, Size: 0x4]// 0x7611f15ab0
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x968, Size: 0x10]// 0x7611f159b0
	int FirstOpenedTombBoxNum;//[Offset: 0x978, Size: 0x4]// 0x7611f15940
	int FirstOpenedAirDropBoxNum;//[Offset: 0x97c, Size: 0x4]// 0x7611f158d0
	int FirstOpenedMonsterTombBoxNum;//[Offset: 0x980, Size: 0x4]// 0x7611f15860
	int PickupMonsterTombBoxNum;//[Offset: 0x984, Size: 0x4]// 0x7611f157f0
	int FirstOpenedSuperWeaponBoxNum;//[Offset: 0x988, Size: 0x4]// 0x7611f15780
	float HitEnemyHeadAmount;//[Offset: 0x98c, Size: 0x4]// 0x7611f15710
	int[] BuildFlow;//[Offset: 0x990, Size: 0x10]// 0x7611f15620
	int[] DestroyShelterFlow;//[Offset: 0x9a0, Size: 0x10]// 0x7611f15530
	int ZombieKilledUsingTraps;//[Offset: 0x9b0, Size: 0x4]// 0x7611f154c0
	float HitShelterDamage;//[Offset: 0x9b4, Size: 0x4]// 0x7611f15450
	float ShelterTakeDamage;//[Offset: 0x9b8, Size: 0x4]// 0x7611f153e0
	int PlayerSetLevel;//[Offset: 0x9bc, Size: 0x4]// 0x7611f15370
	float PlayerSetExp;//[Offset: 0x9c0, Size: 0x4]// 0x7611f15300
	FlareGunReport FlareGunReport;//[Offset: 0x9c4, Size: 0x10]// 0x7611f15020
	Vector LandLocation;//[Offset: 0x9d4, Size: 0xc]// 0x7611f14fa0
	bool bHasPopupTopFiveTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]// 0x7611f14f20
	int TopFiveTipsUseResponse;//[Offset: 0x9e4, Size: 0x4]// 0x7611f14eb0
	float SignalHealAmount;//[Offset: 0x9e8, Size: 0x4]// 0x7611f14e40
	int SignalHealCount;//[Offset: 0x9ec, Size: 0x4]// 0x7611f14dd0
	Vector DeadLocation;//[Offset: 0x9f0, Size: 0xc]// 0x7611f14d50
	FString DeadDamangeType;//[Offset: 0xa00, Size: 0x10]// 0x7611f14ce0
	FString DeadTimeStr;//[Offset: 0xa10, Size: 0x10]// 0x7611f14c70
	int DeadTimes;//[Offset: 0xa20, Size: 0x4]// 0x7611f14c00
	int64[] KillerUIDs;//[Offset: 0xa28, Size: 0x10]// 0x7611f14b10
	int BeDownTimes;//[Offset: 0xa38, Size: 0x4]// 0x7611f14aa0
	int KnockDownTimes;//[Offset: 0xa3c, Size: 0x4]// 0x7611f14a30
	int BeSavedTimes;//[Offset: 0xa40, Size: 0x4]// 0x7611f149c0
	EquipmentData EquipmentData;//[Offset: 0xa48, Size: 0x70]// 0x7611f14940
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 0x1]// 0x7611f148c0
	int GamePlayingTime;//[Offset: 0xac8, Size: 0x4]// 0x7611f14850
	int ObserverTime;//[Offset: 0xacc, Size: 0x4]// 0x7611f147e0
	int TouchDownAreaID;//[Offset: 0xad0, Size: 0x4]// 0x7611f14770
	int TouchDownLocTypeID;//[Offset: 0xad4, Size: 0x4]// 0x7611f14700
	FString TouchDownObjectName;//[Offset: 0xad8, Size: 0x10]// 0x7611f14690
	GameModePlayerTaskDataSim[] CompletedTaskList;//[Offset: 0xae8, Size: 0x10]// 0x7611f14590
	ReportCollection[] SpecialCollectionList;//[Offset: 0xaf8, Size: 0x10]// 0x7611f14490
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0xb08, Size: 0x10]// 0x7611f14390
	int[] SecretAreaIDList;//[Offset: 0xb18, Size: 0x10]// 0x7611f142a0
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0xb28, Size: 0x10]// 0x7611f14010
	float DrivingHelicopterTime;//[Offset: 0xb38, Size: 0x4]// 0x7611f13fa0
	float InHelicopterTime;//[Offset: 0xb3c, Size: 0x4]// 0x7611f13f30
	int RevivalNum;//[Offset: 0xb40, Size: 0x4]// 0x7611f13ec0
	int BeRevivedNum;//[Offset: 0xb44, Size: 0x4]// 0x7611f13e50
	int SelfRevivedNum;//[Offset: 0xb48, Size: 0x4]// 0x7611f13de0
	int KillNumInVehicle;//[Offset: 0xb4c, Size: 0x4]// 0x7611f13d70
	int KillPlayerNum;//[Offset: 0xb50, Size: 0x4]// 0x7611f13d00
	int KillAINum;//[Offset: 0xb54, Size: 0x4]// 0x7611f13c90
	float TotalSprintDistance;//[Offset: 0xb58, Size: 0x4]// 0x7611f13c20
	float TotalBeenDamageAmount;//[Offset: 0xb5c, Size: 0x4]// 0x7611f13bb0
	float DestroyVehicleWheelNum;//[Offset: 0xb60, Size: 0x4]// 0x7611f13b40
	int BreakDoorNum;//[Offset: 0xb64, Size: 0x4]// 0x7611f13ad0
	delegate OnBreakDoor;//[Offset: 0xb68, Size: 0x10]// 0x7611f13a50
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0xb78, Size: 0x10]// 0x7611f13950
	UseItemFlow[] UseSpecificBulletFlow;//[Offset: 0xb88, Size: 0x10]// 0x7611f13850
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xb98, Size: 0x10]// 0x7611f13750
	WeaponLobbyInitialData WeaponLobbyInitialData;//[Offset: 0xba8, Size: 0x10]// 0x7611f136d0
	int WeaponCreateStuckAutoRecoverNum;//[Offset: 0xbb8, Size: 0x4]// 0x7611f13660
	FString[] DestroyVehicleFlow;//[Offset: 0xbc0, Size: 0x10]// 0x7611f13570
	int UseHelicoperNum;//[Offset: 0xbd0, Size: 0x4]// 0x7611f13500
	float UseHelicoperDistance;//[Offset: 0xbd4, Size: 0x4]// 0x7611f13490
	int UseDragonBoatNum;//[Offset: 0xbd8, Size: 0x4]// 0x7611f13420
	byte CharmRankIndex;//[Offset: 0xbdc, Size: 0x1]// 0x7611f133a0
	<uint32> UseHelicoperRecord;//[Offset: 0xbe0, Size: 0x50]// 0x7611f13290
	float GlidingDistance;//[Offset: 0xc30, Size: 0x4]// 0x7611f13220
	int BreakGlassNum;//[Offset: 0xc34, Size: 0x4]// 0x7611f131b0
	delegate OnBreakGlass;//[Offset: 0xc38, Size: 0x10]// 0x7611f13130
	int SlidingTackleNum;//[Offset: 0xc48, Size: 0x4]// 0x7611f130c0
	int ClimbObstacleNum;//[Offset: 0xc4c, Size: 0x4]// 0x7611f13050
	<FString,RedpackData> FireworksRedpackData;//[Offset: 0xc50, Size: 0x50]// 0x7611f12eb0
	EmoteAnimIData[] EmoteAnimIDataArray;//[Offset: 0xca0, Size: 0x10]// 0x7611f12db0
	bool showNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 0x1]// 0x7611f12d30
	int MemberIdInVoiceRoom;//[Offset: 0xcb4, Size: 0x4]// 0x7611f12cc0
	int RobotVoiceMemberId;//[Offset: 0xcb8, Size: 0x4]// 0x7611f12c50
	bool bUseVoiceChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 0x1]// 0x7611f12bd0
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbd, Size: 0x1]// 0x7611f12b50
	int FollowState;//[Offset: 0xcd4, Size: 0x4]// 0x7611f12ae0
	int InviteTimes;//[Offset: 0xcd8, Size: 0x4]// 0x7611f12a70
	bool bCanBeWatchedByFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdc, Size: 0x1]// 0x7611f129f0
	bool bCanBeWatchedByOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdd, Size: 0x1]// 0x7611f12970
	int OpnedMosnterBoxNum;//[Offset: 0xce0, Size: 0x4]// 0x7611f12900
	bool IsInspector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce4, Size: 0x1]// 0x7611f12880
	delegate OnWolfKillNumChange;//[Offset: 0xd08, Size: 0x10]// 0x7611f12800
	GiftSentData[] GiftSentData;//[Offset: 0xd18, Size: 0x10]// 0x7611f12700
	GiftReceivedData[] GiftReceivedData;//[Offset: 0xd28, Size: 0x10]// 0x7611f12600
	int InactiveZombieCount;//[Offset: 0xd38, Size: 0x4]// 0x7611f12590
	int DeactiveZombieCount;//[Offset: 0xd3c, Size: 0x4]// 0x7611f12520
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 0x1]// 0x7611f124a0
	int CollectedEventType;//[Offset: 0xd44, Size: 0x4]// 0x7611f12430
	bool bLiveVideoReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 0x1]// 0x7611f123b0
	UAEDataTable* CollectedEventTable;//[Offset: 0xd50, Size: 0x8]// 0x7611f12330
	bool bCollectedEVLiveEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 0x1]// 0x7611f122b0
	GameBaseInfo GameBaseInfo;//[Offset: 0xd60, Size: 0x80]// 0x7611f11cc0
	int8 AreaID;//[Offset: 0xde0, Size: 0x1]// 0x7611f11c50
	int8 PlatID;//[Offset: 0xde1, Size: 0x1]// 0x7611f11be0
	float PlayerLandedTimeStamp;//[Offset: 0xde4, Size: 0x4]// 0x7611f11b70
	bool IsRescueAllTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 0x1]// 0x7611f11af0
	bool PendingBecomeRescuer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde9, Size: 0x1]// 0x7611f11a70
	int KillKingNum;//[Offset: 0xdec, Size: 0x4]// 0x7611f11a00
	<uint64,uint16> MutualAid;//[Offset: 0xdf0, Size: 0x50]// 0x7611f11870
	<uint64,uint16> WhoRescuedMe;//[Offset: 0xe40, Size: 0x50]// 0x7611f116e0
	<uint64,uint16> IRescuedWhom;//[Offset: 0xe90, Size: 0x50]// 0x7611f11550
	<uint64,uint16> WhoRevivedMe;//[Offset: 0xee0, Size: 0x50]// 0x7611f113c0
	<uint64,uint16> IRevivedWhom;//[Offset: 0xf30, Size: 0x50]// 0x7611f11230
	EmotionalMemoryData EmotionalMemoryData;//[Offset: 0xf80, Size: 0x50]// 0x7611f109f0
	int RespawnTimes;//[Offset: 0xfd0, Size: 0x4]// 0x7611f10980
	int MinimalLevelOfKillThanks;//[Offset: 0xfd4, Size: 0x4]// 0x7611f10910
	int KillThanksCount;//[Offset: 0xfd8, Size: 0x4]// 0x7611f108a0
	bool bPartiallyKillThanksToOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdc, Size: 0x1]// 0x7611f10820
	bool bPartiallyKillThanksFromOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdd, Size: 0x1]// 0x7611f107a0
	delegate ResponseCanShowKillThanksUIDelegate;//[Offset: 0xfe0, Size: 0x10]// 0x7611f10720
	delegate ResponseKillThanksDelegate;//[Offset: 0xff0, Size: 0x10]// 0x7611f106a0
	WeaponRecord CurWeaponRecord;//[Offset: 0x1000, Size: 0x48]// 0x7611f0fd00
	PlayerStageBattleRecord BattleRecord;//[Offset: 0x1048, Size: 0x2c]// 0x7611f0fc80
	PlayerClubTeamInfo ClubTeamInfo;//[Offset: 0x1078, Size: 0x28]// 0x7611f0fc00
	UGCPlayerInfo UGCPlayerInfo;//[Offset: 0x10a0, Size: 0x70]// 0x7611f0fb80
	int CampToolNum;//[Offset: 0x1110, Size: 0x4]// 0x7611f0fb10
	void SetGVMemberIDServerCall(int memberID);// 0x4ee1400
	void SetGVMemberID(int memberID);// 0x4ee1384
	void ServerSetShowNicknameValue(bool flag);// 0x4ee12c0
	void ServerSetCampToolNumValue(int Count);// 0x4ee1210
	void Server_RequestCanShowKillThanksUI(const RequestResponseCanShowKillThanksUIContext Context);// 0x4ee113c
	void Server_KillThanksTo(const RequestResponseKillThanksContext Context);// 0x4ee107c
	void ReportTriggerAreaData(byte TriggerAreaType, int TriggerAreaID);// 0x4ee0fc4
	void ReportTaskExtInfo(int TaskID, FString ExtInfo);// 0x4ee0eac
	void ReportTaskData(int TaskID, int process, bool IsCumulative);// 0x4ee0db4
	void ReportSpecialCollection(int ItemID, int Count);// 0x4ee0d00
	void ReportSecretAreaID(int SecretAreaID);// 0x4ee0c84
	void ReportLandLocType(int TouchDownLocType, FString TouchDownLocName);// 0x4ee0bc0
	void ReportLandArea(int TouchDownArea);// 0x4ee0b44
	void ReportActivityEventDataExt(int EventId, int InCount, int ExtraParam, Vector Loc, FString Str);// 0x4ee0948
	void ReportActivityEventData(TLog_ActivityEventType InEventType, int InCount);// 0x4ee0884
	void RefreshWeaponDamageRecordList();// 0x4ee0870
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x4ee07f4
	void RecordUseDragonBoat(uint32 UseDragonBoatId);// 0x4ee0778
	void RecordCharmRankInfo(byte RankIndex);// 0x4ee06fc
	void ReceiveInitWithParams(GameModePlayerParams Params);// 0xffffff8a17adf2b0
	FString[] ParseKillFlowIntoArray(int RecorIndex);// 0x4ee05d8
	void OnReportSpecificBulletUsed(int ItemID, int Count);// 0x4ee0524
	void OnRep_WolfKillNumChange();// 0x4ee0508
	void OnRep_UseVoiceChange();// 0x4ee04ec
	void OnRep_UID();// 0x4ee04d8
	void OnRep_UGCPlayerInfo();// 0x4ee04c4
	void OnRep_UDPSenderAddress();// 0x4ee04a8
	void OnRep_TopSegmentTimes();// 0x4ee048c
	void OnRep_TeamID();// 0x4ee0478
	void OnRep_ShowNicknameChange();// 0x4ee0464
	void OnRep_RobotVoiceMemberId();// 0x4ee0448
	void OnRep_RemarkName();// 0x4ee042c
	void OnRep_PrivacyDetail();// 0x4ee0418
	void OnRep_PlayerKillsChange();// 0x4ee03fc
	void OnRep_PlayerCurWeaponRecord();// 0x4ee03e0
	void OnRep_OpenID();// 0x4ee03cc
	void OnRep_MemberIdInVoiceRoom();// 0x4ee03b8
	void OnRep_MatchLabel();// 0x4ee03a4
	void OnRep_LiveStatus();// 0x4ee0388
	void OnRep_IsBanPublicMic();// 0x4ee0374
	void OnRep_imprint_info();// 0x4ee0358
	void OnRep_CollectItemRecord();// 0x4ee0344
	void OnRep_CanBeWatchedByOB();// 0x4ee0328
	void OnRep_Assists();// 0x4ee030c
	void ModifyMapMarkParticleActor();// 0x4ee02f0
	bool IsTeamMate(UAEPlayerState* PlayerState);// 0x4ee0258
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x4ee01c8
	bool IsSpecialPickItem(int ItemID);// 0x4ee0138
	bool IsRobotMember(int memberID);// 0x4ee00a0
	bool IsPureSpectator();// 0x4ee0068
	bool IsEscapeReasonable();// 0x4ee0028
	bool IsCollectedEventMatchingType(byte EventId);// 0x4edff98
	bool IsAlive();// 0x4edff58
	int GetVIPLevel();// 0x4edff3c
	uint32 GetUserIDByMemberID(int memberID);// 0x4edfea8
	int GetTriggerTimesByAreaType(int AreaType);// 0x4edfe1c
	int GetTriggerTimesByAreaID(int AreaID);// 0x4edfd90
	TrainingStatisticsData GetTrainingStatisticsData();// 0x4edfd38
	TeammateHeroData GetTeammateBattleResultData_Hero();// 0x4edfcfc
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x4edfca4
	FString GetPlayerKey();// 0x4edfc24
	GameModePlayerFlowResultData GetPlayerFlowResultData();// 0x4edfb1c
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x4edfa7c
	GameModePlayerBattleResultData_Hero GetPlayerBattleResultData_Hero();// 0x4edf964
	GameModePlayerBattleResultData_GunMaster GetPlayerBattleResultData_GunMaster(FString Reason);// 0x4edf870
	GameModePlayerBattleResultData_BountyHunter GetPlayerBattleResultData_BountyHunter();// 0x4edf7d0
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x4edf778
	int GetMatchRank();// 0x4edf75c
	int64 GetInt64UID();// 0x4edf740
	int64 GetInt64PlayerKey();// 0x4edf724
	HunterRevivalDataFlow GetHunterRevivalDataFlow();// 0x4edf640
	int GetCharmRankIndex();// 0x4edf60c
	int GetActivityEventTimes(int EventId);// 0x4edf580
	void CollectTrainingStatisticsData();// 0x4edf564
	void ClientSetShowNicknameValue(bool flag);// 0x4edf4e0
	void ClientSetCampToolNumValue(int Count);// 0x4edf464
	void ClientRPC_ClientRespawnCompleteForReplay();// 0x4edf448
	void Client_ResponseKillThanks(const RequestResponseKillThanksContext Context);// 0x4edf388
	void Client_ResponseCanShowKillThanksUI(const RequestResponseCanShowKillThanksUIContext Context);// 0x4edf2b4
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x4edf1f4
	bool CanKillThanksTo(out RequestResponseKillThanksContext Context);// 0x4edf13c
	void AddGiftSentData(UAEPlayerState* ReceiverPlayerState, int GiftID, int Count);// 0x4edf04c
	void AddGiftReceivedData(UAEPlayerState* SenderPlayerState, int GiftID, int Count);// 0x4edef5c

--------------------------------
Class: PlayerRestartConfig
	enum Reason;//[Offset: 0x0, Size: 0x1]// 0x7611f18970
	Transform RestartTransform;//[Offset: 0x10, Size: 0x30]// 0x7611f188f0

--------------------------------
Class: PrivacyProtectDetail
	byte PlatformGenderVisible;//[Offset: 0x0, Size: 0x1]// 0x7611d93c10
	byte SegmentTimesVisible;//[Offset: 0x1, Size: 0x1]// 0x7611d93b90
	uint64[] FriendList;//[Offset: 0x8, Size: 0x10]// 0x7611d93aa0
	bool bDataReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611d93a20

--------------------------------
Class: HitDownPlayerTypeInfoData
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611f08100
	FString PlayerUID;//[Offset: 0x10, Size: 0x10]// 0x7611f08090
	int DamageType;//[Offset: 0x20, Size: 0x4]// 0x7611f08020

--------------------------------
Class: WeaponKillData
	int TotalKillsNum;//[Offset: 0x0, Size: 0x4]// 0x7611f169a0
	int KillEnemyNum;//[Offset: 0x4, Size: 0x4]// 0x7611f16930
	bool NeedReportBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611f168b0

--------------------------------
Class: SuitSkinFlow
	SuitSkinUnitFlow[] flowList;//[Offset: 0x0, Size: 0x10]// 0x7611f15f40

--------------------------------
Class: SuitSkinUnitFlow
	uint64 UID;//[Offset: 0x0, Size: 0x8]// 0x7611f16380
	int ElapseTime;//[Offset: 0x8, Size: 0x4]// 0x7611f16310
	int State;//[Offset: 0xc, Size: 0x4]// 0x7611f162a0
	int SuitID;//[Offset: 0x10, Size: 0x4]// 0x7611f16230
	int LocationX;//[Offset: 0x14, Size: 0x4]// 0x7611f161c0
	int LocationY;//[Offset: 0x18, Size: 0x4]// 0x7611f16150
	int LocationZ;//[Offset: 0x1c, Size: 0x4]// 0x7611f160e0

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]// 0x7611f07a70
	int Count;//[Offset: 0x4, Size: 0x4]// 0x7611f07a00
	Vector Location;//[Offset: 0x8, Size: 0xc]// 0x7611f07980
	int SourceType;//[Offset: 0x14, Size: 0x4]// 0x7611f07910
	int AdditionalParam;//[Offset: 0x18, Size: 0x4]// 0x7611f078a0
	DateTime Time;//[Offset: 0x20, Size: 0x8]// 0x7611f07820
	FString TimeStr;//[Offset: 0x28, Size: 0x10]// 0x7611f077b0

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]// 0x7611f01b20
	int UseCount;//[Offset: 0x4, Size: 0x4]// 0x7611f01ab0

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]// 0x7611f0b1a0
	enum SlotType;//[Offset: 0x4, Size: 0x1]// 0x7611f0b040
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]// 0x7611f0afc0
	int64 TimeStamp;//[Offset: 0x8, Size: 0x8]// 0x7611f0af50
	bool IsFromOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611f0aed0

--------------------------------
Class: VehicleDriveDisData
	int VehicleType;//[Offset: 0x0, Size: 0x4]// 0x7611f05e70
	int VehicleUseCount;//[Offset: 0x4, Size: 0x4]// 0x7611f05e00
	float driveDistance;//[Offset: 0x8, Size: 0x4]// 0x7611f05d90
	float DriveTimeAsDriver;//[Offset: 0xc, Size: 0x4]// 0x7611f05d20
	float DriveTime;//[Offset: 0x10, Size: 0x4]// 0x7611f05cb0
	float VehicleJumpDistanceMax;//[Offset: 0x14, Size: 0x4]// 0x7611f05c40
	float VehicleJumpDistanceMaxWithTeammate;//[Offset: 0x18, Size: 0x4]// 0x7611f05bd0
	VehicleDataPerCircle[] arrDataPerCircle;//[Offset: 0x20, Size: 0x10]// 0x7611f05720

--------------------------------
Class: VehicleDataPerCircle
	int PerCircleIndex;//[Offset: 0x0, Size: 0x4]// 0x7611f05b60
	float DriveTimePerCircle;//[Offset: 0x4, Size: 0x4]// 0x7611f05af0
	float DriveDistancePerCircle;//[Offset: 0x8, Size: 0x4]// 0x7611f05a80
	float DamageAmountPerCircle;//[Offset: 0xc, Size: 0x4]// 0x7611f05a10
	int RuinedAmountPerCircle;//[Offset: 0x10, Size: 0x4]// 0x7611f059a0
	int FuelTimesPerCircle;//[Offset: 0x14, Size: 0x4]// 0x7611f05930
	float FuelCostPerCircle;//[Offset: 0x18, Size: 0x4]// 0x7611f058c0

--------------------------------
Class: FlareGunReport
	int PickUpNum;//[Offset: 0x0, Size: 0x4]// 0x7611f15290
	int FireNum;//[Offset: 0x4, Size: 0x4]// 0x7611f15220
	int CallSuperAirDropSuccessNum;//[Offset: 0x8, Size: 0x4]// 0x7611f151b0
	int CallVehicleDropSuccessNum;//[Offset: 0xc, Size: 0x4]// 0x7611f15140

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 0x4]// 0x7611f04100
	int ArmorID;//[Offset: 0x4, Size: 0x4]// 0x7611f04090
	int BackPackID;//[Offset: 0x8, Size: 0x4]// 0x7611f04020
	int MainWeapon1ID;//[Offset: 0xc, Size: 0x4]// 0x7611f03fb0
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 0x10]// 0x7611f03ec0
	int MainWeapon2ID;//[Offset: 0x20, Size: 0x4]// 0x7611f03e50
	int[] MainWeapon2AttachmentsID;//[Offset: 0x28, Size: 0x10]// 0x7611f03d60
	int ViceWeaponID;//[Offset: 0x38, Size: 0x4]// 0x7611f03cf0
	int[] ViceWeaponAttachmentsID;//[Offset: 0x40, Size: 0x10]// 0x7611f03c00
	int CloseWeaponID;//[Offset: 0x50, Size: 0x4]// 0x7611f03b90
	int[] ThrowWeaponsID;//[Offset: 0x58, Size: 0x10]// 0x7611f03aa0
	int8 IsLuckyClothing;//[Offset: 0x68, Size: 0x1]// 0x7611f03a30

--------------------------------
Class: GameModePlayerTaskDataSim
	int task_id;//[Offset: 0x0, Size: 0x4]// 0x7611f034a0
	int process;//[Offset: 0x4, Size: 0x4]// 0x7611f03430
	FString ext_info;//[Offset: 0x8, Size: 0x10]// 0x7611f033c0

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 0x4]// 0x7611f031b0
	int Count;//[Offset: 0x4, Size: 0x4]// 0x7611f03140

--------------------------------
Class: WeaponDamageRecord
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x7611f02f30
	int KillCount;//[Offset: 0x4, Size: 0x4]// 0x7611f02ec0
	float Damage;//[Offset: 0x8, Size: 0x4]// 0x7611f02e50

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 0x4]// 0x7611f14230
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7611f141b0

--------------------------------
Class: AreaTriggerRecord
	byte AreaType;//[Offset: 0x0, Size: 0x1]// 0x7611f02910
	int AreaID;//[Offset: 0x4, Size: 0x4]// 0x7611f028a0

--------------------------------
Class: ActivityEventReportData
	int EventId;//[Offset: 0x0, Size: 0x4]// 0x7611f014c0
	int Count;//[Offset: 0x4, Size: 0x4]// 0x7611f01450
	Vector Location;//[Offset: 0x8, Size: 0xc]// 0x7611f013d0
	int[] ActivityAddiList;//[Offset: 0x18, Size: 0x10]// 0x7611f012e0
	FString ActivityAddiString;//[Offset: 0x28, Size: 0x10]// 0x7611f01270

--------------------------------
Class: WeaponLobbyInitialData
	int[] BulletTrackSkinList;//[Offset: 0x0, Size: 0x10]// 0x7611d95480

--------------------------------
Class: RedpackData
	int Count;//[Offset: 0x0, Size: 0x4]// 0x7611f07530
	FString RedpackID;//[Offset: 0x8, Size: 0x10]// 0x7611f074c0

--------------------------------
Class: EmoteAnimIData
	int EmoteID;//[Offset: 0x0, Size: 0x4]// 0x7611f00b00
	int EmoteAnimTimes;//[Offset: 0x4, Size: 0x4]// 0x7611f00a90

--------------------------------
Class: GiftSentData
	int GiftID;//[Offset: 0x0, Size: 0x4]// 0x7611f07210
	uint64 ReceiverUID;//[Offset: 0x8, Size: 0x8]// 0x7611f071a0
	int NumberReceived;//[Offset: 0x10, Size: 0x4]// 0x7611f07130

--------------------------------
Class: GiftReceivedData
	int GiftID;//[Offset: 0x0, Size: 0x4]// 0x7611f06f20
	uint64 SenderUID;//[Offset: 0x8, Size: 0x8]// 0x7611f06eb0
	int NumberReceived;//[Offset: 0x10, Size: 0x4]// 0x7611f06e40

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]// 0x7611f12240
	FString GameAppID;//[Offset: 0x10, Size: 0x10]// 0x7611f121d0
	FString OpenID;//[Offset: 0x20, Size: 0x10]// 0x7611f12160
	int8 AreaID;//[Offset: 0x30, Size: 0x1]// 0x7611f120f0
	int8 PlatID;//[Offset: 0x31, Size: 0x1]// 0x7611f12080
	FString ZoneID;//[Offset: 0x38, Size: 0x10]// 0x7611f12010
	uint64 BattleID;//[Offset: 0x48, Size: 0x8]// 0x7611f11fa0
	FString UserName;//[Offset: 0x50, Size: 0x10]// 0x7611f11f30
	uint64 RoleID;//[Offset: 0x60, Size: 0x8]// 0x7611f11ec0
	int8 RoleType;//[Offset: 0x68, Size: 0x1]// 0x7611f11e50
	FString PicURL;//[Offset: 0x70, Size: 0x10]// 0x7611f11de0

--------------------------------
Class: EmotionalMemoryData
	<int,MemoryDataArray> MemoryData;//[Offset: 0x0, Size: 0x50]// 0x7611f10b10

--------------------------------
Class: MemoryDataArray
	MemoryData[] MemoryDataArray;//[Offset: 0x0, Size: 0x10]// 0x7611f10d50

--------------------------------
Class: MemoryData
	enum RecordType;//[Offset: 0x0, Size: 0x1]// 0x7611f110d0
	FString[] Value;//[Offset: 0x8, Size: 0x10]// 0x7611f10fe0
	uint16[] Num;//[Offset: 0x18, Size: 0x10]// 0x7611f10ef0

--------------------------------
Class: WeaponRecord
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x7611f10630
	int FireCount;//[Offset: 0x4, Size: 0x4]// 0x7611f105c0
	int HitCount;//[Offset: 0x8, Size: 0x4]// 0x7611f10550
	int KillCount;//[Offset: 0xc, Size: 0x4]// 0x7611f104e0
	float TotalDamage;//[Offset: 0x10, Size: 0x4]// 0x7611f10470
	int ReloadCount;//[Offset: 0x14, Size: 0x4]// 0x7611f10400
	HitFlow[] HitFlow;//[Offset: 0x38, Size: 0x10]// 0x7611f0fe20

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 0x4]// 0x7611f10390
	int Distance;//[Offset: 0x4, Size: 0x4]// 0x7611f10320
	int IsKill;//[Offset: 0x8, Size: 0x4]// 0x7611f102b0
	float Damage;//[Offset: 0xc, Size: 0x4]// 0x7611f10240
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611f101c0
	bool bFallOnGroundPostHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611f10140
	byte[] PlayerStates;//[Offset: 0x18, Size: 0x10]// 0x7611f10040
	byte HitPos;//[Offset: 0x28, Size: 0x1]// 0x7611f0ffc0

--------------------------------
Class: PlayerStageBattleRecord
	float TotalHurt;//[Offset: 0x0, Size: 0x4]// 0x7611d8f290
	int MaxSegmentLevel;//[Offset: 0x4, Size: 0x4]// 0x7611d8f220
	int TeamLiked;//[Offset: 0x8, Size: 0x4]// 0x7611d8f1b0
	float TotalKD;//[Offset: 0xc, Size: 0x4]// 0x7611d8f140
	int TotalAssist;//[Offset: 0x10, Size: 0x4]// 0x7611d8f0d0
	int MaxHurt;//[Offset: 0x14, Size: 0x4]// 0x7611d8f060
	int MaxKill;//[Offset: 0x18, Size: 0x4]// 0x7611d8eff0
	int TotalKill;//[Offset: 0x1c, Size: 0x4]// 0x7611d8ef80
	int MaxPeakSegmentLevel;//[Offset: 0x20, Size: 0x4]// 0x7611d8ef10
	int SeasonSize;//[Offset: 0x24, Size: 0x4]// 0x7611d8eea0
	int TotalWin;//[Offset: 0x28, Size: 0x4]// 0x7611d8ee30

--------------------------------
Class: PlayerClubTeamInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]// 0x7611d8fd80
	FString ClubTeamName;//[Offset: 0x8, Size: 0x10]// 0x7611d8fd10
	FString ClubTeamLogo;//[Offset: 0x18, Size: 0x10]// 0x7611d8fca0

--------------------------------
Class: UGCPlayerInfo
	int MatchRank;//[Offset: 0x0, Size: 0x4]// 0x7611d90e30
	int VIPLevel;//[Offset: 0x4, Size: 0x4]// 0x7611d90dc0
	int LastRankRate;//[Offset: 0x8, Size: 0x4]// 0x7611d90d50
	int CurrentRankRate;//[Offset: 0xc, Size: 0x4]// 0x7611d90ce0
	<int,UGCPlayerAchievementInfo> AchievementInfoList;//[Offset: 0x10, Size: 0x50]// 0x7611d909c0
	UGCPlayerCustomInfo[] CustomInfoList;//[Offset: 0x60, Size: 0x10]// 0x7611d90740

--------------------------------
Class: UGCPlayerAchievementInfo
	int AchievementID;//[Offset: 0x0, Size: 0x4]// 0x7611d90c70
	int AchievementCount;//[Offset: 0x4, Size: 0x4]// 0x7611d90c00

--------------------------------
Class: UGCPlayerCustomInfo
	FString PropKey;//[Offset: 0x0, Size: 0x10]// 0x7611d90950
	float PropValue;//[Offset: 0x10, Size: 0x4]// 0x7611d908e0

--------------------------------
Class: RequestResponseCanShowKillThanksUIContext
	bool bCanShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611d84cb0
	enum CanShowKillThanksUIOperation;//[Offset: 0x1, Size: 0x1]// 0x7611d84b50
	Actor* TombBox;//[Offset: 0x8, Size: 0x8]// 0x7611d84ad0
	FString UID;//[Offset: 0x10, Size: 0x10]// 0x7611d84a60
	FString IconURL;//[Offset: 0x20, Size: 0x10]// 0x7611d849f0
	int Gender;//[Offset: 0x30, Size: 0x4]// 0x7611d84980
	int PlatformGender;//[Offset: 0x34, Size: 0x4]// 0x7611d84910
	int SegmentLevel;//[Offset: 0x38, Size: 0x4]// 0x7611d848a0
	int PlayerLevel;//[Offset: 0x3c, Size: 0x4]// 0x7611d84830

--------------------------------
Class: RequestResponseKillThanksContext
	int Result;//[Offset: 0x0, Size: 0x4]// 0x7611d85080
	Actor* TombBox;//[Offset: 0x8, Size: 0x8]// 0x7611d85000
	FString UID;//[Offset: 0x10, Size: 0x10]// 0x7611d84f90

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 0x1]// 0x7611e6a9f0
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 0xc]// 0x7611e6a970

--------------------------------
Class: GameModePlayerParams
	uint64 UID;//[Offset: 0x0, Size: 0x8]// 0x7611d9ac30
	FName PlayerType;//[Offset: 0x8, Size: 0x8]// 0x7611d9abc0
	FString PlayerName;//[Offset: 0x10, Size: 0x10]// 0x7611d9ab50
	uint32 PlayerKey;//[Offset: 0x20, Size: 0x4]// 0x7611d9aae0
	uint32 WorldParallelismID;//[Offset: 0x24, Size: 0x4]// 0x7611d9aa70
	int TeamID;//[Offset: 0x28, Size: 0x4]// 0x7611d9aa00
	uint64 RoomTeammatesID;//[Offset: 0x30, Size: 0x8]// 0x7611d9a990
	FString OpenID;//[Offset: 0x38, Size: 0x10]// 0x7611d9a920
	FString RemarkName;//[Offset: 0x48, Size: 0x10]// 0x7611d9a8b0
	int CountryID;//[Offset: 0x58, Size: 0x4]// 0x7611d9a840
	FString Country;//[Offset: 0x60, Size: 0x10]// 0x7611d9a7d0
	FString CountryFullName;//[Offset: 0x70, Size: 0x10]// 0x7611d9a760
	FString CountryIconURL;//[Offset: 0x80, Size: 0x10]// 0x7611d9a6f0
	bool NeedScreenShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]// 0x7611d9a670
	int PlayerBornPointID;//[Offset: 0x94, Size: 0x4]// 0x7611d9a600
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]// 0x7611d9a580
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]// 0x7611d9a500
	bool bIsEnableUGCGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]// 0x7611d9a480
	bool bUGCGMEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1]// 0x7611d9a400
	bool bIsGMWatcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]// 0x7611d9a380
	bool bEagleWatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 0x1]// 0x7611d9a300
	bool bHighPriorityRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 0x1]// 0x7611d9a280
	byte Gender;//[Offset: 0x9f, Size: 0x1]// 0x7611d9a200
	FString PIC_URL;//[Offset: 0xa0, Size: 0x10]// 0x7611d9a190
	int Level;//[Offset: 0xb0, Size: 0x4]// 0x7611d9a120
	int Segment_Level;//[Offset: 0xb4, Size: 0x4]// 0x7611d9a0b0
	int AvatarBoxId;//[Offset: 0xb8, Size: 0x4]// 0x7611d9a040
	int TopSegmentTimes;//[Offset: 0xbc, Size: 0x4]// 0x7611d99fd0
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]// 0x7611d99f50
	GameModePlayerItem[] ItemList;//[Offset: 0xc8, Size: 0x10]// 0x7611d99e50
	GameModePlayerItem[] fireworksInfo;//[Offset: 0xd8, Size: 0x10]// 0x7611d99d50
	GameModePlayerItem[] InteractivePropsItemList;//[Offset: 0xe8, Size: 0x10]// 0x7611d99c50
	SuitSkinData SuitSkinData;//[Offset: 0xf8, Size: 0x30]// 0x7611d99050
	WeaponModData[] WeaponModDatas;//[Offset: 0x128, Size: 0x10]// 0x7611d98b40
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x138, Size: 0x10]// 0x7611d989a0
	GameModePlayerDecalItem[] DecalItemList;//[Offset: 0x148, Size: 0x10]// 0x7611d98800
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0x158, Size: 0x10]// 0x7611d983a0
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0x168, Size: 0x10]// 0x7611d982a0
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0x178, Size: 0x10]// 0x7611d981a0
	FString[] KeepWeaponDataList;//[Offset: 0x188, Size: 0x10]// 0x7611d980b0
	GameModePlayer_WearInfo PlayerWearInfo;//[Offset: 0x198, Size: 0xc0]// 0x7611d98030
	PlayerOBInfo PlayerOBInfo;//[Offset: 0x258, Size: 0x178]// 0x7611d95f20
	GameModePlayerBanChat[] banList;//[Offset: 0x3d0, Size: 0x10]// 0x7611d95c30
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x3e0, Size: 0x10]// 0x7611d958d0
	DeadBoxItem[] deadBoxItemList;//[Offset: 0x3f0, Size: 0x10]// 0x7611d95570
	WeaponLobbyInitialData WeaponLobbyInitialData;//[Offset: 0x400, Size: 0x10]// 0x7611d95360
	PlayerTotalWeaponsConfig PlayerTotalWeaponsConfig;//[Offset: 0x410, Size: 0x18]// 0x7611d94cc0
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x428, Size: 0x40]// 0x7611d947e0
	int[] audioChat;//[Offset: 0x468, Size: 0x10]// 0x7611d946f0
	FName CurrentPlayerState;//[Offset: 0x478, Size: 0x8]// 0x7611d94680
	FName CurrentCharacterState;//[Offset: 0x480, Size: 0x8]// 0x7611d94610
	float SyncedTimestamp;//[Offset: 0x488, Size: 0x4]// 0x7611d945a0
	float DestinyValue;//[Offset: 0x48c, Size: 0x4]// 0x7611d94530
	float WarmScore;//[Offset: 0x490, Size: 0x4]// 0x7611d944c0
	int LeaderCount;//[Offset: 0x494, Size: 0x4]// 0x7611d94450
	uint64 LastGameLeaderUID;//[Offset: 0x498, Size: 0x8]// 0x7611d943e0
	uint64[] LastGameTeammatesUID;//[Offset: 0x4a0, Size: 0x10]// 0x7611d942f0
	int JumpSegmentID;//[Offset: 0x4b0, Size: 0x4]// 0x7611d94280
	uint64 LastGameBattleID;//[Offset: 0x4b8, Size: 0x8]// 0x7611d94210
	int YearBeastWarmScore;//[Offset: 0x4c0, Size: 0x4]// 0x7611d941a0
	float RatingScore;//[Offset: 0x4c4, Size: 0x4]// 0x7611d94130
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]// 0x7611d940b0
	float MaxRankingScore;//[Offset: 0x4cc, Size: 0x4]// 0x7611d94040
	float VSTeamRatingScore;//[Offset: 0x4d0, Size: 0x4]// 0x7611d93fd0
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]// 0x7611d93f50
	bool bObserverHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]// 0x7611d93ed0
	int OBGM;//[Offset: 0x4d8, Size: 0x4]// 0x7611d93e60
	int ObserverEnemyDist;//[Offset: 0x4dc, Size: 0x4]// 0x7611d93df0
	uint32 WatchPlayerKey;//[Offset: 0x4e0, Size: 0x4]// 0x7611d93d80
	uint64 WatchPlayerUID;//[Offset: 0x4e8, Size: 0x8]// 0x7611d93d10
	byte PlatformGender;//[Offset: 0x4f0, Size: 0x1]// 0x7611d93c90
	PrivacyProtectDetail PrivacyDetail;//[Offset: 0x4f8, Size: 0x20]// 0x7611d93900
	bool bIsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]// 0x7611d93880
	int MatchLabel;//[Offset: 0x51c, Size: 0x4]// 0x7611d93810
	bool IsBanPublicMic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]// 0x7611d93790
	int AnchorPlatColorID;//[Offset: 0x524, Size: 0x4]// 0x7611d93720
	int AnchorPlatResID;//[Offset: 0x528, Size: 0x4]// 0x7611d936b0
	FString MedalClubID;//[Offset: 0x530, Size: 0x10]// 0x7611d93640
	int MedalClubLevel;//[Offset: 0x540, Size: 0x4]// 0x7611d935d0
	int PassCardBuyType;//[Offset: 0x544, Size: 0x4]// 0x7611d93560
	int PassCardBuyLevel;//[Offset: 0x548, Size: 0x4]// 0x7611d934f0
	bool IsEnjoyCardOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]// 0x7611d93470
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 0x1]// 0x7611d933f0
	int Likedlevel;//[Offset: 0x550, Size: 0x4]// 0x7611d93380
	CommonFlagData[] CommonFlagData;//[Offset: 0x558, Size: 0x10]// 0x7611d93090
	int64 LastGameResultTime;//[Offset: 0x568, Size: 0x8]// 0x7611d93020
	int64 CorpsID;//[Offset: 0x570, Size: 0x8]// 0x7611d92fb0
	int PlayerStartSerialNum;//[Offset: 0x578, Size: 0x4]// 0x7611d92f40
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]// 0x7611d92ec0
	int special_ver;//[Offset: 0x580, Size: 0x4]// 0x7611d92e50
	bool allow_watch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]// 0x7611d92dd0
	bool allow_like;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 0x1]// 0x7611d92d50
	bool allow_friend_like;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 0x1]// 0x7611d92cd0
	bool allow_teammate_like;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 0x1]// 0x7611d92c50
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]// 0x7611d92bd0
	int CollectedEventType;//[Offset: 0x58c, Size: 0x4]// 0x7611d92b60
	bool bLiveVideoReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]// 0x7611d92ae0
	bool bCollectedEVLiveEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 0x1]// 0x7611d92a60
	PlayerCharmInfo CharmInfo;//[Offset: 0x594, Size: 0x10]// 0x7611d92770
	PlayerPeakInfo PeakInfo;//[Offset: 0x5a8, Size: 0x48]// 0x7611d921e0
	WingManInfo WingManInfo;//[Offset: 0x5f0, Size: 0x58]// 0x7611d91980
	bool IsInspector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]// 0x7611d91900
	int GlideTypeId;//[Offset: 0x64c, Size: 0x4]// 0x7611d91890
	bool bGlideConfigState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]// 0x7611d91810
	int GlideCount;//[Offset: 0x654, Size: 0x4]// 0x7611d917a0
	bool GlideGlobalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]// 0x7611d91720
	bool showIslandNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 0x1]// 0x7611d916a0
	int InitDropId;//[Offset: 0x65c, Size: 0x4]// 0x7611d91630
	int SpecMotionRestCostCount;//[Offset: 0x660, Size: 0x4]// 0x7611d915c0
	int SeasonWeekIndex;//[Offset: 0x664, Size: 0x4]// 0x7611d91550
	int JoinSourceType;//[Offset: 0x668, Size: 0x4]// 0x7611d914e0
	int8 is_regress;//[Offset: 0x66c, Size: 0x1]// 0x7611d91470
	int8 not_counter_ai;//[Offset: 0x66d, Size: 0x1]// 0x7611d91390
	bool bCampPrivileges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66e, Size: 0x1]// 0x7611d91310
	bool bShowAirLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66f, Size: 0x1]// 0x7611d91290
	bool bUseDistanceMeasurement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]// 0x7611d91210
	bool bShowTeammateKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]// 0x7611d91190
	bool bDice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 0x1]// 0x7611d91110
	bool bShowResPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x673, Size: 0x1]// 0x7611d91090
	bool bVoiceChanger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1]// 0x7611d91010
	int iCampToolStatusFromServer;//[Offset: 0x678, Size: 0x4]// 0x7611d90fa0
	bool bAchieveAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1]// 0x7611d90f20
	byte room_team_pos;//[Offset: 0x67d, Size: 0x1]// 0x7611d90ea0
	UGCPlayerInfo UGCPlayerInfo;//[Offset: 0x680, Size: 0x70]// 0x7611d90620
	int[] ConfessionMessage;//[Offset: 0x6f0, Size: 0x10]// 0x7611d90530
	FString playerFaceInfo;//[Offset: 0x700, Size: 0x10]// 0x7611d904c0
	int playerFaceHandleID;//[Offset: 0x710, Size: 0x4]// 0x7611d90450
	int KillThanksCount;//[Offset: 0x714, Size: 0x4]// 0x7611d903e0
	bool bPartiallyKillThanksToOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 0x1]// 0x7611d90360
	bool bPartiallyKillThanksFromOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x719, Size: 0x1]// 0x7611d902e0
	bool bPlayGunMasterVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71a, Size: 0x1]// 0x7611d90260
	int imprint_info;//[Offset: 0x71c, Size: 0x4]// 0x7611d901f0
	bool bNeedRCR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]// 0x7611d90170
	uint64[] LobbyTeammates;//[Offset: 0x728, Size: 0x10]// 0x7611d90080
	PlayerPetInfo PlayerPetInfo;//[Offset: 0x738, Size: 0x8]// 0x7611d8fdf0
	PlayerClubTeamInfo ClubTeamInfo;//[Offset: 0x740, Size: 0x28]// 0x7611d8fb80
	int[] InfectPawnIDList;//[Offset: 0x768, Size: 0x10]// 0x7611d8fa90
	byte CampID;//[Offset: 0x778, Size: 0x1]// 0x7611d8fa10
	DynaConfigInfo[] DynaConfigList;//[Offset: 0x780, Size: 0x10]// 0x7611d8f300
	PlayerStageBattleRecord StageBattleRecord;//[Offset: 0x790, Size: 0x2c]// 0x7611d8ed10
	<int,WeaponSkinEffectResearchMisc> WeaponSkinEffectResearchMiscMap;//[Offset: 0x7c0, Size: 0x50]// 0x7611d8ea60
	bool EnableTombBoxBattleUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]// 0x7611d8e9e0
	<int,int> WeaponUpgradeIdToSkinBaseIDMap;//[Offset: 0x818, Size: 0x50]// 0x7611d8e850
	int BornlandShowCarID;//[Offset: 0x868, Size: 0x4]// 0x7611d8e7e0
	GameModePlayerItem[] ResearchAbilityList;//[Offset: 0x870, Size: 0x10]// 0x7611d8e4f0

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 0x4]// 0x7611d95eb0
	FString Reason;//[Offset: 0x8, Size: 0x10]// 0x7611d95e40
	int ban_type;//[Offset: 0x18, Size: 0x4]// 0x7611d95dd0

--------------------------------
Class: PlayerTotalWeaponsConfig
	int DefaultSelectedIndex;//[Offset: 0x0, Size: 0x4]// 0x7611d952f0
	PlayerWeaponsConfig[] WeaponsConfigList;//[Offset: 0x8, Size: 0x10]// 0x7611d94de0

--------------------------------
Class: PlayerWeaponsConfig
	FString ConfigName;//[Offset: 0x0, Size: 0x10]// 0x7611d95280
	SingleWeaponConfig[] WeaponDataList;//[Offset: 0x10, Size: 0x10]// 0x7611d94f80

--------------------------------
Class: SingleWeaponConfig
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x7611d95210
	int[] AttachmentIDList;//[Offset: 0x8, Size: 0x10]// 0x7611d95120

--------------------------------
Class: AchievementPrize
	int[] AnimationList;//[Offset: 0x0, Size: 0x10]// 0x7611d94bd0
	int[] MedalList;//[Offset: 0x10, Size: 0x10]// 0x7611d94ae0
	int[] NotifyTitleList;//[Offset: 0x20, Size: 0x10]// 0x7611d949f0
	int[] BulleEffectList;//[Offset: 0x30, Size: 0x10]// 0x7611d94900

--------------------------------
Class: PlayerCharmInfo
	int CharmValue;//[Offset: 0x0, Size: 0x4]// 0x7611d929f0
	int CharmLevel;//[Offset: 0x4, Size: 0x4]// 0x7611d92980
	int SeasonId;//[Offset: 0x8, Size: 0x4]// 0x7611d92910
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x7611d92890

--------------------------------
Class: PlayerPeakInfo
	int LastPeakMatchScore;//[Offset: 0x0, Size: 0x4]// 0x7611d92700
	int LastPeakKillScore;//[Offset: 0x4, Size: 0x4]// 0x7611d92690
	int LastPeakRankScore;//[Offset: 0x8, Size: 0x4]// 0x7611d92620
	int LastPeakRank;//[Offset: 0xc, Size: 0x4]// 0x7611d925b0
	int LastPeakKillNum;//[Offset: 0x10, Size: 0x4]// 0x7611d92540
	int PeakSegmentLevel;//[Offset: 0x14, Size: 0x4]// 0x7611d924d0
	FString TeamName;//[Offset: 0x18, Size: 0x10]// 0x7611d92460
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7611d923e0
	int64 JoinTeamTime;//[Offset: 0x30, Size: 0x8]// 0x7611d92370
	FString TeamLogoID;//[Offset: 0x38, Size: 0x10]// 0x7611d92300

--------------------------------
Class: WingManInfo
	int CurrentWingManID;//[Offset: 0x0, Size: 0x4]// 0x7611d92170
	FString CurrentWingManName;//[Offset: 0x8, Size: 0x10]// 0x7611d92100
	bool bFuelNotEnoughHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611d92080
	bool bFuelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x7611d92000
	WingManFuelInfo[] FuelInfoList;//[Offset: 0x20, Size: 0x10]// 0x7611d91f00
	bool bDisplayWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611d91e80
	int WingPlaneCallerID;//[Offset: 0x34, Size: 0x4]// 0x7611d91e10
	int[] EquippedWingmanEffects;//[Offset: 0x38, Size: 0x10]// 0x7611d91d20
	WingManFuelInfo[] EffectsFuelInfoList;//[Offset: 0x48, Size: 0x10]// 0x7611d91aa0

--------------------------------
Class: WingManFuelInfo
	int FuelID;//[Offset: 0x0, Size: 0x4]// 0x7611d91cb0
	int FuelNum;//[Offset: 0x4, Size: 0x4]// 0x7611d91c40

--------------------------------
Class: PlayerPetInfo
	int PetID;//[Offset: 0x0, Size: 0x4]// 0x7611d90010
	bool Park_Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7611d8ff90
	bool Park_Teammate_Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]// 0x7611d8ff10

--------------------------------
Class: WeaponSkinEffectResearchMisc
	int acc_kill_counter;//[Offset: 0x0, Size: 0x4]// 0x7611d8eca0

--------------------------------
Class: TeammateHeroData
	int FinalHeroId;//[Offset: 0x0, Size: 0x4]// 0x7611f09370
	int FinalHeroLevel;//[Offset: 0x4, Size: 0x4]// 0x7611f09300

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x7611f069e0
	uint64 UID;//[Offset: 0x10, Size: 0x8]// 0x7611f06970
	int Kill;//[Offset: 0x18, Size: 0x4]// 0x7611f06900
	FString State;//[Offset: 0x20, Size: 0x10]// 0x7611f06890
	float travelDistance;//[Offset: 0x30, Size: 0x4]// 0x7611f06820
	float marchDistance;//[Offset: 0x34, Size: 0x4]// 0x7611f067b0
	float driveDistance;//[Offset: 0x38, Size: 0x4]// 0x7611f06740
	float NightMarchDistance;//[Offset: 0x3c, Size: 0x4]// 0x7611f066d0
	int KillWolfNum;//[Offset: 0x40, Size: 0x4]// 0x7611f06660
	int OpnedMosnterBoxNum;//[Offset: 0x44, Size: 0x4]// 0x7611f065f0
	float DamageAmount;//[Offset: 0x48, Size: 0x4]// 0x7611f06580
	float ShootWeaponDamageAmount;//[Offset: 0x4c, Size: 0x4]// 0x7611f06510
	float HealAmount;//[Offset: 0x50, Size: 0x4]// 0x7611f064a0
	int AssistNum;//[Offset: 0x54, Size: 0x4]// 0x7611f06430
	int HitDownOther;//[Offset: 0x58, Size: 0x4]// 0x7611f063c0
	int HeadShotNum;//[Offset: 0x5c, Size: 0x4]// 0x7611f06350
	float surviveTime;//[Offset: 0x60, Size: 0x4]// 0x7611f062e0
	float ObserverTime;//[Offset: 0x64, Size: 0x4]// 0x7611f06270
	int RevivalNum;//[Offset: 0x68, Size: 0x4]// 0x7611f06200
	int BeRevivedNum;//[Offset: 0x6c, Size: 0x4]// 0x7611f06190
	int rescueTimes;//[Offset: 0x70, Size: 0x4]// 0x7611f06120
	int DestroyVehicles;//[Offset: 0x74, Size: 0x4]// 0x7611f060b0
	FString[] KillFlow;//[Offset: 0x78, Size: 0x10]// 0x7611f05fc0
	int deduplicate_kill;//[Offset: 0x88, Size: 0x4]// 0x7611f05f50
	float OutsideBlueCircleTime;//[Offset: 0x8c, Size: 0x4]// 0x7611f05ee0
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x90, Size: 0x10]// 0x7611f05580
	int FirstOpenedAirDropBoxNum;//[Offset: 0xa0, Size: 0x4]// 0x7611f05510
	int FirstOpenedMonsterTombBoxNum;//[Offset: 0xa4, Size: 0x4]// 0x7611f054a0
	int FirstOpenedSuperWeaponBoxNum;//[Offset: 0xa8, Size: 0x4]// 0x7611f05430
	float HitEnemyHeadAmount;//[Offset: 0xac, Size: 0x4]// 0x7611f053c0
	float TotalBeenDamageAmount;//[Offset: 0xb0, Size: 0x4]// 0x7611f05350
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]// 0x7611f052d0
	int GamePlayingTime;//[Offset: 0xb8, Size: 0x4]// 0x7611f05260
	int TouchDownAreaID;//[Offset: 0xbc, Size: 0x4]// 0x7611f051f0
	int TouchDownLocTypeID;//[Offset: 0xc0, Size: 0x4]// 0x7611f05180
	FString TouchDownObjectName;//[Offset: 0xc8, Size: 0x10]// 0x7611f05110
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0xd8, Size: 0x10]// 0x7611f05010
	int KillerWeaponId;//[Offset: 0xe8, Size: 0x4]// 0x7611f04fa0
	float KillerDistance;//[Offset: 0xec, Size: 0x4]// 0x7611f04f30
	PVETeammateData[] PVETeammateData;//[Offset: 0xf0, Size: 0x10]// 0x7611f04ab0
	int[] peak_kill_score_list;//[Offset: 0x100, Size: 0x10]// 0x7611f049c0

--------------------------------
Class: PVETeammateData
	int MonsterKillTotalNum;//[Offset: 0x0, Size: 0x4]// 0x7611f04ec0
	int MonsterHeadShootKillTotalNum;//[Offset: 0x4, Size: 0x4]// 0x7611f04e50
	float MonsterDamageAmount;//[Offset: 0x8, Size: 0x4]// 0x7611f04de0
	<int,int> MonsterKillIDToNum;//[Offset: 0x10, Size: 0x50]// 0x7611f04c50

--------------------------------
Class: GameModePlayerFlowResultData.TLogBaseInfo
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x30, Size: 0x10]// 0x7611f0ad30

--------------------------------
Class: TLogBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 0x10]// 0x7611f0ac20
	int8 AreaID;//[Offset: 0x10, Size: 0x1]// 0x7611f0abb0
	int8 PlatID;//[Offset: 0x11, Size: 0x1]// 0x7611f0ab40
	FString ZoneID;//[Offset: 0x18, Size: 0x10]// 0x7611f0aad0
	uint64 BattleID;//[Offset: 0x28, Size: 0x8]// 0x7611f0aa60

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 0x4]// 0x7611f0a810
	int DeerBBQNum;//[Offset: 0x4, Size: 0x4]// 0x7611f0a7a0
	int ChichenBBQNum;//[Offset: 0x8, Size: 0x4]// 0x7611f0a730
	int UseKFNum;//[Offset: 0xc, Size: 0x4]// 0x7611f0a6c0
	int UseUAVNum;//[Offset: 0x10, Size: 0x4]// 0x7611f0a650
	int KFUsingTime;//[Offset: 0x14, Size: 0x4]// 0x7611f0a5e0
	int UAVUsingTime;//[Offset: 0x18, Size: 0x4]// 0x7611f0a570
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 0x4]// 0x7611f0a500
	int SkateboardUsingTime;//[Offset: 0x20, Size: 0x4]// 0x7611f0a490
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 0x4]// 0x7611f0a420
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 0x10]// 0x7611f0a190

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 0x1]// 0x7611f0a3a0
	int KillNum;//[Offset: 0x4, Size: 0x4]// 0x7611f0a330

--------------------------------
Class: GameModePlayerBattleResultData_Hero
	HeroSkillData[] HeroSkillDatas;//[Offset: 0x0, Size: 0x10]// 0x7611f094c0
	int FinalHeroId;//[Offset: 0x10, Size: 0x4]// 0x7611f09450
	int FinalHeroLevel;//[Offset: 0x14, Size: 0x4]// 0x7611f093e0
	<uint64,TeammateHeroData> TeammateDatas;//[Offset: 0x18, Size: 0x50]// 0x7611f090c0

--------------------------------
Class: HeroSkillData
	int HeroID;//[Offset: 0x0, Size: 0x4]// 0x7611f09f40
	int HeroUsingCount;//[Offset: 0x4, Size: 0x4]// 0x7611f09ed0
	HeroBaseInfo HeroRecord;//[Offset: 0x8, Size: 0x20]// 0x7611f09a30
	<int,SkillRecordData> SkillRecords;//[Offset: 0x28, Size: 0x50]// 0x7611f09660

--------------------------------
Class: HeroBaseInfo
	int MaxLevel;//[Offset: 0x0, Size: 0x4]// 0x7611f09e60
	int TimeSeconds;//[Offset: 0x4, Size: 0x4]// 0x7611f09df0
	int KillCount;//[Offset: 0x8, Size: 0x4]// 0x7611f09d80
	int TotalDamage;//[Offset: 0xc, Size: 0x4]// 0x7611f09d10
	int TotalHeal;//[Offset: 0x10, Size: 0x4]// 0x7611f09ca0
	int SaveCount;//[Offset: 0x14, Size: 0x4]// 0x7611f09c30
	int KillCountInAir;//[Offset: 0x18, Size: 0x4]// 0x7611f09bc0
	int TotalDamageInAir;//[Offset: 0x1c, Size: 0x4]// 0x7611f09b50

--------------------------------
Class: SkillRecordData
	<FString,int> RecordList;//[Offset: 0x0, Size: 0x50]// 0x7611f098a0

--------------------------------
Class: GameModePlayerBattleResultData_GunMaster
	GunMaterialData[] GunMaterialDatas;//[Offset: 0x0, Size: 0x10]// 0x7611f08bf0
	int EscapeType;//[Offset: 0x10, Size: 0x4]// 0x7611f08b80
	int BountyNum;//[Offset: 0x14, Size: 0x4]// 0x7611f08b10

--------------------------------
Class: GunMaterialData
	int TypeSpecificID;//[Offset: 0x0, Size: 0x4]// 0x7611f08e00
	int GunMaterialNum;//[Offset: 0x4, Size: 0x4]// 0x7611f08d90

--------------------------------
Class: GameModePlayerBattleResultData_BountyHunter
	int DragonBreathCastTimes;//[Offset: 0x0, Size: 0x4]// 0x7611f088c0
	int[] PlayerAchievementList;//[Offset: 0x8, Size: 0x10]// 0x7611f087d0
	int BountyGold;//[Offset: 0x18, Size: 0x4]// 0x7611f08760

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 0x10]// 0x7611f08510
	int RemainingPlayerCount;//[Offset: 0x10, Size: 0x4]// 0x7611f084a0
	int TotalPlayerCount;//[Offset: 0x14, Size: 0x4]// 0x7611f08430
	int RemainingTeamCount;//[Offset: 0x18, Size: 0x4]// 0x7611f083c0
	int TotalTeamCount;//[Offset: 0x1c, Size: 0x4]// 0x7611f08350
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611f082d0
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x7611f08250
	uint64 Killer;//[Offset: 0x28, Size: 0x8]// 0x7611f081e0
	FString KillerName;//[Offset: 0x30, Size: 0x10]// 0x7611f08170
	HitDownPlayerTypeInfoData[] HitDownPlayersInfoData;//[Offset: 0x40, Size: 0x10]// 0x7611f07e80
	int ShootWeaponShotNum;//[Offset: 0x50, Size: 0x4]// 0x7611f07e10
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x54, Size: 0x4]// 0x7611f07da0
	int HealTimes;//[Offset: 0x58, Size: 0x4]// 0x7611f07d30
	FString[] KillFlow;//[Offset: 0x60, Size: 0x10]// 0x7611f07c40
	int[] KillsInCircle;//[Offset: 0x70, Size: 0x10]// 0x7611f07b50
	float DamageAmountExceptAI;//[Offset: 0x80, Size: 0x4]// 0x7611f07ae0
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x88, Size: 0x10]// 0x7611f07610
	int PickupMonsterTombBoxNum;//[Offset: 0x98, Size: 0x4]// 0x7611f075a0
	<FString,RedpackData> FireworksRedpackData;//[Offset: 0xa0, Size: 0x50]// 0x7611f07280
	GiftSentData[] GiftSentData;//[Offset: 0xf0, Size: 0x10]// 0x7611f06f90
	GiftReceivedData[] GiftReceivedData;//[Offset: 0x100, Size: 0x10]// 0x7611f06ca0
	uint64 parachute_leader_uid;//[Offset: 0x110, Size: 0x8]// 0x7611f06c30
	UseItemFlow[] UseItemFlow;//[Offset: 0x118, Size: 0x10]// 0x7611f06b30
	int destroyVehicleNum;//[Offset: 0x128, Size: 0x4]// 0x7611f06ac0
	int is_escape;//[Offset: 0x12c, Size: 0x4]// 0x7611f06a50
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x130, Size: 0x10]// 0x7611f04820
	Vector LandLocation;//[Offset: 0x140, Size: 0xc]// 0x7611f047a0
	int TopFiveTipsUseResponse;//[Offset: 0x14c, Size: 0x4]// 0x7611f04730
	float SignalHealAmount;//[Offset: 0x150, Size: 0x4]// 0x7611f046c0
	int SignalHealCount;//[Offset: 0x154, Size: 0x4]// 0x7611f04650
	Vector DeadLocation;//[Offset: 0x158, Size: 0xc]// 0x7611f045d0
	FString DeadDamangeType;//[Offset: 0x168, Size: 0x10]// 0x7611f04560
	FString DeadTimeStr;//[Offset: 0x178, Size: 0x10]// 0x7611f044f0
	FString logoutime;//[Offset: 0x188, Size: 0x10]// 0x7611f04480
	float Pronetime;//[Offset: 0x198, Size: 0x4]// 0x7611f04410
	float BeInWaterTime;//[Offset: 0x19c, Size: 0x4]// 0x7611f043a0
	float SwimmingDistance;//[Offset: 0x1a0, Size: 0x4]// 0x7611f04330
	int BeDownTimes;//[Offset: 0x1a4, Size: 0x4]// 0x7611f042c0
	int KnockDownTimes;//[Offset: 0x1a8, Size: 0x4]// 0x7611f04250
	int BeSavedTimes;//[Offset: 0x1ac, Size: 0x4]// 0x7611f041e0
	int PickUpAirDrops;//[Offset: 0x1b0, Size: 0x4]// 0x7611f04170
	EquipmentData EquipmentData;//[Offset: 0x1b8, Size: 0x70]// 0x7611f03910
	int Rank;//[Offset: 0x228, Size: 0x4]// 0x7611f038a0
	int TotalScore;//[Offset: 0x22c, Size: 0x4]// 0x7611f03830
	int FollowState;//[Offset: 0x230, Size: 0x4]// 0x7611f037c0
	int InviteTimes;//[Offset: 0x234, Size: 0x4]// 0x7611f03750
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]// 0x7611f036d0
	int GamePlayingTime;//[Offset: 0x23c, Size: 0x4]// 0x7611f03660
	int TouchDownAreaID;//[Offset: 0x240, Size: 0x4]// 0x7611f035f0
	int TouchDownLocTypeID;//[Offset: 0x244, Size: 0x4]// 0x7611f03580
	FString TouchDownObjectName;//[Offset: 0x248, Size: 0x10]// 0x7611f03510
	GameModePlayerTaskDataSim[] CompletedTaskList;//[Offset: 0x258, Size: 0x10]// 0x7611f03220
	ReportCollection[] SpecialCollectionList;//[Offset: 0x268, Size: 0x10]// 0x7611f02fa0
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x278, Size: 0x10]// 0x7611f02cb0
	int[] SecretAreaIDList;//[Offset: 0x288, Size: 0x10]// 0x7611f02bc0
	int KillNumInVehicle;//[Offset: 0x298, Size: 0x4]// 0x7611f02b50
	float TotalSprintDistance;//[Offset: 0x29c, Size: 0x4]// 0x7611f02ae0
	float TotalBeenDamageAmount;//[Offset: 0x2a0, Size: 0x4]// 0x7611f02a70
	float DestroyVehicleWheelNum;//[Offset: 0x2a4, Size: 0x4]// 0x7611f02a00
	int BreakDoorNum;//[Offset: 0x2a8, Size: 0x4]// 0x7611f02990
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0x2b0, Size: 0x10]// 0x7611f02700
	int[] BuildFlow;//[Offset: 0x2c0, Size: 0x10]// 0x7611f02610
	int[] DestroyShelterFlow;//[Offset: 0x2d0, Size: 0x10]// 0x7611f02520
	float HitShelterDamage;//[Offset: 0x2e0, Size: 0x4]// 0x7611f024b0
	int ZombieKilledUsingTraps;//[Offset: 0x2e4, Size: 0x4]// 0x7611f02440
	float ShelterTakeDamage;//[Offset: 0x2e8, Size: 0x4]// 0x7611f023d0
	int PlayerSetLevel;//[Offset: 0x2ec, Size: 0x4]// 0x7611f02360
	float PlayerSetExp;//[Offset: 0x2f0, Size: 0x4]// 0x7611f022f0
	MonsterTreasureBoxData[] MonsterTreasureBoxOpenFlow;//[Offset: 0x2f8, Size: 0x10]// 0x7611f01ff0
	int MonsterTreasureBoxGetNum;//[Offset: 0x308, Size: 0x4]// 0x7611f01f80
	int MonsterTreasureBoxDefendNum;//[Offset: 0x30c, Size: 0x4]// 0x7611f01f10
	BuildMaterialData[] BuildMaterialGetList;//[Offset: 0x310, Size: 0x10]// 0x7611f01e10
	BuildMaterialData[] BuildMaterialUseList;//[Offset: 0x320, Size: 0x10]// 0x7611f01b90
	UseItemFlow[] UseSpecificBulletFlow;//[Offset: 0x330, Size: 0x10]// 0x7611f01910
	int WeaponCreateStuckAutoRecoverNum;//[Offset: 0x340, Size: 0x4]// 0x7611f018a0
	PVESelfData[] PVESelfData;//[Offset: 0x348, Size: 0x10]// 0x7611f01530
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x358, Size: 0x10]// 0x7611f010d0
	FString[] DestroyVehicleFlow;//[Offset: 0x368, Size: 0x10]// 0x7611f00fe0
	int UseHelicoperNum;//[Offset: 0x378, Size: 0x4]// 0x7611f00f70
	float UseHelicoperDistance;//[Offset: 0x37c, Size: 0x4]// 0x7611f00f00
	int UseDragonBoatNum;//[Offset: 0x380, Size: 0x4]// 0x7611f00e90
	byte CharmRankIndex;//[Offset: 0x384, Size: 0x1]// 0x7611f00e10
	int DrivingHelicopterTime;//[Offset: 0x388, Size: 0x4]// 0x7611f00da0
	int InHelicopterTime;//[Offset: 0x38c, Size: 0x4]// 0x7611f00d30
	int ChangedYearBeastWarmScore;//[Offset: 0x390, Size: 0x4]// 0x7611f00cc0
	float GlidingDistance;//[Offset: 0x394, Size: 0x4]// 0x7611f00c50
	int BreakGlassNum;//[Offset: 0x398, Size: 0x4]// 0x7611f00be0
	int ClimbObstacleNum;//[Offset: 0x39c, Size: 0x4]// 0x7611f00b70
	EmoteAnimIData[] EmoteAnimIDataArray;//[Offset: 0x3a0, Size: 0x10]// 0x7611f008f0
	int BattleshipDestroiedNum;//[Offset: 0x3b0, Size: 0x4]// 0x7611f00880
	int BattleshipShieldBrokenNum;//[Offset: 0x3b4, Size: 0x4]// 0x7611f00810
	int CampToolNum;//[Offset: 0x3b8, Size: 0x4]// 0x7611f007a0
	int CallWingPlaneTimes;//[Offset: 0x3bc, Size: 0x4]// 0x7611f00730
	<int,WeaponSkinKillDetail> kill_detail;//[Offset: 0x3c0, Size: 0x50]// 0x7611f00480
	<uint64,uint16> MutualAid;//[Offset: 0x410, Size: 0x50]// 0x7611f002f0
	<uint64,uint16> WhoRescuedMe;//[Offset: 0x460, Size: 0x50]// 0x7611f00160
	<uint64,uint16> IRescuedWhom;//[Offset: 0x4b0, Size: 0x50]// 0x7611efffd0
	<uint64,uint16> WhoRevivedMe;//[Offset: 0x500, Size: 0x50]// 0x7611effe40
	<uint64,uint16> IRevivedWhom;//[Offset: 0x550, Size: 0x50]// 0x7611effcb0
	int RespawnTimes;//[Offset: 0x5a0, Size: 0x4]// 0x7611effc40

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 0x4]// 0x7611f02280
	Vector BoxLocation;//[Offset: 0x4, Size: 0xc]// 0x7611f02200
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 0x8]// 0x7611f02190

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 0x4]// 0x7611f01da0
	int MatCount;//[Offset: 0x4, Size: 0x4]// 0x7611f01d30

--------------------------------
Class: PVESelfData
	FString[] ZombieKillFlow;//[Offset: 0x0, Size: 0x10]// 0x7611f017b0
	float DamageFromMonsterAmount;//[Offset: 0x10, Size: 0x4]// 0x7611f01740
	int SurvivalSeconds;//[Offset: 0x14, Size: 0x4]// 0x7611f016d0

--------------------------------
Class: WeaponSkinKillDetail
	int kill_counter;//[Offset: 0x0, Size: 0x4]// 0x7611f006c0

--------------------------------
Class: HunterRevivalDataFlow
	HunterRevivalData[] HunterRevivalDatas;//[Offset: 0x0, Size: 0x10]// 0x7611eff3e0

--------------------------------
Class: HunterRevivalData
	uint32 RevivalTime;//[Offset: 0x0, Size: 0x4]// 0x7611eff660
	uint32 RevivalType;//[Offset: 0x4, Size: 0x4]// 0x7611eff5f0
	FString RevivalPosStr;//[Offset: 0x8, Size: 0x10]// 0x7611eff580

--------------------------------
Class: DynamicBattleRankInfo
	int BattleRank;//[Offset: 0x0, Size: 0x4]// 0x7611d9b140
	uint64 PlayerUID;//[Offset: 0x8, Size: 0x8]// 0x7611d9b0d0
	int RevivalTimes;//[Offset: 0x10, Size: 0x4]// 0x7611d9b060
	int64[] KillerUIDs;//[Offset: 0x18, Size: 0x10]// 0x7611d9af70
	int DeadTimes;//[Offset: 0x28, Size: 0x4]// 0x7611d9af00

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	bool isNewlyApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]// 0x75a899d680
	delegate WeaponAttachmentChangedDelegate;//[Offset: 0x130, Size: 0x10]// 0x75a899d700
	delegate ItemBeforeRemovedDelegate;//[Offset: 0x140, Size: 0x10]// 0x75a899d780
	delegate ItemListUpdatedDelegate;//[Offset: 0x150, Size: 0x10]// 0x75a899d800
	delegate SingleItemUpdatedDelegate;//[Offset: 0x160, Size: 0x10]// 0x75a899d880
	delegate SingleItemDeleteDelegate;//[Offset: 0x170, Size: 0x10]// 0x75a899d900
	delegate BatchItemUpdateDelegate;//[Offset: 0x180, Size: 0x10]// 0x75a899d980
	delegate BatchItemDeleteDelegate;//[Offset: 0x190, Size: 0x10]// 0x75a899da00
	delegate CapacityUpdatedDelegate;//[Offset: 0x1a0, Size: 0x10]// 0x75a899da80
	delegate ItemOperationDelegate;//[Offset: 0x1b0, Size: 0x10]// 0x75a899db00
	delegate ItemOperationInfoDelegate;//[Offset: 0x1c0, Size: 0x10]// 0x75a899db80
	delegate ItemOperationFailedDelegate;//[Offset: 0x1d0, Size: 0x10]// 0x75a899dc00
	delegate ItemClearAllDelegate;//[Offset: 0x1e0, Size: 0x10]// 0x75a899dc80
	delegate ItemInitialPickupDelegate;//[Offset: 0x1f0, Size: 0x10]// 0x75a899dd00
	delegate SuitSkinUpdatedDelegate;//[Offset: 0x200, Size: 0x10]// 0x75a899dd80
	delegate SuitSkinCDDelegate;//[Offset: 0x210, Size: 0x10]// 0x75a899de00
	delegate TimeLimitItemUpdateDelegate;//[Offset: 0x220, Size: 0x10]// 0x75a899de80
	delegate ItemTakenDelegate;//[Offset: 0x230, Size: 0x10]// 0x75a899df00
	delegate BackPackCapacityChangedDelegate;//[Offset: 0x240, Size: 0x10]// 0x75a899df80
	delegate UGC_ItemOperationFailedDelegate;//[Offset: 0x250, Size: 0x10]// 0x75a899e000
	delegate UGC_ItemOperationDelegate;//[Offset: 0x260, Size: 0x10]// 0x75a899e080
	delegate UGC_ItemBeforeRemovedDelegate;//[Offset: 0x270, Size: 0x10]// 0x75a899e100
	delegate UGC_CapacityUpdatedDelegate;//[Offset: 0x280, Size: 0x10]// 0x75a899e180
	delegate ItemUpdatedDelegate;//[Offset: 0x290, Size: 0x10]// 0x75a899e200
	delegate ItemRemovedDelegate;//[Offset: 0x2a0, Size: 0x10]// 0x75a899e280
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x2b0, Size: 0x10]// 0x75a899e380
	LimitItem[] LimitItemList;//[Offset: 0x2c0, Size: 0x10]// 0x75a899e480
	bool showBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]// 0x75a899e500
	ItemDefineID[] DisuseButUndropItemList;//[Offset: 0x2d8, Size: 0x10]// 0x75a899e600
	BattleItemData[] ItemList;//[Offset: 0x2e8, Size: 0x10]// 0x75a899e700
	<ItemDefineID,int> ItemListIndex;//[Offset: 0x2f8, Size: 0x50]// 0x75a79d6cc0
	IncNetArrayNew ItemListNetNew;//[Offset: 0x348, Size: 0xc0]// 0x75a899e800
	IncNetArrayNew ItemListNetCacheNew;//[Offset: 0x408, Size: 0xc0]// 0x75a899e880
	ItemDefineID[] BroadcastInsertItemList;//[Offset: 0x4c8, Size: 0x10]// 0x75a899e980
	ItemDefineID[] BroadcastUpdateItemList;//[Offset: 0x4d8, Size: 0x10]// 0x75a899ea80
	ItemDefineID[] BroadcastDeleteItemList;//[Offset: 0x4e8, Size: 0x10]// 0x75a899eb80
	<ItemDefineID,BattleItemNetNew> CurrentEquippingItemList;//[Offset: 0x4f8, Size: 0x50]// 0x75a79d6d80
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]// 0x75a899ed00
	bool AutoEquipAimAKM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1]// 0x75a899ed80
	SuitSkinList SuitSkinList;//[Offset: 0x550, Size: 0x20]// 0x75a899ee00
	GlidSkinUnit[] GlidSkinList;//[Offset: 0x570, Size: 0x10]// 0x75a899ef00
	ItemDefineID SuitDefaultHead;//[Offset: 0x580, Size: 0x18]// 0x75a899ef80
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x5a0, Size: 0x10]// 0x75a88c0080
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x5b0, Size: 0x50]// 0x75a79d6e40
	<ItemDefineID,ItemProxyBase*> ItemProxyMap;//[Offset: 0x600, Size: 0x50]// 0x75a79d6f00
	int CapacityThreshold;//[Offset: 0x650, Size: 0x4]// 0x75a80ec520
	float Capacity;//[Offset: 0x654, Size: 0x4]// 0x75a80ec590
	float OtherCapacity;//[Offset: 0x658, Size: 0x4]// 0x75a80ec600
	float OccupiedCapacity;//[Offset: 0x65c, Size: 0x4]// 0x75a80ec670
	<ItemDefineID,BattleItemPickupInfo> InitialItemPickupInfoCached;//[Offset: 0x678, Size: 0x50]// 0x75a79d6fc0
	int virtualitemid;//[Offset: 0x6c8, Size: 0x4]// 0x75a80ec6e0
	int[] LimitedClothAvatarIDArray;//[Offset: 0x6d0, Size: 0x10]// 0x75a88c0480
	void UseSuitSkinServer(int Index);// 0x4e6bc00
	void UseSuitSkinClient(int Index);// 0x4e6bb84
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x4e6ba48
	void UseInitialItemInBackpack();// 0x4e6ba34
	bool UseInitialItem(const BattleItemHandleBase* ItemHandle, out const BattleItemPickupInfo PickupInfo);// 0x4e6b900
	void UpdatePlanWeaponAdd(bool isApply, out const WeaponUsefulCfg[] OldWeaponCfgList, out const WeaponUsefulCfg[] NewWeaponCfgList);// 0x4e6b768
	float UpdateOtherCapacity();// 0x4e6b72c
	float UpdateCapacity();// 0x4e6b6f0
	void UnlockUpdateItemListReceive();// 0x4e6b6dc
	void UnEquipItem(ItemDefineID DefineID);// 0x4e6b650
	void TryMergeItemHandles(ItemDefineID DefineID);// 0x4e6b5c4
	bool TestPickupItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x4e6b334
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x4e6b214
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x4e6b120
	void SetSuitDefaultHead(out const ItemDefineID InTargetItem);// 0x4e6b090
	void ServerUpdatePlanLua(bool isApply, out const WeaponUsefulCfg[] weaponCfgList);// 0xffffff8a17adf2b0
	void ServerUpdatePlan(bool isApply, const WeaponUsefulCfg[] weaponCfgList);// 0x4e6af58
	void ServerSetShowBounty(bool bShowBounty);// 0x4e6ae94
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x4e6ad6c
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x4e6ac4c
	void RemoveItemHandleByIDSet(out const <int> ItemIDSet);// 0x4e6ab48
	bool RemoveItemHandle(out const ItemDefineID DefineID);// 0x4e6aa9c
	void ReceiveItemListNew();// 0x4e6aa80
	void ReceiveCapacity();// 0x4e6aa64
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x4e6a7cc
	bool PickupInitialItem(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, bool bUseItem);// 0x4e6a62c
	void OnWorldTimeUpdateDelegate(float NewServerTimeSeconds);// 0x4e6a5b0
	void OnRep_SuitSkinListNet();// 0x4e6a59c
	void OnRep_specialCountLimit();// 0x4e6a588
	void OnRep_showBounty();// 0x4e6a574
	void OnRep_OtherCapacity();// 0x4e6a560
	void OnRep_ItemListNetNew();// 0x4e6a54c
	void OnRep_Capacity();// 0x4e6a538
	void NotifyItemUpdated(out const ItemDefineID DefineID);// 0x4e6a4a0
	void NotifyItemRemoved(out const ItemDefineID DefineID);// 0x4e6a408
	void NotifyItemListUpdated();// 0x4e6a3ec
	void NotifyCapacityUpdated();// 0x4e6a3d0
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x4e6a32c
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x4e6a26c
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x4e6a1b4
	void ModifyAimNotAutoUseForAKM(bool bEquipAimAKM);// 0x4e6a0f0
	void ModifyAimNotAutoUse(bool bEequipAim);// 0x4e6a02c
	WeaponUsefulCfg[] MergeWeaponCfg(out const WeaponUsefulCfg[] OldWeaponCfgList, out const WeaponUsefulCfg[] DiffWeaponCfgList);// 0x4e69e40
	void LockUpdateItemListReceive();// 0x4e69e2c
	FString ItemsToString();// 0x4e69dac
	bool IsNewPlanAttachNeedOnWeapon(int AttachID, int WeaponID, int OtherAttachID);// 0xffffff8a17adf2b0
	bool IsNewPlanApply();// 0xffffff8a17adf2b0
	ItemUsefulType IsItemUsefulInner(ActorComponent* weaponComp, out const ItemDefineID DefineID);// 0xffffff8a17adf2b0
	bool IsAutoUse(int ItemID);// 0xffffff8a17adf2b0
	void InitLua();// 0xffffff8a17adf2b0
	bool HasItemBySubType(int SubType);// 0x4e69d1c
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x4e69c54
	World* GetWorld_BP();// 0x4e69c20
	enum GetTimeLimitStatus(ItemDefineID DefineID);// 0x4e69b84
	float GetTimeLimitStartRemainingTime(ItemDefineID DefineID);// 0x4e69ae8
	float GetTimeLimitEndRemainingTime(ItemDefineID DefineID);// 0x4e69a4c
	bool GetSwitcherCfgList(FString ConfigName);// 0xffffff8a17adf2b0
	int GetSuitSkinNum();// 0x4e69a30
	ItemDefineID GetSuitDefaultHead();// 0x4e699e4
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x4e6984c
	<ItemDefineID,ItemProxyBase*> GetItemProxyMap();// 0x4e6980c
	void GetItemListByTypeSpecificID(int TypeSpecificID, out BattleItemData[] OutItemList);// 0x4e6973c
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x4e6968c
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x4e6964c
	ItemHandleBase*[] GetItemHandleList();// 0x4e695c0
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x4e694c0
	bool GetIsOpenLimitCloseStatus(out const ItemDefineID DefineID);// 0x4e69414
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x4e69314
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x4e6925c
	BattleItemData[] GetAllItemList();// 0x4e69224
	void ForceNetUpdate();// 0x4e69208
	void EquipItem(ItemDefineID DefineID);// 0x4e6917c
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x4e6905c
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x4e68f78
	void DestroyLua();// 0xffffff8a17adf2b0
	void DelayToUseInitialItemInBackpack();// 0x4e68f64
	BattleItemProxyBase* CreateItemProxyInternal(ItemDefineID DefineID);// 0x4e68ec0
	ItemProxyBase* CreateItemProxy(ItemDefineID DefineID);// 0x4e68e1c
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x4e68d78
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x4e68cd4
	void CreateBattleItemHandleAsync(ItemDefineID DefineID);// 0xffffff8a17adf2b0
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x4e68bfc
	bool ClientUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x4e68ac0
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x4e68a38
	void ClientSuitSkinIntoCD(float CDSkill);// 0x4e689b4
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x4e688a8
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x4e6879c
	void ClearItems();// 0x4e68780
	int CheckCapacityForItem(ItemDefineID DefineID, int Count);// 0x4e686a8
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x4e68608
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x4e68560
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x4e6845c
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x4e68358
	void BroadcastInitialPickupDelegate();// 0x4e68344
	bool BatchAddItemHandle(out const ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x4e68258
	bool AddItemHandle(out const ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x4e6816c
	void AddClientItemHandle(BattleItemHandleBase* ItemHandle);// 0x4e680f0

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 0x4]// 0x76119bc780
	int cur_count;//[Offset: 0x4, Size: 0x4]// 0x76119bc7f0
	int total_count;//[Offset: 0x8, Size: 0x4]// 0x76119bc860

--------------------------------
Class: LimitItem
	int item_type;//[Offset: 0x0, Size: 0x4]// 0x76119b7460
	int SubType;//[Offset: 0x4, Size: 0x4]// 0x76119b74d0
	int Num;//[Offset: 0x8, Size: 0x4]// 0x76119b7540

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x40, Size: 0x4]// 0x7611d76150
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]// 0x7611d760d0
	bool bCanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]// 0x7611d76050
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x48, Size: 0x10]// 0x7611d75f50
	BattleItemFeatureData FeatureData;//[Offset: 0x58, Size: 0x18]// 0x7611d759f0
	BattleItemTimeLimitData TimeLimitData;//[Offset: 0x70, Size: 0x8]// 0x7611d757f0
	ItemAssociation[] Associations;//[Offset: 0x78, Size: 0x10]// 0x7611d756f0

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]// 0x7611d755d0
	FString Name;//[Offset: 0x18, Size: 0x10]// 0x7611d75560
	FString Icon;//[Offset: 0x28, Size: 0x10]// 0x7611d754f0
	ItemHandleBase* ItemHandle;//[Offset: 0x38, Size: 0x8]// 0x7611d75470

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x28, Size: 0x4]// 0x7611d74d70
	int MaxCount;//[Offset: 0x2c, Size: 0x4]// 0x7611d74d00
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611d74c80
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]// 0x7611d74c00
	delegate OnWeakAssociationItemHandleChanged;//[Offset: 0x38, Size: 0x10]// 0x7611d74b80
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x48, Size: 0x50]// 0x7611d749e0
	ItemAssociation[] WeakAssociate;//[Offset: 0x98, Size: 0x10]// 0x7611d748e0
	ItemDefineID DefineID;//[Offset: 0xa8, Size: 0x18]// 0x7611d74860
	interface class * OwningContainer;//[Offset: 0xc8, Size: 0x10]// 0x7611d747e0
	void SetAssociation(FName Name, ItemAssociation Association);// 0x4916914
	void RemoveWeakAssociation(ItemAssociation ItemAss);// 0x491685c
	void RemoveAssociation(FName Name);// 0x49167e0
	void Init(ItemDefineID InDefineID);// 0x491674c
	ItemAssociation[] GetWeakAssociationList();// 0x49166ac
	ItemAssociation GetWeakAssociation(int AssIdx);// 0x4916608
	ItemDefineID GetDefineID();// 0x49165b8
	interface classNone GetContainer();// 0x4916594
	<FName,ItemAssociation> GetAssociationMap();// 0x491655c
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x491648c
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x49163d8
	ItemAssociation GetAssociation(FName Name);// 0x4916334
	void AddWeakAssociation(ItemAssociation Association);// 0x491627c
	void AddAssociation(FName Name, ItemAssociation Association);// 0x4916184

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 0x8]// 0x7611d61660
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x18]// 0x7611d612f0
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 0x8]// 0x7611d61270

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 0x4]// 0x7611d75ee0
	int MaxCount;//[Offset: 0x4, Size: 0x4]// 0x7611d75e70
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611d75df0
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x7611d75d70
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]// 0x7611d75cf0
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]// 0x7611d75c70
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x7611d75bf0
	int SortingPriority;//[Offset: 0x10, Size: 0x4]// 0x7611d75b80
	int ItemType;//[Offset: 0x14, Size: 0x4]// 0x7611d75b10

--------------------------------
Class: BattleItemTimeLimitData
	float TimeStart;//[Offset: 0x0, Size: 0x4]// 0x7611d75980
	float TimeEnd;//[Offset: 0x4, Size: 0x4]// 0x7611d75910

--------------------------------
Class: IncNetArrayNew
	NetArrayUnitNew[] IncArray;//[Offset: 0x0, Size: 0x10]// 0x7611ff88e0
	<ItemDefineID,int> ArrayIndex;//[Offset: 0x10, Size: 0x50]// 0x7611ff8740
	NetArrayUnUsePool UnUsePool;//[Offset: 0x60, Size: 0x60]// 0x7611ff8530

--------------------------------
Class: NetArrayUnitNew
	BattleItemNetNew Unit;//[Offset: 0x0, Size: 0x68]// 0x7611ff8ce0
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]// 0x7611ff8c60
	enum ItemRepType;//[Offset: 0x69, Size: 0x1]// 0x7611ff8b00
	byte ItemUpdateStamp;//[Offset: 0x6a, Size: 0x1]// 0x7611ff8a80

--------------------------------
Class: BattleItemNetNew
	ItemDefineIDNet DefineIDNet;//[Offset: 0x0, Size: 0x10]// 0x7611ff9610
	int Count;//[Offset: 0x28, Size: 0x4]// 0x7611ff95a0
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7611ff9520
	bool bCanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]// 0x7611ff94a0
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x30, Size: 0x10]// 0x7611ff93a0
	BattleItemTimeLimitData TimeLimitData;//[Offset: 0x40, Size: 0x8]// 0x7611ff9320
	ItemAssociationNet[] AssociationsNet;//[Offset: 0x48, Size: 0x10]// 0x7611ff8f00
	ItemAssociation[] Associations;//[Offset: 0x58, Size: 0x10]// 0x7611ff8e00

--------------------------------
Class: ItemDefineIDNet
	int TypeSpecificID;//[Offset: 0x0, Size: 0x4]// 0x7611ff9230
	uint64 InstanceID;//[Offset: 0x8, Size: 0x8]// 0x7611ff91c0

--------------------------------
Class: ItemAssociationNet
	byte AssociationType;//[Offset: 0x0, Size: 0x1]// 0x7611ff92a0
	ItemDefineIDNet itemNet;//[Offset: 0x8, Size: 0x10]// 0x7611ff90a0

--------------------------------
Class: NetArrayUnUsePool
	int[] ArrayPool;//[Offset: 0x0, Size: 0x10]// 0x7611ff8650

--------------------------------
Class: SuitSkinList
	SuitSkinUnit[] SuitSkinList;//[Offset: 0x0, Size: 0x10]// 0x760d23a700
	int currUseIndex;//[Offset: 0x10, Size: 0x4]// 0x76119bcb00
	float CDTime;//[Offset: 0x14, Size: 0x4]// 0x76119bcb70
	bool SuitSkinOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x760d23a780
	int willUseIndexBeforeSkill;//[Offset: 0x1c, Size: 0x4]// 0x76119bcbe0

--------------------------------
Class: SuitSkinUnit
	int stype_type;//[Offset: 0x0, Size: 0x4]// 0x76119bc8d0
	int Slot;//[Offset: 0x4, Size: 0x4]// 0x76119bc940
	int style_id;//[Offset: 0x8, Size: 0x4]// 0x76119bc9b0
	bool lock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x760d23a200
	ItemDefineID[] ItemDefineList;//[Offset: 0x10, Size: 0x10]// 0x760d23a300
	GameModePlayer_WearInfo suitWear;//[Offset: 0x20, Size: 0xc0]// 0x760d23a380
	Suit_WearInfo suitWearNet;//[Offset: 0xe0, Size: 0x18]// 0x760d23a500
	ItemDefineID[] WearItemList;//[Offset: 0xf8, Size: 0x10]// 0x760d23a600

--------------------------------
Class: Suit_WearInfo
	GameModePlayer_WearItem[] EquipedSkinList;//[Offset: 0x0, Size: 0x10]// 0x760d23a480
	int WeaponSkinAvatarListCount;//[Offset: 0x10, Size: 0x4]// 0x76119bca20
	int VehicleSkinAvatarListCount;//[Offset: 0x14, Size: 0x4]// 0x76119bca90

--------------------------------
Class: ItemProxyBase.Object

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 0x8]// 0x7611d77260
	int Count;//[Offset: 0x8, Size: 0x4]// 0x7611d771f0
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x10, Size: 0x10]// 0x7611d770f0
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611d77070
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x28, Size: 0x20]// 0x7611d76ff0
	bool bTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x7611d76f70

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 0x18]// 0x7611d75210
	FName TargetAssociationName;//[Offset: 0x18, Size: 0x8]// 0x7611d751a0

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]// 0x7611d785f0
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xe0, Size: 0x10]// 0x7611d784f0
	BattleItemTimeLimitInfo TimeLimit;//[Offset: 0xf0, Size: 0x14]// 0x7611d780b0
	float UnitWeight;//[Offset: 0x104, Size: 0x4]// 0x7611d78040
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]// 0x7611d77fc0
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]// 0x7611d77f40
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1]// 0x7611d77ec0
	bool CanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1]// 0x7611d77e40
	void SetClientItemContainer(out const interface classNone ItemContainer);// 0x490d318
	bool IsNeedRepDefinedID();// 0x490d2d8
	bool HanldeCleared();// 0x490d298
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x490d1a8
	bool HandleTryDisuse(enum Reason);// 0x490d110
	bool HandleTake(int TakeCount, int TotalCount);// 0x490d040
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x490cda0
	bool HandleEnable(bool bEnable);// 0x490cd00
	bool HandleDrop(int InCount, enum Reason);// 0x490cc2c
	bool HandleDisuse(enum Reason);// 0x490cb94
	World* GetWorldInternal();// 0x490cb58
	ItemDefineID GetReadyPakItemDefineID();// 0x490cb04
	BattleItemData ExtractItemData();// 0x490ca5c
	bool ClientHandleUse(BattleItemUseTarget Target, enum Reason);// 0x490c96c

--------------------------------
Class: BattleItemTimeLimitInfo
	enum TimeLimitType;//[Offset: 0x0, Size: 0x1]// 0x7611d78390
	float TimeStart;//[Offset: 0x4, Size: 0x4]// 0x7611d78320
	float TimeEnd;//[Offset: 0x8, Size: 0x4]// 0x7611d782b0
	int CircleStart;//[Offset: 0xc, Size: 0x4]// 0x7611d78240
	int CircleEnd;//[Offset: 0x10, Size: 0x4]// 0x7611d781d0

--------------------------------
Class: WeaponUsefulCfg
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x76119bea80
	int[] attachmentList;//[Offset: 0x8, Size: 0x10]// 0x760d23e000
	int BulletNum;//[Offset: 0x18, Size: 0x4]// 0x76119be9a0

--------------------------------
Class: ItemUsefulType
	int PickUsefulCount;//[Offset: 0x0, Size: 0x4]// 0x76119bf5e0
	bool bColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x760d23f180

--------------------------------
Class: BattleItemProxyBase.ItemProxyBase.Object
	BattleItemData ItemData;//[Offset: 0x30, Size: 0x88]// 0x75a7b5a380
	BackpackButtonInfo[] ClickInfoList;//[Offset: 0xb8, Size: 0x10]// 0x75a7b5a480
	void HandleCallbackFunctionByTag(FString ButtonTips);// 0x490bf88
	World* GetWorldInternal();// 0x490bf4c
	BackpackButtonInfo[] ClientProxyClickLua();// 0xffffff8a17adf2b0
	BackpackButtonInfo[] ClientProxyClick();// 0x490be58

--------------------------------
Class: BackpackButtonInfo
	int ButtonTag;//[Offset: 0x0, Size: 0x4]// 0x76119bf880
	int ButtonStyle;//[Offset: 0x4, Size: 0x4]// 0x76119bf650
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x760d23ec80
	FString ButtonTips;//[Offset: 0x10, Size: 0x10]// 0x76119bf500
	delegate CallBackDelegate;//[Offset: 0x20, Size: 0x10]// 0x760d23ed00

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]// 0x7611d85960
	enum BattleItemOperationType;//[Offset: 0x18, Size: 0x1]// 0x7611d85860
	byte Reason;//[Offset: 0x19, Size: 0x1]// 0x7611d857e0
	int Count;//[Offset: 0x1c, Size: 0x4]// 0x7611d85770
	Object* Source;//[Offset: 0x20, Size: 0x8]// 0x7611d856f0
	bool bTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7611d85670

--------------------------------
Class: NetRelevancyGroup

--------------------------------
Class: UAEGameState.GameState.GameStateBase.Info.Actor.Object
	delegate UAEGameStateReplicatedWorldTimeSecondsSynced;//[Offset: 0x578, Size: 0x10]// 0x7611f427b0
	int MonsterCount;//[Offset: 0x588, Size: 0x4]// 0x7611f42740
	int ItemCount;//[Offset: 0x58c, Size: 0x4]// 0x7611f426d0
	int VehicleCount;//[Offset: 0x590, Size: 0x4]// 0x7611f42660
	int InactiveZombieCount;//[Offset: 0x594, Size: 0x4]// 0x7611f425f0
	int DeactiveZombieCount;//[Offset: 0x598, Size: 0x4]// 0x7611f42580
	bool bEnableAllPlayerFixInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 0x1]// 0x7611f42500
	AllPlayerFixInfo AllPlayerFixInfo;//[Offset: 0x5a0, Size: 0x60]// 0x7611f42480
	uint64 GameID;//[Offset: 0x600, Size: 0x8]// 0x7611f42410
	FString GameIDString;//[Offset: 0x608, Size: 0x10]// 0x7611f423a0
	bool IsGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]// 0x7611f42320
	bool IsGeneRateZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]// 0x7611f422a0
	bool IsGeneRateStaticConfigZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e, Size: 0x1]// 0x7611f42220
	bool IsCanRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61f, Size: 0x1]// 0x7611f421a0
	FString[] ModeUIManagerArray;//[Offset: 0x628, Size: 0x10]// 0x7611f420b0
	bool IsSetItemMaxCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]// 0x7611f42030
	float ReplayStartRecordTime;//[Offset: 0x64c, Size: 0x4]// 0x7611f41fc0
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]// 0x7611f41f40
	bool bUseMoveInputStateUseSixteenDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]// 0x7611f41ec0
	int GameRatingId;//[Offset: 0x654, Size: 0x4]// 0x7611f41e50
	int ChooseRatingType;//[Offset: 0x658, Size: 0x4]// 0x7611f41de0
	bool IsMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]// 0x7611f41d60
	int RoomMode;//[Offset: 0x660, Size: 0x4]// 0x7611f41cf0
	bool bIsUGCGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1]// 0x7611f41c70
	bool bUseUserDefinedMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x665, Size: 0x1]// 0x7611f41bf0
	bool IsCompetitionOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x666, Size: 0x1]// 0x7611f41b70
	bool IsGMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x667, Size: 0x1]// 0x7611f41af0
	bool bKillThanksEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]// 0x7611f41a70
	bool bEnableSoundSpatialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 0x1]// 0x7611f419f0
	int FilmMode;//[Offset: 0x66c, Size: 0x4]// 0x7611f41980
	bool bShowKillingTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]// 0x7611f41900
	bool bShowVoiceInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]// 0x7611f41880
	int PeakCompetitionMatchType;//[Offset: 0x674, Size: 0x4]// 0x7611f41810
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]// 0x7611f41790
	byte[] DisabledCollectedEventDataEventIds;//[Offset: 0x680, Size: 0x10]// 0x7611f41690
	class WidgetToTextureRenderTarget2DManager* WidgetToTextureRenderTarget2DManagerClass;//[Offset: 0x690, Size: 0x28]// 0x7611f41610
	class WidgetToTextureRenderTarget2DManager* LoadedWidgetToTextureRenderTarget2DManagerClass;//[Offset: 0x6b8, Size: 0x8]// 0x7611f41590
	WidgetToTextureRenderTarget2DManager* WidgetToTextureRenderTarget2DManager;//[Offset: 0x6c0, Size: 0x8]// 0x7611f41510
	DynaConfigRep DynaConfigRepData;//[Offset: 0x6c8, Size: 0x18]// 0x7611f41490
	void UpdateBornLandVehicles();// 0x4ecea04
	void ServerUpdateServerTimeSeconds();// 0x4ece9a4
	void OnRep_UseUserDefinedMap();// 0x4ece990
	void OnRep_UseMoveInputStateUseSixteenDir();// 0x4ece97c
	void OnRep_ShowVoiceInMinimap();// 0x4ece960
	void OnRep_ReplicatedWorldTimeSeconds(out const float OldValue);// 0x4ece8cc
	void OnRep_PeakCompetitionMatchType();// 0x4ece8b0
	void OnRep_ModeUIManagerArray();// 0x4ece89c
	void OnRep_IsUGCGameMode();// 0x4ece888
	void OnRep_GameID();// 0x4ece874
	void OnRep_DynaConfigRepData();// 0x4ece860
	void OnRep_bEnableSoundSpatialization();// 0x4ece844
	void OnRep_AllPlayerFixInfo(out AllPlayerFixInfo OldInfo);// 0x4ece708
	bool IsCollectedEventEnabled(byte EventId);// 0x4ece678
	void InitGameStateParams();// 0x4ece65c
	WidgetToTextureRenderTarget2DManager* GetWidgetToTextureRenderTarget2DManager();// 0x4ece628
	void GetDeathMatchPlayerEscapeBattleResultData(int64 PlayerKey, out DeathMatchBattleResultData BattleResultData);// 0x4ece4e4
	void GetDeathMatchBattleResultData(out DeathMatchBattleResultData DeathMatchBattleResultData);// 0x4ece3dc
	void AddReplicatedDynaConfig(DynaConfigInfo Info);// 0x4ece2dc

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x558, Size: 0x8]// 0x7611f3dd70
	FName PreviousMatchState;//[Offset: 0x560, Size: 0x8]// 0x7611f3dd00
	int ElapsedTime;//[Offset: 0x568, Size: 0x4]// 0x7611f3dc90
	void OnRep_MatchState();// 0x6e0c230
	void OnRep_ElapsedTime();// 0x6e0c214

--------------------------------
Class: WidgetToTextureRenderTarget2DManager.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x28, Size: 0x50]// 0x75a7b3e840
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x78, Size: 0x10]// 0x75a7b46400
	void ReleaseCachedParams();// 0x493baa0
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0xffffff8a17adf2b0
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0xffffff8a17adf2b0
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToTextureRenderTarget2DManagerDrawn);// 0x493b924

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 0x28]// 0x760d23c100
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 0x8]// 0x760d23c180
	UserWidget* UserWidget;//[Offset: 0x30, Size: 0x8]// 0x760d23c200
	FName UpdateWidgetFunctionName;//[Offset: 0x38, Size: 0x8]// 0x76119c4190

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 0x18]// 0x7611d645b0
	OtherParams OtherParams;//[Offset: 0x18, Size: 0x98]// 0x7611d63b90
	FName WidgetName;//[Offset: 0xb0, Size: 0x8]// 0x7611d63b20
	int DrawWidth;//[Offset: 0xb8, Size: 0x4]// 0x7611d63ab0
	int DrawHeight;//[Offset: 0xbc, Size: 0x4]// 0x7611d63a40
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0xc0, Size: 0x8]// 0x7611d639c0
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]// 0x7611d63940
	MaterialInterface* ParentMaterial;//[Offset: 0xd0, Size: 0x28]// 0x7611d638c0
	FName TextureParameterName;//[Offset: 0xf8, Size: 0x8]// 0x7611d63850
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x100, Size: 0x8]// 0x7611d637d0
	FString Payload;//[Offset: 0x108, Size: 0x10]// 0x7611d63760
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x7611d636e0

--------------------------------
Class: OtherParams
	FText Text;//[Offset: 0x0, Size: 0x18]// 0x7611d64540
	SlateColor TextColor;//[Offset: 0x18, Size: 0x28]// 0x7611d642c0
	SlateFontInfo TextFontInfo;//[Offset: 0x40, Size: 0x58]// 0x7611d63cb0

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]// 0x7611d64240
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]// 0x7611d641c0
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x28]// 0x7611d63eb0
	FName TypefaceFontName;//[Offset: 0x48, Size: 0x8]// 0x7611d63e40
	int Size;//[Offset: 0x50, Size: 0x4]// 0x7611d63dd0

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]// 0x7611d64150
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]// 0x7611d640d0
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]// 0x7611d64050
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611d63fd0

--------------------------------
Class: DeathMatchBattleResultData
	enum SubModeType;//[Offset: 0x0, Size: 0x1]// 0x7611f40310
	DeathMatchTeamBattleResultData[] TeamResultDatas;//[Offset: 0x8, Size: 0x10]// 0x7611f3e250
	int PlayerNumber;//[Offset: 0x18, Size: 0x4]// 0x7611f3e1e0
	int RealPlayerNumber;//[Offset: 0x1c, Size: 0x4]// 0x7611f3e170
	int PlayTime;//[Offset: 0x20, Size: 0x4]// 0x7611f3e100

--------------------------------
Class: DeathMatchTeamBattleResultData
	int TeamID;//[Offset: 0x0, Size: 0x4]// 0x7611f402a0
	FString Result;//[Offset: 0x8, Size: 0x10]// 0x7611f40230
	int TeamRank;//[Offset: 0x18, Size: 0x4]// 0x7611f401c0
	int TeamScore;//[Offset: 0x1c, Size: 0x4]// 0x7611f40150
	DeathMatchPlayerBattleResultData[] TeamPlayerResultDatas;//[Offset: 0x20, Size: 0x10]// 0x7611f3e3f0

--------------------------------
Class: DeathMatchPlayerBattleResultData
	uint64 UID;//[Offset: 0x0, Size: 0x8]// 0x7611f400e0
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]// 0x7611f40070
	FString PlayerName;//[Offset: 0x10, Size: 0x10]// 0x7611f40000
	int TeamID;//[Offset: 0x20, Size: 0x4]// 0x7611f3ff90
	int PlayerScore;//[Offset: 0x24, Size: 0x4]// 0x7611f3ff20
	int Rank;//[Offset: 0x28, Size: 0x4]// 0x7611f3feb0
	int Kills;//[Offset: 0x2c, Size: 0x4]// 0x7611f3fe40
	int Assists;//[Offset: 0x30, Size: 0x4]// 0x7611f3fdd0
	int Deaths;//[Offset: 0x34, Size: 0x4]// 0x7611f3fd60
	int OccupyScore;//[Offset: 0x38, Size: 0x4]// 0x7611f3fcf0
	int MaxContinuouKills;//[Offset: 0x3c, Size: 0x4]// 0x7611f3fc80
	int SuperGodNum;//[Offset: 0x40, Size: 0x4]// 0x7611f3fc10
	int DamageAmount;//[Offset: 0x44, Size: 0x4]// 0x7611f3fba0
	int HeadShotNum;//[Offset: 0x48, Size: 0x4]// 0x7611f3fb30
	int ShootWeaponShotNum;//[Offset: 0x4c, Size: 0x4]// 0x7611f3fac0
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x50, Size: 0x4]// 0x7611f3fa50
	int GunKillingTimes;//[Offset: 0x54, Size: 0x4]// 0x7611f3f9e0
	int MeleeKillTimes;//[Offset: 0x58, Size: 0x4]// 0x7611f3f970
	int RangedDamagedAmount;//[Offset: 0x5c, Size: 0x4]// 0x7611f3f900
	int MeleeDamageAmount;//[Offset: 0x60, Size: 0x4]// 0x7611f3f890
	float MovingDistance;//[Offset: 0x64, Size: 0x4]// 0x7611f3f820
	float HealAmount;//[Offset: 0x68, Size: 0x4]// 0x7611f3f7b0
	int CureCount;//[Offset: 0x6c, Size: 0x4]// 0x7611f3f740
	FString[] KillFlow;//[Offset: 0x70, Size: 0x10]// 0x7611f3f650
	EquipmentData EquipmentData;//[Offset: 0x80, Size: 0x70]// 0x7611f3f5d0
	uint64[] TeamMemberList;//[Offset: 0xf0, Size: 0x10]// 0x7611f3f4e0
	<int,int> MedalList;//[Offset: 0x100, Size: 0x50]// 0x7611f3f350
	FString[] KeepWeaponDataList;//[Offset: 0x150, Size: 0x10]// 0x7611f3f260
	int SlidingTackleNum;//[Offset: 0x160, Size: 0x4]// 0x7611f3f1f0
	int DeadDamangeType;//[Offset: 0x164, Size: 0x4]// 0x7611f3f180
	GameModePlayerTaskDataSim[] CompletedTaskList;//[Offset: 0x168, Size: 0x10]// 0x7611f3f080
	<int,int> ScoreSource;//[Offset: 0x178, Size: 0x50]// 0x7611f3eef0
	int AiModelType;//[Offset: 0x1c8, Size: 0x4]// 0x7611f3ee80
	int ModelFireCount;//[Offset: 0x1cc, Size: 0x4]// 0x7611f3ee10
	int ModelHitCount;//[Offset: 0x1d0, Size: 0x4]// 0x7611f3eda0
	int ModelDamageReceived;//[Offset: 0x1d4, Size: 0x4]// 0x7611f3ed30
	int ModelJumpCount;//[Offset: 0x1d8, Size: 0x4]// 0x7611f3ecc0
	int ModelCrouchCount;//[Offset: 0x1dc, Size: 0x4]// 0x7611f3ec50
	int ModelProneCount;//[Offset: 0x1e0, Size: 0x4]// 0x7611f3ebe0
	int ModelShovelCount;//[Offset: 0x1e4, Size: 0x4]// 0x7611f3eb70
	int ModelPitchCount;//[Offset: 0x1e8, Size: 0x4]// 0x7611f3eb00
	int ModelStopCount;//[Offset: 0x1ec, Size: 0x4]// 0x7611f3ea90
	int ModelHeadShotCount;//[Offset: 0x1f0, Size: 0x4]// 0x7611f3ea20
	float ModelMoveDistance;//[Offset: 0x1f4, Size: 0x4]// 0x7611f3e9b0
	float ModelSprintTime;//[Offset: 0x1f8, Size: 0x4]// 0x7611f3e940
	int ModelRegenLifeCount;//[Offset: 0x1fc, Size: 0x4]// 0x7611f3e8d0
	int ModelAiLevel;//[Offset: 0x200, Size: 0x4]// 0x7611f3e860
	int[] WeaponIDList;//[Offset: 0x208, Size: 0x10]// 0x7611f3e770
	float[] WeaponUseTimeList;//[Offset: 0x218, Size: 0x10]// 0x7611f3e680
	int[] WeaponReloadTimeList;//[Offset: 0x228, Size: 0x10]// 0x7611f3e590

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0x1094, Size: 0x4]// 0x7612009bf0
	float FreeCameraStartMinPitchMax;//[Offset: 0x1098, Size: 0x4]// 0x7612009b80
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c, Size: 0x1]// 0x7612009b00
	<int> TouchIndexSet;//[Offset: 0x10a0, Size: 0x50]// 0x76120099f0
	byte OnFireTouchFingerIndex;//[Offset: 0x10f0, Size: 0x1]// 0x7612009970
	enum TouchEndTriggerSkillEntry;//[Offset: 0x10f8, Size: 0x1]// 0x7612009870
	int TouchEndTriggerSkillID;//[Offset: 0x10fc, Size: 0x4]// 0x7612009800
	byte OnPreBuildFingerIndex;//[Offset: 0x1100, Size: 0x1]// 0x7612009780
	bool bPreBuildView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1101, Size: 0x1]// 0x7612009700
	bool bPreBuildClickDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1102, Size: 0x1]// 0x7612009680
	<int> TeamPlayerHPChangedIndexs;//[Offset: 0x1108, Size: 0x50]// 0x7612009570
	byte EditorArchiveDataType;//[Offset: 0x1158, Size: 0x1]// 0x7612009490
	byte RuntimeArchiveDataType;//[Offset: 0x1159, Size: 0x1]// 0x76120093b0
	delegate OnPlayerContollerTouchBegin;//[Offset: 0x1160, Size: 0x10]// 0x7612009330
	delegate OnPlayerContollerTouchJoystick;//[Offset: 0x1170, Size: 0x10]// 0x76120092b0
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x1200, Size: 0x50]// 0x7612009120
	<FName,float> ScopeZoomMap;//[Offset: 0x1250, Size: 0x50]// 0x7612008f90
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0x12a0, Size: 0x10]// 0x7612008e90
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0x12b0, Size: 0x20]// 0x7612008ba0
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x12d0, Size: 0x10]// 0x7612008aa0
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0x12e0, Size: 0x10]// 0x76120089a0
	byte[] AddTouchMoveFingerArray;//[Offset: 0x12f0, Size: 0x10]// 0x76120088a0
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1300, Size: 0x1]// 0x7612008820
	MotionControlConfig MotionControlConfig;//[Offset: 0x1304, Size: 0x28]// 0x76120087a0
	MotionControlLandscapeConfig MotionControlIOSConfig;//[Offset: 0x132c, Size: 0x14]// 0x7612008720
	MotionControlLandscapeConfig MotionControlAndroidConfig;//[Offset: 0x1340, Size: 0x14]// 0x76120083d0
	byte OnFreeCameraFingerIndex;//[Offset: 0x1354, Size: 0x1]// 0x7612008350
	float FreeCameraSPL_Hor;//[Offset: 0x1358, Size: 0x4]// 0x76120082e0
	float FreeCameraSPL_Ver;//[Offset: 0x135c, Size: 0x4]// 0x7612008270
	float FreeCamera_FPP_MIN;//[Offset: 0x1360, Size: 0x4]// 0x7612008200
	float FreeCamera_FPP_MAX;//[Offset: 0x1364, Size: 0x4]// 0x7612008190
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0x1368, Size: 0x4]// 0x7612008120
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0x136c, Size: 0x4]// 0x76120080b0
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0x1370, Size: 0x4]// 0x7612008040
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0x1374, Size: 0x4]// 0x7612007fd0
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0x1378, Size: 0x4]// 0x7612007f60
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0x137c, Size: 0x4]// 0x7612007ef0
	float RecoverLagDelayTime;//[Offset: 0x1380, Size: 0x4]// 0x7612007e80
	bool bInTombBoxGenerator_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1384, Size: 0x1]// 0x7612007e00
	bool bInItemGenerator_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1385, Size: 0x1]// 0x7612007d80
	float InItemGeneratorUIRefreshTime_C;//[Offset: 0x1388, Size: 0x4]// 0x7612007d10
	float CurInItemGeneratorUIRefreshTime_C;//[Offset: 0x138c, Size: 0x4]// 0x7612007ca0
	float MotionControlLeft_C;//[Offset: 0x1390, Size: 0x4]// 0x7612007c30
	float MotionControlRight_C;//[Offset: 0x1394, Size: 0x4]// 0x7612007bc0
	float MotionControlPitchReverce_C;//[Offset: 0x1398, Size: 0x4]// 0x7612007b50
	float MotionControlPitchLeft_C;//[Offset: 0x139c, Size: 0x4]// 0x7612007ae0
	float MotionControlPitchRight_C;//[Offset: 0x13a0, Size: 0x4]// 0x7612007a70
	float MotionControlYawLeft_C;//[Offset: 0x13a4, Size: 0x4]// 0x7612007a00
	float MotionControlYawRight_C;//[Offset: 0x13a8, Size: 0x4]// 0x7612007990
	float MotionControlGravityX_C;//[Offset: 0x13ac, Size: 0x4]// 0x7612007920
	bool bLandScapeOrientation_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b0, Size: 0x1]// 0x76120078a0
	float MotionFilterX;//[Offset: 0x140c, Size: 0x4]// 0x7612007830
	float MotionFilterY;//[Offset: 0x1410, Size: 0x4]// 0x76120077c0
	bool bDisableSetViewYawLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1414, Size: 0x1]// 0x7612007740
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0x1418, Size: 0xc]// 0x76120076c0
	Vector2D StartPosition;//[Offset: 0x1424, Size: 0x8]// 0x7612007640
	Vector2D CurFreeCamPosition;//[Offset: 0x142c, Size: 0x8]// 0x76120075c0
	bool bResetFreeCameraStartRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 0x1]// 0x7612007540
	Rotator EndTouchFreeCameraDeltaRotation;//[Offset: 0x1438, Size: 0xc]// 0x76120074c0
	bool CouldStartFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145c, Size: 0x1]// 0x7612007440
	bool bOverrideJoystickInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1464, Size: 0x1]// 0x76120073c0
	bool bUGCHandleJoystickInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1465, Size: 0x1]// 0x7612007340
	bool bOverrideLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1466, Size: 0x1]// 0x76120072c0
	bool bUGCHandleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1467, Size: 0x1]// 0x7612007240
	bool bCameraFreeMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 0x1]// 0x76120071c0
	float CameraFreeMovingSpeedScale;//[Offset: 0x146c, Size: 0x4]// 0x7612007150
	int EagleWacherRadioTimes;//[Offset: 0x1470, Size: 0x4]// 0x76120070e0
	FString FollowCandidateName;//[Offset: 0x1478, Size: 0x10]// 0x7612007070
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0x1488, Size: 0x50]// 0x7612006ed0
	Rotator FreeCameraStartRotation;//[Offset: 0x14d8, Size: 0xc]// 0x7612006e50
	Transform FPPModeSpringArmTrans;//[Offset: 0x14f0, Size: 0x30]// 0x7612006dd0
	byte FreeCameraFigerIndex;//[Offset: 0x1520, Size: 0x1]// 0x7612006d50
	int8 CurrentBuildingIndex;//[Offset: 0x1521, Size: 0x1]// 0x7612006ce0
	int WeaponReconnectOpIndex;//[Offset: 0x1524, Size: 0x4]// 0x7612006c70
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1528, Size: 0x1]// 0x7612006bf0
	bool bCanReceiveTouchInpute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152c, Size: 0x1]// 0x7612006b70
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152d, Size: 0x1]// 0x7612006af0
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x1530, Size: 0x10]// 0x76120069f0
	LinearColor CrossHairColor;//[Offset: 0x1540, Size: 0x10]// 0x7612006970
	byte AutoAimType;//[Offset: 0x1550, Size: 0x1]// 0x76120068f0
	byte MeleeAutoAimType;//[Offset: 0x1582, Size: 0x1]// 0x7612006870
	byte HandFightAutoAimType;//[Offset: 0x15b4, Size: 0x1]// 0x7612006790
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e6, Size: 0x1]// 0x7612006710
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e7, Size: 0x1]// 0x7612006690
	Vector2D AimBtnPosC;//[Offset: 0x15e8, Size: 0x8]// 0x7612006610
	Vector2D AimBtnSizeC;//[Offset: 0x15f0, Size: 0x8]// 0x7612006590
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1600, Size: 0x10]// 0x7612006490
	ClientFatalDamageRecordData FatalDamageRecord;//[Offset: 0x1610, Size: 0x140]// 0x7612006410
	ClientTeamerMaxKillerRecord[] ClientTeamerMaxKillerRecord;//[Offset: 0x1750, Size: 0x10]// 0x7612006180
	SensibilityConfig SensibilityConfig;//[Offset: 0x1760, Size: 0xf0]// 0x7612005410
	float JoystickSprintDisThresholdParam;//[Offset: 0x1850, Size: 0x4]// 0x76120053a0
	float JoystickSprintFactorParam;//[Offset: 0x1854, Size: 0x4]// 0x7612005330
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1858, Size: 0x1]// 0x76120052b0
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1859, Size: 0x1]// 0x7612005230
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x1860, Size: 0x10]// 0x76120051b0
	delegate OnPlayerEnterFlying;//[Offset: 0x1870, Size: 0x10]// 0x7612005130
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x1880, Size: 0x10]// 0x76120050b0
	delegate OnPlayerExitFlying;//[Offset: 0x1890, Size: 0x10]// 0x7612005030
	delegate OnPlayerEnterJumping;//[Offset: 0x18a0, Size: 0x10]// 0x7612004fb0
	delegate OnPlayerExitJumping;//[Offset: 0x18b0, Size: 0x10]// 0x7612004f30
	delegate OnPlayerEnterParachute;//[Offset: 0x18c0, Size: 0x10]// 0x7612004eb0
	delegate OnPlayerExitParachute;//[Offset: 0x18d0, Size: 0x10]// 0x7612004e30
	delegate OnPlayerEnterWater;//[Offset: 0x18e0, Size: 0x10]// 0x7612004db0
	delegate OnPlayerExitWater;//[Offset: 0x18f0, Size: 0x10]// 0x7612004d30
	delegate OnPlayerEnterFighting;//[Offset: 0x1900, Size: 0x10]// 0x7612004cb0
	delegate OnPlayerExitFighting;//[Offset: 0x1910, Size: 0x10]// 0x7612004c30
	delegate OnPlayerEnterFinished;//[Offset: 0x1920, Size: 0x10]// 0x7612004bb0
	delegate OnPlayerEnterAvatarDisplay;//[Offset: 0x1930, Size: 0x10]// 0x7612004b30
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1940, Size: 0x10]// 0x7612004ab0
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1950, Size: 0x10]// 0x7612004a30
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1960, Size: 0x10]// 0x76120049b0
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x1970, Size: 0x10]// 0x7612004930
	delegate OnCharacterBreathChange;//[Offset: 0x1980, Size: 0x10]// 0x76120048b0
	delegate OnNightBeggan;//[Offset: 0x1990, Size: 0x10]// 0x7612004830
	delegate OnNightEnded;//[Offset: 0x19a0, Size: 0x10]// 0x76120047b0
	delegate OnIsInFortressChanged;//[Offset: 0x19b0, Size: 0x10]// 0x7612004730
	delegate OnPlayerEnterOrLeaveFlyingVehicle;//[Offset: 0x19c0, Size: 0x10]// 0x76120046b0
	delegate OnPlayerEnterPossessActor;//[Offset: 0x19d0, Size: 0x10]// 0x7612004630
	delegate OnDisPlaySubtitle;//[Offset: 0x19e0, Size: 0x10]// 0x76120045b0
	delegate OnSetDynamicSubtitle;//[Offset: 0x19f0, Size: 0x10]// 0x7612004530
	delegate OnShowFollowEmoteDelegate;//[Offset: 0x1a00, Size: 0x10]// 0x76120044b0
	delegate OnShowInvitePairEmoteDelegate;//[Offset: 0x1a10, Size: 0x10]// 0x7612004430
	delegate OnCauseFatalDamage;//[Offset: 0x1a20, Size: 0x10]// 0x76120043b0
	int SelectedNightRenderConfig;//[Offset: 0x1a30, Size: 0x4]// 0x7612004340
	delegate OnInitTaskData;//[Offset: 0x1a38, Size: 0x10]// 0x76120042c0
	delegate OnInitCollectionData;//[Offset: 0x1a48, Size: 0x10]// 0x7612004240
	delegate OnPlayerDoEmote;//[Offset: 0x1a58, Size: 0x10]// 0x76120041c0
	delegate OnPlayerEnterArea;//[Offset: 0x1a68, Size: 0x10]// 0x7612004140
	delegate OnPlayerKilling;//[Offset: 0x1a78, Size: 0x10]// 0x76120040c0
	delegate OnPickupItem;//[Offset: 0x1a88, Size: 0x10]// 0x7612004040
	delegate OnDropItem;//[Offset: 0x1a98, Size: 0x10]// 0x7612003fc0
	delegate OnDeathBoxSpawned;//[Offset: 0x1aa8, Size: 0x10]// 0x7612003f40
	delegate OnTaskConditionActived;//[Offset: 0x1ab8, Size: 0x10]// 0x7612003ec0
	delegate OnTaskConditionDeactived;//[Offset: 0x1ac8, Size: 0x10]// 0x7612003e40
	delegate OnMyObserversChangeDelegate;//[Offset: 0x1af8, Size: 0x10]// 0x7612003dc0
	delegate OnApplicationactivatedDelegate;//[Offset: 0x1b08, Size: 0x10]// 0x7612003d40
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x1b18, Size: 0xa0]// 0x76120034c0
	float DisplayKillDistanceThreshold;//[Offset: 0x1bb8, Size: 0x4]// 0x7612003450
	bool bClearBuffOnEnterPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bbc, Size: 0x1]// 0x76120033d0
	delegate OnUITouchMoveEvent;//[Offset: 0x1bc0, Size: 0x10]// 0x7612003350
	delegate OnStartFireEvent;//[Offset: 0x1bd0, Size: 0x10]// 0x76120032d0
	delegate OnStopFireEvent;//[Offset: 0x1be0, Size: 0x10]// 0x7612003250
	delegate OnReleaseFireBtn;//[Offset: 0x1bf0, Size: 0x10]// 0x76120031d0
	delegate OnReleaseScreen;//[Offset: 0x1c00, Size: 0x10]// 0x7612003150
	delegate OnFingerMove;//[Offset: 0x1c10, Size: 0x10]// 0x76120030d0
	delegate OnSwitchCameraModeStart;//[Offset: 0x1c20, Size: 0x10]// 0x7612003050
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1c30, Size: 0x10]// 0x7612002fd0
	delegate OnPlayerPickUpActor;//[Offset: 0x1c40, Size: 0x10]// 0x7612002f50
	delegate OnPlayerPutDownActor;//[Offset: 0x1c50, Size: 0x10]// 0x7612002ed0
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1c60, Size: 0x10]// 0x7612002e50
	delegate OnSwitchWeapon;//[Offset: 0x1c70, Size: 0x10]// 0x7612002dd0
	delegate OnEquipWeaponDel;//[Offset: 0x1c80, Size: 0x10]// 0x7612002d50
	delegate OnUnequipWeaponDel;//[Offset: 0x1c90, Size: 0x10]// 0x7612002cd0
	delegate OnUseInventoryItem;//[Offset: 0x1ca0, Size: 0x10]// 0x7612002c50
	delegate OnChangeBattleOwnerDel;//[Offset: 0x1cb0, Size: 0x10]// 0x7612002bd0
	delegate OnDamageToOther;//[Offset: 0x1cc0, Size: 0x10]// 0x7612002b50
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1cd0, Size: 0x10]// 0x7612002ad0
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x1ce0, Size: 0x10]// 0x7612002a50
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x1cf0, Size: 0x10]// 0x76120029d0
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x1d00, Size: 0x10]// 0x7612002950
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x1d10, Size: 0x10]// 0x76120028d0
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1d20, Size: 0x10]// 0x7612002850
	delegate OnRank;//[Offset: 0x1d30, Size: 0x10]// 0x76120027d0
	delegate OnGameStartDelegate;//[Offset: 0x1d40, Size: 0x10]// 0x7612002750
	delegate OnPlayerNameChange;//[Offset: 0x1d50, Size: 0x10]// 0x76120026d0
	delegate OnUseMainSlot;//[Offset: 0x1d60, Size: 0x10]// 0x7612002650
	delegate OnBackpackMainSlot;//[Offset: 0x1d70, Size: 0x10]// 0x76120025d0
	delegate OnRemoveMainSlot;//[Offset: 0x1d80, Size: 0x10]// 0x7612002550
	delegate OnRepPlayerState;//[Offset: 0x1d90, Size: 0x10]// 0x76120024d0
	delegate OnRepTeammateChange;//[Offset: 0x1da0, Size: 0x10]// 0x7612002450
	delegate OnGameModeStateChangeDelegate;//[Offset: 0x1db0, Size: 0x10]// 0x76120023d0
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x1dc8, Size: 0x10]// 0x7612002350
	delegate OnMapMarkChangeDelegate;//[Offset: 0x1dd8, Size: 0x10]// 0x76120022d0
	delegate OnShowSkillPrompt;//[Offset: 0x1de8, Size: 0x10]// 0x7612002250
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1df8, Size: 0x10]// 0x76120021d0
	delegate OnShowAutoSprintButton;//[Offset: 0x1e08, Size: 0x10]// 0x7612002150
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1e28, Size: 0x8]// 0x76120020d0
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1e30, Size: 0x10]// 0x7612002050
	delegate OnAutoSprintActive;//[Offset: 0x1e40, Size: 0x10]// 0x7612001fd0
	delegate OnTakeDamagedDelegate;//[Offset: 0x1e50, Size: 0x10]// 0x7612001f50
	delegate OnPostTakeDamageDelegate;//[Offset: 0x1e60, Size: 0x10]// 0x7612001ed0
	delegate InstigatedDamageToCharacter;//[Offset: 0x1e70, Size: 0x10]// 0x7612001e50
	delegate OnLostConnection;//[Offset: 0x1e80, Size: 0x10]// 0x7612001dd0
	delegate OnReconnected;//[Offset: 0x1e90, Size: 0x10]// 0x7612001d50
	delegate OnExitGame;//[Offset: 0x1ea0, Size: 0x10]// 0x7612001cd0
	delegate OnSpectatorChange;//[Offset: 0x1eb0, Size: 0x10]// 0x7612001c50
	delegate OnSpectatingEnemyChanged;//[Offset: 0x1ec0, Size: 0x10]// 0x7612001bd0
	delegate OnSpectatingSameCampChanged;//[Offset: 0x1ed0, Size: 0x10]// 0x7612001b50
	delegate OnSpectatorCampIDChange;//[Offset: 0x1ee0, Size: 0x10]// 0x7612001ad0
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1ef0, Size: 0x10]// 0x7612001a50
	delegate RunOnNextFrameDelegate;//[Offset: 0x1f00, Size: 0x10]// 0x76120019d0
	delegate OnSetPlayerMaker;//[Offset: 0x1f10, Size: 0x10]// 0x7612001950
	delegate OnRefreshTrainingSensitivityList;//[Offset: 0x1f20, Size: 0x10]// 0x76120018d0
	delegate PlayerControllerPossessEvent;//[Offset: 0x1f30, Size: 0x10]// 0x7612001850
	delegate PlayerControllerUnPossessEvent;//[Offset: 0x1f40, Size: 0x10]// 0x76120017d0
	delegate PlayerControllerRepCharacter;//[Offset: 0x1f50, Size: 0x10]// 0x7612001750
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1f80, Size: 0x8]// 0x76120016d0
	CanvasPanel* NewbieMonsterShowWidget;//[Offset: 0x1f88, Size: 0x8]// 0x7612001650
	float NewbieMonsterShowAngle;//[Offset: 0x1f90, Size: 0x4]// 0x76120015e0
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x1f98, Size: 0x8]// 0x7612001560
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1fa0, Size: 0x8]// 0x76120014e0
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1fa8, Size: 0x8]// 0x7612001460
	CharaStatComp* CharaStat;//[Offset: 0x1fb0, Size: 0x8]// 0x76120013e0
	ExceptionReportComponent* ExceptionReportComp;//[Offset: 0x1fb8, Size: 0x8]// 0x7612001360
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc0, Size: 0x1]// 0x76120012e0
	int DebugInitDropId;//[Offset: 0x2138, Size: 0x4]// 0x7612001270
	int ZombieTotalForOnePlayer;//[Offset: 0x213c, Size: 0x4]// 0x7612001200
	float ZombieTotalForOnePlayerRatio;//[Offset: 0x2140, Size: 0x4]// 0x7612001190
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2148, Size: 0x1]// 0x7612001110
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2149, Size: 0x1]// 0x7612001090
	float PC_CameraMoveRateX;//[Offset: 0x214c, Size: 0x4]// 0x7612001020
	float PC_CameraMoveRateY;//[Offset: 0x2150, Size: 0x4]// 0x7612000fb0
	float Mobile_CameraMoveRateX;//[Offset: 0x2154, Size: 0x4]// 0x7612000f40
	float Mobile_CameraMoveRateY;//[Offset: 0x2158, Size: 0x4]// 0x7612000ed0
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x2160, Size: 0x8]// 0x7612000e50
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x2168, Size: 0x8]// 0x7612000dd0
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2170, Size: 0x1]// 0x7612000d50
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x2174, Size: 0x24]// 0x7612000cd0
	CommonCameraModeData NearCameraModeData;//[Offset: 0x2198, Size: 0x24]// 0x7612000c50
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x21bc, Size: 0x8]// 0x7612000bd0
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x21c4, Size: 0x8]// 0x7612000b50
	AimCameraModeData AimCameraModeData;//[Offset: 0x21cc, Size: 0x24]// 0x76120009b0
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x21f0, Size: 0x8]// 0x7612000930
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x21f8, Size: 0x8]// 0x76120008b0
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x2200, Size: 0x24]// 0x76120002b0
	enum LastLimitDataState;//[Offset: 0x2224, Size: 0x1]// 0x76120001b0
	<enum,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x2228, Size: 0x50]// 0x7611fffe00
	float MoveCameraMinDistanceThreshold;//[Offset: 0x2278, Size: 0x4]// 0x7611fffd90
	float MoveCameraMinTimeThreshold;//[Offset: 0x227c, Size: 0x4]// 0x7611fffd20
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x2280, Size: 0x4]// 0x7611fffcb0
	float MoveCameraSpeedLimit;//[Offset: 0x2284, Size: 0x4]// 0x7611fffc40
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2288, Size: 0x1]// 0x7611fffbc0
	FString[] ShouldShowCustomInfoOnHUDKey;//[Offset: 0x2290, Size: 0x10]// 0x7611fffad0
	<FString,FString> ShouldShowCustomInfoSwitchKeyAndValue;//[Offset: 0x22a0, Size: 0x50]// 0x7611fff940
	bool ShouldShowCampInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f0, Size: 0x1]// 0x7611fff8c0
	bool ShouldShowCameraDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f1, Size: 0x1]// 0x7611fff840
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f2, Size: 0x1]// 0x7611fff7c0
	bool ShouldShowViewTargetInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f3, Size: 0x1]// 0x7611fff740
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f4, Size: 0x1]// 0x7611fff6c0
	Actor* BonfireUIAttachedActor;//[Offset: 0x22f8, Size: 0x8]// 0x7611fff640
	int SkillDeadBoxEffectIndex;//[Offset: 0x230c, Size: 0x4]// 0x7611fff5d0
	bool bIsDebugImpactEffectForAutonomousGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2310, Size: 0x1]// 0x7611fff550
	float ImpactEffectStartScaleDistanceGM;//[Offset: 0x2314, Size: 0x4]// 0x7611fff4e0
	float ImpactEffectEndScaleDistanceGM;//[Offset: 0x2318, Size: 0x4]// 0x7611fff470
	float ImpactEffectStartScaleValueGM;//[Offset: 0x231c, Size: 0x4]// 0x7611fff400
	float ImpactEffectEndScaleValueGM;//[Offset: 0x2320, Size: 0x4]// 0x7611fff390
	bool IsConsiderAdaptationOffsetY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2324, Size: 0x1]// 0x7611fff310
	byte CurCameraMode;//[Offset: 0x2325, Size: 0x1]// 0x7611fff290
	FName AutoScopeAimCompName;//[Offset: 0x2328, Size: 0x8]// 0x7611fff220
	float AutoScopeAimTraceDistance;//[Offset: 0x2330, Size: 0x4]// 0x7611fff1b0
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2340, Size: 0x1]// 0x7611fff130
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2341, Size: 0x1]// 0x7611fff0b0
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2342, Size: 0x1]// 0x7611fff030
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2343, Size: 0x1]// 0x7611ffefb0
	float MoveableLandHardTime;//[Offset: 0x2344, Size: 0x4]// 0x7611ffef40
	float CanMoveCDTime;//[Offset: 0x2348, Size: 0x4]// 0x7611ffeed0
	float CanSprintCDTime;//[Offset: 0x234c, Size: 0x4]// 0x7611ffee60
	float AutoSprintRequestCD;//[Offset: 0x2350, Size: 0x4]// 0x7611ffedf0
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2354, Size: 0x1]// 0x7611ffed70
	Vector CurScreenMoveSpeed;//[Offset: 0x2358, Size: 0xc]// 0x7611ffecf0
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x2364, Size: 0x4]// 0x7611ffec80
	float SpecialDeviceRate;//[Offset: 0x2368, Size: 0x4]// 0x7611ffec10
	float AimAssistRate;//[Offset: 0x236c, Size: 0x4]// 0x7611ffeba0
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x2370, Size: 0x50]// 0x7611ffea10
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c0, Size: 0x1]// 0x7611ffe990
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c1, Size: 0x1]// 0x7611ffe910
	GameModeConfig NormalModeConfig;//[Offset: 0x23c4, Size: 0x14]// 0x7611ffe890
	GameModeConfig TAModeConfig;//[Offset: 0x23d8, Size: 0x14]// 0x7611ffe810
	HitEffectConfig HitEffectConfig;//[Offset: 0x23ec, Size: 0x8]// 0x7611ffe610
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x23f8, Size: 0x8]// 0x7611ffe590
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2400, Size: 0x1]// 0x7611ffe510
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2401, Size: 0x1]// 0x7611ffe490
	float AccumulateYawInput;//[Offset: 0x2404, Size: 0x4]// 0x7611ffe420
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x2408, Size: 0x4]// 0x7611ffe3b0
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240c, Size: 0x1]// 0x7611ffe330
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240d, Size: 0x1]// 0x7611ffe2b0
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240e, Size: 0x1]// 0x7611ffe230
	float NoRespondArea;//[Offset: 0x2410, Size: 0x4]// 0x7611ffe1c0
	float ComfortableSwipeAddition;//[Offset: 0x2414, Size: 0x4]// 0x7611ffe150
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2418, Size: 0x1]// 0x7611ffe0d0
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2419, Size: 0x1]// 0x7611ffe050
	byte sprintOptType;//[Offset: 0x241a, Size: 0x1]// 0x7611ffdf70
	float JoystickSprintDisThreshold;//[Offset: 0x241c, Size: 0x4]// 0x7611ffdf00
	float JoystickSprintDisThresholdNew;//[Offset: 0x2420, Size: 0x4]// 0x7611ffde90
	float JoystickSprintBtnHeight;//[Offset: 0x2424, Size: 0x4]// 0x7611ffde20
	float JoystickSprintAngleThreshold;//[Offset: 0x2428, Size: 0x4]// 0x7611ffddb0
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242c, Size: 0x1]// 0x7611ffdd30
	byte JoystickOperatingMode;//[Offset: 0x242d, Size: 0x1]// 0x7611ffdcb0
	float EasyGoStraightAngle;//[Offset: 0x2430, Size: 0x4]// 0x7611ffdc40
	float LastJoystickOpacity;//[Offset: 0x2434, Size: 0x4]// 0x7611ffdbd0
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2438, Size: 0x1]// 0x7611ffdb50
	bool bFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2439, Size: 0x1]// 0x7611ffdad0
	bool bKeepFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243a, Size: 0x1]// 0x7611ffda50
	<byte,float> TouchForceMap;//[Offset: 0x2440, Size: 0x50]// 0x7611ffd8b0
	float DoubleClickFireTimeThreshold;//[Offset: 0x2490, Size: 0x4]// 0x7611ffd840
	float DoubleClickFireDistanceThreshold;//[Offset: 0x2494, Size: 0x4]// 0x7611ffd7d0
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x2498, Size: 0x4]// 0x7611ffd760
	int TouchForceWatchFrame;//[Offset: 0x249c, Size: 0x4]// 0x7611ffd6f0
	float TouchForceFireThreshold;//[Offset: 0x24a0, Size: 0x4]// 0x7611ffd680
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a4, Size: 0x1]// 0x7611ffd600
	float TouchForceFireThreshold_TA;//[Offset: 0x24a8, Size: 0x4]// 0x7611ffd590
	bool bUseTouchForce_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ac, Size: 0x1]// 0x7611ffd510
	int EnableShovel_TA;//[Offset: 0x24b0, Size: 0x4]// 0x7611ffd4a0
	bool CrouchShovel_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b4, Size: 0x1]// 0x7611ffd420
	bool IsHelmetFightingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b5, Size: 0x1]// 0x7611ffd3a0
	float InputTouchRepeatLastTime;//[Offset: 0x24b8, Size: 0x4]// 0x7611ffd330
	byte TouchFireType;//[Offset: 0x24bc, Size: 0x1]// 0x7611ffd250
	float TestForce;//[Offset: 0x24c0, Size: 0x4]// 0x7611ffd1e0
	delegate On3DTouchForceChange;//[Offset: 0x24c8, Size: 0x10]// 0x7611ffd160
	delegate OnDoubleClickCheck;//[Offset: 0x24d8, Size: 0x10]// 0x7611ffd0e0
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e8, Size: 0x1]// 0x7611ffd060
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e9, Size: 0x1]// 0x7611ffcfe0
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24ea, Size: 0x1]// 0x7611ffcf60
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24eb, Size: 0x1]// 0x7611ffcee0
	float AutoSprintBtnTime;//[Offset: 0x24ec, Size: 0x4]// 0x7611ffce70
	float AutoSprintWaitingTime;//[Offset: 0x24f0, Size: 0x4]// 0x7611ffce00
	float AutoSprintThreshold;//[Offset: 0x24f4, Size: 0x4]// 0x7611ffcd90
	float JoystickTriggerSprintDuration;//[Offset: 0x24f8, Size: 0x4]// 0x7611ffcd20
	float InHouseSpringArmLengthModifier;//[Offset: 0x24fc, Size: 0x4]// 0x7611ffccb0
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x2500, Size: 0x4]// 0x7611ffcc40
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2504, Size: 0x1]// 0x7611ffcbc0
	float CurrentCameraFOV;//[Offset: 0x2508, Size: 0x4]// 0x7611ffcb50
	float MinFovChangeView;//[Offset: 0x250c, Size: 0x4]// 0x7611ffcae0
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x2510, Size: 0x38]// 0x7611ffc6f0
	int GameTipMsgID;//[Offset: 0x2548, Size: 0x4]// 0x7611ffc680
	FString GameTipParam1;//[Offset: 0x2550, Size: 0x10]// 0x7611ffc610
	FString GameTipParam2;//[Offset: 0x2560, Size: 0x10]// 0x7611ffc5a0
	float GameTipAnimPlayRate;//[Offset: 0x2570, Size: 0x4]// 0x7611ffc530
	float AutoSprintCD;//[Offset: 0x25c8, Size: 0x4]// 0x7611ffc4c0
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x25d0, Size: 0x50]// 0x7611ffc320
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x2620, Size: 0x50]// 0x7611ffc170
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x2670, Size: 0x50]// 0x7611ffbfc0
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c4, Size: 0x1]// 0x7611ffbf40
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x26c8, Size: 0x10]// 0x7611ffbe40
	delegate OnReceiveHasSignal;//[Offset: 0x26d8, Size: 0x10]// 0x7611ffbdc0
	CharacterAvatar_WearInfo PlayerWearInfo;//[Offset: 0x2748, Size: 0x20]// 0x7611ffb4a0
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x2780, Size: 0x30]// 0x7611ffb420
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x2848, Size: 0x8]// 0x7611ffb3a0
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x2850, Size: 0x8]// 0x7611ffb320
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x2858, Size: 0x8]// 0x7611ffb2a0
	PlayerTombBox* DeadTombBox;//[Offset: 0x2870, Size: 0x8]// 0x7611ffb220
	FString[] ForbitPickList;//[Offset: 0x2880, Size: 0x10]// 0x7611ffb130
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a0, Size: 0x1]// 0x7611ffb0b0
	int pickupPlayerChoice;//[Offset: 0x28a4, Size: 0x4]// 0x7611ffb040
	int[] DoNotPickUpList;//[Offset: 0x28a8, Size: 0x10]// 0x7611ffaf50
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b8, Size: 0x1]// 0x7611ffaed0
	int blackEndTime;//[Offset: 0x28bc, Size: 0x4]// 0x7611ffae60
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c0, Size: 0x1]// 0x7611ffade0
	delegate OnRepNewPawn;//[Offset: 0x28c8, Size: 0x10]// 0x7611ffad60
	int GiftItemAppearCount;//[Offset: 0x28d8, Size: 0x4]// 0x7611ffacf0
	int GiftItemAppearCountTrehold;//[Offset: 0x28dc, Size: 0x4]// 0x7611ffac80
	float RescueRemainingSeconds;//[Offset: 0x28e0, Size: 0x4]// 0x7611ffac10
	float RescueTotalSeconds;//[Offset: 0x28e4, Size: 0x4]// 0x7611ffaba0
	float RescueReduceSeconds;//[Offset: 0x28e8, Size: 0x4]// 0x7611ffab30
	float m_LastFindingPathReciveTime;//[Offset: 0x28ec, Size: 0x4]// 0x7611ffaac0
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f0, Size: 0x1]// 0x7611ffaa40
	bool IsCurrentAirPhotoView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f1, Size: 0x1]// 0x7611ffa9c0
	bool IsCurrentUsePersistStateView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f2, Size: 0x1]// 0x7611ffa940
	bool IsSkipCheckCameraView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f3, Size: 0x1]// 0x7611ffa8c0
	float FreeViewUpRate;//[Offset: 0x28f4, Size: 0x4]// 0x7611ffa850
	byte MaxTouchMoveDelayFrame;//[Offset: 0x28f8, Size: 0x1]// 0x7611ffa7d0
	float MapMarkTraceStartZ;//[Offset: 0x28fc, Size: 0x4]// 0x7611ffa760
	float MapMarkTraceEndZ;//[Offset: 0x2900, Size: 0x4]// 0x7611ffa6f0
	int MaxCacheInputSpeedNum;//[Offset: 0x2904, Size: 0x4]// 0x7611ffa680
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2908, Size: 0x1]// 0x7611ffa600
	int[] TouchCacheWeightSetting;//[Offset: 0x2910, Size: 0x10]// 0x7611ffa510
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2944, Size: 0x1]// 0x7611ffa490
	Vector LastTouchScreenLoc;//[Offset: 0x2948, Size: 0xc]// 0x7611ffa410
	float LastTouchScreenTime;//[Offset: 0x2954, Size: 0x4]// 0x7611ffa3a0
	TouchMoveFingerData[] TouchMoveFingerDataList;//[Offset: 0x2968, Size: 0x10]// 0x7611ffa080
	byte CurTouchMoveFingerIndex;//[Offset: 0x2978, Size: 0x1]// 0x7611ffa000
	byte CurTouchPeekFingerIndex;//[Offset: 0x2979, Size: 0x1]// 0x7611ff9f80
	byte CurTouchScopeFingerIndex;//[Offset: 0x297a, Size: 0x1]// 0x7611ff9f00
	byte CurTouchAngledSightFingerIndex;//[Offset: 0x297b, Size: 0x1]// 0x7611ff9e80
	byte CurTouchSkillFingerIndex;//[Offset: 0x297c, Size: 0x1]// 0x7611ff9e00
	byte CurSightZoomFingerIndex;//[Offset: 0x297d, Size: 0x1]// 0x7611ff9d80
	byte CurAimFireFingerIndex;//[Offset: 0x297e, Size: 0x1]// 0x7611ff9d00
	byte PlaceCakeFingerIndex;//[Offset: 0x297f, Size: 0x1]// 0x7611ff9c80
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2990, Size: 0x1]// 0x7611ff9c00
	byte ValidTouchMove;//[Offset: 0x2991, Size: 0x1]// 0x7611ff9b80
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x29f0, Size: 0x8]// 0x7611ff9b00
	BackpackComponent* BackpackComponent;//[Offset: 0x2a30, Size: 0x8]// 0x7611ff9a80
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x2a38, Size: 0x8]// 0x7611ff9a00
	ChatComponent* ChatComponent;//[Offset: 0x2a40, Size: 0x8]// 0x7611ff9980
	QuickSignComponent* QuickSignComponent;//[Offset: 0x2a48, Size: 0x8]// 0x7611ff9900
	BaseTaskComponent* TaskComponent;//[Offset: 0x2a50, Size: 0x8]// 0x7611ff9880
	delegate OnObservedItemChanged;//[Offset: 0x2a88, Size: 0x10]// 0x7611ff9800
	int MapPathMarkID;//[Offset: 0x2a98, Size: 0x4]// 0x7611ff9790
	BattleItemData[] ObservedItemList;//[Offset: 0x2ab8, Size: 0x10]// 0x7611ff9690
	IncNetArrayNew NetObservedItemList;//[Offset: 0x2ac8, Size: 0xc0]// 0x7611ff8410
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x2bf8, Size: 0x10]// 0x7611ff8390
	delegate OnAboutToChangeViewTarget;//[Offset: 0x2c08, Size: 0x10]// 0x7611ff8310
	delegate OnFinishedChangeViewTarget;//[Offset: 0x2c18, Size: 0x10]// 0x7611ff8290
	delegate OnCharacterStatesChange;//[Offset: 0x2c28, Size: 0x10]// 0x7611ff8210
	delegate OnOverrideClickQuitSpectating;//[Offset: 0x2c38, Size: 0x10]// 0x7611ff8190
	FriendObserver[] FriendObserverDetails;//[Offset: 0x2c58, Size: 0x10]// 0x7611ff7f00
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c68, Size: 0x1]// 0x7611ff7e80
	delegate ObservedTargetDieDelegate;//[Offset: 0x2c70, Size: 0x10]// 0x7611ff7e00
	uint32[] OBAvaliablePlayerKeys;//[Offset: 0x2c80, Size: 0x10]// 0x7611ff7d10
	bool NeedCheckGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce9, Size: 0x1]// 0x7611ff7c90
	delegate EagleWatchInitCompletedDelegate;//[Offset: 0x2cf0, Size: 0x10]// 0x7611ff7c10
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x2d08, Size: 0x8]// 0x7611ff7b90
	delegate OnSyncOBDataActorIsReady;//[Offset: 0x2d10, Size: 0x10]// 0x7611ff7b10
	ObservedData ObservedData;//[Offset: 0x2d20, Size: 0x70]// 0x7611ff75d0
	delegate OnSignalHPChanged;//[Offset: 0x2d90, Size: 0x10]// 0x7611ff7550
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db5, Size: 0x1]// 0x7611ff74d0
	delegate OnToggleOBMapShowHide;//[Offset: 0x2dc0, Size: 0x10]// 0x7611ff7450
	delegate OnToggleOBPlayerList;//[Offset: 0x2dd0, Size: 0x10]// 0x7611ff73d0
	delegate OnToggleOBTeamList;//[Offset: 0x2de0, Size: 0x10]// 0x7611ff7350
	delegate WeaponEquipAttachment;//[Offset: 0x2df0, Size: 0x10]// 0x7611ff72d0
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2e00, Size: 0x10]// 0x7611ff7250
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x2e10, Size: 0x10]// 0x7611ff71d0
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2e34, Size: 0x4]// 0x7611ff7160
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2e38, Size: 0x4]// 0x7611ff70f0
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e3e, Size: 0x1]// 0x7611ff7070
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x2e48, Size: 0x8]// 0x7611ff6ff0
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x2e50, Size: 0x4]// 0x7611ff6f80
	float OBVehicleAcceArmOffset;//[Offset: 0x2e68, Size: 0x4]// 0x7611ff6f10
	float OBVehicleBrkArmOffset;//[Offset: 0x2e6c, Size: 0x4]// 0x7611ff6ea0
	float OBVehicleArmLenSpeed;//[Offset: 0x2e70, Size: 0x4]// 0x7611ff6e30
	class CameraShake* OnHitCameraShake;//[Offset: 0x2e78, Size: 0x8]// 0x7611ff6db0
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x2e88, Size: 0x8]// 0x7611ff6d30
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x2e90, Size: 0x8]// 0x7611ff6cb0
	float CurrentOBVehicleViewArmLength;//[Offset: 0x2e98, Size: 0x4]// 0x7611ff6c40
	float OBVehicleViewArmLengthMax;//[Offset: 0x2e9c, Size: 0x4]// 0x7611ff6bd0
	float OBVehicleViewArmLengthMin;//[Offset: 0x2ea0, Size: 0x4]// 0x7611ff6b60
	Vector OBVehicleRelativeLocation;//[Offset: 0x2ea4, Size: 0xc]// 0x7611ff6ae0
	float OB_VehicleRotationLagSpeed;//[Offset: 0x2eb0, Size: 0x4]// 0x7611ff6a70
	float OBVehicleViewFOV;//[Offset: 0x2eb4, Size: 0x4]// 0x7611ff6a00
	int CurrentOBWidgetFarStyteDistance;//[Offset: 0x2eb8, Size: 0x4]// 0x7611ff6990
	int CurrentOBWidgetHideStyteDistance;//[Offset: 0x2ebc, Size: 0x4]// 0x7611ff6920
	bool OBNoUIMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec4, Size: 0x1]// 0x7611ff68a0
	enum WatchedStateType;//[Offset: 0x2ee0, Size: 0x1]// 0x7611ff67a0
	int fireMode;//[Offset: 0x2ee4, Size: 0x4]// 0x7611ff6730
	bool rightFireInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee8, Size: 0x1]// 0x7611ff66b0
	float fireDelayMode2;//[Offset: 0x2eec, Size: 0x4]// 0x7611ff6640
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef0, Size: 0x1]// 0x7611ff65c0
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef1, Size: 0x1]// 0x7611ff6540
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef2, Size: 0x1]// 0x7611ff64c0
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef3, Size: 0x1]// 0x7611ff6440
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2ef8, Size: 0x10]// 0x7611ff6340
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x2f08, Size: 0x10]// 0x7611ff6240
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2f18, Size: 0x10]// 0x7611ff6140
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2f28, Size: 0x10]// 0x7611ff6040
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2f38, Size: 0x10]// 0x7611ff5f40
	Actor*[] nowGrenadeList;//[Offset: 0x2f48, Size: 0x10]// 0x7611ff5e40
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f58, Size: 0x1]// 0x7611ff5dc0
	delegate triggerVoiceCheckDelegate;//[Offset: 0x2f60, Size: 0x10]// 0x7611ff5d40
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2f70, Size: 0x10]// 0x7611ff5cc0
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2f80, Size: 0x10]// 0x7611ff5c40
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2f90, Size: 0x10]// 0x7611ff5bc0
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2fa0, Size: 0x10]// 0x7611ff5b40
	delegate triggerParachuteCloseCheckDelegate;//[Offset: 0x2fb0, Size: 0x10]// 0x7611ff5ac0
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc1, Size: 0x1]// 0x7611ff5a40
	bool bCanSelectJumpPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc2, Size: 0x1]// 0x7611ff59c0
	delegate OnPlayerCanJump;//[Offset: 0x2fc8, Size: 0x10]// 0x7611ff5940
	delegate OnPlayerCannotJump;//[Offset: 0x2fd8, Size: 0x10]// 0x7611ff58c0
	delegate OnStartShrinkCircle;//[Offset: 0x2fe8, Size: 0x10]// 0x7611ff5840
	delegate OnInBomingArea;//[Offset: 0x2ff8, Size: 0x10]// 0x7611ff57c0
	delegate OnReceiveInviteNextBattle;//[Offset: 0x3008, Size: 0x10]// 0x7611ff5740
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3018, Size: 0x1]// 0x7611ff56c0
	delegate OnPlayerCanOpenParachute;//[Offset: 0x3020, Size: 0x10]// 0x7611ff5640
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x3030, Size: 0x10]// 0x7611ff55c0
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3040, Size: 0x1]// 0x7611ff5540
	float PlaneFlyHeightFromGameMode;//[Offset: 0x3044, Size: 0x4]// 0x7611ff54d0
	float CanOpenParachuteHeight;//[Offset: 0x3048, Size: 0x4]// 0x7611ff5460
	float ForceOpenParachuteHeight;//[Offset: 0x304c, Size: 0x4]// 0x7611ff53f0
	float CloseParachuteHeight;//[Offset: 0x3050, Size: 0x4]// 0x7611ff5380
	float RealTimePawnHeight;//[Offset: 0x3054, Size: 0x4]// 0x7611ff5310
	float AntiCheckParachuteTime;//[Offset: 0x3058, Size: 0x4]// 0x7611ff52a0
	bool bChangeAmbientSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305c, Size: 0x1]// 0x7611ff5220
	float OB_RotationLagSpeed;//[Offset: 0x3080, Size: 0x4]// 0x7611ff51b0
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x30a0, Size: 0x18]// 0x7611ff4f20
	delegate OnPreViewTargetChange;//[Offset: 0x30b8, Size: 0x10]// 0x7611ff4ea0
	delegate OnViewTargetChange;//[Offset: 0x30c8, Size: 0x10]// 0x7611ff4e20
	Actor* ThePlane;//[Offset: 0x30d8, Size: 0x8]// 0x7611ff4da0
	delegate OnClientToServerWeaponCreated;//[Offset: 0x30f0, Size: 0x10]// 0x7611ff4d20
	float GameAssistantJoyStickOpacity;//[Offset: 0x3100, Size: 0x4]// 0x7611ff4cb0
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x3108, Size: 0x10]// 0x7611ff4bb0
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x3128, Size: 0x8]// 0x7611ff4b30
	FString murderName;//[Offset: 0x3138, Size: 0x10]// 0x7611ff4ac0
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3148, Size: 0x1]// 0x7611ff4a40
	FString murderUID;//[Offset: 0x3150, Size: 0x10]// 0x7611ff49d0
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3160, Size: 0x1]// 0x7611ff4950
	InformPlayerTypeInfo[] DyingDamageInstigatorsList;//[Offset: 0x3168, Size: 0x10]// 0x7611ff4850
	FString LastBreathMurder;//[Offset: 0x3178, Size: 0x10]// 0x7611ff47e0
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3188, Size: 0x1]// 0x7611ff4760
	FString LastBreathMurderUID;//[Offset: 0x3190, Size: 0x10]// 0x7611ff46f0
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a0, Size: 0x1]// 0x7611ff4670
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x31a8, Size: 0x8]// 0x7611ff45f0
	int[] TestNetArray;//[Offset: 0x3228, Size: 0x10]// 0x7611ff4500
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x3258, Size: 0x50]// 0x7611ff4350
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x32a8, Size: 0x50]// 0x7611ff4000
	float OceanSideDetectDistance;//[Offset: 0x3304, Size: 0x4]// 0x7611ff3f90
	float OceanSideDetectInterval;//[Offset: 0x3308, Size: 0x4]// 0x7611ff3f20
	int CurrOBAirDropID;//[Offset: 0x330c, Size: 0x4]// 0x7611ff3eb0
	WaterSoundVolume*[] WaterSoundVolumeList;//[Offset: 0x3310, Size: 0x10]// 0x7611ff3db0
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x3320, Size: 0x50]// 0x7611ff3c10
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3370, Size: 0x1]// 0x7611ff3b90
	Vector AlwaysLoadLevelOrigin;//[Offset: 0x3448, Size: 0xc]// 0x7611ff3b10
	float AlwaysLoadLevelRadius;//[Offset: 0x3454, Size: 0x4]// 0x7611ff3aa0
	AkAudioEvent* HitVehicleSound;//[Offset: 0x3470, Size: 0x8]// 0x7611ff3a20
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3478, Size: 0x1]// 0x7611ff39a0
	float NetCullDistanceFactorForLowMemory;//[Offset: 0x347c, Size: 0x4]// 0x7611ff3930
	FString ClientActivePlatformProfileName;//[Offset: 0x3480, Size: 0x10]// 0x7611ff38c0
	bool HasPostExecDSCommandArrived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e0, Size: 0x1]// 0x7611ff3840
	delegate OnDSCommandArrived;//[Offset: 0x34e8, Size: 0x10]// 0x7611ff37c0
	float ZMoveDisCalcThreshold;//[Offset: 0x34f8, Size: 0x4]// 0x7611ff3750
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34fc, Size: 0x1]// 0x7611ff36d0
	bool bShowParachutingPanelOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34fd, Size: 0x1]// 0x7611ff3650
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x3500, Size: 0x8]// 0x7611ff35d0
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3508, Size: 0x1]// 0x7611ff3550
	StateType ServerStateType;//[Offset: 0x3510, Size: 0x10]// 0x7611ff34d0
	StateType ClientStateType;//[Offset: 0x3520, Size: 0x10]// 0x7611ff3450
	bool ConcertNeedInitParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3531, Size: 0x1]// 0x7611ff33d0
	float CheckNearbyRelevancyThreshold;//[Offset: 0x3538, Size: 0x4]// 0x7611ff3360
	float CheckCriticalLevelLoadedDelayTime;//[Offset: 0x353c, Size: 0x4]// 0x7611ff32f0
	RCRBodyBoundingSize RCRBodyBoundingSizeConfig;//[Offset: 0x3540, Size: 0xd4]// 0x7611ff22c0
	RCRVisualizationComponent* RCRVisualComp;//[Offset: 0x3618, Size: 0x8]// 0x7611ff2240
	RCRResultDebugInfoVisualizationComponent* RCRResultDebugComp;//[Offset: 0x3620, Size: 0x8]// 0x7611ff21c0
	RCRConfigDebugInfoVisualizationComponent* RCRConfigDebugComp;//[Offset: 0x3628, Size: 0x8]// 0x7611ff2140
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x3650, Size: 0x50]// 0x7611ff2020
	<STExtraVehicleBase*> FriendOBRelevancyVehicleSet;//[Offset: 0x36a0, Size: 0x50]// 0x7611ff1f00
	PreProcessedRelevancySet PreProcessedRelevancySet;//[Offset: 0x36f0, Size: 0x50]// 0x7611ff1de0
	int[] ArrGrenadeIDs;//[Offset: 0x3748, Size: 0x10]// 0x7611ff1cf0
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375c, Size: 0x1]// 0x7611ff1c70
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375d, Size: 0x1]// 0x7611ff1bf0
	bool bIsHideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375e, Size: 0x1]// 0x7611ff1b70
	bool bShouldHideAllIngameUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375f, Size: 0x1]// 0x7611ff1af0
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3774, Size: 0x1]// 0x7611ff1a70
	bool bEnableNetRelevantCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3775, Size: 0x1]// 0x7611ff19f0
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3776, Size: 0x1]// 0x7611ff1970
	bool bGameModeEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3777, Size: 0x1]// 0x7611ff18f0
	bool bGameModeEnableAutonomousOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3778, Size: 0x1]// 0x7611ff1870
	bool bEnableNewObserverSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3779, Size: 0x1]// 0x7611ff17f0
	bool UseHeartbeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3780, Size: 0x1]// 0x7611ff1770
	float HeartbeatFrequency;//[Offset: 0x3784, Size: 0x4]// 0x7611ff1700
	int64 LastHeartbeatTime;//[Offset: 0x3790, Size: 0x8]// 0x7611ff1690
	HeartbeatData HeartbeatData;//[Offset: 0x3798, Size: 0x20]// 0x7611ff1610
	float ObjArrayUsageStatisticFrequency;//[Offset: 0x37b8, Size: 0x4]// 0x7611ff15a0
	MonsterTreasureBox* CurOperatedMonsterTreasureBox;//[Offset: 0x37c8, Size: 0x8]// 0x7611ff1520
	MonsterTreasureBox*[] ClientMonsterTreasureBoxList;//[Offset: 0x37d0, Size: 0x10]// 0x7611ff1420
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x37e0, Size: 0x8]// 0x7611ff13a0
	Actor*[] ServerTreasureBoxList;//[Offset: 0x37e8, Size: 0x10]// 0x7611ff12a0
	Actor* CurOperatedTreasureBox;//[Offset: 0x37f8, Size: 0x8]// 0x7611ff1220
	Actor* GameModeActor;//[Offset: 0x3800, Size: 0x8]// 0x7611ff11a0
	Actor* CampActor;//[Offset: 0x3808, Size: 0x8]// 0x7611ff1120
	FString DefaultHUDClassPath;//[Offset: 0x3818, Size: 0x10]// 0x7611ff10b0
	BountyBoughtInfo[] BountyBoughtItemList;//[Offset: 0x3828, Size: 0x10]// 0x7611ff0fb0
	Actor* CandidateBoardingHelicopter;//[Offset: 0x3838, Size: 0x8]// 0x7611ff0f30
	RescueHelicopterBase* CachedHelicopter;//[Offset: 0x3840, Size: 0x8]// 0x7611ff0eb0
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x3848, Size: 0x8]// 0x7611ff0e30
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x3850, Size: 0x10]// 0x7611ff0d30
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x3860, Size: 0x50]// 0x7611ff0b90
	<byte,SlotWeaponData> SavedWeaponSlotData;//[Offset: 0x38b0, Size: 0x50]// 0x7611ff07e0
	int SelectedZombieWaveIndex;//[Offset: 0x3908, Size: 0x4]// 0x7611ff0770
	bool IsTickToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390c, Size: 0x1]// 0x7611ff06f0
	bool IsOnceToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3920, Size: 0x1]// 0x7611ff0670
	int BuildCnt;//[Offset: 0x3924, Size: 0x4]// 0x7611ff0600
	int BuildMax;//[Offset: 0x3928, Size: 0x4]// 0x7611ff0590
	int BuildIndex;//[Offset: 0x392c, Size: 0x4]// 0x7611ff0520
	bool bIsBuildUIEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3930, Size: 0x1]// 0x7611ff04a0
	delegate OnPlayerSelectZombieWave;//[Offset: 0x3938, Size: 0x10]// 0x7611ff0420
	int ConstructableConfigurations;//[Offset: 0x3964, Size: 0x4]// 0x7611ff03b0
	bool GoToPlaneKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3969, Size: 0x1]// 0x7611ff0330
	bool ForceCallLeavePlaneDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396a, Size: 0x1]// 0x7611ff02b0
	int PlayerStartSerialNum;//[Offset: 0x396c, Size: 0x4]// 0x7611ff0240
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x3970, Size: 0x8]// 0x7611ff01c0
	bool bIsDoingRespawnReinitUIWork;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c8, Size: 0x1]// 0x7611ff0140
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x39d0, Size: 0x10]// 0x7611ff00c0
	STExtraPlayerController* DieInstigator;//[Offset: 0x39e0, Size: 0x8]// 0x7611ff0040
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e8, Size: 0x1]// 0x7611feffc0
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e9, Size: 0x1]// 0x7611feff40
	WaterSwimActor*[] ClientLocalSwimActors;//[Offset: 0x39f0, Size: 0x10]// 0x7611fefe40
	AutoTestSystemComponent* AutoTestSystemComp;//[Offset: 0x3a00, Size: 0x8]// 0x7611fefdc0
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x3a08, Size: 0x10]// 0x7611fefaa0
	int MaxTeamFootprintCount;//[Offset: 0x3a18, Size: 0x4]// 0x7611fefa30
	int MaxOtherFootprintCount;//[Offset: 0x3a1c, Size: 0x4]// 0x7611fef9c0
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x3a20, Size: 0x50]// 0x7611fef470
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x3a70, Size: 0x50]// 0x7611fef020
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x3ac8, Size: 0x8]// 0x7611feefa0
	int BOptimizeBulletHit;//[Offset: 0x3ad0, Size: 0x4]// 0x7611feef30
	int BOptimizeBulletHit_Server;//[Offset: 0x3ad4, Size: 0x4]// 0x7611feeec0
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x3ad8, Size: 0x58]// 0x7611fee450
	bool bIsOpeningGameModeGuideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b30, Size: 0x1]// 0x7611fee3d0
	TaskControllerComponent* TaskControllerComponent;//[Offset: 0x3b38, Size: 0x8]// 0x7611fee350
	bool bHasInitTaskController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b40, Size: 0x1]// 0x7611fee2d0
	SeasonTaskListener* SeasonTaskListener;//[Offset: 0x3b48, Size: 0x8]// 0x7611fee250
	STExtraPlayerController*[] TeammatesYouKilled_UsedByServer;//[Offset: 0x3b70, Size: 0x10]// 0x7611fee150
	uint32 LastKillerKey;//[Offset: 0x3b84, Size: 0x4]// 0x7611fee0e0
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x3b88, Size: 0x8]// 0x7611fee060
	delegate OverlookStateDelegate;//[Offset: 0x3c40, Size: 0x10]// 0x7611fedfe0
	delegate OverlookZoomDelegate;//[Offset: 0x3c50, Size: 0x10]// 0x7611fedf60
	delegate OverlookSlideMoveDelegate;//[Offset: 0x3c60, Size: 0x10]// 0x7611fedee0
	delegate OnCharacterDeadDelegate;//[Offset: 0x3c70, Size: 0x10]// 0x7611fede60
	DelaySendingMsgComponent* DelaySendingMsgComp;//[Offset: 0x3c98, Size: 0x8]// 0x7611fedde0
	bool bHasWinFinalGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca0, Size: 0x1]// 0x7611fedd60
	bool bScaleScreenSizeCullingDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca1, Size: 0x1]// 0x7611fedce0
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca3, Size: 0x1]// 0x7611fedc60
	float ControllerRelativeYawMin;//[Offset: 0x3ca4, Size: 0x4]// 0x7611fedbf0
	float ControllerRelativeYawMax;//[Offset: 0x3ca8, Size: 0x4]// 0x7611fedb80
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x3cb4, Size: 0x8]// 0x7611fedb00
	int IdCardMarkType;//[Offset: 0x3cc0, Size: 0x4]// 0x7611feda90
	Rotator SavedRotation;//[Offset: 0x3cc8, Size: 0xc]// 0x7611feda10
	TimerHandle TimerHandle_ClearFireSign;//[Offset: 0x3cd8, Size: 0x8]// 0x7611fed990
	float ClearFireSignDelayTime;//[Offset: 0x3ce0, Size: 0x4]// 0x7611fed920
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cf0, Size: 0x1]// 0x7611fed8a0
	int VehicleControlMode;//[Offset: 0x3cf4, Size: 0x4]// 0x7611fed830
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cf8, Size: 0x1]// 0x7611fed7b0
	Actor*[] ZombieList;//[Offset: 0x3d00, Size: 0x10]// 0x7611fed6b0
	bool bLastClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d44, Size: 0x1]// 0x7611fed630
	HitEffectComponent* HitEffectComponent;//[Offset: 0x3d48, Size: 0x8]// 0x7611fed5b0
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d50, Size: 0x1]// 0x7611fed530
	<int,int> ActivitdedIDMap;//[Offset: 0x3d58, Size: 0x50]// 0x7611fed3a0
	TeamateStateChangedCompressData TeammateStateChangeCompressedData;//[Offset: 0x3da8, Size: 0x24]// 0x7611fed320
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x3dcc, Size: 0x14]// 0x7611fed2a0
	float StreamingDistanceScaleFlying;//[Offset: 0x3de0, Size: 0x4]// 0x7611fed230
	int[] PostPickupItems;//[Offset: 0x3de8, Size: 0x10]// 0x7611fed140
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3df8, Size: 0x1]// 0x7611fed0c0
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x3e00, Size: 0x10]// 0x7611fed040
	delegate OnShowCharmPlayerCountDownDelegate;//[Offset: 0x3e10, Size: 0x10]// 0x7611fecfc0
	delegate PlayerVehiclePawnStateChanged;//[Offset: 0x3e20, Size: 0x10]// 0x7611fecf40
	delegate OnCurrentPlayerKillNumChangedDelegate;//[Offset: 0x3e30, Size: 0x10]// 0x7611fecec0
	TrainingGroundWidget* TrainingUIBP;//[Offset: 0x3e40, Size: 0x8]// 0x7611fece40
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e48, Size: 0x1]// 0x7611fecdc0
	bool NeedScreenShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e49, Size: 0x1]// 0x7611fecd40
	FrameCaptureActor* FrameCapturePtr;//[Offset: 0x3e50, Size: 0x8]// 0x7611feccc0
	class FrameCaptureActor* FrameCaptureClass;//[Offset: 0x3e58, Size: 0x8]// 0x7611fecc40
	int GlideCount;//[Offset: 0x3e64, Size: 0x4]// 0x7611fecbd0
	bool EnableTombBoxBattleUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e69, Size: 0x1]// 0x7611fecb50
	<int,int> WeaponUpgradeIdToSkinBaseIDMap;//[Offset: 0x3e70, Size: 0x50]// 0x7611fec9c0
	WingSyncInfo selfWingInfo;//[Offset: 0x3ec0, Size: 0x10]// 0x7611fec650
	int SpecMotionRestCostCount;//[Offset: 0x3ed0, Size: 0x4]// 0x7611fec5e0
	int GlideSubType;//[Offset: 0x3ed4, Size: 0x4]// 0x7611fec570
	bool bShouldShowGlideConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3edc, Size: 0x1]// 0x7611fec4f0
	int GlideConfigState;//[Offset: 0x3ee0, Size: 0x4]// 0x7611fec480
	bool isGMTestKillFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f48, Size: 0x1]// 0x7611fec400
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x3f50, Size: 0x8]// 0x7611fec380
	bool IsGlobalTeamAssembleDisplayOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f58, Size: 0x1]// 0x7611fec300
	bool IsEnableTeamAssembleDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f59, Size: 0x1]// 0x7611fec280
	delegate TeamAssembleDisplayChanged;//[Offset: 0x3f60, Size: 0x10]// 0x7611fec200
	TeamAssembleAvatarDisplayInfo[] TeamAssemableDisplayInfoList;//[Offset: 0x3f70, Size: 0x10]// 0x7611fec100
	delegate OnSwitchToTeamAssembleViewState;//[Offset: 0x3f80, Size: 0x10]// 0x7611fec080
	int TimeToSwitchToTeamAssembleView;//[Offset: 0x3f90, Size: 0x4]// 0x7611fec010
	float TeamAssembleTimeTolerance;//[Offset: 0x3f94, Size: 0x4]// 0x7611febfa0
	int TeamAssembleMinPlayers;//[Offset: 0x3f98, Size: 0x4]// 0x7611febf30
	delegate MainUIVisibilityChanged;//[Offset: 0x3fa0, Size: 0x10]// 0x7611febeb0
	bool HasSwitchToTeamAssembleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb0, Size: 0x1]// 0x7611febe30
	int DynamicPointLightsNum;//[Offset: 0x3fb4, Size: 0x4]// 0x7611febdc0
	int LastDynamicPointLightsNum;//[Offset: 0x3fb8, Size: 0x4]// 0x7611febd50
	bool HasCheckUpdateTeamAssemableData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fbc, Size: 0x1]// 0x7611febcd0
	int TimeOffsetToUpdateTeamAssemable;//[Offset: 0x3fc0, Size: 0x4]// 0x7611febc60
	int DisplayWeaponID;//[Offset: 0x3fc4, Size: 0x4]// 0x7611febbf0
	int DisplayVehicleID;//[Offset: 0x3fc8, Size: 0x4]// 0x7611febb80
	int DisplayBackpackID;//[Offset: 0x3fcc, Size: 0x4]// 0x7611febb10
	int DisplayHelmetID;//[Offset: 0x3fd0, Size: 0x4]// 0x7611febaa0
	float TVLiveEventDataCollectInterval;//[Offset: 0x3fd4, Size: 0x4]// 0x7611feba30
	StateType StateTypeOnReplay;//[Offset: 0x3fd8, Size: 0x10]// 0x7611feb9b0
	class NewbieGuideComponent* NewbieCompPath;//[Offset: 0x3fe8, Size: 0x28]// 0x7611feb930
	uint32[] BornLandVehicleRelevance;//[Offset: 0x4890, Size: 0x10]// 0x7611feb840
	STExtraVehicleBase* OwnerVehicleOnBornLand;//[Offset: 0x48a0, Size: 0x8]// 0x7611feb7c0
	TickControlComponent* TickControlComp;//[Offset: 0x48c0, Size: 0x8]// 0x7611feb740
	ExceptionReportComponent* ExceptionReportComponent;//[Offset: 0x48c8, Size: 0x8]// 0x7611feb6c0
	bool LockControllerYawToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d0, Size: 0x1]// 0x7611feb640
	OccupationManagerComponent* occupationManager;//[Offset: 0x48d4, Size: 0x8]// 0x7611feb5c0
	enum CurrentWeaponFunction;//[Offset: 0x48e8, Size: 0x1]// 0x7611feb4c0
	float WeaponFunctionChangingInterval;//[Offset: 0x48ec, Size: 0x4]// 0x7611feb450
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f0, Size: 0x1]// 0x7611feb3d0
	float WeaponFunctionLastChangingTime;//[Offset: 0x48f4, Size: 0x4]// 0x7611feb360
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x48f8, Size: 0x8]// 0x7611feb2e0
	int WeatherIndex;//[Offset: 0x4908, Size: 0x4]// 0x7611feb270
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4918, Size: 0x1]// 0x7611feb1f0
	bool bCanDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4919, Size: 0x1]// 0x7611feb170
	class AssetPreLoadingComponent* AssetPreLoadingComponentClassSoftPtr;//[Offset: 0x4920, Size: 0x28]// 0x7611feb0f0
	int EnableAssetPreLoadingMinDeviceLevel;//[Offset: 0x4948, Size: 0x4]// 0x7611feb080
	bool bEnableAssetPreLoadingOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494c, Size: 0x1]// 0x7611feb000
	TouchInterface* MainControllerwTouchInterface;//[Offset: 0x4950, Size: 0x8]// 0x7611feaf80
	bool bIsLayoutLRSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4959, Size: 0x1]// 0x7611feaf00
	bool bDisplayDamageNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495a, Size: 0x1]// 0x7611feae80
	Object*[] CachedPreLoadClassList;//[Offset: 0x4960, Size: 0x10]// 0x7611fead80
	class ObserverHostComponent* ObserverHostComponentPath;//[Offset: 0x4970, Size: 0x28]// 0x7611fead00
	ObserverHostComponent* ObserverHostComponent;//[Offset: 0x4998, Size: 0x8]// 0x7611feac80
	bool bReceivedOnRepPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a0, Size: 0x1]// 0x7611feac00
	bool bReceivedOnRepPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a1, Size: 0x1]// 0x7611feab80
	OBTypeUISource* OBTypeUISourceOjb;//[Offset: 0x49a8, Size: 0x8]// 0x7611feab00
	delegate VaultFailDSCppDelegate;//[Offset: 0x49b8, Size: 0x10]// 0x7611feaa80
	delegate FailedOnClientDelegate;//[Offset: 0x49c8, Size: 0x10]// 0x7611feaa00
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d8, Size: 0x1]// 0x7611fea980
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d9, Size: 0x1]// 0x7611fea900
	float FadeGrayInterpSpeed;//[Offset: 0x49dc, Size: 0x4]// 0x7611fea890
	float TotalTalkTime;//[Offset: 0x49e0, Size: 0x4]// 0x7611fea820
	delegate OnRoomModeReceive;//[Offset: 0x49e8, Size: 0x10]// 0x7611fea7a0
	bool bShowResPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a09, Size: 0x1]// 0x7611fea720
	bool bVoiceChanger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0a, Size: 0x1]// 0x7611fea6a0
	int iCampToolStatusFromServer;//[Offset: 0x4a0c, Size: 0x4]// 0x7611fea630
	bool bCampPrivileges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a10, Size: 0x1]// 0x7611fea5b0
	bool bShowAirLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a11, Size: 0x1]// 0x7611fea530
	bool bUseDistanceMeasurement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a12, Size: 0x1]// 0x7611fea4b0
	bool bShowTeammateKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a13, Size: 0x1]// 0x7611fea430
	bool bDice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a14, Size: 0x1]// 0x7611fea3b0
	int CampKDATipsID;//[Offset: 0x4a18, Size: 0x4]// 0x7611fea340
	bool bCampGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1c, Size: 0x1]// 0x7611fea2c0
	WeaponAttachmentEquipNotifyData[] WeaponAttachmentEquipNotifyDataCacheList;//[Offset: 0x4a20, Size: 0x10]// 0x7611fea1c0
	<FString> CurrentUIStyleNameSet;//[Offset: 0x4a38, Size: 0x50]// 0x7611fea0b0
	FString[] UIStyleWhiteList;//[Offset: 0x4a88, Size: 0x10]// 0x7611fe9fc0
	bool bCurJoystickVisState_old;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a98, Size: 0x1]// 0x7611fe9f40
	bool bJoystickCollapsedByUIStyle_old;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a99, Size: 0x1]// 0x7611fe9ec0
	UserWidgetStyle*[] CurrentApplyStyle;//[Offset: 0x4aa0, Size: 0x10]// 0x7611fe9dc0
	<int,enum> PopKartMarkIDList;//[Offset: 0x4ab0, Size: 0x50]// 0x7611fe9b40
	float PopKartMarkVisibilityDistance;//[Offset: 0x4b00, Size: 0x4]// 0x7611fe9ad0
	class Actor* WeaponDamageMonitorSoftClass;//[Offset: 0x4b08, Size: 0x28]// 0x7611fe9a50
	int CharmValue;//[Offset: 0x4b30, Size: 0x4]// 0x7611fe99e0
	int CharmLevel;//[Offset: 0x4b34, Size: 0x4]// 0x7611fe9970
	GameModePlayerItem[] ResearchAbilityList;//[Offset: 0x4b38, Size: 0x10]// 0x7611fe9870
	int BornlandShowCarID;//[Offset: 0x4b48, Size: 0x4]// 0x7611fe9800
	FString playerFaceInfo;//[Offset: 0x4b50, Size: 0x10]// 0x7611fe9790
	bool bPlayGunMasterVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b60, Size: 0x1]// 0x7611fe9710
	PlayerPetInfo PetInfo;//[Offset: 0x4b64, Size: 0x8]// 0x7611fe9690
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x4b70, Size: 0x10]// 0x7611fe9610
	delegate OnBountyBuyItemListDelegate;//[Offset: 0x4b80, Size: 0x10]// 0x7611fe9590
	delegate OnPlayerHitFireBtnDelegate;//[Offset: 0x4b90, Size: 0x10]// 0x7611fe9510
	STExtraBaseCharacter* DelayReloadAvatarChar;//[Offset: 0x4ba4, Size: 0x8]// 0x7611fe9490
	PlayerCameraPossessManager* OwnedCameraPossessManager;//[Offset: 0x4bb0, Size: 0x8]// 0x7611fe9410
	int CurrentMarkInstanceID;//[Offset: 0x4bb8, Size: 0x4]// 0x7611fe93a0
	bool bIsEnableUploadPersonalOP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bbc, Size: 0x1]// 0x7611fe9320
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x4bc0, Size: 0x8]// 0x7611fe92a0
	delegate OnClientBountyBuyItemResult;//[Offset: 0x4bc8, Size: 0x10]// 0x7611fe9220
	Actor* CurrentFakePossessActor;//[Offset: 0x4be0, Size: 0x8]// 0x7611fe91a0
	ActivityFakePossessComponent* CurrentFakePossessComp;//[Offset: 0x4be8, Size: 0x8]// 0x7611fe9120
	float SendTLogCD;//[Offset: 0x4bf0, Size: 0x4]// 0x7611fe90b0
	float SendFallingTLogCD;//[Offset: 0x4bf4, Size: 0x4]// 0x7611fe9040
	class AiServiceSpectator* AiServiceSpectatorClass;//[Offset: 0x4c00, Size: 0x8]// 0x7611fe8fc0
	bool bMoveChangeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c28, Size: 0x1]// 0x7611fe8f40
	SimViewData OBSimulateViewData;//[Offset: 0x4c2a, Size: 0xc]// 0x7611fe8ec0
	FString[] UniqPrintLog;//[Offset: 0x4c38, Size: 0x10]// 0x7611fe8dd0
	FString[] TriggerLevelsClientWhiteList;//[Offset: 0x4c48, Size: 0x10]// 0x7611fe8ce0
	FString[] TriggerLevelsClientBlackList;//[Offset: 0x4c58, Size: 0x10]// 0x7611fe8bf0
	<FString,TriggerLevelLoadProxy> TriggerLevelWhiteListProxy;//[Offset: 0x4c68, Size: 0x50]// 0x7611fe8a50
	<FString,TriggerLevelLoadProxy> TriggerLevelBlackListProxy;//[Offset: 0x4cb8, Size: 0x50]// 0x7611fe8630
	float CheckTriggerLevelClientWhiteListDelay;//[Offset: 0x4d08, Size: 0x4]// 0x7611fe85c0
	bool bNeedWeaponsCompanionComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d18, Size: 0x1]// 0x7611fe8540
	bool bNeedWeaponsCompanionClientComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d19, Size: 0x1]// 0x7611fe84c0
	bool bWeaponsCompanionPlayTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1a, Size: 0x1]// 0x7611fe8440
	GameModePlayerItem[] WeaponsCompanionSyncAbilityList;//[Offset: 0x4d20, Size: 0x10]// 0x7611fe8340
	GameModePlayerItem[] WeaponsCompanionAbilityList;//[Offset: 0x4d30, Size: 0x10]// 0x7611fe8240
	int TestWeaponsCompanionRule;//[Offset: 0x4d40, Size: 0x4]// 0x7611fe81d0
	WeaponsCompanionClientComponent* WeaponsCompanionClientComponent;//[Offset: 0x4d48, Size: 0x8]// 0x7611fe8150
	bool bWeaponsCompanionFighting_Server;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d50, Size: 0x1]// 0x7611fe80d0
	bool bWeaponsCompanionFighting_Client;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d51, Size: 0x1]// 0x7611fe8050
	delegate OnReplaceSuitSkin;//[Offset: 0x4d58, Size: 0x10]// 0x7611fe7fd0
	delegate OnVoiceCheckShowMoveImage;//[Offset: 0x4d68, Size: 0x10]// 0x7611fe7f50
	delegate OnVoiceCheckShowVehicleImage;//[Offset: 0x4d78, Size: 0x10]// 0x7611fe7ed0
	delegate OnVoiceCheckShowWeaponShootImage;//[Offset: 0x4d88, Size: 0x10]// 0x7611fe7e50
	delegate OnVoiceCheckShowGlassImage;//[Offset: 0x4d98, Size: 0x10]// 0x7611fe7dd0
	delegate OnUpdateViewPitchLimit;//[Offset: 0x4da8, Size: 0x10]// 0x7611fe7d50
	float CheckMoveableExceptionTimer;//[Offset: 0x4db8, Size: 0x4]// 0x7611fe7ce0
	float RealTimeCheckMoveableExceptionInterval;//[Offset: 0x4dbc, Size: 0x4]// 0x7611fe7c70
	float ConfigCheckMoveableExceptionInterval;//[Offset: 0x4dc0, Size: 0x4]// 0x7611fe7c00
	float MoveableExceptionCumulativeTime;//[Offset: 0x4dc4, Size: 0x4]// 0x7611fe7b90
	float MoveableCheckTimeLimit;//[Offset: 0x4dc8, Size: 0x4]// 0x7611fe7b20
	float CurrentMoveableCheckTime;//[Offset: 0x4dcc, Size: 0x4]// 0x7611fe7ab0
	float CheckMoveableExceptionRadius;//[Offset: 0x4dd0, Size: 0x4]// 0x7611fe7a40
	float CheckMoveableExceptionHalfHeight;//[Offset: 0x4dd4, Size: 0x4]// 0x7611fe79d0
	float CheckMoveableExceptionThumbCenterDisMin;//[Offset: 0x4dd8, Size: 0x4]// 0x7611fe7960
	float CheckMoveableReportExceptionCumulativeTimeLimit;//[Offset: 0x4ddc, Size: 0x4]// 0x7611fe78f0
	Vector CheckMoveableLocationCache;//[Offset: 0x4de0, Size: 0xc]// 0x7611fe7870
	byte[] ExtraCheckMoveableObjectType;//[Offset: 0x4df0, Size: 0x10]// 0x7611fe7770
	bool bForceSetControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e00, Size: 0x1]// 0x7611fe76f0
	PlayerWeatherComponent* PlayerWeatherComponent;//[Offset: 0x4e08, Size: 0x8]// 0x7611fe7670
	DeviceInfo ClientDeviceInfo;//[Offset: 0x4e10, Size: 0x88]// 0x7611fe75f0
	float PeekResponseDeltaTime;//[Offset: 0x4e98, Size: 0x4]// 0x7611fe7580
	float PeekResponseTotalTime;//[Offset: 0x4e9c, Size: 0x4]// 0x7611fe7510
	int PeekTriggerCount;//[Offset: 0x4ea0, Size: 0x4]// 0x7611fe74a0
	void WeaponsCompanionPlayVoice_GM(int VoiceID, int voiceIndex);// 0x467c110
	void WakeUpVehicles(float Radius);// 0x467c094
	void VisualizeItem();// 0x467c080
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x467bf84
	void ViewPlane();// 0x467bf70
	void UseSkill(int SkillID);// 0x467bef4
	void UserDropItemOperation(ItemDefineID DefineID);// 0x467be68
	void UseItem(int ID);// 0x467bdec
	void UploadUsrWidgetOpenFrequency();// 0x467bdd8
	void UpdateViewPitchLimitDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void UpdateSurfboardUI();// 0x467bdc4
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x467bd40
	void UpdatePoseViewPitchLimit();// 0x467bd2c
	void UnLoadUserWidgetStyleByPath(FString PathString);// 0x467bca8
	void UnLoadUserWidgetStyle(UserWidgetStyle* Style);// 0x467bc2c
	void UnLoadAllUserWidgetStyle();// 0x467bc18
	void UnLoadAllLand(bool bUnLoadAll);// 0x467bb94
	void UnLoadAllCollision(bool Unload);// 0x467bb10
	void UGCServerBountyBuyItemSingle(int ItemID, int ItemCount);// 0x467ba28
	void UGCServerBountyBuyItem(BountyBuyingInfo InBuyingInfo);// 0x467b978
	void UGCSendTLog(int TLogID, FString TLogKey, FString TLogValue);// 0x467b86c
	void UGCMoveEvent(Vector2D Axis);// 0xffffff8a17adf2b0
	void UGCLookEvent(Vector2D Rot);// 0xffffff8a17adf2b0
	void UGCClientSyncBountyBoughtItemList(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0x467b7e0
	void UGCClientBountyBuyItemResult(BountyBuyingResultInfo InBuyingResultInfo);// 0x467b748
	void UGC_TouchScreenEvent(const byte FingerIndex, const Vector Loc);// 0xffffff8a17adf2b0
	bool UGC_ThrowGrenadeEvent();// 0x467b708
	bool UGC_SwitchWeaponControlEvent(byte SwitchSlot);// 0x467b670
	bool UGC_StartFireControlEvent();// 0x467b630
	bool UGC_ReloadControlEvent();// 0x467b5f0
	void UGC_ReleaseScreenEvent(const byte FingerIndex);// 0xffffff8a17adf2b0
	void UGC_PlayerReconnectedEvent(bool IsRecovered);// 0xffffff8a17adf2b0
	void UGC_PlayerLostConnectionEvent();// 0xffffff8a17adf2b0
	bool UGC_PickupItemEvent(int ItemID, int Count);// 0x467b520
	bool UGC_OpenScopeControlEvent();// 0x467b4e0
	void UGC_OnPlayerControllerRecovered();// 0x467b4cc
	void UGC_OnPlayerControllerReconnected();// 0x467b4b8
	void UGC_IsSpectatingEvent(const bool bIsSpec);// 0xffffff8a17adf2b0
	void UGC_InitializationCompleteEvent();// 0xffffff8a17adf2b0
	void UGC_FingerMoveEvent(const byte FingerIndex, const Vector Loc);// 0xffffff8a17adf2b0
	void Turn(float Rate);// 0x467b43c
	void TryExitVehicle();// 0x467b428
	void TryEnterVehicle_IgnoreDistanceAndBlock(STExtraVehicleBase* Vehicle, enum SeatType);// 0x467b370
	void TryEnterVehicle(STExtraVehicleBase* Vehicle, enum SeatType);// 0x467b2b8
	void TryEnterClosestVehicle(enum SeatType);// 0x467b23c
	bool TryControlRemotePawn(Pawn* ControledPawn);// 0x467b1ac
	void TryChangeToVehicleSeat(int SeatIndex);// 0x467b130
	void TryChangeSeatVehicle();// 0x467b11c
	void TriggerOnUITouchMoveEvent(Vector Loc);// 0x467b09c
	void TraceTestLandscape(float X, float Y, float Z);// 0x467afac
	void TouchMove(Vector Loc, byte FingerIndex);// 0x467aeec
	bool TouchEnd(byte PressType);// 0x467ae5c
	void TouchBegin(byte PressType);// 0x467ade0
	void ToShowOrHideParachutingPanel(bool bShow, bool bAttemptToReleaseUI);// 0x467ad08
	void ToServerRPC_ChangeTeammateImprisonmentStatus(FString TeammateName, bool bDoImprisonment);// 0x467abf8
	void ToggleVehicleSync(bool Val);// 0x467ab74
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x467aaf0
	void ToggleUserCmdDeltaFlag(bool Val);// 0x467aa6c
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x467a9e8
	void ToggleUserCmdDelta(bool Val);// 0x467a964
	void ToggleServerAcknowledgePossession(bool Val);// 0x467a8e0
	void ToggleSceneInpute();// 0x467a8bc
	void ToggleOBVehicleView();// 0x467a8a8
	void ToggleOBTPPFollowFreeView();// 0x467a894
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x467a810
	void ToggleCheatLocation(bool Val);// 0x467a78c
	void ToggleAirPhotoView();// 0x467a778
	void ToggleAICruising();// 0x467a764
	void TimerDisableLogCache();// 0x467a750
	void TextCreateBeKilledMaxKillerTip(int inNumber);// 0x467a6d4
	void TextCreateAddKillMaxKillerTip(int inNumber);// 0x467a658
	void TestSpawnFakeChar();// 0x467a644
	void TestShowTeamerKillTip(int ResultType, int KillNum, int ResPlatformID);// 0x467a554
	void TestShowLeftQueueTip();// 0x467a540
	void TestSelfIsMaxKillerRecordCont(int Count);// 0x467a4c4
	void TestSelfIsMaxKillerRecord();// 0x467a4b0
	void TestNewFatalDamage(ClientFatalDamageRecordData NewData);// 0x467a394
	void TestNetFlowServerRPC_UnReliable(const int[] TestArray);// 0x467a2dc
	void TestNetFlowServerRPC_Reliable(const int[] TestArray);// 0x467a224
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x467a134
	void TestInvalidServerRPC(Actor* Actor);// 0x467a084
	void TestFindStraightPath(bool bEnable, float DistanceLimit);// 0x4679fbc
	void TestExcellentOperation(int StartOperationTypeID, int Count, bool CurIsSpectating);// 0x4679ec4
	void TestEnterAvatarDisplay();// 0x4679eb0
	void TestEnableTeamAssemable();// 0x4679e9c
	void TestDropAllAndReplace();// 0x4679e88
	void TestCreateNewEspecialFatalDamage(int inNumber);// 0x4679e0c
	void TestAyncLoadFXWidget(int Index, int Type);// 0x4679d58
	void TestAddOperationTip(int TipID);// 0x4679cdc
	void TeamNoAlwaysRelevant();// 0x4679cc8
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x4679bcc
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, TeamateStateChangedCompressData ChangedCompressedData);// 0x4679af0
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x46799d0
	void SwitchViewTarget();// 0x46799bc
	void SwitchToDeadBox();// 0x46799a8
	void SwitchTeamAssembleDisplayGlobally(bool IsEnable);// 0x4679924
	void SwitchStaticConfigZombie();// 0x46798c4
	void SwitchSpawnZombie();// 0x4679864
	void SwitchMouseCursorShowState();// 0x4679850
	void SwitchGenerateItem();// 0x46797f0
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x4679738
	void SwitchCameraModeByOrder();// 0x4679724
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x46795dc
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x46794e0
	void StopRotatingOBFreeViewCameraCounterclockwise();// 0x46794cc
	void StopRotatingOBFreeViewCameraClockwise();// 0x46794b8
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x46793e0
	void StopAutoDoorTest(int ConfigGraphIndex);// 0x4679364
	void StatFindStraightPath();// 0x4679350
	void StatClientAllWeaponsInfo();// 0x467933c
	void StatBackpackItemsData();// 0x4679328
	void StartTestFloat();// 0x4679314
	void StartStateSign(enum State);// 0x4679298
	void StartRotatingOBFreeViewCameraCounterclockwise();// 0x4679284
	void StartRotatingOBFreeViewCameraClockwise();// 0x4679270
	void StartRecord();// 0x467925c
	void StartReadyCountDown();// 0x4679248
	void StartPreBuildingMode();// 0x467922c
	void StartLandOnGroundAfterJumpPlane();// 0x4679218
	void StartGame();// 0x4679204
	void StartFreeCamera(byte FigerIndex, bool ResetStartRotation);// 0x4679144
	void StartCheckCriticalLevelLoaded();// 0x4679130
	void StartAutoDoorTest(int ConfigGraphIndex, float WorldSizeX, float WorldSizeY, float BlockLoadTime, float WorldLEftTopX, float WorldLeftTopY, float BlockSizeX, float BlockSizeY);// 0x4678f1c
	void StartAirDropSpecified(float X, float Y, int Index);// 0x4678e2c
	void StartAirDrop(int Index);// 0x4678db0
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x4678cc0
	void StartAirAttack(int Index);// 0x4678c44
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x4678b80
	void SpawnWingManMiniMap(out const Vector Pos);// 0x4678af4
	void SpawnWeaponDamageMonitor(float Distance);// 0x4678a44
	void SpawnVehicleWithPath(FString Path);// 0x46789c0
	void SpawnVehicle();// 0x46789ac
	void SpawnBattleFlagActor(STExtraBaseCharacter* Inviter, STExtraBaseCharacter* Recevier, int Type);// 0xffffff8a17adf2b0
	void SpawnAITest(int Num, byte BehaviorTreeIndex, float Radius, FString AvatarList);// 0x4678870
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x4678780
	void SpawnAI(int Num, byte Difficulty, bool bAIRandomlySpawn);// 0x4678684
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x4678608
	void SimulateTouch(bool IsLoop);// 0x4678584
	void ShowWeaponsCompanionDebugInfo();// 0x4678570
	bool ShowVehicleSkinBtnCondition(STExtraVehicleBase* Vehicle);// 0x46784d8
	bool ShowVehicleBtnCondition(STExtraVehicleBase* Vehicle);// 0x4678440
	void ShowVaultEnable();// 0x4678420
	void ShowTouchInterface(bool bShow);// 0x4678394
	void ShowTimeFromStartOfServer(float serverSec);// 0x4678310
	void ShowTimeFromStart();// 0x46782fc
	void ShowSpeedAndAdditionalDamage();// 0x46782e8
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x46781e4
	void ShowNavLink(float Meters);// 0x4678168
	void ShowMovePath(const Vector[] Path);// 0x46780dc
	void ShowHistoryMoveLocations();// 0x46780c8
	void ShowHideMainUI(bool bShow);// 0x4678044
	void ShowGM();// 0x4678030
	void ShowFireBtn(bool bShow);// 0xffffff8a17adf2b0
	void ShowCustomInfo(FString Key, FString Value);// 0x4677ec8
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x4677e00
	void ShowBox(const Vector Center, const Vector Box, const Quat Rotation, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x4677bc8
	void ShowAnimationButton(bool isShow, int NewUIType);// 0x4677af8
	void ShowAllRoles();// 0x4677ae4
	bool ShouldShowGlideTrailParticle();// 0x4677aa4
	bool ShouldIgnoreTouchMove(byte FingerIndex);// 0x4677a0c
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x467797c
	void SetWeaponsCompanionDrawParam(float Scale, int X, int Y);// 0x467788c
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x4677808
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint, bool bUIOnly);// 0x4677738
	void SetVirtualAutoHideMode(bool AutoHide, float AutoHideTime);// 0x4677670
	void SetViewYawLimitByName(FName LimitName, float YawMin, float YawMax);// 0x4677580
	void SetViewYawLimit(float YawMin, float YawMax);// 0x46774cc
	void SetViewPitchLimitByName(FName LimitName, float PitchMin, float PitchMax);// 0x46773dc
	void SetViewPitchLimit(float PitchMin, float PitchMax);// 0x4677328
	void SetupTeamAssembleDisplayInfoBlueprint();// 0xffffff8a17adf2b0
	void SetupTeamAssembleDisplayInfo();// 0x4677314
	void SetTouchMoveCache(out const int[] EachMoveWeightSetting);// 0x4677280
	void SetTimeSpeedFactor(float Val);// 0x4677204
	void SetTimeSpeedCheck(bool Val);// 0x4677180
	void SetTickBuild(bool IsOpen, bool IsSelfOnly);// 0x46770b0
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x4676fac
	void SetSwitchTeammateWithBlend(float BlendNum);// 0x4676f30
	void SetSubTitleDynamicInfo(FString Key, FString Value);// 0x4676e60
	void SetStateLeftTime(int LeftTime);// 0x4676de4
	void SetSpeed(float Modifier);// 0x4676d68
	void SetSkillFingerIndex(byte FingerIndex);// 0x4676cec
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x4676c68
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x4676ba0
	void SetPlayerMark(Vector Loc);// 0x4676ae8
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x467694c
	void SetPlaneEnabled(bool InEnable);// 0x46768c8
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x46767bc
	void SetObVehicleView(bool IsActive);// 0x4676738
	void SetNoFalling(float Value);// 0x46766bc
	void SetNoCollison();// 0x46766a8
	void SetMyObserversTeamID(int InTeamID);// 0x467662c
	void SetMoveableWithTimeLimit(bool IsMovable, float TimeLimit);// 0x4676564
	void SetMovable(bool IsMovable);// 0x46764e0
	void SetMaxHealth(float HP);// 0x4676464
	void SetMapMarkParticleLocationOverride(Vector4 MapMarkParticleLocation);// 0x46763d8
	void SetMapMarkParticleLocation(Vector4 MapMarkParticleLocation);// 0x467631c
	void SetLocalWeaponsCompanionFighting(bool Fighting, bool Force);// 0x467624c
	void SetLandCollison(bool HasCollision);// 0x46761c8
	void SetJumpVel(int InVel);// 0x467614c
	void SetJoystickUserSettingOpacity(float NewOpacity);// 0x46760d0
	void SetJoyStickScale(float JSScale);// 0x4676054
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x4675f9c
	void SetJoyStickOpacity(float JSOpacity, bool bNeedUpdateCenter);// 0x4675edc
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x4675e64
	void SetJoystickFreeViewOpacity(bool isOpenFreeView);// 0x4675de0
	void SetJoyStickCenter(Vector2D JSCenter);// 0x4675d68
	void SetIsSnowy(bool bSnowy);// 0x4675ce4
	void SetIsRainy(bool bRainy);// 0x4675c60
	void SetIsLayoutLRSwitchOpened(bool bInIsLayoutLRSwitchOpened);// 0x4675bdc
	void SetIsJoyStickShow(bool isShow);// 0xffffff8a17adf2b0
	void SetIsBlizzard(bool bBlizzard);// 0x4675b58
	void SetIsAutoAimEnabled(bool bIsEnable);// 0x4675ad4
	void SetIgnoreCustomActorsReplication(bool bIgnore);// 0x4675a50
	void SetGravityEnable(STExtraBaseCharacter* pCharacter, bool InEnable);// 0x4675990
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x467587c
	void SetGameStateModeUI(const FString[] ModeUIMgr);// 0x467579c
	void SetGameModeID(FString GameModeID);// 0x46756c4
	void SetForceSetControlRotation(bool bEnable);// 0x4675640
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x4675580
	void SetEnableMoveInputStateSixteenDir(bool Enable);// 0x46754fc
	void SetEnableLogCacheWithTimeLimit(bool InEnable, float InTimeLimit, FString CacheTypeKey, bool bForceOpenLog);// 0x46753a8
	void SetEnableLogCacheWithTimeAndTypes(bool InEnable, float InTimeLimit, FString CacheTypeKey, const FString[] OpenLogTypes, bool bForceOpenLog);// 0x4675118
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x4674ff0
	void SetCurrentFakePossessActor(Actor* Actor, ActivityFakePossessComponent* Comp);// 0x4674f28
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x4674e38
	void SetControlRotationLimits(float _MaxDeltaYawBetweenControlAndActor, bool _bWaistFollowingController);// 0x4674d78
	void SetControlRotation(out const Rotator NewRotation);// 0x4674ce8
	void SetControllerTouchEnabled(bool bNewEnable);// 0x4674c64
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList);// 0x4674b68
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x4674a68
	void SetCanJump(bool CanJump);// 0x46749e4
	void SetCanCloseParachute(bool CanCloseParachute);// 0x4674960
	void SetCameraFreeMoveSpeedScale(const float InCameraFreeMoveSpeedScale);// 0x46748e4
	void SetbShowJudgePlayerList(bool bShowJudge);// 0x4674860
	void SetBlueCircleRaidationHiddenInGame(bool bNewHidden);// 0x46747dc
	void SetBlueCircleHiddenInGame(bool bNewHidden);// 0x4674758
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x4674690
	void SetAirDropEnable(bool Enable);// 0x467460c
	void SetAirAttackEnable(bool Enable);// 0x4674588
	void ServerUseSkill(int SkillID);// 0x46744d8
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x467435c
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x46742ac
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x46741fc
	void ServerTriggerMysteriosPointEscape(const int InMysteriosID);// 0x467414c
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x467409c
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x4673fec
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x4673ea4
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StopFireInfo InStopFireInfo);// 0x4673d78
	void ServerStartPreBarrel(STExtraCharacter* TargetCharacter, float HandledTime);// 0x4673c88
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x4673a38
	void ServerStartMonsterTreasureBox();// 0x4673a24
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x46738f8
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x4673848
	void ServerShowSyncVehicleMark(MarkSyncData SyncData);// 0x46734cc
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte ShootType, STExtraShootWeapon* TargetWeapon);// 0x467339c
	void ServerSetReloadMethod(STExtraBaseCharacter* TargetCharacter, byte reloadMethod);// 0x46732ac
	void ServerSetObsverLocation(const Vector locat);// 0x46731fc
	void ServerSetIsFreeView(bool isFreeView);// 0x4673138
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x4673030
	void ServerSetFreeCamera(Rotator InRotation);// 0x4672f7c
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x4672e74
	void ServerSetControlRotation(const Rotator NewRotation);// 0x4672dc8
	void ServerSetAllowViewCharmInfo(bool Allow_View);// 0x4672d04
	void ServerSendVeheclePoint();// 0x4672ca4
	void ServerSendTLog(int TLogID, FString TLogKey, FString TLogValue);// 0x4672b5c
	void ServerSendTeammatesKDA();// 0x4672afc
	void ServerSelectZombieWave(int ZombieWaveIndex);// 0x4672a4c
	void ServerRPC_RequestWindOnBoard(bool bOnBoard);// 0x4672988
	void ServerRPC_RequestPlayerInfo(FString inUIDStr);// 0x46728d0
	void ServerRPC_RequestCallWingPlane(int EffectID);// 0x4672820
	void ServerRPC_GunMasterMediaPlayCounter(int inSelfCount);// 0x4672770
	void ServerRPC_EnterObserveFlow(enum inObFlowIndex);// 0x46726c0
	void ServerRPC_ChangeVehicleAvatar(STExtraVehicleBase* InVehicle, const int InChangeTargetSkinID);// 0x46725d0
	void ServerReportWatchGamePlayerInfoButtonClick(WatchGamePlayerInfoButtonClick PlayerInfoButtonClick);// 0x4672524
	void ServerReportMovable(bool bIsMovable);// 0x4672460
	void ServerReportError(FString ErrorMsg);// 0x46723a8
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x46721c8
	void ServerReceiveUIInitMsgFromClient();// 0x4672168
	void ServerReceiveThePlane(int64 TimeStamp);// 0x46720b8
	void ServerReceiveServerStateType(StateType ReceivedType, StateType ClientType, int64 TimeStamp);// 0x4671f78
	void ServerPayMysteriosPointEscapeCash(const int InMysteriosID);// 0x4671ec8
	void ServerOperateActor(Actor* Box, int OperateType);// 0x4671dd8
	void ServerOpenParachute();// 0x4671d78
	void ServerObserveSameCamp();// 0x4671d18
	void ServerObserveKiller();// 0x4671cb8
	void ServerObserveCharacterFS(FString InPlayerKey, bool IsFromClient);// 0x4671bec
	void ServerObserveCharacter(uint32 InPlayerKey, bool IsFromClient);// 0x4671ae8
	void ServerObserveAirDropBox(int BoxId);// 0x4671a38
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x4671934
	void ServerLockYawToPlayer(bool InLockControllerYawToPlayer);// 0x4671870
	void ServerLeaveFolkCustomsShow(const Actor* InFolkCustomsActor);// 0x46717c0
	void ServerLeaveCustomSpectating();// 0x4671760
	void ServerJumpFromPlane();// 0x4671700
	void ServerHeartbeat(const HeartbeatData InHeartbeatData);// 0x4671634
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x4671540
	void ServerHandleMsg(enum Msg);// 0x4671490
	void ServerHandleHitDataArraySplit_Shoot(STExtraShootWeapon* TargetWeapon, const SacStructSplit_Shoot InData);// 0x467134c
	void ServerHandleHitDataArraySplit(STExtraShootWeapon* TargetWeapon, const SacStructSplit InAntiCheatData);// 0x4671234
	void ServerHandleHitDataArrayNew(STExtraShootWeapon* TargetWeapon, const SacStructNew InAntiCheatData);// 0x4671114
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x4670fb0
	void ServerGetTotalPlayers();// 0x4670f50
	void ServerFindingPath(Vector StartPoint, Vector EndPoint);// 0x4670e48
	void ServerFight();// 0x4670de8
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x4670d38
	void ServerExitFreeCamera();// 0x4670cd8
	void ServerEnterFolkCustomsShow(const Actor* InFolkCustomsActor);// 0x4670c28
	void ServerDumpPlayerInfo();// 0x4670bc8
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x4670a7c
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x4670978
	void ServerDoRequestConcertSync(ConcertPlayerActor* InConcertPlayerActor);// 0x46708c8
	void ServerDoPickupRevivalFlag();// 0x4670868
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x467075c
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x467066c
	void ServerCMD_RPC(FString Cmd);// 0x46705b4
	void ServerCMD(FString Cmd);// 0x4670530
	void ServerClientEnterOrExitSnowBoard(STExtraVehicleBase* ExitVehicle, bool IsEnter);// 0x467042c
	void ServerClearTeammatesCache();// 0x46703cc
	void ServerCheatCommand(const CheatCommandInfo InCheatCommandInfo);// 0x46702ec
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x467023c
	void ServerChangeStatePC(enum TargetStateType);// 0x46701c0
	void ServerChangeShootWeaponAmmoType(STExtraBaseCharacter* TargetCharacter, int AmmoID, STExtraShootWeapon* TargetWeapon);// 0x4670090
	void ServerChangeGlideConfigState();// 0x4670030
	void ServerCatchRabbit(Actor* Rabbit);// 0x466ff80
	void ServerBountyBuyItemSingle(int ItemID, int ItemCount);// 0x466fe98
	void ServerBountyBuyItem(const BountyBuyingInfo InBuyingInfo);// 0x466fde8
	void ServerBoardHelicopter_GunMaster(Actor* InTargetHelicopter);// 0x466fd38
	void ServerBoardHelicopter(RescueHelicopterBase* Helicopter);// 0x466fc88
	void ServerAndClientUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x466fb68
	void Server_TryRevertModeAvatarFeature(const ModeAvatarFeatureNetMetaData InFeatureNetMetaData);// 0x466fa84
	void Server_TryActivateModeAvatarFeature(const ModeAvatarFeatureNetMetaData InFeatureNetMetaData);// 0x466f9a0
	void Sequence_SetNearClipPlane(bool bEnable, int NearClip, int DataPriority);// 0x466f8a0
	void Sequence_PlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x466f6fc
	void Sequence_HapticFeedBackByID(int ID, float VirateAlpha);// 0x466f644
	void Sequence_ForceFeedBack(SoftObjectPath ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x466f498
	void SendToServerRemoteControlClientInitOK(RemoteControlComponent* RemoteControl);// 0x466f3e8
	void SendToClientPlayerBePrompt(int ClientFatalItemType, FString CauserInfo, FString VictimInfo);// 0x466f2a0
	void SendStringMsg(FString Message, int MsgID, enum chatType);// 0x466f1a0
	void SendServerReportImprisonmenter();// 0x466f140
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x466f0ac
	void SendEagleWacherRadioMsg(int MsgID);// 0x466f030
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x466ef1c
	void ScopeOut();// 0x466ef08
	void ScopeIn();// 0x466eef4
	void SaveRotation();// 0x466eee0
	void S2CRPC_SyncReportInfoToClient(FString murderName, const bool IsAI, FString murderUID, const bool IsMurderSameTeam, const InformPlayerTypeInfo[] InformPlayersListOnServer, const FString[] TeammatesYouAttackFirstOnServer);// 0x466ec38
	void S2C_SubmitQuestionResponse(const bool AnswerResult);// 0x466eb74
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x466e9e4
	void S2C_HelpSelf(bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x466e8a8
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x466e72c
	void S2C_GetQuestionResponse(const int QuestionID, WarteringAreaCPP* CurrentNPC);// 0x466e63c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x466e4c0
	void RunOnNextFrameEvent();// 0x466e4ac
	void RunOnNextFrame__DelegateSignature();// 0xffffff8a17adf2b0
	void RspShutdownRemotePawn(enum PawnType, float ShutDownTime);// 0x466e3ec
	void RspRecallRemotePawn(Pawn* ControledPawn, bool bSucceed, float MaxRecallTime);// 0x466e2e0
	void RspPauseRemotePawn(Pawn* ControledPawn, bool bSucceed);// 0x466e218
	void RspControlRemotePawn(Pawn* ControledPawn, bool bSucceed);// 0x466e150
	void RPC_TopFiveChooseContinue();// 0x466e0f0
	void RPC_ShowTopFiveTipsNotify();// 0x466e090
	void RPC_SetPlayerInitialItemListForClient(const GameModePlayerItem[] InServerInitialItemList);// 0x466e004
	void RPC_ServerReportRCRWrongResultByClient(const RCRResultDebugInfoByClient WrongResultInfo);// 0x466df20
	void RPC_Server_WeaponsCompanionFightingChange(bool Fighting);// 0x466de5c
	void RPC_Server_UploadClientWeaponShootDataRecordList(const ClientWeaponShootReportData[] ReportDataList);// 0x466dd4c
	void RPC_Server_SyncFreeCameraState(bool bIsFreeCam);// 0x466dc88
	void RPC_Server_SyncBanPlayerInfo(FString BannedName, int banTime);// 0x466db8c
	void RPC_Server_ShowWeaponsCompanionDebugInfo();// 0x466db2c
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x466da04
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x466d6d8
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x466d3f0
	void RPC_Server_ShootMultiEnergyAccumulateProjectileBulletsSimulate(STExtraShootWeapon* TargetWeapon, const ShootMultiBulletsParam[] LaunchParams, float CurAccEnergyPercent);// 0x466d2b4
	void RPC_Server_SetWeaponsCompanionPlayTag(bool Play);// 0x466d1f0
	void RPC_Server_SendData(const byte[] DataArray, const PointDamageEvent DamageEvent, bool BoolParam, int IntParam, enum EnumParam, FString StringParam, const float[] ArrayParam, STExtraBaseCharacter* ActorParam);// 0x466cf0c
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x466ceac
	void RPC_Server_ReportRenderQualityCVars(const RenderQualityCVarsToSync CVarsToSync);// 0x466ce00
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x466cd48
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x466cc84
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x466cafc
	void RPC_Server_RecordClientActivityToTLog(int TLogID, FString Str1, FString Str2, int64 InPlayerKey, Vector Position, bool IsPersonal, bool SendTlog);// 0x466c888
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x466c798
	void RPC_Server_NotifyServerShootCriticalVerifyCacheData(STExtraShootWeapon* ShootWeapon, int ClientShootFrame, const CacheCriticalVerifyMoveParam MoveParam, const CacheCriticalVerifyShootParam ShootParam, const CacheCriticalVerifyBulletHitUploadParam BulletHitUploadParam, FString ExtraInfo);// 0x466c4a4
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x466c3b0
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x466c2bc
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x466c09c
	void RPC_Server_NorifyServerOpenedPickUpBoxes(const int[] BoxUniqueIDList, enum BoxType);// 0x466bfa0
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x466bf40
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x466be88
	void RPC_Server_NorifyServerAddFirstOpenedMonsterTombBoxes(const int[] MonsterUniqueIDArray);// 0x466bdd0
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x466bd18
	void RPC_Server_FetchIsPlayGunMasterVideoValue();// 0x466bcb8
	void RPC_Server_EnablePlayerWeaponModuleSystem(bool bEnable);// 0x466bbf4
	void RPC_Server_ClientShootBulletAmmoType(STExtraShootWeapon* TargetWeapon, int AmmoType, int ShootID);// 0x466bacc
	void RPC_Server_ClientHasReactivated();// 0x466ba6c
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x466b944
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, enum StateType);// 0x466b854
	void RPC_ReviveState_GiveUpRevive();// 0x466b7f4
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x466b744
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, const WeatherControllerRepData RepWeatherInfo);// 0x466b670
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x466b5c0
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x466b47c
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, FString murderUID, const bool IsMurderSameTeam);// 0x466b2d4
	void RPC_OwnerClient_SetIsUsingBattery();// 0x466b274
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x466b1b0
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x466b060
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x466af6c
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x466ae7c
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x466ad8c
	void RPC_OwnerClient_NotifyClientShootCriticalVerifyFailed(STExtraShootWeapon* ShootWeapon, int ClientShootFrame);// 0x466ac9c
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachmentList(const WeaponAttachmentEquipNotifyData[] DataList);// 0x466abe4
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(STExtraWeapon* Weapon, byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x466aa5c
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector BulletStart, Vector BulletEnd);// 0x466a954
	void RPC_OwnerClient_ForceModifyWeaponBulletNumInClip(STExtraShootWeapon* ShootWeapon, int NewBulletNum, int NewClipID);// 0x466a82c
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x466a730
	void RPC_OwnerClient_ClientPlayItemOperationSound(FString BankName, FString SoundName, Actor* TargetActor);// 0x466a5e8
	void RPC_OwnerClient_ClearAllInventoryData(const ItemDefineID[] WeaponIDList, uint32 PawnGUID);// 0x466a4ec
	void RPC_NotifyClientLoadingComplete();// 0x466a48c
	void RPC_NotifyAliveTeammateNum(int TeamAliveNum);// 0x466a3dc
	void RPC_GiveUpGame();// 0x466a37c
	void RPC_GetPlayerInitialItemListFromServer();// 0x466a31c
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x466a1e4
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x466a0a8
	void RPC_DrawDebug_Capsule(const Vector Center, float HalfHeight, float Radius, const Quat Rotation, const Color Color, float LifeTime);// 0x4669efc
	void RPC_ClientTriggerWeaponVoiceAndSound(STExtraWeapon* TheShootWeapon, Vector TheCharacterLoc, enum WeaponStateType);// 0x4669df8
	void RPC_ClientTriggerMoveVoice(STExtraBaseCharacter* TheCharacter, Vector voiceCheckVector);// 0x4669d30
	void RPC_ClientTriggerMoveSound(STExtraBaseCharacter* TheCharacter, Vector Location, byte FootStepState);// 0x4669c2c
	void RPC_ClientNotifyRCRRelevant(STExtraBaseCharacter* TheCharacter, Vector Location, Rotator Rotation);// 0x4669b28
	void RPC_ClientNotifyRCRLocation(STExtraBaseCharacter* TheCharacter, Vector Location);// 0x4669a60
	void RPC_Client_WeaponsCompanionPlayVoice(uint32 triggerPlayerKey, int VoiceID, int voiceIndex, int Score, int baseScore);// 0x46698f4
	void RPC_Client_SyncFreeCameraState();// 0x46698d8
	void RPC_Client_SyncAllPlayerInfo(const SinglePlayerFixInfo[] InfoData);// 0x46697d4
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x4669630
	void RPC_Client_SetIsPlayGunMasterVideoValue(const bool InIsPlayGunMasterVideo);// 0x46695a4
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x46694a4
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName, int DamageCauserItemID);// 0x4669220
	void RPC_Client_ForceClearMoveAndStyle();// 0x46691c0
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x4669078
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x4668f90
	void RPC_Cient_SendRadioInfoById(int MsgID);// 0x4668ee0
	void RPC_CheckAliveTeammateNum();// 0x4668e80
	void RPC_C2S_UploadUsrWidgetOpenFrequency(const FString[] WidgetFrequencyMsg);// 0x4668da0
	void RPC_C2S_RequestSyncMurderImprisonmentStatus(FString TeammateName);// 0x4668ce8
	void RPC_C2S_ClientSetHelmetHideInGame(bool IsHide);// 0x4668c24
	void RevivalTemateSuccess();// 0x4668c08
	void RevivalTemateFail(FString Reason);// 0x4668b7c
	float RetriveMobileContentScaleFactor();// 0x4668b48
	GameModePlayerParams RetrievePlayerParamTest(out const PlayerID PlayerID);// 0x4668a88
	void RestoreDefaultInteractionSize(int JSIndex);// 0x4668a0c
	void RestartCheckMoveable(float CheckTimeLimit);// 0x4668990
	void ResponseVerifyCharacterPoseState(STExtraBaseCharacter* InCharacter, byte InPoseState);// 0x46688a0
	void RespHasSignalBar(bool bHas);// 0x4668814
	void RespawnResetPlayerState(UAEPlayerController* PlayerController);// 0x4668798
	void RespawnRecoverData(UAEPlayerController* PC);// 0x466871c
	bool ResetValidTouchMoveFrame();// 0x46686e4
	void ResetToSavedRotation();// 0x46686d0
	void ResetRotationWithParam(float Pitch, float Yaw, float Roll);// 0x46685e0
	void ResetRotation(float Pitch, float Yaw, float Roll);// 0x46684f0
	void ResetMissingUIUpdate();// 0xffffff8a17adf2b0
	void RequireNetCullingDistanceByDevice();// 0x4668490
	void RequireDeviceInfo();// 0x4668474
	void RequestVerifyCharacterPoseState(STExtraBaseCharacter* InCharacter);// 0x46683c4
	void RequestPlayerNewbieInfo();// 0x46683b0
	void RequestHasSignalBar();// 0x4668350
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x466828c
	void ReqRecallRemotePawn(RemoteControlComponent* RemoteControl);// 0x46681dc
	void ReqPauseRemotePawn(RemoteControlComponent* RemoteControl);// 0x466812c
	void ReqControlRemotePawn(RemoteControlComponent* RemoteControl);// 0x466807c
	void ReportWatchGamePlayerInfoButtonClick();// 0x4668068
	void ReportUIStyleClientException();// 0x4668054
	void ReportSimpleTaskForTeam(int TaskType, int Count, Vector Location, FString ExtraParam, bool IsCumulative);// 0x4667ed0
	void ReportSimpleTaskByTaskIDForTeam(int TaskID, int Count, bool IsCumulative);// 0x4667dd8
	void ReportSimpleTaskByTaskID(int TaskID, int Count, bool IsCumulative);// 0x4667ce0
	void ReportSimpleTask(int TaskType, int Count, Vector Location, FString ExtraParam, bool IsCumulative);// 0x4667b5c
	void ReportAntiCheatInfo();// 0x4667b48
	void ReplaySwitchWeatherByWeatherID(int WeatherID);// 0x4667acc
	void ReplayRPC_TeammateStateChanged(int TeammateIndex);// 0x4667a48
	void RemoveViewLimit(out const ViewLimitRange RemoveLimit);// 0x46679a4
	void RemoveTriggerLevelsClientWhiteList(FString LevelName);// 0x4667920
	void RemoveTriggerLevelsClientBlackList(FString LevelName);// 0x466789c
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x4667820
	void RemoveTimerHandle(out TimerHandle TimerHandle);// 0x4667794
	void RemoveMarkedWrapperActorMonitor(int WrapperActorNetGUID, uint32 MonitorPlayerKey);// 0x46676ac
	void RemoveGameTipBlackIDList(out const int[] IDList);// 0x4667618
	void RemoveGameTipBlackID(const int ID);// 0x466759c
	void RemoveAllDoors();// 0x4667588
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x466750c
	void ReInitParachuteItem();// 0x46674f8
	void RegisterWaitNetObj(UAEUserWidget* Widget, FString NetObj);// 0x4667434
	void RegistConnectRepProperty(STExtraPlayerController* ObPC);// 0x46673b0
	void RefreshTrainingSensitivityList__DelegateSignature();// 0xffffff8a17adf2b0
	void RefreshPlayerOBInfoButtonState();// 0x466739c
	void RecoverTeamAssembleState();// 0x4667388
	void RecordTouch(bool Start);// 0x4667304
	void RecordPressFireBtnFrame();// 0x46672f0
	void RecordPathPoint();// 0x46672dc
	void ReceiveClientRestart();// 0xffffff8a17adf2b0
	void ReceiveBackpackComponent();// 0x46672c0
	void ReceiveAutoTouchMove();// 0xffffff8a17adf2b0
	void QuitSpectating();// 0x46672a4
	void PutVehiclesToSleep(float Radius);// 0x4667228
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x4667128
	void PrintMovementLog(int PrintLog);// 0x46670ac
	void PrintDownCollision();// 0x4667098
	void PrintAIFloatDebugInfo(int Range);// 0x466701c
	void PreUploadClientShootCriticalVerifyCacheData(out const CacheCriticalVerifyMoveParam InMoveParam, out const CacheCriticalVerifyShootParam InShootParam, out const CacheCriticalVerifyBulletHitUploadParam InBulletHitUploadParam, FString InExtraInfo, out CacheCriticalVerifyMoveParam OutMoveParam, out CacheCriticalVerifyShootParam OutShootParam, out CacheCriticalVerifyBulletHitUploadParam OutBulletHitUploadParam, out FString OutExtraInfo);// 0x4666b70
	void PressGrenade(bool isThrow);// 0xffffff8a17adf2b0
	void PressFire(int FingerIndex);// 0xffffff8a17adf2b0
	void PostTakeDamageDelegate__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xffffff8a17adf2b0
	void PostInitPlayerParams();// 0x4666b54
	void PlaySequencer(FString Path);// 0x4666a7c
	void PlayItemOperationSoundByBP(FString BankName, FString SoundName, Actor* TargetActor);// 0x4666970
	void PlayEscapeHelicopterAnim();// 0x466695c
	void PlayerVehiclePawnStateChanged__DelegateSignature(STExtraPlayerController* PlayerController);// 0xffffff8a17adf2b0
	void PlayerSelectZombieWaveDelegate__DelegateSignature(int SelectedZombieWave);// 0xffffff8a17adf2b0
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x46668a4
	void PlayerKillingDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void PlayerHitFireBtnDelegate__DelegateSignature(bool isRightBtn);// 0xffffff8a17adf2b0
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0xffffff8a17adf2b0
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0xffffff8a17adf2b0
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0xffffff8a17adf2b0
	void PlayerControllerPossess__DelegateSignature(Pawn* PossessedPawn);// 0xffffff8a17adf2b0
	void PlayDisplayAvatarEmote(FString InEmotePlayerName, int InEmoteID);// 0x46667a8
	void PickupSuitSkinForRespawn(bool bUseItem);// 0x4666724
	void PickupInitialItemListForRobustness(bool bUseItem);// 0x46666a0
	void PickupFromShop(int ItemID, int Count, bool ForceSell);// 0x46665a8
	void OpenVehicleMusicGame();// 0x4666588
	void OpenParachute();// 0x4666574
	void OpenOnceBuild(int BuildIndexByUser, int BuildMaxByUser);// 0x46664c0
	void OnYearMonsterInMiniMap();// 0x4666490
	void OnWorldTimeUpdateDelegate(float NewServerTimeSeconds);// 0x4666414
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0xffffff8a17adf2b0
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0xffffff8a17adf2b0
	void OnWeaponAttachmentChanged(bool bAttach, out const ItemDefineID WeaponID, FString AttachmentName, const int AttachmentSpecificID);// 0x46662b0
	void OnWallFeedBack(bool _WallFeedBack);// 0x466622c
	void OnVoiceCheckShowWeaponShootImage__DelegateSignature(STExtraBaseCharacter* OtherCharacter, bool isexplosion, float Alpha);// 0xffffff8a17adf2b0
	void OnVoiceCheckShowVehicleImage__DelegateSignature(STExtraVehicleBase* Vehicle, float Alpha);// 0xffffff8a17adf2b0
	void OnVoiceCheckShowMoveImage__DelegateSignature(STExtraBaseCharacter* OtherCharacter, float Alpha);// 0xffffff8a17adf2b0
	void OnVoiceCheckShowGlassImage__DelegateSignature(Vector Pos, float Alpha);// 0xffffff8a17adf2b0
	void OnViewTargetTeamDataChanged(int InTeamID);// 0x46661b0
	void OnViewTargetSimulateViewChanged(STExtraBaseCharacter* Chara);// 0x4666134
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x46660b8
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x4666000
	void OnViewTargetPlayerStateChanged(STExtraPlayerState* InPlayerState);// 0x4665f84
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x4665f08
	void OnViewTargetChangeVehicleSeat();// 0x4665ef4
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0xffffff8a17adf2b0
	void OnViewTargetAttachmentChanged(Actor* AttachParent, Actor* AttachParent_Direct, SceneComponent* AttachComponent, FName AttachSocket);// 0x4665dcc
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x4665d50
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0xffffff8a17adf2b0
	void OnUseInventoryItemDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnUnequipWeaponDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0xffffff8a17adf2b0
	void OnUIStyleCreateJoystick();// 0x4665d34
	void OnUIInitMsgReceivedFromClient__DelegateSignature(STExtraPlayerController* PC);// 0xffffff8a17adf2b0
	void OnUAEUserWdigetNativeConstruct(UAEUserWidget* Widget, World* InWorld);// 0x4665c80
	void OnTrainingSensitivityRefreshEvent();// 0x4665c6c
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnTeammatesAllDie();// 0x4665c58
	void OnTeammateLogin(int InTeamID);// 0x4665bdc
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0xffffff8a17adf2b0
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0xffffff8a17adf2b0
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0xffffff8a17adf2b0
	void OnSwitchWeaponDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0xffffff8a17adf2b0
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0xffffff8a17adf2b0
	void OnStopFireDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnStartFireSign();// 0x4665bc8
	void OnStartFireDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnStartAutoSprintCountDown__DelegateSignature();// 0xffffff8a17adf2b0
	void OnSpectatorChange__DelegateSignature();// 0xffffff8a17adf2b0
	void OnSpectatorCampIDChange__DelegateSignature(byte OldCampID, byte NewCampID);// 0xffffff8a17adf2b0
	void OnSpectatorCameraChange(bool bDie);// 0xffffff8a17adf2b0
	void OnSpectatingSameCampChanged__DelegateSignature(bool bisInSpecatatingSameCamp);// 0xffffff8a17adf2b0
	void OnSpectatingEnemyChanged__DelegateSignature(bool bisInSpecatatingEnemy);// 0xffffff8a17adf2b0
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime);// 0xffffff8a17adf2b0
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0xffffff8a17adf2b0
	void OnShowAnimationButton(bool isShow, int NewUIType);// 0x4665af8
	void OnSetPlayerMaker__DelegateSignature(Vector Loc);// 0xffffff8a17adf2b0
	void OnSetPlaneRouteForCamp(Vector StartPos, Vector EndPos, float RouteLengthInMap, float RouteWidgetRotateAngle, Vector2D CanJumpLocInMap);// 0x4665978
	void OnServerFinishPickupRevivalFlag();// 0x466595c
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0xffffff8a17adf2b0
	void OnRepTeammateChange__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRepPlayerState__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRepNotify_SetBattleOwner();// 0x4665948
	void OnRepNewPawn__DelegateSignature(Pawn* NewPawn);// 0xffffff8a17adf2b0
	void OnRepCharacter__DelegateSignature(STExtraBaseCharacter* RepCharacter);// 0xffffff8a17adf2b0
	void OnRep_WeatherFog();// 0x4665934
	void OnRep_WeaponSystemReconnectReplicateData();// 0x4665920
	void OnRep_WeaponsCompanionSyncAbilityList();// 0x466590c
	void OnRep_WeaponReconnectOpIndex();// 0x46658f8
	void OnRep_WeaponFunctionChanged();// 0x46658e4
	void OnRep_WatchedStateType();// 0x46658d0
	void OnRep_UsedSimulation();// 0x46658b4
	void OnRep_TriggerLevelsClientWhiteList();// 0x46658a0
	void OnRep_TriggerLevelsClientBlackList();// 0x466588c
	void OnRep_TestNetArray();// 0x4665878
	void OnRep_TeamID();// 0x466585c
	void OnRep_TeamAssemableDisplayInfoList();// 0x4665848
	void OnRep_SwitchWeatherByIndex();// 0x4665834
	void OnRep_STExtraBaseCharacter();// 0x4665820
	void OnRep_ShouldShowGlideConfig();// 0x466580c
	void OnRep_ServerStateType();// 0x46657f8
	void OnRep_SelfWingInfo();// 0x46657e4
	void OnRep_SelectedZombieWaveIndex();// 0x46657d0
	void OnRep_RoomMode();// 0x46657b4
	void OnRep_Plane();// 0x46657a0
	void OnRep_Pawn_BP();// 0xffffff8a17adf2b0
	void OnRep_OBSimulateViewData();// 0x466578c
	void OnRep_ObservedItemList();// 0x4665778
	void OnRep_OBAvaliablePlayerKeys();// 0x4665764
	void OnRep_NeedScreenShot();// 0x4665750
	void OnRep_InWateringRangeBP();// 0xffffff8a17adf2b0
	void OnRep_InWateringRange();// 0x46656ec
	void OnRep_ImprisonmentTeammateSucess();// 0x46656d8
	void OnRep_GlideConfigState();// 0x46656c4
	void OnRep_ForbitPickEffect();// 0x46656b0
	void OnRep_ForbitPick();// 0x466569c
	void OnRep_EnableTeamAssembleDisplay();// 0x4665688
	void OnRep_EagleWatch();// 0x466566c
	void OnRep_EagleWacherRadioTimes();// 0x4665658
	void OnRep_DeadTombBox();// 0x4665644
	void OnRep_ClientSettingBaseOnGameMode();// 0x4665630
	void OnRep_CanOpenParachute();// 0x466561c
	void OnRep_CanJump();// 0x4665608
	void OnRep_CanImprisonmentTeammate();// 0x46655f4
	void OnRep_CampToolStatus();// 0x46655e0
	void OnRep_CameraFreeMoving();// 0x46655cc
	void OnRep_bNeedWeaponsCompanionComp();// 0x46655b8
	void OnRep_bNeedWeaponsCompanionClinetComp();// 0x46655a4
	void OnRep_BlackEntTime();// 0x4665590
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x466557c
	void OnRep_BackpackComponent();// 0x4665568
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0xffffff8a17adf2b0
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0xffffff8a17adf2b0
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRefreshWatchPlayerState__DelegateSignature(STExtraPlayerState* NextPlayerState, bool InShowWatchingUI);// 0xffffff8a17adf2b0
	void OnReconnected__DelegateSignature();// 0xffffff8a17adf2b0
	FString OnRecieveCrash();// 0xffffff8a17adf2b0
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0xffffff8a17adf2b0
	void OnRank__DelegateSignature(int Kills, int Rank);// 0xffffff8a17adf2b0
	void OnPlayerUseRecoverItem();// 0x4665554
	void OnPlayerStateChanged();// 0x4665540
	void OnPlayerSendUIStyleTLog(uint32 InPlayerKey, FString Reason);// 0x466547c
	void OnPlayerSendBattleResult(uint32 InPlayerKey, FString Reason);// 0x46653b8
	void OnPlayerReConnected(int LostPlayerKey);// 0x4665308
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0xffffff8a17adf2b0
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0xffffff8a17adf2b0
	void OnPlayerPawnInitOBOrReplay(STExtraPlayerCharacter* CurTargetPawn, int FuncCalledFrom, int IsInNotOut, STExtraPlayerCharacter* LastTargetPawn);// 0x46651d4
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0xffffff8a17adf2b0
	void OnPlayerLostConnection(int LostPlayerKey);// 0x4665124
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0xffffff8a17adf2b0
	void OnPlayerHitFireBtnInUGC();// 0x4665110
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x466508c
	void OnPlayerClickDriveBtn();// 0x4665078
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x4664fbc
	void OnPlayerBuffExist(FName BuffName);// 0x4664f08
	void OnPickUpTargetDelegate__DelegateSignature(STExtraPlayerController* PlayerController, Actor* Target, int AdditionalParam, int pickCount);// 0xffffff8a17adf2b0
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0xffffff8a17adf2b0
	void OnPickUpExpand();// 0x4664ea4
	void OnPickUpCollapsed(bool isCollapsed);// 0x4664e20
	void OnPawnStateChange__DelegateSignature(uint64 CurrentPawnState);// 0xffffff8a17adf2b0
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0xffffff8a17adf2b0
	void OnOneFloatValueDelegate__DelegateSignature(float theValue);// 0xffffff8a17adf2b0
	void OnOccupyNewbieGuide(int inGuideID);// 0x4664da4
	void OnOBVehicleHitActor(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x4664c4c
	void OnObserverLevelLoaded();// 0x4664c38
	void OnObservedWeaponSightChanged();// 0x4664c24
	void OnObservedUsingWeaponChanged();// 0x4664c10
	void OnObservedPlayerWeaponChangeState(enum CurState);// 0x4664b94
	void OnObservedPlayerChangeCurrentUsingWeapon(byte TargetChangeSlot);// 0x4664b18
	void OnObservedItemUpdate(ItemHandleBase* Handle);// 0x4664a9c
	void OnObservedItemsChanged();// 0x4664a88
	void OnObservedItemRemoved(out const ItemDefineID DefineID);// 0x46649f8
	void OnObservedDisuseWeapon(byte PropSlot);// 0x466497c
	void OnObservedBulletNumChanged();// 0x4664968
	void OnOBPawnExitVehicle(STExtraVehicleBase* InTargetVehicle);// 0x46648ec
	void OnNightStateChangedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x4664870
	void OnMyObserversChangeDelegate__DelegateSignature(STExtraPlayerController* ObserverController, bool IsEnter);// 0xffffff8a17adf2b0
	void OnMarkedWrapperActorDisappeared(int WrapperActorNetGUID);// 0x46647ec
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0xffffff8a17adf2b0
	void OnMainControlPanelHideAllUI();// 0x46647d0
	void OnLostConnection__DelegateSignature();// 0xffffff8a17adf2b0
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0xffffff8a17adf2b0
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0xffffff8a17adf2b0
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float ratioSignalHP);// 0xffffff8a17adf2b0
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float CurrentHP, float ratioHP);// 0xffffff8a17adf2b0
	void OnLoadAsyncWidget();// 0x46647bc
	void OnLandOnGroundAfterJumpPlaneEnd();// 0xffffff8a17adf2b0
	void OnItemTaken(BackpackComponent* InBackpackComponent, BattleItemHandleBase* InItemHandle, out const ItemDefineID InDefineID, int InTakenCount, bool bInCallHandleDrop);// 0x466462c
	void OnItemRemoved(out const ItemDefineID DefineID);// 0x466459c
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x46644b8
	void OnItemOperation(out const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x46643a4
	void OnIsInFortressChangedDelegate__DelegateSignature(bool bInIsInFortress);// 0xffffff8a17adf2b0
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0xffffff8a17adf2b0
	FString OnGetCrashInfo();// 0x4664324
	void OnGameStartDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnGameStartCountDownDelegate__DelegateSignature(float CountDownTime);// 0xffffff8a17adf2b0
	void OnGameModeStateChangeDelegate__DelegateSignature(FName CurrentState);// 0xffffff8a17adf2b0
	void OnGameModeStateChanged();// 0xffffff8a17adf2b0
	void OnFirstInviteChat();// 0x46642c0
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0xffffff8a17adf2b0
	void OnExitGame__DelegateSignature();// 0xffffff8a17adf2b0
	void OnEquipWeaponDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnEntireOBMapOpen();// 0x46642ac
	void OnEntireOBMapClose();// 0x4664298
	void OnEnterBattleResultStep();// 0x4664284
	void OnEnableTeamAssembleDisplayView(bool IsEnable);// 0xffffff8a17adf2b0
	void OnEagleWatchPlayerUIDChanged(bool IsEmpty);// 0x4664200
	void OnEagleWatchInitCompleted();// 0x46641ec
	void OnDSOthersWeaponVS(STExtraWeapon* TheWeapon, enum WeaponStateType);// 0x4664134
	void OnDSOthersSkillStart(STExtraBaseCharacter* SkillCharacter);// 0x46640b8
	void OnDSOthersLandedSound(STExtraBaseCharacter* LandedCharacter);// 0x466403c
	void OnDropItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0xffffff8a17adf2b0
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0xffffff8a17adf2b0
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0xffffff8a17adf2b0
	void OnDeadBoxExpand();// 0x4664028
	void OnDeadBoxCollapsed(bool isCollpased);// 0x4663fa4
	void OnCurrentPlayerKillNumChanged__DelegateSignature(int KillCount);// 0xffffff8a17adf2b0
	void OnClientToServerWeaponCreated__DelegateSignature(out const ItemDefineID[] WeaponIDArray);// 0xffffff8a17adf2b0
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CampID, Actor*[] PeerVisualFieldActorList);// 0xffffff8a17adf2b0
	void OnClientGameCountDown(float CountDown);// 0x4663f28
	void OnClientBountyBuyItemResult__DelegateSignature(int ResultID, int ProductID);// 0xffffff8a17adf2b0
	void OnClickToggleOBVehicleView();// 0x4663f14
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0xffffff8a17adf2b0
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isexplosion);// 0xffffff8a17adf2b0
	void OnCharacterRecoveryHealthEvent();// 0x4663f00
	void OnCharacterRecoveryHealth__DelegateSignature();// 0xffffff8a17adf2b0
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0xffffff8a17adf2b0
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0xffffff8a17adf2b0
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0xffffff8a17adf2b0
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0xffffff8a17adf2b0
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0xffffff8a17adf2b0
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x4663e7c
	void OnBuyRevivalSign();// 0x4663e60
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0xffffff8a17adf2b0
	void OnAxisKeyBoardQE(float Rate);// 0x4663de4
	void OnAutoSprintActive__DelegateSignature();// 0xffffff8a17adf2b0
	void OnAsyncLoadedWeaponsCompanionComp(SoftObjectPath compAssPath);// 0x4663d04
	void OnAsyncLoadedWeaponsCompanionClinetComp(SoftObjectPath compAssPath);// 0x4663c24
	void OnAppActivatedDelegate__DelegateSignature(bool bIsActive);// 0xffffff8a17adf2b0
	void OnAllPostExecDSCommandArrived();// 0x4663c08
	void OnAirAttackEventNotify(byte airattacktype, int waveindex, enum AirAttackMode);// 0x4663b14
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OBVehicleViewLookBack();// 0x4663b00
	void ObserveWhoKilledMe();// 0x4663aec
	void ObserveSameCampPlayer();// 0x4663ad8
	void ObserveCharacterByKey(uint32 InPlayerKey);// 0x4663a5c
	void ObserveCharacter(FString InPlayerName);// 0x46639d8
	void ObserveAirDropBox(int BoxId);// 0x466395c
	void OBForceToggleOBTPPView();// 0x4663948
	void OBCameraMoveNear();// 0x4663934
	void OBCameraMoveFar();// 0x4663920
	void OBCameraFOVReset();// 0x466390c
	void NotifyServerFixLevel(int FixConfigIndex, bool bUnLoad);// 0x4663808
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0xffffff8a17adf2b0
	void NotifyEnterAvatarDisplayState();// 0x46637f4
	void Notify_Client_UIMsg_WithParams(FString InMsgName, FString InModuleName, FString InParamsCollection);// 0x46636a0
	void NormalTeamateLogin(int InTeamID);// 0x4663624
	void NewbieGuideYearMonsterInMapDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void MoveUp(float Rate);// 0x46635a8
	void MoveToSuperTeamAI();// 0x4663594
	void MoveToNan(float X, float Y, float Z, bool SendToServer);// 0x4663460
	void MoveToAI();// 0x466344c
	void MoveTo(float X, float Y, float Z);// 0x466335c
	void MoveRight(float Rate);// 0x46632e0
	void MoveNeareastVehicleTo(float X, float Y, float Z);// 0x46631f0
	void MoveForward(float Rate);// 0x4663174
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x46630b4
	void MemberVoiceLBS(int member, int Status, bool isRobot);// 0xffffff8a17adf2b0
	void MemberVoice(int member, int Status, bool isRobot);// 0xffffff8a17adf2b0
	void MarkStartFireFrame();// 0x46630a0
	void MarkLocationToMapPath(int TypeID);// 0x4663024
	void LuaActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4662fa0
	void LookUp(float Rate);// 0x4662f24
	void LocalTestPaintDecal(int ID);// 0x4662ea8
	void LocalTestGameResult(int ModeID, int TeamMemNum);// 0x4662df4
	void LocalRefreshObMapPlayerList();// 0x4662de0
	void LocalProfileFootprint();// 0x4662dcc
	void LocalProfileDecal();// 0x4662db8
	void LocalGetGameStateReconnectInfo();// 0x4662da4
	void LoadUserWidgetStyleByPath(FString PathString);// 0x4662d20
	void LoadUserWidgetStyle(UserWidgetStyle* Style);// 0x4662ca4
	void LoadAllLand(bool bLoadAll);// 0x4662c20
	void LerpFPPCamera();// 0x4662c0c
	void LeaveSpectating();// 0x4662bf8
	void LeaveObserveMe(STExtraPlayerController* InController);// 0x4662b7c
	void KillSomeTeamerBekilledCount(int Count);// 0x4662b00
	void KillSomeOne(FString InPlayerName);// 0x4662a7c
	void KillSomeEnemyCount(int Count);// 0x4662a00
	void KillSomeCount(int Count);// 0x4662984
	void KillAll();// 0x4662970
	void Kill(int GivenNumber);// 0x46628f4
	void JumpFromPlane();// 0x46628e0
	void JoystickTriggerSprint(bool bIsSprint);// 0xffffff8a17adf2b0
	bool IsWaistFollowingController();// 0x46628c0
	bool IsViewTarget(const Actor* pActor);// 0x4662828
	bool IsUse3DTouch();// 0x46627f0
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x4662760
	bool IsThisFingerIndexCannotTouchMove(byte FingerIndex);// 0x46626d0
	bool IsTeamMate(const STExtraBaseCharacter* InCharacter);// 0x4662640
	bool IsTeamAssembleDisplayLevelLoaded();// 0x4662600
	bool IsTeamAssembleDisplayEnabled();// 0x46625c8
	bool IsTaskFit(GameModePlayerTaskData TaskData);// 0x46624b8
	bool IsStartInRightHalfScreen(float BeginX, float CurViewPortDPIScale);// 0x46623f0
	bool IsScopeFireEnabled();// 0x46623b8
	bool IsSameTeam(const Pawn* Other);// 0x4662328
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x4662294
	bool IsPlayingOBReplay();// 0x466225c
	bool IsPlayerStateInVehicle();// 0x466221c
	bool IsPlayerStateInDying();// 0x46621dc
	bool IsPlayerStateInDied();// 0x466219c
	bool IsOwningHelicopter(RescueHelicopterBase* Helicopter);// 0x466210c
	bool IsOBTypeUIState();// 0x46620d4
	bool IsOBGM();// 0x466209c
	bool IsMurderSelfDefense(FString InformMurderName);// 0x4662004
	bool IsMoveable_DontConsiderFollowingState();// 0x4661fcc
	bool IsMoveable();// 0x4661f94
	bool IsLycanGameMode();// 0x4661f5c
	bool IsLastBreathOrRescueingOther();// 0x4661f24
	bool IsJoystickTouched();// 0x4661eec
	bool IsJoystickCollapsedCountOverZero_old();// 0x4661ec4
	bool IsInRevivalExPlane();// 0x4661e8c
	bool IsInRevival();// 0x4661e54
	bool IsInPlane();// 0x4661e1c
	bool IsInParachuteOpen();// 0x4661de4
	bool IsInParachuteJump();// 0x4661dac
	bool IsInParachute();// 0x4661d74
	bool IsInInitial();// 0x4661d3c
	bool IsIngoreSvrSetViewTarget();// 0x4661cfc
	bool IsInFreeCameraView();// 0x4661cdc
	bool IsInFinish();// 0x4661ca4
	bool IsInFight();// 0x4661c6c
	bool IsInExPlane();// 0x4661c34
	bool IsInDead();// 0x4661bf4
	bool IsInBuildingMode();// 0x4661bbc
	bool IsForceSwitchTeamView(bool bEnable);// 0x4661b1c
	bool IsForbitPickMakeEffect();// 0x4661ae4
	bool IsForbitPick(out const FName tombName);// 0x4661a44
	bool IsFollowFireMode();// 0x4661a0c
	bool IsEnableGalaxyFace();// 0x46619cc
	bool IsEnableCameraPossessAllFeatureActive();// 0x4661994
	bool IsEnableCameraPossess();// 0x466195c
	bool IsCompleteReplayPlaying();// 0x4661924
	bool IsCharacterInAir();// 0x46618ec
	bool IsChangeUseVehicleAvatar(STExtraVehicleBase* InVehicle);// 0x466185c
	bool IsCanViewSameCamp();// 0x466181c
	bool IsCanViewEnemy();// 0x46617dc
	bool IsCanImprisonmentTeammate();// 0x46617a4
	bool IsAllowActorTouchMove();// 0x466176c
	bool IsAirDropRep2Client(int BoxId);// 0x46616dc
	bool IsAGMPlayer();// 0x46616a4
	bool Is3DTouchOpenned();// 0x466166c
	void InvalidRCRByPlayer(bool bOpen);// 0x46615e8
	void InternalServerStartMonsterTreasureBox(MonsterTreasureBox* Box);// 0x4661538
	void InstigatedDamageToCharacter__DelegateSignature(float Damage, const DamageType* DamageType, Controller* EventInstigator, Actor* DamagedActor, Actor* DamageCauser, bool bIsDeadlyDamage);// 0xffffff8a17adf2b0
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x46614bc
	bool InRemoteControlState();// 0x4661484
	void InputTouchRepeat(const byte FingerIndex, const Vector Location, float Force);// 0x4661388
	void InputTouchEnd(const byte FingerIndex, const Vector Location, float Force);// 0x466128c
	void InputTouchBegin(const byte FingerIndex, const Vector Location, float Force);// 0x4661190
	void InitWeatherConfigComponent();// 0x466117c
	void InitTaskDatas(uint32 InPlayerKey);// 0x4661100
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, FString ext_info);// 0xffffff8a17adf2b0
	void InitTaskData(int TaskID, int process, FString ext_info);// 0x4660fa4
	void InitTaskComponent();// 0x4660f90
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0xffffff8a17adf2b0
	void InitJoyStickAfterActivation();// 0xffffff8a17adf2b0
	void InitIngameUIRoot(UAEUserWidget* Root);// 0x4660f14
	void InitializePlayerPerspectiveType(enum Type);// 0x4660e98
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0xffffff8a17adf2b0
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x4660da8
	void InitBountySystemProductList(StoreProductInfo[] ProductList);// 0x4660c28
	void ImprisonmentTeammate(FString TeammateName);// 0x4660b70
	void IgnoreFilterSignalGunPoints(int OpenID);// 0x4660af4
	bool HasPickupPropsNearby();// 0x4660abc
	bool HasDeathBoxesNearby();// 0x4660a84
	bool HasBPCheckMoveableObjectPass(Actor* TestActor);// 0x46609ec
	bool HasBPCheckMoveableConditionPass();// 0x46609ac
	void HandleUpdateShovelingRelease();// 0x4660998
	void HandleUpdateShovelingPressed();// 0x4660984
	void HandleUpdateShoveling();// 0x4660970
	void HandleTogglePlayerListInOB();// 0x466095c
	void HandleToggleOBTeamList(bool InShow);// 0x46608d8
	void HandleToggleMapInOB();// 0x46608c4
	void HandleToggleFreeViewReplay();// 0x46608b0
	void HandleSwitchToTeammateWithBlend(Key InKey);// 0x4660758
	void HandleSwitchToTeammatePrev();// 0x4660744
	void HandleSwitchToTeammateNext();// 0x4660730
	void HandleSwitchToTeammate(Key InKey);// 0x46605d8
	void HandleSwitchToTeam_PostTeamID();// 0x46605c4
	void HandleSwitchToTeam_InputOneNum(Key InKey);// 0x466046c
	void HandleSwitchToTeam_DelOneNum();// 0x4660458
	void HandleSwitchToTeam_ClearInputNum();// 0x4660444
	void HandleSwitchToTeam(int InTeamID);// 0x46603c8
	void HandleSwitchPersonViewPress();// 0x46603b4
	void HandleShowMedicBulletHitTips(FString ShootPlayerName, uint64 ShootPlayerUID, int ShootPlayerTeamID, FString HitPlayerName, uint64 HitPlayerUID, int HitPlayerTeamID);// 0x46601ac
	void HandleRevivalTipsInfo(FString CauserName, FString VictimName, int RevivalType);// 0x4660064
	void HandleReSetOBPositionDistance();// 0x4660050
	void HandleReduceOBPositionDistance();// 0x466003c
	void HandleOBToggleProjSmokeAlpha();// 0x4660028
	void HandleOBSSwitchToPreTeam();// 0x4660014
	void HandleOBSSwitchToPlayerThird();// 0x4660000
	void HandleOBSSwitchToPlayerSecond();// 0x465ffec
	void HandleOBSSwitchToPlayerFourth();// 0x465ffd8
	void HandleOBSSwitchToPlayerFirst();// 0x465ffc4
	void HandleOBSSwitchToNextTeam();// 0x465ffb0
	void HandleOBSSwitchTeamLogo();// 0x465ff9c
	void HandleOBBisOpenAirDropBox();// 0x465ff88
	void HandleMsg(enum Msg);// 0x465ff0c
	void HandleLeaveFreeViewInOB();// 0x465fef8
	void HandleLandOnGroundEnd();// 0x465fee4
	void HandleEnterFreeViewInOB();// 0x465fed0
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x465fe04
	void HandleClientHasReactivated();// 0x465fdf0
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x465fd38
	void HandleBreakUAEWindow(int WinNum);// 0x465fcb4
	void HandleBisOpenEnemyHeadUI();// 0x465fca0
	void HandleAddOBPositionDistance();// 0x465fc8c
	void GunmasterBountyBuyDelegate__DelegateSignature(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0xffffff8a17adf2b0
	int GotoSpectating(int TeammatePlayerid);// 0x465fbf8
	void GotoFlying();// 0x465fbe4
	void GMTest_ReqPlayerInfo(FString inUIDStr);// 0x465fb60
	void GMSpawnWingManMiniMap(float X, float Y);// 0x465faac
	void GMSpawnMonsterBoxWithPos(float X, float Y, float Z);// 0x465f9bc
	void GMSpawnMonsterBox();// 0x465f9a8
	void GMSetBoolPoisonCircle();// 0x465f994
	void GMSetBoolAirDrop();// 0x465f980
	void GMSetBoolAirAttack();// 0x465f96c
	void GMSetBoolAI();// 0x465f958
	void GMOpenWeather(int OpenWeatherID);// 0x465f8dc
	void GMMoveAllAITogether(float X, float Y);// 0x465f828
	void GMEnableRandom();// 0x465f814
	void GMEnableAllComponent();// 0x465f800
	void GMDisplayGameTipWithParam(int ID, FString param1, FString param2);// 0x465f6f4
	void GMDisableRandom();// 0x465f6e0
	void GMDisableAllComponent();// 0x465f6cc
	void GMCUseSkill(int InSkillIndex);// 0x465f650
	void GMCSaveTeammate(FString InPlayerName, int InReduceTime);// 0x465f58c
	void GMCloseWeather(int CloseWeatherID);// 0x465f510
	int GetWriteCircleDistance();// 0x465f4dc
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x465f4a8
	int GetWeaponSkinBaseID(int InWeaponSkinID);// 0x465f414
	bool GetWeaponsCompanionFighting();// 0x465f3dc
	void GetWatchPlayerList(out STExtraPlayerState*[] OutPlayers, bool ExcludeMyself);// 0x465f2ec
	float GetViewPortDPIScale();// 0x465f2b8
	VehicleUserComponent* GetVehicleUserComp();// 0x465f284
	int GetUseMotionControlType();// 0x465f250
	bool GetUseMotionControlLog();// 0x465f218
	bool GetUseMotionControlEnable();// 0x465f1e0
	float GetTouchForceFireThreshold();// 0x465f1ac
	float GetTouchForce(byte FingerIndex);// 0x465f120
	Actor* GetThePlane();// 0x465f104
	MonsterTreasureBox*[] GetTeamMonsterTreasureBoxList();// 0x465f084
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x465eff8
	int GetTeamAliveNum();// 0x465efc4
	SpringArmComponent* GetTargetedSpringArm();// 0x465ef90
	FString GetSubTitleDynamicInfo(FString Key);// 0x465eeb4
	int GetStatTriangles();// 0x465ee80
	FString GetStatMemory();// 0x465ee00
	int GetStatDrawCalls();// 0x465edcc
	int GetSpecMotionRestCount();// 0x465ed98
	int GetSpecialAreaID();// 0x465ed64
	bool GetShouldAutoScopeWhenPeek();// 0x465ed2c
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x465ec94
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x465ec10
	byte GetScopeFingerIndex();// 0x465ebdc
	bool GetRevivalGotoSpectatingConfig(out int RevivalGotoSpectatingTime, out FString RevivalGotoSpectatingTips);// 0x465eae0
	int GetRevivalCountDownTime();// 0x465eaac
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0xffffff8a17adf2b0
	bool GetPoseViewLimit(out float PitchMin, out float PitchMax, out enum HitState);// 0x465e964
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x465e930
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x465e838
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x465e804
	STExtraBaseCharacter* GetPlayerCharacterFinally();// 0x465e7d0
	PlayerCameraPossessManager* GetPlayerCameraPossessManager();// 0x465e79c
	SeasonTaskListener* GetPermanentTaskController();// 0x465e768
	int GetPeekMode();// 0x465e734
	Transform GetPaintDecalTargetTransform();// 0x465e6e0
	MonsterTreasureBox* GetOpennedNearestMonsterBox();// 0x465e6ac
	float GetOccupiedCapacity();// 0x465e678
	bool GetOBVehicleViewValue();// 0x465e640
	bool GetOBTPPFreeViewValue();// 0x465e608
	void GetObserversList(out STExtraPlayerController*[] OutList);// 0x465e574
	int GetObservedTeammateId();// 0x465e558
	CameraComponent* GetNowUseCamera();// 0x465e524
	Vector GetNewestAirDropBoxPos();// 0x465e4ec
	STExtraPlayerController*[] GetMyObservers();// 0x465e468
	STExtraPlayerController*[] GetMyObserverList();// 0x465e3e8
	FString GetMurderUID();// 0x465e2d8
	FString GetMurderName();// 0x465e1c8
	bool GetMurderIsAI();// 0x465e154
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x465e060
	MonsterTreasureBox*[] GetMonsterTreasureBoxList();// 0x465dfe0
	byte GetMaxTouchForceFinger();// 0x465df9c
	Vector2D GetJoyStickVisualSize();// 0x465df68
	float GetJoystickUserSettingOpacity();// 0x465df34
	float GetJoyStickOpacity();// 0x465df00
	Vector2D GetJoyStickCenter();// 0x465decc
	bool GetIsShowPeek();// 0x465de94
	bool GetIsMurderSameTeam();// 0x465de20
	bool GetIsLayoutLRSwitchOpened();// 0x465de00
	bool GetIsFreeCamera();// 0x465dde0
	bool GetIsAutoAimEnabled();// 0x465dda8
	int GetGlideCount();// 0x465dd74
	void GetGameStateReconnectInfoOnServer();// 0x465dd14
	void GetGameScreenSize();// 0x465dd00
	GameModeConfig GetGameModeConfig(bool needLocalRefresh);// 0x465dc5c
	int GetFriendDistance();// 0x465dc28
	Vector GetFocalLocation();// 0x465dbe8
	FString GetExtraCheckMoveableReportMsg();// 0x465db60
	InformPlayerTypeInfo[] GetDyingDamageInstigatorsList();// 0x465daac
	enum GetCurrentStateType();// 0x465da78
	ActivityFakePossessComponent* GetCurrentFakePossessComp();// 0x465da5c
	Actor* GetCurrentFakePossessActor();// 0x465da40
	STExtraVehicleBase* GetCurrentControllingVehicle();// 0x465da0c
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x465d9d8
	RemoteControlComponent* GetCurRemoteControl();// 0x465d9a4
	STExtraPlayerState* GetCurPlayerState();// 0x465d970
	int GetCurPlayerId();// 0x465d93c
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x465d908
	Vector GetCurPawnLocation();// 0x465d8d0
	Pawn* GetCurPawn();// 0x465d89c
	float GetCurFPS();// 0x465d868
	Rotator GetControlLookRotation();// 0x465d828
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x465d744
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x465d6b8
	ChatComponent* GetChatComponent();// 0x465d684
	PlayerTombBox* GetCacheDeadTombBox();// 0x465d650
	BackpackComponent* GetBackPackComponent();// 0x465d61c
	int GetAimMode();// 0x465d5e8
	bool GetAimFireEnable();// 0x465d5b0
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int BoxId);// 0x465d510
	void GameModeGotoNextState();// 0x465d4fc
	void GameModeGotoFightingState();// 0x465d4e8
	void FreezeRCRVisualization(bool bFreeze);// 0x465d464
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x465d3a4
	void ForceServerSetControlRotationOnVehicle();// 0x465d390
	void ForceReleaseCurTouchMoveFinger();// 0x465d37c
	void FlushShapePool();// 0x465d368
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x465d2e8
	void FireOrGrenade();// 0x465d2d4
	uint32 FindOBAvaliablePlayer();// 0x465d2a0
	CampActor* FindClientOrServerCampActor();// 0x465d26c
	void FillTeamAssemableDisplayItemDetail(out TeamAssembleAvatarDisplayInfo DetailInfo, GameModePlayerParams PlayerParam, Pawn* PlayerPawn);// 0x465cda4
	void Fight();// 0x465cd90
	void FadeSceneToGrayOnDeath(bool bSet);// 0x465cd0c
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x465cc38
	void ExitNightState();// 0x465cc24
	void ExitFreeCamera(bool IsForceReset);// 0x465cba0
	void ExitCameraFreeMoveMode();// 0x465cb8c
	void ExecDSCommand(const FString DSCommand);// 0x465cb00
	void ExcuteLuaGM(FString Func, FString Params);// 0xffffff8a17adf2b0
	void ExceptionReport_DataCompare(Object* Context, FString ExceptionType, Object* HandleFunctionTarget);// 0x465ca00
	void ExceptionReport(FString ExceptionType, FString StackStr, FString DetailStr, bool bForceReport);// 0x465c8a4
	void EnterSpectating(uint32 OBPlayerkey);// 0x465c828
	void EnterNightState();// 0x465c814
	void EnterCameraFreeMoveMode();// 0x465c800
	void EndTouchScreen(byte FingerIndex);// 0x465c784
	void EndForceTouchFire();// 0x465c770
	void EnableRCRVisualization(byte VisualizationLevel);// 0x465c6f4
	void EnableRCRDebugInfoVisualization(bool bEnable);// 0x465c670
	void EnableRCRConfigInfoVisualization(bool bEnable);// 0x465c5ec
	void EnableRCRCameraLocVisualization(float RelativeUnits);// 0x465c570
	void EnablePlayerWeaponModuleSystem(bool bEnable);// 0x465c4ec
	void EnablePlayerInHouse(bool bIsIn);// 0x465c468
	void EnableMyLandscapeDraw();// 0x465c454
	void EnableItem(ItemDefineID DefineID);// 0x465c3c8
	void EnableBuildingMode(bool checkVehicle);// 0x465c33c
	void DynamicCreateComponents();// 0x465c328
	void DumpObjectByName(FString ObjectName);// 0x465c250
	void DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x465c14c
	void DoUITouchMove(Vector Loc, float SizeX, float SizeY, float LeftOffset, float BottomOffset, CanvasPanelSlot* Slot);// 0x465bfa4
	void DoubleClickCancel(const byte FingerIndex);// 0x465bf28
	void DoTouchMove(float Yaw, float Pitch);// 0xffffff8a17adf2b0
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x465be78
	bool DoNotPickUpByItemID(out const ItemDefineID DefineID);// 0x465bdcc
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x465bd1c
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0xffffff8a17adf2b0
	void DisuseItem(int ID);// 0x465bca0
	void DisplayGameWarnTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x465bb94
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x465ba88
	void DisplayGameTipWithMsgIDAndFullParams(int ID, FString param1, FString param2, UAEBlackboard* ExtraParams);// 0x465b940
	void DisplayGameTipWithMsgID(int ID);// 0x465b8c4
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x465b71c
	void DispatchPlayerReconnectedEvent();// 0x465b708
	void DispatchPlayerLostEvent();// 0x465b6f4
	void DispatchPlayerExitEvent();// 0x465b6e0
	void DisableMyLandscapeDraw();// 0x465b6cc
	void DisableItem(ItemDefineID DefineID);// 0x465b640
	void DelayForceExitFreeCamera();// 0x465b62c
	void DebugWorldPlayerAvatarInfo();// 0x465b618
	void DebugSetUIVisibility(bool bUIVisibility);// 0xffffff8a17adf2b0
	void DebugPlayerVision();// 0x465b604
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x465b580
	void DebugEnableDrawSearchLine(int bEnabled);// 0x465b504
	void DebugEnableBulletImpact(int bEnabled);// 0x465b488
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x465b324
	void DealGetAllNearShotWeapon(float disRate);// 0x465b2a8
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x465b1f4
	void DealGetAllNearMoveCharacter(float checkDis);// 0x465b178
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x465b0b8
	bool CustomShowHideUI();// 0x465b078
	void CurrentPawnStateChange(uint64 CurrentPawnState);// 0x465affc
	void CreateNewClientFatalDamageInfo(int inNumber);// 0x465af80
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x465adc0
	void ConsumeRevivalSign();// 0x465ada4
	void ConsumeLobbyItem(int ItemID, int Count);// 0x465acf0
	void ConsumeDecalItem(int ItemID, int Count);// 0x465ac3c
	void CollectAllPlayerWeaponPosInfo();// 0x465ac28
	void CloseOnceBuild(int cnt);// 0x465ab78
	void ClientUnpossessPawn(STExtraBaseCharacter* ControledPawn);// 0x465aac8
	void ClientSyncBountyBoughtItemList(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0x465aa3c
	void ClientStartOnPlane();// 0x465aa20
	void ClientStartOnlineGame();// 0x465aa04
	void ClientStartMonsterTreasureBox();// 0x465a9e8
	void ClientShowPoints(const Vector[] Points);// 0x465a95c
	void ClientShowNavLink(const NavLinkInfo[] LinkDatas);// 0x465a8d0
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers, const RouteSegment[] RouteSegmentData);// 0x465a73c
	void ClientSetOBControlRot(float InPitch, float InYaw);// 0x465a680
	void ClientSetControlRotation(const Rotator NewRotation);// 0x465a600
	void ClientSetAIPosToTarget(Vector StartPos, Vector TargetPos);// 0x465a530
	void ClientSetAIPos(uint32 keyID, Vector Pos, bool IsStart);// 0x465a424
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x465a354
	void ClientRPC_NotifyRequestDone(const PlayerOBInfo inInfo);// 0x465a274
	void ClientRPC_ChangeVehicleAvatarSucceedNotify(FString UserName, int VehicleAvatarID);// 0x465a1a8
	void ClientReceiveEagleWacherEnterRadio(int MsgID);// 0x465a0f8
	void ClientReceiveConcertSyncData(ConcertPlayerActor* InConcertPlayerActor, const ConcertSendSyncData InSyncData);// 0x4659fc8
	void ClientQuitViewSameCamp();// 0x4659fac
	void ClientQuitViewEnemy();// 0x4659f90
	void ClientPrintStringToScreen(FString inString, const LinearColor TextColor, float Duration);// 0x4659e58
	void ClientPlayerFiringInOB(uint32 InPlayerKey, Vector InHitPos, bool bHitPlayer, Actor* InHitActor);// 0x4659d08
	void ClientOperateActor(Actor* Actor, int OperateType);// 0x4659c50
	void ClientOnSystemNotify(FString Title, FString Content);// 0x4659b78
	void ClientOnHurt();// 0x4659b5c
	void ClientOnDamageToOther(float _DamageToOther);// 0x4659ad8
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, const StateType StateType, Actor* NextViewTarget, bool SelectOtherOnClient);// 0x4659944
	void ClientObJudgeKill(FString InPlayerKey);// 0x46598c0
	void ClientHeartbeat(float DeltaTime);// 0x4659844
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x4659780
	void ClientGiveUpRevivalTemmates();// 0x465976c
	void ClientGameStarted();// 0x4659750
	void ClientFriendBattleEnd();// 0x4659734
	void ClientFindingPathRcv(const Vector[] PathPoints);// 0x465967c
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x46595f0
	void ClientEnterViewBox(int BoxId);// 0x465956c
	void ClientEndOnlineGame();// 0x4659550
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x4659408
	void ClientDisplayGameTipWithMsgID(int ID);// 0x4659358
	void ClientCheatCommandResult(const CheatCommandResultInfo InCheatCommandResultInfo);// 0x46592c4
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x4659214
	void ClientChangeStatePC(StateType TargetStateType);// 0x465918c
	void ClientBountyBuyItemResult(const BountyBuyingResultInfo InBuyingResultInfo);// 0x4659104
	void ClearStateSign(enum State);// 0x4659088
	void ClearFireSign();// 0x4659074
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x4658fd4
	bool CientRevivalTemmates();// 0x4658f9c
	void CheckUpdateTeamAssembleDisplayInfo();// 0x4658f88
	void CheckTriggerLevelClientWhiteList();// 0x4658f6c
	void CheckTeammateAvatarDisplayInfoInit();// 0x4658f58
	bool CheckSkipUpdatePoseViewPitchLimit();// 0x4658f18
	void CheckMoveableException(float DeltaTime);// 0x4658e9c
	void CheckGoalAchieved();// 0x4658e88
	void CheckAddUnLoadUserWidgetStyleTimerHandle(UserWidgetStyle* Style);// 0x4658e0c
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x4658d90
	void ChangeTeamAssembleDisplayViewState(bool IsEnable);// 0x4658d0c
	void ChangeSpectatorStateToFreeView();// 0x4658cf8
	void ChangeGlideState();// 0x4658ce4
	void ChangeDropPlan();// 0x4658cd0
	void ChangeCampStatus(bool ShowAirLine, bool UseDistanceMeasurement, bool ShowTeammateKillInfo, bool Dice, bool AIHelper, int CampStatusFromServer, bool ShowResPoint, bool VoiceChanger);// 0x4658a54
	void ChangeAllowOBPlayerKeys(uint32[] InPlayerList);// 0x465897c
	bool CanUseRemmoteControl();// 0x465893c
	void CanSeeAllUI(bool bUIVisibility);// 0x46588b8
	bool CanScaleScreenSizeCulling();// 0x4658880
	bool CanClientObJudgeKill(FString InPlayerKey);// 0x46587e8
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x465873c
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x4658630
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x4658588
	void CallTeamMateStateChanged(out const TeamMateStateInfo TeamMateInfo);// 0x46584e4
	void CallShowTouchInterface(bool InShow);// 0x4658458
	void CallShowMedicBulletHitTips(Actor* HitPlayer);// 0x46583dc
	void CallServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, int CurClipID, int CurrentBulletNum);// 0x46582b4
	void CallSendServerReportImprisonmenter();// 0x46582a0
	void CallSendClientData();// 0x465828c
	void CallEscapeHelicopter(int PlayAnimImmediately, float CallHeight);// 0x46581d4
	bool CalledOverrideClickQuitSpectating();// 0x4658194
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, MotionControlConfig Config, float Left, float Right, bool bLandScapeOrientation);// 0x4657e64
	Vector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);// 0x4657d2c
	void C2SRPC_RequestSyncReportInfo();// 0x4657ccc
	void C2S_SubmitQuestionRequest(const int QuestionID, const int AnswerID);// 0x4657be4
	void C2S_SendUIStyleInfoToDS(bool bIsLoad, FString UIStyleName);// 0x4657ad4
	void C2S_RequestSkillPrompt();// 0x4657a74
	void C2S_RequestBeingRescuedRemainingTime();// 0x4657a14
	void C2S_GetQuestionRequest();// 0x46579b4
	void BuildArroundMySelf();// 0x46579a0
	void BroadcastVaultFailDSCpp();// 0x465798c
	void BroadcastFatalDamageToClientSimple(ClientFatalDamageRecordDataSimple Data);// 0x4657788
	void BroadcastFatalDamageToClient(const ClientFatalDamageRecordData Data);// 0x4657680
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x46574a0
	void BroadcastBeMaxKillerToClient(byte CurMaxKillerStatus, FString MaxKillerName, uint32 MaxKillerKey, FString MaxKillerUID, int KillNum);// 0x4657314
	void BPHandleKillTipInfo(out const ExcellentOperationRecordData[] ExcellentOperationInfos, out const FString CauserName, out const FString VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int Relationship, int PreviousHealthStatus, FString RealKillerName, int realKillerNewKillNum, int victimAnchorPlatformResID, bool IsKilledByMonster, bool bIsVictimMonster, int LocalPlayerAssistNum, out const ClientFatalDamageRecordData Data);// 0xffffff8a17adf2b0
	bool BPGetIsAndroidSimulator();// 0x46572dc
	void BPClientCheatCommandResult(out const CheatCommandResultInfo InCheatCommandResultInfo);// 0xffffff8a17adf2b0
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x465717c
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x4657064
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0xffffff8a17adf2b0
	void BlueprintOnWidgetInit(UAEUserWidget* Widget);// 0x4656fe8
	class SpectatorPawn BlueprintGetSpectatorPawnClass();// 0xffffff8a17adf2b0
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x4656f28
	void BackToGameDataRefresh();// 0x4656f14
	bool AutoSelectViewTarget();// 0x4656edc
	void AutoSelectTeammateToView();// 0x4656ec8
	void AsanTest();// 0x4656eb4
	void ApplyGameModeProfile(FString ProfileName);// 0x4656e28
	void AirDropVehicle(int Index, float Z);// 0x4656d70
	void AddWeaponPendantItem(int WeaponID, int pendantID);// 0x4656cbc
	void AddTriggerLevelsClientWhiteList(FString LevelName);// 0x4656c38
	void AddTriggerLevelsClientBlackList(FString LevelName);// 0x4656bb4
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x4656aac
	void AddTeammatesYouKilled(STExtraPlayerController* TeammateYouKill);// 0x4656a30
	void AddSignalGunGM(int gmType, int GeneralBoxTime);// 0x465697c
	void AddMarkedWrapperActorMonitor(int WrapperActorNetGUID, uint32 MonitorPlayerKey);// 0x4656894
	void AddMapPathOnBothMap(int TypeID);// 0x4656818
	void AddItem(int ID, int Count);// 0x4656764
	void AddGameTipBlackIDList(out const int[] IDList);// 0x46566d0
	void AddGameTipBlackID(const int ID);// 0x4656654
	void Add_WCV_Rule(int ruleID);// 0x46565d8
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x4656518
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4656494

--------------------------------
Class: ValidTouchMoveFrameConfig
	FString DeviceName;//[Offset: 0x0, Size: 0x10]// 0x7612008e20
	int Enable;//[Offset: 0x10, Size: 0x4]// 0x7612008db0
	int Frame;//[Offset: 0x14, Size: 0x4]// 0x7612008d40
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7612008cc0

--------------------------------
Class: MotionControlConfig
	float MotionRateYaw;//[Offset: 0x0, Size: 0x4]// 0x7611f785b0
	float MotionRatePitch;//[Offset: 0x4, Size: 0x4]// 0x7611f78540
	float MotionAimRatePitch;//[Offset: 0x8, Size: 0x4]// 0x7611f784d0
	float MotionAimRateYaw;//[Offset: 0xc, Size: 0x4]// 0x7611f78460
	float MotionRateYawThreshold;//[Offset: 0x10, Size: 0x4]// 0x7611f783f0
	float MotionRatePitchThreshold;//[Offset: 0x14, Size: 0x4]// 0x7611f78380
	float MotionTouchAimRatePitch;//[Offset: 0x18, Size: 0x4]// 0x7611f78310
	float MotionTouchAimRateYaw;//[Offset: 0x1c, Size: 0x4]// 0x7611f782a0
	float MotionTouchRatePitch;//[Offset: 0x20, Size: 0x4]// 0x7611f78230
	float MotionTouchRateYaw;//[Offset: 0x24, Size: 0x4]// 0x7611f781c0

--------------------------------
Class: MotionControlLandscapeConfig
	float MotionControlPitchReverce_C;//[Offset: 0x0, Size: 0x4]// 0x76120086b0
	float MotionControlPitchLeft_C;//[Offset: 0x4, Size: 0x4]// 0x7612008640
	float MotionControlPitchRight_C;//[Offset: 0x8, Size: 0x4]// 0x76120085d0
	float MotionControlYawLeft_C;//[Offset: 0xc, Size: 0x4]// 0x7612008560
	float MotionControlYawRight_C;//[Offset: 0x10, Size: 0x4]// 0x76120084f0

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611f874b0
	FString PlayerUIDStr;//[Offset: 0x10, Size: 0x10]// 0x7611f87440
	int PlayerGender;//[Offset: 0x20, Size: 0x4]// 0x7611f873d0
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x7611f87350
	int[] EquipedAvatarList;//[Offset: 0x28, Size: 0x10]// 0x7611f87260
	int[] EquipedWeaponList;//[Offset: 0x38, Size: 0x10]// 0x7611f87170
	int[] EquipedWeaponAttachmentSkinList;//[Offset: 0x48, Size: 0x10]// 0x7611f87080
	AnimMontage* DisplayAnimMontage;//[Offset: 0x58, Size: 0x8]// 0x7611f87000

--------------------------------
Class: ClientTeamerMaxKillerRecord
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x76120063a0
	bool bIsKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7612006320

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 0x20]// 0x7612006100
	SensibilityMode fireMode;//[Offset: 0x20, Size: 0x20]// 0x7612006080
	SensibilityMode MotionMode;//[Offset: 0x40, Size: 0x20]// 0x7612006000
	SensibilityMode MotionFireMode;//[Offset: 0x60, Size: 0x20]// 0x7612005b60
	int XaxisInversionSwitch;//[Offset: 0x80, Size: 0x4]// 0x7612005af0
	float VehicleEye;//[Offset: 0x84, Size: 0x4]// 0x7612005a80
	float ParachuteEye;//[Offset: 0x88, Size: 0x4]// 0x7612005a10
	float CamSenBuildTp;//[Offset: 0x8c, Size: 0x4]// 0x76120059a0
	float CamSenBuildFp;//[Offset: 0x90, Size: 0x4]// 0x7612005930
	float FPPEye;//[Offset: 0x94, Size: 0x4]// 0x76120058c0
	int SideMirrorModeC;//[Offset: 0x98, Size: 0x4]// 0x7612005850
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xa0, Size: 0x50]// 0x7612005530

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 0x4]// 0x7612005f90
	float Sight1X;//[Offset: 0x4, Size: 0x4]// 0x7612005f20
	float Sight2X;//[Offset: 0x8, Size: 0x4]// 0x7612005eb0
	float Sight3X;//[Offset: 0xc, Size: 0x4]// 0x7612005e40
	float Sight4X;//[Offset: 0x10, Size: 0x4]// 0x7612005dd0
	float Sight6X;//[Offset: 0x14, Size: 0x4]// 0x7612005d60
	float Sight8X;//[Offset: 0x18, Size: 0x4]// 0x7612005cf0
	float FPPNoAim;//[Offset: 0x1c, Size: 0x4]// 0x7612005c80

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 0x4]// 0x76120057e0
	int Type;//[Offset: 0x4, Size: 0x4]// 0x7612005770

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0x118, Size: 0x4]// 0x7612027810
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]// 0x7612027790
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]// 0x7612027710
	float GuideInterval;//[Offset: 0x120, Size: 0x4]// 0x76120276a0
	int MaxGuideLevel;//[Offset: 0x124, Size: 0x4]// 0x7612027630
	NewbieGuideItem[] items;//[Offset: 0x128, Size: 0x10]// 0x7612027530
	NewbieGuideItemObject*[] RegisterItems;//[Offset: 0x138, Size: 0x10]// 0x7612027430
	STExtraPlayerController* OwnerController;//[Offset: 0x148, Size: 0x8]// 0x76120273b0
	int[] FinishedTips;//[Offset: 0x150, Size: 0x10]// 0x76120272c0
	int[] FinishedCounts;//[Offset: 0x160, Size: 0x10]// 0x76120271d0
	byte CurrentPlayerCategory;//[Offset: 0x170, Size: 0x1]// 0x7612027150
	ZombieModeGuideInfo ZombieModeGuideInfo;//[Offset: 0x1b0, Size: 0x5]// 0x7612026db0
	UAEDataTable* pGuideTextTable;//[Offset: 0x1c8, Size: 0x8]// 0x7612026d30
	delegate OnConditionSucess;//[Offset: 0x1d0, Size: 0x10]// 0x7612026cb0
	delegate OnCreateWidget;//[Offset: 0x1e0, Size: 0x10]// 0x7612026c30
	delegate OnUIInfoIsValid;//[Offset: 0x1f0, Size: 0x10]// 0x7612026bb0
	FString DebugModeID;//[Offset: 0x200, Size: 0x10]// 0x7612026b40
	void TestNewbieGuideUI(int Index);// 0x443d508
	void SendNewbieMsg(int TipsId, bool IsStart, int tipsIndex);// 0x443d404
	void ResetGuid(byte Category, int ModeID);// 0x443d34c
	bool RegisterNewGuide(class NewbieGuideItemObject NewbieGuideItemDataAsset);// 0x443d2bc
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x443d240
	void OnGuideFinishEventTrigger(GSListenerBase* Trigger);// 0x443d1c4
	void NewbieGuideOnUIInfoIsValid__DelegateSignature(int CurID, FString InMessage);// 0xffffff8a17adf2b0
	void NewbieGuideOnCreateWidget__DelegateSignature(UserWidget* Widget);// 0xffffff8a17adf2b0
	void NewbieGuideOnConditionSucess__DelegateSignature(int CurID, int PassConditionCount);// 0xffffff8a17adf2b0
	bool IsValid(NewbieGuideItem InItem);// 0x443d0c0
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte curPlayerCategory);// 0x443cedc
	NewbieGuideItem[] GetNewbieGuidInfo();// 0x443ce08
	bool GetIsAllowNewGuide();// 0x443cdd0
	int GetFinishedCount(int ID);// 0x443cd44
	<FName,Object*> GetAllNewbieGuideItemDataAssetPathAndObject();// 0x443cbe4
	void EnableNewbieGuideUI(int Index, bool IsEnable);// 0x443cb24
	void CheckConditonGuide();// 0x443cb10
	void AddGuidPriority(int Index, int Priority);// 0x443ca5c
	void AddFinishedCount(int ID);// 0x443c9e0

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 0x4]// 0x7612025710
	FString Name;//[Offset: 0x8, Size: 0x10]// 0x76120256a0
	byte Type;//[Offset: 0x18, Size: 0x1]// 0x76120255c0
	int MaxGuideCounts;//[Offset: 0x1c, Size: 0x4]// 0x7612025550
	byte[] SubjectPlayerTypes;//[Offset: 0x20, Size: 0x10]// 0x76120253f0
	int Priority;//[Offset: 0x30, Size: 0x4]// 0x7612025380
	int MuteFlag;//[Offset: 0x34, Size: 0x4]// 0x7612025310
	int PreconditionID;//[Offset: 0x38, Size: 0x4]// 0x76120252a0
	float PreconditionTipTimeGap;//[Offset: 0x3c, Size: 0x4]// 0x7612025230
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x40, Size: 0x10]// 0x7612025130
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListener;//[Offset: 0x50, Size: 0x10]// 0x7612025030
	float Duration;//[Offset: 0x60, Size: 0x4]// 0x7612024fc0
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x68, Size: 0x10]// 0x761200c9a0
	NewbieGuideModeSettings ModeSettings;//[Offset: 0x78, Size: 0x30]// 0x761200c520
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]// 0x761200c4a0
	bool bIsTimeEfficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]// 0x761200c420

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x28, Size: 0x8]// 0x75a844aa00
	bool ReconnectRecover();// 0x443c160
	bool IsOK();// 0x443c120

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x443c3cc

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x28, Size: 0x10]// 0x75bcaf1380
	Controller* OwnerController;//[Offset: 0x38, Size: 0x8]// 0x75bcaf1400
	Actor* OwnerActor;//[Offset: 0x40, Size: 0x8]// 0x75bcaf1480
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x48, Size: 0x8]// 0x75bcaf1500
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x75bcaf1580
	float DelayTime;//[Offset: 0x54, Size: 0x4]// 0x75bdd623f0
	bool ReconnectRecover();// 0x439b6a8
	void OnEventTrigger();// 0x439b68c
	bool IsListenerActived();// 0x439b64c
	Actor* GetCurrentEventOwnerActor();// 0x439b610
	bool EnableListener();// 0x439b5d0
	bool DisableListener();// 0x439b590

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	UTSkillSynData[] SkillSynData;//[Offset: 0x160, Size: 0x10]// 0x75a853c680
	UTSkillPhaseListSynData[] SkillPhaseListSynData;//[Offset: 0x180, Size: 0x10]// 0x75a853c780
	SkillSinglePhaseData SinglePhaseData;//[Offset: 0x1a0, Size: 0x10]// 0x75a853c800
	SkillSinglePhaseData SinglePhaseDataWithRPC;//[Offset: 0x1b0, Size: 0x10]// 0x75a853c880
	UTSkillUIDRepData[] SkillUIDRepDataList;//[Offset: 0x1d0, Size: 0x10]// 0x75a853c980
	delegate OnTickEvent;//[Offset: 0x1e0, Size: 0x10]// 0x75a853ca00
	delegate OnInitOneSkillFinish;//[Offset: 0x1f0, Size: 0x10]// 0x75a853ca80
	bool bHideUIOnEndViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]// 0x75a853cb00
	delegate OnSkillCDChanged;//[Offset: 0x208, Size: 0x10]// 0x75a853cb80
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x218, Size: 0x10]// 0x75a853cc80
	UTAddedSkillSturct[] RepAddedSkillStructList;//[Offset: 0x230, Size: 0x10]// 0x75a853cd80
	delegate ChangeActorBlackboard;//[Offset: 0x250, Size: 0x10]// 0x75a853ce00
	Actor* OwnerActor;//[Offset: 0x260, Size: 0x8]// 0x75a853ce80
	Object*[] TestList;//[Offset: 0x268, Size: 0x10]// 0x75a853cf80
	class UTSkill[] SkillArchetypes;//[Offset: 0x278, Size: 0x10]// 0x75a853d080
	class UTSkill[] SkillHardReferenceList;//[Offset: 0x288, Size: 0x10]// 0x75a853d180
	int[] SkillInitIndices;//[Offset: 0x298, Size: 0x10]// 0x75a853d200
	int[] SkillInitIndicesOnHighLevelDevices;//[Offset: 0x2a8, Size: 0x10]// 0x75a853d280
	UTSkill*[] Skills;//[Offset: 0x2b8, Size: 0x10]// 0x75a853d380
	bool bShowSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]// 0x75a853d400
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x2d0, Size: 0x10]// 0x75a853d500
	UAEUserWidget* SkillUIRoot;//[Offset: 0x2e0, Size: 0x8]// 0x75a853d580
	PanelWidget* SkillUIRootPanel;//[Offset: 0x2e8, Size: 0x8]// 0x75a853d600
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x2f0, Size: 0x50]// 0x75a89ce940
	ReplicatedBlackboardCollection ReplicatedBlackboard;//[Offset: 0x340, Size: 0x50]// 0x75a853d780
	delegate OnPostRep_ReplicatedBlackboard;//[Offset: 0x390, Size: 0x10]// 0x75a853d800
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x3a0, Size: 0x50]// 0x75a89cea00
	<UTSkill*,int> SkillToIndexMap;//[Offset: 0x3f0, Size: 0x50]// 0x75a89ceac0
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x440, Size: 0x50]// 0x75a89ceb80
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x490, Size: 0x50]// 0x75a89cec40
	<int> PendingSkillForResume;//[Offset: 0x4e0, Size: 0x50]// 0x75d119b0e0
	UTSkillCreateData[] SkillBaseDatas;//[Offset: 0x5d0, Size: 0x10]// 0x75a853db80
	delegate OnSkillHit;//[Offset: 0x6b0, Size: 0x10]// 0x75a853dc00
	delegate OnSkillCast;//[Offset: 0x6c0, Size: 0x10]// 0x75a853dc80
	bool bForceStartSkillAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 0x1]// 0x75a853dd00
	float PhasePercentage;//[Offset: 0x728, Size: 0x4]// 0x75a89bf420
	<int,int> UIDToSyncSkillActiveStateData;//[Offset: 0x730, Size: 0x50]// 0x75a89ced00
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x780, Size: 0x10]// 0x75a853de00
	<int,int> UIDToSyncSkillCDDatas;//[Offset: 0x798, Size: 0x50]// 0x75a89cedc0
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x7e8, Size: 0x30]// 0x75a853de80
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x818, Size: 0x30]// 0x75a853df00
	bool bDebugSkillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]// 0x75a853df80
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]// 0x75a853e000
	delegate SkillStopEvent;//[Offset: 0x8b0, Size: 0x10]// 0x75a853e080
	delegate SkillStringEvent;//[Offset: 0x8c0, Size: 0x10]// 0x75a853e100
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x8d0, Size: 0x10]// 0x75a853e200
	class Object[] RemovingSkillClass;//[Offset: 0x8e0, Size: 0x10]// 0x75a853e300
	class Object[] PendingRemoveSkillClass;//[Offset: 0x8f0, Size: 0x10]// 0x75a853e400
	<int,SkillBlackBoardSyncDataArrayWrapper> CurrentParameters;//[Offset: 0x900, Size: 0x50]// 0x75a89cee80
	delegate SkillStartEvent;//[Offset: 0x950, Size: 0x10]// 0x75a853e500
	UTSkill*[] PendingPassiveSkills;//[Offset: 0x960, Size: 0x10]// 0x75a853e600
	SkillGlobalUIDDataAsset* SkillGlobalUIDDataAsset;//[Offset: 0x970, Size: 0x8]// 0x75a853e680
	FString LastESkillTargetDesc;//[Offset: 0x988, Size: 0x10]// 0x75a89bf6c0
	int SkillSynRandomSeed;//[Offset: 0x998, Size: 0x4]// 0x75a89bf730
	RandomStream SkillSynRandStream;//[Offset: 0x99c, Size: 0x8]// 0x75a853e700
	int SkillSynRandomSeedExpireCount;//[Offset: 0x9a4, Size: 0x4]// 0x75a89bf7a0
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x9a8, Size: 0x50]// 0x75a89cef40
	SkillUIRegistRecord[] SkillUIWaitForController;//[Offset: 0xa10, Size: 0x10]// 0x75a853e880
	SkillParamater[] SkillParamaters;//[Offset: 0xa20, Size: 0x10]// 0x75a853e980
	FString RecordSkillLogKeyStr;//[Offset: 0xa30, Size: 0x10]// 0x75a89bf880
	delegate UGC_SkillActiveDelegate;//[Offset: 0xa48, Size: 0x10]// 0x75a853ea00
	delegate UGC_SkillStartDelegate;//[Offset: 0xa58, Size: 0x10]// 0x75a853ea80
	delegate UGC_SkillEndDelegate;//[Offset: 0xa68, Size: 0x10]// 0x75a853eb00
	delegate UGC_SkillCDDelegate;//[Offset: 0xa78, Size: 0x10]// 0x75a853eb80
	void UploadRecordSkillLog_Lua(FString Key, FString Content);// 0xffffff8a17adf2b0
	void UploadRecordSkillLog(FString Key, FString Content);// 0x798d898
	void UpdateSyncSkillCDData(int SkillUID);// 0x798d81c
	void UpdateSyncSkillActiveState(int SkillUID);// 0x798d7a0
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x798d724
	void TryDeleteOneSkillByClass(class UTSkill SkillTemplateClass, bool IsImmediately);// 0x798d5ec
	void TryAddOneSkill(out class UTSkill skillTemplate, bool bActive);// 0x798d4ec
	void TryActivateSkill(int SkillIndex, bool bActive);// 0x798d424
	void TriggerSkillEventBySkillPath(byte InEventEume, FString SkillPath);// 0x798d360
	bool TriggerEvent(int SkillID, byte EventType);// 0x798d28c
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x798d0e4
	void ToggleAllSkillUIShow(bool bShow, bool bForce);// 0x798d014
	void SynOneSkillSynData(int SkillSlot, int theLastSkill, out const UTSkillSynSinglePhaseData[] PhaseDataList);// 0x798cf04
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestUID);// 0x798cdf8
	void SwitchSkill(int SkillID, byte EventType);// 0x798cd38
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x798cc64
	int StopSkillWithID(int SkillID, enum StopReason);// 0x798cb94
	void StopSkillWithClient(int SkillUID);// 0x798cb10
	void StopSkillSpecific(UTSkill* Skill, enum Reason);// 0x798ca58
	void StopSkillAll(enum StopReason, bool bStopPassiveSkill);// 0x798c990
	void StopRecordSkillLog(bool bUpload);// 0x798c90c
	void StartRecordSkillLog(float fMaxTime);// 0x798c890
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x798c7bc
	bool SetupOwnerAndSystem();// 0x798c784
	void SetSkillState(out const UTSkillStateSyncData[] syncStateDatas);// 0x798c6c8
	void SetSkillOwner(Actor* tempActor);// 0x798c644
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x798c58c
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x798c4d4
	bool SetSkillActiveByUID(int SkillUID, bool bActive);// 0x798c3f8
	bool SetSkillActive(int SkillIndex, bool bActive, bool bForceSet);// 0x798c2d8
	void SetCurSkill(int SkillIndex, int SkillSlot);// 0x798c224
	void SetAllCDTime(float InNewCDTime);// 0x798c1a8
	void ServerTriggerEvent(int SkillUID, byte EventType);// 0x798c0b8
	void ServerStopSkill(int SkillUID);// 0x798c008
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x798bf2c
	void ServerSetParameters(const SkillBlackBoardSyncData[] InData, int InSlotIndex);// 0x798be08
	void ServerSetBlackboardValue(int SkillUID, const SkillBlackBoardSyncData Value);// 0x798bcc0
	void ServerRequestGenerateSkillUID(FString SkillPath);// 0x798bc08
	void ServerNotifyRandomSeed(int Seed);// 0x798bb58
	void ResimulateSkillSynData(int SkillUID);// 0x798badc
	void ResimulateSkillEvent(int SkillUID);// 0x798ba60
	void ResimulateAllSynData();// 0x798ba44
	void ResetAllSkillCD();// 0x798ba30
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestUIDs);// 0x798b8d4
	void RepSkillSynSinglePhaseData();// 0x798b8c0
	void RepSkillSynData();// 0x798b8a4
	void RepSkillPhaseListSynData();// 0x798b888
	void RepSkillHitInfo();// 0x798b874
	void ReplicateBlackboard(int SkillUID, out const FName Name, byte Type);// 0x798b764
	void RemoveTriggerSkillPair(UTSkill* Skill);// 0x798b6e0
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath objPath);// 0x798b570
	void RemoveSkillRecord(UTSkill* Skill, float reserveTime);// 0x798b4b8
	void RemoveRecordSkillUIByPath(FString SkillClassName, SoftObjectPath objPath);// 0x798b348
	void RemoveRecordSkillUIByClass(FString SkillClassName);// 0x798b270
	void RemoveAllSkillUI();// 0x798b25c
	void RemoveAddedSkill(int SkillUID);// 0x798b1e0
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath objPath);// 0x798b070
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x798afbc
	static void RefreshSkillCDFromRepData_One(World* CurWorld, UTSkillCDBase* TargetSkillCD, out const UTSkillSyncData_CD FromCDData, byte NetRole);// 0x798ae5c
	void RefreshSkillCDFromRepData(int InSkillIndex, out const SkillCDRepData InCDData);// 0x798ad84
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x798ac58
	bool PreCheckNewSkill(int SkillID);// 0x798abc0
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x798aa88
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x798a9c8
	void OnSkillSynSinglePhaseDataChange(bool WithRPC);// 0x798a93c
	void OnRepSkillData_BP();// 0xffffff8a17adf2b0
	void OnRep_SkillUIDRepDataList();// 0x798a920
	void OnRep_SkillHitInfo();// 0x798a904
	void OnRep_SkillCDDatas();// 0x798a8f0
	void OnRep_SkillActiveState();// 0x798a8dc
	void OnRep_ReplicatedBlackboard();// 0x798a8c8
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0x798a748
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x798a688
	void OnEndViewTarget(PlayerController* Controller);// 0x798a604
	void OnControllerArrived_BP();// 0xffffff8a17adf2b0
	void OnControllerArrived();// 0x798a5e8
	void OnBecomeViewTarget(PlayerController* Controller);// 0x798a564
	void OnAsyncLoadFinishedByItem(int SkillUID);// 0x798a4e8
	void MulticastTrySetSinglePhaseSkillUIDBySlot(int SkillSlot, int SkillUID);// 0x798a400
	void MulticastTrySetSinglePhaseIndexBySlot(int SkillSlot, int PhaseIndex);// 0x798a318
	void MulticastInitSinglePhaseDataOnSetSkillIndex(int SkillSlot, int SkillIndex, int SkillUID);// 0x798a1f0
	void ModifySkillCD(FString SkillName, int Index, enum Op, float Value);// 0x798a064
	bool LoadSyncIfLoadingBySkillUID(int SkillUID);// 0x7989fd4
	bool LoadSyncIfLoadingByClassName(FString SkillClassName);// 0x7989ef0
	bool LoadSyncIfLoading(class UTSkill SkillClass);// 0x7989df4
	UAEBlackboard* K2_GetBlackboard(UTSkill* InSkill);// 0x7989d68
	bool IsTheSkillInCasting(int SkillIndex);// 0x7989cd8
	bool IsReadyToCastSkill(int SkillID);// 0x7989c40
	bool IsHasInitSkillSystem();// 0x7989c24
	bool IsForceStartSkillAction();// 0x7989bec
	bool IsCastingSkillIndex(int SkillIndex);// 0x7989b5c
	bool IsCastingSkill(bool bFilterPassiveSkill);// 0x7989abc
	void InitSkillSystemAync();// 0x7989aa8
	void InitSkillSystem(bool isDedicateServer);// 0x7989a1c
	bool InitOneSkill(class UTSkill skillTemplate, int SkillIndex, bool bActive);// 0x7989904
	UTSkill* InitAndGetSkill(int SkillID, out int SkillSlotIndex);// 0x798982c
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x79897a0
	int GetSkillUIDByIndex(int SkillIndex);// 0x7989714
	int GetSkillUIDByClassPath(FString SkillClassPath, bool AutoGenerateNewID);// 0x79895e8
	UTSkillStateSyncData[] GetSkillState();// 0x798950c
	class UTSkill GetSkillSoftClassByUID(int InSkillUID);// 0x798944c
	int GetSkillSlotBySkill(UTSkill* param1);// 0x79893c0
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x79892f0
	UTSkillPhase* GetSkillPhaseByIndex(class Object SkillClass, int PhaseIndex);// 0x7989228
	FString GetSkillName(int SkillIndex);// 0x7989158
	UTSkillBaseWidget* GetSkillMemberByTag(class Object SkillClass, FString Tag);// 0x7989030
	int GetSkillLastPhase(UTSkill* Skill);// 0x7988ee0
	int GetSkillIndexByUID(int SkillUID);// 0x7988e54
	int GetSkillIndexByPathFormArchetype(FString PathName);// 0x7988d74
	int GetSkillIndexByClassName(FString ClassName);// 0x7988c94
	int GetSkillIndexByClass(class Object SkillClass, bool bFetchArchetypes);// 0x7988bc4
	int GetSkillIndex(UTSkill* Skill);// 0x7988b38
	static int GetSkillGlobalUIDByClass(class Object SkillClass);// 0x7988abc
	int GetSkillCurPhase(UTSkill* Skill);// 0x798896c
	FString GetSkillClassPathByUID(int SkillUID);// 0x798889c
	FString GetSkillClassNameByUID(int SkillUID);// 0x79887cc
	UTSkill* GetSkillByUID(int SkillUID);// 0x7988740
	UTSkill* GetSkillByName(FString SkillName);// 0x7988660
	UTSkill* GetSkillByIndex(int SkillIndex);// 0x79885d4
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x79884f4
	UTSkillCreateData GetSkillBaseDataBySkill(UTSkill* Skill);// 0x7988460
	UTSkillCreateData GetSkillBaseDataByIndex(int SkillIndex);// 0x79883cc
	UTSkillCreateData GetSkillBaseDataByClass(class Object SkillClass);// 0x7988338
	class UTSkill GetSkillArcheTypeByClassName(FString archeClassName, out int TargetIndex);// 0x79881cc
	UTSkill* GetSkill(int SkillIndex);// 0x7988140
	float GetRestCoolDownTime(int SkillID);// 0x79880ac
	byte GetRealOwnerRoleSafety();// 0x7988070
	bool GetParamBySelector(FName SelectedKeyName, int InSlotIndex, out SkillBlackBoardSyncData OutData);// 0x7987f00
	UTSkill*[] GetCurSkills();// 0x7987e80
	UTSkillPhase*[] GetCurSkillPhases();// 0x7987e00
	UTSkillPhase* GetCurSkillPhase(int SkillSlot);// 0x7987d74
	int[] GetCurSkillIndexes();// 0x7987cf0
	int GetCurSkillIndexBySlot(int SkillSlot);// 0x7987c64
	int GetCurSkillIndex();// 0x7987c48
	UTSkill* GetCurSkill(int SkillSlot);// 0x7987bbc
	int[] GetCurMonopolizeSkills();// 0x7987b3c
	int GetCastingSlotBySkillID(int SkillID);// 0x7987ab0
	UAEBlackboard* GetBlackBoard(int SkillUID);// 0x7987a24
	float GetAllMaxCDTimeAverage();// 0x79879f0
	float GetAllCDTimeAverage();// 0x79879bc
	int[] GetAllCastingSkillIndex();// 0x798793c
	bool ForceInitSkillByClassName(FString SkillClassName);// 0x7987858
	int FindRelatedCurSkillIndex(int SkillID, out int tempRelatedSkillSlot, bool PeekSlotIndex);// 0x7987738
	void EndRecordSkillLog();// 0x7987724
	void DeleteOneSkillByClass(class UTSkill SkillTemplateClass, bool bCheckItemExist);// 0x79875e4
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x798751c
	void ClientCheckSkillGlobalUIDDataAssetVersion(FString ServerVersionCode);// 0x7987490
	void ClearSkill(bool bDeleteSkill, bool bDestroySkillActor);// 0x79873b8
	bool CheckNewSkill(int SkillID, out int ReplaceSkillSlot);// 0x79872d4
	void CheckAutoSkill();// 0x79872b8
	void BothSideSetParameters(out const SkillBlackBoardSyncData[] InData, int InSlotIndex);// 0x79871a8
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0x7987100
	void AsyncInitOneSkill(int SkillUID, bool bAutoActive);// 0x7987040
	void AddTriggerSkillPair(UTSkill* InSkill);// 0x7986fbc
	void AddOneSkillToAddList(int FoundSkillIndex, out class UTSkill skillTemplate, bool bActive);// 0x7986e80
	void AddOneSkillByAddedSkillSturct(out UTAddedSkillSturct temp);// 0x7986dd8

--------------------------------
Class: UTSkillSynData
	int CurSkillUID;//[Offset: 0x0, Size: 0x4]// 0x75c994fbb0
	int Token;//[Offset: 0x4, Size: 0x4]// 0x75c994fc20
	int PhaseIndexes;//[Offset: 0x8, Size: 0x4]// 0x75c994fc90

--------------------------------
Class: UTSkillPhaseListSynData
	int CurSkillUID;//[Offset: 0x0, Size: 0x4]// 0x75c994fd00
	int Token;//[Offset: 0x4, Size: 0x4]// 0x75c994fd70

--------------------------------
Class: SkillSinglePhaseData
	UTSkillSynSinglePhaseData[] DataList;//[Offset: 0x0, Size: 0x10]// 0x75c9947580

--------------------------------
Class: UTSkillSynSinglePhaseData
	int CurSkillUID;//[Offset: 0x0, Size: 0x4]// 0x75c994fde0
	int CurSkillPhase;//[Offset: 0x4, Size: 0x4]// 0x75c994fe50

--------------------------------
Class: UTSkillUIDRepData
	FString SkillPath;//[Offset: 0x0, Size: 0x10]// 0x75c994f830
	int SkillUID;//[Offset: 0x10, Size: 0x4]// 0x75c994f8a0

--------------------------------
Class: SkillCDRepData
	int SkillUID;//[Offset: 0x0, Size: 0x4]// 0x75c9950390
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x8, Size: 0x10]// 0x75c9948600

--------------------------------
Class: UTSkillSyncData_CD
	int skillCDIndex;//[Offset: 0x0, Size: 0x4]// 0x75c9950400
	float lastActiveTime;//[Offset: 0x4, Size: 0x4]// 0x75c9950470
	bool bIsCDReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c9948480
	bool bIsTickFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x75c9948500
	float InitEnergy;//[Offset: 0xc, Size: 0x4]// 0x75c99504e0
	float MaxEnergy;//[Offset: 0x10, Size: 0x4]// 0x75c9950550
	float CurEnergy;//[Offset: 0x14, Size: 0x4]// 0x75c99505c0
	float DeltaEnergy;//[Offset: 0x18, Size: 0x4]// 0x75c9950630
	float SyncCount;//[Offset: 0x1c, Size: 0x4]// 0x75c99506a0
	float TickCountTime;//[Offset: 0x20, Size: 0x4]// 0x75c9950710

--------------------------------
Class: UTAddedSkillSturct
	int SkillUID;//[Offset: 0x0, Size: 0x4]// 0x75c994f910
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x75c9947400
	int LoadingSlot;//[Offset: 0x8, Size: 0x4]// 0x75c994f980

--------------------------------
Class: UTSkill.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]// 0x75a8544600
	FString SkillName;//[Offset: 0x528, Size: 0x10]// 0x75a85973a0
	FName SkillGroup;//[Offset: 0x538, Size: 0x8]// 0x75a8597410
	enum[] SkillTypes;//[Offset: 0x540, Size: 0x10]// 0x75a8544780
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]// 0x75a8544800
	bool bSinglePhaseRepWithRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]// 0x75a8544880
	bool bPhaseJumpUnLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]// 0x75a8544900
	bool bOBResimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]// 0x75a8544980
	enum SkillCastType;//[Offset: 0x554, Size: 0x1]// 0x75a8544a80
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 0x1]// 0x75a8544b00
	class UTSkill[] NotStoppedMonopolizeSkillClass;//[Offset: 0x558, Size: 0x10]// 0x75a8544c00
	class UTSkill[] NotAllowedMonopolizeSkillClass;//[Offset: 0x568, Size: 0x10]// 0x75a8544d00
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]// 0x75a8544d80
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]// 0x75a8544e00
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]// 0x75a8544e80
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57b, Size: 0x1]// 0x75a8544f00
	bool bNeedSyncStopAfterPrePerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]// 0x75a8544f80
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 0x1]// 0x75a8545000
	bool USE_NEW_SKILLCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57e, Size: 0x1]// 0x75a8545080
	UTSkillCreateData BaseData;//[Offset: 0x580, Size: 0x180]// 0x75a8545100
	int SkillCategory;//[Offset: 0x700, Size: 0x4]// 0x75a8597480
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x708, Size: 0x10]// 0x75a8545200
	int ItemID;//[Offset: 0x718, Size: 0x4]// 0x75a85974f0
	bool bEditUgcAdvancedConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 0x1]// 0x75a8545280
	UTSkillPhase* BasePhase;//[Offset: 0x720, Size: 0x8]// 0x75a8545300
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x728, Size: 0x50]// 0x75a855a840
	int InstancedNodesTotalSize;//[Offset: 0x778, Size: 0x4]// 0x75a85975d0
	int CurComponentNameIndex;//[Offset: 0x77c, Size: 0x4]// 0x75a8597640
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1]// 0x75a8545400
	SkillGlobalUIDDataAsset* LoadedGlobalUIDDataAsset;//[Offset: 0x788, Size: 0x8]// 0x75a8545480
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x790, Size: 0x8]// 0x75a8545500
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x798, Size: 0x8]// 0x75a8545580
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int coolDownIndex);// 0x797b8d8
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float percentage);// 0x797b820
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x797b710
	bool JumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x797b63c
	bool IsSkillSinglePhaseRep();// 0x797b604
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x797b56c
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x797b538
	UAEBlackboard* GetSpecificBlackboard();// 0x797b504
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x797b478
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x797b3e4
	int GetSkillGlobalUID();// 0x797b3a8
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x797b2e4
	void FillPhases();// 0x797b2d0
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int coolDownIndex);// 0x797b210
	bool CanSinglePhaseRepWithRPC();// 0x797b1d8
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x797b0fc

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75c9947880
	float Interval;//[Offset: 0x4, Size: 0x4]// 0x75c994fec0
	float IntervalSincePrevFinish;//[Offset: 0x8, Size: 0x4]// 0x75c994ff30
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x10, Size: 0x10]// 0x75c9947980
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x20, Size: 0x50]// 0x760d21c980
	<FString,int> SkillUIPathToHandle;//[Offset: 0x70, Size: 0x50]// 0x760d21ca40
	SoftClassPath SkillMainWidget;//[Offset: 0xc0, Size: 0x18]// 0x75c9947a80
	bool bInitMainSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]// 0x75c9947b00
	bool bShowOrHideSkillUIWhenVTChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]// 0x75c9947b80
	<enum,SlateBrush> SkillIcons;//[Offset: 0xe0, Size: 0x50]// 0x760d21cb00
	int SkillMainWidgetHandle;//[Offset: 0x130, Size: 0x4]// 0x75c99500f0
	float Range;//[Offset: 0x138, Size: 0x4]// 0x75c9950160
	UTSkillPhase*[] Phases;//[Offset: 0x140, Size: 0x10]// 0x75c9947e00
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]// 0x75c9947e80
	int CoolDownMessageID;//[Offset: 0x154, Size: 0x4]// 0x75c99501d0
	FName[] AsyncLoadingSkillUI;//[Offset: 0x158, Size: 0x10]// 0x75c9947f00
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x168, Size: 0x10]// 0x75c9948000
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]// 0x75c9948080

--------------------------------
Class: UTSkillCDBase.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x28, Size: 0x8]// 0x75a8208380
	UTSkill* OwnerSkill;//[Offset: 0x30, Size: 0x8]// 0x75a8208400
	enum cdType;//[Offset: 0x38, Size: 0x1]// 0x75a8208500
	FString cdTypeStr;//[Offset: 0x40, Size: 0x10]// 0x75a8219b30
	TimerHandle cdFullHandle;//[Offset: 0x50, Size: 0x8]// 0x75a8208580
	World* MyWorld;//[Offset: 0x58, Size: 0x8]// 0x75d0ae2b80
	float pingFromCToS;//[Offset: 0x64, Size: 0x4]// 0x75a8219ba0

--------------------------------
Class: UTSkillWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x458, Size: 0x8]// 0x75a883a500
	class Object* SkillClass;//[Offset: 0x460, Size: 0x8]// 0x75a883a580
	int SkillUIID;//[Offset: 0x468, Size: 0x4]// 0x75a8955ea0
	void TriggerPassiveEvent(byte SkillEvent);// 0x799795c
	void TriggerEvent(byte SkillEvent);// 0x79978e0
	void SetSkillUIID(int ID);// 0x7997864
	void SetSkillManager(UTSkillManagerComponent* Manager);// 0x79977ec
	void SetSkillClass(class Object InSkillClass);// 0x7997774
	void RemoveSkillUI();// 0x7997758
	void RemoveFromUIManager();// 0x79976e0
	void OnSkillWidgetInitFinish();// 0x79976c4
	bool IsTickFinish();// 0x79975b0
	bool IsTickCDCasting();// 0x7997578
	bool IsCDReady();// 0x7997540
	int GetSkillUIID();// 0x799750c
	FString GetSkillName();// 0x7997458
	UTSkillManagerComponent* GetSkillManger();// 0x799743c
	int GetSkillIndexBySkillComponent(UTSkillManagerComponent* InComponent);// 0x7997394
	int GetSkillIndex();// 0x7997338
	class Object GetSkillClass();// 0x799731c
	float[] GetSkillCDProgess();// 0x7997284
	float[] GetSkillCDByType(int Type);// 0x79971a4
	UTSkillCDBase*[] GetSkillCDBases();// 0x7997094
	UTSkill* GetSkill();// 0x799700c
	float GetMaxEnergy(int Index);// 0x7996f80
	PlayerController* GetLocalPlayerController();// 0x7996f4c
	float GetEnergyValue(int Index);// 0x7996e40
	float GetEnergyThreshold(int Index);// 0x7996db4
	float GetDeltaEnergy(int Index);// 0x7996d28
	float GetCurrentCountTime(int Index);// 0x7996c9c
	void DoRemove();// 0x7996c88

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0x120, Size: 0x10]// 0x75a89b4fa0
	int PhaseIndex;//[Offset: 0x130, Size: 0x4]// 0x75a89b5010
	FString PhaseDescription;//[Offset: 0x138, Size: 0x10]// 0x75a89b5080
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75a8967d00
	UTSkill* OwnerSkill;//[Offset: 0x14c, Size: 0x8]// 0x75a8967d80
	Color US;//[Offset: 0x15c, Size: 0x4]// 0x75a8967e00
	Color THEM;//[Offset: 0x160, Size: 0x4]// 0x75a8967e80
	Color Other;//[Offset: 0x164, Size: 0x4]// 0x75a8967f00
	int ActionsTopHalfCount;//[Offset: 0x168, Size: 0x4]// 0x75a89b50f0
	UTSkillPhaseCreateData BaseData;//[Offset: 0x170, Size: 0x80]// 0x75a8967f80
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x1f0, Size: 0x8]// 0x75a8968000
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x7994b3c
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x7994ab8
	bool StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x7994a20
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x799499c
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x79948cc
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x79947fc
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x7994778
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x79946a4
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x79945d0
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x7994544
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x79944ac
	bool ClearAttachments();// 0x7994474

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 0x4]// 0x75c994ee90
	float AltPhaseDuration;//[Offset: 0x4, Size: 0x4]// 0x75c994ef00
	float CacheMouseInputTime;//[Offset: 0x8, Size: 0x4]// 0x75c994ef70
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x75c9946780
	bool bCoolDownStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x75c9946800
	int coolDownIndex;//[Offset: 0x10, Size: 0x4]// 0x75c994efe0
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x18, Size: 0x10]// 0x75c9946900
	UTSkillEffect* PhaseConditionFailAction;//[Offset: 0x28, Size: 0x8]// 0x75c9946980
	UTSkillPicker* Picker;//[Offset: 0x30, Size: 0x8]// 0x75c9946a00
	UTSkillEffect*[] Actions;//[Offset: 0x38, Size: 0x10]// 0x75c9946b00
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x48, Size: 0x10]// 0x75c9946c00
	enum PhaseType;//[Offset: 0x58, Size: 0x1]// 0x75c9946d00
	FString EnterPhaseTipString;//[Offset: 0x60, Size: 0x10]// 0x75c994f050
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x70, Size: 0x10]// 0x75c9946e00

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(Object* SkillManagerComponent, Actor* Target);// 0x797ebc4
	bool IsOK_Internal();// 0x797eb84
	bool IsOK(Object* SkillManagerComponent);// 0x797eaec
	UTSkill* GetOwnerSkill();// 0x797ea9c

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]// 0x75bde19380
	FString WidgetDescription;//[Offset: 0x130, Size: 0x10]// 0x75c98a96e0
	Actor* BuffTargetActor;//[Offset: 0x140, Size: 0x8]// 0x75bde19400
	UTSkill* OwnerSkill;//[Offset: 0x148, Size: 0x8]// 0x75bde19480
	int ParentNodeIndex;//[Offset: 0x150, Size: 0x4]// 0x75c98a9750
	FString Tag;//[Offset: 0x158, Size: 0x10]// 0x75c98a97c0
	Object* CurOwnerActorComponent;//[Offset: 0x168, Size: 0x8]// 0x75bde19500
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x79810d4
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x7980ff8
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x7980ed0
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x7980dfc
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x7980d28
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x7980c54
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x7980b80
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x7980aac
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x79809d8
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x7980904
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x7980828
	void SetOwnerSkillManager(UTSkillManagerComponent* pMgr);// 0x79807a4
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x7980704
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x7980664
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x79805c4
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x7980524
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x7980484
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x79803e4
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x7980344
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x79802a4
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x7980204
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x7980164
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x79800c4
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x7980028
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x797ff40
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x797fea0
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x797fdc0
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x797fd20
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x797fc84
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x797fbe8
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x797fb4c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x797fab0
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x797fa14
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x797f978
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x797f8d8
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x797f7f0
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x797f75c
	UAEBlackboard* GetUAEBlackboard();// 0x797f720
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x797f6e4
	Actor* GetOwnerPawn();// 0x797f6a8
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x797f4f8
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x797f398

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 0x8]// 0x761221b030

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x28, Size: 0x3c0]// 0x75a81e1a00
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue, bool bAutoCreate);// 0x79a7e9c
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue, bool bAutoCreate);// 0x79a7d7c
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue, bool bAutoCreate);// 0x79a7c08
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue, bool bAutoCreate);// 0x79a7af0
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue, bool bAutoCreate);// 0x79a79d8
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue, bool bAutoCreate);// 0x79a78c0
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue, bool bAutoCreate);// 0x79a77a8
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue, bool bAutoCreate);// 0x79a7690
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue, bool bAutoCreate);// 0x79a7578
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue, bool bAutoCreate);// 0x79a7460
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue, bool bAutoCreate);// 0x79a7340
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x79a72a0
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x79a7200
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x79a7160
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x79a70c0
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x79a7020
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x79a6f80
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x79a6ee0
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x79a6e40
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x79a6da0
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x79a6d00
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x79a6c60
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x79a6bc4
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x79a6adc
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x79a6a3c
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x79a695c
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x79a68bc
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x79a6820
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x79a6784
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x79a66e8
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x79a664c
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x79a65b0
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x79a6514
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x79a6474
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x79a638c
	void FillBlackboard_BP(UAEBlackboardParameter[] ParamList);// 0x79a625c
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x79a615c

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 0x50]// 0x76118a1840
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x50, Size: 0x50]// 0x76118a1780
	<FName,class Object> ClassParamMap;//[Offset: 0xa0, Size: 0x50]// 0x76118a16c0
	<FName,byte> EnumParamMap;//[Offset: 0xf0, Size: 0x50]// 0x76118a1600
	<FName,int> IntParamMap;//[Offset: 0x140, Size: 0x50]// 0x76118a1540
	<FName,uint32> UIntParamMap;//[Offset: 0x190, Size: 0x50]// 0x76118a1480
	<FName,float> FloatParamMap;//[Offset: 0x1e0, Size: 0x50]// 0x76118a13c0
	<FName,bool> BoolParamMap;//[Offset: 0x230, Size: 0x50]// 0x76118a1300
	<FName,FString> StringParamMap;//[Offset: 0x280, Size: 0x50]// 0x76118a1240
	<FName,FName> NameParamMap;//[Offset: 0x2d0, Size: 0x50]// 0x76118a1000
	<FName,Vector> VectorParamMap;//[Offset: 0x320, Size: 0x50]// 0x76118a2c80
	<FName,Rotator> RotatorParamMap;//[Offset: 0x370, Size: 0x50]// 0x76118a8380

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x7612059b10
	byte Type;//[Offset: 0x8, Size: 0x1]// 0x7612059a30
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 0x88]// 0x76120594d0

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 0x28]// 0x76120599b0
	class Class* DefaultClass;//[Offset: 0x28, Size: 0x28]// 0x7612059930
	byte DefaultEnum;//[Offset: 0x50, Size: 0x1]// 0x76120598b0
	int DefaultInt;//[Offset: 0x54, Size: 0x4]// 0x7612059840
	float DefaultFloat;//[Offset: 0x58, Size: 0x4]// 0x76120597d0
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]// 0x7612059750
	FString DefaultString;//[Offset: 0x60, Size: 0x10]// 0x76120596e0
	FName DefaultName;//[Offset: 0x70, Size: 0x8]// 0x7612059670
	Vector DefaultVector;//[Offset: 0x78, Size: 0xc]// 0x76120595f0

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	void UpdateAction(Object* InstanceNodeContainer, float DeltaSeconds);// 0x7982290
	void UndoAction(Object* InstanceNodeContainer);// 0x798220c
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x7982150
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x7982094
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x7981fd8
	UTSkill* GetOwnerSkill();// 0x7981fa0
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x7981ee4
	bool DoAction(Object* InstanceNodeContainer);// 0x7981e4c

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x170, Size: 0x20]// 0x75a8967700
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x1a0, Size: 0x10]// 0x75a8967800
	Actor*[] IgnoreTargets;//[Offset: 0x1b0, Size: 0x10]// 0x75a8967900
	UTSkillPickerFilter*[] Filters;//[Offset: 0x1c0, Size: 0x10]// 0x75a8967a00
	bool TickPicker(float DeltaTime);// 0x7995ae4
	bool PickTargetsInner(Vector OriginPoint);// 0x7995a48
	bool PickTargets(Vector OriginPoint);// 0x79959b4

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 0x1]// 0x75c9945b80
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 0x8]// 0x75c9945c00
	enum PickerTargetType;//[Offset: 0x10, Size: 0x1]// 0x75c9945d00
	int PickerMaxCount;//[Offset: 0x14, Size: 0x4]// 0x75c994ed40
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x75c9945d80
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x75c9945e00
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]// 0x75c9945e80
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]// 0x75c9945f00
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]// 0x75c9945f80
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]// 0x75c9946000
	bool bIgnoreTargetVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]// 0x75c9946080

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]// 0x75c9946100
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 0x8]// 0x75c9946180
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x75c9946200
	byte HitPos;//[Offset: 0x11, Size: 0x1]// 0x75c9946280
	FName BoneName;//[Offset: 0x18, Size: 0x8]// 0x75c994edb0
	Vector HitEnvLocation;//[Offset: 0x20, Size: 0xc]// 0x75c9946300
	byte hitPhysMatType;//[Offset: 0x2c, Size: 0x1]// 0x75c9946380
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]// 0x75c9946400
	float DisToScreenCenter;//[Offset: 0x30, Size: 0x4]// 0x75c994ee20

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x7995614

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0x170, Size: 0x1]// 0x75a8538380
	FName[] InterestedOwnerTags;//[Offset: 0x178, Size: 0x10]// 0x75a8538400
	UTSkillEffect* SkillEffect;//[Offset: 0x188, Size: 0x8]// 0x75a8538480
	SkillConditionWarpper[] Conditions;//[Offset: 0x190, Size: 0x10]// 0x75a8538580
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x1a0, Size: 0x10]// 0x75a8538680

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 0x8]// 0x75c9948a00

--------------------------------
Class: SkillGlobalUIDDataAsset.DataAsset.Object
	<FString,int> AllSkillUIDMap;//[Offset: 0x30, Size: 0x50]// 0x75a81f2540
	<int,FString> DebugSkillPathMap;//[Offset: 0x80, Size: 0x50]// 0x75a81f2600
	FString VersionMD5Code;//[Offset: 0xd0, Size: 0x10]// 0x75a8219eb0

--------------------------------
Class: ReplicatedBlackboardCollection
	<int,SkillBlackBoardSyncDataArrayWrapper> RepMap;//[Offset: 0x0, Size: 0x50]// 0x760d21c8c0

--------------------------------
Class: SkillBlackBoardSyncDataArrayWrapper
	SkillBlackBoardSyncData[] Array;//[Offset: 0x0, Size: 0x10]// 0x75c9947200

--------------------------------
Class: SkillBlackBoardSyncData
	int IntValue;//[Offset: 0x0, Size: 0x4]// 0x75c994f130
	float FloatValue;//[Offset: 0x4, Size: 0x4]// 0x75c994f1a0
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c9946f00
	FName NameValue;//[Offset: 0x10, Size: 0x8]// 0x75c994f210
	FString StringValue;//[Offset: 0x18, Size: 0x10]// 0x75c994f280
	Vector VectorValue;//[Offset: 0x28, Size: 0xc]// 0x75c9946f80
	Rotator RotatorValue;//[Offset: 0x34, Size: 0xc]// 0x75c9947000
	Actor* ReplicatedActorPointer;//[Offset: 0x40, Size: 0x8]// 0x75c9947080
	FName Name;//[Offset: 0x48, Size: 0x8]// 0x75c994f2f0
	byte Type;//[Offset: 0x50, Size: 0x1]// 0x75c9947100

--------------------------------
Class: SkillActiveRepData
	int SkillUID;//[Offset: 0x0, Size: 0x4]// 0x75c9950320
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x75c9948400

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]// 0x7611e45710
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]// 0x7611e45690
	int SkillUID;//[Offset: 0x18, Size: 0x4]// 0x7611e45620
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]// 0x7611e455b0
	bool flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611e45530
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x7611e454b0
	byte HitSurfaceType;//[Offset: 0x22, Size: 0x1]// 0x7611e45430
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]// 0x7611e453b0

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]// 0x75c9947680
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]// 0x75c9947700
	int SkillID;//[Offset: 0x18, Size: 0x4]// 0x75c994f9f0
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]// 0x75c994fa60
	byte HitSurfaceType;//[Offset: 0x20, Size: 0x1]// 0x75c9947780
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]// 0x75c9947800

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]// 0x7611cdde10
	int Seed;//[Offset: 0x4, Size: 0x4]// 0x7611cddda0

--------------------------------
Class: SkillUIRegistRecord
	FString SkillClassName;//[Offset: 0x0, Size: 0x10]// 0x75c994f0c0
	SoftObjectPath objPath;//[Offset: 0x10, Size: 0x18]// 0x75c9946e80

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75c9948880
	FName SkillTag;//[Offset: 0x8, Size: 0x8]// 0x75c9950860
	enum SkillType;//[Offset: 0x10, Size: 0x1]// 0x75c9948980
	float CDRecoveryScale;//[Offset: 0x14, Size: 0x4]// 0x75c99508d0
	float SkillRuntimeScale;//[Offset: 0x18, Size: 0x4]// 0x75c9950940

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam syncParam;//[Offset: 0x0, Size: 0x2]// 0x75c9948200
	int SkillUID;//[Offset: 0x4, Size: 0x4]// 0x75c99502b0
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c9948280
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x10, Size: 0x10]// 0x75c9948380

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x75c9948100
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x75c9948180

--------------------------------
Class: NewbieGuideUIInfo
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x0, Size: 0x10]// 0x7612024ec0
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x10, Size: 0x28]// 0x7612024e40
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x7612024dc0
	FString MountName;//[Offset: 0x40, Size: 0x10]// 0x7612024d50
	FString MountOuterName;//[Offset: 0x50, Size: 0x10]// 0x7612024ce0
	AnchorData LayoutData;//[Offset: 0x60, Size: 0x28]// 0x761200ce20
	FName LogicManagerNames;//[Offset: 0x88, Size: 0x8]// 0x761200cdb0
	class UAEUserWidget* WidgetClass2;//[Offset: 0x90, Size: 0x28]// 0x761200cd30
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]// 0x761200ccb0
	int ZOrder;//[Offset: 0xbc, Size: 0x4]// 0x761200cc40
	Widget* UIWidget;//[Offset: 0xc0, Size: 0x8]// 0x761200cbc0
	class Object* UIWidgetClass;//[Offset: 0xc8, Size: 0x8]// 0x761200cb40

--------------------------------
Class: NewbieGuideModeSettings
	FString[] SubModeIDArray;//[Offset: 0x0, Size: 0x10]// 0x761200c8b0
	enum[] ModeTypeArray;//[Offset: 0x10, Size: 0x10]// 0x761200c730
	FString[] ModeUIArray;//[Offset: 0x20, Size: 0x10]// 0x761200c640

--------------------------------
Class: NewbieGuideItemObject.Object
	NewbieGuideItem NewbieGuideItem;//[Offset: 0x28, Size: 0xb0]// 0x75a844a980

--------------------------------
Class: ZombieModeGuideInfo
	bool isLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76120270d0
	bool isMonsterWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7612027050
	bool isBossComing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x7612026fd0
	bool isFortressCloseWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]// 0x7612026f50
	bool isFortressOpenWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7612026ed0

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x6097158

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]// 0x75a7944400
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x75a7944480
	int ZOrder;//[Offset: 0x64, Size: 0x4]// 0x75a793cfc0
	bool bAntiAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]// 0x75a7944500
	void SetZOrder(int InZOrder);// 0x6097cc4
	void SetSize(Vector2D InSize);// 0x6097c4c
	void SetPosition(Vector2D InPosition);// 0x6097bd4
	void SetOffsets(Margin InOffset);// 0x6097b58
	void SetMinimum(Vector2D InMinimumAnchors);// 0x6097ae0
	void SetMaximum(Vector2D InMaximumAnchors);// 0x6097a68
	void SetLayout(out const AnchorData InLayoutData);// 0x60979d8
	void SetAutoSize(bool InbAutoSize);// 0x6097954
	void SetAnchors(Anchors InAnchors);// 0x60978d8
	void SetAlignment(Vector2D InAlignment);// 0x6097860
	int GetZOrder();// 0x609782c
	Vector2D GetSize();// 0x60977f8
	Vector2D GetPosition();// 0x60977c4
	Margin GetOffsets();// 0x609778c
	AnchorData GetLayout();// 0x6097738
	bool GetAutoSize();// 0x6097700
	Anchors GetAnchors();// 0x60976c8
	Vector2D GetAlignment();// 0x6097694

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x4721c64
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x4721b7c
	void RPC_GetClientTimeRespond(int Index, int64 RealTime, int64 MonotonicTime, int64 MonotonicRawTime, int64 BootTime, int64 CustomTime);// 0x472199c
	void RPC_GetClientTimeRequest(int Index, int64 ServerTime);// 0x47218ac
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x47217bc
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x472170c
	void ReportDebugInfo(int RporetedId);// 0x472165c
	void OnServerAboutToReconnect();// 0x4721648
	void GetClientTimeInterval();// 0x4721634
	void CheckTimeLine();// 0x4721620

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75a8585980
	float TimeStartDelay;//[Offset: 0x11c, Size: 0x4]// 0x75a859e8e0
	float SyncInterval;//[Offset: 0x120, Size: 0x4]// 0x75a859e950
	bool bPunishSysTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]// 0x75a8585a00
	float DifSysTimeBad;//[Offset: 0x128, Size: 0x4]// 0x75a859e9c0
	float SysTimeCompareSingleThres;//[Offset: 0x12c, Size: 0x4]// 0x75a859ea30
	float SysTimeCompareAccThres;//[Offset: 0x130, Size: 0x4]// 0x75a859eaa0
	float SysTimeClientBadAccThres;//[Offset: 0x134, Size: 0x4]// 0x75a859eb10
	uint32 ServerPhase;//[Offset: 0x368, Size: 0x4]// 0x75a859eb80
	void RPC_SrvSyncTimeLine(byte InIndex, uint16 InSrvInf, TwgClientInfo InClientTime);// 0x4722c14
	void RPC_ClientSyncTimeLine(byte InIndex, uint16 InSrvInf);// 0x4722b54
	void PRC_SendBadSysTime(double LastTime, double CurTime, float TimeGap);// 0x4722a2c
	void OnTimeInspectorColdMove_Vehicle();// 0x4722a18
	void OnTimeInspectorColdMove_Shoot();// 0x4722a04
	void OnTimeInspectorColdMove_Own();// 0x47229f0
	void OnServerAboutToReconnect();// 0x47229dc
	void OnRep_ServerPhase();// 0x47229c8
	void ClientCheckTime();// 0x47229b4
	void CheckTimeLine();// 0x47229a0

--------------------------------
Class: TwgClientInfo

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	int ShootVerifyFailedCount;//[Offset: 0x118, Size: 0x4]// 0x75a83f9160
	bool bRepShouldUseNewBulletUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]// 0x75a83d7200
	int LogLimitAimInfo;//[Offset: 0x220, Size: 0x4]// 0x75a83f91d0
	int DistanceIgnoreCameraTraceLine;//[Offset: 0x224, Size: 0x4]// 0x75a83f9240
	VerifySwitch VsHitDetail;//[Offset: 0x228, Size: 0xc]// 0x75a83d7280
	VerifySwitch VsRelMoveFailed;//[Offset: 0x234, Size: 0xc]// 0x75a83d7300
	VerifySwitch VsNoHitDetail;//[Offset: 0x240, Size: 0xc]// 0x75a83d7380
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x24c, Size: 0xc]// 0x75a83d7400
	VerifySwitch VsFakeTraceMissMatchCb;//[Offset: 0x258, Size: 0xc]// 0x75a83d7480
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x264, Size: 0xc]// 0x75a83d7500
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x270, Size: 0xc]// 0x75a83d7580
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x27c, Size: 0xc]// 0x75a83d7600
	VerifySwitch VsBulletDirFailed;//[Offset: 0x288, Size: 0xc]// 0x75a83d7680
	VerifySwitch VsBulletBornFailed;//[Offset: 0x294, Size: 0xc]// 0x75a83d7700
	VerifySwitch VsBoneScale;//[Offset: 0x2a0, Size: 0xc]// 0x75a83d7780
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x2ac, Size: 0xc]// 0x75a83d7800
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x2b8, Size: 0xc]// 0x75a83d7880
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x2c4, Size: 0xc]// 0x75a83d7900
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x2d0, Size: 0xc]// 0x75a83d7980
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x2dc, Size: 0xc]// 0x75a83d7a00
	VerifySwitch VsGunPosError;//[Offset: 0x2e8, Size: 0xc]// 0x75a83d7a80
	VerifySwitch VsProneHigh;//[Offset: 0x2f4, Size: 0xc]// 0x75a83d7b00
	VerifySwitch VsProneMiss;//[Offset: 0x300, Size: 0xc]// 0x75a83d7b80
	VerifySwitch VsBoneLen01;//[Offset: 0x30c, Size: 0xc]// 0x75a83d7c00
	VerifySwitch VsBoneLen02;//[Offset: 0x318, Size: 0xc]// 0x75a83d7c80
	VerifySwitch VsBoneLen03;//[Offset: 0x324, Size: 0xc]// 0x75a83d7d80
	VerifySwitch VsParaHRaw;//[Offset: 0x330, Size: 0xc]// 0x75a83d7e00
	VerifySwitch VsParaHConv;//[Offset: 0x33c, Size: 0xc]// 0x75a83d7e80
	VerifySwitch VsParaZRaw;//[Offset: 0x348, Size: 0xc]// 0x75a83d7f00
	VerifySwitch VsParaZConv;//[Offset: 0x354, Size: 0xc]// 0x75a83d7f80
	VerifySwitch VsStartFireWeaponOwner;//[Offset: 0x360, Size: 0xc]// 0x75a83d8000
	VerifySwitch VsStartFireCharacterOwner;//[Offset: 0x36c, Size: 0xc]// 0x75a83d8080
	VerifySwitch VsBoneLen04;//[Offset: 0x378, Size: 0xc]// 0x75a83d8100
	VerifySwitch VsFlyAimMiss;//[Offset: 0x384, Size: 0xc]// 0x75a83d8180
	VerifySwitch VsRpgMuzzleBorn;//[Offset: 0x390, Size: 0xc]// 0x75a83d8200
	VerifySwitch VsBackTraceExceedded;//[Offset: 0x39c, Size: 0xc]// 0x75a83d8280
	VerifySwitch VsBackTraceBad;//[Offset: 0x3a8, Size: 0xc]// 0x75a83d8300
	VerifySwitch VsKickBackBad;//[Offset: 0x3b4, Size: 0xc]// 0x75a83d8380
	VerifySwitch VsQuickFollowHit;//[Offset: 0x3c0, Size: 0xc]// 0x75a83d8400
	VerifySwitch VsFlyAimTraceShoot;//[Offset: 0x3cc, Size: 0xc]// 0x75a83d8480
	VerifySwitch VsScattergunLine;//[Offset: 0x3d8, Size: 0xc]// 0x75a83d8500
	VerifySwitch VsClipOverflowed;//[Offset: 0x3e4, Size: 0xc]// 0x75a83d8580
	VerifySwitch VsPhaseTimeNoSync;//[Offset: 0x3f0, Size: 0xc]// 0x75a83d8600
	VerifySwitch VsPhaseTimeBad;//[Offset: 0x3fc, Size: 0xc]// 0x75a83d8680
	VerifySwitch VsCameraLineDistance;//[Offset: 0x408, Size: 0xc]// 0x75a83d8700
	VerifySwitch VsCameraPawnDiff;//[Offset: 0x414, Size: 0xc]// 0x75a83d8780
	VerifySwitch VsBackTraceCalcFailed;//[Offset: 0x420, Size: 0xc]// 0x75a83d8800
	VerifySwitch VsBackTraceCalcAngelSeem;//[Offset: 0x42c, Size: 0xc]// 0x75a83d8880
	VerifySwitch VsBackTraceCameraMatch;//[Offset: 0x438, Size: 0xc]// 0x75a83d8900
	VerifySwitch VsHitDataControllerMissMatch;//[Offset: 0x444, Size: 0xc]// 0x75a83d8980
	VerifySwitch VsMoveS3VerifyLost;//[Offset: 0x450, Size: 0xc]// 0x75a83d8a00
	VerifySwitch VsBackwardRange;//[Offset: 0x45c, Size: 0xc]// 0x75a83d8a80
	VerifySwitch VsParachuteVictimDistance;//[Offset: 0x4b0, Size: 0xc]// 0x75a83d8b00
	VerifySwitch VsFallingHeight;//[Offset: 0x4bc, Size: 0xc]// 0x75a83d8b80
	VerifySwitch VsFallingHeight15;//[Offset: 0x4c8, Size: 0xc]// 0x75a83d8c00
	VerifySwitch VsFallingHeight3;//[Offset: 0x4d4, Size: 0xc]// 0x75a83d8c80
	VerifySwitch VsFallingHeight5;//[Offset: 0x4e0, Size: 0xc]// 0x75a83d8d00
	VerifySwitch VsMuzzleRangeCirclePure;//[Offset: 0x4ec, Size: 0xc]// 0x75a83d8d80
	VerifySwitch VsTraceMiss;//[Offset: 0x4f8, Size: 0xc]// 0x75a83d8e00
	VerifySwitch VsDistanceMiss;//[Offset: 0x504, Size: 0xc]// 0x75a83d8e80
	VerifySwitch VsMoveTimeExStampError;//[Offset: 0x510, Size: 0xc]// 0x75a83d8f00
	VerifySwitch VsShootTimeOSIStampError;//[Offset: 0x51c, Size: 0xc]// 0x75a83d8f80
	VerifySwitch VsShootTimeOSIStampErrorReal;//[Offset: 0x528, Size: 0xc]// 0x75a83d9000
	VerifySwitch VsShootTimeOverAcc;//[Offset: 0x534, Size: 0xc]// 0x75a83d9080
	VerifySwitch VsFallingBadCalc;//[Offset: 0x540, Size: 0xc]// 0x75a83d9100
	VerifySwitch VsMuzzleRangeCircleVeh;//[Offset: 0x54c, Size: 0xc]// 0x75a83d9180
	VerifySwitch VsFallingMonitor;//[Offset: 0x558, Size: 0xc]// 0x75a83d9200
	VerifySwitch VsBulletSize;//[Offset: 0x56c, Size: 0xc]// 0x75a83d9280
	VerifySwitch VsBadFallWithDist;//[Offset: 0x578, Size: 0xc]// 0x75a83d9300
	VerifySwitch VsBadFallWithNoStuck;//[Offset: 0x584, Size: 0xc]// 0x75a83d9380
	VerifySwitch VsBadFlyDistance;//[Offset: 0x590, Size: 0xc]// 0x75a83d9400
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x5a0, Size: 0xc]// 0x75a83d9480
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x5ac, Size: 0xc]// 0x75a83d9500
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x5b8, Size: 0xc]// 0x75a83d9580
	VerifySwitch VsTestSwitch;//[Offset: 0x5c4, Size: 0xc]// 0x75a83d9600
	VerifySwitch VsTestSwitchNew;//[Offset: 0x5d0, Size: 0xc]// 0x75a83d9680
	VerifySwitch ClientTimeAccCheck;//[Offset: 0x5dc, Size: 0xc]// 0x75a83d9700
	VerifySwitch ClientPostionCheck;//[Offset: 0x5e8, Size: 0xc]// 0x75a83d9780
	VerifySwitch VsServerMoveLost;//[Offset: 0x5f4, Size: 0xc]// 0x75a83d9800
	VerifySwitch VsBadCtime_Cl;//[Offset: 0x600, Size: 0xc]// 0x75a83d9880
	VerifySwitch VsBadCtime_Sys;//[Offset: 0x60c, Size: 0xc]// 0x75a83d9900
	VerifySwitch VsBadCtime_Csl;//[Offset: 0x618, Size: 0xc]// 0x75a83d9980
	<enum,int> ReportPolicyThres;//[Offset: 0x628, Size: 0x50]// 0x75a8410fc0
	int MaxShootPointPassWall;//[Offset: 0x678, Size: 0x4]// 0x75a83f9320
	int MaxMuzzleHeightTime;//[Offset: 0x67c, Size: 0x4]// 0x75a83f9390
	VerifySwitch VsBulletVictimClientPassWall;//[Offset: 0x680, Size: 0xc]// 0x75a83d9b00
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x68c, Size: 0x4]// 0x75a83f9400
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x690, Size: 0x4]// 0x75a83f9470
	int MaxAllowVehicleAccTime;//[Offset: 0x694, Size: 0x4]// 0x75a83f94e0
	int MaxAllowVehicleAccTime1;//[Offset: 0x698, Size: 0x4]// 0x75a83f9550
	int MaxAllowVehicleAccTime2;//[Offset: 0x69c, Size: 0x4]// 0x75a83f95c0
	int MaxShooterDataNumErrorCnt;//[Offset: 0x6a0, Size: 0x4]// 0x75a83f9630
	VerifySwitch VsBoneInfo;//[Offset: 0x6a4, Size: 0xc]// 0x75a83d9b80
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x6b0, Size: 0xc]// 0x75a83d9c00
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x6bc, Size: 0xc]// 0x75a83d9c80
	VerifySwitch VsJumpMaxHeight3;//[Offset: 0x6c8, Size: 0xc]// 0x75a83d9d00
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x6d4, Size: 0xc]// 0x75a83d9d80
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x6e0, Size: 0xc]// 0x75a83d9e00
	VerifySwitch VsTimeLineBlock;//[Offset: 0x6ec, Size: 0xc]// 0x75a83d9e80
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x6f8, Size: 0xc]// 0x75a83d9f00
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x704, Size: 0xc]// 0x75a83d9f80
	VerifySwitch VsSysTimeRateCheckConv;//[Offset: 0x710, Size: 0xc]// 0x75a83da000
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x71c, Size: 0xc]// 0x75a83da080
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x728, Size: 0xc]// 0x75a83da100
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x734, Size: 0xc]// 0x75a83da180
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x740, Size: 0xc]// 0x75a83da200
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x74c, Size: 0xc]// 0x75a83da280
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x758, Size: 0xc]// 0x75a83da300
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x764, Size: 0xc]// 0x75a83da380
	int MaxMergedStrategy1;//[Offset: 0x770, Size: 0x4]// 0x75a83f96a0
	int MaxMergedStrategy2;//[Offset: 0x774, Size: 0x4]// 0x75a83f9710
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x778, Size: 0xc]// 0x75a83da400
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x784, Size: 0xc]// 0x75a83da480
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x790, Size: 0xc]// 0x75a83da500
	float ShootTimeServerNoConnSpanPunishTime;//[Offset: 0x79c, Size: 0x4]// 0x75a83f9780
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x7a0, Size: 0xc]// 0x75a83da580
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x7ac, Size: 0xc]// 0x75a83da600
	VerifySwitch ParachuteZVelocityCheck;//[Offset: 0x7b8, Size: 0xc]// 0x75a83da680
	float MaxFuelConsume;//[Offset: 0x7c4, Size: 0x4]// 0x75a83f97f0
	float CameraTraceLineDiff;//[Offset: 0x7c8, Size: 0x4]// 0x75a83f9860
	int VehicleZVelCheckStartCount;//[Offset: 0x868, Size: 0x4]// 0x75a83f98d0
	int VehicleZVelCheckMaxCount;//[Offset: 0x86c, Size: 0x4]// 0x75a83f9940
	float MinLocationDistanceSqr;//[Offset: 0x870, Size: 0x4]// 0x75a83f99b0
	void ShowDevDebugInfo(FString InStr);// 0x448b348
	void OnRep_UseNewBulletUpload();// 0x448b334
	void OnRep_ShootVerifyFailedCount();// 0x448b320
	void OnRecoverOnServer();// 0x448b30c
	void OnPreReconnectOnServer();// 0x448b2f8
	void BeginShowDebug();// 0x448b2e4

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 0x4]// 0x761222ec50
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x761222ebd0

--------------------------------
Class: CharaStatComp.ActorComponent.Object
	PackageStatusController PackStatusCon;//[Offset: 0x118, Size: 0x28]// 0x75b4e8cd00
	PackgeOrderStatusController PackOrderStatusCon;//[Offset: 0x140, Size: 0x18]// 0x75b4e8cd80
	PackDelayStatusController PackDelayStatusCon;//[Offset: 0x158, Size: 0x24]// 0x75b4e8ce00

--------------------------------
Class: PackageStatusController
	float ReportInterval;//[Offset: 0x1c, Size: 0x4]// 0x761216a5b0
	int ReportThres;//[Offset: 0x20, Size: 0x4]// 0x761216a540

--------------------------------
Class: PackgeOrderStatusController
	float ReportInterval;//[Offset: 0x14, Size: 0x4]// 0x761216a430

--------------------------------
Class: PackDelayStatusController
	float ReportInterval;//[Offset: 0x20, Size: 0x4]// 0x761216a320

--------------------------------
Class: ExceptionReportComponent.ActorComponent.Object
	FString TestHandlFunc(Object* Context);// 0x4312cb8
	void ServerExceptionReport(Object* Context, FString ExceptionType, FString ClientData, Object* HandleFunctionTarget);// 0x4312b30

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 0x24]// 0x76120003d0

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 0x4]// 0x7612000840
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 0x4]// 0x76120007d0
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 0x4]// 0x7612000760
	float CameraSwitchTime;//[Offset: 0x20, Size: 0x4]// 0x76120006f0

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 0x4]// 0x76120005e0
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 0xc]// 0x7612000560
	float SpringArmLength;//[Offset: 0x10, Size: 0x4]// 0x76120004f0

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 0x24]// 0x7612000ad0

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 0x4]// 0x7612000140
	float ViewPitchMax;//[Offset: 0x4, Size: 0x4]// 0x76120000d0

--------------------------------
Class: GameModeConfig
	int Gyroscope;//[Offset: 0x0, Size: 0x4]// 0x7611f8bc30
	int OpenMirrorMode;//[Offset: 0x4, Size: 0x4]// 0x7611f8bbc0
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611f8bb40
	bool OneKeyScoreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x7611f8bac0
	int SidewaysMode;//[Offset: 0xc, Size: 0x4]// 0x7611f8ba50
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611f8b9d0
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611f8b950

--------------------------------
Class: HitEffectConfig
	int HitEffectType;//[Offset: 0x0, Size: 0x4]// 0x7611ffe7a0
	int HitEffectColor;//[Offset: 0x4, Size: 0x4]// 0x7611ffe730

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x8, Size: 0x8]// 0x7611ffca70
	FName LastUseLogicSlot;//[Offset: 0x10, Size: 0x8]// 0x7611ffca00
	FName[] GrenadeLogicSlotList;//[Offset: 0x18, Size: 0x10]// 0x7611ffc910
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x28, Size: 0x10]// 0x7611ffc810

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0, Size: 0x8]// 0x7611f79550
	Vector Location;//[Offset: 0x8, Size: 0xc]// 0x7611f794d0
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]// 0x7611f79450

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0x1114, Size: 0x4]// 0x7611f2d9e0
	FString IniTeamLeaderName;//[Offset: 0x1118, Size: 0x10]// 0x7611f2d970
	enum LiveState;//[Offset: 0x1128, Size: 0x1]// 0x7611f2d810
	enum AILiveState;//[Offset: 0x1129, Size: 0x1]// 0x7611f2d6b0
	bool IsEvacuated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112a, Size: 0x1]// 0x7611f2d630
	delegate OnSelfPlayerStateLiveStateChangeDelegate;//[Offset: 0x1130, Size: 0x10]// 0x7611f2d5b0
	delegate OnMapMarkChange;//[Offset: 0x1150, Size: 0x10]// 0x7611f2d530
	delegate OnMapMultiMarkChange;//[Offset: 0x1160, Size: 0x10]// 0x7611f2d4b0
	delegate NoticeUIShowDamageEffect;//[Offset: 0x1170, Size: 0x10]// 0x7611f2d430
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0x1180, Size: 0x10]// 0x7611f2d210
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x1190, Size: 0x8]// 0x7611f2d190
	Actor* ThePlane;//[Offset: 0x1198, Size: 0x8]// 0x7611f2d110
	float PlayerHealth;//[Offset: 0x11a0, Size: 0x4]// 0x7611f2d0a0
	float PlayerHealthMax;//[Offset: 0x11a4, Size: 0x4]// 0x7611f2d030
	float PlayerTemperature;//[Offset: 0x11a8, Size: 0x4]// 0x7611f2cfc0
	float PlayerTemperatureMax;//[Offset: 0x11ac, Size: 0x4]// 0x7611f2cf50
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0x11b0, Size: 0x18]// 0x7611f2ced0
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0x11c8, Size: 0x18]// 0x7611f2ce50
	enum EUAVUseType;//[Offset: 0x11e0, Size: 0x1]// 0x7611f2cd50
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e1, Size: 0x1]// 0x7611f2ccd0
	enum RemoteControlPawnType;//[Offset: 0x11e2, Size: 0x1]// 0x7611f2cb70
	enum RemoteControlState;//[Offset: 0x11e3, Size: 0x1]// 0x7611f2ca10
	CharacterLocAndRot RemoteControlPawnLocAndRot;//[Offset: 0x11e4, Size: 0x18]// 0x7611f2c7f0
	bool bVoiceChangerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fc, Size: 0x1]// 0x7611f2c770
	enum eCurVehicleType;//[Offset: 0x11fd, Size: 0x1]// 0x7611f2c670
	int VehicleConfigID;//[Offset: 0x1200, Size: 0x4]// 0x7611f2c600
	enum EUAVCharacterMsgType;//[Offset: 0x1204, Size: 0x1]// 0x7611f2c500
	Vector PlayerDeadLocation;//[Offset: 0x1208, Size: 0xc]// 0x7611f2c480
	Vector PlayerBoxLocation;//[Offset: 0x1214, Size: 0xc]// 0x7611f2c400
	Vector MapMark;//[Offset: 0x1220, Size: 0xc]// 0x7611f2c380
	Vector MapMark3DLocation;//[Offset: 0x122c, Size: 0xc]// 0x7611f2c300
	Vector[] MapMultiMark;//[Offset: 0x1238, Size: 0x10]// 0x7611f2c200
	Vector4 MapMarkWorldLocation;//[Offset: 0x1250, Size: 0x10]// 0x7611f2c180
	float CanJumpPercent;//[Offset: 0x1260, Size: 0x4]// 0x7611f2c110
	float ForceJumpPercent;//[Offset: 0x1264, Size: 0x4]// 0x7611f2c0a0
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0x1268, Size: 0x10]// 0x7611f2bfa0
	delegate OnTeammatePlayerStateRefHasChanged;//[Offset: 0x1278, Size: 0x10]// 0x7611f2bf20
	bool bInWinePlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1288, Size: 0x1]// 0x7611f2bea0
	TimerHandle DelayFreshTeammateHandle;//[Offset: 0x1290, Size: 0x8]// 0x7611f2be20
	int PlayerLayerID;//[Offset: 0x1298, Size: 0x4]// 0x7611f2bdb0
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x12a0, Size: 0x18]// 0x7611f2b990
	int KillGoblinScore;//[Offset: 0x12b8, Size: 0x4]// 0x7611f2b920
	int HurtGoblinScore;//[Offset: 0x12bc, Size: 0x4]// 0x7611f2b8b0
	int DeleverTargetScore;//[Offset: 0x12c0, Size: 0x4]// 0x7611f2b840
	int NotMeetGoblinScore;//[Offset: 0x12c4, Size: 0x4]// 0x7611f2b7d0
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x12d0, Size: 0x10]// 0x7611f2b6d0
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x12e0, Size: 0x10]// 0x7611f2b5d0
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x12f0, Size: 0x10]// 0x7611f2b4d0
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x1300, Size: 0x10]// 0x7611f2b3d0
	MarkSyncData[] SyncMarkDispatchData_SelfSpectator;//[Offset: 0x1310, Size: 0x10]// 0x7611f2b2d0
	MarkSyncData[] PrevSyncMarkDispatchData_SelfSpectator;//[Offset: 0x1320, Size: 0x10]// 0x7611f2b1d0
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1330, Size: 0x10]// 0x7611f2b0d0
	int TripleKillFullTime;//[Offset: 0x1350, Size: 0x4]// 0x7611f2b060
	int TripleKillIntervalTime;//[Offset: 0x1354, Size: 0x4]// 0x7611f2aff0
	int QuadraKillIntervalTime;//[Offset: 0x1358, Size: 0x4]// 0x7611f2af80
	int PentaKillIntervalTime;//[Offset: 0x135c, Size: 0x4]// 0x7611f2af10
	int TotalKillRequireCount;//[Offset: 0x1360, Size: 0x4]// 0x7611f2aea0
	int SnipeHeadKillRequireDistance;//[Offset: 0x1364, Size: 0x4]// 0x7611f2ae30
	int TeamMatePlayerStateIndex;//[Offset: 0x1390, Size: 0x4]// 0x7611f2adc0
	int Breath;//[Offset: 0x1394, Size: 0x4]// 0x7611f2ad50
	DriveCarNotify DriveCarNotify;//[Offset: 0x1398, Size: 0x18]// 0x7611f2aa50
	float EnegyBuffStage1;//[Offset: 0x13b0, Size: 0x4]// 0x7611f2a9e0
	float EnegyBuffStage2;//[Offset: 0x13b4, Size: 0x4]// 0x7611f2a970
	float EnegyBuffStage3;//[Offset: 0x13b8, Size: 0x4]// 0x7611f2a900
	float EnegyBuffStage4;//[Offset: 0x13bc, Size: 0x4]// 0x7611f2a890
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x13c0, Size: 0x4]// 0x7611f2a820
	float CurEnegyBuff;//[Offset: 0x13c4, Size: 0x4]// 0x7611f2a7b0
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x13c8, Size: 0x4]// 0x7611f2a740
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x13cc, Size: 0x4]// 0x7611f2a6d0
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x13d0, Size: 0x4]// 0x7611f2a660
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x13d4, Size: 0x4]// 0x7611f2a5f0
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x13d8, Size: 0x4]// 0x7611f2a580
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x13dc, Size: 0x4]// 0x7611f2a510
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x13e0, Size: 0x4]// 0x7611f2a4a0
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x13e4, Size: 0x4]// 0x7611f2a430
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x13e8, Size: 0x10]// 0x7611f2a3b0
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x13f8, Size: 0x10]// 0x7611f2a330
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1409, Size: 0x1]// 0x7611f2a2b0
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1414, Size: 0x1]// 0x7611f2a230
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1415, Size: 0x1]// 0x7611f2a1b0
	int[] TeamMatesExitState;//[Offset: 0x1418, Size: 0x10]// 0x7611f2a0c0
	bool bHasEnterFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 0x1]// 0x7611f2a040
	bool bTeammateIsExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1429, Size: 0x1]// 0x7611f29fc0
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142a, Size: 0x1]// 0x7611f29f40
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142b, Size: 0x1]// 0x7611f29ec0
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142c, Size: 0x1]// 0x7611f29e40
	float InvisibleInMapAfterEscapedCD;//[Offset: 0x1430, Size: 0x4]// 0x7611f29dd0
	bool bIsvisibleInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 0x1]// 0x7611f29d50
	uint32 LastInstigatorEnemyKey;//[Offset: 0x143c, Size: 0x4]// 0x7611f29ce0
	bool ExceptionDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1454, Size: 0x1]// 0x7611f29c60
	PlayerLevel PvePlayerLevel;//[Offset: 0x1458, Size: 0x18]// 0x7611f298a0
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x1470, Size: 0x10]// 0x7611f297a0
	int MonsterTreasureBoxGetNum;//[Offset: 0x1480, Size: 0x4]// 0x7611f29730
	int MonsterTreasureBoxDefendNum;//[Offset: 0x1484, Size: 0x4]// 0x7611f296c0
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x1488, Size: 0x10]// 0x7611f295c0
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x1498, Size: 0x10]// 0x7611f294c0
	int MaxDecalCount;//[Offset: 0x14c8, Size: 0x4]// 0x7611f29450
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x14d0, Size: 0x10]// 0x7611f29350
	float SignalHP;//[Offset: 0x1540, Size: 0x4]// 0x7611f292e0
	delegate OnSignalHPChange;//[Offset: 0x1548, Size: 0x10]// 0x7611f29260
	int[] PlayerAchievementList;//[Offset: 0x1558, Size: 0x10]// 0x7611f29170
	delegate OnCompleteAchievementTask;//[Offset: 0x1568, Size: 0x10]// 0x7611f290f0
	delegate OnPlayerAchievementListChangeDelegate;//[Offset: 0x1578, Size: 0x10]// 0x7611f29070
	float SignalHPRemainingTime;//[Offset: 0x1588, Size: 0x4]// 0x7611f29000
	bool bHasGetRedEnvelopeByWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f4, Size: 0x1]// 0x7611f28f80
	int RemainingRevivalTime;//[Offset: 0x15f8, Size: 0x4]// 0x7611f28f10
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fc, Size: 0x1]// 0x7611f28e90
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fd, Size: 0x1]// 0x7611f28e10
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fe, Size: 0x1]// 0x7611f28d90
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ff, Size: 0x1]// 0x7611f28d10
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1600, Size: 0x1]// 0x7611f28c90
	int SelfRevivalCountdown;//[Offset: 0x1604, Size: 0x4]// 0x7611f28c20
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1608, Size: 0x1]// 0x7611f28ba0
	bool bOpenRecvQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1609, Size: 0x1]// 0x7611f28b20
	int64 RevivalCardCreateTime;//[Offset: 0x1610, Size: 0x8]// 0x7611f28ab0
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1618, Size: 0x10]// 0x7611f28a30
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x1628, Size: 0x10]// 0x7611f289b0
	bool bCanRevivalSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1638, Size: 0x1]// 0x7611f28930
	delegate CanRevivalSelfDelegate;//[Offset: 0x1640, Size: 0x10]// 0x7611f288b0
	Vector LastVehicleLocation;//[Offset: 0x167c, Size: 0xc]// 0x7611f28830
	HunterTaskTeamMgr* HunterTeamDataMgr;//[Offset: 0x1690, Size: 0x8]// 0x7611f287b0
	STExtraPlayerState*[] AssitPlayersCurKill;//[Offset: 0x1698, Size: 0x10]// 0x7611f286b0
	int[] HuntTeamIDList;//[Offset: 0x16a8, Size: 0x10]// 0x7611f285c0
	int[] HasShowRecords;//[Offset: 0x16b8, Size: 0x10]// 0x7611f284d0
	<int> TeamCDSet;//[Offset: 0x16c8, Size: 0x50]// 0x7611f283c0
	int HuntedTipMsgID;//[Offset: 0x171c, Size: 0x4]// 0x7611f28350
	float TipCooldown;//[Offset: 0x1720, Size: 0x4]// 0x7611f282e0
	FName[] BuffNameListCanBeSync;//[Offset: 0x1728, Size: 0x10]// 0x7611f281f0
	FName[] SyncToClientBuffNameList;//[Offset: 0x1738, Size: 0x10]// 0x7611f28100
	PlayerRescueingInfo RescueingInfo;//[Offset: 0x1748, Size: 0x10]// 0x7611f27d90
	<uint64,int> TeammateIconInstanceMap;//[Offset: 0x1758, Size: 0x50]// 0x7611f27c00
	PopKartRaceInfo[] PopKartRaceList;//[Offset: 0x17a8, Size: 0x10]// 0x7611f27b00
	bool bInitPopKartMapData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b8, Size: 0x1]// 0x7611f27a80
	bool IsExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b9, Size: 0x1]// 0x7611f27a00
	int GunMasterMediaPlayCounterReplay;//[Offset: 0x17bc, Size: 0x4]// 0x7611f27990
	RenderQualityCVarsToSync RenderQualityCVarsToSync;//[Offset: 0x17c0, Size: 0x8]// 0x7611f27790
	byte CurResultType;//[Offset: 0x17c8, Size: 0x1]// 0x7611f276b0
	SegmentChoosableSituation[] SegmentsList;//[Offset: 0x17d0, Size: 0x10]// 0x7611f27420
	byte LeaderChoosingSegmentID;//[Offset: 0x17e0, Size: 0x1]// 0x7611f273a0
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e1, Size: 0x1]// 0x7611f27320
	bool bShowTeammatePositionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e2, Size: 0x1]// 0x7611f272a0
	int InspectorTipsID;//[Offset: 0x17e4, Size: 0x4]// 0x7611f27230
	ActorComponent* LevelLoadAndUnloadComponent;//[Offset: 0x17e8, Size: 0x8]// 0x7611f271b0
	NetAlienationDataComponent* NetAlienationData;//[Offset: 0x17f0, Size: 0x8]// 0x7611f27130
	int[] TakeSpecialItemID;//[Offset: 0x17f8, Size: 0x10]// 0x7611f27040
	void UpdateTeamPlayerLevel();// 0x46998dc
	void UpdateMarkEvent();// 0x46998c8
	void ShowGodzillaMapMark(bool bShow);// 0xffffff8a17adf2b0
	bool ShouldShowTrumpMark();// 0x4699890
	void SetShowTeammatePositionUI(bool bShow);// 0x469980c
	void SetRescueingInfo(bool bStart, bool bSelf, float fTotalTime, float fReduce);// 0x46996c0
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x4699570
	void SetPlayerGiveUp(bool InGiveUp);// 0x46994ec
	void SetHasEnterFighting(bool bInHasEnterFighting);// 0x4699468
	void SetForceSyncTeammateData(bool IsForCE);// 0x46993e4
	void ServerUpdatePlayerLevel();// 0x4699384
	void ServerLeaderChoosingSegmentID(int ChoosedSegmentID);// 0x46992d4
	void ServerChooseSegmentID(int ChoosedSegmentID);// 0x4699224
	void RPC_TeammateNoticeUIDamageEffect();// 0x4699208
	void RPC_ClientHitFeedbackInfo(enum hittype, Vector Location);// 0x469910c
	void RespondToPawnRescueingStatusChange(Character* RescuedPawn, Character* Rescuer, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper, float InReduceTime);// 0x4698f50
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* OwnerPawn, STExtraBaseCharacter* RescuedPawn);// 0x4698e9c
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* OwnerPawn, STExtraBaseCharacter* CarriedPawn, int SwitcherIndex);// 0x4698dac
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x4698cb0
	void Replay_QuickSignComp_ClientReceiveMsg(const QuickSignMsg MsgItem);// 0x4698bd8
	void Replay_QuickSignComp_ClientDelMsg(FString MsgID);// 0x4698b4c
	void RemoveAllTeammateIcon();// 0x4698b38
	void RefreshRevivalState();// 0x4698b24
	void RefreshFollowMark();// 0x4698b10
	bool PopKartFinish(int Group);// 0x4698a80
	int PlayersCountOnMyPlane();// 0x4698a4c
	void OnTeammatePlayerStateChanged__DelegateSignature();// 0xffffff8a17adf2b0
	void OnSelfPlayerStateLiveStateChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0xffffff8a17adf2b0
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0xffffff8a17adf2b0
	void OnRep_VoiceChangerOpen();// 0x4698a38
	void OnRep_VisualFieldInfo();// 0x4698a24
	void OnRep_UseVoiceChange();// 0x4698a08
	void OnRep_TopSegmentTimes();// 0x46989ec
	void OnRep_TeamMatePlayerStateList();// 0x46989d0
	void OnRep_TeamMatePlayerStateIndex();// 0x46989bc
	void OnRep_TeammateIsExit();// 0x46989a8
	void OnRep_SignalHP();// 0x4698994
	void OnRep_SegmentsList();// 0x4698980
	void OnRep_RobotVoiceMemberId();// 0x4698964
	void OnRep_RescueingInfo();// 0x4698950
	void OnRep_RemainingRevivalTime();// 0x469893c
	void OnRep_RankNotify();// 0x4698928
	void OnRep_PvePlayerLevel();// 0x4698914
	void OnRep_PopKartPathMap();// 0x4698900
	void OnRep_PlayerReconnectEvent();// 0x46988ec
	void OnRep_PlayerName();// 0x46988d0
	void OnRep_PlayerLostConnectionEvent();// 0x46988bc
	void OnRep_PlayerLiveState();// 0x46988a0
	void OnRep_PlayerKillsChange();// 0x4698884
	void OnRep_PlayerIsFollowing();// 0x4698870
	void OnRep_PlayerHasEnterFighting();// 0x469885c
	void OnRep_PlayerGiveUp();// 0x4698840
	void OnRep_PlayerExitGameEvent();// 0x469882c
	void OnRep_PlayerCurWeaponRecord();// 0x4698810
	void OnRep_PlayerAchievementList();// 0x46987fc
	void OnRep_Plane();// 0x46987e8
	void OnRep_MarkSyncData();// 0x46987d4
	void OnRep_MarkSelfSyncData();// 0x46987c0
	void OnRep_MarkSelfSpectatorSyncData();// 0x46987ac
	void OnRep_MapMarkWorldLocation();// 0x4698798
	void OnRep_MapMarkNotify();// 0x4698784
	void OnRep_MapAirlineLocation();// 0x4698770
	void OnRep_LeaderChoosingSegmentID();// 0x469875c
	void OnRep_LastVehicleLocation();// 0x4698748
	void OnRep_IsVisibleInMap();// 0x4698734
	void OnRep_IsIDCardCaptured();// 0x4698720
	void OnRep_IsEvacuated();// 0x469870c
	void OnRep_imprint_info();// 0x46986f0
	void OnRep_HPChanged();// 0x46986dc
	void OnRep_HasRevivalSign();// 0x46986c0
	void OnRep_HasEscaped();// 0x46986ac
	void OnRep_HasBeenHunted();// 0x4698698
	void OnRep_EUAVUseType();// 0x469867c
	void OnRep_ChangeRevivalState();// 0x4698660
	void OnRep_ChangeInRevivingState();// 0x469864c
	void OnRep_BuffNameList();// 0x4698638
	void OnRep_bShowTeammatePositionUI();// 0x469861c
	void OnRep_BreathChanged();// 0x4698608
	void OnRep_BPS();// 0x46985f4
	void OnRep_bCanRevivalSelf();// 0x46985e0
	void OnRep_Assists();// 0x46985c4
	void OnRemoveBuff(out const FName BuffName);// 0x4698538
	void OnPlayerSendUIStyleTLog(uint32 InPlayerKey, FString Reason);// 0x4698474
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnPlayerAchievementListChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnNotifyHuntedTarget(int HuntTeamID);// 0x46983f0
	void OnNoticeUIShowDamageEffect__DelegateSignature(FString PUID);// 0xffffff8a17adf2b0
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0xffffff8a17adf2b0
	void OnMapMarkChange__DelegateSignature(Vector MapMark);// 0xffffff8a17adf2b0
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float CurrentHP, float ratioHP);// 0xffffff8a17adf2b0
	void OnCurrentLiveStateChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnCompleteAchievementTask__DelegateSignature(STExtraPlayerState* PlayerState, int Achievement);// 0xffffff8a17adf2b0
	void OnChangeHuntTeam(int HuntTeamID, bool bRemove);// 0x4698330
	void OnAddBuff(out const FName BuffName);// 0x46982a4
	void On_RepRenderQualityCVarsToSync();// 0x4698290
	void NotifyTheOtherTeams();// 0x469827c
	void NotifyTeammates();// 0x4698268
	void ModifyMapMarkParticleActor();// 0x469824c
	void LevelLoadAndUnload(int Index);// 0x46981d0
	bool IsTeammateWithUID(uint64 InUID);// 0x4698140
	bool IsTeammateWithName(FString InPlayerName);// 0x46980a8
	bool IsTaskExist(int TaskID);// 0x4698018
	bool IsSinglePlayer();// 0x4697fe0
	bool IsRobotMember(int memberID);// 0x4697f48
	bool IsHaveExistingTask();// 0x4697f10
	bool IsExited();// 0x4697ed8
	bool IsCanBeWatch();// 0x4697e98
	bool IsAlive();// 0x4697e58
	bool InPopKartRace(int Group);// 0x4697dc8
	void InitPopKartMapData();// 0x4697dac
	void HuntTipCoolDownCallback();// 0x4697d98
	uint32 GetUserIDByMemberID(int memberID);// 0x4697d04
	FString[] GetTeamMateUIDList();// 0x4697c20
	int GetTeammateRevivalCount();// 0x4697bec
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x4697b04
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x4697a78
	int GetTeammateIndexAnyRole();// 0x4697a44
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x46979b8
	int GetTeammateCount();// 0x4697984
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x46978f0
	STExtraPlayerState* GetTeammateByIndex(int InTeammateIndex);// 0x4697864
	bool GetTeammateBeKilledByPlayerName(FString KilledName, bool ExcludeSelf);// 0x4697784
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x469772c
	static void GetPopKartGroupByState(int State, out int RaceGroup, out int NodeIndex, out int Status);// 0x4697580
	static int GetPopKartAreaStateValue(int RaceGroup, int NodeIndex, int Status);// 0x4697480
	float GetPlayerTemperature();// 0x469744c
	int GetPlayerTeamIndex();// 0x4697418
	FString GetPlayerStateDetailInfo();// 0x4697398
	float GetPlayerMaxTemperature();// 0x4697364
	float GetPlayerMaxHealth();// 0x4697330
	float GetPlayerHealth();// 0x46972fc
	bool GetPlayerEvacuated();// 0x46972c4
	int[] GetPlayerCurWearIDList(const bool IncludeHiddenAvatar);// 0x46971ec
	ItemDefineID[] GetPlayerCurWearDefineIDList(const bool IncludeHiddenAvatar);// 0x4697114
	Rotator GetPlayerCurRot();// 0x46970dc
	Vector GetPlayerCurLoc();// 0x46970a4
	STExtraBaseCharacter* GetPlayerCharacter();// 0x4697070
	Actor* GetPlane();// 0x469703c
	float GetMaxEnegyBuff();// 0x4697008
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x4696f74
	int GetLevelLoadAndUnloadIndex();// 0x4696f40
	bool GetHasEnterFighting();// 0x4696f08
	float GetForceJumpPercent();// 0x4696eec
	float GetCanJumpPercent();// 0x4696ed0
	float GetBreathPercentage();// 0x4696e9c
	int GetBountyGold();// 0xffffff8a17adf2b0
	void GetAssitPlayersOfCurKill(out STExtraPlayerState*[] OutList);// 0x4696e08
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x4696cb4
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x4696ae8
	void ForceNotifyAlertUpdate();// 0x4696ad4
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x46969fc
	void FadeTeammatesMapMark();// 0x46969e8
	void DelayFreshTeammateIcon();// 0x46969d4
	void CreateHunterTeamDataMgrConditionly();// 0x46969c0
	bool ContainPopKartNode(int Group, int NodeIndex);// 0x46968f8
	void CompleteAchievementTask(int Achievement, bool IsNotifyOwnerClient);// 0x4696838
	void ClientRPC_CompleteAchievementTask(int Achievement);// 0x46967b4
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x469666c
	bool CheckPlayerCanReviveSelf();// 0x469662c
	void CheckIsInspector();// 0x4696610
	void ChangeFadeMapMarkDist(float NewDist);// 0x4696598
	bool CanSelfRevive();// 0x4696560
	bool CanRevivalTeammate();// 0x4696528
	void CanRevivalSelfDelegate__DelegateSignature(bool bCanRevivalSelf);// 0xffffff8a17adf2b0
	bool CanBeRevival();// 0x46964f0
	void CalculateSegmentRatio();// 0x46964dc
	byte CalculateEnegyStage();// 0x46964a8
	void BPCalculateKillMonterNum(int MonterLevel, int AddNum, int MonsterID, bool bHeadShot, int DamageType, int WeaponID);// 0xffffff8a17adf2b0
	void AddPopKartRaceNode(int Group, int NodeIndex);// 0x46963f4
	void AddPopKartBeginNode(out PopKartRaceInfo Info);// 0x469635c
	void AddEnegySafety(float AddVal);// 0x46962e0

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611f2d3b0
	STExtraBaseCharacter* Target;//[Offset: 0x8, Size: 0x8]// 0x7611f2d330

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 0xc]// 0x7611f2c990
	Rotator Rot;//[Offset: 0xc, Size: 0xc]// 0x7611f2c910

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 0x4]// 0x7611f2bd40
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x8, Size: 0x10]// 0x7611f2bab0

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]// 0x7611f2bcc0
	int LayerID;//[Offset: 0xc, Size: 0x4]// 0x7611f2bc50

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 0x1]// 0x7611f1baf0
	int TypeID;//[Offset: 0x4, Size: 0x4]// 0x7611f1ba80
	FString WidgetClassPath;//[Offset: 0x8, Size: 0x10]// 0x7611f1ba10
	Vector Location;//[Offset: 0x18, Size: 0xc]// 0x7611f1b990
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]// 0x7611f1b910
	int InstanceID;//[Offset: 0x30, Size: 0x4]// 0x7611f1b8a0
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x38, Size: 0x20]// 0x7611f1b530
	enum MapAdded;//[Offset: 0x58, Size: 0x1]// 0x7611f1b3d0
	enum SyncDataType;//[Offset: 0x59, Size: 0x1]// 0x7611f1b270
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]// 0x7611f1b1f0
	Property*[] DeltaProperties;//[Offset: 0x60, Size: 0x10]// 0x7611f1b0f0

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 0x4]// 0x7611f1b830
	int CustomState;//[Offset: 0x4, Size: 0x4]// 0x7611f1b7c0
	FString CustomString;//[Offset: 0x8, Size: 0x10]// 0x7611f1b750
	enum InWhichMap;//[Offset: 0x18, Size: 0x1]// 0x7611f1b650

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 0x1]// 0x7611f2ac70
	STExtraBaseCharacter* Character;//[Offset: 0x8, Size: 0x8]// 0x7611f2abf0
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x10, Size: 0x8]// 0x7611f2ab70

--------------------------------
Class: STExtraWheeledVehicle.STExtraBaseWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	bool UseWheelTerrainCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d20, Size: 0x1]// 0x75d0b47800
	bool UseWheelRestLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d21, Size: 0x1]// 0x75d0b47880
	bool UseWheelUpLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d22, Size: 0x1]// 0x75d0b47900
	Vector UseWheelUpLocExtraOffset;//[Offset: 0x1d24, Size: 0xc]// 0x75d0b47980
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x1d30, Size: 0x8]// 0x75d0b47a00
	float ExtraBoostFactor;//[Offset: 0x1d38, Size: 0x4]// 0x75a8129730
	STExtraVehicleMovementComponent4W* VehicleMovement4W;//[Offset: 0x1d40, Size: 0x8]// 0x75d0b47a80
	bool UsePrimitiveVelocityINnUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d48, Size: 0x1]// 0x75d0b47b00
	PopKartPassDoorAccelerate PopKartPassDoorAccelerate;//[Offset: 0x1d4c, Size: 0x10]// 0x75d0b47b80
	float PopKartPassDoorAccelerateValidTime;//[Offset: 0x1d5c, Size: 0x4]// 0x75a81297a0
	float VehicleCheckTLogTime;//[Offset: 0x1d60, Size: 0x4]// 0x75a8129810
	float VehicleVelocityThreshold;//[Offset: 0x1d64, Size: 0x4]// 0x75a8129880
	float PopKartAccelerateEffectElapseTime;//[Offset: 0x1d80, Size: 0x4]// 0x75a81298f0
	float PopKartAccelerateEffecTime;//[Offset: 0x1d84, Size: 0x4]// 0x75a8129960
	int PopKartAccelerateEffectTag;//[Offset: 0x1d88, Size: 0x4]// 0x75a81299d0
	float PopKartWheelDamageFallOff;//[Offset: 0x1d8c, Size: 0x4]// 0x75a8129a40
	int PopKartAccelerateTips;//[Offset: 0x1d90, Size: 0x4]// 0x75a8129ab0
	int CanNotPopKartPassDoorAccelerateTips;//[Offset: 0x1d94, Size: 0x4]// 0x75a8129b20
	float UsePopKartPassDoorAccelerateThreshold;//[Offset: 0x1d98, Size: 0x4]// 0x75a8129b90
	float UsePopKartPassDoorAccelerateThrottleThreshold;//[Offset: 0x1d9c, Size: 0x4]// 0x75a8129c00
	AkAudioEvent* Sfx_PopKartAccelerate;//[Offset: 0x1da0, Size: 0x8]// 0x75d0b47c00
	bool UseBoundCenterUnderTerrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da8, Size: 0x1]// 0x75d0b47c80
	bool OpenJumpHeightLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da9, Size: 0x1]// 0x75d0b47d00
	float JumpHeightThreshold;//[Offset: 0x1dac, Size: 0x4]// 0x75a8129c70
	bool OpenJumpHeightVelocityLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db0, Size: 0x1]// 0x75d0b47d80
	float JumpHeightLimitMaxVelocity;//[Offset: 0x1db4, Size: 0x4]// 0x75a8129ce0
	int DriverAniTimerRefWheelIndex;//[Offset: 0x1db8, Size: 0x4]// 0x75a8129d50
	Vector2D SteerAngelInputMap;//[Offset: 0x1dbc, Size: 0x8]// 0x75d0b47e00
	Vector2D SteerDriverAniTimerOutMap;//[Offset: 0x1dc4, Size: 0x8]// 0x75d0b47e80
	int VehileHeightLevel1;//[Offset: 0x1e20, Size: 0x4]// 0x75a8129dc0
	int VehileHeightLevel2;//[Offset: 0x1e24, Size: 0x4]// 0x75a8129e30
	int VehileHeightLevel3;//[Offset: 0x1e28, Size: 0x4]// 0x75a8129ea0
	void VehicleCheckTLogFunc();// 0x46e0ab8
	void ProcessPopKartCameraEffect(bool Enable, STExtraBaseCharacter* BC);// 0x46e09e8
	void PopKartJump(float UpSpeed);// 0x46e0964
	void PopKartAccelerate(float AcceleratePercent, float MaxSpeed, float minSpeed);// 0x46e086c
	void OnRep_PopKartAccelerateEffectTags();// 0x46e0850
	void OnPopKartPassDoorAccelerate();// 0x46e0834
	void OnEnablePopKartAccelerateEffect(float AccelerateEffecTime);// 0x46e07b0
	void OnDisablePopKartAccelerateEffect();// 0x46e0794
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse, bool SpawnByRegonActive);// 0x46e063c
	bool HasContact();// 0x46e0604
	float GetVehicleSpeed();// 0x46e05c8
	float GetVehicleSlip();// 0x46e058c
	Vector GetRotationInputDir();// 0x46e054c
	bool GetIsAllWheelsInAir();// 0x46e050c
	int GetCurrentGear(float minSpeed);// 0x46e0478
	Vector GetCheckUnderTerrainWheelTraceStart(STExtraVehicleMovementComponent4W* MovementComp, VehicleWheel* Wheel, int Index);// 0x46e0374
	float GetBoostFactor();// 0x46e0338
	void DrawDebugUnderTerrainPoint(const Transform VehicleTrans, const Vector[] WheelLoc, int UnderTerrainIdx);// 0x46e01e4
	void CustomComputeTireForce(VehicleWheel* Wheel, const float tireFriction, const float longSlip, const float latSlip, const float camber, const float wheelOmega, const float wheelRadius, const float recipWheelRadius, const float restTireLoad, const float normalisedTireLoad, const float tireLoad, const float Gravity, const float recipGravity, out float wheelTorque, out float tireLongForceMag, out float tireLatForceMag, out float tireAlignMoment);// 0x46dfd48
	void CreateVehicleCheckTLogTimer();// 0x46dfd2c
	bool CanUsePopKartPassDoorAccelerate();// 0x46dfcec
	void BroadcastClientVehicleWheelDestroyEffect();// 0x46dfcd0

--------------------------------
Class: STExtraBaseWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x1858, Size: 0x8]// 0x75d0b48780
	ParticleSystemComponent* DustPSC;//[Offset: 0x1860, Size: 0x8]// 0x75d0b48800
	ParticleSystemComponent*[] PSCs;//[Offset: 0x1880, Size: 0x10]// 0x75d0b48900
	<ParticleSystem*,VehicleWheelEffectWrapper> WheelEffectPool;//[Offset: 0x1890, Size: 0x50]// 0x75a80e1240
	bool bNeedPlayWheelEnterWaterEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1930, Size: 0x1]// 0x75d0b48a80
	float PlayEnterWaterEffectSpeed;//[Offset: 0x1934, Size: 0x4]// 0x75a812ac30
	ParticleSystem* WheelContactWaterEffect;//[Offset: 0x1938, Size: 0x28]// 0x75d0b48b00
	float WheelEffectUpdateInterval;//[Offset: 0x1960, Size: 0x4]// 0x75a812aca0
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1964, Size: 0x1]// 0x75d0b48b80
	float TickWheelEffectDistanceThresholdSquared;//[Offset: 0x1968, Size: 0x4]// 0x75a812ad10
	float WheelEffectLifeTime;//[Offset: 0x196c, Size: 0x4]// 0x75a812ad80
	float CheckWheelEffectPoolInterval;//[Offset: 0x1970, Size: 0x4]// 0x75a812adf0
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x1980, Size: 0x28]// 0x75d0b48c00
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x19a8, Size: 0x8]// 0x75d0b48c80
	Vector[] TrailOffsetArray;//[Offset: 0x19b0, Size: 0x10]// 0x75d0b48d80
	Vector[] OverrideTrailOffsetArray;//[Offset: 0x19c0, Size: 0x10]// 0x75d0b48e80
	bool bShouldUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d0, Size: 0x1]// 0x75d0b48f00
	bool ForceShowTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d2, Size: 0x1]// 0x75d0b48f80
	delegate OnVehicleWheelLanded;//[Offset: 0x19d8, Size: 0x10]// 0x75d0b49000
	float MinLandingWheelSuspensionOffset;//[Offset: 0x19e8, Size: 0x4]// 0x75a812ae60
	delegate OnVehicleGearChanged;//[Offset: 0x19f0, Size: 0x10]// 0x75d0b49080
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x1a08, Size: 0x8]// 0x75d0b49100
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x1a10, Size: 0x8]// 0x75d0b49180
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x1a18, Size: 0x8]// 0x75d0b49200
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1a20, Size: 0x8]// 0x75d0b49280
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1a28, Size: 0x8]// 0x75d0b49300
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x1a30, Size: 0x8]// 0x75d0b49380
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1a38, Size: 0x8]// 0x75d0b49400
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x1a40, Size: 0x8]// 0x75d0b49480
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1a48, Size: 0x70]// 0x75d0b49500
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x1ab8, Size: 0x70]// 0x75d0b49580
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1b28, Size: 0x8]// 0x75d0b49600
	bool EanbleAkRPMClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b30, Size: 0x1]// 0x75d0b49680
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1b34, Size: 0x4]// 0x75a812aed0
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x1b38, Size: 0x4]// 0x75a812af40
	float WheelSfxUpdateInterval;//[Offset: 0x1b60, Size: 0x4]// 0x75a812afb0
	float WheelSfxUpdateDistanceSqurt;//[Offset: 0x1b64, Size: 0x4]// 0x75a812b020
	byte AllowWheelSfxUpdatePlatformLevel;//[Offset: 0x1b68, Size: 0x1]// 0x75d0b49700
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x1b70, Size: 0x5]// 0x75d0b49780
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1b88, Size: 0x8]// 0x75d0b49800
	FString LoopSmokeCmpName;//[Offset: 0x1b90, Size: 0x10]// 0x75a812b090
	SoftObjectPath DustConfigClass;//[Offset: 0x1ba0, Size: 0x18]// 0x75d0b49880
	SoftObjectPath AccelerationPlumeLoopClass;//[Offset: 0x1bb8, Size: 0x18]// 0x75d0b49900
	SoftObjectPath AccelerationPlumeSmokeClass;//[Offset: 0x1bd0, Size: 0x18]// 0x75d0b49980
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1c48, Size: 0x8]// 0x75a812b100
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1c50, Size: 0x8]// 0x75a812b170
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1c58, Size: 0x8]// 0x75a812b1e0
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1c60, Size: 0x8]// 0x75a812b250
	bool bEnableWheeledVehicleSharpSlopeStickyCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c68, Size: 0x1]// 0x75d0b49a00
	float WheeledVehicleSharpSlopeStickyCheck_CheckTimeWhenNoPassenger;//[Offset: 0x1c6c, Size: 0x4]// 0x75a812b2c0
	float WheeledVehicleSharpSlopeStickyCheck_MaxAngleInDegree;//[Offset: 0x1c70, Size: 0x4]// 0x75a812b330
	float WheeledVehicleSharpSlopeStickyCheck_WheelRotationSpeed;//[Offset: 0x1c74, Size: 0x4]// 0x75a812b3a0
	bool bShouldCheckSharpSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c78, Size: 0x1]// 0x75d0b49a80
	float DragCoefficientScale;//[Offset: 0x1c8c, Size: 0x4]// 0x75a812b410
	float MaxRPMScale;//[Offset: 0x1c90, Size: 0x4]// 0x75a812b480
	float TorqueScale;//[Offset: 0x1c94, Size: 0x4]// 0x75a812b4f0
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c98, Size: 0x1]// 0x75d0b49b00
	float TorqueMultiplierforBoosting;//[Offset: 0x1c9c, Size: 0x4]// 0x75a812b560
	int ValidTransformMinWheelNum;//[Offset: 0x1ca0, Size: 0x4]// 0x75a812b5d0
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x1ca8, Size: 0x8]// 0x75d0b49b80
	bool bEnablePostPhysXTickClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc0, Size: 0x1]// 0x75d0b49c00
	VehiclePostPhysxTick PostPhysXTick;//[Offset: 0x1cc8, Size: 0x58]// 0x75d0b49c80
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 InCurrentGear);// 0x45b5fb0
	void SetHandBrake(float Rate);// 0x45b5f2c
	void SetAvatarTrailOffset(out const Vector[] InAvatarTrailOffset, bool ForceOverride);// 0x45b5e44
	void PostLoadMesh();// 0x45b5e28
	void OnWheelsLanded();// 0x45b5e0c
	void OnRep_TorqueScale();// 0x45b5df0
	void OnRep_ReplicatedState();// 0x45b5dd4
	void OnRep_MaxRPMScale();// 0x45b5db8
	void OnRep_EngineStatic();// 0x45b5d9c
	void OnRep_DustConfigClass();// 0x45b5d80
	void OnRep_DragCoefficientScale();// 0x45b5d64
	void OnRep_AccelerationPlumeSmokeClass();// 0x45b5d48
	void OnRep_AccelerationPlumeLoopClass();// 0x45b5d2c
	void OnGearChanged(bool bIsUp);// 0x45b5ca0
	void MulticastDrawNavigationDebug(float DeltaSeconds, const Vector TargetLocation, const Vector PathingLocation, const Vector PathInputLocation);// 0x45b5b5c
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, const Vector LineTraceStart, const Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x45b5a10
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, const Vector LineTraceStart, const Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x45b58c4
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, const Vector BoxTraceStart, const Vector BoxTraceEnd, const Vector BoxHalfSize, const Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x45b5700
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, const Vector BoxTraceStart, const Vector BoxTraceEnd, const Vector BoxHalfSize, const Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x45b553c
	void MoveUp(float Rate);// 0x45b54b8
	void MoveRight(float Rate);// 0x45b5434
	void MoveForward(float Rate);// 0x45b53b0
	void ModifyWheeledVehicleTorqueScale(float InScale);// 0x45b532c
	void ModifyWheeledVehicleMaxRPMScale(float InScale);// 0x45b52a8
	void ModifyWheeledVehicleDragCoefficientScale(float InScale);// 0x45b5224
	float GetVehicleSpeed();// 0x45b51e8
	float GetVehicleSlip();// 0x45b51ac
	bool GetIsAllWheelsInAir();// 0x45b516c
	int GetCurrentGear(float minSpeed);// 0x45b50d8
	Vector[] GetAvatarTrailOffset();// 0x45b5058

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x30, Size: 0x10]// 0x75a882c280

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 0x1]// 0x761222b8f0
	ParticleSystem* MoveFx;//[Offset: 0x8, Size: 0x28]// 0x761222b870
	ParticleSystem* SlipFx;//[Offset: 0x30, Size: 0x28]// 0x761222b7f0
	ParticleSystem* HubFx;//[Offset: 0x58, Size: 0x28]// 0x761222b770
	float minSpeed;//[Offset: 0x80, Size: 0x4]// 0x761222b700

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x470, Size: 0x10]// 0x75a86f2480
	FName[] ExtraOptBoneNames;//[Offset: 0x480, Size: 0x10]// 0x75a86f2500
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]// 0x75a86f2580
	VehicleWheel*[] WheelHubs;//[Offset: 0x4a8, Size: 0x10]// 0x75a86f2680
	byte[] SpecialModifyCollisionList;//[Offset: 0x4b8, Size: 0x10]// 0x75a86f2780
	int[] SpecialModifyShapeIndexList;//[Offset: 0x4c8, Size: 0x10]// 0x75a86f2800
	FName RootBodyName;//[Offset: 0x4d8, Size: 0x8]// 0x75a8742b90
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]// 0x75a86f2880
	bool InDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]// 0x75a86f2900
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x4e8, Size: 0x8]// 0x75a86f2980
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x528, Size: 0x4]// 0x75a8742c00
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x52c, Size: 0x4]// 0x75a8742c70
	bool UseSetPhysActiveTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]// 0x75a86f2a00
	VehicleAccelerateComponent* AcclerateComponent;//[Offset: 0x550, Size: 0x8]// 0x75a86f2a80
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x560, Size: 0x50]// 0x75a8752380
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]// 0x75a86f2b80
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 0x1]// 0x75a86f2c00
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x608, Size: 0x4]// 0x75a8742d50
	float IsInAir_QueryInterval;//[Offset: 0x60c, Size: 0x4]// 0x75a8742dc0
	float IsInAir_QueryLength;//[Offset: 0x610, Size: 0x4]// 0x75a8742e30
	delegate OnIsInAirChange;//[Offset: 0x618, Size: 0x10]// 0x75a86f2c80
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]// 0x75a86f2d00
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 0x1]// 0x75a86f2d80
	float DragCoefficientInAir;//[Offset: 0x634, Size: 0x4]// 0x75a8742ea0
	void SetWheelsRotationSpeed(int Index, float RotationSpeed);// 0x46d5d14
	void SetTorqueScaler(float InTorqueScaler);// 0x46d5c90
	void SetReverseAsBrake(bool ReverseAsBrake);// 0x46d5c0c
	void SetPhysActiveTimerFunc();// 0x46d5bf8
	void SetMaxRPMScale(float InMaxRPMScale);// 0x46d5b74
	void SetMaxRPM(float InMaxRPM);// 0x46d5af0
	void SetDriftSimulateTireShader();// 0x46d5adc
	void SetDragCoefficient(float InDragCoefficient);// 0x46d5a58
	void PrintVehicleSimulateLog();// 0x46d5a44
	void OnExpoldeStopWheel();// 0x46d5a30
	void MoveWheelShapeHeight(float Height);// 0x46d59b4
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x46d58c0
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x46d5754
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x46d5660
	float GetWheelRPM(int Index, bool WithReadLock);// 0x46d5590
	float GetRawThrottleInput();// 0x46d555c
	float GetRawSteeringInput();// 0x46d5528
	int GetNumWheelsNotInAir();// 0x46d54f4
	float GetHandBrakeInput();// 0x46d54c0
	float GetFinalThrottleInput();// 0x46d548c
	float GetFinalSteeringInput();// 0x46d5458
	float GetDisToLand();// 0x46d541c
	int GetBrokenWheelNum();// 0x46d53e8
	float GetBrakeInput();// 0x46d53b4
	void ForceWheelsRotate(float RotationSpeed);// 0x46d5338
	void ClearDestroyedWheel();// 0x46d5324
	void ChangeDragCoefficientInInAir();// 0x46d5310

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x310, Size: 0x90]// 0x75a86f3500
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x3a0, Size: 0x1c]// 0x75a86f3580
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x3c0, Size: 0x30]// 0x75a86f3600
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x3f0, Size: 0x78]// 0x75a86f3680
	float AckermannAccuracy;//[Offset: 0x468, Size: 0x4]// 0x75a8743920

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 0x1]// 0x75a86f3700
	WheelSetup[] WheelSetups;//[Offset: 0x1b0, Size: 0x10]// 0x75a86f3800
	float Mass;//[Offset: 0x1c0, Size: 0x4]// 0x75a8743990
	float DragCoefficient;//[Offset: 0x1c4, Size: 0x4]// 0x75a8743a00
	float ChassisWidth;//[Offset: 0x1c8, Size: 0x4]// 0x75a8743a70
	float ChassisHeight;//[Offset: 0x1cc, Size: 0x4]// 0x75a8743ae0
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]// 0x75a86f3880
	float DragArea;//[Offset: 0x1d4, Size: 0x4]// 0x75a8743b50
	float EstimatedMaxEngineSpeed;//[Offset: 0x1d8, Size: 0x4]// 0x75a8743bc0
	float MaxEngineRPM;//[Offset: 0x1dc, Size: 0x4]// 0x75a8743c30
	float DebugDragMagnitude;//[Offset: 0x1e0, Size: 0x4]// 0x75a8743ca0
	Vector InertiaTensorScale;//[Offset: 0x1e4, Size: 0xc]// 0x75a86f3900
	float MinNormalizedTireLoad;//[Offset: 0x1f0, Size: 0x4]// 0x75a8743d10
	float MinNormalizedTireLoadFiltered;//[Offset: 0x1f4, Size: 0x4]// 0x75a8743d80
	float MaxNormalizedTireLoad;//[Offset: 0x1f8, Size: 0x4]// 0x75a8743df0
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x1fc, Size: 0x4]// 0x75a8743e60
	float ThresholdLongitudinalSpeed;//[Offset: 0x200, Size: 0x4]// 0x75a8743ed0
	int LowForwardSpeedSubStepCount;//[Offset: 0x204, Size: 0x4]// 0x75a8743f40
	int HighForwardSpeedSubStepCount;//[Offset: 0x208, Size: 0x4]// 0x75a8743fb0
	VehicleWheel*[] Wheels;//[Offset: 0x210, Size: 0x10]// 0x75a86f3a00
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]// 0x75a86f3a80
	float RVOAvoidanceRadius;//[Offset: 0x23c, Size: 0x4]// 0x75a8744020
	float RVOAvoidanceHeight;//[Offset: 0x240, Size: 0x4]// 0x75a8744090
	float AvoidanceConsiderationRadius;//[Offset: 0x244, Size: 0x4]// 0x75a8744100
	float RVOSteeringStep;//[Offset: 0x248, Size: 0x4]// 0x75a8744170
	float RVOThrottleStep;//[Offset: 0x24c, Size: 0x4]// 0x75a87441e0
	int AvoidanceUID;//[Offset: 0x250, Size: 0x4]// 0x75a8744250
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x254, Size: 0x4]// 0x75a86f3b00
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x258, Size: 0x4]// 0x75a86f3b80
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x25c, Size: 0x4]// 0x75a86f3c00
	float AvoidanceWeight;//[Offset: 0x260, Size: 0x4]// 0x75a87442c0
	Vector PendingLaunchVelocity;//[Offset: 0x264, Size: 0xc]// 0x75a86f3c80
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x270, Size: 0x14]// 0x75a86f3d00
	float RawSteeringInput;//[Offset: 0x288, Size: 0x4]// 0x75a8744330
	float RawThrottleInput;//[Offset: 0x28c, Size: 0x4]// 0x75a87443a0
	float RawBrakeInput;//[Offset: 0x290, Size: 0x4]// 0x75a8744410
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]// 0x75a86f3d80
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]// 0x75a86f3e00
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]// 0x75a86f3e80
	float SteeringInput;//[Offset: 0x298, Size: 0x4]// 0x75a8744480
	float ThrottleInput;//[Offset: 0x29c, Size: 0x4]// 0x75a87444f0
	float BrakeInput;//[Offset: 0x2a0, Size: 0x4]// 0x75a8744560
	float HandbrakeInput;//[Offset: 0x2a4, Size: 0x4]// 0x75a87445d0
	float IdleBrakeInput;//[Offset: 0x2a8, Size: 0x4]// 0x75a8744640
	float StopThreshold;//[Offset: 0x2ac, Size: 0x4]// 0x75a87446b0
	float WrongDirectionThreshold;//[Offset: 0x2b0, Size: 0x4]// 0x75a8744720
	VehicleInputRate ThrottleInputRate;//[Offset: 0x2b4, Size: 0x8]// 0x75a86f3f00
	VehicleInputRate BrakeInputRate;//[Offset: 0x2bc, Size: 0x8]// 0x75a86f3f80
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x2c4, Size: 0x8]// 0x75a86f4000
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]// 0x75a86f4080
	VehicleInputRate SteeringInputRate;//[Offset: 0x2f8, Size: 0x8]// 0x75a86f4100
	bool EnableCleanDynamicInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]// 0x75a86f4180
	int SleepingFramesToCleanDynamicInterval;//[Offset: 0x304, Size: 0x4]// 0x75a8744790
	bool TickWheelOnceLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]// 0x75a86f4200
	void SetUseAutoGears(bool bUseAuto);// 0x7ec48bc
	void SetThrottleInput(float Throttle);// 0x7ec4838
	void SetTargetGear(int GearNum, bool bImmediate);// 0x7ec4778
	void SetSteeringInput(float Steering);// 0x7ec46f4
	void SetPhysActive(bool bActive);// 0x7ec4670
	void SetHandbrakeInput(bool bNewHandbrake);// 0x7ec45e4
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x7ec455c
	void SetGroupsToIgnore(int GroupFlags);// 0x7ec44e0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x7ec4458
	void SetGroupsToAvoid(int GroupFlags);// 0x7ec43dc
	void SetGearUp(bool bNewGearUp);// 0x7ec4358
	void SetGearDown(bool bNewGearDown);// 0x7ec42d4
	void SetEngineRotationRawSpeed(float RawSpeed);// 0x7ec4258
	void SetBrakeInput(float Brake);// 0x7ec41d4
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x7ec414c
	void SetAvoidanceGroup(int GroupFlags);// 0x7ec40d0
	void SetAvoidanceEnabled(bool bEnable);// 0x7ec404c
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x7ec3ea4
	bool GetUseAutoGears();// 0x7ec3e6c
	int GetTargetGear();// 0x7ec3e38
	float GetForwardSpeed_AssumesLocked();// 0x7ec3dfc
	float GetForwardSpeed();// 0x7ec3dc0
	float GetEngineRotationSpeed();// 0x7ec3d8c
	float GetEngineRotationRawSpeed();// 0x7ec3d58
	float GetEngineMaxRotationSpeed();// 0x7ec3d24
	int GetCurrentGear();// 0x7ec3cf0

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 0x78]// 0x75c9902c80
	float MaxRPM;//[Offset: 0x78, Size: 0x4]// 0x75c991fb70
	float MOI;//[Offset: 0x7c, Size: 0x4]// 0x75c991fbe0
	float DampingRateFullThrottle;//[Offset: 0x80, Size: 0x4]// 0x75c991fc50
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x84, Size: 0x4]// 0x75c991fcc0
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x88, Size: 0x4]// 0x75c991fd30

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 0x1]// 0x75c9902c00
	float FrontRearSplit;//[Offset: 0x4, Size: 0x4]// 0x75c991f8d0
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 0x4]// 0x75c991f940
	float RearLeftRightSplit;//[Offset: 0xc, Size: 0x4]// 0x75c991f9b0
	float CentreBias;//[Offset: 0x10, Size: 0x4]// 0x75c991fa20
	float FrontBias;//[Offset: 0x14, Size: 0x4]// 0x75c991fa90
	float RearBias;//[Offset: 0x18, Size: 0x4]// 0x75c991fb00

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7612158a40
	float GearSwitchTime;//[Offset: 0x4, Size: 0x4]// 0x76121589d0
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 0x4]// 0x7612158960
	float FinalRatio;//[Offset: 0xc, Size: 0x4]// 0x76121588f0
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 0x10]// 0x7612158600
	float ReverseGearRatio;//[Offset: 0x20, Size: 0x4]// 0x7612158590
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 0x4]// 0x7612158520
	float ClutchStrength;//[Offset: 0x28, Size: 0x4]// 0x76121584b0

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 0x4]// 0x7612158880
	float DownRatio;//[Offset: 0x4, Size: 0x4]// 0x7612158810
	float UpRatio;//[Offset: 0x8, Size: 0x4]// 0x76121587a0

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8]// 0x7612158ed0
	FName TireBoneName;//[Offset: 0x8, Size: 0x8]// 0x7612158e60

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 0x8]// 0x75b4d72d00
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x75b4d72d80
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]// 0x75b4d72e00
	Vector Offset;//[Offset: 0x34, Size: 0xc]// 0x75b4d72e80
	float ShapeRadius;//[Offset: 0x40, Size: 0x4]// 0x75a80c4630
	float ShapeWidth;//[Offset: 0x44, Size: 0x4]// 0x75a80c46a0
	float Mass;//[Offset: 0x48, Size: 0x4]// 0x75a80c4710
	float DampingRate;//[Offset: 0x4c, Size: 0x4]// 0x75a80c4780
	float SteerAngle;//[Offset: 0x50, Size: 0x4]// 0x75a80c47f0
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]// 0x75b4d72f00
	TireType* TireType;//[Offset: 0x58, Size: 0x8]// 0x75b4d72f80
	TireConfig* TireConfig;//[Offset: 0x60, Size: 0x8]// 0x75b4d73000
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 0x4]// 0x75a80c4860
	float LatStiffValue;//[Offset: 0x6c, Size: 0x4]// 0x75a80c48d0
	float LongStiffValue;//[Offset: 0x70, Size: 0x4]// 0x75a80c4940
	float SuspensionForceOffset;//[Offset: 0x74, Size: 0x4]// 0x75a80c49b0
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 0x4]// 0x75a80c4a20
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 0x4]// 0x75a80c4a90
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 0x4]// 0x75a80c4b00
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 0x4]// 0x75a80c4b70
	byte SweepType;//[Offset: 0x88, Size: 0x1]// 0x75b4d73080
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 0x4]// 0x75a80c4be0
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 0x4]// 0x75a80c4c50
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 0x8]// 0x75b4d73100
	int WheelIndex;//[Offset: 0xa0, Size: 0x4]// 0x75a80c4cc0
	float DebugLongSlip;//[Offset: 0xa4, Size: 0x4]// 0x75a80c4d30
	float DebugLatSlip;//[Offset: 0xa8, Size: 0x4]// 0x75a80c4da0
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 0x4]// 0x75a80c4e10
	float DebugWheelTorque;//[Offset: 0xb4, Size: 0x4]// 0x75a80c4e80
	float DebugLongForce;//[Offset: 0xb8, Size: 0x4]// 0x75a80c4ef0
	float DebugLatForce;//[Offset: 0xbc, Size: 0x4]// 0x75a80c4f60
	Vector Location;//[Offset: 0xc0, Size: 0xc]// 0x75b4d73180
	Vector OldLocation;//[Offset: 0xcc, Size: 0xc]// 0x75b4d73200
	Vector Velocity;//[Offset: 0xd8, Size: 0xc]// 0x75b4d73280
	bool IsInAir();// 0x7ec3458
	Vector GetWheelLocation();// 0x7ec3434
	float GetSuspensionOffset();// 0x7ec3400
	float GetSteerAngle();// 0x7ec33cc
	float GetRotationAngle();// 0x7ec3398

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]// 0x75a8195ed0
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 0x10]// 0x75a8051c80
	float[] TireFrictionVsSlipGraph;//[Offset: 0x50, Size: 0x10]// 0x75a8051d00

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]// 0x75c9902d00
	float FrictionScale;//[Offset: 0x8, Size: 0x4]// 0x75c99200b0

--------------------------------
Class: VehicleAccelerateComponent.VehicleComponent.ActorComponent.Object
	float AccelerateEffectElapseTime;//[Offset: 0x118, Size: 0x4]// 0x75a89521d0
	float MaxAccelerateEffecTime;//[Offset: 0x11c, Size: 0x4]// 0x75a8952240
	float DefaultMaxAccelerateEffecTime;//[Offset: 0x120, Size: 0x4]// 0x75a89522b0
	float ExtraEngineBoostFactor;//[Offset: 0x124, Size: 0x4]// 0x75a8952320
	float MaxAccelerateSpeed;//[Offset: 0x128, Size: 0x4]// 0x75a8952390
	float MinAccelerateSpeed;//[Offset: 0x12c, Size: 0x4]// 0x75a8952400
	float MinDecelerateSpeed;//[Offset: 0x130, Size: 0x4]// 0x75a8952470
	VehicleAccelerateEffectTag AccelerateEffectTag;//[Offset: 0x134, Size: 0x8]// 0x75a8835d00
	delegate AccelerateEffectTagDelegate;//[Offset: 0x140, Size: 0x10]// 0x75a8835d80
	float WheelDamageFallOff;//[Offset: 0x150, Size: 0x4]// 0x75a89524e0
	int AccelerateTips;//[Offset: 0x154, Size: 0x4]// 0x75a8952550
	int CanNotPassDoorAccelerateTips;//[Offset: 0x158, Size: 0x4]// 0x75a89525c0
	float UsePassDoorAccelerateThreshold;//[Offset: 0x15c, Size: 0x4]// 0x75a8952630
	float UsePassDoorAccelerateThrottleThreshold;//[Offset: 0x160, Size: 0x4]// 0x75a89526a0
	AkAudioEvent* Sfx_Accelerate;//[Offset: 0x168, Size: 0x8]// 0x75a8835e00
	bool OpenVehicleDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x75a8835e80
	CurveFloat* DriftForce2Velocity;//[Offset: 0x178, Size: 0x8]// 0x75a8835f00
	CurveFloat* FowardDirDotVelocityDirFactor;//[Offset: 0x180, Size: 0x8]// 0x75a8835f80
	CurveFloat* SlipAngleCurve;//[Offset: 0x188, Size: 0x8]// 0x75a8836000
	float CurSlipAngel;//[Offset: 0x190, Size: 0x4]// 0x75a8952710
	float SlipAngelShowTrailMark;//[Offset: 0x194, Size: 0x4]// 0x75a8952780
	CurveFloat* DriftForwardForce2Velocity;//[Offset: 0x198, Size: 0x8]// 0x75a8836080
	Vector[] DriftForceLocations;//[Offset: 0x1a0, Size: 0x10]// 0x75a8836180
	CurveFloat* InputFalloffCurve;//[Offset: 0x1b0, Size: 0x8]// 0x75a8836200
	float MergeVelocityToForwardSpeed;//[Offset: 0x1b8, Size: 0x4]// 0x75a89527f0
	float InputFalloffTime;//[Offset: 0x1bc, Size: 0x4]// 0x75a8952860
	float CurDeltaTime;//[Offset: 0x1c0, Size: 0x4]// 0x75a89528d0
	float LastSteerInput;//[Offset: 0x1c4, Size: 0x4]// 0x75a8952940
	bool CanShowSmallAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]// 0x75a8836280
	float ShowSmallAccelerateMaxTime;//[Offset: 0x1cc, Size: 0x4]// 0x75a89529b0
	float SmallAcceleratePercent;//[Offset: 0x1d4, Size: 0x4]// 0x75a8952a20
	float SmallAccelerateTime;//[Offset: 0x1d8, Size: 0x4]// 0x75a8952a90
	float LastAcceleratePercent;//[Offset: 0x1dc, Size: 0x4]// 0x75a8952b00
	float LastAcceleratedSpeed;//[Offset: 0x1e0, Size: 0x4]// 0x75a8952b70
	float CurDriftInput;//[Offset: 0x1e4, Size: 0x4]// 0x75a8952be0
	bool DriftBtnState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]// 0x75a8836300
	enum CurDriftState;//[Offset: 0x1e9, Size: 0x1]// 0x75a8836400
	enum ServerDriftState;//[Offset: 0x1ea, Size: 0x1]// 0x75a8836500
	DriftInput RepDriftInputState;//[Offset: 0x1ec, Size: 0x14]// 0x75a8836580
	DriftInput CurrentDriftInputState;//[Offset: 0x200, Size: 0x14]// 0x75a8836600
	float MinDriftSpeedPercent;//[Offset: 0x214, Size: 0x4]// 0x75a8952c50
	float MinSpeedOnDrift;//[Offset: 0x218, Size: 0x4]// 0x75a8952cc0
	float DriftWithDirInputFalloff;//[Offset: 0x21c, Size: 0x4]// 0x75a8952d30
	float OppositeInputVelocityMergeMaxTime;//[Offset: 0x220, Size: 0x4]// 0x75a8952da0
	float CurOppositeInputMergeTime;//[Offset: 0x224, Size: 0x4]// 0x75a8952e10
	float DriftTime;//[Offset: 0x228, Size: 0x4]// 0x75a8952e80
	float DriftScore;//[Offset: 0x22c, Size: 0x4]// 0x75a8952ef0
	float SingleBoostNeedScore;//[Offset: 0x230, Size: 0x4]// 0x75a8952f60
	float CurTargetSlipAngel;//[Offset: 0x234, Size: 0x4]// 0x75a8952fd0
	float PressDriftBtnAndInputTime;//[Offset: 0x238, Size: 0x4]// 0x75a8953040
	CurveFloat* PressDriftBtnTimeToSlipAngel;//[Offset: 0x240, Size: 0x8]// 0x75a8836680
	float TargetDriftAngel;//[Offset: 0x248, Size: 0x4]// 0x75a89530b0
	float LastDeltaAngel;//[Offset: 0x24c, Size: 0x4]// 0x75a8953120
	float CurDeltaAngel;//[Offset: 0x250, Size: 0x4]// 0x75a8953190
	float DriftForceDamping;//[Offset: 0x254, Size: 0x4]// 0x75a8953200
	bool DrawDebugDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]// 0x75a8836700
	bool DrawDriftLateralForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]// 0x75a8836780
	float StopDriftSlipAngel;//[Offset: 0x25c, Size: 0x4]// 0x75a8953270
	bool bGMOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]// 0x75a8836800
	Rotator CurFrameTargetRot;//[Offset: 0x264, Size: 0xc]// 0x75a8836880
	Vector CurFrameTargetVector;//[Offset: 0x270, Size: 0xc]// 0x75a8836900
	bool EnableClampVelocityDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]// 0x75a8836980
	VehicleAcceleratePostPhysxTick PostPhysxComponentTick;//[Offset: 0x280, Size: 0x58]// 0x75a8836a00
	float AccelerateTime;//[Offset: 0x2d8, Size: 0x4]// 0x75a89532e0
	CurveFloat* SlipAngelToLat;//[Offset: 0x2e0, Size: 0x8]// 0x75a8836a80
	bool VehicleCanDrift();// 0x47bb2a0
	void TestStopVehicleAccelerate();// 0x47bb240
	void TestStartVehicleAccelerate(float percent, float Time, float factor);// 0x47bb118
	void StopVehicleDrift();// 0x47bb0fc
	void StopVehicleAccelerate();// 0x47bb0e0
	void StartVehicleDrift(float InputRate);// 0x47bb05c
	void StartVehicleAccelerate(float AcceleratePercent, float ThisAccelerateTime, float EngineBoostFactor, enum AccelerateType);// 0x47baf30
	void SendDriftStateToServer(DriftInput ClientState);// 0x47bae64
	void SendDriftInputToServer(bool bDrift, float InputDriftRate, enum ClientDriftState, float ClientSpeed);// 0x47bace0
	void ReqVehicleAccelerate(float percent, float Time, float factor);// 0x47babb8
	void ProcessTargetSlipAngel(float DeltaTime);// 0x47bab34
	void ProcessStopDrift();// 0x47bab18
	void ProcessMinSpeed(float Speed);// 0x47baa94
	void ProcessCameraEffect(bool Enable, STExtraBaseCharacter* BC);// 0x47ba9c4
	void OnRep_VehicleAccelerateEffectTags();// 0x47ba9a8
	void OnRep_ServerDriftState();// 0x47ba98c
	void OnRep_ExtraEngineBoostFactor();// 0x47ba978
	void OnRep_DriftBtnState();// 0x47ba95c
	void OnEnableVehicleAccelerateEffect(float AcceleratePercent, float AccelerateEffecTime);// 0x47ba8a0
	void OnDriftStopEvent();// 0x47ba884
	void OnDriftStartEvent();// 0x47ba868
	void OnDriftEffect();// 0x47ba84c
	void OnDisableVehicleAccelerateEffect();// 0x47ba830
	void NotifyVehicleAccelerate(float AcceleratePercent, float ThisAccelerateTime);// 0x47ba774
	void NotifyStopVehicleAccelerate();// 0x47ba758
	void Jump(float UpSpeed);// 0x47ba6d4
	bool InDriftState();// 0x47ba69c
	void GMMulticastCalcAcc(float AcceleratedPercent);// 0x47ba618
	Vector GetLateralForceDir(STExtraWheeledVehicle* Vehicle);// 0x47ba580
	float GetDeltaAngel(STExtraVehicleBase* Vehicle);// 0x47ba4f4
	void DoAccelerateFunc(float AcceleratePercent, float MaxSpeed, float minSpeed);// 0x47ba3fc
	void CustomComputeTireForce(VehicleWheel* Wheel, const float tireFriction, const float longSlip, const float latSlip, const float camber, const float wheelOmega, const float wheelRadius, const float recipWheelRadius, const float restTireLoad, const float normalisedTireLoad, const float tireLoad, const float Gravity, const float recipGravity, out float wheelTorque, out float tireLongForceMag, out float tireLatForceMag, out float tireAlignMoment);// 0x47b9f60
	void CalculateDriftScore(float DeltaTime);// 0x47b9edc
	void AddLateralForceAtWheel(float Speed);// 0x47b9e58
	void AddForceAtDrift(float Speed);// 0x47b9dd4

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: VehicleAccelerateEffectTag
	int EffectValueTag;//[Offset: 0x0, Size: 0x4]// 0x7612228120
	enum AccelerateType;//[Offset: 0x4, Size: 0x1]// 0x7612228020

--------------------------------
Class: DriftInput
	float SteerInput;//[Offset: 0x0, Size: 0x4]// 0x7612227e70
	float LastSteerInput;//[Offset: 0x4, Size: 0x4]// 0x7612227e00
	float BrakeInput;//[Offset: 0x8, Size: 0x4]// 0x7612227d90
	enum CurrentDriftState;//[Offset: 0xc, Size: 0x1]// 0x7612227c90
	float MinSpeedOnDrift;//[Offset: 0x10, Size: 0x4]// 0x7612227c20

--------------------------------
Class: VehicleAcceleratePostPhysxTick.TickFunction

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8]// 0x76121591e0
	FName BoneName;//[Offset: 0x8, Size: 0x8]// 0x7612159170
	Vector AdditionalOffset;//[Offset: 0x10, Size: 0xc]// 0x76121590f0

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 0x4]// 0x75c991fda0
	float ThrottleInput;//[Offset: 0x4, Size: 0x4]// 0x75c991fe10
	float BrakeInput;//[Offset: 0x8, Size: 0x4]// 0x75c991fe80
	float HandbrakeInput;//[Offset: 0xc, Size: 0x4]// 0x75c991fef0
	int CurrentGear;//[Offset: 0x10, Size: 0x4]// 0x75c991ff60

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4]// 0x75c991ffd0
	float FallRate;//[Offset: 0x4, Size: 0x4]// 0x75c9920040

--------------------------------
Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76122028d0
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 0x4]// 0x7612202860
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 0x8]// 0x76122027e0

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x37b0, Size: 0x10]// 0x7611ee3160
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x37c0, Size: 0x10]// 0x7611ee30e0
	delegate OnSkillFinishedDelegate;//[Offset: 0x37d0, Size: 0x10]// 0x7611ee3060
	delegate OnSkillStartDelegate;//[Offset: 0x37e0, Size: 0x10]// 0x7611ee2fe0
	delegate OnScopeOutDelegate;//[Offset: 0x37f0, Size: 0x10]// 0x7611ee2f60
	delegate OnScopeInDelegate;//[Offset: 0x3800, Size: 0x10]// 0x7611ee2ee0
	delegate OnPlayerGetOnOffBigAirShipDelegate;//[Offset: 0x3810, Size: 0x10]// 0x7611ee2e60
	delegate OnGetOnVehicleDelegate;//[Offset: 0x3820, Size: 0x10]// 0x7611ee2de0
	STScreenAppearanceComponent* ScreenAppearanceComp;//[Offset: 0x3830, Size: 0x8]// 0x7611ee2d60
	NightVisionComponent* NightVisionComponent;//[Offset: 0x3838, Size: 0x8]// 0x7611ee2ce0
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x3840, Size: 0x8]// 0x7611ee2c60
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x3848, Size: 0x8]// 0x7611ee2be0
	float IndoorCheckDistance;//[Offset: 0x3850, Size: 0x4]// 0x7611ee2b70
	float IndoorCheckTime;//[Offset: 0x3854, Size: 0x4]// 0x7611ee2b00
	float IndoorLowerCameraHeight;//[Offset: 0x3858, Size: 0x4]// 0x7611ee2a90
	delegate OnPlayerIndoorStateChangedEvent;//[Offset: 0x3860, Size: 0x10]// 0x7611ee2a10
	delegate OnPlayerIndoorLowerStateChangedEvent;//[Offset: 0x3870, Size: 0x10]// 0x7611ee2990
	byte ParachuteState;//[Offset: 0x388c, Size: 0x1]// 0x7611ee2910
	byte LastParachuteState;//[Offset: 0x388e, Size: 0x1]// 0x7611ee2890
	float HaveToOpenHeightToGround;//[Offset: 0x3890, Size: 0x4]// 0x7611ee2820
	float SwimZDir;//[Offset: 0x3894, Size: 0x4]// 0x7611ee27b0
	float SwimRotateX_Ex;//[Offset: 0x3898, Size: 0x4]// 0x7611ee2740
	FName EnterParachuteJump_PitchLimit;//[Offset: 0x38a0, Size: 0x8]// 0x7611ee26d0
	FName EnterParachuteOpen_PitchLimit;//[Offset: 0x38a8, Size: 0x8]// 0x7611ee2660
	delegate OnParachuteStateChangedDelegate;//[Offset: 0x38b0, Size: 0x10]// 0x7611ee25e0
	delegate OnParachuteAnimSubInstanceNeedSwitch;//[Offset: 0x38c0, Size: 0x10]// 0x7611ee2560
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x38d8, Size: 0x8]// 0x7611ee24e0
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x38e0, Size: 0x8]// 0x7611ee2460
	STParachuteCloudData[] ParachuteCloudAssestList;//[Offset: 0x38e8, Size: 0x10]// 0x7611ee2060
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x38f8, Size: 0x8]// 0x7611ee1fe0
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x3900, Size: 0x8]// 0x7611ee1f60
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x3908, Size: 0x8]// 0x7611ee1ee0
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x3910, Size: 0x8]// 0x7611ee1e60
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x3918, Size: 0x8]// 0x7611ee1de0
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x3920, Size: 0x8]// 0x7611ee1d60
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x3928, Size: 0x8]// 0x7611ee1ce0
	SpringArmParams TPPSpringArmParam;//[Offset: 0x3930, Size: 0xc0]// 0x7611ee1190
	class CameraShake* FreeFallCamShake;//[Offset: 0x3a08, Size: 0x8]// 0x7611ee1110
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a10, Size: 0x1]// 0x7611ee1090
	float VehicleForwardInputRate;//[Offset: 0x3a14, Size: 0x4]// 0x7611ee1020
	float VehicleRightInputRate;//[Offset: 0x3a18, Size: 0x4]// 0x7611ee0fb0
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1c, Size: 0x1]// 0x7611ee0f30
	bool bHasSendBulletFlyPassEarRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1d, Size: 0x1]// 0x7611ee0eb0
	STExtraPlayerController* STPlayerController;//[Offset: 0x3a20, Size: 0x8]// 0x7611ee0e30
	<byte,bool> WeatherEffectEnabled;//[Offset: 0x3a28, Size: 0x50]// 0x7611ee0c80
	bool bHasPickupPropsAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a79, Size: 0x1]// 0x7611ee0c00
	bool bHasTombBoxesAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7a, Size: 0x1]// 0x7611ee0b80
	float LastPickUpUICheckTime;//[Offset: 0x3a7c, Size: 0x4]// 0x7611ee0b10
	float bHasCheckPickUpUI;//[Offset: 0x3a80, Size: 0x4]// 0x7611ee0aa0
	bool bIsParachuteAnimBeingAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a84, Size: 0x1]// 0x7611ee0a20
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a94, Size: 0x1]// 0x7611ee09a0
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a95, Size: 0x1]// 0x7611ee0920
	AngledSightRepData AngledSightRepData;//[Offset: 0x3a96, Size: 0x2]// 0x7611ee0700
	delegate OnPlayerHasPossessed;//[Offset: 0x3a98, Size: 0x10]// 0x7611ee0680
	int TrySightCorrectionTime;//[Offset: 0x3aac, Size: 0x4]// 0x7611ee0610
	float SightCorrectionDelay;//[Offset: 0x3ab0, Size: 0x4]// 0x7611ee05a0
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab4, Size: 0x1]// 0x7611ee0520
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab5, Size: 0x1]// 0x7611ee04a0
	int CurrentSightCorrectionTimes;//[Offset: 0x3ab8, Size: 0x4]// 0x7611ee0430
	bool isRecommendBattery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac5, Size: 0x1]// 0x7611ee03b0
	FString[] ShowDebugAnimNodeTypeList;//[Offset: 0x3ad0, Size: 0x10]// 0x7611ee02c0
	float ClientHUDStateCheckFrequency;//[Offset: 0x3ae4, Size: 0x4]// 0x7611ee0250
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae8, Size: 0x1]// 0x7611ee01d0
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x3af0, Size: 0x10]// 0x7611edfe40
	int CurrentActivityID;//[Offset: 0x3b00, Size: 0x4]// 0x7611edfdd0
	int CurrentActivityIndex;//[Offset: 0x3b04, Size: 0x4]// 0x7611edfd60
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x3b08, Size: 0x8]// 0x7611edfce0
	bool bOpenPlatformGameFootEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b10, Size: 0x1]// 0x7611edfc60
	PawnChooserData PawnChooserData;//[Offset: 0x3b18, Size: 0x88]// 0x7611edf220
	delegate OnSelectedActorDelegate;//[Offset: 0x3ba0, Size: 0x10]// 0x7611edf1a0
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x3bb0, Size: 0x8]// 0x7611edf120
	ActivityAnimationRepData PrevActivityAnimationRepData;//[Offset: 0x3bb8, Size: 0x8]// 0x7611edef80
	PartyDanceStateData PlayerPartyDanceState;//[Offset: 0x3bc8, Size: 0x20]// 0x7611edece0
	<enum,PartyDance> PartyDancingMontageMap;//[Offset: 0x3bf0, Size: 0x50]// 0x7611ede5d0
	int DancePartyItemSubType;//[Offset: 0x3c40, Size: 0x4]// 0x7611ede560
	AnimMontage*[] CurrentPlayingPartyDanceAnimation;//[Offset: 0x3c48, Size: 0x10]// 0x7611ede460
	STExtraPlayerCharacter* OtherDancingPartner;//[Offset: 0x3c58, Size: 0x8]// 0x7611ede3e0
	<enum,ParticleSystem*> DanceParticleMap;//[Offset: 0x3c60, Size: 0x50]// 0x7611ede1b0
	<enum,Transform> DanceParticleMapOffset;//[Offset: 0x3cb0, Size: 0x50]// 0x7611eddf80
	<enum,ParticleSystemComponent*> DanceParticleInstances;//[Offset: 0x3d00, Size: 0x50]// 0x7611eddcf0
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x3d50, Size: 0x10]// 0x7611eddbd0
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x3d68, Size: 0x8]// 0x7611eddb50
	delegate OnApplicationactivatedDelegate;//[Offset: 0x3d70, Size: 0x10]// 0x7611eddad0
	MaterialBillboardComponent* ReplayEnemyFrameUI;//[Offset: 0x3d80, Size: 0x8]// 0x7611edda50
	StaticMeshComponent* FootMarkComponent;//[Offset: 0x3d88, Size: 0x8]// 0x7611edd9d0
	float ThresholdHeight;//[Offset: 0x3d90, Size: 0x4]// 0x7611edd960
	float FootMarkScaling;//[Offset: 0x3d94, Size: 0x4]// 0x7611edd8f0
	Texture* GreenMarkTexture;//[Offset: 0x3da0, Size: 0x8]// 0x7611edd870
	Texture* BlueMarkTexture;//[Offset: 0x3da8, Size: 0x8]// 0x7611edd7f0
	Texture* RedMarkTexture;//[Offset: 0x3db0, Size: 0x8]// 0x7611edd770
	MaterialInstance* FootMarkMaterialInstance;//[Offset: 0x3db8, Size: 0x8]// 0x7611edd6f0
	SoftObjectPath GreenMarkPath;//[Offset: 0x3dc0, Size: 0x18]// 0x7611edd670
	SoftObjectPath BlueMarkPath;//[Offset: 0x3dd8, Size: 0x18]// 0x7611edd5f0
	SoftObjectPath RedMarkPath;//[Offset: 0x3df0, Size: 0x18]// 0x7611edd570
	SoftObjectPath FootMarkMaterialPath;//[Offset: 0x3e08, Size: 0x18]// 0x7611edd4f0
	float AreaCheckTime;//[Offset: 0x3e40, Size: 0x4]// 0x7611edd480
	int AreaEventID;//[Offset: 0x3e44, Size: 0x4]// 0x7611edd410
	float AreaCheckDis;//[Offset: 0x3e48, Size: 0x4]// 0x7611edd3a0
	<int> ReachAreaSet;//[Offset: 0x3e50, Size: 0x50]// 0x7611edd290
	bool bIsBeginAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea4, Size: 0x1]// 0x7611edd210
	bool bIgonreWeatherEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea5, Size: 0x1]// 0x7611edd190
	CustomVoiceGroup CustomVoiceChannel;//[Offset: 0x3eb4, Size: 0x14]// 0x7611edcf00
	bool bIsEnablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec9, Size: 0x1]// 0x7611edce80
	delegate OnActivityAnimationChanged;//[Offset: 0x3ed0, Size: 0x10]// 0x7611edce00
	bool bIsOnBigAirShip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee0, Size: 0x1]// 0x7611edcd80
	bool bFlyingUseFreeFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee1, Size: 0x1]// 0x7611edcd00
	CharacterFlyingComponent* FlyingComponent;//[Offset: 0x3ee8, Size: 0x8]// 0x7611edcc80
	delegate OnPlayerExitParachute;//[Offset: 0x3ef0, Size: 0x10]// 0x7611edcc00
	bool bEnterDeferredPlaneAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f00, Size: 0x1]// 0x7611edcb80
	bool bAllowLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f01, Size: 0x1]// 0x7611edcb00
	Vector ExtraLauncherTargetLocationForValidation;//[Offset: 0x3f04, Size: 0xc]// 0x7611edca80
	Vector ExtraLauncherStartLocationForValidation;//[Offset: 0x3f10, Size: 0xc]// 0x7611edca00
	float ExtraTargetDist;//[Offset: 0x3f1c, Size: 0x4]// 0x7611edc990
	float ExtraLaunchalidRange;//[Offset: 0x3f20, Size: 0x4]// 0x7611edc920
	AnimMontage* ExtraLaunchAnimMontage;//[Offset: 0x3f28, Size: 0x8]// 0x7611edc8a0
	bool bExtraLaunching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f30, Size: 0x1]// 0x7611edc820
	Vector ExtraLaunchTargetLocation;//[Offset: 0x3f40, Size: 0xc]// 0x7611edc7a0
	float ExtraLaunchDuration;//[Offset: 0x3f4c, Size: 0x4]// 0x7611edc730
	float ExtraLaunchFallingDamageFactor;//[Offset: 0x3f50, Size: 0x4]// 0x7611edc6c0
	float ExtraLaunchLengthValidator;//[Offset: 0x3f54, Size: 0x4]// 0x7611edc650
	enum TargetStateTypeCacheForReplay;//[Offset: 0x3f58, Size: 0x1]// 0x7611edc550
	SyncPersionalOPInfo ReplayOPState;//[Offset: 0x3f5c, Size: 0x8]// 0x7611edc4d0
	void XmasStarHitServer(FString NewParam);// 0x464459c
	void XmasStarHitMulti(FString Name);// 0x46444e4
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x4644468
	void UpdateIndoorState(bool IsIndoor);// 0x46443a4
	Object* TryGetBoneRetargetObj(Object* InSourceObj);// 0x4644310
	bool TryGetBackWeaponAdaptRelativeTransform(const byte InWeaponSlot, const int inWeaponID, const int InLevel, const int InSideType, out Transform OutAdaptTransform);// 0x4644164
	void TouchCancelSkillLock();// 0x4644150
	void SyncLatestPlayerStatus(byte LatestParachuteState);// 0x46440a0
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x464401c
	void SwitchSightAngledServer(byte Type, bool IsOnlyTurn);// 0x4643f18
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x4643e50
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x4643d90
	void SwitchCameraToParachuteOpening();// 0x4643d74
	void SwitchCameraToParachuteFalling();// 0x4643d58
	void SwitchCameraToNormal();// 0x4643d3c
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x4643cc0
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0xffffff8a17adf2b0
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x4643cac
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0xffffff8a17adf2b0
	void StopCamShake();// 0x4643c90
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x4643c14
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x4643b98
	void StartCamShake();// 0x4643b7c
	void ShowNightVisionFrame();// 0x4643b60
	void ShowFootMark(STExtraVehicleBase* InVehicle);// 0x4643ae4
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x4643a54
	bool ShouldSetRotation();// 0x4643a14
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x4643970
	void SetupExtraLaunch_Stop(bool bClearVelocity);// 0x46438e4
	void SetupExtraLaunch(out const Vector InTargetLocation, float Duration);// 0x4643804
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x4643788
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x46436d0
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x46435cc
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x4643510
	void SetParachuteState(byte State);// 0x464348c
	void SetActorMoveable(bool bMoveable);// 0x4643408
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x46432d4
	void ServerRPC_UploadPersionalOp(SyncPersionalOPInfo NewPersonalOP);// 0x46431fc
	void ServerPreSetExtraJump(out const Vector InTargetLocation, out const Vector InStartLocationLocation, bool InAllowLaunch);// 0x46430c8
	void ServerOnApplicationactivated(bool bActive);// 0x4643004
	void S2C_ExtraLaunchCharacter_ServerForceStop(bool bClearVelocity);// 0x4642f80
	void RequestLoadParachuteAnim();// 0x4642f64
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x4642ea0
	bool ReplayCreateEnemyFrameUI();// 0x4642e60
	void ReleaseTrigger(enum Hand);// 0x4642ddc
	void RefreshBackWeaponAttachForBoneRetarget(byte InAdaptWeaponSlot);// 0x4642d58
	void RefreshAllAvatarVisibilityForBeObservedFinish();// 0x4642d44
	void RefreshAllAvatarVisibilityForBeObserved();// 0x4642d30
	void RefreshActivityAnimation();// 0x4642d1c
	void PushTrigger(enum Hand);// 0x4642c98
	void ProneWithTerrain(Rotator CharacterRotation, bool IsMoving, float Offset, float deap);// 0x4642b5c
	void PossessedBy(Controller* NewController);// 0x4642ad8
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0xffffff8a17adf2b0
	void ParachuteAnimSubInstanceNeedSwitch(bool bParam);// 0x4642a54
	void OnSkillStartDelegate__DelegateSignature(int SkillUID);// 0xffffff8a17adf2b0
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0xffffff8a17adf2b0
	void OnSelectedActorDelegate__DelegateSignature(out const ChooserActorInfo[] ChooserInfos);// 0xffffff8a17adf2b0
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0xffffff8a17adf2b0
	void OnScopeOutAction(bool InActionStart);// 0x46429d0
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0xffffff8a17adf2b0
	void OnScopeInAction(bool InActionStart);// 0x464294c
	void OnRepPlayerState(STExtraPlayerState* InPlayerState);// 0x46428d0
	void OnRep_STPlayerController();// 0x46428bc
	void OnRep_ReplayOPState();// 0x46428a8
	void OnRep_PlayerPartyDanceState();// 0x4642894
	void OnRep_ParachuteState(byte State);// 0x4642810
	void OnRep_IsEnablePickup();// 0x46427fc
	void OnRep_ChangePlatformGameFootEffect();// 0x46427e8
	void OnRep_AngleSightStateChanged();// 0x46427d4
	void OnRep_ActivityAnimationRepData();// 0x46427c0
	void OnRank(int Kills, int Rank);// 0x464270c
	void OnPlayerGetOnOffBigAirShipDelegate__DelegateSignature(Actor* Ship, bool bOn);// 0xffffff8a17adf2b0
	void OnPlayerControllerStateChanged(enum TargetStateType);// 0x4642688
	void OnPartyDanceAnimationLoaded(AnimMontage* InMontage);// 0x4642598
	void OnMiniTreeTriggerServerLogicCPP(FString ExMsg);// 0x464250c
	void OnLoadParachuteAnimCompleted();// 0x46424f8
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0xffffff8a17adf2b0
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0xffffff8a17adf2b0
	void OnFollowStateChange();// 0x46424dc
	void OnBPStateCheckIn();// 0xffffff8a17adf2b0
	void OnAvatarEquippedSucc(int SlotType, bool IsEquipped);// 0x464241c
	void OnApplicationactivatedDelegate__DelegateSignature(bool bIsActive);// 0xffffff8a17adf2b0
	void OnActorSelected(out const ChooserActorInfo[] SelectedActorInfos);// 0x4642380
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x46422f4
	void MiniTreeTriggerServerLogic_Multicast();// 0x4642294
	bool IsWeatherEffectEnabled(byte EffectType);// 0x4642204
	bool IsSwitchCoolingDownFinish();// 0x46421e0
	bool IsSelectedMetCondition(Actor* SelectedActor);// 0x4642148
	bool IsReplayViewTarget();// 0x4642108
	bool IsLocalControlOrView();// 0x46420d0
	bool IsIndoor();// 0x46420b0
	bool IsHoldAimButton();// 0xffffff8a17adf2b0
	bool IsGrenadeEmpty();// 0x4642070
	void InitPawnChooser();// 0x464205c
	void InitForEagleWatch(bool bCreate);// 0x4641fd8
	void InitFootMarkColor();// 0x4641fc4
	void InitAirAttackLocatorComponent();// 0x4641fb0
	void HideNightVisionFrame();// 0x4641f94
	void HideFootMark(STExtraVehicleBase* InVehicle);// 0x4641f18
	void HandleTrailDetachVehicle(STExtraVehicleBase* LastVehicle);// 0x4641e9c
	void HandleTrailAttachVehicle(STExtraVehicleBase* InVehicle);// 0x4641e20
	void HandlePlayerGetOnOffBigAirShip(Actor* Ship, bool bOn);// 0x4641d58
	void HandleParachuteAnimChanged(enum TargetStateType);// 0x4641cdc
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x4641b9c
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x4641a5c
	SceneComponent* GetWeaponAttachCompForBoneRetargetAdapt(const byte InWeaponSlot);// 0x46419c8
	float GetSwimRotateX_Ex();// 0x4641994
	int GetSkillIndexByActivityID();// 0xffffff8a17adf2b0
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x4641908
	int[] GetPlayerCurWearIDList(const bool IncludeHiddenAvatar);// 0x4641830
	ItemDefineID[] GetPlayerCurWearDefineIDList(const bool IncludeHiddenAvatar);// 0x4641758
	STExtraPlayerController* GetPlayerControllerSafety();// 0x464171c
	void GetOnVehicleDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	enum[] GetDisallowedStates(int ActivityID);// 0xffffff8a17adf2b0
	Vector GetBonePos(FName BoneName);// 0x464168c
	Rotator GetAngledSightRotator(STExtraShootWeapon* NewParam);// 0x46415f4
	void FreeFallShakeCam();// 0x46415e0
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x4641564
	void ExtraLaunchCharacter_Stop(bool bClearVelocity);// 0x46414a0
	void ExtraLaunchCharacter_ServerForceStop(bool bClearVelocity);// 0x4641414
	void ExtraLaunchCharacter(const Vector InTargetLocation, float Duration);// 0x4641320
	void EnterParachuteNone();// 0x464130c
	void EnablePickUp(bool IsEnable);// 0x4641288
	void DynamicCreateComponents();// 0x4641274
	void DumpCharacterAnimBPVars();// 0x4641260
	void DisableFallingDamageForPerioud(float Duration);// 0x46411dc
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x46410e0
	void ClientHUDStateCheck(float DeltaTime);// 0x4641064
	void ClearHPUI();// 0x4641048
	bool CanPerformExtraLaunch(out const Vector InTargetLocation);// 0x4640fa0
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x4640f10
	Vector CalculateExtraLaunchVelocity();// 0x4640ed0
	void C2S_ExtraLaunchCharacter_Stop(bool bClearVelocity);// 0x4640e4c
	void C2S_ExtraLaunchCharacter(out const Vector InTargetLocation, float Duration);// 0x4640d74
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x4640cdc

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0x158, Size: 0x8]// 0x75a85bc800
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x160, Size: 0x10]// 0x75a85bc900
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x170, Size: 0x30]// 0x75a85bc980
	CurveVector* NearClipToFOVCurve;//[Offset: 0x1a0, Size: 0x8]// 0x75a85bca00
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x1a8, Size: 0x8]// 0x75a85bca80
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x1b0, Size: 0x10]// 0x75a85bcb80
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x1c0, Size: 0x10]// 0x75a85bcc80
	<int,ScreenParticleEffectData> CustomScreenEffectMap;//[Offset: 0x1d0, Size: 0x50]// 0x75a85b3f00
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x220, Size: 0x10]// 0x75a85bce00
	CameraComponent* CurActiveCameraCache;//[Offset: 0x230, Size: 0x8]// 0x75a85bce80
	void StopScreenParticleEffect(byte EffectType);// 0x46f228c
	void StopScreenEffect(int InKey);// 0x46f2210
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x46f2144
	void StopAllScreenParticleEffect();// 0x46f2130
	void StopAllScreenAppearance();// 0x46f211c
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* tex);// 0x46f2020
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x46f1f68
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x46f1e48
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x46f1d78
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x46f1cc0
	void PlayScreenEffect(int InKey, out const ScreenParticleEffectData InEffectData);// 0x46f1b54
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x46f1a74
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI);// 0x46f1920
	void OnPlayScreenEffect_Internal(int InKey);// 0x46f18a4
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x46f1828
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x46f1790
	void HandleEffectLoadFinish(byte EffectType);// 0x46f1714

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 0x10]// 0x76122053e0
	float LifeSpan;//[Offset: 0x10, Size: 0x4]// 0x7612205370
	AppearanceMatPeriodData[] PeriodParams;//[Offset: 0x18, Size: 0x10]// 0x7612205080
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7612205000
	bool SetDiffParamIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x7612204f80
	AppearanceMatIndoorData[] IndoorParams;//[Offset: 0x30, Size: 0x10]// 0x7612204c90
	bool LastIndoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x7612204c10
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x7612204b90
	MaterialInterface* ParentMaterial;//[Offset: 0x48, Size: 0x28]// 0x7612204b10
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x70, Size: 0x8]// 0x7612204a90
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x78, Size: 0x8]// 0x7612204a10
	bool bHoldMatRef;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]// 0x7612204990
	MaterialInterface* LoadedMaterial;//[Offset: 0x88, Size: 0x8]// 0x7612204910

--------------------------------
Class: AppearanceMatPeriodData
	FName ParamName;//[Offset: 0x0, Size: 0x8]// 0x7612205300
	float HalfPeriod;//[Offset: 0x8, Size: 0x4]// 0x7612205290
	float CurrentTime;//[Offset: 0xc, Size: 0x4]// 0x7612205220

--------------------------------
Class: AppearanceMatIndoorData
	FName IndoorParamName;//[Offset: 0x0, Size: 0x8]// 0x7612204f10
	float IndoorRatio;//[Offset: 0x8, Size: 0x4]// 0x7612204ea0
	float prevValue;//[Offset: 0xc, Size: 0x4]// 0x7612204e30

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 0x8]// 0x7612204090

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 0x1]// 0x76122047f0
	bool bUseParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7612204770
	ParticleSystem* ParticleEffect;//[Offset: 0x8, Size: 0x28]// 0x76122046f0
	FName ParticleParamName;//[Offset: 0x30, Size: 0x8]// 0x7612204680
	FString[] ExtraScreenAppearanceList;//[Offset: 0x38, Size: 0x10]// 0x7612204590
	ParticleSystemComponent* EffectComponent;//[Offset: 0x48, Size: 0x8]// 0x7612204510
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x7612204490
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]// 0x7612204410
	float CurrentParamValue;//[Offset: 0x54, Size: 0x4]// 0x76122043a0
	bool bUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]// 0x7612204320
	CurveBase* Curve;//[Offset: 0x60, Size: 0x28]// 0x76122042a0
	bool bAutoStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]// 0x7612204220
	float Duration;//[Offset: 0x8c, Size: 0x4]// 0x76122041b0

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x820, Size: 0x30]// 0x75a8448980
	Transform FPPRelativeTransform;//[Offset: 0x850, Size: 0x30]// 0x75a8448a00
	Transform ScopeRelativeTransform;//[Offset: 0x880, Size: 0x30]// 0x75a8448a80
	void SetActivate(bool _IsActivate);// 0x444bcb0

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0x118, Size: 0x4]// 0x75c9913b60
	float AALOpenSensibility;//[Offset: 0x11c, Size: 0x4]// 0x75c9913bd0
	float OpenAALFOV;//[Offset: 0x120, Size: 0x4]// 0x75c9913c40
	int MaxDist;//[Offset: 0x124, Size: 0x4]// 0x75c9913cb0
	int minDist;//[Offset: 0x128, Size: 0x4]// 0x75c9913d20
	int DangerDist;//[Offset: 0x12c, Size: 0x4]// 0x75c9913d90
	CameraModifyData ADSModify;//[Offset: 0x130, Size: 0x170]// 0x75c98ce000
	bool bEnableServerConfirmItemExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]// 0x75c98ce080
	bool bLocationCheckStartLocUseCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]// 0x75c98ce100
	bool bNoWeaponAAlOpenAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]// 0x75c98ce180
	ParticleSystem* FreeArrowParticle;//[Offset: 0x2a8, Size: 0x28]// 0x75c98ce200
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x2d0, Size: 0x28]// 0x75c98ce280
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x2f8, Size: 0x8]// 0x75c98ce300
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x300, Size: 0x8]// 0x75c98ce380
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x308, Size: 0x8]// 0x75c98ce400
	float FixArrowScaleDistance;//[Offset: 0x314, Size: 0x4]// 0x75c9913e00
	float ArrowScaleFactor1;//[Offset: 0x318, Size: 0x4]// 0x75c9913e70
	float ArrowScalePlus1;//[Offset: 0x31c, Size: 0x4]// 0x75c9913ee0
	float ArrowScaleFactor2;//[Offset: 0x320, Size: 0x4]// 0x75c9913f50
	float ArrowScalePlus2;//[Offset: 0x324, Size: 0x4]// 0x75c9913fc0
	float BeginCheckDist;//[Offset: 0x328, Size: 0x4]// 0x75c9914030
	float ShortDist;//[Offset: 0x32c, Size: 0x4]// 0x75c99140a0
	byte ChannelType;//[Offset: 0x330, Size: 0x1]// 0x75c98ce480
	Vector TargetLocation;//[Offset: 0x334, Size: 0xc]// 0x75c98ce500
	bool bNotifyCallAirAttackLocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 0x1]// 0x75c98ce580
	float NotifyCallAALHorizontalDist;//[Offset: 0x348, Size: 0x4]// 0x75c9914110
	float NotifyCallAALVerticalDist;//[Offset: 0x34c, Size: 0x4]// 0x75c9914180
	bool bDispatchAssignedMarkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]// 0x75c98ce600
	void SwitchAALCamera(bool bOpen);// 0x411dbcc
	void SetLocatorFreeArrow(bool bAvaliable);// 0x411db48
	void SetItemExsist(bool bExsist);// 0x411dac4
	void SetFinalLocation();// 0x411dab0
	void SetAALFov(bool bOpen);// 0x411da2c
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x411d924
	void OnFreeArrowLoadFinsh();// 0x411d910
	void OnClientNotifiedCallAirAttackLocator();// 0x411d8f4
	void OnCalledActorLoadFinish(Vector Location);// 0x411d874
	void NotifyCallAirAttackLocator(Vector Location);// 0x411d7f4
	float GetTargetDistance();// 0x411d7c0
	bool GetAALAvaliable();// 0x411d788
	void ClientNotifiedCallAirAttackLocator();// 0x411d728
	bool CheckAALAvaliable();// 0x411d6e8

--------------------------------
Class: CameraModifyData
	FName ModifyName;//[Offset: 0x0, Size: 0x8]// 0x7611eaf7f0
	bool bFilterEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611eaf770
	enum OperateType;//[Offset: 0x9, Size: 0x1]// 0x7611eaf670
	bool bShowCategorySpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]// 0x7611eaf5f0
	bool bTargetArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]// 0x7611eaf570
	float TargetArmLength;//[Offset: 0xc, Size: 0x4]// 0x7611eaf500
	bool bModifyAttachRelativeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x7611eaf480
	Vector AttachRelativeLocation;//[Offset: 0x14, Size: 0xc]// 0x7611eaf400
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0x20, Size: 0x4]// 0x7611eaf390
	bool bDesiredRotationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x7611eaf310
	Rotator DesiredRotationOffset;//[Offset: 0x28, Size: 0xc]// 0x7611eaf290
	bool bIsRotationLimitShouldActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x7611eaf210
	bool bProbeSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]// 0x7611eaf190
	float ProbeSize;//[Offset: 0x38, Size: 0x4]// 0x7611eaf120
	bool bModifySpringArmUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]// 0x7611eaf0a0
	bool bSpringArmUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]// 0x7611eaf020
	bool bModifyDoCollisionTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]// 0x7611eaefa0
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]// 0x7611eaef20
	bool bModifyEnableCameraLag;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]// 0x7611eaeea0
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]// 0x7611eaee20
	bool bModifyEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]// 0x7611eaeda0
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]// 0x7611eaed20
	bool bModifyUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]// 0x7611eaeca0
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]// 0x7611eaec20
	float CameraLagSpeed;//[Offset: 0x40, Size: 0x4]// 0x7611eaebb0
	float CameraRotationLagSpeed;//[Offset: 0x44, Size: 0x4]// 0x7611eaeb40
	bool bModifyShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]// 0x7611eaeac0
	bool bShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]// 0x7611eaea40
	float ArmLengthInterpSpeed;//[Offset: 0x4c, Size: 0x4]// 0x7611eae9d0
	float TargetOffsetInterpSpeed;//[Offset: 0x50, Size: 0x4]// 0x7611eae960
	float SocketOffsetInterpSpeed;//[Offset: 0x54, Size: 0x4]// 0x7611eae8f0
	float DesiredRotationOffsetInterpSpeed;//[Offset: 0x58, Size: 0x4]// 0x7611eae880
	bool bShowCategoryAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]// 0x7611eae800
	SceneComponent* AttachParentComp;//[Offset: 0x60, Size: 0x8]// 0x7611eae780
	bool bAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]// 0x7611eae700
	FName AttachSocket;//[Offset: 0x70, Size: 0x8]// 0x7611eae690
	bool AttachKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x7611eae610
	Transform AttachRelativeTransform;//[Offset: 0x80, Size: 0x30]// 0x7611eae590
	bool OverrideSocketOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]// 0x7611eae510
	Vector SocketOffset;//[Offset: 0xb4, Size: 0xc]// 0x7611eae490
	bool bEnableModifySocketOffetZViaPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]// 0x7611eae410
	Vector2D SocketOffetPitchMapZOffset;//[Offset: 0xc4, Size: 0x8]// 0x7611eae390
	Vector2D SocketOffetPitchRange;//[Offset: 0xcc, Size: 0x8]// 0x7611eae310
	bool OverrideTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]// 0x7611eae290
	Vector TargetOffset;//[Offset: 0xd8, Size: 0xc]// 0x7611eae210
	bool bShowCategoryCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]// 0x7611eae190
	bool bModifyCameraUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1]// 0x7611eae110
	bool bCameraUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe5, Size: 0x1]// 0x7611eae090
	bool bFieldOfView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 0x1]// 0x7611eae010
	float FieldOfView;//[Offset: 0xe8, Size: 0x4]// 0x7611eadfa0
	float FieldOfViewInterpSpeed;//[Offset: 0xec, Size: 0x4]// 0x7611eadf30
	Vector SpringArmRelativeScale3D;//[Offset: 0xf0, Size: 0xc]// 0x7611eadeb0
	Transform CameraAdditiveOffset;//[Offset: 0x100, Size: 0x30]// 0x7611eade30
	bool bCameraRotOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]// 0x7611eaddb0
	Rotator CameraRotOffset;//[Offset: 0x134, Size: 0xc]// 0x7611eadd30
	float CameraRotOffsetInterpSpeed;//[Offset: 0x140, Size: 0x4]// 0x7611eadcc0
	bool bShowCategoryOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]// 0x7611eadc40
	bool bLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]// 0x7611eadbc0
	float LifeTime;//[Offset: 0x148, Size: 0x4]// 0x7611eadb50
	bool bAddiOperatePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]// 0x7611eadad0
	enum AddiOperatePriority;//[Offset: 0x14d, Size: 0x1]// 0x7611ead970
	FName[] ExclusionDataNames;//[Offset: 0x150, Size: 0x10]// 0x7611ead880
	FName[] SameGroupDataNames;//[Offset: 0x160, Size: 0x10]// 0x7611ead790

--------------------------------
Class: AirAttackLocatorCalledActor.Actor.Object
	float DestoryTime;//[Offset: 0x510, Size: 0x4]// 0x75c9914260
	float AirAttackDelayTime;//[Offset: 0x514, Size: 0x4]// 0x75c99142d0
	int IconID;//[Offset: 0x518, Size: 0x4]// 0x75c9914340
	float AttackAreaRadius;//[Offset: 0x51c, Size: 0x4]// 0x75c99143b0
	bool bMarkDispatchRange_All;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]// 0x75c98ceb80
	void DispatchAssignedMarkData(STExtraBaseCharacter* Character);// 0x411d104

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x930, Size: 0x10]// 0x75b4ddf000
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]// 0x75b4ddf080
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x4299a68

--------------------------------
Class: STParachuteCloudData
	enum WeatherType;//[Offset: 0x0, Size: 0x1]// 0x7611ee2300
	ParticleSystem* CloudFastAsset;//[Offset: 0x8, Size: 0x8]// 0x7611ee2280
	ParticleSystem* CloudSlowAsset;//[Offset: 0x10, Size: 0x8]// 0x7611ee2200

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 0x40]// 0x7611ee1a50
	SceneComponent* ParentComp;//[Offset: 0x40, Size: 0x8]// 0x7611ee19d0
	FName ParentSocketName;//[Offset: 0x48, Size: 0x8]// 0x7611ee1960
	float TargetArmLength;//[Offset: 0x54, Size: 0x4]// 0x7611ee18f0
	Vector SocketOffset;//[Offset: 0x58, Size: 0xc]// 0x7611ee1870
	Vector TargetOffset;//[Offset: 0x64, Size: 0xc]// 0x7611ee17f0
	Transform RelativeTransform;//[Offset: 0x70, Size: 0x30]// 0x7611ee1770
	float ProbeSize;//[Offset: 0xa0, Size: 0x4]// 0x7611ee1700
	byte ProbeChannel;//[Offset: 0xa4, Size: 0x1]// 0x7611ee1680
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]// 0x7611ee1600
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]// 0x7611ee1580
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7, Size: 0x1]// 0x7611ee1500
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]// 0x7611ee1480
	float CameraLagSpeed;//[Offset: 0xac, Size: 0x4]// 0x7611ee1410
	enum PerspectiveMode;//[Offset: 0xb0, Size: 0x1]// 0x7611ee12b0

--------------------------------
Class: CameraParams
	Transform RelativeTransform;//[Offset: 0x0, Size: 0x30]// 0x7611ee1c60
	float FieldOfView;//[Offset: 0x30, Size: 0x4]// 0x7611ee1bf0
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x7611ee1b70

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 0x1]// 0x7611ee08a0
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611ee0820

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 0x10]// 0x7611ee0050
	int ActivityID;//[Offset: 0x10, Size: 0x4]// 0x7611edffe0

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x590, Size: 0x10]// 0x761206f380
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x5a0, Size: 0x10]// 0x761206f300
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x5b0, Size: 0x10]// 0x761206f280
	delegate OnBattleResult;//[Offset: 0x5c0, Size: 0x10]// 0x761206f200
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]// 0x761206f180
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]// 0x761206f100
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 0x1]// 0x761206f080
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d3, Size: 0x1]// 0x761206f000
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x5d4, Size: 0xc]// 0x761206ef80
	float CurrentScale;//[Offset: 0x5e0, Size: 0x4]// 0x761206ef10
	int CurActTime;//[Offset: 0x5e4, Size: 0x4]// 0x761206eea0
	PlayerController*[] PlayerCDTable;//[Offset: 0x5e8, Size: 0x10]// 0x761206eda0
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]// 0x761206ed20
	FName SocketBaseTags;//[Offset: 0x600, Size: 0x8]// 0x761206ecb0
	float CurrentCarouselRotationAccel;//[Offset: 0x608, Size: 0x4]// 0x761206ec40
	float CurrentCarouselRotation;//[Offset: 0x60c, Size: 0x4]// 0x761206ebd0
	int CurrentInteractingPlayerCount;//[Offset: 0x610, Size: 0x4]// 0x761206eb60
	int PlayerNumberForTriggerEvent;//[Offset: 0x614, Size: 0x4]// 0x761206eaf0
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x618, Size: 0x10]// 0x761206e560
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x628, Size: 0x10]// 0x761206e0d0
	int AttachedNumber;//[Offset: 0x63c, Size: 0x4]// 0x761206e060
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x640, Size: 0x50]// 0x761206dec0
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x690, Size: 0x10]// 0x761206ddc0
	SkeletalAnimationSyncData[] PrevSkeletalAnimationSyncData;//[Offset: 0x6a0, Size: 0x10]// 0x761206dcc0
	Vector[] DropOffLocations;//[Offset: 0x6b0, Size: 0x10]// 0x761206dbc0
	enum DropOffLocationType;//[Offset: 0x6c0, Size: 0x1]// 0x761206da60
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 0x1]// 0x761206d9e0
	int AssociatedSkillIndex;//[Offset: 0x6c4, Size: 0x4]// 0x761206d970
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x6c8, Size: 0x10]// 0x761206d870
	byte IsDayTime;//[Offset: 0x6d8, Size: 0x1]// 0x761206d7f0
	bool bSimAnimUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 0x1]// 0x761206d770
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6da, Size: 0x1]// 0x761206d6f0
	Pawn*[] PawnDoneList;//[Offset: 0x6e0, Size: 0x10]// 0x761206d5f0
	bool bUseSkinWeightProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]// 0x761206d570
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 0x1]// 0x761206d4f0
	enum FixedDropOffLocationType;//[Offset: 0x6f2, Size: 0x1]// 0x761206d390
	Vector[] FixedRelativeDropPositions;//[Offset: 0x6f8, Size: 0x10]// 0x761206d290
	enum InteractiveObjectType;//[Offset: 0x708, Size: 0x1]// 0x761206d130
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 0x1]// 0x761206d0b0
	bool UseDropFixedPosition();// 0x47faad0
	void StopDancing_Multicast(const Actor*[] Players);// 0x47faa18
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x47fa91c
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x47fa86c
	static void SetupMinimapDisplay(UAEPlayerController* pController, out const LoveTreeData[] treeData);// 0x47fa7a0
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x47fa724
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0xffffff8a17adf2b0
	void ResetPCByTime(PlayerController* PlayerController, float CDTime);// 0x47fa66c
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x47fa5cc
	void OnStopDancing(out const Actor*[] Players);// 0x47fa530
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x47fa454
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x47fa3d0
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0xffffff8a17adf2b0
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0xffffff8a17adf2b0
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x47fa338
	void OnRep_SkeletalAnimationSyncData();// 0x47fa324
	void OnRep_ShowRabbitAnim();// 0x47fa308
	void OnRep_PawnDoneList();// 0x47fa2ec
	void OnRep_IsDayTime();// 0x47fa2d0
	void OnRep_CurrentScaleCPP();// 0x47fa2bc
	void OnRep_CurrentScaleBP();// 0xffffff8a17adf2b0
	void OnRep_CurrentInteractingPlayerCount();// 0x47fa258
	void OnRep_CurActTimeCPP();// 0x47fa1f4
	void OnRep_CurActTimeBP();// 0xffffff8a17adf2b0
	void OnRep_AttachedNumber();// 0x47fa190
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x47fa06c
	void OnPlayerNumberChanged(int Number);// 0xffffff8a17adf2b0
	void OnPlayerDettachedFromThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0xffffff8a17adf2b0
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0xffffff8a17adf2b0
	void OnPlayerBeforeAttachedToThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0xffffff8a17adf2b0
	void OnPlayerAttachedToThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0xffffff8a17adf2b0
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0xffffff8a17adf2b0
	void OnPCCDCleared(PlayerController* PlayerController);// 0xffffff8a17adf2b0
	void OnClientCurrentInteractingPlayerCountChanged();// 0xffffff8a17adf2b0
	void OnBattleResult__DelegateSignature();// 0xffffff8a17adf2b0
	bool IsDropFixedRelativePositionSetUp();// 0x47fa02c
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x47f9f9c
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x47f9f04
	STExtraBaseCharacter*[] GetAttachedPlayers();// 0x47f9e84
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x47f9d48
	bool CanTriggertEvent(Pawn* CurPawn);// 0xffffff8a17adf2b0
	int CacheAssociatedSkillIndex();// 0xffffff8a17adf2b0

--------------------------------
Class: UAERegionActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]// 0x7612057300
	enum RegionSize;//[Offset: 0x519, Size: 0x1]// 0x76120571a0
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 0x1]// 0x7612057120
	void ToggleRegionID(bool bOn);// 0x4ee3c34

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 0x4]// 0x761206b570
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x761206b4f0
	float TimeStamp;//[Offset: 0x8, Size: 0x4]// 0x761206b480

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 0x8]// 0x761206ea80
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 0x8]// 0x761206ea00
	Actor* AttachedPlayer;//[Offset: 0x10, Size: 0x8]// 0x761206e980
	Vector OffsetLoc;//[Offset: 0x18, Size: 0xc]// 0x761206e900
	Rotator OffsetRot;//[Offset: 0x24, Size: 0xc]// 0x761206e880
	AnimMontage* AnimMontage;//[Offset: 0x30, Size: 0x8]// 0x761206e800
	bool bFemaleUseDiffAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x761206e780
	AnimMontage* FemaleAnimMontage;//[Offset: 0x40, Size: 0x8]// 0x761206e700

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 0x8]// 0x761206e4f0
	Vector OffsetLoc;//[Offset: 0x8, Size: 0xc]// 0x761206e470
	Rotator OffsetRot;//[Offset: 0x14, Size: 0xc]// 0x761206e3f0
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 0x8]// 0x761206e370
	bool bFemaleUseDiffAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x761206e2f0
	AnimMontage* FemaleAnimMontage;//[Offset: 0x30, Size: 0x8]// 0x761206e270

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 0x8]// 0x761206ba00
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x761206b980

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 0x4]// 0x761206c950
	Vector Loc;//[Offset: 0x4, Size: 0xc]// 0x761206c8d0
	float minRate;//[Offset: 0x10, Size: 0x4]// 0x761206c860
	float maxRate;//[Offset: 0x14, Size: 0x4]// 0x761206c7f0

--------------------------------
Class: PawnChooserData
	bool MasterSwitchOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611edfbe0
	FString[] EnabledGameModeID;//[Offset: 0x8, Size: 0x10]// 0x7611edfaf0
	float DetectAngle;//[Offset: 0x18, Size: 0x4]// 0x7611edfa80
	Rotator RotationOffset;//[Offset: 0x1c, Size: 0xc]// 0x7611edfa00
	class Actor[] Classes;//[Offset: 0x28, Size: 0x10]// 0x7611edf900
	Vector LocationOffset;//[Offset: 0x38, Size: 0xc]// 0x7611edf880
	float DetectRaduis;//[Offset: 0x44, Size: 0x4]// 0x7611edf810
	float TickInterval;//[Offset: 0x48, Size: 0x4]// 0x7611edf7a0
	bool EnableDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]// 0x7611edf720
	bool IsConsideringVehicleBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]// 0x7611edf6a0
	float HorizontalTestRatio;//[Offset: 0x50, Size: 0x4]// 0x7611edf630
	float VerticalCoverRatio;//[Offset: 0x54, Size: 0x4]// 0x7611edf5c0
	bool DEBUGMODE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x7611edf540
	bool isSelectUIShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]// 0x7611edf4c0
	ChooserActorInfo[] PreChooserInfos;//[Offset: 0x70, Size: 0x10]// 0x7611edf3c0
	bool isDebugTrainingUIBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]// 0x7611edf340

--------------------------------
Class: ChooserActorInfo
	Actor* ChooseActor;//[Offset: 0x0, Size: 0x8]// 0x7611ed5770
	int ChooseDistance;//[Offset: 0x8, Size: 0x4]// 0x7611ed5700

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]// 0x7611edf0a0

--------------------------------
Class: PartyDanceStateData
	enum DanceState;//[Offset: 0x0, Size: 0x1]// 0x7611edee80
	SoftObjectPath Montage;//[Offset: 0x8, Size: 0x18]// 0x7611edee00

--------------------------------
Class: PartyDance
	AnimMontage* MontageToPlay;//[Offset: 0x0, Size: 0x28]// 0x7611edec60
	AnimMontage* MontageToPlay_FPP;//[Offset: 0x28, Size: 0x28]// 0x7611edebe0
	<int,AnimMontage*> ItemMontageMap;//[Offset: 0x50, Size: 0x50]// 0x7611edea40
	<int,AnimMontage*> ItemMontageMap_FPP;//[Offset: 0xa0, Size: 0x50]// 0x7611ede8a0

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0x158, Size: 0x10]// 0x75a83cdb00
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0x168, Size: 0x10]// 0x75a83cdb80
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]// 0x75a83cdc00
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]// 0x75a83cdc80
	ClientCircleFlow CurCircleFlow;//[Offset: 0x180, Size: 0x108]// 0x75a83cdd00
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x288, Size: 0x108]// 0x75a83cdd80
	HurtFlow CurHurtFlow;//[Offset: 0x390, Size: 0x120]// 0x75a83cde00
	ClientJumpFlow JumpFlow;//[Offset: 0x4b0, Size: 0xa8]// 0x75a83cde80
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x558, Size: 0x50]// 0x75a83cdf00
	float ReportJoyStickInterval;//[Offset: 0x6a0, Size: 0x4]// 0x75a83f4a80
	bool bFatalDamageNeedResetHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]// 0x75a83cdf80
	void StartOnPlane();// 0x449bac8
	void PlayerCanJump();// 0x449bab4
	void HandleSyncCircleInfo(int Index);// 0x449ba38
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x449b9bc
	void HandleCharacterCircleWaveOver(int Index);// 0x449b940
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x449b83c
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x449b7c0
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x449b744
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x449b60c
	void ExitParachute();// 0x449b5f8
	void EnterParachute();// 0x449b5e4
	void EnterJumping();// 0x449b5d0

--------------------------------
Class: ClientCircleFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 0x4]// 0x760d20bd30
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]// 0x760d231e00
	FString PicURL;//[Offset: 0x18, Size: 0x10]// 0x760d20be10
	uint32 GameStartTime;//[Offset: 0x28, Size: 0x4]// 0x760d20be80
	uint16 NewCircleBornTime;//[Offset: 0x2c, Size: 0x2]// 0x760d20bef0
	int NewCirclePositionX;//[Offset: 0x30, Size: 0x4]// 0x760d20bf60
	int NewCirclePositionY;//[Offset: 0x34, Size: 0x4]// 0x760d20bfd0
	int NewCirclePositionRadius;//[Offset: 0x38, Size: 0x4]// 0x760d20c040
	int8 NewCircleCount;//[Offset: 0x3c, Size: 0x1]// 0x760d20c0b0
	int PlayerPositionX;//[Offset: 0x40, Size: 0x4]// 0x760d20c120
	int PlayerPositionY;//[Offset: 0x44, Size: 0x4]// 0x760d20c190
	int PlayerPositionZ;//[Offset: 0x48, Size: 0x4]// 0x760d20c200
	int PlayerHP;//[Offset: 0x4c, Size: 0x4]// 0x760d20c270
	uint16 OldCircleMoveTime;//[Offset: 0x50, Size: 0x2]// 0x760d20c2e0
	uint16 OldCircleMoveEndTime;//[Offset: 0x52, Size: 0x2]// 0x760d20c350
	uint16 PlayerOutTime;//[Offset: 0x54, Size: 0x2]// 0x760d20c3c0
	byte CirclePoisonCount;//[Offset: 0x56, Size: 0x1]// 0x760d231e80
	int16 CirclePoisonMin;//[Offset: 0x58, Size: 0x2]// 0x760d20c430
	int16 CirclePoisonMax;//[Offset: 0x5a, Size: 0x2]// 0x760d20c4a0
	int16 CirclePoisonAvg;//[Offset: 0x5c, Size: 0x2]// 0x760d20c510
	int16 CirclePoisonTotal;//[Offset: 0x5e, Size: 0x2]// 0x760d20c580
	byte CirclePoisonDrop;//[Offset: 0x60, Size: 0x1]// 0x760d231f00
	byte CirclePoisonDead;//[Offset: 0x61, Size: 0x1]// 0x760d231f80
	byte RecoveryCount;//[Offset: 0x62, Size: 0x1]// 0x760d232000
	int RecoveryMin;//[Offset: 0x64, Size: 0x4]// 0x760d20c5f0
	int RecoveryMax;//[Offset: 0x68, Size: 0x4]// 0x760d20c660
	int RecoveryTotal;//[Offset: 0x6c, Size: 0x4]// 0x760d20c6d0
	int8 EnergyRecoveryCount;//[Offset: 0x70, Size: 0x1]// 0x760d20c740
	int EnergyRecoveryMin;//[Offset: 0x74, Size: 0x4]// 0x760d20c7b0
	int EnergyRecoveryMax;//[Offset: 0x78, Size: 0x4]// 0x760d20c820
	int EnergyRecoveryTotal;//[Offset: 0x7c, Size: 0x4]// 0x760d20c890
	int8 EnergyStartLv;//[Offset: 0x80, Size: 0x1]// 0x760d20c900
	uint16 EnergyStartTime;//[Offset: 0x82, Size: 0x2]// 0x760d20c970
	FString EnergyItemUse;//[Offset: 0x88, Size: 0x10]// 0x760d20c9e0
	uint16 EnergyLvTimeInfo;//[Offset: 0x98, Size: 0x2]// 0x760d20ca50
	FString EnergyRunFastTime;//[Offset: 0xa0, Size: 0x10]// 0x760d20cac0
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb0, Size: 0x10]// 0x760d20cb30
	int8 EnergyEndLv;//[Offset: 0xc0, Size: 0x1]// 0x760d20cba0
	uint16 EnergyEndTime;//[Offset: 0xc2, Size: 0x2]// 0x760d20cc10
	int PlayerMoveDis;//[Offset: 0xc4, Size: 0x4]// 0x760d20cc80
	uint16 PlayerSpeedMax;//[Offset: 0xc8, Size: 0x2]// 0x760d20ccf0
	uint16 PlayerSpeedAvg;//[Offset: 0xca, Size: 0x2]// 0x760d20cd60
	uint16 PlayerCarSpeedMax;//[Offset: 0xcc, Size: 0x2]// 0x760d20cdd0
	uint16 PlayerCarSpeedAvg;//[Offset: 0xce, Size: 0x2]// 0x760d20ce40
	int PlayerSquatMoveDis;//[Offset: 0xd0, Size: 0x4]// 0x760d20ceb0
	uint16 PlayerSquatMoveTime;//[Offset: 0xd4, Size: 0x2]// 0x760d20cf20
	int PlayerCreepMoveDis;//[Offset: 0xd8, Size: 0x4]// 0x760d20cf90
	uint16 PlayerCreepMoveTime;//[Offset: 0xdc, Size: 0x2]// 0x760d20d000
	int PlayerRunMoveDis;//[Offset: 0xe0, Size: 0x4]// 0x760d20d070
	uint16 PlayerRunMoveTime;//[Offset: 0xe4, Size: 0x2]// 0x760d20d0e0
	int PlayerDriveMoveDis;//[Offset: 0xe8, Size: 0x4]// 0x760d20d150
	uint16 PlayerDriveMoveTime;//[Offset: 0xec, Size: 0x2]// 0x760d20d1c0
	byte PlayerCar;//[Offset: 0xee, Size: 0x1]// 0x760d232080
	uint16 PlayerCameraDistanceMax;//[Offset: 0xf0, Size: 0x2]// 0x760d20d230
	byte SecCircleFlowID;//[Offset: 0xf2, Size: 0x1]// 0x760d232100
	byte AutoAimType;//[Offset: 0xf3, Size: 0x1]// 0x760d232180
	uint16 AutoAimTime;//[Offset: 0xf4, Size: 0x2]// 0x760d20d2a0
	byte[] MrpcsFlowData;//[Offset: 0xf8, Size: 0x10]// 0x760d232280

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]// 0x761157b050
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]// 0x761157b0c0
	FString GameAppID;//[Offset: 0x18, Size: 0x10]// 0x761157b130
	FString OpenID;//[Offset: 0x28, Size: 0x10]// 0x761157b1a0
	int8 PlatID;//[Offset: 0x38, Size: 0x1]// 0x761157b210
	int8 AreaID;//[Offset: 0x39, Size: 0x1]// 0x761157b280
	FString ZoneID;//[Offset: 0x40, Size: 0x10]// 0x761157b2f0
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]// 0x761157b360
	int64 ClientStartTime;//[Offset: 0x58, Size: 0x8]// 0x761157b3d0
	int8 MrpcsFlowcount_;//[Offset: 0x60, Size: 0x1]// 0x761157b440
	int[] MrpcsFlow;//[Offset: 0x68, Size: 0x10]// 0x760d234800
	FString UserName;//[Offset: 0x78, Size: 0x10]// 0x761157b520
	uint64 RoleID;//[Offset: 0x88, Size: 0x8]// 0x761157b590
	int8 RoleType;//[Offset: 0x90, Size: 0x1]// 0x761157b600
	FString EnemyOpenID;//[Offset: 0x98, Size: 0x10]// 0x761157b670
	FString EnemyUserName;//[Offset: 0xa8, Size: 0x10]// 0x761157b6e0
	uint64 EnemyRoleID;//[Offset: 0xb8, Size: 0x8]// 0x761157b750
	int EnemyRoleType;//[Offset: 0xc0, Size: 0x4]// 0x761157b7c0
	uint32 HurtTime;//[Offset: 0xc4, Size: 0x4]// 0x761157b830
	int HurtType;//[Offset: 0xc8, Size: 0x4]// 0x761157b8a0
	int DamageItemID;//[Offset: 0xcc, Size: 0x4]// 0x761157b910
	int hittype;//[Offset: 0xd0, Size: 0x4]// 0x761157b980
	int DamageStart;//[Offset: 0xd4, Size: 0x4]// 0x761157b9f0
	int DamageReduce;//[Offset: 0xd8, Size: 0x4]// 0x761157ba60
	int ArmorDef;//[Offset: 0xdc, Size: 0x4]// 0x761157bad0
	int HPStart;//[Offset: 0xe0, Size: 0x4]// 0x761157bb40
	int HPEnd;//[Offset: 0xe4, Size: 0x4]// 0x761157bbb0
	int ArmorHPStart1;//[Offset: 0xe8, Size: 0x4]// 0x761157bc20
	int ArmorHPEnd1;//[Offset: 0xec, Size: 0x4]// 0x761157bc90
	int ArmorHPStart2;//[Offset: 0xf0, Size: 0x4]// 0x761157bd00
	int ArmorHPEnd2;//[Offset: 0xf4, Size: 0x4]// 0x761157bd70
	int CarHPStart;//[Offset: 0xf8, Size: 0x4]// 0x761157bde0
	int CarHPEnd;//[Offset: 0xfc, Size: 0x4]// 0x761157be50
	int FallHeight;//[Offset: 0x100, Size: 0x4]// 0x761157bec0
	int HypoxiaTime;//[Offset: 0x104, Size: 0x4]// 0x761157bf30
	int HypoxiaHurtTotal;//[Offset: 0x108, Size: 0x4]// 0x761157bfa0
	int PlayerKilled;//[Offset: 0x10c, Size: 0x4]// 0x761157c010
	int ArmorKill;//[Offset: 0x110, Size: 0x4]// 0x761157c080
	int CarKill;//[Offset: 0x114, Size: 0x4]// 0x761157c0f0
	int IfIsAI;//[Offset: 0x118, Size: 0x4]// 0x761157c160
	uint32 HurtFlowID;//[Offset: 0x11c, Size: 0x4]// 0x761157c1d0

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]// 0x760d20a0c0
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]// 0x760d231c00
	FString MapName;//[Offset: 0x18, Size: 0x10]// 0x760d20a1a0
	int8 WeatherID;//[Offset: 0x28, Size: 0x1]// 0x760d20a210
	int64 GameStartTime;//[Offset: 0x30, Size: 0x8]// 0x760d20a280
	uint32 StartJumpTime;//[Offset: 0x38, Size: 0x4]// 0x760d20a2f0
	uint32 EndJumpTime;//[Offset: 0x3c, Size: 0x4]// 0x760d20a360
	uint32 PlayerJumpTime;//[Offset: 0x40, Size: 0x4]// 0x760d20a3d0
	uint32 PlayerOpenTime;//[Offset: 0x44, Size: 0x4]// 0x760d20a440
	uint32 PlayerLandTime;//[Offset: 0x48, Size: 0x4]// 0x760d20a4b0
	int PlayerJumpPositionX;//[Offset: 0x4c, Size: 0x4]// 0x760d20a520
	int PlayerJumpPositionY;//[Offset: 0x50, Size: 0x4]// 0x760d20a590
	int PlayerJumpPositionZ;//[Offset: 0x54, Size: 0x4]// 0x760d20a600
	int PlaneJumpPositionX;//[Offset: 0x58, Size: 0x4]// 0x760d20a670
	int PlaneJumpPositionY;//[Offset: 0x5c, Size: 0x4]// 0x760d20a6e0
	int PlaneJumpPositionZ;//[Offset: 0x60, Size: 0x4]// 0x760d20a750
	int PlayerLandPositionX;//[Offset: 0x64, Size: 0x4]// 0x760d20a7c0
	int PlayerLandPositionY;//[Offset: 0x68, Size: 0x4]// 0x760d20a830
	int PlayerLandPositionZ;//[Offset: 0x6c, Size: 0x4]// 0x760d20a8a0
	uint32 PlayerLandDistance;//[Offset: 0x70, Size: 0x4]// 0x760d20a910
	uint32 PlayerSpeedMax1;//[Offset: 0x74, Size: 0x4]// 0x760d20a980
	uint32 PlayerSpeedMax2;//[Offset: 0x78, Size: 0x4]// 0x760d20a9f0
	FString GVoiceTeamID;//[Offset: 0x80, Size: 0x10]// 0x760d20aa60
	FString GVoiceRoomID;//[Offset: 0x90, Size: 0x10]// 0x760d20aad0
	int GVoiceTeamMemberID;//[Offset: 0xa0, Size: 0x4]// 0x760d20ab40
	int GVoiceRoomMemberID;//[Offset: 0xa4, Size: 0x4]// 0x760d20abb0

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]// 0x761157e540
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 0x1]// 0x761157e5b0
	int GunID;//[Offset: 0xc, Size: 0x4]// 0x761157e620
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 0x4]// 0x761157e690
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 0x36]// 0x760d234f80

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 0x2]// 0x761157ed20
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 0x2]// 0x761157ed90
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 0x2]// 0x761157ee00
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 0x2]// 0x761157ee70
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 0x2]// 0x761157eee0
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 0x2]// 0x761157ef50
	int16 LeftMax;//[Offset: 0xc, Size: 0x2]// 0x761157efc0
	int16 RightMax;//[Offset: 0xe, Size: 0x2]// 0x761157f030
	int16 HorizontalTendency;//[Offset: 0x10, Size: 0x2]// 0x761157f0a0
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 0x2]// 0x761157f110
	int16 TimePerSwitch;//[Offset: 0x14, Size: 0x2]// 0x761157f180
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]// 0x760d235000
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 0x2]// 0x761157f1f0
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 0x2]// 0x761157f260
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 0x2]// 0x761157f2d0
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 0x2]// 0x761157f340
	int16 RecoilValueFail;//[Offset: 0x20, Size: 0x2]// 0x761157f3b0
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 0x2]// 0x761157f420
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 0x2]// 0x761157f490
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 0x2]// 0x761157f500
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 0x2]// 0x761157f570
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 0x2]// 0x761157f5e0
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x760d235080
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 0x2]// 0x761157f650
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 0x2]// 0x761157f6c0
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 0x2]// 0x761157f730
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 0x2]// 0x761157f7a0

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x6a8, Size: 0x10]// 0x75a831a200
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x6e7de7c
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x6e7dccc

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]// 0x75cdbe9e00
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8]// 0x75cdbe9e80
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x75cdbe9f00
	float BaseSizeX;//[Offset: 0x14, Size: 0x4]// 0x75d0a82370
	float BaseSizeY;//[Offset: 0x18, Size: 0x4]// 0x75d0a823e0
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8]// 0x75cdbe9f80

--------------------------------
Class: CustomVoiceGroup
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611edd110
	Vector VoicePosition;//[Offset: 0x4, Size: 0xc]// 0x7611edd090
	int ID;//[Offset: 0x10, Size: 0x4]// 0x7611edd020

--------------------------------
Class: CharacterFlyingComponent.ActorComponent.Object
	float AddForceWeaken;//[Offset: 0x158, Size: 0x4]// 0x75b4ebed10
	bool bFlyingSimulateUpdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]// 0x75b4e8f300
	float UpdownDeltaZOffset;//[Offset: 0x160, Size: 0x4]// 0x75b4ebed80
	float UpdownDeltaZOffsetMax;//[Offset: 0x164, Size: 0x4]// 0x75b4ebedf0
	enum[] EnterNotAllowedStateList;//[Offset: 0x168, Size: 0x10]// 0x75b4e8f480
	enum[] FlyingNotAllowedStateList;//[Offset: 0x178, Size: 0x10]// 0x75b4e8f600
	bool bFlyingStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]// 0x75b4e8f680
	bool bFlyingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]// 0x75b4e8f700
	Vector_NetQuantize100 FlyingMoveVelocity;//[Offset: 0x19c, Size: 0xc]// 0x75b4e8f780
	bool bIgnoreMoveWhenConflictInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]// 0x75b4e8f800
	int bAddforceUpOrDown;//[Offset: 0x1ac, Size: 0x4]// 0x75b4ebee60
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x1c0, Size: 0x8]// 0x75b4e8f880
	float HorizontalSpeedModifier;//[Offset: 0x1c8, Size: 0x4]// 0x75b4ebeed0
	float VerticalSpeedModifier;//[Offset: 0x1cc, Size: 0x4]// 0x75b4ebef40
	delegate OnFlyingMoveEnd;//[Offset: 0x1d0, Size: 0x10]// 0x75b4e8f900
	bool bSimulateCheckWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]// 0x75b4e8f980
	bool bSimulateMoveSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]// 0x75b4e8fa00
	bool bAllowSmoothCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 0x1]// 0x75b4e8fa80
	bool bAllowSmoothInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e3, Size: 0x1]// 0x75b4e8fb00
	float SmoothNetUpdateTime;//[Offset: 0x1e4, Size: 0x4]// 0x75b4ebefb0
	float SmoothNetUpdateRotationTime;//[Offset: 0x1e8, Size: 0x4]// 0x75b4ebf020
	float MaxAllowPositionDistanceSqAtAutonomousClient;//[Offset: 0x1ec, Size: 0x4]// 0x75b4ebf090
	float MaxAllowPositionToleranceAtSimulateClient;//[Offset: 0x1f0, Size: 0x4]// 0x75b4ebf100
	float MaxAllowRotationToleranceAtSimulateClient;//[Offset: 0x1f4, Size: 0x4]// 0x75b4ebf170
	float FreeFall_InputTriggerThreshold;//[Offset: 0x1f8, Size: 0x4]// 0x75b4ebf1e0
	float FreeFall_AcceForward;//[Offset: 0x1fc, Size: 0x4]// 0x75b4ebf250
	float FreeFall_MaxForwardSpeed;//[Offset: 0x200, Size: 0x4]// 0x75b4ebf2c0
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x204, Size: 0x4]// 0x75b4ebf330
	float FreeFall_AcceRight;//[Offset: 0x208, Size: 0x4]// 0x75b4ebf3a0
	float FreeFall_MaxRightSpeed;//[Offset: 0x20c, Size: 0x4]// 0x75b4ebf410
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x210, Size: 0x4]// 0x75b4ebf480
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x214, Size: 0x4]// 0x75b4ebf4f0
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x218, Size: 0x4]// 0x75b4ebf560
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x21c, Size: 0x4]// 0x75b4ebf5d0
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x220, Size: 0x4]// 0x75b4ebf640
	float DifferencePitchBetweenCharcterAndCamera;//[Offset: 0x224, Size: 0x4]// 0x75b4ebf6b0
	bool bOpenSimulateTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]// 0x75b4e8fb80
	STFlyingMoveState STReplicateFlyingMoveState;//[Offset: 0x22c, Size: 0x3c]// 0x75b4e8fc00
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x4253664
	void UpdateFlyingMoveState(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x425352c
	void UpdateFlyingJoystickSensitivity(float FlyingJoystickSensitivity);// 0x42534b0
	void UpdateFlyingAccurateMoveComponent(float DeltaTime);// 0x4253434
	void SetMaxRightSpeed(float MaxRightSpeed);// 0x42533bc
	void SetMaxForwardSpeed(float MaxForwardSpeed);// 0x4253344
	void ServerUpdateState(float TimeStamp, float InThrottleInput, float InSteeringInput, const Vector ClientLoc, const Rotator ControlRotation);// 0x425319c
	bool ServerStartFlying(float FallingTime, Vector DestPosition);// 0x42530cc
	bool ServerPauseFlying();// 0x4253094
	void ServerEnterFlyingState(bool bEnter, bool bSetParachuteAnim);// 0x4252fc4
	void PostNetReceiveNewState();// 0x4252fb0
	void PlayerAddImpulse(Vector Impulse, bool bVelocityChange);// 0x4252ee8
	void PlayerAddForce(bool bAdd, Vector Force);// 0x4252e18
	void OnRep_ReplicatedFlyingMoveState();// 0x4252e04
	void OnRep_bFlyingStart();// 0x4252df0
	void OnPreReconnectOnServer();// 0x4252ddc
	void OnPlayerExitParachute(STExtraPlayerCharacter* Character);// 0x4252d60
	void NotifyServerAddforceUpOrDown(int bUpOrDown);// 0x4252cb0
	void NotifyPlayerSimulateUpdown(bool bUpdown, float DeltaZOffset, float DeltaZOffsetMax);// 0x4252bb0
	void NotifyPlayerFlyingMove(bool bMove, Vector Velocity, bool bIgnoreWhenConflictInput);// 0x4252a9c
	void NotifyPlayerEnterFlying(bool bEnter, float FlyingJoystickSensitivity);// 0x42529d4
	void ModifyFlyingDisabledState(bool bMergeOrRemove, enum[] PawnStateList);// 0x42528b8
	bool IsFlying();// 0x425289c
	void GMServerStartFlying(float FallingTime, Vector DestPosition);// 0x42527a8
	float GetReplicatedRightInput();// 0x4252774
	float GetReplicatedForwardInput();// 0x4252740
	void ClientStartFlying(float FallingTime, Vector StartPosition, Vector DestPosition);// 0x42525f8
	void ClientPauseFlying();// 0x4252598
	void ClientEnterFlyingState(bool bEnter);// 0x42524d4
	void ClientAjustPosition(const Vector ServerLoc, const Rotator ServerRotation);// 0x42523e4

--------------------------------
Class: STFlyingMoveState
	bool bIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7612168ea0
	float ThrottleInput;//[Offset: 0x4, Size: 0x4]// 0x7612168e30
	float SteerInput;//[Offset: 0x8, Size: 0x4]// 0x7612168dc0
	Rotator ControlRotation;//[Offset: 0xc, Size: 0xc]// 0x7612168d40
	Vector_NetQuantize100 Location;//[Offset: 0x18, Size: 0xc]// 0x7612168cc0
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]// 0x7612168c40
	Vector_NetQuantize100 Velocity;//[Offset: 0x30, Size: 0xc]// 0x7612168bc0

--------------------------------
Class: SyncPersionalOPInfo
	int UniqueIndex;//[Offset: 0x0, Size: 0x4]// 0x7611ed9230
	byte OPType;//[Offset: 0x4, Size: 0x1]// 0x7611ed9150

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	float voiceCheckCD;//[Offset: 0xc64, Size: 0x4]// 0x7611e26950
	float voiceCheckShowCD;//[Offset: 0xc68, Size: 0x4]// 0x7611e268e0
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 0x1]// 0x7611e26860
	bool bFlushBulletHitDataOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 0x1]// 0x7611e267e0
	float voiceCheckLeaveTime;//[Offset: 0xc70, Size: 0x4]// 0x7611e26770
	Vector voiceCheckVector;//[Offset: 0xc74, Size: 0xc]// 0x7611e266f0
	float voiceDelayTime;//[Offset: 0xc80, Size: 0x4]// 0x7611e26680
	bool isInVoiceDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84, Size: 0x1]// 0x7611e26600
	bool IsVoiceCheckSlience;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc85, Size: 0x1]// 0x7611e26580
	enum[] CanReloadStateList;//[Offset: 0xc88, Size: 0x10]// 0x7611e26400
	enum[] CanAutoTryingToFireStateList;//[Offset: 0xc98, Size: 0x10]// 0x7611e26280
	bool bHasFinishedLoadingBulletTrackSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 0x1]// 0x7611e26200
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0xcac, Size: 0x5c]// 0x7611e253f0
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd08, Size: 0x1]// 0x7611e25370
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd09, Size: 0x1]// 0x7611e252f0
	bool bUseFixShootIDGen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0a, Size: 0x1]// 0x7611e25270
	int DynamicReloadType;//[Offset: 0xd0c, Size: 0x4]// 0x7611e25200
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0xd10, Size: 0x10]// 0x7611e25180
	delegate OnCurBulletChange;//[Offset: 0xd20, Size: 0x10]// 0x7611e25100
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0xd30, Size: 0x10]// 0x7611e25080
	delegate OnStartFireDelegate;//[Offset: 0xd40, Size: 0x10]// 0x7611e25000
	delegate OnStopFireDelegate;//[Offset: 0xd50, Size: 0x10]// 0x7611e24f80
	delegate OnWeaponShootDelegate;//[Offset: 0xd60, Size: 0x10]// 0x7611e24f00
	delegate OnWeaponShootCommonDelegate;//[Offset: 0xd70, Size: 0x10]// 0x7611e24e80
	delegate OnWeaponShootHitDelegate;//[Offset: 0xd80, Size: 0x10]// 0x7611e24e00
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xd90, Size: 0x10]// 0x7611e24d80
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xda0, Size: 0x10]// 0x7611e24d00
	delegate OnWeaponEquipDelegate;//[Offset: 0xdb0, Size: 0x10]// 0x7611e24c80
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xdc0, Size: 0x10]// 0x7611e24c00
	delegate OnEquipAttachmentDelegate;//[Offset: 0xdd0, Size: 0x10]// 0x7611e24b80
	delegate OnUnequipAttachmentDelegate;//[Offset: 0xde0, Size: 0x10]// 0x7611e24b00
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xdf0, Size: 0x10]// 0x7611e24a80
	delegate OnBulletNumChangeDelegate;//[Offset: 0xe00, Size: 0x10]// 0x7611e24a00
	delegate OnBulletHitDelegate;//[Offset: 0xe10, Size: 0x10]// 0x7611e24980
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xe20, Size: 0x10]// 0x7611e24900
	delegate OnShootWeaponAutoDrop;//[Offset: 0xe30, Size: 0x10]// 0x7611e24880
	delegate OnWeaponDropStart;//[Offset: 0xe40, Size: 0x10]// 0x7611e24800
	delegate OnWeaponDropFinished;//[Offset: 0xe50, Size: 0x10]// 0x7611e24780
	delegate OnChangeAmmoDelegate;//[Offset: 0xe60, Size: 0x10]// 0x7611e24700
	delegate OnScopeIn;//[Offset: 0xe70, Size: 0x10]// 0x7611e24680
	delegate OnScopeOut;//[Offset: 0xe80, Size: 0x10]// 0x7611e24600
	delegate OnScopeInContinue;//[Offset: 0xe90, Size: 0x10]// 0x7611e24580
	delegate OnMaxBulletChange;//[Offset: 0xea0, Size: 0x10]// 0x7611e24500
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xeb0, Size: 0x10]// 0x7611e24480
	delegate OnBulletBeforeShootDelegate;//[Offset: 0xec0, Size: 0x10]// 0x7611e24400
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xed0, Size: 0x8]// 0x7611e24380
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xed8, Size: 0x8]// 0x7611e24300
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xee0, Size: 0x8]// 0x7611e24280
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xee8, Size: 0x8]// 0x7611e24200
	int CurBulletNumInClip;//[Offset: 0xef0, Size: 0x4]// 0x7611e24190
	int CurMaxBulletNumInOneClip;//[Offset: 0xef4, Size: 0x4]// 0x7611e24120
	int CurBulletNumInBarrel;//[Offset: 0xef8, Size: 0x4]// 0x7611e240b0
	byte ShootMode;//[Offset: 0xefc, Size: 0x1]// 0x7611e24030
	byte CurShootType;//[Offset: 0xefd, Size: 0x1]// 0x7611e23fb0
	int CurShootTotalType;//[Offset: 0xf00, Size: 0x4]// 0x7611e23f40
	float VoiceCheckDis;//[Offset: 0xf04, Size: 0x4]// 0x7611e23ed0
	float SilenceVoiceCheckDis;//[Offset: 0xf08, Size: 0x4]// 0x7611e23e60
	float nowVoiceCheckDis;//[Offset: 0xf0c, Size: 0x4]// 0x7611e23df0
	Vector ShootTargetLoc;//[Offset: 0xf10, Size: 0xc]// 0x7611e23d70
	float DeviationScale;//[Offset: 0xf1c, Size: 0x4]// 0x7611e23d00
	bool bUpdateAnimToAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 0x1]// 0x7611e23c80
	int AngledSightID;//[Offset: 0xf24, Size: 0x4]// 0x7611e23c10
	byte TraceChannel;//[Offset: 0xf28, Size: 0x1]// 0x7611e23b90
	Vector LastImpactEffectLocation;//[Offset: 0xf2c, Size: 0xc]// 0x7611e23b10
	float LastImpactEffectTime;//[Offset: 0xf38, Size: 0x4]// 0x7611e23aa0
	int BurstShootBulletsNum;//[Offset: 0xf3c, Size: 0x4]// 0x7611e23a30
	int CurBurstShootIndex;//[Offset: 0xf40, Size: 0x4]// 0x7611e239c0
	Transform BoltActionTransform;//[Offset: 0xf50, Size: 0x30]// 0x7611e23940
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80, Size: 0x1]// 0x7611e238c0
	int ClientShootTimes;//[Offset: 0xf84, Size: 0x4]// 0x7611e23850
	AkAudioEvent* BulletFlySound;//[Offset: 0xf88, Size: 0x8]// 0x7611e237d0
	AkAudioEvent* LoadBulletSound;//[Offset: 0xf90, Size: 0x8]// 0x7611e23750
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xf98, Size: 0x8]// 0x7611e236d0
	AkAudioEvent* MagazineINSound;//[Offset: 0xfa0, Size: 0x8]// 0x7611e23650
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xfa8, Size: 0x8]// 0x7611e235d0
	AkAudioEvent* PullBoltSound;//[Offset: 0xfb0, Size: 0x8]// 0x7611e23550
	Vector BulletDecalScale;//[Offset: 0xfb8, Size: 0xc]// 0x7611e234d0
	int CurBulletNumInClipOnSimulatedClients;//[Offset: 0xfc4, Size: 0x4]// 0x7611e23460
	bool bWantsToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc8, Size: 0x1]// 0x7611e233e0
	float CurAutoReloadCD;//[Offset: 0xfcc, Size: 0x4]// 0x7611e23370
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 0x1]// 0x7611e232f0
	bool bAutoDropWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd1, Size: 0x1]// 0x7611e23270
	float DropDuration;//[Offset: 0xfd4, Size: 0x4]// 0x7611e23200
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xfd8, Size: 0x8]// 0x7611e23180
	WeaponVisualBulletClientModeConfigNew BulletTrackSkinConfig;//[Offset: 0xfe0, Size: 0xa8]// 0x7611e23100
	float BulletFireSpeedModifier;//[Offset: 0x1088, Size: 0x4]// 0x7611e23090
	<byte,ShootingBehaviorPatternBase*> ShootingBehaviorPatternMap;//[Offset: 0x1090, Size: 0x50]// 0x7611e22ee0
	byte SpecialFixShootType;//[Offset: 0x10e0, Size: 0x1]// 0x7611e22e60
	byte LastShootType;//[Offset: 0x10e1, Size: 0x1]// 0x7611e22de0
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e2, Size: 0x1]// 0x7611e22d60
	byte CurShootWeaponState;//[Offset: 0x10f0, Size: 0x1]// 0x7611e22c80
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0x1100, Size: 0x8]// 0x7611e22c00
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0x1108, Size: 0x8]// 0x7611e22b80
	ShootWeaponAutoTestHandle* AutoTestHandle;//[Offset: 0x1110, Size: 0x8]// 0x7611e22b00
	ShootWeaponAmmoManager* ShootWeaponAmmoManager;//[Offset: 0x1118, Size: 0x8]// 0x7611e22a80
	int md_MaxBulletArraySize;//[Offset: 0x1120, Size: 0x4]// 0x7611e22a10
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1124, Size: 0x1]// 0x7611e22990
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1125, Size: 0x1]// 0x7611e22910
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1126, Size: 0x1]// 0x7611e22890
	Vector OffsetFPPLocation;//[Offset: 0x1128, Size: 0xc]// 0x7611e22810
	Rotator OffsetFPPRotation;//[Offset: 0x1134, Size: 0xc]// 0x7611e22790
	Vector OffsetFPPCrouchLocation;//[Offset: 0x1140, Size: 0xc]// 0x7611e22710
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x114c, Size: 0xc]// 0x7611e22690
	Vector OffsetFPPProneLocation;//[Offset: 0x1158, Size: 0xc]// 0x7611e22610
	Rotator OffsetFPPProneRotation;//[Offset: 0x1164, Size: 0xc]// 0x7611e22590
	Rotator OffsetFPPScopeRotation;//[Offset: 0x1170, Size: 0xc]// 0x7611e22510
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117c, Size: 0x1]// 0x7611e22490
	Vector OffsetTrueFPPLocation;//[Offset: 0x1180, Size: 0xc]// 0x7611e22410
	Rotator OffsetTrueFPPRotation;//[Offset: 0x118c, Size: 0xc]// 0x7611e22390
	Vector OffsetTrueFPPCrouchLocation;//[Offset: 0x1198, Size: 0xc]// 0x7611e22310
	Rotator OffsetTrueFPPCrouchRotation;//[Offset: 0x11a4, Size: 0xc]// 0x7611e22290
	Vector OffsetTrueFPPProneLocation;//[Offset: 0x11b0, Size: 0xc]// 0x7611e22210
	Rotator OffsetTrueFPPProneRotation;//[Offset: 0x11bc, Size: 0xc]// 0x7611e22190
	Rotator OffsetTrueFPPScopeRotation;//[Offset: 0x11c8, Size: 0xc]// 0x7611e22110
	bool bUseTrueFPPOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d4, Size: 0x1]// 0x7611e22090
	bool bShootUseCameraRotatorADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d5, Size: 0x1]// 0x7611e22010
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0x11d8, Size: 0x10]// 0x7611e21e90
	int[] AttachedAttachmentID;//[Offset: 0x11e8, Size: 0x10]// 0x7611e21da0
	int[] DefaultAttachedAttachmentID;//[Offset: 0x11f8, Size: 0x10]// 0x7611e21cb0
	<enum,ItemDefineID> AttachmentSocketAttachedCached;//[Offset: 0x1208, Size: 0x50]// 0x7611e21a80
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0x1288, Size: 0x8]// 0x7611e21a00
	BulletHitInfoRepData[] BulletHitDataRepArray;//[Offset: 0x12a0, Size: 0x10]// 0x7611e21400
	float HitDataTimeOut;//[Offset: 0x12c0, Size: 0x4]// 0x7611e21390
	bool bNeedForceSyncSimulatedClientsBulletsNumAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c4, Size: 0x1]// 0x7611e21310
	bool bIsInfiniteBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 0x1]// 0x7611e21290
	enum CurShootIntervalMode;//[Offset: 0x12d1, Size: 0x1]// 0x7611e21190
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1424, Size: 0x1]// 0x7611e21110
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1425, Size: 0x1]// 0x7611e21090
	<int,AnimationAsset*> ScopeAnimMap;//[Offset: 0x1428, Size: 0x50]// 0x7611e20ef0
	CacheCriticalVerifyShootParam[] CacheCriticalVerifyShootParamList;//[Offset: 0x1478, Size: 0x10]// 0x7611e20df0
	int CurCacheCriticalVerifyShootParamIdx;//[Offset: 0x1488, Size: 0x4]// 0x7611e20d80
	CacheCriticalVerifyBulletHitUploadParam[] CacheCriticalVerifyBulletHitUploadParamList;//[Offset: 0x1490, Size: 0x10]// 0x7611e20c80
	int CurCacheCriticalVerifyBulletHitUploadParamIdx;//[Offset: 0x14a0, Size: 0x4]// 0x7611e20c10
	int[] LastFrameEquipAttachtments;//[Offset: 0x14a8, Size: 0x10]// 0x7611e20b20
	int[] LastFrameUnequipAttachtments;//[Offset: 0x14b8, Size: 0x10]// 0x7611e20a30
	void UploadHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x46a726c
	void UpdateComponentTick();// 0x46a7258
	void UnRegisterScopeAnim(byte AnimType);// 0x46a71dc
	void UnRegisterAllScopeAnim();// 0x46a71c8
	void SwitchWeaponSight();// 0x46a71ac
	void StopFireInUGC();// 0x46a7198
	bool StopFireFilter();// 0x46a7158
	void StopFire(enum ToState);// 0x46a70d4
	int StartReload();// 0x46a7098
	void StartFireInUGC();// 0x46a7084
	bool StartFireFilter();// 0x46a7044
	void StartFire();// 0x46a7028
	int StartDropWeapon();// 0x46a6fec
	void StartDoPreBarrel(float HandledTime);// 0x46a6f68
	void StartDoBarrel();// 0x46a6f4c
	void ShowDefaultScope(bool bShow);// 0x46a6ec8
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x46a6e08
	bool ShouldVerifyWeaponFireInfoTime();// 0x46a6dc8
	bool ShouldVerifyShootProjectileBullet();// 0x46a6d88
	bool ShouldVerifyProjectileShootInf();// 0x46a6d48
	void SetVerticalRecoilSacle(float VerticalRecoilSacle);// 0x46a6ccc
	void SetTacticalReloadTime(float TacticalReloadTime);// 0x46a6c50
	void SetSpecialFixShootTypeOnServer(byte InSpecialFixShootType);// 0x46a6bd4
	void SetShootIntervalTime(float ShootIntervalTime);// 0x46a6b58
	void SetReloadTypeOnServer(byte ReloadType);// 0x46a6adc
	void SetReloadTime(float ReloadTime);// 0x46a6a60
	void SetMaxBulletNumInOneClip(int MaxBulletNumInOneClip);// 0x46a69e4
	void SetIsInfiniteBulletNum(bool bEnable);// 0x46a6960
	void SetHorizontalRecoilSacle(float HorizontalRecoilSacle);// 0x46a68e4
	void SetDeviationSacle(float DeviationSacle);// 0x46a6868
	bool SetCurShootType(byte ShootType);// 0x46a67d0
	void SetCurShootMode(byte InShootMode);// 0x46a674c
	void SetCurrentBulletNumInClipOnServer(int Count, bool bMulticastToClient);// 0x46a668c
	void SetCurrentBulletNumInClipOnClient(int Count);// 0x46a6610
	void SetCurReloadMethod(byte method);// 0x46a6594
	void SetBulletRange(float BulletRange);// 0x46a6518
	void SetBulletMinimumDamage(float BulletMinimumDamage);// 0x46a649c
	void SetBulletImpulse(float BulletImpulse);// 0x46a6420
	void SetBulletFireSpeed(float BulletFireSpeed);// 0x46a63a4
	void SetBulletBaseDamage(float BulletBaseDamage);// 0x46a6328
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x46a6248
	bool ScopeOut();// 0x46a6208
	void ScopeInContinue();// 0x46a61f4
	bool ScopeIn();// 0x46a61b4
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x46a6130
	void RPC_ServerUnequipAttachment(int AttachmentID);// 0x46a6080
	void RPC_ServerEquipAttachment(int AttachmentID);// 0x46a5fd0
	void RPC_ClientUnequipAttachment(int AttachmentID);// 0x46a5f20
	void RPC_ClientSetCurShootType(byte ShootType);// 0x46a5e70
	void RPC_ClientSetCurReloadMethod(byte method);// 0x46a5dc0
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x46a5d3c
	void RPC_ClientEquipAttachment(int AttachmentID);// 0x46a5c8c
	void RPC_Client_SetBulletNumInClip(int Count);// 0x46a5bdc
	void RotateCrossHair(Rotator Rot);// 0x46a5b60
	void ReturnAllBulletsToBackpack(bool SyncFlush);// 0x46a5ad4
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x46a5a50
	bool ReloadStateCheck();// 0x46a5a10
	void RegisterScopeAnim(byte AnimType);// 0x46a5994
	void RegisterNewHitEffectDataAsset();// 0x46a5978
	void RefreshDirtyBullet();// 0x46a5964
	void PreConditionalSpawnImpactEffect(out const BulletHitInfoUploadData InImpactResult, out BulletHitInfoUploadData OutImpactResult);// 0x46a5798
	void PreCalShootTargetLocation(out const Rotator shootRot);// 0xffffff8a17adf2b0
	void PreCacheCriticalVerifyShootParam(out const CacheCriticalVerifyShootParam InParam, out CacheCriticalVerifyShootParam OutParam);// 0x46a55a8
	void PreCacheCriticalVerifyBulletHitUploadParam(out const CacheCriticalVerifyBulletHitUploadParam InParam, out CacheCriticalVerifyBulletHitUploadParam OutParam);// 0x46a546c
	void PostReloadOnServer(int ReloadNum);// 0x46a53e8
	void PostChangeShootType(byte OldShootType);// 0x46a5364
	void PostCalShootTargetLocation(out const HitResult OutHit, out const Vector OutRet);// 0xffffff8a17adf2b0
	int OverrideFireShotCostBulletNum(out const int InCostNum);// 0x46a52c0
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0xffffff8a17adf2b0
	void OnWeaponShootDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnWeaponShootCommonDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0xffffff8a17adf2b0
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0xffffff8a17adf2b0
	void OnWeaponEquipDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnUnequipAttachmentDelegate__DelegateSignature(int AttachmentID);// 0xffffff8a17adf2b0
	void OnStopFireDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnStartFireDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnShootWeaponDrop__DelegateSignature();// 0xffffff8a17adf2b0
	void OnShootWeaponAutoReloadDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnShootWeaponAutoDrop__DelegateSignature();// 0xffffff8a17adf2b0
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnScopeOut__DelegateSignature();// 0xffffff8a17adf2b0
	void OnScopeInContinue__DelegateSignature();// 0xffffff8a17adf2b0
	void OnScopeIn__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRep_SpecialFixShootType(byte OldSpecialFixShootType);// 0x46a5244
	void OnRep_RepWeaponID(int OldVar);// 0x46a51c0
	void OnRep_OwnerClientCreateWeaponData();// 0x46a51a4
	void OnRep_HitDataArray();// 0x46a5190
	void OnRep_DynamicReloadType(int OldVal);// 0x46a510c
	void OnRep_CurShootType(byte OldShootType);// 0x46a5088
	void OnRep_CurMaxBulletNumChange();// 0x46a5074
	void OnRep_CurCurShootIntervalMode();// 0x46a5060
	void OnRep_CurBulletNumInClipOnSimulatedClients();// 0x46a504c
	void OnRep_BulletTrackSkinConfig();// 0x46a5038
	void OnRep_bIsInfiniteBulletNum();// 0x46a5024
	void OnPostChangeAmmoType();// 0x46a5008
	void OnMaxBulletChange__DelegateSignature();// 0xffffff8a17adf2b0
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0xffffff8a17adf2b0
	void OnEquipAttachmentDelegate__DelegateSignature(int AttachmentID);// 0xffffff8a17adf2b0
	void OnCurBulletChange__DelegateSignature();// 0xffffff8a17adf2b0
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnChangeAmmoDelegate__DelegateSignature(ItemDefineID AmmoDefineID);// 0xffffff8a17adf2b0
	void OnBulletNumChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnBulletHitDelegate__DelegateSignature(Actor* InHitActor, float ImpactPosDistanceToWeapon, Pawn* Player);// 0xffffff8a17adf2b0
	void OnBulletBeforeShootDelegate__DelegateSignature(STExtraShootWeaponBulletBase* Bullet);// 0xffffff8a17adf2b0
	void OnAvatarLoadFinish(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x46a4f50
	void NotifyServerNoneShootAction();// 0x46a4ef0
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x46a4e74
	void NotifyClientNoneShootAction();// 0x46a4e14
	void LocalSetBulletNumInClip(int Count);// 0x46a4d98
	bool IsVehicleWeapon();// 0x46a4d60
	bool IsInPreFire();// 0x46a4d28
	bool IsEnableReloadADS();// 0x46a4d08
	bool IsDriverVehicleWeapon();// 0x46a4cd0
	bool HaveWeaponSight();// 0x46a4c90
	void HandleWeaponScopeUnEquiped(enum Type);// 0x46a4c14
	void HandleWeaponScopeEquiped(enum Type);// 0x46a4b98
	float GetWeaponSightFovOffset();// 0x46a4b5c
	byte GetWeaponReloadType();// 0x46a4b28
	float GetWeaponReloadTimeNew(bool bForceTactical);// 0x46a4a8c
	int GetWeaponID();// 0x46a4a58
	bool GetWeaponHasInfiniteBulletsFromEntity();// 0x46a4a20
	int GetWeaponEntityInitBulletInClip();// 0x46a49ec
	float GetWeaponBodyLength();// 0x46a49b8
	float GetWeaponAngularVelocityDeviationFactor();// 0x46a497c
	float GetWeaponAngularVelocity();// 0x46a4940
	void GetWeaponAmmoIDListSortWithPriority(out int[] OutList);// 0x46a48ac
	float GetWeaponAimFOV();// 0x46a4878
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x46a46fc
	ParticleSystem* GetVisualBulletTrackFX();// 0x46a46c8
	bool GetVisualBulletTrackEnabled();// 0x46a4690
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x46a465c
	float GetVerticalRecoilFactorModifier();// 0x46a4628
	FName GetVerifyScopeSocketNameFromEntity();// 0x46a45f4
	float GetTraceDistanceFromEntity();// 0x46a45c0
	float GetTacticalReloadTime();// 0x46a458c
	int GetSpesificAmmoAvailableNumInBackpack(int AmmoID, bool bAdjustInfiniteBullets);// 0x46a44b4
	FName GetSilencerSocketNameFromEntity();// 0x46a4480
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x46a444c
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x46a4418
	byte GetShootTypeFromEntity();// 0x46a43e4
	float GetShootIntervalTime();// 0x46a43b0
	int GetShootIntervalShowNumberFromEntity();// 0x46a437c
	float GetShootIntervalFromEntity();// 0x46a4348
	ShootingBehaviorPatternBase* GetShootingBehaviorPatternByShootType(byte ShootType);// 0x46a42bc
	FName GetShellDropSocketNameFromEntity();// 0x46a4288
	int GetScopeID(bool bIsAngledOpticalSight);// 0x46a41f4
	Transform GetScopeAimTransformCommon();// 0x46a4198
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x46a408c
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x46a3f88
	float GetReloadTimeMagOutFromEntity();// 0x46a3f54
	float GetReloadTimeFromEntity();// 0x46a3f20
	float GetReloadTime();// 0x46a3eec
	FString GetReloadTIDPostfixByReloadType(byte ReloadType, bool bTactical);// 0x46a3dd0
	FName GetReloadTIDNameNew(byte method);// 0x46a3d3c
	FName GetReloadTIDName(byte method);// 0x46a3ca8
	float GetReloadTacticalTimeFromEntity();// 0x46a3c74
	float GetReloadDurationStartFromEntity();// 0x46a3c40
	float GetReloadDurationLoopFromEntity();// 0x46a3c0c
	float GetReloadAnimRateScaleModifier();// 0x46a3bd8
	Transform GetRelativeMuzzleTransform();// 0x46a3b7c
	float GetReferenceDistance();// 0x46a3b48
	float GetRangeModifier();// 0x46a3b14
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x46a3a94
	float GetPreFireTimeFromEntity();// 0x46a3a60
	float GetPostReloadTimeFromEntity();// 0x46a3a2c
	float GetPostFireTimeFromEntity();// 0x46a39f8
	Transform GetMuzzleTransform();// 0x46a399c
	FName GetMuzzleSocketNameFromEntity();// 0x46a3960
	float GetMaxValidHitTimeFromEntity();// 0x46a392c
	int GetMaxProjectileBulletsNumSingleShotFromEntity();// 0x46a38f8
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x46a38c4
	int GetMaxBulletNumInOneClipFromEntity();// 0x46a3890
	int GetMaxBulletNumInBarrelFromEntity();// 0x46a385c
	int GetInitBulletNumInClipFromEntity();// 0x46a3828
	float GetImpactEffectSkipDistanceFromEntity();// 0x46a37f4
	float GetHorizontalRecoilFactorModifier();// 0x46a37c0
	float GetHitPartCoff_Limbs(bool bTargetIsMonster);// 0x46a3724
	float GetHitPartCoff_Head(bool bTargetIsMonster);// 0x46a3688
	float GetHitPartCoff_Hand(bool bTargetIsMonster);// 0x46a35ec
	float GetHitPartCoff_Foot(bool bTargetIsMonster);// 0x46a3550
	float GetHitPartCoff_Body(bool bTargetIsMonster);// 0x46a34b4
	WeaponHitPartCoff GetHitPartCoff(bool bTargetIsMonster);// 0x46a3410
	bool GetHasSingleFireMode();// 0x46a33d8
	bool GetHasBurstFireMode();// 0x46a33a0
	bool GetHasAutoFireMode();// 0x46a3368
	float GetGameDeviationFactor();// 0x46a3334
	FName GetFiringSuppressorSocketNameFromEntity();// 0x46a3300
	float GetFireSensitiveYawRate();// 0x46a32cc
	float GetFireSensitivePitchRate();// 0x46a3298
	Vector GetFinalBulletLaunchPos(Vector InitMuzle, out const Vector InitMuzleDir, bool bNeedPullBackMuzzle);// 0x46a3160
	int GetExtraShootIntervalShowNumberFromEntity();// 0x46a312c
	float GetExtraShootIntervalFromEntity();// 0x46a30f8
	float GetExtraRangeModifier();// 0x46a30c4
	float GetDeviationFactorModifire();// 0x46a3090
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x46a3004
	class DamageType GetDamageTypeClassByShootID(int ShootID);// 0x46a2f70
	byte GetCurSightType();// 0x46a2f3c
	Vector GetCurSightCameraSocketWorldLocByMuzzleTransOnDs(Vector MuzzleWorldLoc, Vector MuzzleWorldDir, bool bIsAngledSight);// 0x46a2e14
	byte GetCurShootType();// 0x46a2df8
	byte GetCurShootMode();// 0x46a2dbc
	enum GetCurShootIntervalMode();// 0x46a2d9c
	int GetCurrentUsingAmmoID();// 0x46a2d68
	ItemDefineID GetCurrentUsingAmmoDefineID();// 0x46a2d1c
	ShootingBehaviorPatternBase* GetCurrentShootingBehaviorPattern();// 0x46a2ce8
	int GetCurrentBulletNumInClip();// 0x46a2ccc
	float GetCurReloadTimeModifire();// 0x46a2c98
	float GetCurReloadTimeMagOut();// 0x46a2c64
	float GetCurReloadTimeMagIn();// 0x46a2c30
	float GetCurReloadTime();// 0x46a2bfc
	byte GetCurReloadMethod();// 0x46a2bc8
	float GetCrossHairInitSize();// 0x46a2b94
	float GetCrossHairBurstSpeed();// 0x46a2b60
	float GetCrossHairBurstIncreaseSpeed();// 0x46a2b2c
	bool GetClipHasInfiniteBulletsFromEntity();// 0x46a2af4
	MeshComponent* GetChildMeshComp(FName compTag);// 0x46a2a68
	float GetBurstShootIntervalFromEntity();// 0x46a2a34
	float GetBurstShootCDFromEntity();// 0x46a2a00
	int GetBurstShootBulletsNumFromEntity();// 0x46a29cc
	ItemDefineID GetBulletTypeFromEntity();// 0x46a2980
	class STExtraShootWeaponBulletBase GetBulletTemplateFromEntity();// 0x46a2944
	float GetBulletRangeEntity();// 0x46a2910
	int GetBulletNumSingleShotFromEntity();// 0x46a28dc
	float GetBulletMinimumDamage();// 0x46a28a8
	float GetBulletImpulse();// 0x46a2874
	float GetBulletGravityModifier();// 0x46a2840
	float GetBulletGravityExtraOffset();// 0x46a280c
	float GetBulletFireSpeedFromEntity();// 0x46a27d0
	float GetBulletBaseDamage();// 0x46a279c
	void GetBreakThroughDampRateConfig(out <byte,float> OutBreakThroughDampRateConfig);// 0x46a2698
	float GetBaseImpactDamageEntity();// 0x46a2664
	float GetBaseExplosionDamageOverride(float InBulletExplosionDamage);// 0x46a25d8
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x46a2518
	int GetAvailableBulletsNumInBackpack(bool bAdjustInfiniteBullets);// 0x46a2484
	bool GetAutoReloadFromEntity();// 0x46a244c
	ShootWeaponAmmoManager* GetAmmoManagerComponent();// 0x46a2430
	void GetAllAmmoAvailableNumInBackpack(out <int,int> OutDataMap, bool bAdjustInfiniteBullets);// 0x46a22d0
	bool GetADSManualStop();// 0x46a2298
	float GetAccessoriesVRecoilFactorModifier();// 0x46a2264
	float GetAccessoriesVRecoilFactor();// 0x46a2230
	float GetAccessoriesRecoveryFactor();// 0x46a21fc
	float GetAccessoriesHRecoilFactorModifier();// 0x46a21c8
	float GetAccessoriesHRecoilFactor();// 0x46a2194
	float GetAccessoriesFinalDeviationFactor();// 0x46a2160
	float GetAccessoriesDeviationFactor();// 0x46a212c
	float GetAccessoriesAllRecoilFactorModifier();// 0x46a20f8
	void ForceSyncSimulatedClientsBulletsNumAfterReload(int InCurBulletNum);// 0x46a2048
	void ForceSyncAllClientsBulletsNumOnServer();// 0x46a2034
	void ForceModifyCurrentBulletNumInClipOnServer(int TargetNum);// 0x46a1fb8
	void ForceModifyCurrentBulletNumInClipOnClient(int NewBulletNum, int NewClipID);// 0x46a1efc
	void FixBulletNumWithValideData();// 0x46a1ee8
	bool FireShot();// 0x46a1ea8
	bool EnablePlayBoltAnimation();// 0x46a1e70
	void EnableInfiniteClipBullets(bool IsEnable);// 0x46a1dec
	void EnableInfiniteBullets(bool bEnable);// 0x46a1d60
	void EnableInfiniteBackpackBullets(bool IsEnable);// 0x46a1cdc
	void CheckWeaponInitShootIDAndClipID();// 0x46a1cc0
	bool CheckShootVoiceDisValidOnReplay();// 0x46a1c80
	bool CheckShootEnviroment();// 0x46a1c40
	bool CheckServerNeedStopFire();// 0x46a1c00
	bool CheckGunCollision(Vector StartCheckLoc, out const HitResult OutHit, out Vector FixPos);// 0x46a1aac
	bool CheckCanSimulateOBBulletTrack();// 0x46a1a6c
	bool CheckCanReload();// 0x46a1a2c
	void CheckAsyncLoadBulletTrackSkin(out const WeaponVisualBulletClientModeConfigNew Config);// 0x46a1940
	void CheckAndSwitchToAvailableAmmo();// 0x46a1924
	bool CanSwitchToGrenade();// 0x46a1904
	bool BlueprintShouldFoldHand(out bool bWantsFolded);// 0xffffff8a17adf2b0
	bool AutoFireCheck();// 0x46a18c4
	void AsyncLoadBulletTrackSkinFinished();// 0x46a18b0
	void AddCriticalVerifyShootParam(out const Rotator InShootRot);// 0x46a1820
	void AddCriticalVerifyBulletHitUploadParam(out const CacheCriticalVerifyBulletHitUploadParam InParam);// 0x46a1760

--------------------------------
Class: STExtraWeapon.Actor.Object
	Transform WeaponAttachMeshOffset;//[Offset: 0x540, Size: 0x30]// 0x7611df72e0
	Transform FPPWeaponOffset;//[Offset: 0x570, Size: 0x30]// 0x7611df7260
	bool isFPPReloadUseAddSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]// 0x7611df71e0
	Transform FPPWeaponOffsetReload;//[Offset: 0x5b0, Size: 0x30]// 0x7611df7160
	bool isFPPReloadUseSpecialOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]// 0x7611df70e0
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x5f0, Size: 0x30]// 0x7611df7060
	Transform FPPWeaponOffsetSprint;//[Offset: 0x620, Size: 0x30]// 0x7611df6fe0
	Transform TDModeFPPWeaponOffset;//[Offset: 0x650, Size: 0x30]// 0x7611df6f60
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x680, Size: 0x30]// 0x7611df6ee0
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x6b0, Size: 0x30]// 0x7611df6e60
	int CrossHairType;//[Offset: 0x6e0, Size: 0x4]// 0x7611df6df0
	float UnMatchStateSyncCheckInterval;//[Offset: 0x6e4, Size: 0x4]// 0x7611df6d80
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x6e8, Size: 0x8]// 0x7611df6d00
	bool bMainMeshHasLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]// 0x7611df6c80
	FName WeaponStaticMeshCompTag;//[Offset: 0x6f8, Size: 0x8]// 0x7611df6c10
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x700, Size: 0x8]// 0x7611df6b90
	delegate WeaponEffectActionDelegate;//[Offset: 0x708, Size: 0x10]// 0x7611df6b10
	delegate FireOneShotEffectDelegate;//[Offset: 0x718, Size: 0x10]// 0x7611df6a90
	delegate OnShootWeaponChangeState;//[Offset: 0x728, Size: 0x10]// 0x7611df6a10
	delegate OnWeaponChangeStateCommon;//[Offset: 0x738, Size: 0x10]// 0x7611df6990
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x748, Size: 0x10]// 0x7611df6910
	delegate OnGetOwnerActorDelegate;//[Offset: 0x758, Size: 0x10]// 0x7611df6890
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x768, Size: 0x10]// 0x7611df6810
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x778, Size: 0x10]// 0x7611df6790
	delegate OnRecoverOnClientDelegate;//[Offset: 0x788, Size: 0x10]// 0x7611df6710
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x798, Size: 0x10]// 0x7611df6690
	delegate OnPressingWeaponFuncBtnDelegate;//[Offset: 0x7a8, Size: 0x10]// 0x7611df6610
	delegate UGC_AttachmentChangeDelegate;//[Offset: 0x7b8, Size: 0x10]// 0x7611df6590
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x7c8, Size: 0x10]// 0x7611df6510
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x7d8, Size: 0x10]// 0x7611df6490
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x7e8, Size: 0x10]// 0x7611df6410
	WeaponEntity* WeaponEntityComp;//[Offset: 0x7f8, Size: 0x8]// 0x7611df6390
	enum CurFreshWeaponState;//[Offset: 0x800, Size: 0x1]// 0x7611df6290
	enum SyncFreshWeaponStateForRep;//[Offset: 0x801, Size: 0x1]// 0x7611df6190
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x802, Size: 0x1]// 0x7611df6110
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x803, Size: 0x1]// 0x7611df6090
	int ReconnectOpIndex;//[Offset: 0x804, Size: 0x4]// 0x7611df6020
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x808, Size: 0x58]// 0x7611df5830
	Vector2D ClientScreenSize;//[Offset: 0x860, Size: 0x8]// 0x7611df57b0
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x868, Size: 0x10]// 0x7611df56b0
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1]// 0x7611df5630
	FName SpesificLogicGrenadeSlot;//[Offset: 0x880, Size: 0x8]// 0x7611df55c0
	enum[] AutoClientStateSyncDisableList;//[Offset: 0x888, Size: 0x10]// 0x7611df5440
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x898, Size: 0x70]// 0x7611df4c00
	int WeaponBeginPlayTimeStamp;//[Offset: 0x908, Size: 0x4]// 0x7611df4b90
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 0x1]// 0x7611df4b10
	Actor* CustomEquipAttachActor;//[Offset: 0x910, Size: 0x8]// 0x7611df4a90
	int RepWeaponID;//[Offset: 0x918, Size: 0x4]// 0x7611df4a20
	ItemDefineID ItemDefineID;//[Offset: 0x920, Size: 0x18]// 0x7611df49a0
	FName LogicSocket;//[Offset: 0x938, Size: 0x8]// 0x7611df4930
	FName AttachSocket;//[Offset: 0x940, Size: 0x8]// 0x7611df48c0
	byte SurviveWeaponPropSlot;//[Offset: 0x948, Size: 0x1]// 0x7611df4840
	MeshComponent* MainMeshComponent;//[Offset: 0x950, Size: 0x8]// 0x7611df47c0
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x958, Size: 0x8]// 0x7611df4740
	WeaponAttachmentEquipNotifyData[] InitAttachmentEquipInfoRepList;//[Offset: 0x960, Size: 0x10]// 0x7611df43a0
	class WeaponFunctionModuleBase[] FunctionModuleTemplateList;//[Offset: 0x970, Size: 0x10]// 0x7611df42a0
	WeaponFunctionModuleBase*[] FunctionModuleList;//[Offset: 0x980, Size: 0x10]// 0x7611df41a0
	float PostFireHandledTime;//[Offset: 0x990, Size: 0x4]// 0x7611df4130
	enum WeaponOperationMode;//[Offset: 0x994, Size: 0x1]// 0x7611df4030
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x998, Size: 0x8]// 0x7611df3fb0
	byte CurWeaponState;//[Offset: 0x9a0, Size: 0x1]// 0x7611df3f30
	Actor* SimulatedOwnerActor;//[Offset: 0x9a8, Size: 0x8]// 0x7611df3eb0
	Pawn* SimulatedOwnerPawn;//[Offset: 0x9b0, Size: 0x8]// 0x7611df3e30
	WeaponEffectComponent* WeaponEffectComponent;//[Offset: 0x9b8, Size: 0x8]// 0x7611df3db0
	bool bWaitForReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]// 0x7611df3d30
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x9c8, Size: 0x50]// 0x7611df3ae0
	enum UnMatchSyncStateCatche;//[Offset: 0xa18, Size: 0x1]// 0x7611df39e0
	float UnMatchSyncStateInterval;//[Offset: 0xa1c, Size: 0x4]// 0x7611df3970
	bool bNeedHandleCreateOnOwnerClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 0x1]// 0x7611df38f0
	bool bOwnerClientCreateWeaponDataRepLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 0x1]// 0x7611df3870
	WeaponStateManager* _WeaponStateManager;//[Offset: 0xa28, Size: 0x8]// 0x7611df37f0
	UAECharAnimListCompBase* CachedUAECharAnimListCompBase;//[Offset: 0xa30, Size: 0x8]// 0x7611df3770
	float AIMinAttackDist;//[Offset: 0xa38, Size: 0x4]// 0x7611df3700
	float AIMaxAttackDist;//[Offset: 0xa3c, Size: 0x4]// 0x7611df3690
	float AIAttackDist;//[Offset: 0xa40, Size: 0x4]// 0x7611df3620
	MeshSynData[] WeaponAvatarSyncData;//[Offset: 0xa48, Size: 0x10]// 0x7611df3520
	int SyncDataRepCounter;//[Offset: 0xa58, Size: 0x4]// 0x7611df34b0
	SceneComponent* CurAttachComponent;//[Offset: 0xa60, Size: 0x8]// 0x7611df3430
	bool bSimulatedClientInitStateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 0x1]// 0x7611df33b0
	bool bNeedDisableWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 0x1]// 0x7611df3330
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0xa80, Size: 0x10]// 0x7611df3230
	WeaponLogicBaseComponent*[] HandleExtraRelavanceCompList;//[Offset: 0xa90, Size: 0x10]// 0x7611df3130
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 0x1]// 0x7611df30b0
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 0x1]// 0x7611df3030
	ActorComponent*[] CrossHairComps;//[Offset: 0xad0, Size: 0x10]// 0x7611df2f30
	byte WeaponUIType;//[Offset: 0xae0, Size: 0x1]// 0x7611df2e50
	bool bForceHideBackpackWeaponBaseOnGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 0x1]// 0x7611df2dd0
	float CurWeaponUpdateFrequency;//[Offset: 0xc18, Size: 0x4]// 0x7611df2d60
	float CurWeaponConsiderFrequency;//[Offset: 0xc1c, Size: 0x4]// 0x7611df2cf0
	float BackWeaponUpdateFrequency;//[Offset: 0xc20, Size: 0x4]// 0x7611df2c80
	float BackWeaponConsiderFrequency;//[Offset: 0xc24, Size: 0x4]// 0x7611df2c10
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0xc28, Size: 0x8]// 0x7611df2b90
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xc38, Size: 0x8]// 0x7611df2b10
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xc40, Size: 0x10]// 0x7611df2a10
	bool bChangeWeaponStateNotifyLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 0x1]// 0x7611df2990
	enum LastWeaponStateCache;//[Offset: 0xc51, Size: 0x1]// 0x7611df2890
	float LastBeHitFeedbackTime;//[Offset: 0xc54, Size: 0x4]// 0x7611df2820
	bool bForceUnequipBeforeDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 0x1]// 0x7611df27a0
	int CheckVisibleFailedCnt;//[Offset: 0xc5c, Size: 0x4]// 0x7611df2730
	bool bObeyNetFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]// 0x7611df26b0
	bool bFilterFollowOwnerRevalancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 0x1]// 0x7611df2630
	bool WhetherCheckLockTakeOutWeapon();// 0x46dca88
	void WeaponNotifyChangeStateDelegate__DelegateSignature(enum State);// 0xffffff8a17adf2b0
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0xffffff8a17adf2b0
	void UpdateReconnectWeapon();// 0x46dca74
	void UpdateCreateWeapon();// 0x46dca60
	void UGCOnEquipOrUnEuipAttachmentDelegate__DelegateSignature(int AttachHandleID, bool IsEquip);// 0xffffff8a17adf2b0
	void TriggerWeaponEvent(enum Event);// 0x46dc9dc
	void ToggoleOwnerClientCreateWeaponDataRepLock(bool bEnable);// 0x46dc958
	void ToggleHiddenDebugStackLock(bool bLock);// 0x46dc8d4
	void SimulateOverrideSyncFreshWeaponStateForRepOnChangeState(enum State);// 0x46dc850
	bool ShouldReceiveRPCState();// 0x46dc810
	void SetWeaponMeshUpdateEnabled(bool InEnabled);// 0x46dc784
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable);// 0x46dc6b8
	void SetCharacterAttrModifiers(out const FString[] ModifierNames, bool bNewEnable);// 0x46dc5a0
	void SetCharacterAttrModifier(FString ModifierName, bool IsEnable);// 0x46dc4cc
	void ServerDoRepOnce_CreateWeaponData();// 0x46dc4b8
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x46dc408
	void RPC_ClientChangeFreshWeaponState(enum State);// 0x46dc358
	void RPC_Client_SetActorHiddenInGame(bool _bHidden);// 0x46dc2cc
	bool ReceiveActorHiddenInGame(bool bNewHidden);// 0xffffff8a17adf2b0
	void ReAttachWeaponMeshWhenEquiped();// 0x46dc2b0
	void PostUnEquip();// 0x46dc294
	void PostEquip();// 0x46dc278
	void PlayLocalShellDropFX();// 0xffffff8a17adf2b0
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0xffffff8a17adf2b0
	void OnWeaponMeshLoadFinished(int SlotID, bool IsEquipped);// 0x46dc1b0
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0xffffff8a17adf2b0
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnShootWeaponChangeStateDelegate__DelegateSignature(enum LastState, enum NewState);// 0xffffff8a17adf2b0
	void OnRep_WeaponReconnectReplicateDataBP();// 0xffffff8a17adf2b0
	void OnRep_WeaponReconnectReplicateData();// 0x46dc19c
	void OnRep_SyncFreshWeaponStateForRep();// 0x46dc180
	void OnRep_SimulatedOwnerPawn();// 0x46dc16c
	void OnRep_SimulatedOwnerActor();// 0x46dc158
	void OnRep_RepWeaponID(int OldVar);// 0x46dc0d4
	void OnRep_OwnerClientCreateWeaponData();// 0x46dc0b8
	void OnRep_ItemDefineID();// 0x46dc0a4
	void OnRep_InitAttachmentEquipInfoRepList();// 0x46dc090
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x46dc07c
	void OnRep_AvatarMeshChanged();// 0x46dc068
	void OnRep_AttachmentReplication();// 0x46dc04c
	void OnReleaseTrigger();// 0x46dc030
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0xffffff8a17adf2b0
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0xffffff8a17adf2b0
	void OnPushTrigger();// 0x46dc014
	void OnPressingWeaponFuncBtnDelegate__DelegateSignature(float DeltaTime);// 0xffffff8a17adf2b0
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0xffffff8a17adf2b0
	void OnEquipOrUnEuipAttachmentDelegate__DelegateSignature(bool IsEquip, BackpackWeaponAttachHandle* attachHandle);// 0xffffff8a17adf2b0
	void OnDrop();// 0x46dbff8
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0xffffff8a17adf2b0
	void OnChangeWeaponStateNotify();// 0x46dbfe4
	void NotifyServerChangeState(enum State);// 0x46dbf68
	bool NeedPut2BackWhenDisUse();// 0x46dbf28
	void LockChangeWeaponStateNotify(bool bLock, bool bFlushNotify);// 0x46dbe58
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x46dbdc8
	bool IsLocalOrSpectorPlayer();// 0x46dbd90
	void InitProxyBP(Actor* OwnerTarget);// 0xffffff8a17adf2b0
	bool HasComponentSlot(byte Slot);// 0x46dbd00
	void HandleReconnect(STExtraPlayerController* PC);// 0x46dbc7c
	enum GetWeaponTypeNew();// 0x46dbc48
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x46dbc14
	byte GetWeaponState();// 0x46dbbd0
	byte GetWeaponSlot();// 0x46dbb9c
	int GetWeaponSkillIndex();// 0x46dbb68
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x46dbb34
	enum GetWeaponOwnerObserverType();// 0x46dbb00
	enum GetWeaponOperationMode();// 0x46dbac4
	FString GetWeaponName();// 0x46dba44
	MeshComponent* GetWeaponMeshComponent();// 0x46dba08
	int GetWeaponItemID();// 0x46db9d4
	WeaponEntity* GetWeaponEntityComponent();// 0x46db9a0
	WeaponEffectComponent* GetWeaponEffectComponent();// 0x46db96c
	FString GetWeaponDetailInfo(bool bWithExtra, bool bWithExtraPart);// 0x46db850
	FName GetWeaponCollapseSocket();// 0x46db814
	WeaponAttrModifyConfig[] GetWeaponAttrModifyConfigList();// 0x46db748
	FName GetWeaponAttachSocket();// 0x46db70c
	ItemDefineID GetWeaponAttachmentIDBySocketType(enum SocketType);// 0x46db670
	float GetSwitchFromIdleToBackpackTime(bool WithAnimAdjust);// 0x46db5dc
	float GetSwitchFromBackpackToIdleTime(bool WithAnimAdjust);// 0x46db548
	float GetSwitchAnimPlayRate(bool bWantEquip, float AnimLength);// 0x46db478
	FString GetStaticMeshPath();// 0x46db3f8
	FString GetSKMeshPath();// 0x46db378
	WeaponOwnerProxy* GetOwnerProxy();// 0x46db344
	FString GetOwnerPlayerName();// 0x46db2c4
	PlayerController* GetOwnerPlayerController();// 0x46db288
	Pawn* GetOwnerPawn();// 0x46db254
	FString GetOwnerName();// 0x46db1d4
	Controller* GetOwnerController();// 0x46db198
	Actor* GetOwnerActor();// 0x46db15c
	ItemDefineID GetItemDefineID();// 0x46db110
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x46daf6c
	LinearColor GetColorByTeamID(int TeamID);// 0xffffff8a17adf2b0
	ItemHandleBase* GetBackpackItemHandle();// 0x46daf38
	WeaponAttachmentSlot[] GetAvailableWeaponAttachment();// 0x46daeb8
	void DoDisableWeaponAnim();// 0x46daea4
	void DisuseAllWeaponAttachmentsOnServer(enum Reason);// 0x46dae28
	void DettachWeaponForSomeTimeThenAttachBackFinish();// 0x46dae14
	void CreateSkillHandleCompAfterCreateWeaponHandleCallback(out const ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x46dad34
	void ClearWeaponAttrModifier();// 0x46dad20
	bool CheckWeaponMainMeshLoadFinished();// 0x46dace8
	void CheckStateSync(float DeltaTime, bool ForceSync);// 0x46dac20
	void CheckReparentWeaponCustomMesh();// 0x46dac04
	bool CheckEnableOnSwitch();// 0x46dabc4
	void ChangeSequenceStateInner(enum StateType);// 0x46dab40
	bool ChangeSequenceState(enum StateType);// 0x46daaa8
	void BPAttachMeshToSocket(MeshComponent* AttachMesh);// 0xffffff8a17adf2b0
	void BP_TriggerBeHitFeedback(Actor* InHitTriggerActor, int InFeedbackItemID);// 0x46da9e8
	bool BP_IsNeedBeHitFeedback(Actor* InHitTriggerActor);// 0x46da950
	bool BlueprintSetWeaponAttrModifierEnable(FString AttrModifierID, bool bNewEnable);// 0xffffff8a17adf2b0
	bool BlueprintClearWeaponAttrModifier();// 0xffffff8a17adf2b0

--------------------------------
Class: WeaponAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	delegate OnScopeEquipDelegate;//[Offset: 0x920, Size: 0x10]// 0x7611de7680
	delegate OnScopeUnEquipDelegate;//[Offset: 0x930, Size: 0x10]// 0x7611de7600
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]// 0x7611de7580
	delegate OnWeaponPartsEquipped;//[Offset: 0x948, Size: 0x10]// 0x7611de7500
	BattleItemHandleBase* handleRecord;//[Offset: 0x958, Size: 0x8]// 0x7611de7480
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x968, Size: 0x50]// 0x7611de7140
	MeshSynData[] defaultSynData;//[Offset: 0x9c0, Size: 0x10]// 0x7611de7040
	STExtraWeapon* OwnerWeapon;//[Offset: 0x9e0, Size: 0x8]// 0x7611de6fc0
	PrimitiveComponent*[] meshComponentList_for_outline;//[Offset: 0x9e8, Size: 0x10]// 0x7611de6ec0
	delegate OnSkinDefaultItemListLoaded;//[Offset: 0x9f8, Size: 0x10]// 0x7611de6e40
	int AsyncSkinDefaultItemLoadReqID;//[Offset: 0xa08, Size: 0x4]// 0x7611de6dd0
	bool bUseScopeSectionOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 0x1]// 0x7611de6d50
	bool bPreCacheAutonomouseMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0d, Size: 0x1]// 0x7611de6cd0
	<int,BattleItemHandleBase*> WeaponSkinFeedbackEffectRefMap;//[Offset: 0xa10, Size: 0x50]// 0x7611de6b30
	<FName,BattleItemHandleBase*> WeaponAbilityHandleRefMap;//[Offset: 0xa60, Size: 0x50]// 0x7611de6990
	enum KillCountAbilityRepType;//[Offset: 0xab0, Size: 0x1]// 0x7611de6890
	<enum,FName> WeaponAbilityRepTypeNames;//[Offset: 0xab8, Size: 0x50]// 0x7611de6670
	int AsyncMeshCounter;//[Offset: 0xb0c, Size: 0x4]// 0x7611de6600
	int AsyncHandleCounter;//[Offset: 0xb10, Size: 0x4]// 0x7611de6590
	int FinishedMeshReqID;//[Offset: 0xb14, Size: 0x4]// 0x7611de6520
	int FinishedHandleReqID;//[Offset: 0xb18, Size: 0x4]// 0x7611de64b0
	bool ShouldDisplayByQuality(int SlotID);// 0x4805c80
	void SetPendantSocketType(enum SocketType);// 0x4805c04
	void ResetAttachmentSocket();// 0x4805bf0
	void ResetAttachmentParent();// 0x4805bdc
	bool RePickItemHandle();// 0x4805ba4
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* Handle);// 0x4805b18
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x4805a8c
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x4805a10
	void PutOnRefitMaterial(BattleItemHandleBase* refitMaterialHandle);// 0x4805994
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* weaponHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x4805888
	bool PutOnEquipmentByResID(int resID);// 0x48057f0
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, const int InInstanceID);// 0x48056a8
	void PutOffRefitMaterial();// 0x4805694
	bool PutOffEquimentByResID(int resID);// 0x48055fc
	void PrepareRenderMaterialAssets(out WeaponMeshCfg meshPack, out SoftObjectPath[] MaterialAssets);// 0x480541c
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData SyncData);// 0x4805308
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0xffffff8a17adf2b0
	void OnSkinDefaultItemHandleListLoaded(out const BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x4805228
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0xffffff8a17adf2b0
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0xffffff8a17adf2b0
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* ItemHandles, bool isReplaced);// 0x48050c8
	void OnKillCountMatRefresh(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x4805008
	void OnItemHandleLoaded(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x4804f30
	void OnItemHandleListLoaded(out const BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x4804e50
	void OnDefaultItemLoaded(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x4804d78
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x4804bb8
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x4804abc
	void NetSyncAssociationItemData();// 0x4804aa0
	bool LoadSkinDefaultMeshListAsync(out const BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x48049ac
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x48048d0
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x48047d4
	void LoadDefaultAttachmentsAsync();// 0x48047c0
	bool IsTeamMate();// 0x4804780
	bool IsAutonomousAvatar();// 0x4804740
	void InitRefitAttachment(BattleItemHandleBase* weaponHandle);// 0x48046c4
	void InitMasterComponent(MeshComponent* MasterComp);// 0x4804640
	void InitialAvatarParam(int AGender);// 0x48045bc
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x4804538
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x48044b4
	void InitDefaultAttachment(BattleItemHandleBase* weaponHandle);// 0x4804438
	BattleItemHandleBase* GetWeaponHandle();// 0x4804404
	Controller* GetWeaponController();// 0x48043d0
	BattleItemHandleBase* GetWeaponAbilityHandle(enum InWeaponAbilityRepType);// 0x480433c
	int GetReplacedAttachementIndex(out const ItemDefineID InWeaponDefineID, out const ItemDefineID InWeaponSkinDefineID, out const WeaponAttachmentConfig InAttachmentConfig, const bool InIsLogMatchResult, FString InLogTag);// 0x4804010
	FString GetPlayerName();// 0x4803f88
	STExtraWeapon* GetOwnerWeapon();// 0x4803f54
	STExtraBaseCharacter* GetOwnerCharacter();// 0x4803f20
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x4803e2c
	bool GetMeshPack(BattleItemHandleBase* Handle, out WeaponMeshCfg MeshCfg);// 0x4803c88
	BattleItemHandleBase* GetEquippedHandle(int SlotID);// 0x4803bfc
	AvatarEntityFactory* GetEntityFactory();// 0x4803bc0
	byte GetCurSightType();// 0x4803b8c
	MeshComponent* GetAttachmentSocketTransform(int SlotID);// 0x4803b00
	AnimationAsset* GetAttachmentAnim(enum SlotID, int AnimIdx);// 0x4803a38
	BattleItemHandleBase* GenerateAvatarHandle(int AvatarResID);// 0x48039ac
	BattleItemHandleBase* FetchReloadHandleFromSkinList(STExtraPlayerController* PC, BattleItemHandleBase* AttachmentInterface, BattleItemHandleBase* GunInterface);// 0x48038ac
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x48037e4
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x4803760
	bool CheckSlotIsEquipped(int SlotID, bool bIncludingDefault);// 0x480368c
	void CheckScopeSectionOptVisibility(const bool InTargetVisibility);// 0x4803608
	bool CheckIsResIDCompatibleWithMesh(int resID);// 0x4803578
	bool CheckIsAlreadyEquipped(out const ItemDefineID DefineID);// 0x48034d4
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, BattleItemHandleBase* Handle);// 0x48033c8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x48032bc
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x4803200
	void ApplyAttachment(BattleItemHandleBase* attachHandle);// 0x4803184
	void ApplyAnimation(int Slot, BattleItemHandleBase* Handle);// 0x48030cc

--------------------------------
Class: AvatarComponent.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x2b8, Size: 0x8]// 0x7611dde6c0
	class AvatarMaterialEffectManager* DefaultAvatarMaterialEffectManagerClass;//[Offset: 0x2c0, Size: 0x8]// 0x7611dde640
	AvatarMaterialEffectManager*[] AvatarMaterialEffectManagerList;//[Offset: 0x2c8, Size: 0x10]// 0x7611dde540
	FName SkinWeightProfileName;//[Offset: 0x2d8, Size: 0x8]// 0x7611dde4d0
	<enum> RegisteredUseSkinWeightProfileState;//[Offset: 0x2e0, Size: 0x50]// 0x7611dde330
	<FName> RegisteredUseSkinWeightProfileState_IgnoreHandle;//[Offset: 0x330, Size: 0x50]// 0x7611dde220
	<int,SkinWeightProfileStates> Slot_UseSkinWeightProfileStatus_Map;//[Offset: 0x380, Size: 0x50]// 0x7611dde080
	<int,MeshComponent*> meshComponentList;//[Offset: 0x3d0, Size: 0x50]// 0x7611dddee0
	<int,FName> slotToSocket;//[Offset: 0x420, Size: 0x50]// 0x7611dddd50
	<enum,MeshData> DefaultAvataConfig;//[Offset: 0x470, Size: 0x50]// 0x7611dddb20
	<int,BattleItemHandleBase*> loadedItemList;//[Offset: 0x4c0, Size: 0x50]// 0x7611ddd980
	int Gender;//[Offset: 0x510, Size: 0x4]// 0x7611ddd910
	bool IsNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]// 0x7611ddd890
	bool ForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]// 0x7611ddd810
	<SoftObjectPath,BattleItemHandleBase*> PendingLoadRes;//[Offset: 0x518, Size: 0x50]// 0x7611ddd660
	delegate OnAvatarEquipped;//[Offset: 0x568, Size: 0x10]// 0x7611ddd5e0
	delegate OnAvatarEquippedWithPath;//[Offset: 0x578, Size: 0x10]// 0x7611ddd560
	delegate OnAvatarMeshChangedEvent;//[Offset: 0x588, Size: 0x10]// 0x7611ddd4e0
	delegate OnAvatarAsyncLoadingFinished;//[Offset: 0x598, Size: 0x10]// 0x7611ddd460
	delegate OnAllAvatarRenderFinished;//[Offset: 0x5a8, Size: 0x10]// 0x7611ddd3e0
	AvatarEntity*[] EntityTickList;//[Offset: 0x5b8, Size: 0x10]// 0x7611ddd2e0
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]// 0x7611ddd260
	delegate OnItemLoaded;//[Offset: 0x5d0, Size: 0x10]// 0x7611ddd1e0
	delegate OnItemListLoaded;//[Offset: 0x5e0, Size: 0x10]// 0x7611ddd160
	AvatarStreamableHandler[] StreamableHandles;//[Offset: 0x5f0, Size: 0x10]// 0x7611ddcfc0
	bool bCheckAutonomousAvatarWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]// 0x7611ddcf40
	AvatarCacheResFilterRule AvatarCacheResFilterRuleByAssetRefStrategicManager;//[Offset: 0x608, Size: 0x68]// 0x7611ddc960
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x688, Size: 0x50]// 0x7611ddc7c0
	AvatarEntityFactory* EntityFactory;//[Offset: 0x6d8, Size: 0x8]// 0x7611ddc740
	<int,AsyncLoadMeshResReq> PendingLoadMeshRequestList;//[Offset: 0x6e0, Size: 0x50]// 0x7611ddc300
	<MaterialInterface*,MaterialInterface*> BaseMatMapping;//[Offset: 0x730, Size: 0x50]// 0x7611ddc150
	<MaterialInterface*,MaterialInterface*> MatInstanceMapping;//[Offset: 0x780, Size: 0x50]// 0x7611ddbfa0
	enum DisplayQuality;//[Offset: 0x7d1, Size: 0x1]// 0x7611ddbea0
	AvatarDynamicCacheStrategy* DynamicCacheStrategy;//[Offset: 0x7d4, Size: 0x8]// 0x7611ddbe20
	SoftObjectPath[] LoadedPath;//[Offset: 0x7e0, Size: 0x10]// 0x7611ddbd20
	class AvatarModule[] AvatarModuleTemplates;//[Offset: 0x800, Size: 0x10]// 0x7611ddbc20
	<enum,AvatarModule*> AvatarModules;//[Offset: 0x810, Size: 0x50]// 0x7611ddb9f0
	<int,byte> AvatarOuterVisibilities;//[Offset: 0x878, Size: 0x50]// 0x7611ddb850
	<int,FString> AvatarVisibilityOpStack;//[Offset: 0x8c8, Size: 0x50]// 0x7611ddb6c0
	bool bEnableAvatarVisibilityTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]// 0x7611ddb640
	void UpdateIBL(int renderlevel);// 0x4177838
	void UnBindDelegates();// 0x417781c
	void TryCreateAvatarMaterialEffectManager(int SlotID, bool IsEquipped);// 0x4177754
	void ShowAttachmentByIndex(int Index, bool bIsVisible);// 0x4177694
	bool SetupOnReadyPak(int resID);// 0x4177604
	void SetDisplayQuality(enum Quality);// 0x417758c
	MaterialInterface* SetByPassSystemQuality(MaterialInterface* matBase, MaterialInstance* matOrigion, bool IsForceHighQuality);// 0x4177484
	void SetAvatarOuterVisiblity(int SlotID, bool IsVisible, byte MaskValue);// 0x4177378
	bool ResetSkinWeightProfileByHandle(int Slot, BattleItemHandleBase* Handle, SkeletalMeshComponent* TargetComp);// 0x4177274
	bool ResetSkinWeightProfile(int Slot, out SkinWeightProfileStates states);// 0x4177158
	void ResetComponentMaster();// 0x4177144
	void ResetAllAvataSlot();// 0x4177130
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x41770a4
	bool ReleaseMeshResourceMaterial(MeshComponent* MeshComp, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x4176fa0
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x4176f14
	bool PutOnEquipmentByResID(int resID);// 0x4176e7c
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, const int InInstanceID);// 0x4176d34
	bool PutOffEquimentByResID(int resID);// 0x4176c9c
	bool PutOffEquiment(int Slot);// 0x4176c0c
	void PreAvatarMeshCompDestroy(const int InTargetSlot);// 0x4176b88
	void OnUserQualitySettingChanged(int renderlevel);// 0x4176b04
	void OnTriggerOutline();// 0x4176af0
	void OnAsyncLoadRes(SoftObjectPath AssetRef, MeshComponent* MeshComp, int MatIdx);// 0x4176998
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x41767d8
	void OnAsyncLoadMesh(SoftObjectPath AssetRef, bool isReplaced);// 0x41766b4
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x41765b8
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x41764dc
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x41763e0
	bool IsTeamMate();// 0x41763a0
	bool IsTeamAthleticsMode();// 0x4176368
	bool IsStandAloneMode();// 0x4176330
	bool IsSlotHasEquipped(int Slot);// 0x41762a0
	bool IsRunOnServer();// 0x4176268
	bool IsNeedReplaced(BackpackAvatarHandle* DoReplaceHandle);// 0x41761d0
	bool IsMatHighDeviceQuality(out const MeshPackage meshPack);// 0x417611c
	bool IsMale();// 0x41760e0
	bool IsForceRecreateMeshBoneRetargetAdaptSlot(const enum InTestSlot);// 0x4176048
	bool IsDebugSyncLoadFlush();// 0x4176008
	bool IsConsiderAnimHiddenByLOD(int InSlotID);// 0x4175f70
	bool IsClientMode();// 0x4175f54
	bool IsAvatarMaterialEffectValid(BattleItemHandleBase* InHandle, int InSlotID);// 0x4175e80
	void InitializeAvatarModules();// 0x4175e6c
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x4175de8
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x4175d64
	void InitBindDelegates();// 0x4175d48
	StaticMesh* GetStaticMesh_BP(out MeshPackage meshPack);// 0x4175c10
	int GetSoftRefLatestAsyncLoadType(out SoftObjectPath AssetRef);// 0x4175b5c
	SkeletalMesh* GetSkeletalMesh_BP(out MeshPackage meshPack);// 0x4175a24
	int GetQualityLevel();// 0x41759e8
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x41758f4
	void GetMeshComponentList(out MeshComponent*[] MeshCompList, bool IncludingMaster);// 0x417580c
	MeshComponent* GetMeshCompBySlotID(int SlotID, bool IncludingMaster);// 0x417573c
	MeshComponent* GetMeshCompBySlot(enum SlotType, bool IncludingMaster);// 0x417566c
	MaterialInstance* GetMaterial_BP(out MeshPackage meshPack);// 0x4175534
	BattleItemHandleBase* GetLoadedHandleBase(int SlotID);// 0x41754a8
	bool GetEquipmentMeshBySlot(int Slot, out MeshData meshPack);// 0x417538c
	AvatarEntityFactory* GetEntityFactory();// 0x4175350
	AvatarDynamicCacheStrategy* GetDynamicCacheStrategy();// 0x4175314
	enum GetDisplayQuality();// 0x41752f8
	<MaterialInterface*,MaterialInterface*> GetBaseMatMapping();// 0x4175238
	static enum GetAvatarSlotTypeFromInt(int SlotTypeValue);// 0x41751bc
	bool GetAvatarOuterVisiblity(int SlotID);// 0x4175124
	AvatarModule* GetAvatarModule(enum ModuleType);// 0x4174fe4
	class AvatarMaterialEffectManager GetAvatarMaterialEffectManagerClass(BattleItemHandleBase* InHandle, int InSlotID);// 0x4174f14
	int GetAvatarGender();// 0x4174ee0
	<int,AvatarEntity*> GetAvatarEntityList();// 0x4174ea8
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x4174da4
	enum GetApplyMeshType(int Slot, SkeletalMesh* SelfMesh);// 0x4174cd4
	static int ERenderQualityToQualityLevel(byte InQuality);// 0x4174c50
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x4174b88
	void DestroyMeshComponent(int SlotID);// 0x4174b0c
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x4174a48
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x4174980
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x41748fc
	bool CheckIfAvatarPakDownloaded(BattleItemHandleBase* ItemHandle);// 0x4174864
	void CheckDynamicCacheDefaultStrategyRelease();// 0x4174848
	void AutoPutOnEquipmentByResID(int resID);// 0x41747cc
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, BattleItemHandleBase* Handle);// 0x41746c0
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x41745b4
	void ApplyMesh(MeshComponent* Component, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh, bool ReinitPose);// 0x4174480
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x41743c4

--------------------------------
Class: AvatarMaterialEffectManager.Object
	AvatarComponent* ParentAvatarComp;//[Offset: 0x28, Size: 0x8]// 0x75bddf0700
	float TickLerpInterval;//[Offset: 0x30, Size: 0x4]// 0x75bdde80f0
	<int,AvatarMaterialEffectDataMeshComp> AvatarMaterialEffectDataMapBySlot;//[Offset: 0x38, Size: 0x50]// 0x75bddff240
	<int> CurAvatarStateList;//[Offset: 0x88, Size: 0x50]// 0x75d119bfe0
	TimerHandle LerpTimerHandle;//[Offset: 0xd8, Size: 0x8]// 0x75bddf0800
	bool IsLerpTickStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]// 0x75bddf0880
	<int> CurRegisterState;//[Offset: 0xe8, Size: 0x50]// 0x75d119c080
	delegate OnAvatarMatEffectStateChange;//[Offset: 0x138, Size: 0x10]// 0x75bddf0900
	static void UpdateMatEffectLerpData(out AvatarMaterialEffectData_Lerp OutMatLerpData, out AvatarMaterialEffectDataRuntime InMatEffectData, int InState);// 0x418b20c
	void UpdateAvatarStateBySlot(int InSlotID, bool IsRefresh, out bool OutNeedStartLerpTick);// 0x418b0f0
	void UpdateAvatarState(int InState, bool IsAdd, bool IsRefresh);// 0x418afdc
	void UnRegisterItemHanleData(int InSlotID);// 0x418af58
	void TryStopTickLerpData();// 0x418af3c
	void TryStartTickLerpData();// 0x418af20
	void TickLerpData();// 0x418af04
	bool SetDMIParamBySlotID(int InSlotID, out const AvatarMaterialNamePair InName, float InValue);// 0x418addc
	bool RegisterItemHanleData(int InSlotID, MeshComponent* InMeshComp, BattleItemHandleBase* InItemHandle);// 0x418acd0
	void RefreshCurRegisterState();// 0x418acb4
	void OnAvatarEquipped(int SlotID, bool IsEquipped);// 0x418abec
	void OnAvatarAsyncLoadingFinished(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x418ab2c
	bool IsInBattle();// 0x418aaec
	void InitOnCreated(AvatarComponent* InAvatarComp);// 0x418aa68
	void InitBindDelegate();// 0x418aa4c
	void InitAvatarState(int InSlotID);// 0x418a9c8
	int GetValidAvatarState(out const int[] InItemHandleStateList);// 0x418a91c
	int GetNoneAvatarState();// 0x418a8e0
	int GetDefaultAvatarState();// 0x418a8a4
	int GetAvatarStateWeight(int InState);// 0x418a810
	float GetAvatarMatPingPongValue(out AvatarMaterialEffectData_Lerp InLerpData, float DeltaTime);// 0x418a714
	float GetAvatarMatLoopValue(out AvatarMaterialEffectData_Lerp InLerpData, float DeltaTime);// 0x418a618
	float GetAvatarMatLerpValue(out AvatarMaterialEffectData_Lerp InLerpData);// 0x418a560

--------------------------------
Class: AvatarMaterialEffectDataMeshComp
	MeshComponent* MeshCompWeakRef;//[Offset: 0x0, Size: 0x8]// 0x7612152400
	int SlotID;//[Offset: 0x8, Size: 0x4]// 0x7612152390
	<AvatarMaterialNamePair,AvatarMaterialEffectDataRuntime> AvatarMaterialEffectDataList;//[Offset: 0x10, Size: 0x50]// 0x7612151dd0
	<AvatarMaterialNamePair,AvatarMaterialEffectData_Lerp> AvatarMaterialEffectData_LerpList;//[Offset: 0x60, Size: 0x50]// 0x76121516e0

--------------------------------
Class: AvatarMaterialNamePair
	FName SlotName;//[Offset: 0x0, Size: 0x8]// 0x7611d7e560
	FName ParamName;//[Offset: 0x8, Size: 0x8]// 0x7611d7e4f0

--------------------------------
Class: AvatarMaterialEffectDataRuntime
	BaseAvatarMaterialEffectData BaseMatEffectData;//[Offset: 0x0, Size: 0x28]// 0x7612152310
	<int,AvatarMaterialEffectValue> StateValueMap;//[Offset: 0x28, Size: 0x50]// 0x7612152170
	float CurValue;//[Offset: 0x78, Size: 0x4]// 0x7612152100
	float CurLoopSpeed;//[Offset: 0x7c, Size: 0x4]// 0x7612152090
	int CurState;//[Offset: 0x80, Size: 0x4]// 0x7612152020

--------------------------------
Class: BaseAvatarMaterialEffectData
	AvatarMaterialNamePair NamePair;//[Offset: 0x0, Size: 0x10]// 0x7611dd3af0
	bool UseLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611dd3a70
	float AverageLerpSpeed;//[Offset: 0x14, Size: 0x4]// 0x7611dd3a00
	CurveFloat* CurveRef;//[Offset: 0x18, Size: 0x8]// 0x7611dd3980
	CurveFloat* RealValueCurveRef;//[Offset: 0x20, Size: 0x8]// 0x7611dd3900

--------------------------------
Class: AvatarMaterialEffectValue
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611dd4080
	bool IsPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611dd4000
	float StateValue;//[Offset: 0x4, Size: 0x4]// 0x7611dd3f90
	Vector2D ValueRange;//[Offset: 0x8, Size: 0x8]// 0x7611dd3f10
	float LoopSpeed;//[Offset: 0x10, Size: 0x4]// 0x7611dd3ea0

--------------------------------
Class: AvatarMaterialEffectData_Lerp
	AvatarMaterialNamePair NamePair;//[Offset: 0x0, Size: 0x10]// 0x7612151d50
	CurveFloat* CurveRef;//[Offset: 0x10, Size: 0x8]// 0x7612151cd0
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7612151c50
	bool IsPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x7612151bd0
	float AverageLerpSpeed;//[Offset: 0x1c, Size: 0x4]// 0x7612151b60
	float CurValue;//[Offset: 0x20, Size: 0x4]// 0x7612151af0
	float LerpCurTime;//[Offset: 0x24, Size: 0x4]// 0x7612151a80
	float LerpTotalTime;//[Offset: 0x28, Size: 0x4]// 0x7612151a10
	float LerpStartValue;//[Offset: 0x2c, Size: 0x4]// 0x76121519a0
	float LerpEndValue;//[Offset: 0x30, Size: 0x4]// 0x7612151930

--------------------------------
Class: SkinWeightProfileStates
	SkinWeightProfileConfig ItemHandleSWPConfig;//[Offset: 0x0, Size: 0x50]// 0x7611dd98f0
	<enum> CurHasSkinWeightReasons;//[Offset: 0x50, Size: 0x50]// 0x7611dd96f0

--------------------------------
Class: SkinWeightProfileConfig
	enum[] UseSkinWeightProfileStatus;//[Offset: 0x0, Size: 0x10]// 0x7611dda3f0
	MultiPawnStatesCheck[] UseSkinWeightMultiPawnStates;//[Offset: 0x10, Size: 0x10]// 0x7611dd9f50
	enum[] UseSWPStates;//[Offset: 0x20, Size: 0x10]// 0x7611dd9d70
	bool LobbyStandAloneSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611dd9cf0
	enum[] LobbyUseSWPStates;//[Offset: 0x38, Size: 0x10]// 0x7611dd9b10
	bool LobbyIgnore_SkirtPose_Lobby_Paragliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x7611dd9a90
	bool LobbyIgnore_Fashion_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]// 0x7611dd9a10

--------------------------------
Class: MultiPawnStatesCheck
	bool bHasAllStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x7611dda370
	bool bHasAnyStates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x7611dda2f0
	bool bHasNoStates;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x7611dda270
	enum[] states;//[Offset: 0x8, Size: 0x10]// 0x7611dda0f0

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x8]// 0x7611d82ba0
	SkeletalMesh* skMesh;//[Offset: 0x8, Size: 0x8]// 0x7611d82b20
	MaterialInstance* matIns;//[Offset: 0x10, Size: 0x8]// 0x7611d82aa0
	MaterialInstance*[] additionalMats;//[Offset: 0x18, Size: 0x10]// 0x7611d829a0
	enum meshType;//[Offset: 0x28, Size: 0x1]// 0x7611d828a0
	int[] hiddenBy;//[Offset: 0x30, Size: 0x10]// 0x7611d827b0
	int[] doHiddenSlots;//[Offset: 0x40, Size: 0x10]// 0x7611d826c0
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x50, Size: 0x10]// 0x7611d825c0
	ReplacedSlotInfo materialReplacedBy;//[Offset: 0x60, Size: 0x8]// 0x7611d824a0
	HideBoneData[] hideBoneSlots;//[Offset: 0x68, Size: 0x10]// 0x7611d82300
	ItemDefineID definedID;//[Offset: 0x78, Size: 0x18]// 0x7611d82280
	enum SubSlot;//[Offset: 0x90, Size: 0x1]// 0x7611d82120
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]// 0x7611d820a0

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x28, Size: 0x4]// 0x75bddea540
	int SubSlotID;//[Offset: 0x2c, Size: 0x4]// 0x75bddea5b0
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x30, Size: 0x8]// 0x75bddf6300
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x38, Size: 0x8]// 0x75bddf6380
	AvatarComponent* AvatarComponent;//[Offset: 0x40, Size: 0x8]// 0x75bddf6400
	MeshComponent* MeshComponent;//[Offset: 0x48, Size: 0x8]// 0x75bddf6480
	MeshData EntityMeshData;//[Offset: 0x50, Size: 0x98]// 0x75bddf6500
	MeshData CachedEntityMeshData;//[Offset: 0xe8, Size: 0x98]// 0x75bddf6580
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]// 0x75bddf6600
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]// 0x75bddf6680
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1]// 0x75bddf6700
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 0x1]// 0x75bddf6780
	class Object* CachedAnimClass;//[Offset: 0x188, Size: 0x8]// 0x75bddf6800
	FName SocketName;//[Offset: 0x190, Size: 0x8]// 0x75bddea620
	SyncAdditionDataArray SavedAddData;//[Offset: 0x198, Size: 0x10]// 0x75bddf6880
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a8, Size: 0x10]// 0x75bddf6980
	<ParticleSystemComponent*> WithModelParticleComponents;//[Offset: 0x1b8, Size: 0x50]// 0x75d119c1c0
	SoftObjectPath MeshAssetPath;//[Offset: 0x208, Size: 0x18]// 0x75bddf6a80
	ItemDefineID ParentDefineID;//[Offset: 0x220, Size: 0x18]// 0x75bddf6b00
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x238, Size: 0x50]// 0x75bde03a40
	SoftObjectPath LastUseMeshPath;//[Offset: 0x290, Size: 0x18]// 0x75bddf6c00
	void UpdateVisibility();// 0x41824c0
	void UnRegisterTick();// 0x41824a4
	void TickEntity(float DeltaTime);// 0x4182420
	void SetSocketName();// 0x4182404
	void SetParentDefineID(ItemDefineID ParentID);// 0x4182374
	void SetAvatarVisibility(bool visibie, bool IsForCE, byte MaskValue);// 0x4182260
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x41821d4
	void SetAdditionalData(out const SyncAdditionDataArray SyncData);// 0x4182118
	void RevertEntityMeshData();// 0x4182104
	void ResetEntityBeforePushToPool(bool DisableCheck);// 0x4182078
	void RenderEntity(out SoftObjectPath SoftPath);// 0x4181fd4
	void RegisterTick();// 0x4181fb8
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x4181f2c
	void RefreshEntityRender(SoftObjectPath SoftPath);// 0x4181e44
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x4181dac
	void PutOnDefaultEquipment(enum SlotType);// 0x4181d28
	void PreMeshCompDestroy();// 0x4181d0c
	void ParseAdditionalItem(SyncAdditionDataArray AddData);// 0x4181b48
	void OnPreRender();// 0x4181b2c
	void OnPostRender();// 0x4181b10
	bool IsEntityAvailable(enum VisibilityType);// 0x4181a78
	bool IsAnimHiddenByLODEnable();// 0x4181a38
	bool IsAnimHiddenByLOD();// 0x41819f8
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x418192c
	void Init(int SlotID, int SubSlotID, AvatarComponent* AvatarComponent);// 0x4181834
	PhysicsAsset* GetRigidBodyAnimOverridePhysicsAsset(const int InGender);// 0x41817a8
	enum GetMeshType(SkeletalMesh* SelfMesh);// 0x4181714
	MeshData GetMeshData();// 0x4181690
	BattleItemHandleBase* GetLoadedHandle();// 0x418165c
	ItemDefineID GetDefineID();// 0x4181608
	SyncAdditionDataArray GetAdditionalData();// 0x4181524
	void EnterRenderPipeline();// 0x4181508
	void EnterLogicPipeline();// 0x41814ec
	void DrawOutline(bool bEnable);// 0x4181460
	void DestoryRenderRes(int CurrSlotID);// 0x41813dc
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x4181324
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x418125c
	void ClearEquipmentLogic(bool putDefault);// 0x41811d0
	bool ClearEquipedMeshWhenRepeatPutOn();// 0x4181190
	void ClearEntity(bool ForceClear);// 0x4181104
	void ApplyAnimation();// 0x41810e8

--------------------------------
Class: SyncAdditionDataArray
	SyncAdditionData[] AddiDataArray;//[Offset: 0x0, Size: 0x10]// 0x7611de4670

--------------------------------
Class: SyncAdditionData
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x7611de49d0
	float FloatData;//[Offset: 0x8, Size: 0x4]// 0x7611de4960
	FString StringData;//[Offset: 0x10, Size: 0x10]// 0x7611de48f0
	int IntData;//[Offset: 0x20, Size: 0x4]// 0x7611de4880
	int Priority;//[Offset: 0x24, Size: 0x4]// 0x7611de4810

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x7f8, Size: 0x8]// 0x75b4dd8f80
	MeshComponent* AttachedMeshComponent;//[Offset: 0x800, Size: 0x8]// 0x75b4dd9000
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x808, Size: 0x8]// 0x75b4dd9080
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x810, Size: 0x8]// 0x75b4dd9100
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x429ef0c
	Actor* GetBindOwner();// 0x429eef0
	MeshComponent* GetAttachedMeshComponent();// 0x429eed4
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x429ed80
	void BindOwner(Actor* Owner);// 0x429ed08
	void BindEvent(bool bShowWidget);// 0x429ec7c

--------------------------------
Class: AvatarStreamableHandler

--------------------------------
Class: AvatarCacheResFilterRule
	AvatarCacheResFilterRuleItem DefaultIgnoreSlotIdList;//[Offset: 0x0, Size: 0x18]// 0x7611ddcec0
	<FString,AvatarCacheResFilterRuleItem> SpecificGameModeIDRule;//[Offset: 0x18, Size: 0x50]// 0x7611ddca80

--------------------------------
Class: AvatarCacheResFilterRuleItem
	bool bFilterRuleOnlyValidOnSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611ddce40
	enum[] IgnoreSlotIdList;//[Offset: 0x8, Size: 0x10]// 0x7611ddccc0

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* GetEntityByClass(int SlotID, int SubSlotID);// 0x4187884
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x41877b8

--------------------------------
Class: AsyncLoadMeshResReq
	SoftObjectPath[] MeshResList;//[Offset: 0x0, Size: 0x10]// 0x7611ddc640
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0x10, Size: 0x10]// 0x7611ddc540

--------------------------------
Class: AvatarDynamicCacheStrategy.Object
	bool TryTriggerPostResourceLoadedAction(Object* InAvatarCompObj, const int InAsyncLoadID);// 0x4180aec
	void TryReleaseCacheStrategy(Object* InAvatarCompObj);// 0x4180a68
	bool TryDelayLoadItemHandle(Object* InAvatarCompObj, const int InSlotID, const int InItemID, const int InSyncDataRepCounter);// 0x4180920
	bool TryCacheLoadedResourse(Object* InAvatarCompObj, out const SoftObjectPath[] InAssetSoftPathList, const int InAsyncLoadID);// 0x41807c8
	bool TryCacheLoadedHandle(Object* InAvatarCompObj, Object* InItemResObj, const int InAsyncLoadID);// 0x41806bc
	void ReleaseCache();// 0x41806a0
	bool IsStrategyApplicable(Object* InAvatarCompObj);// 0x4180608

--------------------------------
Class: AvatarModule.Object
	AvatarComponent* AvatarComp;//[Offset: 0x30, Size: 0x8]// 0x75bddf0180
	void SetModuleType(enum inType);// 0x418bfe4
	enum GetModuleType();// 0x418bfc8
	AvatarComponent* GetAvatarComp();// 0x418bfac

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemSkillsConfig[] SkillsConfig;//[Offset: 0x128, Size: 0x10]// 0x75bdd7dd80
	SkillCoverConfig[] SkillsCoverConfig;//[Offset: 0x138, Size: 0x10]// 0x75bdd7de80
	bool EnableLobbyAvatarExtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75bdd7df00
	ExtraDamageReduceCfg ExtraDamageReduceCfg;//[Offset: 0x150, Size: 0x20]// 0x75bdd7df80
	enum SlotID;//[Offset: 0x170, Size: 0x1]// 0x75bdd7e080
	enum SubSlot;//[Offset: 0x171, Size: 0x1]// 0x75bdd7e180
	enum avatarVisiblityType;//[Offset: 0x172, Size: 0x1]// 0x75bdd7e280
	bool bUseAvatarSwitchLODTickOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1]// 0x75bdd7e300
	MeshPackage meshPack;//[Offset: 0x178, Size: 0x458]// 0x75bdd7e380
	MeshPackage replacedMeshPack;//[Offset: 0x5d0, Size: 0x458]// 0x75bdd7e400
	enum[] hiddenFlags;//[Offset: 0xa28, Size: 0x10]// 0x75bdd7e580
	enum[] femaleHiddenFlags;//[Offset: 0xa38, Size: 0x10]// 0x75bdd7e700
	enum[] replaceFlags;//[Offset: 0xa48, Size: 0x10]// 0x75bdd7e880
	enum[] femaleReplaceFlags;//[Offset: 0xa58, Size: 0x10]// 0x75bdd7ea00
	enum[] ignoreFlags;//[Offset: 0xa68, Size: 0x10]// 0x75bdd7eb80
	BackpackComponent* pBackpackComp;//[Offset: 0xa78, Size: 0x8]// 0x75bdd7ec00
	int itemCapacity;//[Offset: 0xa80, Size: 0x4]// 0x75bdde5530
	int Durability;//[Offset: 0xa84, Size: 0x4]// 0x75bdde55a0
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0xa90, Size: 0x38]// 0x75bdd7ec80
	enum hideBoneSlot;//[Offset: 0xac8, Size: 0x1]// 0x75bdd7ed80
	FName hideBoneName;//[Offset: 0xad0, Size: 0x8]// 0x75bdde5610
	enum hatMeshType;//[Offset: 0xad8, Size: 0x1]// 0x75bdd7ee80
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0xae0, Size: 0x10]// 0x75bdd7ef80
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0xaf0, Size: 0x50]// 0x75bdd903c0
	int DefaultExtendPendantID;//[Offset: 0xb40, Size: 0x4]// 0x75bdde56f0
	byte PendantTargetGender;//[Offset: 0xb44, Size: 0x1]// 0x75bdd7f080
	int PendantConfigIndex;//[Offset: 0xb48, Size: 0x4]// 0x75bdde5760
	enum PendantSlotForMale;//[Offset: 0xb4c, Size: 0x1]// 0x75bdd7f180
	FName PendantSocketForMale;//[Offset: 0xb50, Size: 0x8]// 0x75bdde57d0
	enum PendantSlotForFemale;//[Offset: 0xb58, Size: 0x1]// 0x75bdd7f280
	FName PendantSocketForFemale;//[Offset: 0xb60, Size: 0x8]// 0x75bdde5840
	bool UseMaleOrFemaleForceIgnoreSlotSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 0x1]// 0x75bdd7f300
	bool ForceIgnoreSlotSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb69, Size: 0x1]// 0x75bdd7f380
	bool FemaleForceIgnoreSlotSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6a, Size: 0x1]// 0x75bdd7f400
	AdditionalItem[] AdditionalItems;//[Offset: 0xb70, Size: 0x10]// 0x75bdd7f500
	NotifySoundModifiedItem[] NotifySoundModifiedItems;//[Offset: 0xb80, Size: 0x10]// 0x75bdd7f600
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0xb90, Size: 0x10]// 0x75bdd7f700
	byte CharacterAnimOverrideType;//[Offset: 0xba0, Size: 0x1]// 0x75bdd7f780
	ComparePriority ComparePriority;//[Offset: 0xba4, Size: 0x8]// 0x75bdd7f800
	int Priority;//[Offset: 0xbac, Size: 0x4]// 0x75bdde58b0
	SyncAdditionData[] AdditionalDataList;//[Offset: 0xbb0, Size: 0x10]// 0x75bdd7f900
	MatCutExcludeItem[] MatCutExcludeList;//[Offset: 0xbc0, Size: 0x10]// 0x75bdd7fa00
	MatCutOverrideData MatCutOverrideList;//[Offset: 0xbd0, Size: 0x30]// 0x75bdd7fa80
	bool ConsiderPawnFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 0x1]// 0x75bdd7fb00
	SkinWeightProfileConfig SkinWeightProfileConfig;//[Offset: 0xc08, Size: 0x50]// 0x75bdd7fb80
	SkinWeightProfileConfig SkinWeightProfileConfig_Male;//[Offset: 0xc58, Size: 0x50]// 0x75bdd7fc00
	bool bAllowBakeMeshOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 0x1]// 0x75bdd7fc80
	bool bUseMasterLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca9, Size: 0x1]// 0x75bdd7fd00
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcaa, Size: 0x1]// 0x75bdd7fd80
	AvatarScaleConfigCollection AvatarScaleCollection;//[Offset: 0xcb0, Size: 0x10]// 0x75bdd7fe00
	<int,float> WeaponAnimAdaptValueMap;//[Offset: 0xcc0, Size: 0x50]// 0x75bdd90480
	bool bIgnoreAnimHidenByLODFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd10, Size: 0x1]// 0x75bdd7fe80
	bool bBackAttachWeaponAdaptForBoneRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd11, Size: 0x1]// 0x75bdd7ff00
	<int,BoneRetargetBackWeaponAdaptConfig> BoneRetargetBackWeaponAdaptInfoMap;//[Offset: 0xd18, Size: 0x50]// 0x75bdd90540
	<int> NeedAdaptForBoneRetargetWingClothIDSet;//[Offset: 0xd68, Size: 0x50]// 0x75d119bf40
	bool bUseAnimNotifyStateBoneRetargetAdaptFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 0x1]// 0x75bdd80000
	<AdjustSocketAttachedCompInfo,AdjustSocketAttachedComp_ExtendParamCollection> AdjustSocketAttachedCompInfoCollection_Male;//[Offset: 0xdc0, Size: 0x50]// 0x75bdd90600
	<AdjustSocketAttachedCompInfo,AdjustSocketAttachedComp_ExtendParamCollection> AdjustSocketAttachedCompInfoCollection_Female;//[Offset: 0xe10, Size: 0x50]// 0x75bdd906c0
	bool bModeAvatarFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 0x1]// 0x75bdd80280
	bool bOnlyCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe61, Size: 0x1]// 0x75bdd80300
	<enum,int> AvatarSuitIdMap;//[Offset: 0xe68, Size: 0x50]// 0x75bdd90780
	bool EnableMeshClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 0x1]// 0x75bdd80480
	void RemoveSkillsAfterDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int KillingHitDamageTypeID, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x419d2e4
	void RemoveSkills();// 0x419d2d0
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x419d198
	bool IsVirtualAvatarHandle();// 0x419d158
	bool IsNamedSlotMatCutExclude(out const FName InSlotName, const byte InCameraMode, STExtraBaseCharacter* Owner);// 0x419d03c
	bool IsForceIgnoreSlotSocket(bool IsMaleGender);// 0x419cf9c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x419ceac
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x419cc0c
	bool HandleEnable(bool bEnable);// 0x419cb6c
	bool HandleDrop(int InCount, enum Reason);// 0x419ca98
	bool HandleDisuse(enum Reason);// 0x419ca00
	float GetWeaponAnimAdaptValue(const int InWeaponAvatarBPID, const int InWeaponAvatarID);// 0x419c934
	int GetSubSlotID();// 0x419c8f8
	FString GetStaticMesh(bool IsMale);// 0x419c820
	int GetSlotID();// 0x419c7e4
	ItemSkillsConfig[] GetSkillTemplates_Implementation();// 0x419c700
	FString GetSkeletalMesh(bool IsAutonomous, bool IsMale);// 0x419c5e4
	enum[] GetReplaceFlags(bool IsMale);// 0x419c50c
	bool GetNamedSectionOverrideCutVisible(out const FName InSlotName, const byte InCameraMode, STExtraBaseCharacter* Owner, bool InOriginalVisible);// 0x419c3a4
	BackpackComponent* GetBackPackComponent();// 0x419c370
	bool CompareCutPriority(BackpackAvatarHandle* AvatarHandle);// 0x419c2e0
	bool CheckCanPickUp(CharacterAvatarComponent* AvatarComp, int nowCapcity, enum Reason);// 0x419c1d8
	bool CanAddSkill();// 0x419c198
	void AddSkills();// 0x419c184
	void AddAdditionalEffect(bool AddEffect);// 0x419c100

--------------------------------
Class: ItemSkillsConfig
	class UTSkill* SkillTemplateClass;//[Offset: 0x0, Size: 0x28]// 0x75c9948a80
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75c9948b00
	bool bImmediatelyRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x75c9948b80

--------------------------------
Class: SkillCoverConfig
	class UTSkill* SkillCoverClass;//[Offset: 0x0, Size: 0x28]// 0x761214fd10
	class UTSkill* SkillCoveredClass;//[Offset: 0x28, Size: 0x28]// 0x761214fc90

--------------------------------
Class: ExtraDamageReduceCfg
	FString AttachmentID;//[Offset: 0x0, Size: 0x10]// 0x7611e5fca0
	ExtraDamageReduce[] ExtraDamageReduceArray;//[Offset: 0x10, Size: 0x10]// 0x7611e5f930

--------------------------------
Class: ExtraDamageReduce
	enum AvatarPosition;//[Offset: 0x0, Size: 0x1]// 0x7611e5fb40
	float DamageReduceScale;//[Offset: 0x4, Size: 0x4]// 0x7611e5fad0

--------------------------------
Class: MeshPackage
	FName SockectName;//[Offset: 0x0, Size: 0x8]// 0x7611dd4bf0
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 0x28]// 0x7611dd4b70
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 0x28]// 0x7611dd4af0
	SkeletalMesh* maleSkMesh;//[Offset: 0x58, Size: 0x28]// 0x7611dd4a70
	SkeletalMesh* femaleSkMesh;//[Offset: 0x80, Size: 0x28]// 0x7611dd49f0
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xa8, Size: 0x28]// 0x7611dd4970
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0xd0, Size: 0x28]// 0x7611dd48f0
	enum meshDeviceAdaptationType;//[Offset: 0xf8, Size: 0x1]// 0x7611dd4790
	SkeletalMesh* maleDeviceAdaptationSkMesh;//[Offset: 0x100, Size: 0x28]// 0x7611dd4710
	SkeletalMesh* femaleDeviceAdaptationSkMesh;//[Offset: 0x128, Size: 0x28]// 0x7611dd4690
	bool UseHighQualityMatMapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]// 0x7611dd4610
	bool UserHighQualityUseIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]// 0x7611dd4590
	bool HighDeviceUseIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 0x1]// 0x7611dd4510
	CharacterAvatarMaterialEffectData[] CharacterAvatarMaterialEffectDataSetting;//[Offset: 0x158, Size: 0x10]// 0x7611dd4410
	class AvatarMaterialEffectManager* OverrideAvatarMaterialEffectManagerClass;//[Offset: 0x168, Size: 0x8]// 0x7611dd4390
	CharacterAvatarMaterialEffectData[] CharacterAvatarMaterialEffectDataSettingFemale;//[Offset: 0x170, Size: 0x10]// 0x7611dd3640
	class AvatarMaterialEffectManager* OverrideAvatarMaterialEffectManagerClassFemale;//[Offset: 0x180, Size: 0x8]// 0x7611dd35c0
	MaterialInterface* maleMat;//[Offset: 0x188, Size: 0x28]// 0x7611dd3540
	MaterialInterface* femaleMat;//[Offset: 0x1b0, Size: 0x28]// 0x7611dd34c0
	int LodMatDeviceQualityLevel;//[Offset: 0x1d8, Size: 0x4]// 0x7611dd3450
	MaterialInterface* maleLODMat;//[Offset: 0x1e0, Size: 0x28]// 0x7611dd33d0
	MaterialInterface* femaleLODMat;//[Offset: 0x208, Size: 0x28]// 0x7611dd3350
	MaterialSet[] replaceMaleMaterials;//[Offset: 0x230, Size: 0x10]// 0x7611dd3250
	MaterialSet[] replaceFemaleMaterials;//[Offset: 0x240, Size: 0x10]// 0x7611dd3150
	MaterialSet[] additionalMaleMats;//[Offset: 0x250, Size: 0x10]// 0x7611dd3050
	MaterialSet[] additionalFemaleMats;//[Offset: 0x260, Size: 0x10]// 0x7611dd2960
	MaterialInterface* baseMat;//[Offset: 0x270, Size: 0x8]// 0x7611dd28e0
	MaterialInterface* AdvancedParentMat;//[Offset: 0x278, Size: 0x8]// 0x7611dd2860
	MaterialInterface* AdvancedParentMat_Male;//[Offset: 0x280, Size: 0x8]// 0x7611dd27e0
	MaterialInterface* AdvancedParentMat_Female;//[Offset: 0x288, Size: 0x8]// 0x7611dd2760
	<MaterialInterface*,MaterialInterface*> AdvancedParentMatMap;//[Offset: 0x290, Size: 0x50]// 0x7611dd25b0
	<MaterialInterface*,MaterialInterface*> SSSMatMap_Male;//[Offset: 0x2e0, Size: 0x50]// 0x7611dd2400
	<MaterialInterface*,MaterialInterface*> SSSMatMap_Female;//[Offset: 0x330, Size: 0x50]// 0x7611dd2250
	MaterialInterface* lobbyWingSuitMat;//[Offset: 0x380, Size: 0x28]// 0x7611dd21d0
	AvatarAnimList[] AvatarAnimList;//[Offset: 0x3a8, Size: 0x10]// 0x7611dd1de0
	LobbyAnimConfigData[] AnimConfigData;//[Offset: 0x3b8, Size: 0x10]// 0x7611d83ce0
	FName MaleAvatarStyle;//[Offset: 0x3c8, Size: 0x8]// 0x7611d83c70
	FName FemaleAvatarStyle;//[Offset: 0x3d0, Size: 0x8]// 0x7611d83c00
	LobbyEntity[] CurEntity;//[Offset: 0x3d8, Size: 0x10]// 0x7611d83890
	ParticleSet[] maleParticles;//[Offset: 0x3e8, Size: 0x10]// 0x7611d83790
	ParticleSet[] femaleParticles;//[Offset: 0x3f8, Size: 0x10]// 0x7611d83380
	class AnimInstance* animBPClass;//[Offset: 0x408, Size: 0x28]// 0x7611d83300
	PhysicsAsset* OverridePhysicsAsset_Male;//[Offset: 0x430, Size: 0x8]// 0x7611d83280
	PhysicsAsset* OverridePhysicsAsset_Female;//[Offset: 0x438, Size: 0x8]// 0x7611d83200
	bool IsReplacedMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]// 0x7611d83180
	FName OverrideMaleSocketName;//[Offset: 0x448, Size: 0x8]// 0x7611d83110
	FName OverrideFeMaleSocketName;//[Offset: 0x450, Size: 0x8]// 0x7611d830a0

--------------------------------
Class: CharacterAvatarMaterialEffectData
	<enum,AvatarMaterialEffectValue> StateValueMapSetting;//[Offset: 0x0, Size: 0x50]// 0x7611dd4100
	<enum,AvatarMaterialEffectValue> AdditionalStateValueMapSetting;//[Offset: 0x50, Size: 0x50]// 0x7611dd3b70
	BaseAvatarMaterialEffectData BaseMatEffectData;//[Offset: 0xa0, Size: 0x28]// 0x7611dd37e0

--------------------------------
Class: MaterialSet
	enum targetSlot;//[Offset: 0x0, Size: 0x1]// 0x7611dd2f50
	FName targetMatSlotName;//[Offset: 0x8, Size: 0x8]// 0x7611dd2ee0
	MaterialInterface* targetMat;//[Offset: 0x10, Size: 0x28]// 0x7611dd2e60
	Texture2D* FXLight_MaskTEX;//[Offset: 0x38, Size: 0x8]// 0x7611dd2de0
	Texture2D* FXLight_TEX;//[Offset: 0x40, Size: 0x8]// 0x7611dd2d60
	LinearColor FXLight_Color;//[Offset: 0x48, Size: 0x10]// 0x7611dd2ce0
	LinearColor FXLight_TEXPanner;//[Offset: 0x58, Size: 0x10]// 0x7611dd2c60
	LinearColor FXLight_TEXUV;//[Offset: 0x68, Size: 0x10]// 0x7611dd2be0
	float UseFXLight_Scalar;//[Offset: 0x78, Size: 0x4]// 0x7611dd2b70
	float UV0or1;//[Offset: 0x7c, Size: 0x4]// 0x7611dd2b00

--------------------------------
Class: AvatarAnimList
	AnimSequence* AnimSeq;//[Offset: 0x0, Size: 0x28]// 0x7611dd2150
	float Alpha;//[Offset: 0x28, Size: 0x4]// 0x7611dd20e0
	enum PoseType;//[Offset: 0x2c, Size: 0x1]// 0x7611dd1f80

--------------------------------
Class: LobbyAnimConfigData
	byte SceneType;//[Offset: 0x0, Size: 0x1]// 0x7611dd1d00
	LobbyPosGenderAnim[] LobbyAnimData;//[Offset: 0x8, Size: 0x10]// 0x7611d83e80

--------------------------------
Class: LobbyPosGenderAnim
	byte PoseIndexType;//[Offset: 0x0, Size: 0x1]// 0x7611dd1c20
	LobbyGenderAnim[] GenderPoseAnimAsset;//[Offset: 0x8, Size: 0x10]// 0x7611d84020

--------------------------------
Class: LobbyGenderAnim
	byte GenderType;//[Offset: 0x0, Size: 0x1]// 0x7611d84450
	LobbyPoseAnim[] PoseAnimAsset;//[Offset: 0x8, Size: 0x10]// 0x7611d841c0

--------------------------------
Class: LobbyPoseAnim
	FName Pose;//[Offset: 0x0, Size: 0x8]// 0x7611d843e0
	AnimationAsset* AnimAsset;//[Offset: 0x8, Size: 0x28]// 0x7611d84360

--------------------------------
Class: LobbyEntity
	FString RelatedAttrbute;//[Offset: 0x0, Size: 0x10]// 0x7611d83b90
	FName RelatedComTag;//[Offset: 0x10, Size: 0x8]// 0x7611d83b20
	FName Tag;//[Offset: 0x18, Size: 0x8]// 0x7611d83ab0
	class LobbyBaseAction* LobbyAction;//[Offset: 0x20, Size: 0x8]// 0x7611d83a30

--------------------------------
Class: LobbyBaseAction.Object
	bool IsTickAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75b4ed2b00

--------------------------------
Class: ParticleSet
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]// 0x7611d83710
	ParticleSystem* LobbyParticle;//[Offset: 0x28, Size: 0x28]// 0x7611d83690
	FName SocketName;//[Offset: 0x50, Size: 0x8]// 0x7611d83620
	Transform Transform;//[Offset: 0x60, Size: 0x30]// 0x7611d835a0
	bool bWithModelParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]// 0x7611d83520

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 0x18]// 0x7612151280
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0x18, Size: 0x10]// 0x7612150f00
	FString BodyDurabilityIndexName;//[Offset: 0x28, Size: 0x10]// 0x7612150e90

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]// 0x7612151210
	enum Op;//[Offset: 0x10, Size: 0x1]// 0x7612151110
	float ModifyValue;//[Offset: 0x14, Size: 0x4]// 0x76121510a0

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 0x10]// 0x7611d7d890
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 0x30]// 0x7611d7d810
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 0xc]// 0x7611d7d790
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 0xc]// 0x7611d7d710

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 0x8]// 0x7612150d80
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 0x30]// 0x7612150d00

--------------------------------
Class: AdditionalItem
	enum SlotID;//[Offset: 0x0, Size: 0x1]// 0x7612150b60
	int ItemID;//[Offset: 0x4, Size: 0x4]// 0x7612150af0

--------------------------------
Class: NotifySoundModifiedItem
	FString NotifyName;//[Offset: 0x0, Size: 0x10]// 0x76121509e0
	AkAudioEvent* AkAudioEvent;//[Offset: 0x10, Size: 0x8]// 0x7612150960
	bool bIsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x76121508e0
	bool bIsSwitchGroupName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x7612150860
	FString DefaultState;//[Offset: 0x20, Size: 0x10]// 0x76121507f0
	FString SwitchState;//[Offset: 0x30, Size: 0x10]// 0x7612150780

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 0x1]// 0x761214feb0
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x8, Size: 0x8]// 0x761214fe30

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	WeaponAnimTypeConfig WeaponAnimTypeConfig;//[Offset: 0x238, Size: 0x18]// 0x75a8995300
	WeaponAnimTypeConfig[] WeaponAnimTypeConfigStack;//[Offset: 0x250, Size: 0x10]// 0x75a8995400
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x260, Size: 0x10]// 0x75a8995500

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	PlayerShovelAnimData[] ShovelAnimDataList;//[Offset: 0x158, Size: 0x10]// 0x75c98a1a80
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x1d0, Size: 0x50]// 0x75c98b9e00
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x220, Size: 0x10]// 0x75c98a1c00
	void RequestAddChildComponent(UAEAnimListComponentBase* ChildComp, byte AnimLayer);// 0x492959c
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x49294dc

--------------------------------
Class: PlayerShovelAnimData
	byte shoveAnimType;//[Offset: 0x0, Size: 0x1]// 0x760d23cc00
	AnimationAsset* ShovelAnimSoftPtr;//[Offset: 0x8, Size: 0x28]// 0x760d23cc80
	AnimationAsset* AnimAsset;//[Offset: 0x40, Size: 0x8]// 0x760d23cd00

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0x10]// 0x760d23ce80

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]// 0x76119c1100
	AnimationAsset* Animation;//[Offset: 0x8, Size: 0x8]// 0x760d23cd80

--------------------------------
Class: WeaponAnimTypeConfig
	int UID_Runtime;//[Offset: 0x0, Size: 0x4]// 0x76121e4f40
	SubAnimTypeConfig WeaponSubAnimType_Aim;//[Offset: 0x4, Size: 0x1]// 0x76121e4ec0
	SubAnimTypeConfig WeaponSubAnimType_Peek;//[Offset: 0x5, Size: 0x1]// 0x76121e4e40
	SubAnimTypeConfig WeaponSubAnimType_Fire;//[Offset: 0x6, Size: 0x1]// 0x76121e4c20
	AnimMapData[] SubAnimCustomList;//[Offset: 0x8, Size: 0x10]// 0x76121e4990

--------------------------------
Class: SubAnimTypeConfig
	enum SubAnimType;//[Offset: 0x0, Size: 0x1]// 0x76121e4d40

--------------------------------
Class: AnimMapData
	class AnimInstance* AnimInstance;//[Offset: 0x0, Size: 0x28]// 0x76121e4ba0
	FName SubAnimSlotName;//[Offset: 0x28, Size: 0x8]// 0x76121e4b30

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 0x1]// 0x760d1fe700
	FString AnimsCatorgeryName;//[Offset: 0x8, Size: 0x10]// 0x760d206850
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x18, Size: 0x60]// 0x760d1fe880

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 0x10]// 0x760d2068c0
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0x10, Size: 0x50]// 0x760d21ea80

--------------------------------
Class: ComparePriority
	enum SlotID;//[Offset: 0x0, Size: 0x1]// 0x76121505e0
	int Priority;//[Offset: 0x4, Size: 0x4]// 0x7612150570

--------------------------------
Class: MatCutExcludeItem
	byte ExcludeCameraMode;//[Offset: 0x0, Size: 0x1]// 0x7612150450
	FName[] ExcludeCutSlotNameList;//[Offset: 0x8, Size: 0x10]// 0x7612150360

--------------------------------
Class: MatCutOverrideData
	bool IsOverrideCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7612150240
	byte[] CutCameraMode;//[Offset: 0x8, Size: 0x10]// 0x7612150140
	bool ShouldCutWhenFPPHaveGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x76121500c0
	FName[] ExcludeSlotName;//[Offset: 0x20, Size: 0x10]// 0x761214ffd0

--------------------------------
Class: AvatarScaleConfigCollection
	AvatarScaleConfig[] AvatarScaleList;//[Offset: 0x0, Size: 0x10]// 0x761214e9c0

--------------------------------
Class: AvatarScaleConfig
	enum ScaleSlot;//[Offset: 0x0, Size: 0x1]// 0x761214faf0
	enum TriggerSlot;//[Offset: 0x1, Size: 0x1]// 0x761214f9f0
	int ScalePriority;//[Offset: 0x4, Size: 0x4]// 0x761214f980
	bool bForceRecreateAdaptSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x761214f900
	enum SlotAdaptSpace;//[Offset: 0x9, Size: 0x1]// 0x761214f800
	Transform ScaleTransform;//[Offset: 0x10, Size: 0x30]// 0x761214f780
	bool bClearMeshShiftFeatureAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x761214f700
	FName MeshShiftFeatureBone;//[Offset: 0x48, Size: 0x8]// 0x761214f690
	Transform MeshShiftFeatureTransform;//[Offset: 0x50, Size: 0x30]// 0x761214f610
	BoneRetargetMeshShiftCompensation MeshShiftCompensationConfig;//[Offset: 0x80, Size: 0x18]// 0x761214f590
	<FName,Transform> WingClothScaleTransformMap;//[Offset: 0x98, Size: 0x50]// 0x761214f3f0
	bool bForceRecreateAdaptAssociatedSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]// 0x761214f370
	enum AssociatedSlotAdaptSpace;//[Offset: 0xe9, Size: 0x1]// 0x761214f270
	Transform AssociatedSlotAdaptTransform;//[Offset: 0xf0, Size: 0x30]// 0x761214f1f0
	enum[] AssociatedScaleSlotList;//[Offset: 0x120, Size: 0x10]// 0x761214f070
	bool bClearAssociatedMeshShiftFeatureAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]// 0x761214eff0
	FName AssociatedMeshShiftFeatureBone;//[Offset: 0x138, Size: 0x8]// 0x761214ef80
	Transform AssociatedMeshShiftFeatureTransform;//[Offset: 0x140, Size: 0x30]// 0x761214ef00
	BoneRetargetMeshShiftCompensation AssociatedMeshShiftCompensationConfig;//[Offset: 0x170, Size: 0x18]// 0x761214eb60

--------------------------------
Class: BoneRetargetMeshShiftCompensation
	enum CompensationType;//[Offset: 0x0, Size: 0x1]// 0x761214ee00
	enum[] CompensationStateList;//[Offset: 0x8, Size: 0x10]// 0x761214ec80

--------------------------------
Class: BoneRetargetBackWeaponAdaptConfig
	BoneRetargetBackWeaponAdaptInfo BackWeaponAdaptInfo_NoBag;//[Offset: 0x0, Size: 0x70]// 0x761214e8a0
	BoneRetargetBackWeaponAdaptInfo BackWeaponAdaptInfo_Lv1Bag;//[Offset: 0x70, Size: 0x70]// 0x761214e820
	BoneRetargetBackWeaponAdaptInfo BackWeaponAdaptInfo_Lv2Bag;//[Offset: 0xe0, Size: 0x70]// 0x761214e7a0
	BoneRetargetBackWeaponAdaptInfo BackWeaponAdaptInfo_Lv3Bag;//[Offset: 0x150, Size: 0x70]// 0x761214e500

--------------------------------
Class: BoneRetargetBackWeaponAdaptInfo
	bool bUseAdaptTrasnform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x761214e720
	Transform AdaptTransform_L;//[Offset: 0x10, Size: 0x30]// 0x761214e6a0
	Transform AdaptTransform_R;//[Offset: 0x40, Size: 0x30]// 0x761214e620

--------------------------------
Class: AdjustSocketAttachedCompInfo
	enum AdjustFromSlot;//[Offset: 0x0, Size: 0x1]// 0x761214e360
	bool bFromSlotMustUseAdjustSocketAttachedCompFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x761214e2e0
	enum AdjustToSlot;//[Offset: 0x2, Size: 0x1]// 0x761214e1e0
	bool bToSlotMustUseAdjustSocketAttachedCompFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]// 0x761214e160
	FName AdjustSocketName;//[Offset: 0x8, Size: 0x8]// 0x761214e0f0
	FName CustomParamMatchName;//[Offset: 0x10, Size: 0x8]// 0x761214e080

--------------------------------
Class: AdjustSocketAttachedComp_ExtendParamCollection
	AdjustSocketAttachedComp_ExtendParam[] ExtendParamList;//[Offset: 0x0, Size: 0x10]// 0x761214db50

--------------------------------
Class: AdjustSocketAttachedComp_ExtendParam
	FName CustomParamMatchName;//[Offset: 0x0, Size: 0x8]// 0x761214df70
	bool bUseAdjustSocketAttachedCompFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x761214def0
	bool bUseCustomAdjustSocketTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x761214de70
	Transform CustomAdjustSocketTransform;//[Offset: 0x10, Size: 0x30]// 0x761214ddf0
	Transform OriginalTransform;//[Offset: 0x40, Size: 0x30]// 0x761214dd70
	bool bAdjustFeatureTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]// 0x761214dcf0

--------------------------------
Class: CharacterAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	delegate OnAvatarSkinWeightProfileChanged;//[Offset: 0x960, Size: 0x10]// 0x75b4e94700
	delegate OnItemHandleListLoadFinished;//[Offset: 0x970, Size: 0x10]// 0x75b4e94780
	MeshSynData[] AvatarSyncData;//[Offset: 0x980, Size: 0x10]// 0x75b4e94880
	MeshSynData[] OverrideSyncData;//[Offset: 0x990, Size: 0x10]// 0x75b4e94980
	float PlayerBackPackCapacity;//[Offset: 0x9a0, Size: 0x4]// 0x75b4ec0ec0
	bool GlideGlobalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]// 0x75b4e94a00
	BattleItemHandleBase*[] LoadedHandleList;//[Offset: 0x9a8, Size: 0x10]// 0x75b4e94b00
	bool bForeceDisableSKinweight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 0x1]// 0x75b4e94b80
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b9, Size: 0x1]// 0x75b4e94c00
	SoftObjectPath[] LatestAsyncLoadRenderResList;//[Offset: 0x9c0, Size: 0x10]// 0x75b4e94d00
	BattleItemHandleBase*[] itemHandleCache;//[Offset: 0x9e0, Size: 0x10]// 0x75b4e94e00
	int[] ignoreSlots;//[Offset: 0x9f0, Size: 0x10]// 0x75b4e94e80
	int WholeBodyModelID;//[Offset: 0xa00, Size: 0x4]// 0x75b4ec0fa0
	SkeletalMesh* ZombieSkeletalMesh;//[Offset: 0xa08, Size: 0x8]// 0x75b4e94f00
	enum[] ConsiderAnimHiddenByLODList;//[Offset: 0xa10, Size: 0x10]// 0x75b4ec5080
	enum[] ForceUpdateHiddenBonesSlotList;//[Offset: 0xa20, Size: 0x10]// 0x75b4ec5200
	bool WaitCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]// 0x75b4ec5280
	int EnableEquipAvatarSkin;//[Offset: 0xa34, Size: 0x4]// 0x75b4ec1010
	int EnableEquipAvatarPendant;//[Offset: 0xa38, Size: 0x4]// 0x75b4ec1080
	int ClearPendingEntityCfg;//[Offset: 0xa3c, Size: 0x4]// 0x75b4ec10f0
	AvatarEntity*[] PendingUpdateBoneList;//[Offset: 0xa40, Size: 0x10]// 0x75b4ec5380
	<int,AsyncLoadRenderResReq> PendingLoadRenderRequestList;//[Offset: 0xa50, Size: 0x50]// 0x75b4ea2f80
	PendingDeleteEntity[] PendingDeleteEntityList;//[Offset: 0xaa0, Size: 0x10]// 0x75b4ec5500
	int SimulateDefaultHandleID;//[Offset: 0xab0, Size: 0x4]// 0x75b4ec11d0
	float IsAutonomousDetectInterval;//[Offset: 0xabc, Size: 0x4]// 0x75b4ec1240
	<int,ChildHandleList> ChildItems;//[Offset: 0xac0, Size: 0x50]// 0x75b4ea3040
	FName IgnoreSkinWeightAnimSlotName;//[Offset: 0xb10, Size: 0x8]// 0x75b4ec1320
	<enum,DefaultAvatarConfig> DefaultAvatarHandles;//[Offset: 0xb18, Size: 0x50]// 0x75b4ea3100
	enum[] DefaultAvatarIDCorrectExcludes;//[Offset: 0xb68, Size: 0x10]// 0x75b4ec5880
	<enum,ItemDefineID> DefaultAvatar4ReadyPak;//[Offset: 0xb78, Size: 0x50]// 0x75b4ea31c0
	int[] PinchFaceIDs;//[Offset: 0xbc8, Size: 0x10]// 0x75b4ec5a80
	int PauseIMPhysicsCountWhenDetachFromVehicle;//[Offset: 0xbd8, Size: 0x4]// 0x75b4ec1400
	int PauseIMPhysicsCountWhenLeaveParachute;//[Offset: 0xbdc, Size: 0x4]// 0x75b4ec1470
	bool AsyncLoadOnClientModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 0x1]// 0x75b4ecac80
	bool bEnableLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf1, Size: 0x1]// 0x75b4ec5b00
	bool bClearDirtyMeshComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf2, Size: 0x1]// 0x75b4ec5b80
	<enum,AvatarScaleConfigCollection> DynamicAvatarScaleCollectionMap;//[Offset: 0xbf8, Size: 0x50]// 0x75b4ea3280
	bool bEnableAvatarScaleFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 0x1]// 0x75b4ec5d80
	bool bVisibleChangeRefreshAvatarScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc49, Size: 0x1]// 0x75b4ec5e00
	enum[] AlwaysResetScaleSlotList;//[Offset: 0xc50, Size: 0x10]// 0x75b4ec5f80
	<enum,AvatarScaleConfig> FinalWorkingAvatarScaleMap;//[Offset: 0xc60, Size: 0x50]// 0x75b4ea3340
	class AnimInstance* MeshShiftFeatureGuardAnimClass;//[Offset: 0xcb0, Size: 0x8]// 0x75b4ec6180
	byte[] BackAdaptWeaponSlotList;//[Offset: 0xcb8, Size: 0x10]// 0x75b4ec6280
	bool bLockStandaloneRepeatRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 0x1]// 0x75b4ec6300
	enum[] ReApplyMatSlotListWhenHeadChange;//[Offset: 0xcd0, Size: 0x10]// 0x75b4ec6480
	bool bForbiddenStandaloneRepeatRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 0x1]// 0x75b4ec6500
	bool bMarkEntityDirtyWhenVisibilityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce1, Size: 0x1]// 0x75b4ec6580
	bool bEnableAnimNotifyStateBoneRetargetAdaptFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce2, Size: 0x1]// 0x75b4ec6600
	bool bMeshShiftMasterUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce3, Size: 0x1]// 0x75b4ec6680
	bool bTriggerMeshShiftFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce4, Size: 0x1]// 0x75b4ec6700
	<AdjustSocketAttachedCompInfo,AdjustSocketAttachedComp_ExtendParam> AdjustSocketAttachedCompCollection;//[Offset: 0xce8, Size: 0x50]// 0x75b4ea3400
	bool bUseAdjustSocketAttachedCompFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 0x1]// 0x75b4ec6880
	bool bAdjustSocketAttachedCompFeature_IgnoreHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd39, Size: 0x1]// 0x75b4ec6900
	bool bEnableForceBoneRetargetClothIKTickDetectFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3a, Size: 0x1]// 0x75b4ec6980
	ModeAvatarFeature* ModeAvatarFeaturePtr;//[Offset: 0xd40, Size: 0x8]// 0x75b4ec6a00
	bool bLockModeAvatarFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 0x1]// 0x75b4ec6a80
	bool bModeAvatarFeatureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd49, Size: 0x1]// 0x75b4ec6b00
	int SyncDataRepCounter;//[Offset: 0xd4c, Size: 0x4]// 0x75b4ec14e0
	enum[] DelayDestroyRenderDataSlotList;//[Offset: 0xd50, Size: 0x10]// 0x75b4ec6c80
	float MeshSectionVisibilityCheckInterval;//[Offset: 0xd64, Size: 0x4]// 0x75b4ec1550
	float MeshSectionVisibilityCheckCounter;//[Offset: 0xd68, Size: 0x4]// 0x75b4ec15c0
	bool bMeshSectionVisibilityCheckReportDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6c, Size: 0x1]// 0x75b4ec6d00
	bool bUseSetFuncCorrectMeshSectionVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6d, Size: 0x1]// 0x75b4ec6d80
	bool bUseForceCorrectMeshSectionVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6e, Size: 0x1]// 0x75b4ec6e00
	bool bFirstAsyncLoadFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6f, Size: 0x1]// 0x75b4ec6e80
	FString LatestMeshSectionOpInfo;//[Offset: 0xd70, Size: 0x10]// 0x75b4ec1630
	FString GMMeshSectionOpInfo;//[Offset: 0xd80, Size: 0x10]// 0x75b4ec16a0
	MaterialInterface* SuperLowMaterial;//[Offset: 0xd98, Size: 0x8]// 0x75b4ec6f00
	int[] EnableBatchList;//[Offset: 0xda0, Size: 0x10]// 0x75b4ec6f80
	float FarDistance;//[Offset: 0xdb8, Size: 0x4]// 0x75b4ec1780
	float MiddleDistance;//[Offset: 0xdbc, Size: 0x4]// 0x75b4ec17f0
	float FarTime;//[Offset: 0xdc0, Size: 0x4]// 0x75b4ec1860
	float MiddleTime;//[Offset: 0xdc4, Size: 0x4]// 0x75b4ec18d0
	bool bHasSendSickLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 0x1]// 0x75b4ec7000
	bool bHasSendBoneNonCompatible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc9, Size: 0x1]// 0x75b4ec7080
	bool bHasSendAvatarMeshError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdca, Size: 0x1]// 0x75b4ec7100
	bool bHasSendNoAvatarMasterMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcb, Size: 0x1]// 0x75b4ec7180
	int SickLODNum;//[Offset: 0xdcc, Size: 0x4]// 0x75b4ec1940
	int BoneNonCompatibleErrorNum;//[Offset: 0xdd0, Size: 0x4]// 0x75b4ec19b0
	int AvatarMeshErrorNum;//[Offset: 0xdd4, Size: 0x4]// 0x75b4ec1a20
	int NoAvatarMasterMeshNum;//[Offset: 0xdd8, Size: 0x4]// 0x75b4ec1a90
	float SickLODDetectInterval;//[Offset: 0xddc, Size: 0x4]// 0x75b4ec1b00
	float SickLODDetectCounter;//[Offset: 0xde0, Size: 0x4]// 0x75b4ec1b70
	float BoneNonCompatibleCheckInterval;//[Offset: 0xde4, Size: 0x4]// 0x75b4ec1be0
	float BoneNonCompatibleCheckCounter;//[Offset: 0xde8, Size: 0x4]// 0x75b4ec1c50
	float AvatarMeshErrorCheckInterval;//[Offset: 0xdec, Size: 0x4]// 0x75b4ec1cc0
	float AvatarMeshErrorCheckCounter;//[Offset: 0xdf0, Size: 0x4]// 0x75b4ec1d30
	float NoAvatarMasterMeshCheckInterval;//[Offset: 0xdf4, Size: 0x4]// 0x75b4ec1da0
	float NoAvatarMasterMeshCheckCounter;//[Offset: 0xdf8, Size: 0x4]// 0x75b4ec1e10
	int[] EVACloths;//[Offset: 0xe00, Size: 0x10]// 0x75b4ec7200
	<enum,int> HunterModeDefaultID;//[Offset: 0xe10, Size: 0x50]// 0x75b4ea34c0
	bool bHasSendSickHeadLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 0x1]// 0x75b4ec7380
	float SickHeadLODDistThreshold;//[Offset: 0xe64, Size: 0x4]// 0x75b4ec1f60
	float SickHeadLODDetectInterval;//[Offset: 0xe68, Size: 0x4]// 0x75b4ec1fd0
	float SickHeadLODDetectElapsed;//[Offset: 0xe6c, Size: 0x4]// 0x75b4ec2040
	FString[] DynamicCacheStrategyForbiddenMapPathKeyWorldList;//[Offset: 0xe70, Size: 0x10]// 0x75b4ec7400
	FString[] DynamicCacheStrategyUseMapPathKeyWorldList;//[Offset: 0xe80, Size: 0x10]// 0x75b4ec7480
	float MeshClip_VehicleLeanOutDelayTime;//[Offset: 0xe90, Size: 0x4]// 0x75b4ec2190
	float VehicleMeshClipDelay;//[Offset: 0xe94, Size: 0x4]// 0x75b4ec2200
	bool TempEnableMeshClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 0x1]// 0x75b4ec7500
	void UpdateFinalWorkingAvatarScaleMap();// 0x4247130
	int TryRevertSocketAttachedComp(out const AdjustSocketAttachedCompInfo InAdjustInfo);// 0x4247084
	void TryRepairSickLOD(const int InTargetSlot);// 0x4247000
	void TryRepairHeadSickLOD();// 0x4246fe4
	void TryRepairBoneNonCompatible(const int InTargetSlot);// 0x4246f60
	void TryRepairAvatarMeshError(const int InTargetSlot);// 0x4246edc
	bool TryRefreshModeAvatar(BackpackAvatarHandle* InTargetHandle);// 0x4246e4c
	void TryRefreshAdjustSocketAttachedCompForSlot(const enum InTargetSlot);// 0x4246dc8
	SceneComponent* TryGetWeaponAdaptCompForBoneRetarget(const byte InWeaponSlot);// 0x4246d34
	MeshComponent* TryGetBoneRetargetAdaptMeshCompForAnimNotifyState();// 0x4246cf8
	bool TryGetBackWeaponAdaptRelativeTransform(const byte InWeaponSlot, const int inWeaponID, const int InLevel, const int InSideType, out Transform OutAdaptTransform);// 0x4246b4c
	void TryCancelAdjustSocketAttachedCompForSlot(const enum InTargetSlot);// 0x4246ac8
	void TryApplyAdjustSocketAttachedCompForSlot(const enum InTargetSlot);// 0x4246a44
	int TryAdjustSocketAttachedComp(out const AdjustSocketAttachedCompInfo InAdjustInfo);// 0x4246998
	void TickNoAvatarMasterMesh(float DeltaTime);// 0x4246914
	void TickMeshSectionVisibililtyCheck(float DeltaTime);// 0x4246898
	void TickMeshClip(float DeltaTime);// 0x424681c
	void TickDetectHeadSickLOD(float DeltaTime);// 0x42467a0
	bool ShouldUseHairDynamicEffect();// 0x4246768
	bool ShouldDisplayByQuality(int SlotID);// 0x42466d8
	void SetSkinWeightProfileBySkelMeshCmp(SkeletalMeshComponent* SkeletalMeshCmp, FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x424659c
	void SetSkinMaterialInternel(MeshComponent* MeshComp, MaterialInterface* MatSkin, FName SlotName, int SlotID);// 0x4246470
	bool SetSkinMaterial(int SlotID);// 0x42463e0
	void SetSelfSkinWeightProfile(SkeletalMeshComponent* SkeletalMeshCmp, FName ProfileName, bool bUseSkinWeightProfile, int SlotID, enum Reason);// 0x4246268
	void SetNormalMaterial(out MeshPackage meshPack, MeshComponent* MeshComp, int SlotID);// 0x424614c
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x42460d0
	void SetColorMaterial(int SlotID, MeshComponent* MeshComp, MaterialInstance* Material, out MeshPackage meshPack);// 0x4245f80
	void SetCastShadowEnabled(bool IsEnabled);// 0x4245efc
	bool SetBodySuitsMaterial(out MeshPackage meshPack, MeshComponent* MeshComp);// 0x4245e08
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE, byte MaskValue);// 0x4245cc0
	void SetAvatarSectionVisibility(bool Visible, const byte InCameraMode);// 0x4245bf8
	void SetAvatarGender(int AGender);// 0x4245b7c
	void SetAsyncLoadingOnClientModeEnabled(bool IsEnable);// 0x4245af8
	void SetAllSelfSkinWeightProfileByState(enum profilestate, FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x42459b8
	void SetAllSelfSkinWeightProfile(FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x42458b4
	void SetAllAvatarVisibility(bool Visible, bool IsForCE, byte MaskValue);// 0x42457a8
	bool Server_TryRevertModeAvatarFeature(BackpackAvatarHandle* InTargetHandle);// 0x4245718
	bool Server_TryActivateModeAvatarFeature(BackpackAvatarHandle* InTargetHandle);// 0x4245688
	void RetrieveAvatarFromRepDataOnClient(out MeshSynData[] SynData);// 0x424559c
	bool ResetSkinWeightProfile(int Slot, out SkinWeightProfileStates states);// 0x4245480
	void RenderEntityInStandAloneMode(CharacterAvatarEntity* AvatarEntity);// 0x4245404
	void RemovePendingDeleteEntity(AvatarEntity* AVEntity);// 0x4245388
	void RemoveAvatarScale(const enum InTriggerSlot);// 0x424530c
	int RemoveAdjustSocketAttachedCompInfo(out const AdjustSocketAttachedCompInfo InAdjustInfo);// 0x4245260
	void ReloadAvatarWithSlotList(enum[] InSlotList, bool needDirectLoad);// 0x4245144
	BattleItemHandleBase* ReloadAvartItemHandle(BattleItemHandleBase* InItemHandleBase);// 0x42450b8
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x424502c
	void RegisterSkinWeightProfileStateWithTempName(bool bUseSkinWeightProfile, FName TempStateName);// 0x4244f64
	void RegisterSkinWeightProfileState(bool bUseSkinWeightProfile, enum InSkinWeightProfileState);// 0x4244e9c
	void RefreshMeshShiftFeature();// 0x4244e80
	void RefreshMaterials();// 0x4244e6c
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x4244de0
	void RefreshAvatarScaleForAssociatedSlot(const enum InScaledSlot, const enum InAssociatedSlot);// 0x4244d28
	void RefreshAvatarScale();// 0x4244d14
	void RefreshAvatar();// 0x4244d00
	bool PutOnEquipmentsByResIDList(out <int,int> AvatarList, out MeshSynData[] OtherSynData);// 0x4244b38
	bool PutOnEquipmentByItemHandleInner(BattleItemHandleBase* Handle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bClear);// 0x42449f0
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, const int InInstanceID);// 0x42448a8
	bool PutOnChildEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, int ParentSlotID);// 0x42447d4
	void PushHandlesToPipeline(BattleItemHandleBase*[] handleList);// 0x42446fc
	bool ProcessAssetFilter(out AsyncLoadRenderResReq RenderResReq);// 0x42445ec
	bool PreFiltHandles(BackpackAvatarHandle* AvatarHandle, out MeshSynData SyncData);// 0x42444d8
	void PauseIMSimulation(int InPauseFrameCount);// 0x424445c
	void ParseMeshClipArray(out CharacterMeshClipData[] clipDatas, out bool enableIndex0, out CharacterMeshClipData data0, out bool enableIndex1, out CharacterMeshClipData data1);// 0x4244234
	void OnRespawned();// 0x4244218
	void OnReplayTargetChanged(FString LastPlayerUID, FString NewPlayerUID);// 0x4244148
	void OnReplacedMeshNotLoaded(CharacterAvatarEntity* TargetEntity);// 0x42440cc
	void OnRep_ModeAvatarFeature();// 0x42440b8
	void OnRep_BackPackCapacityChanged();// 0x42440a4
	void OnRep_AvatarMeshChanged();// 0x4244090
	void OnRecycled();// 0x4244074
	void OnParachuteStateChanged(byte PreState, byte CurState);// 0x4243fbc
	void OnOwnerCharCameraModeChange(byte InNewCameraMode);// 0x4243f40
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* ItemHandles, bool isReplaced);// 0x4243de0
	void OnLobbyEmoteMontageStartEvent(int EmoteIndex);// 0x4243d64
	void OnLobbyEmoteMontageFinishedEvent(int EmoteIndex);// 0x4243ce8
	void OnItemHandleLoaded(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x4243c10
	void OnItemHandleListLoaded(out const BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x4243b30
	void OnHeadComponentTransformChanged(Transform InNewTransform);// 0x4243a8c
	void OnDebugVisibleChanged(SkeletalMeshComponent* DebugMeshComp);// 0x4243a10
	void OnCharacterDetachedFromVehicle(STExtraVehicleBase* InLastVehicle);// 0x4243994
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x42437d4
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x42436d8
	void MarkAvatarBoneRetargetLODFeature(const enum InAvatarSlot, const bool InIsUseEnable);// 0x4243610
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x4243534
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x4243438
	bool IsUseSSSMaterial();// 0x4243400
	bool IsTeamMate();// 0x42433c0
	bool IsSlotNeedReplaced(int SlotID);// 0x4243330
	bool IsReadyToNextStep(out bool IsReadyState);// 0x4243290
	bool IsPinceFace();// 0x4243250
	bool IsNeedLoadMeshListSync();// 0x4243218
	bool IsNamedSectionCutExclude(out const FName InMatSlotName, const int InAvatarSlotIndex, const byte InCameraMode);// 0x42430fc
	bool IsInLowDevice();// 0x42430c4
	bool IsForceUpdateHiddenBonesSlot(int InSlotID);// 0x4243034
	bool IsForceUpdateHiddenBonesComp(SkeletalMeshComponent* InSkeletalMeshComp);// 0x4242fa4
	bool IsConsiderAnimHiddenByLOD(int InSlotID);// 0x4242f0c
	bool IsBeCarriedSocketAdaptApplied();// 0x4242ecc
	bool IsBattle_ROLE_AutonomousProxy();// 0x4242e94
	bool IsAvatarScaleAdaptSlotForConfig(const enum InTargetSlot, out const AvatarScaleConfig InAvatarScaleInfo);// 0x4242ce4
	bool IsAvatarScaleAdaptSlot(const enum InTargetSlot);// 0x4242c54
	bool IsAnySocketAdaptApplied();// 0x4242c14
	bool IsAdditionalItemsHiddenBy(int itemResID);// 0x4242b84
	void InitialAvatarParam(int AGender);// 0x4242b00
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x4242a7c
	void InitDefaultAvatarByResID(int avatarGender, int head, int hair);// 0x4242984
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x4242900
	bool InitBodyMeshByHead(BackpackAvatarHandle* AvatarHandle);// 0x4242868
	void HideHeadBone(bool IsHide);// 0x42427e4
	bool HasSkinWeightProfileBySlotID(int SlotID, enum profilestate);// 0x4242718
	void HandleHeadEntityFaceInfo(bool bNeedFaceInfo);// 0x4242694
	enum[] GetVisibleAvatarSlots(bool bCheckInner, bool bCheckOuter);// 0x4242578
	int GetSoftRefLatestAsyncLoadType(out SoftObjectPath AssetRef);// 0x42424c4
	FString GetPlayerName();// 0x424243c
	bool GetNamedSectionOverrideCutVisible(out const FName InMatSlotName, const int InAvatarSlotIndex, const byte InCameraMode, bool InOriginalVisible);// 0x42422dc
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x42421e8
	MaterialInterface* GetHighQualityBaseMaterial(MaterialInstance* matIns, MaterialInterface* AdvancedMat, out const MeshPackage meshPack, bool FindBaseMat);// 0x4242078
	int[] GetHandleParentSlot(BattleItemHandleBase* ItemHandle);// 0x4241fa8
	AvatarEntityFactory* GetEntityFactory();// 0x4241f6c
	BattleItemHandleBase* GetDefaultHandle(enum SlotID);// 0x4241ee0
	int[] GetDefaultBodyItemIDList();// 0x4241e60
	void GetDefaultBodyHandles(BackpackAvatarHandle* HeadHandle, out BackpackAvatarHandle*[] BodyHandleList);// 0x4241d84
	bool GetDefaultAvatar4ReadyPak(enum SlotID, out ItemDefineID DefaultAvatar);// 0x4241ca4
	BackpackAvatarHandle* GetBattleItemFromResID(int resID);// 0x4241c10
	Transform GetAvatarScaleAdaptTransform(const enum InTargetSlot);// 0x4241b64
	SceneComponent* GetAvatarScaleAdaptAttachedComp(const enum InTargetSlot);// 0x4241ad0
	<int,FString> GetAvatarHiddenSlotMap();// 0x4241a08
	void ForceShowMeshSection(MeshComponent* InTargetMesh, const bool InIsShow, const int InLOD);// 0x42418fc
	void ForceShowAllMeshSection(const bool InIsShow, const int InLOD);// 0x424182c
	void FilterCacheResListAssetRefStrategicManager(out <int,AvatarAsyncLoadResReqBySlot> InResListBySlot, out SoftObjectPath[] OutResList);// 0x42416c4
	Transform ExtractAvatarScaleAdaptTransform(const enum InTargetSlot, out const AvatarScaleConfig InAvatarScaleInfo);// 0x4241510
	bool EnableEquipAvatarPendantFeature();// 0x42414d8
	void DelayDestroyAvatarRenderData();// 0x42414bc
	void CorrectMeshSectionVisibility();// 0x42414a0
	void CopyRepData(out MeshSynData[] OutSynData, out enum[] CopySlots);// 0x4241354
	void CopyFromOthers(CharacterAvatarComponent* Other, SkeletalMeshComponent* UseOwnMasterComp, enum[] CopySlots);// 0x42411f8
	void CopyFromOtherAvatarComp(CharacterAvatarComponent* Other, enum[] ExcludeSlots);// 0x42410e0
	bool Client_TryRevertFeature();// 0x42410a8
	bool Client_TryActivateFeature();// 0x4241070
	bool Client_ActivateFeature_PreFiltHandles(BackpackAvatarHandle* AvatarHandle, out MeshSynData SyncData);// 0x4240f5c
	bool Client_ActivateFeature_PreAsyncRender();// 0x4240f24
	bool Client_ActivateFeature_PostAsyncRender();// 0x4240eec
	bool Client_ActivateFeature_LoadingItemList(out ItemDefineID[] InLoadingItemDefineIDList);// 0x4240e44
	bool Client_ActivateFeature_LoadedHandleList(out BattleItemHandleBase*[] InLoadedHandleList);// 0x4240d9c
	void ClearPendingDeleteEntity();// 0x4240d88
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x4240cc0
	bool CheckShouldEquipDefaultItem(int Slot);// 0x4240c30
	void CheckOverrideRigidBodyAsset();// 0x4240c1c
	bool CheckIsHiddenByOther(int itemResID);// 0x4240b8c
	bool CheckIfAvatarPakDownloaded(BattleItemHandleBase* ItemHandle);// 0x4240af4
	bool CheckEntityDisabled(BackpackAvatarHandle* AvatarHandle);// 0x4240a64
	void CheckBoneRetargetAdaptForWingCloth(byte InCharParachuteState);// 0x42409e0
	void CheckBackWeaponAdaptForBoneRetarget();// 0x42409c4
	void CheckAvatarScaleForSlotAssociation(const enum InScaledSlot);// 0x4240948
	void CheckAvatarScaleForSlot(const enum InScaledSlot);// 0x42408cc
	void CheckAvatarScaleCancelForSlotAssociation(const enum InScaledSlot);// 0x4240850
	void CheckAlreadyEquipped(BackpackAvatarHandle* AvatarHandle);// 0x42407d4
	void CancelAvatarScale(out const AvatarScaleConfig InAvatarScaleInfo);// 0x4240688
	void ApplySSSMatForWithHeadWholeBodyMesh(MaterialInstance* NormalSkinMat, MeshComponent* MeshComp, FName SlotName, int InAvatarSlotID);// 0x424055c
	MaterialInstance* ApplySSSMaterial(MaterialInstance* NormalSkinMat, MeshComponent* MeshComp, FName SlotName);// 0x424045c
	void ApplyMaterialOnlySkinSlot(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x42403a8
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x42402ec
	void ApplyClipToMesh(MeshComponent* MeshComponent, out const bool enableIndex0, out const CharacterMeshClipData data0, out const bool enableIndex1, out const CharacterMeshClipData data1);// 0x42400ec
	void ApplyAvatarScale(out const AvatarScaleConfig InAvatarScaleInfo);// 0x423ffa0
	void AddAvatarScale(const enum InTriggerSlot, out const AvatarScaleConfigCollection InAvatarScaleCollection);// 0x423fea8
	int AddAdjustSocketAttachedCompInfo(out const AdjustSocketAttachedCompInfo InAdjustInfo);// 0x423fdfc

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]// 0x7611de4bb0
	int Gender;//[Offset: 0x18, Size: 0x4]// 0x7611de4b40
	enum OperationType;//[Offset: 0x1c, Size: 0x1]// 0x7611de4a40
	SyncAdditionDataArray SynAdditionalData;//[Offset: 0x20, Size: 0x10]// 0x7611de4550
	int VersionNum;//[Offset: 0x30, Size: 0x4]// 0x7611de44e0

--------------------------------
Class: AsyncLoadRenderResReq
	RenderResSet[] RenderResList;//[Offset: 0x0, Size: 0x10]// 0x76121684e0
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0x10, Size: 0x10]// 0x76121683e0
	<int,AvatarAsyncLoadResReqBySlot> ResListBySlot;//[Offset: 0x20, Size: 0x50]// 0x7612168240
	int IsAutonomousAvatar;//[Offset: 0x70, Size: 0x4]// 0x76121681d0
	bool NeedReAsyncMeshList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]// 0x7612168150

--------------------------------
Class: RenderResSet
	SoftObjectPath MeshRes;//[Offset: 0x0, Size: 0x18]// 0x7612168880
	SoftObjectPath[] MatRes;//[Offset: 0x18, Size: 0x10]// 0x7612168780
	SoftObjectPath[] ParticleRes;//[Offset: 0x28, Size: 0x10]// 0x7612168680

--------------------------------
Class: AvatarAsyncLoadResReqBySlot
	int SlotID;//[Offset: 0x0, Size: 0x4]// 0x7612149300
	SoftObjectPath[] ResList;//[Offset: 0x8, Size: 0x10]// 0x7612149200

--------------------------------
Class: PendingDeleteEntity
	AvatarEntity* PendingDeleteEntity;//[Offset: 0x0, Size: 0x8]// 0x76121490e0
	bool NeedPutDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7612149060
	int SlotID;//[Offset: 0xc, Size: 0x4]// 0x7612148ff0

--------------------------------
Class: ChildHandleList
	ChildHandleInfo[] ChildHandles;//[Offset: 0x0, Size: 0x10]// 0x7612167e20

--------------------------------
Class: ChildHandleInfo
	BackpackAvatarHandle* ChildHandle;//[Offset: 0x0, Size: 0x8]// 0x7612168030
	int ParentSlot;//[Offset: 0x8, Size: 0x4]// 0x7612167fc0

--------------------------------
Class: DefaultAvatarConfig
	ItemDefineID ItemID;//[Offset: 0x0, Size: 0x18]// 0x7612167b60
	class BattleItemHandleBase* ItemHandle;//[Offset: 0x18, Size: 0x8]// 0x7612167ae0

--------------------------------
Class: ModeAvatarFeature.Object
	CharacterAvatarComponent* OwnerCAC;//[Offset: 0x28, Size: 0x8]// 0x75a888e080
	int[] FeatureAssociatedItemList;//[Offset: 0x30, Size: 0x10]// 0x75a888e100
	<int,BackpackAvatarHandle*> FeatureAssociatedHandleCacheMap;//[Offset: 0x40, Size: 0x50]// 0x75a8897f40
	bool Server_TryRevertFeature(CharacterAvatarComponent* InTargetCAC, BackpackAvatarHandle* InTargetHandle);// 0x44177ec
	bool Server_TryActivateFeature(CharacterAvatarComponent* InTargetCAC, BackpackAvatarHandle* InTargetHandle);// 0x441771c
	bool RefreshModeAvatar(BackpackAvatarHandle* InTargetHandle);// 0x4417684
	void OnRep_FeatureNetMetaData();// 0x4417668
	static bool IsEnableModeVatarFeature();// 0x4417630
	void InitFeature(const ModeAvatarFeatureNetMetaData InFeatureNetMeta);// 0x4417588
	FString GetOwnerPlayerName();// 0x4417500
	static BackpackAvatarHandle* GetFeatureHandleByFeatureItemID(CharacterAvatarComponent* InTargetCAC, const int InFeatureItemID);// 0x4417448
	BackpackAvatarHandle* GetFeatureHandle();// 0x441740c
	ModeAvatarFeatureNetMetaData FetchFeatureNetMetaData();// 0x44173b8
	bool Client_TryRevertFeature();// 0x4417378
	bool Client_TryActivateFeature();// 0x4417338
	bool Client_ActivateFeature_PreFiltHandles(BackpackAvatarHandle* AvatarHandle, out MeshSynData SyncData);// 0x441721c
	bool Client_ActivateFeature_PreAsyncRender();// 0x44171dc
	bool Client_ActivateFeature_PostAsyncRender();// 0x441719c
	bool Client_ActivateFeature_LoadingItemList(out ItemDefineID[] InLoadingItemDefineIDList);// 0x44170ec
	bool Client_ActivateFeature_LoadedHandleList(out BattleItemHandleBase*[] InLoadedHandleList);// 0x441703c
	static bool BanFeatureHandleByID(out BattleItemHandleBase*[] InTargetHandleList, const int InFeatureItemID);// 0x4416f58
	static bool BanFeatureHandleByHandle(out BattleItemHandleBase*[] InTargetHandleList, BackpackAvatarHandle* InFeatureHandle);// 0x4416e74

--------------------------------
Class: ModeAvatarFeatureNetMetaData
	bool bFeatureActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611fc8970
	bool bFeatureActivated_Client;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611fc88f0
	int FeatureItemID;//[Offset: 0x4, Size: 0x4]// 0x7611fc8880
	enum FeatureType;//[Offset: 0x8, Size: 0x1]// 0x7611fc8720
	BackpackAvatarHandle* TargetFeatureHandle;//[Offset: 0x10, Size: 0x8]// 0x7611fc86a0

--------------------------------
Class: CharacterAvatarEntity.AvatarEntity.Object
	bool PendingRenderFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]// 0x75b4e92700
	int EquipedPendantSlotID;//[Offset: 0x2bc, Size: 0x4]// 0x75b4ec0910
	int EquipedDefaultPendantSlotID;//[Offset: 0x2c0, Size: 0x4]// 0x75b4ec0980
	FName[] NeedUnHideBone;//[Offset: 0x2c8, Size: 0x10]// 0x75b4e92780
	bool ForceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]// 0x75b4e92800
	int[] ChildOf;//[Offset: 0x2e0, Size: 0x10]// 0x75b4e92880
	bool MarkMatOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]// 0x75b4e92900
	void UpdateVisibility();// 0x424e7ac
	void TryClearDirtyMeshComp(const enum InTargetMeshType);// 0x424e730
	void SetVisibilityProcess(bool Inner, bool Outer);// 0x424e660
	void SetSlotMeshByReplacedMark(bool ReplacedMark);// 0x424e5dc
	bool SetSlotHidden(int Slot, int DoHiddenSlot, bool ShouldHide);// 0x424e4d0
	void SetParticleVisiblity(bool Visible);// 0x424e44c
	void SetInnerVisibility(bool isShow);// 0x424e3c8
	void ResetEntityBeforePushToPool(bool DisableCheck);// 0x424e33c
	bool ReplaceTargetSlotMesh(int SourceSlot, int DestSlot, bool ReplaceMark);// 0x424e230
	void ReplaceTargetMaterial(int SourceSlot, int DestSlot, bool IsReplace);// 0x424e138
	void RenderEntity(out SoftObjectPath SoftPath);// 0x424e094
	void RefreshVisable();// 0x424e080
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x424dff4
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x424df5c
	void PutOnDefaultEquipment(enum SlotType);// 0x424ded8
	void ProcessSelfBoneVisbility();// 0x424dec4
	void ProcessReplaceMaterial(bool NeedReplace);// 0x424de40
	void ProcessBoneVisibility(bool HideMark);// 0x424ddbc
	void PreMeshCompDestroy_Implementation();// 0x424dda0
	void ParseAdditionalItem(SyncAdditionDataArray SyncData);// 0x424dbdc
	void OnMeshVisibilityChanged(SkeletalMeshComponent* InSkMeshComp);// 0x424db58
	void OnMeshLODChanged(int PredictedLOD);// 0x424dadc
	void OnLoadParticles();// 0x424dac0
	bool IsConsiderAnimHiddenByLOD();// 0x424da88
	bool IsChildEntity();// 0x424da50
	bool IsAnimHiddenByLODEnable();// 0x424da10
	bool IsAnimHiddenByLOD();// 0x424d9d0
	void GetReplacingSlots(out int[] DoReplaceSlots);// 0x424d93c
	enum GetMeshType(SkeletalMesh* SelfMesh);// 0x424d8a8
	ItemDefineID GetDefineID();// 0x424d854
	SyncAdditionDataArray GetAdditionalData();// 0x424d770
	void EnterRenderPipeline();// 0x424d754
	void EnterLogicPipeline();// 0x424d738
	void DoPostLogic();// 0x424d724
	void DetectAvatarSickLOD();// 0x424d710
	void DealWithSelfReplaceMaterial();// 0x424d6fc
	void DealSlotHidden(bool ShouldHide);// 0x424d670
	void DealSelfReplaced();// 0x424d65c
	void DealSelfHide();// 0x424d648
	void DealHideBone();// 0x424d634
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x424d57c
	void CollectParticleResource(out <enum,ResourceList> CollectRes);// 0x424d4a4
	void CollectMeshResource(out <enum,ResourceList> CollectRes);// 0x424d3cc
	void CollectMaterialResource(out <enum,ResourceList> CollectRes);// 0x424d2f4
	void CollectDesiredResource(out <enum,ResourceList> CollectRes, bool DisableCheck);// 0x424d1c8
	void CollectAnimResource(out <enum,ResourceList> CollectRes);// 0x424d0f0
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x424d028
	void ClearEquipmentLogic(bool putDefault);// 0x424cf9c
	void ClearEntity(bool ForceClear);// 0x424cf10
	void CheckPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x424ce8c
	void CheckPendantForEquipmentPutOff();// 0x424ce70
	void CheckDefaultPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x424cdec
	void CheckAvatarMeshError(const bool InShouldAlwaysShow);// 0x424cd68
	void CheckAvatarMeshCompatibleWithMaster();// 0x424cd54
	void ApplySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x424ccd0
	void ApplyOverrideMaterial();// 0x424ccb4
	void ApplyMeshCompCollision();// 0x424cca0
	void ApplyAnimation();// 0x424cc84

--------------------------------
Class: ResourceList
	SoftObjectPath[] ResourcesPath;//[Offset: 0x0, Size: 0x10]// 0x7612167940

--------------------------------
Class: CharacterMeshClipData
	byte ClipType;//[Offset: 0x0, Size: 0x1]// 0x7612169630
	Plane Plane;//[Offset: 0x10, Size: 0x10]// 0x76121695b0
	Vector SphereCenter;//[Offset: 0x20, Size: 0xc]// 0x7612169530
	float SphereRadius;//[Offset: 0x2c, Size: 0x4]// 0x76121694c0

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 0x8]// 0x7611de7400
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 0x178]// 0x7611de7380

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x28]// 0x7611d7a6f0
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 0x28]// 0x7611d7a670
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 0x28]// 0x7611d7a5f0
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 0x28]// 0x7611d7a570
	bool bOpUpdateTramsform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]// 0x7611d7a4f0
	MaterialInterface* MeshMat;//[Offset: 0xa8, Size: 0x28]// 0x7611d7a470
	<FName,float> MeshMatParams;//[Offset: 0xd0, Size: 0x50]// 0x7611d7a2e0
	MaterialInterface* baseMat;//[Offset: 0x120, Size: 0x8]// 0x7611d7a260
	MaterialInterface* baseMatClass;//[Offset: 0x128, Size: 0x28]// 0x7611d7a1e0
	ParticleRes[] ParticleEffects;//[Offset: 0x150, Size: 0x10]// 0x7611d79f50
	UIWidgetRes[] WidgetList;//[Offset: 0x160, Size: 0x10]// 0x7611d79a40
	enum meshType;//[Offset: 0x170, Size: 0x1]// 0x7611d798e0

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 0x8]// 0x7611d7a160
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]// 0x7611d7a0f0

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 0x8]// 0x7611d79ed0
	class UserWidget* UserWidgetSoft;//[Offset: 0x8, Size: 0x28]// 0x7611d79e50
	FName AttachSocket;//[Offset: 0x30, Size: 0x8]// 0x7611d79de0
	Transform Trans;//[Offset: 0x40, Size: 0x30]// 0x7611d79d60
	Vector2D DrawSize;//[Offset: 0x70, Size: 0x8]// 0x7611d79ce0
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x7611d79c60
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]// 0x7611d79be0

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 0x18]// 0x7611d7b9f0
	enum AttachmentSocketType;//[Offset: 0x18, Size: 0x1]// 0x7611d7b890
	enum SubSlot;//[Offset: 0x19, Size: 0x1]// 0x7611d7b730
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]// 0x7611d7b6b0
	int ExtendMaxBulletNumInOneClipID;//[Offset: 0x1c, Size: 0x4]// 0x7611d7b640
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611d7b5c0
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x7611d7b540
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]// 0x7611d7b4c0
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x28, Size: 0x10]// 0x7611d7b3c0
	<int,WeaponAttachmentAttrListModifyWrapper> SpecialWeaponAttachmentAttrModifysMap;//[Offset: 0x38, Size: 0x50]// 0x7611d7ad00
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x88, Size: 0x10]// 0x7611d7aa80
	<int,FName> socketTypeToName;//[Offset: 0x98, Size: 0x50]// 0x7611d7a8f0
	WeaponMeshCfg MeshPackage;//[Offset: 0xe8, Size: 0x178]// 0x7611d7a870
	ReplacedAttament[] replacementWeapon;//[Offset: 0x260, Size: 0x10]// 0x7611d794b0
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x270, Size: 0x10]// 0x7611d793b0
	AnimationAsset*[] AttachmentAnimListClass;//[Offset: 0x280, Size: 0x10]// 0x7611d792b0
	ItemDefineID ParentID;//[Offset: 0x290, Size: 0x18]// 0x7611d79230

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]// 0x7611d7b350
	enum Op;//[Offset: 0x10, Size: 0x1]// 0x7611d7b250
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611d7b1d0
	float ModifyValue;//[Offset: 0x14, Size: 0x4]// 0x7611d7b160
	Object* ModifyResValue;//[Offset: 0x18, Size: 0x28]// 0x7611d7b0e0

--------------------------------
Class: WeaponAttachmentAttrListModifyWrapper
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x0, Size: 0x10]// 0x7611d7af40

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 0x18]// 0x7611d7ac90
	FText DescValue;//[Offset: 0x18, Size: 0x18]// 0x7611d7ac20

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 0x10]// 0x7611d7a770
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 0x178]// 0x7611d797c0
	AnimationAsset*[] AttachmentAnimListClass;//[Offset: 0x188, Size: 0x10]// 0x7611d796c0
	int replacedAttachmentMatIndex;//[Offset: 0x198, Size: 0x4]// 0x7611d79650

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x38, Size: 0x8]// 0x7611e27800
	Pawn* OwnerPawn;//[Offset: 0x40, Size: 0x8]// 0x7611e27780
	Controller* OwnerController;//[Offset: 0x48, Size: 0x8]// 0x7611e27700
	STExtraWeapon* BindedWeapon;//[Offset: 0x50, Size: 0x8]// 0x7611e27680
	void OnWeaponStopFireDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x481abf8
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x481ab40
	void HandleFireShot();// 0x481ab2c
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x481aaf8
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x481aac4
	PlayerController* GetOwnerPlayerController();// 0x481aa90
	Pawn* GetOwnerPawn();// 0x481aa5c
	Controller* GetOwnerController();// 0x481aa28
	Actor* GetOwnerActor();// 0x481aa0c

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0x138, Size: 0x4]// 0x75a874a300
	byte WeaponType;//[Offset: 0x13c, Size: 0x1]// 0x75a86fb400
	enum weaponTypeNew;//[Offset: 0x13d, Size: 0x1]// 0x75a86fb500
	byte WeaponHoldType;//[Offset: 0x13e, Size: 0x1]// 0x75a86fb580
	byte WeaponSingleHandType;//[Offset: 0x13f, Size: 0x1]// 0x75a86fb600
	FName WeaponAttachSocket;//[Offset: 0x140, Size: 0x8]// 0x75a874a370
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75a86fb680
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x150, Size: 0x8]// 0x75a874a3e0
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75a86fb700
	bool bUseAnimWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]// 0x75a86fb780
	bool bForceFinishPreviousSwitchWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1]// 0x75a86fb800
	int UnableProneHoldingTipID;//[Offset: 0x15c, Size: 0x4]// 0x75a874a450
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]// 0x75a86fb880
	int UnableVehicleHoldingTipID;//[Offset: 0x164, Size: 0x4]// 0x75a874a4c0
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]// 0x75a86fb900
	bool bDoNotSwitchWeaponWhenVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]// 0x75a86fb980
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]// 0x75a86fba00
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]// 0x75a86fba80
	int UnableShovelHoldingTipID;//[Offset: 0x16c, Size: 0x4]// 0x75a874a530
	bool bCanBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x75a86fbb00
	bool bLockCameraPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]// 0x75a86fbb80
	bool bLockCameraYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1]// 0x75a86fbc00
	bool bNeedCheckGunCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1]// 0x75a86fbc80
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]// 0x75a86fbd00
	FName CustomAttachTargetComponentTag;//[Offset: 0x178, Size: 0x8]// 0x75a874a5a0
	bool bNeedDestroyAfterDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]// 0x75a86fbd80
	bool bEnableSpecWeaponCreateOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]// 0x75a86fbe00
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x188, Size: 0x10]// 0x75a86fbf80
	enum[] BackpackWeaponPlayerStateList;//[Offset: 0x198, Size: 0x10]// 0x75a86fc100
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1a8, Size: 0x4]// 0x75a874a610
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1ac, Size: 0x4]// 0x75a874a680
	bool bCanEquipUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]// 0x75a86fc180
	bool bWeaponSwitchToNoneIgnorePlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]// 0x75a86fc200
	bool bNoneSwitchToWeaponIgnorePlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 0x1]// 0x75a86fc280
	bool bDriverCanHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 0x1]// 0x75a86fc300
	bool bDisableDisuseWhenDisusing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]// 0x75a86fc380
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x1b8, Size: 0x50]// 0x75a8756d00
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x208, Size: 0x50]// 0x75a8756dc0
	float SwitchFromIdleToBackpackTime;//[Offset: 0x258, Size: 0x4]// 0x75a874a6f0
	float SwitchFromIdleToBackpackTimeModifier;//[Offset: 0x25c, Size: 0x4]// 0x75a874a760
	float SwitchAnimFromIdleToBackpackTimeAdjust;//[Offset: 0x260, Size: 0x4]// 0x75a874a7d0
	float SwitchFromBackpackToIdleTime;//[Offset: 0x264, Size: 0x4]// 0x75a874a840
	float SwitchFromBackpackToIdleTimeModifier;//[Offset: 0x268, Size: 0x4]// 0x75a874a8b0
	float SwitchAnimFromBackpackToIdleTimeAdjust;//[Offset: 0x26c, Size: 0x4]// 0x75a874a920
	float PreSwitchFromBackpackToIdleTime;//[Offset: 0x270, Size: 0x4]// 0x75a874a990
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x280, Size: 0x30]// 0x75a86fc600
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x2b0, Size: 0x30]// 0x75a86fc680
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x2e0, Size: 0x30]// 0x75a86fc700
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x310, Size: 0x30]// 0x75a86fc780
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x340, Size: 0x30]// 0x75a86fc800
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x370, Size: 0x30]// 0x75a86fc880
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x3a0, Size: 0x30]// 0x75a86fc900
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x3d0, Size: 0x30]// 0x75a86fc980
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x400, Size: 0x8]// 0x75a86fca00
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]// 0x75a86fca80
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]// 0x75a86fcb00
	float DelayTimeWhenDisableWeaponAnim;//[Offset: 0x40c, Size: 0x4]// 0x75a874aa00
	bool bResetPosWhenDisableWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]// 0x75a86fcb80
	Vector SightSlowBlendAlpha;//[Offset: 0x414, Size: 0xc]// 0x75a86fcc00
	int CustomWeaponSlotUIType;//[Offset: 0x420, Size: 0x4]// 0x75a874aa70
	enum[] SyncState_CurWeaponStateGateList;//[Offset: 0x428, Size: 0x10]// 0x75a86fcd80
	enum[] SyncState_TargetRepWeaponStateGateList;//[Offset: 0x438, Size: 0x10]// 0x75a86fcf00
	enum[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x448, Size: 0x10]// 0x75a86fd080
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]// 0x75a86fd100
	bool bNoAvatarMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]// 0x75a86fd180
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x45c, Size: 0x94]// 0x75a86fd200

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	bool bApplyOwnerNetRelavance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x7611df8610
	bool bOverrideOwnerNetRelavance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]// 0x7611df8590
	bool bTickInSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]// 0x7611df8510
	STExtraWeapon* OwnerWeapon;//[Offset: 0x120, Size: 0x8]// 0x7611df8490
	STExtraPlayerController* GlobalController;//[Offset: 0x130, Size: 0x8]// 0x7611df8410
	void UpdateComponentTick();// 0x480dda4
	STExtraWeapon* TryGetOwnerWeapon();// 0x480dd70
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x480dd3c
	void RegisterWeaponLogicComponentTick(STExtraWeapon* Weapon);// 0x480dcc0
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x480dc00
	bool IsWeaponOwnerOBTarget();// 0x480dbc8
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x480db38
	bool IsWeaponLogicComponentTickEnabled();// 0x480db00
	bool IsLocalOrSpectorPlayer();// 0x480dac8
	void InitBP(STExtraWeapon* TargetWeapon);// 0xffffff8a17adf2b0
	void Init(STExtraWeapon* TargetWeapon);// 0x480da44
	FString GetWeaponDetailInfo();// 0x480d9a0
	byte GetOwnerPawnRole();// 0x480d96c

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 0x130]// 0x7611de9ae0
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x130, Size: 0x20]// 0x7611de95d0

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0x10, Size: 0x1]// 0x7611dea8c0
	SlateBrush SmallProfileImage;//[Offset: 0x18, Size: 0x78]// 0x7611dea840
	SlateBrush LargerProfileImage;//[Offset: 0x90, Size: 0x78]// 0x7611de9d50
	FString Name;//[Offset: 0x108, Size: 0x10]// 0x7611de9ce0
	FString Description;//[Offset: 0x118, Size: 0x10]// 0x7611de9c70
	int DisplayPriority;//[Offset: 0x128, Size: 0x4]// 0x7611de9c00

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]// 0x7611de9800
	int PickUpSoundID;//[Offset: 0xc, Size: 0x4]// 0x7611de9790

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0x10, Size: 0x4]// 0x7611de9a70
	byte Type;//[Offset: 0x14, Size: 0x1]// 0x7611de9990
	StaticMesh* ShowMesh;//[Offset: 0x18, Size: 0x8]// 0x7611de9910

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 0x48]// 0x7611eb6980
	AutoAimingRangeConfig InnerRange;//[Offset: 0x48, Size: 0x48]// 0x7611eb6080
	float followTimeMax;//[Offset: 0x90, Size: 0x4]// 0x7611eb6010

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 0x4]// 0x7611eb6910
	float RangeRate;//[Offset: 0x4, Size: 0x4]// 0x7611eb68a0
	float SpeedRate;//[Offset: 0x8, Size: 0x4]// 0x7611eb6830
	float RangeRateSight;//[Offset: 0xc, Size: 0x4]// 0x7611eb67c0
	float SpeedRateSight;//[Offset: 0x10, Size: 0x4]// 0x7611eb6750
	float CrouchRate;//[Offset: 0x14, Size: 0x4]// 0x7611eb66e0
	float ProneRate;//[Offset: 0x18, Size: 0x4]// 0x7611eb6670
	float DyingRate;//[Offset: 0x1c, Size: 0x4]// 0x7611eb6600
	float DriveVehicleRate;//[Offset: 0x20, Size: 0x4]// 0x7611eb6590
	float InVehicleRate;//[Offset: 0x24, Size: 0x4]// 0x7611eb6520
	float FreeFallRate;//[Offset: 0x28, Size: 0x4]// 0x7611eb64b0
	float OpeningRate;//[Offset: 0x2c, Size: 0x4]// 0x7611eb6440
	float LandingRate;//[Offset: 0x30, Size: 0x4]// 0x7611eb63d0
	float adsorbMaxRange;//[Offset: 0x34, Size: 0x4]// 0x7611eb6360
	float adsorbMinRange;//[Offset: 0x38, Size: 0x4]// 0x7611eb62f0
	float adsorbMinAttenuationDis;//[Offset: 0x3c, Size: 0x4]// 0x7611eb6280
	float adsorbMaxAttenuationDis;//[Offset: 0x40, Size: 0x4]// 0x7611eb6210
	float adsorbActiveMinRange;//[Offset: 0x44, Size: 0x4]// 0x7611eb61a0

--------------------------------
Class: WeaponReconnectReplicateData
	FString OwnerPlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611df5fb0
	FName WeaponInventoryLogicSocket;//[Offset: 0x10, Size: 0x8]// 0x7611df5f40
	int WeaponBulletNumInClip;//[Offset: 0x18, Size: 0x4]// 0x7611df5ed0
	uint32 WeaponShootID;//[Offset: 0x1c, Size: 0x4]// 0x7611df5e60
	uint32 WeaponClipID;//[Offset: 0x20, Size: 0x4]// 0x7611df5df0
	uint32 OwnerNetGUID;//[Offset: 0x24, Size: 0x4]// 0x7611df5d80
	enum CurWeaponState;//[Offset: 0x28, Size: 0x1]// 0x7611df5c80
	byte CurShootType;//[Offset: 0x29, Size: 0x1]// 0x7611df5ba0
	int CurShootTotalType;//[Offset: 0x2c, Size: 0x4]// 0x7611df5b30
	ItemDefineID DefineID;//[Offset: 0x30, Size: 0x18]// 0x7611df5ab0
	int BackpackPistolListIndex;//[Offset: 0x48, Size: 0x4]// 0x7611df5a40
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]// 0x7611df59c0
	int OperationIndex;//[Offset: 0x50, Size: 0x4]// 0x7611df5950

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 0x4]// 0x7611e26190
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7611e26110
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 0x4]// 0x7611e260a0
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 0x4]// 0x7611e26030
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611e25fb0
	bool bUseZipWhileCompress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611e25f30
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]// 0x7611e25eb0
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]// 0x7611e25e30
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 0x4]// 0x7611e25dc0
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 0x4]// 0x7611e25d50
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 0x4]// 0x7611e25ce0
	float MaxGunRoot;//[Offset: 0x20, Size: 0x4]// 0x7611e25c70
	float MaxMuzzleGun;//[Offset: 0x24, Size: 0x4]// 0x7611e25c00
	float DistMuzzleGun;//[Offset: 0x28, Size: 0x4]// 0x7611e25b90
	float MuzzleHighCD;//[Offset: 0x2c, Size: 0x4]// 0x7611e25b20
	float AimFlyCD;//[Offset: 0x30, Size: 0x4]// 0x7611e25ab0
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x7611e25a30
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]// 0x7611e259b0
	float MaxBackTraceSize;//[Offset: 0x38, Size: 0x4]// 0x7611e25940
	bool bVerifyFlyAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]// 0x7611e258c0
	float MinKickBackPitch;//[Offset: 0x40, Size: 0x4]// 0x7611e25850
	float MinKickBackYaw;//[Offset: 0x44, Size: 0x4]// 0x7611e257e0
	float MaxDirChangeAreaEval;//[Offset: 0x48, Size: 0x4]// 0x7611e25770
	bool bUseLegacyShootRateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]// 0x7611e256f0
	float AdditGunPosHeight;//[Offset: 0x50, Size: 0x4]// 0x7611e25680
	bool bReportSidBid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]// 0x7611e25600
	bool bNoSidBadReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]// 0x7611e25580
	float BulletSizeTor;//[Offset: 0x58, Size: 0x4]// 0x7611e25510

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0x138, Size: 0x8]// 0x7611e034b0
	FName ScopeBulletsTrackCompTag;//[Offset: 0x140, Size: 0x8]// 0x7611e03440
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x7611e033c0
	bool bDebugGunBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]// 0x7611e03340
	float DrawShootLineTime;//[Offset: 0x14c, Size: 0x4]// 0x7611e032d0
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]// 0x7611e03250
	float DrawShootPointOnScreenTime;//[Offset: 0x154, Size: 0x4]// 0x7611e031e0
	float DrawShootPointOnScreenSize;//[Offset: 0x158, Size: 0x4]// 0x7611e03170
	float DrawShootPoint3DSize;//[Offset: 0x15c, Size: 0x4]// 0x7611e03100
	CurveFloat* DeviationToDegreeCurve;//[Offset: 0x160, Size: 0x8]// 0x7611e03080
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x168, Size: 0x8]// 0x7611e03000
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0x170, Size: 0x8]// 0x7611e02f80
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x178, Size: 0x8]// 0x7611e02f00
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]// 0x7611e02e80
	int ContinuousShootingBulletsNum;//[Offset: 0x184, Size: 0x4]// 0x7611e02e10
	delegate OnPreShoot;//[Offset: 0x188, Size: 0x10]// 0x7611e02d90
	delegate OnShoot;//[Offset: 0x198, Size: 0x10]// 0x7611e02d10
	delegate OnBulletHitDelegate;//[Offset: 0x1a8, Size: 0x10]// 0x7611e02c90
	delegate OnBulletHitConstRefDelegate;//[Offset: 0x1b8, Size: 0x10]// 0x7611e02c10
	delegate PreTakeShootDamage;//[Offset: 0x1c8, Size: 0x10]// 0x7611e02b90
	delegate PostTakeShootDamage;//[Offset: 0x1d8, Size: 0x10]// 0x7611e02b10
	Rotator LastShootRot;//[Offset: 0x1e8, Size: 0xc]// 0x7611e02a90
	int DeviationRandomSeed;//[Offset: 0x1f4, Size: 0x4]// 0x7611e02a20
	float ShootDeviation;//[Offset: 0x1f8, Size: 0x4]// 0x7611e029b0
	Vector ShootTracePoint;//[Offset: 0x1fc, Size: 0xc]// 0x7611e02930
	Rotator ADSScopeRotCache;//[Offset: 0x210, Size: 0xc]// 0x7611e028b0
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x220, Size: 0x8]// 0x7611e02830
	int PelletsOnShot;//[Offset: 0x244, Size: 0x4]// 0x7611e027c0
	int PelletsFlag;//[Offset: 0x248, Size: 0x4]// 0x7611e02750
	float VaildHistoryClipTime;//[Offset: 0x258, Size: 0x4]// 0x7611e026e0
	bool bNeedPullBackMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]// 0x7611e02660
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x5e0, Size: 0x10]// 0x7611e023c0
	delegate AutoTestShootDelegate;//[Offset: 0x5f0, Size: 0x10]// 0x7611e02340
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x46ae76c
	void TraceShoot(int ShootNum);// 0x46ae6e8
	void TargetShoot(int ShootNum);// 0x46ae664
	void ShootDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void PreShootDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OverrideShotGunShootParametersBP(Vector InTargetLoc, Vector InStartLoc, Rotator InBulletRot, out Vector OutStartLoc, out Rotator OutBulletRot);// 0xffffff8a17adf2b0
	void OverrideShootParametersBP(Vector InTargetLoc, Vector InStartLoc, Rotator InBulletRot, out Vector OutStartLoc, out Rotator OutBulletRot);// 0xffffff8a17adf2b0
	void OnWeaponClipMaxBulletChanged();// 0x46ae650
	void OnWeaponBulletChanged();// 0x46ae63c
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0xffffff8a17adf2b0
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0xffffff8a17adf2b0
	void OnBulletHitDelegate__DelegateSignature(BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0xffffff8a17adf2b0
	void OnBulletHitConstRefDelegate__DelegateSignature(out const BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0xffffff8a17adf2b0
	void OnAutoTestShootDelegate__DelegateSignature(Vector ShootStartPos, Rotator ShootRotation);// 0xffffff8a17adf2b0
	void MuzzleShoot(int ShootNum);// 0x46ae5b8
	float ModifyDeviationBP(float InDeviation);// 0x46ae524
	int MaxBulletPerShot();// 0x46ae4e8
	bool LocalSimulateOBBulletTrack_ModifyHitRet(out HitResult HitRet);// 0x46ae42c
	void LocalSimulateOBBulletTrack();// 0x46ae410
	Vector GetFinalBulletLaunchPos(out const Vector InitMuzle, out const Vector InitMuzleDir);// 0x46ae310
	float GetFinalBulletDamage(float InDamageRate, out const Vector InImpactPoint, out float OutRangeReviseFactor, int InShootID);// 0x46ae19c
	bool FireShot(int ShootNum);// 0x46ae104
	void ClearBulletHitInfoRepDataFinished();// 0x46ae0f0
	bool CheckShootState();// 0x46ae0b0
	void CheckInitShootIDAndClipID();// 0x46ae094
	Rotator CalcShootRot();// 0x46ae054
	Rotator CalcPelletsSpread(Rotator shootRot);// 0x46adfbc
	Vector CalcDirectionByDeviation(Vector InCameraDir, float InDeviation, bool ResetRandomSeed);// 0x46ade9c
	Rotator CaclShootRotADS();// 0x46ade5c

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnEquipDelegate;//[Offset: 0x138, Size: 0x10]// 0x75d0b15300
	delegate HandleGetOwnerActorDelegate;//[Offset: 0x148, Size: 0x10]// 0x75d0b15380
	delegate OnBulletTrackShootDelegate;//[Offset: 0x158, Size: 0x10]// 0x75d0b15400
	delegate OnPostGetDataFromWeaponEntity;//[Offset: 0x168, Size: 0x10]// 0x75d0b15480
	delegate OnPostGetAccessoriesFactorsFromWeaponEntity;//[Offset: 0x178, Size: 0x10]// 0x75d0b15500
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x198, Size: 0x8]// 0x75d0b15580
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x1a0, Size: 0x8]// 0x75d0b15600
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x1a8, Size: 0x8]// 0x75d0b15680
	float CurRecoilValue;//[Offset: 0x1b0, Size: 0x4]// 0x7611546a20
	float VerticalRecoilTarget;//[Offset: 0x1b4, Size: 0x4]// 0x7611546a90
	float HorizontalRecoilTarget;//[Offset: 0x1b8, Size: 0x4]// 0x7611546b00
	float VerticalRecoveryTarget;//[Offset: 0x1bc, Size: 0x4]// 0x7611546b70
	float CurVerticalRecovery;//[Offset: 0x1c0, Size: 0x4]// 0x7611546be0
	float PoseRecoilFactor;//[Offset: 0x1c4, Size: 0x4]// 0x7611546c50
	float AccessoriesVRecoilFactor;//[Offset: 0x1c8, Size: 0x4]// 0x7611546cc0
	float AccessoriesVRecoilFactorModifier;//[Offset: 0x1cc, Size: 0x4]// 0x7611546d30
	float VerticalRecoilFactorModifier;//[Offset: 0x1d0, Size: 0x4]// 0x7611546da0
	float AccessoriesHRecoilFactor;//[Offset: 0x1d4, Size: 0x4]// 0x7611546e10
	float AccessoriesHRecoilFactorModifier;//[Offset: 0x1d8, Size: 0x4]// 0x7611546e80
	float AccessoriesAllRecoilFactorModifier;//[Offset: 0x1dc, Size: 0x4]// 0x7611546ef0
	float HorizontalRecoilFactorModifier;//[Offset: 0x1e0, Size: 0x4]// 0x7611546f60
	float AccessoriesRecoveryFactor;//[Offset: 0x1e4, Size: 0x4]// 0x7611546fd0
	bool BlockRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]// 0x75d0b15700
	float LastCalcHRecoilTargetTime;//[Offset: 0x1ec, Size: 0x4]// 0x7611547040
	float LastHorizontalRecoilTarget;//[Offset: 0x1f0, Size: 0x4]// 0x76115470b0
	float LastVerticalRecoilTarget;//[Offset: 0x1f4, Size: 0x4]// 0x7611547120
	float LastVerticalRecoveryTarget;//[Offset: 0x1f8, Size: 0x4]// 0x7611547190
	float CurDeviationValue;//[Offset: 0x1fc, Size: 0x4]// 0x7611547200
	float AccessoriesDeviationFactor;//[Offset: 0x200, Size: 0x4]// 0x7611547270
	float AccessoriesFinalDeviationFactor;//[Offset: 0x204, Size: 0x4]// 0x76115472e0
	float DeviationFactorModifier;//[Offset: 0x208, Size: 0x4]// 0x7611547350
	int ShootBursts;//[Offset: 0x20c, Size: 0x4]// 0x76115473c0
	TimerHandle BurstEmptyHandler;//[Offset: 0x210, Size: 0x8]// 0x75d0b15780
	bool BlockPostFireRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]// 0x75d0b15800
	bool PostFirePitchCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]// 0x75d0b15880
	float PostFireStartPitch;//[Offset: 0x21c, Size: 0x4]// 0x7611547430
	float PostFireRecoveryPitch;//[Offset: 0x220, Size: 0x4]// 0x76115474a0
	float LastPostFireRecoveryPitch;//[Offset: 0x224, Size: 0x4]// 0x7611547510
	int UseTss;//[Offset: 0x228, Size: 0x4]// 0x7611547580
	float LogIntervalTmp;//[Offset: 0x22c, Size: 0x4]// 0x76115475f0
	bool bHasGetWeaponEntityData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]// 0x75d0b15900
	SDeviation DeviationInfo_NoTss;//[Offset: 0x234, Size: 0x40]// 0x75d0b15980
	bool bNeedGetDataFromWeaponEntity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]// 0x75d0b15a00
	float CurAccVerticalRecoilTarget;//[Offset: 0x588, Size: 0x4]// 0x7611547660
	float CurAccHorizontalRecoilTarget;//[Offset: 0x58c, Size: 0x4]// 0x76115476d0
	float MaxAbsCurAccHorizontalRecoilTarget;//[Offset: 0x590, Size: 0x4]// 0x7611547740
	float MaxAbsCurHorizontalRecoilTarget;//[Offset: 0x594, Size: 0x4]// 0x76115477b0
	float AccRecoilTargetClearInterval;//[Offset: 0x598, Size: 0x4]// 0x7611547820
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x5b0, Size: 0x88]// 0x75d0b15a80
	void UpdateRecoveryTarget(out const SRecoilInfo RecoilInfo, float DelataTime);// 0x4231ba4
	void UpdateRecoilValue(out const SRecoilInfo RecoilInfo, float DeltaTime);// 0x4231a40
	void UpdateRecoilTarget(out const SRecoilInfo RecoilInfo, float DelataTime);// 0x42318dc
	void UpdateRecoilFactor(out const SRecoilInfo RecoilInfo);// 0x42317c4
	void UpdatePostFireRecovery(out const SRecoilInfo RecoilInfo, float DeltaTime);// 0x4231660
	void UpdateKickBack(float DeltaTime);// 0x42315e4
	void OnWeaponStopFire();// 0x42315d0
	void OnWeaponStartFire();// 0x42315bc
	void OnWeaponShoot();// 0x42315a8
	void OnUpdate(float DeltaTime);// 0x423152c
	void OnPostFire();// 0x4231518
	void HandleGetOwnerActor(Actor* OwnerActor);// 0x4231494
	FString GetWeaponInfo();// 0x4231414
	void GetDataFromWeaponEntityNew();// 0x4231400
	void GetDataFromWeaponEntity();// 0x42313ec
	Vector GetCurRecoilInfo();// 0x42313b4
	float GetCurDeviation();// 0x4231378
	void GetAccessoriesFactorsFromWeaponEntity();// 0x4231364
	void CheckComponentTick();// 0x4231350
	void CaptureShootPitch();// 0x423133c
	void CapturePostFirePitch();// 0x4231328
	void CalculateRecoveryTarget(out const SRecoilInfo RecoilInfo, out const Vector Curve);// 0x42311b0
	void CalculateRecoilTarget(out const SRecoilInfo RecoilInfo, out const Vector Curve);// 0x4231038
	void CalcDeviationTarget(out const SDeviation DeviationInfo);// 0x4230f8c
	void BlockedRecovery(bool State);// 0x4230f0c
	void BlockedPostFireRecovery(bool State);// 0x4230e8c

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]// 0x76121b2380
	float DeviationBaseAim;//[Offset: 0x4, Size: 0x4]// 0x76121b2310
	float DeviationBaseADS;//[Offset: 0x8, Size: 0x4]// 0x76121b22a0
	float DeviationRecoilGain;//[Offset: 0xc, Size: 0x4]// 0x76121b2230
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 0x4]// 0x76121b21c0
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 0x4]// 0x76121b2150
	float DeviationMax;//[Offset: 0x18, Size: 0x4]// 0x76121b20e0
	float DeviationMinMove;//[Offset: 0x1c, Size: 0x4]// 0x76121b2070
	float DeviationMaxMove;//[Offset: 0x20, Size: 0x4]// 0x76121b2000
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 0x4]// 0x76121b1f90
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 0x4]// 0x76121b1f20
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 0x4]// 0x76121b1eb0
	float DeviationStanceStand;//[Offset: 0x30, Size: 0x4]// 0x76121b1e40
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 0x4]// 0x76121b1dd0
	float DeviationStanceProne;//[Offset: 0x38, Size: 0x4]// 0x76121b1d60
	float DeviationStanceJump;//[Offset: 0x3c, Size: 0x4]// 0x76121b1cf0

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 0x4]// 0x76121b3190
	float VerticalRecoilMax;//[Offset: 0x4, Size: 0x4]// 0x76121b3120
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 0x4]// 0x76121b30b0
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 0x4]// 0x76121b3040
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 0x4]// 0x76121b2fd0
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 0x4]// 0x76121b2f60
	float LeftMax;//[Offset: 0x18, Size: 0x4]// 0x76121b2ef0
	float RightMax;//[Offset: 0x1c, Size: 0x4]// 0x76121b2e80
	float HorizontalTendency;//[Offset: 0x20, Size: 0x4]// 0x76121b2e10
	CurveVector* RecoilCurve;//[Offset: 0x28, Size: 0x8]// 0x76121b2d90
	int BulletPerSwitch;//[Offset: 0x30, Size: 0x4]// 0x76121b2d20
	float TimePerSwitch;//[Offset: 0x34, Size: 0x4]// 0x76121b2cb0
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x76121b2c30
	float RecoilSpeedVertical;//[Offset: 0x3c, Size: 0x4]// 0x76121b2bc0
	float RecoilSpeedHorizontal;//[Offset: 0x40, Size: 0x4]// 0x76121b2b50
	float RecovertySpeedVertical;//[Offset: 0x44, Size: 0x4]// 0x76121b2ae0
	float RecoilValueClimb;//[Offset: 0x48, Size: 0x4]// 0x76121b2a70
	float RecoilValueFail;//[Offset: 0x4c, Size: 0x4]// 0x76121b2a00
	float RecoilModifierStand;//[Offset: 0x50, Size: 0x4]// 0x76121b2990
	float RecoilModifierCrouch;//[Offset: 0x54, Size: 0x4]// 0x76121b2920
	float RecoilModifierProne;//[Offset: 0x58, Size: 0x4]// 0x76121b28b0
	float RecoilHorizontalMinScalar;//[Offset: 0x5c, Size: 0x4]// 0x76121b2840
	float BurstEmptyDelay;//[Offset: 0x60, Size: 0x4]// 0x76121b27d0
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]// 0x76121b2750
	float ShootSightReturnSpeed;//[Offset: 0x68, Size: 0x4]// 0x76121b26e0
	float RecoilCurveStart;//[Offset: 0x6c, Size: 0x4]// 0x76121b2670
	float RecoilCurveEnd;//[Offset: 0x70, Size: 0x4]// 0x76121b2600
	float RecoilCurveSamplingInterval;//[Offset: 0x74, Size: 0x4]// 0x76121b2590
	Vector[] RecoilCurveArray;//[Offset: 0x78, Size: 0x10]// 0x76121b2490

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	Rotator[] RearSightRotConfig;//[Offset: 0xc08, Size: 0x10]// 0x75a86f8900
	FName[] RearSightSocketConfig;//[Offset: 0xc18, Size: 0x10]// 0x75a86f8980
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xc28, Size: 0x10]// 0x75a86f8a80
	int RearSightRotIndex;//[Offset: 0xc38, Size: 0x4]// 0x75a8746f60
	byte EditorArchiveDataType;//[Offset: 0xc3c, Size: 0x1]// 0x75a86f8b00
	byte RuntimeArchiveDataType;//[Offset: 0xc3d, Size: 0x1]// 0x75a86f8b80
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0xc40, Size: 0x8]// 0x75a86f8c00
	enum ShootWeaponType;//[Offset: 0xc48, Size: 0x1]// 0x75a86f8d00
	float BulletFireSpeed;//[Offset: 0xc4c, Size: 0x4]// 0x75a8746fd0
	int MaxBulletNumInOneClip;//[Offset: 0xc50, Size: 0x4]// 0x75a8747040
	int MaxBulletNumInBarrel;//[Offset: 0xc54, Size: 0x4]// 0x75a87470b0
	int[] ExtendMaxBulletNumInOneClipList;//[Offset: 0xc58, Size: 0x10]// 0x75a86f8d80
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 0x1]// 0x75a86f8e00
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc69, Size: 0x1]// 0x75a86f8e80
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6a, Size: 0x1]// 0x75a86f8f00
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6b, Size: 0x1]// 0x75a86f8f80
	int BurstShootBulletsNum;//[Offset: 0xc6c, Size: 0x4]// 0x75a8747190
	float BulletGravityModifier;//[Offset: 0xc70, Size: 0x4]// 0x75a8747200
	float BulletGravityExtraOffset;//[Offset: 0xc74, Size: 0x4]// 0x75a8747270
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0xc78, Size: 0x10]// 0x75a86f9000
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 0x1]// 0x75a86f9080
	int VolleyShootBulletsNum;//[Offset: 0xc8c, Size: 0x4]// 0x75a8747350
	float VolleyBulletSpreadFactor;//[Offset: 0xc90, Size: 0x4]// 0x75a87473c0
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0xc98, Size: 0x10]// 0x75a86f9100
	float BurstShootCD;//[Offset: 0xca8, Size: 0x4]// 0x75a87474a0
	int BulletNumSingleShot;//[Offset: 0xcac, Size: 0x4]// 0x75a8747510
	int MaxProjectileBulletsNumSingleShot;//[Offset: 0xcb0, Size: 0x4]// 0x75a8747580
	bool bLoadSensitive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 0x1]// 0x75a86f9180
	FName MuzzleSocketName;//[Offset: 0xcb8, Size: 0x8]// 0x75a87475f0
	FName DefaultMuzzleSocketName;//[Offset: 0xcc0, Size: 0x8]// 0x75a8747660
	FName SilencerSocketName;//[Offset: 0xcc8, Size: 0x8]// 0x75a87476d0
	FName FiringSuppressorSocketName;//[Offset: 0xcd0, Size: 0x8]// 0x75a8747740
	FName ShellDropSocketName;//[Offset: 0xcd8, Size: 0x8]// 0x75a87477b0
	FName ScopeAimCameraSocketName;//[Offset: 0xce0, Size: 0x8]// 0x75a8747820
	float ImpactEffectSkipDistance;//[Offset: 0xce8, Size: 0x4]// 0x75a8747890
	float MaxImpactEffectSkipTime;//[Offset: 0xcec, Size: 0x4]// 0x75a8747900
	byte ShootType;//[Offset: 0xcf0, Size: 0x1]// 0x75a86f9200
	int ShootTotalType;//[Offset: 0xcf4, Size: 0x4]// 0x75a8747970
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 0x1]// 0x75a86f9280
	float WeaponWarnUpTime;//[Offset: 0xcfc, Size: 0x4]// 0x75a87479e0
	float BulletMuzzleBackwardDis;//[Offset: 0xd00, Size: 0x4]// 0x75a8747a50
	float BulletMuzzleBackwardDisWhenHandInFold;//[Offset: 0xd04, Size: 0x4]// 0x75a8747ac0
	float CalcShootDirMaxDegreeOffset;//[Offset: 0xd08, Size: 0x4]// 0x75a8747b30
	bool bForcePlayMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 0x1]// 0x75a86f9300
	bool bCanJumpWhenShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0d, Size: 0x1]// 0x75a86f9380
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0e, Size: 0x1]// 0x75a86f9400
	bool bSkipDSShootDamageVerifyA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0f, Size: 0x1]// 0x75a86f9480
	bool bSkipDSShootDamageVerifyB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd10, Size: 0x1]// 0x75a86f9500
	bool bSkipDSShootDamageVerifyC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd11, Size: 0x1]// 0x75a86f9580
	bool bHasValideTSSData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd12, Size: 0x1]// 0x75a86f9600
	bool bSkipVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd13, Size: 0x1]// 0x75a86f9680
	bool bSupportCriticalVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd14, Size: 0x1]// 0x75a86f9700
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0xd18, Size: 0x14]// 0x75a86f9780
	WeaponHitPartCoff MonsterWeaponHitPartCoff;//[Offset: 0xd2c, Size: 0x14]// 0x75a86f9800
	float BaseImpactDamage;//[Offset: 0xd40, Size: 0x4]// 0x75a8747ba0
	float MinimumImpactDamage;//[Offset: 0xd44, Size: 0x4]// 0x75a8747c10
	float BulletRange;//[Offset: 0xd48, Size: 0x4]// 0x75a8747c80
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0xd50, Size: 0x8]// 0x75a86f9880
	FName HitEffectTag;//[Offset: 0xd58, Size: 0x8]// 0x75a8747cf0
	HitEffectDataAsset* OverrideHitEffectDataAsset;//[Offset: 0xd60, Size: 0x8]// 0x75a86f9900
	byte ImpactDirType;//[Offset: 0xd68, Size: 0x1]// 0x75a86f9980
	bool bShootIgnoreCurVehicleAllPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd69, Size: 0x1]// 0x75a86f9a00
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0xd70, Size: 0x10]// 0x75a86f9b00
	float RangeModifier;//[Offset: 0xd80, Size: 0x4]// 0x75a8747d60
	float ReferenceDistance;//[Offset: 0xd84, Size: 0x4]// 0x75a8747dd0
	float ExtraRangeModifier;//[Offset: 0xd88, Size: 0x4]// 0x75a8747e40
	class DamageType* DamageType;//[Offset: 0xd90, Size: 0x8]// 0x75a86f9b80
	ItemDefineID BulletType;//[Offset: 0xd98, Size: 0x18]// 0x75a86f9c00
	int[] ExtraBulletTypeList;//[Offset: 0xdb0, Size: 0x10]// 0x75a86f9c80
	bool bHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 0x1]// 0x75a86f9d00
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 0x1]// 0x75a86f9d80
	int InitBulletInClip;//[Offset: 0xdc4, Size: 0x4]// 0x75a8747f20
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 0x1]// 0x75a86f9e00
	float TraceDistance;//[Offset: 0xdcc, Size: 0x4]// 0x75a8747f90
	float MaxValidHitTime;//[Offset: 0xdd0, Size: 0x4]// 0x75a8748000
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0xdd8, Size: 0x50]// 0x75a8756a00
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0xe28, Size: 0x8]// 0x75a87480e0
	class Actor[] TargetClassListCanBeBreakThroughOnlyOnce;//[Offset: 0xe30, Size: 0x10]// 0x75a86f9f80
	float MaxDamageRate;//[Offset: 0xe40, Size: 0x4]// 0x75a8748150
	bool bIgnoreTeammatesCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe44, Size: 0x1]// 0x75a86fa000
	bool bIgnoreAttachedOwnerCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe45, Size: 0x1]// 0x75a86fa080
	bool bReturnBulletsWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe46, Size: 0x1]// 0x75a86fa100
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe47, Size: 0x1]// 0x75a86fa180
	bool bStoreBulletsToTombBoxWrapperWhenDropToBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe48, Size: 0x1]// 0x75a86fa200
	bool bForbidSpawnWrapperWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe49, Size: 0x1]// 0x75a86fa280
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4a, Size: 0x1]// 0x75a86fa300
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0xe50, Size: 0x8]// 0x75a86fa380
	CurveFloat* OBBulletSizeScaleCurve;//[Offset: 0xe58, Size: 0x8]// 0x75a86fa400
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0xe60, Size: 0x70]// 0x75a86fa480
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0xed0, Size: 0x8]// 0x75a86fa580
	float SimulateOBBulletMinDistance;//[Offset: 0xed8, Size: 0x4]// 0x75a87481c0
	float DamageImpulse;//[Offset: 0xedc, Size: 0x4]// 0x75a8748230
	byte ReloadType;//[Offset: 0xee0, Size: 0x1]// 0x75a86fa600
	float PreFireTime;//[Offset: 0xee4, Size: 0x4]// 0x75a87482a0
	float PostFireTime;//[Offset: 0xee8, Size: 0x4]// 0x75a8748310
	float PostReloadTime;//[Offset: 0xeec, Size: 0x4]// 0x75a8748380
	float ReloadDurationStart;//[Offset: 0xef0, Size: 0x4]// 0x75a87483f0
	float ReloadDurationLoop;//[Offset: 0xef4, Size: 0x4]// 0x75a8748460
	float ReloadTime;//[Offset: 0xef8, Size: 0x4]// 0x75a87484d0
	float ReloadTimeModifier;//[Offset: 0xefc, Size: 0x4]// 0x75a8748540
	float ReloadTimeTactical;//[Offset: 0xf00, Size: 0x4]// 0x75a87485b0
	float ReloadTimeTacticalModifier;//[Offset: 0xf04, Size: 0x4]// 0x75a8748620
	float ReloadTimeTacticalOneByOneModifier;//[Offset: 0xf08, Size: 0x4]// 0x75a8748690
	float AllReloadTimeModifier;//[Offset: 0xf0c, Size: 0x4]// 0x75a8748700
	float ReloadTimeMagOut;//[Offset: 0xf10, Size: 0x4]// 0x75a8748770
	float ReloadTimeMagOutTactical;//[Offset: 0xf14, Size: 0x4]// 0x75a87487e0
	float ReloadTimeMagIn;//[Offset: 0xf18, Size: 0x4]// 0x75a8748850
	float ReloadTimeMagInTactical;//[Offset: 0xf1c, Size: 0x4]// 0x75a87488c0
	FName ReloadAllTIDName;//[Offset: 0xf20, Size: 0x8]// 0x75a8748930
	FName ReloadTacticalTIDName;//[Offset: 0xf28, Size: 0x8]// 0x75a87489a0
	float AutoReloadCD;//[Offset: 0xf30, Size: 0x4]// 0x75a8748a10
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf34, Size: 0x1]// 0x75a86fa680
	int ShowMagOnReload;//[Offset: 0xf38, Size: 0x4]// 0x75a8748a80
	bool bForcePostReloadAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3c, Size: 0x1]// 0x75a86fa700
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3d, Size: 0x1]// 0x75a86fa780
	float DropDuration;//[Offset: 0xf40, Size: 0x4]// 0x75a8748af0
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0xf44, Size: 0x4]// 0x75a8748b60
	bool ReloadLimitAnimPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf48, Size: 0x1]// 0x75a86fa800
	SRecoilInfo RecoilInfo;//[Offset: 0xf50, Size: 0x88]// 0x75a86fa880
	float AccessoriesVRecoilFactor;//[Offset: 0xfd8, Size: 0x4]// 0x75a8748bd0
	float AccessoriesVRecoilFactorModifier;//[Offset: 0xfdc, Size: 0x4]// 0x75a8748c40
	float VerticalRecoilFactorModifier;//[Offset: 0xfe0, Size: 0x4]// 0x75a8748cb0
	float AccessoriesHRecoilFactor;//[Offset: 0xfe4, Size: 0x4]// 0x75a8748d20
	float AccessoriesHRecoilFactorModifier;//[Offset: 0xfe8, Size: 0x4]// 0x75a8748d90
	float HorizontalRecoilFactorModifier;//[Offset: 0xfec, Size: 0x4]// 0x75a8748e00
	float AccessoriesAllRecoilFactorModifier;//[Offset: 0xff0, Size: 0x4]// 0x75a8748e70
	float AccessoriesRecoveryFactor;//[Offset: 0xff4, Size: 0x4]// 0x75a8748ee0
	bool bTryApplyReservedRecoilCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 0x1]// 0x75a86fa900
	SDeviation DeviationInfo;//[Offset: 0xffc, Size: 0x40]// 0x75a86fa980
	float ShotGunVerticalSpread;//[Offset: 0x103c, Size: 0x4]// 0x75a8748f50
	float ShotGunHorizontalSpread;//[Offset: 0x1040, Size: 0x4]// 0x75a8748fc0
	float GameDeviationFactor;//[Offset: 0x1044, Size: 0x4]// 0x75a8749030
	float GameDeviationAccuracy;//[Offset: 0x1048, Size: 0x4]// 0x75a87490a0
	float AccessoriesDeviationFactor;//[Offset: 0x104c, Size: 0x4]// 0x75a8749110
	float AccessoriesFinalDeviationFactor;//[Offset: 0x1050, Size: 0x4]// 0x75a8749180
	float DeviationFactorModifier;//[Offset: 0x1054, Size: 0x4]// 0x75a87491f0
	bool bEnableDSDeviationVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 0x1]// 0x75a86faa00
	byte CrossHairType;//[Offset: 0x1059, Size: 0x1]// 0x75a86faa80
	float CrossHairInitialSize;//[Offset: 0x105c, Size: 0x4]// 0x75a8749260
	float CrossHairBurstSpeed;//[Offset: 0x1060, Size: 0x4]// 0x75a87492d0
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x1064, Size: 0x4]// 0x75a8749340
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1068, Size: 0x1]// 0x75a86fab00
	FName DefaultScopeSocket;//[Offset: 0x1070, Size: 0x8]// 0x75a87493b0
	FName DefaultGripSocket;//[Offset: 0x1078, Size: 0x8]// 0x75a8749420
	FName DefaultGunStockSocket;//[Offset: 0x1080, Size: 0x8]// 0x75a8749490
	FName DefaultMagSocket;//[Offset: 0x1088, Size: 0x8]// 0x75a8749500
	float WeaponBodyLength;//[Offset: 0x1090, Size: 0x4]// 0x75a8749570
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x1098, Size: 0x10]// 0x75a86fab80
	float WeaponAimFOV;//[Offset: 0x10ac, Size: 0x4]// 0x75a8749650
	float WeaponAimInTime;//[Offset: 0x10b0, Size: 0x4]// 0x75a87496c0
	float WeaponAimPitchRate;//[Offset: 0x10b4, Size: 0x4]// 0x75a8749730
	float WeaponAimYawRate;//[Offset: 0x10b8, Size: 0x4]// 0x75a87497a0
	float GameMotionYawRate;//[Offset: 0x10bc, Size: 0x4]// 0x75a8749810
	float GameMotionPitchRate;//[Offset: 0x10c0, Size: 0x4]// 0x75a8749880
	float ForegripParam;//[Offset: 0x10c4, Size: 0x4]// 0x75a87498f0
	float MagParam;//[Offset: 0x10c8, Size: 0x4]// 0x75a8749960
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cc, Size: 0x1]// 0x75a86fac00
	float SensitiveFireYawRate;//[Offset: 0x10d0, Size: 0x4]// 0x75a87499d0
	float SensitiveFirePitchRate;//[Offset: 0x10d4, Size: 0x4]// 0x75a8749a40
	byte SightType;//[Offset: 0x10d8, Size: 0x1]// 0x75a86fac80
	ItemDefineID DefaultScopeID;//[Offset: 0x10e0, Size: 0x18]// 0x75a86fad00
	FName ScopeAimCameraSocketNameOverride;//[Offset: 0x10f8, Size: 0x8]// 0x75a8749ab0
	float MaxBulletImpactFXClampDistance;//[Offset: 0x1100, Size: 0x4]// 0x75a8749b20
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x1104, Size: 0x4]// 0x75a8749b90
	float RecoilKickADS;//[Offset: 0x1108, Size: 0x4]// 0x75a8749c00
	float ExtraHitPerformScale;//[Offset: 0x110c, Size: 0x4]// 0x75a8749c70
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x1110, Size: 0x4]// 0x75a8749ce0
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 0x1]// 0x75a86fad80
	enum ReleaseFireType;//[Offset: 0x1115, Size: 0x1]// 0x75a86fae80
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1116, Size: 0x1]// 0x75a86faf00
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1117, Size: 0x1]// 0x75a86faf80
	float LockAnimPitchDegree;//[Offset: 0x1118, Size: 0x4]// 0x75a8749d50
	float LockAnimPitchDegreeCrouch;//[Offset: 0x111c, Size: 0x4]// 0x75a8749dc0
	bool bFirstAimSpineAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1120, Size: 0x1]// 0x75a86fb000
	float AnimationKick;//[Offset: 0x1124, Size: 0x4]// 0x75a8749e30
	int ReloadAnimSlot;//[Offset: 0x1128, Size: 0x4]// 0x75a8749ea0
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112c, Size: 0x1]// 0x75a86fb080
	float ReloadAnimRateScaleModifier;//[Offset: 0x1130, Size: 0x4]// 0x75a8749f10
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1134, Size: 0x1]// 0x75a86fb100
	bool bUseScopeOutLerpFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1135, Size: 0x1]// 0x75a86fb180
	bool bDisableFolderInReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1136, Size: 0x1]// 0x75a86fb200
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1137, Size: 0x1]// 0x75a86fb280
	float HandleFolderFactorScale;//[Offset: 0x1138, Size: 0x4]// 0x75a8749f80
	float SwitchAimAnimTime;//[Offset: 0x113c, Size: 0x4]// 0x75a8749ff0
	int[] DefaultWeaponIDList;//[Offset: 0x1140, Size: 0x10]// 0x75a86fb300
	float ShootInterval;//[Offset: 0x1150, Size: 0x4]// 0x75a874a0d0
	int ShootIntervalShowNumber;//[Offset: 0x1154, Size: 0x4]// 0x75a874a140
	float ExtraShootInterval;//[Offset: 0x1158, Size: 0x4]// 0x75a874a1b0
	int ExtraShootIntervalShowNumber;//[Offset: 0x115c, Size: 0x4]// 0x75a874a220
	float BurstShootInterval;//[Offset: 0x1160, Size: 0x4]// 0x75a874a290
	void OnRep_InfiniteBulletsChanged();// 0x452d850
	bool CheckTryApplyReservedRecoilCurve();// 0x452d810
	void CheckAndFillEncryptConfigMap();// 0x452d7fc

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x510, Size: 0x8]// 0x7611e083d0
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]// 0x7611e08350
	int MaxNoGravityRange;//[Offset: 0x51c, Size: 0x4]// 0x7611e082e0
	float LaunchGravityScale;//[Offset: 0x520, Size: 0x4]// 0x7611e08270
	int PunctureTimes;//[Offset: 0x524, Size: 0x4]// 0x7611e08200
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x528, Size: 0x8]// 0x7611e08180
	class DamageType* DamageType;//[Offset: 0x530, Size: 0x8]// 0x7611e08100
	ParticleSystem* NormalTailFX;//[Offset: 0x538, Size: 0x8]// 0x7611e08080
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]// 0x7611e08000
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1]// 0x7611e07f80
	ParticleSystem* BeamTailFX;//[Offset: 0x548, Size: 0x8]// 0x7611e07f00
	Vector RootScale;//[Offset: 0x550, Size: 0xc]// 0x7611e07e80
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]// 0x7611e07e00
	Vector ShootDir;//[Offset: 0x560, Size: 0xc]// 0x7611e07d80
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]// 0x7611e07d00
	float ShowBulletEffectMinDistance;//[Offset: 0x570, Size: 0x4]// 0x7611e07c90
	float OutRangeDefaultImpactLength;//[Offset: 0x574, Size: 0x4]// 0x7611e07c20
	bool bApplyCurVehicleSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]// 0x7611e07ba0
	bool bAutoDestroySimulateBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]// 0x7611e07b20
	float DelayDestroyBulletTime;//[Offset: 0x57c, Size: 0x4]// 0x7611e07ab0
	class BulletFunctionModuleBase[] FunctionModuleTemplateList;//[Offset: 0x580, Size: 0x10]// 0x7611e079b0
	BulletFunctionModuleBase*[] FunctionModuleList;//[Offset: 0x590, Size: 0x10]// 0x7611e078b0
	bool bHasInitFunctionModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]// 0x7611e07830
	delegate OnRecycleBullet;//[Offset: 0x5a8, Size: 0x10]// 0x7611e077b0
	Vector ShootMomentMuzzlePos;//[Offset: 0x5d0, Size: 0xc]// 0x7611e07730
	float MaxShootDistance;//[Offset: 0x5e8, Size: 0x4]// 0x7611e076c0
	bool BulletIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]// 0x7611e07640
	delegate OnResetBullet;//[Offset: 0x6f0, Size: 0x10]// 0x7611e075c0
	delegate OnBulletImpact;//[Offset: 0x700, Size: 0x10]// 0x7611e07540
	delegate OnLaunchBullet;//[Offset: 0x710, Size: 0x10]// 0x7611e074c0
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x720, Size: 0x8]// 0x7611e07440
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x728, Size: 0x8]// 0x7611e073c0
	STExtraCharacter* InstigatorCharacter;//[Offset: 0x730, Size: 0x8]// 0x7611e07340
	int CurPunctureTimes;//[Offset: 0x738, Size: 0x4]// 0x7611e072d0
	Vector BeamTailFXCompOriginDisLoc;//[Offset: 0x73c, Size: 0xc]// 0x7611e07250
	float CurImpactDamage;//[Offset: 0x748, Size: 0x4]// 0x7611e071e0
	float LaunchSpeed;//[Offset: 0x750, Size: 0x4]// 0x7611e07170
	int ClientShootStartTime;//[Offset: 0x754, Size: 0x4]// 0x7611e07100
	int ClientShootHitTime;//[Offset: 0x758, Size: 0x4]// 0x7611e07090
	float BulletDownDistance;//[Offset: 0x75c, Size: 0x4]// 0x7611e07020
	Vector BulletBornPos;//[Offset: 0x760, Size: 0xc]// 0x7611e06fa0
	int ClientShootStartTimeReal;//[Offset: 0x770, Size: 0x4]// 0x7611e06f30
	float MuzzleFloorHeight;//[Offset: 0x774, Size: 0x4]// 0x7611e06ec0
	Vector OriginLoc;//[Offset: 0x778, Size: 0xc]// 0x7611e06e40
	bool NeedUploadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 0x1]// 0x7611e06dc0
	PlayerController* ShootPlayerController;//[Offset: 0x7a0, Size: 0x8]// 0x7611e06d40
	Controller* ShooterController;//[Offset: 0x7a8, Size: 0x8]// 0x7611e06cc0
	bool bShootPlayerIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]// 0x7611e06c40
	Vector CameraLocation;//[Offset: 0x7b4, Size: 0xc]// 0x7611e06bc0
	Rotator CameraRotate;//[Offset: 0x7c0, Size: 0xc]// 0x7611e06b40
	Rotator PawnRotate;//[Offset: 0x7cc, Size: 0xc]// 0x7611e06ac0
	Vector2D BackTrace;//[Offset: 0x7d8, Size: 0x8]// 0x7611e06a40
	int DeviationRandomSeed;//[Offset: 0x7e0, Size: 0x4]// 0x7611e069d0
	float ShootDeviation;//[Offset: 0x7e4, Size: 0x4]// 0x7611e06960
	Vector ShootTracePoint;//[Offset: 0x7e8, Size: 0xc]// 0x7611e068e0
	float DamageRate;//[Offset: 0x7f4, Size: 0x4]// 0x7611e06870
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]// 0x7611e067f0
	bool bHasBreakthroughWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 0x1]// 0x7611e06770
	Vector mfv_LastPosition;//[Offset: 0x7fc, Size: 0xc]// 0x7611e066f0
	float mf_BulletMoved;//[Offset: 0x808, Size: 0x4]// 0x7611e06680
	bool bHasTriggerShowBulletEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 0x1]// 0x7611e06600
	TimerHandle DelayDestroyBulletHandle;//[Offset: 0x810, Size: 0x8]// 0x7611e06580
	bool bHasDelayDestroyBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]// 0x7611e06500
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 0x1]// 0x7611e06480
	void ResetBulletDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void ReceiveLaunchBullet();// 0xffffff8a17adf2b0
	void PostLaunchBP(float Speed, out const Transform InTrans, Actor* InOwningWeapon, Actor* InInstigator);// 0xffffff8a17adf2b0
	void PostFillBulletHitUploadData(out BulletHitInfoUploadData Data);// 0x46acd54
	void OnShowBulletEffect();// 0xffffff8a17adf2b0
	void OnRecycleBulletDelegate__DelegateSignature(STExtraShootWeaponBulletBase* Bullet);// 0xffffff8a17adf2b0
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x46accac
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0xffffff8a17adf2b0
	void OnImpact(out const HitResult _ImpactResult);// 0x46acc04
	void OnDestoryBullet();// 0x46acbe8
	bool NeedCheckBulletFlySound();// 0x46acba8
	void LaunchBulletDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void LaunchBP(float Speed, out Transform InTrans, Actor* InOwningWeapon, Actor* InInstigator, out Transform OutTrans);// 0xffffff8a17adf2b0
	int GetShootID();// 0x46acb8c
	byte GetOwnerRole();// 0x46acb58
	float GetMaxNoGravityRange();// 0x46acb1c
	float GetMaxBulletFlySpeed();// 0x46acae0
	float GetLaunchGravityScale();// 0x46acaa4
	Controller* GetInstigatorControllerSafe();// 0x46aca70
	float GetCurBulletFlySpeed();// 0x46aca3c
	void DelayDestoryBulletFinished();// 0x46aca28
	void BPOnDelayDestoryBullet();// 0xffffff8a17adf2b0

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	int MaxBounces;//[Offset: 0x22c, Size: 0x4]// 0x75d0af07d0
	int NumBounces_PRIVATE;//[Offset: 0x230, Size: 0x4]// 0x75d0af0840
	bool bResumeMoveAfterImpactWithNoLostFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]// 0x75bdd3fe00
	bool bHasTickDelayedOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]// 0x75bdd3fe80
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]// 0x75bdd3ff00
	float ExtraGravityZOffset;//[Offset: 0x238, Size: 0x4]// 0x75d0af08b0
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]// 0x75bdd3ff80
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]// 0x75bdd40000
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 0x1]// 0x75bdd40080
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x240, Size: 0x8]// 0x75bdd40100
	void ResumeMoveAfterImpactWithNoLost();// 0x4230700
	void ResetTickDelay();// 0x42306e8
	void IgnoreBounceReflectOnce();// 0x42306cc
	void ForceStop();// 0x42306b8

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x154, Size: 0x4]// 0x7611d177e0
	float MaxSpeed;//[Offset: 0x158, Size: 0x4]// 0x7611d17770
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 0x1]// 0x7611d176f0
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c, Size: 0x1]// 0x7611d17670
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c, Size: 0x1]// 0x7611d175f0
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c, Size: 0x1]// 0x7611d17570
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c, Size: 0x1]// 0x7611d174f0
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15c, Size: 0x1]// 0x7611d17470
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15c, Size: 0x1]// 0x7611d173f0
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15c, Size: 0x1]// 0x7611d17370
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15d, Size: 0x1]// 0x7611d172f0
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15d, Size: 0x1]// 0x7611d17270
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15d, Size: 0x1]// 0x7611d171f0
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15d, Size: 0x1]// 0x7611d17170
	float PreviousHitTime;//[Offset: 0x160, Size: 0x4]// 0x7611d17100
	Vector PreviousHitNormal;//[Offset: 0x164, Size: 0xc]// 0x7611d17080
	float ProjectileGravityScale;//[Offset: 0x170, Size: 0x4]// 0x7611d17010
	float Buoyancy;//[Offset: 0x174, Size: 0x4]// 0x7611d16fa0
	float Bounciness;//[Offset: 0x178, Size: 0x4]// 0x7611d16f30
	float Friction;//[Offset: 0x17c, Size: 0x4]// 0x7611d16ec0
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x180, Size: 0x4]// 0x7611d16e50
	float MinFrictionFraction;//[Offset: 0x184, Size: 0x4]// 0x7611d16de0
	delegate OnProjectileBounce;//[Offset: 0x188, Size: 0x10]// 0x7611d16d60
	delegate OnProjectileStop;//[Offset: 0x198, Size: 0x10]// 0x7611d16ce0
	float HomingAccelerationMagnitude;//[Offset: 0x1a8, Size: 0x4]// 0x7611d16c70
	SceneComponent* HomingTargetComponent;//[Offset: 0x1ac, Size: 0x8]// 0x7611d16bf0
	float MaxSimulationTimeStep;//[Offset: 0x1b4, Size: 0x4]// 0x7611d16b80
	int MaxSimulationIterations;//[Offset: 0x1b8, Size: 0x4]// 0x7611d16b10
	int BounceAdditionalIterations;//[Offset: 0x1bc, Size: 0x4]// 0x7611d16aa0
	float InterpLocationTime;//[Offset: 0x1c0, Size: 0x4]// 0x7611d16a30
	float InterpRotationTime;//[Offset: 0x1c4, Size: 0x4]// 0x7611d169c0
	float InterpLocationMaxLagDistance;//[Offset: 0x1c8, Size: 0x4]// 0x7611d16950
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1cc, Size: 0x4]// 0x7611d168e0
	void StopSimulating(out const HitResult HitResult);// 0x6ef60d4
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x6ef604c
	void SetInterpolatedComponent(SceneComponent* Component);// 0x6ef5fc8
	void ResetInterpolation();// 0x6ef5fac
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xffffff8a17adf2b0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xffffff8a17adf2b0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x6ef5ec0
	Vector LimitVelocity(Vector NewVelocity);// 0x6ef5e2c
	bool IsVelocityUnderSimulationThreshold();// 0x6ef5de4
	bool IsInterpolationComplete();// 0x6ef5db8

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	ParticleSystem* DefaultFX;//[Offset: 0x518, Size: 0x8]// 0x75a8114280
	ParticleSystem* ConcreteFX;//[Offset: 0x520, Size: 0x8]// 0x75a8114300
	ParticleSystem* DirtFX;//[Offset: 0x528, Size: 0x8]// 0x75a8114380
	ParticleSystem* WaterFX;//[Offset: 0x530, Size: 0x8]// 0x75a8114400
	ParticleSystem* MetalFX;//[Offset: 0x538, Size: 0x8]// 0x75a8114480
	ParticleSystem* WoodFX;//[Offset: 0x540, Size: 0x8]// 0x75a8114500
	ParticleSystem* GlassFX;//[Offset: 0x548, Size: 0x8]// 0x75a8114580
	ParticleSystem* GrassFX;//[Offset: 0x550, Size: 0x8]// 0x75a8114600
	ParticleSystem* FleshFX;//[Offset: 0x558, Size: 0x8]// 0x75a8114680
	ParticleSystem* AutonomousFleshFX;//[Offset: 0x560, Size: 0x8]// 0x75a8114700
	ParticleSystem* SteelFX;//[Offset: 0x568, Size: 0x8]// 0x75a8114780
	ParticleSystem* SandbagFX;//[Offset: 0x570, Size: 0x8]// 0x75a8114800
	ParticleSystem* SandFX;//[Offset: 0x578, Size: 0x8]// 0x75a8114880
	ParticleSystem* ClothFX;//[Offset: 0x580, Size: 0x8]// 0x75a8114900
	ParticleSystem* PlasticFX;//[Offset: 0x588, Size: 0x8]// 0x75a8114980
	ParticleSystem* LeatherFX;//[Offset: 0x590, Size: 0x8]// 0x75a8114a00
	ParticleSystem* CeramicsFX;//[Offset: 0x598, Size: 0x8]// 0x75a8114a80
	ParticleSystem* PaperFX;//[Offset: 0x5a0, Size: 0x8]// 0x75a8114b00
	ParticleSystem* StoneFX;//[Offset: 0x5a8, Size: 0x8]// 0x75a8114b80
	ParticleSystem* SnowFX;//[Offset: 0x5b0, Size: 0x8]// 0x75a8114c00
	ParticleSystem* PopCanFX;//[Offset: 0x5b8, Size: 0x8]// 0x75a8114c80
	ParticleSystem* PyreflyFX;//[Offset: 0x5c0, Size: 0x8]// 0x75a8114d00
	ParticleSystem* LeafFX;//[Offset: 0x5c8, Size: 0x8]// 0x75a8114d80
	ParticleSystem* CarFX;//[Offset: 0x5d0, Size: 0x8]// 0x75a8114e00
	ParticleSystem* AsphaltFX;//[Offset: 0x5d8, Size: 0x8]// 0x75a8114e80
	ParticleSystem* IceFX;//[Offset: 0x5e0, Size: 0x8]// 0x75a8114f00
	ParticleSystem* FoodFX;//[Offset: 0x5e8, Size: 0x8]// 0x75a8114f80
	ParticleSystem* MonsterFleshFX;//[Offset: 0x5f0, Size: 0x8]// 0x75a8115000
	ParticleSystem* IceEngravingFX;//[Offset: 0x5f8, Size: 0x8]// 0x75a8115080
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]// 0x75a8115100
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0x608, Size: 0x50]// 0x75a814fd40
	AkAudioEvent* DefaultSound;//[Offset: 0x658, Size: 0x8]// 0x75a8115200
	AkAudioEvent* ConcreteSound;//[Offset: 0x660, Size: 0x8]// 0x75a8115280
	AkAudioEvent* DirtSound;//[Offset: 0x668, Size: 0x8]// 0x75a8115300
	AkAudioEvent* WaterSound;//[Offset: 0x670, Size: 0x8]// 0x75a8115380
	AkAudioEvent* MetalSound;//[Offset: 0x678, Size: 0x8]// 0x75a8115400
	AkAudioEvent* WoodSound;//[Offset: 0x680, Size: 0x8]// 0x75a8115480
	AkAudioEvent* GlassSound;//[Offset: 0x688, Size: 0x8]// 0x75a8115500
	AkAudioEvent* GrassSound;//[Offset: 0x690, Size: 0x8]// 0x75a8115580
	AkAudioEvent* FleshSound;//[Offset: 0x698, Size: 0x8]// 0x75a8115600
	AkAudioEvent* SteelSound;//[Offset: 0x6a0, Size: 0x8]// 0x75a8115680
	AkAudioEvent* SandbagSound;//[Offset: 0x6a8, Size: 0x8]// 0x75a8115700
	AkAudioEvent* SandSound;//[Offset: 0x6b0, Size: 0x8]// 0x75a8115780
	AkAudioEvent* ClothSound;//[Offset: 0x6b8, Size: 0x8]// 0x75a8115800
	AkAudioEvent* PlasticSound;//[Offset: 0x6c0, Size: 0x8]// 0x75a8115880
	AkAudioEvent* LeatherSound;//[Offset: 0x6c8, Size: 0x8]// 0x75a8115900
	AkAudioEvent* CeramicsSound;//[Offset: 0x6d0, Size: 0x8]// 0x75a8115980
	AkAudioEvent* PaperSound;//[Offset: 0x6d8, Size: 0x8]// 0x75a8115a00
	AkAudioEvent* StoneSound;//[Offset: 0x6e0, Size: 0x8]// 0x75a8115a80
	AkAudioEvent* SnowSound;//[Offset: 0x6e8, Size: 0x8]// 0x75a8115b00
	AkAudioEvent* PopCanSound;//[Offset: 0x6f0, Size: 0x8]// 0x75a8115b80
	AkAudioEvent* PyreflySound;//[Offset: 0x6f8, Size: 0x8]// 0x75a8115c00
	AkAudioEvent* LeafSound;//[Offset: 0x700, Size: 0x8]// 0x75a8115c80
	AkAudioEvent* CarSound;//[Offset: 0x708, Size: 0x8]// 0x75a8115d00
	AkAudioEvent* AsphaltSound;//[Offset: 0x710, Size: 0x8]// 0x75a8115d80
	AkAudioEvent* IceSound;//[Offset: 0x718, Size: 0x8]// 0x75a8115e00
	AkAudioEvent* FoodSound;//[Offset: 0x720, Size: 0x8]// 0x75a8115e80
	AkAudioEvent* MonsterFleshSound;//[Offset: 0x728, Size: 0x8]// 0x75a8115f00
	AkAudioEvent* IceEngravingSound;//[Offset: 0x730, Size: 0x8]// 0x75a8115f80
	DecalData DefaultDecal;//[Offset: 0x738, Size: 0x20]// 0x75a8116000
	DecalData ConcreteDecal;//[Offset: 0x758, Size: 0x20]// 0x75a8116080
	DecalData DirtDecal;//[Offset: 0x778, Size: 0x20]// 0x75a8116100
	DecalData WaterDecal;//[Offset: 0x798, Size: 0x20]// 0x75a8116180
	DecalData MetalDecal;//[Offset: 0x7b8, Size: 0x20]// 0x75a8116200
	DecalData WoodDecal;//[Offset: 0x7d8, Size: 0x20]// 0x75a8116280
	DecalData GrassDecal;//[Offset: 0x7f8, Size: 0x20]// 0x75a8116300
	DecalData GlassDecal;//[Offset: 0x818, Size: 0x20]// 0x75a8116380
	DecalData FleshDecal;//[Offset: 0x838, Size: 0x20]// 0x75a8116400
	DecalData FleshDecalAutomonous;//[Offset: 0x858, Size: 0x20]// 0x75a8116480
	DecalData SteelDecal;//[Offset: 0x878, Size: 0x20]// 0x75a8116500
	DecalData SandbagDecal;//[Offset: 0x898, Size: 0x20]// 0x75a8116580
	DecalData SandDecal;//[Offset: 0x8b8, Size: 0x20]// 0x75a8116600
	DecalData ClothDecal;//[Offset: 0x8d8, Size: 0x20]// 0x75a8116680
	DecalData PlasticDecal;//[Offset: 0x8f8, Size: 0x20]// 0x75a8116700
	DecalData LeatherDecal;//[Offset: 0x918, Size: 0x20]// 0x75a8116780
	DecalData CeramicsDecal;//[Offset: 0x938, Size: 0x20]// 0x75a8116800
	DecalData PaperDecal;//[Offset: 0x958, Size: 0x20]// 0x75a8116880
	DecalData StoneDecal;//[Offset: 0x978, Size: 0x20]// 0x75a8116900
	DecalData SnowDecal;//[Offset: 0x998, Size: 0x20]// 0x75a8116980
	DecalData PopCanDecal;//[Offset: 0x9b8, Size: 0x20]// 0x75a8116a00
	DecalData PyreflyDecal;//[Offset: 0x9d8, Size: 0x20]// 0x75a8116a80
	DecalData LeafDecal;//[Offset: 0x9f8, Size: 0x20]// 0x75a8116b00
	DecalData CarDecal;//[Offset: 0xa18, Size: 0x20]// 0x75a8116b80
	DecalData AsphaltDecal;//[Offset: 0xa38, Size: 0x20]// 0x75a8116c00
	DecalData IceDecal;//[Offset: 0xa58, Size: 0x20]// 0x75a8116c80
	DecalData FoodDecal;//[Offset: 0xa78, Size: 0x20]// 0x75a8116d00
	DecalData IceEngravingDecal;//[Offset: 0xa98, Size: 0x20]// 0x75a8116d80
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0xac0, Size: 0x150]// 0x75a8116e00
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 0x1]// 0x75a8116e80
	bool bFXOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc11, Size: 0x1]// 0x75a8116f00
	bool bIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc12, Size: 0x1]// 0x75a8116f80
	DecalComponent* ImpactDecalComp;//[Offset: 0xc18, Size: 0x8]// 0x75a8117000
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0xc20, Size: 0x8]// 0x75a8117080
	SceneComponent* TargetImpactComp;//[Offset: 0xc48, Size: 0x8]// 0x75a8117100
	ParticleSystem* CachedImpactFX;//[Offset: 0xc50, Size: 0x8]// 0x75a8117180
	void TimerHideDecal();// 0x45697ac

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]// 0x7612198a30
	float LifeSpan;//[Offset: 0x4, Size: 0x4]// 0x76121989c0
	Material* DecalMaterial;//[Offset: 0x8, Size: 0x8]// 0x7612198940
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 0x4]// 0x76121988d0
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 0x4]// 0x7612198860
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 0x4]// 0x76121987f0
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 0x4]// 0x7612198780

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]// 0x7611e00ff0
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 0xc]// 0x7611e00f70
	Vector VictimLocation;//[Offset: 0x18, Size: 0xc]// 0x7611e00ef0
	Vector BulletPos;//[Offset: 0x24, Size: 0xc]// 0x7611e00e70
	Vector ShootMomentMuzzlePos;//[Offset: 0x30, Size: 0xc]// 0x7611e00df0
	Vector ShootDir;//[Offset: 0x3c, Size: 0xc]// 0x7611e00d70
	int8 SurfaceType;//[Offset: 0x48, Size: 0x1]// 0x7611e00d00
	uint32 ShootID;//[Offset: 0x4c, Size: 0x4]// 0x7611e00c90
	uint16 CompensationTime;//[Offset: 0x50, Size: 0x2]// 0x7611e00c20
	int HitTargetLagTime;//[Offset: 0x64, Size: 0x4]// 0x7611e00bb0
	int ClientShootTime;//[Offset: 0x68, Size: 0x4]// 0x7611e00b40
	byte HitBodyType;//[Offset: 0x6c, Size: 0x1]// 0x7611e00ac0
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x70, Size: 0x4]// 0x7611e00a50
	float MuzzleFloorHeight;//[Offset: 0x74, Size: 0x4]// 0x7611e009e0
	float DamageRate;//[Offset: 0x78, Size: 0x4]// 0x7611e00970
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]// 0x7611e008f0
	bool bIsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 0x1]// 0x7611e00870
	bool bShootToDeath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 0x1]// 0x7611e007f0
	bool bOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 0x1]// 0x7611e00770
	FName BoneName;//[Offset: 0x80, Size: 0x8]// 0x7611e00700
	Transform BoneTrans;//[Offset: 0x90, Size: 0x30]// 0x7611e00680
	MoveBaseInfo_NetQuantize VictimBase;//[Offset: 0xc0, Size: 0x50]// 0x7611e00560
	BulletID BulletID;//[Offset: 0x110, Size: 0x2]// 0x7611e00340
	uint16 ShootFrame;//[Offset: 0x112, Size: 0x2]// 0x7611e002d0
	int DeviationRandomSeed;//[Offset: 0x114, Size: 0x4]// 0x7611e00260
	float ShootDeviation;//[Offset: 0x118, Size: 0x4]// 0x7611e001f0
	bool bNetSerializeCriticalInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]// 0x7611e00170
	Vector ShootTracePoint;//[Offset: 0x120, Size: 0xc]// 0x7611e000f0

--------------------------------
Class: MoveBaseInfo_NetQuantize

--------------------------------
Class: BulletID
	byte PelletID;//[Offset: 0x0, Size: 0x1]// 0x7611e004e0
	byte DataID;//[Offset: 0x1, Size: 0x1]// 0x7611e00460

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2b8, Size: 0x8]// 0x75bca71900
	int SortOrder;//[Offset: 0x2c0, Size: 0x4]// 0x75a7888720
	float FadeScreenSize;//[Offset: 0x2c4, Size: 0x4]// 0x75a7888790
	float FadeStartDelay;//[Offset: 0x2c8, Size: 0x4]// 0x75a7888800
	float FadeDuration;//[Offset: 0x2cc, Size: 0x4]// 0x75a7888870
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]// 0x75bca71980
	Vector DecalSize;//[Offset: 0x2d4, Size: 0xc]// 0x75bca71a00
	void SetSortOrder(int Value);// 0x6dd84d8
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x6dd845c
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x6dd8364
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x6dd82e8
	float GetFadeStartDelay();// 0x6dd82b4
	float GetFadeDuration();// 0x6dd8280
	MaterialInterface* GetDecalMaterial();// 0x6dd824c
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x6dd8210

--------------------------------
Class: BulletFunctionModuleBase.Object
	bool bServerAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75bdd40980
	bool bClientAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x75bdd40a00
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]// 0x75bdd40a80
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x30, Size: 0x8]// 0x75bdd40b00
	STExtraShootWeaponBulletBase* OwnerBullet;//[Offset: 0x38, Size: 0x8]// 0x75bdd40b80
	void Tick(float DeltaTime);// 0x422f6a8
	void OnOwnerBulletLaunch(STExtraShootWeapon* InOwnerWeapon);// 0x422f624
	void Init(STExtraShootWeaponBulletBase* InOwnerBullet);// 0x422f5a0
	void EndPlay();// 0x422f584

--------------------------------
Class: WeaponHitPartCoff
	float head;//[Offset: 0x0, Size: 0x4]// 0x7611e10700
	float Body;//[Offset: 0x4, Size: 0x4]// 0x7611e10690
	float Limbs;//[Offset: 0x8, Size: 0x4]// 0x7611e10620
	float Hand;//[Offset: 0xc, Size: 0x4]// 0x7611e105b0
	float Foot;//[Offset: 0x10, Size: 0x4]// 0x7611e10540

--------------------------------
Class: HitEffectDataAsset.DataAsset.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x30, Size: 0x50]// 0x75bcad9a00
	ParticleSystem* DefaultFX;//[Offset: 0x80, Size: 0x8]// 0x75bcae4080
	ParticleSystem* ConcreteFX;//[Offset: 0x88, Size: 0x8]// 0x75bcae4100
	ParticleSystem* DirtFX;//[Offset: 0x90, Size: 0x8]// 0x75bcae4180
	ParticleSystem* WaterFX;//[Offset: 0x98, Size: 0x8]// 0x75bcae4200
	ParticleSystem* MetalFX;//[Offset: 0xa0, Size: 0x8]// 0x75bcae4280
	ParticleSystem* WoodFX;//[Offset: 0xa8, Size: 0x8]// 0x75bcae4300
	ParticleSystem* GlassFX;//[Offset: 0xb0, Size: 0x8]// 0x75bcae4380
	ParticleSystem* GrassFX;//[Offset: 0xb8, Size: 0x8]// 0x75bcae4400
	ParticleSystem* FleshFX;//[Offset: 0xc0, Size: 0x8]// 0x75bcae4480
	ParticleSystem* AutonomousFleshFX;//[Offset: 0xc8, Size: 0x8]// 0x75bcae4500
	ParticleSystem* SteelFX;//[Offset: 0xd0, Size: 0x8]// 0x75bcae4580
	ParticleSystem* SandbagFX;//[Offset: 0xd8, Size: 0x8]// 0x75bcae4600
	ParticleSystem* SandFX;//[Offset: 0xe0, Size: 0x8]// 0x75bcae4680
	ParticleSystem* ClothFX;//[Offset: 0xe8, Size: 0x8]// 0x75bcae4700
	ParticleSystem* PlasticFX;//[Offset: 0xf0, Size: 0x8]// 0x75bcae4780
	ParticleSystem* LeatherFX;//[Offset: 0xf8, Size: 0x8]// 0x75bcae4800
	ParticleSystem* CeramicsFX;//[Offset: 0x100, Size: 0x8]// 0x75bcae4880
	ParticleSystem* PaperFX;//[Offset: 0x108, Size: 0x8]// 0x75bcae4900
	ParticleSystem* StoneFX;//[Offset: 0x110, Size: 0x8]// 0x75bcae4980
	ParticleSystem* SnowFX;//[Offset: 0x118, Size: 0x8]// 0x75bcae4a00
	ParticleSystem* PopCanFX;//[Offset: 0x120, Size: 0x8]// 0x75bcae4a80
	ParticleSystem* PyreflyFX;//[Offset: 0x128, Size: 0x8]// 0x75bcae4b00
	ParticleSystem* LeafFX;//[Offset: 0x130, Size: 0x8]// 0x75bcae4b80
	ParticleSystem* CarFX;//[Offset: 0x138, Size: 0x8]// 0x75bcae4c00
	ParticleSystem* AsphaltFX;//[Offset: 0x140, Size: 0x8]// 0x75bcae4c80
	ParticleSystem* IceFX;//[Offset: 0x148, Size: 0x8]// 0x75bcae4d00
	ParticleSystem* FoodFX;//[Offset: 0x150, Size: 0x8]// 0x75bcae4d80
	ParticleSystem* MonsterFleshFX;//[Offset: 0x158, Size: 0x8]// 0x75bcae4e00
	ParticleSystem* IceEngravingFX;//[Offset: 0x160, Size: 0x8]// 0x75bcae4e80
	ParticleSystem* NewYearSculptureFX;//[Offset: 0x168, Size: 0x8]// 0x75bcae4f00
	ParticleSystem* AirVehicleSteelFX;//[Offset: 0x170, Size: 0x8]// 0x75bcae4f80
	ParticleSystem* LinoleumFX;//[Offset: 0x178, Size: 0x8]// 0x75bcae5000
	ParticleSystem* ThatchFX;//[Offset: 0x180, Size: 0x8]// 0x75bcae5080
	ParticleSystem* CocoFX;//[Offset: 0x188, Size: 0x8]// 0x75bcae5100
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]// 0x75bcae5180
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0x198, Size: 0x50]// 0x75bcad9ac0
	AkAudioEvent* DefaultSound;//[Offset: 0x1e8, Size: 0x8]// 0x75bcae5280
	AkAudioEvent* ConcreteSound;//[Offset: 0x1f0, Size: 0x8]// 0x75bcae5300
	AkAudioEvent* DirtSound;//[Offset: 0x1f8, Size: 0x8]// 0x75bcae5380
	AkAudioEvent* WaterSound;//[Offset: 0x200, Size: 0x8]// 0x75bcae5400
	AkAudioEvent* MetalSound;//[Offset: 0x208, Size: 0x8]// 0x75bcae5480
	AkAudioEvent* WoodSound;//[Offset: 0x210, Size: 0x8]// 0x75bcae5500
	AkAudioEvent* GlassSound;//[Offset: 0x218, Size: 0x8]// 0x75bcae5580
	AkAudioEvent* GrassSound;//[Offset: 0x220, Size: 0x8]// 0x75bcae5600
	AkAudioEvent* FleshSound;//[Offset: 0x228, Size: 0x8]// 0x75bcae5680
	AkAudioEvent* SteelSound;//[Offset: 0x230, Size: 0x8]// 0x75bcae5700
	AkAudioEvent* SandbagSound;//[Offset: 0x238, Size: 0x8]// 0x75bcae5780
	AkAudioEvent* SandSound;//[Offset: 0x240, Size: 0x8]// 0x75bcae5800
	AkAudioEvent* ClothSound;//[Offset: 0x248, Size: 0x8]// 0x75bcae5880
	AkAudioEvent* PlasticSound;//[Offset: 0x250, Size: 0x8]// 0x75bcae5900
	AkAudioEvent* LeatherSound;//[Offset: 0x258, Size: 0x8]// 0x75bcae5980
	AkAudioEvent* CeramicsSound;//[Offset: 0x260, Size: 0x8]// 0x75bcae5a00
	AkAudioEvent* PaperSound;//[Offset: 0x268, Size: 0x8]// 0x75bcae5a80
	AkAudioEvent* StoneSound;//[Offset: 0x270, Size: 0x8]// 0x75bcae5b00
	AkAudioEvent* SnowSound;//[Offset: 0x278, Size: 0x8]// 0x75bcae5b80
	AkAudioEvent* PopCanSound;//[Offset: 0x280, Size: 0x8]// 0x75bcae5c00
	AkAudioEvent* PyreflySound;//[Offset: 0x288, Size: 0x8]// 0x75bcae5c80
	AkAudioEvent* LeafSound;//[Offset: 0x290, Size: 0x8]// 0x75bcae5d00
	AkAudioEvent* CarSound;//[Offset: 0x298, Size: 0x8]// 0x75bcae5d80
	AkAudioEvent* AsphaltSound;//[Offset: 0x2a0, Size: 0x8]// 0x75bcae5e00
	AkAudioEvent* IceSound;//[Offset: 0x2a8, Size: 0x8]// 0x75bcae5e80
	AkAudioEvent* FoodSound;//[Offset: 0x2b0, Size: 0x8]// 0x75bcae5f00
	AkAudioEvent* MonsterFleshSound;//[Offset: 0x2b8, Size: 0x8]// 0x75bcae5f80
	AkAudioEvent* IceEngravingSound;//[Offset: 0x2c0, Size: 0x8]// 0x75bcae6000
	AkAudioEvent* NewYearSculptureSound;//[Offset: 0x2c8, Size: 0x8]// 0x75bcae6080
	AkAudioEvent* AirVehicleSteelSound;//[Offset: 0x2d0, Size: 0x8]// 0x75bcae6100
	AkAudioEvent* LinoleumSound;//[Offset: 0x2d8, Size: 0x8]// 0x75bcae6180
	AkAudioEvent* ThatchSound;//[Offset: 0x2e0, Size: 0x8]// 0x75bcae6200
	AkAudioEvent* CocoSound;//[Offset: 0x2e8, Size: 0x8]// 0x75bcae6280
	FString SwitchGroup;//[Offset: 0x2f0, Size: 0x10]// 0x75bdd5c500
	FString SwitchState;//[Offset: 0x300, Size: 0x10]// 0x75bdd5c570
	FString SwitchState;//[Offset: 0x310, Size: 0x10]// 0x75bdd5c5e0
	DecalData DefaultDecal;//[Offset: 0x320, Size: 0x20]// 0x75bcae6300
	DecalData ConcreteDecal;//[Offset: 0x340, Size: 0x20]// 0x75bcae6380
	DecalData DirtDecal;//[Offset: 0x360, Size: 0x20]// 0x75bcae6400
	DecalData WaterDecal;//[Offset: 0x380, Size: 0x20]// 0x75bcae6480
	DecalData MetalDecal;//[Offset: 0x3a0, Size: 0x20]// 0x75bcae6500
	DecalData WoodDecal;//[Offset: 0x3c0, Size: 0x20]// 0x75bcae6580
	DecalData GrassDecal;//[Offset: 0x3e0, Size: 0x20]// 0x75bcae6600
	DecalData GlassDecal;//[Offset: 0x400, Size: 0x20]// 0x75bcae6680
	DecalData FleshDecal;//[Offset: 0x420, Size: 0x20]// 0x75bcae6700
	DecalData FleshDecalAutomonous;//[Offset: 0x440, Size: 0x20]// 0x75bcae6780
	DecalData SteelDecal;//[Offset: 0x460, Size: 0x20]// 0x75bcae6800
	DecalData SandbagDecal;//[Offset: 0x480, Size: 0x20]// 0x75bcae6880
	DecalData SandDecal;//[Offset: 0x4a0, Size: 0x20]// 0x75bcae6900
	DecalData ClothDecal;//[Offset: 0x4c0, Size: 0x20]// 0x75bcae6980
	DecalData PlasticDecal;//[Offset: 0x4e0, Size: 0x20]// 0x75bcae6a00
	DecalData LeatherDecal;//[Offset: 0x500, Size: 0x20]// 0x75bcae6a80
	DecalData CeramicsDecal;//[Offset: 0x520, Size: 0x20]// 0x75bcae6b00
	DecalData PaperDecal;//[Offset: 0x540, Size: 0x20]// 0x75bcae6b80
	DecalData StoneDecal;//[Offset: 0x560, Size: 0x20]// 0x75bcae6c00
	DecalData SnowDecal;//[Offset: 0x580, Size: 0x20]// 0x75bcae6c80
	DecalData PopCanDecal;//[Offset: 0x5a0, Size: 0x20]// 0x75bcae6d00
	DecalData PyreflyDecal;//[Offset: 0x5c0, Size: 0x20]// 0x75bcae6d80
	DecalData LeafDecal;//[Offset: 0x5e0, Size: 0x20]// 0x75bcae6e00
	DecalData CarDecal;//[Offset: 0x600, Size: 0x20]// 0x75bcae6e80
	DecalData AsphaltDecal;//[Offset: 0x620, Size: 0x20]// 0x75bcae6f00
	DecalData IceDecal;//[Offset: 0x640, Size: 0x20]// 0x75bcae6f80
	DecalData FoodDecal;//[Offset: 0x660, Size: 0x20]// 0x75bcae7000
	DecalData IceEngravingDecal;//[Offset: 0x680, Size: 0x20]// 0x75bcae7080

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMapNew;//[Offset: 0x0, Size: 0x50]// 0x7612197d30

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 0x4]// 0x7611e12320
	int rangeEnd;//[Offset: 0x4, Size: 0x4]// 0x7611e122b0
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 0x4]// 0x7611e12240

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 0x30]// 0x76121bf860
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 0x30]// 0x76121bf5c0
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x60, Size: 0x10]// 0x76121bf540

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 0x10]// 0x76121bf7e0
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x10, Size: 0x10]// 0x76121bf760
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x20, Size: 0x10]// 0x76121bf6e0

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611e152d0
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x8, Size: 0x8]// 0x7611e15250

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 0xc]// 0x7611e025e0
	Vector ShootDir;//[Offset: 0xc, Size: 0xc]// 0x7611e02560

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x138, Size: 0x10]// 0x75b4dfe800
	WeaponCrossHairPerformData[] WeaknessCrossHairData;//[Offset: 0x148, Size: 0x10]// 0x75b4dfe900
	bool NeedWeakness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75b4dfe980
	float WeaknessTime;//[Offset: 0x15c, Size: 0x4]// 0x75b4e0fe20
	float WeaknessRateTime;//[Offset: 0x160, Size: 0x4]// 0x75b4e0fe90
	bool IsWeakness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]// 0x75b4dfea00
	float PistolCenterDownDis;//[Offset: 0x168, Size: 0x4]// 0x75b4e0ff00
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]// 0x75b4dfea80
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x170, Size: 0x4]// 0x75b4e0ff70
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]// 0x75b4dfeb00
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x178, Size: 0x4]// 0x75b4e0ffe0
	float RotateAngle;//[Offset: 0x17c, Size: 0x4]// 0x75b4e10050
	STExtraPlayerController* PlayerController;//[Offset: 0x180, Size: 0x8]// 0x75b4dfeb80
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x188, Size: 0x8]// 0x75b4dfec00
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x190, Size: 0x8]// 0x75b4dfec80
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x198, Size: 0x8]// 0x75b4dfed00
	Texture2D* CrossHairTextureNormal;//[Offset: 0x1a0, Size: 0x8]// 0x75b4dfed80
	Texture2D* CrossHairEmptyHand;//[Offset: 0x1a8, Size: 0x8]// 0x75b4dfee00
	Texture2D* CrossHairPistolEdge;//[Offset: 0x1b0, Size: 0x8]// 0x75b4dfee80
	Texture2D* CrossHairPistolCenter;//[Offset: 0x1b8, Size: 0x8]// 0x75b4dfef00
	Texture2D* CrossHairShotGun;//[Offset: 0x1c0, Size: 0x8]// 0x75b4dfef80
	void UpdateComponentTick();// 0x428d7d4
	void StartWeaknessCrossHair();// 0x428d7b8
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x428d6f8
	void DrawSpreadEnd();// 0x428d6e4
	void DrawDebugPointEnd();// 0x428d6d0
	bool CanWeaknessCross();// 0x428d698

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 0x10]// 0x7612174820
	enum SpreadType;//[Offset: 0x10, Size: 0x1]// 0x7612174720

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 0x18]// 0x7612174e50
	float Offset;//[Offset: 0x18, Size: 0x4]// 0x7612174de0
	Vector2D IconOffset;//[Offset: 0x1c, Size: 0x8]// 0x7612174d60
	bool bIconOffsetNotUseUIScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x7612174ce0
	float Alpha;//[Offset: 0x28, Size: 0x4]// 0x7612174c70
	float Scale;//[Offset: 0x2c, Size: 0x4]// 0x7612174c00
	float IconRotate;//[Offset: 0x30, Size: 0x4]// 0x7612174b90
	float LogicRotate;//[Offset: 0x34, Size: 0x4]// 0x7612174b20
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x7612174aa0
	float SpreadScale;//[Offset: 0x3c, Size: 0x4]// 0x7612174a30
	float BlendInOutRatePerSec;//[Offset: 0x40, Size: 0x4]// 0x76121749c0

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]// 0x7612175130
	float U;//[Offset: 0x8, Size: 0x4]// 0x76121750c0
	float V;//[Offset: 0xc, Size: 0x4]// 0x7612175050
	float UL;//[Offset: 0x10, Size: 0x4]// 0x7612174fe0
	float VL;//[Offset: 0x14, Size: 0x4]// 0x7612174f70

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x28, Size: 0x4]// 0x75b4db3000
	Vector2D Position;//[Offset: 0x2c, Size: 0x8]// 0x75b4da2080
	Vector2D Size;//[Offset: 0x34, Size: 0x8]// 0x75b4da2100
	Vector2D Origin;//[Offset: 0x3c, Size: 0x8]// 0x75b4da2200
	Vector2D ScreenPosition;//[Offset: 0x44, Size: 0x8]// 0x75b4da2280
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]// 0x75b4da2300
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]// 0x75b4da2380
	float Opacity;//[Offset: 0x50, Size: 0x4]// 0x75b4db3070
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]// 0x75b4da2400
	SurviveHUD* HUDOwner;//[Offset: 0x58, Size: 0x8]// 0x75b4da2480
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x60, Size: 0x8]// 0x75b4da2500
	Pawn* CharacterOwner;//[Offset: 0x68, Size: 0x8]// 0x75b4da2580
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1]// 0x75b4da2600
	float LastRenderTime;//[Offset: 0x74, Size: 0x4]// 0x75b4db30e0
	Vector2D RenderPosition;//[Offset: 0x78, Size: 0x8]// 0x75b4da2680
	Vector2D RenderSize;//[Offset: 0x80, Size: 0x8]// 0x75b4da2700
	float RenderScale;//[Offset: 0x88, Size: 0x4]// 0x75b4db3150
	Vector2D CanvasCenter;//[Offset: 0x8c, Size: 0x8]// 0x75b4da2780
	Canvas* Canvas;//[Offset: 0x98, Size: 0x8]// 0x75b4da2800
	float AspectScale;//[Offset: 0xa0, Size: 0x4]// 0x75b4db31c0
	Vector2D CanvasClip;//[Offset: 0xa4, Size: 0x8]// 0x75b4da2880
	StructProperty*[] RenderObjectList;//[Offset: 0xb0, Size: 0x10]// 0x75b4da2980
	bool ShouldDraw(bool bShowScores);// 0x43b8648
	void SetHidden(bool bIsHidden);// 0x43b85bc
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x43b83dc
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x43b82ac
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x43b805c
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x43b7e48
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x43b7a74
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x43b757c
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x43b71ec
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x43b7130
	void Draw(float DeltaTime);// 0x43b70ac
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x43b7014

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 0x1]// 0x75a85b7800
	Vector MarkerPosition;//[Offset: 0x5fc, Size: 0xc]// 0x75a85b7880
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]// 0x75a85b7900
	int HideCrosshairByStyleNum;//[Offset: 0x60c, Size: 0x4]// 0x75a85d4cb0
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]// 0x75a85b7980
	HitPerformData HitPerform;//[Offset: 0x618, Size: 0x88]// 0x75a85b7a00
	Texture2D* HUDMainTexture;//[Offset: 0x6a0, Size: 0x8]// 0x75a85b7a80
	Texture2D* CrossHairDisableTexture;//[Offset: 0x6a8, Size: 0x8]// 0x75a85b7b00
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x6b0, Size: 0x8]// 0x75a85b7b80
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x6b8, Size: 0x10]// 0x75a85b7c80
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x6c8, Size: 0x10]// 0x75a85b7d80
	Texture2D* HUDWorldMapTexture;//[Offset: 0x6d8, Size: 0x8]// 0x75a85b7e00
	Actor*[] HousesForRCRVisual;//[Offset: 0x6f0, Size: 0x10]// 0x75a85b7f00
	CanvasIcon WORLDMAP;//[Offset: 0x738, Size: 0x18]// 0x75a85b7f80
	bool IsDrawSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]// 0x75a85b8000
	float DateDrawOffsetX;//[Offset: 0x774, Size: 0x4]// 0x75a85d4d20
	void UpdateDamageNumberPar();// 0x4701a3c
	void SubStyleCrosshairHide();// 0x4701a1c
	void SetDrawCrosshair(bool InDrawCrossHair);// 0x470199c
	void OnAsyncLoadingFinished();// 0x4701988
	float GetUIScale();// 0x470194c
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x47018b4
	LinearColor GetColorByTeamID(int TeamID);// 0x470181c
	void EnableCrosshair(bool bEnable);// 0x470179c
	void AddStyleCrosshairHide();// 0x470177c
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, bool bIsDeadlyShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x4701584

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 0x10]// 0x76122077b0
	float DefaultSpread;//[Offset: 0x10, Size: 0x4]// 0x7612207740
	float SpreadMax;//[Offset: 0x14, Size: 0x4]// 0x76122076d0
	float AddSpreadScale;//[Offset: 0x18, Size: 0x4]// 0x7612207660
	float SpreadDecreaseSpeed;//[Offset: 0x1c, Size: 0x4]// 0x76122075f0
	float DefaultOffset;//[Offset: 0x20, Size: 0x4]// 0x7612207580
	float DefaultAlpha;//[Offset: 0x24, Size: 0x4]// 0x7612207510
	float AlphaDecreaseSpeed;//[Offset: 0x28, Size: 0x4]// 0x76122074a0
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]// 0x7612207420
	LinearColor HitBodyDrawColor;//[Offset: 0x30, Size: 0x10]// 0x76122073a0
	LinearColor HitHeadDrawColor;//[Offset: 0x40, Size: 0x10]// 0x7612207320
	LinearColor HitToDeathDrawColor;//[Offset: 0x50, Size: 0x10]// 0x76122072a0
	AkAudioEvent* HeadShotSound;//[Offset: 0x60, Size: 0x8]// 0x7612207220
	AkAudioEvent* BodyShotSound;//[Offset: 0x68, Size: 0x8]// 0x76122071a0
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x70, Size: 0x8]// 0x7612207120
	float CurCrosshairSpread;//[Offset: 0x78, Size: 0x4]// 0x76122070b0

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 0x8]// 0x75d0a92400
	float U;//[Offset: 0x8, Size: 0x4]// 0x75d100d230
	float V;//[Offset: 0xc, Size: 0x4]// 0x75d100d2a0
	float UL;//[Offset: 0x10, Size: 0x4]// 0x75d100d310
	float VL;//[Offset: 0x14, Size: 0x4]// 0x75d100d380

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x38, Size: 0x8]// 0x761219a700
	TextureUVs UVs;//[Offset: 0x40, Size: 0x10]// 0x761219a420
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x761219a3a0
	LinearColor[] TeamColorOverrides;//[Offset: 0x58, Size: 0x10]// 0x761219a2a0
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]// 0x761219a220
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]// 0x761219a1a0
	Vector2D RenderOffset;//[Offset: 0x6c, Size: 0x8]// 0x761219a120
	float Rotation;//[Offset: 0x74, Size: 0x4]// 0x761219a0b0
	Vector2D RotPivot;//[Offset: 0x78, Size: 0x8]// 0x761219a030

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7612199990
	float RenderPriority;//[Offset: 0xc, Size: 0x4]// 0x7612199920
	Vector2D Position;//[Offset: 0x10, Size: 0x8]// 0x76121998a0
	Vector2D Size;//[Offset: 0x18, Size: 0x8]// 0x7612199820
	LinearColor RenderColor;//[Offset: 0x20, Size: 0x10]// 0x76121997a0
	float RenderOpacity;//[Offset: 0x30, Size: 0x4]// 0x7612199730

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 0x4]// 0x761219a690
	float V;//[Offset: 0x4, Size: 0x4]// 0x761219a620
	float UL;//[Offset: 0x8, Size: 0x4]// 0x761219a5b0
	float VL;//[Offset: 0xc, Size: 0x4]// 0x761219a540

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x48, Size: 0x18]// 0x7612199f20
	Font* Font;//[Offset: 0x60, Size: 0x8]// 0x7612199ea0
	float TextScale;//[Offset: 0x68, Size: 0x4]// 0x7612199e30
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]// 0x7612199db0
	Vector2D ShadowDirection;//[Offset: 0x70, Size: 0x8]// 0x7612199d30
	LinearColor ShadowColor;//[Offset: 0x78, Size: 0x10]// 0x7612199cb0
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]// 0x7612199c30
	LinearColor OutlineColor;//[Offset: 0x8c, Size: 0x10]// 0x7612199bb0
	byte HorzPosition;//[Offset: 0x9c, Size: 0x1]// 0x7612199b30
	byte VertPosition;//[Offset: 0x9d, Size: 0x1]// 0x7612199ab0

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75d0a8d480
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75d0a8d500
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 0x24]// 0x75d0a8d780

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75d0a8d580
	LinearColor GlowColor;//[Offset: 0x4, Size: 0x10]// 0x75d0a8d600
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 0x8]// 0x75d0a8d680
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 0x8]// 0x75d0a8d700

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x138, Size: 0x4]// 0x75d0af0920
	bool bUnregisterTickOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]// 0x75bdd40180
	bool bCheckFlushOnShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 0x1]// 0x75bdd40200
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x140, Size: 0x8]// 0x75bdd40280
	static void ToggleBulletUpShootSplit(const bool InUseSplit);// 0x423018c
	static void ToggleBulletUploadSplit(const bool InUseSplit);// 0x4230110
	void HandleOnWeaponStopFire();// 0x42300fc
	void HandleOnWeaponStartFire();// 0x42300e8
	void Flush();// 0x42300d4
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x422ff54

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]// 0x7611e1a700
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 0xc]// 0x7611e1a680
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 0xc]// 0x7611e1a600
	int BulletFlyDistance;//[Offset: 0x1c, Size: 0x4]// 0x7611e1a590
	float BulletDown;//[Offset: 0x20, Size: 0x4]// 0x7611e1a520
	int8 CurBullet;//[Offset: 0x24, Size: 0x1]// 0x7611e1a4b0
	int ShootInterval;//[Offset: 0x28, Size: 0x4]// 0x7611e1a440
	int BulletFlyTime;//[Offset: 0x2c, Size: 0x4]// 0x7611e1a3d0
	int BulletShootTime;//[Offset: 0x30, Size: 0x4]// 0x7611e1a360
	int BulletHitTime;//[Offset: 0x34, Size: 0x4]// 0x7611e1a2f0
	byte bulletDamageReduceRatio;//[Offset: 0x38, Size: 0x1]// 0x7611e1a270
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x3c, Size: 0xc]// 0x7611e1a1f0
	BulletID BulletID;//[Offset: 0x48, Size: 0x2]// 0x7611e1a170
	int64 ClientStartTime;//[Offset: 0x50, Size: 0x8]// 0x7611e1a100
	int[] MrpcsFlow;//[Offset: 0x58, Size: 0x10]// 0x7611e1a010
	int AutoAimSpeed;//[Offset: 0x68, Size: 0x4]// 0x7611e19fa0
	int AutoAimSpeedRateMax;//[Offset: 0x6c, Size: 0x4]// 0x7611e19f30
	int AutoAimRangeMax;//[Offset: 0x70, Size: 0x4]// 0x7611e19ec0
	int AutoAimRangeRateMax;//[Offset: 0x74, Size: 0x4]// 0x7611e19e50
	bool bHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x7611e19dd0
	Vector CameraLocation;//[Offset: 0x7c, Size: 0xc]// 0x7611e19d50
	Rotator CameraRotate;//[Offset: 0x88, Size: 0xc]// 0x7611e19cd0
	Vector2D BackTrace;//[Offset: 0xa0, Size: 0x8]// 0x7611e19c50
	uint64 VicitimPawnState;//[Offset: 0xa8, Size: 0x8]// 0x7611e19be0
	int SymbolWord;//[Offset: 0xb0, Size: 0x4]// 0x7611e19b70

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x620, Size: 0x4]// 0x7611e04600
	float DestroyBulletDelayAfterDestroyWeapon;//[Offset: 0x624, Size: 0x4]// 0x7611e04590
	bool bOwnerClientReCalcShootTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]// 0x7611e04510
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x62c, Size: 0x2c]// 0x7611e03d70
	delegate OnHandleShootDamageDelegate;//[Offset: 0x658, Size: 0x10]// 0x7611e03cf0
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]// 0x7611e03c70
	float CurShootLockInterval;//[Offset: 0x66c, Size: 0x4]// 0x7611e03c00
	void UpdateShootLockCD(float DeltaTime);// 0x444c794
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0xffffff8a17adf2b0
	bool CheckShootState();// 0x444c754

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	bool bUseBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]// 0x7611e037d0
	float BulletLifeTimeAfterImpact;//[Offset: 0x60c, Size: 0x4]// 0x7611e03760
	Actor*[] BulletCacheList;//[Offset: 0x610, Size: 0x10]// 0x7611e03660
	void RecycleBullet(STExtraShootWeaponBulletBase* Bullet);// 0x4569bb8

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 0x4]// 0x7611e044a0
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 0x4]// 0x7611e04430
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 0x4]// 0x7611e043c0
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 0x4]// 0x7611e04350
	bool bVerifyMuzzleHitBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611e042d0
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611e04250
	float MaxDiffServerClient;//[Offset: 0x14, Size: 0x4]// 0x7611e041e0
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611e04160
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 0x4]// 0x7611e040f0
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 0x4]// 0x7611e04080
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x7611e04000
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]// 0x7611e03f80
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]// 0x7611e03f00
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 0x4]// 0x7611e03e90

--------------------------------
Class: WeaponVisualBulletClientModeConfigNew
	WeaponVisualBulletCameraModeConfigNew AutonomousClientSetting;//[Offset: 0x0, Size: 0x48]// 0x7611e09590
	WeaponVisualBulletCameraModeConfigNew OBPawnPerspectiveClientSetting;//[Offset: 0x48, Size: 0x48]// 0x7611e092f0
	WeaponVisualBulletItemConfigNew DefaultSetting;//[Offset: 0x90, Size: 0x18]// 0x7611e09150

--------------------------------
Class: WeaponVisualBulletCameraModeConfigNew
	WeaponVisualBulletItemConfigNew FPPSetting;//[Offset: 0x0, Size: 0x18]// 0x7611e09510
	WeaponVisualBulletItemConfigNew TPPSetting;//[Offset: 0x18, Size: 0x18]// 0x7611e09490
	WeaponVisualBulletItemConfigNew GunADSSetting;//[Offset: 0x30, Size: 0x18]// 0x7611e09410

--------------------------------
Class: WeaponVisualBulletItemConfigNew
	SoftObjectPath BulletTrackEffectPath;//[Offset: 0x0, Size: 0x18]// 0x7611e09270

--------------------------------
Class: ShootingBehaviorPatternBase.Object
	ShootingBehaviorConfig[] ShootingBehaviorSequenceConfigList;//[Offset: 0x28, Size: 0x10]// 0x76120caee0
	CurveFloat* BehaviorIntervalCurveInsideSequence;//[Offset: 0x38, Size: 0x8]// 0x76120cae60
	bool bLoopBehaviorSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x76120cade0
	float SBPColdCD;//[Offset: 0x44, Size: 0x4]// 0x76120cad70
	bool bEnableManualStopFireInSequnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x76120cacf0
	delegate OnShootingBehaviorPatternSwitchEnterDelegate;//[Offset: 0x50, Size: 0x10]// 0x76120cac70
	delegate OnShootingBehaviorPatternSwitchLeaveDelegate;//[Offset: 0x60, Size: 0x10]// 0x76120cabf0
	float BehaviorSequenceTotalTime;//[Offset: 0x70, Size: 0x4]// 0x76120cab80
	int BehaviorSequenceTotalBulletNum;//[Offset: 0x74, Size: 0x4]// 0x76120cab10
	STExtraShootWeapon* OwnerShootingWeapon;//[Offset: 0x78, Size: 0x8]// 0x76120caa90
	bool bHasStartedBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]// 0x76120caa10
	float BehaviorStartedTime;//[Offset: 0x84, Size: 0x4]// 0x76120ca9a0
	float LastShootTime;//[Offset: 0x88, Size: 0x4]// 0x76120ca930
	int CurTotalBulletNumShouldShoot;//[Offset: 0x8c, Size: 0x4]// 0x76120ca8c0
	int CurTotalBulletNumHasShot;//[Offset: 0x90, Size: 0x4]// 0x76120ca850
	void UpdateBehavior();// 0x4527cb8
	void StopBehavior();// 0x4527c9c
	void StartBehavior();// 0x4527c80
	void RestartBehavior();// 0x4527c64
	void ResetData();// 0x4527c48
	void ProcessShoot();// 0x4527c34
	void OnSwitchLeave();// 0x4527c18
	void OnSwitchEnter();// 0x4527bfc
	void OnShootingBehaviorPatternSwitchLeave__DelegateSignature(ShootingBehaviorPatternBase* SBP);// 0xffffff8a17adf2b0
	void OnShootingBehaviorPatternSwitchEnter__DelegateSignature(ShootingBehaviorPatternBase* SBP);// 0xffffff8a17adf2b0
	void Init(STExtraShootWeapon* ShootWeapon);// 0x4527b78
	float GetShootInterval();// 0x4527b3c
	bool CheckInColdCD();// 0x4527b04
	bool CheckCanShoot();// 0x4527acc
	bool CheckCanManualStopShoot();// 0x4527a8c
	bool CheckAutoStopShoot(bool bIsPressingFireBnt);// 0x45279ec

--------------------------------
Class: ShootingBehaviorConfig
	int MaxShootBulletsNum;//[Offset: 0x0, Size: 0x4]// 0x76120cb170
	CurveFloat* LaunchBulletIntervalCurve;//[Offset: 0x8, Size: 0x8]// 0x76120cb0f0
	float TotalTime;//[Offset: 0x10, Size: 0x4]// 0x76120cb080

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x198, Size: 0x50]// 0x75b4d2aa40
	bool EnableShakeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]// 0x75b4d34300
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x1f0, Size: 0x8]// 0x75b4d34380
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x1f8, Size: 0x8]// 0x75b4d34400
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x200, Size: 0x8]// 0x75b4d34480
	float CameraShakeInnerRadius;//[Offset: 0x208, Size: 0x4]// 0x75b4d1dcd0
	float CameraShakeOuterRadius;//[Offset: 0x20c, Size: 0x4]// 0x75b4d1dd40
	float CameraShakFalloff;//[Offset: 0x210, Size: 0x4]// 0x75b4d1ddb0
	ParticleSystem* MuzzleFX;//[Offset: 0x218, Size: 0x8]// 0x75b4d34500
	Vector LocalMuzzelFXScale;//[Offset: 0x220, Size: 0xc]// 0x75b4d34580
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x230, Size: 0x8]// 0x75b4d34600
	Vector ScopeMuzzelFXScale;//[Offset: 0x238, Size: 0xc]// 0x75b4d34680
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x248, Size: 0x8]// 0x75b4d34700
	Vector RemoteMuzzelFXScale;//[Offset: 0x250, Size: 0xc]// 0x75b4d34780
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x25c, Size: 0x10]// 0x75b4d34800
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x270, Size: 0x8]// 0x75b4d34880
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x278, Size: 0xc]// 0x75b4d34900
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x288, Size: 0x8]// 0x75b4d34980
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x290, Size: 0xc]// 0x75b4d34a00
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x2a0, Size: 0x8]// 0x75b4d34a80
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x2a8, Size: 0xc]// 0x75b4d34b00
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x2b4, Size: 0x10]// 0x75b4d34b80
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x2c8, Size: 0x8]// 0x75b4d34c00
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x2d0, Size: 0xc]// 0x75b4d34c80
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x2e0, Size: 0x8]// 0x75b4d34d00
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x2e8, Size: 0xc]// 0x75b4d34d80
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x2f8, Size: 0x8]// 0x75b4d34e00
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x300, Size: 0xc]// 0x75b4d34e80
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x30c, Size: 0x10]// 0x75b4d34f00
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x320, Size: 0x8]// 0x75b4d34f80
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x328, Size: 0xc]// 0x75b4d35000
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x338, Size: 0x8]// 0x75b4d35080
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x340, Size: 0xc]// 0x75b4d35100
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x350, Size: 0x8]// 0x75b4d35180
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x358, Size: 0xc]// 0x75b4d35200
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]// 0x75b4d35280
	ParticleSystem* ShellDropFX;//[Offset: 0x368, Size: 0x8]// 0x75b4d35300
	Vector ShellDropFXScale;//[Offset: 0x370, Size: 0xc]// 0x75b4d35380
	ParticleSystem* FPPShellDropFX;//[Offset: 0x380, Size: 0x8]// 0x75b4d35400
	Vector FPPShellDropFXScale;//[Offset: 0x388, Size: 0xc]// 0x75b4d35480
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x398, Size: 0x8]// 0x75b4d35500
	Vector MaxMuzzleFxScaleThreshold;//[Offset: 0x3a0, Size: 0xc]// 0x75b4d35580
	Vector MaxMuzzleFxScaleCorrection;//[Offset: 0x3ac, Size: 0xc]// 0x75b4d35600
	float MaxMuzzleFxDistanceScaleCorrection;//[Offset: 0x3b8, Size: 0x4]// 0x75b4d1de20
	int MaxOBBulletTrackCompNum;//[Offset: 0x3bc, Size: 0x4]// 0x75b4d1de90
	bool bForceShowMuzzleFx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]// 0x75b4d35680
	bool bDestroyOldParticleInsWhenActiveShellDropFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 0x1]// 0x75b4d35700
	AkAudioEvent* FiringPinSound;//[Offset: 0x3c8, Size: 0x8]// 0x75b4d35780
	FName FiringPinSoundRTPCName;//[Offset: 0x3d0, Size: 0x8]// 0x75b4d1df00
	float FiringPinSoundRTPCValue;//[Offset: 0x3d8, Size: 0x4]// 0x75b4d1df70
	bool bSilencerBuiltIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]// 0x75b4d35800
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x3e0, Size: 0x8]// 0x75b4d35880
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x3e8, Size: 0x8]// 0x75b4d35900
	Vector MuzzleFXOriginalScale;//[Offset: 0x3f0, Size: 0xc]// 0x75b4d35980
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x3fc, Size: 0x4]// 0x75b4d1dfe0
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x400, Size: 0x8]// 0x75b4d35a00
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x408, Size: 0x8]// 0x75b4d35a80
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x420, Size: 0x10]// 0x75b4d35b80
	ParticleSystem* TemplateContinuousMuzzleFX;//[Offset: 0x430, Size: 0x8]// 0x75b4d35c00
	ParticleSystemComponent* ContinuousMuzzleFXComp;//[Offset: 0x438, Size: 0x8]// 0x75b4d35c80
	bool bEnableContinuousFXWhileShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]// 0x75b4d35d00
	bool bIsActiveContinuousFXWhileShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]// 0x75b4d35d80
	bool bCachedNeedChangeFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1]// 0x75b4d35e00
	float CachedDistanceScaler;//[Offset: 0x444, Size: 0x4]// 0x75b4d1e050
	Vector CachedFXScale;//[Offset: 0x448, Size: 0xc]// 0x75b4d35e80
	MeshComponent* CachedAttachComponent;//[Offset: 0x458, Size: 0x8]// 0x75b4d35f00
	FName CachedSocketName;//[Offset: 0x460, Size: 0x8]// 0x75b4d1e0c0
	void StopPlayContinuousFXWhileShoot();// 0x452b378
	void StartPlayContinuousFXWhileShoot();// 0x452b364
	void SetContinuousMuzzleFX(ParticleSystem* TempFX);// 0x452b2e8
	void RecycleOBEffectBullet(OBEffectBullet* Bullet);// 0x452b26c
	void OnWeaponUnEquiped();// 0x452b258
	void OnWeaponEuiped();// 0x452b244
	void MarkAKBankLoadAsync(out Package*[] OutPackageList);// 0x452b1b0
	void HandleWeaponAction(byte Action);// 0x452b12c
	OBEffectBullet* GetOBEffectBullet();// 0x452b0f8
	int GetAvailableOBEffectBulletNum();// 0x452b0c4
	void ActiveLocalShellDropFX();// 0x452b0b0

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x138, Size: 0x50]// 0x75b4d2b340
	AkAudioEvent* ShellDropSound;//[Offset: 0x188, Size: 0x8]// 0x75b4d36380
	AkAudioEvent* SilencerShootSound;//[Offset: 0x190, Size: 0x8]// 0x75b4d36400
	void HandleWeaponAction(byte Action);// 0x4809a64

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]// 0x76121d4e90
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]// 0x76121d4e20
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]// 0x76121d4db0
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]// 0x76121d4d40

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x510, Size: 0x4]// 0x75a88771f0
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x518, Size: 0x10]// 0x75a8448480
	ParticleSystem* CurFXTemplate;//[Offset: 0x530, Size: 0x8]// 0x75a8448500
	float CurMovingTime;//[Offset: 0x560, Size: 0x4]// 0x75a8877260
	CurveFloat* SpeedCurve;//[Offset: 0x568, Size: 0x8]// 0x75a8448580
	CurveFloat* SizeScaleCurve;//[Offset: 0x570, Size: 0x8]// 0x75a8448600

--------------------------------
Class: Package.Object

--------------------------------
Class: ShootWeaponAutoTestHandle.Object
	STExtraShootWeapon* OwnerWeapon;//[Offset: 0x38, Size: 0x8]// 0x75a86fd280
	FString GenerateBulletsImpactJsonStringAndClearData();// 0x452ad80

--------------------------------
Class: ShootWeaponAmmoManager.WeaponLogicBaseComponent.ActorComponent.Object
	<int,ShootWeaponAmmoConfigData> AmmoConfigMap;//[Offset: 0x138, Size: 0x50]// 0x76120cc060
	delegate OnChangeAmmoDelegate;//[Offset: 0x188, Size: 0x10]// 0x76120cbfe0
	delegate OnGetClientShootBulletAmmoTypeDelegate;//[Offset: 0x198, Size: 0x10]// 0x76120cbf60
	int CurrentUsingAmmoID;//[Offset: 0x1a8, Size: 0x4]// 0x76120cbef0
	void OnRep_CurrentUsingAmmoID(int OldAmmoID);// 0x452a808
	void OnGetClientShootBulletAmmoTypeDelegate__DelegateSignature(int AmmoType, int ShootID);// 0xffffff8a17adf2b0
	void OnChangeAmmoDelegate__DelegateSignature(ItemDefineID AmmoDefineID);// 0xffffff8a17adf2b0
	void LocalChangeCurrentUsingAmmo(int OldAmmoID, int AmmoID);// 0x452a74c
	void GetHitPartCoffOverride(bool bTargetIsMonster, int DefaultAmmoID, out WeaponHitPartCoff OutData);// 0x452a61c
	int GetCurrentUsingAmmoID();// 0x452a600
	void GetBreakThroughDampRateConfigOverride(int DefaultAmmoID, out <byte,float> OutData);// 0x452a4b4
	void ChangeCurrentUsingAmmoOnServer(int AmmoID);// 0x452a438

--------------------------------
Class: ShootWeaponAmmoConfigData
	AttrModifyItem[] ModifyItemList;//[Offset: 0x0, Size: 0x10]// 0x76120cc540
	WeaponHitPartCoff HitPartCoff;//[Offset: 0x10, Size: 0x14]// 0x76120cc4c0
	WeaponHitPartCoff MonsterHitPartCoff;//[Offset: 0x24, Size: 0x14]// 0x76120cc440
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x38, Size: 0x50]// 0x76120cc2a0

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 0x10]// 0x7611d5b9d0
	int AttrModifyUniqueID;//[Offset: 0x10, Size: 0x4]// 0x7611d5b960
	FString AttrModifyItemName;//[Offset: 0x18, Size: 0x10]// 0x7611d5b8f0
	FString AttrName;//[Offset: 0x28, Size: 0x10]// 0x7611d5b880
	enum ModifierOp;//[Offset: 0x38, Size: 0x1]// 0x7611d5b720
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]// 0x7611d5b6a0
	float ModifierValue;//[Offset: 0x3c, Size: 0x4]// 0x7611d5b630
	SoftObjectPath ModifierResValue;//[Offset: 0x40, Size: 0x18]// 0x7611d5b5b0
	AttrModifyItemResourceClientData ModifierResValueClientModeOverride;//[Offset: 0x58, Size: 0x30]// 0x7611d5b1c0
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]// 0x7611d5b140
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]// 0x7611d5b0c0

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 0x8]// 0x7611d5bce0
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611d5bc60
	float FinalAddValue;//[Offset: 0xc, Size: 0x4]// 0x7611d5bbf0
	SoftObjectPath ResValue;//[Offset: 0x10, Size: 0x18]// 0x7611d5bb70

--------------------------------
Class: AttrModifyItemResourceClientData
	bool bUseClientOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611d5b530
	enum ClientShowMode;//[Offset: 0x1, Size: 0x1]// 0x7611d5b3d0
	FString OwnerPlayerKey;//[Offset: 0x8, Size: 0x10]// 0x7611d5b360
	SoftObjectPath ModifierResourcePath;//[Offset: 0x18, Size: 0x18]// 0x7611d5b2e0

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	float ShootRateCheckInterval;//[Offset: 0x15c, Size: 0x4]// 0x75b4db14e0
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]// 0x75b4d9f800
	float ShootRateCheckMulCoff;//[Offset: 0x164, Size: 0x4]// 0x75b4db1550
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]// 0x75b4d9f880
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x16c, Size: 0x4]// 0x75b4db15c0
	float MaxParachuteHeightDist;//[Offset: 0x170, Size: 0x4]// 0x75b4db1630
	float MaxParachutePlaneDist;//[Offset: 0x174, Size: 0x4]// 0x75b4db16a0
	float DeCon6SpanTime;//[Offset: 0x1c8, Size: 0x4]// 0x75b4db1710
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x1d4, Size: 0x4]// 0x75b4db1780
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x1d8, Size: 0x4]// 0x75b4db17f0
	float ShootTimeGunPosBigCircle;//[Offset: 0x1dc, Size: 0x4]// 0x75b4db1860
	float ShootTimeGunPosZThres;//[Offset: 0x1e0, Size: 0x4]// 0x75b4db18d0
	float ShootTimeGunPosMaxForwadDifNew;//[Offset: 0x1e4, Size: 0x4]// 0x75b4db1940
	float ShootTimeGunPosForwardAdditionalVehicle;//[Offset: 0x1e8, Size: 0x4]// 0x75b4db19b0
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x1ec, Size: 0x4]// 0x75b4db1a20
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x1f0, Size: 0x4]// 0x75b4db1a90
	int MaxClientCapsuleHalfHeight;//[Offset: 0x1f4, Size: 0x4]// 0x75b4db1b00
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]// 0x75b4d9f900
	float TimeLineCheckDnBorders;//[Offset: 0x1fc, Size: 0x4]// 0x75b4db1b70
	float TimeLineCheckUpBorder;//[Offset: 0x200, Size: 0x4]// 0x75b4db1be0
	float ShootTimeConnectionDeltaThres;//[Offset: 0x204, Size: 0x4]// 0x75b4db1c50
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]// 0x75b4d9f980
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x20c, Size: 0x4]// 0x75b4db1cc0
	float MuzzleDiffTorelate;//[Offset: 0x210, Size: 0x4]// 0x75b4db1d30
	float ShortDirReverseDistance;//[Offset: 0x214, Size: 0x4]// 0x75b4db1da0
	float TolerateBulletDirOffsetSquared;//[Offset: 0x218, Size: 0x4]// 0x75b4db1e10
	float MaxFootRoot;//[Offset: 0x21c, Size: 0x4]// 0x75b4db1e80

--------------------------------
Class: BulletHitInfoRepData
	bool bHasDetailInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611e21980
	Vector_NetQuantize100 ImpactPoint;//[Offset: 0x4, Size: 0xc]// 0x7611e21900
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x10, Size: 0xc]// 0x7611e21880
	Vector_NetQuantize100 ShootMomentMuzzlePos;//[Offset: 0x1c, Size: 0xc]// 0x7611e21800
	int8 SurfaceType;//[Offset: 0x28, Size: 0x1]// 0x7611e21790
	int ClientTimeStamp;//[Offset: 0x3c, Size: 0x4]// 0x7611e21720
	byte HitBodyType;//[Offset: 0x40, Size: 0x1]// 0x7611e216a0
	byte bIsUnderWater;//[Offset: 0x41, Size: 0x1]// 0x7611e21620
	bool bNetSerializeOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]// 0x7611e215a0

--------------------------------
Class: CacheCriticalVerifyShootParam
	int ClientFrame;//[Offset: 0x0, Size: 0x4]// 0x7611e1bd60
	int DeviationRandomSeed;//[Offset: 0x4, Size: 0x4]// 0x7611e1bcf0
	float ShootDeviation;//[Offset: 0x8, Size: 0x4]// 0x7611e1bc80
	Vector ShootTracePoint;//[Offset: 0xc, Size: 0xc]// 0x7611e1bc00
	Vector CameraLoc;//[Offset: 0x18, Size: 0xc]// 0x7611e1bb80
	float CameraPitch;//[Offset: 0x24, Size: 0x4]// 0x7611e1bb10
	float CameraYaw;//[Offset: 0x28, Size: 0x4]// 0x7611e1baa0
	bool bGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7611e1ba20
	Vector ShooterLoc;//[Offset: 0x30, Size: 0xc]// 0x7611e1b9a0
	Vector WeaponLoc;//[Offset: 0x3c, Size: 0xc]// 0x7611e1b920
	Rotator shootRot;//[Offset: 0x48, Size: 0xc]// 0x7611e1b8a0
	float CacheWorldTimeSec;//[Offset: 0x54, Size: 0x4]// 0x7611e1b830
	FString ExtraInfo;//[Offset: 0x58, Size: 0x10]// 0x7611e1b7c0

--------------------------------
Class: CacheCriticalVerifyBulletHitUploadParam
	int ClientFrame;//[Offset: 0x0, Size: 0x4]// 0x7611e08800
	int DeviationRandomSeed;//[Offset: 0x4, Size: 0x4]// 0x7611e08790
	float ShootDeviation;//[Offset: 0x8, Size: 0x4]// 0x7611e08720
	Vector ShootTracePoint;//[Offset: 0xc, Size: 0xc]// 0x7611e086a0
	FString ExtraInfo;//[Offset: 0x18, Size: 0x10]// 0x7611e08630

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xb4, Size: 0x1]// 0x7611e1ad10
	uint32 ShootID;//[Offset: 0xb8, Size: 0x4]// 0x7611e1aca0
	float DamageImpulse;//[Offset: 0xe8, Size: 0x4]// 0x7611e1ac30

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemID;//[Offset: 0xb0, Size: 0x4]// 0x7611e1ab20

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x14, Size: 0x4]// 0x7611e1aa10
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x18, Size: 0xc]// 0x7611e1a990
	HitResult HitInfo;//[Offset: 0x28, Size: 0x88]// 0x7611e1a910

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 0x8]// 0x7611df53c0
	FName LogicSocket;//[Offset: 0x8, Size: 0x8]// 0x7611df5350
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611df52d0
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611df5250
	bool bNeedSwitchAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]// 0x7611df51d0
	ItemDefineID ID;//[Offset: 0x18, Size: 0x18]// 0x7611df5150
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611df50d0
	int ClientResetBulletNum;//[Offset: 0x34, Size: 0x4]// 0x7611df5060
	int OperationIndex;//[Offset: 0x38, Size: 0x4]// 0x7611df4ff0
	Character* OwnerCharacter;//[Offset: 0x40, Size: 0x8]// 0x7611df4f70
	FString OwnerCharacterName;//[Offset: 0x48, Size: 0x10]// 0x7611df4f00
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]// 0x7611df4e80
	uint32 OwnerNetGUID;//[Offset: 0x5c, Size: 0x4]// 0x7611df4e10
	FName SpesificLogicGrenadeSlot;//[Offset: 0x60, Size: 0x8]// 0x7611df4da0
	Actor* CustomEquipAttachActor;//[Offset: 0x68, Size: 0x8]// 0x7611df4d20

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	ItemSkillsConfig[] SkillConfigList;//[Offset: 0x138, Size: 0x10]// 0x75a8477980
	void ProcessTriggerEventInternal(enum Event);// 0x482a020
	static int[] GetWeaponSkillIDList(STExtraWeapon* Weapon);// 0x4829f60
	int[] GetSelfWeaponSkillIDList(STExtraWeapon* Weapon);// 0x4829e90

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x48293a0
	void ProcessTriggerEvent(enum Event);// 0x482931c

--------------------------------
Class: WeaponAttachmentEquipNotifyData
	STExtraWeapon* Weapon;//[Offset: 0x0, Size: 0x8]// 0x7611df46c0
	byte WeaponSlot;//[Offset: 0x8, Size: 0x1]// 0x7611df4640
	ItemDefineID ItemID;//[Offset: 0x10, Size: 0x18]// 0x7611df45c0
	bool bIsEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7611df4540

--------------------------------
Class: WeaponFunctionModuleBase.Object
	bool bServerAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75a84c4080
	bool bClientAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x75a84c4100
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]// 0x75a84c4180
	STExtraWeapon* OwnerWeapon;//[Offset: 0x30, Size: 0x8]// 0x75a84c4200
	Actor* OwnerActor;//[Offset: 0x38, Size: 0x8]// 0x75a84c4280
	STExtraCharacter* OwnerPlayer;//[Offset: 0x40, Size: 0x8]// 0x75a84c4300
	void Tick(float DeltaTime);// 0x480b2e4
	void InitWeaponOwner(STExtraWeapon* InOwnerWeapon, Actor* InOwnerActor);// 0x480b228
	void Init(STExtraWeapon* InOwnerWeapon);// 0x480b1a4
	void EndPlay();// 0x480b188

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x138, Size: 0x8]// 0x75a86f8480
	WeaponStateDefault* DefaultState;//[Offset: 0x140, Size: 0x8]// 0x75a86f8500
	<enum,WeaponStateBase*> StateMap;//[Offset: 0x148, Size: 0x50]// 0x75a87567c0
	WeaponStateBase* GetCurrentState();// 0x4828ec0
	enum GetCurrentFreshWeaponStateType();// 0x4828e8c

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	enum FreshWeaponStateType;//[Offset: 0x138, Size: 0x1]// 0x75d0b17000
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]// 0x75d0b17080
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]// 0x75d0b17100
	enum[] ConditionGateMap;//[Offset: 0x140, Size: 0x10]// 0x75d0b17280
	enum SpesificTargetState;//[Offset: 0x150, Size: 0x1]// 0x75d0b17380
	bool bSyncSpesificStateToServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]// 0x75d0b17400
	delegate OnBeginState;//[Offset: 0x158, Size: 0x10]// 0x75d0b17480
	delegate OnEndState;//[Offset: 0x168, Size: 0x10]// 0x75d0b17500
	bool TryChangeToSpesificTargetState();// 0x48287c8
	void BPTick(float DeltaTime);// 0xffffff8a17adf2b0
	void BPEndState();// 0xffffff8a17adf2b0
	void BPBeginState(enum LastStateType);// 0xffffff8a17adf2b0

--------------------------------
Class: WeaponStateDefault.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	enum[] SupportedWeaponStateList;//[Offset: 0x178, Size: 0x10]// 0x75a8478300

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	delegate OnAttrModified;//[Offset: 0x158, Size: 0x10]// 0x7611d61010
	bool bIsResBunchModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]// 0x7611d60f90
	DataTable* AttrDataTable;//[Offset: 0x170, Size: 0x8]// 0x7611d60f10
	int AttrGroup;//[Offset: 0x178, Size: 0x4]// 0x7611d60ea0
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x180, Size: 0x10]// 0x7611d60da0
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0x190, Size: 0x10]// 0x7611d60b00
	byte[] AttrModifyStateList;//[Offset: 0x1a0, Size: 0x10]// 0x7611d60a00
	uint32 AttrModifyStateBitList;//[Offset: 0x1b0, Size: 0x4]// 0x7611d60920
	byte[] AttrModifyGroupStateList;//[Offset: 0x1b8, Size: 0x10]// 0x7611d60820
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x1c8, Size: 0x10]// 0x7611d60720
	AttrModifyItem[] DynamicModifierList;//[Offset: 0x1d8, Size: 0x10]// 0x7611d60620
	AttrModifyItem[] DynamicModifierClientList;//[Offset: 0x1e8, Size: 0x10]// 0x7611d60520
	AttrModifyItem_ID[] DynamicModifierRepList_WithID;//[Offset: 0x1f8, Size: 0x10]// 0x7611d60070
	<FName,AttrRegisterItem> AttrRegisterItemMap;//[Offset: 0x228, Size: 0x50]// 0x7611d5fed0
	bool UpdateRegisteredModifyAbleAttr(out const AttrRegisterItem AttrRegistItem);// 0x4901e94
	void UpdateModifyAbleAttrMaxValue(FString Name, float Value);// 0x4901dd0
	bool UpdateCurClientModifierResValue(out AttrModifyItem ConfigAttrModifier);// 0x4901ce0
	bool UnregisterModifyAbleAttr(out const FString[] AttrRegists);// 0x4901c10
	void UnRegisterAllModifyAbleAttr();// 0x4901bfc
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x4901b38
	void SetAttributeGroup(int InGroup, bool InRegister);// 0x4901a78
	bool ReplaceModifyAbleAttr(AttrRegisterItem AttrRegist);// 0x4901904
	void RemoveDynamicModifier(FString AttrModifyId, int IntAttrModifyID);// 0x4901840
	void RemoveAllDynamicClientSimulateModifier();// 0x490182c
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x49016c4
	bool RegisterBPModifyAbleAttr(Object* InOwner, FString RegistName, FName ValueName, enum ValueType, bool InHasReplicatedTag, float InMaxValue, float InMinValue);// 0x4901468
	bool RegisterAttributesFromTable(int InGroup);// 0x49013d8
	void OnRep_DynamicModifierList_IDs();// 0x49013c4
	void OnRep_DynamicModifierList();// 0x49013a8
	void OnRep_AttrModifyStateList(out const byte[] PrevStateList);// 0x490130c
	void OnRep_AttrModifyStateBitList();// 0x49012f0
	void OnRep_AttrModifyGroupStateList();// 0x49012d4
	void OnBatchResLoaded__DelegateSignature(int ReqID, FString AttrName);// 0xffffff8a17adf2b0
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0xffffff8a17adf2b0
	bool HasDynamicModifier(FString AttrModifyId);// 0x490123c
	AttrModifyItem[] GetDynamicModifierRepList();// 0x4901174
	bool GetAttrModifyItemByItemName(FString AttrModifyItemName, out AttrModifyItem OutItem);// 0x4901040
	float GetAttributeValueMax(FString AttrName);// 0x4900fac
	float GetAttributeValue(FString AttrName);// 0x4900f18
	void EnableAttrModifiers(out const FString[] AttrModifyItemNames, bool bForceNetUpdate, FString ModifierSuffix);// 0x4900dc0
	bool EnableAttrModifier(FString AttrModifyItemName, bool bForceNetUpdate);// 0x4900ce0
	bool EnableAllAttrModifier();// 0x4900ca8
	bool DisableModifierToActor(Actor* TargetActor);// 0x4900c18
	void DisableAttrModifiers(out const FString[] AttrModifyItemNames, bool bForceNetUpdate, FString ModifierSuffix);// 0x4900ac0
	bool DisableAttrModifier(FString AttrModifyItemName, bool bForceNetUpdate);// 0x49009e0
	void DisableAllClientSimulateAttrModifier();// 0x49009cc
	bool DisableAllAttrModifier(bool bRecycled);// 0x4900934
	void AddValueToAttribute(FString AttrName, float Value);// 0x4900870
	void AddDynamicModifier(AttrModifyItem AttrModifyItem);// 0x490078c
	void AddConfigAttrModifyItem(out const AttrModifyItem NewItem);// 0x49006b8

--------------------------------
Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0, Size: 0x10]// 0x7611d60ca0

--------------------------------
Class: AttrModifyItem_ID
	int ModifyItemID;//[Offset: 0x0, Size: 0x4]// 0x7611d604b0
	AttrModifyItem_ID_CacheAffactTargetInfo[] AttrModifyItem_ID_CacheAffactTargetInfo;//[Offset: 0x8, Size: 0x10]// 0x7611d60210

--------------------------------
Class: AttrModifyItem_ID_CacheAffactTargetInfo
	CacheAffactTargetInfo[] AffactTargetInfo;//[Offset: 0x0, Size: 0x10]// 0x7611d603b0

--------------------------------
Class: AttrRegisterItem
	FName AttrName;//[Offset: 0x0, Size: 0x8]// 0x7611d5eee0
	enum AttrVariableType;//[Offset: 0x8, Size: 0x1]// 0x7611d5ede0
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x7611d5ed60
	Object* OriginalRes;//[Offset: 0x10, Size: 0x8]// 0x7611d5ece0
	Object* Owner;//[Offset: 0x18, Size: 0x8]// 0x7611d5ec60

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 0x10]// 0x7611d5db20
	Actor* AffectedActor;//[Offset: 0x10, Size: 0x8]// 0x7611d5daa0

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0, Size: 0x10]// 0x7611dec530
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x10, Size: 0x10]// 0x7611dec1b0

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]// 0x7611dec4c0
	enum Op;//[Offset: 0x10, Size: 0x1]// 0x7611dec3c0
	float ModifyValue;//[Offset: 0x14, Size: 0x4]// 0x7611dec350

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x128, Size: 0x2a8]// 0x7611d7ddc0
	class AnimInstance* animBP;//[Offset: 0x3d0, Size: 0x8]// 0x7611d7dd40
	class AnimInstance* animBPClass;//[Offset: 0x3d8, Size: 0x28]// 0x7611d7dcc0
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x400, Size: 0x10]// 0x7611d7dbc0
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x410, Size: 0x10]// 0x7611d7d130
	BackpackComponent* BackpackComp;//[Offset: 0x420, Size: 0x8]// 0x7611d7d0b0
	delegate OnEquipOrUnEquipToWeaponDelegate;//[Offset: 0x428, Size: 0x10]// 0x7611d7d030
	FName SightCameraSocket;//[Offset: 0x438, Size: 0x8]// 0x7611d7cfc0
	Transform SightCameraSocketTransform;//[Offset: 0x440, Size: 0x30]// 0x7611d7cf40
	bool bCacheNotifyRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]// 0x7611d7cec0
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x41c97a8
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x41c978c
	void OnEquipOrUnEquipToWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon, bool bIsEquip);// 0xffffff8a17adf2b0
	bool IsVirtualAvatarHandle();// 0x41c974c
	bool IsAvatarOf(int resID);// 0x41c96b4
	void HandleEquipOrUnEquipToWeaponDelegate(STExtraWeapon* Weapon, bool bIsEquip);// 0x41c95ec
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x41c9570
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x41c94ac
	int GetSubSlotID();// 0x41c9470
	FString GetSTMeshPath();// 0x41c93ec
	int GetSlotID();// 0x41c93b0
	FString GetSKMeshPath();// 0x41c932c
	ItemDefineID GetReadyPakItemDefineID();// 0x41c92d8
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x41c9280
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x41c911c
	WeaponAttachmentConfig GetAttachmentConfig();// 0x41c90c4
	SoftObjectPath GetAnimationBPAsset();// 0x41c9068
	class Object GetAnimationBP();// 0x41c902c
	int FindReplacedAttachIndex();// 0x41c8ff8
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x41c8ee8
	void ApplyAttrModifySpecialById(STExtraShootWeapon* InWeapon, out <FString> OutModifyAttrNameSet);// 0x41c8dd0

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 0x1]// 0x7611d7d9f0
	int PendantIndex;//[Offset: 0x4, Size: 0x4]// 0x7611d7d980
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611d7d900
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 0x60]// 0x7611d7d5f0
	bool OverrideLocalJoinOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]// 0x7611d7d570
	Vector LocalJoinOffset;//[Offset: 0x74, Size: 0xc]// 0x7611d7d4f0
	Vector LocalOffset;//[Offset: 0x80, Size: 0xc]// 0x7611d7d470

--------------------------------
Class: WeaponPendantMap
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x7611d7db50
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x8, Size: 0x10]// 0x7611d7d2d0

--------------------------------
Class: WeaponAttachmentSlot
	int TypeSpecificID;//[Offset: 0x0, Size: 0x4]// 0x7611de9090

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.SubAnimInstance_Event.SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	Rotator C_SightAngledRotOffset;//[Offset: 0x16b4, Size: 0xc]// 0x75d0b43900
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c0, Size: 0x1]// 0x75d0b43980
	bool C_IsPickingUpItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c1, Size: 0x1]// 0x75d0b43a00
	Rotator SwimRotate;//[Offset: 0x16c4, Size: 0xc]// 0x75d0b43a80
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d0, Size: 0x1]// 0x75d0b43b00
	float C_HoldingShieldAlpha;//[Offset: 0x16d4, Size: 0x4]// 0x75a8128380
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0x16d8, Size: 0x8]// 0x75d0b43b80
	AnimMontage* C_PickUPMontage;//[Offset: 0x16e0, Size: 0x8]// 0x75d0b43c00
	AnimMontage* C_RevivalMontage;//[Offset: 0x16e8, Size: 0x8]// 0x75d0b43c80
	Rotator OwnerAimRotation;//[Offset: 0x16f0, Size: 0xc]// 0x75d0b43d00
	Rotator LastOwnerAimRotation;//[Offset: 0x16fc, Size: 0xc]// 0x75d0b43d80
	MutexPair[] mutexByList;//[Offset: 0x1708, Size: 0x10]// 0x75d0b43e80
	void SetVelocityZFactor(float NewFactor);// 0x457cca0
	void PostCacheParamList(float DeltaSeconds);// 0xffffff8a17adf2b0
	void DumpAllProperties();// 0x457cc8c
	void DumpAllAnimInstancesInThisWorld();// 0x457cc78
	PlayerAnimList CacheAnimVarList();// 0x457cc28

--------------------------------
Class: STExtraAnimInstanceBase.SubAnimInstance_Event.SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	delegate OnMontageStoppedEvent;//[Offset: 0x550, Size: 0x10]// 0x75d0b43f80
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]// 0x75d0b44000
	AnimMontage* C_MontageRescue;//[Offset: 0x568, Size: 0x8]// 0x75d0b44080
	enum AnimInstanceType;//[Offset: 0x570, Size: 0x1]// 0x75d0b44180
	byte LastPoseTypeCache;//[Offset: 0x571, Size: 0x1]// 0x75d0b44200
	STExtraAnimMontageData[] MontagePlayQueue;//[Offset: 0x588, Size: 0x10]// 0x75d0b44300
	STExtraAnimFM_SubAnimMapReplacer_Weapon SubAnimReplacer_Weapon;//[Offset: 0x5a8, Size: 0x68]// 0x75d0b44380
	STExtraAnimFM_Character CharacterParam;//[Offset: 0x610, Size: 0x118]// 0x75d0b44400
	STExtraAnimFM_Move MoveParam;//[Offset: 0x728, Size: 0x168]// 0x75d0b44480
	STExtraAnimFM_Character_Movement MovementParam;//[Offset: 0x890, Size: 0x110]// 0x75d0b44500
	STExtraAnimFM_Character_Swim SwimParam;//[Offset: 0x9a0, Size: 0x80]// 0x75d0b44580
	STExtraAnimFM_Weapon WeaponParam;//[Offset: 0xa20, Size: 0x98]// 0x75d0b44600
	STExtraAnimFM_Weapon_Aim AimParam;//[Offset: 0xab8, Size: 0x108]// 0x75d0b44680
	STExtraAnimFM_Weapon_GunOperation GunOperationParam;//[Offset: 0xbc0, Size: 0x198]// 0x75d0b44700
	STExtraAnimFM_Weapon_Grenade GrenadeParam;//[Offset: 0xd58, Size: 0x50]// 0x75d0b44780
	STExtraAnimFM_IK IKParam;//[Offset: 0xda8, Size: 0x128]// 0x75d0b44800
	STExtraAnimFM_Foregrip ForegripParam;//[Offset: 0xed0, Size: 0xe0]// 0x75d0b44880
	STExtraAnimFM_ADS ADSParam;//[Offset: 0xfb0, Size: 0x160]// 0x75d0b44900
	STExtraAnimFM_Parachute ParachuteParam;//[Offset: 0x1110, Size: 0x70]// 0x75d0b44980
	STExtraAnimFM_Character_Hurt HurtParam;//[Offset: 0x1180, Size: 0x80]// 0x75d0b44a00
	STExtraAnimFM_Character_Death DeathParam;//[Offset: 0x1200, Size: 0x70]// 0x75d0b44a80
	STExtraAnimFM_Character_EyeWatch EyeWatchParam;//[Offset: 0x1270, Size: 0xc8]// 0x75d0b44b00
	STExtraAnimFM_Character_Hair HairParam;//[Offset: 0x1338, Size: 0x70]// 0x75d0b44b80
	STExtraAnimFM_Shoveling ShovelingParam;//[Offset: 0x13a8, Size: 0x208]// 0x75d0b44c00
	STExtraAnimFM_WeaponDrop WeaponDropParam;//[Offset: 0x15b0, Size: 0x98]// 0x75d0b44c80
	STExtraAnimFM_LOD LODParam;//[Offset: 0x1648, Size: 0x58]// 0x75d0b44d00
	AnimMontage* C_MontageImpactDead_Fly;//[Offset: 0x16a0, Size: 0x8]// 0x75d0b44d80
	float StopDeathAnimSpeedThreshold;//[Offset: 0x16a8, Size: 0x4]// 0x75a81284d0
	float StopDeathAnimCheckDelay;//[Offset: 0x16ac, Size: 0x4]// 0x75a8128540
	static FName Util_GetAnimMontageSlotName(AnimMontage* Montage, int Index);// 0x457e5d0
	void PlayPostReloadWeaponAnimation(int RemainBulletNumToReload);// 0x457e554
	void PlayPlayerDeadAnimation();// 0x457e540
	void OnRespawned_BP();// 0x457e524
	void OnRecycled_BP();// 0x457e508
	void OnPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x457e2a0
	void HandlePlayerWeaponStateChanged(enum NewState);// 0x457e21c
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x457e15c
	void HandlePlayerPickUp(STExtraBaseCharacter* SelfRef);// 0x457e0d8
	void HandlePlayerEnterRescueState(bool bIsRescuing, bool bIsRescuingSelf);// 0x457e000
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0xffffff8a17adf2b0
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, byte MontagePlayType, float StartPosition, bool PlayDirectly);// 0x457ddfc
	void HandlePlayerAnimMontageJumpSectionDelegate(FName StartSection, AnimMontage* MontageToPlay);// 0x457dd40
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float BlendTime);// 0x457dbc0
	byte GetRole();// 0x457db8c

--------------------------------
Class: SubAnimInstance_Event.SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x548, Size: 0x8]// 0x75b4cc6680
	void RefreshAnimList_BP();// 0xffffff8a17adf2b0
	void RefreshAnimList();// 0x46f863c
	void HandlePlayerWeaponStateChanged_BP(enum NewState);// 0xffffff8a17adf2b0
	void HandlePlayerWeaponStateChanged(enum NewState);// 0x46f85b8
	void HandlePlayerPoseChange_BP(byte LastPose, byte NewPose);// 0xffffff8a17adf2b0
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x46f84f8
	void HandleOwnerAnimEvent_BP(FName EventMsg);// 0xffffff8a17adf2b0
	void HandleOwnerAnimEvent(FName EventMsg);// 0x46f8474

--------------------------------
Class: SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object

--------------------------------
Class: AnimInstanceBase.AnimInstance.Object
	bool bUpdateWhenNotRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 0x1]// 0x75c989d200
	SubAnimUpdateCondition*[] UpdateAnimConditions;//[Offset: 0x478, Size: 0x10]// 0x75c989d300
	FString[] FunctionModuleWhenNotRender;//[Offset: 0x488, Size: 0x10]// 0x75c989d380
	bool IsSyncGroupRoot_Toggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]// 0x75c989d400
	bool IsFunctionModuleRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]// 0x75c989d480
	STExtraCharacter* C_Character;//[Offset: 0x4e0, Size: 0x8]// 0x75c989d500
	STExtraBaseCharacter* C_BaseCharacter;//[Offset: 0x4e8, Size: 0x8]// 0x75c989d580
	STExtraSimpleCharacter* C_SimpleCharacter;//[Offset: 0x4f0, Size: 0x8]// 0x75c989d600
	<AnimationAsset*,AnimationAsset*> AnimRefMap;//[Offset: 0x4f8, Size: 0x50]// 0x75bde2bb40
	void UpdateWhenOnlyTickMontage_BP(float DeltaSeconds);// 0xffffff8a17adf2b0
	void UpdateWhenOnlyTickMontage(float DeltaSeconds);// 0x413b098
	void UpdateFuntionModuleByName(float DeltaSeconds, FString FunctionModuleName, bool bSyncUpdate);// 0x413af24
	void UpdateFuntionModule_Async(float DeltaSeconds);// 0x413aea0
	void UpdateFuntionModule(float DeltaSeconds);// 0x413ae1c
	void UpdateDirtyFunctionModule_Remove(float DeltaSeconds);// 0x413ad98
	void UpdateDirtyFunctionModule_Add(float DeltaSeconds);// 0x413ad14
	void UpdateDirtyFunctionModule(float DeltaSeconds);// 0x413ac90
	void UpdateAnimInstanceAnimList(bool bUpdate);// 0x413ac04
	void UnInitFunctionModule();// 0x413abf0
	void ResetSubAnimNodeAnimClass_BP(FName SubInstanceSlotName);// 0x413ab74
	void ResetAllSubAnimNode();// 0x413ab58
	AnimInstance* ReplaceSubAnimNodeAnimClass_BP(FName SubInstanceSlotName, class AnimInstance NewAnimClass);// 0x413aa94
	void RecycleFunctionModule();// 0x413aa78
	void PostUpdateFuntionModule(float DeltaSeconds);// 0x413a9f4
	void OnRespawned_BP();// 0xffffff8a17adf2b0
	void OnRecycled_BP();// 0xffffff8a17adf2b0
	void InitFunctionModule();// 0x413a9e0
	void HandleUpdateAnimAssetEvent(byte UpdateAnimAssetEvent);// 0x413a95c
	STExtraSimpleCharacter* GetOwnerSimpleCharacter();// 0x413a928
	STExtraCharacter* GetOwnerCharacter();// 0x413a8f4
	STExtraBaseCharacter* GetOwnerBaseCharacter();// 0x413a8c0
	void ForceRemoveDirtyFunctionModule();// 0x413a8a4
	void ForceInitFunctionModule();// 0x413a888
	void EmptyRemoveFMList();// 0x413a86c
	void EmptyFunctionModule();// 0x413a850
	void EmptyFMList();// 0x413a834
	void EmptyAddFMList();// 0x413a818
	void CollectFunctionModule();// 0x413a7fc
	void ClearFunctionModule();// 0x413a7e0

--------------------------------
Class: SubAnimUpdateCondition.Object
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75b4cc5680
	bool CachedNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x75b4cc5700
	void SetEnable(bool InEnable);// 0x46fa470
	bool NeedUpdate_Internal(AnimInstanceBase* AnimInstance);// 0x46fa3d8
	bool NeedUpdate(AnimInstanceBase* AnimInstance);// 0x46fa340
	bool CheckNeedUpdate(AnimInstanceBase* AnimInstance);// 0x46fa278

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int DefaultObjectPoolSize;//[Offset: 0x1334, Size: 0x4]// 0x75d0b33f00
	float IdleWalkSpeedRatio;//[Offset: 0x133c, Size: 0x4]// 0x75d0b33f70
	float AttackWalkSpeedRatio;//[Offset: 0x1340, Size: 0x4]// 0x75d0b33fe0
	float SprintRunSpeedRatio;//[Offset: 0x1344, Size: 0x4]// 0x75d0b34050
	float SidewaysSpeedRatio;//[Offset: 0x1348, Size: 0x4]// 0x75d0b340c0
	float MaxSpeedModeRatio;//[Offset: 0x134c, Size: 0x4]// 0x75d0b34130
	int GlobalTlogID;//[Offset: 0x1350, Size: 0x4]// 0x75d0b341a0
	int PersonalTlogID;//[Offset: 0x1354, Size: 0x4]// 0x75d0b34210
	bool bRecordPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1358, Size: 0x1]// 0x75b4d07580
	bool bRecordTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1359, Size: 0x1]// 0x75b4d07600
	int IdleBlendSpaceValue;//[Offset: 0x135c, Size: 0x4]// 0x75d0b34280
	delegate OnChangeAnimParam;//[Offset: 0x1360, Size: 0x10]// 0x75b4d07680
	float jumpCheckOnGroundProtect;//[Offset: 0x1370, Size: 0x4]// 0x75d0b342f0
	bool bTakeCirclePoisonDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1378, Size: 0x1]// 0x75b4d07700
	float CirclePoisonDamage;//[Offset: 0x137c, Size: 0x4]// 0x75d0b34360
	float CirclePoisonDamageInterval;//[Offset: 0x1380, Size: 0x4]// 0x75d0b343d0
	bool bBroadTakeCirclePoisonDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1388, Size: 0x1]// 0x75b4d07780
	bool bBroadTakeDrowningDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1389, Size: 0x1]// 0x75b4d07800
	bool bBroadTakeFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138a, Size: 0x1]// 0x75b4d07880
	bool bBroadTakeAirAttackDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138b, Size: 0x1]// 0x75b4d07900
	float MomentumFactor;//[Offset: 0x138c, Size: 0x4]// 0x75d0b34440
	CapsuleComponent* RootCapsule;//[Offset: 0x1390, Size: 0x8]// 0x75b4d07980
	CapsuleComponent* HitBox_Stand;//[Offset: 0x1398, Size: 0x8]// 0x75b4d07a00
	bool bDeactivationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a0, Size: 0x1]// 0x75b4d07a80
	delegate OnTakeDamageModify_Override;//[Offset: 0x13a8, Size: 0x10]// 0x75b4d07b00
	delegate MonsterStateEnterHandler;//[Offset: 0x13b8, Size: 0x10]// 0x75b4d07b80
	delegate MonsterStateLeaveHandler;//[Offset: 0x13c8, Size: 0x10]// 0x75b4d07c00
	bool bIsOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e4, Size: 0x1]// 0x75b4d07c80
	TimerHandle OnResumeMoveHandle;//[Offset: 0x13e8, Size: 0x8]// 0x75b4d07d00
	bool bCanControlByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f0, Size: 0x1]// 0x75b4d07d80
	bool bSetWalkStandState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f1, Size: 0x1]// 0x75b4d07e00
	bool CanBeHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f2, Size: 0x1]// 0x75b4d07e80
	float ImpluseScale;//[Offset: 0x13f4, Size: 0x4]// 0x75d0b344b0
	bool bIgnoreMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f8, Size: 0x1]// 0x75b4d07f00
	bool bHoldWeaponHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f9, Size: 0x1]// 0x75b4d07f80
	float ImpluseZScale;//[Offset: 0x13fc, Size: 0x4]// 0x75d0b34520
	float DelayRemoveDeadBody;//[Offset: 0x1400, Size: 0x4]// 0x75d0b34590
	bool EnableRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1404, Size: 0x1]// 0x75b4d08000
	float MaxRagdollActiveDuration;//[Offset: 0x1408, Size: 0x4]// 0x75d0b34600
	bool ShowKillStreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140c, Size: 0x1]// 0x75b4d08080
	<int,MonsterDeathData> deadTypeConfigs;//[Offset: 0x1410, Size: 0x50]// 0x75b4ca2900
	float PlayerFirstProbability;//[Offset: 0x1460, Size: 0x4]// 0x75d0b346e0
	float HatredRevolution;//[Offset: 0x1464, Size: 0x4]// 0x75d0b34750
	float[] AnimUpdateRateParams;//[Offset: 0x1468, Size: 0x10]// 0x75b4d08180
	bool bUseCustomAnimUpdateRateParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1478, Size: 0x1]// 0x75b4d08200
	float[] CustomAnimUpdateRateParams;//[Offset: 0x1480, Size: 0x10]// 0x75b4d08280
	bool bCanSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1490, Size: 0x1]// 0x75b4d08300
	SceneComponent* HitBoxComponent;//[Offset: 0x1498, Size: 0x8]// 0x75b4d08380
	delegate SimpleCharacterBirthEvent;//[Offset: 0x14a0, Size: 0x10]// 0x75b4d08400
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0x14c0, Size: 0x8]// 0x75b4d08480
	CrowdAgentComponent* CrowdAgent;//[Offset: 0x14c8, Size: 0x8]// 0x75b4d08500
	bool bEnableImpluse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d0, Size: 0x1]// 0x75b4d08580
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x14d8, Size: 0x8]// 0x75b4d08600
	PathInterpSyncComponent* PathInterpSync;//[Offset: 0x14e0, Size: 0x8]// 0x75b4d08680
	InterpMovementComponent* InterpMovement;//[Offset: 0x14e8, Size: 0x8]// 0x75b4d08700
	STExtraMonsterAnimInstance* monsterAnimInstance;//[Offset: 0x14f0, Size: 0x8]// 0x75b4d08780
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x14f8, Size: 0x4]// 0x75b4d08800
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fc, Size: 0x1]// 0x75b4d08880
	SimpleLagCompensationComponent* LagCompensationComponent;//[Offset: 0x1500, Size: 0x8]// 0x75b4d08900
	float WalkSpeed;//[Offset: 0x1508, Size: 0x4]// 0x75d0b348a0
	float RunSpeed;//[Offset: 0x150c, Size: 0x4]// 0x75d0b34910
	byte SpawnType;//[Offset: 0x1510, Size: 0x1]// 0x75b4d08980
	MonsterBornStateConfig BornStateType;//[Offset: 0x1514, Size: 0xc]// 0x75b4d08a00
	MonsterShotGunDamageEventBroadcastData[] CachedShotGunDamageDataListOneFrame;//[Offset: 0x1520, Size: 0x10]// 0x75b4d08b00
	float MonsterDamageEXP;//[Offset: 0x1530, Size: 0x4]// 0x75d0b34980
	float MonsterKillEXP;//[Offset: 0x1534, Size: 0x4]// 0x75d0b349f0
	int MonsterLevel;//[Offset: 0x1538, Size: 0x4]// 0x75d0b34a60
	Actor* AttackTarget;//[Offset: 0x1540, Size: 0x8]// 0x75b4d08b80
	Actor* OwnerTreasureBox;//[Offset: 0x1548, Size: 0x8]// 0x75b4d08c00
	float SpeedValueFight;//[Offset: 0x1550, Size: 0x4]// 0x75d0b34ad0
	float SpeedValueClimb;//[Offset: 0x1554, Size: 0x4]// 0x75d0b34b40
	float StunHealthPercentageThreshold;//[Offset: 0x1558, Size: 0x4]// 0x75d0b34bb0
	float StunProbability;//[Offset: 0x155c, Size: 0x4]// 0x75d0b34c20
	float StunDuration;//[Offset: 0x1560, Size: 0x4]// 0x75d0b34c90
	bool NoBattleEnterStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1564, Size: 0x1]// 0x75b4d08d00
	FString MonsterStunAttrModitfyName;//[Offset: 0x1568, Size: 0x10]// 0x75d0b34d00
	MonsterStunAttrModitfyConfig[] MonsterStunAttrModitfyConfigList;//[Offset: 0x1578, Size: 0x10]// 0x75b4d08e00
	int MonsterUniqueID;//[Offset: 0x1588, Size: 0x4]// 0x75d0b34d70
	Vector DamagePos_HeadOffset;//[Offset: 0x158c, Size: 0xc]// 0x75b4d08e80
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1598, Size: 0x1]// 0x75b4d08f00
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1599, Size: 0x1]// 0x75b4d08f80
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159a, Size: 0x1]// 0x75b4d09000
	Vector HurtDir;//[Offset: 0x159c, Size: 0xc]// 0x75b4d09080
	float HurtDistance;//[Offset: 0x15a8, Size: 0x4]// 0x75d0b34de0
	float HurtResetDefaultTime;//[Offset: 0x15ac, Size: 0x4]// 0x75d0b34e50
	float ZombieSleepToDie;//[Offset: 0x15cc, Size: 0x4]// 0x75d0b34ec0
	bool bEnableSimpleCharacterCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d0, Size: 0x1]// 0x75b4d09100
	delegate OnSimpleCharacterWeaponStateChanged;//[Offset: 0x15d8, Size: 0x10]// 0x75b4d09180
	delegate OnSimpleCharacterAnimEvent;//[Offset: 0x15e8, Size: 0x10]// 0x75b4d09200
	MonsterDurationData[] InitDurationData;//[Offset: 0x1600, Size: 0x10]// 0x75b4d09300
	float[] FallSpeedSetting;//[Offset: 0x1618, Size: 0x10]// 0x75b4d09380
	MonsterClimbData CurrentClimbData;//[Offset: 0x1628, Size: 0x8]// 0x75b4d09400
	enum CurrentJumpExPhase;//[Offset: 0x1630, Size: 0x1]// 0x75b4d09500
	bool IsInAIPathLinkRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1631, Size: 0x1]// 0x75b4d09580
	float MeshMaxVisibleDelay;//[Offset: 0x1634, Size: 0x4]// 0x75d0b34fa0
	float DelayOpenCollisionTime;//[Offset: 0x163c, Size: 0x4]// 0x75d0b35010
	FName BornCollisitionTag;//[Offset: 0x1648, Size: 0x8]// 0x75d0b35080
	bool bPlayHitEvenIfPlayingMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1650, Size: 0x1]// 0x75b4d09600
	PrimitiveComponent* BornCollision;//[Offset: 0x1658, Size: 0x8]// 0x75b4d09680
	Transform BornCollisionTrans;//[Offset: 0x1660, Size: 0x30]// 0x75b4d09700
	FName BornCollisionAttach;//[Offset: 0x1690, Size: 0x8]// 0x75d0b350f0
	StaticMesh* BoxModel;//[Offset: 0x1698, Size: 0x8]// 0x75b4d09780
	bool bEnabledForceFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a0, Size: 0x1]// 0x75b4d09800
	int DamageSyncFrameFrequency;//[Offset: 0x16a4, Size: 0x4]// 0x75d0b35160
	bool EnableDamageSyncFrequencyControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a8, Size: 0x1]// 0x75b4d09880
	uint64 LastDamageSyncFrameCount;//[Offset: 0x16b0, Size: 0x8]// 0x75d0b351d0
	PartDamageComponent* PartDamageComponent;//[Offset: 0x16b8, Size: 0x8]// 0x75b4d09900
	UAEMonsterAnimListComponentBase* MonsterAnimListComponent;//[Offset: 0x16c0, Size: 0x8]// 0x75b4d09980
	FName MainAnimListTag;//[Offset: 0x16c8, Size: 0x8]// 0x75d0b35240
	byte MonsterAnimListRandomSeed;//[Offset: 0x16d0, Size: 0x1]// 0x75b4d09a00
	byte[] MonsterAnimListNum;//[Offset: 0x16d8, Size: 0x10]// 0x75b4d09b00
	float HearRadius;//[Offset: 0x16ec, Size: 0x4]// 0x75d0b352b0
	float MinTimeLockHeardPos;//[Offset: 0x16f0, Size: 0x4]// 0x75d0b35320
	bool IsShowDamageNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f8, Size: 0x1]// 0x75b4d09b80
	bool bIsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f9, Size: 0x1]// 0x75b4d09c00
	bool bIsShowKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fa, Size: 0x1]// 0x75b4d09c80
	delegate OnFinishJumpToTarget;//[Offset: 0x1700, Size: 0x10]// 0x75b4d09d00
	bool bIsJumpingToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1710, Size: 0x1]// 0x75b4d09d80
	float DisableCollisionPeriod;//[Offset: 0x1714, Size: 0x4]// 0x75d0b35390
	bool bDisableCollisionBothSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1718, Size: 0x1]// 0x75b4d09e00
	FString[] DrawDebugInfoContentList;//[Offset: 0x1720, Size: 0x10]// 0x75b4d09e80
	delegate OnSimpleCharacterHpChange;//[Offset: 0x1740, Size: 0x10]// 0x75b4d09f00
	SkeletalMesh* MeshResourceForHighendDevice;//[Offset: 0x1750, Size: 0x28]// 0x75b4d09f80
	SkeletalMesh* MeshResourceForLowendDevice;//[Offset: 0x1778, Size: 0x28]// 0x75b4d0a000
	bool bNeedDestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a0, Size: 0x1]// 0x75b4d0b380
	float DisappearOnDeathLifeSpan;//[Offset: 0x17a4, Size: 0x4]// 0x75d0b35470
	void StopAIAndCrouch();// 0x46b3958
	void StartJumpToTarget(out const Vector TargetLocation, float GravityScale, float Speed, bool bIsSkill, bool bIsLowArc);// 0x46b37c0
	void StartJump_Multicast(const Vector Vel, float GravityScale, bool bIsSkill, bool bRotFollowVel);// 0x46b366c
	void ShowBeHitAnim(Actor* causer);// 0x46b35f0
	void SetIsOnGround(bool onGround);// 0x46b3564
	void PostTakeDamage(float Damage, out const HitResult HitResult, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, bool IsHeadShot);// 0x46b3368
	void OpenDeadBodyRagDoll_Client(byte deadPoseType);// 0x46b32e4
	void OnStateLeave(enum EnteredState);// 0x46b3260
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x46b31a4
	void OnStateEnter(enum EnteredState);// 0x46b3120
	void OnRep_ReplicatedMovement();// 0x46b3104
	void OnRep_MonsterAnimListRandomSeed();// 0x46b30f0
	void OnRep_JumpingToTarget();// 0x46b30dc
	void OnRep_IdleBlendSpaceValue();// 0x46b30c8
	void OnRep_Health(float PrevHealth);// 0x46b3044
	void OnPathInterpStatusChanged(bool bIsStart, bool bIsVault);// 0x46b2f74
	void OnJumpToTargetImpact(out const HitResult ImpactResult);// 0x46b2ed4
	void OnHitAnimPlay();// 0xffffff8a17adf2b0
	void OnCanControlByPlayerChangeEvent();// 0xffffff8a17adf2b0
	void On_RepCanControlByPlayer();// 0x46b2ec0
	bool LeaveState(enum State);// 0x46b2e28
	bool HasState(enum State);// 0x46b2d90
	void HandleStunEnd();// 0x46b2d7c
	void HandleReceiveBornType();// 0x46b2d68
	SkeletalMeshComponent* GetWeaponAttachMesh(STExtraWeapon* Weapon);// 0x46b2cd4
	SceneComponent* GetWeaponAttachComp(const byte InWeaponSlot);// 0x46b2c40
	FString GetUIDisplayName();// 0xffffff8a17adf2b0
	STExtraSimpleCharacterPhysics* GetSimpleCharacterPhysics();// 0x46b2c24
	STExtraPlayerController* GetPlayerControllerSafety();// 0x46b2be8
	bool EnterState(enum State);// 0x46b2b50
	void DisappearOnDeath();// 0x46b2b3c
	void ClearOnDeathByPose(Controller* EventInstigator, int DamageType, byte deadPoseType);// 0x46b2a48
	void CalculateUniqueIDOnServer();// 0x46b2a2c
	void BroadcastCompactClientsSimulateShotGunDamage(const MonsterShotGunDamageEventBroadcastData[] DataList);// 0x46b294c
	void BroadcastCompactClientsSimulateDamage(float Damage, int DamageTypeID, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x46b27c8
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b2574
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b2320
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b20d0
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b1e80
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b1c24
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b19bc
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b176c
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b151c
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b12c8
	void BroadcastClientsDeath(float Damage, const DamageEvent DamageEvent, Actor* DamageCauser, Controller* killController, bool IsHeadShotDamage, int TypeID);// 0x46b10c0
	void BroadcastClientAnimMsg(FString AnimMsg);// 0x46b1008
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8a17adf2b0
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8a17adf2b0
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, int DamageTypeID);// 0x46b0e70
	bool AllowState(enum State, bool withLog);// 0x46b0d94

--------------------------------
Class: MonsterDeathData
	byte PoseType;//[Offset: 0x0, Size: 0x1]// 0x76121fddc0
	Vector deadDir;//[Offset: 0x4, Size: 0xc]// 0x76121fdd40
	Vector deadUpDir;//[Offset: 0x10, Size: 0xc]// 0x76121fdcc0

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75a8635000
	float VelocityDampingOnGround;//[Offset: 0x11c, Size: 0x4]// 0x75bcaf5700
	float VelocityDampingInMidAir;//[Offset: 0x120, Size: 0x4]// 0x75bcaf5770
	float StepHeight;//[Offset: 0x124, Size: 0x4]// 0x75bcaf57e0
	float TestPassWallCapsuleHeightScaleForSkill;//[Offset: 0x128, Size: 0x4]// 0x75bcaf5850
	float MaxVelocityForSimulation;//[Offset: 0x12c, Size: 0x4]// 0x75bcaf58c0
	float VehicleHitFeedBack;//[Offset: 0x130, Size: 0x4]// 0x75bcaf5930
	float VehicleImpluseScale;//[Offset: 0x134, Size: 0x4]// 0x75bcaf59a0
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0x138, Size: 0x4]// 0x75bcaf5a10
	float ResetSimulatePreventPenetrationTime;//[Offset: 0x13c, Size: 0x4]// 0x75bcaf5a80
	int LinkJumpVelocityAngle;//[Offset: 0x140, Size: 0x4]// 0x75bcaf5af0
	int LinkJumpVelocityValue;//[Offset: 0x144, Size: 0x4]// 0x75bcaf5b60
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75a8635080
	enum FindGroundTraceType;//[Offset: 0x149, Size: 0x1]// 0x75a8635180
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x1b0, Size: 0x8]// 0x75a8635200
	bool StopSkillSimulate();// 0x46b8714
	bool StopImpulseSimulate();// 0x46b86dc
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x46b8600
	bool StartImpulseSimulateIgnorBlock(Vector DesPos, Vector InVelocity, float InIgnorBlockTime);// 0x46b84e8
	bool StartImpulseSimulate(Vector InVelocity, bool PreventPenetration);// 0x46b840c
	void SetVelocity(Vector InVelocity);// 0x46b838c
	void SetSimulatePhysics(bool bInEnabled);// 0x46b830c
	void SetEnabled(bool InEnabled);// 0x46b828c
	void SetCharacterMovementActive(bool _bIsActive);// 0x46b8208
	bool IsOnGround();// 0x46b81d0
	Vector GetVelocity();// 0x46b8198
	Vector GetTouchGroundVelocity();// 0x46b8160
	bool FindGround();// 0x46b8128
	void AddVelocity(Vector InVelocity);// 0x46b80a8
	void ActivatePhysics();// 0x46b8094

--------------------------------
Class: CrowdAgentComponent.ActorComponent.Object
	float AgentRadius;//[Offset: 0x11c, Size: 0x4]// 0x75b4e0f950
	float SegmentRadius;//[Offset: 0x120, Size: 0x4]// 0x75b4e0f9c0
	float Height;//[Offset: 0x124, Size: 0x4]// 0x75b4e0fa30
	float MaxSpeed;//[Offset: 0x128, Size: 0x4]// 0x75b4e0faa0
	float MaxForce;//[Offset: 0x12c, Size: 0x4]// 0x75b4e0fb10
	float QueryNeighborRadius;//[Offset: 0x130, Size: 0x4]// 0x75b4e0fb80
	float QueryBoundaryRadius;//[Offset: 0x134, Size: 0x4]// 0x75b4e0fbf0
	float StopMoveDistance;//[Offset: 0x138, Size: 0x4]// 0x75b4e0fc60
	bool bSimulateCrowdAgent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]// 0x75b4dfe280
	class NavigationQueryFilter* FilterClass;//[Offset: 0x140, Size: 0x8]// 0x75b4dfe300
	bool bUpdateRealDestInUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75b4dfe380
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]// 0x75b4dfe400
	bool bNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]// 0x75b4dfe480
	void StopMove();// 0x428e0d8
	void SetMaxSpeed(float MaxSpeed);// 0x428e05c
	void SetEnabled(bool InEnabled);// 0x428dfdc
	void RandomMoveToPosition(float Radius);// 0x428df60
	void MoveToLoc(out const Vector Loc);// 0x428ded4
	void MoveToActor(const Actor* Actor);// 0x428de58
	bool IsMoving();// 0x428de20
	Vector GetVelocity();// 0x428dde8
	float GetMaxSpeed();// 0x428ddb4

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0x158, Size: 0x38]// 0x75a86e0080
	float Snapshot_Timestamp;//[Offset: 0x190, Size: 0x4]// 0x75a86c0f10
	RepSnapshot_Location Snapshot_Location;//[Offset: 0x194, Size: 0xc]// 0x75a86e0100
	RepMovement RepMovement;//[Offset: 0x1a0, Size: 0x34]// 0x75a86e0180
	RepSnapshot Snapshot;//[Offset: 0x1d4, Size: 0x38]// 0x75a86e0200
	float TolerateLocationDiffSqAtServer;//[Offset: 0x20c, Size: 0x4]// 0x75a86c0f80
	float TolerateRotationInDegreeAtServer;//[Offset: 0x210, Size: 0x4]// 0x75a8741000
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x214, Size: 0x4]// 0x75a8741070
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x218, Size: 0x4]// 0x75a87410e0
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x220, Size: 0x188]// 0x75a86e0280
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]// 0x75a86e0300
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 0x1]// 0x75a86e0380
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 0x1]// 0x75a86e0400
	float TurnThreshold;//[Offset: 0x3d4, Size: 0x4]// 0x75a8741150
	CurveFloat* TurnTimeCurve;//[Offset: 0x3d8, Size: 0x8]// 0x75a86e0480
	float TurnSpeed;//[Offset: 0x3e0, Size: 0x4]// 0x75a87411c0
	Vector LastUpdateLocation;//[Offset: 0x3e4, Size: 0xc]// 0x75a86e0500
	Quat LastUpdateRotation;//[Offset: 0x3f0, Size: 0x10]// 0x75a86e0580
	void SetVelocity(out const Vector Velocity);// 0x4537364
	void SetFindFloorTraceUseLastZ(bool bUseLaseZ);// 0x45372e4
	void SetEnabled(bool InEnabled);// 0x4537264
	void SetDragLocationJudgeUseCorrectZ(bool bUseCorrectZ);// 0x45371e4
	void SetDragLocationFindFloor(bool bFindFloor);// 0x4537164
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x4537074
	void OnRep_Snapshot();// 0x4537060
	void OnRep_Movement();// 0x453704c
	Vector GetVelocity();// 0x4537014
	void ForceUpdate(bool ClearVelocity);// 0x4536f90
	void ClearRepSnapShot();// 0x4536f78

--------------------------------
Class: RepSnapshot
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]// 0x76121d7450
	Vector LinearVelocity;//[Offset: 0x1c, Size: 0xc]// 0x76121d73d0
	Vector AngularVelocity;//[Offset: 0x28, Size: 0xc]// 0x76121d7350
	float ToleranceYaw;//[Offset: 0x34, Size: 0x4]// 0x76121d72e0

--------------------------------
Class: RepSnapshot_Location
	Vector Location;//[Offset: 0x0, Size: 0xc]// 0x76121d71c0

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 0x4]// 0x76121d70b0
	float AngularDeltaThreshold;//[Offset: 0x4, Size: 0x4]// 0x76121d7040
	float AngularInterpAlpha;//[Offset: 0x8, Size: 0x4]// 0x76121d6fd0
	float AngularRecipFixTime;//[Offset: 0xc, Size: 0x4]// 0x76121d6f60
	float LinearDeltaThresholdSq;//[Offset: 0x10, Size: 0x4]// 0x76121d6ef0
	float LinearInterpAlpha;//[Offset: 0x14, Size: 0x4]// 0x76121d6e80
	float LinearRecipFixTime;//[Offset: 0x18, Size: 0x4]// 0x76121d6e10
	float SpeedThresholdSq;//[Offset: 0x1c, Size: 0x4]// 0x76121d6da0
	float MaxMoveDeltaTime;//[Offset: 0x20, Size: 0x4]// 0x76121d6d30
	float SmoothNetUpdateTime;//[Offset: 0x24, Size: 0x4]// 0x76121d6cc0
	float SmoothNetUpdateRotationTime;//[Offset: 0x28, Size: 0x4]// 0x76121d6c50
	byte FindFloorTraceChannel;//[Offset: 0x2c, Size: 0x1]// 0x76121d6bd0
	float FindFloorInterval;//[Offset: 0x30, Size: 0x4]// 0x76121d6b60
	float FindFloorTraceZUp;//[Offset: 0x34, Size: 0x4]// 0x76121d6af0
	float FindFloorTraceZDown;//[Offset: 0x38, Size: 0x4]// 0x76121d6a80
	float FindFloorMaxAllowDiffZ;//[Offset: 0x3c, Size: 0x4]// 0x76121d6a10
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x76121d6990
	bool bFindFloorTraceUseLastZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x76121d6910
	bool bDragLocationJudgeUseCorrectZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]// 0x76121d6890
	bool bDragLocationFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]// 0x76121d6810
	SmoothParamsBySpeed[] SmoothParams;//[Offset: 0x48, Size: 0x10]// 0x76121d6440
	CurveFloat* RotationTimeCurve;//[Offset: 0x58, Size: 0x8]// 0x76121d63c0
	float DisableRotationThreshold;//[Offset: 0x60, Size: 0x4]// 0x76121d6350
	bool bGetInterpVelocityWhenStopMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]// 0x76121d62d0
	float InterpVelocityWhenStopMoveLimit;//[Offset: 0x68, Size: 0x4]// 0x76121d6260

--------------------------------
Class: SmoothParamsBySpeed
	float Speed;//[Offset: 0x0, Size: 0x4]// 0x76121d67a0
	float LinearDeltaThresholdSq;//[Offset: 0x4, Size: 0x4]// 0x76121d6730
	float SmoothNetUpdateLocationTime;//[Offset: 0x8, Size: 0x4]// 0x76121d66c0
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 0x4]// 0x76121d6650
	float MaxPredictMoveTime;//[Offset: 0x10, Size: 0x4]// 0x76121d65e0

--------------------------------
Class: PathInterpSyncComponent.ActorComponent.Object
	bool bUseForVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]// 0x75a8425200
	PawnVaultConfig[] VaultConfigData;//[Offset: 0x138, Size: 0x10]// 0x75a8425300
	<FName,PawnPathInterpCurveConfig> PathInterpCurveConfigData;//[Offset: 0x148, Size: 0x50]// 0x75a841a080
	<FName,PathInterpAnimData> PathInterpAnimData;//[Offset: 0x198, Size: 0x50]// 0x75a841a140
	float InterpCorrectionTimeInterval;//[Offset: 0x1e8, Size: 0x4]// 0x75a83fc880
	float LineInterpStopRadius;//[Offset: 0x1ec, Size: 0x4]// 0x75a83fc8f0
	PlayerAIVaultAnimData LoopAnimData;//[Offset: 0x1f0, Size: 0x10]// 0x75a8425480
	PlayerAIVaultAnimData StartAnimData;//[Offset: 0x200, Size: 0x10]// 0x75a8425500
	PlayerAIVaultAnimData EndAnimData;//[Offset: 0x210, Size: 0x10]// 0x75a8425580
	CurveFloat* CurUpCurve;//[Offset: 0x268, Size: 0x8]// 0x75a8425600
	CurveFloat* CurForwardCurve;//[Offset: 0x270, Size: 0x8]// 0x75a8425680
	void PawnStartVault(float BlockDistance, float BlockHeight, float BlockLength, float BlockMaxFall, float BlockMaxDist, const Vector StartPos, const Vector hitpoint, const Rotator movedir);// 0x446f748
	void PawnStartPathNodeInterp(const RepPathNodeData[] PathNodeData, const Vector SvrStartLoc);// 0x446f678
	void NotifyServerPathProgress(int PathIndex, float PathTime);// 0x446f5b8
	void DoPathNodeInterp(float lookAtBlockHeight, float BlockLength, Vector StartPos, Vector EndPos);// 0x446f47c

--------------------------------
Class: PawnVaultConfig
	FName AnimKey;//[Offset: 0x0, Size: 0x8]// 0x76121ba2c0
	CurveFloat* UpCurve;//[Offset: 0x8, Size: 0x8]// 0x76121ba240
	CurveFloat* ForwardCurve;//[Offset: 0x10, Size: 0x8]// 0x76121ba1c0
	float BlockDistance;//[Offset: 0x18, Size: 0x4]// 0x76121ba150
	float BlockHeight;//[Offset: 0x1c, Size: 0x4]// 0x76121ba0e0
	float BlockLength;//[Offset: 0x20, Size: 0x4]// 0x76121ba070
	bool bIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x76121b9ff0
	float countTime;//[Offset: 0x28, Size: 0x4]// 0x76121b9f80
	float PlaySpeed;//[Offset: 0x2c, Size: 0x4]// 0x76121b9f10

--------------------------------
Class: PawnPathInterpCurveConfig
	CurveFloat* UpCurve;//[Offset: 0x0, Size: 0x8]// 0x76121b9df0
	CurveFloat* ForwardCurve;//[Offset: 0x8, Size: 0x8]// 0x76121b9d70
	float CurveTime;//[Offset: 0x10, Size: 0x4]// 0x76121b9d00

--------------------------------
Class: PathInterpAnimData
	AnimMontage* PlayerAnimSoftPtr;//[Offset: 0x0, Size: 0x28]// 0x76121b9be0
	AnimMontage* ZombieAnimSoftPtr;//[Offset: 0x28, Size: 0x28]// 0x76121b9b60

--------------------------------
Class: PlayerAIVaultAnimData
	FName AnimKey;//[Offset: 0x0, Size: 0x8]// 0x76121b97e0
	float MoveLength;//[Offset: 0x8, Size: 0x4]// 0x76121b9770
	float SpeedScale;//[Offset: 0xc, Size: 0x4]// 0x76121b9700

--------------------------------
Class: RepPathNodeData
	Vector Location;//[Offset: 0x0, Size: 0xc]// 0x76121b9a40
	float SpeedScale;//[Offset: 0xc, Size: 0x4]// 0x76121b99d0
	FName AnimKey;//[Offset: 0x10, Size: 0x8]// 0x76121b9960
	FName CurveKey;//[Offset: 0x18, Size: 0x8]// 0x76121b98f0

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	FlyPathFollowingComponent* FlyPathFollowingComp;//[Offset: 0x1a0, Size: 0x8]// 0x75bcab5300
	float MaxMoveSpeed;//[Offset: 0x1a8, Size: 0x4]// 0x75bdd54e70
	float MaxStepHeight;//[Offset: 0x1ac, Size: 0x4]// 0x75bdd54ee0
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 0x1]// 0x75bcab5380
	float ScalePower;//[Offset: 0x1b4, Size: 0x4]// 0x75bdd54f50
	float MinScaleFactor;//[Offset: 0x1b8, Size: 0x4]// 0x75bdd54fc0
	bool bFindFloorWhenMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 0x1]// 0x75bcab5400
	bool bFindLandscapeAsFloorOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 0x1]// 0x75bcab5480
	byte FindFloorChannel;//[Offset: 0x1bd, Size: 0x1]// 0x75bcab5500
	bool bFindFloorUseObjectType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1be, Size: 0x1]// 0x75bcab5580
	byte[] FindFloorTraceObjectTypes;//[Offset: 0x1c0, Size: 0x10]// 0x75bcab5680
	float FindFloorTraceZUp;//[Offset: 0x1d0, Size: 0x4]// 0x75bdd55030
	float FindFloorTraceZDown;//[Offset: 0x1d4, Size: 0x4]// 0x75bdd550a0
	bool bTestPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]// 0x75bcab5700
	byte TestPassWallChannel;//[Offset: 0x1d9, Size: 0x1]// 0x75bcab5780
	bool bTestPassWallUseObjectType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1da, Size: 0x1]// 0x75bcab5800
	byte[] TestPassWallTraceObjectTypes;//[Offset: 0x1e0, Size: 0x10]// 0x75bcab5900
	bool bStopMoveWhenPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]// 0x75bcab5980
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]// 0x75bcab5a00
	float AvoidanceWeight;//[Offset: 0x1f4, Size: 0x4]// 0x75bdd55110
	float AvoidanceConsiderationRadius;//[Offset: 0x1f8, Size: 0x4]// 0x75bdd55180
	bool bUseCustomAvoidanceShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]// 0x75bcab5a80
	float CustomAvoidanceRadius;//[Offset: 0x200, Size: 0x4]// 0x75bdd551f0
	float CustomAvoidanceHalfHeight;//[Offset: 0x204, Size: 0x4]// 0x75bdd55260
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x208, Size: 0x4]// 0x75bcab5b00
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x20c, Size: 0x4]// 0x75bcab5b80
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x210, Size: 0x4]// 0x75bcab5c00
	bool bLogOwnerLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1]// 0x75bcab5c80
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]// 0x75bcab5d00
	Vector RequestedVelocity;//[Offset: 0x218, Size: 0xc]// 0x75bcab5d80
	Character* CharacterOwner;//[Offset: 0x228, Size: 0x8]// 0x75bcab5e00
	int AvoidanceUID;//[Offset: 0x240, Size: 0x4]// 0x75bdd552d0

--------------------------------
Class: FlyPathFollowingComponent.NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float DefaultFlyHeight;//[Offset: 0x358, Size: 0x4]// 0x75d0b2db40
	float MinFlyHeight;//[Offset: 0x35c, Size: 0x4]// 0x75d0b2dbb0
	float NavAgentRadius;//[Offset: 0x360, Size: 0x4]// 0x75d0b2dc20
	byte SweepTraceChannel;//[Offset: 0x364, Size: 0x1]// 0x75b4c88c80
	byte[] DynamicTraceObjectTypes;//[Offset: 0x368, Size: 0x10]// 0x75b4c88d80
	bool bDrawCurMoveTargetLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]// 0x75b4c88e00
	bool bDrawSweepLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]// 0x75b4c88e80
	bool bDrawPathRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 0x1]// 0x75b4c88f00

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float maxCheckDis;//[Offset: 0x2f8, Size: 0x4]// 0x75d0b2dc90
	float maxCheckDisTime;//[Offset: 0x2fc, Size: 0x4]// 0x75d0b2dd00
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]// 0x75b4c88f80
	float PlayerHalfHeight;//[Offset: 0x308, Size: 0x4]// 0x75d0b2dd70
	float PlayerNewHalfHeight;//[Offset: 0x30c, Size: 0x4]// 0x75d0b2dde0
	float MaxTransferDis;//[Offset: 0x310, Size: 0x4]// 0x75d0b2de50
	float AgentRadiusMultiplier;//[Offset: 0x314, Size: 0x4]// 0x75d0b2dec0
	bool bReachCurrentTargetTestUse2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]// 0x75b4c89000
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]// 0x75b4c89080
	bool bDrawNavPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 0x1]// 0x75b4c89100
	float DrawNavPathInterval;//[Offset: 0x31c, Size: 0x4]// 0x75d0b2df30
	bool bDrawCurTargetLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]// 0x75b4c89180
	byte[] TargetPathTraceObjectTypes;//[Offset: 0x328, Size: 0x10]// 0x75b4c89280
	float TraceObjectShapeScale;//[Offset: 0x338, Size: 0x4]// 0x75d0b2dfa0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x160, Size: 0x8]// 0x75b4c89300
	NavigationData* MyNavData;//[Offset: 0x178, Size: 0x8]// 0x75b4c89380
	void OnNavDataRegistered(NavigationData* NavData);// 0x62d352c
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x62d33cc
	Vector GetPathDestination();// 0x62d3394
	byte GetPathActionType();// 0x62d3360

--------------------------------
Class: STExtraMonsterAnimInstance.AnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacter* C_OwnerMonsterCharacter;//[Offset: 0x548, Size: 0x8]// 0x75a8640380
	bool C_State_IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]// 0x75a8640400
	bool C_State_IsInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]// 0x75a8640480
	bool C_State_IsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]// 0x75a8640500
	bool C_State_IsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]// 0x75a8640580
	bool C_State_IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 0x1]// 0x75a8640600
	Vector C_State_HurtingDir;//[Offset: 0x558, Size: 0xc]// 0x75a8640700
	float C_State_HurtingPoseAlpha;//[Offset: 0x564, Size: 0x4]// 0x75bcafa390
	float C_MoveSpeed;//[Offset: 0x568, Size: 0x4]// 0x75bcafa400
	float C_MoveForwardSpeed;//[Offset: 0x56c, Size: 0x4]// 0x75bcafa470
	float C_MoveRightSpeed;//[Offset: 0x570, Size: 0x4]// 0x75bcafa4e0
	float C_MoveSpeedRate;//[Offset: 0x574, Size: 0x4]// 0x75bcafa550
	bool bNegativeSpeedEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]// 0x75a8640780
	bool bClientTurnEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]// 0x75a8640800
	float bCLientTurnMinDuration;//[Offset: 0x57c, Size: 0x4]// 0x75bcafa5c0
	Vector C_MoveForce;//[Offset: 0x580, Size: 0xc]// 0x75a8640880
	float C_PlayMoveAnimThreshold;//[Offset: 0x58c, Size: 0x4]// 0x75bcafa630
	enum C_IsInBattleState;//[Offset: 0x590, Size: 0x1]// 0x75a8640980
	bool C_State_IsRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 0x1]// 0x75a8640a00
	bool C_State_IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 0x1]// 0x75a8640a80
	bool C_State_IsJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 0x1]// 0x75a8640b00
	bool C_State_IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]// 0x75a8640b80
	bool C_State_Observing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]// 0x75a8640c00
	bool C_State_IsStuning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x596, Size: 0x1]// 0x75a8640c80
	bool C_State_AIPathRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x597, Size: 0x1]// 0x75a8640d00
	bool C_State_Climbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]// 0x75a8640d80
	enum C_State_ClimbPhase;//[Offset: 0x599, Size: 0x1]// 0x75a8640e80
	enum C_State_JumpExPhase;//[Offset: 0x59a, Size: 0x1]// 0x75a8640f80
	bool C_IsClimpPhaseVerticalToHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59b, Size: 0x1]// 0x75a8641000
	bool C_ShouldIdleInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 0x1]// 0x75a8641080
	bool C_ShouldUseHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 0x1]// 0x75a8641100
	bool C_bRandomHurtDirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59e, Size: 0x1]// 0x75a8641180
	bool C_HasShootWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59f, Size: 0x1]// 0x75a8641200
	Rotator C_AimRot;//[Offset: 0x5a0, Size: 0xc]// 0x75a8641280
	bool C_UseDeadSnapPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]// 0x75a8641300
	float StopDeathAnimSpeedThreshold;//[Offset: 0x5b0, Size: 0x4]// 0x75bcafa6a0
	float StopDeathAnimCheckDelay;//[Offset: 0x5b4, Size: 0x4]// 0x75bcafa710
	bool bOnFireCheckIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]// 0x75a8641380
	float FireCheckStopBlend;//[Offset: 0x5bc, Size: 0x4]// 0x75bcafa780
	bool bAutoSetDeathDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]// 0x75a8641400
	float StopFallingDeathAnimCheckDelay;//[Offset: 0x5c8, Size: 0x4]// 0x75bcafa7f0
	int C_IdleBlendSpaceValue;//[Offset: 0x5d0, Size: 0x4]// 0x75bcafa860
	bool C_LeftLegDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1]// 0x75a8641480
	bool C_FirstStopDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 0x1]// 0x75a8641500
	bool C_SecondStopDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d6, Size: 0x1]// 0x75a8641580
	bool C_Turn_Left;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d7, Size: 0x1]// 0x75a8641600
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]// 0x75a8641680
	FName StopCurveName;//[Offset: 0x5e0, Size: 0x8]// 0x75bcafa8d0
	float C_StopCurveOutput;//[Offset: 0x5e8, Size: 0x4]// 0x75bcafa940
	int C_StopLegAnimType;//[Offset: 0x5ec, Size: 0x4]// 0x75bcafa9b0
	AnimSequence* C_Idle;//[Offset: 0x5f0, Size: 0x8]// 0x75a8641700
	AnimSequence* C_Idle_Crouch;//[Offset: 0x5f8, Size: 0x8]// 0x75a8641780
	AnimSequence* C_Idle_Prone;//[Offset: 0x600, Size: 0x8]// 0x75a8641800
	AnimSequence* C_Combat_Idle;//[Offset: 0x608, Size: 0x8]// 0x75a8641880
	AnimSequence* C_Combat_Idle_Crouch;//[Offset: 0x610, Size: 0x8]// 0x75a8641900
	AnimSequence* C_Combat_Idle_Prone;//[Offset: 0x618, Size: 0x8]// 0x75a8641980
	AnimSequence* C_Run;//[Offset: 0x620, Size: 0x8]// 0x75a8641a00
	AnimSequence* C_Run_Fighting;//[Offset: 0x628, Size: 0x8]// 0x75a8641a80
	BlendSpace* C_Hit;//[Offset: 0x630, Size: 0x8]// 0x75a8641b00
	AnimMontage* C_Stiff;//[Offset: 0x638, Size: 0x8]// 0x75a8641b80
	AnimSequence* C_Jump_Start;//[Offset: 0x640, Size: 0x8]// 0x75a8641c00
	AnimSequence* C_JumpEx_Start;//[Offset: 0x648, Size: 0x8]// 0x75a8641c80
	AnimSequence* C_JumpEx_Loop;//[Offset: 0x650, Size: 0x8]// 0x75a8641d00
	AnimSequence* C_JumpEx_End;//[Offset: 0x658, Size: 0x8]// 0x75a8641d80
	BlendSpace1D* C_Fall;//[Offset: 0x660, Size: 0x8]// 0x75a8641e00
	AnimSequence* C_Fall_Stand;//[Offset: 0x668, Size: 0x8]// 0x75a8641e80
	AnimSequence* C_Fall_Stand_Speed0;//[Offset: 0x670, Size: 0x8]// 0x75a8641f00
	AnimSequence* C_Fall_Stand_Speed1;//[Offset: 0x678, Size: 0x8]// 0x75a8641f80
	AnimSequence* C_Fall_Stand_Speed2;//[Offset: 0x680, Size: 0x8]// 0x75a8642000
	AnimSequence* C_Fall_Stand_Speed3;//[Offset: 0x688, Size: 0x8]// 0x75a8642080
	AnimSequence* C_Climb_WallVerticalLoop;//[Offset: 0x690, Size: 0x8]// 0x75a8642100
	AnimSequence* C_Climb_WallVerticalToHorizontal;//[Offset: 0x698, Size: 0x8]// 0x75a8642180
	AnimSequence* C_Climb_WallHorizontal;//[Offset: 0x6a0, Size: 0x8]// 0x75a8642200
	AnimSequence* C_Climb_WallHorizontalToVertical;//[Offset: 0x6a8, Size: 0x8]// 0x75a8642280
	AnimSequence* C_Climb_Window;//[Offset: 0x6b0, Size: 0x8]// 0x75a8642300
	AnimSequence* C_Climb_SingleHands;//[Offset: 0x6b8, Size: 0x8]// 0x75a8642380
	AnimSequence* C_Climb_DoubleHands;//[Offset: 0x6c0, Size: 0x8]// 0x75a8642400
	AnimMontage* C_NormalDeath;//[Offset: 0x6c8, Size: 0x8]// 0x75a8642480
	AnimMontage* C_HeadShotDeath;//[Offset: 0x6d0, Size: 0x8]// 0x75a8642500
	AnimMontage* C_ImpulesDeath;//[Offset: 0x6d8, Size: 0x8]// 0x75a8642580
	AnimMontage* C_MovingDeath;//[Offset: 0x6e0, Size: 0x8]// 0x75a8642600
	AnimMontage* C_ClimbWallDeath;//[Offset: 0x6e8, Size: 0x8]// 0x75a8642680
	AnimMontage* C_BurningDeath;//[Offset: 0x6f0, Size: 0x8]// 0x75a8642700
	AnimMontage* C_MeleeDeath;//[Offset: 0x6f8, Size: 0x8]// 0x75a8642780
	AnimMontage* C_GobackDeath;//[Offset: 0x700, Size: 0x8]// 0x75a8642800
	AnimSequence* C_Observe;//[Offset: 0x708, Size: 0x8]// 0x75a8642880
	AimOffsetBlendSpace* C_WeaponAim;//[Offset: 0x710, Size: 0x8]// 0x75a8642900
	AimOffsetBlendSpace* C_WeaponAim_Crouch;//[Offset: 0x718, Size: 0x8]// 0x75a8642980
	AimOffsetBlendSpace* C_WeaponAim_Prone;//[Offset: 0x720, Size: 0x8]// 0x75a8642a00
	AnimSequence* C_InSitu_Walk;//[Offset: 0x728, Size: 0x8]// 0x75a8642a80
	AnimSequence* C_Backward_Walk;//[Offset: 0x730, Size: 0x8]// 0x75a8642b00
	AnimMontage* C_BreakWallAnim;//[Offset: 0x738, Size: 0x8]// 0x75a8642b80
	AnimMontage* C_NormalDeath_Falling;//[Offset: 0x740, Size: 0x8]// 0x75a8642c00
	UAEMonsterAnimListComponentBase* MonsterAnimListComponent;//[Offset: 0x760, Size: 0x8]// 0x75a8642c80
	STExtraAnimFM_Monster_Turning MonsterTurningFM;//[Offset: 0x768, Size: 0x88]// 0x75a8642d00
	bool ShouldSituWalk();// 0x4633300
	void OnWeaponStateChanged(enum CurState);// 0x4633284
	void OnPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x463301c
	void OnPawnBorn(enum PawnState, byte BornType);// 0x4632f64
	void OnLeaveState(enum State);// 0x4632ee8
	void OnEnterState(enum State);// 0x4632e6c
	void OnAnimLoadedFinished(MonsterAsyncloadAnimParams MonsterAsyncloadAnimParams);// 0x4632de4
	bool IsFightrunning();// 0x4632da4
	void HandleStiff(bool Active);// 0x4632d20
	void HandleAnimEventMsg(FString Msg);// 0x4632c9c
	enum GetSPCState();// 0x4632c68
	AnimationAsset* GetMonsterAnimByPoseType(byte PoseType);// 0x4632bdc
	AnimationAsset*[] GetMonsterAnimArrayByPoseType(byte PoseType);// 0x4632b0c
	void CacheParamList(float DeltaSeconds);// 0x4632a88
	void CacheAnimVarList(bool ForceRefreshVar);// 0x4632a04

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]// 0x75a78cef80

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]// 0x75a78cf000
	float AnimLength;//[Offset: 0x8c, Size: 0x4]// 0x75a79329f0
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]// 0x75a78cf080
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]// 0x75a7932a60
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]// 0x75a78cf100
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]// 0x75a78cf200
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]// 0x75a7932ad0
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]// 0x75a78cf300
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]// 0x75a78cf400
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]// 0x75a78cf480

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]// 0x75d100e420
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]// 0x75d0a93a80

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]// 0x75d0a93c80
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 0x4]// 0x75d100e810

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]// 0x75d0a93b00
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]// 0x75d0a93b80
	float RateScale;//[Offset: 0x14, Size: 0x4]// 0x75d100e650

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]// 0x75d100e6c0
	float Weights;//[Offset: 0xc, Size: 0x4]// 0x75d100e730

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]// 0x75d100e490
	float Min;//[Offset: 0x10, Size: 0x4]// 0x75d100e500
	float Max;//[Offset: 0x14, Size: 0x4]// 0x75d100e570
	int GridNum;//[Offset: 0x18, Size: 0x4]// 0x75d100e5e0

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75a78cef00

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: UAEMonsterAnimListComponentBase.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	MonsterAnimPhaseData[] MosterAnimDatas;//[Offset: 0x2d8, Size: 0x10]// 0x75a8537500
	bool bUseRunAnimSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]// 0x75a8537580
	float runAnimSpeed;//[Offset: 0x2ec, Size: 0x4]// 0x75a89bd970
	float runFightingAnimSpeed;//[Offset: 0x2f0, Size: 0x4]// 0x75a89bd9e0
	delegate OnMonsterAnimLoadedFinished;//[Offset: 0x2f8, Size: 0x10]// 0x75a8537600
	void SortAnimations();// 0x475bff4
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x475bf70
	void OnAsyncLoadingFinished(AsyncLoadMonsterAnimParams loadAnimParams);// 0x475bdfc
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x475bd74
	AnimationAsset*[] GetMonsterPhaseAnimAssetsByType(byte PoseType);// 0x475bca4
	MonsterAnimPhaseData[] GetMonsterAnimPhaseDataByType(byte PoseType);// 0x475bb80
	AnimationAsset*[] GetMonsterAnimArrayByType(byte PoseType);// 0x475bab0
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x475b9f0

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x238, Size: 0x10]// 0x75c98a1700
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x248, Size: 0x8]// 0x75c98a1780
	<int,float> moveAnimSpeed;//[Offset: 0x250, Size: 0x50]// 0x75c98b9a40
	float PlayMoveDeathMinimumDist;//[Offset: 0x2a0, Size: 0x4]// 0x75c98b0f30
	delegate OnAnimLoadedFinished;//[Offset: 0x2a8, Size: 0x10]// 0x75c98a1800
	void SortAnimations();// 0x4530f98
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x4530f14
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x4530da0
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x4530ce0

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 0x4]// 0x76121d5f30
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 0x28]// 0x76121d5eb0
	AnimationAsset* AnimHardPtr;//[Offset: 0x30, Size: 0x8]// 0x76121d5e30

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 0x1]// 0x761221a4e0
	FName PhaseName;//[Offset: 0x8, Size: 0x8]// 0x761221a470
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]// 0x761221a3f0
	AnimationAsset* PhaseAnimHardPtr;//[Offset: 0x38, Size: 0x8]// 0x761221a370

--------------------------------
Class: AsyncLoadMonsterAnimParams

--------------------------------
Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 0x1]// 0x7611e2a900

--------------------------------
Class: STExtraAnimFM_Monster_Turning.AnimFunctionModule
	AnimSequence* as_TurnAnim_Left;//[Offset: 0x50, Size: 0x8]// 0x76121e8b30
	AnimSequence* as_TurnAnim_Right;//[Offset: 0x58, Size: 0x8]// 0x76121e8ab0
	bool b_IsTurningLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x76121e8a30
	bool b_IsTurningRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]// 0x76121e89b0
	float TurnResetTimeDefault;//[Offset: 0x64, Size: 0x4]// 0x76121e8940
	float TurnInPlaceAngel;//[Offset: 0x68, Size: 0x4]// 0x76121e88d0
	float MoveMaxSpeedWhenTuring;//[Offset: 0x6c, Size: 0x4]// 0x76121e8860

--------------------------------
Class: AnimFunctionModule
	bool bIsPendingKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x76121410a0
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7612141020
	bool EnableUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7612140fa0
	bool EnableAsyncUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]// 0x7612140f20
	bool EnableOverrideNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]// 0x7612140ea0
	int UpdatePriorty;//[Offset: 0x14, Size: 0x4]// 0x7612140e30
	bool bHasInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7612140db0
	AnimInstanceBase* OwnerAnimInstance;//[Offset: 0x1c, Size: 0x8]// 0x7612140d30
	ScriptStruct* TheStruct;//[Offset: 0x28, Size: 0x8]// 0x7612140cb0
	int LastCachedNeedUpdate;//[Offset: 0x34, Size: 0x4]// 0x7612140c40
	bool CheckRefSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x7612140bc0
	bool CachedNeedAsyncUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]// 0x7612140b40
	bool CachedNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]// 0x7612140ac0
	AnimInstanceBase* CachedUpdateAnimInstance;//[Offset: 0x40, Size: 0x8]// 0x7612140a40
	bool bWriteable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x76121409c0

--------------------------------
Class: SimpleCharAnimParamList
	int IdleBlendSpaceValue;//[Offset: 0x0, Size: 0x4]// 0x76121fd6b0

--------------------------------
Class: SimpleLagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bUsePhysVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]// 0x75a86f6e80

--------------------------------
Class: MonsterBornStateConfig
	enum PawnState;//[Offset: 0x0, Size: 0x1]// 0x76121fd8a0
	int BornType;//[Offset: 0x4, Size: 0x4]// 0x76121fd830
	int FrontBornType;//[Offset: 0x8, Size: 0x4]// 0x76121fd7c0

--------------------------------
Class: MonsterShotGunDamageEventBroadcastData
	ItemDefineID CauserWeaponID;//[Offset: 0x0, Size: 0x18]// 0x76121bdda0
	int DamageEventType;//[Offset: 0x18, Size: 0x4]// 0x76121bdd30
	float[] DamageList;//[Offset: 0x20, Size: 0x10]// 0x76121bdc40
	Pawn* DamageInstigatorPawn;//[Offset: 0x30, Size: 0x8]// 0x76121bdbc0
	bool bIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x76121bdb40

--------------------------------
Class: MonsterStunAttrModitfyConfig
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]// 0x76121fdbb0
	enum Op;//[Offset: 0x10, Size: 0x1]// 0x76121fdab0
	float ModifyValue;//[Offset: 0x14, Size: 0x4]// 0x76121fda40

--------------------------------
Class: MonsterDurationData
	enum DurationType;//[Offset: 0x0, Size: 0x1]// 0x76121fdf50
	float DurationValue;//[Offset: 0x4, Size: 0x4]// 0x76121fdee0

--------------------------------
Class: MonsterClimbData
	enum ClimbPhase;//[Offset: 0x0, Size: 0x1]// 0x76121fe270
	float ClimbLocZ;//[Offset: 0x4, Size: 0x4]// 0x76121fe200

--------------------------------
Class: PartDamageComponent.ActorComponent.Object
	MaterialInterface* HiddenMaterial;//[Offset: 0x158, Size: 0x8]// 0x75a8428480
	SkeletalMesh* damageSkeletalMesh;//[Offset: 0x160, Size: 0x8]// 0x75a8428500
	SkeletalMesh* originSkeletalMesh;//[Offset: 0x168, Size: 0x8]// 0x75a8428580
	bool IsPartDamaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x75a8428600
	PartDamagePair[] PartDamagePairs;//[Offset: 0x178, Size: 0x10]// 0x75a8428700
	void SwitchedToNewPose(enum activePart);// 0x446cb78
	void ProcessDamagePart(enum activePart, bool Active);// 0x446cab0

--------------------------------
Class: PartDamagePair
	bool isDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76121b93d0
	enum partName;//[Offset: 0x1, Size: 0x1]// 0x76121b92d0
	float brokenDamage;//[Offset: 0x4, Size: 0x4]// 0x76121b9260
	float accumDamage;//[Offset: 0x8, Size: 0x4]// 0x76121b91f0
	SoftObjectPath FXPath;//[Offset: 0x10, Size: 0x18]// 0x76121b9170
	FName FXSocket;//[Offset: 0x28, Size: 0x8]// 0x76121b9100
	byte NewPose;//[Offset: 0x30, Size: 0x1]// 0x76121b9080
	FName newAnimListTag;//[Offset: 0x38, Size: 0x8]// 0x76121b9010
	AnimMontage* switchListAnimation;//[Offset: 0x40, Size: 0x8]// 0x76121b8f90
	float switchListTime;//[Offset: 0x48, Size: 0x4]// 0x76121b8f20
	FName MaterialSlotName;//[Offset: 0x50, Size: 0x8]// 0x76121b8eb0
	FString attrModName;//[Offset: 0x58, Size: 0x10]// 0x76121b8e40
	PartDamageAttrModitfyConfig[] attrMods;//[Offset: 0x68, Size: 0x10]// 0x76121b8ac0
	BloodSetting BloodSetting;//[Offset: 0x78, Size: 0x38]// 0x76121b85f0

--------------------------------
Class: PartDamageAttrModitfyConfig
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]// 0x76121b8dd0
	enum Op;//[Offset: 0x10, Size: 0x1]// 0x76121b8cd0
	float ModifyValue;//[Offset: 0x14, Size: 0x4]// 0x76121b8c60

--------------------------------
Class: BloodSetting
	int DecalId;//[Offset: 0x0, Size: 0x4]// 0x76121b8a50
	int decalMaxID;//[Offset: 0x4, Size: 0x4]// 0x76121b89e0
	Rotator decalRotateStartDir;//[Offset: 0x8, Size: 0xc]// 0x76121b8960
	Rotator decalRotateEndDir;//[Offset: 0x14, Size: 0xc]// 0x76121b88e0
	float decalOffsetMinDistance;//[Offset: 0x20, Size: 0x4]// 0x76121b8870
	float decalOffsetMaxDistance;//[Offset: 0x24, Size: 0x4]// 0x76121b8800
	Vector decalScale3D;//[Offset: 0x28, Size: 0xc]// 0x76121b8780
	float decalShowDelay;//[Offset: 0x34, Size: 0x4]// 0x76121b8710

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	bool bHitOtherDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]// 0x7611e69d70

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x14, Size: 0x14]// 0x7611e64970
	Vector Origin;//[Offset: 0x28, Size: 0xc]// 0x7611e648f0
	HitResult[] ComponentHits;//[Offset: 0x38, Size: 0x10]// 0x7611e647f0

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 0x4]// 0x7611e64c50
	float MinimumDamage;//[Offset: 0x4, Size: 0x4]// 0x7611e64be0
	float InnerRadius;//[Offset: 0x8, Size: 0x4]// 0x7611e64b70
	float OuterRadius;//[Offset: 0xc, Size: 0x4]// 0x7611e64b00
	float DamageFalloff;//[Offset: 0x10, Size: 0x4]// 0x7611e64a90

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte MeleeWeaponSubType;//[Offset: 0xb4, Size: 0x1]// 0x7611e684f0
	byte AvatarDamagePosition;//[Offset: 0xb5, Size: 0x1]// 0x7611e68470
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]// 0x7611e683f0

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	Vector FallingSpeed;//[Offset: 0xb4, Size: 0xc]// 0x7611e67f30

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: MutexPair
	AnimMontage* Condition;//[Offset: 0x0, Size: 0x8]// 0x76121ef480
	AnimMontage* mutTarget;//[Offset: 0x8, Size: 0x8]// 0x76121ef400

--------------------------------
Class: PlayerAnimList
	PlayerAnimData ReloadAnim;//[Offset: 0x0, Size: 0x10]// 0x7611e73ad0
	PlayerAnimData ChangePoseAnim;//[Offset: 0x10, Size: 0x10]// 0x7611e73a50
	PlayerAnimData PickUpAnim;//[Offset: 0x20, Size: 0x10]// 0x7611e73840

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x8]// 0x7611e739d0
	float Rate;//[Offset: 0x8, Size: 0x4]// 0x7611e73960

--------------------------------
Class: STExtraAnimMontageData
	AnimMontage* Montage;//[Offset: 0x0, Size: 0x8]// 0x76121ef5a0

--------------------------------
Class: STExtraAnimFM_SubAnimMapReplacer_Weapon.AnimFunctionModule
	bool bSubAnimIsLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]// 0x76121e4fb0
	WeaponAnimTypeConfig CurrentWeaponAnimUID;//[Offset: 0x50, Size: 0x18]// 0x76121e4870

--------------------------------
Class: STExtraAnimFM_Character.AnimFunctionModule
	float PLAYER_TURN_RESET_TIME;//[Offset: 0x90, Size: 0x4]// 0x76121e43a0
	bool b_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]// 0x76121e4320
	Rotator r_ViewRotation;//[Offset: 0x98, Size: 0xc]// 0x76121e42a0
	Rotator r_OwnerRotation;//[Offset: 0xa4, Size: 0xc]// 0x76121e4220
	Rotator r_ControlRotation;//[Offset: 0xbc, Size: 0xc]// 0x76121e41a0
	byte e_LastPoseType;//[Offset: 0xc8, Size: 0x1]// 0x76121e4120
	byte e_PoseType;//[Offset: 0xc9, Size: 0x1]// 0x76121e40a0
	float f_PoseChangeCD;//[Offset: 0xcc, Size: 0x4]// 0x76121e4030
	bool b_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]// 0x76121e3fb0
	bool b_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]// 0x76121e3f30
	float f_CharacterYawRotateRate;//[Offset: 0xd4, Size: 0x4]// 0x76121e3ec0
	float f_CharacterYawRotateRate_Reverse;//[Offset: 0xd8, Size: 0x4]// 0x76121e3e50
	AnimSequence* as_TurnAnim;//[Offset: 0xe0, Size: 0x8]// 0x76121e3dd0
	bool b_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]// 0x76121e3d50
	bool b_IsTurning_PlayAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]// 0x76121e3cd0
	bool b_IsLeftHandBlendAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]// 0x76121e3c50
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]// 0x76121e3bd0
	bool b_IsOnControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]// 0x76121e3b50
	bool b_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]// 0x76121e3ad0
	bool b_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]// 0x76121e3a50
	bool b_WaistFollowingController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 0x1]// 0x76121e39d0
	Rotator r_DeltaRotationYawBetweenControlAndOwner;//[Offset: 0xf0, Size: 0xc]// 0x76121e3950
	Rotator r_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xfc, Size: 0xc]// 0x76121e38d0
	bool b_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]// 0x76121e3850

--------------------------------
Class: STExtraAnimFM_Move.STExtraAnimFM_EventInterface.AnimFunctionModule
	float ReloadMoveSpeed;//[Offset: 0x90, Size: 0x4]// 0x76121e3740
	float MoveDirParachuteLerpSpeed;//[Offset: 0x94, Size: 0x4]// 0x76121e36d0
	float MoveDirNormalLerpSpeed;//[Offset: 0x98, Size: 0x4]// 0x76121e3660
	float SwitchPoseTransTime;//[Offset: 0x9c, Size: 0x4]// 0x76121e35f0
	float ScopeVelocityInterpSpeed;//[Offset: 0xa0, Size: 0x4]// 0x76121e3580
	float SwitchPoseMaxTime;//[Offset: 0xa4, Size: 0x4]// 0x76121e3510
	byte e_MovementMode;//[Offset: 0xa8, Size: 0x1]// 0x76121e3490
	byte e_LastMovementMode;//[Offset: 0xa9, Size: 0x1]// 0x76121e3410
	byte e_CustomMovementMode;//[Offset: 0xaa, Size: 0x1]// 0x76121e3390
	byte e_LastCustomMovementMode;//[Offset: 0xab, Size: 0x1]// 0x76121e3310
	Vector v_MoveVelocity;//[Offset: 0xac, Size: 0xc]// 0x76121e3290
	Vector v_MoveDir;//[Offset: 0xb8, Size: 0xc]// 0x76121e3210
	float MovementBlendTime;//[Offset: 0xc4, Size: 0x4]// 0x76121e31a0
	bool b_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]// 0x76121e3120
	bool b_IsFlyingWithoutParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]// 0x76121e30a0
	bool b_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]// 0x76121e3020
	bool b_SwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 0x1]// 0x76121e2fa0
	float SwitchPoseMaxTimeCounter;//[Offset: 0xcc, Size: 0x4]// 0x76121e2f30
	BlendSpace* bs_MovementBSCache_Stand;//[Offset: 0xd0, Size: 0x8]// 0x76121e2eb0
	BlendSpace* bs_MovementBSCache_Crouch;//[Offset: 0xd8, Size: 0x8]// 0x76121e2e30
	BlendSpace* bs_MovementBSCache_Prone;//[Offset: 0xe0, Size: 0x8]// 0x76121e2db0
	AnimSequence* as_SwitchPose_Stand_To_Crouch;//[Offset: 0xe8, Size: 0x8]// 0x76121e2d30
	AnimSequence* as_SwitchPose_Stand_To_Prone;//[Offset: 0xf0, Size: 0x8]// 0x76121e2cb0
	AnimSequence* as_SwitchPose_Crouch_To_Stand;//[Offset: 0xf8, Size: 0x8]// 0x76121e2c30
	AnimSequence* as_SwitchPose_Crouch_To_Prone;//[Offset: 0x100, Size: 0x8]// 0x76121e2bb0
	AnimSequence* as_SwitchPose_Prone_To_Stand;//[Offset: 0x108, Size: 0x8]// 0x76121e2b30
	AnimSequence* as_SwitchPose_Prone_To_Crouch;//[Offset: 0x110, Size: 0x8]// 0x76121e2ab0
	BlendSpace* bs_MovementBSCache_Stand_Dest;//[Offset: 0x118, Size: 0x8]// 0x76121e2a30
	BlendSpace* bs_MovementBSCache_Crouch_Dest;//[Offset: 0x120, Size: 0x8]// 0x76121e29b0
	BlendSpace* bs_MovementBSCache_Prone_Dest;//[Offset: 0x128, Size: 0x8]// 0x76121e2930
	AnimSequence* as_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x130, Size: 0x8]// 0x76121e28b0
	AnimSequence* as_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x138, Size: 0x8]// 0x76121e2830
	AnimSequence* as_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x140, Size: 0x8]// 0x76121e27b0
	AnimSequence* as_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x148, Size: 0x8]// 0x76121e2730
	AnimSequence* as_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x150, Size: 0x8]// 0x76121e26b0
	AnimSequence* as_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x158, Size: 0x8]// 0x76121e2630
	byte CacheLastPose;//[Offset: 0x160, Size: 0x1]// 0x76121e25b0
	byte CacheNewPose;//[Offset: 0x161, Size: 0x1]// 0x76121e2530

--------------------------------
Class: STExtraAnimFM_EventInterface.AnimFunctionModule

--------------------------------
Class: STExtraAnimFM_Character_Movement.AnimFunctionModule
	float f_FallingVelocityZFactor;//[Offset: 0xa8, Size: 0x4]// 0x76121e2420
	float f_FallingSpeedInScoping_UnLockIK;//[Offset: 0xac, Size: 0x4]// 0x76121e23b0
	Vector v_MoveVelocityInWorldSpace;//[Offset: 0xb0, Size: 0xc]// 0x76121e2330
	float MoveVelocityLength2D;//[Offset: 0xbc, Size: 0x4]// 0x76121e22c0
	bool b_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]// 0x76121e2240
	bool b_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]// 0x76121e21c0
	bool b_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]// 0x76121e2140
	byte e_JumpType;//[Offset: 0xc3, Size: 0x1]// 0x76121e20c0
	bool b_IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]// 0x76121e2040
	bool b_MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]// 0x76121e1fc0
	bool b_EnableMovementUpBodyOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]// 0x76121e1f40
	float b_WalkAdditiveAlpha;//[Offset: 0xc8, Size: 0x4]// 0x76121e1ed0
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]// 0x76121e1e50
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]// 0x76121e1dd0
	bool b_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 0x1]// 0x76121e1d50
	float f_MoveVelocity_X_FallingZFactor;//[Offset: 0xd0, Size: 0x4]// 0x76121e1ce0
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]// 0x76121e1c60
	bool b_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]// 0x76121e1be0
	bool b_MovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]// 0x76121e1b60
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 0x1]// 0x76121e1ae0
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]// 0x76121e1a60
	BlendSpace1D* bs_MovementUpBodyOverride;//[Offset: 0xe0, Size: 0x8]// 0x76121e19e0
	BlendSpace1D* bs_FallingBS;//[Offset: 0xe8, Size: 0x8]// 0x76121e1960
	AnimSequence* as_JumpStart;//[Offset: 0xf0, Size: 0x8]// 0x76121e18e0
	AnimSequence* as_LandLight;//[Offset: 0xf8, Size: 0x8]// 0x76121e1860
	AnimSequence* as_LandHeavy;//[Offset: 0x100, Size: 0x8]// 0x76121e17e0
	CurveFloat* C_FallingIKCurve;//[Offset: 0x108, Size: 0x8]// 0x76121e1760

--------------------------------
Class: STExtraAnimFM_Character_Swim.AnimFunctionModule
	float f_SwimSpeed;//[Offset: 0x60, Size: 0x4]// 0x76121e0910
	bool b_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]// 0x76121e0890
	float f_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0x68, Size: 0x4]// 0x76121e0820
	float f_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0x6c, Size: 0x4]// 0x76121e07b0
	BlendSpace* bs_SwimBS_Up;//[Offset: 0x70, Size: 0x8]// 0x76121e0730
	BlendSpace* bs_SwimBS_Down;//[Offset: 0x78, Size: 0x8]// 0x76121e06b0

--------------------------------
Class: STExtraAnimFM_Weapon.AnimFunctionModule
	bool b_HasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]// 0x76121ef2e0
	byte e_WeaponType;//[Offset: 0x71, Size: 0x1]// 0x76121ef260
	enum e_WeaponTypeNew;//[Offset: 0x72, Size: 0x1]// 0x76121ef160
	byte e_WeaponHoldType;//[Offset: 0x73, Size: 0x1]// 0x76121ef0e0
	byte e_WeaponSingleHandType;//[Offset: 0x74, Size: 0x1]// 0x76121ef060
	enum e_WeaponState;//[Offset: 0x75, Size: 0x1]// 0x76121eef60
	byte e_LastWeaponType;//[Offset: 0x76, Size: 0x1]// 0x76121eeee0
	bool b_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1]// 0x76121eee60
	bool b_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x76121eede0
	bool b_IsUsingFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]// 0x76121eed60
	bool b_IsAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]// 0x76121eece0
	bool b_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]// 0x76121eec60
	bool b_IsMeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]// 0x76121eebe0
	bool b_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]// 0x76121eeb60
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 0x1]// 0x76121eeae0
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 0x1]// 0x76121eea60
	AnimMontage* ReloadMontage;//[Offset: 0x80, Size: 0x8]// 0x76121ee9e0
	AnimMontage* PreFireMontage;//[Offset: 0x88, Size: 0x8]// 0x76121ee960
	AnimSequence* as_IdleAddtive;//[Offset: 0x90, Size: 0x8]// 0x76121ee8e0

--------------------------------
Class: STExtraAnimFM_Weapon_Aim.STExtraAnimFM_EventInterface.AnimFunctionModule
	Rotator r_ScopeAimOffsetStand;//[Offset: 0xb0, Size: 0xc]// 0x76121ec660
	bool b_IsScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]// 0x76121ec5e0
	bool b_IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]// 0x76121ec560
	bool b_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]// 0x76121ec4e0
	byte e_SightType;//[Offset: 0xbf, Size: 0x1]// 0x76121ec460
	bool b_ScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]// 0x76121ec3e0
	float f_RecoilKickADS;//[Offset: 0xc4, Size: 0x4]// 0x76121ec370
	bool b_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]// 0x76121ec2f0
	float f_SightSlowBlendStandBaseAlpha;//[Offset: 0xcc, Size: 0x4]// 0x76121ec280
	bool b_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]// 0x76121ec200
	float Switch_AimBlendSpace_Time;//[Offset: 0xd4, Size: 0x4]// 0x76121ec190
	float Switch_AimBlendSpace_Counter;//[Offset: 0xd8, Size: 0x4]// 0x76121ec120
	bool bAimBlendSpaceChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]// 0x76121ec0a0
	AimOffsetBlendSpace* bs_AimBlendSpace;//[Offset: 0xe0, Size: 0x8]// 0x76121ec020
	AimOffsetBlendSpace* bs_AimBlendSpace_Dest;//[Offset: 0xe8, Size: 0x8]// 0x76121ebfa0
	AimOffsetBlendSpace* bs_AimBlendSpace_DestLast;//[Offset: 0xf0, Size: 0x8]// 0x76121ebf20
	AnimSequence* as_AimSlowPose_Stand;//[Offset: 0xf8, Size: 0x8]// 0x76121ebea0
	AnimSequence* as_AimSlowPose_Crouch;//[Offset: 0x100, Size: 0x8]// 0x76121ebe20

--------------------------------
Class: STExtraAnimFM_Weapon_GunOperation.AnimFunctionModule
	float f_FolderFactorInterpSpeed;//[Offset: 0xc0, Size: 0x4]// 0x76121ee7d0
	float f_HandleFolderAlphaFactor;//[Offset: 0xc4, Size: 0x4]// 0x76121ee760
	float f_FolderAlphaInterpSpeed;//[Offset: 0xc8, Size: 0x4]// 0x76121ee6f0
	int WeaponReloadSlotIndex;//[Offset: 0xcc, Size: 0x4]// 0x76121ee680
	float f_FireAlpha;//[Offset: 0xd0, Size: 0x4]// 0x76121ee610
	bool b_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]// 0x76121ee590
	float f_WeaponState_EQ_Reload;//[Offset: 0xd8, Size: 0x4]// 0x76121ee520
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]// 0x76121ee4a0
	bool b_ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]// 0x76121ee420
	float f_ReloadAnimAdditive_Alpha;//[Offset: 0xe0, Size: 0x4]// 0x76121ee3b0
	float f_ReloadAnimAdditive_Alpha_SpeedIn;//[Offset: 0xe4, Size: 0x4]// 0x76121ee340
	float f_ReloadAnimAdditive_Alpha_SpeedOut;//[Offset: 0xe8, Size: 0x4]// 0x76121ee2d0
	float f_HandleFolderFactor;//[Offset: 0xec, Size: 0x4]// 0x76121ee260
	float f_HandleFolderFactorLerp;//[Offset: 0xf0, Size: 0x4]// 0x76121ee1f0
	float f_ProneHandleAlpha;//[Offset: 0xf4, Size: 0x4]// 0x76121ee180
	float f_HandleFolderAlpha;//[Offset: 0xf8, Size: 0x4]// 0x76121ee110
	bool b_ShouldBlendAimOffsetWhenObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]// 0x76121ee090
	bool b_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]// 0x76121ee010
	bool b_HasObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe, Size: 0x1]// 0x76121edf90
	bool b_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff, Size: 0x1]// 0x76121edf10
	bool b_ShouldFalseHand_LeftObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]// 0x76121ede90
	byte WeaponReloadMethod;//[Offset: 0x101, Size: 0x1]// 0x76121ede10
	Rotator r_RecoilADSRotation;//[Offset: 0x104, Size: 0xc]// 0x76121edd90
	bool b_IsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]// 0x76121edd10
	<enum,int> RandomWeaponAnimSectionIndex;//[Offset: 0x118, Size: 0x50]// 0x76121edaf0
	BlendSpace* bs_ObstructedAnim;//[Offset: 0x168, Size: 0x8]// 0x76121eda70
	AnimMontage* PreFireMontage;//[Offset: 0x170, Size: 0x8]// 0x76121ed9f0
	PlayerAnimData OutPlayerAnimData;//[Offset: 0x178, Size: 0x10]// 0x76121ed970
	SpringArmComponent* ScopeSpringArm;//[Offset: 0x188, Size: 0x8]// 0x76121ed8f0
	bool TempShouldFoldHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193, Size: 0x1]// 0x76121ed870

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2b8, Size: 0x4]// 0x75c991d8e0
	Vector SocketOffset;//[Offset: 0x2bc, Size: 0xc]// 0x75c98fd580
	Vector TargetOffset;//[Offset: 0x2c8, Size: 0xc]// 0x75c98fd600
	float ProbeSize;//[Offset: 0x2d4, Size: 0x4]// 0x75c991d950
	byte ProbeChannel;//[Offset: 0x2d8, Size: 0x1]// 0x75c98fd680
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d9, Size: 0x1]// 0x75c98fd700
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d9, Size: 0x1]// 0x75c98fd780
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d9, Size: 0x1]// 0x75c98fd800
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d9, Size: 0x1]// 0x75c98fd880
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d9, Size: 0x1]// 0x75c98fd900
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d9, Size: 0x1]// 0x75c98fd980
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d9, Size: 0x1]// 0x75c98fda00
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d9, Size: 0x1]// 0x75c98fda80
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2da, Size: 0x1]// 0x75c98fdb00
	float CameraLagSpeed;//[Offset: 0x2dc, Size: 0x4]// 0x75c991d9c0
	float CameraRotationLagSpeed;//[Offset: 0x2e0, Size: 0x4]// 0x75c991da30
	float CameraLagMaxTimeStep;//[Offset: 0x2e4, Size: 0x4]// 0x75c991daa0
	float CameraLagMaxDistance;//[Offset: 0x2e8, Size: 0x4]// 0x75c991db10
	void SetActive(bool bNewActive, bool bReset);// 0x6f2d758
	Rotator GetTargetRotation();// 0x6f2d718
	PrimitiveComponent*[] GetExtraIgnoreCompoents();// 0x6f2d690
	Actor*[] GetExtraIgnoreActors();// 0x6f2d608

--------------------------------
Class: STExtraAnimFM_Weapon_Grenade.AnimFunctionModule
	bool b_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]// 0x76121ec800
	bool b_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]// 0x76121ec780

--------------------------------
Class: STExtraAnimFM_IK.AnimFunctionModule
	orceLockParam ForceLockCopyBone;//[Offset: 0xb0, Size: 0x8]// 0x76121e5ba0
	orceLockTwoParam ForceLockIK;//[Offset: 0xb8, Size: 0xc]// 0x76121e5b20
	float BlendSpeed;//[Offset: 0xc4, Size: 0x4]// 0x76121e5ab0
	bool b_EnableIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]// 0x76121e5a30
	bool B_NeedCopyBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]// 0x76121e59b0
	bool B_CopyHandRBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]// 0x76121e5930
	float LeftHandBlendWeight;//[Offset: 0xcc, Size: 0x4]// 0x76121e58c0
	float RightHandBlendWeight;//[Offset: 0xd0, Size: 0x4]// 0x76121e5850
	<enum,ForceIKState> ForceIKStateMap;//[Offset: 0xd8, Size: 0x50]// 0x76121e5580

--------------------------------
Class: orceLockParam

--------------------------------
Class: orceLockTwoParam.orceLockParam

--------------------------------
Class: ForceIKState

--------------------------------
Class: STExtraAnimFM_Foregrip.AnimFunctionModule
	orceLockParam ForceLockForegrip;//[Offset: 0xb0, Size: 0x8]// 0x76121e6100
	bool b_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]// 0x76121e6080
	bool b_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]// 0x76121e6000
	BlendSpace1D* bs_ForegripAnim;//[Offset: 0xc0, Size: 0x8]// 0x76121e5f80
	float f_ForegripAnimParam;//[Offset: 0xc8, Size: 0x4]// 0x76121e5f10
	float f_BlendForgripWeight;//[Offset: 0xcc, Size: 0x4]// 0x76121e5ea0
	float f_BlendForgripWeight_Left;//[Offset: 0xd0, Size: 0x4]// 0x76121e5e30
	float f_BlendForgripWeight_Right;//[Offset: 0xd4, Size: 0x4]// 0x76121e5dc0
	bool b_ShouldBlendForegripIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]// 0x76121e5d40
	bool b_FPPShouldAdditiveSingleHandleForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]// 0x76121e5cc0

--------------------------------
Class: STExtraAnimFM_ADS.AnimFunctionModule
	Vector FirstAimSpine_StandAndCrouch;//[Offset: 0xa0, Size: 0xc]// 0x76121df530
	Vector FirstAimSpine_Prone;//[Offset: 0xac, Size: 0xc]// 0x76121df4b0
	Vector2D v_ScopeAimRollRangeIN;//[Offset: 0xb8, Size: 0x8]// 0x76121df430
	Vector2D v_ScopeAimRollRangeOut;//[Offset: 0xc0, Size: 0x8]// 0x76121df3b0
	float f_ScopeAimInterSpeed_Spector;//[Offset: 0xc8, Size: 0x4]// 0x76121df340
	Vector FirstAimSpine;//[Offset: 0xcc, Size: 0xc]// 0x76121df2c0
	Rotator r_C_FPPOffsetRotation_half;//[Offset: 0xd8, Size: 0xc]// 0x76121df240
	Vector C_FPPOffsetLocation;//[Offset: 0xe4, Size: 0xc]// 0x76121df1c0
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]// 0x76121df140
	Rotator r_ScopeAimRotation;//[Offset: 0xf4, Size: 0xc]// 0x76121df0c0
	Vector r_ScopeAimTransform;//[Offset: 0x100, Size: 0xc]// 0x76121df040
	STCharacterMovementComponent* pCharacterMovementComponent;//[Offset: 0x158, Size: 0x8]// 0x76121defc0

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bClientAdjustPositionApplyNetworkMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 0x1]// 0x75a815b080
	bool bSendClientAdjustmentUseRealMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ba, Size: 0x1]// 0x75a815b100
	bool bSendClientAdjustmentUseRealVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bb, Size: 0x1]// 0x75a815b180
	bool bServerMoveHandleClientErrorTrustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 0x1]// 0x75a815b200
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bd, Size: 0x1]// 0x75a815b280
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7be, Size: 0x1]// 0x75a815b300
	float CheckPassWallShapeShrinkScale;//[Offset: 0x7c0, Size: 0x4]// 0x75a86b1380
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x7c4, Size: 0x4]// 0x75a86b13f0
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x7c8, Size: 0x4]// 0x75a86b1460
	bool bPassWallAdjustmentIsOpenSecondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 0x1]// 0x75a815b380
	bool bServerPassWallForceSafty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 0x1]// 0x75a815b400
	bool bOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ce, Size: 0x1]// 0x75a815b480
	bool bOpenPassWallPenetratingRevise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cf, Size: 0x1]// 0x75a815b500
	bool bPassWallIgnoreHitPawnBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]// 0x75a815b580
	bool bOpenCombinePassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d1, Size: 0x1]// 0x75a815b600
	bool bServerCheckIfClientAuthorativeUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d2, Size: 0x1]// 0x75a815b680
	bool bPassWallCheckNotMoveStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d3, Size: 0x1]// 0x75a815b700
	float CombinePassWallCheckDeltaTime;//[Offset: 0x7d4, Size: 0x4]// 0x75a86b14d0
	bool bAroundHasDynamicBodybyUseAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]// 0x75a815b780
	float PassWallBoxOverlapCheckHalfExtentWidth;//[Offset: 0x7dc, Size: 0x4]// 0x75a86b1540
	float PassWallBoxOverlapCheckHalfExtentHeight;//[Offset: 0x7e0, Size: 0x4]// 0x75a86b15b0
	float OverlapTestCapsuleScaleWhenUpdateBasedMovement;//[Offset: 0x7e4, Size: 0x4]// 0x75a86b1620
	float MaxPrisonmentMove;//[Offset: 0x7e8, Size: 0x4]// 0x75a86b1690
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ec, Size: 0x1]// 0x75a815b800
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ed, Size: 0x1]// 0x75a815b880
	float TimeThresholdForceLeaveFallingState;//[Offset: 0x7f0, Size: 0x4]// 0x75a86b1700
	float FallingInPlaceDistanceSq;//[Offset: 0x7f4, Size: 0x4]// 0x75a86b1770
	bool bDoSecondCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]// 0x75a815b900
	bool bDoShapeTransformTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 0x1]// 0x75a815b980
	bool bSimulateStaticFallingToWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fa, Size: 0x1]// 0x75a815ba00
	float SlopeHorizontalBoostingScale;//[Offset: 0x868, Size: 0x4]// 0x75a86b17e0
	bool bCombineMoveBagCheckActorNotMoveStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 0x1]// 0x75a815ba80
	bool bCombineMoveBagOverlapTestByDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d, Size: 0x1]// 0x75a815bb00
	bool bIsOpenCheckClientFallingFloorHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86e, Size: 0x1]// 0x75a815cb80
	float CheckClientFallingFloorHitByClientPosXYOffset;//[Offset: 0x870, Size: 0x4]// 0x75a86b1850
	float CheckClientFallingFloorHitByClientPosHeightOffset;//[Offset: 0x874, Size: 0x4]// 0x75a86b18c0
	float CheckClientFallingFloorHitImpactPointOffset;//[Offset: 0x878, Size: 0x4]// 0x75a86b1930
	float CheckClientFallingFloorHitTimeStamp;//[Offset: 0x87c, Size: 0x4]// 0x75a86b19a0
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]// 0x75a815bb80
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x884, Size: 0x4]// 0x75a86b1a10
	float EnterShovelingMoveModeMinTime;//[Offset: 0x888, Size: 0x4]// 0x75a86b1a80
	bool bIsOpenEnterShovelingMoveModeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 0x1]// 0x75a815bc00
	bool bShowEnterShovelingMoveModeBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88d, Size: 0x1]// 0x75a815bc80
	float EnterShovelingMoveModeCheckTimeout;//[Offset: 0x890, Size: 0x4]// 0x75a86b1af0
	float EnterShovelCD;//[Offset: 0x894, Size: 0x4]// 0x75a86b1b60
	float DSEnterShovelCD;//[Offset: 0x898, Size: 0x4]// 0x75a86b1bd0
	float ShovelingCollisionLength;//[Offset: 0x89c, Size: 0x4]// 0x75a86b1c40
	float ShovelingCollisionWidth;//[Offset: 0x8a0, Size: 0x4]// 0x75a86b1cb0
	float ShovelingCollisionHalfHeight;//[Offset: 0x8a4, Size: 0x4]// 0x75a86b1d20
	float MaxShovelFloorAngle;//[Offset: 0x8a8, Size: 0x4]// 0x75a86b1d90
	float UseVelocityDirMinSpeed;//[Offset: 0x8ac, Size: 0x4]// 0x75a86b1e00
	float StandMinEnterShovelingSpeed;//[Offset: 0x8b0, Size: 0x4]// 0x75a86b1e70
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x8b4, Size: 0x4]// 0x75a86b1ee0
	float MaxEnterShovelingHorizontalAngle;//[Offset: 0x8b8, Size: 0x4]// 0x75a86b1f50
	float DefaultShovelingSpeed;//[Offset: 0x8bc, Size: 0x4]// 0x75a86b1fc0
	float DefaultShovelingDCC;//[Offset: 0x8c0, Size: 0x4]// 0x75a86b2030
	float ExtraShovelingDCC1;//[Offset: 0x8c4, Size: 0x4]// 0x75a86b20a0
	float ExtraShovelingDCC2;//[Offset: 0x8c8, Size: 0x4]// 0x75a86b2110
	float ExtraShovelingDCC3;//[Offset: 0x8cc, Size: 0x4]// 0x75a86b2180
	float ConsecutivelyShovelingDCCCD;//[Offset: 0x8d0, Size: 0x4]// 0x75a86b21f0
	float ConsecutivelyShovelingDCC;//[Offset: 0x8d4, Size: 0x4]// 0x75a86b2260
	float ConsecutivelyShovelingEnterDCC1;//[Offset: 0x8d8, Size: 0x4]// 0x75a86b22d0
	float ConsecutivelyShovelingEnterDCC2;//[Offset: 0x8dc, Size: 0x4]// 0x75a86b2340
	float ConsecutivelyShovelingEnterDCC3;//[Offset: 0x8e0, Size: 0x4]// 0x75a86b23b0
	float ConsecutivelyShovelingEnterDCC4;//[Offset: 0x8e4, Size: 0x4]// 0x75a86b2420
	float ConsecutivelyShovelingEndDCC1;//[Offset: 0x8e8, Size: 0x4]// 0x75a86b2490
	float ConsecutivelyShovelingEndDCC2;//[Offset: 0x8ec, Size: 0x4]// 0x75a86b2500
	float ConsecutivelyShovelingEndDCC3;//[Offset: 0x8f0, Size: 0x4]// 0x75a86b2570
	float ConsecutivelyShovelingEndDCC4;//[Offset: 0x8f4, Size: 0x4]// 0x75a86b25e0
	float MinusGradeShovelingACC;//[Offset: 0x8f8, Size: 0x4]// 0x75a86b2650
	float MinusGradeShovelingDCC1;//[Offset: 0x8fc, Size: 0x4]// 0x75a86b26c0
	float MinusGradeShovelingDCC2;//[Offset: 0x900, Size: 0x4]// 0x75a86b2730
	float MaxShovelingSpeed;//[Offset: 0x904, Size: 0x4]// 0x75a86b27a0
	float StopShovelingSpeed;//[Offset: 0x90c, Size: 0x4]// 0x75a86b2810
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x910, Size: 0x4]// 0x75a86b2880
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x914, Size: 0x4]// 0x75a86b28f0
	float EnterShovelingMinHeightInFalling;//[Offset: 0x918, Size: 0x4]// 0x75a86b2960
	float ShovelingTPPFovVaule;//[Offset: 0x91c, Size: 0x4]// 0x75a86b29d0
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x920, Size: 0x4]// 0x75a86b2a40
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x924, Size: 0x4]// 0x75a86b2ab0
	float ShovelingLegBodyMaxAngle;//[Offset: 0x928, Size: 0x4]// 0x75a86b2b20
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x92c, Size: 0x4]// 0x75a86b2b90
	float ShovelingLegFollowBodySpeed;//[Offset: 0x930, Size: 0x4]// 0x75a86b2c00
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x934, Size: 0x4]// 0x75a86b2c70
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x938, Size: 0x4]// 0x75a86b2ce0
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x940, Size: 0x18]// 0x75a815bd00
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x958, Size: 0x8]// 0x75a815bd80
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x960, Size: 0x8]// 0x75a815be00
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x968, Size: 0x8]// 0x75a815be80
	float ShovelCameraModifyFovMinFactor;//[Offset: 0x970, Size: 0x4]// 0x75a86b2d50
	float ShovelCameraModifyOffsetXMinFactor;//[Offset: 0x974, Size: 0x4]// 0x75a86b2dc0
	float ShovelCameraModifyOffsetZMinFactor;//[Offset: 0x978, Size: 0x4]// 0x75a86b2e30
	float ShovelingCoefficient;//[Offset: 0x97c, Size: 0x4]// 0x75a86b2ea0
	float nowShovelingSpeed;//[Offset: 0x980, Size: 0x4]// 0x75a86b2f10
	Rotator ShovelingRotation;//[Offset: 0x984, Size: 0xc]// 0x75a815bf00
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 0x1]// 0x75a815bf80
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 0x1]// 0x75a815c000
	byte ShovelingPrePoseState;//[Offset: 0x992, Size: 0x1]// 0x75a815c080
	float PreShovelFov;//[Offset: 0x994, Size: 0x4]// 0x75a86b2f80
	float AddVelocityLogCDConfig;//[Offset: 0x998, Size: 0x4]// 0x75a86b2ff0
	bool bForceShowCameraLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 0x1]// 0x75a815c100
	float LastClientVelocityNotEqualServerValidTime;//[Offset: 0x9a4, Size: 0x4]// 0x75a86b3060
	MoveStuckCheck MoveStuckCheck;//[Offset: 0xbf0, Size: 0xcf8]// 0x75a815c180
	float DSSendVelocityToTlogCDConfig;//[Offset: 0x18e8, Size: 0x4]// 0x75a86b30d0
	float DSSendClientVelocityNotEqualDSToTlogCDConfig;//[Offset: 0x18f0, Size: 0x4]// 0x75a86b3140
	HitResult LastMoveHit;//[Offset: 0x1910, Size: 0x88]// 0x75a815c200
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b8, Size: 0x1]// 0x75a815c280
	float TimeSpeedFactor;//[Offset: 0x19bc, Size: 0x4]// 0x75a86b31b0
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c0, Size: 0x1]// 0x75a815c300
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c1, Size: 0x1]// 0x75a815c380
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c2, Size: 0x1]// 0x75a815c400
	float MaxPenetrationAdjustmentSize;//[Offset: 0x19c4, Size: 0x4]// 0x75a86b3220
	float JumpOffVelocityFactor;//[Offset: 0x19c8, Size: 0x4]// 0x75a86b3290
	PrimitiveComponent* LastMovementBase;//[Offset: 0x19d0, Size: 0x8]// 0x75a815c480
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d8, Size: 0x1]// 0x75a815c500
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d9, Size: 0x1]// 0x75a815c580
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x19dc, Size: 0x4]// 0x75a86b3300
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x19e0, Size: 0x4]// 0x75a86b3370
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x19e4, Size: 0x4]// 0x75a86b33e0
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x19e8, Size: 0x4]// 0x75a86b3450
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x19ec, Size: 0x4]// 0x75a86b34c0
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x19f0, Size: 0x4]// 0x75a86b3530
	float WalkSpeedCurveScale;//[Offset: 0x19f4, Size: 0x4]// 0x75a86b35a0
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x19f8, Size: 0x8]// 0x75a815c600
	float ProneFloorAngle;//[Offset: 0x1a00, Size: 0x4]// 0x75a86b3610
	float ProneFloorZ;//[Offset: 0x1a04, Size: 0x4]// 0x75a86b3680
	bool bIgnorePawnsBasedOnWhenWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a08, Size: 0x1]// 0x75a815c680
	float JumpFloorAngle;//[Offset: 0x1a0c, Size: 0x4]// 0x75a86b36f0
	float JumpFloorZ;//[Offset: 0x1a10, Size: 0x4]// 0x75a86b3760
	float ResolvePenetrationPosDiffSq;//[Offset: 0x1a14, Size: 0x4]// 0x75a86b37d0
	float ResolvePenetrationAdjustment;//[Offset: 0x1a18, Size: 0x4]// 0x75a86b3840
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1c, Size: 0x1]// 0x75a815c700
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x1a20, Size: 0x4]// 0x75a86b38b0
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x1a24, Size: 0x4]// 0x75a86b3920
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a28, Size: 0x1]// 0x75a815c780
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a28, Size: 0x1]// 0x75a815c800
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x1a2c, Size: 0x4]// 0x75a86b3990
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae0, Size: 0x1]// 0x75a815c880
	float CheckDistanceAhead;//[Offset: 0x1ae4, Size: 0x4]// 0x75a86b3a00
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x1ae8, Size: 0x8]// 0x75a815c900
	ParticleSystem* ShovelingEffectParticle;//[Offset: 0x1af0, Size: 0x8]// 0x75a815c980
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x1af8, Size: 0x8]// 0x75a815ca00
	CacheCriticalVerifyMoveParam[] CacheCriticalVerifyMoveParamList;//[Offset: 0x1b20, Size: 0x10]// 0x75a815cb00
	int CurCacheCriticalVerifyMoveParamIdx;//[Offset: 0x1b30, Size: 0x4]// 0x75a86b3a70
	int MaxMultiJumpCount;//[Offset: 0x1b34, Size: 0x4]// 0x75a86b3ae0
	int CurrentMultiJumpCount;//[Offset: 0x1b38, Size: 0x4]// 0x75a86b3b50
	float MultiJumpSpeed;//[Offset: 0x1b3c, Size: 0x4]// 0x75a86b3bc0
	float LocationDiff;//[Offset: 0x1b40, Size: 0x4]// 0x75a86b3c30
	float LocationInterpSpeed;//[Offset: 0x1b44, Size: 0x4]// 0x75a86b3ca0
	float RotationDiff;//[Offset: 0x1b48, Size: 0x4]// 0x75a86b3d10
	float RotationInterpSpeed;//[Offset: 0x1b4c, Size: 0x4]// 0x75a86b3d80
	float MinMovebaseSpeed;//[Offset: 0x1b50, Size: 0x4]// 0x75a86b3df0
	float SendStuckLogCD;//[Offset: 0x1b54, Size: 0x4]// 0x75a86b3e60
	float MinInStuckTime;//[Offset: 0x1b58, Size: 0x4]// 0x75a86b3ed0
	float NotMoveableDistance;//[Offset: 0x1b5c, Size: 0x4]// 0x75a86b3f40
	float MinMoveableVelocity;//[Offset: 0x1b60, Size: 0x4]// 0x75a86b3fb0
	float CheckInStuckDelayTime;//[Offset: 0x1b64, Size: 0x4]// 0x75a86b4020
	float SendFallingLogCD;//[Offset: 0x1b68, Size: 0x4]// 0x75a86b4090
	float MinInFallingTime;//[Offset: 0x1b6c, Size: 0x4]// 0x75a86b4100
	float MinFallingZChangeDistance;//[Offset: 0x1b70, Size: 0x4]// 0x75a86b4170
	int MaxDSPullCount;//[Offset: 0x1b74, Size: 0x4]// 0x75a86b41e0
	float MaxDSPullTime;//[Offset: 0x1b78, Size: 0x4]// 0x75a86b4250
	float SendDSPullReportCD;//[Offset: 0x1b7c, Size: 0x4]// 0x75a86b42c0
	float ForbidMovementErrorReportAfterTeleportCD;//[Offset: 0x1b80, Size: 0x4]// 0x75a86b4330
	float MinTriggerClientExceedBigDisReportDis;//[Offset: 0x1b84, Size: 0x4]// 0x75a86b43a0
	float MaxTriggerClientExceedBigDisReportDis;//[Offset: 0x1b88, Size: 0x4]// 0x75a86b4410
	float SendClientExceedDisReportCD;//[Offset: 0x1b8c, Size: 0x4]// 0x75a86b4480
	float TriggerTeleportMovementReportDis;//[Offset: 0x1b90, Size: 0x4]// 0x75a86b44f0
	float SendTeleportMovementReportCD;//[Offset: 0x1b94, Size: 0x4]// 0x75a86b4560
	float AllowReportWithinVehicleHitTime;//[Offset: 0x1b98, Size: 0x4]// 0x75a86b45d0
	int MaxClientBaseErrorCount;//[Offset: 0x1b9c, Size: 0x4]// 0x75a86b4640
	float SendClientBaseErrorReportCD;//[Offset: 0x1ba0, Size: 0x4]// 0x75a86b46b0
	FName ClientBaseTag;//[Offset: 0x1ba8, Size: 0x8]// 0x75a86b4720
	int MaxClientBaseDisZ;//[Offset: 0x1bb0, Size: 0x4]// 0x75a86b4790
	int MaxClientBaseDisType1;//[Offset: 0x1bb4, Size: 0x4]// 0x75a86b4800
	int MaxClientBaseDisType2;//[Offset: 0x1bb8, Size: 0x4]// 0x75a86b4870
	int MaxClientBaseDisType3;//[Offset: 0x1bbc, Size: 0x4]// 0x75a86b48e0
	int MaxClientBaseDisType4;//[Offset: 0x1bc0, Size: 0x4]// 0x75a86b4950
	int MaxClientBaseDisType5;//[Offset: 0x1bc4, Size: 0x4]// 0x75a86b49c0
	int MaxClientBaseDisType6;//[Offset: 0x1bc8, Size: 0x4]// 0x75a86b4a30
	class CustomMovementManager* CustomMovementMagagerCls;//[Offset: 0x1bd0, Size: 0x8]// 0x75a815cc00
	class CustomMovementManager* CustomMovementMagagerClsPtr;//[Offset: 0x1bd8, Size: 0x28]// 0x75a815cc80
	CustomMovementBase* CurrentCustomMovement;//[Offset: 0x1c00, Size: 0x8]// 0x75a815cd00
	CustomMovementManager* CustomMovementManager;//[Offset: 0x1c08, Size: 0x8]// 0x75a815cd80
	STCharacterMovementMonitor* MovementMonitor;//[Offset: 0x1c10, Size: 0x8]// 0x75a815ce00
	int ServerPlayerClientMoveInfoCacheFrameNum;//[Offset: 0x1c44, Size: 0x4]// 0x75a86b4aa0
	bool UpdateShovelingState();// 0x4560f08
	bool UpdateShovelingHoldState(bool ishold);// 0x4560e70
	void UpdateConsecutivelyShovelingCount();// 0x4560e5c
	bool TryMultiJump();// 0x4560e24
	FString ToStringHasLocation(FString Subtitle);// 0x4560d40
	FString ToStringHasExtendInfoHasMiddleSimply(FString Subtitle, FString MiddleSimplyStr, bool bIsShowMesh);// 0x4560bd0
	FString ToStringHasExtendInfo(FString Subtitle);// 0x4560aec
	void StopShoveling();// 0x4560ad8
	void ShowSinglePersonMoveLog_BP(int CallType, int ShowMoveLogFlag, int ShowMoveLogCharacterFlag, float ShowMoveLogMaxTime);// 0x45609ac
	bool ShouldTakeFallingDamage();// 0x4560974
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x45608c4
	void SetShovelEnabledFlags(enum InShovelEnabledFlags);// 0x4560848
	void SetProneFloorZ(float InProneFloorZ);// 0x45607cc
	void SetProneFloorAngle(float InProneFloorAngle);// 0x4560750
	void SetJumpFloorZ(float InJumpFloorZ);// 0x45606d4
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x4560658
	void SetIsInShovelingAnimation(bool Value);// 0x45605d4
	void SetCustomMovementEnable(byte _CustomMovementMode, bool bEnable);// 0x4560514
	void SetConsecutivelyShovelingCount(int ConsecutivelyShovelingCount);// 0x456049c
	void ServerMoveFloor(float TimeStamp, Actor* HitActor, PrimitiveComponent* HitComp, Vector ImpactPoint, Vector ImpactNormal, byte ClientMovementMode);// 0x45602a4
	void ServerMoveEx(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, const ServerMoveExtraParams ExtraParams);// 0x455ffa4
	void ServerMoveDualEx(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, const ServerMoveDualExtraParams ExtraParams);// 0x455fb80
	void ServerAddVelocity(int AddType, int64 ClientTime, const byte ClientMovementMode, const Vector AddVelocity, FString InExtendStr);// 0x455f9c0
	void SendLevelTime(float LevelTime);// 0x455f920
	void ResetEnterShovelingMoveModeTime();// 0x455f8c4
	void PrintSmoothClientData(FString Title, FString Subtitle, bool bShippingPrint);// 0x455f7a8
	void PrintHit(FString Title, FString Subtitle, out const HitResult Hit, bool bShippingPrint);// 0x455f61c
	void PrintExtendInfoHasMiddleSimply(FString Title, FString Subtitle, FString MiddleSimplyStr, FString EndStr, bool bIsShowMesh, bool bIsShowCamera, bool bShippingPrint);// 0x455f3e0
	void PrintCurrentFloor(FString Title, FString Subtitle, bool bShippingPrint);// 0x455f2c4
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x455f1f8
	void OnRespawned();// 0x455f1dc
	void OnRecycled();// 0x455f1c0
	void OnRecoverOnServer();// 0x455f1a4
	void OnPreReconnectOnServer();// 0x455f190
	void OnActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x455f038
	float K2_GetProneFloorZ();// 0x455f004
	float K2_GetProneFloorAngle();// 0x455efd0
	float K2_GetJumpFloorZ();// 0x455ef9c
	float K2_GetJumpFloorAngle();// 0x455ef68
	bool IsWalkable(out const HitResult Hit);// 0x455eeac
	bool IsUseVelocityDirByShoveling();// 0x455ee74
	bool IsToFloorDisInShovelingRange();// 0x455ee3c
	bool IsProning();// 0x455ee04
	bool IsInShovelingAnimation();// 0x455edcc
	bool IsInShoveling();// 0x455ed94
	bool IsCanEnterShoveling();// 0x455ed5c
	FString GetToString();// 0x455ecd4
	float GetStopShovelingSpeed();// 0x455eca0
	STExtraBaseCharacter* GetSTCharacter();// 0x455ec6c
	float GetShovelingNowDCC(float DeltaTime);// 0x455ebe0
	float GetShovelingMaxDis();// 0x455ebac
	float GetShovelingBaseSpeed();// 0x455eb78
	float GetShovelingBaseDCCFactor();// 0x455eb44
	enum GetShovelEnabledFlags();// 0x455eb10
	float GetPawnRealVelocity();// 0x455eadc
	float GetMaxShovelingSpeed();// 0x455eaa8
	float GetLastServerMoveTime();// 0x455ea74
	bool GetIsOpenShovelingAbility();// 0x455ea3c
	bool GetIsOpenLongPressShovelingAbility();// 0x455ea04
	bool GetIsOpenCrouchShovelingAbility();// 0x455e9cc
	float GetEnterShovelingMoveModeMinTime();// 0x455e998
	float GetDefaultShovelingSpeed();// 0x455e964
	CustomMovementBase* GetCustomMovementInstance(byte _CustomMovementMode);// 0x455e8d8
	float GetConsecutivelyShovelingEnterDCC();// 0x455e8a4
	float GetConsecutivelyShovelingEndDCC();// 0x455e870
	int GetConsecutivelyShovelingCount();// 0x455e854
	void EnterShoveling();// 0x455e840
	void DSSendVelocityToTlog(out const byte ClientMovementMode, out const Vector ClientVelocity);// 0x455e750
	bool DragOnGround(float DeltaTime);// 0x455e6c0
	void DoMultiJump();// 0x455e670
	void ClientVeryShortAdjustPositionReliable(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x455e468
	void ClientVeryShortAdjustPositionAndRotationReliable(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x455e224
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x455dfe0
	void ClientSetShovelEnabledFlags(enum InShovelEnabledFlags);// 0x455df5c
	void ClientAdjustPositionWithCustomMovement(uint32 FrameCount, float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode, const byte[] Param);// 0x455dc8c
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x455da00
	void ClientAdjustLocationAndRotation(Vector NewLocation, Vector NewVelocity, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x455d7f0
	void ClientAdjustCustomMovement(uint32 FrameCount, const byte[] Param);// 0x455d724
	void ClientAddVelocity(int AddType, out const Vector AddVelocity, FString InExtendStr);// 0x455d5fc
	void ChangePhysxShapeFlag();// 0x455d5e8
	bool CanJump();// 0x455d5b0
	void CalcShovelingVelocity(float DeltaTime);// 0x455d534

--------------------------------
Class: MoveStuckCheck

--------------------------------
Class: CacheCriticalVerifyMoveParam
	int ClientFrame;//[Offset: 0x0, Size: 0x4]// 0x7611e42890
	Vector PlayerLoc;//[Offset: 0x4, Size: 0xc]// 0x7611e42810
	bool bIsHandFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611e42790
	bool bGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611e42710
	Vector CameraLoc;//[Offset: 0x14, Size: 0xc]// 0x7611e42690
	float CameraPitch;//[Offset: 0x20, Size: 0x4]// 0x7611e42620
	float CameraYaw;//[Offset: 0x24, Size: 0x4]// 0x7611e425b0
	float CacheWorldTimeSec;//[Offset: 0x28, Size: 0x4]// 0x7611e42540
	FString ExtraInfo;//[Offset: 0x30, Size: 0x10]// 0x7611e424d0

--------------------------------
Class: CustomMovementManager.Object
	<byte,class CustomMovementBase> CustomMovementClsMap;//[Offset: 0x28, Size: 0x50]// 0x75b4de8240
	<byte,CustomMovementBase*> CustomMovementMap;//[Offset: 0x78, Size: 0x50]// 0x75b4de8300
	STCharacterMovementComponent* MovementOwner;//[Offset: 0xc8, Size: 0x8]// 0x75b4de2d00
	void UpdateMovementOwner(STCharacterMovementComponent* _MovementOwner);// 0x429765c
	void OnRespawned();// 0x4297640
	void OnRecycled();// 0x4297624
	CustomMovementBase* GetMovementInstance(byte CustomMovementMode);// 0x4297598
	class Object GetMovementClass(byte CustomMovementMode);// 0x429750c

--------------------------------
Class: CustomMovementBase.Object
	float AllowablePositionError;//[Offset: 0x28, Size: 0x4]// 0x75b4e0a470
	STCharacterMovementComponent* MovementOwner;//[Offset: 0x30, Size: 0x8]// 0x75b4de4000
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x38, Size: 0x8]// 0x75b4de4080

--------------------------------
Class: STCharacterMovementMonitor.Object
	STCharacterMovementComponent* MovementOwner;//[Offset: 0x28, Size: 0x8]// 0x75a815ae80
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x30, Size: 0x8]// 0x75a815af00
	STExtraPlayerController* ControllerOwner;//[Offset: 0x38, Size: 0x8]// 0x75a815af80

--------------------------------
Class: ServerMoveExtraParams
	float ClientWorldTime;//[Offset: 0x0, Size: 0x4]// 0x76121dcfa0
	float MaxMoveSpeed;//[Offset: 0x4, Size: 0x4]// 0x76121dcf30
	Vector_NetQuantize10 ClientVelocity;//[Offset: 0x8, Size: 0xc]// 0x76121dceb0
	uint32 ServerMoveID;//[Offset: 0x14, Size: 0x4]// 0x76121dce40
	uint16 ClientFrame;//[Offset: 0x18, Size: 0x2]// 0x76121dcdd0
	bool bIsHandFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]// 0x76121dcd50
	bool bGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]// 0x76121dccd0
	uint32 CameraYawPitch;//[Offset: 0x1c, Size: 0x4]// 0x76121dcc60
	bool bEnableCriticalVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x76121dcbe0
	byte CustomFlag;//[Offset: 0x21, Size: 0x1]// 0x76121dcb60

--------------------------------
Class: ServerMoveDualExtraParams
	float ClientWorldTime;//[Offset: 0x0, Size: 0x4]// 0x76121dd380
	float MaxMoveSpeed;//[Offset: 0x4, Size: 0x4]// 0x76121dd310
	Vector_NetQuantize10 PendingClientVelocity;//[Offset: 0x8, Size: 0xc]// 0x76121dd290
	Vector_NetQuantize10 ClientVelocity;//[Offset: 0x14, Size: 0xc]// 0x76121dd210
	uint32 FrameCount;//[Offset: 0x20, Size: 0x4]// 0x76121dd1a0
	uint32 ServerMoveID;//[Offset: 0x24, Size: 0x4]// 0x76121dd130
	byte CustomFlag;//[Offset: 0x28, Size: 0x1]// 0x76121dd0b0

--------------------------------
Class: STExtraAnimFM_Parachute.AnimFunctionModule
	byte ParachuteState;//[Offset: 0x60, Size: 0x1]// 0x76121e9c40
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]// 0x76121e9bc0
	Rotator r_DeltaViewOffset;//[Offset: 0x64, Size: 0xc]// 0x76121e9b40

--------------------------------
Class: STExtraAnimFM_Character_Hurt.AnimFunctionModule
	bool b_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x76121e0b20
	Vector v_HurtDir;//[Offset: 0x64, Size: 0xc]// 0x76121e0aa0
	BlendSpace* bs_HitBlendSpace;//[Offset: 0x78, Size: 0x8]// 0x76121e0a20

--------------------------------
Class: STExtraAnimFM_Character_Death.AnimFunctionModule
	bool bEnableMovementChangedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]// 0x76121e0590
	float SwitchPoseTransTime;//[Offset: 0x4c, Size: 0x4]// 0x76121e0520
	float MovementBlendTime;//[Offset: 0x50, Size: 0x4]// 0x76121e04b0
	bool b_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]// 0x76121e0430
	bool b_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]// 0x76121e03b0
	bool b_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]// 0x76121e0330
	float f_EnterNearDeathCDTime;//[Offset: 0x58, Size: 0x4]// 0x76121e02c0
	BlendSpace* BS_MovementBSCache_Death;//[Offset: 0x60, Size: 0x8]// 0x76121e0240
	BlendSpace* BS_MovementBSCache_Death_Dest;//[Offset: 0x68, Size: 0x8]// 0x76121e01c0

--------------------------------
Class: STExtraAnimFM_Character_EyeWatch.AnimFunctionModule
	float NeckTurnSpeed;//[Offset: 0x70, Size: 0x4]// 0x76121e14b0
	float NeckNotTurnAngle;//[Offset: 0x74, Size: 0x4]// 0x76121e1440
	float NeckTurnUILeftAngle;//[Offset: 0x78, Size: 0x4]// 0x76121e13d0
	float NeckTurnUIRightAngle;//[Offset: 0x7c, Size: 0x4]// 0x76121e1360
	float NeckTurnUIUPAngle;//[Offset: 0x80, Size: 0x4]// 0x76121e12f0
	float NeckTurnUIDownAngle;//[Offset: 0x84, Size: 0x4]// 0x76121e1280
	float NeckMapAngleUp;//[Offset: 0x88, Size: 0x4]// 0x76121e1210
	float NeckMapAngleDown;//[Offset: 0x8c, Size: 0x4]// 0x76121e11a0
	float NeckMapCrouchAngleUp;//[Offset: 0x90, Size: 0x4]// 0x76121e1130
	float NeckMapCrouchAngleDown;//[Offset: 0x94, Size: 0x4]// 0x76121e10c0
	float NeckMapAngleDefault_Horizon;//[Offset: 0x98, Size: 0x4]// 0x76121e1050
	float NeckMapAngleDefault_Portrait;//[Offset: 0x9c, Size: 0x4]// 0x76121e0fe0
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xa0, Size: 0x4]// 0x76121e0f70
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xa4, Size: 0x4]// 0x76121e0f00
	float NeckMapAngleLeft;//[Offset: 0xa8, Size: 0x4]// 0x76121e0e90
	float NeckMapAngleRight;//[Offset: 0xac, Size: 0x4]// 0x76121e0e20
	float NeckMapCrouchAngleLeft;//[Offset: 0xb0, Size: 0x4]// 0x76121e0db0
	float NeckMapCrouchAngleRight;//[Offset: 0xb4, Size: 0x4]// 0x76121e0d40
	bool b_ApplyTurnAroundAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]// 0x76121e0cc0
	Rotator r_HeadRotOffset;//[Offset: 0xbc, Size: 0xc]// 0x76121e0c40

--------------------------------
Class: STExtraAnimFM_Character_Hair.AnimFunctionModule
	bool b_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x76121e1640
	Vector v_MoveVelocityInWorldSpaceReverse;//[Offset: 0x64, Size: 0xc]// 0x76121e15c0

--------------------------------
Class: STExtraAnimFM_Shoveling.AnimFunctionModule
	AnimForShovel AnimForShovel;//[Offset: 0x70, Size: 0x120]// 0x76121e6790
	Rotator ShovelingRotation;//[Offset: 0x190, Size: 0xc]// 0x76121e6710
	Rotator UpShovelingRotationAdd;//[Offset: 0x19c, Size: 0xc]// 0x76121e6690
	Rotator ShovelingRotationCS;//[Offset: 0x1a8, Size: 0xc]// 0x76121e6610
	Rotator UpShovelingRotationAddCS;//[Offset: 0x1b4, Size: 0xc]// 0x76121e6590
	Rotator FloorRotation;//[Offset: 0x1c0, Size: 0xc]// 0x76121e6510
	AnimSequence* ShovelEnterAnim;//[Offset: 0x1d0, Size: 0x8]// 0x76121e6490
	AnimSequence* ShovelLoopAnim;//[Offset: 0x1d8, Size: 0x8]// 0x76121e6410
	AnimSequence* ShovelLeaveAnim;//[Offset: 0x1e0, Size: 0x8]// 0x76121e6390
	bool bIsFppAndHasGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]// 0x76121e6310
	float ShovelingBaseDCCFactorMin;//[Offset: 0x1ec, Size: 0x4]// 0x76121e62a0
	STCharacterMovementComponent* pCharacterMovementComponent;//[Offset: 0x1f0, Size: 0x8]// 0x76121e6220

--------------------------------
Class: AnimForShovel
	BlendSpace1D* bs1_ShovelAnim;//[Offset: 0x0, Size: 0x8]// 0x76121e6e30
	BlendSpace* bs_ShovelAnim_Floor;//[Offset: 0x8, Size: 0x8]// 0x76121e6db0
	BlendSpace1D* bs1_ShovelAnim_Pitch;//[Offset: 0x10, Size: 0x8]// 0x76121e6d30
	BlendSpace1D* bs1_ShovelAnim_Unarm;//[Offset: 0x18, Size: 0x8]// 0x76121e6cb0
	BlendSpace* bs_ShovelAnim_Unarm_Floor;//[Offset: 0x20, Size: 0x8]// 0x76121e6c30
	AnimSequence* se_ShovelAnim_F;//[Offset: 0x28, Size: 0x8]// 0x76121e6bb0
	AnimationAsset* bs1_Shovel;//[Offset: 0x30, Size: 0x28]// 0x76121e6b30
	AnimationAsset* bs_Shovel_Floor;//[Offset: 0x58, Size: 0x28]// 0x76121e6ab0
	AnimationAsset* bs1_Shovel_Pitch;//[Offset: 0x80, Size: 0x28]// 0x76121e6a30
	AnimationAsset* bs1_Shovel_Unarm;//[Offset: 0xa8, Size: 0x28]// 0x76121e69b0
	AnimationAsset* bs_Shovel_Unarm_Floor;//[Offset: 0xd0, Size: 0x28]// 0x76121e6930
	AnimationAsset* se_Shovel_F;//[Offset: 0xf8, Size: 0x28]// 0x76121e68b0

--------------------------------
Class: STExtraAnimFM_WeaponDrop.AnimFunctionModule
	float AimBlendSpaceAlpha;//[Offset: 0x90, Size: 0x4]// 0x76121ecd20

--------------------------------
Class: STExtraAnimFM_LOD.AnimFunctionModule
	byte u_LODLevel;//[Offset: 0x49, Size: 0x1]// 0x76121e5460
	bool b_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]// 0x76121e53e0
	bool b_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]// 0x76121e5360
	float LODLevel2DistanceFactorMin;//[Offset: 0x4c, Size: 0x4]// 0x76121e52f0
	float LODLevel2DistanceFactorMax;//[Offset: 0x50, Size: 0x4]// 0x76121e5280
	float LODLevel1DistanceFactorMax;//[Offset: 0x54, Size: 0x4]// 0x76121e5210

--------------------------------
Class: VehicleWheelEffectWrapper
	ParticleSystemComponent*[] WheelEffect;//[Offset: 0x0, Size: 0x10]// 0x76121f01f0

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x510, Size: 0x4]// 0x75a859c3b0
	float MaxQuadLength;//[Offset: 0x514, Size: 0x4]// 0x75a859c420
	float QuadDirectionAcceptAngle;//[Offset: 0x518, Size: 0x4]// 0x75a859c490
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x520, Size: 0x8]// 0x75a8553000
	float DefaultTrailWidth;//[Offset: 0x528, Size: 0x4]// 0x75a859c500
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]// 0x75a8553080
	float DefaultTrailLength;//[Offset: 0x530, Size: 0x4]// 0x75a859c570
	float TextureLength;//[Offset: 0x534, Size: 0x4]// 0x75a859c5e0
	int USegmentNum;//[Offset: 0x538, Size: 0x4]// 0x75a859c650
	int CoordU;//[Offset: 0x53c, Size: 0x4]// 0x75a859c6c0
	int SlippingCoordU;//[Offset: 0x540, Size: 0x4]// 0x75a859c730
	int BrokenCoordU;//[Offset: 0x544, Size: 0x4]// 0x75a859c7a0
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]// 0x75a8553100
	float AdditionalTrailWidth;//[Offset: 0x54c, Size: 0x4]// 0x75a859c810
	float AdditionalTextureLength;//[Offset: 0x550, Size: 0x4]// 0x75a859c880
	int AdditionalCoordU;//[Offset: 0x554, Size: 0x4]// 0x75a859c8f0
	int AdditionalSlippingCoordU;//[Offset: 0x558, Size: 0x4]// 0x75a859c960
	int AdditionalBrokenCoordU;//[Offset: 0x55c, Size: 0x4]// 0x75a859c9d0
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]// 0x75a8553180
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x568, Size: 0x8]// 0x75a8553200
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x472ad5c
	void StopUpdate();// 0x472ad48
	bool IsUpdating();// 0x472ad10

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x6d8, Size: 0x10]// 0x761212e450
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]// 0x761212e3d0
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 0x1]// 0x761212e350
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ea, Size: 0x1]// 0x761212e2d0
	enum CollisionMode;//[Offset: 0x6eb, Size: 0x1]// 0x761212e170
	BodySetup* BodySetup;//[Offset: 0x6f0, Size: 0x8]// 0x761212e0f0
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x728, Size: 0x10]// 0x761212dd60
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x738, Size: 0x10]// 0x761212da40
	BoxSphereBounds LocalBounds;//[Offset: 0x748, Size: 0x1c]// 0x761212d9c0
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x768, Size: 0x58]// 0x761212d8a0
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x7c0, Size: 0x10]// 0x761212d7a0
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x7dbf82c
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x7dbf708
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x7dbf648
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x7dbf588
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x7dbf4c8
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x7dbf390
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	bool IsMeshSectionVisible(int SectionIndex);// 0x7dbf300
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x7dbf270
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x7dbf1e0
	int GetNumSections();// 0x7dbf1ac
	int GetLastSectionIndex();// 0x7dbf178
	int FirstAvailableMeshSectionIndex();// 0x7dbf144
	void EndBatchUpdates();// 0x7dbf130
	bool DoesSectionExist(int SectionIndex);// 0x7dbf0a0
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x7dbec60
	void CookCollisionNow();// 0x7dbec4c
	void ClearMeshSection(int SectionIndex);// 0x7dbebd0
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x7dbeb54
	void ClearCollisionConvexMeshes();// 0x7dbeb40
	void ClearAllMeshSections();// 0x7dbeb2c
	void ClearAllMeshCollisionSections();// 0x7dbeb18
	void BeginBatchUpdates();// 0x7dbeafc
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x7dbea20

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 0x10]// 0x761212dff0
	int[] IndexBuffer;//[Offset: 0x10, Size: 0x10]// 0x761212df00

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 0x10]// 0x761212dc60
	Box BoundingBox;//[Offset: 0x10, Size: 0x1c]// 0x761212dbe0

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]// 0x761212b400
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x761212b380

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x761220b300
	Transform Trans;//[Offset: 0x10, Size: 0x30]// 0x761220b280
	Vector Normal;//[Offset: 0x40, Size: 0xc]// 0x761220b200
	enum Type;//[Offset: 0x4c, Size: 0x1]// 0x761220b100
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]// 0x761220b080

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x30, Size: 0x10]// 0x75a8475180

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 0x8]// 0x7612312000
	AkAudioEvent* EventStart;//[Offset: 0x8, Size: 0x8]// 0x7612311f80
	AkAudioEvent* EventStop;//[Offset: 0x10, Size: 0x8]// 0x7612311f00

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x58, Size: 0x8]// 0x7612202420

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AKComp;//[Offset: 0x0, Size: 0x8]// 0x76121f0520
	<uint32,float> MapRTPC;//[Offset: 0x8, Size: 0x50]// 0x76121f0390

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2f8, Size: 0x8]// 0x75a824a500
	FString EarlyReflectionAuxBusName;//[Offset: 0x300, Size: 0x10]// 0x75a825a5b0
	int EarlyReflectionOrder;//[Offset: 0x310, Size: 0x4]// 0x75a825a620
	float EarlyReflectionBusSendGain;//[Offset: 0x314, Size: 0x4]// 0x75a825a690
	float EarlyReflectionMaxPathLength;//[Offset: 0x318, Size: 0x4]// 0x75a825a700
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]// 0x75a824a580
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]// 0x75a824a600
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]// 0x75a824a680
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1]// 0x75a824a700
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]// 0x75a824a780
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x322, Size: 0x1]// 0x75a824a800
	bool bForceUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x322, Size: 0x1]// 0x75a824a880
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x322, Size: 0x1]// 0x75a824a900
	float AttenuationScalingFactor;//[Offset: 0x330, Size: 0x4]// 0x75a825a770
	float OcclusionRefreshInterval;//[Offset: 0x334, Size: 0x4]// 0x75a825a7e0
	AkAudioEvent* AkAudioEvent;//[Offset: 0x338, Size: 0x8]// 0x75a824a980
	FString EventName;//[Offset: 0x340, Size: 0x10]// 0x75a825a850
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x779821c
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x7797f54
	void StopPlayingID(int StopEventID);// 0x7797ed8
	void Stop();// 0x7797ec4
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x7797d5c
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x7797cd8
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x7797bc4
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x7797a74
	void SetOutputBusVolume(float BusVolume);// 0x77979f8
	void SetListeners(out const AkComponent*[] Listeners);// 0x7797964
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x77978e8
	void SetAutoDestroy(bool in_AutoDestroy);// 0x7797868
	void SetAttenuationScalingFactor(float Value);// 0x77977ec
	void PostTrigger(FString Trigger);// 0x7797714
	int PostAssociatedAkEvent();// 0x77976e0
	int PostAkEventByName(FString in_EventName);// 0x779764c
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x7797578
	bool IsStart();// 0x779755c
	bool HasActiveEvents();// 0x7797524
	float GetAttenuationRadius();// 0x77974f0

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]// 0x75a824b280

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x58, Size: 0x8]// 0x76121f06c0
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x60, Size: 0x8]// 0x76121f0640

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 0x1]// 0x76121f09a0
	int8 ThrottleInput;//[Offset: 0x1, Size: 0x1]// 0x76121f0930
	int8 BrakeInput;//[Offset: 0x2, Size: 0x1]// 0x76121f08c0
	int8 HandbrakeInput;//[Offset: 0x3, Size: 0x1]// 0x76121f0850
	int8 CurrentGear;//[Offset: 0x4, Size: 0x1]// 0x76121f07e0

--------------------------------
Class: VehiclePostPhysxTick.TickFunction

--------------------------------
Class: PopKartPassDoorAccelerate
	bool CanUsePassDoorAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76122035d0
	float PassAcceleratePercent;//[Offset: 0x4, Size: 0x4]// 0x7612203560
	float MaxSpeed;//[Offset: 0x8, Size: 0x4]// 0x76122034f0
	float minSpeed;//[Offset: 0xc, Size: 0x4]// 0x7612203480

--------------------------------
Class: PlayerLevel
	float CurrentExp;//[Offset: 0x0, Size: 0x4]// 0x7611f29bf0
	float LevelUpExp;//[Offset: 0x4, Size: 0x4]// 0x7611f29b80
	float LastLevelUpExp;//[Offset: 0x8, Size: 0x4]// 0x7611f29b10
	int CurrentLevel;//[Offset: 0xc, Size: 0x4]// 0x7611f29aa0
	int NextLevel;//[Offset: 0x10, Size: 0x4]// 0x7611f29a30
	float TotalDamage;//[Offset: 0x14, Size: 0x4]// 0x7611f299c0

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x510, Size: 0x8]// 0x75bcabcb80
	int DecalId;//[Offset: 0x518, Size: 0x4]// 0x75bdd589f0
	IdeaDecalInfo DecalInfo;//[Offset: 0x520, Size: 0x70]// 0x75bcabcc00
	STExtraPlayerState* OwnerPS;//[Offset: 0x590, Size: 0x8]// 0x75bcabcc80
	void OnRep_DecalInfo();// 0x43bdb8c
	void HandleSkeletalmeshChanged(int PredicatedLOD);// 0x43bdb10

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 0x4]// 0x7611e9bed0
	Transform Transform;//[Offset: 0x10, Size: 0x30]// 0x7611e9be50
	enum ParentType;//[Offset: 0x50, Size: 0x1]// 0x7611e9bcf0
	PrimitiveComponent* Parent;//[Offset: 0x54, Size: 0x8]// 0x7611e9bc70

--------------------------------
Class: HunterTaskTeamMgr.Actor.Object
	int MapMarkItemID;//[Offset: 0x510, Size: 0x4]// 0x75bdd58c20
	int MapScanerItemID;//[Offset: 0x514, Size: 0x4]// 0x75bdd58c90
	int HuntTaskTimeOut;//[Offset: 0x518, Size: 0x4]// 0x75bdd58d00
	int HuntTaskID;//[Offset: 0x51c, Size: 0x4]// 0x75bdd58d70
	float HuntTaskScanInterval;//[Offset: 0x520, Size: 0x4]// 0x75bdd58de0
	HunterTaskListener* HunterTaskListener;//[Offset: 0x528, Size: 0x8]// 0x75bcabd480
	HuntedTeammateInfo[] BeingHuntedPlayersInTeam;//[Offset: 0x530, Size: 0x10]// 0x75bcabd580
	HuntTargetInfo TargetHuntedPlayer;//[Offset: 0x540, Size: 0x1c]// 0x75bcabd600
	HuntTargetRepInfo[] HuntTargetRepInfoList;//[Offset: 0x560, Size: 0x10]// 0x75bcabd700
	HuntTaskPickerInfo HuntPickerInfo;//[Offset: 0x570, Size: 0x14]// 0x75bcabd780
	int[] LocalMapMarkIDList;//[Offset: 0x588, Size: 0x10]// 0x75bcabd800
	int LocalMarkInstID;//[Offset: 0x598, Size: 0x4]// 0x75bdd58ec0
	Actor*[] VisitedHunterStores;//[Offset: 0x5a0, Size: 0x10]// 0x75bcabd900
	int CurrentTeamID;//[Offset: 0x5b0, Size: 0x4]// 0x75bdd58f30
	MarkSyncData LocalMarkData;//[Offset: 0x5b8, Size: 0x70]// 0x75bcabd980
	<int> MapMarkIDSet;//[Offset: 0x628, Size: 0x50]// 0x75d119bcc0
	void UpdateHuntedPlayerInfoInTeam(STExtraPlayerState* PlayerState, float Dist);// 0x43ba2c0
	void SetHuntedTargetInfo(HuntTargetInfo TargetInfo);// 0x43ba214
	void RemoveHuntTargetPlayer(STExtraPlayerState* PlayerState);// 0x43ba198
	void RemoveHuntedPlayerInTeam(STExtraPlayerState* PlayerState);// 0x43ba11c
	bool PickHuntTask(Object* Picker);// 0x43ba08c
	void OnUpdateBeingHuntedTeammate();// 0xffffff8a17adf2b0
	void OnTaskCompleted(int TaskID);// 0xffffff8a17adf2b0
	void OnRep_TargetHuntedPlayer();// 0x43ba078
	void OnRep_HuntTaskPickerInfo();// 0x43ba064
	void OnRep_HuntTargetRepInfoList();// 0x43ba050
	void OnRep_BeingHuntedPlayersInTeam();// 0x43ba03c
	void OnNotifyHuntTargetRepInfoList();// 0xffffff8a17adf2b0
	bool IsTaskExist(int TaskID);// 0x43b9fac
	bool HasPlayerBeingHunted(STExtraPlayerState* PlayerState);// 0x43b9f1c
	bool HandleUseTaskItem(int TaskID, Object* Picker);// 0x43b9e50
	void GetVisitedHunterStores(out Actor*[] OutList);// 0x43b9dbc
	int GetTaskCompletedTimes(int TaskID);// 0x43b9d30
	void AddOrUpdateHuntTargetPlayer(HuntTargetRepInfo RepInfo);// 0x43b9c14
	void AddHuntedPlayerInTeam(STExtraPlayerState* PlayerState, float Dist);// 0x43b9b5c

--------------------------------
Class: HunterTaskListener.UniversalTaskController.ActorComponent.Object
	<int,int> TaskCompletedTimes;//[Offset: 0x238, Size: 0x50]// 0x75bcad4840
	HunterTaskTeamMgr* DataOwner;//[Offset: 0x288, Size: 0x8]// 0x75bcabf300
	bool OnHandleUseTaskItem(int TaskID, Object* Picker);// 0x43b8df0
	int GetTaskCompletedTimes(int TaskID);// 0x43b8d64

--------------------------------
Class: UniversalTaskController.ActorComponent.Object
	delegate OnNotifyTaskInfo;//[Offset: 0x118, Size: 0x10]// 0x75bcabf480
	<int,TaskEventCache> AutoTriggerEventRecord;//[Offset: 0x128, Size: 0x50]// 0x75bcad4a80
	TaskRepInfo[] ReplicatedTaskList;//[Offset: 0x178, Size: 0x10]// 0x75bcabf600
	UniversalTaskMgr* OwnerManager;//[Offset: 0x188, Size: 0x8]// 0x75bcabf680
	<int,UniversalTaskBlackboard*> TaskBlackboardMap;//[Offset: 0x190, Size: 0x50]// 0x75bcad4b40
	<int,int> TaskProgressRecord;//[Offset: 0x1e0, Size: 0x50]// 0x75bcad4c00
	void TriggerTaskEvent(int TaskID, FString EventName);// 0x7a35ba4
	void TriggerOccupyEvent(int TaskID);// 0x7a35b28
	void OnTaskDoneNotify(int TaskID);// 0xffffff8a17adf2b0
	void OnRep_ReplicatedTaskList();// 0x7a35b14
	void OnRep_OwnerManager();// 0x7a35b00
	void OnClientReceiveOwnerManager();// 0xffffff8a17adf2b0
	void Initialize(UniversalTaskMgr* TaskMgr);// 0x7a35a7c
	bool HasTask(int TaskID);// 0x7a359ec
	int GetTaskNumber();// 0x7a359b8
	UniversalTaskBlackboard* GetTaskBlackboardByTaskID(int TaskID);// 0x7a3592c
	UniversalTaskMgr* GetOwnerTaskMgr();// 0x7a358f8
	void AddNewTaskForPlayer(int TaskID, int TaskTypeID, int Progress, int TargetProgress, FString ExtraInfo);// 0x7a35718

--------------------------------
Class: TaskEventCache
	float[] TriggerTimerList;//[Offset: 0x0, Size: 0x10]// 0x75c9944080

--------------------------------
Class: TaskRepInfo
	int TaskID;//[Offset: 0x0, Size: 0x4]// 0x7612125410
	int CurrentProcess;//[Offset: 0x4, Size: 0x4]// 0x76121253a0
	int TotalProcess;//[Offset: 0x8, Size: 0x4]// 0x7612125330

--------------------------------
Class: UniversalTaskMgr.Actor.Object
	<int,FString> TaskTemplateMap;//[Offset: 0x518, Size: 0x50]// 0x75bcaa3780
	<int,int> AdditionMapList;//[Offset: 0x568, Size: 0x50]// 0x75bcaa3840
	FString[] GlobalTaskClassList;//[Offset: 0x5b8, Size: 0x10]// 0x75bcabe480
	class UniversalTaskController* PlayerTaskControllerClass;//[Offset: 0x5c8, Size: 0x8]// 0x75bcabe500
	bool bApplyToObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]// 0x75bcabe580
	int ComprehensiveTaskTypeID;//[Offset: 0x5d4, Size: 0x4]// 0x75bdd59630
	<int,UniversalTask*> PlayerTaskMap;//[Offset: 0x5d8, Size: 0x50]// 0x75bcaa3900
	<int> PlayerBornTaskSet;//[Offset: 0x628, Size: 0x50]// 0x75d119bd60
	UniversalTask*[] GlobalTaskList;//[Offset: 0x678, Size: 0x10]// 0x75bcabe700
	<SharedBlackboardAsset*,UniversalTaskBlackboard*> SharedBlackboards;//[Offset: 0x688, Size: 0x50]// 0x75bcaa39c0
	UniversalTaskController*[] AllTaskControllers;//[Offset: 0x6d8, Size: 0x10]// 0x75bcabe900
	void SetPlayerTaskTargetProgress(int InTaskID, int TargetProgress);// 0x7a3983c
	void RunGlobalTasks();// 0x7a39828
	void RunAllPlayerTask();// 0x7a39814
	void RegisterPlayerBornTaskListener(UniversalTaskController* ParentController);// 0x7a39798
	void OnTaskDoneNotify(UniversalTaskController* Controller, int TaskID);// 0xffffff8a17adf2b0
	void OnTaskControllerRegistered(UniversalTaskController* TaskController);// 0xffffff8a17adf2b0
	void OnGameStateReady();// 0xffffff8a17adf2b0
	bool NeedReplicatedTask(int TaskID);// 0x7a39700
	bool IsPlayerTaskTemplateExist(int InTaskType);// 0x7a39670
	bool IsPlayerBornTask(int InTaskID);// 0x7a395e0
	UniversalTaskBlackboard* InstantiateTaskBlackboardByType(int InTaskID, int InTaskTypeID, UniversalTaskController* ParentController);// 0x7a394e0
	UniversalTask* GetTaskByID(int InTaskID);// 0x7a39454
	void ExecuteSimpleTask(UniversalTaskController* TaskController, int TaskType, int Count, Vector Location, FString ExtraParam, bool IsCumulative);// 0xffffff8a17adf2b0
	bool CreatePlayerBornTaskFormDataTable();// 0xffffff8a17adf2b0
	void CreateOnePlayerTask(int InTaskID, int InTaskTypeID, bool IsPlayerBornTask, bool RunTask, int TargetProgress);// 0x7a392d4
	void CreateGlobalTasks();// 0x7a392c0
	bool CreateAndRegisterPlayerTaskListener(int InTaskID, int InTaskTypeID, UniversalTaskController* ParentController);// 0x7a391bc
	bool ConstructTaskFlow();// 0xffffff8a17adf2b0

--------------------------------
Class: UniversalTask.UAETriggerObject.Object
	int TaskID;//[Offset: 0x1b8, Size: 0x4]// 0x75a81c0900
	int TaskTypeID;//[Offset: 0x1bc, Size: 0x4]// 0x75a81c0970
	int TargetTaskProgress;//[Offset: 0x1c0, Size: 0x4]// 0x75a81c09e0
	int CurrentTaskProgress;//[Offset: 0x1c4, Size: 0x4]// 0x75a81c0a50
	enum TaskRunningState;//[Offset: 0x1c8, Size: 0x1]// 0x75a81d8180
	UniversalTaskNode* RootNode;//[Offset: 0x1d0, Size: 0x8]// 0x75a81d8200
	bool bIsLuaTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]// 0x75a81d8280
	UniversalTaskBlackboard* TaskBlackboard;//[Offset: 0x1e0, Size: 0x8]// 0x75a81d8300
	SharedBlackboardAsset* SharedBlackboardAsset;//[Offset: 0x1e8, Size: 0x8]// 0x75a81d8380
	UniversalTaskFuncBPBase* TaskFuncBP;//[Offset: 0x1f0, Size: 0x8]// 0x75a81d8400
	UniversalTaskNode*[] AllTaskNodes;//[Offset: 0x1f8, Size: 0x10]// 0x75a81d8500
	UniversalTaskActionNodeEvent*[] EventRoots;//[Offset: 0x208, Size: 0x10]// 0x75a81d8600
	UniversalTaskActionNodeEvent*[] AutoTriggerEvents;//[Offset: 0x218, Size: 0x10]// 0x75a81d8700
	<Guid,DerivedTaskNodeModifiedDetail> DerivedTaskModifiedNodesDetail;//[Offset: 0x228, Size: 0x50]// 0x75a81e6900
	bool bIsEventTriggerTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]// 0x75a81d8880
	UniversalTaskBlackboardParameter[] BlackboardParamList;//[Offset: 0x280, Size: 0x10]// 0x75a81d8980
	UniversalTask* BaseTaskAsset;//[Offset: 0x290, Size: 0x8]// 0x75a81d8a00
	class Object* TaskEventFunctionLibrary;//[Offset: 0x298, Size: 0x8]// 0x75a81d8a80
	TriggerEventKeySelector TaskEventSelector;//[Offset: 0x2a0, Size: 0x8]// 0x75a81d8b00
	Actor* OwnerActor;//[Offset: 0x2a8, Size: 0x8]// 0x75a81d8b80
	ActorComponent* OwnerComp;//[Offset: 0x2b0, Size: 0x8]// 0x75a81d8c00
	FString ContextString;//[Offset: 0x2b8, Size: 0x10]// 0x75a81c0ac0
	UniversalTaskNode*[] NodeEntryList;//[Offset: 0x2c8, Size: 0x10]// 0x75a81d8d00
	UniversalTaskNode*[] NodeTickList;//[Offset: 0x2d8, Size: 0x10]// 0x75a81d8e00
	UniversalTaskNode*[] TempTickList;//[Offset: 0x2e8, Size: 0x10]// 0x75a81d8f00
	UniversalTaskController*[] PlayerTaskListenerList;//[Offset: 0x2f8, Size: 0x10]// 0x75a81d9000
	UniversalTaskController*[] PlayerTaskListenerTempList;//[Offset: 0x308, Size: 0x10]// 0x75a81d9100
	UniversalTaskController* CurrentTaskControllerRef;//[Offset: 0x318, Size: 0x8]// 0x75a81d9180
	UniversalTaskBlackboard* CurrentTaskBlackboardRef;//[Offset: 0x320, Size: 0x8]// 0x75a81d9200
	UniversalTaskBlackboard* SharedTaskBlackboardRef;//[Offset: 0x328, Size: 0x8]// 0x75a81d9280
	void TriggerTaskEventFrequently(UniversalTaskNode* EventRoot, UniversalTaskController* InTaskListener, UniversalTaskBlackboard* BlackBoard);// 0x7a3127c
	void TriggerTaskEventByListener(FString EventName, UniversalTaskController* InTaskListener);// 0x7a31168
	void TriggerTaskEventByFrequency(float TimeDelta);// 0x7a310ec
	void TriggerTaskEvent(FString EventName);// 0x7a31014
	void Tick(float DeltaSeconds);// 0x7a30f98
	void StopFlow();// 0x7a30f84
	void SetSharedTaskBlackboard(UniversalTaskBlackboard* SharedBlackboard);// 0x7a30f08
	void SetOwnerComponent(ActorComponent* NewOwner);// 0x7a30e8c
	void SetOwnerActor(Actor* NewOwner);// 0x7a30e10
	void RunFlowOnce();// 0x7a30dfc
	void RunFlow();// 0x7a30de8
	void ResumeFlow();// 0x7a30dd4
	void ReceiveTaskExecute();// 0xffffff8a17adf2b0
	void PauseFlow();// 0x7a30dc0
	void InitTaskBlackboard();// 0x7a30dac
	UniversalTaskBlackboard* GetTaskBlackboard();// 0x7a30d78
	FString GetTableValueAsString(enum ParamType);// 0x7a30ca8
	int GetTableValueAsInt32(enum ParamType);// 0x7a30c1c
	UniversalTaskBlackboard* GetSharedTaskBlackboard();// 0x7a30be8
	UniversalTaskNode* GetRootNode();// 0x7a30bcc
	UniversalTaskController* GetPlayerTaskController();// 0x7a30b98
	ActorComponent* GetOwnerComponent();// 0x7a30b64
	Actor* GetOwnerActor();// 0x7a30b30
	Vector GetEventValueAsVector(out const FName Key);// 0x7a30a90
	FString GetEventValueAsString(out const FName Key);// 0x7a309b0
	Object* GetEventValueAsObject(out const FName Key);// 0x7a30914
	int GetEventValueAsInt(out const FName Key);// 0x7a30878
	float GetEventValueAsFloat(out const FName Key);// 0x7a307dc
	bool GetEventValueAsBool(out const FName Key);// 0x7a3073c
	Actor* GetCurrentListeningActor();// 0x7a30708
	void ExecuteTaskByListener(UniversalTaskController* InTaskListener);// 0x7a3068c
	void EndPlay();// 0x7a30678
	void BeginPlay();// 0x7a30664
	void AddPlayerTaskListener(UniversalTaskController* InTaskListener);// 0x7a305e8

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x28, Size: 0x1]// 0x75a8962100
	FString TriggerName;//[Offset: 0x30, Size: 0x10]// 0x75a895a660
	Actor* OuterActor;//[Offset: 0x40, Size: 0x8]// 0x75a8962180
	class Object[] TriggerEventsClass;//[Offset: 0x48, Size: 0x10]// 0x75a8962280
	TriggerAction*[] TriggerActions;//[Offset: 0x58, Size: 0x10]// 0x75a8962380
	TriggerCondition*[] TriggerConditions;//[Offset: 0x68, Size: 0x10]// 0x75a8962480
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x78, Size: 0x8]// 0x75a8962500
	<TriggerEvent*> TriggeredEvents;//[Offset: 0xa8, Size: 0x50]// 0x75d119ae60
	<TriggerAction*> CompleteActions;//[Offset: 0xf8, Size: 0x50]// 0x75d119af00
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x148, Size: 0x8]// 0x75a8962680
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]// 0x75a8962700
	float TickInterval;//[Offset: 0x16c, Size: 0x4]// 0x75a895a6d0
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x75a8962780
	FString Description;//[Offset: 0x178, Size: 0x10]// 0x75a895a740
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]// 0x75a8962800
	Property*[] EventParams;//[Offset: 0x190, Size: 0x10]// 0x75a8962900

--------------------------------
Class: UniversalTaskNode.Object
	Guid NodeGuid;//[Offset: 0x38, Size: 0x10]// 0x75a8766a80
	UniversalTask* OwnerUniversalTask;//[Offset: 0x48, Size: 0x8]// 0x75a8766b00
	UniversalTaskNode* ParentNode;//[Offset: 0x50, Size: 0x8]// 0x75a8766b80
	UniversalTaskNodePinOut[] OutputPinList;//[Offset: 0x58, Size: 0x10]// 0x75a8766c80
	enum CurrentState;//[Offset: 0x69, Size: 0x1]// 0x75a8766d80
	void TriggerTaskEvent(FString EventName);// 0x7a3d55c
	void SetSharedBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x7a3d488
	void SetSharedBlackboardValueAsVector(out const TaskBlackboardKeySelector Key, Vector VectorValue);// 0x7a3d3ac
	void SetSharedBlackboardValueAsString(out const TaskBlackboardKeySelector Key, FString StringValue);// 0x7a3d284
	void SetSharedBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key, Rotator VectorValue);// 0x7a3d1b0
	void SetSharedBlackboardValueAsObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x7a3d0dc
	void SetSharedBlackboardValueAsName(out const TaskBlackboardKeySelector Key, FName NameValue);// 0x7a3d008
	void SetSharedBlackboardValueAsInt(out const TaskBlackboardKeySelector Key, int IntValue);// 0x7a3cf34
	void SetSharedBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key, float FloatValue);// 0x7a3ce60
	void SetSharedBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key, byte EnumValue);// 0x7a3cd8c
	void SetSharedBlackboardValueAsClass(out const TaskBlackboardKeySelector Key, class Object ClassValue);// 0x7a3ccb8
	void SetSharedBlackboardValueAsBool(out const TaskBlackboardKeySelector Key, bool BoolValue);// 0x7a3cbdc
	void SetNodeState(enum NewState);// 0x7a3cb64
	void SetCurrentTaskProgress(int Progress);// 0x7a3cae8
	void SetBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x7a3ca14
	void SetBlackboardValueAsVector(out const TaskBlackboardKeySelector Key, Vector VectorValue);// 0x7a3c938
	void SetBlackboardValueAsString(out const TaskBlackboardKeySelector Key, FString StringValue);// 0x7a3c810
	void SetBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key, Rotator VectorValue);// 0x7a3c73c
	void SetBlackboardValueAsObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x7a3c668
	void SetBlackboardValueAsName(out const TaskBlackboardKeySelector Key, FName NameValue);// 0x7a3c594
	void SetBlackboardValueAsInt(out const TaskBlackboardKeySelector Key, int IntValue);// 0x7a3c4c0
	void SetBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key, float FloatValue);// 0x7a3c3ec
	void SetBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key, byte EnumValue);// 0x7a3c318
	void SetBlackboardValueAsClass(out const TaskBlackboardKeySelector Key, class Object ClassValue);// 0x7a3c244
	void SetBlackboardValueAsBool(out const TaskBlackboardKeySelector Key, bool BoolValue);// 0x7a3c168
	void OnTick(float DeltaSeconds);// 0x7a3c0e4
	void OnTaskCompleted();// 0x7a3c0d0
	bool IsNodeActive();// 0x7a3c0ac
	bool IsDedicatedServer();// 0x7a3c074
	bool IsBlackboardExistWeakObject(out const TaskBlackboardKeySelector Key);// 0x7a3bfd4
	bool IsBlackboardExistVector(out const TaskBlackboardKeySelector Key);// 0x7a3bf34
	bool IsBlackboardExistString(out const TaskBlackboardKeySelector Key);// 0x7a3be94
	bool IsBlackboardExistRotator(out const TaskBlackboardKeySelector Key);// 0x7a3bdf4
	bool IsBlackboardExistObject(out const TaskBlackboardKeySelector Key);// 0x7a3bd54
	bool IsBlackboardExistName(out const TaskBlackboardKeySelector Key);// 0x7a3bcb4
	bool IsBlackboardExistInt(out const TaskBlackboardKeySelector Key);// 0x7a3bc14
	bool IsBlackboardExistFloat(out const TaskBlackboardKeySelector Key);// 0x7a3bb74
	bool IsBlackboardExistEnum(out const TaskBlackboardKeySelector Key);// 0x7a3bad4
	bool IsBlackboardExistClass(out const TaskBlackboardKeySelector Key);// 0x7a3ba34
	bool IsBlackboardExistBool(out const TaskBlackboardKeySelector Key);// 0x7a3b994
	void GoToNext(int PinIndex);// 0x7a3b918
	float GetTimeSeconds();// 0x7a3b8e4
	int GetTaskType();// 0x7a3b8b0
	int GetTaskTargetProcess();// 0x7a3b87c
	int GetTaskID();// 0x7a3b848
	UniversalTaskBlackboard* GetTaskBlackboard();// 0x7a3b814
	bool GetTableParameterString(out FString Dest, enum ParamType);// 0x7a3b728
	bool GetTableParameterInt32(out int Dest, enum ParamType);// 0x7a3b648
	Object* GetSharedBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key);// 0x7a3b5ac
	Vector GetSharedBlackboardValueAsVector(out const TaskBlackboardKeySelector Key);// 0x7a3b50c
	FString GetSharedBlackboardValueAsString(out const TaskBlackboardKeySelector Key);// 0x7a3b42c
	Rotator GetSharedBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key);// 0x7a3b38c
	Object* GetSharedBlackboardValueAsObject(out const TaskBlackboardKeySelector Key);// 0x7a3b2f0
	FName GetSharedBlackboardValueAsName(out const TaskBlackboardKeySelector Key);// 0x7a3b254
	int GetSharedBlackboardValueAsInt(out const TaskBlackboardKeySelector Key);// 0x7a3b1b8
	float GetSharedBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key);// 0x7a3b11c
	byte GetSharedBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key);// 0x7a3b080
	class Object GetSharedBlackboardValueAsClass(out const TaskBlackboardKeySelector Key);// 0x7a3afe4
	bool GetSharedBlackboardValueAsBool(out const TaskBlackboardKeySelector Key);// 0x7a3af44
	int GetRuntimeOutputPinNumber();// 0x7a3af28
	UniversalTaskNode* GetParentNode();// 0x7a3af0c
	UniversalTask* GetOwner();// 0x7a3aef0
	ActorComponent* GetOuterComponent();// 0x7a3aebc
	Actor* GetOuterActor();// 0x7a3ae88
	enum GetNodeState();// 0x7a3ae6c
	Actor* GetListenActor();// 0x7a3ae38
	UniversalTaskNode*[] GetFollowNodesByPinIndex(int PinIndex);// 0x7a3ad68
	FString GetEventValueAsString(out const TriggerEventParamKeySelector Key);// 0x7a3ac78
	int GetEventValueAsInt(out const TriggerEventParamKeySelector Key);// 0x7a3abcc
	float GetEventValueAsFloat(out const TriggerEventParamKeySelector Key);// 0x7a3ab20
	bool GetEventValueAsBool(out const TriggerEventParamKeySelector Key);// 0x7a3aa70
	int GetCurrentTaskProcess();// 0x7a3aa3c
	Object* GetBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key);// 0x7a3a9a0
	Vector GetBlackboardValueAsVector(out const TaskBlackboardKeySelector Key);// 0x7a3a900
	FString GetBlackboardValueAsString(out const TaskBlackboardKeySelector Key);// 0x7a3a820
	Rotator GetBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key);// 0x7a3a780
	Object* GetBlackboardValueAsObject(out const TaskBlackboardKeySelector Key);// 0x7a3a6e4
	FName GetBlackboardValueAsName(out const TaskBlackboardKeySelector Key);// 0x7a3a648
	int GetBlackboardValueAsInt(out const TaskBlackboardKeySelector Key);// 0x7a3a5ac
	float GetBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key);// 0x7a3a510
	byte GetBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key);// 0x7a3a474
	class Object GetBlackboardValueAsClass(out const TaskBlackboardKeySelector Key);// 0x7a3a3d8
	bool GetBlackboardValueAsBool(out const TaskBlackboardKeySelector Key);// 0x7a3a338
	void ExecuteNext(int PinIndex);// 0x7a3a2bc

--------------------------------
Class: UniversalTaskNodePinOut
	Guid PinId;//[Offset: 0x0, Size: 0x10]// 0x75c9944100
	UniversalTaskNode*[] FollowNodes;//[Offset: 0x10, Size: 0x10]// 0x75c9944200

--------------------------------
Class: TaskBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 0x8]// 0x75c994cf80

--------------------------------
Class: UniversalTaskBlackboard.Object
	<FName,Object*> ObjectParamMap;//[Offset: 0x28, Size: 0x50]// 0x75a81e4080
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x78, Size: 0x50]// 0x75a81e4140
	<FName,class Object> ClassParamMap;//[Offset: 0xc8, Size: 0x50]// 0x75a81e4200
	<FName,byte> EnumParamMap;//[Offset: 0x118, Size: 0x50]// 0x75a81e42c0
	<FName,int> IntParamMap;//[Offset: 0x168, Size: 0x50]// 0x75a81e4380
	<FName,uint32> UIntParamMap;//[Offset: 0x1b8, Size: 0x50]// 0x75a81e4440
	<FName,float> FloatParamMap;//[Offset: 0x208, Size: 0x50]// 0x75a81e4500
	<FName,bool> BoolParamMap;//[Offset: 0x258, Size: 0x50]// 0x75a81e45c0
	<FName,FString> StringParamMap;//[Offset: 0x2a8, Size: 0x50]// 0x75a81e4680
	<FName,FName> NameParamMap;//[Offset: 0x2f8, Size: 0x50]// 0x75a81e4740
	<FName,Vector> VectorParamMap;//[Offset: 0x348, Size: 0x50]// 0x75a81e4800
	<FName,Rotator> RotatorParamMap;//[Offset: 0x398, Size: 0x50]// 0x75a81e48c0
	void SetValueAsWeakObject(out const FName KeyName, Object* ObjectValue);// 0x7a33f7c
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x7a33ea0
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x7a33d78
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x7a33ca4
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x7a33bd0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x7a33afc
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x7a33a28
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x7a33954
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x7a33880
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x7a337ac
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x7a336d0
	bool IsExistWeakObject(out const FName KeyName);// 0x7a33630
	bool IsExistVector(out const FName KeyName);// 0x7a33590
	bool IsExistString(out const FName KeyName);// 0x7a334f0
	bool IsExistRotator(out const FName KeyName);// 0x7a33450
	bool IsExistObject(out const FName KeyName);// 0x7a333b0
	bool IsExistName(out const FName KeyName);// 0x7a33310
	bool IsExistInt(out const FName KeyName);// 0x7a33270
	bool IsExistFloat(out const FName KeyName);// 0x7a331d0
	bool IsExistEnum(out const FName KeyName);// 0x7a33130
	bool IsExistClass(out const FName KeyName);// 0x7a33090
	bool IsExistBool(out const FName KeyName);// 0x7a32ff0
	Object* GetValueAsWeakObject(out const FName KeyName);// 0x7a32f54
	Vector GetValueAsVector(out const FName KeyName);// 0x7a32eb4
	FString GetValueAsString(out const FName KeyName);// 0x7a32dd4
	Rotator GetValueAsRotator(out const FName KeyName);// 0x7a32d34
	Object* GetValueAsObject(out const FName KeyName);// 0x7a32c98
	FName GetValueAsName(out const FName KeyName);// 0x7a32bfc
	int GetValueAsInt(out const FName KeyName);// 0x7a32b60
	float GetValueAsFloat(out const FName KeyName);// 0x7a32ac4
	byte GetValueAsEnum(out const FName KeyName);// 0x7a32a28
	class Object GetValueAsClass(out const FName KeyName);// 0x7a3298c
	bool GetValueAsBool(out const FName KeyName);// 0x7a328ec

--------------------------------
Class: TriggerEventParamKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 0x8]// 0x75c994e1e0
	FString ParamData;//[Offset: 0x8, Size: 0x10]// 0x75c994e250

--------------------------------
Class: SharedBlackboardAsset.DataAsset.Object
	<FName,byte> SharedBlackboardParameters;//[Offset: 0x30, Size: 0x50]// 0x75a81e6240

--------------------------------
Class: UniversalTaskFuncBPBase.UniversalTaskNode.Object
	TaskFuncNameSelector FuncNameKey;//[Offset: 0x70, Size: 0x8]// 0x75a81d6980

--------------------------------
Class: TaskFuncNameSelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 0x8]// 0x75c994cff0

--------------------------------
Class: UniversalTaskActionNodeEvent.UniversalTaskActionNode.UniversalTaskNode.Object
	FString EventName;//[Offset: 0x70, Size: 0x10]// 0x75a81c05f0
	TriggerEventKeySelector CustomEventSelector;//[Offset: 0x80, Size: 0x8]// 0x75a81d7e00
	bool bIsAutoTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]// 0x75a81d7e80
	float TriggerFrequency;//[Offset: 0x8c, Size: 0x4]// 0x75a81c0660

--------------------------------
Class: UniversalTaskActionNode.UniversalTaskNode.Object
	bool OnExecute();// 0xffffff8a17adf2b0

--------------------------------
Class: TriggerEventKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 0x8]// 0x75c994e170

--------------------------------
Class: DerivedTaskNodeModifiedDetail
	UniversalTaskNode* ModifiedNode;//[Offset: 0x0, Size: 0x8]// 0x75c9943c00
	<FName> ModifiedPropertyNames;//[Offset: 0x8, Size: 0x50]// 0x75cdbcf0e0

--------------------------------
Class: UniversalTaskBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 0x8]// 0x75c994cf10
	byte Type;//[Offset: 0x8, Size: 0x1]// 0x75c9943b80

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 0x8]// 0x75a8550400
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x75a8550480
	enum ExecPolicy;//[Offset: 0x49, Size: 0x1]// 0x75a8550580
	UAETriggerObject* ParentTrigger;//[Offset: 0x50, Size: 0x8]// 0x75a8550600
	UAELevelDirector* ActionOuterActor;//[Offset: 0x58, Size: 0x8]// 0x75a8550680

--------------------------------
Class: VariableSet.Object
	<FName,UAETriggerVariableDesc> BlackboardVariableDescList;//[Offset: 0x28, Size: 0x50]// 0x75a81e8340
	VariableSetCachedActors DataActors;//[Offset: 0x78, Size: 0x58]// 0x75a81d9f80

--------------------------------
Class: UAETriggerVariableDesc
	enum Type;//[Offset: 0x0, Size: 0x1]// 0x75c9944300

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x50, Size: 0x8]// 0x75c9944380

--------------------------------
Class: UAELevelDirector.Actor.Object
	LevelDirectorInstCondition[] InstanceConditions;//[Offset: 0x510, Size: 0x10]// 0x75a864b100
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x520, Size: 0x10]// 0x75a864b200
	FString[] ClassPaths;//[Offset: 0x530, Size: 0x10]// 0x75a864b280
	FString ConfigFilePath;//[Offset: 0x540, Size: 0x10]// 0x75bcafe140
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x550, Size: 0x8]// 0x75a864b300
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x558, Size: 0x18]// 0x75a864b380
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x570, Size: 0x50]// 0x75a8689880
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x5c0, Size: 0x10]// 0x75a864b500
	TriggersFlowTree* TriggersFlowTree;//[Offset: 0x5d0, Size: 0x8]// 0x75a864b580
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x5d8, Size: 0x50]// 0x75a8689940
	VariableSet* AllVariableSet;//[Offset: 0x628, Size: 0x8]// 0x75a864b680
	FString DescData;//[Offset: 0x630, Size: 0x10]// 0x75bcafe290
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x640, Size: 0x8]// 0x75a864b700
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x648, Size: 0x50]// 0x75a8689a00
	FString[] IDIP_Action_SpecialTag;//[Offset: 0x6a0, Size: 0x10]// 0x75a864b800
	bool StartLevelDirector();// 0x7a0b61c
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x7a0b508
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x7a0b458
	void OnRep_LevelDirectorData();// 0x7a0b444
	bool InitialLevelDirector();// 0x7a0b404
	VariableSet* GetDataSet();// 0x7a0b3d0
	bool FlowControllSubControll(FString[] TriggerNames);// 0x7a0b24c
	bool FlowControllOr(FString[] TriggerNames);// 0x7a0b0c8
	bool FlowControllOneSequence(FString TriggerName);// 0x7a0afe4
	bool FlowControllMultiSequence(FString[] TriggerNames);// 0x7a0ae60
	bool FlowControllAnd(FString[] TriggerNames);// 0x7a0acdc
	void ClientExecuteAction(FString ActionClassName, int64 UID, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x7a0aac8
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x7a0a9b4
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x7a0a898

--------------------------------
Class: LevelDirectorInstCondition
	int64 ConditionUniqueID;//[Offset: 0x0, Size: 0x8]// 0x75c994dd80
	TriggerCondition* Condition;//[Offset: 0x8, Size: 0x8]// 0x75c9944880

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 0x8]// 0x75a854a500
	UAETriggerObject* ParentTrigger;//[Offset: 0x48, Size: 0x8]// 0x75a854a580

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 0x8]// 0x75c994dd10
	TriggerAction* Action;//[Offset: 0x8, Size: 0x8]// 0x75c9944800

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x510, Size: 0x10]// 0x75a81dae00
	uint32 UniqueID;//[Offset: 0x520, Size: 0x4]// 0x75a81c19a0
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x528, Size: 0x8]// 0x75a81dae80
	void OnRep_LevelDirector();// 0x7a0c108
	void OnRep_ActionRepDatas();// 0x7a0c0f4
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x7a0c01c

--------------------------------
Class: TriggerActionRepData
	int64 RepID;//[Offset: 0x0, Size: 0x8]// 0x75c994da70
	int64 UID;//[Offset: 0x8, Size: 0x8]// 0x75c994dae0
	FString ActionClassName;//[Offset: 0x10, Size: 0x10]// 0x75c994db50
	TriggerParamRepData[] ParamDatas;//[Offset: 0x20, Size: 0x10]// 0x75c9944700

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 0x1]// 0x75c9944480
	byte ParamSubType;//[Offset: 0x1, Size: 0x1]// 0x75c9944500
	FString ParamName;//[Offset: 0x8, Size: 0x10]// 0x75c994dbc0
	byte[] ParamData;//[Offset: 0x18, Size: 0x10]// 0x75c9944600

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 0x18]// 0x75c9944780

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 0x10]// 0x75c994dc30
	int NodeID;//[Offset: 0x10, Size: 0x4]// 0x75c994dca0

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x28, Size: 0x10]// 0x75a8965080
	FString[] EventsShowInUGC;//[Offset: 0x38, Size: 0x10]// 0x75a8965100
	FString[] ConditionsShowInUGC;//[Offset: 0x48, Size: 0x10]// 0x75a8965180
	FString[] ActionsShowInUGC;//[Offset: 0x58, Size: 0x10]// 0x75a8965200
	VariableSet* DataSet;//[Offset: 0x68, Size: 0x8]// 0x75a8965280
	Actor* GetLastIteratorActor();// 0x7a0e2d4

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 0x10]// 0x75c994d7d0
	FString ClassFullPath;//[Offset: 0x10, Size: 0x10]// 0x75c994d840
	float RandomRadius;//[Offset: 0x20, Size: 0x4]// 0x75c994d8b0

--------------------------------
Class: TriggersFlowTree.Object
	FlowNodeBase* RootNode;//[Offset: 0x28, Size: 0x8]// 0x75a81daf80
	FlowNodeBase* TailNode;//[Offset: 0x30, Size: 0x8]// 0x75a81db000
	FlowNodeBase* CurrentNode;//[Offset: 0x38, Size: 0x8]// 0x75a81db080
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x50, Size: 0x8]// 0x75a81db100

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x28, Size: 0x8]// 0x75a81dbd00
	UFlowNodeRepData RepData;//[Offset: 0x30, Size: 0x18]// 0x75a81dbd80
	TriggersFlowTree* CarriedFlowTree;//[Offset: 0x50, Size: 0x8]// 0x75a81dbe00
	enum NodeType;//[Offset: 0x58, Size: 0x1]// 0x75a81dbf00
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x60, Size: 0x10]// 0x75a81dc000

--------------------------------
Class: TriggerEvent.Object
	Object* EventInstigator;//[Offset: 0x28, Size: 0x8]// 0x75a8548f00
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x40, Size: 0x50]// 0x75a855d840

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 0x8]// 0x75c9944b80

--------------------------------
Class: HuntedTeammateInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x761219b320
	float DangerDistance;//[Offset: 0x10, Size: 0x4]// 0x761219b2b0
	bool bIsNewHuntedTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]// 0x761219b230

--------------------------------
Class: HuntTargetInfo
	STExtraPlayerState* TargetState;//[Offset: 0x0, Size: 0x8]// 0x761219b110
	Vector MarkCircleCenter;//[Offset: 0x8, Size: 0xc]// 0x761219b090
	float MarkCircleRadius;//[Offset: 0x14, Size: 0x4]// 0x761219b020
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x761219afa0

--------------------------------
Class: HuntTargetRepInfo
	STExtraPlayerState* TargetState;//[Offset: 0x0, Size: 0x8]// 0x761219ae80
	int MarkInstID;//[Offset: 0x8, Size: 0x4]// 0x761219ae10
	Vector MarkCircleCenter;//[Offset: 0xc, Size: 0xc]// 0x761219ad90
	float MarkCircleRadius;//[Offset: 0x18, Size: 0x4]// 0x761219ad20
	float RotationAngle;//[Offset: 0x1c, Size: 0x4]// 0x761219acb0
	FString PlayerKey;//[Offset: 0x20, Size: 0x10]// 0x761219ac40

--------------------------------
Class: HuntTaskPickerInfo
	Vector PickerLocation;//[Offset: 0x0, Size: 0xc]// 0x761219ab20
	float ScanRadius;//[Offset: 0xc, Size: 0x4]// 0x761219aab0
	int HuntTaskTimeLeft;//[Offset: 0x10, Size: 0x4]// 0x761219aa40

--------------------------------
Class: PlayerRescueingInfo
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611f28080
	bool IsSelfRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611f28000
	float TotalSeconds;//[Offset: 0x4, Size: 0x4]// 0x7611f27f90
	float ServerStartTime;//[Offset: 0x8, Size: 0x4]// 0x7611f27f20
	float ReduceSeconds;//[Offset: 0xc, Size: 0x4]// 0x7611f27eb0

--------------------------------
Class: PopKartRaceInfo
	int RaceGroup;//[Offset: 0x0, Size: 0x4]// 0x7611f18f50
	int[] NodeList;//[Offset: 0x8, Size: 0x10]// 0x7611f18e60

--------------------------------
Class: RenderQualityCVarsToSync
	float StaticMeshLodDistanceScale;//[Offset: 0x0, Size: 0x4]// 0x7611f27920
	int ShadowQuality;//[Offset: 0x4, Size: 0x4]// 0x7611f278b0

--------------------------------
Class: SegmentChoosableSituation
	int SegmentID;//[Offset: 0x0, Size: 0x4]// 0x7611f27640
	bool bChoosable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7611f275c0

--------------------------------
Class: NetAlienationDataComponent.ActorComponent.Object
	delegate OnAlienationDataChange;//[Offset: 0x118, Size: 0x10]// 0x75a844bb00
	NetAlienationData*[] NetAlienationDataArray;//[Offset: 0x130, Size: 0x10]// 0x75a844bc00
	class NetAlienationData[] InitializeNetDataClassConfig;//[Offset: 0x140, Size: 0x10]// 0x75a844bd00
	void RemoveAlienationDataByClass(NetAlienationData* Data);// 0x4439690
	void ReceivePreDestroy();// 0x443967c
	void OnRep_AlienationData();// 0x4439668
	NetAlienationData*[] GetAlienationDataByClass(class NetAlienationData Class);// 0x4439598
	void CreateInitializeNetData();// 0x4439584
	NetAlienationData* CreateAlienationDataByClass(class NetAlienationData Class);// 0x44394f8

--------------------------------
Class: NetAlienationData.Object
	NetAlienationDataComponent* Owner;//[Offset: 0x28, Size: 0x8]// 0x75b4d96e80
	void ReciveInit(NetAlienationDataComponent* InOwner);// 0xffffff8a17adf2b0
	void ReceivePreDestroy();// 0xffffff8a17adf2b0
	static PlayerController* GetPlayerController(NetAlienationData* NetData, int PlayerIndex);// 0x4439c50
	Actor* GetOwnerActor();// 0x4439c1c

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 0x10]// 0x7611f25140
	FString PlayerName;//[Offset: 0x10, Size: 0x10]// 0x7611f250d0
	Vector HitPos;//[Offset: 0x20, Size: 0xc]// 0x7611f25050
	FString ConfigKey;//[Offset: 0x30, Size: 0x10]// 0x7611f24fe0
	int audioID;//[Offset: 0x40, Size: 0x4]// 0x7611f24f70
	FString ParamString;//[Offset: 0x48, Size: 0x10]// 0x7611f24f00
	int BindActorGUID;//[Offset: 0x58, Size: 0x4]// 0x7611f24e90
	float HitPosDirect;//[Offset: 0x5c, Size: 0x4]// 0x7611f24e20
	uint32 PlayerKey;//[Offset: 0x60, Size: 0x4]// 0x7611f24db0
	int MiniMapIconTypeId;//[Offset: 0x64, Size: 0x4]// 0x7611f24d40
	byte InputSignType;//[Offset: 0x68, Size: 0x1]// 0x7611f24cc0
	uint32 AuidoTextId;//[Offset: 0x6c, Size: 0x4]// 0x7611f24c50

--------------------------------
Class: CharacterAvatar_WearInfo
	CharacterAvatar_EquipSkinInfo[] EquipedSkinList;//[Offset: 0x0, Size: 0x10]// 0x7611ffbb30
	CharacterAvatar_PendantInfo[] EquipedPendantList;//[Offset: 0x10, Size: 0x10]// 0x7611ffb5c0

--------------------------------
Class: CharacterAvatar_EquipSkinInfo
	int ReplacedItemID;//[Offset: 0x0, Size: 0x4]// 0x7611ffbd50
	CharacterAvatar_WearItemMetaInfo SkinMetaInfo;//[Offset: 0x4, Size: 0x14]// 0x7611ffbcd0

--------------------------------
Class: CharacterAvatar_WearItemMetaInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x7611ffba50
	int ItemType;//[Offset: 0x4, Size: 0x4]// 0x7611ffb9e0
	int ItemSubType;//[Offset: 0x8, Size: 0x4]// 0x7611ffb970
	int ItemLevel;//[Offset: 0xc, Size: 0x4]// 0x7611ffb900
	bool ValidInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611ffb880

--------------------------------
Class: CharacterAvatar_PendantInfo
	int PendantItemID;//[Offset: 0x0, Size: 0x4]// 0x7611ffbac0
	CharacterAvatar_WearItemMetaInfo AttachedItemMetaInfo;//[Offset: 0x4, Size: 0x14]// 0x7611ffb760

--------------------------------
Class: TouchMoveFingerData
	byte FingerIndex;//[Offset: 0x0, Size: 0x1]// 0x7611ffa320
	byte Priority;//[Offset: 0x1, Size: 0x1]// 0x7611ffa2a0
	Vector Loc;//[Offset: 0x4, Size: 0xc]// 0x7611ffa220

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	PUBGDoor* TriggeredDoor;//[Offset: 0x118, Size: 0x8]// 0x75b4e2a900
	PUBGDoor* TriggeredDoorAux;//[Offset: 0x120, Size: 0x8]// 0x75b4e2a980
	PUBGDoor*[] InRangeDoorList;//[Offset: 0x128, Size: 0x10]// 0x75b4e2aa80
	bool bOutRangeTryEndOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]// 0x75b4e2ab00
	bool bInRangeTryEndOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]// 0x75b4e2ab80
	int InRangeDoorListSize;//[Offset: 0x13c, Size: 0x4]// 0x75b4eb5230
	int CheckRangeSize;//[Offset: 0x140, Size: 0x4]// 0x75b4eb52a0
	int CheckRangeSizeOffset;//[Offset: 0x144, Size: 0x4]// 0x75b4eb5310
	int CheckRangeInterval;//[Offset: 0x148, Size: 0x4]// 0x75b4eb5380
	int CurrentCheckRangeFrames;//[Offset: 0x14c, Size: 0x4]// 0x75b4eb53f0
	int HitInRangeFrameInterval;//[Offset: 0x150, Size: 0x4]// 0x75b4eb5460
	int HitOutRangeFrameInterval;//[Offset: 0x154, Size: 0x4]// 0x75b4eb54d0
	bool HitDoorUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75b4e2ac00
	bool DebugDrawShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]// 0x75b4e2ac80
	float DebugDrawShapeTime;//[Offset: 0x15c, Size: 0x4]// 0x75b4eb5540
	void UpdateDoorBtnShow();// 0x427ae28
	void UpdateClientPlayerOurDoorRange();// 0x427ae14
	void UpdateClientPlayerInDoorRange();// 0x427ae00
	void SetAutoOpenDoorMode(int Mode);// 0x427ad84
	void SetAutoOpenDoorEnable(bool bEnable);// 0x427ad00
	bool PlayerIsInDoorAABB(Pawn* InPawn, PUBGDoor* Indoor);// 0x427ac38
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x427aba8
	PUBGDoor* GetPriorityDoor();// 0x427ab74
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, bool IsSimulate);// 0x427aa24
	void ControllerOnRepNewPawn(Pawn* NewPawn);// 0x427a9a8
	void ControllerOnRepNewCharacter(STExtraBaseCharacter* NewCharacter);// 0x427a92c
	void ClearDoorCache(Pawn* NewPawn);// 0x427a8a8
	void BP_SimulateUIClick(bool bExtraDoor, bool IsAutoOpen);// 0xffffff8a17adf2b0
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0xffffff8a17adf2b0

--------------------------------
Class: PUBGDoor.UAEDoorActor.UAENetActor.Actor.Object
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]// 0x7611f6afc0
	float autoOpenDistanceSquared;//[Offset: 0x584, Size: 0x4]// 0x7611f6af50
	float autoOpenAngel;//[Offset: 0x588, Size: 0x4]// 0x7611f6aee0
	float forwardSpeedRatio;//[Offset: 0x58c, Size: 0x4]// 0x7611f6ae70
	bool bHideButtons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]// 0x7611f6adf0
	int DoorState;//[Offset: 0x594, Size: 0x4]// 0x7611f6ad80
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]// 0x7611f6ad00
	float DoorOperateTime;//[Offset: 0x59c, Size: 0x4]// 0x7611f6ac90
	SceneComponent* RootScene;//[Offset: 0x5a0, Size: 0x8]// 0x7611f6ac10
	StaticMeshComponent* doorMesh;//[Offset: 0x5a8, Size: 0x8]// 0x7611f6ab90
	BoxComponent* interactionBox;//[Offset: 0x5b0, Size: 0x8]// 0x7611f6ab10
	BoxComponent* InnerBox;//[Offset: 0x5b8, Size: 0x8]// 0x7611f6aa90
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]// 0x7611f6aa10
	int DoorStateEx;//[Offset: 0x5c4, Size: 0x4]// 0x7611f6a9a0
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]// 0x7611f6a920
	StaticMeshComponent* doorMeshEx;//[Offset: 0x5d0, Size: 0x8]// 0x7611f6a8a0
	BoxComponent* interactionBoxEx;//[Offset: 0x5d8, Size: 0x8]// 0x7611f6a820
	BoxComponent* InnerBoxEx;//[Offset: 0x5e0, Size: 0x8]// 0x7611f6a7a0
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]// 0x7611f6a720
	bool bForceNoWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 0x1]// 0x7611f6a6a0
	delegate OnDoorAniFinsihDelegate;//[Offset: 0x5f0, Size: 0x10]// 0x7611f6a620
	delegate OnDoorStateChange;//[Offset: 0x600, Size: 0x10]// 0x7611f6a5a0
	enum[] DamageableGameObjectTypeList;//[Offset: 0x610, Size: 0x10]// 0x7611f6a420
	bool bUseDelayDoorAng;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]// 0x7611f6a3a0
	float fDoorDelayAng;//[Offset: 0x624, Size: 0x4]// 0x7611f6a330
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x628, Size: 0x4]// 0x7611f6a2c0
	bool bAutoSetPosAndExtent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]// 0x7611f6a240
	Vector SimulateBoxOrigin;//[Offset: 0x630, Size: 0xc]// 0x7611f6a1c0
	Vector SimulateBoxOriginEx;//[Offset: 0x63c, Size: 0xc]// 0x7611f6a140
	Vector SimulateBoxExtent;//[Offset: 0x648, Size: 0xc]// 0x7611f6a0c0
	Vector SimulateTriggerBoxExtent;//[Offset: 0x654, Size: 0xc]// 0x7611f6a040
	Vector SimulateTriggerBoxCenter;//[Offset: 0x660, Size: 0xc]// 0x7611f69fc0
	bool DebugDrawShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]// 0x7611f69f40
	bool IgnoreMotionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66d, Size: 0x1]// 0x7611f69ec0
	float DebugDrawShapeTime;//[Offset: 0x670, Size: 0x4]// 0x7611f69e50
	byte RCRBoxIndex;//[Offset: 0x674, Size: 0x1]// 0x7611f69dd0
	Actor* ParentActor;//[Offset: 0x678, Size: 0x8]// 0x7611f69d50
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]// 0x7611f69cd0
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 0x1]// 0x7611f69c50
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 0x1]// 0x7611f69bd0
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x683, Size: 0x1]// 0x7611f69b50
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]// 0x7611f69ad0
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 0x1]// 0x7611f69a50
	Character* PlayerCharacter;//[Offset: 0x688, Size: 0x8]// 0x7611f699d0
	float autoOpenAngelCosinValue;//[Offset: 0x690, Size: 0x4]// 0x7611f69960
	TimerHandle DelayUnRegisterHandle;//[Offset: 0x6a0, Size: 0x8]// 0x7611f698e0
	float DelayUnRegisterTime;//[Offset: 0x6a8, Size: 0x4]// 0x7611f69870
	bool Islocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 0x1]// 0x7611f697f0
	bool NeedShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 0x1]// 0x7611f69770
	bool IsAutoOpenLinkage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ae, Size: 0x1]// 0x7611f696f0
	bool IsOpenLinkage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6af, Size: 0x1]// 0x7611f69670
	bool IsLockAutoOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]// 0x7611f695f0
	bool NeedDestroyChildActorCom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 0x1]// 0x7611f69570
	bool NeedRefreshForCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 0x1]// 0x7611f694f0
	StaticMesh* NormalDoorMesh;//[Offset: 0x6b8, Size: 0x8]// 0x7611f69470
	DoorRotationMoation[] DoorMationList;//[Offset: 0x6c0, Size: 0x10]// 0x7611f68ce0
	void UpdateTickfunction();// 0x44c44e8
	void SimulateOverlapCharacter(StaticMeshComponent* InDoorMesh, int InMultVal);// 0x44c4430
	void SetDoorTriggerFalse(bool IsEx);// 0x44c43ac
	void SetDoorNeedShowUI(bool InNeedShowUI);// 0x44c4328
	void SetDoorMation(bool InIsExDoor, int InState);// 0x44c4260
	void SetDoorLock(bool InLock);// 0x44c41dc
	void SetDoorBroken(bool bExtraDoor, Actor* brokenCauser);// 0x44c4114
	void ResetUIOnClient();// 0x44c4100
	void RefreshUIOnClient();// 0x44c40ec
	void Refresh_DoorIgnore(bool InIsExDoor, float InDoorAng);// 0x44c4024
	void Refresh_DoorCollisionChanel(bool InPawnEnabled, bool extraDoor);// 0x44c3f54
	void OpenDoorByParam(bool inRoom, bool extraDoor);// 0x44c3e84
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x44c3dc4
	void OnRep_RepNeedShowUI();// 0x44c3db0
	void OnRep_RepDoorStateEx();// 0x44c3d94
	void OnRep_RepDoorState();// 0x44c3d78
	void OnRep_RepDoorBrokenEx();// 0x44c3d64
	void OnRep_RepDoorBroken();// 0x44c3d48
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x44c3c1c
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x44c3af0
	void OnDoorStateChange__DelegateSignature(PUBGDoor* Door, Character* Character, int TargetState, bool IsExDoor);// 0xffffff8a17adf2b0
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x44c3a28
	void OnDoorAniFinsihDelegate__DelegateSignature(PUBGDoor* Door);// 0xffffff8a17adf2b0
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x44c3850
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x44c3678
	void On_DoorAniFinsihNew(StaticMeshComponent* InDoorMesh, bool extraDoor);// 0x44c35b8
	bool IsTriggerDoor(bool IsEx);// 0x44c3520
	bool IsMoationActive();// 0x44c34e8
	bool IsInRoom(Character* Character);// 0x44c3458
	bool IsDoorOpened(bool IsExDoor);// 0x44c33c0
	bool IsAnyDoorOpened();// 0x44c3388
	void InsertDoorMation(StaticMeshComponent* InMesh, bool InIsExDoor, int InState);// 0x44c3284
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx);// 0x44c3110
	bool GetMoationState(bool InIsExDoor, out int OutState);// 0x44c302c
	enum[] GetDamageableGameObjectType();// 0x44c2fa4
	bool GetCanBePicked();// 0x44c2f64
	void ForceNetUpdate();// 0x44c2f48
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x44c2e88
	void BP_DoorBroken_Callback(bool isBeginPlay, bool bExtraDoor);// 0xffffff8a17adf2b0
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0xffffff8a17adf2b0
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0xffffff8a17adf2b0
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0xffffff8a17adf2b0

--------------------------------
Class: UAEDoorActor.UAENetActor.Actor.Object

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x6c0, Size: 0xc]// 0x75b4dfc680
	float LineThickness;//[Offset: 0x6cc, Size: 0x4]// 0x75b4e0ee60
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x6db6eb4
	Vector GetUnscaledBoxExtent();// 0x6db6e8c
	Vector GetScaledBoxExtent();// 0x6db6e54

--------------------------------
Class: DoorRotationMoation
	bool IgnoreMotionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611f693f0
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611f69370
	bool bIsExDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x7611f692f0
	int FromState;//[Offset: 0x4, Size: 0x4]// 0x7611f69280
	int ToState;//[Offset: 0x8, Size: 0x4]// 0x7611f69210
	float RotationFrom;//[Offset: 0xc, Size: 0x4]// 0x7611f691a0
	float RotationTo;//[Offset: 0x10, Size: 0x4]// 0x7611f69130
	float RotationCurrent;//[Offset: 0x14, Size: 0x4]// 0x7611f690c0
	float RotationTime;//[Offset: 0x18, Size: 0x4]// 0x7611f69050
	float RotationLerpTime;//[Offset: 0x1c, Size: 0x4]// 0x7611f68fe0
	float RotationCurrentTime;//[Offset: 0x20, Size: 0x4]// 0x7611f68f70
	float RotationCurrentLerpTime;//[Offset: 0x24, Size: 0x4]// 0x7611f68f00
	StaticMeshComponent* doorMesh;//[Offset: 0x28, Size: 0x8]// 0x7611f68e80

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0x11c, Size: 0x4]// 0x75b4eba010
	FString Reason;//[Offset: 0x120, Size: 0x10]// 0x75b4eba080
	int end_timeNoPerception;//[Offset: 0x130, Size: 0x4]// 0x75b4eba0f0
	FString VoicePackets;//[Offset: 0x138, Size: 0x10]// 0x75b4eba160
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x148, Size: 0x10]// 0x75b4e89c00
	QuickChatIDAndAudio[] chatAvatarQuickList;//[Offset: 0x158, Size: 0x10]// 0x75b4e89d00
	QuickChatIDAndAudio[] chatQuickListFilterBySetting;//[Offset: 0x168, Size: 0x10]// 0x75b4e89e00
	FString TeammateColor;//[Offset: 0x178, Size: 0x10]// 0x75b4eba1d0
	FString MyColor;//[Offset: 0x188, Size: 0x10]// 0x75b4eba240
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x198, Size: 0x50]// 0x75b4e95c00
	QuickChatFlag[] ChatFlagList;//[Offset: 0x1e8, Size: 0x10]// 0x75b4e89f80
	float SendMsgCD;//[Offset: 0x1f8, Size: 0x4]// 0x75b4eba320
	float lastShowChatTime;//[Offset: 0x1fc, Size: 0x4]// 0x75b4eba390
	float ShowChatDuration;//[Offset: 0x200, Size: 0x4]// 0x75b4eba400
	<int,FString> IgnorePlayerNamemsgID;//[Offset: 0x208, Size: 0x50]// 0x75b4e95cc0
	RoundDiceInfo LastDiceInfo;//[Offset: 0x258, Size: 0x8]// 0x75b4e8a000
	float LastSelfDiceTime;//[Offset: 0x260, Size: 0x4]// 0x75b4eba550
	float DiceRoundCD;//[Offset: 0x264, Size: 0x4]// 0x75b4eba5c0
	QuickGroundFlag[] groundFlags;//[Offset: 0x298, Size: 0x10]// 0x75b4e8a100
	FString EndChar;//[Offset: 0x2a8, Size: 0x10]// 0x75b4eba630
	FString ColonChar;//[Offset: 0x2b8, Size: 0x10]// 0x75b4eba6a0
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x368, Size: 0x8]// 0x75b4e8a180
	int itemIDOnGround;//[Offset: 0x388, Size: 0x4]// 0x75b4eba710
	PickUpWrapperActor* itemOnGround;//[Offset: 0x390, Size: 0x8]// 0x75b4e8a200
	Vector hitItemPosition;//[Offset: 0x398, Size: 0xc]// 0x75b4e8a280
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]// 0x75b4e8a300
	Vector hitGroundPosition;//[Offset: 0x3a8, Size: 0xc]// 0x75b4e8a380
	int DiceMsgID;//[Offset: 0x3b4, Size: 0x4]// 0x75b4eba780
	FString DiceMsg;//[Offset: 0x3b8, Size: 0x10]// 0x75b4eba7f0
	FString EndDiceMsg;//[Offset: 0x3c8, Size: 0x10]// 0x75b4eba860
	FString CongregationPlayerName;//[Offset: 0x3d8, Size: 0x10]// 0x75b4eba8d0
	delegate OnClientReceiveMsg;//[Offset: 0x3e8, Size: 0x10]// 0x75b4e8a400
	delegate OnServerSendMsg;//[Offset: 0x3f8, Size: 0x10]// 0x75b4e8a480
	QuickGroundFlag[] QuickGroundFlagList;//[Offset: 0x468, Size: 0x10]// 0x75b4e8a580
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0xffffff8a17adf2b0
	void UpdateFlagIcon();// 0x425eec4
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x425ed7c
	void ShowTeamMsg(InGameChatMsg MsgItem, bool isMe);// 0x425ebcc
	void ShowQuickPanel(bool bShow);// 0x425eb48
	void ShowFlag(out const InGameChatMsg MsgItem, enum flatType);// 0x425ea44
	static void SetPlayerKeyToChatMsg(out InGameChatMsg CustomMsg, FString PlayerKey);// 0x425e944
	void SetCurrGameIsPlay(FString GameID);// 0xffffff8a17adf2b0
	void SetAvatarQuickList(int res);// 0xffffff8a17adf2b0
	void SetAvatarQuickCheckMap();// 0x425e930
	void ServerSwitchVoiceChanger(bool bOpen);// 0x425e86c
	void ServerSetEditorQuickTextList(const int[] SettingQuickTextList);// 0x425e7b4
	void ServerSendMsg(const InGameChatMsg MsgItem);// 0x425e6d4
	void ServerSendDice(bool StartDice);// 0x425e610
	bool ServerCanSendMsg(out const InGameChatMsg MsgItem);// 0x425e538
	void SendDirtyFilterContent(FString Content);// 0xffffff8a17adf2b0
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool isSys, int MsgID);// 0xffffff8a17adf2b0
	void SendCustomMsg(InGameChatMsg CustomMsg);// 0x425e3d8
	void ReportBattleChat(FString Msg);// 0xffffff8a17adf2b0
	void RemoveQuickGroundFlag(int InInstanceID);// 0x425e35c
	void RemoveInvalidQuickGroundFlag();// 0x425e348
	void RemoveAllQuickGroundFlag();// 0x425e334
	void PostName(const AkAudioEvent* pEvent);// 0x425e2b8
	void OnRep_LastSelfTime();// 0x425e2a4
	void OnRep_LastDiceInfo();// 0x425e290
	void OnRep_chatQuickList();// 0x425e27c
	void OnRep_chatAvatarQuickList();// 0x425e268
	void OnPlayerEnterFlying();// 0x425e24c
	void OnInviteNextBattle(FString gid, FString Name);// 0x425e17c
	void OnFilterFinish(FString filterText, FString callback_data);// 0xffffff8a17adf2b0
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0xffffff8a17adf2b0
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0xffffff8a17adf2b0
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0xffffff8a17adf2b0
	bool IsStartRoundDice();// 0x425e144
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x425e030
	void IncreasePlayTimes();// 0xffffff8a17adf2b0
	int GetTodayPlayTimes();// 0xffffff8a17adf2b0
	ChatComponent*[] GetTeammateChatComponent(bool bExclusiveSelf);// 0x425df58
	static FString GetPlayerKeyFromChatMsg(InGameChatMsg CustomMsg);// 0x425ddb0
	bool GetCurrGameIsPlay(FString GameID);// 0xffffff8a17adf2b0
	float GetCurrentTimeSeconds();// 0x425dd7c
	ChatComponent*[] GetChatList(bool bExclusiveSelf);// 0x425dca4
	ChatComponent*[] GetCampTeammateChatComponet(bool bExclusiveSelf);// 0x425dbcc
	int GetAudioIDByMsgID(enum chatType, int MsgID);// 0x425db04
	bool FindQuickGroundFlag(int InInstanceID, out QuickGroundFlag outFlag);// 0x425da08
	void FilterQuickChatListBySetting();// 0xffffff8a17adf2b0
	void EndDiceRound();// 0x425d9f4
	void DispatchServerMsg(out const InGameChatMsg MsgItem, bool isMe);// 0x425d8e8
	bool DiceRoundStartBySelf();// 0x425d8b0
	void CloseChatHistoryList();// 0xffffff8a17adf2b0
	void ClientReceiveMsg(const InGameChatMsg MsgItem, bool isMe);// 0x425d7b8
	bool CheckAudioID(int MsgID, int audioID);// 0x425d6f0
	void ChangeServerState(enum State);// 0xffffff8a17adf2b0
	bool CanDiceNow();// 0x425d6b8
	void AddQuickGroundFlag(int InInstanceID, out const QuickGroundFlag InFlag);// 0x425d5d0
	void AddOneMsgToUI1(out const InGameChatMsg Item, FString Name, FString Content, int MsgID, int audioID, bool isMe, bool PlaySound);// 0xffffff8a17adf2b0
	void AddFriendChat(FString gid, FString Name, FString Content, bool isSelf);// 0x425d394

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 0x4]// 0x761216abd0
	int audioID;//[Offset: 0x4, Size: 0x4]// 0x761216ab60

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 0x10]// 0x761216b6b0

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x761216ba30
	FString Content;//[Offset: 0x10, Size: 0x10]// 0x761216b9c0
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x761216b940
	int MsgType;//[Offset: 0x24, Size: 0x4]// 0x761216b8d0
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x761216b850

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 0x1]// 0x761216b200
	int chatID;//[Offset: 0x4, Size: 0x4]// 0x761216b190
	int AlternateChatID;//[Offset: 0x8, Size: 0x4]// 0x761216b120
	int FlagIndex;//[Offset: 0xc, Size: 0x4]// 0x761216b0b0
	int traceDist;//[Offset: 0x10, Size: 0x4]// 0x761216b040
	float minDist;//[Offset: 0x14, Size: 0x4]// 0x761216afd0

--------------------------------
Class: RoundDiceInfo
	float LastTeamDiceTime;//[Offset: 0x0, Size: 0x4]// 0x761216aa50
	uint32 LastDicePlayerKey;//[Offset: 0x4, Size: 0x4]// 0x761216a9e0

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x4, Size: 0x4]// 0x761216aec0
	int flagID;//[Offset: 0x8, Size: 0x4]// 0x761216ae50
	Vector hitPosition;//[Offset: 0xc, Size: 0xc]// 0x761216add0
	int ItemID;//[Offset: 0x18, Size: 0x4]// 0x761216ad60
	bool isValidPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]// 0x761216ace0

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0x158, Size: 0x4]// 0x761202c940
	float PickUpZLimit;//[Offset: 0x15c, Size: 0x4]// 0x761202c8d0
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]// 0x761202c850
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x168, Size: 0x10]// 0x761202c750
	int FindPutDownPointCircleSplitNum;//[Offset: 0x178, Size: 0x4]// 0x761202c6e0
	float FindPutDownPointZThreshold;//[Offset: 0x17c, Size: 0x4]// 0x761202c670
	float FindPutDownPointZTraceOffset;//[Offset: 0x180, Size: 0x4]// 0x761202c600
	Vector2D RegionXRange;//[Offset: 0x184, Size: 0x8]// 0x761202c580
	Vector2D RegionYRange;//[Offset: 0x18c, Size: 0x8]// 0x761202c500
	Vector PutDownOffset;//[Offset: 0x194, Size: 0xc]// 0x761202c480
	bool bEnableMultiObjPickUpVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]// 0x761202c400
	bool bTraceUseOwnerUpDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]// 0x761202c380
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 0x1]// 0x761202c300
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3, Size: 0x1]// 0x761202c280
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x1a4, Size: 0xc]// 0x761202c200
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x1b0, Size: 0x4]// 0x761202c190
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x1b4, Size: 0x4]// 0x761202c120
	float DrawTime;//[Offset: 0x1b8, Size: 0x4]// 0x761202c0b0
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]// 0x761202c030
	bool bEnableUpdatePlayerTombWrapperOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 0x1]// 0x761202bfb0
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x1c0, Size: 0x8]// 0x761202bf30
	PrimitiveComponent* CacheRepBaseForGetRandomLoc;//[Offset: 0x1c8, Size: 0x8]// 0x761202beb0
	delegate OnPickUpAvailableDataChangeDelegate;//[Offset: 0x1d0, Size: 0x10]// 0x761202be30
	delegate OnPickUpTarger;//[Offset: 0x1e0, Size: 0x10]// 0x761202bdb0
	Actor*[] PickupAvailableActorPool;//[Offset: 0x1f0, Size: 0x10]// 0x761202bcb0
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x200, Size: 0x10]// 0x761202bbb0
	Actor*[] OldConfirmedPickupActorPool;//[Offset: 0x210, Size: 0x10]// 0x761202bab0
	bool bIsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]// 0x761202ba30
	int TeamOnlyBoxTipID;//[Offset: 0x234, Size: 0x4]// 0x761202b9c0
	void UpdatePickupDirty(bool bForceDirty);// 0x4481ea8
	void UpdatePickupAvailableActors();// 0x4481e8c
	void SetEnable(bool IsEnable);// 0x4481e08
	void ServerTestSpawnWrapper(class PickUpWrapperActor WrapperClass, int Count, int Num);// 0x4481ce0
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x4481be4
	void ServerPutDownTarget(Actor* Target);// 0x4481b34
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x4481a0c
	void ResetPickupPool();// 0x44819f8
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x4481938
	void PutDownTarget(Actor* Target);// 0x44818bc
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x44817cc
	void OnPickUpTarger__DelegateSignature(Actor* Target);// 0xffffff8a17adf2b0
	void OnPickUpAvailableDataChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x4481750
	void NotifyMeetPickupAvailableActor(Actor* Target);// 0x44816d4
	Vector GetRandomPutDownLocationWithPutDownOffset(float OverrideFindPutDownPointZThreshold);// 0x4481644
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x44815b4
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x44814b0
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x44813b4
	void ControlClientPutDownTarget(Actor* Target);// 0x4481304
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x4481214
	void ClampWorldLocation(out Vector OutVector);// 0x4481188

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x761202d2d0
	uint32 playerIdentifier;//[Offset: 0x10, Size: 0x4]// 0x761202d260
	FString msgContent;//[Offset: 0x18, Size: 0x10]// 0x761202d1f0
	int MsgID;//[Offset: 0x28, Size: 0x4]// 0x761202d180
	int audioID;//[Offset: 0x2c, Size: 0x4]// 0x761202d110
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x761202d090
	Vector hitPosition;//[Offset: 0x34, Size: 0xc]// 0x761202d010
	int itemIDOnGround;//[Offset: 0x40, Size: 0x4]// 0x761202cfa0
	enum MsgType;//[Offset: 0x44, Size: 0x1]// 0x761202cea0
	byte BPEnumSpecificType;//[Offset: 0x45, Size: 0x1]// 0x761202ce20

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x118, Size: 0x10]// 0x75a87e4f00
	delegate OnDelSignMarkDelegate;//[Offset: 0x128, Size: 0x10]// 0x75a87e4f80
	delegate OnClearAllMarkDelegate;//[Offset: 0x138, Size: 0x10]// 0x75a87e5000
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]// 0x75a87e5080
	int TextID_OutRange;//[Offset: 0x14c, Size: 0x4]// 0x75a87cae10
	FString PreFix_Command;//[Offset: 0x150, Size: 0x10]// 0x75a87cae80
	FString PreFix_Command_Res;//[Offset: 0x160, Size: 0x10]// 0x75a87caef0
	FString PreFix_Mark;//[Offset: 0x170, Size: 0x10]// 0x75a87caf60
	int MinTraceDist;//[Offset: 0x180, Size: 0x4]// 0x75a87cafd0
	int MaxTraceDist;//[Offset: 0x184, Size: 0x4]// 0x75a87cb040
	int ItemTraceDist;//[Offset: 0x188, Size: 0x4]// 0x75a87cb0b0
	int RobotItemTraceDist;//[Offset: 0x18c, Size: 0x4]// 0x75a87cb120
	int MaxAirDropMarkDist;//[Offset: 0x190, Size: 0x4]// 0x75a87cb190
	int MarkMutualExclusionDist;//[Offset: 0x194, Size: 0x4]// 0x75a87cb200
	int MiniMapAttentionIconID;//[Offset: 0x198, Size: 0x4]// 0x75a87cb270
	int MiniMapThingIconID;//[Offset: 0x19c, Size: 0x4]// 0x75a87cb2e0
	<int,FString> CommandTypeIDMap;//[Offset: 0x1a0, Size: 0x50]// 0x75a87d88c0
	<FString,class Object> MarkNameClassMap;//[Offset: 0x1f0, Size: 0x50]// 0x75a87d8980
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x240, Size: 0x50]// 0x75a87d8a40
	<FString,float> MarkLifeTimeMap;//[Offset: 0x290, Size: 0x50]// 0x75a87d8b00
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x2e0, Size: 0x50]// 0x75a87d8bc0
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x330, Size: 0x50]// 0x75a87d8c80
	int[] ActorNetGUIDTrashArray;//[Offset: 0x380, Size: 0x10]// 0x75a87e5280
	FString[] TempIDArray;//[Offset: 0x390, Size: 0x10]// 0x75a87e5300
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x428, Size: 0x50]// 0x75a87d8d40
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x478, Size: 0x50]// 0x75a87d8e00
	<FString,int> ConfigKeyToTextID;//[Offset: 0x4c8, Size: 0x50]// 0x75a87d8ec0
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x44cedd8
	void SpecialActorState(Actor* TargetActor, FString InputConfigKey, out FString ConfigKey);// 0xffffff8a17adf2b0
	void ShowMsgTipsVoice(out const QuickSignMsg MsgItem, bool isSelf);// 0xffffff8a17adf2b0
	void SetTouchPointStatus();// 0x44cedc4
	void ServerSendMsg(const QuickSignMsg MsgItem);// 0x44cecc0
	void ServerDelMsg(FString MsgID);// 0x44cec08
	void RemoveActorMask(int ActorNetGUID);// 0x44ceb58
	void OperMark(byte InputSignType, FString MsgID);// 0x44cea94
	bool MakeQuickMark_SpecificActor(Actor* SpecificActor);// 0x44cea04
	void MakeQuickMark_PickupActorTombox(PickUpWrapperActor* PickUpActor, int TypespeacialID, int InstanceID);// 0x44ce914
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x44ce898
	void MakeQuickMark();// 0x44ce884
	void MakeQuickCommand(byte InputSignType, int AudioTextId, int audioID, byte SignType);// 0x44ce758
	bool IsSelfMark(FString MsgID);// 0x44ce6c0
	bool IsRepliedMark(FString MsgID);// 0x44ce628
	FString GetNewMsgID(int idx);// 0x44ce558
	bool GenerateMarkInfo(out const QuickSignMsg MsgItem, out QuickSignMark MarkInfo);// 0xffffff8a17adf2b0
	void DelMarkFromPool(FString MsgMark);// 0x44ce4d4
	void DelAllMarkFromPool();// 0x44ce4c0
	void DealWithNewMsg(out const QuickSignMsg MsgItem, bool isSelf, bool ShowChat);// 0x44ce34c
	void ClientReceiveMsg(const QuickSignMsg MsgItem, bool isSelf);// 0x44ce230
	void ClientDelMsg(FString MsgID);// 0x44ce1a4
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x44ce0d4
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x44cdfd4
	void AddActorMask(int ActorNetGUID);// 0x44cdf24

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 0x10]// 0x761202dc40
	FString MarkType;//[Offset: 0x10, Size: 0x10]// 0x761202dbd0
	int PlayerInTeamIndex;//[Offset: 0x20, Size: 0x4]// 0x761202db60
	FString IconPath;//[Offset: 0x28, Size: 0x10]// 0x761202daf0
	FString IconBGPath;//[Offset: 0x38, Size: 0x10]// 0x761202da80
	FString IconOuterPath;//[Offset: 0x48, Size: 0x10]// 0x761202da10
	FString IconOuterBGPath;//[Offset: 0x58, Size: 0x10]// 0x761202d9a0
	FString ReplyID;//[Offset: 0x68, Size: 0x10]// 0x761202d930
	Vector Loc;//[Offset: 0x78, Size: 0xc]// 0x761202d8b0
	int MaxNum;//[Offset: 0x84, Size: 0x4]// 0x761202d840
	int LifeSpan;//[Offset: 0x88, Size: 0x4]// 0x761202d7d0
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]// 0x761202d750
	bool IsReplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]// 0x761202d6d0

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 0x10]// 0x76121c7330

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0x118, Size: 0x8]// 0x75d0b57500
	FString OwningPlayerName;//[Offset: 0x120, Size: 0x10]// 0x761154f380
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0x130, Size: 0x10]// 0x75d0b57600
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x140, Size: 0x50]// 0x75d0b64980
	<int,AreaParam> AreaParamCache;//[Offset: 0x190, Size: 0x50]// 0x75d0b64a40
	int LastAreaID;//[Offset: 0x1e0, Size: 0x4]// 0x761154f4d0
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x41dbb14
	int RetrieveLandLocType(FString TargetName);// 0x41dba34
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskID, int process);// 0x41db93c
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x41db830
	bool IsTriggerActive(int InTaskID);// 0x41db7a0
	bool IsSpecialPickItem(int InItemID);// 0x41db710
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName, int AreaID);// 0x41db470
	bool IsCacheAreaParam();// 0x41db448
	void HandlePlayerPickupItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x41db358
	void HandlePlayerKilling();// 0x41db344
	void HandlePlayerEnterArea(int AreaID);// 0x41db2c8
	void HandlePlayerDropItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x41db1d8
	void HandlePlayerDoEmote(int EmoteIndex);// 0x41db15c
	void HandleInitTaskData(int TaskID, int process, FString ext_info);// 0x41db000
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x41daf10
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x41dae6c
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x41dade0
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0xffffff8a17adf2b0
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0xffffff8a17adf2b0
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x41daca8
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x41dab94
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0xffffff8a17adf2b0
	FString GetOwningPlayerName();// 0x41dab14
	FString GetMapName();// 0x41daa94
	int GetLandLocIDFromDataTable(FString InTargetName);// 0xffffff8a17adf2b0
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x41da938
	int FetchSpecifiedAreaIDByCache(Vector PlayerLocation);// 0x41da8a8
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x41da7e8
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskID);// 0x41da718
	bool AddTrigger(byte TaskType, int TaskID, int process, FString ext_info);// 0x41da56c
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x41da474
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x41da3b4

--------------------------------
Class: AreaParam
	Vector[] AreaAnchors;//[Offset: 0x0, Size: 0x10]// 0x761215be90
	int BattleTextID;//[Offset: 0x10, Size: 0x4]// 0x761215be20

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x1a8, Size: 0x8]// 0x75a8960580
	byte[] TaskEventTypes;//[Offset: 0x1b0, Size: 0x10]// 0x75a8960680
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x1c0, Size: 0x10]// 0x75a8960780
	int TaskID;//[Offset: 0x1d0, Size: 0x4]// 0x75a895a040
	byte TaskType;//[Offset: 0x1d4, Size: 0x1]// 0x75a8960800
	void SetTaskProcess(int process, FString ext_info);// 0x479d320
	void RedoAction();// 0x479d304
	void NofityTriggerComplete();// 0x479d2e8
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x479d250
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x479d150
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x479d088
	TriggerCondition* CreateTeamActionCondition(byte TeamActionConType, float TimeIntervalForSameEmote);// 0x479cfb8
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x479cf24
	TriggerCondition* CreateSpecifiedItemCondition(int ItemID);// 0x479ce98
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x479ce04
	TriggerAction* CreateRedoAction(byte ActionType);// 0x479cd70
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x479cc90
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x479cb68
	TriggerCondition* CreateKillPlayerCondition();// 0x479cb34
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x479caa8
	TriggerAction* CreateDoAction(byte ActionType);// 0x479ca14
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x479c988
	TriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);// 0x479c8c4
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x479c7e4
	TriggerAction* CreateAction(byte ActionType);// 0x479c750
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x479c604
	byte[] ConstructRedoActions();// 0xffffff8a17adf2b0
	byte[] ConstructEvents();// 0xffffff8a17adf2b0
	TriggerCondition* ConstructConditions();// 0xffffff8a17adf2b0
	byte[] ConstructActions();// 0xffffff8a17adf2b0
	void AddEventTypes(byte[] EventTypes);// 0x479c52c
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x479c450

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object
	TriggerCondition*[] ChildConditions;//[Offset: 0x58, Size: 0x10]// 0x75a8549780
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x4745824

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x50, Size: 0x1]// 0x75a8549d80
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]// 0x75a8549e00
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]// 0x75a8549e80
	void SetTargetParam(int Value);// 0x474748c
	void SetConditionParam(int Value);// 0x4747408
	bool IsSatisfy(const TriggerEvent* Event);// 0x4747370
	bool IsSameCondition(byte InTaskConditionType);// 0x47472d8
	bool FillDataSource(VariableSet* InDataSource);// 0x4747240
	bool DeactiveCondition(VariableSet* InDataSource);// 0x47471a8
	bool CompareParam(VariableSet* InDataSource);// 0x4747110
	bool ActiveCondition(VariableSet* InDataSource);// 0x4747078

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611ff8120
	byte Gender;//[Offset: 0x10, Size: 0x1]// 0x7611ff80a0

--------------------------------
Class: SyncOBDataActor.Actor.Object
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x540, Size: 0x10]// 0x7612056070
	PlayerWeatherMap[] TotalPlayerWeatherMap;//[Offset: 0x550, Size: 0x10]// 0x7612055df0
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x560, Size: 0x10]// 0x7612055a60
	OBPlayerAdditionalInfo[] OBPlayerInfoList;//[Offset: 0x570, Size: 0x10]// 0x76120557d0
	BattleItemData[] CacheObservedItemListOnReplay;//[Offset: 0x5e8, Size: 0x10]// 0x76120556d0
	IncNetArrayNew CacheOBItemOnReplay;//[Offset: 0x5f8, Size: 0xc0]// 0x7612055650
	RouteSegment[] RouteSegmentData;//[Offset: 0x728, Size: 0x10]// 0x7612055550
	PlayerStaticInfoInOB[] TotalPlayers_s;//[Offset: 0x738, Size: 0x10]// 0x7612055450
	<int,RouteSegment> RouteSegmentList;//[Offset: 0x748, Size: 0x50]// 0x76120552b0
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x798, Size: 0x10]// 0x76120551b0
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x7a8, Size: 0x10]// 0x76120550b0
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x7b8, Size: 0x10]// 0x7612054fb0
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x7c8, Size: 0x10]// 0x7612054eb0
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x7d8, Size: 0x50]// 0x76120549b0
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 0x1]// 0x7612054930
	float EagleWatchDistance;//[Offset: 0x83c, Size: 0x4]// 0x76120548c0
	byte EagleWatchListLevel;//[Offset: 0x840, Size: 0x1]// 0x7612054840
	PlayerOBUIDMap[] TotalPlayerOBUIDMap;//[Offset: 0x900, Size: 0x10]// 0x7612054540
	PlayerOBFlowMap[] TotalPlayerOBFlowMap;//[Offset: 0x910, Size: 0x10]// 0x7612054230
	void SyncStopFirePlayers(const uint32[] InPlayerList);// 0x47033a4
	void SyncStartFirePlayers(const uint32[] InPlayerList);// 0x4703318
	void OnRep_TotalPlayerWeatherMap();// 0x4703304
	void OnRep_TotalPlayers_StaticInfo();// 0x47032f0
	void OnRep_TotalPlayerOBUIDMap();// 0x47032dc
	void OnRep_TotalPlayerOBFlowMap();// 0x47032c8
	void OnRep_RouteSegmentList();// 0x47032b4
	void OnRep_RefreshTotalPlayers();// 0x47032a0
	void OnRep_RefreshAirDropBox();// 0x470328c
	void OnRep_ObservedItemList_OnReplay();// 0x4703278
	void OnRep_ObservedItemList();// 0x4703264
	void OnPlayerRespawned(uint32 PlayerKey, bool bIsAI);// 0x47031a4
	void OnPlayerItemUpdate(ItemHandleBase* Handle);// 0x4703128
	Vector GetNewestAirDropBoxPos();// 0x47030f0
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x4702ffc

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0, Size: 0x4]// 0x7611f80330
	int PosY;//[Offset: 0x4, Size: 0x4]// 0x7611f802c0
	int PosZ;//[Offset: 0x8, Size: 0x4]// 0x7611f80250
	int Health;//[Offset: 0xc, Size: 0x4]// 0x7611f801e0
	int HealthMax;//[Offset: 0x10, Size: 0x4]// 0x7611f80170
	int LiveState;//[Offset: 0x14, Size: 0x4]// 0x7611f80100
	int KillNum;//[Offset: 0x18, Size: 0x4]// 0x7611f80090
	int Yaw;//[Offset: 0x1c, Size: 0x4]// 0x7611f80020
	int Pitch;//[Offset: 0x20, Size: 0x4]// 0x7611f7ffb0
	float SignalHP;//[Offset: 0x24, Size: 0x4]// 0x7611f7ff40
	uint32 PlayerKey;//[Offset: 0x28, Size: 0x4]// 0x7611f7fed0
	uint32 KillByCauserKey;//[Offset: 0x2c, Size: 0x4]// 0x7611f7fe60
	int GruopID;//[Offset: 0x30, Size: 0x4]// 0x7611f7fdf0
	bool KillByObGMDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x7611f7fd70
	bool bSnapsPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]// 0x7611f7fcf0

--------------------------------
Class: PlayerWeatherMap
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]// 0x7612056000
	int WeatherIndex;//[Offset: 0x4, Size: 0x4]// 0x7612055f90

--------------------------------
Class: AirDropBoxInOb
	int BoxId;//[Offset: 0x0, Size: 0x4]// 0x7612055d80
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7612055d00
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]// 0x7612055c80
	Vector Pos;//[Offset: 0x8, Size: 0xc]// 0x7612055c00

--------------------------------
Class: OBPlayerAdditionalInfo
	uint32 uPlayerKey;//[Offset: 0x0, Size: 0x4]// 0x76120559f0
	IncNetArrayNew OBItemList;//[Offset: 0x8, Size: 0xc0]// 0x7612055970

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611f80860
	FString PlayerOpenID;//[Offset: 0x10, Size: 0x10]// 0x7611f807f0
	FString PicURL;//[Offset: 0x20, Size: 0x10]// 0x7611f80780
	int TeamID;//[Offset: 0x30, Size: 0x4]// 0x7611f80710
	byte IdxInTeam;//[Offset: 0x34, Size: 0x1]// 0x7611f80690
	uint32 PlayerKey;//[Offset: 0x38, Size: 0x4]// 0x7611f80620
	FString PlayerUID;//[Offset: 0x40, Size: 0x10]// 0x7611f805b0
	int JumpSegmentID;//[Offset: 0x50, Size: 0x4]// 0x7611f80540

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	FString PlayerName;//[Offset: 0x38, Size: 0x10]// 0x7611f8f210
	FString PlayerRemarkName;//[Offset: 0x48, Size: 0x10]// 0x7611f8f1a0
	FString PlayerOpenID;//[Offset: 0x58, Size: 0x10]// 0x7611f8f130
	FString PlayerUID;//[Offset: 0x68, Size: 0x10]// 0x7611f8f0c0
	FString PicURL;//[Offset: 0x78, Size: 0x10]// 0x7611f8f050
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]// 0x7611f8efd0
	int TeamID;//[Offset: 0x8c, Size: 0x4]// 0x7611f8ef60
	Pawn* Character;//[Offset: 0x90, Size: 0x8]// 0x7611f8eee0
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]// 0x7611f8ee60
	Vector ShootPos;//[Offset: 0xa0, Size: 0xc]// 0x7611f8ede0
	bool BeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]// 0x7611f8ed60
	bool bMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]// 0x7611f8ece0
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1]// 0x7611f8ec60
	FString StrPlayerKey;//[Offset: 0xb0, Size: 0x10]// 0x7611f8ebf0
	byte IdxInTeam;//[Offset: 0xd5, Size: 0x1]// 0x7611f8eb70

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 0x4]// 0x7612054e40
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7612054dc0
	FString LogoPicUrl;//[Offset: 0x8, Size: 0x10]// 0x7612054d50
	int KillNum;//[Offset: 0x18, Size: 0x4]// 0x7612054ce0
	int LiveMemberNum;//[Offset: 0x1c, Size: 0x4]// 0x7612054c70
	Vector LogoWorldPostion;//[Offset: 0x20, Size: 0xc]// 0x7612054bf0

--------------------------------
Class: PlayerOBUIDMap
	uint64 SrcOBPlayerUID;//[Offset: 0x0, Size: 0x8]// 0x76120547d0
	uint64 DestOBPlayerUID;//[Offset: 0x8, Size: 0x8]// 0x7612054760
	bool bIsWatchingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76120546e0

--------------------------------
Class: PlayerOBFlowMap
	uint64 SrcOBPlayerUID;//[Offset: 0x0, Size: 0x8]// 0x76120544d0
	enum ObserveFlow;//[Offset: 0x8, Size: 0x1]// 0x76120543d0

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611ff7aa0
	FString PicURL;//[Offset: 0x10, Size: 0x10]// 0x7611ff7a30
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611ff79b0
	int TeamID;//[Offset: 0x24, Size: 0x4]// 0x7611ff7940
	FString PlayerUID;//[Offset: 0x28, Size: 0x10]// 0x7611ff78d0
	Vector[] PosList;//[Offset: 0x38, Size: 0x10]// 0x7611ff77d0
	float CanJumpLocInMapSelf;//[Offset: 0x4c, Size: 0x4]// 0x7611ff7760
	float ForceJumpLocInMapSelf;//[Offset: 0x50, Size: 0x4]// 0x7611ff76f0

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 0x10]// 0x7611ff50b0
	uint32 CharacterGUID;//[Offset: 0x10, Size: 0x4]// 0x7611ff5040

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x510, Size: 0x8]// 0x75bca80300
	Actor* ReturnActor;//[Offset: 0x518, Size: 0x8]// 0x75bca80380
	SpringArmComponent* CameraSpringArm;//[Offset: 0x540, Size: 0x8]// 0x75bca80400
	CameraComponent* ObservingCamera;//[Offset: 0x548, Size: 0x8]// 0x75bca80480
	float MinMovingSpeed;//[Offset: 0x568, Size: 0x4]// 0x75a88eefc0
	float MaxMovingTime;//[Offset: 0x56c, Size: 0x4]// 0x75a88ef030
	float ObservingTime;//[Offset: 0x570, Size: 0x4]// 0x75a88ef0a0
	float TrackingDelay;//[Offset: 0x574, Size: 0x4]// 0x75a88ef110
	float ExpectedMinObservingDistance;//[Offset: 0x578, Size: 0x4]// 0x75a88ef180
	float CameraAdjustSpeed;//[Offset: 0x57c, Size: 0x4]// 0x75a88ef1f0
	void CancelTrackingEnd(UAEPlayerController* PlayerController);// 0x43d71a0

--------------------------------
Class: InformPlayerTypeInfo
	FString InstigatorName;//[Offset: 0x0, Size: 0x10]// 0x7611f8b360
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611f8b2e0
	FString InstigatorUID;//[Offset: 0x18, Size: 0x10]// 0x7611f8b270
	int DamageType;//[Offset: 0x28, Size: 0x4]// 0x7611f8b200
	bool IsTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7611f8b180
	bool IsMurder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]// 0x7611f8b100
	bool IsInCurrentWatchTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]// 0x7611f8b080
	bool IsHitDownPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]// 0x7611f8b000
	bool IsUseCustomEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611f8af80
	FString ExString;//[Offset: 0x38, Size: 0x10]// 0x7611f8af10

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75a84d0500
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x120, Size: 0x18]// 0x75a84d0580
	float LastFinishCD;//[Offset: 0x138, Size: 0x4]// 0x760d148840
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 0x1]// 0x75a84d0600
	STExtraVehicleBase* Vehicle;//[Offset: 0x140, Size: 0x8]// 0x75a84d0680
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x148, Size: 0x8]// 0x75a84d0700
	STExtraPlayerCharacter* Character;//[Offset: 0x150, Size: 0x8]// 0x75a84d0780
	enum VehicleUserState;//[Offset: 0x158, Size: 0x1]// 0x75a84d0880
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x160, Size: 0x8]// 0x75a84d0900
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x168, Size: 0x4]// 0x760d1488b0
	bool bAllowTickUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x75a84d0980
	bool bUpdateClosestVehicle_NeedValidState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]// 0x75a84d0a00
	float UpdateClosestVehicleInterval;//[Offset: 0x174, Size: 0x4]// 0x760d148920
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x180, Size: 0x10]// 0x75a84d0b00
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x190, Size: 0x10]// 0x75a84d0c00
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x1a0, Size: 0x8]// 0x75a84d0c80
	bool bIsCurrentClosestVehicleDriversSeatAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]// 0x75a84d0d00
	bool bIsCurrentClosestVehiclePsgersSeatAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]// 0x75a84d0d80
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]// 0x75a84d0e00
	float MaxAllowedExitSpeedDiff;//[Offset: 0x1bc, Size: 0x4]// 0x760d148990
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]// 0x75a84d0e80
	FName VehiclePitchLimit;//[Offset: 0x1d0, Size: 0x8]// 0x760d148a00
	float VehiclePitchMin;//[Offset: 0x1d8, Size: 0x4]// 0x760d148a70
	float VehiclePitchMax;//[Offset: 0x1dc, Size: 0x4]// 0x760d148ae0
	float NoFuelTipsDisplayCooldown;//[Offset: 0x1e0, Size: 0x4]// 0x760d148b50
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]// 0x75a84d0f00
	float ExitVehicleCheckInterval;//[Offset: 0x1f0, Size: 0x4]// 0x760d148bc0
	bool bWaitToHandleClientReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]// 0x75a84d0f80
	bool bCanHandleClientReconnectingUntilGameUIRootValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]// 0x75a84d1000
	float CurrentMoveForwardRate;//[Offset: 0x204, Size: 0x4]// 0x760d148c30
	float CurrentMoveRightRate;//[Offset: 0x208, Size: 0x4]// 0x760d148ca0
	float CurrentMoveUpRate;//[Offset: 0x20c, Size: 0x4]// 0x760d148d10
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]// 0x75a84d1080
	float BaseVehicleLockTime;//[Offset: 0x214, Size: 0x4]// 0x760d148d80
	float BaseVehicleServerAuTime;//[Offset: 0x218, Size: 0x4]// 0x760d148df0
	float MaxVehicleLockTime;//[Offset: 0x21c, Size: 0x4]// 0x760d148e60
	float MaxVehicleServerAuTime;//[Offset: 0x220, Size: 0x4]// 0x760d148ed0
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]// 0x75a84d1100
	float UAVSpeedPercent;//[Offset: 0x228, Size: 0x4]// 0x760d148f40
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]// 0x75a84d1180
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x238, Size: 0x8]// 0x75a84d1200
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x240, Size: 0x8]// 0x75a84d1280
	Rotator InputExtraRot;//[Offset: 0x248, Size: 0xc]// 0x75a84d1300
	Rotator CharRotVsVehiRot;//[Offset: 0x254, Size: 0xc]// 0x75a84d1380
	float ResetInputExtraRotTime;//[Offset: 0x264, Size: 0x4]// 0x760d148fb0
	bool bResetInputExtraRotPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]// 0x75a84d1400
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]// 0x75a84d1480
	bool isHelicopterSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 0x1]// 0x75a84d1500
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x2a4, Size: 0x4]// 0x760d149020
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x2ac, Size: 0x4]// 0x760d149090
	float ControllerYawClampMin;//[Offset: 0x2b4, Size: 0x4]// 0x760d149100
	float ControllerYawClampMax;//[Offset: 0x2b8, Size: 0x4]// 0x760d149170
	enum CurrentSeatType;//[Offset: 0x2bc, Size: 0x1]// 0x75a84d1600
	delegate OnClientEnterVehicleDelegate;//[Offset: 0x2d8, Size: 0x10]// 0x75a84d1680
	delegate OnClientExitVehicleDelegate;//[Offset: 0x2e8, Size: 0x10]// 0x75a84d1700
	bool IsEnteredByJoystickClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]// 0x75a84d1780
	float ValidClickInterval;//[Offset: 0x2fc, Size: 0x4]// 0x760d1491e0
	float ValidClickDistance;//[Offset: 0x300, Size: 0x4]// 0x760d149250
	Vector2D ValidClickCenter;//[Offset: 0x304, Size: 0x8]// 0x75a84d1800
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x318, Size: 0x8]// 0x75a84d1880
	enum SeatType;//[Offset: 0x324, Size: 0x1]// 0x75a84d1980
	int ExitVehicleFailWarnTime;//[Offset: 0x328, Size: 0x4]// 0x760d1492c0
	int CurExitVehicleFailTime;//[Offset: 0x32c, Size: 0x4]// 0x760d149330
	Transform LastExitVehicleFailTrans;//[Offset: 0x330, Size: 0x30]// 0x75a84d1a00
	float ClearVehicleFailTimeSqDistance;//[Offset: 0x360, Size: 0x4]// 0x760d1493a0
	delegate OnVehicleEnjoyVoiceButtonTriggeredDelegate;//[Offset: 0x378, Size: 0x10]// 0x75a84d1a80
	int EnterVehicleFailMsgID_CantMoveStraightToVehicle;//[Offset: 0x388, Size: 0x4]// 0x760d149410
	int EnterVehicleFailMsgID_CheckCurrentStateFail;//[Offset: 0x38c, Size: 0x4]// 0x760d149480
	int EnterVehicleFailMsgID_NotSameTeam;//[Offset: 0x390, Size: 0x4]// 0x760d1494f0
	int EnterVehicleFailMsgID_CheckVehiclePositionState;//[Offset: 0x394, Size: 0x4]// 0x760d149560
	int EnterVehicleFailMsgID_HasNotEnoughSpace;//[Offset: 0x398, Size: 0x4]// 0x760d1495d0
	int EnterVehicleFailMsgID_HasNotAvailableSeat;//[Offset: 0x39c, Size: 0x4]// 0x760d149640
	bool bIsCurrentShowPickUPBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]// 0x75a84d1b00
	void UseVehicleWeaponOrNot();// 0x47e7ab0
	void UsePopKartPassDoorAccelerate();// 0x47e7a50
	void UpdateVehWeaponPassengerViewLimit();// 0x47e7a3c
	void UpdatePassengerViewYawLimit();// 0x47e7a28
	void UpdatePassengerViewPitchLimit();// 0x47e7a14
	void TurnVehicle(float Rate);// 0x47e7998
	void TryUseHorn(bool bUse);// 0x47e7914
	void TryStopRemoteControlVehicle();// 0x47e7900
	void TryShutDownUnmannedVehicle();// 0x47e78ec
	void TryRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x47e7870
	void TryPauseUnmannedVehicle();// 0x47e785c
	bool TryLeanOutOrIn(bool bAutoLeanOut);// 0x47e77c4
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x47e7748
	void TryLaunchCurrentUnmannedVehicle();// 0x47e7728
	void TryExitVehicle();// 0x47e7714
	void TryEnterVehicle_IgnoreDistanceAndBlock(STExtraVehicleBase* InVehicle, enum SeatType, bool SkipCheckBeforeReqEnterVehicle);// 0x47e7618
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType, bool SkipCheckBeforeReqEnterVehicle);// 0x47e751c
	void TryChangeVehicleSeat();// 0x47e7508
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x47e7478
	bool TryChangeFreeFireSeatAndScopeIn();// 0x47e7440
	bool TryChangeFreeFireSeatAndLeanOut();// 0x47e7408
	void TryAutonomousDriving(bool bEnable);// 0x47e7384
	void ToggleHighSpeedMode();// 0x47e7370
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0xffffff8a17adf2b0
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x47e72b0
	void StopFireVehicleWeapon();// 0x47e729c
	bool ShowVehicleWeaponUI();// 0x47e7264
	void SetVehicleHPFuel(float hpvalue, float fuelvalue);// 0x47e71b0
	void SetBrake(float Rate);// 0x47e7134
	void SetBoosting(bool bEnabled);// 0x47e70b0
	void SetAirControlF(float Rate);// 0x47e7034
	void SetAirControlB(float Rate);// 0x47e6fb8
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x47e6eb4
	void ServerStopFireVehicleWeapon();// 0x47e6e54
	void ServerBoost();// 0x47e6df4
	void Server_JoystickCenterClickHandler();// 0x47e6d94
	void SendToServerUnmannedVehicleUse();// 0x47e6d34
	void SendToServerUnmannedVehicleRecall();// 0x47e6cd4
	void SendToServerUnmannedVehiclePause();// 0x47e6c74
	void RspStopRemoteControlVehicle(bool bSuccess, bool bKeepState);// 0x47e6b9c
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x47e6b10
	void RspSendEnjoyVoiceMsg(FString SkinID_PakageID, enum VoiceType, int voiceIndex, STExtraVehicleBase* CurVehicle);// 0x47e6994
	void RspResumeRemoteControlVehicle();// 0x47e6978
	void RspRemoteControlVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType);// 0x47e686c
	void RspPlayVehicleEnjoyVoice(FString SkinID_PakageID, enum VoiceType, int voiceIndex, STExtraVehicleBase* CurVehicle);// 0x47e66f0
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x47e6628
	void RspPauseRemoteControlVehicle();// 0x47e660c
	void RspLeanOut(bool bOut);// 0x47e6580
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x47e64b8
	void RspExitVehicle(bool bSuccess);// 0x47e642c
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd, enum FailReason);// 0x47e62a8
	void RspEnterControlledVehicle(STExtraVehicleBase* InVehicle, enum SeatType, bool bCanEnter);// 0x47e61a4
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, enum FailReason);// 0x47e5fcc
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x47e5ef4
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x47e5e0c
	void ReqStopRemoteControlVehicle();// 0x47e5dac
	void ReqShutDownUnmannedVehicle();// 0x47e5d4c
	void ReqResumeRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x47e5c9c
	void ReqRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x47e5bec
	void ReqPlayVehicleEnjoyVoice(enum VoiceType, STExtraVehicleBase* CurVehicle, bool PassengerShouldInVehicle, float DistanceToPlay);// 0x47e5a68
	void ReqPickUpVehicle(STExtraVehicleBase* InVehicle);// 0x47e59b8
	void ReqPauseUnmannedVehicle();// 0x47e5958
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x47e5870
	void ReqLeanOut(bool IsLeanOut);// 0x47e57ac
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x47e56fc
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x47e5644
	void ReqEraseLastDriveVehicle();// 0x47e55e4
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x47e54f4
	void ReqEnterControlledVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x47e5404
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x47e5354
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x47e5290
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x47e51cc
	void ReqAutonomousDriving(bool bEnable);// 0x47e5108
	void ProcessExitVehicleFailTLog(STExtraVehicleBase* CurExitVehicle, bool bMustExit, bool bSuccess, FString Reason);// 0x47e4fac
	void ProcessDragonBoatDrumSeat(bool enterDrumSeat);// 0x47e4f20
	void PostStopRemoteControlVehicle();// 0x47e4f04
	void OnUnmannedVehicle_Standby_Reconnet();// 0xffffff8a17adf2b0
	void OnShutDownUnmannedVehicleCompleted(float CDTime);// 0xffffff8a17adf2b0
	void OnServerReconnected();// 0x47e4ef0
	void OnScopeInAfterChangeSeat();// 0x47e4edc
	void OnRep_DefineID();// 0x47e4ec8
	void OnPauseUnmannedVehicleCompleted();// 0xffffff8a17adf2b0
	void OnLeanOutAfterChangeSeat();// 0x47e4eb4
	void OnLaunchUnmannedVehicleCompleted();// 0xffffff8a17adf2b0
	void OnInputAxisMoveRight(float Rate);// 0xffffff8a17adf2b0
	void OnInputAxisMoveForward(float Rate);// 0xffffff8a17adf2b0
	void OnExitVehicleCompleted();// 0xffffff8a17adf2b0
	void OnEnterVehicleFail(enum FailReason);// 0xffffff8a17adf2b0
	void OnEnterVehicleCompleted(enum SeatType);// 0xffffff8a17adf2b0
	void OnCurrrentClosestVehicleChanged();// 0xffffff8a17adf2b0
	void OnClientReconnected();// 0x47e4ea0
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0xffffff8a17adf2b0
	bool NowVehicleIsTargetType(enum arrType);// 0x47e4e10
	void NotifyResumeRemoteControlVehicle();// 0x47e4df4
	void NotifyPopKartWin(int RaceGroup);// 0x47e4d70
	void NotifyPopKartBegin(int RaceGroup);// 0x47e4cec
	void NotifyPassDoorAccelerate();// 0x47e4cd0
	void NotifyLeaveVehicleFailed();// 0x47e4cb4
	void NotifyGetPassDoorAccelerate();// 0x47e4c98
	void NotifyEnterAccelerateJumpArea(STPopkartJumpArea* JumpArea);// 0x47e4c14
	void NotifyEnterAccelerateArea(STPopkartAccelerateArea* AccelerateArea);// 0x47e4b90
	void MoveVehicleUp(float Rate);// 0x47e4b14
	void MoveVehicleRight(float Rate);// 0x47e4a98
	void MoveVehicleForward(float Rate);// 0x47e4a1c
	void MaintenanceVehicle(float addpercenthp, bool FixTire);// 0x47e495c
	bool IsNowTargetVehicleType(enum[] arrType);// 0x47e4878
	bool IsHighSpeedMode();// 0x47e4840
	bool IsDriverShoot();// 0x47e4808
	bool IsControllingUnmannedVehicle();// 0x47e47d8
	bool IsAutoDriving();// 0x47e47a0
	void InputJumpUp();// 0x47e478c
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x47e4710
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x47e46fc
	void HandleLocalBackpackCurrentWeaponFinished();// 0x47e46e8
	bool HandleClientReconnecting();// 0x47e46b0
	enum GetVehicleUserState();// 0x47e4694
	STExtraPlayerController* GetPlayerController();// 0x47e4658
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x47e463c
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x47e4608
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x47e44f0
	void FireVehicleWeapon();// 0x47e44dc
	void ClientUpdateSingleItem(out const ItemDefineID DefineID);// 0x47e444c
	void ClientRetryChangeVehicleSeat(int InSeatIndex);// 0x47e43c8
	void ClientDeleteSingleItem(out const ItemDefineID DefineID);// 0x47e4338
	void Client_UnbindTouchEvents();// 0x47e42d8
	void Client_ShouldBindTouchEvents();// 0x47e4278
	bool CheckCanLeanOutVehicle();// 0x47e4240
	bool CharacterCanPickUpVehicle(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* InCharacter);// 0x47e4178
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x47e40e8
	bool CanUseVehicleHorn();// 0x47e40b0
	bool CanControlVehicle();// 0x47e4078
	bool CanAutoDriving();// 0x47e4040
	void BroadcastOnVehicleEnjoyVoiceButtonTriggeredDelegate();// 0x47e402c
	void BoostByPassenger();// 0x47e4018
	void AddVehicleFuel(float Amount);// 0x47e3f9c

--------------------------------
Class: STPopkartJumpArea.STPopkartAreaTrigger.Actor.Object
	float AcceleratePercent;//[Offset: 0x688, Size: 0x4]// 0x75a85d8590
	float UpSpeed;//[Offset: 0x68c, Size: 0x4]// 0x75a85d8600
	float MaxSpeed;//[Offset: 0x690, Size: 0x4]// 0x75a85d8670
	float minSpeed;//[Offset: 0x694, Size: 0x4]// 0x75a85d86e0
	Vector JumpDirection;//[Offset: 0x698, Size: 0xc]// 0x75a85bdf80
	bool UseServerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 0x1]// 0x75a85be000
	void OnVehicleJump(STExtraWheeledVehicle* Vehicle);// 0xffffff8a17adf2b0
	void AccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0x46eff10

--------------------------------
Class: STPopkartAreaTrigger.Actor.Object
	enum AreaType;//[Offset: 0x510, Size: 0x1]// 0x75a85bed00
	byte RaceGroup;//[Offset: 0x511, Size: 0x1]// 0x75a85bed80
	byte NodeIndex;//[Offset: 0x512, Size: 0x1]// 0x75a85bee00
	int RacePathNameID;//[Offset: 0x514, Size: 0x4]// 0x75a85d8f30
	int MapIconID;//[Offset: 0x518, Size: 0x4]// 0x75a85d8fa0
	int ShowMapMarkDistance;//[Offset: 0x51c, Size: 0x4]// 0x75a85d9010
	int MapIconInstanceID;//[Offset: 0x520, Size: 0x4]// 0x75a85d9080
	AkAudioEvent* Sfx_EnterArea;//[Offset: 0x528, Size: 0x8]// 0x75a85bee80
	AkAudioEvent* Sfx_AreaBGM;//[Offset: 0x530, Size: 0x8]// 0x75a85bef00
	<enum> ExcludeVehicleType;//[Offset: 0x538, Size: 0x50]// 0x75d119b400
	bool CheckSeatChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]// 0x75a85bf080
	<enum,float> VehicleAcceMaxSpeed;//[Offset: 0x590, Size: 0x50]// 0x75a8605ec0
	bool NeedServerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]// 0x75a85bf200
	Vector BoxExtent;//[Offset: 0x5e4, Size: 0xc]// 0x75a85bf280
	Vector BoxOffset;//[Offset: 0x5f0, Size: 0xc]// 0x75a85bf300
	bool DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]// 0x75a85bf380
	void NotifySeatStateChange(STExtraWheeledVehicle* Vehicle);// 0xffffff8a17adf2b0
	void LeaveAreaEffect(STExtraWheeledVehicle* Vehicle);// 0xffffff8a17adf2b0
	void EnterAreaEffect(STExtraWheeledVehicle* Vehicle);// 0xffffff8a17adf2b0

--------------------------------
Class: STPopkartAccelerateArea.STPopkartAreaTrigger.Actor.Object
	float AcceleratePercent;//[Offset: 0x688, Size: 0x4]// 0x75a85d8de0
	float MaxSpeed;//[Offset: 0x68c, Size: 0x4]// 0x75a85d8e50
	float minSpeed;//[Offset: 0x690, Size: 0x4]// 0x75a85d8ec0
	bool UseServerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 0x1]// 0x75a85bea80
	Vector AccelerateDirection;//[Offset: 0x698, Size: 0xc]// 0x75a85beb00
	void OnAccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0xffffff8a17adf2b0
	void AccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0x46ed428

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 0x10]// 0x7611ff4250

--------------------------------
Class: WaterSoundVolume.Actor.Object
	ShapeComponent*[] VolumeAreaList;//[Offset: 0x510, Size: 0x10]// 0x75c98cc580

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0x118, Size: 0x10]// 0x761209cf80
	enum StartStateType;//[Offset: 0x128, Size: 0x1]// 0x761209ce80
	enum FinishStateType;//[Offset: 0x129, Size: 0x1]// 0x761209cd80
	delegate StateMsgNotify;//[Offset: 0x130, Size: 0x10]// 0x761209cac0
	State* CurrentState;//[Offset: 0x140, Size: 0x8]// 0x761209ca40
	enum CurrentStateType;//[Offset: 0x148, Size: 0x1]// 0x761209c940
	int64 CurrentStateEnterTime;//[Offset: 0x150, Size: 0x8]// 0x761209c8d0
	enum LastStateType;//[Offset: 0x158, Size: 0x1]// 0x761209c7d0
	State* CurrentWatchedState;//[Offset: 0x160, Size: 0x8]// 0x761209c750
	enum LastWatchedStateType;//[Offset: 0x168, Size: 0x1]// 0x761209c650

--------------------------------
Class: State.Object

--------------------------------
Class: StateType
	enum StateType;//[Offset: 0x0, Size: 0x1]// 0x7611f7c0a0
	int64 TimeStamp;//[Offset: 0x8, Size: 0x8]// 0x7611f7c030

--------------------------------
Class: RCRBodyBoundingSize
	Vector StandLocatingExtent;//[Offset: 0x0, Size: 0xc]// 0x7611ff3270
	Vector CrouchLocatingExtent;//[Offset: 0xc, Size: 0xc]// 0x7611ff31f0
	Vector ProneLocatingExtent;//[Offset: 0x18, Size: 0xc]// 0x7611ff3170
	Vector ProneLocatingMove;//[Offset: 0x24, Size: 0xc]// 0x7611ff30f0
	Vector DyingLocatingExtent;//[Offset: 0x30, Size: 0xc]// 0x7611ff3070
	Vector StandExtent;//[Offset: 0x3c, Size: 0xc]// 0x7611ff2ff0
	float PitchCoefficient;//[Offset: 0x48, Size: 0x4]// 0x7611ff2f80
	float CrouchPitchCoefficient;//[Offset: 0x4c, Size: 0x4]// 0x7611ff2f10
	Vector CrouchExtentAddition;//[Offset: 0x50, Size: 0xc]// 0x7611ff2e90
	Vector ProneExtentAddition;//[Offset: 0x5c, Size: 0xc]// 0x7611ff2e10
	Vector DyingExtentAddition;//[Offset: 0x68, Size: 0xc]// 0x7611ff2d90
	Vector MeleeWeaponExtentAddition;//[Offset: 0x74, Size: 0xc]// 0x7611ff2d10
	float MeleeWeaponAttackingExtentWidth;//[Offset: 0x80, Size: 0x4]// 0x7611ff2ca0
	float MeleeWeaponAttackingExtentUp;//[Offset: 0x84, Size: 0x4]// 0x7611ff2c30
	float GunFrontLengthThreshold;//[Offset: 0x88, Size: 0x4]// 0x7611ff2bc0
	float GunPlusCoefficient;//[Offset: 0x8c, Size: 0x4]// 0x7611ff2b50
	float GunMultipliedCoefficient;//[Offset: 0x90, Size: 0x4]// 0x7611ff2ae0
	float ProneGunPlusCoefficient;//[Offset: 0x94, Size: 0x4]// 0x7611ff2a70
	float PitchGunLengthThreshold;//[Offset: 0x98, Size: 0x4]// 0x7611ff2a00
	float BackRightWeaponLengthThreshold;//[Offset: 0x9c, Size: 0x4]// 0x7611ff2990
	float BackLeftWeaponLengthThreshold;//[Offset: 0xa0, Size: 0x4]// 0x7611ff2920
	float BackWeaponLeftLengthAddition;//[Offset: 0xa4, Size: 0x4]// 0x7611ff28b0
	float BackWeaponLeftLengthAdditionNoWeapon;//[Offset: 0xa8, Size: 0x4]// 0x7611ff2840
	float BackWeaponRightLengthMultipliedCoefficient;//[Offset: 0xac, Size: 0x4]// 0x7611ff27d0
	float BackWeaponRightLengthPlusCoefficient;//[Offset: 0xb0, Size: 0x4]// 0x7611ff2760
	float StandMoveX;//[Offset: 0xb4, Size: 0x4]// 0x7611ff26f0
	float CrouchMoveZ;//[Offset: 0xb8, Size: 0x4]// 0x7611ff2680
	float ProneMoveX;//[Offset: 0xbc, Size: 0x4]// 0x7611ff2610
	float ProneMoveZ;//[Offset: 0xc0, Size: 0x4]// 0x7611ff25a0
	float DyingMoveX;//[Offset: 0xc4, Size: 0x4]// 0x7611ff2530
	float DyingMoveZ;//[Offset: 0xc8, Size: 0x4]// 0x7611ff24c0
	float DyingGunLeftLengthThreshold;//[Offset: 0xcc, Size: 0x4]// 0x7611ff2450
	float DyingGunLeftLengthMultipliedCoefficient;//[Offset: 0xd0, Size: 0x4]// 0x7611ff23e0

--------------------------------
Class: RCRVisualizationComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	StaticMeshComponent* MainMesh;//[Offset: 0x6a8, Size: 0x8]// 0x75a87e2c80
	byte VisualizationLevel;//[Offset: 0x6b0, Size: 0x1]// 0x75a87e2d00
	RCRVisualizationInfo VisualizationInfo;//[Offset: 0x6c0, Size: 0x130]// 0x75a87e2d80
	bool bRCRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 0x1]// 0x75a87e2e00
	bool bTargetInHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 0x1]// 0x75a87e2e80
	STExtraPlayerController* PC;//[Offset: 0x7f8, Size: 0x8]// 0x75a87e2f00
	SurviveHUD* HUD;//[Offset: 0x800, Size: 0x8]// 0x75a87e2f80

--------------------------------
Class: RCRVisualizationInfo
	Transform ViewerCameraTransform;//[Offset: 0x0, Size: 0x30]// 0x75c993f280
	Actor* TargetActor;//[Offset: 0x30, Size: 0x8]// 0x75c993f300
	Transform TargetTransform;//[Offset: 0x40, Size: 0x30]// 0x75c993f380
	Vector TargetBoundingExtent;//[Offset: 0x70, Size: 0xc]// 0x75c993f400
	Vector TargetModifiedBuildingBoundingExtent;//[Offset: 0x7c, Size: 0xc]// 0x75c993f480
	Vector TargetModifiedLandBoundingExtent;//[Offset: 0x88, Size: 0xc]// 0x75c993f500
	bool bIsRCRRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]// 0x75c993f580
	RCRBox[] VisibilityPathBoxes;//[Offset: 0x98, Size: 0x10]// 0x75c993f680
	RCRBox[] NonVisibilityPathBoxes;//[Offset: 0xa8, Size: 0x10]// 0x75c993f780
	Vector[] VisibilityPathSweepPoint;//[Offset: 0xb8, Size: 0x10]// 0x75c993f880
	Vector VisibilityPathSweepVector;//[Offset: 0xc8, Size: 0xc]// 0x75c993f900
	RCRBox[] FullOcclusionBoxes;//[Offset: 0xd8, Size: 0x10]// 0x75c993fe00
	Vector FailedRaycastStart;//[Offset: 0xe8, Size: 0xc]// 0x75c993fe80
	Vector FailedRaycastEnd;//[Offset: 0xf4, Size: 0xc]// 0x75c993ff00
	Box[] LandBoxes;//[Offset: 0x100, Size: 0x10]// 0x75c9940000
	RayInfo[] DebugRays;//[Offset: 0x110, Size: 0x10]// 0x75c9940280
	FString CurrentBuildingDebugName;//[Offset: 0x120, Size: 0x10]// 0x75c9922810

--------------------------------
Class: RCRBox
	enum Type;//[Offset: 0x0, Size: 0x1]// 0x75c993fa00
	byte Index;//[Offset: 0x1, Size: 0x1]// 0x75c993fa80
	byte Group;//[Offset: 0x2, Size: 0x1]// 0x75c993fb00
	Transform Transform;//[Offset: 0x10, Size: 0x30]// 0x75c993fb80
	Vector Extent;//[Offset: 0x40, Size: 0xc]// 0x75c993fc00
	Vector OutDirection;//[Offset: 0x4c, Size: 0xc]// 0x75c993fc80
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]// 0x75c993fd00
	FString DebugName;//[Offset: 0x60, Size: 0x10]// 0x75c99227a0

--------------------------------
Class: RayInfo
	Vector Start;//[Offset: 0x0, Size: 0xc]// 0x75c9940080
	Vector End;//[Offset: 0xc, Size: 0xc]// 0x75c9940100
	bool bIsOccluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x75c9940180

--------------------------------
Class: RCRResultDebugInfoVisualizationComponent.RCRVisualizationComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void ServerSendDebugInfo(RCRMinimalDebugInfo MinimalDebugInfo);// 0x44d376c
	void ClientReadDebugLog();// 0x44d3750

--------------------------------
Class: RCRMinimalDebugInfo
	Vector ViewerCameraLoc0;//[Offset: 0x0, Size: 0xc]// 0x76121c7db0
	int bCameraBlocked;//[Offset: 0xc, Size: 0x4]// 0x76121c7d40
	Vector TargetLoc;//[Offset: 0x10, Size: 0xc]// 0x76121c7cc0
	Rotator TargetRot;//[Offset: 0x1c, Size: 0xc]// 0x76121c7c40
	FString TargetPose;//[Offset: 0x28, Size: 0x10]// 0x76121c7bd0
	Vector LocatingExtent;//[Offset: 0x38, Size: 0xc]// 0x76121c7b50
	Vector BoundingExtent;//[Offset: 0x44, Size: 0xc]// 0x76121c7ad0

--------------------------------
Class: RCRConfigDebugInfoVisualizationComponent.RCRVisualizationComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	RCRConfigInfo DebugConfigInfo;//[Offset: 0x810, Size: 0xe0]// 0x75a87e2c00

--------------------------------
Class: RCRConfigInfo
	bool EnableRCRDelayCheckView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x75c993e880
	bool EnableRCRCheckTrace;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x75c993e900
	bool EnableRCRCheckAllView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]// 0x75c993e980
	bool EnableRCROutViewTrace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]// 0x75c993ea00
	bool EnableRCRTriangulation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]// 0x75c993ea80
	bool EnableRCRLandscape;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]// 0x75c993eb00
	bool EnableRCRPVS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]// 0x75c993eb80
	bool bForceRCRNotRelevant;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]// 0x75c993ec00
	bool EnableRCRIgnoreTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]// 0x75c993ec80
	bool EnableRCRModifyBuildingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]// 0x75c993ed00
	bool EnableRCRModifyLandBox;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]// 0x75c993ed80
	bool EnableRCRPeekFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]// 0x75c993ee00
	float RCRCheckMinViewCos;//[Offset: 0x8, Size: 0x4]// 0x75c9922180
	float RCRCheckMinDistanceSquared;//[Offset: 0xc, Size: 0x4]// 0x75c99221f0
	float RCRCheckMaxDistanceSquared;//[Offset: 0x10, Size: 0x4]// 0x75c9922260
	float RCRNotRelevantCheckTime;//[Offset: 0x14, Size: 0x4]// 0x75c99222d0
	float RCRModifyLargeBuildingBoxDisSquared;//[Offset: 0x18, Size: 0x4]// 0x75c9922340
	float RCRLargeBuildingBoxMultiple;//[Offset: 0x1c, Size: 0x4]// 0x75c99223b0
	float RCRModifyMediumBuildingBoxDisSquared;//[Offset: 0x20, Size: 0x4]// 0x75c9922420
	float RCRMediumBuildingBoxMultiple;//[Offset: 0x24, Size: 0x4]// 0x75c9922490
	float RCRModifyLargeLandBoxDisSquared;//[Offset: 0x28, Size: 0x4]// 0x75c9922500
	float RCRLargeLandBoxMultiple;//[Offset: 0x2c, Size: 0x4]// 0x75c9922570
	float RCRModifyMediumLandBoxDisSquared;//[Offset: 0x30, Size: 0x4]// 0x75c99225e0
	float RCRMediumLandBoxMultiple;//[Offset: 0x34, Size: 0x4]// 0x75c9922650
	bool bInRCRCheckView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]// 0x75c993ee80
	bool bInRCRCheckDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]// 0x75c993ef00
	float TargetNotRelevantRCRTime;//[Offset: 0x3c, Size: 0x4]// 0x75c99226c0
	Transform ViewerTrans;//[Offset: 0x40, Size: 0x30]// 0x75c993ef80
	Transform TargetTrans;//[Offset: 0x70, Size: 0x30]// 0x75c993f000
	Vector ViewerExtent;//[Offset: 0xa0, Size: 0xc]// 0x75c993f080
	float BoxMultiple;//[Offset: 0xac, Size: 0x4]// 0x75c9922730
	Vector TargetBoundingExtent;//[Offset: 0xb0, Size: 0xc]// 0x75c993f100
	Vector TargetModifiedBuildingBoundingExtent;//[Offset: 0xbc, Size: 0xc]// 0x75c993f180
	Vector TargetExtent;//[Offset: 0xc8, Size: 0xc]// 0x75c993f200

--------------------------------
Class: PreProcessedRelevancySet

--------------------------------
Class: HeartbeatData
	byte[] TssSdkAntiData;//[Offset: 0x0, Size: 0x10]// 0x7611fcce10
	int TssSdkAntiDataLen;//[Offset: 0x10, Size: 0x4]// 0x7611fccda0
	int8 RetCode;//[Offset: 0x14, Size: 0x1]// 0x7611fccd30
	int NetworkStatus;//[Offset: 0x18, Size: 0x4]// 0x7611fcccc0

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x688, Size: 0x10]// 0x7611f6fcb0
	float TotalHP;//[Offset: 0x698, Size: 0x4]// 0x7611f6fc40
	float BrokenHPPropotion;//[Offset: 0x69c, Size: 0x4]// 0x7611f6fbd0
	float TotalTime;//[Offset: 0x6a0, Size: 0x4]// 0x7611f6fb60
	int BoxId;//[Offset: 0x6a4, Size: 0x4]// 0x7611f6faf0
	Vector GroupLoc;//[Offset: 0x6a8, Size: 0xc]// 0x7611f6fa70
	float DestroyTime;//[Offset: 0x6b4, Size: 0x4]// 0x7611f6fa00
	float OperationalDistance;//[Offset: 0x6b8, Size: 0x4]// 0x7611f6f990
	float VisibleHUDlDistance;//[Offset: 0x6bc, Size: 0x4]// 0x7611f6f920
	ParticleSystem* StandbyEffect;//[Offset: 0x6c0, Size: 0x8]// 0x7611f6f8a0
	Transform StandbyEffectTrans;//[Offset: 0x6d0, Size: 0x30]// 0x7611f6f820
	ParticleSystem* OpenningEffect;//[Offset: 0x700, Size: 0x8]// 0x7611f6f7a0
	Transform OpenningEffectTrans;//[Offset: 0x710, Size: 0x30]// 0x7611f6f720
	ParticleSystem* OpennedEffect;//[Offset: 0x740, Size: 0x8]// 0x7611f6f6a0
	Transform OpennedEffectTrans;//[Offset: 0x750, Size: 0x30]// 0x7611f6f620
	ParticleSystem* BrokenEffect1;//[Offset: 0x780, Size: 0x8]// 0x7611f6f5a0
	Transform BrokenEffect1Trans;//[Offset: 0x790, Size: 0x30]// 0x7611f6f520
	ParticleSystem* BrokenEffect2;//[Offset: 0x7c0, Size: 0x8]// 0x7611f6f4a0
	Transform BrokenEffect2Trans;//[Offset: 0x7d0, Size: 0x30]// 0x7611f6f420
	MaterialInterface* BlackMat;//[Offset: 0x800, Size: 0x8]// 0x7611f6f3a0
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x808, Size: 0x8]// 0x7611f6f320
	SceneComponent* DefaultRoot;//[Offset: 0x810, Size: 0x8]// 0x7611f6f2a0
	class Controller[] InstigatorList;//[Offset: 0x818, Size: 0x10]// 0x7611f6f1a0
	class Actor[] DamageCauserList;//[Offset: 0x828, Size: 0x10]// 0x7611f6f0a0
	enum PickUpBoxType;//[Offset: 0x838, Size: 0x1]// 0x7611f6ef40
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 0x1]// 0x7611f6eec0
	int IconID;//[Offset: 0x83c, Size: 0x4]// 0x7611f6ee50
	FString IconCustomStr;//[Offset: 0x840, Size: 0x10]// 0x7611f6ede0
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]// 0x7611f6ed60
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x856, Size: 0x1]// 0x7611f6ece0
	int ClientAutoActiveBoxCD;//[Offset: 0x858, Size: 0x4]// 0x7611f6ec70
	int AutoActiveBoxCD;//[Offset: 0x85c, Size: 0x4]// 0x7611f6ec00
	int HideLightColumn;//[Offset: 0x8d0, Size: 0x4]// 0x7611f6eb90
	float GoUpAnimationWait;//[Offset: 0x8d8, Size: 0x4]// 0x7611f6eb20
	float GoUpAnimationSpeed;//[Offset: 0x8dc, Size: 0x4]// 0x7611f6eab0
	float GoUpAnimationHight;//[Offset: 0x8e0, Size: 0x4]// 0x7611f6ea40
	float GoUpAnimationYawSpeed;//[Offset: 0x8e8, Size: 0x4]// 0x7611f6e9d0
	float GoUpAnimationYawTotal;//[Offset: 0x8ec, Size: 0x4]// 0x7611f6e960
	Vector BoxCoverLoc;//[Offset: 0x8f0, Size: 0xc]// 0x7611f6e8e0
	Rotator BoxCoverRot;//[Offset: 0x8fc, Size: 0xc]// 0x7611f6e860
	float ItemBoxZ;//[Offset: 0x908, Size: 0x4]// 0x7611f6e7f0
	bool NeedGoDownBeforeDestroied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 0x1]// 0x7611f6e770
	float NeedGoDownBeforeDestroiedDelay;//[Offset: 0x910, Size: 0x4]// 0x7611f6e700
	float GoDownStartTime;//[Offset: 0x914, Size: 0x4]// 0x7611f6e690
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]// 0x7611f6e610
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x920, Size: 0x8]// 0x7611f6e590
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x928, Size: 0x8]// 0x7611f6e510
	Transform BoxTransform;//[Offset: 0x940, Size: 0x30]// 0x7611f6e490
	float CurHP;//[Offset: 0x984, Size: 0x4]// 0x7611f6e420
	float StartedTime;//[Offset: 0x988, Size: 0x4]// 0x7611f6e3b0
	enum CurState;//[Offset: 0x98c, Size: 0x1]// 0x7611f6e2b0
	int StartedTeamId;//[Offset: 0x994, Size: 0x4]// 0x7611f6e240
	float CountDownTime;//[Offset: 0x998, Size: 0x4]// 0x7611f6e1d0
	float StartDestroytime;//[Offset: 0x9a0, Size: 0x4]// 0x7611f6e160
	int MonsterBoxId;//[Offset: 0x9a4, Size: 0x4]// 0x7611f6e0f0
	int MonsterBoxTempleteId;//[Offset: 0x9a8, Size: 0x4]// 0x7611f6e080
	<FString,FString> DataStrs;//[Offset: 0x9b0, Size: 0x50]// 0x7611f6def0
	bool bIsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 0x1]// 0x7611f6de70
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0xa08, Size: 0x8]// 0x7611f6ddf0
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0xa10, Size: 0x8]// 0x7611f6dd70
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0xa18, Size: 0x8]// 0x7611f6dcf0
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0xa20, Size: 0x8]// 0x7611f6dc70
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0xa28, Size: 0x8]// 0x7611f6dbf0
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0xa30, Size: 0x8]// 0x7611f6db70
	MonsterTreasureBoxGroupComponent* BornGropComponent;//[Offset: 0xa48, Size: 0x8]// 0x7611f6daf0
	Object* TriggerActionHost;//[Offset: 0xa78, Size: 0x8]// 0x7611f6da70
	float TickFrequenceTime;//[Offset: 0xa98, Size: 0x4]// 0x7611f6da00
	void SpawnBrokenParticle();// 0x441df54
	void ShowMonsterTreasureBoxSkelemesh(bool isShow);// 0xffffff8a17adf2b0
	void ShowMonsterTreasureBox();// 0x441df40
	void SetClientClientAutoActiveBoxCD(int CD);// 0x441dec4
	void OnTreasureBoxPicked__DelegateSignature();// 0xffffff8a17adf2b0
	void OnSomeonePickItem(uint32 InPC);// 0x441de48
	void OnRep_HideLightColumn();// 0x441de34
	void OnRep_HasItems();// 0x441de20
	void OnRep_CurState();// 0x441de0c
	void OnRep_CurHP();// 0x441ddf8
	void OnRep_BoxTransform();// 0x441dde4
	void OnBoxEmpty();// 0x441ddd0
	bool IsShowIcon();// 0x441dd98
	bool IsGoingToBeBroken();// 0x441dd60
	int GetMonsterBoxId();// 0x441dd2c
	enum[] GetDamageableGameObjectType();// 0x441dca4
	enum GetCurState();// 0x441dc70
	int GetClientClientAutoActiveBoxCD();// 0x441dc3c
	void DeActiveMonsterTreasureBox();// 0x441dc28
	bool CanBeDamaged();// 0x441dbf0
	void BPOnStopMonsterTreasureBox();// 0xffffff8a17adf2b0
	void BPOnStartMonsterTreasureBox();// 0xffffff8a17adf2b0
	void BPOnHideLightColumn();// 0xffffff8a17adf2b0
	void BPOnCountdownEnd();// 0xffffff8a17adf2b0
	void BPOnBreakMonsterTreasureBox();// 0xffffff8a17adf2b0
	void BPOnAnimationStop();// 0xffffff8a17adf2b0
	void BPOnAnimationAkAudioStop();// 0xffffff8a17adf2b0
	void BPOnAnimationAkAudioStart();// 0xffffff8a17adf2b0

--------------------------------
Class: UAEHouseActor.UAENetActor.Actor.Object
	bool TestCleanWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]// 0x7611f6bde0
	float WindowHideDistanceSquared;//[Offset: 0x52c, Size: 0x4]// 0x7611f6bd70
	float WindowLoadDistanceSquared;//[Offset: 0x530, Size: 0x4]// 0x7611f6bd00
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x534, Size: 0x4]// 0x7611f6bc90
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x538, Size: 0x4]// 0x7611f6bc20
	UAEWindowRepData[] WindowList;//[Offset: 0x540, Size: 0x10]// 0x7611f6bb20
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x550, Size: 0x50]// 0x7611f6b980
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]// 0x7611f6b900
	static void ProcessWindowCreateList();// 0x4ecf92c
	void OnRep_WindowList();// 0x4ecf918
	ComponentPoolActor* GetWindowsPoolActor();// 0x4ecf8e4
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x4ecf7ac

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x120, Size: 0x3]// 0x75a87ed700
	HitResult GroundHitInfo;//[Offset: 0x128, Size: 0x88]// 0x75a87ed780
	int GridStep;//[Offset: 0x1b0, Size: 0x4]// 0x75a83edcb0
	int Mode2RandomMax;//[Offset: 0x1b4, Size: 0x4]// 0x75a83edd20
	STExtraCharacter* OwnerPawn;//[Offset: 0x1b8, Size: 0x8]// 0x75a87ed800
	FString DropItemCfgTableName;//[Offset: 0x1c0, Size: 0x10]// 0x75a83edd90
	FString DropItemRuleTableName;//[Offset: 0x1d0, Size: 0x10]// 0x75a83ede00
	UAEDataTable* pDropItemCfgTable;//[Offset: 0x1e0, Size: 0x8]// 0x75a87ed880
	UAEDataTable* pDropItemRuleTable;//[Offset: 0x1e8, Size: 0x8]// 0x75a87ed900
	UAEDataTable*[] CachedDataTable;//[Offset: 0x1f0, Size: 0x10]// 0x75a87eda00
	UAEDataTable* UGCDropItemCfgTable;//[Offset: 0x200, Size: 0x28]// 0x75a87eda80
	UAEDataTable* UGCDropItemRuleTable;//[Offset: 0x228, Size: 0x28]// 0x75a87edb00
	int ProduceID;//[Offset: 0x250, Size: 0x4]// 0x75a83ede70
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]// 0x75a87edb80
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x258, Size: 0x8]// 0x75a87edc00
	float DelayDropTime;//[Offset: 0x264, Size: 0x4]// 0x75a83edee0
	float TombBoxLifeTime;//[Offset: 0x268, Size: 0x4]// 0x75a83edf50
	ParticleSystem* DropGroundEffect;//[Offset: 0x278, Size: 0x28]// 0x75a87edc80
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]// 0x75a87edd00
	Transform DropGroundEffectTransform;//[Offset: 0x2b0, Size: 0x30]// 0x75a87edd80
	float DropGroundItemLifeOverride;//[Offset: 0x2e0, Size: 0x4]// 0x75a83edfc0
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]// 0x75a87ede00
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]// 0x75a87ede80
	float DropGroundEffectLifeSpan;//[Offset: 0x2e8, Size: 0x4]// 0x75a83ee030
	float DropGroundNetCullDistanceSquared;//[Offset: 0x2ec, Size: 0x4]// 0x75a83ee0a0
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]// 0x75a87edf00
	bool UseLocalCenterOffest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]// 0x75a87edf80
	bool TraceUseOwnerUpDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]// 0x75a880e000
	Vector DropGroundCenterOffest;//[Offset: 0x2f4, Size: 0xc]// 0x75a880e080
	float DropGroundOuterCircleRadius;//[Offset: 0x300, Size: 0x4]// 0x75a83ee110
	float DropGroundInnerCircleRadius;//[Offset: 0x304, Size: 0x4]// 0x75a83ee180
	float DropGroundStartAndgle;//[Offset: 0x308, Size: 0x4]// 0x75a83ee1f0
	float DropGroundEndAngle;//[Offset: 0x30c, Size: 0x4]// 0x75a83ee260
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]// 0x75a880e100
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x318, Size: 0x10]// 0x75a880e200
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]// 0x75a880e280
	bool bApplyBoxTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]// 0x75a880e300
	bool bDropGroundForceStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 0x1]// 0x75a880e380
	int OpenDropGroundEffect;//[Offset: 0x32c, Size: 0x4]// 0x75a83ee2d0
	int RandomDropGroundEffect;//[Offset: 0x330, Size: 0x4]// 0x75a83ee340
	float DropGroundItemLifeSpan;//[Offset: 0x334, Size: 0x4]// 0x75a83ee3b0
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]// 0x75a880e400
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x340, Size: 0x10]// 0x75a880e500
	float MaxTraceDist;//[Offset: 0x360, Size: 0x4]// 0x75a83ee420
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]// 0x75a880e580
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]// 0x75a880e600
	delegate OnItemSpawned;//[Offset: 0x368, Size: 0x10]// 0x75a880e680
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x378, Size: 0x8]// 0x75a880e700
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]// 0x75a880e780
	DropPropQueue DropPropQueue;//[Offset: 0x388, Size: 0x18]// 0x75a880e800
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x44be024
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x44bdee8
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x44bde34
	void SetProduceID(int ProduceID);// 0x44bddbc
	void SetDropItemLifeSpan(int ItemTime);// 0x44bdd40
	void SetAutoDrop(bool bAutoDrop);// 0x44bdcbc
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x44bdae8
	int PickItemByUnionRandom(int WeightCount, out RandomPropData[] WeightMap);// 0x44bd9d0
	int PickItemByIndependentRandom(int weight);// 0x44bd944
	void OnPickUpDataEmptyOnServer(Actor* SelfRef);// 0xffffff8a17adf2b0
	void OnOwnerPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x44bd6dc
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x44bd508
	FString GetWrapperActorPath(out const ItemDefineID DefineID);// 0x44bd41c
	class Object GetWrapperActorClass(out const ItemDefineID DefineID);// 0x44bd374
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x44bd2b4
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x44bd1c0
	UAEDataTable* GetDataTable(out FString TableName);// 0x44bd11c
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x44bd030
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector SpawnLoc, bool ShouldTreasureBoxHidden, float InLifeTime, bool bAddToNewRegion);// 0x44bcd4c
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn, FString BoxName);// 0x44bcb78
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* Backpack);// 0x44bca6c
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x44bc890
	void DropToCommonTreasureBox(Actor* Producer);// 0x44bc80c
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, CommonTreasureBox* CommonTreasureBox);// 0x44bc6e8
	void DropOutPropsToPosition(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn, Vector DestinPos, FString BoxName);// 0x44bc4d0
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn, FString BoxName);// 0x44bc308
	Actor* DropItemToGround(out const PickUpItemData PropData, out const Transform WrapperTrans, bool bSnapToGround);// 0x44bc16c
	void ClearGenerateActorList();// 0x44bc158
	void CalcDropItemListByDropRule(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x44bc058

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76121c5220
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x76121c51a0
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x76121c5120

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0x118, Size: 0x8]// 0x75b4d97100
	Vector CustomStartOffset;//[Offset: 0x120, Size: 0xc]// 0x75b4d97180
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]// 0x75b4d97200
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]// 0x75b4d97280
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1]// 0x75b4d97300
	float ClientDropOneByOneInterval;//[Offset: 0x130, Size: 0x4]// 0x75b4dae060
	float CustomGravity;//[Offset: 0x134, Size: 0x4]// 0x75b4dae0d0
	float TrailParticleDelayTime;//[Offset: 0x138, Size: 0x4]// 0x75b4dae140
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0x13c, Size: 0x4]// 0x75b4dae1b0
	float ParticleScale;//[Offset: 0x140, Size: 0x4]// 0x75b4dae220
	ParticleSystem* DropTailsParticle;//[Offset: 0x148, Size: 0x28]// 0x75b4d97380
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x170, Size: 0x8]// 0x75b4d97400
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]// 0x75b4d97480
	float DropGroundParticleLifeTime;//[Offset: 0x17c, Size: 0x4]// 0x75b4dae290
	ParticleSystem* DropGroundParticle;//[Offset: 0x180, Size: 0x28]// 0x75b4d97500
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x1a8, Size: 0x8]// 0x75b4d97580
	DropGroupContainer[] ItemGroupList;//[Offset: 0x1b0, Size: 0x10]// 0x75b4d97680
	CurveFloat* AnimCurve;//[Offset: 0x1c0, Size: 0x8]// 0x75b4d97700
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]// 0x75b4d97780
	void OnDropTailsLoadFinsh2(int GroupID);// 0x42b6c8c
	void OnDropGroundLoadFinsh();// 0x42b6c78
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x42b6b38
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x42b6a3c

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 0x4]// 0x761217bd80
	float GroupTime;//[Offset: 0x4, Size: 0x4]// 0x761217bd10
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 0x10]// 0x761217b4d0

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 0x1]// 0x761217bc10
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x761217bb90
	float DropDuration;//[Offset: 0x4, Size: 0x4]// 0x761217bb20
	float CurrentTime;//[Offset: 0x8, Size: 0x4]// 0x761217bab0
	float DropStartSpeed;//[Offset: 0xc, Size: 0x4]// 0x761217ba40
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 0x4]// 0x761217b9d0
	float DelayStartTime;//[Offset: 0x14, Size: 0x4]// 0x761217b960
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 0x4]// 0x761217b8f0
	Vector StartPos;//[Offset: 0x1c, Size: 0xc]// 0x761217b870
	Vector EndPos;//[Offset: 0x28, Size: 0xc]// 0x761217b7f0
	Actor* TargetActor;//[Offset: 0x34, Size: 0x8]// 0x761217b770
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x40, Size: 0x8]// 0x761217b6f0
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x48, Size: 0x8]// 0x761217b670

--------------------------------
Class: DropPropQueue
	DropPropInfo[] DropQueue;//[Offset: 0x0, Size: 0x10]// 0x76121c49d0
	ProduceDropItemComponent* OwnerComp;//[Offset: 0x10, Size: 0x8]// 0x76121c4950

--------------------------------
Class: DropPropInfo
	int DropSeqIdx;//[Offset: 0x0, Size: 0x4]// 0x76121c5010
	DelayDropItem[] PendingPropData;//[Offset: 0x8, Size: 0x10]// 0x76121c4c70
	Actor*[] SpawnedWrapper;//[Offset: 0x18, Size: 0x10]// 0x76121c4b70

--------------------------------
Class: DelayDropItem
	PickUpItemData ItemData;//[Offset: 0x0, Size: 0x38]// 0x76121c4f90
	Transform WrapperTrans;//[Offset: 0x40, Size: 0x30]// 0x76121c4f10
	Vector StartPos;//[Offset: 0x70, Size: 0xc]// 0x76121c4e90
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]// 0x76121c4e10

--------------------------------
Class: RandomPropData
	int[] ItemIds;//[Offset: 0x0, Size: 0x10]// 0x76121c4560
	int[] ItemCounts;//[Offset: 0x10, Size: 0x10]// 0x76121c4470
	int ruleID;//[Offset: 0x20, Size: 0x4]// 0x76121c4400
	int weight;//[Offset: 0x24, Size: 0x4]// 0x76121c4390

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 0x4]// 0x76121c4840
	int ItemDropRuleStartID;//[Offset: 0x4, Size: 0x4]// 0x76121c47d0
	int ItemDropRuleEndID;//[Offset: 0x8, Size: 0x4]// 0x76121c4760
	int ItemDropMode;//[Offset: 0xc, Size: 0x4]// 0x76121c46f0

--------------------------------
Class: DropPropData
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x76121bfe50
	int ItemCount;//[Offset: 0x4, Size: 0x4]// 0x76121bfde0
	int DropMode;//[Offset: 0x8, Size: 0x4]// 0x76121bfd70

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.Actor.Object
	int ProduceID;//[Offset: 0x7b8, Size: 0x4]// 0x75b4e132a0
	void RegisterToCurveAnimComponent();// 0x42835b4

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 0x30]// 0x7611f6b5c0
	FString PathToLoad;//[Offset: 0x30, Size: 0x10]// 0x7611f6b550
	int ID;//[Offset: 0x40, Size: 0x4]// 0x7611f6b4e0
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]// 0x7611f6b460
	Pawn* LastInstigatorPawn;//[Offset: 0x48, Size: 0x8]// 0x7611f6b3e0

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x81c, Size: 0x4]// 0x75a80e81c0
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 0x1]// 0x75a8992980
	Pawn* LastInstigatorPawn;//[Offset: 0x828, Size: 0x8]// 0x75a8992a00
	StaticMesh* NormalMesh;//[Offset: 0x830, Size: 0x8]// 0x75a8992a80
	StaticMesh* BrokenMesh;//[Offset: 0x838, Size: 0x28]// 0x75a8992b00
	ParticleSystem* BrokenEffect;//[Offset: 0x860, Size: 0x28]// 0x75a8992b80
	UAEWindowRepData CachedRepData;//[Offset: 0x890, Size: 0x50]// 0x75a8992c00
	void ReuseWindowBP();// 0xffffff8a17adf2b0
	void ReuseWindow();// 0x4ee5a8c
	void ReleaseWindowBP();// 0xffffff8a17adf2b0
	void ReleaseWindow();// 0x4ee5a78
	void NotifyServerBroken();// 0xffffff8a17adf2b0
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x4ee59a8
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0xffffff8a17adf2b0
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x4ee58d8
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x4ee5818
	UAEWindowRepData GetRepData();// 0x4ee5770

--------------------------------
Class: ComponentPoolActor.Actor.Object
	<int64,ComponentPoolCacheList> PoolMap;//[Offset: 0x510, Size: 0x50]// 0x75a79d69c0
	int PoolCount;//[Offset: 0x560, Size: 0x4]// 0x75a80ec3d0
	void InitPoolActor(int InPoolCount);// 0x4e714e4
	SceneComponent* GetFromPool(class Object InClass, Actor* InNewOuter, out bool IsNewOne);// 0x4e713d4
	bool AddToPool(SceneComponent* InComponent);// 0x4e71344

--------------------------------
Class: ComponentPoolCacheList
	SceneComponent*[] PoolList;//[Offset: 0x0, Size: 0x10]// 0x760d239f00

--------------------------------
Class: MonsterTreasureBoxGroupComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	float WeightValue;//[Offset: 0x2c8, Size: 0x4]// 0x75a88e1b90
	MonsterTreasureBox* CurMonsterTreasureBox;//[Offset: 0x2d0, Size: 0x8]// 0x75a888bf00
	delegate OnMonsterDie_MonsterTreasureBoxGroup;//[Offset: 0x2d8, Size: 0x10]// 0x75a888bf80
	delegate OnMonsterTreasureBoxActive;//[Offset: 0x2e8, Size: 0x10]// 0x75a888c000
	delegate OnMonsterTreasureBoxBreak;//[Offset: 0x2f8, Size: 0x10]// 0x75a888c080
	int CurLiveMonsterNum;//[Offset: 0x308, Size: 0x4]// 0x75a88e1c00
	MonsterSpotSceneComponent*[] CurrentMonsterSpotSceneComponent;//[Offset: 0x310, Size: 0x10]// 0x75a888c180
	int64 LastSpawnTime;//[Offset: 0x330, Size: 0x8]// 0x75a88e1c70
	bool IsStartGenerateMosnters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]// 0x75a888c200
	int CurMonsterRefeshPlanID;//[Offset: 0x33c, Size: 0x4]// 0x75a88e1ce0
	int MaxLiveMonsterNum;//[Offset: 0x340, Size: 0x4]// 0x75a88e1d50
	void Update(float DeltaTime);// 0x441ef74
	void Reset();// 0x441ef60
	void RegisterMonsterSpotSceneComponent(MonsterSpotSceneComponent* MonsterSpotSceneComponent);// 0x441eee4
	void MonsterTreasureBoxStateChanged(enum State);// 0x441ee68
	void MonsterTreasureBoxBreak(FString MonsterTreasureBoxName);// 0x441ede4
	void MonsterTreasureBoxActive(FString MonsterTreasureBoxName);// 0x441ed60
	void MonsterDie_MonsterTreasureBoxGroup(FString MonsterName);// 0x441ecdc
	MonsterTreasureBoxProbeComponent* GetMonsterTreasureBoxProbeComponent();// 0x441eca8
	int GetMonsterID();// 0x441ec74
	void GeneratorTreasureBox();// 0x441ec60
	void GeneratorMonsters(FString MonsterTreasureBoxGroupName);// 0x441ebdc
	bool CanGeneratorTreaseurBox();// 0x441eb9c

--------------------------------
Class: MonsterSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int Label;//[Offset: 0x2cc, Size: 0x4]// 0x75a88e2220
	byte MonsterBornType;//[Offset: 0x2d0, Size: 0x1]// 0x75a888c900
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x441d334

--------------------------------
Class: MonsterTreasureBoxProbeComponent.GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	MonsterTreasureBoxGroupComponent*[] AllMonsterSpotGroups;//[Offset: 0x2f0, Size: 0x10]// 0x75a888b500
	MonsterTreasureBoxGroupComponent*[] CurrentMonsterSpotGroups;//[Offset: 0x300, Size: 0x10]// 0x75a888b600
	MonsterTreasureBoxTableData[] MonsterTreasureBoxTableDatas;//[Offset: 0x318, Size: 0x10]// 0x75a888b700
	BTZombieModeLabelOfMonster[] ZombieModeLabelOfMonsters;//[Offset: 0x328, Size: 0x10]// 0x75a888b800
	BTZombieModeLevelZombiePlan[] ZombieModeLevelZombiePlans;//[Offset: 0x338, Size: 0x10]// 0x75a888b900
	int MaxLiveMonsterNum;//[Offset: 0x34c, Size: 0x4]// 0x75a88e1650
	MonsterTreasureBoxGroupComponent*[] NeedToUpdateMonsterSpotGroups;//[Offset: 0x350, Size: 0x10]// 0x75a888ba00
	void Update(float DeltaTime);// 0x441ff08
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x441fe84
	void RangeMonsterTreasureBoxGroups(int WaveNum, int MonsterTreasureBoxNum, int DistanceWeight, int AngleWeight, int MonsterRefeshPlanID);// 0x441fd20
	void InitialItemTable();// 0x441fd04
	BTZombieModeLevelZombiePlan[] GetZombieModeLevelZombiePlanTableDataByID(int ID);// 0x441fc34
	BTZombieModeLabelOfMonster[] GetZombieModeLabelOfMonsterTableDataByMonsterId(int MonsterID);// 0x441fb64
	BTZombieModeLabelOfMonster[] GetZombieModeLabelOfMonsterTableDataByLabel(int Label);// 0x441fa94
	BTZombieModeLabelOfMonster GetZombieModeLabelOfMonsterTableDataByID(int ID);// 0x441fa08
	MonsterTreasureBoxTableData GetMonsterTreasureBoxTableDataByID(int ID);// 0x441f8ec
	void GeneratorMonsterTreaseureBox();// 0x441f8d8

--------------------------------
Class: GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	void Update(float DeltaTime);// 0x4356580
	void UnInit();// 0x4356564
	void Init();// 0x4356548

--------------------------------
Class: MonsterTreasureBoxTableData
	int ID;//[Offset: 0x0, Size: 0x4]// 0x76121a6d20
	FString PathName;//[Offset: 0x8, Size: 0x10]// 0x76121a6cb0
	float TotalHP;//[Offset: 0x18, Size: 0x4]// 0x76121a6c40
	float TotalTime;//[Offset: 0x1c, Size: 0x4]// 0x76121a6bd0
	float BrokenHPPropotion;//[Offset: 0x20, Size: 0x4]// 0x76121a6b60
	int DropBoxId;//[Offset: 0x24, Size: 0x4]// 0x76121a6af0
	FString MetaData;//[Offset: 0x28, Size: 0x10]// 0x76121a6a80

--------------------------------
Class: BTZombieModeLabelOfMonster
	int ID;//[Offset: 0x0, Size: 0x4]// 0x76121a6f80
	int weight;//[Offset: 0x4, Size: 0x4]// 0x76121a6f10
	int Label;//[Offset: 0x8, Size: 0x4]// 0x76121a6ea0
	int MonsterID;//[Offset: 0xc, Size: 0x4]// 0x76121a6e30

--------------------------------
Class: BTZombieModeLevelZombiePlan
	int ID;//[Offset: 0x0, Size: 0x4]// 0x76121a71e0
	int PlanID;//[Offset: 0x4, Size: 0x4]// 0x76121a7170
	int MonsterCount;//[Offset: 0x8, Size: 0x4]// 0x76121a7100
	int MonsterID;//[Offset: 0xc, Size: 0x4]// 0x76121a7090

--------------------------------
Class: BountyBoughtInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x7611f814f0
	int BoughtCount;//[Offset: 0x4, Size: 0x4]// 0x7611f81480

--------------------------------
Class: RescueHelicopterBase.Character.Pawn.Actor.Object
	int MaxRescueNum;//[Offset: 0x970, Size: 0x4]// 0x75a87c4900
	float FlyingZ;//[Offset: 0x974, Size: 0x4]// 0x75a87c4970
	float WaitingHeight;//[Offset: 0x978, Size: 0x4]// 0x75a87c49e0
	BoxComponent* HelicopterBox;//[Offset: 0x980, Size: 0x8]// 0x75b4ccb500
	int OwnerPlayerKey;//[Offset: 0x988, Size: 0x4]// 0x75a87c4a50
	byte HelicopterState;//[Offset: 0x98c, Size: 0x1]// 0x75b4ccb580
	int HelicopterID;//[Offset: 0x990, Size: 0x4]// 0x75a87c4ac0
	Vector TargetLocation;//[Offset: 0x994, Size: 0xc]// 0x75b4ccb600
	int[] PlayerKeys;//[Offset: 0x9a0, Size: 0x10]// 0x75b4ccb680
	float CountDownSeconds;//[Offset: 0x9b0, Size: 0x4]// 0x75a87c4ba0
	bool bCanSeeInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 0x1]// 0x75b4ccb700
	Vector RandomTargetLoc(out const Vector InCenter, float InRadius, FName ValidActorTag, float InGrowRadiusBy);// 0x44ed5dc
	void OwnedByPlayer(int InPlayerKey);// 0x44ed560
	void OnRep_HelicopterState();// 0x44ed54c
	void OnPlayerRescued(STExtraBaseCharacter* Player);// 0x44ed4d0
	void OnHelicopterLeft();// 0x44ed4bc
	void OnHelicopterArrived();// 0x44ed4a8
	bool IsOwnedByPlayer(int InPlayerKey);// 0x44ed418
	int GetOwnerPlayerKey();// 0x44ed3fc
	Vector GetHelicopterTargetLocation();// 0x44ed3d4
	int GetHelicopterId();// 0x44ed3b8
	void GetBoardedPlayerPlayerState(out STExtraPlayerState*[] PS);// 0x44ed324
	void BP_FlyToTargetLocation(out const Vector TargetLoc);// 0xffffff8a17adf2b0
	void BP_BoardPlayer(STExtraBaseCharacter* Player);// 0xffffff8a17adf2b0

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x510, Size: 0x50]// 0x75bcaa1ec0
	MaterialInterface* MaterialInstances;//[Offset: 0x560, Size: 0x8]// 0x75bcabc900
	MaterialInterface* BoxTestMat;//[Offset: 0x568, Size: 0x8]// 0x75bcabc980
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x570, Size: 0x10]// 0x75bcabca80
	RuntimeMeshComponent* Decal;//[Offset: 0x7f8, Size: 0x8]// 0x75bcabcb00

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x8]// 0x761219b640
	Texture* DecalTexure;//[Offset: 0x8, Size: 0x8]// 0x761219b5c0

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x110, Size: 0x8]// 0x75bdd7cc80
	Texture* DecalTexure;//[Offset: 0x118, Size: 0x8]// 0x75bdd7cd00
	int CoordX;//[Offset: 0x120, Size: 0x4]// 0x75bdde5300
	int CoordY;//[Offset: 0x124, Size: 0x4]// 0x75bdde5370
	bool bIsFancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]// 0x75bdd7cd80
	int FancyDecalDyeID;//[Offset: 0x12c, Size: 0x4]// 0x75bdde53e0

--------------------------------
Class: SlotWeaponData
	int ID;//[Offset: 0x0, Size: 0x4]// 0x7611ff0b20
	int[] AttachmentIDList;//[Offset: 0x8, Size: 0x10]// 0x7611ff0a30

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x510, Size: 0x8]// 0x75bddfbb80
	MeshComponent* WeaponMesh;//[Offset: 0x518, Size: 0x8]// 0x75bddfbc00
	STExtraPlayerController* ASTPC;//[Offset: 0x520, Size: 0x8]// 0x75bddfbc80
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x528, Size: 0x50]// 0x75bde07d00
	<int,AvatarDisplayAnimData> DisplayWeaponAnimInfoMap;//[Offset: 0x578, Size: 0x50]// 0x75bde07dc0
	WeaponAnimAsset WeaponAnimData;//[Offset: 0x5c8, Size: 0x80]// 0x75bddfbe00
	class AnimInstance* animBP;//[Offset: 0x648, Size: 0x28]// 0x75bddfbe80
	TextureRenderTarget2D* TargetTexture;//[Offset: 0x670, Size: 0x28]// 0x75bddfbf00
	delegate OnWeaponBlendAnim;//[Offset: 0x698, Size: 0x10]// 0x75bddfbf80
	enum[] ExcludeHiddenAvatarSlotList;//[Offset: 0x6a8, Size: 0x10]// 0x75bde0c100
	<int,FName> slotToSocket;//[Offset: 0x6b8, Size: 0x50]// 0x75bde07e80
	FName OBPlayerName;//[Offset: 0x708, Size: 0x8]// 0x75c98a51c0
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x710, Size: 0x8]// 0x75bde0c180
	CharacterAvatarComponent* OBAvatar;//[Offset: 0x718, Size: 0x8]// 0x75bde0c200
	StaticMeshComponent*[] StMeshList;//[Offset: 0x720, Size: 0x10]// 0x75bde0c300
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x730, Size: 0x10]// 0x75bde0c400
	FName[] HideBoneNames;//[Offset: 0x740, Size: 0x10]// 0x75bde0c480
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x750, Size: 0x10]// 0x75bde0c580
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x760, Size: 0x10]// 0x75bde0c680
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x770, Size: 0x8]// 0x75bde0c700
	<BattleItemHandleBase*,SocketMesh> SkMeshUseOwnAnimBP;//[Offset: 0x778, Size: 0x50]// 0x75bde07f40
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]// 0x75bde0c880
	bool bUseNewDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 0x1]// 0x75bde0c900
	bool bCheckGender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 0x1]// 0x75bde0c980
	int[] NeedAdaptLocWeaponSubTypeList;//[Offset: 0x7d0, Size: 0x10]// 0x75bde0ca00
	void SetTrainingRangePlayerOBInfo(out const PlayerOBInfo InPlayerOBInfo);// 0x4172d84
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent* AvatarComp);// 0x4172cbc
	void SetEnable(bool IsEnable);// 0x4172c38
	void RenderCaptureScene();// 0x4172c24
	void RefreshWeaponAnimAdaptParam(const int InWeaponAvatarBPID, const int InWeaponAvatarID, CharacterAvatarComponent* InAdaptAvatarComp);// 0x4172b2c
	void RefreshClothAdaptAnimParam(CharacterAvatarComponent* InAdaptAvatarComp);// 0x4172aa8
	void RefreshAvatar(int SlotType, bool IsEquipped);// 0x41729e8
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x4172900
	void InitBGMat();// 0xffffff8a17adf2b0
	class AnimInstance GetWeaponAnimBP(const int TargetWeaponID);// 0x4172840
	AnimationAsset* GetWeaponAnimAsset(int TargetWeaponID, enum AnimType);// 0x4172744
	Object* GetObjFromSoftRef(out const SoftObjectPath AssetRef);// 0x4172698
	CharacterAvatarComponent* GetOBAvatarComponent();// 0x4172664
	AnimationAsset* GetAnimSeqAsset(out const SoftObjectPath AnimResRef);// 0x41725b8
	void EquipWeapon(int PlayerKey);// 0x417253c
	void EquipPlayerAvatar(CharacterAvatarComponent* AvatarComponent, bool IsRefrsh);// 0x417247c
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x41723b4
	void CreateWeapon(bool IsSkeletalMesh);// 0x4172330
	void ApplyGripOrGunPointAnim(BattleItemHandleBase* InBattleItemHandleBase);// 0x41722ac
	void ApplyAnimation();// 0x4172298

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 0x8]// 0x761215c3c0
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 0x28]// 0x761215c340
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 0x28]// 0x761215c2c0
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 0x28]// 0x761215c240

--------------------------------
Class: AvatarDisplayAnimData
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x761215c870
	class AnimInstance* WeaponAnimBP;//[Offset: 0x8, Size: 0x28]// 0x761215c7f0
	AvatarDisplayPoseData[] DisplayAnimList;//[Offset: 0x30, Size: 0x10]// 0x761215c4d0

--------------------------------
Class: AvatarDisplayPoseData
	enum DisplayAnimType;//[Offset: 0x0, Size: 0x1]// 0x761215c6f0
	AnimationAsset* DisplayAnim;//[Offset: 0x8, Size: 0x28]// 0x761215c670

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x338, Size: 0x1]// 0x75a8282500
	float FOVAngle;//[Offset: 0x33c, Size: 0x4]// 0x75a82c5060
	float OrthoWidth;//[Offset: 0x340, Size: 0x4]// 0x75a82c50d0
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x348, Size: 0x8]// 0x75a8282580
	byte CaptureSource;//[Offset: 0x350, Size: 0x1]// 0x75a8282600
	byte CompositeMode;//[Offset: 0x351, Size: 0x1]// 0x75a8282680
	PostProcessSettings PostProcessSettings;//[Offset: 0x360, Size: 0x570]// 0x75a8282700
	float PostProcessBlendWeight;//[Offset: 0x8d0, Size: 0x4]// 0x75a82c5140
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 0x1]// 0x75a8282780
	Matrix CustomProjectionMatrix;//[Offset: 0x8e0, Size: 0x40]// 0x75a8282800
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 0x1]// 0x75a8282880
	Vector ClipPlaneBase;//[Offset: 0x924, Size: 0xc]// 0x75a8282900
	Vector ClipPlaneNormal;//[Offset: 0x930, Size: 0xc]// 0x75a8282980
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x93c, Size: 0x1]// 0x75a8282a00
	void CaptureScene();// 0x6f030f8
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6f03020

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2b5, Size: 0x1]// 0x75a8298500
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2b8, Size: 0x10]// 0x75a8298600
	Actor*[] HiddenActors;//[Offset: 0x2c8, Size: 0x10]// 0x75a8298700
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2d8, Size: 0x10]// 0x75a8298800
	Actor*[] ShowOnlyActors;//[Offset: 0x2e8, Size: 0x10]// 0x75a8298900
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]// 0x75a8298980
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]// 0x75a8298a00
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]// 0x75a8298a80
	float LODDistanceFactor;//[Offset: 0x2fc, Size: 0x4]// 0x75a82c8c50
	float MaxViewDistanceOverride;//[Offset: 0x300, Size: 0x4]// 0x75a82c8cc0
	int CaptureSortPriority;//[Offset: 0x304, Size: 0x4]// 0x75a82c8d30
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x308, Size: 0x10]// 0x75a8298b80
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6f02a98
	void ShowOnlyActorComponents(Actor* InActor);// 0x6f02a1c
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x6f029a0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6f02924
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x6f028a8
	void HideComponent(PrimitiveComponent* InComponent);// 0x6f0282c
	void HideActorComponents(Actor* InActor);// 0x6f027b0
	void ClearShowOnlyComponents();// 0x6f0279c
	void ClearHiddenComponents();// 0x6f02788

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]// 0x75d0a7bd80
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x75c997f980

--------------------------------
Class: SocketMesh
	FName SocketName;//[Offset: 0x0, Size: 0x8]// 0x761215c130
	StaticMeshComponent* MeshComp;//[Offset: 0x8, Size: 0x8]// 0x761215c0b0
	SkeletalMeshComponent* SkMeshComp;//[Offset: 0x10, Size: 0x8]// 0x761215c030

--------------------------------
Class: WaterSwimActor.Actor.Object
	float WaterSufaceOffset;//[Offset: 0x510, Size: 0x4]// 0x760d145270
	float Damage;//[Offset: 0x514, Size: 0x4]// 0x760d1452e0
	float Interval;//[Offset: 0x518, Size: 0x4]// 0x760d145350
	class DamageType* DamageType;//[Offset: 0x520, Size: 0x8]// 0x75a84c8d80
	class Pawn[] DamageFilters;//[Offset: 0x528, Size: 0x10]// 0x75a84c8e80
	class WaterPoisonDamageManager* DamageManagerClass;//[Offset: 0x538, Size: 0x8]// 0x75a84c8f00
	bool bIsWaterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]// 0x75a84c8f80
	BoxComponent* WaterBoxComp;//[Offset: 0x548, Size: 0x8]// 0x75a84c9000
	BoxComponent*[] UnWaterBoxCompList;//[Offset: 0x550, Size: 0x10]// 0x75a84c9100
	enum WaterRangeType;//[Offset: 0x560, Size: 0x1]// 0x75a84c9200
	float CylinderRadius;//[Offset: 0x564, Size: 0x4]// 0x760d1453c0
	SceneComponent* VolumeCenter;//[Offset: 0x568, Size: 0x8]// 0x75a84c9280
	FName VolumeActorTagName;//[Offset: 0x570, Size: 0x8]// 0x760d145430
	PhysicsVolume*[] VolumeActorList;//[Offset: 0x578, Size: 0x10]// 0x75a84c9380
	Vector[] WaterVolumeVertex;//[Offset: 0x588, Size: 0x10]// 0x75a84c9480
	uint32[] WaterVolumeTriangle;//[Offset: 0x598, Size: 0x10]// 0x75a84c9500
	StaticMesh* WaterVolumeMesh;//[Offset: 0x5a8, Size: 0x28]// 0x75a84c9580
	bool IsLocationInWater(out const Vector Location, const float ZAxisTolerance);// 0x47ff1ac
	void InitCustomData(bool ForceInit);// 0x47ff128
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight, out const Vector TargetPos);// 0x47fefdc

--------------------------------
Class: WaterPoisonDamageManager.Info.Actor.Object
	WaterSwimActor*[] RegisteredWaterVolumes;//[Offset: 0x510, Size: 0x10]// 0x75a84c8d00

--------------------------------
Class: AutoTestSystemComponent.ActorComponent.Object
	class ATTaskGraph[] ConfigGraphList;//[Offset: 0x118, Size: 0x10]// 0x75bde0e280
	ATTaskGraph*[] TaskGraphList;//[Offset: 0x128, Size: 0x10]// 0x75bde0e380
	bool StopExistGraph(int GraphIndex);// 0x416eb1c
	bool StartNewGraph(int GraphIndex, out TaskGraphInitParam Param);// 0x416ea44
	void RemoveTaskGraph(ATTaskGraph* Graph);// 0x416e9c8
	void ProcessTaskGraph(ATTaskGraph* Graph);// 0x416e94c
	void AddTaskGraph(ATTaskGraph* Graph);// 0x416e8d0

--------------------------------
Class: ATTaskGraph.Object
	Vector2D DrawHudOffsetScale;//[Offset: 0x28, Size: 0x8]// 0x75bde10780
	float LineOffsetY;//[Offset: 0x30, Size: 0x4]// 0x75c98a6960
	enum GraphsState;//[Offset: 0x34, Size: 0x1]// 0x75bde10880
	AutoTestSystemComponent* OwnerComp;//[Offset: 0x38, Size: 0x8]// 0x75bde10900
	ATTaskNodeBase*[] TaskNodeList;//[Offset: 0x40, Size: 0x10]// 0x75bde10a00
	void Tick(float DeltaTime);// 0x4169918
	void RemoveTaskNode(ATTaskNodeBase* Node);// 0x416989c
	void ReceiveTick(float DeltaTime);// 0x4169818
	void ReceiveEndGraph();// 0x41697fc
	void ReceiveBeginGraph();// 0x41697e0
	void ProcessTask(ATTaskNodeBase* Task);// 0x416975c
	void EndGraph();// 0x4169740
	void ChangeState(enum NewState);// 0x41696c4
	void BeginGraph();// 0x41696a8
	void AddTaskNode(ATTaskNodeBase* Node);// 0x416962c

--------------------------------
Class: ATTaskNodeBase.Object
	FString NodeDescription;//[Offset: 0x28, Size: 0x10]// 0x7611efccb0
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x7611efcc30
	ATTaskGraph* OwnerGraph;//[Offset: 0x40, Size: 0x8]// 0x7611efcbb0
	enum NodeState;//[Offset: 0x48, Size: 0x1]// 0x7611efcab0
	ATTaskNodeBase* NextNode;//[Offset: 0x50, Size: 0x8]// 0x7611efca30
	enum ExcuteResult;//[Offset: 0x58, Size: 0x1]// 0x7611efc930
	FString ExcuteResultMsg;//[Offset: 0x60, Size: 0x10]// 0x7611efc8c0
	delegate OnNodeStateChangeDelegate;//[Offset: 0x70, Size: 0x10]// 0x7611efc840
	delegate OnNodeExcuteResultDelegate;//[Offset: 0x80, Size: 0x10]// 0x7611efc7c0
	void TickTask(float DeltaTime);// 0x416c614
	void ReceiveTickTask(float DeltaTime);// 0x416c590
	void ReceiveEndTask();// 0x416c574
	void ReceiveBeginTask();// 0x416c558
	void OnNodeStateChangeDelegate__DelegateSignature(ATTaskNodeBase* Node, enum OldState, enum NewState);// 0xffffff8a17adf2b0
	void OnNodeExcuteResultDelegate__DelegateSignature(ATTaskNodeBase* Node, enum Result, FString ResultMsg);// 0xffffff8a17adf2b0
	FString GetDescription();// 0x416c4d0
	void ForceEndTask();// 0x416c4bc
	void EndTask();// 0x416c4a0
	void ChangeState(enum NewState);// 0x416c424
	void BeginTask();// 0x416c408

--------------------------------
Class: TaskGraphInitParam

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 0x1]// 0x7611fefcc0
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 0x28]// 0x7611fefc40

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x510, Size: 0x8]// 0x75b4c65400

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x870, Size: 0x10]// 0x75a8638980
	int InstancingRandomSeed;//[Offset: 0x880, Size: 0x4]// 0x75bcaf7a70
	int InstanceStartCullDistance;//[Offset: 0x884, Size: 0x4]// 0x75bcaf7ae0
	int InstanceEndCullDistance;//[Offset: 0x888, Size: 0x4]// 0x75bcaf7b50
	int[] InstanceReorderTable;//[Offset: 0x890, Size: 0x10]// 0x75a8638a00
	int[] RemovedInstances;//[Offset: 0x8a0, Size: 0x10]// 0x75a8638a80
	int[] InstanceVisIds;//[Offset: 0x8b0, Size: 0x10]// 0x75a8638b00
	<int,InstanceVisibilityData> InstanceVisibilityMapping;//[Offset: 0x8c0, Size: 0x50]// 0x75a8682d40
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]// 0x75a8638c00
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 0x1]// 0x75a8638c80
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x9a8, Size: 0x8]// 0x75a8638d00
	<int,Matrix> StashInstanceTransform;//[Offset: 0x9b0, Size: 0x50]// 0x75a8682e00
	int NumPendingLightmaps;//[Offset: 0xa08, Size: 0x4]// 0x75bcaf7df0
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0xa10, Size: 0x10]// 0x75a8638e80
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x6e1b73c
	bool ShowInstance(out const int[] InstanceIndices);// 0x6e1b68c
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x6e1b5d8
	bool RemoveInstance(int InstanceIndex);// 0x6e1b540
	bool HideInstance(out const int[] InstanceIndices);// 0x6e1b490
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x6e1b354
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x6e1b1e4
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x6e1b088
	int GetInstanceCount();// 0x6e1b054
	void ClearInstances();// 0x6e1b038
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x6e1af88
	int AddInstance(out const Transform InstanceTransform);// 0x6e1aed0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]// 0x75cdbecb00

--------------------------------
Class: InstanceVisibilityData
	int PVSHandlerID;//[Offset: 0x0, Size: 0x4]// 0x75d0a83e90
	int InsVisibilityID;//[Offset: 0x4, Size: 0x4]// 0x75d0a83f00

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 0x50]// 0x7611fef820
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x50, Size: 0x8]// 0x7611fef7a0

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 0x10]// 0x7611fef370
	TrailMarkActor*[] AssignableList;//[Offset: 0x10, Size: 0x10]// 0x7611fef270

--------------------------------
Class: ClientSettingBaseOnGameMode
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x0, Size: 0x10]// 0x7611fee9b0
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x10, Size: 0x10]// 0x7611fee8c0
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 0x10]// 0x7611fee7d0
	bool bDisableSimulateClientBulletImpactFXOnlyForMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611fee750
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x38, Size: 0x10]// 0x7611fee660
	int[] HideBackpackWeaponDeviceQualityLevelConfigList;//[Offset: 0x48, Size: 0x10]// 0x7611fee570

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte MinQualityLevel;//[Offset: 0x0, Size: 0x1]// 0x7611feee40
	int MinDeviceLevel;//[Offset: 0x4, Size: 0x4]// 0x7611feedd0
	bool bApplyToLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611feed50
	class Actor[] TargetClassConfigList;//[Offset: 0x10, Size: 0x10]// 0x7611feec50
	class Object[] CachedClassList;//[Offset: 0x20, Size: 0x10]// 0x7611feeb50

--------------------------------
Class: TaskControllerComponent.UniversalTaskController.ActorComponent.Object

--------------------------------
Class: SeasonTaskListener.UniversalTaskController.ActorComponent.Object
	<int,TaskRecord> TaskRecords;//[Offset: 0x238, Size: 0x50]// 0x75a875cf40
	<int,TaskDetailInfo> TaskGlobalMap;//[Offset: 0x288, Size: 0x50]// 0x75a875d000
	delegate OnReceiveWeakTaskData;//[Offset: 0x2d8, Size: 0x10]// 0x75a8764f80
	delegate OnReceiveTasksSimpleInfos;//[Offset: 0x2e8, Size: 0x10]// 0x75a8765000
	delegate OnReceiveReelTasksInfos;//[Offset: 0x2f8, Size: 0x10]// 0x75a8765080
	delegate OnFinishedTaskParamsInit;//[Offset: 0x308, Size: 0x10]// 0x75a8765100
	float TaskReqFrequencyLimit;//[Offset: 0x318, Size: 0x4]// 0x75a874f850
	<int,float> WeekDataReqTimeRecords;//[Offset: 0x320, Size: 0x50]// 0x75a875d0c0
	TaskSimpleInfo[] SimpleInfoList;//[Offset: 0x370, Size: 0x10]// 0x75a8765200
	TaskDetailInfo[] DetailInfoList;//[Offset: 0x380, Size: 0x10]// 0x75a8765300
	TaskExtraInfo ReqExtraInfo;//[Offset: 0x390, Size: 0x4]// 0x75a8765380
	bool bComputeNonRealTimeTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]// 0x75a8765400
	UnHandledTaskInfo[] UnhandledTaskList;//[Offset: 0x398, Size: 0x10]// 0x75a8765500
	bool bEnableOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]// 0x75a8765580
	int EffectLimitNum;//[Offset: 0x3ac, Size: 0x4]// 0x75a874f9a0
	int ActorLimitNum;//[Offset: 0x3b0, Size: 0x4]// 0x75a874fa10
	bool bEnableReactivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]// 0x75a8765600
	bool bUseDiffTypeStat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]// 0x75a8765680
	LimitActorDetail[] CounterLimitActorList;//[Offset: 0x3b8, Size: 0x10]// 0x75a8765780
	LimitTypeActorUnion[] TypeCounterActorSet;//[Offset: 0x3c8, Size: 0x10]// 0x75a8765880
	delegate OnActorOutLimitDelegate;//[Offset: 0x3d8, Size: 0x10]// 0x75a8765900
	delegate OnActorLimitRegisterDelegate;//[Offset: 0x3e8, Size: 0x10]// 0x75a8765980
	<FName,int> PersonalActorLimiteNum;//[Offset: 0x3f8, Size: 0x50]// 0x75a875d180
	void UpdateRecord(int TaskID, int process, bool bIsModeFit, int TargetProcess, int WeekIndex);// 0x450d35c
	void UnRegisterActorForCounter(Actor* TargetActor);// 0x450d2e0
	void S2C_ResponseTasksPage(int WeekIndex, const TaskDetailInfo[] TaskDetailList);// 0x450d1e4
	void S2C_ResponseTaskSimpleInfo(const TaskSimpleInfo[] TaskSimpleInfos);// 0x450d12c
	void S2C_ResponseReelTaskInfo(const ComprehensiveTaskInfo[] TaskDetailList);// 0x450d074
	void RequestTasksByWeekIndex(int WeekIndex);// 0x450cff8
	void RequestTasksByID(out const int[] TaskIdList);// 0x450cf64
	bool RemoveValue(FName tempName);// 0x450ced4
	void RegisterActorForCounter(Actor* TargetActor, FString ActorOwnerKey);// 0x450cdbc
	void OnPlayerStartInitialized();// 0x450cda8
	void OnPlayerSendBattleResult(uint32 PlayerKey, FString Reason);// 0x450cce4
	bool IsRealTimeComputingTask(int TaskType);// 0x450cc54
	bool HasTaskFinished(int TaskID);// 0x450cbc4
	void HandleInitTaskData(int TaskID, int process, FString ExtInfo);// 0x450ca68
	void HandleInitCollectionData(int TaskID, int CurrentCount, int TotalCount);// 0x450c978
	ComprehensiveTaskInfo[] GetReelTaskDetail(out const int[] TaskIdList);// 0x450c88c
	bool GetModeFitResult(int TaskID);// 0x450c7fc
	int GetCurNumByName(FName tempName);// 0x450c770
	static SeasonTaskListener* GetClientTaskController(const Object* WorldContextObject);// 0x450c6f4
	void GenerateReqExtraInfo();// 0x450c6e0
	void EnableComputeNonRealTimeTask(bool IsEnable);// 0x450c65c
	void ComputeAllTasksOnce();// 0x450c648
	void ChangeCurNumByName(FName tempName, int deltaNum);// 0x450c590
	void C2S_RequestTasksPage(int WeekIndex, const TaskExtraInfo ExtraInfo);// 0x450c4a0
	void C2S_RequestTaskSimpleInfo();// 0x450c440
	void C2S_RequestTasksDetail(const int[] TaskIdList, const TaskExtraInfo ExtraInfo);// 0x450c344
	void C2S_RequestReelTasksDetail();// 0x450c2e4
	bool AddValue(FName tempName);// 0x450c254

--------------------------------
Class: TaskRecord
	TaskDetailInfo[] TaskDetailList;//[Offset: 0x0, Size: 0x10]// 0x76121d0dd0

--------------------------------
Class: TaskDetailInfo
	int TaskID;//[Offset: 0x0, Size: 0x4]// 0x7611f705e0
	int CurrentProcess;//[Offset: 0x4, Size: 0x4]// 0x7611f70570
	int TotalProcess;//[Offset: 0x8, Size: 0x4]// 0x7611f70500
	byte WeekIndex;//[Offset: 0xc, Size: 0x1]// 0x7611f70480

--------------------------------
Class: TaskSimpleInfo
	int WeekID;//[Offset: 0x0, Size: 0x4]// 0x7611f70990
	int UnCompletedTaskNum;//[Offset: 0x4, Size: 0x4]// 0x7611f70920

--------------------------------
Class: TaskExtraInfo
	float TalkTime;//[Offset: 0x0, Size: 0x4]// 0x76121d0cc0

--------------------------------
Class: UnHandledTaskInfo
	int TaskID;//[Offset: 0x0, Size: 0x4]// 0x76121d0bb0
	int TaskType;//[Offset: 0x4, Size: 0x4]// 0x76121d0b40
	int Progress;//[Offset: 0x8, Size: 0x4]// 0x76121d0ad0

--------------------------------
Class: LimitActorDetail
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8]// 0x76121d12e0
	FString OwnerKey;//[Offset: 0x8, Size: 0x10]// 0x76121d1270
	int Order;//[Offset: 0x18, Size: 0x4]// 0x76121d1200
	int TimeStamp;//[Offset: 0x1c, Size: 0x4]// 0x76121d1190
	bool bHasProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x76121d1110

--------------------------------
Class: LimitTypeActorUnion
	FString ActorClassName;//[Offset: 0x0, Size: 0x10]// 0x76121d1360
	LimitActorDetail[] CounterActorList;//[Offset: 0x10, Size: 0x10]// 0x76121d0f70

--------------------------------
Class: ComprehensiveTaskInfo
	int TaskID;//[Offset: 0x0, Size: 0x4]// 0x7611f70e20
	int CurrentProcess;//[Offset: 0x4, Size: 0x4]// 0x7611f70db0
	int TotalProcess;//[Offset: 0x8, Size: 0x4]// 0x7611f70d40
	int OwnerTaskID;//[Offset: 0xc, Size: 0x4]// 0x7611f70cd0
	uint32 PlayerKey;//[Offset: 0x10, Size: 0x4]// 0x7611f70c60

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x118, Size: 0x4]// 0x75a83f5340
	int GotoSpectatingTime;//[Offset: 0x11c, Size: 0x4]// 0x75a83f53b0
	FString RevivalGotoSpectatingTips;//[Offset: 0x120, Size: 0x10]// 0x75a83f5420
	int64 StartObserverTime;//[Offset: 0x130, Size: 0x8]// 0x75a83f5490
	int64 FinishRevivalTime;//[Offset: 0x138, Size: 0x8]// 0x75a83f5500
	STExtraPlayerController* OwningPC;//[Offset: 0x140, Size: 0x8]// 0x75a83ce680
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x148, Size: 0x8]// 0x75a83ce700
	DateTime BePickupTime;//[Offset: 0x150, Size: 0x8]// 0x75a83ce780
	void TickRevival(float DeltaSeconds);// 0x4495fcc
	void SetRemainingRevivalTime(int InValue);// 0x4495f50
	void SetCaptureIDCardStatus(bool InValue);// 0x4495ecc
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x4495e50
	void OnPlayerQuitSpectating(uint32 PlayerKey);// 0x4495dd4
	void OnPlayerGotoSpectating(uint32 PlayerKey);// 0x4495d58
	void OnPlayerExitGame();// 0x4495d44
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x4495cc0
	void LeaveRevivalState(uint32 SaviorKey);// 0x4495c44
	bool IsInWaittingRevivalState();// 0x4495c0c
	int GetRevivalCountDownTime();// 0x4495bf0
	int GetRemainingRevivalTime();// 0x4495bbc
	bool GetCaptureIDCardStatus();// 0x4495b84
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x4495af8
	bool FindNearestPointPos(out const Vector InPos, out Vector OutPos);// 0x4495a00
	void EnterRevivalState();// 0x44959ec
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x4495944
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x449589c

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x510, Size: 0x8]// 0x75b4cc8c80
	float SmokeStartScaleDistance;//[Offset: 0x518, Size: 0x4]// 0x75a87c35c0
	float SmokeEndScaleDistance;//[Offset: 0x51c, Size: 0x4]// 0x75a87c3630
	float SmokeStartScaleValue;//[Offset: 0x520, Size: 0x4]// 0x75a87c36a0
	float SmokeEndScaleValue;//[Offset: 0x524, Size: 0x4]// 0x75a87c3710
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]// 0x75b4cc8d00
	float RevivalCDTime;//[Offset: 0x52c, Size: 0x4]// 0x75a87c3780
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]// 0x75b4cc8d80
	int RevivalCount;//[Offset: 0x534, Size: 0x4]// 0x75a87c37f0
	int ID;//[Offset: 0x538, Size: 0x4]// 0x75a87c3860
	enum CurState;//[Offset: 0x53c, Size: 0x1]// 0x75b4cc8e80
	enum PreState;//[Offset: 0x53d, Size: 0x1]// 0x75b4cc8f80
	int RevivalTime;//[Offset: 0x540, Size: 0x4]// 0x75a87c38d0
	int CurRevivalTime;//[Offset: 0x544, Size: 0x4]// 0x75a87c3940
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]// 0x75b4cc9000
	int OperationalDistance;//[Offset: 0x54c, Size: 0x4]// 0x75a87c39b0
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x550, Size: 0x50]// 0x75b4cbd8c0
	Transform PTowEleTransform;//[Offset: 0x5a0, Size: 0x30]// 0x75b4cc9200
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x5d0, Size: 0x50]// 0x75b4cbd980
	FString ExParticleComponentTag;//[Offset: 0x620, Size: 0x10]// 0x75a87c3a20
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x630, Size: 0x50]// 0x75b4cbda40
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x680, Size: 0x8]// 0x75b4cc9580
	int SmokingdisappearTime;//[Offset: 0x688, Size: 0x4]// 0x75a87c3a90
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 0x1]// 0x75b4cc9600
	int IconID;//[Offset: 0x690, Size: 0x4]// 0x75a87c3b00
	uint32[] CurrentRevivingPlayers;//[Offset: 0x698, Size: 0x10]// 0x75b4cc9680
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x6a8, Size: 0x8]// 0x75b4cc9700
	float RevivalCDTimeCur;//[Offset: 0x6b0, Size: 0x4]// 0x75a87c3be0
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x6c8, Size: 0x8]// 0x75b4cc9780
	void StartRevival();// 0x44f3f10
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x44f3e80
	bool RecheckCurrentRevivingPlayers();// 0x44f3e48
	void OnRep_ShowSmoking();// 0x44f3e34
	void OnRep_RevivalPointState(enum LastPreState);// 0x44f3db8
	void OnRep_RevivalCDTimeCur();// 0x44f3da4
	void OnRep_CurrentRevivingPlayers();// 0x44f3d90
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x44f3d00
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x44f3c70
	float GetRevivalCDTimeCurPercent();// 0x44f3c3c
	float GetRevivalCDTimeCur();// 0x44f3c08
	float GetRevivalCDTime();// 0x44f3bd4
	int GetId();// 0x44f3ba0
	void DistanceChangedEvent(float Scale);// 0xffffff8a17adf2b0

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 0x4]// 0x76121be810
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 0x4]// 0x76121be7a0
	int64 PickupTime;//[Offset: 0x8, Size: 0x8]// 0x76121be730
	int64 DroperTime;//[Offset: 0x10, Size: 0x8]// 0x76121be6c0
	FString PickUpName;//[Offset: 0x18, Size: 0x10]// 0x76121be650
	FString DroperPlayerName;//[Offset: 0x28, Size: 0x10]// 0x76121be5e0

--------------------------------
Class: DelaySendingMsgComponent.ActorComponent.Object
	STExtraPlayerController* MyPC;//[Offset: 0x118, Size: 0x8]// 0x75b4d9f100
	<FName,EventCD> DelayEvent;//[Offset: 0x120, Size: 0x50]// 0x75b4db9b00
	float CheckSendingAllowedDelta;//[Offset: 0x170, Size: 0x4]// 0x75b4db11d0
	EventCD CoolDownCD;//[Offset: 0x178, Size: 0x28]// 0x75b4d9f200
	delegate DelaySendingMsgDelegate;//[Offset: 0x1b0, Size: 0x10]// 0x75b4d9f280
	bool bOpenDelayComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 0x1]// 0x75b4d9f300
	void SetUIMsgByDelayEventName(FName EventName, FString UIMsg);// 0x42ae064
	bool CanEventExecuteImmediately(FName EventName);// 0x42adfd4

--------------------------------
Class: EventCD
	FString UIMsg;//[Offset: 0x8, Size: 0x10]// 0x761217a220
	CoolDownType[] StateList;//[Offset: 0x18, Size: 0x10]// 0x7612179ea0

--------------------------------
Class: CoolDownType
	FName OtherStateType;//[Offset: 0x0, Size: 0x8]// 0x761217a1b0
	enum PStateType;//[Offset: 0x8, Size: 0x1]// 0x761217a0b0
	float CDTime;//[Offset: 0xc, Size: 0x4]// 0x761217a040

--------------------------------
Class: HitEffectComponent.ActorComponent.Object
	RTPCParamData RTPCParamInfo;//[Offset: 0x118, Size: 0x18]// 0x75bcae7100
	int AutonomousHitEffectCacheLimit;//[Offset: 0x130, Size: 0x4]// 0x75bdd5c650
	int SimulatedHitEffectCacheLimit;//[Offset: 0x134, Size: 0x4]// 0x75bdd5c6c0
	HitEffectDataAsset* DefaultHitEffect;//[Offset: 0x138, Size: 0x28]// 0x75bcae7180
	<FName,HitEffectDataAsset*> ExtraHitEffects;//[Offset: 0x160, Size: 0x50]// 0x75bcad9b80
	HitEffectCachedData[] AutonomousHitEffectList;//[Offset: 0x1b0, Size: 0x10]// 0x75bcae7300
	HitEffectCachedData[] SimulatedHitEffectList;//[Offset: 0x1c0, Size: 0x10]// 0x75bcae7400
	<HitEffectDataAsset*,ParticleSystem*> CachedImpactFXMap;//[Offset: 0x1d0, Size: 0x50]// 0x75bcad9c40
	HitEffectDataAsset*[] RegisteredSpecialHitEffectDataAssetList;//[Offset: 0x220, Size: 0x10]// 0x75bcae7600
	float SoundVolume;//[Offset: 0x230, Size: 0x4]// 0x75bdd5c7a0
	bool bIsAsyncLoadingAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]// 0x75bcae7680
	Object*[] HitEffectCachedList;//[Offset: 0x248, Size: 0x10]// 0x75bcae7780
	HitEffectDataAsset* HitEffectDataAsset;//[Offset: 0x258, Size: 0x8]// 0x75bcae7800
	int UserSetting_Type;//[Offset: 0x260, Size: 0x4]// 0x75bdd5c810
	int UserSetting_Color;//[Offset: 0x264, Size: 0x4]// 0x75bdd5c880
	void UpdateSpecialHitEffectDataAssetSetting();// 0x43ada60
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x43ad910
	void SetOutputBusVolume(float Volume);// 0x43ad894
	void RegisterSpecialHitEffectDataAssetSetting(HitEffectDataAsset* TargetEffectDataAsset);// 0x43ad810

--------------------------------
Class: RTPCParamData
	FString RTPCKey;//[Offset: 0x0, Size: 0x10]// 0x7612197a00
	float Value;//[Offset: 0x10, Size: 0x4]// 0x7612197990
	int InterpolationTimeMs;//[Offset: 0x14, Size: 0x4]// 0x7612197920

--------------------------------
Class: HitEffectCachedData
	DecalComponent* HitDecalComp;//[Offset: 0x0, Size: 0x8]// 0x7612197c10
	ParticleSystemComponent* HitParticleComp;//[Offset: 0x8, Size: 0x8]// 0x7612197b90
	AkComponent* AKComp;//[Offset: 0x10, Size: 0x8]// 0x7612197b10

--------------------------------
Class: TeamateStateChangedCompressData
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 0xc]// 0x7611fdfcf0
	uint32 View;//[Offset: 0xc, Size: 0x4]// 0x7611fdfc80
	byte Roll;//[Offset: 0x10, Size: 0x1]// 0x7611fdfc00
	float Health;//[Offset: 0x14, Size: 0x4]// 0x7611fdfb90
	float HealthMax;//[Offset: 0x18, Size: 0x4]// 0x7611fdfb20
	float Temperature;//[Offset: 0x1c, Size: 0x4]// 0x7611fdfab0
	float SignalHP;//[Offset: 0x20, Size: 0x4]// 0x7611fdfa40

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 0xc]// 0x7611fe0140
	uint32 View;//[Offset: 0xc, Size: 0x4]// 0x7611fe00d0
	byte Roll;//[Offset: 0x10, Size: 0x1]// 0x7611fe0050
	byte uavType;//[Offset: 0x11, Size: 0x1]// 0x7611fdffd0

--------------------------------
Class: TrainingGroundWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	<FString,TrainingHeadWidgetInfo> PlayerHeadWidgetMap;//[Offset: 0x470, Size: 0x50]// 0x75a8560300
	<FString,PlayerOBInfo> PlayerInfosMap;//[Offset: 0x4d0, Size: 0x50]// 0x75a85603c0
	CanvasPanel* HeadUIRoot;//[Offset: 0x520, Size: 0x8]// 0x75a8552d00
	void SendRequestPlayerInfo(FString inUIDStr);// 0x472b654
	void OnWidgetInitialized();// 0x472b640
	void OnRefreshPlayersHeadWidget(out const ChooserActorInfo[] ChooseInfos);// 0x472b5ac
	void OnOpenPlayerInfoDetailUI(out const PlayerOBInfo CurPlayerInfo);// 0x472b4e8
	bool GetPlayerInfoByUID(FString inUIDStr, out PlayerOBInfo CurPlayerInfo);// 0x472b3d8

--------------------------------
Class: TrainingHeadWidgetInfo
	OBModePositionWidget* WidgetPtr;//[Offset: 0x0, Size: 0x8]// 0x761220b420

--------------------------------
Class: OBModePositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* OBCanvasPanelSlot;//[Offset: 0x458, Size: 0x8]// 0x75a8442d80
	CanvasPanel* OBPanel;//[Offset: 0x460, Size: 0x8]// 0x75a8442e00
	STExtraBaseCharacter* CachedCharacter;//[Offset: 0x468, Size: 0x8]// 0x75a8442e80
	STExtraPlayerState* CachedPlayerState;//[Offset: 0x470, Size: 0x8]// 0x75a8442f00
	WeaponManagerComponent* CacheWeaponComponent;//[Offset: 0x478, Size: 0x8]// 0x75a8442f80
	PlayerInfoInOB CachedPlayerInfo;//[Offset: 0x480, Size: 0xe0]// 0x75a8443000
	Vector4 Limit;//[Offset: 0x560, Size: 0x10]// 0x75a8443100
	int heightPlus;//[Offset: 0x570, Size: 0x4]// 0x75a8873d70
	int rightPlus;//[Offset: 0x574, Size: 0x4]// 0x75a8873de0
	Vector2D UIOffset;//[Offset: 0x578, Size: 0x8]// 0x75a8443180
	Vector LocOffset;//[Offset: 0x580, Size: 0xc]// 0x75a8443200
	float CachedHealth;//[Offset: 0x58c, Size: 0x4]// 0x75a8873e50
	float CachedBreathPercent;//[Offset: 0x590, Size: 0x4]// 0x75a8873ec0
	int TargetDistance;//[Offset: 0x594, Size: 0x4]// 0x75a8873f30
	float MagnificationCoefficient;//[Offset: 0x598, Size: 0x4]// 0x75a8873fa0
	float MaxDelayDisapearTime;//[Offset: 0x59c, Size: 0x4]// 0x75a8874010
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]// 0x75a8443280
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 0x1]// 0x75a8443300
	enum RelationshipWithRecordTarget;//[Offset: 0x5a6, Size: 0x1]// 0x75a8443400
	UserWidget* DeathBoxUI;//[Offset: 0x5a8, Size: 0x8]// 0x75a8443480
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x5c8, Size: 0x8]// 0x75a8443500
	STExtraBaseCharacter* PendingKillCharacter;//[Offset: 0x5e0, Size: 0x8]// 0x75a8443580
	int NativeWidgetID;//[Offset: 0x5f0, Size: 0x4]// 0x75a8874080
	bool bForceRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1]// 0x75a8443600
	bool isUsingDynamicZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1]// 0x75a8443680
	void SetShowDeathMark(bool bShow);// 0x445998c
	void SetPlayerCharacter(STExtraPlayerController* Controller, int idx);// 0x44598d4
	void RefreshWeaponIconStatusDetail(out const ItemDefineID DefineItem);// 0xffffff8a17adf2b0
	void RefreshWeaponBulletStatus(bool bHasBullet);// 0xffffff8a17adf2b0
	void RefreshTrainingWidget(PlayerInfoInOB PlayerInfo);// 0x445973c
	void RefreshPlayerHealth(float hpRatio, float breathRatio, bool IsNearDeath);// 0x445963c
	void RefreshOpenWeaponIconStatus(bool IsOpen);// 0xffffff8a17adf2b0
	void RefreshDistance(int Distance, float fovDistance);// 0x445957c
	void ReceiveUseWeseeStyle(out const enum RelationshipWithTarget);// 0x44594e8
	void OpenShowWeaponIcon();// 0x44594d4
	void OnPlayerLiveStateChanged();// 0x44594c0
	void OnItemClicked();// 0x44594ac
	void OnCharacterSpawned(STExtraBaseCharacter* Character);// 0x4459430
	void OnCharacterRepPlayerState(STExtraPlayerState* InPlayerState);// 0x44593b4
	void HandleWeaponChange();// 0x44593a0
	void HandleCheckCurWeaponBulletChange();// 0x445938c
	static int GetWidgetID();// 0x4459368
	void CloseShowWeaponIcon();// 0x4459354
	void CheckOwnWeaponStatus();// 0x4459340

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0x158, Size: 0x50]// 0x7611e56f90
	FName LeftLogicSocketName;//[Offset: 0x1a8, Size: 0x8]// 0x7611e56f20
	FName RightLogicSocketName;//[Offset: 0x1b0, Size: 0x8]// 0x7611e56eb0
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x1b8, Size: 0x50]// 0x7611e56d20
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x208, Size: 0x50]// 0x7611e56b80
	<FName,class STExtraWeapon> SoftGrenadeLogicSocketToWeaponClassMap;//[Offset: 0x258, Size: 0x50]// 0x7611e569e0
	int[] BagLevel1IDList;//[Offset: 0x2a8, Size: 0x10]// 0x7611e568f0
	int[] BagLevel2IDList;//[Offset: 0x2b8, Size: 0x10]// 0x7611e56800
	int[] BagLevel3IDList;//[Offset: 0x2c8, Size: 0x10]// 0x7611e56710
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x2d8, Size: 0x4]// 0x7611e566a0
	bool bIgnoreCheckLockTakeOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]// 0x7611e56620
	int LockTakeOutWeaponMsgID;//[Offset: 0x2e0, Size: 0x4]// 0x7611e565b0
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]// 0x7611e56530
	FName CurUseWeaponLogicSocket;//[Offset: 0x2e8, Size: 0x8]// 0x7611e564c0
	STExtraWeapon* CachedCurUseWeapon;//[Offset: 0x2f0, Size: 0x8]// 0x7611e56440
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x2f8, Size: 0x8]// 0x7611e563d0
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]// 0x7611e56350
	FName LastUseDiffSlotLogicSlot;//[Offset: 0x308, Size: 0x8]// 0x7611e562e0
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x310, Size: 0x8]// 0x7611e56270
	FName LastUseLogicSlot;//[Offset: 0x318, Size: 0x8]// 0x7611e56200
	byte LastUseLogicSlotRep;//[Offset: 0x320, Size: 0x1]// 0x7611e56180
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]// 0x7611e56100
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1]// 0x7611e56080
	bool bLockTakeOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1]// 0x7611e56000
	byte[] LockTakeOutWeapon_WhitePropSlotList;//[Offset: 0x328, Size: 0x10]// 0x7611e55f00
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x338, Size: 0x10]// 0x7611e55e80
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x348, Size: 0x10]// 0x7611e55e00
	delegate ChangeInventoryDataDelegate;//[Offset: 0x358, Size: 0x10]// 0x7611e55d80
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x368, Size: 0x10]// 0x7611e55d00
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x378, Size: 0x10]// 0x7611e55c80
	delegate OnClientHasFinishedCreateWeaponDelegate;//[Offset: 0x388, Size: 0x10]// 0x7611e55c00
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x398, Size: 0x10]// 0x7611e55b80
	delegate OnPostEquipWeaponDelegate;//[Offset: 0x3b8, Size: 0x10]// 0x7611e55b00
	delegate OnPostUnEquipWeaponDelegate;//[Offset: 0x3c8, Size: 0x10]// 0x7611e55a80
	delegate OnPostGetWeaponDelegate;//[Offset: 0x3d8, Size: 0x10]// 0x7611e55a00
	float WeaponCreateSeqLastTime;//[Offset: 0x3e8, Size: 0x4]// 0x7611e55990
	int WeaponCreateSeqStuckPickUpCount;//[Offset: 0x3ec, Size: 0x4]// 0x7611e55920
	<FString,bool> TakeOutWeaponLockKeyMap;//[Offset: 0x3f0, Size: 0x50]// 0x7611e55780
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x448, Size: 0x50]// 0x7611e555e0
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x498, Size: 0x50]// 0x7611e55440
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x4e8, Size: 0x10]// 0x7611e55340
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x518, Size: 0x10]// 0x7611e55240
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x528, Size: 0x40]// 0x7611e551c0
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x568, Size: 0x40]// 0x7611e55140
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x5a8, Size: 0x40]// 0x7611e550c0
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x5e8, Size: 0x40]// 0x7611e55040
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x628, Size: 0x40]// 0x7611e54fc0
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientTempSpecialWeapon;//[Offset: 0x668, Size: 0x40]// 0x7611e54f40
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientShiftGrenadeWeapon;//[Offset: 0x6a8, Size: 0x40]// 0x7611e54ec0
	SimulateWeaponDataMgr SimulateWeaponDataMgr;//[Offset: 0x6e8, Size: 0x10]// 0x7611e54e40
	SimulateWeaponDataMgr LocalCachedSimulateWeaponDataMgr;//[Offset: 0x6f8, Size: 0x10]// 0x7611e54dc0
	int8 BagLevel;//[Offset: 0x708, Size: 0x1]// 0x7611e54d50
	int8 LocalCachedBagLevel;//[Offset: 0x709, Size: 0x1]// 0x7611e54ce0
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x710, Size: 0x8]// 0x7611e54c60
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x718, Size: 0x8]// 0x7611e54be0
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x720, Size: 0x8]// 0x7611e54b60
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x728, Size: 0x8]// 0x7611e54ae0
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x730, Size: 0x8]// 0x7611e54a60
	FName SwitchTargetLogicSocket;//[Offset: 0x738, Size: 0x8]// 0x7611e549f0
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x770, Size: 0x8]// 0x7611e54970
	<FName,STExtraWeapon*> OldInventoryData;//[Offset: 0x778, Size: 0x50]// 0x7611e547d0
	int CurSwitchWeaponProgress;//[Offset: 0x7cc, Size: 0x4]// 0x7611e54760
	WeaponSystemDataOnSimulateClient DefWeaponSystemDataOnSimulateClient;//[Offset: 0x7f8, Size: 0x40]// 0x7611e546e0
	STExtraWeapon* LocalSimulateTakeOutWeapon;//[Offset: 0x848, Size: 0x8]// 0x7611e54660
	float BP_coil_size_ratio;//[Offset: 0x850, Size: 0x4]// 0x7611e545f0
	float BP_adsorb_speed_ratio;//[Offset: 0x854, Size: 0x4]// 0x7611e54580
	bool bAutoAimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]// 0x7611e54500
	void UpdateOwnerClientCreateWeapon();// 0x4810768
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x48106a8
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x4810694
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0xffffff8a17adf2b0
	void SimulatedWeaponSightChangedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x48105d4
	void SetAllWeaponVisable(bool isShow);// 0x4810550
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x48104d4
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param, bool bClearAllOldAutoTriggerWeaponTasks);// 0x48103cc
	void PreSwitchWeaponEnd();// 0x48103b0
	void OnRep_WeaponSystemDataOnSimulateTempSpecialWeapon();// 0x481039c
	void OnRep_WeaponSystemDataOnSimulateShiftGrenadeWeapon();// 0x4810388
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x4810374
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x4810360
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x481034c
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x4810338
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x4810324
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x48102a8
	void OnRep_SimulateWeaponDataMgr(SimulateWeaponDataMgr OldData);// 0x48101a0
	void OnRep_LockTakeOutWeapon(bool bOldVal);// 0x481011c
	void OnRep_CurrentWeaponReplicated();// 0x4810108
	void OnRep_CurrentWeaponLogicSocket();// 0x48100f4
	void OnRep_CurrentShieldWeaponReplicated();// 0x48100e0
	void OnRep_BagLevel();// 0x48100c4
	void OnReconnectOnServer();// 0x48100a8
	void OnReconnectOnClient();// 0x481008c
	void OnPostWeaponChangedDelegate__DelegateSignature(STExtraWeapon* Weapon, Actor* WeaponOwner);// 0xffffff8a17adf2b0
	void OnPostUnEquipWeapon(STExtraWeapon* Weapon);// 0x4810008
	void OnPostGetWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0xffffff8a17adf2b0
	void OnPostGetWeapon(STExtraWeapon* Weapon);// 0x480ff84
	void OnPostEquipWeapon(STExtraWeapon* Weapon);// 0x480ff00
	void OnClientHasFinishedCreateWeaponDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void LogInventoryDataInfo();// 0x480feec
	void LocalSwapWeaponByPropSlotFinished(byte Slot1, byte Slot2);// 0x480fe2c
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x480fd1c
	void LocalStartSimulateTakeOut();// 0x480fd08
	void LocalSimulateTakeOutEnd();// 0x480fcf4
	void LocalForceFinishSwitchWeapon();// 0x480fce0
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x480fccc
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x480fcb8
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x480fc94
	bool IsRecoveringWeaponOnServer();// 0x480fc5c
	bool IsCreatingWeaponOnServer();// 0x480fc24
	void HandleGetWeaponFinished(byte Slot);// 0x480fba0
	FString GetWeaponNameByWeaponID(int inWeaponID);// 0x480fad0
	STExtraWeapon*[] GetShootWeaponList();// 0x480fa50
	FName GetShieldWeaponSlot();// 0x480fa1c
	STExtraWeapon* GetShieldWeapon();// 0x480f9e8
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x480f95c
	FName GetLogicSocketBySlot(byte Slot);// 0x480f8d0
	STExtraWeapon* GetLastUsedWeapon();// 0x480f898
	STExtraWeapon* GetLastUsedNoneGrenadeWeapon();// 0x480f860
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x480f7d4
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x480f748
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x480f6bc
	byte GetGrenadeTypeOfWeapon(STExtraWeapon* Weapon);// 0x480f630
	FString GetGrenadeTimerIconOfWeapon(STExtraWeapon* Weapon);// 0x480f560
	int GetGrenadeSkillById(ItemDefineID ID);// 0x480f4c4
	FString GetGrenadeIconOfWeapon(STExtraWeapon* Weapon);// 0x480f3f4
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x480f358
	STExtraWeapon* GetCurrentUsingWeapon();// 0x480f324
	byte GetCurrentUsingPropSlot();// 0x480f2f0
	FName GetCurrentUsingLogicSocketOnServer();// 0x480f2bc
	FName GetCurrentUsingLogicSocket();// 0x480f288
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x480f254
	int GetBagLevelBySpesificID(int ID);// 0x480f1c8
	int GetBagLevel();// 0x480f18c
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x480f0b4
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x480efdc
	void ForceUpdateWeaponPoseByBagLevelOnServer();// 0x480efc0
	bool ForceStopWeaponCreateSeqAndRecoverByWeaponReconnectOnServer();// 0x480ef80
	void ForceBroadcastChangeInventoryDataEvent(byte Slot);// 0x480ef04
	void ForceBroadcastChangeCurrentDataEvent();// 0x480eef0
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x480eedc
	void EnableAllBroadcast(bool bEnable);// 0x480ee5c
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x480ed9c
	void DoWeapnAttachToBack(STExtraWeapon* Weapon, FName LogicSocket, bool NeedMeshUpdateFlag);// 0x480eca4
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x480ec28
	void DebugReconnectToClientOnServer();// 0x480ec14
	void DebugDisconnetToServerOnClient();// 0x480ec00
	void ClearAllInventoryData();// 0x480ebe4
	void ClearAllAutoTriggerWeaponEventTasks();// 0x480eb54
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot);// 0xffffff8a17adf2b0
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0xffffff8a17adf2b0
	void ChangeCurrentUsingWeaponAfterWeaponsSpawnedOnServer(byte Slot);// 0x480ead8
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x480ea0c

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 0x8]// 0x7611e52bc0
	byte Slot;//[Offset: 0x10, Size: 0x1]// 0x7611e52b40
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7611e52ac0
	ItemDefineID ID;//[Offset: 0x18, Size: 0x18]// 0x7611e52a40
	int OperationIndex;//[Offset: 0x30, Size: 0x4]// 0x7611e529d0
	Actor* CustomEquipAttachActor;//[Offset: 0x38, Size: 0x8]// 0x7611e52950

--------------------------------
Class: SimulateWeaponDataMgr
	WeaponSystemDataOnSimulateClient[] WeaponSystemDataList;//[Offset: 0x0, Size: 0x10]// 0x7611e527b0

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 0x4]// 0x7611e539d0
	enum TargetEvent;//[Offset: 0x4, Size: 0x1]// 0x7611e538d0
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 0x18]// 0x7611e53850
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611e537d0
	enum[] ForceExitPawnStateList;//[Offset: 0x28, Size: 0x10]// 0x7611e53650
	float DelayTimeBeforeDoTask;//[Offset: 0x38, Size: 0x4]// 0x7611e535e0

--------------------------------
Class: FrameCaptureActor.Actor.Object
	GameGuardFrameCapture* FrameCapture;//[Offset: 0x510, Size: 0x8]// 0x7611f39d60
	delegate DownloadCompleteEvent;//[Offset: 0x518, Size: 0x10]// 0x7611f39ce0
	FString LastUploadFileName;//[Offset: 0x528, Size: 0x10]// 0x7611f39c70
	STExtraWeapon*[] CacheWeapons;//[Offset: 0x538, Size: 0x10]// 0x7611f39b70
	STExtraPlayerController* MainRolePlayer;//[Offset: 0x548, Size: 0x8]// 0x7611f39af0
	STExtraBaseCharacter* MainRole;//[Offset: 0x550, Size: 0x8]// 0x7611f39a70
	float PastWeaponShootTime;//[Offset: 0x558, Size: 0x4]// 0x7611f39a00
	float OutOfCombatTime;//[Offset: 0x55c, Size: 0x4]// 0x7611f39990
	int KillNumThreshold;//[Offset: 0x560, Size: 0x4]// 0x7611f39920
	int AlivePlayers;//[Offset: 0x564, Size: 0x4]// 0x7611f398b0
	bool IsEnableCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]// 0x7611f39830
	FString RealFilePath;//[Offset: 0x570, Size: 0x10]// 0x7611f397c0
	bool UploadCaptureFrames();// 0x433d930
	void Tick(float DeltaSeconds);// 0x433d8ac
	void SetUploadPath();// 0x433d898
	void OnFrameSaved();// 0x433d884
	void OnDownloadCompleteEvent__DelegateSignature(bool bSucceeded, FString SourceUrl);// 0xffffff8a17adf2b0
	void OnBulletHit(Actor* InHitActor, float ImpactPosDistanceToWeapon, Pawn* Player);// 0x433d790
	FString GetSubPath(FString FullName);// 0x433d66c
	FString GenerateFileFullPath();// 0x433d5ec
	bool DownloadCaptureFrames();// 0x433d5b4
	void CreateCapture();// 0x433d5a0
	void CaptureFrame();// 0xffffff8a17adf2b0
	void C2S_OnFramesUploaded(int res, FString URL);// 0x433d4d4

--------------------------------
Class: GameGuardFrameCapture.Object
	int FetchFrameDelay;//[Offset: 0x30, Size: 0x4]// 0x75b4c41bb0
	MovieSceneCaptureProtocolSettings* ProtocolSettings;//[Offset: 0x70, Size: 0x8]// 0x75b4c5a680
	void Tick();// 0x434b09c
	void StartCapture();// 0x434b088
	void Initialize();// 0x434b074
	void Close();// 0x434b060

--------------------------------
Class: MovieSceneCaptureProtocolSettings.Object

--------------------------------
Class: WingSyncInfo
	int WingOilCount;//[Offset: 0x0, Size: 0x4]// 0x7611fec950
	int CurrentWingManID;//[Offset: 0x4, Size: 0x4]// 0x7611fec8e0
	bool bFuelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611fec860
	bool bHasFuelUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x7611fec7e0
	float NextCallTimeAllowed;//[Offset: 0xc, Size: 0x4]// 0x7611fec770

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	bool UseShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]// 0x75a8990580
	WeatherInfo WeatherLevelInfo;//[Offset: 0x128, Size: 0x18]// 0x75a8990600
	FString LastLoadedWeatherLevelName;//[Offset: 0x140, Size: 0x10]// 0x75a79ace00
	FString DefaultWeatherLevelName;//[Offset: 0x150, Size: 0x10]// 0x75a79ace70
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]// 0x75a8990680
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]// 0x75a8990700
	void UnloadStreamLevel(FString LevelName);// 0x4eeb7f0
	void SyncWeatherLevelInfo();// 0x4eeb7dc
	void OnUnLoadStreamLevelCompleted();// 0x4eeb7c8
	void OnRep_WeatherSyncCount();// 0x4eeb7b4
	void OnLoadStreamLevelCompleted();// 0x4eeb7a0
	void LoadWeatherLevel();// 0x4eeb78c
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x4eeb678
	void LoadDefaultWeatherLevel();// 0x4eeb664
	void Init();// 0x4eeb648

--------------------------------
Class: TeamAssembleAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]// 0x7611f88420
	int PlayerGender;//[Offset: 0x10, Size: 0x4]// 0x7611f883b0
	int SeasonPassCardBuyType;//[Offset: 0x14, Size: 0x4]// 0x7611f88340
	int SeasonPassCardBuyLevel;//[Offset: 0x18, Size: 0x4]// 0x7611f882d0
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]// 0x7611f88250
	int PlatformGender;//[Offset: 0x20, Size: 0x4]// 0x7611f881e0
	int TopSegmentTimes;//[Offset: 0x24, Size: 0x4]// 0x7611f88170
	int CharmLevel;//[Offset: 0x28, Size: 0x4]// 0x7611f88100
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7611f88080
	int[] WearAvatarList;//[Offset: 0x30, Size: 0x10]// 0x7611f87f90
	int[] WeaponAvatarList;//[Offset: 0x40, Size: 0x10]// 0x7611f87ea0
	int[] VehicleAvatarList;//[Offset: 0x50, Size: 0x10]// 0x7611f87db0
	FString TeamLogoID;//[Offset: 0x60, Size: 0x10]// 0x7611f87d40
	int PlaneID;//[Offset: 0x70, Size: 0x4]// 0x7611f87cd0
	FString PlaneName;//[Offset: 0x78, Size: 0x10]// 0x7611f87c60
	FString VehicleName;//[Offset: 0x88, Size: 0x10]// 0x7611f87bf0
	bool bDisplayWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]// 0x7611f87b70
	bool bIsTopCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]// 0x7611f87af0
	FString PlayerUID;//[Offset: 0xa0, Size: 0x10]// 0x7611f87a80

--------------------------------
Class: OccupationManagerComponent.ActorComponent.Object
	UAESkillManagerComponent* WeakSkillManagerPtr;//[Offset: 0x120, Size: 0x8]// 0x75a843ea00
	byte OccupationLevel;//[Offset: 0x128, Size: 0x1]// 0x75a843ea80
	byte OldOccupationLevel;//[Offset: 0x129, Size: 0x1]// 0x75a843eb00
	int OccupationID;//[Offset: 0x12c, Size: 0x4]// 0x75a88718b0
	OccupationSkillConfig[] OccupationSkillsConfig;//[Offset: 0x130, Size: 0x10]// 0x75a843ec00
	int TipTimeInterval;//[Offset: 0x148, Size: 0x4]// 0x75a8871920
	void RecordSavePersonAddHealthData();// 0x446378c
	void RecordSavePersonAccelateData();// 0x4463778
	void RecordReduceMedicalCastTime();// 0x4463764
	void OnSkillActive(int Index, bool bActive);// 0x44636a4
	void OnRep_WeakSkillManagerPtr();// 0x4463690
	void OnRep_OccupationLevel(byte OldOccupationLevelValue);// 0x4463614
	void OnCharacterDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x44633ac
	void ModifyOccupationLevel(int DiffValue);// 0x4463330

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	SkillPreloadDataAsset* SkillPreloadDataAsset;//[Offset: 0xa88, Size: 0x8]// 0x75a853b580
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0xa90, Size: 0x10]// 0x75a853b680
	byte TriggerSkillEventFromRole;//[Offset: 0xaa4, Size: 0x1]// 0x75a853b700
	GSListenerBase* CurrentGSListener;//[Offset: 0xaa8, Size: 0x8]// 0x75a853b780
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0xab0, Size: 0x10]// 0x75a853b880
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0xac0, Size: 0x10]// 0x75a853b980
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0xad0, Size: 0x10]// 0x75a853ba80
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0xae0, Size: 0x10]// 0x75a853bb80
	int CardChangeProtectTime;//[Offset: 0xb08, Size: 0x4]// 0x75a89beb60
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x478be2c
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillUID, byte fromRole);// 0x478bd30
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillUID, byte fromRole);// 0x478bc28
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillUID, byte fromRole);// 0x478bb2c
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x478ba6c
	void ServerTriggerStringEvent(int SkillUID, FString EventTypeStr);// 0x478b970
	void ServerTriggerSkillEvent(ItemDefineID ItemDefineID, byte EventType);// 0x478b864
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillUID);// 0x478b774
	void OnTargetCharacterStateLeave(STExtraCharacter* SelfCharacter, enum State);// 0x478b6bc
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x478b640
	void OnEventPlayerAction(out const FName InAction, Actor* InEventActor);// 0x478b56c
	void HandleRemoveGsListener(UAEGSLisenterEffectMapForEditor* GSLisenterEffectMapForEditorTemplate);// 0x478b4f0
	void HandleAddGsListener(UAEGSLisenterEffectMapForEditor* GSLisenterEffectMapForEditorTemplate, UTSkill* InSkill);// 0x478b43c
	UTSkill* GetSkillByEntry(enum entry);// 0x478b3b0
	float GetRestCoolDownTime(int SkillID);// 0x478b31c

--------------------------------
Class: SkillPreloadDataAsset.DataAsset.Object
	<FString,SkillPreloadInfo> SkillPreloadMap;//[Offset: 0x30, Size: 0x50]// 0x75a86d0000

--------------------------------
Class: SkillPreloadInfo
	class UTSkill[] PreloadSkillArray;//[Offset: 0x0, Size: 0x10]// 0x76121d7700
	bool bIsOnlyHighLevelDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76121d7680
	FString Remarks;//[Offset: 0x18, Size: 0x10]// 0x76121d7610

--------------------------------
Class: UTSkillEntryConfig
	enum entry;//[Offset: 0x0, Size: 0x1]// 0x7612221860
	int SkillIndex;//[Offset: 0x4, Size: 0x4]// 0x76122217f0
	FString Interrupts;//[Offset: 0x8, Size: 0x10]// 0x7612221780

--------------------------------
Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	FString EventString;//[Offset: 0x1b0, Size: 0x10]// 0x75a89b48a0

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte UAESkillEventType;//[Offset: 0x1b0, Size: 0x1]// 0x75a8969100

--------------------------------
Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0x1b8, Size: 0x8]// 0x75a8538280
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]// 0x75a8538300

--------------------------------
Class: SkillGSLisenterWarpper
	GSListenerBase* ListenerBase;//[Offset: 0x0, Size: 0x8]// 0x76122191b0

--------------------------------
Class: OccupationSkillConfig
	class UTSkill* SkillClass;//[Offset: 0x0, Size: 0x28]// 0x76121b6e00
	int SkillUIHandle;//[Offset: 0x28, Size: 0x4]// 0x76121b6d90
	byte SkillActiveLevel;//[Offset: 0x2c, Size: 0x1]// 0x76121b6d10
	int SkillGroupIndex;//[Offset: 0x30, Size: 0x4]// 0x76121b6ca0

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1]// 0x75b4d47880
	int CircleIndex;//[Offset: 0x668, Size: 0x4]// 0x75b4da8250
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x66c, Size: 0x1c]// 0x75b4d47900
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x688, Size: 0x1c]// 0x75b4d47980
	bool UseSwitchWeaterByIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 0x1]// 0x75b4d47a00
	BlendWeatherCfg[] BlendWeatherList;//[Offset: 0x6a8, Size: 0x10]// 0x75b4d47b00
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x6b8, Size: 0x28]// 0x75b4d47b80
	float TickOBPlayerCD;//[Offset: 0x6e0, Size: 0x4]// 0x75b4da82c0
	float TickWeatherFogCD;//[Offset: 0x6e4, Size: 0x4]// 0x75b4da8330
	float TickLocalWeatherIndexCD;//[Offset: 0x6e8, Size: 0x4]// 0x75b4da83a0
	bool UseWeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 0x1]// 0x75b4d47c00
	DynamicWeatherController* SrcController;//[Offset: 0x6f0, Size: 0x8]// 0x75b4d47c80
	DynamicWeatherController* DstController;//[Offset: 0x6f8, Size: 0x8]// 0x75b4d47d00
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x700, Size: 0x8]// 0x75b4d47d80
	STExtraPlayerController* LocalPlayerController;//[Offset: 0x708, Size: 0x8]// 0x75b4d47e00
	bool UseLocalWeatherChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 0x1]// 0x75b4d47e80
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x711, Size: 0x1]// 0x75b4d47f00
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x718, Size: 0xf8]// 0x75b4d47f80
	bool UseClientPreviewWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]// 0x75b4d48000
	float ClientPreviewWeatherBlendSpeed;//[Offset: 0x814, Size: 0x4]// 0x75b4da8410
	float ClientPreviewWeatherStartLerpValue;//[Offset: 0x818, Size: 0x4]// 0x75b4da8480
	DynamicWeatherController* ClientPreviewWeatherController;//[Offset: 0x820, Size: 0x8]// 0x75b4d48080
	int CurrentWeatherIndex;//[Offset: 0x838, Size: 0x4]// 0x75b4da84f0
	int LastWeatherIndex;//[Offset: 0x83c, Size: 0x4]// 0x75b4da8560
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x840, Size: 0x10]// 0x75b4d48180
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x850, Size: 0x10]// 0x75b4d48280
	void LocalGotoNextWeather();// 0x42c99ec
	void ClientPreviewWeather(int WeatherIndex, float LerpValue);// 0x42c9934
	void BlendWeatherByIndex(int Index);// 0x42c98b8
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x42c9834

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x510, Size: 0x50]// 0x7611f322a0
	int CurUseFixWeatherIndex;//[Offset: 0x560, Size: 0x4]// 0x7611f32230
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x564, Size: 0x1c]// 0x7611f31ce0
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x580, Size: 0x50]// 0x7611f31ab0
	WeatherControllerRepData ControllerRepData;//[Offset: 0x5d0, Size: 0x1c]// 0x7611f31a30
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x5ec, Size: 0x1c]// 0x7611f319b0
	float ServerElapsedTime;//[Offset: 0x608, Size: 0x4]// 0x7611f31940
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]// 0x7611f318c0
	enum NextWeatherStatus;//[Offset: 0x611, Size: 0x1]// 0x7611f317c0
	float NextWeatherCountDownTime;//[Offset: 0x614, Size: 0x4]// 0x7611f31750
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]// 0x7611f316d0
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x620, Size: 0x10]// 0x7611f31650
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]// 0x7611f315d0
	STExtraGameStateBase* GameState;//[Offset: 0x648, Size: 0x8]// 0x7611f31550
	enum UICountDownType;//[Offset: 0x662, Size: 0x1]// 0x7611f313f0
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x663, Size: 0x1]// 0x7611f31370
	void StartTransition();// 0x42ca85c
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x42ca7e0
	void RPCRequireControl();// 0x42ca7cc
	void RPCRequire();// 0x42ca7b8
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x42ca734
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x42ca718
	void ReinitInDemoReplay();// 0x42ca704
	void RefreshWeatherPredictionUI();// 0x42ca6f0
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x42ca660
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x42ca5d0
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x42ca540
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x42ca4b0
	void OnRep_NextWeatherCountDownTime();// 0x42ca49c
	void OnRep_ControllerDataForReplay();// 0x42ca488
	void OnRep_ControllerData();// 0x42ca474
	void OnRep_bEnableWeatherPredictionUI();// 0x42ca460
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0xffffff8a17adf2b0
	void HandleClientHasReactivated();// 0x42ca44c
	void GotoSpecificWeather(int WeatherIndex);// 0x42ca3d0
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x42ca2f0
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x42ca250
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x42ca1c4
	float GetInProgressElapsedTimeSecWithWeather();// 0x42ca190
	float GetGlobalWeatherSystemTimeOnServer();// 0x42ca15c
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x42ca124
	void ForceStopDynamicWeatherChangeOnServer();// 0x42ca110
	void ForceStartNextWeatherChangeOnServer();// 0x42ca0fc
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x42ca054

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 0x1]// 0x7611f2eef0
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611f2ee70
	float ElapsedTime;//[Offset: 0x4, Size: 0x4]// 0x7611f2ee00
	float BlendInTime;//[Offset: 0x8, Size: 0x4]// 0x7611f2ed90
	float BlendOutTime;//[Offset: 0xc, Size: 0x4]// 0x7611f2ed20
	float SaturateTime;//[Offset: 0x10, Size: 0x4]// 0x7611f2ecb0
	float TimeMultiplier;//[Offset: 0x14, Size: 0x4]// 0x7611f2ec40
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611f2ebc0
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x7611f2eb40
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]// 0x7611f2eac0
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]// 0x7611f2ea40

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 0x4]// 0x7611f32de0
	float StartTimeMax;//[Offset: 0x4, Size: 0x4]// 0x7611f32d70
	float BlendInTime;//[Offset: 0x8, Size: 0x4]// 0x7611f32d00
	float BlendOutTime;//[Offset: 0xc, Size: 0x4]// 0x7611f32c90
	float DurationTimeMin;//[Offset: 0x10, Size: 0x4]// 0x7611f32c20
	float DurationTimeMax;//[Offset: 0x14, Size: 0x4]// 0x7611f32bb0
	enum LastWeatherStatus;//[Offset: 0x18, Size: 0x1]// 0x7611f32ab0
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 0x4]// 0x7611f32a40
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7611f329c0
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x28, Size: 0x10]// 0x7611f326b0
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x38, Size: 0x10]// 0x7611f325b0
	float TimeMultiplier;//[Offset: 0x48, Size: 0x4]// 0x7611f32540
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]// 0x7611f324c0
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]// 0x7611f32440
	bool bUseRealDateTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]// 0x7611f323c0

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 0x1]// 0x7611f328c0
	float weight;//[Offset: 0x4, Size: 0x4]// 0x7611f32850

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 0x1]// 0x7611f2fd00
	float StartTime;//[Offset: 0x4, Size: 0x4]// 0x7611f2fc90
	float TotalDurationTime;//[Offset: 0x8, Size: 0x4]// 0x7611f2fc20

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611f321b0
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611f32130
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 0x4]// 0x7611f320c0
	float ElapsedTime;//[Offset: 0x8, Size: 0x4]// 0x7611f32050
	enum NextWeather;//[Offset: 0xc, Size: 0x1]// 0x7611f31f50
	float NextDuration;//[Offset: 0x10, Size: 0x4]// 0x7611f31ee0
	float WeatherTotalWeight;//[Offset: 0x14, Size: 0x4]// 0x7611f31e70
	float TimelineOffset;//[Offset: 0x18, Size: 0x4]// 0x7611f31e00

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0x118, Size: 0x10]// 0x75b4d51700
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0x128, Size: 0x10]// 0x75b4d51780
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0x138, Size: 0x10]// 0x75b4d51800
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0x148, Size: 0x10]// 0x75b4d51880
	delegate WeatherRecover;//[Offset: 0x158, Size: 0x10]// 0x75b4d51900
	delegate DelegateOnWeatherTickLerp;//[Offset: 0x168, Size: 0x10]// 0x75b4d51980
	enum DynamicWeatherType;//[Offset: 0x178, Size: 0x1]// 0x75b4d51a80
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x180, Size: 0x8]// 0x75b4d51b00
	CurveFloat* LightCurve;//[Offset: 0x188, Size: 0x8]// 0x75b4d51b80
	float TargetLightValue;//[Offset: 0x190, Size: 0x4]// 0x75b4dacee0
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]// 0x75b4d51c00
	LinearColor FinalAdditionalColor;//[Offset: 0x198, Size: 0x10]// 0x75b4d51c80
	bool bUseFinalAdditionalColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]// 0x75b4d51d00
	CurveFloat* FogBlendInCurve;//[Offset: 0x1b0, Size: 0x8]// 0x75b4d51d80
	CurveFloat* FogBlendOutCurve;//[Offset: 0x1b8, Size: 0x8]// 0x75b4d51e00
	bool ForbidTickLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]// 0x75b4d51e80
	bool ForbidTickLerpSkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]// 0x75b4d51f00
	bool ForbidTickLerpSkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 0x1]// 0x75b4d51f80
	bool ForbidLerpFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3, Size: 0x1]// 0x75b4d52000
	bool ForbidLerpFogStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 0x1]// 0x75b4d52080
	bool ForbidLerpMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 0x1]// 0x75b4d52100
	bool ForbidLerpSkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c6, Size: 0x1]// 0x75b4d52180
	bool UseLerpSkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c7, Size: 0x1]// 0x75b4d52200
	bool UseLerpSkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]// 0x75b4d52280
	bool UseLerpFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]// 0x75b4d52300
	bool UseMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1]// 0x75b4d52380
	bool UseSkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 0x1]// 0x75b4d52400
	bool UseSetFogActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]// 0x75b4d52480
	bool UseSetSkySwitchActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 0x1]// 0x75b4d52500
	bool UseSetSkySphereActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 0x1]// 0x75b4d52580
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x1d0, Size: 0x8]// 0x75b4d52600
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x1d8, Size: 0x8]// 0x75b4d52680
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x1e0, Size: 0x8]// 0x75b4d52700
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x1e8, Size: 0x8]// 0x75b4d52780
	float UINotifyTimeBeforeStart;//[Offset: 0x1f0, Size: 0x4]// 0x75b4dacf50
	FString UINotifyModuleName;//[Offset: 0x1f8, Size: 0x10]// 0x75b4dacfc0
	int UINotifyIDBeforeStart;//[Offset: 0x208, Size: 0x4]// 0x75b4dad030
	int ChangeStartUINotifyID;//[Offset: 0x20c, Size: 0x4]// 0x75b4dad0a0
	int ChangeQuitUINotifyID;//[Offset: 0x210, Size: 0x4]// 0x75b4dad110
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x214, Size: 0x4]// 0x75b4dad180
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x218, Size: 0x8]// 0x75b4d52800
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x220, Size: 0x8]// 0x75b4d52880
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x228, Size: 0x8]// 0x75b4d52900
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]// 0x75b4d52980
	WeatherControllerRepData LocalControlData;//[Offset: 0x234, Size: 0x1c]// 0x75b4d52a00
	float RuningDirection;//[Offset: 0x250, Size: 0x4]// 0x75b4dad1f0
	float RuningTime;//[Offset: 0x254, Size: 0x4]// 0x75b4dad260
	float LerpTotalTime;//[Offset: 0x258, Size: 0x4]// 0x75b4dad2d0
	FString WeatherName;//[Offset: 0x260, Size: 0x10]// 0x75b4dad340
	DirectionalLight* MainLight;//[Offset: 0x270, Size: 0x8]// 0x75b4d52a80
	SkyLight* SkyLight;//[Offset: 0x278, Size: 0x8]// 0x75b4d52b00
	ExponentialHeightFog* Fog;//[Offset: 0x280, Size: 0x8]// 0x75b4d52b80
	Actor* SkySphere;//[Offset: 0x288, Size: 0x8]// 0x75b4d52c00
	WeatherObject ObjectValues;//[Offset: 0x290, Size: 0x68]// 0x75b4d52c80
	WeatherObject WeatherObjectSrc;//[Offset: 0x2f8, Size: 0x68]// 0x75b4d52d00
	float SrcLightValue;//[Offset: 0x360, Size: 0x4]// 0x75b4dad3b0
	WeatherObject WeatherObjectLerp;//[Offset: 0x364, Size: 0x68]// 0x75b4d52d80
	LinearColor SrcFinalAdditionalColor;//[Offset: 0x3cc, Size: 0x10]// 0x75b4d52e00
	float SrcDefaultLightValue;//[Offset: 0x3dc, Size: 0x4]// 0x75b4dad420
	LinearColor SrcDefaultFinalAdditionalColor;//[Offset: 0x3e0, Size: 0x10]// 0x75b4d52e80
	float SrcCurrentLightValue;//[Offset: 0x3f0, Size: 0x4]// 0x75b4dad490
	LinearColor SrcCurrentFinalAdditionalColor;//[Offset: 0x3f4, Size: 0x10]// 0x75b4d52f00
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x404, Size: 0xc]// 0x75b4d52f80
	Vector FogActorDefaultLoc;//[Offset: 0x414, Size: 0xc]// 0x75b4d95000
	Vector FogActorRelativeLoc;//[Offset: 0x420, Size: 0xc]// 0x75b4d95080
	Vector MainLightActorDefaultLoc;//[Offset: 0x42c, Size: 0xc]// 0x75b4d95100
	Vector MainLightActorRelativeLoc;//[Offset: 0x438, Size: 0xc]// 0x75b4d95180
	Vector SkyLightActorDefaultLoc;//[Offset: 0x444, Size: 0xc]// 0x75b4d95200
	Vector SkyLightActorRelativeLoc;//[Offset: 0x450, Size: 0xc]// 0x75b4d95280
	Vector SkySphereActorDefaultLoc;//[Offset: 0x45c, Size: 0xc]// 0x75b4d95300
	Vector SkySphereActorRelativeLoc;//[Offset: 0x468, Size: 0xc]// 0x75b4d95380
	bool UseSetSkySphereMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]// 0x75b4d95400
	MaterialInterface* SkySphereDynamicMaterial;//[Offset: 0x488, Size: 0x8]// 0x75b4d95480
	MaterialInterface* SkySphereStaticMaterial;//[Offset: 0x490, Size: 0x8]// 0x75b4d95500
	void UINotifyCallbackOnServer();// 0x42c8d14
	void SetSkySwitchActorLocation();// 0x42c8cf8
	void SetSkySphereStaticMaterial();// 0x42c8ce4
	void SetSkySphereDynamicMaterial();// 0x42c8cd0
	void SetSkySphereActorLocation();// 0x42c8cb4
	void SetFogActorLocation();// 0x42c8c98
	void SetCurrentBlendValue();// 0x42c8c84
	void RestoreSkySwitchActorLocation();// 0x42c8c68
	void RestoreSkySphereActorLocation();// 0x42c8c4c
	void RestoreFogActorLocation();// 0x42c8c30
	void OnUserQualitySettingChanged(int renderlevel);// 0x42c8bac
	void HandleLerp(float LerpVal);// 0x42c8b28

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x510, Size: 0x8]// 0x75bca6c480
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x75bca6c500
	void OnRep_bEnabled();// 0x6df51bc

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2b8, Size: 0x4]// 0x75a78840b0
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2c0, Size: 0x10]// 0x75bca6b800
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]// 0x75bca6b880
	float CustomFogLow_Height;//[Offset: 0x2d4, Size: 0x4]// 0x75a7884120
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2d8, Size: 0x4]// 0x75a7884190
	LinearColor CustomFogLow_Color;//[Offset: 0x2dc, Size: 0x10]// 0x75bca6b900
	float CustomFogHigh_Height;//[Offset: 0x2ec, Size: 0x4]// 0x75a7884200
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x2f0, Size: 0x4]// 0x75a7884270
	LinearColor CustomFogHigh_Color;//[Offset: 0x2f4, Size: 0x10]// 0x75bca6b980
	LinearColor FogInscatteringColor;//[Offset: 0x304, Size: 0x10]// 0x75bca6ba00
	TextureCube* InscatteringColorCubemap;//[Offset: 0x318, Size: 0x8]// 0x75bca6ba80
	float InscatteringColorCubemapAngle;//[Offset: 0x320, Size: 0x4]// 0x75a78842e0
	LinearColor InscatteringTextureTint;//[Offset: 0x324, Size: 0x10]// 0x75bca6bb00
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x334, Size: 0x4]// 0x75a7884350
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x338, Size: 0x4]// 0x75a78843c0
	float DirectionalInscatteringExponent;//[Offset: 0x33c, Size: 0x4]// 0x75a7884430
	float DirectionalInscatteringStartDistance;//[Offset: 0x340, Size: 0x4]// 0x75a78844a0
	LinearColor DirectionalInscatteringColor;//[Offset: 0x344, Size: 0x10]// 0x75bca6bb80
	float FogHeightFalloff;//[Offset: 0x354, Size: 0x4]// 0x75a7884510
	float FogMaxOpacity;//[Offset: 0x358, Size: 0x4]// 0x75a7884580
	float StartDistance;//[Offset: 0x35c, Size: 0x4]// 0x75a78845f0
	float FogCutoffDistance;//[Offset: 0x360, Size: 0x4]// 0x75a7884660
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]// 0x75bca6bc00
	float VolumetricFogScatteringDistribution;//[Offset: 0x368, Size: 0x4]// 0x75a78846d0
	Color VolumetricFogAlbedo;//[Offset: 0x36c, Size: 0x4]// 0x75bca6bc80
	LinearColor VolumetricFogEmissive;//[Offset: 0x370, Size: 0x10]// 0x75bca6bd00
	float VolumetricFogExtinctionScale;//[Offset: 0x380, Size: 0x4]// 0x75a7884740
	float VolumetricFogDistance;//[Offset: 0x384, Size: 0x4]// 0x75a78847b0
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x388, Size: 0x4]// 0x75a7884820
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]// 0x75bca6bd80
	float VolumetricFogStartDistance;//[Offset: 0x390, Size: 0x4]// 0x75a7884890
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x398, Size: 0x8]// 0x75bca6be00
	Transform VolumetricFogNoiseTransform;//[Offset: 0x3a0, Size: 0x30]// 0x75bca6be80
	void SetVolumetricFogStartDistance(float NewValue);// 0x6df63a0
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x6df6324
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x6df6280
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x6df6204
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x6df6188
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x6df610c
	void SetVolumetricFogDistance(float NewValue);// 0x6df6090
	void SetVolumetricFogAlbedo(Color NewValue);// 0x6df6018
	void SetVolumetricFog(bool bNewValue);// 0x6df5f94
	void SetStartDistance(float Value);// 0x6df5f18
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x6df5e9c
	void SetInscatteringTextureTint(LinearColor Value);// 0x6df5e20
	void SetInscatteringColorCubemapAngle(float Value);// 0x6df5da4
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x6df5d28
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x6df5cac
	void SetFogMaxOpacity(float Value);// 0x6df5c30
	void SetFogInscatteringColor(LinearColor Value);// 0x6df5bb4
	void SetFogHeightFalloff(float Value);// 0x6df5b38
	void SetFogDensity(float Value);// 0x6df5abc
	void SetFogCutoffDistance(float Value);// 0x6df5a40
	void SetDirectionalInscatteringStartDistance(float Value);// 0x6df59c4
	void SetDirectionalInscatteringExponent(float Value);// 0x6df5948
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x6df58cc
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x6df5814
	void SetCustomFogHeight(float Value, int Index);// 0x6df575c
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x6df56a4

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 0x4]// 0x75d0a85400
	float DensityCoefficient;//[Offset: 0x4, Size: 0x4]// 0x75d0a85470
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 0x10]// 0x75d0a8b180

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 0x4]// 0x7612183e00
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 0x10]// 0x7612183d80
	float MainLight_Temperature;//[Offset: 0x14, Size: 0x4]// 0x7612183d10
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 0xc]// 0x7612183c90
	float SkyLight_Density;//[Offset: 0x24, Size: 0x4]// 0x7612183c20
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 0x10]// 0x7612183ba0
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 0x4]// 0x7612183b30
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 0x10]// 0x7612183ab0
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 0x4]// 0x7612183a40
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 0x10]// 0x76121839c0
	float HeightFallOff;//[Offset: 0x60, Size: 0x4]// 0x7612183950
	float StartDistance;//[Offset: 0x64, Size: 0x4]// 0x76121838e0

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 0x1]// 0x7611f2f430
	float CurrentElapsedTime;//[Offset: 0x4, Size: 0x4]// 0x7611f2f3c0
	float TotalTime;//[Offset: 0x8, Size: 0x4]// 0x7611f2f350

--------------------------------
Class: STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	Vector AirplaneStartLoc;//[Offset: 0x6f4, Size: 0xc]// 0x7611f64620
	Vector AirplaneStopLoc;//[Offset: 0x700, Size: 0xc]// 0x7611f645a0
	AirDropPathData3D AirDropPathData;//[Offset: 0x710, Size: 0x48]// 0x7611f64520
	Vector AirplaneCanJumpLoc;//[Offset: 0x758, Size: 0xc]// 0x7611f644a0
	Vector AirplaneForceJumpLoc;//[Offset: 0x764, Size: 0xc]// 0x7611f64420
	Vector AirplaneCanJumpLocForCamp;//[Offset: 0x770, Size: 0xc]// 0x7611f643a0
	Vector AirplaneForceJumpLocForCamp;//[Offset: 0x77c, Size: 0xc]// 0x7611f64320
	delegate PlayerEnterPlane;//[Offset: 0x788, Size: 0x10]// 0x7611f642a0
	delegate PlayerLeavePlane;//[Offset: 0x798, Size: 0x10]// 0x7611f64220
	bool UGCIgnoreFallingCameraShakeAnyWay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]// 0x7611f641a0
	class NewbieGuideItemObject[] NewbieGuideItems;//[Offset: 0x7b0, Size: 0x10]// 0x7611f640a0
	int CurrentBuildCount;//[Offset: 0x7c0, Size: 0x4]// 0x7611f64030
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x7c8, Size: 0x8]// 0x7611f63fb0
	FString ChangeCountDownTextID;//[Offset: 0x7d0, Size: 0x10]// 0x7611f63f40
	class OBModePositionWidget* UsingHeadItems;//[Offset: 0x7e0, Size: 0x28]// 0x7611f63ec0
	AssetPreLoadingComponent* AssetPreLoadingComponent;//[Offset: 0x808, Size: 0x8]// 0x7611f63e40
	float UniformResolutionSizeX;//[Offset: 0x818, Size: 0x4]// 0x7611f63dd0
	bool TestSkipMaxKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 0x1]// 0x7611f63d50
	int BaseShowMaxKillerNum;//[Offset: 0x820, Size: 0x4]// 0x7611f63ce0
	GameStateConfigParam GameStateConfigParam;//[Offset: 0x828, Size: 0x30]// 0x7611f63840
	bool bPreloadBulletHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]// 0x7611f637c0
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 0x1]// 0x7611f63740
	CircleInfo CurCircleInfo;//[Offset: 0x85c, Size: 0x34]// 0x7611f63250
	int CircleInvertIndex;//[Offset: 0x89c, Size: 0x4]// 0x7611f631e0
	delegate OnCircleInvertIndexChange;//[Offset: 0x8a0, Size: 0x10]// 0x7611f63160
	bool bUseOptimizedGISTicks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]// 0x7611f630e0
	TickControlComponent* GISTickManager;//[Offset: 0x8b8, Size: 0x8]// 0x7611f63060
	GISActorManager* pGISManager;//[Offset: 0x8c0, Size: 0x8]// 0x7611f62fe0
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1]// 0x7611f62f60
	float ScreenSizeFactor;//[Offset: 0x8cc, Size: 0x4]// 0x7611f62ef0
	float ExtraRadius;//[Offset: 0x8d0, Size: 0x4]// 0x7611f62e80
	uint32 MaxKillerPlayerKey;//[Offset: 0x8d4, Size: 0x4]// 0x7611f62e10
	bool bExistedMaxKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 0x1]// 0x7611f62d90
	AirAttackOrder AirAttackOrder;//[Offset: 0x8e0, Size: 0x40]// 0x7611f62d10
	Vector AirAttackArea;//[Offset: 0x920, Size: 0xc]// 0x7611f62c90
	<int,CallBlackAirAttackOrder> CallBlackAirAttackInfoMap;//[Offset: 0x930, Size: 0x50]// 0x7611f62af0
	delegate OnSafeZoneTips;//[Offset: 0x980, Size: 0x10]// 0x7611f62a70
	delegate OnBlueCirclePreWarning;//[Offset: 0x990, Size: 0x10]// 0x7611f629f0
	delegate OnBlueCircleRun;//[Offset: 0x9a0, Size: 0x10]// 0x7611f62970
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x9b0, Size: 0x10]// 0x7611f628f0
	delegate OnCharacterCircleWaveOver;//[Offset: 0x9c0, Size: 0x10]// 0x7611f62870
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x9d0, Size: 0x10]// 0x7611f627f0
	delegate VehicleDestroyedDelegate;//[Offset: 0x9e0, Size: 0x10]// 0x7611f62770
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x9f0, Size: 0x10]// 0x7611f626f0
	delegate STExtraCharacterDestroyed;//[Offset: 0xa00, Size: 0x10]// 0x7611f62670
	delegate OnGameStateEndPlay;//[Offset: 0xa10, Size: 0x10]// 0x7611f625f0
	delegate OnRepGameClass;//[Offset: 0xa20, Size: 0x10]// 0x7611f62570
	delegate OnOverrideClickBackToLobby;//[Offset: 0xa30, Size: 0x10]// 0x7611f624f0
	delegate OnGameStateBaseStateChange;//[Offset: 0xa40, Size: 0x10]// 0x7611f62470
	int PlayerNum;//[Offset: 0xa60, Size: 0x4]// 0x7611f62400
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa64, Size: 0x1]// 0x7611f62380
	delegate OnPlayerNumChange;//[Offset: 0xa68, Size: 0x10]// 0x7611f62300
	delegate OnBeKilledNumChange;//[Offset: 0xa78, Size: 0x10]// 0x7611f62280
	delegate OnGameEnd;//[Offset: 0xa88, Size: 0x10]// 0x7611f62200
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa98, Size: 0x1]// 0x7611f62180
	bool bNeedInitKillInfoPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa99, Size: 0x1]// 0x7611f62100
	int GameType;//[Offset: 0xa9c, Size: 0x4]// 0x7611f62090
	int SubGameType;//[Offset: 0xaa0, Size: 0x4]// 0x7611f62020
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 0x1]// 0x7611f61fa0
	CakeInfo CakeInfo;//[Offset: 0xaa8, Size: 0x20]// 0x7611f61f20
	GameSwitchControll[] GameSwitchList;//[Offset: 0xac8, Size: 0x10]// 0x7611f61ca0
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]// 0x7611f61c20
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 0x1]// 0x7611f61ba0
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xada, Size: 0x1]// 0x7611f61b20
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadb, Size: 0x1]// 0x7611f61aa0
	bool bForbidAirAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 0x1]// 0x7611f61a20
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadd, Size: 0x1]// 0x7611f619a0
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xade, Size: 0x1]// 0x7611f61920
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadf, Size: 0x1]// 0x7611f618a0
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]// 0x7611f61820
	bool bLimitedCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 0x1]// 0x7611f617a0
	bool BattleVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae2, Size: 0x1]// 0x7611f61720
	int[] forbitPickItemTypeList;//[Offset: 0xae8, Size: 0x10]// 0x7611f61630
	bool bEnableCarringFunction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 0x1]// 0x7611f615b0
	int[] limitedClothItemTypeList;//[Offset: 0xb00, Size: 0x10]// 0x7611f614c0
	int appleGrenadeID;//[Offset: 0xb10, Size: 0x4]// 0x7611f61450
	int appleGrenadeCount;//[Offset: 0xb14, Size: 0x4]// 0x7611f613e0
	int TrainingCountdownTimer;//[Offset: 0xb18, Size: 0x4]// 0x7611f61370
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1c, Size: 0x1]// 0x7611f612f0
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1d, Size: 0x1]// 0x7611f61270
	bool bIsHasInfiniteBulletsMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1e, Size: 0x1]// 0x7611f611f0
	bool bWeaponIgnoreTeammatesCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1f, Size: 0x1]// 0x7611f61170
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]// 0x7611f610f0
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb21, Size: 0x1]// 0x7611f61070
	float TrainingModePickUpColdCD;//[Offset: 0xb24, Size: 0x4]// 0x7611f61000
	float TrainingModeDropLifeTime;//[Offset: 0xb28, Size: 0x4]// 0x7611f60f90
	bool bDisableShowTombBoxPickData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 0x1]// 0x7611f60f10
	int TombBoxTlogID;//[Offset: 0xb30, Size: 0x4]// 0x7611f60ea0
	bool bDisablePawnBulletImpactFxByNoDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 0x1]// 0x7611f60e20
	class WeaponSlotManager* WeaponSlotManagerTemplateHardRef;//[Offset: 0xb38, Size: 0x8]// 0x7611f60da0
	class WeaponSlotManager* WeaponSlotManagerTemplate;//[Offset: 0xb40, Size: 0x28]// 0x7611f60d20
	WeaponSlotManager* WeaponSlotManagerInstance;//[Offset: 0xb68, Size: 0x8]// 0x7611f60ca0
	delegate OnAirAttack;//[Offset: 0xb70, Size: 0x10]// 0x7611f60c20
	delegate OnBlackAirAttack;//[Offset: 0xb80, Size: 0x10]// 0x7611f60ba0
	delegate OnBlackAirAttackUIMapScaleChanged;//[Offset: 0xb90, Size: 0x10]// 0x7611f60b20
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]// 0x7611f60aa0
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba1, Size: 0x1]// 0x7611f60a20
	bool IsCanBecomeZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba2, Size: 0x1]// 0x7611f609a0
	<Vector,int> BossLocationToID;//[Offset: 0xba8, Size: 0x50]// 0x7611f60800
	<int,int> ZombieAirDropIconID;//[Offset: 0xbf8, Size: 0x50]// 0x7611f60670
	bool bEnableMapTeammateMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 0x1]// 0x7611f605f0
	<int,Actor*> ZombieAirDropWarningActors;//[Offset: 0xc50, Size: 0x50]// 0x7611f60450
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 0x1]// 0x7611f603d0
	FString EnableSignalSystemConfigKey;//[Offset: 0xca8, Size: 0x10]// 0x7611f60360
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 0x1]// 0x7611f602e0
	bool IsShowDeadBoxGreenLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb9, Size: 0x1]// 0x7611f60260
	bool IsShowDeadBoxGreenSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcba, Size: 0x1]// 0x7611f601e0
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbb, Size: 0x1]// 0x7611f60160
	bool IsCacheParachuteAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 0x1]// 0x7611f600e0
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0xcc0, Size: 0x30]// 0x7611f5fc80
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0xcf0, Size: 0x8]// 0x7611f5fc00
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 0x1]// 0x7611f5fb80
	int ReadyStateTime;//[Offset: 0xd08, Size: 0x4]// 0x7611f5fb10
	int LeftEscapeTime;//[Offset: 0xd0c, Size: 0x4]// 0x7611f5faa0
	int TotalEscapeTime;//[Offset: 0xd10, Size: 0x4]// 0x7611f5fa30
	delegate ReConnectGameStateInfoNotify;//[Offset: 0xd18, Size: 0x10]// 0x7611f5f9b0
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0xd28, Size: 0x4]// 0x7611f5f940
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0xd2c, Size: 0x4]// 0x7611f5f8d0
	delegate OnRepServerTimeSeconds;//[Offset: 0xd30, Size: 0x10]// 0x7611f5f850
	delegate OnTimeSecondsFixed;//[Offset: 0xd40, Size: 0x10]// 0x7611f5f7d0
	FString GameModeDisplayName;//[Offset: 0xd58, Size: 0x10]// 0x7611f5f760
	GameModeNameDecorator[] GameModeNameDecorator;//[Offset: 0xd68, Size: 0x10]// 0x7611f5f400
	float EnterReadyRealTime;//[Offset: 0xd78, Size: 0x4]// 0x7611f5f390
	float EnterFightingRealTime;//[Offset: 0xd7c, Size: 0x4]// 0x7611f5f320
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0xd80, Size: 0x8]// 0x7611f5f2a0
	FName GameModeState;//[Offset: 0xd88, Size: 0x8]// 0x7611f5f230
	byte CurAirAttackType;//[Offset: 0xd98, Size: 0x1]// 0x7611f5f1b0
	int CurAirAttackWave;//[Offset: 0xd9c, Size: 0x4]// 0x7611f5f140
	enum CurAirAttackMode;//[Offset: 0xda0, Size: 0x1]// 0x7611f5f040
	int AlivePlayerNum;//[Offset: 0xda4, Size: 0x4]// 0x7611f5efd0
	int AliveRealPlayerNum;//[Offset: 0xda8, Size: 0x4]// 0x7611f5ef60
	int AliveTeamNum;//[Offset: 0xdac, Size: 0x4]// 0x7611f5eef0
	int PlayerNumOnPlane;//[Offset: 0xdb0, Size: 0x4]// 0x7611f5ee80
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0xdb8, Size: 0x10]// 0x7611f5ee00
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0xdc8, Size: 0x10]// 0x7611f5ed80
	enum GameModeType;//[Offset: 0xdd8, Size: 0x1]// 0x7611f5ec20
	int SeasonIdx;//[Offset: 0xddc, Size: 0x4]// 0x7611f5ebb0
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0xde0, Size: 0xc]// 0x7611f5e940
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdec, Size: 0x1]// 0x7611f5e8c0
	bool bIsAllowCloseShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xded, Size: 0x1]// 0x7611f5e840
	bool bIgnoreCharactersBlockingOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdee, Size: 0x1]// 0x7611f5e7c0
	float MinPenetrationDepth;//[Offset: 0xdf0, Size: 0x4]// 0x7611f5e750
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf4, Size: 0x1]// 0x7611f5e6d0
	bool bShowVehicleSetting_Helicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf5, Size: 0x1]// 0x7611f5e650
	bool bShowVehicleSetting_UAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf6, Size: 0x1]// 0x7611f5e5d0
	bool bCompareAliveRealPlayerNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf7, Size: 0x1]// 0x7611f5e550
	bool bCompareAlivePlayerNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 0x1]// 0x7611f5e4d0
	int PlayerNumPerTeam;//[Offset: 0xdfc, Size: 0x4]// 0x7611f5e460
	FString[] OpenTagCullingMaps;//[Offset: 0xe00, Size: 0x10]// 0x7611f5e370
	int[] ExcellentOperationClientModeIDArray;//[Offset: 0xe10, Size: 0x10]// 0x7611f5e280
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 0x1]// 0x7611f5e200
	<FString,float> BeInvitedPlayers;//[Offset: 0xe68, Size: 0x50]// 0x7611f5e070
	float InviteCountDownTime;//[Offset: 0xeb8, Size: 0x4]// 0x7611f5e000
	CircleDataMining[] CircleDataMining;//[Offset: 0xec0, Size: 0x10]// 0x7611f5df00
	GameDataMining GameDataMining;//[Offset: 0xed0, Size: 0x58]// 0x7611f5d380
	FString GameModeID;//[Offset: 0xf28, Size: 0x10]// 0x7611f5d310
	int MapId;//[Offset: 0xf38, Size: 0x4]// 0x7611f5d2a0
	delegate OnGameModeIDReceive;//[Offset: 0xf40, Size: 0x10]// 0x7611f5d220
	int SubModeGroup;//[Offset: 0xf50, Size: 0x4]// 0x7611f5d1b0
	FString EscapeHelicopterClassTag;//[Offset: 0xf60, Size: 0x10]// 0x7611f5d140
	int[] FinalWinTeams;//[Offset: 0xf70, Size: 0x10]// 0x7611f5d050
	uint32 GameTerminatorPlayerKey;//[Offset: 0xf80, Size: 0x4]// 0x7611f5cfe0
	LevelEventCenter* LevelEventCenter;//[Offset: 0xf88, Size: 0x8]// 0x7611f5cf60
	ImmediateUIManager* ImmediateUIManager;//[Offset: 0xf90, Size: 0x8]// 0x7611f5cee0
	UAEBlackboard* BlackBoard;//[Offset: 0xf98, Size: 0x8]// 0x7611f5ce60
	bool IsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 0x1]// 0x7611f5cde0
	Actor* StartedPlane;//[Offset: 0xfa8, Size: 0x8]// 0x7611f5cd60
	delegate GameStateSetPlane;//[Offset: 0xfb0, Size: 0x10]// 0x7611f5cce0
	Character* CurCastActorMsgOwner;//[Offset: 0xfd0, Size: 0x8]// 0x7611f5cc60
	float StartFlyTime;//[Offset: 0xfd8, Size: 0x4]// 0x7611f5cbf0
	int EnableNewStateMachine;//[Offset: 0xff0, Size: 0x4]// 0x7611f5cb80
	float PlayerInBlueCircleClipTime;//[Offset: 0xff8, Size: 0x4]// 0x7611f5cb10
	int EscapedPlayerNum;//[Offset: 0xffc, Size: 0x4]// 0x7611f5caa0
	FString ModeRelatedBusinessProxyObjectPath;//[Offset: 0x1020, Size: 0x10]// 0x7611f5ca30
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1030, Size: 0x1]// 0x7611f5c9b0
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1031, Size: 0x1]// 0x7611f5c930
	int[] ImprisonmentTeammateKillType;//[Offset: 0x1038, Size: 0x10]// 0x7611f5c840
	int[] ImprisonmentTeammateGameType;//[Offset: 0x1048, Size: 0x10]// 0x7611f5c750
	int[] OpenUseNewDuplicateCompGameType;//[Offset: 0x1058, Size: 0x10]// 0x7611f5c660
	RTPCParamInfo[] CustomShootSoundRTPCParamList;//[Offset: 0x1068, Size: 0x10]// 0x7611f5c560
	RTPCParamInfo[] CustomFootstepSoundRTPCParamList;//[Offset: 0x1078, Size: 0x10]// 0x7611f5c270
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 0x1]// 0x7611f5c1f0
	int HitEffectValue;//[Offset: 0x108c, Size: 0x4]// 0x7611f5c180
	float HitEffectDelayTime;//[Offset: 0x1090, Size: 0x4]// 0x7611f5c110
	Vector HitEffectColor;//[Offset: 0x1094, Size: 0xc]// 0x7611f5c090
	float HitEffectTransparency;//[Offset: 0x10a0, Size: 0x4]// 0x7611f5c020
	int HitFontValue;//[Offset: 0x10a4, Size: 0x4]// 0x7611f5bfb0
	int HitFontSize_Head;//[Offset: 0x10a8, Size: 0x4]// 0x7611f5bf40
	int HitFontOutlineSize_Head;//[Offset: 0x10ac, Size: 0x4]// 0x7611f5bed0
	Vector HitFontColor_Head;//[Offset: 0x10b0, Size: 0xc]// 0x7611f5be50
	Vector HitFontOutlineColor_Head;//[Offset: 0x10bc, Size: 0xc]// 0x7611f5bdd0
	int HitFontSize_Body;//[Offset: 0x10c8, Size: 0x4]// 0x7611f5bd60
	int HitFontOutlineSize_Body;//[Offset: 0x10cc, Size: 0x4]// 0x7611f5bcf0
	Vector HitFontColor_Body;//[Offset: 0x10d0, Size: 0xc]// 0x7611f5bc70
	Vector HitFontOutlineColor_Body;//[Offset: 0x10dc, Size: 0xc]// 0x7611f5bbf0
	int HitFleshValue;//[Offset: 0x10e8, Size: 0x4]// 0x7611f5bb80
	bool bIsShowHitValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ec, Size: 0x1]// 0x7611f5bb00
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ed, Size: 0x1]// 0x7611f5ba80
	STExtraPlayerController* LocalPC;//[Offset: 0x10f0, Size: 0x8]// 0x7611f5ba00
	int WrapperLightBeamEnabled;//[Offset: 0x10f8, Size: 0x4]// 0x7611f5b990
	FString LightBeamTableName;//[Offset: 0x1100, Size: 0x10]// 0x7611f5b920
	FString LightBeamCfgName;//[Offset: 0x1110, Size: 0x10]// 0x7611f5b8b0
	FString ModeUICfgName;//[Offset: 0x1120, Size: 0x10]// 0x7611f5b840
	int EnableDebugLightBeam;//[Offset: 0x1130, Size: 0x4]// 0x7611f5b7d0
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x1138, Size: 0x10]// 0x7611f5b6d0
	MarkSyncData[] PopKartMarkDispatchData;//[Offset: 0x1148, Size: 0x10]// 0x7611f5b5d0
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x1158, Size: 0x10]// 0x7611f5b4d0
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1168, Size: 0x10]// 0x7611f5b3d0
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0x1178, Size: 0x10]// 0x7611f5b2d0
	int EachTypeReportLimit;//[Offset: 0x1188, Size: 0x4]// 0x7611f5b260
	int[] TypeReportWhiteList;//[Offset: 0x1190, Size: 0x10]// 0x7611f5b170
	<int,int> CheckTypeMapAmountLimit;//[Offset: 0x11a0, Size: 0x50]// 0x7611f5afe0
	<int,int> CacheMarkInstanceIDMap;//[Offset: 0x11f0, Size: 0x50]// 0x7611f5ae50
	int[] HasReportedTypeIDList;//[Offset: 0x1240, Size: 0x10]// 0x7611f5ad60
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0x1250, Size: 0x8]// 0x7611f5ace0
	WeatherTemplateManager* WeatherTemplateManager;//[Offset: 0x1258, Size: 0x8]// 0x7611f5ac60
	delegate WeatherTemplateBeginPlayDelegate;//[Offset: 0x1260, Size: 0x10]// 0x7611f5abe0
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0x1270, Size: 0x8]// 0x7611f5ab60
	SceneRenderActorManager* SceneRenderActorManager;//[Offset: 0x1278, Size: 0x8]// 0x7611f5aae0
	int CountDownTimeThreshold;//[Offset: 0x1280, Size: 0x4]// 0x7611f5aa70
	int RefreshCharmPlayerTimeThreshold;//[Offset: 0x1284, Size: 0x4]// 0x7611f5aa00
	int StopRefreshCharmPlayerTimeThreshold;//[Offset: 0x1288, Size: 0x4]// 0x7611f5a990
	int RefreshCharmPlayerTimeTolerance;//[Offset: 0x128c, Size: 0x4]// 0x7611f5a920
	int ShowCharmPlayerCount;//[Offset: 0x1290, Size: 0x4]// 0x7611f5a8b0
	int TopCharmPlayerNumber;//[Offset: 0x1294, Size: 0x4]// 0x7611f5a840
	int TotalCharmPlayerNumber;//[Offset: 0x1298, Size: 0x4]// 0x7611f5a7d0
	bool bStartRefreshCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a0, Size: 0x1]// 0x7611f5a750
	bool bEnableRefreshCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a1, Size: 0x1]// 0x7611f5a6d0
	int LuckyCharmPlayerNumber;//[Offset: 0x12a4, Size: 0x4]// 0x7611f5a660
	float LuckyCharmPlayerProbability;//[Offset: 0x12a8, Size: 0x4]// 0x7611f5a5f0
	bool bEnableHotStageShowWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ac, Size: 0x1]// 0x7611f5a570
	int MaxWingManPlayerNumber;//[Offset: 0x12b0, Size: 0x4]// 0x7611f5a500
	bool HasInspector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b4, Size: 0x1]// 0x7611f5a480
	PlayerDetailInfo[] WingManPlayerDetailList;//[Offset: 0x12b8, Size: 0x10]// 0x7611f5a380
	PlayerDetailInfo[] LuckyCharmPlayerDetailList;//[Offset: 0x12c8, Size: 0x10]// 0x7611f5a280
	PlayerDetailInfo[] TopCharmPlayerDetailList;//[Offset: 0x12d8, Size: 0x10]// 0x7611f5a180
	<uint32,bool> AllowViewCharmInfoMap;//[Offset: 0x12e8, Size: 0x50]// 0x7611f59fe0
	<uint32,byte> AlreadyInRankPlayers;//[Offset: 0x1338, Size: 0x50]// 0x7611f59e40
	int LastReadyStateTime;//[Offset: 0x1388, Size: 0x4]// 0x7611f59dd0
	GameModePlayerParams[] BornLandVehicleList;//[Offset: 0x1390, Size: 0x10]// 0x7611f59cd0
	DynamicVibrateSystemManager* DynamicVibrateSystemManager;//[Offset: 0x13a0, Size: 0x8]// 0x7611f59c50
	int DamageMagnifierPlan;//[Offset: 0x13a8, Size: 0x4]// 0x7611f59be0
	bool UseTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ad, Size: 0x1]// 0x7611f59b60
	bool UseFireTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ae, Size: 0x1]// 0x7611f59ae0
	bool UseHeartbeatOBTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13af, Size: 0x1]// 0x7611f59a60
	bool UseHeartbeatTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b0, Size: 0x1]// 0x7611f599e0
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0x13b8, Size: 0x8]// 0x7611f59960
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0x13c0, Size: 0x8]// 0x7611f598e0
	delegate OnGameModeStateTimeChanged;//[Offset: 0x13c8, Size: 0x10]// 0x7611f59860
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 0x1]// 0x7611f597e0
	bool bShowWingman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d9, Size: 0x1]// 0x7611f59760
	class FrameCaptureActor* FrameCaptureClass;//[Offset: 0x13e0, Size: 0x8]// 0x7611f596e0
	bool bSecurityScreenShotEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e8, Size: 0x1]// 0x7611f59660
	bool bImpoliteVoiceReportEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e9, Size: 0x1]// 0x7611f595e0
	FrameCaptureActor* FrameCapturePtr;//[Offset: 0x13f0, Size: 0x8]// 0x7611f59560
	ObjectPosReplayNetGUIDMap[] SyncObjectPosReplayNetGUIDList;//[Offset: 0x1400, Size: 0x10]// 0x7611f59270
	ObjectPosUIData[] SyncObjectPosUIData;//[Offset: 0x1410, Size: 0x10]// 0x7611f59170
	WeaponModuleManager* WeaponModuleSystemRef;//[Offset: 0x1430, Size: 0x8]// 0x7611f590f0
	class WeaponSlotManager* WeaponModuleManagerTemplate;//[Offset: 0x1438, Size: 0x8]// 0x7611f59070
	bool bFixLevelExtraTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1450, Size: 0x1]// 0x7611f58ff0
	float ServerFixLevelCheckDiff;//[Offset: 0x1454, Size: 0x4]// 0x7611f58f80
	bool NeedCreatePlayerIconToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1458, Size: 0x1]// 0x7611f58f00
	bool bPlayOnBoardSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1459, Size: 0x1]// 0x7611f58e80
	int YearBeastCount;//[Offset: 0x145c, Size: 0x4]// 0x7611f58e10
	bool bEnableSpawnYearBeast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1460, Size: 0x1]// 0x7611f58d90
	Vector[] YearBeastCirclePoint;//[Offset: 0x1468, Size: 0x10]// 0x7611f58c90
	float YearBeastCircleRadius;//[Offset: 0x1478, Size: 0x4]// 0x7611f58c20
	int[] HasYearBeastTeamID;//[Offset: 0x1480, Size: 0x10]// 0x7611f58b30
	bool bNeedUpdateParachuteFollowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1490, Size: 0x1]// 0x7611f58ab0
	bool bNeedCheckDupKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1491, Size: 0x1]// 0x7611f58a30
	int TlogDupKillMax;//[Offset: 0x1494, Size: 0x4]// 0x7611f589c0
	float fDSFixedDateTime;//[Offset: 0x1498, Size: 0x4]// 0x7611f58950
	bool bIgnoreCheckTeamPlayerStateReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149c, Size: 0x1]// 0x7611f588d0
	bool bUseSpecificAvatarHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149d, Size: 0x1]// 0x7611f58850
	<enum,int> GSAvatarDefineID;//[Offset: 0x14a0, Size: 0x50]// 0x7611f58630
	class BattleItemHandleBase[] GSAvatarHandles;//[Offset: 0x14f0, Size: 0x10]// 0x7611f58530
	<uint32,EmotePlayer> LocalEmotePlayerList;//[Offset: 0x1500, Size: 0x50]// 0x7611f580a0
	FString DamageTypeTablePath;//[Offset: 0x1550, Size: 0x10]// 0x7611f58030
	UAEDataTable* DamageTypeConfigTable;//[Offset: 0x1560, Size: 0x8]// 0x7611f57fb0
	bool bEnableRevivalToExPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1568, Size: 0x1]// 0x7611f57f30
	RouteSegment[] RouteSegmentList;//[Offset: 0x1570, Size: 0x10]// 0x7611f57e30
	byte TimeBeforeRouteSelect;//[Offset: 0x1580, Size: 0x1]// 0x7611f57db0
	int RouteSelectStartCountDown;//[Offset: 0x1584, Size: 0x4]// 0x7611f57d40
	int CountDownTipID;//[Offset: 0x1588, Size: 0x4]// 0x7611f57cd0
	int ReadyStateTimeWithoutCountdown;//[Offset: 0x158c, Size: 0x4]// 0x7611f57c60
	delegate OnReadyStateTimeWithoutCountdownChanged;//[Offset: 0x1590, Size: 0x10]// 0x7611f57be0
	PlayerClubTeamInfo[] ClubTeamList;//[Offset: 0x15a0, Size: 0x10]// 0x7611f57ae0
	int SegmentChooseTime;//[Offset: 0x15b0, Size: 0x4]// 0x7611f57a70
	TeamSegmentInfo[] TeamSegmentsInfo;//[Offset: 0x15b8, Size: 0x10]// 0x7611f577f0
	int CurrentTeamIdx;//[Offset: 0x15c8, Size: 0x4]// 0x7611f57780
	int DiscussDuration;//[Offset: 0x15d0, Size: 0x4]// 0x7611f57710
	byte[] SelectionPhaseTime;//[Offset: 0x15d8, Size: 0x10]// 0x7611f57610
	<int,byte> SegmentSelectSituation;//[Offset: 0x15e8, Size: 0x50]// 0x7611f57470
	bool CreationConfig_ShowEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1638, Size: 0x1]// 0x7611f573f0
	class UTSkill[] UGCSkillPaths;//[Offset: 0x1640, Size: 0x10]// 0x7611f572f0
	int UGCSkillUIDBase;//[Offset: 0x1650, Size: 0x4]// 0x7611f57280
	NetAlienationDataComponent* NetAlienationData;//[Offset: 0x1658, Size: 0x8]// 0x7611f57200
	<int64,PlayerDeadShootKillerCacheInfo> PlayerDeadShootKillerCacheInfoMap;//[Offset: 0x1660, Size: 0x50]// 0x7611f56c20
	ChampionStateChecker* ChampionChecker;//[Offset: 0x16b0, Size: 0x8]// 0x7611f56ba0
	byte[] CharacterShootTargetObjectTypes;//[Offset: 0x16b8, Size: 0x10]// 0x7611f56aa0
	int64[] RevivingPlayerList;//[Offset: 0x16c8, Size: 0x10]// 0x7611f569b0
	class AvatarDynamicCacheStrategy* AvatarDynamicCacheStrategy_PlayerClass;//[Offset: 0x16f0, Size: 0x8]// 0x7611f56930
	AvatarDynamicCacheStrategy* AvatarDynamicCacheStrategy_Player;//[Offset: 0x16f8, Size: 0x8]// 0x7611f568b0
	RemoteDecorator RemoteDecorator;//[Offset: 0x1700, Size: 0x50]// 0x7611f56830
	void WaitAllPlayerLogin(int StateReadyTime);// 0x4619bbc
	void UpdateSegmentSituation(int ID);// 0x4619b40
	void UpdateBornLandVehicles();// 0x4619b24
	void TryFillObjectPool();// 0x4619b10
	void TriggerSpawnYearBeast(uint32 PlayerKey, bool bIsAI);// 0x4619a50
	void SyncAirplaneRouteForCamp(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x46198f0
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x4619790
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x46196e0
	int SwitchBossLocationToID(Vector loation);// 0x4619650
	void SimulateAirAttackOver();// 0x46195f0
	bool ShouldCheckAvatarMeshVisibility();// 0x46195b0
	void SetupOptimizedGISTick();// 0x4619594
	void SetTagCulling(bool IsUse);// 0x4619510
	void SetReConnectGameStateInfo(out const ReConnectGameStateInfo ReConnectInfo);// 0x4619464
	void SetReadyStateTimeWithoutCountdown(int ReadyTime);// 0x46193e8
	void SetPlayerNum(int InPlayerNum);// 0x4619370
	void SetIsFireworksActOpen(bool Val);// 0x46192ec
	void SetHZB(int Enable);// 0x4619270
	void SetGameModeState(FName NewState);// 0x46191f4
	void SetCurAirAttackWave(int AirAttackWave);// 0x4619178
	void SetCurAirAttackType(byte airattacktype);// 0x46190fc
	void SetCurAirAttackMode(enum AirAttackMode);// 0x4619080
	void SetCircleInvertIndex(int Index);// 0x4619004
	void SetCharmSystemParameters(int CountDownTime, int RefreshCharmPlayerTime, int StopRefreshCharmPlayerTime);// 0x4618f14
	void SetAllowViewCharmInfoByPlayerKey(uint32 PlayerKey, bool AllowView);// 0x4618e54
	void SetAliveRealPlayerNum(int InAliveRealPlayerNum);// 0x4618dd8
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x4618d5c
	void SetAirplaneStopLoc(Vector StopLoc);// 0x4618cd8
	void SetAirplaneStartLoc(Vector StarLoc);// 0x4618c54
	void SetAirplaneForceJumpLocForCamp(Vector ForceJumpLoc);// 0x4618bd0
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x4618b4c
	void SetAirplaneCanJumpLocForCamp(Vector CanJumpLoc);// 0x4618ac8
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x4618a44
	void RPC_ExcellentOPForReplay(FString ReceivedPlayerUID, byte inExOpResultType);// 0x4618978
	void RPC_Client_PrintLogFromServer(FString Cmd);// 0x46188ec
	void RemoveCharacterMoveInputStateEx();// 0x46188d8
	int RandomChooseSegment();// 0x46188a4
	void PlayerPlaneDelegate__DelegateSignature(STExtraPlayerController* PlayerController);// 0xffffff8a17adf2b0
	void OnSceneRenderActorManagerChanged();// 0x4618890
	void OnRep_WingManCharmPlayerDetailList();// 0x461887c
	void OnRep_VisualFieldFeatureParam();// 0x4618868
	void OnRep_UseTssSdkAntiData();// 0x4618854
	void OnRep_UseHeartbeatTssAntiData();// 0x4618840
	void OnRep_UseHeartbeatOBTssAntiData();// 0x461882c
	void OnRep_UseFireTssAntiData();// 0x4618818
	void OnRep_TopCharmPlayerAvatarInfoList();// 0x4618804
	void OnRep_TeamSegmentsInfo();// 0x46187f0
	void OnRep_SyncObjectPosReplayNetGUIDList();// 0x46187dc
	void OnRep_SubModeGroup();// 0x46187c8
	void OnRep_StartedPlane();// 0x46187b4
	void OnRep_ShowCharmPlayerCount();// 0x46187a0
	void OnRep_SegmentChooseTime();// 0x461878c
	void OnRep_SecurityScreenShotEnabled();// 0x4618778
	void OnRep_SeasonIdx();// 0x4618764
	void OnRep_RouteSelectStartCountDown();// 0x4618750
	void OnRep_RouteSegmentList();// 0x461873c
	void OnRep_ReplicatedWorldTimeSeconds(out const float OldValue);// 0x46186a8
	void OnRep_ReplicatedWorldRealTimeSeconds(out const float OldValue);// 0x461861c
	void OnRep_ReadyStateTime();// 0x4618608
	void OnRep_ReadyStateCountingDown();// 0x46185f4
	void OnRep_PlayerNumOnPlane();// 0x46185e0
	void OnRep_PlayerNumChange();// 0x46185cc
	void OnRep_ObjectPosUIData();// 0x46185b8
	void OnRep_MaxKillerChange();// 0x46185a4
	void OnRep_MarkSyncData();// 0x4618590
	void OnRep_LuckyCharmPlayerDetailList();// 0x461857c
	void OnRep_LobbyGameType();// 0x4618568
	void OnRep_IsWeaponFPPOffsetInTDMode();// 0x4618554
	void OnRep_IsTrainingMode();// 0x4618540
	void OnRep_IsShowDeadBoxGreenSmoke();// 0x461852c
	void OnRep_IsShowDeadBoxGreenLight();// 0x4618518
	void OnRep_IsShowDeadBox();// 0x4618504
	void OnRep_IsFPPMode();// 0x46184f0
	void OnRep_IsFireworksActOpen();// 0x46184dc
	void OnRep_IsDark();// 0x46184c8
	void OnRep_IsCanPlaceBuilding();// 0x46184b4
	void OnRep_IsCanBecomeZombie();// 0x46184a0
	void OnRep_IsCacheParachuteAnim();// 0x461848c
	void OnRep_ImpoliteVoiceReportEnabled();// 0x4618478
	void OnRep_HasSignalBarReplay();// 0x4618464
	void OnRep_GameTerminatorPlayerKey();// 0x4618450
	void OnRep_GameStateConfigParam();// 0x461843c
	void OnRep_GameModeType();// 0x4618428
	void OnRep_GameModeState();// 0x461840c
	void OnRep_GameModeID();// 0x46183f8
	void OnRep_GameModeFeatureSet();// 0x46183e4
	void OnRep_FinalWinTeams();// 0x46183d0
	void OnRep_EscapeHelicopterClassTag();// 0x46183bc
	void OnRep_EscapedPlayerNum();// 0x46183a8
	void OnRep_EnableSignalSystem();// 0x4618394
	void OnRep_DSFixedDateTime();// 0x4618380
	void OnRep_DamageMagnifierPlan();// 0x461836c
	void OnRep_CurrentTeamIndex();// 0x4618358
	void OnRep_ClubTeamList();// 0x4618344
	void OnRep_CircleInfo();// 0x4618330
	void OnRep_CircleIndexChange();// 0x461831c
	void OnRep_bShowWingman();// 0x4618308
	void OnRep_AliveTeamNum();// 0x46182f4
	void OnRep_AliveRealPlayerNum();// 0x46182e0
	void OnRep_AlivePlayerNum();// 0x46182cc
	void OnRep_AirplaneStopLoc();// 0x46182b8
	void OnRep_AirplaneStartLoc();// 0x46182a4
	void OnRep_AirplaneForceJumpLocForCamp();// 0x4618290
	void OnRep_AirplaneForceJumpLoc();// 0x461827c
	void OnRep_AirplaneCanJumpLocForCamp();// 0x4618268
	void OnRep_AirplaneCanJumpLoc();// 0x4618254
	void OnRep_AirDropPathData();// 0x4618240
	void OnGISComponentCreated(GISActorComponentBase* InComponemt);// 0x46181c4
	void OnGameModeDisplayNameChange();// 0x46181b0
	void OnClearCharmSystemInfo();// 0x461819c
	void OnBeginReplayStream();// 0x4618188
	void NotifySegmentInfo(int TeamID, int SegmentID);// 0x46180d4
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x461801c
	void NotifyClientCharmPlayerChanged(bool IsTopCharmPlayer, bool IsLuckyPlayer, bool IsWingManPlayer);// 0x4617f08
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x4617e84
	bool IsUnsafeExit();// 0x4617e4c
	bool IsPlayerInCharmRankOnlyTopCharmPlayer(uint32 PlayerKey);// 0x4617dbc
	bool IsPlayerInCharmRank(uint32 PlayerKey);// 0x4617d2c
	bool IsPlayerAlive(STExtraPlayerState* PlayerState);// 0x4617c94
	bool IsPlaneValid();// 0x4617c70
	bool IsInBlueCircle(out const Vector Pos);// 0x4617bd0
	bool IsGameModeSupportPlayerRevival();// 0x4617b98
	bool IsFeatureSupported(enum SubSystemType);// 0x4617b08
	bool IsEnableCurrentWeaponMeshVisibleCheck();// 0x4617ac8
	bool IsCurCircleValid();// 0x4617a90
	bool IsCharmSystemEnabled();// 0x4617a58
	float GetWorldRealTimeSeconds();// 0x4617a1c
	Vector GetWhiteCircle();// 0x46179e4
	int GetTeamSelectTime(int StateReadyTime);// 0x4617958
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x4617924
	float GetServerReplicatedRealTime();// 0x46178f0
	SegmentChoosableSituation[] GetSelectableRoute();// 0x4617870
	RouteSegment GetRouteMentByRouteID(int RouteID);// 0x4617788
	float GetReplicatedWorldTimeSeconds();// 0x461776c
	bool GetRecordControllerReplay();// 0x4617734
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x46176e0
	AvatarDynamicCacheStrategy* GetPlayerAvatarDynamicCacheStrategy(Object* InContextObj);// 0x461764c
	Actor* GetPlane();// 0x4617618
	FString GetMaxKillerPlayerKey();// 0x4617598
	bool GetIsFireworksActOpen();// 0x4617560
	int GetHZB();// 0x461752c
	FName GetGameModeState();// 0x46174f8
	FString GetGameModeDisplayName();// 0x4617478
	Vector GetForceJumpLocForCamp();// 0x4617450
	Vector GetForceJumpLoc();// 0x4617428
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x46173f4
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x46173c0
	enum GetCurCircleStatus();// 0x461738c
	int GetCurCircleIndex();// 0x4617358
	enum GetCurAirAttackMode();// 0x4617324
	PlayerClubTeamInfo GetClubTeamInfoByTeamID(int TeamID);// 0x4617218
	float GetCircleStatusTimespan();// 0x46171e4
	float GetCircleStatusLeftTime();// 0x46171b0
	int GetCircleInvertIndex();// 0x4617194
	Vector GetCanJumpLocForCamp();// 0x461716c
	Vector GetCanJumpLoc();// 0x4617144
	Vector GetBlueCircle();// 0x461710c
	UAEBlackboard* GetBlackBoard();// 0x46170d8
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x4616f84
	int GetAliveRealPlayerNum();// 0x4616f50
	int GetAlivePlayerWithoutPawnNum();// 0x4616f14
	int GetAlivePlayerNum();// 0x4616ee0
	Vector GetAirplaneStopLoc();// 0x4616eb8
	Vector GetAirplaneStartLoc();// 0x4616e90
	AirDropPathData3D GetAirDropPathData();// 0x4616d60
	void FindMaxVehiclePlayers(out GameModePlayerParams Player, out uint32[] VehiclePlayers);// 0x4616954
	void FindAllVisibleVehicleInsidePlayers(out uint32[] VisibleVehicles, out uint32[] VisibleInsider);// 0x4616858
	BattleItemData[] FilterEmoteItem(out const BattleItemData[] ItemList);// 0x4616798
	bool DoNotAutoViewTeammateOnInitWatchUI();// 0x4616758
	void DispatchToClientRemoveObjectPosUIData(int InInstanceID);// 0x46166d4
	void DispatchToClientAddObjectPosUIData(const ObjectPosUIData InData);// 0x46165f0
	void CreateLevelEventCenter_BP();// 0x46165d4
	void CompetitionModeRouteSelectPhase(int StateReadyTime);// 0x4616558
	void CheckUpdateCharmOrLuckyPlayers();// 0x4616544
	void CheckTypeLimit(int InstanceID, int TypeID);// 0x4616490
	bool CheckIsInInfectionTDM();// 0x4616450
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x46163d4
	bool CalledOverrideClickBackToLobby();// 0x461639c
	void CalculateRespawnTimes(uint32 PlayerKey, bool bIsAI);// 0x46162dc
	void BroadcastSignalGunInfo(int LastTime);// 0x4616258
	void BroadcastRoute(Vector StartLoc, Vector StopLoc);// 0x4616188
	void BroadcastGameEnterFinished();// 0x461616c
	void BroadcastGameEnterFighting();// 0x4616150
	void BroadcastFatalDamageInfoSimple(UAECharacter* causer, UAECharacter* Victim, ClientFatalDamageRecordDataSimple SimpleData);// 0x4615ec4
	void BroadcastFatalDamageInfo(UAECharacter* causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x4615d18
	void BroadcastCircleWaveOver(int Index, int WaveNum);// 0x4615c30
	void BroadcastCircleWarning(float Time);// 0x4615bac
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x4615a64
	void BroadcastCircleInfo(enum CircleInfo, float Time, int CircleInvertedIndex);// 0x4615934
	void BroadcastCampAirLineRoute(Vector StartLoc, Vector StopLoc);// 0x4615864
	void BroadcastCallBlackAirAttackWarning(const Vector airAttackAreaSrc, int waveindex, enum AirAttackMode);// 0x4615764
	void BroadcastCallBlackAirAttackOver(int waveindex, enum AirAttackMode);// 0x46156a4
	void BroadcastCallBlackAirAttackOrder(const CallBlackAirAttackOrder airAttackOrderSrc, int waveindex, enum AirAttackMode);// 0x4615570
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex, enum AirAttackMode);// 0x4615470
	void BroadcastAirAttackOver(int waveindex, enum AirAttackMode);// 0x46153b0
	void BroadcastAirAttackOrderCompact(const CompactAirAttackOrder airAttackOrderSrc, int waveindex);// 0x46152d0
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex, enum AirAttackMode);// 0x46151a4
	void AddCharmPlayerInfoInternal(out PlayerDetailInfo[] DetailInfoList, out GameModePlayerParams PlayerParam, int ItemIndex, bool bVisible, bool bIsWingManPlayerSlot);// 0x4614c6c
	int AddBossLocationToID(Vector loation);// 0x4614bdc
	void AddAlreadyInRankPlayerInternal(uint32 PlayerKey, byte RankIndex);// 0x4614b24

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 0x4]// 0x7611f4b2f0
	Vector StartLoc3D;//[Offset: 0x4, Size: 0xc]// 0x7611f4b270
	Vector TargetLoc3D;//[Offset: 0x10, Size: 0xc]// 0x7611f4b1f0
	Vector[] AirDropLocs3D;//[Offset: 0x20, Size: 0x10]// 0x7611f4b0f0
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7611f4b070
	Vector MapCenter;//[Offset: 0x34, Size: 0xc]// 0x7611f4aff0
	float Radius;//[Offset: 0x40, Size: 0x4]// 0x7611f4af80

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0x118, Size: 0x4]// 0x75a88e50f0
	int CurrentLocalInstanceCount;//[Offset: 0x11c, Size: 0x4]// 0x75a88e5160
	MarkDispatchAction[] ActionQueue;//[Offset: 0x120, Size: 0x10]// 0x75a88a5880
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x130, Size: 0x10]// 0x75a88a5980
	int MarkCountProcessed;//[Offset: 0x140, Size: 0x4]// 0x75a88e51d0
	MarkSyncData[] StaticMarkList;//[Offset: 0x148, Size: 0x10]// 0x75a88a5a80
	bool LocalActionNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75a88a5b00
	static void UpdateMapMarkData(Object* WorldContextObject, int MarkInstanceID, Vector NewLocation, Rotator NewRotation);// 0x4407fb8
	void LocalActionUpdate();// 0x4407fa4
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x4407f28
	int GenerateNewLocalInstanceID();// 0x4407f04
	int GenerateNewInstanceID();// 0x4407ee0
	void DispatchMarkDataSimple(out const MarkSyncData Data);// 0x4407dd4
	void DispatchMarkDataOwnerOnly(out const MarkSyncData Data, STExtraPlayerState* PS);// 0x4407c7c
	void DispatchMarkDataArray(MarkDispatchAction[] DataArray);// 0x4407acc
	void DispatchMarkData(out const MarkDispatchAction Data, bool NeedPrintLog);// 0x440797c
	static int DispatchMapMarkData(Object* WorldContextObject, MarkSyncData MarkData, enum ActionType, enum ActionRange);// 0x4407694

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 0x1]// 0x76121a4330
	enum RangeType;//[Offset: 0x1, Size: 0x1]// 0x76121a4230
	MarkSyncData SyncData;//[Offset: 0x8, Size: 0x70]// 0x76121a41b0
	float DispatchDelayTime;//[Offset: 0x78, Size: 0x4]// 0x76121a4140
	float RangeRad;//[Offset: 0x7c, Size: 0x4]// 0x76121a40d0
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x80, Size: 0x8]// 0x76121a4050
	STExtraPlayerState* luaPlayerState;//[Offset: 0x88, Size: 0x8]// 0x76121a3fd0
	bool LocalUseQueue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]// 0x76121a3f50
	float DispatchTime;//[Offset: 0x94, Size: 0x4]// 0x76121a3ee0
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]// 0x76121a3e60
	delegate OnMapAlertSet;//[Offset: 0xa0, Size: 0x10]// 0x76121a3de0

--------------------------------
Class: AssetPreLoadingComponent.ActorComponent.Object
	PreLoadAssetConfigItem[] PreLoadAssetConfigList;//[Offset: 0x118, Size: 0x10]// 0x75bde13600
	void StartLoad(STExtraPlayerController* PC);// 0x41647a0
	void LoadAssetItemFinished(SoftObjectPath Path, STExtraPlayerController* PC);// 0x4164684
	void LoadAssetItem(out const PreLoadAssetConfigItem Item, STExtraPlayerController* PC);// 0x4164578

--------------------------------
Class: PreLoadAssetConfigItem
	Object* TargetAssetPtr;//[Offset: 0x0, Size: 0x28]// 0x7612147030
	bool bIsClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7612146fb0
	int MinDeviceMemoryLevel;//[Offset: 0x2c, Size: 0x4]// 0x7612146f40
	bool bSupportClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7612146ec0
	bool bSupportDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]// 0x7612146e40

--------------------------------
Class: GameStateConfigParam
	bool bDisableShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611f63c60
	bool bNotShootVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611f63be0
	class Actor[] NotShootClass;//[Offset: 0x8, Size: 0x10]// 0x7611f63ae0
	bool bDisableShootImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611f63a60
	class Actor[] DisableImpacClass;//[Offset: 0x20, Size: 0x10]// 0x7611f63960

--------------------------------
Class: CircleInfo
	int CurCircleIndex;//[Offset: 0x0, Size: 0x4]// 0x7611f636d0
	enum CircleStatus;//[Offset: 0x4, Size: 0x1]// 0x7611f635d0
	Vector OriginBlueCircle;//[Offset: 0x8, Size: 0xc]// 0x7611f63550
	Vector BlueCircle;//[Offset: 0x14, Size: 0xc]// 0x7611f634d0
	Vector WhiteCircle;//[Offset: 0x20, Size: 0xc]// 0x7611f63450
	float CircleStatusStartServerTime;//[Offset: 0x2c, Size: 0x4]// 0x7611f633e0
	float CircleStatusTimespan;//[Offset: 0x30, Size: 0x4]// 0x7611f63370

--------------------------------
Class: GISActorManager.Object
	delegate OnComponentLoggedIn;//[Offset: 0x28, Size: 0x10]// 0x75a80a2e00
	static void SetGISFailLogEnabled(bool bEnableFailLog);// 0x7d573a0
	static void LoginNewGISActorComponent(int InInstanceID, GISActorComponentBase* InComponent);// 0x7d572f0
	static GISActorManager* GetInstance(Object* WorldContextObject);// 0x7d57274
	static bool GetCanTriggerGISByClass(Object* WorldContextObject, class Object InClass, int ConfigIdx, PlayerController* pController);// 0x7d57144
	static Actor* GetActorByTypeIDAndControllerChecked(Object* WorldContextObject, int InTypeID, PlayerController* InController);// 0x7d57050
	static Actor* GetActorByTypeID(Object* WorldContextObject, int InTypeID);// 0x7d56f98
	static Actor* GetActorByInstanceAndWorld(Object* WorldContextObject, int InInstanceID);// 0x7d56ee0
	static Actor* GetActorByInstance(Object* WorldContextObject, int InInstanceID);// 0x7d56e28
	static Actor*[] GetActorByClassAndWorld(Object* WorldContextObject, class Object InClass);// 0x7d56d30
	static int GenerateInstanceID(Object* WorldContextObject);// 0x7d56cb4

--------------------------------
Class: GISActorComponentBase.ActorComponent.Object
	GISObjectBaseAction*[] Actions;//[Offset: 0x120, Size: 0x10]// 0x75a8697080
	UAEBlackboardParameter[] SharedParams;//[Offset: 0x130, Size: 0x10]// 0x75a8697180
	Object*[] PinnedObjects;//[Offset: 0x140, Size: 0x10]// 0x75a8697280
	FString OverlapComponentName;//[Offset: 0x150, Size: 0x10]// 0x75b4d78a30
	float OverlapDistanceSecurtyCheck;//[Offset: 0x160, Size: 0x4]// 0x75b4d78aa0
	bool bFastOverlapCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]// 0x75a8697300
	DataTable* ConfigPath;//[Offset: 0x168, Size: 0x28]// 0x75a8697380
	bool bGISDisableTickOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]// 0x75a8697400
	GISActivitySelector[] TypeIDArray;//[Offset: 0x198, Size: 0x10]// 0x75a8697500
	bool bCantriggerSkipsBoundCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]// 0x75a8697580
	bool bDisableClientOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]// 0x75a8697600
	PrimitiveComponent* OverlapComponentCache;//[Offset: 0x1b0, Size: 0x8]// 0x75a8697680
	<byte,GISComponentConfigGroupArratWrapper> RangeActionMap;//[Offset: 0x1b8, Size: 0x50]// 0x75a801fec0
	<int,GISActorConfigData> GISActorConfigData;//[Offset: 0x208, Size: 0x50]// 0x75a801ff80
	<int,GISWeakPlayerControllerArrayWrapper> PlayerCDTable;//[Offset: 0x258, Size: 0x50]// 0x75a8020040
	delegate OnGISServerTriggered;//[Offset: 0x2a8, Size: 0x10]// 0x75a8697900
	delegate OnGISServeActorEntered;//[Offset: 0x2b8, Size: 0x10]// 0x75a8697980
	delegate CustomTriggerEvent;//[Offset: 0x2c8, Size: 0x10]// 0x75a8697a00
	delegate OnGISClientTriggered;//[Offset: 0x2d8, Size: 0x10]// 0x75a8697a80
	UAEBlackboardKeySelector InstanceIDParameterName;//[Offset: 0x2e8, Size: 0x8]// 0x75a8697b00
	UAEBlackboardKeySelector TypeIDParameterName;//[Offset: 0x2f0, Size: 0x8]// 0x75a8697b80
	int[] IsInMasterCD;//[Offset: 0x2f8, Size: 0x10]// 0x75a8697c00
	int InstanceID;//[Offset: 0x358, Size: 0x4]// 0x75b4d78c60
	FinishedGISActions FinishedGISActions;//[Offset: 0x360, Size: 0x10]// 0x75a8697c80
	GISObjectBaseAction*[] TickQueue;//[Offset: 0x370, Size: 0x10]// 0x75a8697d80
	Actor*[] PreviousInBoundActors;//[Offset: 0x3d0, Size: 0x10]// 0x75a8697e80
	GISActorManager* InstanceManager;//[Offset: 0x3e0, Size: 0x8]// 0x75a8697f00
	UAEBlackboard* BlackBoard;//[Offset: 0x3e8, Size: 0x8]// 0x75a8697f80
	<Pawn*> ExtraControllers;//[Offset: 0x3f0, Size: 0x50]// 0x75d119b680
	<Actor*,GISPlayerComponentBase*> GISPlayerComponentCache;//[Offset: 0x440, Size: 0x50]// 0x75a8020100
	<Actor*,PlayerController*> ControllerCacheMap;//[Offset: 0x490, Size: 0x50]// 0x75a80201c0
	<PlayerController*,PlayerDoneData> PlayerDoneMap;//[Offset: 0x4e0, Size: 0x50]// 0x75a8020280
	Actor*[] HasBroadcastedActors;//[Offset: 0x580, Size: 0x10]// 0x75a8698400
	<PlayerController*> SuspendedPlayers;//[Offset: 0x590, Size: 0x50]// 0x75d119b720
	void SuspendForController(PlayerController* PlayerController, bool bIsResume);// 0x7d56180
	void Suspend(bool bIsResume);// 0x7d560fc
	void SetCDFlagByPC(PlayerController* PlayerController, int InTypeID);// 0x7d56044
	void RPC_ClientRunTypeAction(byte ActType, int InTypeID, PlayerController* InstigatingPlayerController);// 0x7d55f48
	void ResetPCByTime(PlayerController* PlayerController, int TypeID);// 0x7d55e90
	void RequestCustomTrigger(out const UAEBlackboardParameter[] Params);// 0x7d55dbc
	void RemoveExtraPawn(out const <Pawn*> InPawns);// 0x7d55cb8
	void OnRep_InstanceID();// 0x7d55ca4
	void OnRep_FinishedGISActions();// 0x7d55c90
	void OnPCCDCleared(PlayerController* PlayerController, int TypeID);// 0xffffff8a17adf2b0
	void OnClientTrigger(PlayerController* PlayerController);// 0x7d55c0c
	void OnActorDestrtoyed(Actor* InActor);// 0x7d55b90
	bool IsValidForController(PlayerController* InController, int InTypeID);// 0x7d55abc
	bool GetIsPCInCD(PlayerController* PlayerController, int InTypeID);// 0x7d559f0
	static Actor* GetGISActorByInstanceID(int InInstanceID, Object* WorldContextObject);// 0x7d55938
	UAEBlackboard* GetBlackBoard();// 0x7d55904
	void FlushConditions();// 0x7d558f0
	void DoTrigger(PlayerController* InController, int InTypeID);// 0x7d55830
	static void ClearActorInstanceMap(Object* WorldContextObject);// 0x7d557bc
	bool CanTrigger(PlayerController* InController, int InTypeID, bool CheckForWaitingQueue);// 0x7d556a4
	void AddExtraPawn(out const <Pawn*> InPawns);// 0x7d555a0

--------------------------------
Class: GISObjectBaseAction.GISObjectBase.Object
	GISObjectBaseAction*[] ChildActions;//[Offset: 0xd8, Size: 0x10]// 0x75a85e8800
	float ActionDuration;//[Offset: 0xe8, Size: 0x4]// 0x75a85dbd90
	void UnPinAction();// 0x7d59a8c
	void TickAction(float dt);// 0x7d59a08
	void PinAction();// 0x7d599f4
	void OnActionTick(float dt);// 0xffffff8a17adf2b0
	void OnActionStartedBP();// 0xffffff8a17adf2b0
	void OnActionStarted();// 0x7d599d8
	void OnActionResetsBP();// 0xffffff8a17adf2b0
	void OnActionResets();// 0x7d599bc
	void OnActionFinishedBP(byte NewStatus);// 0xffffff8a17adf2b0
	void OnActionFinished();// 0x7d599a0
	byte Execute(ActorComponent* InComponentBase, Actor* InInteractingActor, int InMasterIndex, UAEBlackboardParameter[] Params, bool bInSoloMode, bool bIsTest, bool bRebuildCache);// 0x7d596ac

--------------------------------
Class: GISObjectBase.Object
	bool bReplicatesAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75b4c30080
	int ActionInstanceID;//[Offset: 0x2c, Size: 0x4]// 0x75b4c3bd30
	GISObjectBase* FromTemplate;//[Offset: 0x30, Size: 0x8]// 0x75b4c30100
	bool bIsRootAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x75b4c30180
	int MasterIndex;//[Offset: 0x3c, Size: 0x4]// 0x75b4c3bda0
	UAEBlackboardParameter[] ParamList;//[Offset: 0x40, Size: 0x10]// 0x75b4c30280
	UAEBlackboardParameter[] NodeParamList;//[Offset: 0x50, Size: 0x10]// 0x75b4c30380
	UAEBlackboard* BlackBoard;//[Offset: 0x60, Size: 0x8]// 0x75b4c30400
	Actor* InteractingActor;//[Offset: 0x68, Size: 0x8]// 0x75b4c30480
	ActorComponent* ComponentBase;//[Offset: 0x70, Size: 0x8]// 0x75b4c30500
	Object* pOwner;//[Offset: 0x78, Size: 0x8]// 0x75b4c30580
	GISObjectBase* RootAction;//[Offset: 0x80, Size: 0x8]// 0x75b4c30600
	<int,GISObjectBase*> InstanceMap;//[Offset: 0x88, Size: 0x50]// 0x75b4c22540
	bool IsDedicatedServer();// 0x7d5915c
	Object* GetGISOwnerComponent();// 0x7d59140
	Actor* GetGISOwnerActor();// 0x7d5910c
	Actor* GetGISInteractingActor();// 0x7d590d4
	ActorComponent* GetComponentBase();// 0x7d59098
	UAEBlackboard* GetBlackBoard();// 0x7d59064

--------------------------------
Class: GISActivitySelector
	GISConfigGroup* ConfigGroup;//[Offset: 0x0, Size: 0x8]// 0x75c993ba80
	FName ActivityName;//[Offset: 0x8, Size: 0x8]// 0x75c9920e40
	FName ActivityDesc;//[Offset: 0x10, Size: 0x8]// 0x75c9920eb0
	FName TypeID;//[Offset: 0x18, Size: 0x8]// 0x75c9920f20

--------------------------------
Class: GISConfigGroup.DataAsset.Object
	GISActorConfigData ConfigData;//[Offset: 0x30, Size: 0x120]// 0x75a80a2d80

--------------------------------
Class: GISActorConfigData
	GISActorActionData ActionData;//[Offset: 0x0, Size: 0xb0]// 0x75c993ca00
	float CDResetTimePerType;//[Offset: 0xb0, Size: 0x4]// 0x75c9921310
	float MasterCDTime;//[Offset: 0xb4, Size: 0x4]// 0x75c9921380
	int MaxTotalTriggerTimes;//[Offset: 0xb8, Size: 0x4]// 0x75c99213f0
	int MaxTriggerTimesPerPlayer;//[Offset: 0xbc, Size: 0x4]// 0x75c9921460
	int ActivityCatagory;//[Offset: 0xc0, Size: 0x4]// 0x75c99214d0
	bool bSkipInvalidAfterTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]// 0x75c993cb80
	<byte,byte> Runside;//[Offset: 0xc8, Size: 0x50]// 0x760d21be40
	int OriginalIndexInArray;//[Offset: 0x118, Size: 0x4]// 0x75c9921540

--------------------------------
Class: GISActorActionData
	<byte,GISActorActionArrayWrapper> GISActorActionMap;//[Offset: 0x0, Size: 0x50]// 0x760d21bcc0
	<byte,GISActorActionParameterArrayWrapper> GISActorActionParams;//[Offset: 0x50, Size: 0x50]// 0x760d21bd80
	GISObjectCondition*[] CanTriggerConditions;//[Offset: 0xa0, Size: 0x10]// 0x75c993c980

--------------------------------
Class: GISActorActionArrayWrapper
	GISObjectBaseAction*[] ActionFlowList;//[Offset: 0x0, Size: 0x10]// 0x75c993c480
	GISObjectBaseAction*[] ActionNodeList;//[Offset: 0x10, Size: 0x10]// 0x75c993c580

--------------------------------
Class: GISActorActionParameterArrayWrapper
	UAEBlackboardParameter[] Params;//[Offset: 0x0, Size: 0x10]// 0x75c993c780

--------------------------------
Class: GISObjectCondition.GISObjectBase.Object
	bool Pass(UAEBlackboardParameter[] Params, ActorComponent* InComponentBase, Actor* InInteractingActor);// 0x7d5a058
	bool CheckCondition(Actor* CurrentInteractingActor, Actor* OwnerActor);// 0x7d59f88

--------------------------------
Class: GISComponentConfigGroupArratWrapper
	GISComponentConfigGroupWrapper[] Array;//[Offset: 0x0, Size: 0x10]// 0x75c993c380

--------------------------------
Class: GISComponentConfigGroupWrapper
	GISComponentConfigGroup* ComponentConfigGroup;//[Offset: 0x0, Size: 0x8]// 0x75c993c280

--------------------------------
Class: GISComponentConfigGroup.DataAsset.Object
	GISActorRangeData ActionData;//[Offset: 0x30, Size: 0x48]// 0x75a80a3980

--------------------------------
Class: GISActorRangeData
	GISObjectBaseAction*[] ActionFlowList;//[Offset: 0x0, Size: 0x10]// 0x75c993be80
	GISObjectBaseAction*[] ActionNodeList;//[Offset: 0x10, Size: 0x10]// 0x75c993bf80
	UAEBlackboardParameter[] Params;//[Offset: 0x20, Size: 0x10]// 0x75c993c080
	GISObjectCondition*[] CanTriggerConditions;//[Offset: 0x30, Size: 0x10]// 0x75c993c180
	byte Runside;//[Offset: 0x40, Size: 0x1]// 0x75c993c200

--------------------------------
Class: GISWeakPlayerControllerArrayWrapper
	PlayerController*[] PCArray;//[Offset: 0x0, Size: 0x10]// 0x75c993bb80

--------------------------------
Class: FinishedGISActions
	CurrentRunningGISActionSyncData[] FinishedActions;//[Offset: 0x0, Size: 0x10]// 0x75c993bd80

--------------------------------
Class: CurrentRunningGISActionSyncData
	int8 EntryIndex;//[Offset: 0x0, Size: 0x1]// 0x75c9921070
	int ActionInstanceID;//[Offset: 0x4, Size: 0x4]// 0x75c99210e0
	int TypeID;//[Offset: 0x8, Size: 0x4]// 0x75c9921150
	byte ActorActionType;//[Offset: 0xc, Size: 0x1]// 0x75c993bc00
	bool bClientDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x75c993bc80

--------------------------------
Class: GISPlayerComponentBase.ActorComponent.Object
	GISObjectBaseAction*[] TickQueue;//[Offset: 0x120, Size: 0x10]// 0x75a8696400
	GISPlayerSyncData[] PlayerSyncData;//[Offset: 0x130, Size: 0x10]// 0x75a8696500
	int[] PlayerRangeData;//[Offset: 0x140, Size: 0x10]// 0x75a8696580
	bool bEnableOnrepFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]// 0x75a8696600
	<int,GISClientActionMapWrapper> ClientActionMap;//[Offset: 0x1d8, Size: 0x50]// 0x75a801f140
	<int,GISClientActionMapWrapper> PrevClientActionMap;//[Offset: 0x228, Size: 0x50]// 0x75a801f200
	UAEBlackboardKeySelector InstanceIDParameterName;//[Offset: 0x278, Size: 0x8]// 0x75a8696780
	UAEBlackboardKeySelector TypeIDParameterName;//[Offset: 0x280, Size: 0x8]// 0x75a8696800
	<int,GISPlayerSyncData> PreviousPlayerSyncData;//[Offset: 0x288, Size: 0x50]// 0x75a801f2c0
	<int,GISPlayerSyncData> CurrentPlayerSyncData;//[Offset: 0x2d8, Size: 0x50]// 0x75a801f380
	<int,SignalWaitingData> WaitingSignalQueue;//[Offset: 0x328, Size: 0x50]// 0x75a801f440
	<int,GISChangedTypeID> ChangedTypeIDMap;//[Offset: 0x378, Size: 0x50]// 0x75a801f500
	UAEBlackboard* BlackBoard;//[Offset: 0x418, Size: 0x8]// 0x75a8696a80
	void TriggerServerLogicByTypeID_Multicast(int InTypeID);// 0x7d5b694
	void TriggerServerLogic_Multicast(const GISPlayerRequestData InSyncData);// 0x7d5b5e0
	void SendSignalToWaitingQueue(int InInstanceID, int InTypeID);// 0x7d5b52c
	void ResuqetCustomTrigger(const UAEBlackboardParameter[] Params, int InInstanceID);// 0x7d5b3f0
	void OnSyncdataChanged(out const GISPlayerSyncData[] InSyncData);// 0xffffff8a17adf2b0
	void OnRep_PlayerSyncData();// 0x7d5b3dc
	void OnRep_PlayerRangeData();// 0x7d5b3c8
	bool GetClientCanTrigger(int InInstanceID, int InTypeID);// 0x7d5b300
	UAEBlackboard* GetBlackBoard();// 0x7d5b2cc
	void ExecuteMainAction();// 0x7d5b2b0
	bool CanTriggerAction(int InTypeID);// 0x7d5b220
	void C2S_CustomData(const UAEBlackboardParameter[] Param);// 0x7d5b128

--------------------------------
Class: GISPlayerSyncData
	PlayerDoneDataArrayWrapper[] TriggeredTime;//[Offset: 0x0, Size: 0x10]// 0x75c993b580
	int GISActorInstanceID;//[Offset: 0x10, Size: 0x4]// 0x75c9920c10
	int[] TypeID;//[Offset: 0x18, Size: 0x10]// 0x75c993b600

--------------------------------
Class: PlayerDoneDataArrayWrapper
	int DoneCount;//[Offset: 0x0, Size: 0x4]// 0x75c9920f90
	int TypeID;//[Offset: 0x4, Size: 0x4]// 0x75c9921000

--------------------------------
Class: GISClientActionMapWrapper
	<int,GISActorConfigData> Map;//[Offset: 0x0, Size: 0x50]// 0x760d21bb40

--------------------------------
Class: SignalWaitingData
	PlayerController* Controller;//[Offset: 0x0, Size: 0x8]// 0x75c993b480

--------------------------------
Class: GISChangedTypeID

--------------------------------
Class: GISPlayerRequestData
	int GISActorInstanceID;//[Offset: 0x0, Size: 0x4]// 0x75c9920cf0
	int TypeID;//[Offset: 0x4, Size: 0x4]// 0x75c9920d60
	bool ShouldWaitForSignal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x75c993b680

--------------------------------
Class: PlayerDoneData
	<int,int> DoneCount;//[Offset: 0x0, Size: 0x50]// 0x760d21bc00

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 0x4]// 0x7611f43e50
	Vector_NetQuantize[] bombsPosition;//[Offset: 0x8, Size: 0x10]// 0x7611f43d50
	float[] bombsInterval;//[Offset: 0x18, Size: 0x10]// 0x7611f43c60
	float HeightOffset;//[Offset: 0x28, Size: 0x4]// 0x7611f43bf0
	float DelayTime;//[Offset: 0x2c, Size: 0x4]// 0x7611f43b80
	Actor*[] TargetArr;//[Offset: 0x30, Size: 0x10]// 0x7611f43a80

--------------------------------
Class: CallBlackAirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 0x4]// 0x7611f454c0
	Vector[] bombsPosition;//[Offset: 0x8, Size: 0x10]// 0x7611f453c0
	float[] bombsInterval;//[Offset: 0x18, Size: 0x10]// 0x7611f452d0
	float HeightOffset;//[Offset: 0x28, Size: 0x4]// 0x7611f45260
	float DelayTime;//[Offset: 0x2c, Size: 0x4]// 0x7611f451f0
	Actor*[] TargetArr;//[Offset: 0x30, Size: 0x10]// 0x7611f450f0
	int InstanceID;//[Offset: 0x40, Size: 0x4]// 0x7611f45080
	int Count;//[Offset: 0x44, Size: 0x4]// 0x7611f45010
	Vector AirAttackArea;//[Offset: 0x48, Size: 0xc]// 0x7611f44f90
	Actor* Caller;//[Offset: 0x58, Size: 0x8]// 0x7611f44f10

--------------------------------
Class: GameSwitchControll
	int ID;//[Offset: 0x0, Size: 0x4]// 0x7611f61eb0
	int SwitchValue;//[Offset: 0x4, Size: 0x4]// 0x7611f61e40

--------------------------------
Class: WeaponSlotManager.Object
	<byte,class WeaponSlotBase> WeaponSlotsClassConfig;//[Offset: 0x28, Size: 0x50]// 0x75a8615140
	<byte,WeaponSlotBase*> WeaponSlotsDataMap;//[Offset: 0x78, Size: 0x50]// 0x75a8615200
	WeaponManagerComponent* OwnerMgr;//[Offset: 0xc8, Size: 0x8]// 0x75a8478780
	int GetWeaponSlotUIType(byte Slot, STExtraWeapon* Weapon);// 0x4827ef4
	static WeaponSlotManager* GetWeaponSlotManager(Object* ContextObject);// 0x4827e78
	WeaponSlotBase* GetWeaponSlotBySlotTypeCommon(byte SlotType);// 0x4827dec
	class Object GetDefaultWeaponSlotClass(byte SlotType);// 0x4827d60

--------------------------------
Class: WeaponSlotBase.Object
	int SlotUIType;//[Offset: 0x28, Size: 0x4]// 0x760d13f9a0
	bool bCanDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x75a8478c00
	bool bUpdateLastUseDiffSlotWeaponSlotWhenSwitchToThisSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]// 0x75a8478c80
	bool bUpdateLastUseNoneGrenadeWeaponSlotWhenSwitchToThisSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]// 0x75a8478d00
	bool bNeedCreateWhenCanNotEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]// 0x75a8478d80
	bool bNeedSwitchWhenCreateAndUseSameSlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x75a8478e00
	bool bHideWeaponAfterDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]// 0x75a8478e80
	bool bResetIsPressingFireBtnWhenSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]// 0x75a8478f00
	bool bForceSwitchWhenUseAfterSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]// 0x75a8478f80
	int SwitchAnimType;//[Offset: 0x34, Size: 0x4]// 0x760d13fa10
	byte GetWeaponAnimTypeBySlot(enum StateType, byte Slot);// 0x4827914

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 0x4]// 0x7611f60070
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 0x4]// 0x7611f60000
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 0x10]// 0x7611f5ff10
	float DefaultFOVAngle;//[Offset: 0x18, Size: 0x4]// 0x7611f5fea0
	byte[] VisualCheckChanelList;//[Offset: 0x20, Size: 0x10]// 0x7611f5fda0

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x58, Size: 0x8]// 0x75a84ce000
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x60, Size: 0x50]// 0x75a84ce080
	<int,float> VisualAngleLimitMap;//[Offset: 0xb0, Size: 0x50]// 0x760d1535c0
	void UpdateVisualFieldMeta();// 0x47ee144

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 0x50]// 0x7612230b00

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 0x10]// 0x7612230d40

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 0x10]// 0x7612230f60
	Actor* VisibleActor;//[Offset: 0x10, Size: 0x8]// 0x7612230ee0

--------------------------------
Class: GameModeNameDecorator
	FString DecorateCondition;//[Offset: 0x0, Size: 0x10]// 0x7611f5f6f0
	FText Prefix;//[Offset: 0x10, Size: 0x18]// 0x7611f5f680
	FText Suffix;//[Offset: 0x28, Size: 0x18]// 0x7611f5f610
	FText Separator;//[Offset: 0x40, Size: 0x18]// 0x7611f5f5a0

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 0x4]// 0x7611f5eb40
	uint32 GameModeFeatureSet_B;//[Offset: 0x4, Size: 0x4]// 0x7611f5ead0
	uint32 GameModeFeatureSet_C;//[Offset: 0x8, Size: 0x4]// 0x7611f5ea60

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 0xc]// 0x7611f5dd10
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x7611f5dc90
	int LeftPlayerNum;//[Offset: 0x10, Size: 0x4]// 0x7611f5dc20

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 0x10]// 0x7611f5de90
	Vector PlaneStartPoint;//[Offset: 0x10, Size: 0xc]// 0x7611f5de10
	Vector PlaneEndPoint;//[Offset: 0x1c, Size: 0xc]// 0x7611f5dd90
	CircleDataMining[] CircleDataMining;//[Offset: 0x28, Size: 0x10]// 0x7611f5da80
	int GamePlayingTime;//[Offset: 0x38, Size: 0x4]// 0x7611f5da10
	GameWatchReport[] WatchReport;//[Offset: 0x40, Size: 0x10]// 0x7611f5d510
	int TotalGeneratedPickup;//[Offset: 0x50, Size: 0x4]// 0x7611f5d4a0

--------------------------------
Class: GameWatchReport
	uint64 player_uid;//[Offset: 0x0, Size: 0x8]// 0x7611f5d9a0
	float total_time;//[Offset: 0x8, Size: 0x4]// 0x7611f5d930
	WatchFlow[] watch_flow;//[Offset: 0x10, Size: 0x10]// 0x7611f5d6b0

--------------------------------
Class: WatchFlow
	uint64 UID;//[Offset: 0x0, Size: 0x8]// 0x7611f5d8c0
	uint32 sec;//[Offset: 0x8, Size: 0x4]// 0x7611f5d850

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28, Size: 0x50]// 0x75a81e9780
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x78, Size: 0x50]// 0x75a81e9840
	<FString,int> EventRecursionCounts;//[Offset: 0xc8, Size: 0x50]// 0x75a81e9900

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 0x50]// 0x75cdbd01c0

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x28, Size: 0x10]// 0x75a81c21f0
	Object* ListenerEntity;//[Offset: 0x88, Size: 0x8]// 0x75a81dc080
	Property*[] Params;//[Offset: 0x90, Size: 0x10]// 0x75a81dc280

--------------------------------
Class: ImmediateUIManager.Object
	ImmediateUI[] AllStyleInstance;//[Offset: 0x28, Size: 0x10]// 0x75a7b59000

--------------------------------
Class: ImmediateUI
	int UID;//[Offset: 0x0, Size: 0x4]// 0x76119be8c0
	Widget*[] UIWidget;//[Offset: 0x8, Size: 0x10]// 0x760d23e300

--------------------------------
Class: RTPCParamInfo
	FString RTPCKey;//[Offset: 0x0, Size: 0x10]// 0x7611f5c4f0
	float Value;//[Offset: 0x10, Size: 0x4]// 0x7611f5c480
	int InterpolationTimeMs;//[Offset: 0x14, Size: 0x4]// 0x7611f5c410

--------------------------------
Class: WeatherTemplateManager.ActorComponent.Object
	delegate WeatherTemplateChangedDelegate;//[Offset: 0x118, Size: 0x10]// 0x75a8475900
	STExtraSkyBox* SkyBox;//[Offset: 0x128, Size: 0x8]// 0x75a8475980
	WeatherTemplateSettings[] WeatherTemplateArray;//[Offset: 0x130, Size: 0x10]// 0x75a8475a80
	GlobalWeatherRep GlobalWeatherState;//[Offset: 0x140, Size: 0x10]// 0x75a8475b00
	PlayerWeatherRep PlayerWeatherState;//[Offset: 0x150, Size: 0x4]// 0x75a8475b80
	int NumWeatherTemplateBegunPlay;//[Offset: 0x158, Size: 0x4]// 0x75a7b91810
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]// 0x75a8475c00
	void ServerSeekGlobalWeather(float TimePosition);// 0x482cef8
	void ServerBlendPlayerWeatherTo(int PlayerKey, int Index);// 0x482ce44
	void ServerBlendGlobalWeatherTo(int Index);// 0x482cdc8
	void OnWeatherTemplateStateChanged(WeatherTemplate* WeatherTemplate);// 0x482cd4c
	void OnWeatherTemplateBeginPlay(WeatherTemplate* WeatherTemplate);// 0x482ccd0
	void OnWeatherParamChanged(out const WeatherParamCollection Collection);// 0x482cad8
	void OnRep_PlayerWeatherState();// 0x482cac4
	void OnRep_GlobalWeatherState();// 0x482cab0
	enum GetWeatherMode();// 0x482ca7c
	void ClientSeekPlayerWeather(float TimePosition);// 0x482ca00

--------------------------------
Class: STExtraSkyBox.AtmosphericSkyBoxActor.Actor.Object
	DirectionalLightComponent* MainLight;//[Offset: 0x520, Size: 0x8]// 0x75a85f3080
	SkyLightComponent* SkyLight;//[Offset: 0x528, Size: 0x8]// 0x75a85f3100
	ExponentialHeightFogComponent* heightFog;//[Offset: 0x530, Size: 0x8]// 0x75a85f3180
	LensFlareActor* LensFlareActor;//[Offset: 0x538, Size: 0x8]// 0x75a85f3200
	Actor* SunActor;//[Offset: 0x540, Size: 0x8]// 0x75a85f3280
	LinearColor DirectionalLightColor;//[Offset: 0x548, Size: 0x10]// 0x75a85f3300
	float DirectionalLightIntensity;//[Offset: 0x558, Size: 0x4]// 0x75a85e3dc0
	float DirectionalLightTemperature;//[Offset: 0x55c, Size: 0x4]// 0x75a85e3e30
	float SkyLightIntensity;//[Offset: 0x560, Size: 0x4]// 0x75a85e3ea0
	LinearColor SkyLightColor;//[Offset: 0x564, Size: 0x10]// 0x75a85f3380
	LinearColor SkyLightLowerHemisphereColor;//[Offset: 0x574, Size: 0x10]// 0x75a85f3400
	float FogDensity;//[Offset: 0x584, Size: 0x4]// 0x75a85e3f10
	float FogLowHeight;//[Offset: 0x588, Size: 0x4]// 0x75a85e3f80
	float FogLowDensity;//[Offset: 0x58c, Size: 0x4]// 0x75bcaf5000
	LinearColor FogLowColor;//[Offset: 0x590, Size: 0x10]// 0x75a85f3480
	float FogHighHeight;//[Offset: 0x5a0, Size: 0x4]// 0x75bcaf5070
	float FogHighDensity;//[Offset: 0x5a4, Size: 0x4]// 0x75bcaf50e0
	LinearColor FogHighColor;//[Offset: 0x5a8, Size: 0x10]// 0x75a85f3500
	LinearColor FogInscatteringColor;//[Offset: 0x5b8, Size: 0x10]// 0x75a85f3580
	float FogHeightFalloff;//[Offset: 0x5c8, Size: 0x4]// 0x75bcaf5150
	float FogMaxOpacity;//[Offset: 0x5cc, Size: 0x4]// 0x75bcaf51c0
	float FogStartDistance;//[Offset: 0x5d0, Size: 0x4]// 0x75bcaf5230
	bool bUseLensFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1]// 0x75a85f3600

--------------------------------
Class: AtmosphericSkyBoxActor.Actor.Object
	AtmosphericSkyBoxComponent* Component;//[Offset: 0x510, Size: 0x8]// 0x75a85f3680
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1]// 0x75a85f3700
	void OnRep_bEnabled();// 0x6da071c

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e9, Size: 0x1]// 0x75bca6e900
	float OcclusionMaskDarkness;//[Offset: 0x3ec, Size: 0x4]// 0x75a78863b0
	float OcclusionDepthRange;//[Offset: 0x3f0, Size: 0x4]// 0x75a7886420
	Vector LightShaftOverrideDirection;//[Offset: 0x3f4, Size: 0xc]// 0x75bca6e980
	float WholeSceneDynamicShadowRadius;//[Offset: 0x400, Size: 0x4]// 0x75a7886490
	float DynamicShadowDistanceMovableLight;//[Offset: 0x404, Size: 0x4]// 0x75a7886500
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x408, Size: 0x4]// 0x75a7886570
	int DynamicShadowCascades;//[Offset: 0x40c, Size: 0x4]// 0x75a78865e0
	float CascadeDistributionExponent;//[Offset: 0x410, Size: 0x4]// 0x75a7886650
	float CascadeTransitionFraction;//[Offset: 0x414, Size: 0x4]// 0x75a78866c0
	float ShadowDistanceFadeoutFraction;//[Offset: 0x418, Size: 0x4]// 0x75a7886730
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 0x1]// 0x75bca6ea00
	float ShadowCenterOffset;//[Offset: 0x420, Size: 0x4]// 0x75a78867a0
	float ShadowIndependentRadius;//[Offset: 0x424, Size: 0x4]// 0x75a7886810
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x428, Size: 0x1]// 0x75bca6ea80
	int FarShadowCascadeCount;//[Offset: 0x42c, Size: 0x4]// 0x75a7886880
	float FarShadowDistance;//[Offset: 0x430, Size: 0x4]// 0x75a78868f0
	float DistanceFieldShadowDistance;//[Offset: 0x434, Size: 0x4]// 0x75a7886960
	float LightSourceAngle;//[Offset: 0x438, Size: 0x4]// 0x75a78869d0
	float TraceDistance;//[Offset: 0x43c, Size: 0x4]// 0x75a7886a40
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x440, Size: 0x10]// 0x75bca6eb00
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1]// 0x75bca6eb80
	bool bCastsLandscapeShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 0x1]// 0x75bca6ec00
	float LandscapeShadowColor;//[Offset: 0x454, Size: 0x4]// 0x75a7886ab0
	float LandscapeShadowOffset;//[Offset: 0x458, Size: 0x4]// 0x75a7886b20
	float LandscapeShadowSoftHeight;//[Offset: 0x45c, Size: 0x4]// 0x75a7886b90
	float LandscapeShadowPixelPrecision;//[Offset: 0x460, Size: 0x4]// 0x75a7886c00
	LandscapeGeometryAsset* LandscapeGeometry;//[Offset: 0x468, Size: 0x8]// 0x75bca6ec80
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]// 0x75bca6ed00
	float SoftShadowSoftness;//[Offset: 0x474, Size: 0x4]// 0x75a7886c70
	float ShadowBlendFactor;//[Offset: 0x478, Size: 0x4]// 0x75a7886ce0
	float BoundsScale;//[Offset: 0x47c, Size: 0x4]// 0x75a7886d50
	float NearPlaneOffset;//[Offset: 0x480, Size: 0x4]// 0x75a7886dc0
	float FarPlaneOffset;//[Offset: 0x484, Size: 0x4]// 0x75a7886e30
	float SplitNearOffset;//[Offset: 0x488, Size: 0x4]// 0x75a7886ea0
	float SplitFarOffset;//[Offset: 0x48c, Size: 0x4]// 0x75a7886f10
	float ShadowMapResolution;//[Offset: 0x490, Size: 0x4]// 0x75a7886f80
	Color ModulatedShadowColor;//[Offset: 0x494, Size: 0x4]// 0x75bca6ed80
	ACESParameter[] ACESParameters;//[Offset: 0x498, Size: 0x10]// 0x75bca6ee80
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a8, Size: 0x1]// 0x75bca6ef00
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a8, Size: 0x1]// 0x75bca6ef80
	Texture* CloudShadowTexture;//[Offset: 0x4b0, Size: 0x8]// 0x75bca6f000
	float CloudShadowTileSize;//[Offset: 0x4b8, Size: 0x4]// 0x75a7886ff0
	float CloudShadowDensity;//[Offset: 0x4bc, Size: 0x4]// 0x75a7887060
	Vector2D CloudShadowWinSpeed;//[Offset: 0x4c0, Size: 0x8]// 0x75bca6f080
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x6dde764
	void SetOcclusionMaskDarkness(float NewValue);// 0x6dde6e8
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x6dde668
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x6dde5e4
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x6dde568
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x6dde4ec
	void SetDynamicShadowCascades(int NewValue);// 0x6dde470
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x6dde3e8
	void SetCloudShadowTileSize(float InValue);// 0x6dde36c
	void SetCloudShadowTexture(Texture* InTexture);// 0x6dde2f0
	void SetCloudShadowDensity(float InDensity);// 0x6dde274
	void SetCastsCloudShadow(bool InValue);// 0x6dde1f0
	void SetCascadeTransitionFraction(float NewValue);// 0x6dde174
	void SetCascadeDistributionExponent(float NewValue);// 0x6dde0f8

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]// 0x75d0a858d0

--------------------------------
Class: LandscapeGeometryAsset.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x30, Size: 0x10]// 0x75a7972580
	Vector[] Normals;//[Offset: 0x40, Size: 0x10]// 0x75a7972680
	Vector2D[] UV;//[Offset: 0x50, Size: 0x10]// 0x75a7972780
	int[] Indices;//[Offset: 0x60, Size: 0x10]// 0x75a7972800
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x70, Size: 0x50]// 0x75a795c880
	int ComponentIndexCount;//[Offset: 0xc0, Size: 0x4]// 0x75a79a05a0
	int ComponentVertexCount;//[Offset: 0xc4, Size: 0x4]// 0x75a79a0610
	<FString,LevelComponentMapValue> SubLevelComponentMap;//[Offset: 0xc8, Size: 0x50]// 0x75a795c940
	StaticMesh* HighQualityMesh;//[Offset: 0x118, Size: 0x28]// 0x75a7972980
	float HighQualityMeshDestroyHight;//[Offset: 0x140, Size: 0x4]// 0x75a79a06f0
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0x148, Size: 0x50]// 0x75a795ca00

--------------------------------
Class: LevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x760d200ff0
	int[] IndexOffsetArray;//[Offset: 0x10, Size: 0x10]// 0x760d1f2080
	int[] IndexCountArray;//[Offset: 0x20, Size: 0x10]// 0x760d1f2100
	int[] VertexOffsetIndex;//[Offset: 0x30, Size: 0x10]// 0x760d1f2180
	int[] BorderIndex1;//[Offset: 0x40, Size: 0x10]// 0x760d1f2200
	int[] BorderIndex2;//[Offset: 0x50, Size: 0x10]// 0x760d1f2280
	int[] BorderIndex3;//[Offset: 0x60, Size: 0x10]// 0x760d1f2300
	int[] BorderIndex4;//[Offset: 0x70, Size: 0x10]// 0x760d1f2380
	int[] UnderBorderIndex1;//[Offset: 0x80, Size: 0x10]// 0x760d1f2400
	int[] UnderBorderIndex2;//[Offset: 0x90, Size: 0x10]// 0x760d1f2480
	int[] UnderBorderIndex3;//[Offset: 0xa0, Size: 0x10]// 0x760d1f2500
	int[] UnderBorderIndex4;//[Offset: 0xb0, Size: 0x10]// 0x760d1f2580
	int[] BorderIndicesBuffer1;//[Offset: 0xc0, Size: 0x10]// 0x760d1f2600
	int[] BorderIndicesBuffer2;//[Offset: 0xd0, Size: 0x10]// 0x760d1f2680
	int[] BorderIndicesBuffer3;//[Offset: 0xe0, Size: 0x10]// 0x760d1f2700
	int[] BorderIndicesBuffer4;//[Offset: 0xf0, Size: 0x10]// 0x760d1f2780
	FString Sibling1Name;//[Offset: 0x100, Size: 0x10]// 0x760d2016f0
	FString Sibling2Name;//[Offset: 0x110, Size: 0x10]// 0x760d201760
	FString Sibling3Name;//[Offset: 0x120, Size: 0x10]// 0x760d2017d0
	FString Sibling4Name;//[Offset: 0x130, Size: 0x10]// 0x760d201840
	int Sibling1Idx;//[Offset: 0x140, Size: 0x4]// 0x760d2018b0
	int Sibling2Idx;//[Offset: 0x144, Size: 0x4]// 0x760d201920
	int Sibling3Idx;//[Offset: 0x148, Size: 0x4]// 0x760d201990
	int Sibling4Idx;//[Offset: 0x14c, Size: 0x4]// 0x760d201a00

--------------------------------
Class: AtmosphericSkyBoxComponent.SceneComponent.ActorComponent.Object
	bool RenderDynamicSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]// 0x75a7897e00
	Texture2D* NoiseTexture;//[Offset: 0x2b8, Size: 0x8]// 0x75a7897e80
	float RainyDegree;//[Offset: 0x30c, Size: 0x4]// 0x75a792f3b0
	TOD_AtmosphereParameters Atmosphere;//[Offset: 0x310, Size: 0x40]// 0x75a7897f00
	TOD_DayParameters Day;//[Offset: 0x350, Size: 0x10]// 0x75a7897f80
	TOD_LightParameters Light;//[Offset: 0x360, Size: 0x10]// 0x75a7898000
	TOD_CloudPBRParameters CloudsPbr;//[Offset: 0x370, Size: 0x20]// 0x75a7898080
	TOD_Time TodTime;//[Offset: 0x404, Size: 0x8]// 0x75a7898100
	TOD_Animation TodAnimation;//[Offset: 0x410, Size: 0x20]// 0x75a7898180
	TOD_Sun TodSunParams;//[Offset: 0x430, Size: 0xc]// 0x75a7898200
	Actor* SunActor;//[Offset: 0x440, Size: 0x8]// 0x75a7898280
	LightingChannels LightingChannels;//[Offset: 0x448, Size: 0x1]// 0x75a7898300

--------------------------------
Class: TOD_AtmosphereParameters
	LinearColor ScatteringColor;//[Offset: 0x0, Size: 0x10]// 0x7612070c20
	float RayleighMultiplier;//[Offset: 0x10, Size: 0x4]// 0x7612070bb0
	float MieMultiplier;//[Offset: 0x14, Size: 0x4]// 0x7612070b40
	float Brightness;//[Offset: 0x18, Size: 0x4]// 0x7612070ad0
	float Contrast;//[Offset: 0x1c, Size: 0x4]// 0x7612070a60
	float Directionality;//[Offset: 0x20, Size: 0x4]// 0x76120709f0
	float Haziness;//[Offset: 0x24, Size: 0x4]// 0x7612070980
	float Fogginess;//[Offset: 0x28, Size: 0x4]// 0x7612070910
	float FogBrightness;//[Offset: 0x2c, Size: 0x4]// 0x76120708a0
	LinearColor Hack_SunFaceColor;//[Offset: 0x30, Size: 0x10]// 0x7612070820

--------------------------------
Class: TOD_DayParameters
	LinearColor SunLightColor;//[Offset: 0x0, Size: 0x10]// 0x7612070680

--------------------------------
Class: TOD_LightParameters
	float Falloff;//[Offset: 0x0, Size: 0x4]// 0x76120704f0
	float Coloring;//[Offset: 0x4, Size: 0x4]// 0x7612070480
	float SkyColoring;//[Offset: 0x8, Size: 0x4]// 0x7612070410
	float CloudColoring;//[Offset: 0xc, Size: 0x4]// 0x76120703a0

--------------------------------
Class: TOD_CloudPBRParameters
	float Scale;//[Offset: 0x0, Size: 0x4]// 0x7612070210
	float UvPow;//[Offset: 0x4, Size: 0x4]// 0x76120701a0
	float Speed;//[Offset: 0x8, Size: 0x4]// 0x7612070130
	float CloudCover;//[Offset: 0xc, Size: 0x4]// 0x76120700c0
	float Brightness;//[Offset: 0x10, Size: 0x4]// 0x7612070050

--------------------------------
Class: TOD_Time
	float CurrTime;//[Offset: 0x0, Size: 0x4]// 0x761206fec0
	float DirectionLightAngel360;//[Offset: 0x4, Size: 0x4]// 0x761206fe50

--------------------------------
Class: TOD_Animation
	float WindDegrees;//[Offset: 0x0, Size: 0x4]// 0x75d100f610
	float WindSpeed;//[Offset: 0x4, Size: 0x4]// 0x75d100f680

--------------------------------
Class: TOD_Sun
	float SunDis;//[Offset: 0x0, Size: 0x4]// 0x761206fcc0
	float SunScale;//[Offset: 0x4, Size: 0x4]// 0x761206fc50
	bool UseSun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x761206fbd0

--------------------------------
Class: LensFlareActor.CameraObserverActor.Actor.Object
	bool bEnableCustomSunDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]// 0x75bca79f80
	float CustomPitch;//[Offset: 0x514, Size: 0x4]// 0x75a88ebde0
	float CustomYaw;//[Offset: 0x518, Size: 0x4]// 0x75a88ebe50
	bool EnableSun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]// 0x75bca7a000
	float SunSize;//[Offset: 0x520, Size: 0x4]// 0x75a88ebec0
	LinearColor SunColor;//[Offset: 0x524, Size: 0x10]// 0x75bca7a080
	LinearColor SunTint;//[Offset: 0x534, Size: 0x10]// 0x75bca7a100
	float WorldRadius;//[Offset: 0x544, Size: 0x4]// 0x75a88ebf30
	Vector WorldOrigin;//[Offset: 0x548, Size: 0xc]// 0x75bca7a180
	Vector2D SunUV0;//[Offset: 0x554, Size: 0x8]// 0x75bca7a200
	Vector2D SunUVSize;//[Offset: 0x55c, Size: 0x8]// 0x75bca7a280
	MaterialInterface* SunMaterial;//[Offset: 0x568, Size: 0x8]// 0x75bca7a300
	int SunTranslucentSortPriority;//[Offset: 0x570, Size: 0x4]// 0x75a88ebfa0
	byte SunDetailMode;//[Offset: 0x574, Size: 0x1]// 0x75bca7a380
	bool EnableHalo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 0x1]// 0x75bca7a400
	float HaloSize;//[Offset: 0x578, Size: 0x4]// 0x75a88ec010
	LinearColor HaloColor;//[Offset: 0x57c, Size: 0x10]// 0x75bca7a480
	Vector2D HaloUV0;//[Offset: 0x58c, Size: 0x8]// 0x75bca7a500
	Vector2D HaloUVSize;//[Offset: 0x594, Size: 0x8]// 0x75bca7a580
	MaterialInterface* HaloMaterial;//[Offset: 0x5a0, Size: 0x8]// 0x75bca7a600
	uint32 HaloTranslucentSortPriority;//[Offset: 0x5a8, Size: 0x4]// 0x75a88ec080
	float HaloFadeSpeed;//[Offset: 0x5ac, Size: 0x4]// 0x75a88ec0f0
	byte HaloDetailMode;//[Offset: 0x5b0, Size: 0x1]// 0x75bca7a680
	bool EnableLensFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]// 0x75bca7a700
	LensFlareElement[] LensFlareElements;//[Offset: 0x5b8, Size: 0x10]// 0x75bca7a800
	MaterialInterface* LensFlareMaterial;//[Offset: 0x5c8, Size: 0x8]// 0x75bca7a880
	uint32 LensFlareTranslucentSortPriority;//[Offset: 0x5d0, Size: 0x4]// 0x75a88ec160
	float LensFlareFadeSpeed;//[Offset: 0x5d4, Size: 0x4]// 0x75a88ec1d0
	byte LensFlareDetailMode;//[Offset: 0x5d8, Size: 0x1]// 0x75bca7a900
	RuntimeMeshComponent* Sun;//[Offset: 0x5e0, Size: 0x8]// 0x75bca7a980
	RuntimeMeshComponent* Halo;//[Offset: 0x5e8, Size: 0x8]// 0x75bca7aa00
	RuntimeMeshComponent* LensFlare;//[Offset: 0x5f0, Size: 0x8]// 0x75bca7aa80

--------------------------------
Class: CameraObserverActor.Actor.Object

--------------------------------
Class: LensFlareElement
	float Position;//[Offset: 0x0, Size: 0x4]// 0x76121a1130
	float Size;//[Offset: 0x4, Size: 0x4]// 0x76121a10c0
	Vector2D UV0;//[Offset: 0x8, Size: 0x8]// 0x76121a1040
	Vector2D UVSize;//[Offset: 0x10, Size: 0x8]// 0x76121a0fc0
	LinearColor Color;//[Offset: 0x18, Size: 0x10]// 0x76121a0f40

--------------------------------
Class: WeatherTemplateSettings
	WeatherTemplate* WeatherTemplate;//[Offset: 0x0, Size: 0x8]// 0x7612313b80
	bool bAutoJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7612313b00
	float PlaybackDuration;//[Offset: 0xc, Size: 0x4]// 0x76119ba8e0
	WeatherTemplate* NextWeatherTemplate;//[Offset: 0x10, Size: 0x8]// 0x7612313a80

--------------------------------
Class: WeatherTemplate.Actor.Object
	delegate WeatherParamChangedDelegate;//[Offset: 0x510, Size: 0x10]// 0x75a8475f00
	delegate StatusChangedDelegate;//[Offset: 0x520, Size: 0x10]// 0x75a8475f80
	delegate SeekTimeCursorDelegate;//[Offset: 0x530, Size: 0x10]// 0x75a8476000
	WeatherSequenceUnit[] WeatherSequence;//[Offset: 0x540, Size: 0x10]// 0x75a8476100
	WeatherTimelineEvent[] TimelineEvents;//[Offset: 0x550, Size: 0x10]// 0x75a8476200
	WeatherTimelineEffect[] TimelineEffects;//[Offset: 0x560, Size: 0x10]// 0x75a8476300
	float PlayRate;//[Offset: 0x570, Size: 0x4]// 0x75a7b91ab0
	int ID;//[Offset: 0x574, Size: 0x4]// 0x75a7b91b20
	float BlendDuration;//[Offset: 0x578, Size: 0x4]// 0x75a7b91b90
	CurveFloat* BlendCurve;//[Offset: 0x580, Size: 0x8]// 0x75a8476380
	bool bAutoJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]// 0x75a8476400
	float PlaybackDuration;//[Offset: 0x58c, Size: 0x4]// 0x75a7b91c00
	WeatherTemplate* NextWeatherTemplate;//[Offset: 0x590, Size: 0x8]// 0x75a8476480
	WeatherParamCollectionTrack DataTrack;//[Offset: 0x598, Size: 0x10]// 0x75a8476500
	byte Status;//[Offset: 0x5a8, Size: 0x1]// 0x75a8476580
	float TimeCursorPosition;//[Offset: 0x5ac, Size: 0x4]// 0x75a7b91c70
	float StartTime;//[Offset: 0x5b0, Size: 0x4]// 0x75a7b91ce0
	WeatherParamCollection SourceParamCollection;//[Offset: 0x5b8, Size: 0x218]// 0x75a8476680
	float StartBlendTime;//[Offset: 0x7d0, Size: 0x4]// 0x75a7b91d50
	void SetPlayRate(const float InPlayRate);// 0x482c22c
	void Seek(const float NewPosition);// 0x482c1b0
	void Play();// 0x482c19c
	void Pause();// 0x482c188
	bool IsPlaying();// 0x482c150
	bool IsPaused();// 0x482c118
	float GetPlayTime();// 0x482c0e4
	float GetPlayRate();// 0x482c0b0
	void BlendIn(out const WeatherParamCollection InSourceParamCollection);// 0x482beb8

--------------------------------
Class: WeatherSequenceUnit
	enum Type;//[Offset: 0x0, Size: 0x1]// 0x7612313800
	WeatherSequenceKeyFrame KeyFrame;//[Offset: 0x8, Size: 0x10]// 0x7612313700
	WeatherSequenceLink Link;//[Offset: 0x18, Size: 0x10]// 0x7612313600

--------------------------------
Class: WeatherSequenceKeyFrame
	WeatherStyle* Style;//[Offset: 0x0, Size: 0x8]// 0x7612313780
	float HourOfDay;//[Offset: 0x8, Size: 0x4]// 0x76119ba720
	float Duration;//[Offset: 0xc, Size: 0x4]// 0x76119ba640

--------------------------------
Class: WeatherStyle.DataAsset.Object
	WeatherParamCollection Collection;//[Offset: 0x30, Size: 0x218]// 0x75a8475880

--------------------------------
Class: WeatherParamCollection
	LinearColor DirectionalLightColor;//[Offset: 0x0, Size: 0x10]// 0x76120714e0
	float DirectionalLightIntensity;//[Offset: 0x10, Size: 0x4]// 0x7612071470
	float DirectionalLightTemperature;//[Offset: 0x14, Size: 0x4]// 0x7612071400
	float SkyLightIntensity;//[Offset: 0x18, Size: 0x4]// 0x7612071390
	LinearColor SkyLightColor;//[Offset: 0x1c, Size: 0x10]// 0x7612071310
	LinearColor SkyLightLowerHemisphereColor;//[Offset: 0x2c, Size: 0x10]// 0x7612071290
	float FogDensity;//[Offset: 0x3c, Size: 0x4]// 0x7612071220
	float FogLowHeight;//[Offset: 0x40, Size: 0x4]// 0x76120711b0
	float FogLowDensity;//[Offset: 0x44, Size: 0x4]// 0x7612071140
	LinearColor FogLowColor;//[Offset: 0x48, Size: 0x10]// 0x76120710c0
	float FogHighHeight;//[Offset: 0x58, Size: 0x4]// 0x7612071050
	float FogHighDensity;//[Offset: 0x5c, Size: 0x4]// 0x7612070fe0
	LinearColor FogHighColor;//[Offset: 0x60, Size: 0x10]// 0x7612070f60
	LinearColor FogInscatteringColor;//[Offset: 0x70, Size: 0x10]// 0x7612070ee0
	float FogHeightFalloff;//[Offset: 0x80, Size: 0x4]// 0x7612070e70
	float FogMaxOpacity;//[Offset: 0x84, Size: 0x4]// 0x7612070e00
	float FogStartDistance;//[Offset: 0x88, Size: 0x4]// 0x7612070d90
	bool bUseLensFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]// 0x7612070d10
	float AtmosphereRainyDegree;//[Offset: 0x90, Size: 0x4]// 0x7612070ca0
	TOD_AtmosphereParameters AtmosphereParam;//[Offset: 0x94, Size: 0x40]// 0x7612070700
	TOD_DayParameters AtmosphereDayParam;//[Offset: 0xd4, Size: 0x10]// 0x7612070560
	TOD_LightParameters AtmosphereLightParam;//[Offset: 0xe4, Size: 0x10]// 0x7612070280
	TOD_CloudPBRParameters AtmosphereCloudParam;//[Offset: 0xf4, Size: 0x20]// 0x761206ff30
	TOD_Time AtmosphereTimeParam;//[Offset: 0x114, Size: 0x8]// 0x761206fd30
	TOD_Sun AtmosphereSunParam;//[Offset: 0x11c, Size: 0xc]// 0x761206fab0
	<FName,float> ExternalFloatDictionary;//[Offset: 0x128, Size: 0x50]// 0x761206f920
	<FName,LinearColor> ExternalColorDictionary;//[Offset: 0x178, Size: 0x50]// 0x761206f780
	<FString,CurveFloat*> CurveDictionary;//[Offset: 0x1c8, Size: 0x50]// 0x761206f5e0

--------------------------------
Class: WeatherSequenceLink
	float BlendTime;//[Offset: 0x0, Size: 0x4]// 0x76119ba480
	CurveFloat* BlendCurve;//[Offset: 0x8, Size: 0x8]// 0x7612313680

--------------------------------
Class: WeatherTimelineEvent
	float Time;//[Offset: 0x0, Size: 0x4]// 0x76119ba5d0
	enum Type;//[Offset: 0x4, Size: 0x1]// 0x7612236c20
	UIMsgParams UIMsgParams;//[Offset: 0x8, Size: 0x38]// 0x76122368b0
	TipsParams TipsParams;//[Offset: 0x40, Size: 0x18]// 0x76122365b0
	AkEventParams AkEventParams;//[Offset: 0x58, Size: 0x8]// 0x7612236410
	WeatherTimelineFunction CallbackFunction;//[Offset: 0x60, Size: 0x8]// 0x7612236390
	enum Runside;//[Offset: 0x68, Size: 0x1]// 0x7612236290
	float LastTriggerTime;//[Offset: 0x6c, Size: 0x4]// 0x7612236220
	Function* Function;//[Offset: 0x70, Size: 0x8]// 0x76122361a0

--------------------------------
Class: UIMsgParams
	FString Message;//[Offset: 0x0, Size: 0x10]// 0x7612236bb0
	FString ModuleName;//[Offset: 0x10, Size: 0x10]// 0x7612236b40
	bool bWithParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7612236ac0
	FString[] Params;//[Offset: 0x28, Size: 0x10]// 0x76122369d0

--------------------------------
Class: TipsParams
	int MsgID;//[Offset: 0x0, Size: 0x4]// 0x7612236840
	bool bWithParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x76122367c0
	FString[] Params;//[Offset: 0x8, Size: 0x10]// 0x76122366d0

--------------------------------
Class: AkEventParams
	AkAudioEvent* AkEvent;//[Offset: 0x0, Size: 0x8]// 0x7612236530

--------------------------------
Class: WeatherTimelineFunction
	FName FunctionName;//[Offset: 0x0, Size: 0x8]// 0x7612235ac0

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: WeatherTimelineEffect
	float StartTimeSeconds;//[Offset: 0x0, Size: 0x4]// 0x7612236090
	float EndTimeSeconds;//[Offset: 0x4, Size: 0x4]// 0x7612236020
	enum Type;//[Offset: 0x8, Size: 0x1]// 0x7612235f20
	ScreenAppearanceParams ScreenAppearanceParams;//[Offset: 0x10, Size: 0x18]// 0x7612235bb0
	WeatherTimelineFunction EnterCallbackFunction;//[Offset: 0x28, Size: 0x8]// 0x7612235b30
	WeatherTimelineFunction ExitCallbackFunction;//[Offset: 0x30, Size: 0x8]// 0x76122359a0
	enum Runside;//[Offset: 0x38, Size: 0x1]// 0x76122358a0
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]// 0x7612235820
	Function* EnterFunction;//[Offset: 0x40, Size: 0x8]// 0x76122357a0
	Function* ExitFunction;//[Offset: 0x48, Size: 0x8]// 0x7612235720

--------------------------------
Class: ScreenAppearanceParams
	byte AppearanceType;//[Offset: 0x0, Size: 0x1]// 0x7612235ea0
	float Concentration;//[Offset: 0x4, Size: 0x4]// 0x7612235e30
	FName ShaderName;//[Offset: 0x8, Size: 0x8]// 0x7612235dc0
	byte ParticleType;//[Offset: 0x10, Size: 0x1]// 0x7612235d40
	float ParticleDegree;//[Offset: 0x14, Size: 0x4]// 0x7612235cd0

--------------------------------
Class: WeatherParamCollectionTrack
	WeatherParamCollectionRange[] Ranges;//[Offset: 0x0, Size: 0x10]// 0x7612313c00

--------------------------------
Class: WeatherParamCollectionRange
	float StartTimeSeconds;//[Offset: 0x0, Size: 0x4]// 0x76119ba9c0
	float EndTimeSeconds;//[Offset: 0x4, Size: 0x4]// 0x76119baa30
	float BlendTimeSeconds;//[Offset: 0x8, Size: 0x4]// 0x76119ba950
	CurveFloat* BlendCurve;//[Offset: 0x10, Size: 0x8]// 0x7612312d00
	WeatherParamCollection Params;//[Offset: 0x18, Size: 0x218]// 0x7612313d00

--------------------------------
Class: GlobalWeatherRep
	int CurrentTemplateIndex;//[Offset: 0x0, Size: 0x4]// 0x76119ba870
	byte ServerStatus;//[Offset: 0x4, Size: 0x1]// 0x7612313a00
	float ServerTimeCursorPosition;//[Offset: 0x8, Size: 0x4]// 0x76119ba800
	float ServerStartTime;//[Offset: 0xc, Size: 0x4]// 0x76119ba790

--------------------------------
Class: PlayerWeatherRep
	int CurrentTemplateIndex;//[Offset: 0x0, Size: 0x4]// 0x761208f150

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x28, Size: 0x10]// 0x761209f120
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x38, Size: 0x10]// 0x761209f0a0
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x4322810
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x432278c
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x43226f0
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x4322674
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0xffffff8a17adf2b0
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0xffffff8a17adf2b0

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0x158, Size: 0x10]// 0x761209e6a0
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0x168, Size: 0x4]// 0x761209e630
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0x16c, Size: 0x4]// 0x761209e5c0
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x761209e540
	delegate IsCheckingFieldOfViewEnabledDelegate;//[Offset: 0x178, Size: 0x10]// 0x761209e4c0
	interface class * SelfActorLocationGetter;//[Offset: 0x188, Size: 0x10]// 0x761209e440
	enum FieldOfViewNotificationStatus;//[Offset: 0x198, Size: 0x1]// 0x761209e340
	float ElapsedSeconds;//[Offset: 0x19c, Size: 0x4]// 0x761209e2d0
	TimerHandle RecursivelyRegisterSelfTimeerHandle;//[Offset: 0x1a0, Size: 0x8]// 0x761209e250
	float CheckFrequencyInSeconds;//[Offset: 0x1a8, Size: 0x4]// 0x761209e1e0
	bool IsNotificationWorking();// 0x43221f4
	static int IsGlobalDebugLineTraceDrawn();// 0x43221bc
	bool IsCheckingFieldOfViewEnabledDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender);// 0xffffff8a17adf2b0
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0xffffff8a17adf2b0
	enum GetFieldOfViewNotificationStatus();// 0x4322188

--------------------------------
Class: SceneRenderActorManager.ActorComponent.Object
	<enum,RenderActorDetail> RenderActorMap;//[Offset: 0x118, Size: 0x50]// 0x75b4cb72c0
	SceneDisplayDirectorBase*[] SceneDisplayDirectorList;//[Offset: 0x168, Size: 0x10]// 0x75a876f400
	void UnRegisterSceneDisplayDirector(SceneDisplayDirectorBase* SceneDisplayDirector);// 0x4501d70
	void RegisterSceneDisplayDirector(SceneDisplayDirectorBase* SceneDisplayDirector);// 0x4501cf4
	void RegisterRenderActorInternal(out SceneRenderActorBase*[] RenderActorList, SceneRenderActorBase* RenderActor, int Order);// 0x4501bd8
	void RegisterRenderActor(enum ActorType, SceneRenderActorBase* RenderActor, int Order);// 0x4501ae4
	void OnResetDisplayAvatarByTag(FString Tag);// 0x4501a0c
	void OnRefreshTeamAssembleDisplayInfoByTag(FString Tag, int ActorIndex, out const TeamAssembleAvatarDisplayInfo DetailInfo);// 0x4501858
	void OnRefreshSceneDisplayCountDownValue(FString Tag, int CountDown, int TotalCountDown);// 0x450170c
	void OnRefreshSceneDisplayAvatarByTag(FString Tag, int ActorIndex, out const PlayerDetailInfo DetailInfo);// 0x4501548
	void OnRefreshDisplayActorNumberByTag(FString Tag, int ActorNumber);// 0x4501434
	void OnRefreshCountDownValue(enum ActorType, int CountDown, int TotalCountDown);// 0x4501344
	int GetTotalDisplayActorNumberByTag(FString Tag);// 0x4501264
	int GetRenderActorNumberByType(enum ActorType);// 0x45011d8
	static SceneRenderActorManager* GetInstance(Object* InWorldContextObject);// 0x450115c
	SceneDisplayDirectorBase* GetDisplayActorByTag(FString Tag, int Index);// 0x4501040
	void DestroySceneDisplayActorByTag(FString Tag);// 0x4500f68
	void DestroyRenderActorByType(enum ActorType);// 0x4500eec
	void DestroyRenderActorByTag(enum ActorType, FString ActorTag);// 0x4500dd4

--------------------------------
Class: RenderActorDetail
	SceneRenderActorBase*[] RenderPawnList;//[Offset: 0x0, Size: 0x10]// 0x76121cfa00

--------------------------------
Class: SceneRenderActorBase.Actor.Object
	STExtraLobbyCharacter* CurrentRenderCharacter;//[Offset: 0x510, Size: 0x8]// 0x75a876ff00
	enum ActorType;//[Offset: 0x518, Size: 0x1]// 0x75a8770000
	FString ActorTag;//[Offset: 0x520, Size: 0x10]// 0x75a87c07d0
	int Order;//[Offset: 0x530, Size: 0x4]// 0x75a87c0840
	Object* RTMaterialInstance;//[Offset: 0x538, Size: 0x8]// 0x75a8770080
	AvatarComponent* CurrentCharacterAvatarComponent;//[Offset: 0x540, Size: 0x8]// 0x75a8770100
	SceneCaptureComponent2D* CurrentCharacterCaptureComponent;//[Offset: 0x548, Size: 0x8]// 0x75a8770180
	WidgetComponent* CharacterInfoWidgetCompoent;//[Offset: 0x550, Size: 0x8]// 0x75a8770200
	void OnRefreshCountDownValue(int CountDown, int TotalCountDown);// 0x4500878
	void OnRefreshAvatarInfoBlueprint(int Gender, out const int[] ItemList);// 0xffffff8a17adf2b0
	void OnDestroyRenderActor();// 0x4500864
	SceneCaptureComponent2D* GetCurrentCharacterCaptureComponent();// 0x4500830
	AvatarComponent* GetCurrentCharacterAvatarComponent();// 0x45007fc
	WidgetComponent* GetCharacterInfoWidgetComponent();// 0x45007c8

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x970, Size: 0x10]// 0x75a8035e80
	bool bEnableAvatarStylePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 0x1]// 0x75a8035f00
	bool bCurAvatarHasPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x981, Size: 0x1]// 0x75a8035f80
	FName curAvatarStyle;//[Offset: 0x988, Size: 0x8]// 0x75b4d7f950
	byte charSceneType;//[Offset: 0x990, Size: 0x1]// 0x75a8036000
	byte lobbyPosIdx;//[Offset: 0x991, Size: 0x1]// 0x75a8036080
	int localLobbyPos;//[Offset: 0x994, Size: 0x4]// 0x75b4d7f9c0
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x998, Size: 0x10]// 0x75a8036100
	bool bUseWingClothBoneRetargetAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 0x1]// 0x75a8036180
	UAEDataTable* SpecialAnimaionWeapons;//[Offset: 0x9b0, Size: 0x8]// 0x75a8036200
	STExtraWeapon* curEquipWeapon;//[Offset: 0x9b8, Size: 0x8]// 0x75a8036280
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x9c0, Size: 0x8]// 0x75a8036300
	LobbyAnimPoseTagSwitcher[] AnimPoseSwitchers;//[Offset: 0x9c8, Size: 0x10]// 0x75a8036400
	LobbyGenderAnim[] LobbyAvatarStyleAnims;//[Offset: 0x9d8, Size: 0x10]// 0x75a8036500
	FString[] ForceOpenAvatarExclusivePoseSystems;//[Offset: 0x9e8, Size: 0x10]// 0x75a8036580
	FString[] ForceOpenAvatarStylePoseSystems;//[Offset: 0x9f8, Size: 0x10]// 0x75a8036600
	LobbyAnimConfigData[] LobbyPoseAnims;//[Offset: 0xa08, Size: 0x10]// 0x75a8036700
	<int,LobbyAnimConfigDataList> SpIdleSlotMap;//[Offset: 0xa18, Size: 0x50]// 0x75a8029d00
	LobbyAnimConfigData[] DefaultLobbyPoseAnims;//[Offset: 0xa68, Size: 0x10]// 0x75a8036880
	delegate lobbyAnimMontagePlayDelegate;//[Offset: 0xa78, Size: 0x10]// 0x75a8036900
	delegate lobbyAnimWeaponChangeDelegate;//[Offset: 0xa88, Size: 0x10]// 0x75a8036980
	delegate LobbyWeaponAnimAdaptDelegate;//[Offset: 0xa98, Size: 0x10]// 0x75a8036a00
	delegate lobbyCharPosChangeDelegate;//[Offset: 0xaa8, Size: 0x10]// 0x75a8036a80
	FString[] AvatarParticleIgnoreNotifies;//[Offset: 0xab8, Size: 0x10]// 0x75a8036b00
	bool bCharacterShouldShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 0x1]// 0x75a8036b80
	delegate EmoteMontageStartEvent;//[Offset: 0xad0, Size: 0x10]// 0x75a8036c00
	delegate EmoteMontageFinishedEvent;//[Offset: 0xae0, Size: 0x10]// 0x75a8036c80
	delegate PaintTrayEvent;//[Offset: 0xaf0, Size: 0x10]// 0x75a8036d00
	delegate EmoteMontageFinishedAlphaContolEvent;//[Offset: 0xb00, Size: 0x10]// 0x75a8036e00
	delegate LobbyResetEvent;//[Offset: 0xb10, Size: 0x10]// 0x75a8036e80
	delegate RotateEndEvent;//[Offset: 0xb20, Size: 0x10]// 0x75a8036f00
	delegate LobbyCharacterPlayEmoteEvent;//[Offset: 0xb30, Size: 0x10]// 0x75a8036f80
	delegate LobbyPlayEmoteAlphaControlEvent;//[Offset: 0xb40, Size: 0x10]// 0x75a8037000
	delegate LobbyCharacterStopEmoteEvent;//[Offset: 0xb50, Size: 0x10]// 0x75a8037080
	bool bIsMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb61, Size: 0x1]// 0x75a8037100
	int ProfileRenderTargetSize;//[Offset: 0xb64, Size: 0x4]// 0x75b4d7fbf0
	SceneCaptureComponent2D* ProfileCaptureComponent;//[Offset: 0xb68, Size: 0x8]// 0x75a8037180
	bool bAutoSetupRenderTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 0x1]// 0x75a8037200
	float ProfileCaptureDelayTime;//[Offset: 0xb74, Size: 0x4]// 0x75b4d7fc60
	TextureRenderTarget2D* ProfileRenderTarget;//[Offset: 0xb78, Size: 0x8]// 0x75a8037280
	enum SkirtPoseType;//[Offset: 0xb88, Size: 0x1]// 0x75a8037380
	float CurMainSkelHairAlpha;//[Offset: 0xb8c, Size: 0x4]// 0x75b4d7fcd0
	int MagicEmoteEffectID;//[Offset: 0xb90, Size: 0x4]// 0x75b4d7fd40
	bool bIsInMagicEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 0x1]// 0x75a8037400
	FString CharacterUId;//[Offset: 0xb98, Size: 0x10]// 0x75b4d7fdb0
	STExtraLobbyCharacter* FromWho;//[Offset: 0xba8, Size: 0x8]// 0x75a8037480
	FString[] UsedCharacterIdArray;//[Offset: 0xbb0, Size: 0x10]// 0x75a8037500
	Transform CharacterRootTrans;//[Offset: 0xbc0, Size: 0x30]// 0x75a8037580
	Transform ModelTransfrom;//[Offset: 0xbf0, Size: 0x30]// 0x75a8037600
	bool bIsTargetCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 0x1]// 0x75a8037680
	bool bHasTriggerEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc21, Size: 0x1]// 0x75a8037700
	FString EmoteEIdleAnimPath;//[Offset: 0xc28, Size: 0x10]// 0x75b4d7fe90
	FString EmoteMeshPath;//[Offset: 0xc38, Size: 0x10]// 0x75b4d7ff00
	int ExistTime;//[Offset: 0xc48, Size: 0x4]// 0x75b4d7ff70
	STExtraLobbyCharacter* MagicSmokeInFromWho;//[Offset: 0xc50, Size: 0x8]// 0x75a8037780
	ParticleSystemComponent* MagicEmoteParticleComp;//[Offset: 0xc78, Size: 0x8]// 0x75a8037800
	ParticleSystemComponent* AfterChangeSmokeParticleComp;//[Offset: 0xc80, Size: 0x8]// 0x75a8037880
	ParticleSystemComponent* MagicEmoteBondageParticleComp;//[Offset: 0xc88, Size: 0x8]// 0x75a8037900
	LobbySceneMgr* LobbySceneMgrActor;//[Offset: 0xc90, Size: 0x8]// 0x75a8037980
	Actor* NeedShowActorModel;//[Offset: 0xc98, Size: 0x8]// 0x75a8037a00
	void UsedCharacterIdArrayAddItem(FString Item);// 0x4629380
	void UnEquipWeaponComponent(int CompID);// 0x4629304
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x4629288
	void TryLoadAndSpawnParticle(FString Path, Transform ParticleTrans, STExtraLobbyCharacter* InFromWho);// 0x4629110
	Object* TryGetBoneRetargetObj(Object* InSourceObj);// 0x462907c
	void TriggerRestMagicEmote();// 0x4629068
	void TriggerBeUsedCharacterMagicEmote();// 0x4629054
	Transform String2Trans(FString InStr);// 0x4628f5c
	void StopPlayEmoteInterruptBlend();// 0x4628f48
	void StopPlayEmote();// 0x4628f34
	void StopEmoteBondageEffect(FString[] BeUsedCharacterId, STExtraLobbyCharacter* InFromWho);// 0x4628d88
	void ShutdownRenderTarget();// 0x4628d74
	bool SetupRenderTarget();// 0x4628d3c
	MeshComponent* SetupMeshComp(MeshComponent* InMeshComp);// 0x4628cb0
	void SetTheseSlotAnimInstanceIdleAnim(int SlotType, bool bIsClear);// 0x4628bf0
	void SetNeedSyncAnim(bool bIsNeed);// 0x4628b70
	void SetLobbyPosIndexInAvatarScene(int Pos);// 0x4628af4
	void SetLobbyPosIndex(byte Pos);// 0x4628a70
	void SetLobbyCharacterProperty(byte SceneType, byte Pos, byte Gender);// 0x4628964
	void SetLobbyAnimGender(byte Gender);// 0x46288d8
	void SetIsMainCharacter(bool bIsMain);// 0x4628858
	void SetEnableAvatarStylePose(bool bEnable);// 0x46287d4
	void SetCharSceneType(byte SceneType);// 0x4628750
	void SetCharacterShow();// 0xffffff8a17adf2b0
	void SetCharacterHide();// 0xffffff8a17adf2b0
	void SetCanTouchRollPawn(bool bIsCan);// 0xffffff8a17adf2b0
	void SetAnimPoseTagSwitcher(FName PoseTag, bool bIsOpen);// 0x4628690
	void ResetLobbyPoseAnimByPosTag(FName PoseTag, bool bIsPlay);// 0x46285d0
	void ResetCharacterPhysics();// 0x46285bc
	void ResetAllAvatarPhysics();// 0x46285a8
	void RefreshWeaponAdaptAnimParam();// 0x462858c
	void RefreshGripAnim();// 0x4628578
	void RefreshClothAdaptAnimParam();// 0x462855c
	void ProfileShot();// 0x4628540
	void PreProfileShot();// 0xffffff8a17adf2b0
	FString PostProfileShot(FString TargetFileName);// 0xffffff8a17adf2b0
	void OnRotateStoppedEventTrigger();// 0x462852c
	bool OnPlayEmote(int EmoteID, bool needIgnoreNotify, bool bNeedLoop);// 0x4628414
	void OnLobbyResetEventTrigger();// 0x4628400
	void OnAvatarEquiped(int SlotType, bool IsEquipped);// 0x4628340
	void MagicSpawnModel(FString MeshPath, FString AnimPath, Transform MeshOffset, float ModelTime, float TurnBackSmokeAdvenceTime, FString[] BeUsedCharacterId, int EffectID, STExtraLobbyCharacter* InFromWho);// 0x4627f48
	void MagicEmoteEventFunc(FString[] BeUsedCharacterArray, int EventType, int EffectID, STExtraLobbyCharacter* InFromWho);// 0x4627d28
	void MagicEmoteEventBroadcastAndSetTimer(FString[] BeUsedCharacterId, int EventType, int EffectID, float ExsitTime, float AdvanceTime);// 0x4627ad0
	void MagicEmoteEventBroadcast(FString[] BeUsedCharacterId, int EventType, int EffectID);// 0x46278ec
	void LoadAndSpawnSelectParticle(FString Path, Transform ParticleTrans);// 0x46277b0
	void LoadAndSpawnAfterChangeParticle(FString Path, FString AfterChangeSmokeParticleOffsetString);// 0x4627648
	void JumpToEmoteSection(FName SectionName);// 0x46275cc
	bool IsForceOpenAvatarStylePose(FString InSystemTag);// 0x46274e8
	bool IsForceOpenAvatarExclusivePose(FString InSystemTag);// 0x4627404
	void HandleOnCharAnimLoadingFinished();// 0x46273f0
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x46273bc
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x46272b8
	byte GetLobbyPosIndex();// 0x4627284
	byte GetLobbyAnimGender();// 0x4627250
	bool GetIsPlayingAnyMontage();// 0x4627218
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0xffffff8a17adf2b0
	STExtraWeapon* GetCurrentWeapon();// 0x46271e4
	bool GetCurrentEmoteIgnoreState();// 0x46271ac
	int GetCurrentEmoteId();// 0x4627178
	<int,AnimInstance*> GetClothAnimInstance();// 0xffffff8a17adf2b0
	byte GetCharSceneType();// 0x4627144
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x4627040
	AnimationAsset* GetAvatarStyleAnimAssetByGender(byte GenderType, FName StyleName);// 0x4626f44
	void ForceAnimationUpdateAtOnce();// 0x4626f30
	void EquipWeaponComponent(int CompID);// 0x4626eb4
	void EquipWeapon(STExtraWeapon* Weapon);// 0x4626e38
	void ClearMagicEmoteEffect();// 0x4626e1c
	void ClearEffectWithoutPhysicsAlphaControll();// 0x4626e08
	void ClearAllTimerAndParticle();// 0x4626df4
	void CheckCurHoldSpecialWeapon();// 0x4626de0
	void CaptureProfile(bool bDeferred);// 0x4626d5c
	void BroadCastStopBondageEffectDelegate();// 0x4626d48

--------------------------------
Class: LobbyAnimPoseTagSwitcher
	FName TagName;//[Offset: 0x0, Size: 0x8]// 0x76121a1c00
	bool IsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x76121a1b80

--------------------------------
Class: LobbyAnimConfigDataList
	LobbyAnimConfigData[] LobbyAnimConfigArray;//[Offset: 0x0, Size: 0x10]// 0x76121a1d10

--------------------------------
Class: LobbySceneMgr.Actor.Object
	delegate LobbyMagicEmoteEventDelagte;//[Offset: 0x510, Size: 0x10]// 0x75a88a6f00
	delegate MagicEmoteFinishEvent;//[Offset: 0x520, Size: 0x10]// 0x75a88a6f80
	delegate MagicEmoteStopEvent;//[Offset: 0x530, Size: 0x10]// 0x75a88a7000
	void UnLoadStreamLevelComplete(int Linkage);// 0x4405438
	void UnloadStreamLevel(FString LevelName, int LevelID, int levelType);// 0x44052ec
	void SetNeedSyncMultiCharacterAnim(bool bNeedSync);// 0x440526c
	void LobbyUnLoadStreamLevelComplete(int Linkage);// 0xffffff8a17adf2b0
	void LobbyLoadStreamLevelComplete(int Linkage);// 0xffffff8a17adf2b0
	void LoadStreamLevelComplete(int Linkage);// 0x44051f0
	void LoadStreamLevel(FString LevelName, int LevelID, int levelType);// 0x44050a4
	bool IsSubLevelLoaded(int LevelID);// 0x4405014
	bool IsLevelContainActor(FString LevelName, Actor* InActor);// 0x4404ef4
	void FlushStreamLevel();// 0x4404ee0
	void EnableSubLevelBybShouldBeVisible(int LevelID, bool Enable);// 0x4404e20
	void EnableSubLevel(int LevelID, bool Enable);// 0x4404d60
	bool AddStreamLevelInRuntime(FString LevelPath);// 0x4404c7c

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x270, Size: 0x10]// 0x75a8993280
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x280, Size: 0x10]// 0x75a8993380
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x290, Size: 0x10]// 0x75a8993480
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x2a0, Size: 0x10]// 0x75a8993580
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x4ed0b94
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x4ed0a40
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte SceneType);// 0x4ed0900
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] animList, byte SceneType);// 0x4ed07f0

--------------------------------
Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 0x1]// 0x760d1fdc80
	FString CharPosName;//[Offset: 0x8, Size: 0x10]// 0x760d205f20
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x18, Size: 0x10]// 0x760d1fdf80

--------------------------------
Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 0x1]// 0x760d1fdd00
	FString GenderTypeName;//[Offset: 0x8, Size: 0x10]// 0x760d205f90
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x18, Size: 0x28]// 0x760d1fdd80
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x40, Size: 0x28]// 0x760d1fde00
	AnimationAsset* WeaponAddAnimSoftPtr_Adapt;//[Offset: 0x68, Size: 0x28]// 0x760d1fde80

--------------------------------
Class: LobbyAsyncLoadCharAnimParams

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum EmoteType;//[Offset: 0x118, Size: 0x1]// 0x75bdd7aa80
	AnimationAsset* AnimAsset;//[Offset: 0x120, Size: 0x28]// 0x75bdd7ab00
	AnimationAsset* AnimIgnoreEffectAsset;//[Offset: 0x148, Size: 0x28]// 0x75bdd7ab80
	ParticleSystem* BubbleAsset;//[Offset: 0x170, Size: 0x28]// 0x75bdd7ac00
	ParticleSystem* HoloLobby;//[Offset: 0x198, Size: 0x28]// 0x75bdd7ac80
	Vector BubbleScale;//[Offset: 0x1c0, Size: 0xc]// 0x75bdd7ad00
	float BubbleShowTime;//[Offset: 0x1cc, Size: 0x4]// 0x75bdde4c70
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]// 0x75bdd7ad80
	bool isHaveContinuousEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]// 0x75bdd7ae00
	bool bNotInterruptByMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 0x1]// 0x75bdd7ae80
	bool bIsScaleActorAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 0x1]// 0x75bdd7af00
	float ScaleActorTimeAtStart;//[Offset: 0x1d4, Size: 0x4]// 0x75bdde4ce0
	bool bSetSlotAnimInvisibleAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]// 0x75bdd7af80
	float SlotAnimInvisibleTimeAtStart;//[Offset: 0x1dc, Size: 0x4]// 0x75bdde4d50
	bool bNeedResolveDragArtifact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]// 0x75bdd7b000
	float ResolveDragArtifactTime;//[Offset: 0x1e4, Size: 0x4]// 0x75bdde4dc0
	bool bOpenLobbyReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]// 0x75bdd7b080
	float BoundScale;//[Offset: 0x1ec, Size: 0x4]// 0x75bdde4e30
	bool bAvoidParticleEffectRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]// 0x75bdd7b100
	bool bIsResetTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]// 0x75bdd7b180
	bool bStartWithCustomTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]// 0x75bdd7b200
	Transform OriginTransform;//[Offset: 0x200, Size: 0x30]// 0x75bdd7b280
	bool bOnLobbyRest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]// 0x75bdd7b300
	EmoteAnimConfig[] AnimAssetByTags;//[Offset: 0x238, Size: 0x10]// 0x75bdd7b400
	float BlendTime;//[Offset: 0x248, Size: 0x4]// 0x75bdde4ea0
	<enum,int> AvatarIDMap;//[Offset: 0x250, Size: 0x50]// 0x75bdd8f580
	float DelayUpdateAvatarAlphaTime;//[Offset: 0x2a0, Size: 0x4]// 0x75bdde4f80
	EmoteSeqConfig[] SeqConfig;//[Offset: 0x2a8, Size: 0x10]// 0x75bdd7b600
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x2b8, Size: 0x10]// 0x75bdd7b700
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x2c8, Size: 0x10]// 0x75bdd7b800
	MultiAnimData[] MultiAnimDatas;//[Offset: 0x2d8, Size: 0x10]// 0x75bdd7b900
	GenderMultiAnimData[] GenderMultiAnimDatas;//[Offset: 0x2e8, Size: 0x10]// 0x75bdd7ba00
	EmoteSlotAnimConfig[] SlotAnimDatas;//[Offset: 0x2f8, Size: 0x10]// 0x75bdd7bb00
	bool HideAllSceneLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]// 0x75bdd7bb80
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x310, Size: 0x8]// 0x75bdd7bc00
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x318, Size: 0x8]// 0x75bdd7bc80
	MVPAvatarDisplayParam MVPAvatarDisplayParam;//[Offset: 0x320, Size: 0x48]// 0x75bdd7bd00
	Vector EmoteColBox;//[Offset: 0x368, Size: 0xc]// 0x75bdd7bd80
	Vector EmoteColOffset;//[Offset: 0x374, Size: 0xc]// 0x75bdd7be00
	bool bOpenHitInterruptColBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]// 0x75bdd7be80
	Vector HitInterruptColBox;//[Offset: 0x384, Size: 0xc]// 0x75bdd7bf00
	Vector HitInterruptColOffset;//[Offset: 0x390, Size: 0xc]// 0x75bdd7bf80
	int PairEmoteID;//[Offset: 0x39c, Size: 0x4]// 0x75bdde4ff0
	Vector2D PairEmoteMoveColBoxSize;//[Offset: 0x3a0, Size: 0x8]// 0x75bdd7c000
	Vector PairEmotePositionOffset;//[Offset: 0x3a8, Size: 0xc]// 0x75bdd7c080
	float PairRange;//[Offset: 0x3b4, Size: 0x4]// 0x75bdde5060
	float PairAngleRange;//[Offset: 0x3b8, Size: 0x4]// 0x75bdde50d0
	ItemSkillsConfig[] SkillsConfigs;//[Offset: 0x3c0, Size: 0x10]// 0x75bdd7c180
	STExtraBaseCharacter* OwnerBaseCharacter;//[Offset: 0x3d0, Size: 0x8]// 0x75bdd7c200
	int BuildID;//[Offset: 0x3d8, Size: 0x4]// 0x75bdde5140
	FName BlackBoardName;//[Offset: 0x3e0, Size: 0x8]// 0x75bdde51b0
	bool PlayEmoteParticle();// 0x41a8908
	bool NotifyPlayEmoteCancel();// 0xffffff8a17adf2b0
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x41a8818
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x41a8578
	bool HandleDrop(int InCount, enum Reason);// 0x41a84a4
	bool HandleDisuse(enum Reason);// 0x41a840c
	BackpackComponent* GetBackPackComponent();// 0x41a83d8
	bool CheckCanPickUp(CharacterAvatarComponent* AvatarComp, int nowCapcity);// 0x41a830c

--------------------------------
Class: EmoteAnimConfig
	FName NameTag;//[Offset: 0x0, Size: 0x8]// 0x7612152ce0
	AnimationAsset* AnimAsset;//[Offset: 0x8, Size: 0x28]// 0x7612152c60
	CameraAnim* EmoteCameraAnimation;//[Offset: 0x30, Size: 0x28]// 0x7612152be0
	CameraAnim* EmoteCameraAnimationLongScreen;//[Offset: 0x58, Size: 0x28]// 0x7612152b60

--------------------------------
Class: EmoteSeqConfig
	FName NameTag;//[Offset: 0x0, Size: 0x8]// 0x7612152a50
	LevelSequence* Seq;//[Offset: 0x8, Size: 0x28]// 0x76121529d0
	LevelSequence* LowLevelSeq;//[Offset: 0x30, Size: 0x28]// 0x7612152950

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 0x28]// 0x7612152730
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 0x28]// 0x76121526b0

--------------------------------
Class: MultiAnimData
	class Character* Character;//[Offset: 0x0, Size: 0x8]// 0x7612153bc0
	AnimationAsset* Anim;//[Offset: 0x8, Size: 0x28]// 0x7612153b40
	bool bCanControlOnAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x7612153ac0
	bool bAttachToCustomizeSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]// 0x7612153a40
	FName AttachToSocket;//[Offset: 0x38, Size: 0x8]// 0x76121539d0

--------------------------------
Class: GenderMultiAnimData
	FName TypeTag;//[Offset: 0x0, Size: 0x8]// 0x76121538c0
	class Character* Character;//[Offset: 0x8, Size: 0x8]// 0x7612153840
	AnimationAsset* Anim;//[Offset: 0x10, Size: 0x28]// 0x76121537c0
	bool bCanControlOnAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x7612153740

--------------------------------
Class: EmoteSlotAnimConfig
	enum targetSlot;//[Offset: 0x0, Size: 0x1]// 0x76121527b0
	LobbyGenderAnimData AnimAsset;//[Offset: 0x8, Size: 0x50]// 0x7612152590
	int AvatarID;//[Offset: 0x58, Size: 0x4]// 0x7612152520

--------------------------------
Class: MVPAvatarDisplayParam
	FString AnimPlaySubLevel;//[Offset: 0x0, Size: 0x10]// 0x7612153630
	CameraAnimParam SpecifyCameraAnim;//[Offset: 0x10, Size: 0x38]// 0x7612152df0

--------------------------------
Class: CameraAnimParam
	bool bStopOtherAnimWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76121535b0
	bool bStopOtherAnimImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7612153530
	bool bKeepLocAndRotWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x76121534b0
	bool bIgnoreAnimTrackStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]// 0x7612153430
	float KeepLocAndRotReverseToFinishTime;//[Offset: 0x4, Size: 0x4]// 0x76121533c0
	CameraAnim* Anim;//[Offset: 0x8, Size: 0x8]// 0x7612153340
	float Rate;//[Offset: 0x10, Size: 0x4]// 0x76121532d0
	float Scale;//[Offset: 0x14, Size: 0x4]// 0x7612153260
	float BlendInTime;//[Offset: 0x18, Size: 0x4]// 0x76121531f0
	float BlendOutTime;//[Offset: 0x1c, Size: 0x4]// 0x7612153180
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x7612153100
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x7612153080
	float Duration;//[Offset: 0x24, Size: 0x4]// 0x7612153010
	byte PlaySpace;//[Offset: 0x28, Size: 0x1]// 0x7612152f90
	Rotator UserPlaySpaceRot;//[Offset: 0x2c, Size: 0xc]// 0x7612152f10

--------------------------------
Class: SceneDisplayDirectorBase.Actor.Object
	FString DirectorTag;//[Offset: 0x510, Size: 0x10]// 0x75a87c18e0
	int TipMsgID;//[Offset: 0x520, Size: 0x4]// 0x75a87c1950
	bool IsUseLodControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]// 0x75b4cc3d00
	int CountDownTimeThreshold;//[Offset: 0x528, Size: 0x4]// 0x75a87c19c0
	int RefreshCharmPlayerTimeThreshold;//[Offset: 0x52c, Size: 0x4]// 0x75a87c1a30
	int StopRefreshCharmPlayerTimeThreshold;//[Offset: 0x530, Size: 0x4]// 0x75a87c1aa0
	FString TemplateWidgetPath;//[Offset: 0x538, Size: 0x10]// 0x75a87c1b10
	FString[] CountDownWidgetTemplates;//[Offset: 0x548, Size: 0x10]// 0x75b4cc3d80
	int[] FilterItemIdList;//[Offset: 0x558, Size: 0x10]// 0x75b4cc3e00
	int[] FilterItemTypeIdList;//[Offset: 0x568, Size: 0x10]// 0x75b4cc3e80
	enum[] FilterSlotList;//[Offset: 0x578, Size: 0x10]// 0x75b4cc4000
	CameraAnimParam CameraAnimParam;//[Offset: 0x588, Size: 0x38]// 0x75b4cc4080
	AvatarDisplayPoseComponent*[] AvatarDisplayPoseList;//[Offset: 0x5c0, Size: 0x10]// 0x75b4cc4180
	WidgetComponent*[] WidgetCompoentList;//[Offset: 0x5d0, Size: 0x10]// 0x75b4cc4280
	CustomActorIndicatorWidget*[] ActorIndicatorWidgetList;//[Offset: 0x5e0, Size: 0x10]// 0x75b4cc4380
	VehicleAvatarDisplayPoseComponent*[] VehicleAvatarDisplayPostList;//[Offset: 0x5f0, Size: 0x10]// 0x75b4cc4480
	RenderWidgetBase*[] CountDownWidgetList;//[Offset: 0x600, Size: 0x10]// 0x75b4cc4580
	bool HasCameraAnimStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]// 0x75b4cc4600
	<uint32,DisplayAvatarDetail> DisplayAvatarDetailCache;//[Offset: 0x618, Size: 0x50]// 0x75b4cba140
	int LastSeasonId;//[Offset: 0x668, Size: 0x4]// 0x75a87c1d40
	TimerHandle KeepCameraLocAndRotByFrameTimer;//[Offset: 0x670, Size: 0x8]// 0x75b4cc4700
	CameraAnim* InPlayingCameraAnim;//[Offset: 0x678, Size: 0x8]// 0x75b4cc4780
	bool HasSwithToTeamAssembleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]// 0x75b4cc4800
	void SwitchToTeamAssembleViewBlueprint(bool bIsEnable);// 0xffffff8a17adf2b0
	void SwitchToTeamAssembleView(bool bIsEnable);// 0x44fc840
	void SetPrimitiveLightChannel(PrimitiveComponent* Component, int LightChannel);// 0x44fc788
	void PlayCameraAnimation();// 0x44fc774
	void OnUpdateDisplayActorNumber(int TotolNumber);// 0xffffff8a17adf2b0
	void OnSwitchToTeamAssembleView();// 0xffffff8a17adf2b0
	void OnResetDisplayAvatarBlueprint();// 0xffffff8a17adf2b0
	void OnResetDisplayAvatar();// 0x44fc760
	void OnRefreshTeammateAssembleInfoBlueprint(int ActorIndex, out const TeamAssembleAvatarDisplayInfo DetailInfo, out const int[] OnlyWearList);// 0xffffff8a17adf2b0
	void OnRefreshTeammateAssembleDisplayInfo(int ActorIndex, out const TeamAssembleAvatarDisplayInfo AvatarDisplayInfo);// 0x44fc650
	void OnRefreshCountDownValue(int CountDown, int TotalCountDown);// 0x44fc59c
	void OnRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo, out const int[] OnlyWearList);// 0xffffff8a17adf2b0
	void OnPreRefreshTeammateAssembleInfoBlueprint(int ActorIndex);// 0xffffff8a17adf2b0
	void OnPreRefreshAvatarInfoBlueprint(int ActorIndex, bool isSelf, bool IsTeamMate, out const PlayerDetailInfo DetailInfo, AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, bool IsAlreadyDisplaying);// 0xffffff8a17adf2b0
	void OnPostRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo);// 0xffffff8a17adf2b0
	void OnKeepCameraLocAndRot();// 0x44fc588
	void OnDestroyDisplayActorBlueprint();// 0xffffff8a17adf2b0
	void OnDestroyDisplayActor();// 0x44fc574
	void OnCountDownChanged(int CountDown, int TotalCountDown);// 0xffffff8a17adf2b0
	void OnCameraAnimationFinished();// 0xffffff8a17adf2b0
	bool NeedEnableDisplayActor();// 0xffffff8a17adf2b0
	bool IsEnableCharmPlayerShowTest();// 0x44fc53c
	bool IsAvatarItemFiltered(int ItemID);// 0x44fc4a4
	bool HasPlayerWearChanged(uint32 PlayerKey, int ActorIndex, out const PlayerDetailInfo DetailInfo);// 0x44fc330
	Vector GetPlayerInfoWidgetLocation(int ActorIndex);// 0x44fc298
	CustomActorIndicatorWidget* CreateIndicatorWidgetInstance(FString TemplatePath);// 0x44fc1b8

--------------------------------
Class: AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x2b8, Size: 0x8]// 0x75bddf8d80
	FString PlayerName;//[Offset: 0x2c0, Size: 0x10]// 0x75bddead90
	int Gender;//[Offset: 0x2d0, Size: 0x4]// 0x75bddeae00
	int[] InitialAvatarItem;//[Offset: 0x2d8, Size: 0x10]// 0x75bddf8e00
	int[] InitialWeaponItem;//[Offset: 0x2e8, Size: 0x10]// 0x75bddf8e80
	int[] InitialWeaponAttachments;//[Offset: 0x2f8, Size: 0x10]// 0x75bddf8f00
	STExtraLobbyCharacter* LobbyPawn;//[Offset: 0x308, Size: 0x8]// 0x75bddf8f80
	CharacterAvatarComponent* PlayerAvatar;//[Offset: 0x310, Size: 0x8]// 0x75bddf9000
	int TeamID;//[Offset: 0x318, Size: 0x4]// 0x75bddeafc0
	int PoseID;//[Offset: 0x31c, Size: 0x4]// 0x75bddeb030
	int HeadID;//[Offset: 0x320, Size: 0x4]// 0x75bddeb0a0
	int WeaponSkinKillCount;//[Offset: 0x324, Size: 0x4]// 0x75bddeb110
	void SpawnAvatar(bool IsUseLod);// 0x417f6b8
	void SetLightChannel(int LightChannel);// 0x417f63c
	void PlayAnimMontage();// 0x417f628
	int GetUpgradeWeaponPendantID();// 0x417f5f4
	void CreateWeaponAttachmentsSkin();// 0x417f5e0
	void CreateUpgradeWeaponPendant();// 0x417f5cc
	void CreateUpgradeKillCountingScreenID();// 0x417f5b8
	void CreateAvatarEquipment(int AvatarResID);// 0x417f53c

--------------------------------
Class: CustomActorIndicatorWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool IsFixLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]// 0x75b4dfd400
	bool IsUseCameraLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]// 0x75b4dfd480
	bool IsEnableDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 0x1]// 0x75b4dfd500
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x460, Size: 0x8]// 0x75b4dfd580
	CanvasPanel* MyCanvasPanel;//[Offset: 0x468, Size: 0x8]// 0x75b4dfd600
	Vector4 Limit;//[Offset: 0x470, Size: 0x10]// 0x75b4dfd680
	Vector2D UIOffset;//[Offset: 0x480, Size: 0x8]// 0x75b4dfd700
	Vector LocOffset;//[Offset: 0x488, Size: 0xc]// 0x75b4dfd780
	CanvasPanelSlot* MarkCanvasPanelSlot;//[Offset: 0x498, Size: 0x8]// 0x75b4dfd800
	Vector2D MarkUIOffset;//[Offset: 0x4a0, Size: 0x8]// 0x75b4dfd880
	Vector MarkLocOffset;//[Offset: 0x4a8, Size: 0xc]// 0x75b4dfd900
	float ScaleBegin;//[Offset: 0x4b4, Size: 0x4]// 0x75b4e0f170
	float ScaleEnd;//[Offset: 0x4b8, Size: 0x4]// 0x75b4e0f1e0
	float ScaleStep;//[Offset: 0x4bc, Size: 0x4]// 0x75b4e0f250
	float ScaleBeginDistance;//[Offset: 0x4c0, Size: 0x4]// 0x75b4e0f2c0
	float ScaleEndDistance;//[Offset: 0x4c4, Size: 0x4]// 0x75b4e0f330
	float MaxShowDistance;//[Offset: 0x4c8, Size: 0x4]// 0x75b4e0f3a0
	float UpdateDistanceTolerance;//[Offset: 0x4cc, Size: 0x4]// 0x75b4e0f410
	int TargetDistance;//[Offset: 0x4d0, Size: 0x4]// 0x75b4e0f480
	Vector LastPlayerLocation;//[Offset: 0x4d4, Size: 0xc]// 0x75b4dfd980
	Rotator LastPlayerRotation;//[Offset: 0x4e0, Size: 0xc]// 0x75b4dfda00
	Vector LastActorLocation;//[Offset: 0x4ec, Size: 0xc]// 0x75b4dfda80
	Vector2D LastWidgetPosition;//[Offset: 0x4f8, Size: 0x8]// 0x75b4dfdb00
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x50c, Size: 0x8]// 0x75b4dfdb80
	void UpdateTargetActorLocation(Vector Loc);// 0x428f594
	void UpdateAll();// 0x428f580
	void OnWidgetDestroyed();// 0xffffff8a17adf2b0
	void OnWidgetCreated();// 0xffffff8a17adf2b0
	void OnSwitchWidgetVisibility(bool IsVisible);// 0xffffff8a17adf2b0
	void OnRefreshTeamAssemblePlayerInfo(out const TeamAssembleAvatarDisplayInfo PlayerInfo, int ItemIndex);// 0xffffff8a17adf2b0
	void OnRefreshCharmPlayerInfo(out const PlayerDetailInfo PlayerInfo, int ItemIndex);// 0xffffff8a17adf2b0
	void EnableUpdateLocation(bool bEnable);// 0x428f4fc

--------------------------------
Class: PlayerDetailInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]// 0x7611f436c0
	FString PlayerName;//[Offset: 0x8, Size: 0x10]// 0x7611f43650
	int CharmLevel;//[Offset: 0x18, Size: 0x4]// 0x7611f435e0
	int CharmValue;//[Offset: 0x1c, Size: 0x4]// 0x7611f43570
	int Gender;//[Offset: 0x20, Size: 0x4]// 0x7611f43500
	int Sex;//[Offset: 0x24, Size: 0x4]// 0x7611f43490
	int SeasonId;//[Offset: 0x28, Size: 0x4]// 0x7611f43420
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7611f433a0
	int[] AvatarItemList;//[Offset: 0x30, Size: 0x10]// 0x7611f432b0
	bool IsDataChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x7611f43230
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x7611f431b0
	int WingManID;//[Offset: 0x44, Size: 0x4]// 0x7611f43140
	bool bIsWingManPlayerSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x7611f430c0
	FString WingManName;//[Offset: 0x50, Size: 0x10]// 0x7611f43050
	FString PlayerUID;//[Offset: 0x60, Size: 0x10]// 0x7611f42fe0

--------------------------------
Class: VehicleAvatarDisplayPoseComponent.AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	STExtraDisplayVehicle* VehicleActor;//[Offset: 0x328, Size: 0x8]// 0x75a8835100
	DisplayVehicleAvatarComponent* VehicleAvatar;//[Offset: 0x330, Size: 0x8]// 0x75a8835180
	void SpawnVehicleAvatarByResId(int resID);// 0x47c4718

--------------------------------
Class: STExtraDisplayVehicle.Actor.Object
	DisplayVehicleAvatarComponent* VehicleAvatarComponent;//[Offset: 0x510, Size: 0x8]// 0x75a8035700
	SkeletalMeshComponent* Mesh;//[Offset: 0x518, Size: 0x8]// 0x75a8035800
	void SwitchLightChannel(int Channel);// 0x45f933c
	DisplayVehicleAvatarComponent* GetVehicleAvatarComponent();// 0x45f9308

--------------------------------
Class: DisplayVehicleAvatarComponent.VehicleAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	void InitVehicleAvatarByResId(int resID);// 0x42b3964
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x42b3858
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x42b379c

--------------------------------
Class: VehicleAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	<int,int> DefaultAttachmentMeshID;//[Offset: 0x920, Size: 0x50]// 0x75b4db62c0
	bool PutOffMeshIfLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 0x1]// 0x75b4d99f00
	bool PutOffAttachIfLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x971, Size: 0x1]// 0x75b4d99f80
	<enum,FName> VehicleSlotNameMap;//[Offset: 0x978, Size: 0x50]// 0x75b4db6380
	bool bApplyOriginGear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8, Size: 0x1]// 0x75b4d9a100
	bool bForceApplyOriginVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c9, Size: 0x1]// 0x75b4d9a180
	bool bApplyAllRigidBodyOriginVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ca, Size: 0x1]// 0x75b4d9a200
	int CurGearBeforeRenderEntity;//[Offset: 0x9cc, Size: 0x4]// 0x75b4daf720
	float RawEngineSpeedBeforeRenderEntity;//[Offset: 0x9d0, Size: 0x4]// 0x75b4daf790
	enum VehicleMeshMode;//[Offset: 0x9d4, Size: 0x1]// 0x75b4d9a300
	DefaultAvatarRes DefultAvatarRes;//[Offset: 0x9d8, Size: 0x20]// 0x75b4d9a380
	ItemDefineID DefaultAvatarID;//[Offset: 0x9f8, Size: 0x18]// 0x75b4d9a400
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0xa10, Size: 0x8]// 0x75b4d9a480
	Actor* VehicleSkinTrigger;//[Offset: 0xa18, Size: 0x8]// 0x75b4d9a500
	<int,int> TempMultipleInstanceCounterMap;//[Offset: 0xa20, Size: 0x50]// 0x75b4db6440
	MeshSynDataFlag[] SynData;//[Offset: 0xa70, Size: 0x10]// 0x75b4d9a600
	int[] SynDataID;//[Offset: 0xa80, Size: 0x10]// 0x75b4d9a680
	static void UpdateMatDataValue(out <VehicleAvatarMaterialName,VehicleAvatarMaterialData> DataMap, out const VehicleAvatarMaterialName InName, float InValue, enum InState);// 0x47c344c
	static void UpdateCurveTickData(out <VehicleAvatarMaterialName,VehicleAvatarMaterialCurveData> DataMap, out const VehicleAvatarMaterialName InName, float InTime, float InCurValue, float InSpeed);// 0x47c323c
	bool TryCloneEntityForMultipleInstanceHandle(AvatarEntity* InMainEntity, BattleItemHandleBase* InMultipleEntityInstanceHandle);// 0x47c316c
	void SetVehicleSkinTrigger(Actor* InVehicleSkinTrigger);// 0x47c30f0
	static void SetDMIParamByNames(out <VehicleAvatarMaterialName,VehicleAvatarMaterialData> DataMap, SkeletalMeshComponent* InMesh, float InValue, enum InState, out const VehicleAvatarMaterialName InNames);// 0x47c2f1c
	void ResetAttachmentParent();// 0x47c2f08
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* BaseHandle);// 0x47c2e7c
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh);// 0x47c2dac
	bool PutOnEquipmentByResID(int resID);// 0x47c2d14
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, const int InInstanceID);// 0x47c2bcc
	bool PutonEquipmentByAssignedSlotID(BattleItemHandleBase* InItemHandle, const int InAssignedSlotID, const bool InIsCloneEntityInstance);// 0x47c2abc
	bool PutOffEquimentByResID(int resID);// 0x47c2a24
	void PushHandlesToPipeline(BattleItemHandleBase*[] handleList);// 0x47c294c
	void PrepareRenderAssets(out VehicleMeshCfg meshPack, out SoftObjectPath[] MaterialAssets);// 0x47c2828
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynDataFlag SyncData, const int InMatchCounter);// 0x47c26d4
	static void OnTickCurveMaterial(SkeletalMeshComponent* InMesh, out <VehicleAvatarMaterialName,VehicleAvatarMaterialCurveData> CurveDataMap, out <VehicleAvatarMaterialName,VehicleAvatarMaterialData> MatDataMap, float LerpIntervalTime);// 0x47c24b4
	static void OnTickAvatarMaterial(STExtraWheeledVehicle* InVehicle, float InMinRunSpeed, out bool InIsRun, out bool InIsBrake, out bool NeedUpdateRun, out bool NeedUpdateBrake);// 0x47c22c0
	void OnRep_AvatarMeshChanged();// 0x47c22a4
	void OnItemHandleListLoaded(out const BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x47c21c4
	void OnDetailMeshLoaded(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x47c2014
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x47c1e54
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x47c1d58
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x47c1c5c
	bool IsVehicleMatHighDeviceQuality(out const VehicleMeshCfg meshPack);// 0x47c1ba8
	static bool IsVaildVehicleAvatarMaterialData(out const VehicleAvatarMaterialData InData);// 0x47c1a7c
	bool IsUseDefaultAvatar();// 0x47c1a44
	bool IsTPPMode();// 0x47c1a20
	bool IsMultipleAvatarInstanceAvatarHandle(BattleItemHandleBase* InItemHandleBase);// 0x47c1990
	static void InitCurveCurveData(out VehicleAvatarMaterialCurveData OutData, out const VehicleAvatarMaterialData MatData, enum InState);// 0x47c17bc
	static enum GetVaildAvatarVehicleStatus(out const enum[] VehicleStatus, out const enum[] ItemHandleStatus);// 0x47c16c0
	SkeletalMesh* GetSkeletalMesh(out VehicleMeshCfg meshPack);// 0x47c1618
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x47c1524
	MeshComponent* GetMeshComponentBySlotID(int SlotID);// 0x47c1498
	void GetMaterial(out VehicleMeshCfg meshPack, out MaterialInstanceSet[] matList);// 0x47c139c
	AvatarEntityFactory* GetEntityFactory();// 0x47c1360
	void GetComponetRenderAssets(out SoftObjectPath[] DesiredResList);// 0x47c129c
	static float GetAvatarVehicleMatPingPongValue(float CurValue, float StartValue, float EndValue, float DeltaTime, out float LoopSpeed);// 0x47c1124
	static float GetAvatarVehicleMatLoopValue(float CurValue, float StartValue, float EndValue, float DeltaTime, float LoopSpeed);// 0x47c0fc0
	static float GetAvatarVehicleMatLerpValue(float StartValue, float EndValue, float CurTime, float AverageLerpSpeed, CurveFloat* ValueCurve);// 0x47c0e58
	MaterialInstance* GetAdvancedMaterial(out VehicleMeshCfg meshPack);// 0x47c0db0
	SyncAdditionDataArray GetAdditionalDataBySlot(const int InSlotID);// 0x47c0bd4
	void ExitFPPMode();// 0x47c0bc0
	void EnterFPPMode();// 0x47c0bac
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x47c0ae4
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x47c0a60
	bool CheckSlotIsEquipped(int SlotID);// 0x47c09d0
	bool CheckIsAlreadyEquipped(ItemDefineID DefineID);// 0x47c0930
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, BattleItemHandleBase* Handle);// 0x47c0824
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* MeshComp);// 0x47c0768
	void ApplyBrokenEffect();// 0x47c0754
	static void AddOrUpdateCurveTickData(out <VehicleAvatarMaterialName,VehicleAvatarMaterialCurveData> DataMap, out const VehicleAvatarMaterialData InData, enum InCurState);// 0x47c0514

--------------------------------
Class: DefaultAvatarRes
	SkeletalMesh* FPPMesh;//[Offset: 0x0, Size: 0x8]// 0x7612228c90
	SkeletalMesh* TPPMesh;//[Offset: 0x8, Size: 0x8]// 0x7612228c10
	MaterialInstance* FPPMat;//[Offset: 0x10, Size: 0x8]// 0x7612228b90
	MaterialInstance* TPPMat;//[Offset: 0x18, Size: 0x8]// 0x7612228b10

--------------------------------
Class: MeshSynDataFlag
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]// 0x7612149600
	enum OperationType;//[Offset: 0x18, Size: 0x1]// 0x7612149500
	int SyncID;//[Offset: 0x1c, Size: 0x4]// 0x7612149490
	SyncAdditionDataArray SynAdditionalData;//[Offset: 0x20, Size: 0x10]// 0x7612149410

--------------------------------
Class: VehicleAvatarMaterialName
	FName SlotName;//[Offset: 0x0, Size: 0x8]// 0x761215a4c0
	FName ParamName;//[Offset: 0x8, Size: 0x8]// 0x761215a450

--------------------------------
Class: VehicleAvatarMaterialData
	VehicleAvatarMaterialName NamePair;//[Offset: 0x0, Size: 0x10]// 0x761215a330
	<enum,VehicleAvatarMaterialValue> VehicleStatusValueMap;//[Offset: 0x10, Size: 0x50]// 0x7612159e00
	bool UseLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x7612159d80
	float AverageLerpSpeed;//[Offset: 0x64, Size: 0x4]// 0x7612159d10
	CurveFloat* CurveRef;//[Offset: 0x68, Size: 0x8]// 0x7612159c90
	CurveFloat* RealValueCurveRef;//[Offset: 0x70, Size: 0x8]// 0x7612159c10
	float CurValue;//[Offset: 0x78, Size: 0x4]// 0x7612159ba0
	float CurLoopSpeed;//[Offset: 0x7c, Size: 0x4]// 0x7612159b30
	enum CurState;//[Offset: 0x80, Size: 0x1]// 0x7612159a30

--------------------------------
Class: VehicleAvatarMaterialValue
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x761215a2b0
	bool IsPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x761215a230
	float StateValue;//[Offset: 0x4, Size: 0x4]// 0x761215a1c0
	Vector2D ValueRange;//[Offset: 0x8, Size: 0x8]// 0x761215a140
	float LoopSpeed;//[Offset: 0x10, Size: 0x4]// 0x761215a0d0

--------------------------------
Class: VehicleAvatarMaterialCurveData
	VehicleAvatarMaterialName NamePair;//[Offset: 0x0, Size: 0x10]// 0x76122289f0
	CurveFloat* CurveRef;//[Offset: 0x10, Size: 0x8]// 0x7612228970
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x76122288f0
	bool IsPingPong;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x7612228870
	float AverageLerpSpeed;//[Offset: 0x1c, Size: 0x4]// 0x7612228800
	float CurValue;//[Offset: 0x20, Size: 0x4]// 0x7612228790
	float LerpCurTime;//[Offset: 0x24, Size: 0x4]// 0x7612228720
	float LerpTotalTime;//[Offset: 0x28, Size: 0x4]// 0x76122286b0
	float LerpStartValue;//[Offset: 0x2c, Size: 0x4]// 0x7612228640
	float LerpEndValue;//[Offset: 0x30, Size: 0x4]// 0x76122285d0

--------------------------------
Class: VehicleMeshCfg
	SkeletalMesh* FPPMesh;//[Offset: 0x0, Size: 0x28]// 0x761215b2f0
	SkeletalMesh* TPPMesh;//[Offset: 0x28, Size: 0x28]// 0x761215b270
	SkeletalMesh* LobbyMesh;//[Offset: 0x50, Size: 0x28]// 0x761215b1f0
	MaterialAssetSet[] LobbyMeshMat;//[Offset: 0x78, Size: 0x10]// 0x761215b0f0
	MaterialAssetSet[] MaterialList;//[Offset: 0x88, Size: 0x10]// 0x761215aff0
	class AnimInstance* animBPClass;//[Offset: 0x98, Size: 0x28]// 0x761215af70
	StaticMesh* BrokenStaticMesh;//[Offset: 0xc0, Size: 0x28]// 0x761215aef0
	SkeletalMesh* BrokenSkeletalMesh;//[Offset: 0xe8, Size: 0x28]// 0x761215ae70
	MaterialAssetSet[] BrokenMeshMaterialList;//[Offset: 0x110, Size: 0x10]// 0x761215abe0
	MaterialInstanceSet[] BrokenMatList;//[Offset: 0x120, Size: 0x10]// 0x761215a950
	<MaterialInterface*,MaterialInterface*> MatInstanceMapping;//[Offset: 0x130, Size: 0x50]// 0x761215a7a0
	bool UseHighQualityMatMapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]// 0x761215a720
	FName[] HighQualitySlotName_BlackList;//[Offset: 0x188, Size: 0x10]// 0x761215a630
	bool UserHighQualityUseIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]// 0x761215a5b0
	bool HighDeviceUseIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]// 0x761215a530
	VehicleAvatarMaterialData[] VehicleAvatarMaterialDataSetting;//[Offset: 0x1a0, Size: 0x10]// 0x7612159890
	VehicleAvatarMaterialEffectData[] VehicleAvatarMaterialEffectDataSetting;//[Offset: 0x1b0, Size: 0x10]// 0x7612159790
	class AvatarMaterialEffectManager* OverrideAvatarMaterialEffectManagerClass;//[Offset: 0x1c0, Size: 0x8]// 0x7612159710
	VehilePawnAnimList[] VehicleSeatsAnimOverride;//[Offset: 0x1c8, Size: 0x10]// 0x7612159260
	WheelSetup[] WheelSetups;//[Offset: 0x1d8, Size: 0x10]// 0x7612158f50
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x1e8, Size: 0x10]// 0x7612158cc0
	Vector[] TrailOffsetArray;//[Offset: 0x1f8, Size: 0x10]// 0x7612158bc0
	bool IsForceOverrideTrailOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]// 0x7612158b40
	bool bEnableGearSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]// 0x7612158ac0
	VehicleTransmissionData GearSetup;//[Offset: 0x210, Size: 0x30]// 0x7612158390
	bool bEnableCenterOfMassOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]// 0x7612158310
	Vector CenterOfMassOffset;//[Offset: 0x244, Size: 0xc]// 0x7612158290
	enum AdvancedConditionType;//[Offset: 0x250, Size: 0x1]// 0x7612158190
	FName AdvancedSlotName;//[Offset: 0x258, Size: 0x8]// 0x7612158120
	MaterialInterface* AdvancedMaterial;//[Offset: 0x260, Size: 0x28]// 0x76121580a0
	VehicleShapePreventPenetratingConfig ShapePreventPenetratingConfig;//[Offset: 0x288, Size: 0x50]// 0x7612157a10

--------------------------------
Class: MaterialAssetSet
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x28]// 0x761215adf0
	FName MatSlot;//[Offset: 0x28, Size: 0x8]// 0x761215ad80

--------------------------------
Class: MaterialInstanceSet
	MaterialInstance* MaterialInstance;//[Offset: 0x0, Size: 0x8]// 0x761215ab60
	FName MatSlot;//[Offset: 0x8, Size: 0x8]// 0x761215aaf0

--------------------------------
Class: VehicleAvatarMaterialEffectData
	<enum,AvatarMaterialEffectValue> StateValueMapSetting;//[Offset: 0x0, Size: 0x50]// 0x7612151410
	BaseAvatarMaterialEffectData BaseMatEffectData;//[Offset: 0x50, Size: 0x28]// 0x7612151390

--------------------------------
Class: VehilePawnAnimList
	FString VehicleSeat;//[Offset: 0x0, Size: 0x10]// 0x76121596a0
	VehilePawnAnimData[] AnimDataList;//[Offset: 0x10, Size: 0x10]// 0x7612159400

--------------------------------
Class: VehilePawnAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 0x1]// 0x7612159620
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 0x28]// 0x76121595a0

--------------------------------
Class: VehicleShapePreventPenetratingConfig
	bool bOverrideBlueprintConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7612158020
	bool bUseSphereSweepToPreventPenetrating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7612157fa0
	float[] SphereSweepToPreventPenetrating_SphereRadius;//[Offset: 0x8, Size: 0x10]// 0x7612157eb0
	Vector[] SphereSweepToPreventPenetrating_Offset;//[Offset: 0x18, Size: 0x10]// 0x7612157db0
	bool bUseBoxOverlapToPreventPenetrating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7612157d30
	Vector[] BoxOverlapPreventPenetrating_BoxExtend;//[Offset: 0x30, Size: 0x10]// 0x7612157c30
	Vector[] BoxOverlapPreventPenetrating_Offset;//[Offset: 0x40, Size: 0x10]// 0x7612157b30

--------------------------------
Class: RenderWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	void OnWidgetDestroyed();// 0xffffff8a17adf2b0
	void OnWidgetCreated();// 0xffffff8a17adf2b0
	void OnSwitchWidgetVisibility(bool IsVisible);// 0xffffff8a17adf2b0
	void OnRefreshSeasonId(int SeasonId);// 0xffffff8a17adf2b0
	void OnRefreshRtImageResource(Object* NewResource);// 0xffffff8a17adf2b0
	void OnRefreshCountDownValue(int CountDownValue, int TotalCountDownValue);// 0xffffff8a17adf2b0
	void OnRefreshCharmPlayerInfo(out const PlayerDetailInfo PlayerInfo);// 0xffffff8a17adf2b0

--------------------------------
Class: DisplayAvatarDetail
	int ActorIndex;//[Offset: 0x0, Size: 0x4]// 0x76121ce5a0
	int[] WearList;//[Offset: 0x8, Size: 0x10]// 0x76121ce4b0

--------------------------------
Class: DynamicVibrateSystemManager.Object
	FString ClassPath;//[Offset: 0x28, Size: 0x10]// 0x75b4daa470
	FString VibrateAssetTablePath;//[Offset: 0x38, Size: 0x10]// 0x75b4daa4e0
	int MaxAmplitude;//[Offset: 0x48, Size: 0x4]// 0x75b4daa550
	int GroundSpesificMatVibrationMinGrear;//[Offset: 0x4c, Size: 0x4]// 0x75b4daa5c0
	float VehicleBreakingMinSpeedThreshold;//[Offset: 0x50, Size: 0x4]// 0x75b4daa630
	float VehicleGearMinSpeedThreshold;//[Offset: 0x54, Size: 0x4]// 0x75b4daa6a0
	float VehicleSlipMinSpeedThreshold;//[Offset: 0x58, Size: 0x4]// 0x75b4daa710
	int[] TriggerVehicleVibrateGroundPhysicMatList;//[Offset: 0x60, Size: 0x10]// 0x75b4d4bb00
	float TriggerVehicleVibrateMinSlip;//[Offset: 0x70, Size: 0x4]// 0x75b4daa7f0
	float TriggerVehicleVibrateMinSuspensionRaisePercent;//[Offset: 0x74, Size: 0x4]// 0x75b4daa860
	float VehicleRaiseSuspensionVibrateInerval;//[Offset: 0x78, Size: 0x4]// 0x75b4daa8d0
	int InitAssetProccessNumFrames;//[Offset: 0x7c, Size: 0x4]// 0x75b4daa940
	<int,enum> LoadedVibrateAssetIDAndEventTypeMap;//[Offset: 0xd0, Size: 0x50]// 0x75c988f680
	<enum,float> VibrateStrengthLevelModifireMap;//[Offset: 0x120, Size: 0x50]// 0x75c988f740
	<enum,float> VibrateEventMinIntervalMap;//[Offset: 0x170, Size: 0x50]// 0x75c988f800
	enum[] CharacterVibrateEventList;//[Offset: 0x1c0, Size: 0x10]// 0x75b4d4bf80
	enum[] WeaponVibrateEventList;//[Offset: 0x1d0, Size: 0x10]// 0x75b4d4c100
	enum[] VehicleVibrateEventList;//[Offset: 0x1e0, Size: 0x10]// 0x75b4d4c280
	enum[] SoundUIVibrateEventList;//[Offset: 0x1f0, Size: 0x10]// 0x75b4d4c400
	enum[] CharacterBeHitVibrateEventList;//[Offset: 0x200, Size: 0x10]// 0x75b4d4c580
	enum[] VehicleEngineVibrateEventList;//[Offset: 0x210, Size: 0x10]// 0x75b4d4c700
	enum[] VehicleBeHitVibrateEventList;//[Offset: 0x220, Size: 0x10]// 0x75b4d4c880
	int CharacterVibrationLevel;//[Offset: 0x230, Size: 0x4]// 0x75b4daab00
	int WeaponVibrationLevel;//[Offset: 0x234, Size: 0x4]// 0x75b4daab70
	int VehicleVibrationLevel;//[Offset: 0x238, Size: 0x4]// 0x75b4daabe0
	int SoundUIVibrationLevel;//[Offset: 0x23c, Size: 0x4]// 0x75b4daac50
	int EntireVibrationLevel;//[Offset: 0x240, Size: 0x4]// 0x75b4daacc0
	bool bCharacterVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]// 0x75b4d4c900
	bool bWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 0x1]// 0x75b4d4c980
	bool bVehicleVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 0x1]// 0x75b4d4ca00
	bool bSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247, Size: 0x1]// 0x75b4d4ca80
	bool bCharacterBeHitVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]// 0x75b4d4cb00
	bool bCharacterClimbVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]// 0x75b4d4cb80
	bool bCharacterFallVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a, Size: 0x1]// 0x75b4d4cc00
	bool bCharacterSwimVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1]// 0x75b4d4cc80
	bool bAutoWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]// 0x75b4d4cd00
	bool bSemiAutoWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]// 0x75b4d4cd80
	bool bBoltWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1]// 0x75b4d4ce00
	bool bOtherWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1]// 0x75b4d4ce80
	bool bVehicleEngineVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]// 0x75b4d4cf00
	bool bVehicleBeHitVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]// 0x75b4d4cf80
	bool bVehicleCrashVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1]// 0x75b4d4d000
	bool bFootstepSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1]// 0x75b4d4d080
	bool bFireShotSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]// 0x75b4d4d100
	bool bGlassBrokenSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1]// 0x75b4d4d180
	bool bVehicleSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1]// 0x75b4d4d200
	TimerHandle StopVibrateHandle;//[Offset: 0x258, Size: 0x8]// 0x75b4d4d280
	int CurPlayingVibrateAssetIndex;//[Offset: 0x260, Size: 0x4]// 0x75b4daad30
	int CurLoopPlayingVibrateAssetIndex;//[Offset: 0x264, Size: 0x4]// 0x75b4daada0
	int DeviceSupportVibrateType;//[Offset: 0x268, Size: 0x4]// 0x75b4daae10
	bool bHasEndplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]// 0x75b4d4d300
	bool bIsHandBreaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1]// 0x75b4d4d380
	bool bHasLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]// 0x75b4d4d400
	int LastVehicleGear;//[Offset: 0x2c4, Size: 0x4]// 0x75b4daae80
	bool bIsLastVehicleBreaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]// 0x75b4d4d480
	bool bIsLastVehicleSlipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]// 0x75b4d4d500
	int LastVehicleGroundContactMaterialSurfaceType;//[Offset: 0x2cc, Size: 0x4]// 0x75b4daaef0
	<int,bool> LastVehicleGearVibrateCache;//[Offset: 0x2d0, Size: 0x50]// 0x75c988f8c0
	<enum,float> LastVibrateEventTimeMap;//[Offset: 0x320, Size: 0x50]// 0x75c988f980
	float CurVehicleRaiseSuspensionVibrateCD;//[Offset: 0x370, Size: 0x4]// 0x75b4dab040
	VibrateEntity[] CacheVibrateEntityList;//[Offset: 0x3f0, Size: 0x10]// 0x75b4d4d780
	void StopVibrate();// 0x42c6dd4
	void PostVibrateTriggerActionDirectly(int SpesifyID, int Amplitude);// 0x42c6d18
	void PostVibrateTriggerAction(out const VibrateTriggerAction Action, bool bCheckGate, bool bCheckInterval, int SpesifyID);// 0x42c6b58
	void PlayVibrateEntity(out const VibrateEntity entity);// 0x42c6a94
	void ModifyVehicleVibrationLevel(int Val);// 0x42c6a10
	void ModifyVehicleEngineVibrationSetting(bool Val);// 0x42c6984
	void ModifyEntireVibrationLevel(int Val);// 0x42c6908
	void LoadUserSettingData(int inCharacterVibrationLevel, int inWeaponVibrationLevel, int inVehicleVibrationLevel, int inSoundUIVibrationLevel, bool binCharacterBeHitVibrate, bool binCharacterClimbVibrate, bool binCharacterFallVibrate, bool binCharacterSwimVibrate, bool binVehicleEngineVibrate, bool binVehicleBeHitVibrate, bool binVehicleCrashVibrate, bool binFootstepSoundUIVibrate, bool binFireShotSoundUIVibrate, bool binGlassBrokenSoundUIVibrate, bool binVehicleSoundUIVibrate, int inEntireVibrationLevel, bool binAutoWeaponVibrate, bool binSemiAutoWeaponVibrate, bool binBoltWeaponVibrate, bool binOtherWeaponVibrate);// 0x42c6324
	void InvalidateVibrateEntityByEventType(enum EventType);// 0x42c62a8
	void InitUserSetting();// 0x42c628c
	void InitSystem();// 0x42c6270
	void HandleApplicationWillTerminate();// 0x42c625c
	void HandleApplicationWillEnterBackground();// 0x42c6248
	void HandleApplicationWillDeactivate();// 0x42c6234
	void HandleApplicationHasReactivated();// 0x42c6220
	void HandleApplicationHasEnteredForeground();// 0x42c620c
	static DynamicVibrateSystemManager* GetInstance(const Object* WorldContext, bool bAutoCreate);// 0x42c614c
	int GetAmplitudeByAlpha(float Alpha);// 0x42c60b8
	void ClearAllVibration();// 0x42c609c
	static void CheckAndCopyFilesToSavedDir(DynamicVibrateSystemManager* Mgr);// 0x42c6028
	void BPHandleApplicationWillTerminate();// 0x42c600c
	void BPHandleApplicationWillEnterBackground();// 0x42c5ff0
	void BPHandleApplicationWillDeactivate();// 0x42c5fd4
	void BPHandleApplicationHasReactivated();// 0x42c5fb8
	void BPHandleApplicationHasEnteredForeground();// 0x42c5f9c

--------------------------------
Class: VibrateEntity
	int AssetID;//[Offset: 0x0, Size: 0x4]// 0x761222f200
	FString AssetAbsPath;//[Offset: 0x8, Size: 0x10]// 0x761222f190
	int PlayAmplitude;//[Offset: 0x18, Size: 0x4]// 0x761222f120
	FString PlayKeyParam;//[Offset: 0x20, Size: 0x10]// 0x761222f0b0
	int PlayPriority;//[Offset: 0x30, Size: 0x4]// 0x761222f040
	float PlayDuration;//[Offset: 0x34, Size: 0x4]// 0x761222efd0
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x761222ef50
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]// 0x761222eed0
	float PushTime;//[Offset: 0x3c, Size: 0x4]// 0x761222ee60
	enum EventType;//[Offset: 0x40, Size: 0x1]// 0x761222ed60

--------------------------------
Class: VibrateTriggerAction
	int VibrateAmplitude;//[Offset: 0x0, Size: 0x4]// 0x761222fab0
	VibrateTriggerMainItem TriggerMainItem;//[Offset: 0x8, Size: 0x18]// 0x761222f820
	VibrateTriggerSubItem[] TriggerSubItemList;//[Offset: 0x20, Size: 0x10]// 0x761222f510
	enum TriggerEventType;//[Offset: 0x30, Size: 0x1]// 0x761222f410
	enum TriggerActionType;//[Offset: 0x31, Size: 0x1]// 0x761222f310

--------------------------------
Class: VibrateTriggerMainItem
	enum MainItemType;//[Offset: 0x0, Size: 0x1]// 0x761222f9b0
	FString Data;//[Offset: 0x8, Size: 0x10]// 0x761222f940

--------------------------------
Class: VibrateTriggerSubItem
	enum SubItemTyp;//[Offset: 0x0, Size: 0x1]// 0x761222f720
	FString Data;//[Offset: 0x8, Size: 0x10]// 0x761222f6b0

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x530, Size: 0x10]// 0x75a8547000
	float DamageFieldUpdatePeriod;//[Offset: 0x5b8, Size: 0x4]// 0x75a8597e90
	float DamageFieldPassedTime;//[Offset: 0x5bc, Size: 0x4]// 0x75a8597f00
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x474fc94
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x474fb80
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x474fac8
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* receiver, bool RebuildSphere);// 0x474f94c

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 0x8]// 0x7612217c30
	SimpleCollisionSphere Sphere;//[Offset: 0x8, Size: 0x10]// 0x7612217a20
	float PassedTime;//[Offset: 0x18, Size: 0x4]// 0x76122179b0

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 0xc]// 0x7612217bb0
	float Radius;//[Offset: 0xc, Size: 0x4]// 0x7612217b40

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 0xc]// 0x76122183c0
	Vector End;//[Offset: 0xc, Size: 0xc]// 0x7612218340
	float Radius;//[Offset: 0x18, Size: 0x4]// 0x76122182d0

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: ObjectPosReplayNetGUIDMap
	uint32 InstanceID;//[Offset: 0x0, Size: 0x4]// 0x7611f594f0
	uint32 ActorNetGUID;//[Offset: 0x4, Size: 0x4]// 0x7611f59480
	uint32 ActorDemoNetGUID;//[Offset: 0x8, Size: 0x4]// 0x7611f59410

--------------------------------
Class: ObjectPosUIData
	bool IsClientUseActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611f4a320
	bool IsVisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611f4a2a0
	uint32 ActorNetGUID;//[Offset: 0x4, Size: 0x4]// 0x7611f4a230
	uint32 ActorDemoNetGUID;//[Offset: 0x8, Size: 0x4]// 0x7611f4a1c0
	int InstanceID;//[Offset: 0xc, Size: 0x4]// 0x7611f4a150
	int TeamID;//[Offset: 0x10, Size: 0x4]// 0x7611f4a0e0
	int TemplateID;//[Offset: 0x14, Size: 0x4]// 0x7611f4a070
	int ExParam;//[Offset: 0x18, Size: 0x4]// 0x7611f4a000
	Vector TargetPos;//[Offset: 0x1c, Size: 0xc]// 0x7611f49f80
	Actor* TargetActor;//[Offset: 0x28, Size: 0x8]// 0x7611f49f00
	FString TargetUIInfo;//[Offset: 0x30, Size: 0x10]// 0x7611f49e90
	FString TargetTempParam;//[Offset: 0x40, Size: 0x10]// 0x7611f49e20

--------------------------------
Class: WeaponModuleManager.Object
	FString MgrClassPath;//[Offset: 0x28, Size: 0x10]// 0x760d143670
	FString WeaponMuduleConfigTablePath;//[Offset: 0x38, Size: 0x10]// 0x760d1436e0
	FString WeaponAttrConfigTablePath;//[Offset: 0x48, Size: 0x10]// 0x760d143750
	GameModeWeaponModuleSchemeConfig[] GameModeWeaponModuleSchemeConfigList;//[Offset: 0x58, Size: 0x10]// 0x75a8482100
	UAEDataTable* WeaponMuduleConfigTable;//[Offset: 0x68, Size: 0x8]// 0x75a8482180
	UAEDataTable* WeaponAttrConfigTable;//[Offset: 0x70, Size: 0x8]// 0x75a8482200
	<int,ShootWeaponModifierConfig> ShootWeaponADSTimeConfig;//[Offset: 0xc8, Size: 0x50]// 0x75a861f1c0
	<int,ShootWeaponModifierConfig> ShootWeaponADSFireAnimAlphaRateConfig;//[Offset: 0x118, Size: 0x50]// 0x75a861f280
	int ShootWeaponNOTADSFireAnimAlphaRateID;//[Offset: 0x168, Size: 0x4]// 0x760d1438a0
	void SwitchModificationScheme(STExtraBaseCharacter* Player, enum Type);// 0x48137bc
	void RemoveWeaponAllModifies(STExtraWeapon* Weapon, bool OnDestroy);// 0x48136fc
	void InitWeaponModuleSystemOnServer(STExtraWeapon* Weapon);// 0x4813680
	static WeaponModuleManager* Get(Object* Context);// 0x4813604
	int GenerateAttrModifyItemIDByWeaponModuleAttrItemID(STExtraWeapon* Weapon, int ModuleAttrItemID, int MulVal);// 0x4813504
	void EnableWeaponModuleModificationSystemOnServerAsWeaponExist(STExtraWeapon* Weapon, bool bEnable);// 0x4813444
	void EnableWeaponModuleModificationSystemOnServer(STExtraWeapon* Weapon, bool bEnable);// 0x4813384
	void DynamicEnablePlayerWeaponModuleSystemOnServer(STExtraBaseCharacter* Player, bool bEnable);// 0x48132c4
	void CalcShootWeaponFireAnimAlphaRate(STExtraWeapon* ShootWeapon, int ScopeID);// 0x481320c
	void CalcShootWeaponADSTime(STExtraWeapon* ShootWeapon, int ScopeID);// 0x4813154

--------------------------------
Class: GameModeWeaponModuleSchemeConfig
	FString[] GameModeNameList;//[Offset: 0x0, Size: 0x10]// 0x7612233a50
	<enum,FString> SchemeTypeAndNameMap;//[Offset: 0x10, Size: 0x50]// 0x7612233830
	enum DefaultSchemeType;//[Offset: 0x60, Size: 0x1]// 0x7612233730

--------------------------------
Class: ShootWeaponModifierConfig
	int[] Ids;//[Offset: 0x0, Size: 0x10]// 0x7612233be0

--------------------------------
Class: EmotePlayer
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]// 0x7611f584c0
	uint32 FollowPlayer;//[Offset: 0x4, Size: 0x4]// 0x7611f58450
	int EmoteID;//[Offset: 0x8, Size: 0x4]// 0x7611f583e0
	bool bCanCostSpecMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x7611f58360
	Vector Pos;//[Offset: 0x10, Size: 0xc]// 0x7611f582e0

--------------------------------
Class: TeamSegmentInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]// 0x7611f57a00
	int SegmentID;//[Offset: 0x4, Size: 0x4]// 0x7611f57990

--------------------------------
Class: PlayerDeadShootKillerCacheInfo
	STExtraCharacter* Killer;//[Offset: 0x0, Size: 0x8]// 0x7611f57180
	STExtraCharacter* Victim;//[Offset: 0x8, Size: 0x8]// 0x7611f57100
	int64 KillerPlayerKey;//[Offset: 0x10, Size: 0x8]// 0x7611f57090
	FString KillerWeaponInfo;//[Offset: 0x18, Size: 0x10]// 0x7611f57020
	int64 DeadServerUnixTimestampMillseconds;//[Offset: 0x28, Size: 0x8]// 0x7611f56fb0
	float KillerPing;//[Offset: 0x30, Size: 0x4]// 0x7611f56f40
	float VictimPing;//[Offset: 0x34, Size: 0x4]// 0x7611f56ed0
	float DSVictimPosToHitPosDis;//[Offset: 0x38, Size: 0x4]// 0x7611f56e60

--------------------------------
Class: ChampionStateChecker.Object
	FString[] FloatGamemodeWhitelist;//[Offset: 0x28, Size: 0x10]// 0x75b4ed2b80
	FString[] FloatAttachmentWhitelist;//[Offset: 0x38, Size: 0x10]// 0x75b4ed2c00
	FString[] InvincibleGamemodeWhiteList;//[Offset: 0x48, Size: 0x10]// 0x75b4ed2c80
	FString[] InvincibleAttachmentWhiteList;//[Offset: 0x58, Size: 0x10]// 0x75b4ed2d00
	FString[] DeadPawnGamemodeWhitelist;//[Offset: 0x68, Size: 0x10]// 0x75b4ed2d80
	FString[] TheLastTeamGamemodeWhitelist;//[Offset: 0x78, Size: 0x10]// 0x75b4ed2e00
	FString[] AllTeamResultsGamemodeWhitelist;//[Offset: 0x88, Size: 0x10]// 0x75b4ed2e80
	FString[] PlayerResultGamemodeWhitelist;//[Offset: 0x98, Size: 0x10]// 0x75b4ed2f00
	void ReTestFloat(STExtraBaseCharacter* InCha, FString MsgTag, int CurCicleIndex, bool CheckParachute);// 0x423d17c
	void CheckTeamResult(int TeamID, FString Reason);// 0x423d0b8
	void CheckRemainCharacterState(uint32 PlayerKey, FString Reason);// 0x423cff4
	void CheckChampionCharacterState(uint32 PlayerKey, FString Reason);// 0x423cf30
	void CheckAllTeamResults();// 0x423cf1c

--------------------------------
Class: ReConnectGameStateInfo
	byte AirAttackStatus;//[Offset: 0x0, Size: 0x1]// 0x7611f3af50
	Vector AirAttackArea;//[Offset: 0x4, Size: 0xc]// 0x7611f3aed0
	int AirAttackWave;//[Offset: 0x10, Size: 0x4]// 0x7611f3ae60
	int PlayerNumOnPlane;//[Offset: 0x14, Size: 0x4]// 0x7611f3adf0
	enum AirAttackMode;//[Offset: 0x18, Size: 0x1]// 0x7611f3acf0

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 0x1]// 0x7611f2dd90
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 0x1]// 0x7611f2dc30

--------------------------------
Class: ClientFatalDamageRecordDataSimple
	byte ClientFatalItemType;//[Offset: 0x0, Size: 0x1]// 0x7611f48c90
	uint32 CauserKey;//[Offset: 0x4, Size: 0x4]// 0x7611f48c20
	FName HitBoneName;//[Offset: 0x8, Size: 0x8]// 0x7611f48bb0
	UAECharacter* CauserPtr;//[Offset: 0x10, Size: 0x8]// 0x7611f48b30
	int CauserTeamId;//[Offset: 0x18, Size: 0x4]// 0x7611f48ac0
	uint32 VictimKey;//[Offset: 0x1c, Size: 0x4]// 0x7611f48a50
	uint32 RealKillerKey;//[Offset: 0x20, Size: 0x4]// 0x7611f489e0
	int DamageType;//[Offset: 0x24, Size: 0x4]// 0x7611f48970
	int AdditionalParam;//[Offset: 0x28, Size: 0x4]// 0x7611f48900
	int[] KillFXItemID;//[Offset: 0x30, Size: 0x10]// 0x7611f48810
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x7611f48790
	bool bIsVictimMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x7611f48710
	int ResultHealthStatus;//[Offset: 0x44, Size: 0x4]// 0x7611f486a0
	byte RecordRelationShip;//[Offset: 0x48, Size: 0x1]// 0x7611f48620
	int PreviousHealthStatus;//[Offset: 0x4c, Size: 0x4]// 0x7611f485b0
	bool IsKilledByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x7611f48530
	int RealKillNum;//[Offset: 0x54, Size: 0x4]// 0x7611f484c0
	int AliveTeamNum;//[Offset: 0x58, Size: 0x4]// 0x7611f48450
	int LocalPlayerAssistNum;//[Offset: 0x5c, Size: 0x4]// 0x7611f483e0
	int KillDistance;//[Offset: 0x60, Size: 0x4]// 0x7611f48370
	byte MaxKillerStatus;//[Offset: 0x64, Size: 0x1]// 0x7611f482f0
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x68, Size: 0x10]// 0x7611f481f0
	bool AllTeammateDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x7611f48170
	bool AllTeammateKillBySameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]// 0x7611f480f0
	class DamageType* DamageTypeClass;//[Offset: 0x80, Size: 0x8]// 0x7611f48070

--------------------------------
Class: CompactAirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 0x4]// 0x7611f44670
	int bombsCount;//[Offset: 0x4, Size: 0x4]// 0x7611f44600
	Vector attackCenter;//[Offset: 0x8, Size: 0xc]// 0x7611f44580
	float attackRadius;//[Offset: 0x14, Size: 0x4]// 0x7611f44510
	float bombsRadius;//[Offset: 0x18, Size: 0x4]// 0x7611f444a0
	float attackAngleBase;//[Offset: 0x1c, Size: 0x4]// 0x7611f44430
	float attackAngleRandInterval;//[Offset: 0x20, Size: 0x4]// 0x7611f443c0
	float attackRadiusBase;//[Offset: 0x24, Size: 0x4]// 0x7611f44350
	float attackRadiusRandInterval;//[Offset: 0x28, Size: 0x4]// 0x7611f442e0
	float[] attackPosZ;//[Offset: 0x30, Size: 0x10]// 0x7611f441f0
	float attackDuringTime;//[Offset: 0x40, Size: 0x4]// 0x7611f44180
	float bombsIntervalRand;//[Offset: 0x44, Size: 0x4]// 0x7611f44110

--------------------------------
Class: BlendWeatherCfg
	enum WeatherType;//[Offset: 0x0, Size: 0x1]// 0x7612184470
	float Duration;//[Offset: 0x4, Size: 0x4]// 0x7612184400
	float BlendTime;//[Offset: 0x8, Size: 0x4]// 0x7612184390
	bool ModifySkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x7612184310
	bool ModifySkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x7612184290
	bool ModifyFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]// 0x7612184210
	bool ModifyMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]// 0x7612184190
	bool ModifySkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7612184110
	bool UseChangeRenderSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x7612184090
	bool UseChangeFogActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]// 0x7612184010
	bool UseChangeSkySwitchActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]// 0x7612183f90
	bool UseChangeSkySphereActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]// 0x7612183f10

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7612183560
	FString ScreenAppearanceName;//[Offset: 0x8, Size: 0x10]// 0x76121834f0
	byte ParticleType;//[Offset: 0x18, Size: 0x1]// 0x7612183470
	float ScreenAppearanceConcentration;//[Offset: 0x1c, Size: 0x4]// 0x7612183400
	FName ShaderName;//[Offset: 0x20, Size: 0x8]// 0x7612183390

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 0x10]// 0x7612182fe0
	ExponentialHeightFog* Fog;//[Offset: 0x10, Size: 0x8]// 0x7612182f60
	DynamicFogCustomParam DstWeatherFog;//[Offset: 0x18, Size: 0x58]// 0x7612182ee0
	DynamicFogCustomParam SrcWeatherFog;//[Offset: 0x70, Size: 0x58]// 0x76121827d0
	float BlendTime;//[Offset: 0xc8, Size: 0x4]// 0x7612182760
	CurveFloat* SpeedCurve;//[Offset: 0xd0, Size: 0x8]// 0x76121826e0
	bool BlendFogDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]// 0x7612182660
	bool BlendCustomFogLow_DensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]// 0x76121825e0
	bool BlendCustomFogHigh_DensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]// 0x7612182560
	bool BlendCustomFogLow_Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]// 0x76121824e0
	bool BlendCustomFogHigh_Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]// 0x7612182460
	bool BlendFogInscatteringColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]// 0x76121823e0
	bool BlendFogHeightFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]// 0x7612182360
	bool BlendFogMaxOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 0x1]// 0x76121822e0
	bool BlendStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]// 0x7612182260
	bool BlendFogCutoffDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]// 0x76121821e0
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0xe8, Size: 0x10]// 0x76121820e0

--------------------------------
Class: DynamicFogCustomParam
	float FogDensity;//[Offset: 0x0, Size: 0x4]// 0x7612182e70
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7612182df0
	float CustomFogLow_Height;//[Offset: 0x8, Size: 0x4]// 0x7612182d80
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 0x4]// 0x7612182d10
	LinearColor CustomFogLow_Color;//[Offset: 0x10, Size: 0x10]// 0x7612182c90
	float CustomFogHigh_Height;//[Offset: 0x20, Size: 0x4]// 0x7612182c20
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x24, Size: 0x4]// 0x7612182bb0
	LinearColor CustomFogHigh_Color;//[Offset: 0x28, Size: 0x10]// 0x7612182b30
	LinearColor FogInscatteringColor;//[Offset: 0x38, Size: 0x10]// 0x7612182ab0
	float FogHeightFalloff;//[Offset: 0x48, Size: 0x4]// 0x7612182a40
	float FogMaxOpacity;//[Offset: 0x4c, Size: 0x4]// 0x76121829d0
	float StartDistance;//[Offset: 0x50, Size: 0x4]// 0x7612182960
	float FogCutoffDistance;//[Offset: 0x54, Size: 0x4]// 0x76121828f0

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 0x8]// 0x7612183270
	float CurWeatherDuration;//[Offset: 0x8, Size: 0x4]// 0x7612183200

--------------------------------
Class: ObserverHostComponent.TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	delegate EventCDChangeDelegate;//[Offset: 0x198, Size: 0x10]// 0x761208b3f0
	delegate OnRepAdditionalDataDelegate;//[Offset: 0x1a8, Size: 0x10]// 0x761208b370
	delegate OnUpdateDynamicEventCDDelegate;//[Offset: 0x1b8, Size: 0x10]// 0x761208b2f0
	ObserverHostDynamicEventCfg[] DynamicEventCfg;//[Offset: 0x1c8, Size: 0x10]// 0x761208af00
	int[] MultipleTriggerEventIDList;//[Offset: 0x1d8, Size: 0x10]// 0x761208ae10
	ObserverHostDynamicEventCDInfo[] CurDynamicEvents;//[Offset: 0x1e8, Size: 0x10]// 0x761208aab0
	ObserverHostEventCDInfo[] EventCDInfo;//[Offset: 0x1f8, Size: 0x10]// 0x761208a9b0
	ObserverHostAdditionalData[] AdditionalData;//[Offset: 0x208, Size: 0x10]// 0x761208a8b0
	ObserverHostEventCDInfo[] EventCDServerInfo;//[Offset: 0x218, Size: 0x10]// 0x761208a7b0
	void SetAdditionalData(out const ObserverHostAdditionalData Data);// 0x445c3a4
	void ServerTriggerEventWithPlayerKey(FName EventName, FString PlayerKey);// 0x445c2a8
	void ServerTriggerEvent(FName EventName);// 0x445c1f8
	void ServerSetNextCircle(Vector CirclePos);// 0x445c140
	void ServerSelectDynamicEvent(int waveindex, FName EventName);// 0x445c050
	void OnRepAdditionalDataDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void OnRep_EventCDInfo();// 0x445c03c
	void OnRep_DynamicEventCDInfo();// 0x445c028
	void OnRep_AdditionalData();// 0x445c014
	void OnMakeCircle(int Index);// 0x445bf98
	void OnEventCDChangeDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	ObserverHostEventCDInfo GetEventCDInfo(FString EventName);// 0x445be9c
	ObserverHostAdditionalData GetAdditionalData(FString Name);// 0x445bd6c

--------------------------------
Class: TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]// 0x76120890f0
	RegisterTimer[] TimerRegister;//[Offset: 0x148, Size: 0x10]// 0x7612088df0
	FString TimerName;//[Offset: 0x158, Size: 0x10]// 0x7612088d80
	bool bEndTimerWhenGameFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]// 0x7612088d00
	void StartTimer();// 0x47224c4
	void SetEndTimerWhenGameFinish(bool bEndTimer);// 0x4722444
	void OnGameEnterFinish();// 0x4722428
	void OnGameEnterFight();// 0x472240c
	void EndTimer();// 0x47223f0

--------------------------------
Class: GameModeBaseComponent.ActorComponent.Object
	UAEGameMode* OwnerGameMode;//[Offset: 0x118, Size: 0x8]// 0x7611f33f70
	World* OwnerWorld;//[Offset: 0x120, Size: 0x8]// 0x7611f33ef0
	bool bHasInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]// 0x7611f33e70
	enum[] AssociatedDatas;//[Offset: 0x130, Size: 0x10]// 0x7611f33c90
	void Update(float DeltaTime);// 0x4e72cec
	void UnInit();// 0x4e72cd0
	bool IsAssociatedDatasValid();// 0x4e72c90
	void Init();// 0x4e72c74
	void FinishCreateAssociatedDatas(enum InSubSystemType);// 0x4e72bf0

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0, Size: 0x4]// 0x7612089080
	float[] Times;//[Offset: 0x8, Size: 0x10]// 0x7612088f90

--------------------------------
Class: ObserverHostDynamicEventCfg
	int EventType;//[Offset: 0x0, Size: 0x4]// 0x761208b280
	float StartTime;//[Offset: 0x4, Size: 0x4]// 0x761208b210
	float LastTime;//[Offset: 0x8, Size: 0x4]// 0x761208b1a0
	bool BExcuteImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x761208b120
	bool BIgnorSelectedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x761208b0a0

--------------------------------
Class: ObserverHostDynamicEventCDInfo
	int waveindex;//[Offset: 0x0, Size: 0x4]// 0x761208ada0
	int EventType;//[Offset: 0x4, Size: 0x4]// 0x761208ad30
	int CD;//[Offset: 0x8, Size: 0x4]// 0x761208acc0
	FName CurSelect;//[Offset: 0x10, Size: 0x8]// 0x761208ac50

--------------------------------
Class: ObserverHostEventCDInfo
	FString EventName;//[Offset: 0x0, Size: 0x10]// 0x7612089af0
	float CD;//[Offset: 0x10, Size: 0x4]// 0x7612089a80
	float CurCD;//[Offset: 0x14, Size: 0x4]// 0x7612089a10
	float EndTime;//[Offset: 0x18, Size: 0x4]// 0x76120899a0
	float CurTime;//[Offset: 0x1c, Size: 0x4]// 0x7612089930
	int TriggerTimes;//[Offset: 0x20, Size: 0x4]// 0x76120898c0
	int MaxTriggerTimes;//[Offset: 0x24, Size: 0x4]// 0x7612089850
	int TriggerTimesGroup;//[Offset: 0x28, Size: 0x4]// 0x76120897e0
	bool IsMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7612089760

--------------------------------
Class: ObserverHostAdditionalData
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x76120894a0
	float FloatData;//[Offset: 0x10, Size: 0x4]// 0x7612089430
	FString StringData;//[Offset: 0x18, Size: 0x10]// 0x76120893c0
	int IntData;//[Offset: 0x28, Size: 0x4]// 0x7612089350

--------------------------------
Class: OBTypeUISource.Object
	STExtraGameStateBase* CurGameState;//[Offset: 0x38, Size: 0x8]// 0x75a8440400
	int CurrentMaxTeamID;//[Offset: 0x4c, Size: 0x4]// 0x75a8872170
	<int,TeamLogoInfoInOB> TeamLogoInfoMap;//[Offset: 0x50, Size: 0x50]// 0x75a8852240
	bool bBuildForWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]// 0x75a8440500
	int ShootLineFilterRadius;//[Offset: 0xa8, Size: 0x4]// 0x75a8872250
	float ShootLineUpdateTimeRate;//[Offset: 0xac, Size: 0x4]// 0x75a88722c0
	MapShootLineInfo[] MapShootLines;//[Offset: 0xb8, Size: 0x10]// 0x75a8440600
	FString[] MapBeHitPlayerNames;//[Offset: 0xc8, Size: 0x10]// 0x75a8440680
	<int,AreaParam> AreaParamCache;//[Offset: 0xe0, Size: 0x50]// 0x75a8852300
	int LastAreaID;//[Offset: 0x130, Size: 0x4]// 0x75a8872410
	delegate RefreshMCPlayerListDelegate;//[Offset: 0x138, Size: 0x10]// 0x75a8440780
	delegate RefreshTeamDistanceWarningDelegate;//[Offset: 0x148, Size: 0x10]// 0x75a8440800
	int[] TeamOrder;//[Offset: 0x158, Size: 0x10]// 0x75a8440880
	TeamDistanceWarningInOB[] MapDistanceWarningTeams;//[Offset: 0x168, Size: 0x10]// 0x75a8440980
	void UpdateMapShootLine(float InDeltaTime);// 0x445ebc4
	void UpdateEntireMapTeamLogos();// 0x445ebb0
	void SetFreeViewUpRate(float Rate);// 0x445eb34
	void SetCurAirDropID(int inDropID);// 0x445eab8
	void SetAvatarCaptureInfo(AvatarCapture* Info);// 0x445ea3c
	void OnSyncOBDataActorReady();// 0x445ea28
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName, int BattleTextID, int AreaID);// 0x445e750
	bool IsEnableSignalBar();// 0x445e718
	bool IsCurrentSpectatorFreeView();// 0x445e6e0
	int GetWhiteCircleDistance();// 0x445e6ac
	Pawn* GetViewerPawn();// 0x445e678
	STExtraPlayerController* GetViewerController();// 0x445e644
	PlayerInfoInOB[] GetTotalPlayerList_SortedByTeamID();// 0x445e570
	PlayerInfoInOB[] GetTotalPlayerList();// 0x445e49c
	<int,TeamInfoInOB> GetTeamInfoInOBMap();// 0x445e3dc
	PlayerInfoInOB[] GetSameTeamPlayerList();// 0x445e308
	<int,RouteSegment> GetRouteSegmentList();// 0x445e248
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x445e150
	PlayerInfoInOB[] GetNearPlayerList();// 0x445e07c
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x445df88
	PlayerInfoInOB GetKillerPlayerInfoInOBByName(FString InPlayerName);// 0x445de90
	bool GetIsFreeViewCamera();// 0x445de58
	float GetFreeViewUpRate();// 0x445de24
	ObservedData GetCurViewerOBData();// 0x445dccc
	AvatarCapture* GetAvatarCaptureInfo();// 0x445dc98
	int GetAliveTeamNum();// 0x445dc64
	AirDropBoxInOb[] GetAirDropBoxList();// 0x445dbe4
	int FetchSpecifiedAreaIDByCache(Vector PlayerLocation, out int BattleTextID);// 0x445db04
	void ChangeViewerTeam(int TeamID);// 0x445da88
	void ChangeViewerCharacter(FString InPlayerName);// 0x445d9b0
	void ChangeFreeViewCamera();// 0x445d99c

--------------------------------
Class: TeamLogoInfoInOB
	int AlivePlayerCount;//[Offset: 0x0, Size: 0x4]// 0x76121b6990
	FString LastPlayerUID;//[Offset: 0x8, Size: 0x10]// 0x76121b6920
	FString LogoPicUrl;//[Offset: 0x18, Size: 0x10]// 0x76121b68b0
	Vector LogoPosWorld3D;//[Offset: 0x28, Size: 0xc]// 0x76121b6830

--------------------------------
Class: MapShootLineInfo
	float LineDistance3D;//[Offset: 0x0, Size: 0x4]// 0x76121b6720
	float LineAngle;//[Offset: 0x4, Size: 0x4]// 0x76121b66b0
	Vector BeginLocation;//[Offset: 0x8, Size: 0xc]// 0x76121b6630
	Vector EndLocation;//[Offset: 0x14, Size: 0xc]// 0x76121b65b0

--------------------------------
Class: TeamDistanceWarningInOB
	int Distance;//[Offset: 0x0, Size: 0x4]// 0x76121b64a0
	int[] Teams;//[Offset: 0x8, Size: 0x10]// 0x76121b63b0

--------------------------------
Class: UserWidgetStyle.DataAsset.Object
	UserWidgetStyleInfo[] StylesInfo;//[Offset: 0x30, Size: 0x10]// 0x75a791b900
	bool bShouldHidenJoystick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x75a791b980
	bool bShowHidenJoystick_NoDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x75a791ba00
	bool bShouldHidenCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]// 0x75a791ba80
	bool bUseBLEBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]// 0x75a791bb00
	BLEEnumInfo[] BLEBlackList;//[Offset: 0x48, Size: 0x10]// 0x75a791bc00
	float UnloadDurationTime;//[Offset: 0x58, Size: 0x4]// 0x75a793aa20
	TimerHandle UnloadTimerHandle;//[Offset: 0x60, Size: 0x8]// 0x75a791bc80

--------------------------------
Class: UserWidgetStyleInfo
	FName ClassName;//[Offset: 0x0, Size: 0x8]// 0x75d1016ae0
	class UserWidget* ClassSoftClass;//[Offset: 0x8, Size: 0x28]// 0x75d0ae0d80
	UserWidgetRefInfo[] RefWidget;//[Offset: 0x30, Size: 0x10]// 0x75d0ae0e80
	Object*[] RefObject;//[Offset: 0x40, Size: 0x10]// 0x75d0ae0f80
	int BuffSize;//[Offset: 0x50, Size: 0x4]// 0x75d1016b50
	WidgetTree* WidgetTree;//[Offset: 0x58, Size: 0x8]// 0x75d0ae1000
	bool bHaveInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x75d0ae1080
	bool bHaveSaveedOld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]// 0x75d0ae1100
	UserWidgetRefInfo[] TrainsRecoverInfo;//[Offset: 0x68, Size: 0x10]// 0x75d0ae1300

--------------------------------
Class: UserWidgetRefInfo
	Widget* RefWidget;//[Offset: 0x0, Size: 0x8]// 0x75d0ae1180
	FName SimpleName;//[Offset: 0x8, Size: 0x8]// 0x75d1016bc0
	bool bAdvanceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x75d0ae1200

--------------------------------
Class: BLEEnumInfo
	int BLEValue;//[Offset: 0x0, Size: 0x4]// 0x75d1016a70

--------------------------------
Class: PlayerCameraPossessManager.CameraPossessManager.ActorComponent.Object
	CurveVector* LandingHeavyCameraCurve;//[Offset: 0x368, Size: 0x8]// 0x75a83d4880
	STExtraPlayerCharacter* PossessedPlayerCache;//[Offset: 0x370, Size: 0x8]// 0x75a83d4900
	void InitFromNewCharacter(STExtraPlayerCharacter* InPlayerCharacter);// 0x448c22c
	void HandlePlayerStateLeave(enum LeavedState);// 0x448c1a8
	void HandlePlayerStateInterrupted(int stateID, int InterruptedBy);// 0x448c0ec
	void HandlePlayerStateEnter(enum EnteredState);// 0x448c068
	void HandlePlayerPoseStateChanged(bool IsEnable);// 0x448bfe4
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x448bf2c
	void HandlePlayerPeek(bool IsPeeking, bool IsPeekingLeft);// 0x448be5c
	void HandlePlayerNearDeath(bool IsNearDeath);// 0x448bdd8
	void HandlePlayerIndoorStateChanged(bool IsIndoor);// 0x448bd54
	void HandlePlayerIndoorLowerStateChanged(bool IsIndoor);// 0x448bcd0
	void HandleCharacterDetachedFromVehicle(STExtraVehicleBase* InTargetVehicle);// 0x448bc54
	void HandleCharacterAttachedToVehcicle(STExtraVehicleBase* InTargetVehicle);// 0x448bbd8
	void EnterLandingHeavy();// 0x448bbc4

--------------------------------
Class: CameraPossessManager.ActorComponent.Object
	CameraPossessData[] StaticCameraPossessList;//[Offset: 0x118, Size: 0x10]// 0x75a83d5180
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0x128, Size: 0x4]// 0x75a83f8670
	float ArmLengthInterpSpeed;//[Offset: 0x12c, Size: 0x4]// 0x75a83f86e0
	float TargetOffsetInterpSpeed;//[Offset: 0x130, Size: 0x4]// 0x75a83f8750
	float SocketOffsetInterpSpeed;//[Offset: 0x134, Size: 0x4]// 0x75a83f87c0
	float DesiredRotationOffsetInterpSpeed;//[Offset: 0x138, Size: 0x4]// 0x75a83f8830
	float CameraRotOffsetInterpSpeed;//[Offset: 0x13c, Size: 0x4]// 0x75a83f88a0
	float FieldOfViewInterpSpeed;//[Offset: 0x140, Size: 0x4]// 0x75a83f8910
	CameraPossessData[] DynamicCameraPossessList;//[Offset: 0x148, Size: 0x10]// 0x75a83d5280
	CameraPossessData[] CurrentActiveCameraPossessList;//[Offset: 0x158, Size: 0x10]// 0x75a83d5380
	FName[] CurrentActiveModifyNameList;//[Offset: 0x168, Size: 0x10]// 0x75a83d5400
	CameraModifyData[] CurrentActiveCameraModifyList;//[Offset: 0x178, Size: 0x10]// 0x75a83d5500
	CameraModifyData CurrentCameraModifyResult;//[Offset: 0x190, Size: 0x170]// 0x75a83d5580
	class PossessedSpringArmComponent* SpringArmClass;//[Offset: 0x300, Size: 0x8]// 0x75a83d5600
	class PossessedCameraComponent* CameraClass;//[Offset: 0x308, Size: 0x8]// 0x75a83d5680
	PossessedSpringArmComponent* ManagedSpringArm;//[Offset: 0x310, Size: 0x8]// 0x75a83d5700
	PossessedCameraComponent* ManagedCamera;//[Offset: 0x318, Size: 0x8]// 0x75a83d5780
	CameraAnimData[] CameraAnimDataList;//[Offset: 0x320, Size: 0x10]// 0x75a83d5880
	Vector AnimExtraTargetOffset;//[Offset: 0x330, Size: 0xc]// 0x75a83d5900
	Vector AnimExtraSocketOffset;//[Offset: 0x33c, Size: 0xc]// 0x75a83d5980
	Vector SpringArmTargetOffsetCache;//[Offset: 0x348, Size: 0xc]// 0x75a83d5a00
	Vector SpringArmSocketOffsetCache;//[Offset: 0x354, Size: 0xc]// 0x75a83d5a80
	bool IsCameraShouldActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]// 0x75a83d5b00
	void UpdateCameraAnimData(float DeltaTime);// 0x49107c0
	void SetCurrentSpringArmLength(float newSpringLength);// 0x4910744
	bool SetCameraPossessActive(FName InPossessName, bool InIsActive, SceneComponent* InAttachParentComp, bool Force);// 0x49105e8
	void SetCameraModifyEnable(FName InCameraPossessName, FName InCameraModifyName, bool InEnable, bool AutoRecalculateCameraModify);// 0x491049c
	void SetCameraActive(bool InIsActive);// 0x4910410
	void RemoveDynamicCameraPossess(FName InPossessName);// 0x4910394
	void RemoveDynamicCameraModify(FName InCameraPossessName, FName InCameraModifyName, bool ApplyImmediately);// 0x491029c
	void RefreshCameraModify(bool ApplyImmediately);// 0x4910218
	void RecalculateCameraModify(bool ApplyImmediately);// 0x4910194
	void PlayCameraCurveAnim(byte CameraAnimType, CurveVector* CurveVec);// 0x49100dc
	static bool IsEnableCameraPossessAllFeatureActive();// 0x49100a4
	static bool IsEnableCameraPossess();// 0x491006c
	float GetCurrentSpringArmLength();// 0x4910038
	SpringArmComponent* GetCurrentSpring();// 0x491001c
	CameraComponent* GetCurrentCamera();// 0x4910000
	FName[] GetCurrentActiveModifyNameList();// 0x490ff40
	FName GetCurrentActiveCameraPossessName();// 0x490fef0
	CameraPossessData[] GetCurrentActiveCameraPossessList();// 0x490fdd0
	CameraPossessData GetCurrentActiveCameraPossessData();// 0x490fd8c
	CameraPossessData GetCameraPossessDataByName(out const FName InPossessName);// 0x490fc78
	bool FindCameraPossess(FName InCameraPossessName, out CameraPossessData OutCameraPossessData);// 0x490f9e8
	bool FindCameraModify(out const CameraPossessData InPossessData, FName InCameraModifyName, out CameraModifyData OutCameraModifyData);// 0x490f5ac
	void ApplyCameraModifyData(out const CameraModifyData InData, float DeltaTime);// 0x490f378
	void AddOrRemoveModifyDataFromCurrentActiveList(out const CameraModifyData InModifyData, bool IsAdd, bool AutoRecalculateCameraModify, bool ApplyImmediately);// 0x490f0ac
	bool AddDynamicCameraPossess(out const CameraPossessData InCameraPossessData, bool IsAutoPossess);// 0x490ee28
	void AddDynamicCameraModify(FName InCameraPossessName, out const CameraModifyData InModifyData, bool IsAutoActive, bool ApplyImmediately);// 0x490eb3c

--------------------------------
Class: CameraPossessData
	FName PossessName;//[Offset: 0x0, Size: 0x8]// 0x76119be700
	FName[] OverridePossessNameList;//[Offset: 0x8, Size: 0x10]// 0x760d23e600
	CameraModifyData DefaultCameraData;//[Offset: 0x20, Size: 0x170]// 0x760d23e680
	CameraModifyData[] StaticCameraModifyDataList;//[Offset: 0x190, Size: 0x10]// 0x760d23e780
	CameraModifyData[] DynamicCameraModifyDataList;//[Offset: 0x1a0, Size: 0x10]// 0x760d23e880
	bool bDestroyStaticCameraComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]// 0x760d23e900
	SceneComponent*[] StaticCameraAndSpringArm;//[Offset: 0x1b8, Size: 0x10]// 0x760d23ea00

--------------------------------
Class: PossessedSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]// 0x75a7b57180
	float SpringArmRestoreInterpSpeed;//[Offset: 0x36c, Size: 0x4]// 0x75a7b8a490
	CameraPossessManager* OwnerManager;//[Offset: 0x370, Size: 0x8]// 0x75a7b57200

--------------------------------
Class: PossessedCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraPossessManager* OwnerManager;//[Offset: 0x8b0, Size: 0x8]// 0x75a7b57280

--------------------------------
Class: CameraAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]// 0x760d23ea80
	CurveVector* AnimCurve;//[Offset: 0x4, Size: 0x8]// 0x760d23eb00

--------------------------------
Class: ScreenAppearanceActor.Actor.Object
	bool EnableScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]// 0x75a876e380
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x518, Size: 0x10]// 0x75a876e480
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x528, Size: 0x50]// 0x75b4cb6180
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x578, Size: 0x10]// 0x75a876e600
	Transform RelativeTransform;//[Offset: 0x590, Size: 0x30]// 0x75a876e680
	float FOV;//[Offset: 0x5c0, Size: 0x4]// 0x75a87bf6c0
	ScreenAppearanceVolume*[] ScreenAppearanceVolumesInThisWorld;//[Offset: 0x5e0, Size: 0x10]// 0x75a876e780
	void StopScreenAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x4506e04
	void StopScreenAppearance(ScreenAppearanceProvider* Provider);// 0x4506d88
	void StopAllScreenAppearances(const Actor* AppearanceOwner);// 0x4506d0c
	void SetScalarParameter(out const FName ParameterName, float ParameterValue);// 0x4506c38
	void SetFloatParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, float NewValue);// 0x4506b14
	void SetColorParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, out const LinearColor NewValue);// 0x45069e4
	void SetColorParameter(out const FName ParameterName, out const LinearColor ParameterValue);// 0x4506904
	Actor* ResolveAppearanceOwner(Actor* InOwner);// 0x4506870
	ScreenAppearanceProvider* PlayDefaultScreenAppearance(const Actor* AppearanceOwner, FName AppearanceName, const Actor* causer);// 0x4506770
	bool IsScreenAppearancePlaying(const Actor* AppearanceOwner, FName AppearanceName);// 0x45066a8
	bool HasActiveAppearance();// 0x4506670
	PlayerController* GetPlayerController();// 0x450659c
	PlayerCameraManager* GetPlayerCameraManager();// 0x4506520
	Actor* GetCurrentViewTarget();// 0x45064ec
	ScreenAppearanceProvider* FindDefaultScreenAppearanceProvider(out const FName Name);// 0x4506450
	ScreenAppearanceProvider* FindAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x450638c
	void Enable();// 0x4506378
	void Disable();// 0x4506364

--------------------------------
Class: ScreenAppearanceProvider.Object
	FName AppearanceName;//[Offset: 0x28, Size: 0x8]// 0x75a87bf260
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]// 0x75a876db80
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]// 0x75a876dc00
	float TickInterval;//[Offset: 0x34, Size: 0x4]// 0x75a87bf2d0
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x38, Size: 0x10]// 0x75a876dd00
	float LifeSpan;//[Offset: 0x48, Size: 0x4]// 0x75a87bf340
	Transform RelativeTransform;//[Offset: 0x50, Size: 0x30]// 0x75a876dd80
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x80, Size: 0x10]// 0x75a876de80
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x90, Size: 0x10]// 0x75a876df80
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0xc8, Size: 0x8]// 0x75a876e000
	Actor* OwnerActor;//[Offset: 0xd0, Size: 0x8]// 0x75a876e080
	FName[] HighPriorityProviderNames;//[Offset: 0xd8, Size: 0x10]// 0x75a876e100
	void SetVectorParameter(out const FName ParameterName, out const Vector Param);// 0x450801c
	void SetLifeSpan(float NewLifeSpan);// 0x4507fa4
	void SetFloatParameter(out const FName ParameterName, float Param);// 0x4507ed0
	void SetColorParameter(out const FName ParameterName, out const LinearColor Param);// 0x4507df0
	void SetAsset(Object* Asset);// 0x4507d6c
	void ReceiveTick(float DeltaTime);// 0xffffff8a17adf2b0
	void ReceiveEndPlay();// 0xffffff8a17adf2b0
	void ReceiveBeginPlay();// 0xffffff8a17adf2b0
	MaterialInterface* GetMaterial();// 0x4507d30

--------------------------------
Class: AppearanceParameter
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x76121d06a0
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 0x28]// 0x76121d0620

--------------------------------
Class: ScreenAppearanceScalarParameter
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x76121cff40
	float ParameterValue;//[Offset: 0x8, Size: 0x4]// 0x76121cfed0

--------------------------------
Class: ScreenAppearanceColorParameter
	FName ParameterName;//[Offset: 0x0, Size: 0x8]// 0x76121cfdc0
	LinearColor ParameterValue;//[Offset: 0x8, Size: 0x10]// 0x76121cfd40

--------------------------------
Class: ScreenAppearanceProviders
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 0x10]// 0x76121cfba0

--------------------------------
Class: ScreenAppearanceVolume.Volume.Brush.Actor.Object
	ScreenAppearanceProvider*[] EnabledScreenAppearances;//[Offset: 0x548, Size: 0x10]// 0x75a876b380
	FName[] EnabledScreenAppearanceNames;//[Offset: 0x558, Size: 0x10]// 0x75a876b400
	FName[] DisabledScreenAppearanceNames;//[Offset: 0x568, Size: 0x10]// 0x75a876b480

--------------------------------
Class: ActivityFakePossessComponent.ActorComponent.Object
	delegate OnPossess;//[Offset: 0x118, Size: 0x10]// 0x75c98fff80
	delegate OnUnpossess;//[Offset: 0x128, Size: 0x10]// 0x75c9900000
	float DetachSpareOffsetZ;//[Offset: 0x138, Size: 0x4]// 0x75c991e4b0
	bool bDettachSetMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]// 0x75c9900080
	bool bOnDettachedRecoverMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 0x1]// 0x75c9900100
	STExtraBaseCharacter* CurrentPossessCharacter;//[Offset: 0x140, Size: 0x8]// 0x75c9900180
	enum[] DisablePawnState;//[Offset: 0x148, Size: 0x10]// 0x75c9900300
	enum[] RejectPawnState;//[Offset: 0x158, Size: 0x10]// 0x75c9900480
	enum[] ClearPawnState;//[Offset: 0x168, Size: 0x10]// 0x75c9900600
	enum[] CantPossessState;//[Offset: 0x178, Size: 0x10]// 0x75c9900780
	enum[] RejectEvent;//[Offset: 0x188, Size: 0x10]// 0x75c9900900
	FName SubInstanceSlotName;//[Offset: 0x198, Size: 0x8]// 0x75c991e520
	class SubAnimInstanceBase_Activity* SubInstanceClass;//[Offset: 0x1a0, Size: 0x8]// 0x75c9900980
	ActionConditionContainer* ActionConditionContainer;//[Offset: 0x1a8, Size: 0x8]// 0x75c9900a00
	bool bIsInitActionContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]// 0x75c9900a80
	void UndoAction_DS(FName[] ActionNames);// 0x40fb820
	void UndoAction(FName ActionName, bool RPCToClient);// 0x40fb760
	void RequestReject(STExtraBaseCharacter* Character);// 0x40fb6b0
	void OnRep_Possesser(STExtraBaseCharacter* PrePossesser);// 0x40fb634
	void OnPawnStateEnter(enum State);// 0x40fb5b8
	void OnHit(STExtraBaseCharacter* Character, float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x40fb440
	void OnGameEnd(uint32 PlayerKey, FString Reason);// 0x40fb37c
	void OnEventMeetEnter();// 0x40fb368
	void InitActionContainer();// 0x40fb354
	bool HasAuthority();// 0x40fb31c
	void HandleRegistEvent(STExtraBaseCharacter* Character, bool bRecover);// 0x40fb25c
	void HandleClearState(STExtraBaseCharacter* Character, bool bRecover);// 0x40fb19c
	STExtraBaseCharacter* GetCurrentPossesser();// 0x40fb180
	void ForceOnRepPossesser();// 0x40fb168
	void FakeUnPossessWithDettach();// 0x40fb154
	void FakeUnPossess();// 0x40fb140
	bool FakePossessWithAttach(STExtraPlayerController* PC, SceneComponent* AttachScene, FName SocketName, bool bMulticastToClient);// 0x40faff8
	bool FakePossess(STExtraPlayerController* PC);// 0x40faf68
	bool ExecuteCondition(FName ConditionName);// 0x40faed8
	void ExecuteAction_DS(FName[] ActionNames);// 0x40fae00
	bool ExecuteAction(FName ActionName, bool RPCToClient);// 0x40fad2c
	void Client_ExcuteAction(FName ActionName, STExtraBaseCharacter* Character, bool Undo);// 0x40fac2c
	bool CanBePossess(STExtraBaseCharacter* Character);// 0x40fab9c

--------------------------------
Class: SubAnimInstanceBase_Activity.SubAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	Actor* InteractActor;//[Offset: 0x548, Size: 0x8]// 0x75a85bb880
	void Init(Actor* InteractActor);// 0x46f8ef0
	void BlueprintInit(Actor* InteractActor);// 0xffffff8a17adf2b0

--------------------------------
Class: ActionConditionContainer.Object
	SkillActionData[] ActionsList;//[Offset: 0x38, Size: 0x10]// 0x75c9901d00
	SkillConditionData[] ConditionsList;//[Offset: 0x48, Size: 0x10]// 0x75c9901e00
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x58, Size: 0x50]// 0x760d21b300
	Actor* InteractingActor;//[Offset: 0x150, Size: 0x8]// 0x75c9901f00
	void UndoAllAction(Object* InInstanceObj, Actor* InInteractingActor);// 0x40f75f8
	void UndoAction(FName ActionName, Object* InInstanceObj, Actor* InInteractingActor);// 0x40f7508
	bool ExecuteCondition(FName ConditionName, Object* InInstanceObj, Actor* InInteractingActor);// 0x40f7404
	bool ExecuteAction(FName ActionName, Object* InInstanceObj, Actor* InInteractingActor);// 0x40f7300

--------------------------------
Class: SkillActionData
	FName ActionName;//[Offset: 0x0, Size: 0x8]// 0x7612131500
	UTSkillAction* Action;//[Offset: 0x8, Size: 0x8]// 0x7612131480

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x170, Size: 0x4]// 0x75bde17f00
	bool bFinalizeBeforeDestructToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]// 0x75bde17f80
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]// 0x75bde18000
	void UpdateAction_Internal(float DeltaSeconds);// 0x797cd48
	void UpdateAction(Object* InstanceNodeContainer, float DeltaSeconds);// 0x797cc90
	void UndoAction_Internal();// 0x797cc74
	void UndoAction(Object* InstanceNodeContainer);// 0x797cbf0
	void TimerRealDoAction(Object* InstanceNodeContainer);// 0x797cb74
	void Reset_Internal();// 0x797cb58
	void Reset(Object* InstanceNodeContainer);// 0x797cadc
	bool RealDoAction_Internal();// 0x797ca9c
	bool RealDoAction(Object* InstanceNodeContainer);// 0x797ca04
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x797c948
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x797c88c
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x797c7d0
	void OnUpdateAction(float DeltaSeconds);// 0x797c74c
	void OnUndoAction();// 0x797c730
	void OnReset();// 0x797c714
	bool OnRealDoAction();// 0x797c6d4
	void OnPreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x797c618
	void OnPostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x797c55c
	void OnPostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x797c4a0
	void OnFinalizeBeforeDestruct();// 0x797c484
	bool JudgeNeedPhaseWait();// 0x797c444
	bool DoAction(Object* InstanceNodeContainer);// 0x797c3ac

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 0x4]// 0x75c99509b0

--------------------------------
Class: SkillConditionData
	FName ConditionName;//[Offset: 0x0, Size: 0x8]// 0x7612131370
	UTSkillCondition* Condition;//[Offset: 0x8, Size: 0x8]// 0x76121312f0

--------------------------------
Class: AiServiceSpectator.DefaultPawn.Pawn.Actor.Object
	Vector OffsetFromTarget;//[Offset: 0x5bc, Size: 0xc]// 0x75c98c5880
	Rotator OffsetRotation;//[Offset: 0x5c8, Size: 0xc]// 0x75c98c5900
	float InterpPitchSpeed;//[Offset: 0x5d4, Size: 0x4]// 0x75c98b2890
	class AiServiceWidget* AiServiceWidgetClass;//[Offset: 0x5d8, Size: 0x8]// 0x75c98c5980
	Controller*[] WatchList;//[Offset: 0x5e0, Size: 0x10]// 0x75c98c5a80
	SpectatorInfo[] InfoList;//[Offset: 0x5f0, Size: 0x10]// 0x75c98c5b80
	Character* WatchTarget;//[Offset: 0x600, Size: 0x8]// 0x75c98c5c00
	float ControllerPitch;//[Offset: 0x608, Size: 0x4]// 0x75c98b2900
	AiServiceWidget* DebugUI;//[Offset: 0x620, Size: 0x8]// 0x75c98c5c80
	void OnTargetCharaChange(Character* Target);// 0xffffff8a17adf2b0
	void OnRep_WatchTarget();// 0x412f2b8
	void OnRep_InfoList();// 0x412f2a4
	void OnRep_ControllerPitch();// 0x412f290

--------------------------------
Class: AiServiceWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* InfoPanel;//[Offset: 0x258, Size: 0x8]// 0x75c98c5280
	class AiServiceSinglePerson* PawnInfoClass;//[Offset: 0x260, Size: 0x8]// 0x75c98c5300
	<uint32,AiServiceSinglePerson*> InfoWidgets;//[Offset: 0x268, Size: 0x50]// 0x75c98bbf00
	void SyncAllCharacter();// 0x412fd70

--------------------------------
Class: AiServiceSinglePerson.UserWidget.Widget.Visual.Object
	TextBlock* MyInfo;//[Offset: 0x258, Size: 0x8]// 0x75c98c5400
	Vector4 Limit;//[Offset: 0x260, Size: 0x10]// 0x75c98c5480
	Vector2D UIOffset;//[Offset: 0x270, Size: 0x8]// 0x75c98c5500
	Vector2D WidgetAlign;//[Offset: 0x278, Size: 0x8]// 0x75c98c5580
	Vector LocationOffset;//[Offset: 0x280, Size: 0xc]// 0x75c98c5600

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x150, Size: 0x18]// 0x75a793b190
	delegate TextDelegate;//[Offset: 0x168, Size: 0x10]// 0x75a791c800
	SlateColor ColorAndOpacity;//[Offset: 0x178, Size: 0x28]// 0x75a791c880
	delegate ColorAndOpacityDelegate;//[Offset: 0x1a0, Size: 0x10]// 0x75a791c900
	SlateFontInfo Font;//[Offset: 0x1b0, Size: 0x58]// 0x75a791c980
	Vector2D ShadowOffset;//[Offset: 0x208, Size: 0x8]// 0x75a791ca00
	LinearColor ShadowColorAndOpacity;//[Offset: 0x210, Size: 0x10]// 0x75a791ca80
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x220, Size: 0x10]// 0x75a791cb00
	float MinDesiredWidth;//[Offset: 0x230, Size: 0x4]// 0x75a793b200
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]// 0x75a791cb80
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]// 0x75a791cc00
	void SetWrapTextAt(float InWrapTextAt);// 0x60af934
	void SetVerticalJustification(byte InJustification);// 0x60af8b8
	void SetText(FText InText);// 0x60af774
	void SetShadowOffset(Vector2D InShadowOffset);// 0x60af6fc
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x60af680
	void SetOpacity(float InOpacity);// 0x60af604
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x60af588
	void SetJustification(byte InJustification);// 0x60af50c
	void SetFont(SlateFontInfo InFontInfo);// 0x60af390
	void SetColorRGBStr(FString HexString);// 0x60af30c
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x60af1a0
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x60af11c
	FText GetText();// 0x60af07c

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x12c, Size: 0x4]// 0x761201cee0
	byte Justification;//[Offset: 0x130, Size: 0x1]// 0x761201ce00
	byte VerticalJustification;//[Offset: 0x131, Size: 0x1]// 0x761201cd20
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1]// 0x761201cca0
	float WrapTextAt;//[Offset: 0x134, Size: 0x4]// 0x761201cc30
	enum WrappingPolicy;//[Offset: 0x138, Size: 0x1]// 0x761201cad0
	Margin Margin;//[Offset: 0x13c, Size: 0x10]// 0x761201ca50
	float LineHeightPercentage;//[Offset: 0x14c, Size: 0x4]// 0x761201c9e0

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]// 0x7612017aa0
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]// 0x7612017a20
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]// 0x76120178c0
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]// 0x7612017760

--------------------------------
Class: SpectatorInfo
	int AIType;//[Offset: 0x0, Size: 0x4]// 0x761213e400
	uint32 PlayerKey;//[Offset: 0x4, Size: 0x4]// 0x761213e390
	int AgentID;//[Offset: 0x8, Size: 0x4]// 0x761213e320

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 0x2]// 0x7611ebe4c0
	uint16 ViewYaw;//[Offset: 0x2, Size: 0x2]// 0x7611ebe450
	uint16 ActorPitch;//[Offset: 0x4, Size: 0x2]// 0x7611ebe3e0
	uint16 ActorYaw;//[Offset: 0x6, Size: 0x2]// 0x7611ebe370
	byte ViewRoll;//[Offset: 0x8, Size: 0x1]// 0x7611ebe2f0
	byte DataExternded;//[Offset: 0x9, Size: 0x1]// 0x7611ebe270
	uint16 RelativeYawToPlayer;//[Offset: 0xa, Size: 0x2]// 0x7611ebe200

--------------------------------
Class: TriggerLevelLoadProxy
	int[] DeviceLevels;//[Offset: 0x0, Size: 0x10]// 0x7611fe8960
	int[] DeviceMemoryLevels;//[Offset: 0x10, Size: 0x10]// 0x7611fe8870

--------------------------------
Class: WeaponsCompanionClientComponent.ActorComponent.Object
	UAEDataTable* WeaponsCompanionVoicePackTable;//[Offset: 0x118, Size: 0x8]// 0x75a847d580
	<uint32,WeaponsCompanionVoiceTask> PlayingVoice;//[Offset: 0x120, Size: 0x50]// 0x75a861a9c0
	<uint32,WeaponsCompanionVoiceTask> WaitVoice;//[Offset: 0x170, Size: 0x50]// 0x75a861aa80
	<FString> ErrorMessageSet;//[Offset: 0x1c0, Size: 0x50]// 0x75d119adc0
	WeaponsCompanionAudioEventHold[] AudioEventHoldList;//[Offset: 0x210, Size: 0x10]// 0x75a847d780
	void TickHoldAudioEvent(float Now);// 0x481e720
	void ReportErrorMessage(FString ErrorMessage);// 0x481e648
	void RealPlayVoice(out WeaponsCompanionVoiceTask Task);// 0x481e5c0
	void PlayVoice(uint32 PlayerKey, int VoiceID, int voiceIndex, int Score, int baseScore);// 0x481e45c
	void OnAsyncLoadVoice(SoftObjectPath assPath, uint32 PlayerKey, FString EventName);// 0x481e2ac
	void LoadAndPlayVoice(uint32 PlayerKey, FString VoicePath, FString EventName);// 0x481e104
	void HoldAudioEvent(AkAudioEvent* Event);// 0x481e088
	float GetPlayingTaskRemainingTime(WeaponsCompanionVoiceTask playingTask, float Now);// 0x481dfbc
	void EndPlayVoice(WeaponsCompanionVoiceTask Task);// 0x481df3c

--------------------------------
Class: WeaponsCompanionVoiceTask
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]// 0x76122349b0
	int VoiceID;//[Offset: 0x4, Size: 0x4]// 0x7612234940
	int voiceIndex;//[Offset: 0x8, Size: 0x4]// 0x76122348d0
	int Score;//[Offset: 0xc, Size: 0x4]// 0x7612234860
	int baseScore;//[Offset: 0x10, Size: 0x4]// 0x76122347f0
	float CreateTime;//[Offset: 0x14, Size: 0x4]// 0x7612234780
	float PlayTime;//[Offset: 0x18, Size: 0x4]// 0x7612234710
	float EndTime;//[Offset: 0x1c, Size: 0x4]// 0x76122346a0

--------------------------------
Class: WeaponsCompanionAudioEventHold
	AkAudioEvent* Event;//[Offset: 0x0, Size: 0x8]// 0x7612234580
	float HoldEndTime;//[Offset: 0x8, Size: 0x4]// 0x7612234510

--------------------------------
Class: PlayerWeatherComponent.ActorComponent.Object
	PlayerWeatherRep PlayerWeatherState;//[Offset: 0x118, Size: 0x4]// 0x75a8819500
	float TickOBInterval;//[Offset: 0x11c, Size: 0x4]// 0x75a83f1590
	float TimeSecondsSinceLastTickOB;//[Offset: 0x120, Size: 0x4]// 0x75a83f1600
	void OnRep_PlayerWeatherState();// 0x44b5be4

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 0x10]// 0x7611fc7150
	FString GLVersion;//[Offset: 0x10, Size: 0x10]// 0x7611fc70e0
	FString OSVersion;//[Offset: 0x20, Size: 0x10]// 0x7611fc7070
	FString DeviceMake;//[Offset: 0x30, Size: 0x10]// 0x7611fc7000
	FString DeviceModel;//[Offset: 0x40, Size: 0x10]// 0x7611fc6f90
	FString VulkanVersion;//[Offset: 0x50, Size: 0x10]// 0x7611fc6f20
	FString MemorySizeInGB;//[Offset: 0x60, Size: 0x10]// 0x7611fc6eb0
	FString OpenID;//[Offset: 0x70, Size: 0x10]// 0x7611fc6e40
	int HardWareLevel;//[Offset: 0x80, Size: 0x4]// 0x7611fc6dd0
	bool bMemoryLowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]// 0x7611fc6d50
	bool bDeviceLowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]// 0x7611fc6cd0

--------------------------------
Class: BountyBuyingInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x7611fc92c0
	int BuyingCount;//[Offset: 0x4, Size: 0x4]// 0x7611fc9250

--------------------------------
Class: BountyBuyingResultInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x7611f7bde0
	int FinalBuyingCount;//[Offset: 0x4, Size: 0x4]// 0x7611f7bd70
	enum BuyingResult;//[Offset: 0x8, Size: 0x1]// 0x7611f7bc10
	int BountyBeforeBuying;//[Offset: 0xc, Size: 0x4]// 0x7611f7bba0
	int BountyAfterBuying;//[Offset: 0x10, Size: 0x4]// 0x7611f7bb30

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 0x4]// 0x7611e9c030
	Transform DecalTransform;//[Offset: 0x10, Size: 0x30]// 0x7611e9bfb0
	int DecalInstanceId;//[Offset: 0x40, Size: 0x4]// 0x7611e9bf40
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x48, Size: 0x10]// 0x7611e9bad0

--------------------------------
Class: StopFireInfo
	uint32 CurClipID;//[Offset: 0x0, Size: 0x4]// 0x7611fd17f0
	int CurrentBullet;//[Offset: 0x4, Size: 0x4]// 0x7611fd1780

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 0x4]// 0x7611fd0dd0
	uint32 CurClipID;//[Offset: 0x4, Size: 0x4]// 0x7611fd0d60
	int CurBulletNumInClip;//[Offset: 0x8, Size: 0x4]// 0x7611fd0cf0
	byte ShootMode;//[Offset: 0xc, Size: 0x1]// 0x7611fd0c70
	float StartFireTime;//[Offset: 0x10, Size: 0x4]// 0x7611fd0c00
	double StartFireSysTime;//[Offset: 0x18, Size: 0x8]// 0x7611fd0b90
	byte ShootType;//[Offset: 0x20, Size: 0x1]// 0x7611fd0b10

--------------------------------
Class: WatchGamePlayerInfoButtonClick
	uint64 WatchPlayer_UID;//[Offset: 0x0, Size: 0x8]// 0x7611fceb20
	uint64 WatchedPlayer_UID;//[Offset: 0x8, Size: 0x8]// 0x7611fceab0

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x510, Size: 0x8]// 0x75a8033680
	ParticleSystem* NearSimpleEffect;//[Offset: 0x518, Size: 0x8]// 0x75a8033700
	ParticleSystem* EffectOverride;//[Offset: 0x520, Size: 0x8]// 0x75a8033780
	float NearToFarDistance;//[Offset: 0x528, Size: 0x4]// 0x75b4d7ed10
	AkAudioEvent* ExplosionSound;//[Offset: 0x530, Size: 0x8]// 0x75a8033800
	AkAudioEvent* ExplosionSoundOverride;//[Offset: 0x538, Size: 0x8]// 0x75a8033880
	float PlayEffectDelayTime;//[Offset: 0x540, Size: 0x4]// 0x75b4d7ed80
	HitResult SurfaceHit;//[Offset: 0x548, Size: 0x88]// 0x75a8033900
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]// 0x75a8033980
	float VoiceCheckDistance;//[Offset: 0x5d4, Size: 0x4]// 0x75b4d7edf0
	float VoiceCheckLifeTime;//[Offset: 0x5d8, Size: 0x4]// 0x75b4d7ee60
	void SetExplosionSoundOverride(AkAudioEvent* InAudioEvent);// 0x45fbaf8
	void SetExplosionFXOverride(ParticleSystem* InTemplate);// 0x45fba7c

--------------------------------
Class: SacStructSplit_Shoot

--------------------------------
Class: SacStructSplit

--------------------------------
Class: SacStructNew

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 0x10]// 0x7611fcbed0
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x10, Size: 0x10]// 0x7611fcbdd0
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x20, Size: 0x10]// 0x7611fcbcd0
	int ShootTimes;//[Offset: 0x30, Size: 0x4]// 0x7611fcbc60
	byte[] TssSdkAntiData;//[Offset: 0x38, Size: 0x10]// 0x7611fcbb60
	int TssSdkAntiDataLen;//[Offset: 0x48, Size: 0x4]// 0x7611fcbaf0
	int8 RetCode;//[Offset: 0x4c, Size: 0x1]// 0x7611fcba80
	int NetworkStatus;//[Offset: 0x50, Size: 0x4]// 0x7611fcba10

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0, Size: 0xc]// 0x7611fc2f70
	Vector GunPos;//[Offset: 0xc, Size: 0xc]// 0x7611fc2ef0
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 0xc]// 0x7611fc2dd0
	uint32 ShootID;//[Offset: 0x24, Size: 0x4]// 0x7611fc2d60
	uint64 CurrentStates;//[Offset: 0x28, Size: 0x8]// 0x7611fc2cf0
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 0x1]// 0x7611fc2c70
	byte SkeletonLength;//[Offset: 0x31, Size: 0x1]// 0x7611fc2bf0
	BInfo FBInfos;//[Offset: 0x34, Size: 0x10]// 0x7611fc2ad0
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x50, Size: 0x70]// 0x7611fc29b0
	double ShootSystemTime;//[Offset: 0xc0, Size: 0x8]// 0x7611fc28d0
	float ShootLevelTime;//[Offset: 0xc8, Size: 0x4]// 0x7611fc2860
	bool bFakeTraceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]// 0x7611fc27e0
	Vector GunTailPos;//[Offset: 0xd0, Size: 0xc]// 0x7611fc2760

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: BInfo

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x518, Size: 0x8]// 0x75a8032480
	BoxComponent* AreaBox;//[Offset: 0x520, Size: 0x8]// 0x75a8032500
	StaticMeshComponent* BalloonMesh;//[Offset: 0x528, Size: 0x8]// 0x75a8032580
	FireBalloonMovementComponent* Movement;//[Offset: 0x530, Size: 0x8]// 0x75a8032600
	int MapMarkTypeID;//[Offset: 0x538, Size: 0x4]// 0x75b4d7e6f0
	enum MapMarkFlag;//[Offset: 0x53c, Size: 0x1]// 0x75a8032700
	bool bIsMapMarkRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 0x1]// 0x75a8032780
	Pawn* Driver;//[Offset: 0x548, Size: 0x8]// 0x75a8032800
	float MoveUpValue;//[Offset: 0x550, Size: 0x4]// 0x75b4d7e760
	byte MovementSmoothMode;//[Offset: 0x590, Size: 0x1]// 0x75a8032880
	float MovementSmoothAlpha;//[Offset: 0x594, Size: 0x4]// 0x75b4d7e7d0
	float MoveUpScale;//[Offset: 0x598, Size: 0x4]// 0x75b4d7e840
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 0x1]// 0x75a8032900
	float AutoFallOffSpeed;//[Offset: 0x5a0, Size: 0x4]// 0x75b4d7e8b0
	enum MoveState;//[Offset: 0x5a8, Size: 0x1]// 0x75a8032a00
	Vector ControlInputVector;//[Offset: 0x5ac, Size: 0xc]// 0x75a8032a80
	Vector LastControlInputVector;//[Offset: 0x5b8, Size: 0xc]// 0x75a8032b00
	float TickInterval;//[Offset: 0x5c4, Size: 0x4]// 0x75b4d7e920
	Vector InitialLocation;//[Offset: 0x5c8, Size: 0xc]// 0x75a8032b80
	float CheckOverlapInterval;//[Offset: 0x5d8, Size: 0x4]// 0x75b4d7e990
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x45fce60
	void SetMoveUpValue(float InMoveUpValue);// 0x45fcde4
	void SetDriver(Pawn* InPawn);// 0x45fcd60
	void OnTriggerLeave(Actor* OverlapActor);// 0x45fccdc
	void OnTriggerEnter(Actor* OverlapActor);// 0x45fcc58
	void OnRep_MoveUpValue();// 0x45fcc3c
	void OnRep_InitialLocation();// 0x45fcc28
	void OnRep_Driver(Pawn* PrevDriver);// 0x45fcba4
	Pawn* GetDriver();// 0x45fcb88
	bool CanBeDriver(Pawn* InPawn);// 0x45fcaf0
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0xffffff8a17adf2b0

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x1b5, Size: 0x1]// 0x7612068d00
	float MaxFlyHeight;//[Offset: 0x1b8, Size: 0x4]// 0x7612068c90
	float InitialMaxTarceDist;//[Offset: 0x1bc, Size: 0x4]// 0x7612068c20
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x1c0, Size: 0x10]// 0x7612068ba0
	Vector InitialLocation;//[Offset: 0x1d0, Size: 0xc]// 0x7612068b20
	Actor* ActorOwner;//[Offset: 0x1e0, Size: 0x8]// 0x7612068aa0
	void SetSkipUpdate(bool bNewValue);// 0x45fc584
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0xffffff8a17adf2b0
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xffffff8a17adf2b0
	float GetMaxFlyHeight();// 0x45fc550

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x1a0, Size: 0x4]// 0x761202fbc0
	float Acceleration;//[Offset: 0x1a4, Size: 0x4]// 0x761202fb50
	float Deceleration;//[Offset: 0x1a8, Size: 0x4]// 0x761202fae0
	float TurningBoost;//[Offset: 0x1ac, Size: 0x4]// 0x761202fa70
	float FloatingMoveSpeedScale;//[Offset: 0x1b0, Size: 0x4]// 0x761202fa00
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 0x1]// 0x761202f980

--------------------------------
Class: ConcertPlayerActor.Actor.Object
	ConcertPlayerComponent* ConcertPlayerComponent;//[Offset: 0x510, Size: 0x8]// 0x75b4e01380
	bool bSetupObStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]// 0x75b4e01400
	TimerHandle timehandle;//[Offset: 0x520, Size: 0x8]// 0x75b4e01480
	void StopSequence(bool NetPlayAgain);// 0x42889b8
	void SequenceEventName(FName InEventType, int InParamValue, FString InParamStr);// 0x4288858
	void SequenceEvent(enum InActivity, enum InEventType, int InParamValue, FString InParamStr);// 0x42886b8
	void SendSync(STExtraPlayerController* InRequestPlayer);// 0x428863c
	void RequestSync();// 0x4288628
	void ReceiveSequenceEventType(int InEventType, int InParamValue, FString InParamStr, float InEventTime);// 0x4288490
	void ReceiveSequenceEventName(FName InEventType, int InParamValue, FString InParamStr);// 0x4288330
	void ReceiveSequenceEvent(enum InActivity, enum InEventType, int InParamValue, FString InParamStr);// 0x4288190
	void PlaySequence(int InIndex);// 0x4288114
	void OnReconnected();// 0x4288100
	void OnDelayRequest();// 0x42880ec
	void OnApplicationactivated(bool IsActive);// 0x4288068
	void JumpToPos(float InPos);// 0x4287fec
	void ClientRequestSync(ConcertSendSyncData InSyncData);// 0x4287d44
	void BindApplicationactivated();// 0x4287d30

--------------------------------
Class: ConcertPlayerComponent.ActorComponent.Object
	bool SequenceIsClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75b4dffa00
	bool SequenceLoadedNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]// 0x75b4dffa80
	bool PlayNextIfFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]// 0x75b4dffb00
	ConcertLevelSoftConfig[] LevelConfigList;//[Offset: 0x120, Size: 0x10]// 0x75b4dffc00
	ConcertLevelHardConfig CurrentLevelConfig;//[Offset: 0x130, Size: 0x30]// 0x75b4dffc80
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x160, Size: 0x8]// 0x75b4dffd00
	delegate OnReceiveConcertEventBegin;//[Offset: 0x168, Size: 0x10]// 0x75b4dffd80
	delegate OnReceiveConcertEventEnd;//[Offset: 0x178, Size: 0x10]// 0x75b4dffe00
	delegate OnSequencePlayOrStopEvent;//[Offset: 0x188, Size: 0x10]// 0x75b4dffe80
	delegate OnSequencePlayEnd;//[Offset: 0x198, Size: 0x10]// 0x75b4dfff00
	delegate OnSequenceRequestSync;//[Offset: 0x1a8, Size: 0x10]// 0x75b4dfff80
	delegate OnSequenceSyncEnd;//[Offset: 0x1b8, Size: 0x10]// 0x75b4e00000
	Actor*[] ActivityList;//[Offset: 0x1c8, Size: 0x10]// 0x75b4e00100
	LevelSequenceActor* SequenceActor;//[Offset: 0x1d8, Size: 0x8]// 0x75b4e00180
	TimerHandle DelayStartHandle;//[Offset: 0x1e0, Size: 0x8]// 0x75b4e00200
	STExtraGameStateBase* GameState;//[Offset: 0x1f0, Size: 0x8]// 0x75b4e00280
	enum[] NeedMemoryEventList;//[Offset: 0x1f8, Size: 0x10]// 0x75b4e00400
	ConcertSequenceEventData[] TriggerEventList;//[Offset: 0x208, Size: 0x10]// 0x75b4e00500
	ConcertSyncData LastConcertSyncData;//[Offset: 0x218, Size: 0x28]// 0x75b4e00580
	FName[] NeedMemoryEventNameList;//[Offset: 0x240, Size: 0x10]// 0x75b4e00600
	int[] NeedMemoryEventTypeList;//[Offset: 0x250, Size: 0x10]// 0x75b4e00680
	void UnRegisterActivity(Actor* InActivity);// 0x428a024
	void StopConcert(bool NetPlayAgain);// 0x4289fa0
	void StartConcert();// 0x4289f8c
	void SetupConcert(int Index);// 0x4289f10
	void SetActivityEnable(bool InEnable);// 0x4289e8c
	void RegisterActivity(Actor* InActivity);// 0x4289e10
	void ReceiveConcertEvent(bool IsSyncData, out const ConcertSequenceEventData InParamData);// 0x4289d00
	void OnSequenceStop();// 0x4289cec
	void OnSequenceObjectSpawned(Object* InObject, out const Guid InBindingID, MovieSceneSequenceID InSequenceID);// 0x4289bd8
	void OnSequenceFinish();// 0x4289bc4
	void OnLoadSequenceDone(int Index, SoftObjectPath AssetRef);// 0x4289aa4
	void OnDelayStart();// 0x4289a90
	void OnDelayLoopSetup();// 0x4289a7c
	void JumpToPos(float InPos);// 0x4289a00
	bool InitConcertConfig(int Index);// 0x4289970
	float GetTriggerIntEventDuraction(int EventType, FString InParam, bool UseEventTime);// 0x4289804
	float GetTriggerEventNameDuraction(FName EventTypeName, FString InParam);// 0x42896dc
	float GetTriggerEventDuraction(enum EventType);// 0x4289650
	Timespan GetTimeSpanFromSecond(float InSecond);// 0x42895c4
	float GetTime(bool isServerTime);// 0x4289530
	float GetSequenceCurrentTime();// 0x42894fc
	float GetLastTriggerEventTime(enum EventType);// 0x4289470
	float GetLastTriggerEventNameTime(FName EventTypeName, FString InParam);// 0x4289348
	bool GetIsPlaying();// 0x4289310
	bool GetIsNeedJumpEvent();// 0x42892f4
	STExtraGameStateBase* GetGameState();// 0x42892c0
	enum GetConcertPlayerState();// 0x42892a4

--------------------------------
Class: ConcertLevelSoftConfig
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x76121743f0
	int LoopCount;//[Offset: 0x4, Size: 0x4]// 0x7612174380
	float DelayStart;//[Offset: 0x8, Size: 0x4]// 0x7612174310
	LevelSequence* LevelSequence;//[Offset: 0x10, Size: 0x28]// 0x7612174290
	LevelSequence* LevelSequenceDS;//[Offset: 0x38, Size: 0x28]// 0x7612174210
	bool bEnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]// 0x7612174190
	bool bSpawnActorAttachToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]// 0x7612174110
	bool bDestroySpawnActorOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]// 0x7612174090
	float PlayRate;//[Offset: 0x64, Size: 0x4]// 0x7612174020

--------------------------------
Class: ConcertLevelHardConfig
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7612173f00
	int LoopCount;//[Offset: 0x4, Size: 0x4]// 0x7612173e90
	float DelayStart;//[Offset: 0x8, Size: 0x4]// 0x7612173e20
	LevelSequence* LevelSequence;//[Offset: 0x10, Size: 0x8]// 0x7612173da0
	int CurrentSoftIndex;//[Offset: 0x18, Size: 0x4]// 0x7612173d30
	int PlayCount;//[Offset: 0x1c, Size: 0x4]// 0x7612173cc0
	float StartTime;//[Offset: 0x20, Size: 0x4]// 0x7612173c50
	bool bEnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x7612173bd0
	bool bSpawnActorAttachToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]// 0x7612173b50
	bool bDestroySpawnActorOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]// 0x7612173ad0
	float PlayRate;//[Offset: 0x28, Size: 0x4]// 0x7612173a60

--------------------------------
Class: ConcertSequenceEventData
	enum ActivityType;//[Offset: 0x0, Size: 0x1]// 0x7611f7e960
	enum EventType;//[Offset: 0x1, Size: 0x1]// 0x7611f7e800
	FName EventTypeName;//[Offset: 0x8, Size: 0x8]// 0x7611f7e790
	int EventIntType;//[Offset: 0x10, Size: 0x4]// 0x7611f7e720
	int DataIndex;//[Offset: 0x14, Size: 0x4]// 0x7611f7e6b0
	float TriggerTime;//[Offset: 0x18, Size: 0x4]// 0x7611f7e640
	float EventTime;//[Offset: 0x1c, Size: 0x4]// 0x7611f7e5d0
	FString DataStr;//[Offset: 0x20, Size: 0x10]// 0x7611f7e560

--------------------------------
Class: ConcertSyncData
	ConcertSendSyncData SyncData;//[Offset: 0x8, Size: 0x20]// 0x7612173940

--------------------------------
Class: ConcertSendSyncData
	int SyncIndex;//[Offset: 0x0, Size: 0x4]// 0x7611f7ec10
	int SequenceIndex;//[Offset: 0x4, Size: 0x4]// 0x7611f7eba0
	int PlayCount;//[Offset: 0x8, Size: 0x4]// 0x7611f7eb30
	float SequenceTime;//[Offset: 0xc, Size: 0x4]// 0x7611f7eac0
	ConcertSequenceEventData[] SequenceData;//[Offset: 0x10, Size: 0x10]// 0x7611f7e3c0

--------------------------------
Class: Timespan

--------------------------------
Class: CheatCommandInfo
	enum CommandType;//[Offset: 0x0, Size: 0x1]// 0x7611fca0b0
	int[] CommandContent_int32Type;//[Offset: 0x8, Size: 0x10]// 0x7611fc9fc0
	float[] CommandContent_floatType;//[Offset: 0x18, Size: 0x10]// 0x7611fc9ed0
	FString CommandContent_ExtraType;//[Offset: 0x28, Size: 0x10]// 0x7611fc9e60

--------------------------------
Class: RemoteControlComponent.ActorComponent.Object
	bool bSpawnedFromBackPack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75b4cd2a80
	delegate OnSpawnedFromBackPack;//[Offset: 0x120, Size: 0x10]// 0x75b4cd2b00
	STExtraBaseCharacter* Character;//[Offset: 0x130, Size: 0x8]// 0x75b4cd2b80
	delegate OnRepCharacterEvent;//[Offset: 0x138, Size: 0x10]// 0x75b4cd2c00
	delegate OnRefreshCharacterAnimEvent;//[Offset: 0x148, Size: 0x10]// 0x75b4cd2c80
	BattleItemHandleBase* BindingHandle;//[Offset: 0x158, Size: 0x8]// 0x75b4cd2d00
	delegate HPFuelChangedDelegate;//[Offset: 0x168, Size: 0x10]// 0x75b4cd2d80
	float DistanceToPlayer;//[Offset: 0x178, Size: 0x4]// 0x75a87c8800
	bool ShutdownNeedDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]// 0x75b4cd2e00
	bool CanControlInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 0x1]// 0x75b4cd2e80
	bool bSendClientOkMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e, Size: 0x1]// 0x75b4cd2f00
	enum RemoteControlState;//[Offset: 0x17f, Size: 0x1]// 0x75a87de000
	enum LastRemoteControlState;//[Offset: 0x180, Size: 0x1]// 0x75a87de100
	enum CharacterAnimState;//[Offset: 0x181, Size: 0x1]// 0x75a87de200
	delegate RemoteControlStateChanged;//[Offset: 0x188, Size: 0x10]// 0x75a87de280
	delegate RemoteControlReconnect;//[Offset: 0x198, Size: 0x10]// 0x75a87de300
	delegate OnEnterRemoteControlClient;//[Offset: 0x1a8, Size: 0x10]// 0x75a87de380
	delegate OnRemoteControlPause;//[Offset: 0x1b8, Size: 0x10]// 0x75a87de400
	delegate OnRemoteControlRecall;//[Offset: 0x1c8, Size: 0x10]// 0x75a87de480
	delegate OnRemoteControlReconnect;//[Offset: 0x1d8, Size: 0x10]// 0x75a87de500
	enum CurRemoteControlType;//[Offset: 0x1f0, Size: 0x1]// 0x75a87de600
	float CoolDownTimeSpeed;//[Offset: 0x1f4, Size: 0x4]// 0x75a87c8870
	float CoolDownTimeMin;//[Offset: 0x1f8, Size: 0x4]// 0x75a87c88e0
	float MaxOperateDistanceToPlayer;//[Offset: 0x1fc, Size: 0x4]// 0x75a87c8950
	float MaxOperateFalloffDistance;//[Offset: 0x200, Size: 0x4]// 0x75a87c89c0
	float LowFuelWarning;//[Offset: 0x204, Size: 0x4]// 0x75a87c8a30
	float SkillRecallingTime;//[Offset: 0x208, Size: 0x4]// 0x75a87c8aa0
	float SkillDisappearingTime;//[Offset: 0x20c, Size: 0x4]// 0x75a87c8b10
	float SkillDestoryTime;//[Offset: 0x210, Size: 0x4]// 0x75a87c8b80
	float RemoteControlDyingTime;//[Offset: 0x214, Size: 0x4]// 0x75a87c8bf0
	int DestoryPawnTipID;//[Offset: 0x218, Size: 0x4]// 0x75a87c8c60
	float MaxRecallTime;//[Offset: 0x21c, Size: 0x4]// 0x75a87c8cd0
	float SkillRecallingTimerRemain;//[Offset: 0x220, Size: 0x4]// 0x75a87c8d40
	float MaxCameraFOV;//[Offset: 0x230, Size: 0x4]// 0x75a87c8db0
	float MinCameraFOV;//[Offset: 0x234, Size: 0x4]// 0x75a87c8e20
	float UAVFPPCameraFovPercent;//[Offset: 0x238, Size: 0x4]// 0x75a87c8e90
	delegate OnEnterRemoteControl;//[Offset: 0x240, Size: 0x10]// 0x75a87de680
	delegate OnOverMaxOperateDistance;//[Offset: 0x250, Size: 0x10]// 0x75a87de700
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0x260, Size: 0x10]// 0x75a87de800
	delegate OnCharAnimStateDiff;//[Offset: 0x278, Size: 0x10]// 0x75a87de880
	int CantUseRemoteControlTips;//[Offset: 0x288, Size: 0x4]// 0x75a87c8f00
	bool NeedForceSetViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]// 0x75a87de900
	byte[] CantIgnoreDamageTypeArr;//[Offset: 0x290, Size: 0x10]// 0x75a87dea00
	void TickCharacterAnimState();// 0x44df034
	void SetMaxHP(float HP);// 0x44defb0
	void SetMaxFuel(float Fuel);// 0x44def2c
	void SetFPPCameraFovEvent(float factor);// 0xffffff8a17adf2b0
	void SetFPPCameraFov(float factor);// 0x44deeb0
	void SetDriverAttachement(Character* InDriver, bool EnableAttach, out const FName InAttachmentDataName, bool IngoreDelay);// 0x44ded54
	void SetCurHP(float HP);// 0x44decd0
	void SetCurFuel(float Fuel);// 0x44dec4c
	void ServerShutDown();// 0x44dec30
	bool ServerRecall(STExtraPlayerController* PC);// 0x44deb98
	bool ServerPause(STExtraPlayerController* PC);// 0x44deb00
	bool ServerControl(STExtraPlayerController* PC);// 0x44dea68
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x44de9b8
	void SendClientOkToServer();// 0x44de9a4
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x44de928
	void RefreshCharacterAnim(STExtraBaseCharacter* PlayerCharacter);// 0x44de8a4
	void OnStateChangeEvent();// 0x44de888
	void OnRep_SpawnedFromBackPack();// 0x44de874
	void OnRep_RemoteControlState();// 0x44de858
	void OnRep_FPPCameraFovChanged();// 0x44de844
	void OnRep_Character();// 0x44de830
	void OnRecycled();// 0x44de814
	void HandleRemoteControlReconnect(STExtraPlayerController* PC);// 0x44de790
	float GetMaxHP();// 0x44de754
	float GetMaxFuel();// 0x44de718
	BattleItemHandleBase* GetItemHandle();// 0x44de6fc
	float GetDisToPlayer();// 0x44de6c8
	float GetCurHP();// 0x44de68c
	float GetCurFuel();// 0x44de650
	void ForceExit(FString Reason);// 0x44de5cc
	void DriverAttachementLoadFinish();// 0x44de5b8
	bool CanUseRemmoteControl();// 0x44de578

--------------------------------
Class: DriverAttachmentData
	enum AttachType;//[Offset: 0x0, Size: 0x1]// 0x76121ffca0
	FName AttachmentDataName;//[Offset: 0x8, Size: 0x8]// 0x76121ffc30
	Object* AttachmentMesh;//[Offset: 0x10, Size: 0x8]// 0x76121ffbb0
	AnimationAsset* SkeletalAnim;//[Offset: 0x18, Size: 0x8]// 0x76121ffb30
	bool bLoopAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x76121ffab0
	StaticMesh* AttachmentMeshPtr;//[Offset: 0x28, Size: 0x8]// 0x76121ffa30
	SkeletalMesh* AttachmentSkeletalMeshPtr;//[Offset: 0x30, Size: 0x8]// 0x76121ff9b0
	Object* AttachmentMeshLod;//[Offset: 0x38, Size: 0x8]// 0x76121ff930
	StaticMesh* AttachmentMeshLodPtr;//[Offset: 0x40, Size: 0x8]// 0x76121ff8b0
	FName AttachSocket;//[Offset: 0x48, Size: 0x8]// 0x76121ff840
	float AttachDelayTime;//[Offset: 0x50, Size: 0x4]// 0x76121ff7d0
	float DettachDelayTime;//[Offset: 0x54, Size: 0x4]// 0x76121ff760
	bool IsShouldUpdateAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]// 0x76121ff6e0
	bool IsAttachmentShouldVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]// 0x76121ff660
	float AttachDelayDeltaTime;//[Offset: 0x5c, Size: 0x4]// 0x76121ff5f0
	MeshComponent* AttachmentComponentInstance;//[Offset: 0x60, Size: 0x8]// 0x76121ff570
	STExtraPlayerCharacter* AttachDriverCache;//[Offset: 0x68, Size: 0x8]// 0x76121ff4f0

--------------------------------
Class: RCRResultDebugInfoByClient
	Vector_NetQuantize100 ViewerLoc;//[Offset: 0x0, Size: 0xc]// 0x7611fc4a20
	Vector_NetQuantize100 ViewerCameraLoc0;//[Offset: 0xc, Size: 0xc]// 0x7611fc49a0
	Vector_NetQuantize100 TargetLoc;//[Offset: 0x18, Size: 0xc]// 0x7611fc4920

--------------------------------
Class: ClientWeaponShootReportData
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x7611fc4590
	ClientWeaponShootReportItemData[] WeaponDataList;//[Offset: 0x8, Size: 0x10]// 0x7611fc3df0

--------------------------------
Class: ClientWeaponShootReportItemData
	int ShootRange;//[Offset: 0x0, Size: 0x4]// 0x7611fc4520
	int HitHeadNum;//[Offset: 0x4, Size: 0x4]// 0x7611fc44b0
	int HitBodyNum;//[Offset: 0x8, Size: 0x4]// 0x7611fc4440
	int HitOtherNum;//[Offset: 0xc, Size: 0x4]// 0x7611fc43d0
	int ShootNum;//[Offset: 0x10, Size: 0x4]// 0x7611fc4360
	ClientWeaponShootReportShootTypeData[] WeaponShootTypeDataList;//[Offset: 0x18, Size: 0x10]// 0x7611fc3f90

--------------------------------
Class: ClientWeaponShootReportShootTypeData
	int ShootType;//[Offset: 0x0, Size: 0x4]// 0x7611fc42f0
	int HitHeadNum;//[Offset: 0x4, Size: 0x4]// 0x7611fc4280
	int HitBodyNum;//[Offset: 0x8, Size: 0x4]// 0x7611fc4210
	int HitOtherNum;//[Offset: 0xc, Size: 0x4]// 0x7611fc41a0
	int ShootNum;//[Offset: 0x10, Size: 0x4]// 0x7611fc4130

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 0x1]// 0x7611fc33c0
	Actor* SeekAndLockTarget;//[Offset: 0x8, Size: 0x8]// 0x7611fc3340

--------------------------------
Class: ShootMultiBulletsParam
	Vector LaunchBulletPos;//[Offset: 0x0, Size: 0xc]// 0x7611fc2480
	Rotator LaunchBulletRot;//[Offset: 0xc, Size: 0xc]// 0x7611fc2400
	uint32 ShootID;//[Offset: 0x18, Size: 0x4]// 0x7611fc2390

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]// 0x7611fc0590
	Vector ImpactNormal;//[Offset: 0xc, Size: 0xc]// 0x7611fc0510
	float BulletHitTime;//[Offset: 0x18, Size: 0x4]// 0x7611fc04a0
	float BulletLaunchTime;//[Offset: 0x1c, Size: 0x4]// 0x7611fc0430
	float BulletMovedDistance;//[Offset: 0x20, Size: 0x4]// 0x7611fc03c0

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]// 0x76120c3370
	bool EnableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 0x1]// 0x76120c32f0
	bool EnableServerBulletExtraImpactEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 0x1]// 0x76120c3270
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84b, Size: 0x1]// 0x76120c31f0
	bool bEnableSimulateBulletResponseToPawnChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 0x1]// 0x76120c3170
	float MaxActiveTime;//[Offset: 0x850, Size: 0x4]// 0x76120c3100
	float AutoDestroyTime;//[Offset: 0x854, Size: 0x4]// 0x76120c3090
	bool bEnableClientImpactServerRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]// 0x76120c3010
	Vector ServerShootPos;//[Offset: 0x85c, Size: 0xc]// 0x76120c2f90
	float ServerShootTime;//[Offset: 0x868, Size: 0x4]// 0x76120c2f20
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x870, Size: 0x70]// 0x76120c2ea0
	int LocalShootId;//[Offset: 0x90c, Size: 0x4]// 0x76120c2e30
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 0x1]// 0x76120c2db0
	Controller* CachedInstigator;//[Offset: 0x920, Size: 0x8]// 0x76120c2d30
	bool bNeedResumeMoveInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]// 0x76120c2cb0
	class Actor[] IgnoreActorClasses;//[Offset: 0x930, Size: 0x10]// 0x76120c2bb0
	void RPC_Multicast_StartLaunchNew(const ProjectileBulletLaunchParams LaunchParams);// 0x44c0d50
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x44c0bac
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x44c0b30
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x44c0a44
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x44c099c
	void OnImpact(out const HitResult _ImpactResult);// 0x44c08f4
	void HandleOnImpactOnServer(out const HitResult _ImpactResult, bool bVerifyRet);// 0x44c07fc
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x44c0624
	void ForceInvalidate();// 0x44c0610
	void DoHandleOnImpactLocal(out const HitResult _ImpactResult);// 0x44c0568
	void DelayDestroyOnServerFinish();// 0x44c0554
	void DelayDestroyOnServer(float DelayTime);// 0x44c04d8
	void CustomCheckResumeMove(out const HitResult _ImpactResult, out bool OutRst);// 0x44c03d8

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 0x4]// 0x76120c25a0
	Transform Trans;//[Offset: 0x10, Size: 0x30]// 0x76120c2520
	Actor* OwningWeapon;//[Offset: 0x40, Size: 0x8]// 0x76120c24a0
	Actor* Instigator;//[Offset: 0x48, Size: 0x8]// 0x76120c2420
	uint32 ShootID;//[Offset: 0x50, Size: 0x4]// 0x76120c23b0
	FString ExtraData;//[Offset: 0x58, Size: 0x10]// 0x76120c2340

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 0x8]// 0x7611d86e50
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]// 0x7611d86de0

--------------------------------
Class: ViewLimitRange
	FName LimitName;//[Offset: 0x0, Size: 0x8]// 0x7611fb6df0
	enum ViewLimitType;//[Offset: 0x8, Size: 0x1]// 0x7611fb6c90
	bool bIsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x7611fb6c10
	float LimitMin;//[Offset: 0xc, Size: 0x4]// 0x7611fb6ba0
	float LimitMax;//[Offset: 0x10, Size: 0x4]// 0x7611fb6b30

--------------------------------
Class: StoreProductInfo
	int ProductID;//[Offset: 0x0, Size: 0x4]// 0x7611f972c0
	int ItemID;//[Offset: 0x4, Size: 0x4]// 0x7611f97250
	int weight;//[Offset: 0x8, Size: 0x4]// 0x7611f971e0
	FString ProductName;//[Offset: 0x10, Size: 0x10]// 0x7611f97170
	FString LargeIcon;//[Offset: 0x20, Size: 0x10]// 0x7611f97100
	FString SmallIcon;//[Offset: 0x30, Size: 0x10]// 0x7611f97090
	FString Desc;//[Offset: 0x40, Size: 0x10]// 0x7611f97020
	int Count;//[Offset: 0x50, Size: 0x4]// 0x7611f96fb0
	int Price;//[Offset: 0x54, Size: 0x4]// 0x7611f96f40
	bool bLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]// 0x7611f96ec0
	int LimitCount;//[Offset: 0x5c, Size: 0x4]// 0x7611f96e50
	int MaxCount;//[Offset: 0x60, Size: 0x4]// 0x7611f96de0
	int TabType;//[Offset: 0x64, Size: 0x4]// 0x7611f96d70
	int InnerType;//[Offset: 0x68, Size: 0x4]// 0x7611f96d00
	int bSlideBar;//[Offset: 0x6c, Size: 0x4]// 0x7611f96c90

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 0x8]// 0x7611e99a10
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x8, Size: 0x10]// 0x7611e996f0
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611e99670

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 0x8]// 0x7611e99990
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 0x38]// 0x7611e99910
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x7611e99890

--------------------------------
Class: CampActor.CampActorBase.Actor.Object
	CampPlayerLoc[] CampPlayerLocList;//[Offset: 0x528, Size: 0x10]// 0x75bdd3ce00
	CampPlayerData[] CampPlayerDataList;//[Offset: 0x538, Size: 0x10]// 0x75bdd3cf00
	CampGroupPlayerData[] CampSortedGroupPlayerDataList;//[Offset: 0x548, Size: 0x10]// 0x75bdd3d000
	CampPCIndex[] PCIndexList;//[Offset: 0x558, Size: 0x10]// 0x75bdd3d100
	<FName,int> UIDIndexMap;//[Offset: 0x568, Size: 0x50]// 0x75b4ee0a00
	<int64,int> PlayerKeyIndexMap;//[Offset: 0x5b8, Size: 0x50]// 0x75b4ee0ac0
	int UpdateMinimapPlayerNumPerFrame;//[Offset: 0x608, Size: 0x4]// 0x75d0aef730
	int64 UpdateMinimapIdx;//[Offset: 0x610, Size: 0x8]// 0x75d0aef7a0
	bool ClientSideReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]// 0x75bdd3d180
	void OnRep_CampPlayerLocList();// 0x4237df0
	void OnRep_CampPlayerDataList();// 0x4237dd4
	void OnRep_CampActorInfo();// 0x4237db8
	void OnGameModeStateChanged(out const FName State);// 0x4237d24
	void LuaReportCampBattleResultData(out const CampBattleResultData Data);// 0xffffff8a17adf2b0
	void LeaveSpectator(uint32 PlayerKey);// 0x4237ca8
	bool IsInSameCampByUID(out const FName MyUID, out const FName UID);// 0x4237bb8
	bool IsInSameCampByPlayerKey(int64 MyPlayerKey, int64 PlayerKey);// 0x4237af0
	bool IndexValid(int Index);// 0x4237a60
	void GMSetUpdateMinimapPlayerNumPerFrame(int NumPerFrame);// 0x42379e4
	void GMKillAllPlayer();// 0x42379d0
	int GetIndexByUID(FName UID);// 0x4237944
	int GetIndexByPlayerKey(int64 PlayerKey);// 0x42378b8
	byte GetCampType();// 0x4237884
	void GetCampTeamPlayerIndexList(byte CampID, byte TeamID, out int[] TeamPlayerIndexList);// 0x4237774
	void GetCampTeamIDList(byte CampID, out int[] TeamIDList);// 0x42376a0
	void GetCampPlayerStateList(out STExtraPlayerState*[] CampPlayerStateList);// 0x423760c
	void GetCampPlayerIndexList(byte CampID, out int[] CampPlayerIndexList);// 0x4237538
	byte GetCampID();// 0x4237504
	void EnterSpectator(uint32 PlayerKey);// 0x4237488

--------------------------------
Class: CampActorBase.Actor.Object
	CampActorInfo CampActorInfo;//[Offset: 0x510, Size: 0x2]// 0x75bdd3d980
	FName CampGameModeState;//[Offset: 0x518, Size: 0x8]// 0x75d0aeff10
	bool CampDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]// 0x75bdd3da00
	bool CampReportedBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1]// 0x75bdd3da80
	void SetCampActorInfo(byte CampType, byte CompID);// 0x4238828
	void OnRep_CampActorInfo();// 0x423880c
	void OnGameModeStateChanged(out const FName State);// 0x4238778

--------------------------------
Class: CampActorInfo
	byte CampType;//[Offset: 0x0, Size: 0x1]// 0x76121668a0
	byte CampID;//[Offset: 0x1, Size: 0x1]// 0x7612166820

--------------------------------
Class: CampPlayerLoc
	int Index;//[Offset: 0x0, Size: 0x4]// 0x7612167410
	int X;//[Offset: 0x4, Size: 0x4]// 0x76121673a0
	int Y;//[Offset: 0x8, Size: 0x4]// 0x7612167330

--------------------------------
Class: CampPlayerData
	FName UID;//[Offset: 0x0, Size: 0x8]// 0x76121670a0
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]// 0x7612167030
	FName PlayerName;//[Offset: 0x10, Size: 0x8]// 0x7612166fc0
	byte PlatformGender;//[Offset: 0x18, Size: 0x1]// 0x7612166f40
	byte CampID;//[Offset: 0x19, Size: 0x1]// 0x7612166ec0
	int Index;//[Offset: 0x1c, Size: 0x4]// 0x7612166e50
	byte TeamID;//[Offset: 0x20, Size: 0x1]// 0x7612166dd0
	byte IdxInTeam;//[Offset: 0x21, Size: 0x1]// 0x7612166d50
	byte Dead;//[Offset: 0x22, Size: 0x1]// 0x7612166cd0
	byte Spectator;//[Offset: 0x23, Size: 0x1]// 0x7612166c50
	int Kill;//[Offset: 0x24, Size: 0x4]// 0x7612166be0
	byte Logout;//[Offset: 0x28, Size: 0x1]// 0x7612166b60

--------------------------------
Class: CampGroupPlayerData
	byte TeamID;//[Offset: 0x0, Size: 0x1]// 0x7612167210
	bool bHasSurvival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7612167190
	bool bHasSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x7612167110
	CampPlayerData[] PlayerDataList;//[Offset: 0x8, Size: 0x10]// 0x76121669c0

--------------------------------
Class: CampPCIndex
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 0x8]// 0x7612166300
	int Index;//[Offset: 0x8, Size: 0x4]// 0x7612166290

--------------------------------
Class: CampBattleResultData
	byte CampRank;//[Offset: 0x0, Size: 0x1]// 0x7612166700
	byte CampType;//[Offset: 0x1, Size: 0x1]// 0x7612166680
	byte SurviveCampNum;//[Offset: 0x2, Size: 0x1]// 0x7612166600
	byte CampID;//[Offset: 0x3, Size: 0x1]// 0x7612166580
	int64[] UIDList;//[Offset: 0x8, Size: 0x10]// 0x7612166490
	FString Reason;//[Offset: 0x18, Size: 0x10]// 0x7612166420

--------------------------------
Class: NavLinkInfo
	Transform ActorTransform;//[Offset: 0x0, Size: 0x30]// 0x7611f80da0
	Vector Left;//[Offset: 0x30, Size: 0xc]// 0x7611f80d20
	Vector Right;//[Offset: 0x3c, Size: 0xc]// 0x7611f80ca0
	Vector LeftHighPoint;//[Offset: 0x48, Size: 0xc]// 0x7611f80c20
	Vector RightHighPoint;//[Offset: 0x54, Size: 0xc]// 0x7611f80ba0
	float LinkDis;//[Offset: 0x60, Size: 0x4]// 0x7611f80b30

--------------------------------
Class: CheatCommandResultInfo
	enum CommandType;//[Offset: 0x0, Size: 0x1]// 0x7611f75f40
	enum ResultType;//[Offset: 0x1, Size: 0x1]// 0x7611f75de0
	float Remain_CoolingDownTime;//[Offset: 0x4, Size: 0x4]// 0x7611f75d70
	float Remain_GlobalCoolingDownTime;//[Offset: 0x8, Size: 0x4]// 0x7611f75d00
	int Remain_ExecuteCountThreshold;//[Offset: 0xc, Size: 0x4]// 0x7611f75c90
	int Remain_GlobalExecuteCountThreshold;//[Offset: 0x10, Size: 0x4]// 0x7611f75c20

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	bool HideChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75a8880980
	bool DriverHideChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]// 0x75a8880a00
	float VaildExitVehicleHeight;//[Offset: 0x11c, Size: 0x4]// 0x75a887a980
	bool bDriverCanHoldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]// 0x75a8880a80
	STExtraVehicleSeat[] Seats;//[Offset: 0x128, Size: 0x10]// 0x75a8880b80
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x138, Size: 0x10]// 0x75a8880c80
	STExtraVehicleOccupierState[] OccupierStates;//[Offset: 0x148, Size: 0x10]// 0x75a8880d80
	STExtraVehicleOccupierState[] OldOccupierStates;//[Offset: 0x158, Size: 0x10]// 0x75a8880e80
	delegate OnVehicleWeaponSeatUpdate;//[Offset: 0x168, Size: 0x10]// 0x75a8880f00
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x178, Size: 0x10]// 0x75a8881000
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x188, Size: 0x10]// 0x75a8881100
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x198, Size: 0x10]// 0x75a8881200
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x1a8, Size: 0x10]// 0x75a8881280
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x1b8, Size: 0x10]// 0x75a8881300
	float LeaveVehicleVelocityScale;//[Offset: 0x1c8, Size: 0x4]// 0x75a887aad0
	float LeaveVehicleVelZScale;//[Offset: 0x1cc, Size: 0x4]// 0x75a887ab40
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]// 0x75a8881380
	bool bExitVehicleEnterPositionFixUseLocalAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]// 0x75a8881400
	bool bIgnoreParentInExitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 0x1]// 0x75a8881480
	float ExitVehicleCharacterCapsuleRadiusFix;//[Offset: 0x1d4, Size: 0x4]// 0x75a887abb0
	float ExitVehicleCharacterCapsuleHalfHeightScale;//[Offset: 0x1d8, Size: 0x4]// 0x75a887ac20
	bool bDrawExitVehicleEnterPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]// 0x75a8881500
	bool bDrawExitVehicleCapsuleSweepResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 0x1]// 0x75a8881580
	bool bForceExitVehiclePositionZOffsetRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1de, Size: 0x1]// 0x75a8881600
	float ForceExitVehiclePositionZOffset;//[Offset: 0x1e0, Size: 0x4]// 0x75a887ac90
	bool bEnableCheckIsLeavePositionPawnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]// 0x75a8881680
	byte[] SeatGUITypes;//[Offset: 0x1f0, Size: 0x10]// 0x75a8881780
	delegate OnPlayEnterVehicleAnim;//[Offset: 0x200, Size: 0x10]// 0x75a8881800
	delegate OnPlayExitVehicleAnim;//[Offset: 0x210, Size: 0x10]// 0x75a8881880
	delegate PreSeatAttached;//[Offset: 0x220, Size: 0x10]// 0x75a8881900
	delegate PreSeatDetached;//[Offset: 0x230, Size: 0x10]// 0x75a8881980
	delegate UGC_OnSeatAttachedDelegate;//[Offset: 0x240, Size: 0x10]// 0x75a8881a00
	delegate OnSeatAttached;//[Offset: 0x250, Size: 0x10]// 0x75a8881a80
	delegate UGC_OnSeatDetachedDelegate;//[Offset: 0x260, Size: 0x10]// 0x75a8881b00
	delegate OnSeatDetached;//[Offset: 0x270, Size: 0x10]// 0x75a8881b80
	delegate UGC_OnSeatChangedDelegate;//[Offset: 0x280, Size: 0x10]// 0x75a8881c00
	delegate OnSeatChanged;//[Offset: 0x290, Size: 0x10]// 0x75a8881c80
	delegate OnUpdateSeatGUI;//[Offset: 0x2a0, Size: 0x10]// 0x75a8881d00
	FString LatestDriverPlayerName;//[Offset: 0x2b0, Size: 0x10]// 0x75a887ad00
	delegate OnDriverChange;//[Offset: 0x2c0, Size: 0x10]// 0x75a8881d80
	FString LatestDriverPlayerUID;//[Offset: 0x2d0, Size: 0x10]// 0x75a887ad70
	int MaxInUseSeatGUIIndex;//[Offset: 0x2e0, Size: 0x4]// 0x75a887ade0
	STExtraPlayerController* RemoteController;//[Offset: 0x2e8, Size: 0x8]// 0x75a8881e00
	delegate OnOccupierStateChange;//[Offset: 0x2f0, Size: 0x10]// 0x75a8881e80
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]// 0x75a8881f00
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x308, Size: 0x8]// 0x75a8881f80
	FName PassengerViewYawLimit;//[Offset: 0x310, Size: 0x8]// 0x75a887ae50
	FName PassengerViewPitchLimit;//[Offset: 0x318, Size: 0x8]// 0x75a887aec0
	FName WeaponPassengerViewYawLimit;//[Offset: 0x320, Size: 0x8]// 0x75a887af30
	FName WeaponPassengerViewPitchLimit;//[Offset: 0x328, Size: 0x8]// 0x75a887afa0
	void SetSeatAnimFinish(int SeatIdx, bool bFinishAnim);// 0x47d7080
	void ResetOccupyCharacterAnimIns(int SeatIndex, out STExtraVehicleOccupierState OccupierState, bool bForceReset);// 0x47d6f44
	bool RemoveVehicleWeapon(int SeatID, int weaponIndex);// 0x47d6e7c
	void RefreshOccupyCharacterAnimIns(STExtraBaseCharacter* PlayerCharacter);// 0x47d6e00
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x47d6d4c
	void OnRep_VehicleWeapons();// 0x47d6d38
	void OnRep_OccupierStates();// 0x47d6d24
	void OnRep_Occupiers(STExtraPlayerCharacter*[] OldSeatOccupiers);// 0x47d6c4c
	void OnRep_Attachments();// 0x47d6c38
	void MulticastDrawDebugSweepCapsule(const Vector Start, const Vector End, float Radius, float HalfHeight, byte DrawDebugType, bool bHit, const HitResult OutHit, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x47d6960
	bool IsSeatIndexAvailable(int SeatIndex);// 0x47d68d0
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x47d6840
	bool IsSeatAvailable(enum SeatType);// 0x47d67b0
	enum GetSeatType(int CurrentIndex);// 0x47d671c
	int GetSeatNum();// 0x47d6700
	bool GetSeatAnimFinish(int SeatIdx);// 0x47d6670
	bool GetPlayerSeatInfo(STExtraBaseCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x47d646c
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x47d63e0
	STExtraPlayerCharacter* GetLastDriverInVehicle();// 0x47d63ac
	int GetInUseSeatNum();// 0x47d6378
	STExtraPlayerCharacter* GetDriver();// 0x47d6344
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x47d62b8
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x47d61d0
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x47d6108
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x47d5fe0
	void CalcFixedCapsuleShape(CapsuleComponent* capsuleComp, out float FixedHalfHeight, out float FixedRadius);// 0x47d5ec0
	bool AddVehicleWeaponFromSupportKit(int SeatID, int weaponIndex, int weaponIndexSupport);// 0x47d5dbc

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 0x1]// 0x761222e010
	FName AnimCompTagName;//[Offset: 0x8, Size: 0x8]// 0x761222dfa0
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 0x8]// 0x761222df30
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 0x8]// 0x761222dec0
	STExtraVehicleSeatPerformConfig[] EnterVehiclePointsConfig;//[Offset: 0x20, Size: 0x10]// 0x761222ddc0
	STExtraVehicleSeatPerformConfig[] ExitVehiclePointsConfig;//[Offset: 0x30, Size: 0x10]// 0x761222d9b0
	bool bHasUpDownPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x761222d930
	byte OccupyMovementMode;//[Offset: 0x41, Size: 0x1]// 0x761222d8b0
	byte HoldWeaponType;//[Offset: 0x42, Size: 0x1]// 0x761222d830
	enum[] WeaponTypeNewAllowList;//[Offset: 0x48, Size: 0x10]// 0x761222d6b0
	byte SeatSpecialType;//[Offset: 0x58, Size: 0x1]// 0x761222d630
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]// 0x761222d5b0
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]// 0x761222d530
	int GUIDisplayIndex;//[Offset: 0x5c, Size: 0x4]// 0x761222d4c0
	CurveFloat* MinViewPitchCurve;//[Offset: 0x60, Size: 0x8]// 0x761222d440
	bool bEnableYawLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]// 0x761222d3c0
	Vector2D ViewYawLimit;//[Offset: 0x6c, Size: 0x8]// 0x761222d340
	Rotator CharRotVsVehiRot;//[Offset: 0x74, Size: 0xc]// 0x761222d2c0
	byte SeatSideType;//[Offset: 0x80, Size: 0x1]// 0x761222d240
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]// 0x761222d1c0
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]// 0x761222d140
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]// 0x761222d0c0
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x88, Size: 0x10]// 0x761222cfc0
	STExtraVehicleWeaponConfig[] VehicleWeaponConfigSupport;//[Offset: 0x98, Size: 0x10]// 0x761222c860
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]// 0x761222c7e0
	bool bDriverSeatWeaponShouldSetToTemporaryWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]// 0x761222c760
	FName VehicleWeaponSeatSocket;//[Offset: 0xb0, Size: 0x8]// 0x761222c6f0
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]// 0x761222c670
	float Radius;//[Offset: 0xbc, Size: 0x4]// 0x761222c600
	float HalfHeight;//[Offset: 0xc0, Size: 0x4]// 0x761222c590
	Transform CollisionOffset;//[Offset: 0xd0, Size: 0x30]// 0x761222c510
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]// 0x761222c490
	Vector ExitVehicleEnterPositionFix;//[Offset: 0x104, Size: 0xc]// 0x761222c410
	Vector GrenadeThrowRelativeLocation;//[Offset: 0x110, Size: 0xc]// 0x761222c390
	FName SeatAnimInsSlotName;//[Offset: 0x120, Size: 0x8]// 0x761222c320
	class AnimInstance* SeatAnimInstance;//[Offset: 0x128, Size: 0x8]// 0x761222c2a0
	bool bHideCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]// 0x761222c220

--------------------------------
Class: STExtraVehicleSeatPerformConfig
	FName SocketName;//[Offset: 0x0, Size: 0x8]// 0x761222dd50
	AnimMontage* MontageAsset;//[Offset: 0x8, Size: 0x8]// 0x761222dcd0
	CurveVector* PositionCurve;//[Offset: 0x10, Size: 0x8]// 0x761222dc50
	CurveVector* RotationCurve;//[Offset: 0x18, Size: 0x8]// 0x761222dbd0
	CurveVector* ScaleCurve;//[Offset: 0x20, Size: 0x8]// 0x761222db50

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 0x8]// 0x761222cf50
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 0x8]// 0x761222ced0
	Vector2D ViewYawLimit;//[Offset: 0x10, Size: 0x8]// 0x761222ce50
	Vector2D ViewPitchLimit;//[Offset: 0x18, Size: 0x8]// 0x761222cdd0
	bool bEnableAimAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x761222cd50
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x761222ccd0
	float MuzzleDirTor;//[Offset: 0x24, Size: 0x4]// 0x761222cc60
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x761222cbe0
	float MuzzleVehicleTore;//[Offset: 0x2c, Size: 0x4]// 0x761222cb70
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x761222caf0
	Box MuzzleRangeBox;//[Offset: 0x34, Size: 0x1c]// 0x761222ca70
	float DistTorSquared;//[Offset: 0x50, Size: 0x4]// 0x761222ca00

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0x14c8, Size: 0x4]// 0x76120c0d00
	class VehicleShootWeaponRotateCalculator* RotateCalculatorTemplate;//[Offset: 0x14d0, Size: 0x8]// 0x76120c0c80
	VehicleShootWeaponRotateCalculator* RotateCalculator;//[Offset: 0x14d8, Size: 0x8]// 0x76120c0c00
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e0, Size: 0x1]// 0x76120c0b80
	bool bAddMasterGunToWeaponAvatarComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e1, Size: 0x1]// 0x76120c0b00
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e2, Size: 0x1]// 0x76120c0a80
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e3, Size: 0x1]// 0x76120c0a00
	FName VehWeaponBindSocket;//[Offset: 0x14e8, Size: 0x8]// 0x76120c0990
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0x14f0, Size: 0x90]// 0x76120bfc10
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1580, Size: 0x1]// 0x76120bfb90
	FName OnBlockMuzzleSocket;//[Offset: 0x1588, Size: 0x8]// 0x76120bfb20
	PaperSprite* VehicleWeaponControlIcon;//[Offset: 0x1590, Size: 0x28]// 0x76120bfaa0
	PaperSprite* VehicleWeaponControlIcon_Used;//[Offset: 0x15b8, Size: 0x28]// 0x76120bfa20
	bool ScopeInImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e0, Size: 0x1]// 0x76120bf9a0
	enum WeaponTypeAtDriverSeat;//[Offset: 0x15e1, Size: 0x1]// 0x76120bf840
	bool bShouldShowBulletCountAtDriverSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e2, Size: 0x1]// 0x76120bf7c0
	delegate OnVehicleWeaponTurning;//[Offset: 0x15e8, Size: 0x10]// 0x76120bf740
	delegate OnVehicleWeaponTurningStop;//[Offset: 0x15f8, Size: 0x10]// 0x76120bf6c0
	bool UseBulletOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1608, Size: 0x1]// 0x76120bf640
	int BulletOnVehicle;//[Offset: 0x160c, Size: 0x4]// 0x76120bf5d0
	delegate OnRepBulletOnVehicleDelegate;//[Offset: 0x1610, Size: 0x10]// 0x76120bf550
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x1620, Size: 0x8]// 0x76120bf4d0
	AnimSequence* VehicleWeaponReload;//[Offset: 0x1628, Size: 0x8]// 0x76120bf450
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x1630, Size: 0x8]// 0x76120bf3d0
	float VehicleWeaponReloadRate;//[Offset: 0x1638, Size: 0x4]// 0x76120bf360
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x1640, Size: 0x8]// 0x76120bf2e0
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1648, Size: 0x1]// 0x76120bf260
	FName VehicleWeaponGripSocketR;//[Offset: 0x1650, Size: 0x8]// 0x76120bf1f0
	FName VehicleWeaponGripSocketL;//[Offset: 0x1658, Size: 0x8]// 0x76120bf180
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1660, Size: 0x1]// 0x76120bf100
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1661, Size: 0x1]// 0x76120bf080
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1662, Size: 0x1]// 0x76120bf000
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1663, Size: 0x1]// 0x76120bef80
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1664, Size: 0x1]// 0x76120bef00
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1674, Size: 0x1]// 0x76120bee80
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1675, Size: 0x1]// 0x76120bee00
	bool bUseVehicleViewPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1676, Size: 0x1]// 0x76120bed80
	float VehicleViewPitch;//[Offset: 0x1678, Size: 0x4]// 0x76120bed10
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167c, Size: 0x1]// 0x76120bec90
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167f, Size: 0x1]// 0x76120bec10
	FName CharacterSocket;//[Offset: 0x1680, Size: 0x8]// 0x76120beba0
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1688, Size: 0x1]// 0x76120beb20
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1689, Size: 0x1]// 0x76120beaa0
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168a, Size: 0x1]// 0x76120bea20
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168b, Size: 0x1]// 0x76120be9a0
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168c, Size: 0x1]// 0x76120be920
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168d, Size: 0x1]// 0x76120be8a0
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x1690, Size: 0x8]// 0x76120be820
	FName GrenadePredictLineSocket;//[Offset: 0x1698, Size: 0x8]// 0x76120be7b0
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x16a0, Size: 0x8]// 0x76120be730
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a8, Size: 0x1]// 0x76120be6b0
	float FuelConsumptionRate;//[Offset: 0x16ac, Size: 0x4]// 0x76120be640
	int VehicleSeatIndex;//[Offset: 0x16b4, Size: 0x4]// 0x76120be5d0
	int VehicleSlotIndex;//[Offset: 0x16b8, Size: 0x4]// 0x76120be560
	bool bShouldStopTickWhenNotUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16bc, Size: 0x1]// 0x76120be4e0
	float StartReloadDelayTime;//[Offset: 0x16d0, Size: 0x4]// 0x76120be470
	float EndReloadDelayTime;//[Offset: 0x16e0, Size: 0x4]// 0x76120be400
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x16e8, Size: 0x8]// 0x76120be380
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f0, Size: 0x1]// 0x76120be300
	Actor* OwnerActor;//[Offset: 0x16f8, Size: 0x8]// 0x76120be280
	VehicleWeaponReconnectData RecData;//[Offset: 0x1700, Size: 0xc]// 0x76120be070
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x1710, Size: 0x8]// 0x76120bdff0
	bool bEnableAimAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171a, Size: 0x1]// 0x76120bdf70
	int BulletTypeTipMsgID;//[Offset: 0x1724, Size: 0x4]// 0x76120bdf00
	Rotator TargetDir;//[Offset: 0x1728, Size: 0xc]// 0x76120bde80
	bool bShouldCustomIdleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1734, Size: 0x1]// 0x76120bde00
	float CheckAutoIdleStateInterval;//[Offset: 0x1738, Size: 0x4]// 0x76120bdd90
	void StartReloadAnim();// 0x47db9f8
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x47db8ec
	void SetTarget(out const Vector TargetLocation);// 0x47db860
	void ServerUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x47db7a0
	void RefreshWeaponCameraAndUI();// 0x47db78c
	void OnVehicleWeaponTurningStop__DelegateSignature();// 0xffffff8a17adf2b0
	void OnVehicleWeaponTurning__DelegateSignature();// 0xffffff8a17adf2b0
	void OnVehicleExplode();// 0x47db770
	void OnRep_Reconnect();// 0x47db75c
	void OnRep_OwnerActor();// 0x47db748
	void OnRep_BulletOnVehicle();// 0x47db734
	void NetMulticastReturnBullets();// 0x47db6d4
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x47db590
	void K2_SetSpecialMeshHide(bool IsHide);// 0xffffff8a17adf2b0
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0xffffff8a17adf2b0
	void K2_OnReturnBullets();// 0xffffff8a17adf2b0
	MeshComponent* K2_GetWeaponMeshComp();// 0xffffff8a17adf2b0
	void K2_ClientOnBeAttachedToVehicle();// 0xffffff8a17adf2b0
	bool IsTurning(float Tolerance);// 0x47db4f8
	void HnadleScopeInAfterReload(uint64 CurrentPawnState);// 0x47db47c
	void HandleWeaponStateChanged(enum LastState, enum NewState);// 0x47db3c4
	void HandleWeaponStartReload();// 0x47db3b0
	void HandleWeaponEndReload();// 0x47db39c
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x47db318
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x47db290
	Vector GetYawCenter();// 0x47db250
	Rotator GetWeaponRotator_Implementation(float DeltaSeconds);// 0x47db1b8
	Rotator GetWeaponRotator(float DeltaSeconds);// 0x47db120
	Vector GetShootTarget();// 0x47db0e0
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x47db0ac
	STExtraVehicleBase* GetOwnerVehicle();// 0x47db078
	Rotator GetOwnerCameraRotator_Implementation();// 0x47db038
	Rotator GetOwnerCameraRotator();// 0x47daff8
	Rotator GetFinalLogicRotator_Implementation();// 0x47dafb8
	Rotator GetFinalLogicRotator();// 0x47daf78
	Rotator GetCurLogicRotator();// 0x47daf38
	Transform GetCharacterSocketTransform();// 0x47daee4
	void DoUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x47dae24
	bool CheckIsAutonomousOrObTarget();// 0x47dadec
	void AfterReloadEnd();// 0x47dadd8

--------------------------------
Class: VehicleShootWeaponRotateCalculator.Object
	float YawSpeedLimit;//[Offset: 0x28, Size: 0x4]// 0x760d14d460
	float PitchSpeedLimit;//[Offset: 0x2c, Size: 0x4]// 0x760d14d4d0
	float Tolerance;//[Offset: 0x30, Size: 0x4]// 0x760d14d540
	float AnimTolerance;//[Offset: 0x34, Size: 0x4]// 0x760d14d5b0
	float TurningStopTimeBuffer;//[Offset: 0x38, Size: 0x4]// 0x760d14d620
	float DefaultZ;//[Offset: 0x3c, Size: 0x4]// 0x760d14d690
	float IntersectionDistance;//[Offset: 0x40, Size: 0x4]// 0x760d14d700
	bool bUseZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]// 0x75a8826600
	bool bUseLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]// 0x75a8826680
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]// 0x75a8826700
	float StopTurningTime;//[Offset: 0x48, Size: 0x4]// 0x760d14d770
	bool bIsTurningStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]// 0x75a8826780
	Rotator CurLogicRotator;//[Offset: 0x50, Size: 0xc]// 0x75a8826800
	Rotator CurAnimRotator;//[Offset: 0x5c, Size: 0xc]// 0x75a8826880
	VehicleShootWeapon* OwnerWeapon;//[Offset: 0x68, Size: 0x8]// 0x75a8826900
	Rotator GetWeaponRotator_Implementation(float DeltaSeconds);// 0x47d990c
	Rotator GetWeaponRotator(float DeltaSeconds);// 0x47d9874
	Vector GetShootTarget();// 0x47d9834
	Rotator GetFinalLogicRotator_Implementation(VehicleShootWeapon* Weapon, STExtraPlayerCharacter* RefSeatPlayer);// 0x47d9764
	Rotator GetFinalLogicRotator(VehicleShootWeapon* Weapon, STExtraPlayerCharacter* RefSeatPlayer);// 0x47d9694
	Rotator CalWeaponRotator_Implementation(float DeltaTime, STExtraPlayerCharacter* RefSeatPlayer, VehicleShootWeapon* Weapon);// 0x47d9588
	Rotator CalWeaponRotator(float DeltaTime, STExtraPlayerCharacter* RefSeatPlayer, VehicleShootWeapon* Weapon);// 0x47d947c

--------------------------------
Class: CameraOffsetData
	FName DataName;//[Offset: 0x0, Size: 0x8]// 0x76120c0920
	FName[] ExclusionDataNames;//[Offset: 0x8, Size: 0x10]// 0x76120c0830
	Vector RelativeLocationOffset;//[Offset: 0x18, Size: 0xc]// 0x76120c07b0
	Vector SocketOffset;//[Offset: 0x24, Size: 0xc]// 0x76120c0730
	Vector TargetOffset;//[Offset: 0x30, Size: 0xc]// 0x76120c06b0
	float TargetArmLength;//[Offset: 0x3c, Size: 0x4]// 0x76120c0640
	float SpringArmLength;//[Offset: 0x40, Size: 0x4]// 0x76120c05d0
	float TargetArmLengthAdditiveOffset;//[Offset: 0x44, Size: 0x4]// 0x76120c0560
	float FieldOfView;//[Offset: 0x48, Size: 0x4]// 0x76120c04f0
	float AdditiveOffsetFov;//[Offset: 0x4c, Size: 0x4]// 0x76120c0480
	float ArmLengthInterpSpeed;//[Offset: 0x68, Size: 0x4]// 0x76120c0410
	float LocOffsetInterpSpeed;//[Offset: 0x6c, Size: 0x4]// 0x76120c03a0
	bool bDoCollisionTestModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]// 0x76120c0320
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]// 0x76120c02a0
	bool bUsePawnControlRotationModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]// 0x76120c0220
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]// 0x76120c01a0
	Rotator SpringArmRotation;//[Offset: 0x74, Size: 0xc]// 0x76120c0120
	bool bEnableCameraLagModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]// 0x76120c00a0
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]// 0x76120c0020
	bool bEnableCameraRotationLagModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]// 0x76120bffa0
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]// 0x76120bff20
	bool bCameraLagSpeedModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]// 0x76120bfea0
	float CameraLagSpeed;//[Offset: 0x88, Size: 0x4]// 0x76120bfe30
	enum OperateType;//[Offset: 0x8c, Size: 0x1]// 0x76120bfd30

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x38, Size: 0x8]// 0x75a8210300
	Vector2D SourceDimension;//[Offset: 0x40, Size: 0x8]// 0x75a8210380
	Texture2D* SourceTexture;//[Offset: 0x48, Size: 0x8]// 0x75a8210400
	Texture*[] AdditionalSourceTextures;//[Offset: 0x50, Size: 0x10]// 0x75a8210500
	Vector2D BakedSourceUV;//[Offset: 0x60, Size: 0x8]// 0x75a8210580
	Vector2D BakedSourceDimension;//[Offset: 0x68, Size: 0x8]// 0x75a8210600
	Texture2D* BakedSourceTexture;//[Offset: 0x70, Size: 0x8]// 0x75a8210680
	MaterialInterface* DefaultMaterial;//[Offset: 0x78, Size: 0x8]// 0x75a8210700
	MaterialInterface* AlternateMaterial;//[Offset: 0x80, Size: 0x8]// 0x75a8210780
	PaperSpriteSocket[] Sockets;//[Offset: 0x88, Size: 0x10]// 0x75a8210880
	byte SpriteCollisionDomain;//[Offset: 0x98, Size: 0x1]// 0x75a8210900
	float PixelsPerUnrealUnit;//[Offset: 0x9c, Size: 0x4]// 0x75a821fef0
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 0x8]// 0x75a8210980
	int AlternateMaterialSplitIndex;//[Offset: 0xa8, Size: 0x4]// 0x75a821ff60
	Vector4[] BakedRenderData;//[Offset: 0xb0, Size: 0x10]// 0x75a8210a80

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]// 0x75c9949800
	FName SocketName;//[Offset: 0x30, Size: 0x8]// 0x75c9951430

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x510, Size: 0xc]// 0x75bcaf2100
	Vector LowThrowOffset;//[Offset: 0x51c, Size: 0xc]// 0x75bcaf2180
	enum ThrowMode;//[Offset: 0x528, Size: 0x1]// 0x75bcaf2280
	float PredictLineVelocityScale;//[Offset: 0x52c, Size: 0x4]// 0x75bdd628c0
	float MaxSimTime;//[Offset: 0x530, Size: 0x4]// 0x75bdd62930
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x538, Size: 0x30]// 0x75bcaf2300
	float GrenadeRadius;//[Offset: 0x568, Size: 0x4]// 0x75bdd629a0
	Vector PredictLineStartLocation;//[Offset: 0x56c, Size: 0xc]// 0x75bcaf2380
	Vector PredictLineStartVelocity;//[Offset: 0x578, Size: 0xc]// 0x75bcaf2400
	Vector LauncheVelocity;//[Offset: 0x584, Size: 0xc]// 0x75bcaf2480
	void SetGrenadePredictLineVisible(bool bNewVisible);// 0xffffff8a17adf2b0

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 0x10]// 0x7612194b20
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7612194aa0
	Vector HitActorLocation;//[Offset: 0x14, Size: 0xc]// 0x7612194a20
	Rotator HitActorRotation;//[Offset: 0x20, Size: 0xc]// 0x76121949a0

--------------------------------
Class: VehicleWeaponReconnectData
	uint32 RecconectIndex;//[Offset: 0x0, Size: 0x4]// 0x76120be210
	WeaponSyncData SyncData;//[Offset: 0x4, Size: 0x8]// 0x76120be190

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]// 0x76120bd020
	uint32 ClipID;//[Offset: 0x4, Size: 0x4]// 0x76120bcfb0

--------------------------------
Class: STExtraVehicleOccupierState
	STExtraPlayerCharacter* OccupierCharacter;//[Offset: 0x0, Size: 0x8]// 0x7611d71f60
	bool bUsingVehicleAnimIns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611d71ee0
	AnimInstance* FPPAnimVehicleIns;//[Offset: 0xc, Size: 0x8]// 0x7611d71e60
	AnimInstance* TPPAnimVehicleIns;//[Offset: 0x14, Size: 0x8]// 0x7611d71de0

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 0x10]// 0x761222c080

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 0x8]// 0x76122284c0
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 0x8]// 0x7612228440

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]// 0x75a8835200
	float HitSelfModifier;//[Offset: 0x524, Size: 0x4]// 0x75a8951b40
	float HitSelfImpactReduce;//[Offset: 0x528, Size: 0x4]// 0x75a8951bb0
	float HitOthersModifier;//[Offset: 0x52c, Size: 0x4]// 0x75a8951c20
	float HitOthersImpactRaise;//[Offset: 0x530, Size: 0x4]// 0x75a8951c90
	float HitCharacterModifier;//[Offset: 0x534, Size: 0x4]// 0x75a8951d00

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x118, Size: 0x8]// 0x75a882cd80
	float fDamageToMyriapodFlag;//[Offset: 0x120, Size: 0x4]// 0x75a894ee30
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x124, Size: 0x4]// 0x75a894eea0
	float MaxLaunchVelocityFactorOnHitCharacter;//[Offset: 0x128, Size: 0x4]// 0x75a894ef10
	float ImpactModifier;//[Offset: 0x12c, Size: 0x4]// 0x75a894ef80
	float ImpactAbsorption;//[Offset: 0x130, Size: 0x4]// 0x75a894eff0
	float ImpactAbsorptionPassenger;//[Offset: 0x134, Size: 0x4]// 0x75a894f060
	float ImpactModifierUpsideDown;//[Offset: 0x138, Size: 0x4]// 0x75a894f0d0
	float ImpactAbsorptionUpsideDown;//[Offset: 0x13c, Size: 0x4]// 0x75a894f140
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x140, Size: 0x4]// 0x75a894f1b0
	float HitIgnoreImpulseThreshold;//[Offset: 0x144, Size: 0x4]// 0x75a894f220
	class Actor[] HitIgnoreClasses;//[Offset: 0x148, Size: 0x10]// 0x75a882ce80
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75a882cf00
	float PushCharacterForwardVectorStrength;//[Offset: 0x15c, Size: 0x4]// 0x75a894f290
	float PushCharacterRightVectorStrength;//[Offset: 0x160, Size: 0x4]// 0x75a894f300
	float PushCharacterTopVectorStrength;//[Offset: 0x164, Size: 0x4]// 0x75a894f370
	float ApplyImpluseSpeed;//[Offset: 0x168, Size: 0x4]// 0x75a894f3e0
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x170, Size: 0x50]// 0x75a893e800
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x1c0, Size: 0x4]// 0x75a894f4c0
	TimeCoolDown HitCharacterDamageCD;//[Offset: 0x1c4, Size: 0x8]// 0x75a882d000
	TimeCoolDown HitDamageSelfCD;//[Offset: 0x1cc, Size: 0x8]// 0x75a882d080
	float HitDamageSelfMaxFactor;//[Offset: 0x1d4, Size: 0x4]// 0x75a894f530
	float HitDamagePassengerMaxHP;//[Offset: 0x1d8, Size: 0x4]// 0x75a894f5a0
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]// 0x75a882d100
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x1e0, Size: 0x4]// 0x75a894f610
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x1e8, Size: 0x8]// 0x75a882d180
	bool bCheckHitValidInAliveHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]// 0x75a882d200
	float ExplosionBaseDamage;//[Offset: 0x1f4, Size: 0x4]// 0x75a894f680
	float ExplosionMinimumDamage;//[Offset: 0x1f8, Size: 0x4]// 0x75a894f6f0
	float ExplosionRadiusInner;//[Offset: 0x1fc, Size: 0x4]// 0x75a894f760
	float ExplosionRadiusOuter;//[Offset: 0x200, Size: 0x4]// 0x75a894f7d0
	float ExplosionDamageFalloff;//[Offset: 0x204, Size: 0x4]// 0x75a894f840
	float ExplosionBaseMomentumMag;//[Offset: 0x208, Size: 0x4]// 0x75a894f8b0
	class DamageType* ExplosionDamageType;//[Offset: 0x210, Size: 0x8]// 0x75a882d280
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]// 0x75a882d300
	float ImpluseAHorseMinSpeed;//[Offset: 0x21c, Size: 0x4]// 0x75a894f920
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x220, Size: 0x50]// 0x75a893e8c0
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]// 0x75a882d400
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x274, Size: 0x4]// 0x75a894fa00
	<Actor*,float> VehicleDamageMobTimes;//[Offset: 0x278, Size: 0x50]// 0x75a893e980
	bool bProcessVehicleDamageMobOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]// 0x75a882d500
	float VehicleDamageMobCooldownTime;//[Offset: 0x2cc, Size: 0x4]// 0x75a894fae0
	float HitStoneVelocityDamp;//[Offset: 0x2d0, Size: 0x4]// 0x75a894fb50
	bool bEnabledMobHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]// 0x75a882d580
	CurveFloat* HitMobDamageCurve;//[Offset: 0x2d8, Size: 0x8]// 0x75a882d600
	CurveFloat* HitMobVelocityCurve;//[Offset: 0x2e0, Size: 0x8]// 0x75a882d680
	byte[] MobObjectTypes;//[Offset: 0x2e8, Size: 0x10]// 0x75a882d780
	float MaxAllowedMobHitDistanceSq;//[Offset: 0x2f8, Size: 0x4]// 0x75a894fbc0
	bool bUseProciseHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]// 0x75a882d800
	float TestHitMobInterval;//[Offset: 0x300, Size: 0x4]// 0x75a894fc30
	float HitMobFeedBackBase;//[Offset: 0x304, Size: 0x4]// 0x75a894fca0
	float HitMobOwnFeedBack;//[Offset: 0x308, Size: 0x4]// 0x75a894fd10
	float PlayHitMobFXInternal;//[Offset: 0x30c, Size: 0x4]// 0x75a894fd80
	float PlayHitMobSpeedThreshold;//[Offset: 0x310, Size: 0x4]// 0x75a894fdf0
	RigidBodyState CachedRigidBodyState;//[Offset: 0x320, Size: 0x40]// 0x75a882d880
	Actor*[] LastOverlapTickKey;//[Offset: 0x480, Size: 0x10]// 0x75a882d980
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x500, Size: 0x50]// 0x75a893ea40
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]// 0x75a882da80
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]// 0x75a882db00
	float CustomImpulseCooldownTime;//[Offset: 0x554, Size: 0x4]// 0x75a894fed0
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x558, Size: 0x50]// 0x75a893eb00
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x5a8, Size: 0x28]// 0x75a882dc00
	void SendSimpleCharacterBaseHitToServer(const STExtraSimpleCharacterBase*[] InMobArr);// 0x47cd3c0
	void SendMobHitToServer(const STExtraSimpleCharacter*[] InMobArr);// 0x47cd308
	void SendHitDamagedActorToServer(DamageableActor* DamageableActor, const RigidBodyState InHitBodyState);// 0x47cd1fc
	void SendHitDamagedActorInterfaceToServer(Actor* InActor, const RigidBodyState InHitBodyState);// 0x47cd0f0
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x47ccfe4
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x47cce48
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x47cccf0
	void ClientMobFeedback(float InVal);// 0x47ccc40

--------------------------------
Class: TimeCoolDown
	float IntervalTime;//[Offset: 0x0, Size: 0x4]// 0x761222b5f0

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 0xc]// 0x75d0a8b200
	Quat Quaternion;//[Offset: 0x10, Size: 0x10]// 0x75d0a8b280
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 0xc]// 0x75d0a8b300
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 0xc]// 0x75d0a8b380
	byte Flags;//[Offset: 0x38, Size: 0x1]// 0x75d0a8b400

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 0x10]// 0x761222b450
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0x10, Size: 0x10]// 0x761222ae80
	class DamageType* DamageType;//[Offset: 0x20, Size: 0x8]// 0x761222ae00
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x761222ad80
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x761222ad00
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]// 0x761222ac80

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 0x8]// 0x761222b3d0
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x761222b350
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x761222b2d0
	float MaxDamagingImpulseMagnituge;//[Offset: 0xc, Size: 0x4]// 0x761222b260
	float MaxImpulseDamage;//[Offset: 0x10, Size: 0x4]// 0x761222b1f0
	float ImpulseStrength;//[Offset: 0x14, Size: 0x4]// 0x761222b180
	float RadialImpulseStrength;//[Offset: 0x18, Size: 0x4]// 0x761222b110
	float ImpulseRadius;//[Offset: 0x1c, Size: 0x4]// 0x761222b0a0
	byte ImpulseFalloffType;//[Offset: 0x20, Size: 0x1]// 0x761222b020

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x1324, Size: 0x4]// 0x761154db70
	float MinTimeLockTarget;//[Offset: 0x1328, Size: 0x4]// 0x761154dbe0
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x132c, Size: 0x4]// 0x761154dc50
	float SensedRadius;//[Offset: 0x1330, Size: 0x4]// 0x761154dcc0
	float MinTimeLockHeardEnemy;//[Offset: 0x1334, Size: 0x4]// 0x761154dd30
	float HeardRadius;//[Offset: 0x1338, Size: 0x4]// 0x761154dda0
	float DelayHideDuration;//[Offset: 0x133c, Size: 0x4]// 0x761154de10
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1340, Size: 0x1]// 0x75d0b54400
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1341, Size: 0x1]// 0x75d0b54480
	Vector HurtDir;//[Offset: 0x1344, Size: 0xc]// 0x75d0b54500
	float HurtDistance;//[Offset: 0x1350, Size: 0x4]// 0x761154de80
	float HurtResetDefaultTime;//[Offset: 0x1354, Size: 0x4]// 0x761154def0
	StateMutual[] StateMutuals;//[Offset: 0x1360, Size: 0x10]// 0x75d0b54600
	delegate StateEnterEvent;//[Offset: 0x1370, Size: 0x10]// 0x75d0b54680
	delegate StateLeaveEvent;//[Offset: 0x1380, Size: 0x10]// 0x75d0b54700
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0x13a8, Size: 0x28]// 0x75d0b54780
	int[] randomIndexes;//[Offset: 0x13d0, Size: 0x10]// 0x75d0b54800
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0x13e0, Size: 0x8]// 0x75d0b54880
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0x13e8, Size: 0x8]// 0x75d0b54900
	byte NetRelevantType;//[Offset: 0x13f0, Size: 0x1]// 0x75d0b54980
	float DisappearOnDeathLifeSpan;//[Offset: 0x13f4, Size: 0x4]// 0x761154dfd0
	void SetNetRelevantType(byte inType);// 0x46b77bc
	void OnRep_SimpleDamageData();// 0x46b77a8
	void DisappearOnDeath();// 0x46b778c
	void CurrentStatesRemove(int State);// 0x46b7708
	void CurrentStatesAdd(int State);// 0x46b7684
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x46b75c4
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b7370
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b711c
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b6ecc
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b6c7c
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b6a20
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b67b8
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b6568
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b6318
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x46b60c4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8a17adf2b0
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0xffffff8a17adf2b0
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x46b5f74

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 0x4]// 0x76121fe480
	int state2;//[Offset: 0x4, Size: 0x4]// 0x76121fe410

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 0x4]// 0x76121bfc60
	float CurrentHeath;//[Offset: 0x4, Size: 0x4]// 0x76121bfbf0
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x76121bfb70
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x76121bfaf0
	Pawn* DamageInstigatorPawn;//[Offset: 0x10, Size: 0x8]// 0x76121bfa70
	Pawn* DamageReceiver;//[Offset: 0x18, Size: 0x8]// 0x76121bf9f0
	int NetCounter;//[Offset: 0x20, Size: 0x4]// 0x76121bf980

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x548, Size: 0x8]// 0x75a8420380
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]// 0x75a8420400
	Rotator AdjustFloorRot;//[Offset: 0x574, Size: 0xc]// 0x75a8420480
	float AdjustFloorDelta;//[Offset: 0x580, Size: 0x4]// 0x75a83fb3f0
	void ResetAnimState();// 0x46af6f8
	void OnPawnDeadEvent(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x46af488
	void OnLeaveState(int State);// 0x46af404
	void OnEnterState(int State);// 0x46af380
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x46af204
	void CacheAnimState(float DeltaSeconds);// 0x46af180
	void CacheAnimDataList(bool ForceRefreshVar);// 0x46af0f4

--------------------------------
Class: DamageableActor.UAERegionActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x42a04d8
	int GetVehicleDamagedSpeed();// 0xffffff8a17adf2b0
	int GetVehicleDamagedCoefficient();// 0xffffff8a17adf2b0
	<enum,float> GetTargetDamageRateMap();// 0x42a0378
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x42a0214
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x42a017c
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x429ffd8
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x429ff28
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x429fe94
	enum[] CPP_GetDamageableGameObjectType();// 0x429fe0c
	bool CPP_GetCanBePicked();// 0x429fdcc
	FName CPP_GetBulletBlockComponentTag();// 0x429fd90
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x429fce0
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x429fc10
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x429fb20
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0xffffff8a17adf2b0
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0xffffff8a17adf2b0
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0xffffff8a17adf2b0
	float BP_GetMaxHP();// 0xffffff8a17adf2b0
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0xffffff8a17adf2b0
	float BP_GetDamageRateByTarget(Actor* Target);// 0xffffff8a17adf2b0
	enum[] BP_GetDamageableGameObjectType();// 0xffffff8a17adf2b0
	float BP_GetCurrentHP();// 0xffffff8a17adf2b0
	bool BP_GetCanBePicked();// 0xffffff8a17adf2b0
	FName BP_GetBulletBlockComponentTag();// 0xffffff8a17adf2b0
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0xffffff8a17adf2b0
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0xffffff8a17adf2b0
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0xffffff8a17adf2b0

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x118, Size: 0x10]// 0x75a8832d80
	delegate UGC_OnVehicleHPChangedDelegate;//[Offset: 0x128, Size: 0x10]// 0x75a8832e00
	delegate VehicleFuelChangedDelegate;//[Offset: 0x138, Size: 0x10]// 0x75a8832e80
	delegate UGC_OnVehicleFuelChangedDelegate;//[Offset: 0x148, Size: 0x10]// 0x75a8832f00
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x158, Size: 0x10]// 0x75a8832f80
	delegate UGC_OnVehicleWheelsHPChangedDelegate;//[Offset: 0x168, Size: 0x10]// 0x75a8833000
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x178, Size: 0x10]// 0x75a8833080
	delegate VehicleTakeDamageDelegate;//[Offset: 0x188, Size: 0x10]// 0x75a8833100
	delegate VehicleChargingStateChangedDelegate;//[Offset: 0x198, Size: 0x10]// 0x75a8833180
	delegate UGC_OnVehicleFuelUsedUpDelegate;//[Offset: 0x1a8, Size: 0x10]// 0x75a8833200
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x1b8, Size: 0x10]// 0x75a8833280
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x1c8, Size: 0x10]// 0x75a8833300
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]// 0x75a8833380
	bool ShouldShowVehicleHp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]// 0x75a8833400
	float HPMax;//[Offset: 0x1dc, Size: 0x4]// 0x75a89506b0
	float HP;//[Offset: 0x1e0, Size: 0x4]// 0x75a8950720
	float[] WheelsCurrentHP;//[Offset: 0x1e8, Size: 0x10]// 0x75a8833480
	bool bInCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]// 0x75a8833500
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 0x1]// 0x75a8833580
	bool ShouldShowVehicleFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 0x1]// 0x75a8833600
	float FuelMax;//[Offset: 0x1fc, Size: 0x4]// 0x75a8950800
	float Fuel;//[Offset: 0x200, Size: 0x4]// 0x75a8950870
	float FuelConsumeFactor;//[Offset: 0x204, Size: 0x4]// 0x75a89508e0
	bool ShouldShowVehicleHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]// 0x75a8833680
	bool ShouldHideClassicControlPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]// 0x75a8833700
	bool ShouldShowExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1]// 0x75a8833780
	bool ForceUseTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b, Size: 0x1]// 0x75a8833800
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x210, Size: 0x10]// 0x75a8833900
	Actor* LastHitCauser;//[Offset: 0x220, Size: 0x8]// 0x75a8833980
	bool bEnableDamageCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]// 0x75a8833a00
	<byte,class CameraShake> DamageCameraShake_DamageType;//[Offset: 0x230, Size: 0x50]// 0x75a89406c0
	float DamageCameraShake_InnerRadius;//[Offset: 0x280, Size: 0x4]// 0x75a8950950
	float DamageCameraShake_OuterRadius;//[Offset: 0x284, Size: 0x4]// 0x75a89509c0
	float DamageCameraShake_FallOff;//[Offset: 0x288, Size: 0x4]// 0x75a8950a30
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x290, Size: 0x10]// 0x75a8833c00
	bool ShouldBeUnWalkableWhenDriving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]// 0x75a8833c80
	float CheckWalkableInterval;//[Offset: 0x2a4, Size: 0x4]// 0x75a8950aa0
	float UnWalkableVelocity;//[Offset: 0x2a8, Size: 0x4]// 0x75a8950b10
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x47c7688
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x47c74b0
	void TakeDamageByBoneName(float Damage, out const FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x47c72bc
	void SetWheelHP(int WheelIndex, float WheelHP);// 0x47c7204
	void SetFuelByPercent(float percent);// 0x47c7188
	void RPC_Multicast_VehicleWheelTakeDamage(float Damage, int LeftHP, int LeftWheelHP, int DamageType, Actor* DamageCauser);// 0x47c7018
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x47c6ee4
	void RefreshWheelState();// 0x47c6ed0
	void OnRep_WheelsCurrentHP();// 0x47c6ebc
	void OnRep_ShouldShowExitVehicle();// 0x47c6ea8
	void OnRep_InCharging();// 0x47c6e94
	void OnRep_HP();// 0x47c6e80
	void OnRep_Fuel();// 0x47c6e6c
	bool NoFuel();// 0x47c6e34
	void Maintenance(float addpercenthp, bool FixTire, Controller* causer);// 0x47c6d30
	bool IsDontDamage();// 0x47c6d14
	bool IsDontConsumeFuel();// 0x47c6cf8
	bool IsDestroyed();// 0x47c6cc0
	int GetWheelsHPNum();// 0x47c6c8c
	float GetWheelHPMax(int WheelIdx);// 0x47c6c00
	float GetWheelHP(int WheelIdx);// 0x47c6b74
	float GetVehicleHPMax();// 0x47c6b40
	float GetVehicleHP();// 0x47c6b0c
	float GetFuelMax();// 0x47c6ad8
	float GetFuelConsumeFactor();// 0x47c6aa4
	float GetFuel();// 0x47c6a70
	void BP_ConsumeFuel(float Value);// 0x47c69f4

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]// 0x7612228e20
	float DamageScale;//[Offset: 0x8, Size: 0x4]// 0x7612228db0

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 0x4]// 0x7612229030
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x7612228fb0
	FName BoneName;//[Offset: 0x8, Size: 0x8]// 0x7612228f40

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x2b8, Size: 0x8]// 0x75a81df500
	float MeshDensity;//[Offset: 0x2c0, Size: 0x4]// 0x75a8217830
	float FluidDensity;//[Offset: 0x2c4, Size: 0x4]// 0x75a82178a0
	Vector VelocityDamper;//[Offset: 0x2c8, Size: 0xc]// 0x75a81df580
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]// 0x75a81df600
	float MaxUnderwaterVelocity;//[Offset: 0x2d8, Size: 0x4]// 0x75a8217910
	float TestPointRadius;//[Offset: 0x2dc, Size: 0x4]// 0x75a8217980
	Vector[] TestPoints;//[Offset: 0x2e0, Size: 0x10]// 0x75a81df700
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]// 0x75a81df780
	bool EnableCheckBoundsSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]// 0x75a81df800
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]// 0x75a81df880
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 0x1]// 0x75a81df900
	float[] PointDensityOverride;//[Offset: 0x2f8, Size: 0x10]// 0x75a81df980
	StructBoneOverride[] BoneOverride;//[Offset: 0x308, Size: 0x10]// 0x75a81dfa80
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]// 0x75a81dfb00
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]// 0x75a81dfb80
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 0x1]// 0x75a81dfc00
	float StayUprightStiffness;//[Offset: 0x31c, Size: 0x4]// 0x75a8217a60
	float StayUprightDamping;//[Offset: 0x320, Size: 0x4]// 0x75a8217ad0
	Rotator StayUprightDesiredRotation;//[Offset: 0x324, Size: 0xc]// 0x75a81dfc80
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]// 0x75a81dfd00
	float WaveForceMultiplier;//[Offset: 0x334, Size: 0x4]// 0x75a8217b40
	bool LockPhysSceneOneTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]// 0x75a81dfd80
	SceneComponent* UpdatedComponent;//[Offset: 0x340, Size: 0x8]// 0x75a81dfe00
	byte TickGroup;//[Offset: 0x348, Size: 0x1]// 0x75a81dfe80
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]// 0x75a81dff00
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x34c, Size: 0xc]// 0x75a81dff80
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x358, Size: 0x10]// 0x75a81e0080
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x520, Size: 0x8]// 0x75a81e0100
	bool IgnoreBuoyancyCalc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]// 0x75a81e0180
	float IgnoreBuoyancyCalcTestPointDiff;//[Offset: 0x538, Size: 0x4]// 0x75a8217bb0
	bool bShouldDoVehicleLandingDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]// 0x75a81e0200
	bool bFluidDampingShouldConsiderWaterPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 0x1]// 0x75a81e0280
	float FluidLinearDamping;//[Offset: 0x540, Size: 0x4]// 0x75a8217c20
	float FluidAngularDamping;//[Offset: 0x544, Size: 0x4]// 0x75a8217c90
	float LandedLinearDamping;//[Offset: 0x548, Size: 0x4]// 0x75a8217d00
	float LandedAngularDamping;//[Offset: 0x54c, Size: 0x4]// 0x75a8217d70
	float DoVehicleLandingDetect_Interval;//[Offset: 0x550, Size: 0x4]// 0x75a8217de0
	int DoVehicleLandingDetect_LeaveWaterFrameThreshold;//[Offset: 0x554, Size: 0x4]// 0x75a8217e50
	float DoVehicleLandingDetect_TraceDistance;//[Offset: 0x558, Size: 0x4]// 0x75a8217ec0
	void TickBuoyancyForce(float DeltaTime);// 0x79c3b14
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x79c3a90
	bool IsEntirelyUnderWater();// 0x79c3a54
	bool IsContactedWater();// 0x79c3a30
	void EndableUprightConstraint(bool bEnable);// 0x79c39ac
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x79c38d0

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]// 0x75a81dcf80
	Vector GlobalWaveDirection;//[Offset: 0x514, Size: 0xc]// 0x75a81dd000
	float GlobalWaveSpeed;//[Offset: 0x520, Size: 0x4]// 0x75a82163a0
	float GlobalWaveAmplitude;//[Offset: 0x524, Size: 0x4]// 0x75a8216410
	float DistanceCheckAbove;//[Offset: 0x528, Size: 0x4]// 0x75a8216480
	float DistanceCheckBelow;//[Offset: 0x52c, Size: 0x4]// 0x75a82164f0
	WaveParameter[] WaveClusters;//[Offset: 0x530, Size: 0x10]// 0x75a81dd100
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x540, Size: 0x10]// 0x75a81dd200
	float NetWorkTimeOffset;//[Offset: 0x550, Size: 0x4]// 0x75a8216560
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]// 0x75a81dd280
	float ModulationStartHeight;//[Offset: 0x558, Size: 0x4]// 0x75a82165d0
	float ModulationMaxHeight;//[Offset: 0x55c, Size: 0x4]// 0x75a8216640
	float ModulationPower;//[Offset: 0x560, Size: 0x4]// 0x75a82166b0
	Landscape* Landscape;//[Offset: 0x568, Size: 0x8]// 0x75a81dd300
	Texture2D* HeightmapTexture;//[Offset: 0x570, Size: 0x8]// 0x75a81dd380
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]// 0x75a81dd400
	float CorrectTimeInterval;//[Offset: 0x5a4, Size: 0x4]// 0x75a8216720
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x5ac, Size: 0x4]// 0x75a8216790
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x5b0, Size: 0x4]// 0x75a8216800
	delegate OnReplicatedWorldRealTimeSeconds;//[Offset: 0x5b8, Size: 0x10]// 0x75a81dd480
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]// 0x75a81dd500
	Box[] WaterBoxes;//[Offset: 0x5d0, Size: 0x10]// 0x75a81dd600
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]// 0x75a81dd680
	Transform[] WaterTransforms;//[Offset: 0x5e8, Size: 0x10]// 0x75a81dd780
	Vector[] WaterBoxExtends;//[Offset: 0x5f8, Size: 0x10]// 0x75a81dd880
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x79c50ac
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x79c5030
	LinearColor GetHeightmapPixel(float U, float V);// 0x79c4f68

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 0x4]// 0x75c994e8e0
	float Length;//[Offset: 0x4, Size: 0x4]// 0x75c994e950
	float Amplitude;//[Offset: 0x8, Size: 0x4]// 0x75c994e9c0
	float Steepness;//[Offset: 0xc, Size: 0x4]// 0x75c994ea30
	float TimeScale;//[Offset: 0x10, Size: 0x4]// 0x75c994eaa0

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 0x14]// 0x75c9945700
	WaveParameter Wave02;//[Offset: 0x14, Size: 0x14]// 0x75c9945780
	WaveParameter Wave03;//[Offset: 0x28, Size: 0x14]// 0x75c9945800
	WaveParameter Wave04;//[Offset: 0x3c, Size: 0x14]// 0x75c9945880
	WaveParameter Wave05;//[Offset: 0x50, Size: 0x14]// 0x75c9945900
	WaveParameter Wave06;//[Offset: 0x64, Size: 0x14]// 0x75c9945980
	WaveParameter Wave07;//[Offset: 0x78, Size: 0x14]// 0x75c9945a00
	WaveParameter Wave08;//[Offset: 0x8c, Size: 0x14]// 0x75c9945a80

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x510, Size: 0x8]// 0x75a7974000
	Guid LandscapeGuid;//[Offset: 0x518, Size: 0x10]// 0x75a7974080
	Guid BoundingGuid;//[Offset: 0x528, Size: 0x10]// 0x75a7974100
	IntPoint LandscapeSectionOffset;//[Offset: 0x538, Size: 0x8]// 0x75a7974180
	int MaxLODLevel;//[Offset: 0x540, Size: 0x4]// 0x75a79a12c0
	float LODDistanceFactor;//[Offset: 0x544, Size: 0x4]// 0x75a79a1330
	byte LODFalloff;//[Offset: 0x548, Size: 0x1]// 0x75a7974200
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]// 0x75a7974280
	float LOD0DistributionSetting;//[Offset: 0x54c, Size: 0x4]// 0x75a79a13a0
	float LODDistributionSetting;//[Offset: 0x550, Size: 0x4]// 0x75a79a1410
	byte NearMaxLOD_Baked;//[Offset: 0x554, Size: 0x1]// 0x75a7974300
	float NearFactor_Baked;//[Offset: 0x558, Size: 0x4]// 0x75a79a1480
	float NearExtent_Baked;//[Offset: 0x55c, Size: 0x4]// 0x75a79a14f0
	float FarFactor_Baked;//[Offset: 0x560, Size: 0x4]// 0x75a79a1560
	float LandscapeRoughness;//[Offset: 0x564, Size: 0x4]// 0x75a79a15d0
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]// 0x75a7974380
	float[] ImproveLODValues;//[Offset: 0x570, Size: 0x10]// 0x75a7974400
	byte NearMaxLOD;//[Offset: 0x580, Size: 0x1]// 0x75a7974480
	float NearFactor;//[Offset: 0x584, Size: 0x4]// 0x75a79a16b0
	float NearExtent;//[Offset: 0x588, Size: 0x4]// 0x75a79a1720
	float FarFactor;//[Offset: 0x58c, Size: 0x4]// 0x75a79a1790
	int StaticLightingLOD;//[Offset: 0x590, Size: 0x4]// 0x75a79a1800
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x598, Size: 0x8]// 0x75a7974500
	float StreamingDistanceMultiplier;//[Offset: 0x5a0, Size: 0x4]// 0x75a79a1870
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a4, Size: 0x1]// 0x75a7974580
	MaterialInterface* LandscapeMaterial;//[Offset: 0x5a8, Size: 0x8]// 0x75a7974600
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x5b0, Size: 0x8]// 0x75a7974680
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x5b8, Size: 0x50]// 0x75a795cf40
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 0x1]// 0x75a7974780
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x610, Size: 0x10]// 0x75a7974880
	float MinGrassWeightThreshold;//[Offset: 0x620, Size: 0x4]// 0x75a79a1950
	float NegativeZBoundsExtension;//[Offset: 0x624, Size: 0x4]// 0x75a79a19c0
	float PositiveZBoundsExtension;//[Offset: 0x628, Size: 0x4]// 0x75a79a1a30
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x630, Size: 0x8]// 0x75a7974900
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x638, Size: 0x8]// 0x75a7974980
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x640, Size: 0x8]// 0x75a7974a00
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x648, Size: 0x10]// 0x75a7974b00
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x658, Size: 0x8]// 0x75a7974b80
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x660, Size: 0x10]// 0x75a7974c80
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x670, Size: 0x10]// 0x75a7974d80
	<HierarchicalInstancedStaticMeshComponent*> StillUsed;//[Offset: 0x6e0, Size: 0x50]// 0x75d119a500
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]// 0x75a7974e80
	float StaticLightingResolution;//[Offset: 0x754, Size: 0x4]// 0x75a79a1aa0
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x758, Size: 0x1]// 0x75a7974f00
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x758, Size: 0x1]// 0x75a7974f80
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x758, Size: 0x1]// 0x75a7975000
	LightingChannels LightingChannels;//[Offset: 0x759, Size: 0x1]// 0x75a7975080
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75a, Size: 0x1]// 0x75a7975100
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75a, Size: 0x1]// 0x75a7975180
	int CustomDepthStencilValue;//[Offset: 0x75c, Size: 0x4]// 0x75a79a1b10
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x760, Size: 0x18]// 0x75a7975200
	int CollisionMipLevel;//[Offset: 0x778, Size: 0x4]// 0x75a79a1b80
	int SimpleCollisionMipLevel;//[Offset: 0x77c, Size: 0x4]// 0x75a79a1bf0
	float CollisionThickness;//[Offset: 0x780, Size: 0x4]// 0x75a79a1c60
	BodyInstance BodyInstance;//[Offset: 0x788, Size: 0x1a0]// 0x75a7975280
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]// 0x75a7975300
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x928, Size: 0x1]// 0x75a7975380
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x928, Size: 0x1]// 0x75a7975400
	int ComponentSizeQuads;//[Offset: 0x92c, Size: 0x4]// 0x75a79a1cd0
	int SubsectionSizeQuads;//[Offset: 0x930, Size: 0x4]// 0x75a79a1d40
	int NumSubsections;//[Offset: 0x934, Size: 0x4]// 0x75a79a1db0
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x938, Size: 0x1]// 0x75a7975480
	enum NavigationGeometryGatheringMode;//[Offset: 0x939, Size: 0x1]// 0x75a7975580
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93a, Size: 0x1]// 0x75a7975600
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x5e44ee4
	void ChangeLODDistributionSettingConsoleVariable();// 0x5e44ec8
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x5e44e44
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x5e44e28
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x5e44d9c

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x6a8, Size: 0x10]// 0x75a7970000
	LandscapeSplineSegment*[] Segments;//[Offset: 0x6b8, Size: 0x10]// 0x75a7970100
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x6c8, Size: 0x10]// 0x75a7970200

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]// 0x75a7970280
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]// 0x75a7970300
	float Width;//[Offset: 0x40, Size: 0x4]// 0x75a799fa40
	float SideFalloff;//[Offset: 0x44, Size: 0x4]// 0x75a799fab0
	float EndFalloff;//[Offset: 0x48, Size: 0x4]// 0x75a799fb20
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 0x10]// 0x75a7970400
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 0x10]// 0x75a7970500
	Box Bounds;//[Offset: 0x70, Size: 0x1c]// 0x75a7970580
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 0x8]// 0x75a7970600

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]// 0x760d1f1280
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]// 0x760d1f1300

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18]// 0x75a796fc00
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18]// 0x75a796fc80
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]// 0x75a796fd80
	Box Bounds;//[Offset: 0x80, Size: 0x1c]// 0x75a796fe00
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10]// 0x75a796ff00

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]// 0x760d1f0d00
	float TangentLen;//[Offset: 0x8, Size: 0x4]// 0x760d200ab0
	FName SocketName;//[Offset: 0x10, Size: 0x8]// 0x760d200b20

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc]// 0x760d1f0a80
	Vector Left;//[Offset: 0xc, Size: 0xc]// 0x760d1f0b00
	Vector Right;//[Offset: 0x18, Size: 0xc]// 0x760d1f0b80
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc]// 0x760d1f0c00
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc]// 0x760d1f0c80
	float StartEndFalloff;//[Offset: 0x3c, Size: 0x4]// 0x760d200a40

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x828, Size: 0x58]// 0x75a827a380
	Vector SplineUpDir;//[Offset: 0x880, Size: 0xc]// 0x75a827a400
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 0x1]// 0x75a827a480
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88c, Size: 0x1]// 0x75a827a500
	byte ForwardAxis;//[Offset: 0x88d, Size: 0x1]// 0x75a827a580
	float SplineBoundaryMin;//[Offset: 0x890, Size: 0x4]// 0x75a8262500
	float SplineBoundaryMax;//[Offset: 0x894, Size: 0x4]// 0x75a8262570
	BodySetup* BodySetup;//[Offset: 0x898, Size: 0x8]// 0x75a827a600
	Guid CachedMeshBodySetupGuid;//[Offset: 0x8a0, Size: 0x10]// 0x75a827a680
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b0, Size: 0x1]// 0x75a827a700
	void UpdateMesh();// 0x6f2c288
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x6f2c1c0
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x6f2c104
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x6f2c044
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x6f2bf7c
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x6f2bec0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x6f2bd1c
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x6f2bc3c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x6f2bb7c
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x6f2bab4
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x6f2b9f8
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x6f2b938
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x6f2b870
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x6f2b7b4
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x6f2b6f4
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x6f2b634
	Vector GetStartTangent();// 0x6f2b5fc
	Vector2D GetStartScale();// 0x6f2b5c8
	float GetStartRoll();// 0x6f2b594
	Vector GetStartPosition();// 0x6f2b55c
	Vector2D GetStartOffset();// 0x6f2b528
	Vector GetSplineUpDir();// 0x6f2b4f0
	byte GetForwardAxis();// 0x6f2b4bc
	Vector GetEndTangent();// 0x6f2b484
	Vector2D GetEndScale();// 0x6f2b450
	float GetEndRoll();// 0x6f2b41c
	Vector GetEndPosition();// 0x6f2b3e4
	Vector2D GetEndOffset();// 0x6f2b3b0
	float GetBoundaryMin();// 0x6f2b37c
	float GetBoundaryMax();// 0x6f2b348

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]// 0x75c997b580
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]// 0x75c997b600
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]// 0x75c997b680
	float StartRoll;//[Offset: 0x20, Size: 0x4]// 0x760d288180
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]// 0x75c997b700
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]// 0x75c997b780
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]// 0x75c997b800
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]// 0x75c997b880
	float EndRoll;//[Offset: 0x4c, Size: 0x4]// 0x760d2881f0
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]// 0x75c997b900

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]// 0x75a7972300
	StaticMesh* GrassMesh;//[Offset: 0x38, Size: 0x8]// 0x75a7972380
	float GrassDensity;//[Offset: 0x40, Size: 0x4]// 0x75a79a0300
	float PlacementJitter;//[Offset: 0x44, Size: 0x4]// 0x75a79a0370
	int StartCullDistance;//[Offset: 0x48, Size: 0x4]// 0x75a79a03e0
	int EndCullDistance;//[Offset: 0x4c, Size: 0x4]// 0x75a79a0450
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]// 0x75a7972400
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]// 0x75a7972480

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]// 0x760d1f1a80
	float GrassDensity;//[Offset: 0x8, Size: 0x4]// 0x760d200dc0
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x760d1f1b00
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]// 0x760d200e30
	int StartCullDistance;//[Offset: 0x14, Size: 0x4]// 0x760d200ea0
	int EndCullDistance;//[Offset: 0x18, Size: 0x4]// 0x760d200f10
	int MinLOD;//[Offset: 0x1c, Size: 0x4]// 0x760d200f80
	enum Scaling;//[Offset: 0x20, Size: 0x1]// 0x760d1f1c00
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]// 0x760d1f1c80
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]// 0x760d1f1d00
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]// 0x760d1f1d80
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]// 0x760d1f1e00
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]// 0x760d1f1e80
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]// 0x760d1f1f00
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]// 0x760d1f1f80
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x760d1f2000

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]// 0x7611cded60
	float Max;//[Offset: 0x4, Size: 0x4]// 0x7611cdecf0

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x6a4, Size: 0x4]// 0x75a79a07d0
	int SectionBaseY;//[Offset: 0x6a8, Size: 0x4]// 0x75a79a0840
	int ComponentSizeQuads;//[Offset: 0x6ac, Size: 0x4]// 0x75a79a08b0
	int SubsectionSizeQuads;//[Offset: 0x6b0, Size: 0x4]// 0x75a79a0920
	int NumSubsections;//[Offset: 0x6b4, Size: 0x4]// 0x75a79a0990
	MaterialInterface* OverrideMaterial;//[Offset: 0x6b8, Size: 0x8]// 0x75a7972a80
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x6c0, Size: 0x8]// 0x75a7972b00
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x6c8, Size: 0x50]// 0x75a795cb80
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x718, Size: 0x20]// 0x75a7972c00
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x738, Size: 0x1]// 0x75a7972c80
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x740, Size: 0x10]// 0x75a7972d80
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x750, Size: 0x10]// 0x75a7972e80
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x760, Size: 0x50]// 0x75a795cc40
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x7b0, Size: 0x10]// 0x75a7973000
	Texture2D*[] WeightmapTextures;//[Offset: 0x7c0, Size: 0x10]// 0x75a7973100
	int VisibilityLayerChannel;//[Offset: 0x7d0, Size: 0x4]// 0x75a79a0ae0
	Texture2D* XYOffsetmapTexture;//[Offset: 0x7d8, Size: 0x8]// 0x75a7973180
	Vector4 WeightmapScaleBias;//[Offset: 0x7e0, Size: 0x10]// 0x75a7973200
	float WeightmapSubsectionOffset;//[Offset: 0x7f0, Size: 0x4]// 0x75a79a0b50
	Vector4 HeightmapScaleBias;//[Offset: 0x800, Size: 0x10]// 0x75a7973280
	Texture2D* HeightmapTexture;//[Offset: 0x810, Size: 0x8]// 0x75a7973300
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x818, Size: 0x50]// 0x75a795cd00
	FString VisibleVisibilityLayer;//[Offset: 0x868, Size: 0x10]// 0x75a79a0c30
	Box CachedLocalBox;//[Offset: 0x878, Size: 0x1c]// 0x75a7973400
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x894, Size: 0x1c]// 0x75a7973480
	Guid MapBuildDataId;//[Offset: 0x8b0, Size: 0x10]// 0x75a7973500
	Guid[] IrrelevantLights;//[Offset: 0x8c0, Size: 0x10]// 0x75a7973600
	int CollisionMipLevel;//[Offset: 0x8d0, Size: 0x4]// 0x75a79a0ca0
	int SimpleCollisionMipLevel;//[Offset: 0x8d4, Size: 0x4]// 0x75a79a0d10
	float NegativeZBoundsExtension;//[Offset: 0x8d8, Size: 0x4]// 0x75a79a0d80
	float PositiveZBoundsExtension;//[Offset: 0x8dc, Size: 0x4]// 0x75a79a0df0
	float StaticLightingResolution;//[Offset: 0x8e0, Size: 0x4]// 0x75a79a0e60
	int ForcedLOD;//[Offset: 0x8e4, Size: 0x4]// 0x75a79a0ed0
	int LODBias;//[Offset: 0x8e8, Size: 0x4]// 0x75a79a0f40
	int MobileVertexHoleMaxLOD;//[Offset: 0x8ec, Size: 0x4]// 0x75a79a0fb0
	float[] LODDeltaVertex;//[Offset: 0x900, Size: 0x10]// 0x75a7973680
	float MaxDeltaVertex;//[Offset: 0x910, Size: 0x4]// 0x75a79a1090
	Guid stateID;//[Offset: 0x914, Size: 0x10]// 0x75a7973700
	Guid BakedTextureMaterialGuid;//[Offset: 0x924, Size: 0x10]// 0x75a7973780
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x938, Size: 0x8]// 0x75a7973800
	StaticMesh* OccluderMesh;//[Offset: 0x940, Size: 0x8]// 0x75a7973880
	byte MobileBlendableLayerMask;//[Offset: 0x948, Size: 0x1]// 0x75a7973900
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x950, Size: 0x8]// 0x75a7973980
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x958, Size: 0x50]// 0x75a795cdc0
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x9a8, Size: 0x10]// 0x75a7973b00
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x9b8, Size: 0x8]// 0x75a7973b80
	uint16[] CachedHeightData;//[Offset: 0x9c0, Size: 0x10]// 0x75a7973c00
	bool[] CachedHaltonBaseIndex;//[Offset: 0x9f0, Size: 0x10]// 0x75a7973d00
	int[] CachedAddHaltonBaseIndexList;//[Offset: 0xa00, Size: 0x10]// 0x75a7973d80
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 0x1]// 0x75a7973e00
	FName UsedOtherMaterialName;//[Offset: 0xa88, Size: 0x8]// 0x75a79a1250

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 0x10]// 0x760d1f3280
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0x10, Size: 0x10]// 0x760d1f3380

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]// 0x760d1f3080
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]// 0x760d1f3100
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]// 0x760d1f3180

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]// 0x75a799fe30
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]// 0x75a7971780
	float Hardness;//[Offset: 0x38, Size: 0x4]// 0x75a799fea0
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]// 0x75a7971800

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 0x10]// 0x760d1f3000

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x6a8, Size: 0x10]// 0x75a7971d00
	int SectionBaseX;//[Offset: 0x6b8, Size: 0x4]// 0x75a79a0060
	int SectionBaseY;//[Offset: 0x6bc, Size: 0x4]// 0x75a79a00d0
	int CollisionSizeQuads;//[Offset: 0x6c0, Size: 0x4]// 0x75a79a0140
	float CollisionScale;//[Offset: 0x6c4, Size: 0x4]// 0x75a79a01b0
	int SimpleCollisionSizeQuads;//[Offset: 0x6c8, Size: 0x4]// 0x75a79a0220
	byte[] CollisionQuadFlags;//[Offset: 0x6d0, Size: 0x10]// 0x75a7971e00
	Guid HeightfieldGuid;//[Offset: 0x6e0, Size: 0x10]// 0x75a7971e80
	Box CachedLocalBox;//[Offset: 0x6f0, Size: 0x1c]// 0x75a7971f00
	LandscapeComponent* RenderComponent;//[Offset: 0x70c, Size: 0x1c]// 0x75a7971f80
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x7b0, Size: 0x10]// 0x75a7972080
	FString[] RCRLandscapeMapList;//[Offset: 0x800, Size: 0x10]// 0x75a7972100
	SoftClassPath RCRCommunicatorClassName;//[Offset: 0x810, Size: 0x18]// 0x75a7972180
	RCRCommunicator* RCRCommunicator;//[Offset: 0x828, Size: 0x8]// 0x75a7972200

--------------------------------
Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x30, Size: 0x4]// 0x75a836edc0
	byte[] LandscapeAOPlatformData;//[Offset: 0x38, Size: 0x10]// 0x75a837ee00

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0xa40, Size: 0x10]// 0x75a8638300
	int NumBuiltInstances;//[Offset: 0xa50, Size: 0x4]// 0x75bcaf77d0
	Box BuiltInstanceBounds;//[Offset: 0xa58, Size: 0x1c]// 0x75a8638380
	Box UnbuiltInstanceBounds;//[Offset: 0xa74, Size: 0x1c]// 0x75a8638400
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0xa90, Size: 0x10]// 0x75a8638500
	int[] UnbuiltInstanceIndexList;//[Offset: 0xaa0, Size: 0x10]// 0x75a8638580
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xab0, Size: 0x1]// 0x75a8638600
	int OcclusionLayerNumNodes;//[Offset: 0xad8, Size: 0x4]// 0x75bcaf78b0
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0xadc, Size: 0x1c]// 0x75a8638680
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafd, Size: 0x1]// 0x75a8638700
	int MinInstancesToSplitNode;//[Offset: 0xb00, Size: 0x4]// 0x75bcaf7920
	int OptimiMinInstancesToSplitNode;//[Offset: 0xb04, Size: 0x4]// 0x75bcaf7990
	bool IsOpenTreeOptimi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 0x1]// 0x75a8638780
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x6e10780

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x6a8, Size: 0x60]// 0x75a8812600
	InterpCurveVector SplineInfo;//[Offset: 0x708, Size: 0x18]// 0x75a8812680
	InterpCurveQuat SplineRotInfo;//[Offset: 0x720, Size: 0x18]// 0x75a8812700
	InterpCurveVector SplineScaleInfo;//[Offset: 0x738, Size: 0x18]// 0x75a8812780
	InterpCurveFloat SplineReparamTable;//[Offset: 0x750, Size: 0x18]// 0x75a8812800
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]// 0x75a8812880
	int ReparamStepsPerSegment;//[Offset: 0x76c, Size: 0x4]// 0x75a83ef3e0
	float Duration;//[Offset: 0x770, Size: 0x4]// 0x75a83ef450
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]// 0x75a8812900
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 0x1]// 0x75a8812980
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x776, Size: 0x1]// 0x75a8812a00
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x777, Size: 0x1]// 0x75a8812a80
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1]// 0x75a8812b00
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 0x1]// 0x75a8812b80
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77a, Size: 0x1]// 0x75a8812c00
	float LoopPosition;//[Offset: 0x77c, Size: 0x4]// 0x75a83ef4c0
	Vector DefaultUpVector;//[Offset: 0x780, Size: 0xc]// 0x75a8812c80
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 0x1]// 0x75a8812d00
	void UpdateSpline();// 0x6f26364
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x6f26290
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x6f26138
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6f260b0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6f25f04
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6f25dac
	void SetSplineWorldPoints(out const Vector[] Points);// 0x6f25d10
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x6f25c14
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x6f25af0
	void SetSplineLocalPoints(out const Vector[] Points);// 0x6f25a54
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6f259cc
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x6f25874
	void SetDrawDebug(bool bShow);// 0x6f257f0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x6f25718
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x6f2560c
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x6f2553c
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x6f2547c
	bool IsClosedLoop();// 0x6f25444
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x6f253b0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x6f252d8
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x6f25244
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x6f2516c
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x6f250d8
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x6f25044
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x6f24f6c
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x6f24ed8
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6f24dc8
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f24cfc
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6f24c30
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x6f24ac8
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x6f249a4
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x6f24880
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6f24770
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f246a4
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6f245d8
	byte GetSplinePointType(int PointIndex);// 0x6f2454c
	float GetSplineLength();// 0x6f24518
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x6f24444
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x6f243b4
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x6f24324
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6f24214
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f24148
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6f2407c
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6f23f70
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f23ea8
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6f23de0
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6f23cd0
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f23c04
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6f23b38
	int GetNumberOfSplinePoints();// 0x6f23b04
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6f239f4
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f23928
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6f2385c
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x6f236f4
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x6f235c8
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f234fc
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x6f23470
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x6f233e4
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6f232d4
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f23208
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6f2313c
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x6f230ac
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6f22fe0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6f22efc
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x6f22dc0
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6f22cdc
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x6f22c3c
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6f22b58
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6f22a78
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6f22994
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6f228b0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x6f22814
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6f22730
	void EditorSnapToGround();// 0x6f2271c
	void EditorNormalizeSplineTangent();// 0x6f22708
	void ClearSplinePoints(bool bUpdateSpline);// 0x6f22684
	void AddSplineWorldPoint(out const Vector Position);// 0x6f225f0
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x6f22498
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x6f2237c
	void AddSplineLocalPoint(out const Vector Position);// 0x6f222e8
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x6f22200
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x6f22108

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]// 0x76121d34a0
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]// 0x76121d3420
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]// 0x76121d33a0
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]// 0x76121d3320

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]// 0x7611cdcea0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611cdce20
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]// 0x7611cdcdb0

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]// 0x7611cdcca0
	Quat OutVal;//[Offset: 0x10, Size: 0x10]// 0x7611cdcc20
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]// 0x7611cdcba0
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]// 0x7611cdcb20
	byte InterpMode;//[Offset: 0x40, Size: 0x1]// 0x7611cdcaa0

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]// 0x7611cdbd40
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7611cdbcc0
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]// 0x7611cdbc50

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]// 0x7611cdbb40
	float OutVal;//[Offset: 0x4, Size: 0x4]// 0x7611cdbad0
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]// 0x7611cdba60
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]// 0x7611cdb9f0
	byte InterpMode;//[Offset: 0x10, Size: 0x1]// 0x7611cdb8b0

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]// 0x760d288260
	Vector Position;//[Offset: 0x4, Size: 0xc]// 0x75c997b980
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]// 0x75c997ba00
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]// 0x75c997ba80
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]// 0x75c997bb00
	Vector Scale;//[Offset: 0x34, Size: 0xc]// 0x75c997bb80
	byte Type;//[Offset: 0x40, Size: 0x1]// 0x75c997bc00

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 0x8]// 0x75c994eb10
	float Density;//[Offset: 0x8, Size: 0x4]// 0x75c994eb80
	float TestRadius;//[Offset: 0xc, Size: 0x4]// 0x75c994ebf0

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x6d0, Size: 0x4]// 0x75a8214c70
	Vector Direction;//[Offset: 0x6d4, Size: 0xc]// 0x75a81dc500
	float SpeedValue;//[Offset: 0x6e0, Size: 0x4]// 0x75a8214ce0
	float WaveForceMultiplier;//[Offset: 0x6e4, Size: 0x4]// 0x75a8214d50
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x6e8, Size: 0x10]// 0x75a81dc600
	float TimeScaleOffset;//[Offset: 0x6f8, Size: 0x4]// 0x75a8214dc0
	float Offset;//[Offset: 0x6fc, Size: 0x4]// 0x75a8214e30
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]// 0x75a81dc680
	float SpeedAttenuationFromSpline;//[Offset: 0x704, Size: 0x4]// 0x75a8214ea0
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]// 0x75a81dc700
	float ZOffset;//[Offset: 0x70c, Size: 0x4]// 0x75a8214f10
	float CellSizeX;//[Offset: 0x710, Size: 0x4]// 0x75a8214f80
	float CellSizeY;//[Offset: 0x714, Size: 0x4]// 0x75a8214ff0
	<float,WaterBoxCell> Cells;//[Offset: 0x718, Size: 0x50]// 0x75a81ec480
	int KeyFactor;//[Offset: 0x768, Size: 0x4]// 0x75a82150d0

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 0x14]// 0x75c9945280
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 0x8]// 0x75c9945300
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 0x14]// 0x75c9945380
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 0x8]// 0x75c9945400
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 0x14]// 0x75c9945480
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 0x8]// 0x75c9945500

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 0x4]// 0x75c994e800
	float Offset;//[Offset: 0x4, Size: 0x4]// 0x75c994e870

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 0xc]// 0x75c9944f00
	float WaveZ;//[Offset: 0xc, Size: 0x4]// 0x75c994e2c0
	Vector PushForceDirection;//[Offset: 0x10, Size: 0xc]// 0x75c9944f80
	float Speed;//[Offset: 0x1c, Size: 0x4]// 0x75c994e330

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2b8, Size: 0x8]// 0x75a829ab00
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2c0, Size: 0x8]// 0x75a829ab80
	Actor* ConstraintActor2;//[Offset: 0x2c8, Size: 0x8]// 0x75a829ac00
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2d0, Size: 0x8]// 0x75a829ac80
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2e8, Size: 0x8]// 0x75a829ad00
	delegate OnConstraintBroken;//[Offset: 0x2f0, Size: 0x10]// 0x75a829ad80
	ConstraintInstance ConstraintInstance;//[Offset: 0x300, Size: 0x1b8]// 0x75a829ae00
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x6ed25d4
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x6ed2550
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x6ed2498
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x6ed23e0
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x6ed2328
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x6ed229c
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x6ed2188
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x6ed20fc
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x6ed1fe8
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x6ed1ef8
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x6ed1e30
	void SetDisableCollision(bool bDisableCollision);// 0x6ed1dac
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x6ed1ce0
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x6ed1bb8
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x6ed1ad8
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x6ed19b0
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x6ed1924
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x6ed1854
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x6ed17d0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x6ed1700
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x6ed1648
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x6ed1590
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x6ed14d8
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x6ed1450
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x6ed1380
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x6ed1290
	void SetAngularDriveMode(byte DriveMode);// 0x6ed1214
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x6ed114c
	bool IsBroken();// 0x6ed1114
	float GetCurrentTwist();// 0x6ed10e0
	float GetCurrentSwing2();// 0x6ed10ac
	float GetCurrentSwing1();// 0x6ed1078
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x6ed0f8c
	void BreakConstraint();// 0x6ed0f78

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8]// 0x75d0a86510

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x118, Size: 0x10]// 0x75a8820c00
	float MinCorrectionInterval;//[Offset: 0x128, Size: 0x4]// 0x760d14a4b0
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x12c, Size: 0x4]// 0x760d14a520
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x130, Size: 0x4]// 0x760d14a590
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x134, Size: 0x4]// 0x760d14a600
	float SendingToServerIntervalAtClient;//[Offset: 0x138, Size: 0x4]// 0x760d14a670
	float SendingReliableHitToServerInterval;//[Offset: 0x13c, Size: 0x4]// 0x760d14a6e0
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x140, Size: 0x4]// 0x760d14a750
	float StationaryCorrectIntervalAtClient;//[Offset: 0x144, Size: 0x4]// 0x760d14a7c0
	float SimulatedCorrectTimerIntervalAtClient;//[Offset: 0x148, Size: 0x4]// 0x760d14a830
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x14c, Size: 0x4]// 0x760d14a8a0
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x150, Size: 0x4]// 0x760d14a910
	float StationaryCorrectFloorOffset;//[Offset: 0x154, Size: 0x4]// 0x760d14a980
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x158, Size: 0x4]// 0x760d14a9f0
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x15c, Size: 0x4]// 0x760d14aa60
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x160, Size: 0x4]// 0x760d14aad0
	float IdleForceUpdateThreshold;//[Offset: 0x164, Size: 0x4]// 0x760d14ab40
	bool bEnableApplyMultiRigidBodys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]// 0x75a8820c80
	float IdleForceSyncInterval;//[Offset: 0x16c, Size: 0x4]// 0x760d14abb0
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x75a8820d00
	float StaticFixLocation;//[Offset: 0x174, Size: 0x4]// 0x760d14ac20
	float StaticFixAngel;//[Offset: 0x178, Size: 0x4]// 0x760d14ac90
	float StaticStopFixTorelence;//[Offset: 0x17c, Size: 0x4]// 0x760d14ad00
	float MaxCalculatedStartZVeolcity;//[Offset: 0x180, Size: 0x4]// 0x760d14ad70
	bool UseLegacySimulatedCorrectStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]// 0x75a8820d80
	float MaxSimulatedCorrectTimer;//[Offset: 0x188, Size: 0x4]// 0x760d14ade0
	int MaxSimulatedCorrectFailCount;//[Offset: 0x18c, Size: 0x4]// 0x760d14ae50
	float SimulatedCorrectZ;//[Offset: 0x190, Size: 0x4]// 0x760d14aec0
	bool SimulatedCorrectConsiderVehicleAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]// 0x75a8820e00
	bool bApplyReplicatedMovementSleepFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]// 0x75a8820e80
	bool bForceApplyReplicatedVelocityWhenZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 0x1]// 0x75a8820f00
	float ApplyReplicatedMovementSleepFlagMinElapseTime;//[Offset: 0x19c, Size: 0x4]// 0x760d14af30
	float ApplyReplicatedMovementSleepFlagMaxElapseTime;//[Offset: 0x1a0, Size: 0x4]// 0x760d14afa0
	bool bStaticFixVehicleRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]// 0x75a8820f80
	float StaticFixVehicleRollThreshold;//[Offset: 0x1a8, Size: 0x4]// 0x760d14b010
	float StaticFixVehicleRollVelocityThreshold;//[Offset: 0x1ac, Size: 0x4]// 0x760d14b080
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]// 0x75a8821000
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 0x1]// 0x75a8821080
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 0x1]// 0x75a8821100
	bool AutonomousPassWallCorrectWhileIsInServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]// 0x75a8821180
	float AutonomousPassWallCorrectWhileIsInServerAuthorizeInterval;//[Offset: 0x1b8, Size: 0x4]// 0x760d14b0f0
	bool SendServerMoveToClientUseAllServerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]// 0x75a8821200
	bool SendServerMoveToClientWithLinkMeshUseAllServerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]// 0x75a8821280
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x1c4, Size: 0x4]// 0x760d14b160
	float[] VariableSendClientVelocity;//[Offset: 0x1c8, Size: 0x10]// 0x75a8821300
	float[] VariableSendClientInterval;//[Offset: 0x1d8, Size: 0x10]// 0x75a8821380
	bool EnableVariableSendClientMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]// 0x75a8821400
	bool NeedSendGravityZAndDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]// 0x75a8821480
	bool CheckGravityAndDeltaValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 0x1]// 0x75a8821500
	float DefaultGravityZ;//[Offset: 0x1ec, Size: 0x4]// 0x760d14b2b0
	float DefaultGravityDelta;//[Offset: 0x1f0, Size: 0x4]// 0x760d14b320
	float ClientMinDeltaTime;//[Offset: 0x1f4, Size: 0x4]// 0x760d14b390
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x380, Size: 0x58]// 0x75a8821580
	bool OpenTLogUpSpeedGreatChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]// 0x75a8821600
	float UpSpeedGreatChangeZThreshold;//[Offset: 0x408, Size: 0x4]// 0x760d14b400
	bool OpenTLogVelocityException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]// 0x75a8821680
	float VelocitySizeCompareThreshold;//[Offset: 0x410, Size: 0x4]// 0x760d14b470
	float VelocityDirectionCompareThreshold;//[Offset: 0x414, Size: 0x4]// 0x760d14b4e0
	bool OpenTLogTickSimulationProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]// 0x75a8821700
	float TLogLocationDiffSqrThreshold;//[Offset: 0x41c, Size: 0x4]// 0x760d14b550
	int TLogCountTickSimulationProxy;//[Offset: 0x420, Size: 0x4]// 0x760d14b5c0
	int SimulatedCorrectCountThreshold;//[Offset: 0x424, Size: 0x4]// 0x760d14b630
	bool SkipFindFloorInCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]// 0x75a8821780
	bool OpenTLogZVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 0x1]// 0x75a8821800
	float ZVelDiffThreshold;//[Offset: 0x430, Size: 0x4]// 0x760d14b6a0
	float VelDiffAngleThreshold;//[Offset: 0x434, Size: 0x4]// 0x760d14b710
	float VelSizeScaleThreshold;//[Offset: 0x438, Size: 0x4]// 0x760d14b780
	bool bSyncContraintBodyMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]// 0x75a8821880
	<int,RigidBodyState> ConstraintBody;//[Offset: 0x440, Size: 0x50]// 0x760d15b0c0
	bool VerifyClientTimeStamp(float TimeStamp);// 0x47e0ae4
	void SyncOtherRigidBodyVelocity(Vector DeltaLoc, Quat DeltaQuat);// 0x47e0a10
	void SendServerMoveToClientWithLinkMesh(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, const Vector_NetQuantize100 LinkMeshServerLocation, const Vector_NetQuantize100 LinkMeshServerLinearVelocity, const Vector_NetQuantizeNormal LinkMeshServerRotator, const Vector_NetQuantize100 LinkMeshServerAngularVelocity, bool bIsSnap);// 0x47e0748
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x47e0588
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, uint32 ClientFrame, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x47e0358
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, uint32 ClientFrame, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x47e0128
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, uint32 ClientFrame, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x47dfe80
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, uint32 ClientFrame, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x47dfc30
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, uint32 ClientFrame, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x47df9d8
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, uint32 ClientFrame, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x47df6c8
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, uint32 ClientFrame, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x47df3b8
	void SendClientGravityZAndDeltaTime(float GravityZ, float DeltaTime);// 0x47df2d0
	void ResetReceiveClientMoveCount();// 0x47df2bc
	void OnRep_ConstraintBody();// 0x47df2a8
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x47df150
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x47deff8
	void OnDriverRide();// 0x47defe4
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x47deee8
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x47ded74
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x47dec78
	void GMTestProcessVehicleUpSpeedGreatChangeTLog();// 0x47dec64
	STExtraBaseCharacter*[] GetRiders();// 0x47debe4
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x47deb48
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation, out HitResult OutHit);// 0x47de9e4
	void ForceSendClientMoveToServer();// 0x47de9d0
	void DrawDebugAllSimulateRigidBody();// 0x47de9bc
	void DragUnderGround();// 0x47de9a8
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x47de89c
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x47de764
	bool CheckAndLoadLandscape(float DeltaTime);// 0x47de6d4
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x47de630
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x47de4d4

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleStatComponent.VehicleComponent.ActorComponent.Object
	int RollCount;//[Offset: 0x138, Size: 0x4]// 0x760d14c7b0
	float RollDegrees;//[Offset: 0x13c, Size: 0x4]// 0x760d14c820
	float InAirTime;//[Offset: 0x140, Size: 0x4]// 0x760d14c890
	float AirControlFTime;//[Offset: 0x144, Size: 0x4]// 0x760d14c900
	float AirControlBTime;//[Offset: 0x148, Size: 0x4]// 0x760d14c970
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]// 0x75a8824800
	float ReachGroundTime;//[Offset: 0x150, Size: 0x4]// 0x760d14c9e0
	void StopRecord();// 0x47dd7a8
	void ClearStats();// 0x47dd794
	void BeginRecord();// 0x47dd780

--------------------------------
Class: VehBackpackItem
	int ItemID;//[Offset: 0x0, Size: 0x4]// 0x7612202050
	int ItemCount;//[Offset: 0x4, Size: 0x4]// 0x7612201fe0

--------------------------------
Class: CarMusicConfigBlueprint
	SoftObjectPath MusicAsset;//[Offset: 0x0, Size: 0x18]// 0x7612201ec0
	int MusicProbability;//[Offset: 0x18, Size: 0x4]// 0x7612201e50
	FString MusicActivatedTime;//[Offset: 0x20, Size: 0x10]// 0x7612201de0
	FString MusicDeactivatedTime;//[Offset: 0x30, Size: 0x10]// 0x7612201d70

--------------------------------
Class: CarMusicConfig
	FString MusicAssetPath;//[Offset: 0x0, Size: 0x10]// 0x7612201c60
	int MusicProbability;//[Offset: 0x10, Size: 0x4]// 0x7612201bf0
	DateTime MusicActivatedTime;//[Offset: 0x18, Size: 0x8]// 0x7612201b70
	DateTime MusicDeactivatedTime;//[Offset: 0x20, Size: 0x8]// 0x7612201af0

--------------------------------
Class: CarMusicWrapper
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 0x18]// 0x76122019d0
	AkAudioEvent* Music;//[Offset: 0x18, Size: 0x8]// 0x7612201950

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 0x1]// 0x76122026c0
	byte ViewYaw;//[Offset: 0x1, Size: 0x1]// 0x7612202640
	byte ViewRoll;//[Offset: 0x2, Size: 0x1]// 0x76122025c0
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]// 0x7612202540

--------------------------------
Class: VehicleSpringArmComponent.STExtraVehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x470, Size: 0x4]// 0x760d14ca50
	float ForwardSpeedToRotSpeed;//[Offset: 0x474, Size: 0x4]// 0x760d14cac0
	float StayTimeBeforeReturning;//[Offset: 0x478, Size: 0x4]// 0x760d14cb30
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1]// 0x75a8824880
	bool bNeverAutoReturnSmartCameraConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 0x1]// 0x75a8824900
	float ArmOriginProbeSize;//[Offset: 0x480, Size: 0x4]// 0x760d14cba0
	SpringArmModifier* Modifier;//[Offset: 0x488, Size: 0x8]// 0x75a8824980
	class SpringArmModifier* ModifierTemplate;//[Offset: 0x490, Size: 0x8]// 0x75a8824a00
	Rotator RelativeToOwnerRotator;//[Offset: 0x498, Size: 0xc]// 0x75a8824a80
	Rotator SmartCamRotationExtra;//[Offset: 0x4a4, Size: 0xc]// 0x75a8824b00
	bool bOnlyUsePitchSmartCamRotationExtra;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]// 0x75a8824b80
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]// 0x75a8824c00
	float MinPitch;//[Offset: 0x4bc, Size: 0x4]// 0x760d14cc10
	float MaxPitch;//[Offset: 0x4c0, Size: 0x4]// 0x760d14cc80
	bool bFollowWhenFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]// 0x75a8824c80
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c5, Size: 0x1]// 0x75a8824d00
	float RevoerTimefromFreeTime;//[Offset: 0x4c8, Size: 0x4]// 0x760d14ccf0
	float nowLeaveRecoverTime;//[Offset: 0x4e4, Size: 0x4]// 0x760d14cd60
	Rotator FreeCamRotationExtra;//[Offset: 0x504, Size: 0xc]// 0x75a8824d80
	bool bFreeCamAutoReturnEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]// 0x75a8824e00
	float ResultMinPitch;//[Offset: 0x514, Size: 0x4]// 0x760d14cdd0
	float ResultMaxPitch;//[Offset: 0x518, Size: 0x4]// 0x760d14ce40
	Vector ArmOriginOffset;//[Offset: 0x51c, Size: 0xc]// 0x75a8824e80
	bool bMeshRootVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]// 0x75a8824f00
	float FreeCamRotationReturnRate;//[Offset: 0x52c, Size: 0x4]// 0x760d14ceb0
	bool bAlwaysUsePawnYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]// 0x75a8824f80
	bool bIgnoreInheritPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1]// 0x75a8825000
	bool UseSteerCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 0x1]// 0x75a8825080
	float SteerCameraStartYaw;//[Offset: 0x534, Size: 0x4]// 0x760d14cf20
	bool bIgnoreYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]// 0x75a8825100
	bool bIgnorePitchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 0x1]// 0x75a8825180
	float SteerCameraYaw;//[Offset: 0x53c, Size: 0x4]// 0x760d14cf90
	bool UpdateSkipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]// 0x75a8825200
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x47dd064
	void ResetSmartCamera();// 0x47dd050
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x47dcef8
	void DelayRotationLagEnabledEnd();// 0x47dcee4
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x47dcde0

--------------------------------
Class: STExtraVehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x368, Size: 0x4]// 0x75a85dc810
	float TargetOffsetInterpSpeed;//[Offset: 0x36c, Size: 0x4]// 0x75a85dc880
	float ArmLengthInterpSpeed;//[Offset: 0x370, Size: 0x4]// 0x75a85dc8f0
	bool UseRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]// 0x75a85eb380
	bool bRotationLimitIsRelativeOwnerComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 0x1]// 0x75a85eb400
	float YawMin;//[Offset: 0x378, Size: 0x4]// 0x75a85dc960
	float YawMax;//[Offset: 0x37c, Size: 0x4]// 0x75a85dc9d0
	float PitchMin;//[Offset: 0x380, Size: 0x4]// 0x75a85dca40
	float PitchMax;//[Offset: 0x384, Size: 0x4]// 0x75a85dcab0
	CameraOffsetData CurCameraData;//[Offset: 0x3d0, Size: 0x90]// 0x75a85eb480
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]// 0x75a85eb500
	PlayerController* CachedPC;//[Offset: 0x468, Size: 0x8]// 0x75a85eb580
	Rotator GetTargetRotation();// 0x46d77d4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x46d767c
	void ClearCameraData();// 0x46d7660

--------------------------------
Class: SpringArmModifier.Object
	SpringArmComponent* SpringArmComp;//[Offset: 0x28, Size: 0x8]// 0x75a86da980
	CameraComponent* CameraComp;//[Offset: 0x30, Size: 0x8]// 0x75a86daa00
	CameraOffsetData[] CurActiveDataList;//[Offset: 0x38, Size: 0x10]// 0x75a86dab00
	CameraOffsetData CurCameraData;//[Offset: 0x48, Size: 0x90]// 0x75a86dab80
	CameraOffsetData[] CameraOffsetDatas;//[Offset: 0xd8, Size: 0x10]// 0x75a86dac80
	float FieldOfViewInterpSpeed;//[Offset: 0xe8, Size: 0x4]// 0x75a86bef90
	float SocketOffsetInterpSpeed;//[Offset: 0xec, Size: 0x4]// 0x75a86bf000
	float TargetOffsetInterpSpeed;//[Offset: 0xf0, Size: 0x4]// 0x75a86bf070
	float ArmLengthInterpSpeed;//[Offset: 0xf4, Size: 0x4]// 0x75a86bf0e0
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0xf8, Size: 0x4]// 0x75a86bf150
	bool bDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]// 0x75a86dad00
	CameraOffsetData ResultCameraData;//[Offset: 0x100, Size: 0x90]// 0x75a86dad80
	float CurAdditiveOffsetFov;//[Offset: 0x190, Size: 0x4]// 0x75a86bf1c0
	void UpdateCustomCameraData(out const CameraOffsetData CustomCameraData);// 0x4545c18
	bool UpdateCurCameraDataBlueprint(float DeltaTime);// 0xffffff8a17adf2b0
	void UpdateCurCameraData(float DeltaTime);// 0x4545b94
	void SetTargetArmLengthByName(FName DataName, float TargetArmLength);// 0x4545adc
	void SetCustomCameraDataEnable(out const CameraOffsetData CustomCameraData, bool IsEnable);// 0x4545958
	void SetCameraDataEnableByName(out const FName DataName, bool IsEnable);// 0x454587c
	CameraOffsetData OverrideParam(out const CameraOffsetData From, out CameraOffsetData Target);// 0x4545630
	bool IsDoLocationLag(bool bDoLocationLag);// 0x4545590
	bool IsCameraDataEnableByName(FName DataName);// 0x4545500
	float GetRelativeLocationOffsetInterpSpeed();// 0x45454cc
	Vector GetCameraTargetOffset();// 0x454548c
	float GetCameraTargetArmLength();// 0x4545450
	Vector GetCameraSocketOffset();// 0x4545410
	Vector GetCameraRelativeLocationOffset();// 0x45453d0
	CameraOffsetData GetCameraData(out const FName DataName);// 0x454532c
	float GetCameraAdditiveOffsetFov();// 0x45452f0
	bool GetbDoCollisionTest();// 0x45452b8
	float GetArmLengthInterpSpeed();// 0x4545284
	HitResult DoSpringArmSweepSingleByChannel(out Vector ArmOrigin, out Vector DesiredLoc);// 0x4545150
	void ClearCameraData();// 0x4545134
	bool CalculateBlueprint();// 0xffffff8a17adf2b0
	void Calculate();// 0x4545118
	void AddAdditiveOffsetBP(CameraComponent* Camera, out const Transform Transform, float FOV);// 0x4544ffc

--------------------------------
Class: VehicleBoneShapePair
	FName BoneName;//[Offset: 0x0, Size: 0x8]// 0x76122016b0
	int ShapeIndex;//[Offset: 0xc, Size: 0x4]// 0x7612201640
	Vector ShapeOffset;//[Offset: 0x10, Size: 0xc]// 0x76122015c0

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: VehicleLagVerifyConfig
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x0, Size: 0x4]// 0x761222bd30

--------------------------------
Class: VehicleAIComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x118, Size: 0x10]// 0x75a8835400
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x128, Size: 0x10]// 0x75a8835480
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x160, Size: 0x8]// 0x75a8835500
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x168, Size: 0x1c]// 0x75a8835580
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]// 0x75a8835600
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x188, Size: 0x4]// 0x75a8952010
	float CheckAllowableDistanceInter;//[Offset: 0x18c, Size: 0x4]// 0x75a8952080
	Vector[] AutoDrive_RouteList;//[Offset: 0x190, Size: 0x10]// 0x75a8835700
	int[] AutoDrive_BestWaypoint;//[Offset: 0x1a0, Size: 0x10]// 0x75a8835780
	void StopAutoDriving();// 0x47be9cc
	bool StartAutoDriving();// 0x47be994
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x47be8dc
	void OnRep_AutoDriver_AINavStateData();// 0x47be8c8
	bool IsAutoDriving();// 0x47be890
	bool HasAutoDriveTarget();// 0x47be858
	STExtraVehicleAIController* GetVehicleAIController();// 0x47be824
	int GetCurrentTargetWaypointIdx();// 0x47be7f0
	Vector GetAutoDriveTarget();// 0x47be7b8
	void EndAutoDriving();// 0x47be7a4
	bool CanAutoDrivingNoDriver();// 0x47be76c
	bool CanAutoDriving();// 0x47be734
	bool AllowableDistanceAutoDriving();// 0x47be6fc

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x600, Size: 0x8]// 0x75a85de480
	FName AIPawnTag;//[Offset: 0x608, Size: 0x8]// 0x75a85de4f0
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x46c44fc

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a8, Size: 0x1]// 0x7612081530
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a8, Size: 0x1]// 0x76120814b0
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a8, Size: 0x1]// 0x7612081430
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a8, Size: 0x1]// 0x76120813b0
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a8, Size: 0x1]// 0x7612081330
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a8, Size: 0x1]// 0x76120812b0
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x5b0, Size: 0x8]// 0x7612081230
	BrainComponent* BrainComponent;//[Offset: 0x5b8, Size: 0x8]// 0x76120811b0
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x5c0, Size: 0x8]// 0x7612081130
	PawnActionsComponent* ActionsComp;//[Offset: 0x5c8, Size: 0x8]// 0x76120810b0
	BlackboardComponent* BlackBoard;//[Offset: 0x5d0, Size: 0x8]// 0x7612081030
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x5d8, Size: 0x8]// 0x7612080fb0
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x5e0, Size: 0x8]// 0x7612080f30
	delegate ReceiveMoveCompleted;//[Offset: 0x5e8, Size: 0x10]// 0x7612080eb0
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x62ab2d8
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x62ab25c
	void SetMoveBlockDetection(bool bEnable);// 0x62ab1d8
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x62ab140
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xffffff8a17adf2b0
	void OnUnpossess(Pawn* UnpossessedPawn);// 0xffffff8a17adf2b0
	void OnPossess(Pawn* PossessedPawn);// 0xffffff8a17adf2b0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x62ab080
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath, bool bUseNavLink);// 0x62aadb0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x62aab94
	void K2_SetFocus(Actor* NewFocus);// 0x62aab18
	void K2_SetFocalPoint(Vector FP);// 0x62aaa98
	void K2_ClearFocus();// 0x62aaa84
	bool HasPartialPath();// 0x62aaa4c
	PathFollowingComponent* GetPathFollowingComponent();// 0x62aaa30
	byte GetMoveStatus();// 0x62aa9fc
	Vector GetImmediateMoveDestination();// 0x62aa9c4
	Actor* GetFocusActor();// 0x62aa990
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x62aa8f8
	Vector GetFocalPoint();// 0x62aa8c0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x62aa8a4
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x62aa828

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x120, Size: 0x8]// 0x75a78e3a80
	AIController* AIOwner;//[Offset: 0x128, Size: 0x8]// 0x75a78e3b00
	void StopLogic(FString Reason);// 0x62baa88
	byte ResumeLogic(FString Reason);// 0x62ba9ec
	void RestartLogic();// 0x62ba9d0
	void PauseLogic(FString Reason);// 0x62ba944
	bool IsRunning();// 0x62ba904
	bool IsPaused();// 0x62ba8c4

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0x118, Size: 0x8]// 0x75a78e2980
	BlackboardData* BlackboardAsset;//[Offset: 0x120, Size: 0x8]// 0x75a78e2a00
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x148, Size: 0x10]// 0x75a78e2b00
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x62b8674
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x62b854c
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x62b8478
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x62b83a4
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x62b82d0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x62b81fc
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x62b8128
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x62b8054
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x62b7f80
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x62b7ea4
	bool IsVectorValueSet(out const FName KeyName);// 0x62b7e04
	Vector GetValueAsVector(out const FName KeyName);// 0x62b7d64
	FString GetValueAsString(out const FName KeyName);// 0x62b7c84
	Rotator GetValueAsRotator(out const FName KeyName);// 0x62b7be4
	Object* GetValueAsObject(out const FName KeyName);// 0x62b7b48
	FName GetValueAsName(out const FName KeyName);// 0x62b7aac
	int GetValueAsInt(out const FName KeyName);// 0x62b7a10
	float GetValueAsFloat(out const FName KeyName);// 0x62b7974
	byte GetValueAsEnum(out const FName KeyName);// 0x62b78d8
	class Object GetValueAsClass(out const FName KeyName);// 0x62b783c
	bool GetValueAsBool(out const FName KeyName);// 0x62b779c
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x62b76b0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x62b75bc
	void ClearValue(out const FName KeyName);// 0x62b7530

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]// 0x75a78e2780
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]// 0x75a78e2880
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]// 0x75a78e2900

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]// 0x75d1014af0
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]// 0x75d0ade300
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]// 0x75d0ade380

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0x118, Size: 0x10]// 0x75a78e7780
	class AISense* DominantSense;//[Offset: 0x128, Size: 0x8]// 0x75a78e7800
	AIController* AIOwner;//[Offset: 0x140, Size: 0x8]// 0x75a78e7880
	delegate OnPerceptionUpdated;//[Offset: 0x1c8, Size: 0x10]// 0x75a78e7900
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1d8, Size: 0x10]// 0x75a78e7980
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x62acfd8
	void RequestStimuliListenerUpdate();// 0x62acfc4
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x62acf0c
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x62ace78
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x62acda4
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x62accd0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x62acbfc
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x62acb04

--------------------------------
Class: AISenseConfig.Object
	Color debugColor;//[Offset: 0x28, Size: 0x4]// 0x75a78e5580
	float MaxAge;//[Offset: 0x2c, Size: 0x4]// 0x75a7936ff0
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]// 0x75a78e5600

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]// 0x75a7937680
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]// 0x75a78e6b80
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]// 0x75a78e6c00
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]// 0x75a78e6c80
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]// 0x75a78e6d00

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x80, Size: 0x10]// 0x75a78e6e00
	float PerceptionAgingRate;//[Offset: 0x90, Size: 0x4]// 0x75a79376f0
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x62adf90
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x62adf14
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x62ade20
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x62add68
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x62adbec

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]// 0x761207c800
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]// 0x761207c790
	float Strength;//[Offset: 0x8, Size: 0x4]// 0x761207c720
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]// 0x761207c6a0
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]// 0x761207c620
	FName Tag;//[Offset: 0x28, Size: 0x8]// 0x761207c5b0
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]// 0x761207c530

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]// 0x75d0adee00
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]// 0x75d0adef00
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]// 0x75d0adef80

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0x118, Size: 0x8]// 0x75a78d3680
	PawnActionStack[] ActionStacks;//[Offset: 0x120, Size: 0x10]// 0x75a78d3780
	PawnActionEvent[] ActionEvents;//[Offset: 0x130, Size: 0x10]// 0x75a78d3880
	PawnAction* CurrentAction;//[Offset: 0x140, Size: 0x8]// 0x75a78d3900
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x62d4d8c
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x62d4c90
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x62d4c04
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x62d4b78

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]// 0x75d0adc980

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]// 0x75a78d4b80
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]// 0x75a78d4c00
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]// 0x75a78d4c80
	Object* Instigator;//[Offset: 0x40, Size: 0x8]// 0x75a78d4d00
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]// 0x75a78d4d80
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]// 0x75a78d4e00
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]// 0x75a78d4e80
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]// 0x75a78d4f00
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]// 0x75a78d4f80
	byte GetActionPriority();// 0x62d3bac
	void Finish(byte WithResult);// 0x62d3b20
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x62d3a6c

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]// 0x75d0adc900

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0x120, Size: 0x10]// 0x75a78e9780
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x130, Size: 0x10]// 0x75a78e9880
	GameplayTask*[] TickingTasks;//[Offset: 0x150, Size: 0x10]// 0x75a78e9980
	GameplayTask*[] KnownTasks;//[Offset: 0x160, Size: 0x10]// 0x75a78e9a80
	delegate OnClaimedResourcesChange;//[Offset: 0x178, Size: 0x10]// 0x75a78e9b00
	void OnRep_SimulatedTasks();// 0x6206998
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x6206748

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]// 0x761207f9b0
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]// 0x761207f850
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]// 0x761207f7d0
	void ReadyForActivation();// 0x6204b48
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xffffff8a17adf2b0
	void EndTask();// 0x6204b34

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]// 0x75a7937a70
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]// 0x75a7937ae0
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]// 0x75a78ea000

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 0x8]// 0x75a78e3d00
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 0x8]// 0x75a78e3d80
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 0x10]// 0x75a78e3e80
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x48, Size: 0x10]// 0x75a78e3f80

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]// 0x75a78e1e00
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]// 0x75a78e1f00

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]// 0x7611544100
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]// 0x75d0b11b80
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]// 0x75d0b11c00

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]// 0x75d0addf80
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]// 0x75d0ade000
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]// 0x75d0ade100
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]// 0x75d0ade280

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]// 0x760d199000
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]// 0x760d199080

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]// 0x7611542810
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]// 0x7611542880
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]// 0x75d0b0e480
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]// 0x75d0b0e500

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]// 0x75d0b11a80
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]// 0x75d0b11b00

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]// 0x75d0ade180
	uint16 Number;//[Offset: 0x2, Size: 0x2]// 0x75d1014a80

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 0x4]// 0x7612228330
	Vector TargetPosition;//[Offset: 0x4, Size: 0xc]// 0x76122282b0
	Vector StartPosition;//[Offset: 0x10, Size: 0xc]// 0x7612228230

--------------------------------
Class: VehiclePartDamageBox.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnServerChangeDamageScale;//[Offset: 0x6d0, Size: 0x10]// 0x75a8827980
	delegate OnClientChangeDamageScale;//[Offset: 0x6e0, Size: 0x10]// 0x75a8827a00
	float DamageScale;//[Offset: 0x6f0, Size: 0x4]// 0x760d14e110
	void SetDamageScale(float InDamageScale);// 0x47d4018
	void OnRep_DamageScale();// 0x47d4004
	float GetDamageScale();// 0x47d3fe8

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	int ItemID;//[Offset: 0x48, Size: 0x4]// 0x7611e66c40
	uint32 CauseUniqueID;//[Offset: 0x50, Size: 0x4]// 0x7611e66bd0

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x2b8, Size: 0x4]// 0x760d14a360
	float TriggerInterval;//[Offset: 0x2bc, Size: 0x4]// 0x760d14a3d0
	float MaxAllowedValidationDiff;//[Offset: 0x2c0, Size: 0x4]// 0x760d14a440
	void OnTriggered();// 0xffffff8a17adf2b0

--------------------------------
Class: VehicleEnjoyVoiceComponent.VehicleComponent.ActorComponent.Object
	bool bSupportEnjoyVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]// 0x75a882b580
	int VoicePakageTypeID;//[Offset: 0x11c, Size: 0x4]// 0x75a894e490
	STExtraVehicleEnjoyVoiceConfigWrapper WelcomeToOwner_VoicesConfig;//[Offset: 0x120, Size: 0x18]// 0x75a882b600
	float WelcomeToOwner_VoiceRange;//[Offset: 0x138, Size: 0x4]// 0x75a894e500
	STExtraVehicleEnjoyVoiceConfigWrapper[] WelcomeToPassenger_VoiceConfigs;//[Offset: 0x140, Size: 0x10]// 0x75a882b700
	int[] WelcomeToPassenger_Playprobability;//[Offset: 0x150, Size: 0x10]// 0x75a882b780
	STExtraVehicleEnjoyVoiceConfigWrapper[] ScanSignalCircle_VoicesConfigs;//[Offset: 0x160, Size: 0x10]// 0x75a882b880
	STExtraVehicleEnjoyVoiceConfigWrapper[] CheckVehicleStatus_VoicesConfigs;//[Offset: 0x170, Size: 0x10]// 0x75a882b980
	float CheckVehicleStatus_HealthMark;//[Offset: 0x180, Size: 0x4]// 0x75a894e5e0
	float CheckVehicleStatus_FuelMark;//[Offset: 0x184, Size: 0x4]// 0x75a894e650
	int CheckVehicleStatus_DamagedWheelMark;//[Offset: 0x188, Size: 0x4]// 0x75a894e6c0
	FString SkinID_PakageID;//[Offset: 0x190, Size: 0x10]// 0x75a894e730
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x1a0, Size: 0x8]// 0x75a882ba00
	STExtraVehicleEnjoyVoiceSfxWrapper EnjoyVoiceSfx;//[Offset: 0x1a8, Size: 0x18]// 0x75a882ba80
	<FString,AkAudioEvent*> LoadedVoice;//[Offset: 0x1c0, Size: 0x50]// 0x75a893d840
	delegate OnCalcVoicIndex_WelcomeToOwner;//[Offset: 0x218, Size: 0x10]// 0x75a882bb80
	delegate OnCalcVoiceIndex_WelcomeToPassenger;//[Offset: 0x228, Size: 0x10]// 0x75a882bc00
	delegate OnCalcVoiceIndex_ScanSignalCircle;//[Offset: 0x238, Size: 0x10]// 0x75a882bc80
	delegate OnCalcVoiceIndex_VehicleStatus;//[Offset: 0x248, Size: 0x10]// 0x75a882bd00
	int Temp_VoiceIndex_WelcomeToOwner;//[Offset: 0x258, Size: 0x4]// 0x75a894e810
	int Temp_VoiceIndex_WelcomeToPassenger;//[Offset: 0x25c, Size: 0x4]// 0x75a894e880
	int Temp_VoiceIndex_ScanSignalCircle;//[Offset: 0x260, Size: 0x4]// 0x75a894e8f0
	int Temp_VoiceIndex_VehicleStatus;//[Offset: 0x264, Size: 0x4]// 0x75a894e960
	void UpdateEnjoyVehicleUI();// 0x47ced7c
	void PlayEnjoyVoice(enum VoiceType, int voiceIndex);// 0x47cecbc
	void OnVehicleAvatarChange(BattleItemHandleBase* ItemHandle);// 0x47cec40
	void OnServerEnterVehicle(STExtraPlayerCharacter* Character, enum SeatType, bool bSuccess);// 0x47ceb44
	void OnRep_SkinID_PakageID();// 0x47ceb30
	void LoadTableConfig();// 0x47ceb1c
	FString GetCurSkinIDPakageID();// 0x47cea9c
	int CalVoiceIndex(enum VoiceType);// 0x47cea10
	int CalcVoiceIndex_WelcomeToPassenger();// 0x47ce9dc
	int CalcVoiceIndex_WelcomeToOwner();// 0x47ce9a8
	int CalcVoiceIndex_VehicleStatus();// 0x47ce974
	int CalcVoiceIndex_ScanSignalCircle();// 0x47ce940

--------------------------------
Class: STExtraVehicleEnjoyVoiceConfigWrapper
	FString VoicePath;//[Offset: 0x0, Size: 0x10]// 0x761222bc20
	int VoiceBattleTextID;//[Offset: 0x10, Size: 0x4]// 0x761222bbb0

--------------------------------
Class: STExtraVehicleEnjoyVoiceSfxWrapper
	AkComponent* AKComp;//[Offset: 0x0, Size: 0x8]// 0x761222ba90
	AkAudioEvent* AkEvent;//[Offset: 0x8, Size: 0x8]// 0x761222ba10

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x138, Size: 0x10]// 0x7611dfbd90
	float SeekAreaPixelSize;//[Offset: 0x148, Size: 0x4]// 0x7611dfbd20
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x14c, Size: 0x8]// 0x7611dfbca0
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x154, Size: 0x8]// 0x7611dfbaa0
	float ScopeInDelayTime;//[Offset: 0x15c, Size: 0x4]// 0x7611dfba30
	float InitialLockFrameLength;//[Offset: 0x160, Size: 0x4]// 0x7611dfb9c0
	float FinalLockFrameLength;//[Offset: 0x164, Size: 0x4]// 0x7611dfb950
	float MaxSeekDeistance;//[Offset: 0x168, Size: 0x4]// 0x7611dfb8e0
	float LineTraceTargetMaxDistance;//[Offset: 0x16c, Size: 0x4]// 0x7611dfb870
	float HistoryLockDataMaxCacheTime;//[Offset: 0x170, Size: 0x4]// 0x7611dfb800
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x174, Size: 0x4]// 0x7611dfb790
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x178, Size: 0x4]// 0x7611dfb720
	float TraceTargetInterval;//[Offset: 0x17c, Size: 0x4]// 0x7611dfb6b0
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x180, Size: 0x4]// 0x7611dfb640
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x188, Size: 0x50]// 0x7611dfb420
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x1d8, Size: 0x50]// 0x7611dfb1f0
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x228, Size: 0x50]// 0x7611dfafc0
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x278, Size: 0x8]// 0x7611dfaf40
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x280, Size: 0x8]// 0x7611dfaec0
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x288, Size: 0x8]// 0x7611dfae40
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x290, Size: 0x8]// 0x7611dfadc0
	FString HideVehicleUIMsg;//[Offset: 0x298, Size: 0x10]// 0x7611dfad50
	FString ShowVehicleUIMsg;//[Offset: 0x2a8, Size: 0x10]// 0x7611dface0
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]// 0x7611dfac60
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x2c0, Size: 0x10]// 0x7611dfabe0
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x2d0, Size: 0x10]// 0x7611dfab60
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x2e0, Size: 0x10]// 0x7611dfaae0
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x300, Size: 0x4]// 0x7611dfaa70
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x304, Size: 0x4]// 0x7611dfaa00
	float CurTraceTargetCountTime;//[Offset: 0x308, Size: 0x4]// 0x7611dfa990
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]// 0x7611dfa910
	bool bHasHideGameUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]// 0x7611dfa890
	SeekAndLockWeapon3DWidget* UIWidgetRef;//[Offset: 0x390, Size: 0x8]// 0x7611dfa810
	void UnBindEvent();// 0x451bf78
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x451be88
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x451bdd8
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x451bce8
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x451bc38
	void RemoveTargetList(Actor*[] TargetList);// 0x451bb60
	void RemoveTarget(Actor* Target);// 0x451bae4
	void RecoverHideUIFailedReport(FString Desc);// 0x451ba58
	void PlaySound(Actor* Target, AkAudioEvent* Sound);// 0x451b9a4
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0xffffff8a17adf2b0
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0xffffff8a17adf2b0
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0xffffff8a17adf2b0
	void InitComplete();// 0x451b990
	void HandleTargetOutOfSeekArea();// 0x451b97c
	void HandleSpectatorChange();// 0x451b968
	void HandleRepIsSpectating(bool bIsSpectating);// 0x451b8e4
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x451b860
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x451b7dc
	enum GetCurrentSeekAndLockStage();// 0x451b7a0
	Actor* GetCurrentLockTarget();// 0x451b76c
	void ForceScopeOut();// 0x451b750
	bool CheckTargetIsVisible(Actor* Target);// 0x451b6b8
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x451b628
	void BindEvent();// 0x451b60c
	void AddTarget(Actor* Target);// 0x451b590

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 0x4]// 0x7611dfbc30
	float ShrinkSpeed;//[Offset: 0x4, Size: 0x4]// 0x7611dfbbc0

--------------------------------
Class: SeekAndLockWeapon3DWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	float LandscapeRotation;//[Offset: 0x458, Size: 0x4]// 0x75b4d1e360
	float Offset;//[Offset: 0x45c, Size: 0x4]// 0x75b4d1e3d0
	float Width;//[Offset: 0x460, Size: 0x4]// 0x75b4d1e440
	FName materialXParameterName;//[Offset: 0x468, Size: 0x8]// 0x75b4d1e4b0
	float CPPNavigatorTickRate;//[Offset: 0x470, Size: 0x4]// 0x75b4d1e520
	MaterialInstanceDynamic* CompassMat;//[Offset: 0x478, Size: 0x8]// 0x75b4d36880
	int DisplayCharRotation;//[Offset: 0x488, Size: 0x4]// 0x75b4d1e590
	SeekAndLockWeaponComponent* SeekAndLockWeaponComponent;//[Offset: 0x490, Size: 0x8]// 0x75b4d36900
	SeekAndLockCrossHairComponent* SeekAndLockCrossHairComponent;//[Offset: 0x498, Size: 0x8]// 0x75b4d36980
	CustomWidgetComponent* CustomWidgetComp;//[Offset: 0x4a8, Size: 0x8]// 0x75b4d36a00
	STExtraWeapon* OwnerWeapon;//[Offset: 0x4b0, Size: 0x8]// 0x75b4d36a80
	STExtraPlayerCharacter* OwnerPlayer;//[Offset: 0x4b8, Size: 0x8]// 0x75b4d36b00
	void UpdateRT();// 0x451a0e0
	void Show3DUI();// 0x451a0c4
	void SetCompassMat(MaterialInstanceDynamic* InCompassMat);// 0x451a048
	void OnPostInitWidget();// 0xffffff8a17adf2b0
	bool IsTextNotEqualTo(FText SelfValue, FText OtherText, bool ReverseResult);// 0x4519db4
	bool IsStrNotEqualToText(FString InValue, FText InText, bool ReverseResult);// 0x4519b84
	bool IsModToZero(int InValue, int ModValue);// 0x4519abc
	bool IsIntNotEqualToText(int InValue, FText InText, bool ReverseResult);// 0x45198e4
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x4519828
	void Hide3DUI();// 0x451980c
	void HandleWeaponScopeOut(bool bIsBegin);// 0x4519780
	void HandleWeaponScopeIn(bool bIsBegin);// 0x45196f4
	void HandleWeaponGetOwner(Actor* OwnerActor);// 0x4519678
	void HandleChangeTraceTarget(out const HitResult HitInfo);// 0x45195d8
	void HandleChangeSeekAndLockStageTip(FString Tip);// 0x4519500
	Rotator GetPlayerLookRotation();// 0x45194c8
	void ExtraForGuidedMissileRenderStyle(bool bSet);// 0x4519444
	void BPChangeTraceTargetDis(float Distance);// 0xffffff8a17adf2b0
	void BPChangeSeekAndLockStageTip(FString Tip);// 0xffffff8a17adf2b0
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x4519388

--------------------------------
Class: SeekAndLockCrossHairComponent.CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FString BoxFrameUIPath;//[Offset: 0x210, Size: 0x10]// 0x75b4d1f470
	Vector2D LockFrameCornerLineSize;//[Offset: 0x220, Size: 0x8]// 0x75b4d38700
	<enum,LinearColor> LockFrameColorConfig;//[Offset: 0x228, Size: 0x50]// 0x75b4d2d2c0
	bool bDrawDebugSeekAndLockFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]// 0x75b4d38900
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]// 0x75b4d38980
	SeekAndLockWeaponComponent* SeekAndLockWeaponComponent;//[Offset: 0x280, Size: 0x8]// 0x75b4d38a00
	Texture2D* BoxFrameTexture;//[Offset: 0x288, Size: 0x8]// 0x75b4d38a80
	void DrawHUD(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x4517abc

--------------------------------
Class: VehicleMotorbikeComponent.VehicleComponent.ActorComponent.Object
	delegate OnContactChanged;//[Offset: 0x118, Size: 0x10]// 0x75a8827a80
	CurveFloat* Curve_Roll;//[Offset: 0x128, Size: 0x8]// 0x75a8827b00
	CurveFloat* Curve_ReturnClamp;//[Offset: 0x130, Size: 0x8]// 0x75a8827b80
	CurveFloat* Curve_Steer;//[Offset: 0x138, Size: 0x8]// 0x75a8827c00
	CurveFloat* Curve_Yaw;//[Offset: 0x140, Size: 0x8]// 0x75a8827c80
	CurveFloat* Curve_TorqueStab;//[Offset: 0x148, Size: 0x8]// 0x75a8827d00
	CurveFloat* Curve_Roll_Cart;//[Offset: 0x150, Size: 0x8]// 0x75a8827d80
	CurveFloat* Curve_ReturnClamp_Cart;//[Offset: 0x158, Size: 0x8]// 0x75a8827e00
	CurveFloat* Curve_Steer_Cart;//[Offset: 0x160, Size: 0x8]// 0x75a8827e80
	CurveFloat* Curve_Yaw_Cart;//[Offset: 0x168, Size: 0x8]// 0x75a8827f00
	CurveFloat* Curve_TorqueStab_Cart;//[Offset: 0x170, Size: 0x8]// 0x75a8827f80
	bool bHasSidecart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]// 0x75a8828000
	FName LowStabBoneName;//[Offset: 0x180, Size: 0x8]// 0x760d14e260
	FName HighStabBoneName;//[Offset: 0x188, Size: 0x8]// 0x760d14e2d0
	Vector SideCartHighStabCOM;//[Offset: 0x190, Size: 0xc]// 0x75a8828080
	float MinSuspensionOffsetForContact;//[Offset: 0x19c, Size: 0x4]// 0x760d14e340
	Vector StabStaticVector;//[Offset: 0x1a0, Size: 0xc]// 0x75a8828100
	Vector2D StabXVelocityIn;//[Offset: 0x1ac, Size: 0x8]// 0x75a8828180
	Vector2D StabXVelocityOut;//[Offset: 0x1b4, Size: 0x8]// 0x75a8828200
	Vector2D StabXPitchIn;//[Offset: 0x1bc, Size: 0x8]// 0x75a8828280
	Vector2D StabXPitchOut;//[Offset: 0x1c4, Size: 0x8]// 0x75a8828300
	Vector2D StabZVelocityIn;//[Offset: 0x1cc, Size: 0x8]// 0x75a8828380
	Vector2D StabZVelocityOut;//[Offset: 0x1d4, Size: 0x8]// 0x75a8828400
	Vector2D StabZRollIn;//[Offset: 0x1dc, Size: 0x8]// 0x75a8828480
	Vector2D StabZRollOut;//[Offset: 0x1e4, Size: 0x8]// 0x75a8828500
	Vector2D StabZPitchIn;//[Offset: 0x1ec, Size: 0x8]// 0x75a8828580
	Vector2D StabZPitchOut;//[Offset: 0x1f4, Size: 0x8]// 0x75a8828600
	Vector2D StabTorqueIn;//[Offset: 0x1fc, Size: 0x8]// 0x75a8828680
	Vector2D StabTorqueOut;//[Offset: 0x204, Size: 0x8]// 0x75a8828700
	float StabTorqueForceScalar;//[Offset: 0x20c, Size: 0x4]// 0x760d14e3b0
	Vector2D StabTorquePitchIn;//[Offset: 0x210, Size: 0x8]// 0x75a8828780
	Vector2D StabTorquePitchOut;//[Offset: 0x218, Size: 0x8]// 0x75a8828800
	float StablizeAddTorqueThreshold;//[Offset: 0x220, Size: 0x4]// 0x760d14e420
	float StablizeSetCOMThreshold;//[Offset: 0x224, Size: 0x4]// 0x760d14e490
	bool bUseNewCOMCal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]// 0x75a8828880
	float ScaleTorque;//[Offset: 0x22c, Size: 0x4]// 0x760d14e500
	float ScaleCenterOfMass;//[Offset: 0x230, Size: 0x4]// 0x760d14e570
	Vector CurrentTorque;//[Offset: 0x234, Size: 0xc]// 0x75a8828900
	Vector CurrentCenterOfMass;//[Offset: 0x240, Size: 0xc]// 0x75a8828980
	bool bEnableAirControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]// 0x75a8828a00
	Vector2D AirControlFVelMap;//[Offset: 0x250, Size: 0x8]// 0x75a8828a80
	Vector2D AirControlBVelMap;//[Offset: 0x258, Size: 0x8]// 0x75a8828b00
	float AirControlFBTorque;//[Offset: 0x260, Size: 0x4]// 0x760d14e5e0
	bool bEnableAirYawControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]// 0x75a8828b80
	Vector2D AirControlRVelMap;//[Offset: 0x268, Size: 0x8]// 0x75a8828c00
	float AirControlLRTorque;//[Offset: 0x270, Size: 0x4]// 0x760d14e650
	bool EnableAirPitchAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]// 0x75a8828c80
	bool EnablePitchNearLandAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]// 0x75a8828d00
	float NearLandAdjustMaxPitch;//[Offset: 0x278, Size: 0x4]// 0x760d14e6c0
	float AdjustMaxPitchNeraLand;//[Offset: 0x27c, Size: 0x4]// 0x760d14e730
	float AdjustMaxPitch;//[Offset: 0x280, Size: 0x4]// 0x760d14e7a0
	float AdjustRateF;//[Offset: 0x284, Size: 0x4]// 0x760d14e810
	float AdjustRateB;//[Offset: 0x288, Size: 0x4]// 0x760d14e880
	float AdjustPitchRateScale;//[Offset: 0x28c, Size: 0x4]// 0x760d14e8f0
	bool EnableAirRollAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]// 0x75a8828d80
	bool EnableRollNearLandAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]// 0x75a8828e00
	float NearLandAdjustMaxRoll;//[Offset: 0x294, Size: 0x4]// 0x760d14e960
	float AdjustMaxRollNeraLand;//[Offset: 0x298, Size: 0x4]// 0x760d14e9d0
	float AdjustMaxRoll;//[Offset: 0x29c, Size: 0x4]// 0x760d14ea40
	float AdjustRateR;//[Offset: 0x2a0, Size: 0x4]// 0x760d14eab0
	float AdjustRateL;//[Offset: 0x2a4, Size: 0x4]// 0x760d14eb20
	float AdjustRollRateScale;//[Offset: 0x2a8, Size: 0x4]// 0x760d14eb90
	bool bResetRotationSafeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]// 0x75a8828f00
	bool bResetRotationCanRideCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1]// 0x75a8828f80
	bool bNewStableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae, Size: 0x1]// 0x75a8829000
	float NewStabilizeMaxAngVel;//[Offset: 0x2b0, Size: 0x4]// 0x760d14ec00
	float NewStabilizeMaxAngVelAngle;//[Offset: 0x2b4, Size: 0x4]// 0x760d14ec70
	float NewStabilizeMinAngle;//[Offset: 0x2b8, Size: 0x4]// 0x760d14ece0
	float NewStabilizeStopLinearVel;//[Offset: 0x2bc, Size: 0x4]// 0x760d14ed50
	float LeanAngleScale;//[Offset: 0x2c0, Size: 0x4]// 0x760d14edc0
	int MainSteerWheelIndex;//[Offset: 0x2c4, Size: 0x4]// 0x760d14ee30
	float NewStabilizeTireLoadTorque;//[Offset: 0x2c8, Size: 0x4]// 0x760d14eea0
	float NewStabilizeTireLoadDesiredYaw;//[Offset: 0x2cc, Size: 0x4]// 0x760d14ef10
	float NewStabilizeTireLoadSmoothFactor;//[Offset: 0x2d0, Size: 0x4]// 0x760d14ef80
	float AirSteerAngVel;//[Offset: 0x2d4, Size: 0x4]// 0x75a894d000
	bool bUseCustomRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]// 0x75a8829080
	bool bContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]// 0x75a8829100
	bool bLastContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]// 0x75a8829180
	float COMOffsetSteer;//[Offset: 0x314, Size: 0x4]// 0x75a894d070
	float RotSteeringFinal;//[Offset: 0x318, Size: 0x4]// 0x75a894d0e0
	PhysicsConstraintComponent* RollConstraintComp;//[Offset: 0x320, Size: 0x8]// 0x75a8829200
	bool bUseConstraintStabilize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]// 0x75a8829280
	float LinearStabilizeRollCutoff;//[Offset: 0x32c, Size: 0x4]// 0x75a894d150
	bool bStabilizeWithoutDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]// 0x75a8829300
	bool bStabilizeOnRemoteClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]// 0x75a8829380
	bool bStabilizeOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]// 0x75a8829400
	float ConstraintSpringForce;//[Offset: 0x334, Size: 0x4]// 0x75a894d1c0
	float ConstraintDamperForce;//[Offset: 0x338, Size: 0x4]// 0x75a894d230
	Vector2D PitchForceAlphaMapIn;//[Offset: 0x33c, Size: 0x8]// 0x75a8829480
	Vector2D PitchForceAlphaMapOut;//[Offset: 0x344, Size: 0x8]// 0x75a8829500
	bool bUseCalculatedVelocityAdjustedUpVector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]// 0x75a8829580
	FName RootBodyName;//[Offset: 0x358, Size: 0x8]// 0x75a894d2a0
	float FrameShiftBodyRollAlpha;//[Offset: 0x360, Size: 0x4]// 0x75a894d310
	Vector2D FrameShiftAdjustedUpVectorSpeedMapIn;//[Offset: 0x364, Size: 0x8]// 0x75a8829600
	bool bStabilizeWithContactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]// 0x75a8829680
	float StabilizeWithContactNormalAlpha;//[Offset: 0x370, Size: 0x4]// 0x75a894d380
	bool bShouldResetLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]// 0x75a8829700
	bool bUseNewResetLocationLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]// 0x75a8829780
	bool bRecordRotateSpeedDataOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]// 0x75a8829800
	bool bRecordRotateSpeedDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 0x1]// 0x75a8829880
	bool bRecordRotateDataOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]// 0x75a8829900
	bool bRecordRotateDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]// 0x75a8829980
	bool bCollectAirStunts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]// 0x75a8829a00
	float AirStunts_YawDegree;//[Offset: 0x3b0, Size: 0x4]// 0x75a894d3f0
	float AirStunts_PitchDegree;//[Offset: 0x3b4, Size: 0x4]// 0x75a894d460
	float AirStunts_RollDegree;//[Offset: 0x3b8, Size: 0x4]// 0x75a894d4d0
	float AirStunts_ValidRotateMinValue;//[Offset: 0x3bc, Size: 0x4]// 0x75a894d540
	delegate OnServerSnowboardFinishAirStuntRoll;//[Offset: 0x3c0, Size: 0x10]// 0x75a8829a80
	delegate OnServerSnowboardFinishAirStuntPitch;//[Offset: 0x3d0, Size: 0x10]// 0x75a8829b00
	delegate OnServerSnowboardFinishAirStuntYaw;//[Offset: 0x3e0, Size: 0x10]// 0x75a8829b80
	float KickstandAngularDamping;//[Offset: 0x414, Size: 0x4]// 0x75a894d5b0
	float KickstandMaxAngVelocity;//[Offset: 0x418, Size: 0x4]// 0x75a894d620
	float KickstandEnableMaxSpeed;//[Offset: 0x41c, Size: 0x4]// 0x75a894d690
	bool bKickstandStabilizeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]// 0x75a8829c00
	bool bKickstandStabilizeActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]// 0x75a8829c80
	bool bNeedCheckKickstandWhenRegionChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1]// 0x75a8829d00
	float StopTickKickstandRoll;//[Offset: 0x424, Size: 0x4]// 0x75a894d700
	bool bUseLinearStabilizeInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]// 0x75a8829d80
	float DirectStabilizeSpeedKickstand;//[Offset: 0x42c, Size: 0x4]// 0x75a894d770
	float MinVelocityForStabilizeOverride;//[Offset: 0x430, Size: 0x4]// 0x75a894d7e0
	float MaxRollForStabilizeOverride;//[Offset: 0x434, Size: 0x4]// 0x75a894d850
	bool bUseKickstandStabilize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]// 0x75a8829e00
	bool bOpenClientKickstandStabilize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]// 0x75a8829e80
	float DisableKickstandMaxImpluse;//[Offset: 0x43c, Size: 0x4]// 0x75a894d8c0
	bool StablizeDoneToSleepMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]// 0x75a8829f00
	float StablizeDoneToSleepVelocityThreshold;//[Offset: 0x444, Size: 0x4]// 0x75a894d930
	float MotorSteerRoll;//[Offset: 0x448, Size: 0x4]// 0x75a894d9a0
	bool bTickMotorbikeSteerRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]// 0x75a8829f80
	bool bUseForwardSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 0x1]// 0x75a882a000
	Vector4 COMOffsetSteerFactorMap;//[Offset: 0x450, Size: 0x10]// 0x75a882a080
	float SteerRollInterpSpeed;//[Offset: 0x460, Size: 0x4]// 0x75a894da10
	Vector4 InverseVelocityFactorMap;//[Offset: 0x470, Size: 0x10]// 0x75a882a100
	float InverseVelocity_YFactor;//[Offset: 0x480, Size: 0x4]// 0x75a894da80
	Vector4 InverseVelocitySteerFactorMap;//[Offset: 0x490, Size: 0x10]// 0x75a882a180
	Vector2D SteerRollFactorByVelocityClamp;//[Offset: 0x4a0, Size: 0x8]// 0x75a882a200
	Vector4 SteerRollAngularFactorByVelocityMap;//[Offset: 0x4b0, Size: 0x10]// 0x75a882a280
	float SteerRollByAngularScale;//[Offset: 0x4c0, Size: 0x4]// 0x75a894daf0
	Vector2D SteerRollFactorByAngularVelocityClamp;//[Offset: 0x4c4, Size: 0x8]// 0x75a882a300
	float FinalSteerRollInterpSpeed;//[Offset: 0x4cc, Size: 0x4]// 0x75a894db60
	bool bDriverUseHandGripIKRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]// 0x75a882a380
	float DriverVehicleSteerAngleMax;//[Offset: 0x4d4, Size: 0x4]// 0x75a894dbd0
	float PassengerVehicleSteerAngleMax;//[Offset: 0x4d8, Size: 0x4]// 0x75a894dc40
	FName DriverSpineBoneName;//[Offset: 0x4e0, Size: 0x8]// 0x75a894dcb0
	Vector DriverSpineOffset;//[Offset: 0x4e8, Size: 0xc]// 0x75a882a400
	float DriverVehGroundPitchAngleMax;//[Offset: 0x4f4, Size: 0x4]// 0x75a894dd20
	void TickMotorSteerRoll(float DeltaSeconds);// 0x47d3510
	bool ShouldCollectAirStunts();// 0x47d34d0
	void ServerUpdateInput(float RightInput);// 0x47d3420
	void OnVehicleTakeDamage(float Damage);// 0x47d339c
	void OnRep_KickstandStabilize();// 0x47d3388
	void HandleOnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x47d31f4
	float GetYawSpeed();// 0x47d31d8
	float GetRollSpeed();// 0x47d31bc
	float GetPitchSpeed();// 0x47d31a0
	bool GetIsContact();// 0x47d3168
	float GetAirControlRightInput();// 0x47d3134
	void ForceSyncVelocity(Vector ServerLinearVelocity, Vector ServerAngularVelocity);// 0x47d3064
	void ExitVehicle(STExtraPlayerCharacter* Character);// 0x47d2fe0
	void EnterVehicle(bool IsSucc, STExtraPlayerCharacter* Character, enum SeatType);// 0x47d2ed4
	void ClientExitVehicle(STExtraPlayerCharacter* Character);// 0x47d2e58
	void ClientEnterVehicle(bool IsSucc, STExtraPlayerCharacter* Character, enum SeatType);// 0x47d2d54
	void CheckKickstandWhenRegionChanged();// 0x47d2d40

--------------------------------
Class: SceneComponentState
	SceneComponent* TargetComponent;//[Offset: 0x8, Size: 0x8]// 0x7611e36640

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0x118, Size: 0x50]// 0x75a7b67340
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x168, Size: 0x10]// 0x75a7b57600

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0x118, Size: 0x1]// 0x75c98f7480

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 0x1]// 0x7611e4ac50
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x8, Size: 0x8]// 0x7611e4abd0

--------------------------------
Class: PawnStateRepSyncData
	uint64 CurrentStates;//[Offset: 0x0, Size: 0x8]// 0x7611e40df0
	uint64 DisabledStates;//[Offset: 0x8, Size: 0x8]// 0x7611e40d80

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 0x1]// 0x7611e4a430
	int8 Disabled;//[Offset: 0x1, Size: 0x1]// 0x7611e4a3c0

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0x160, Size: 0x10]// 0x7611d68210
	delegate OnBuffDetached;//[Offset: 0x170, Size: 0x10]// 0x7611d68190
	delegate UGC_BuffAttachedDelegate;//[Offset: 0x180, Size: 0x10]// 0x7611d68110
	delegate UGC_BuffDetachedDelegate;//[Offset: 0x190, Size: 0x10]// 0x7611d68090
	float BuffSyncTimer;//[Offset: 0x1a0, Size: 0x4]// 0x7611d68020
	<int,int> BuffSynIndexMap;//[Offset: 0x1a8, Size: 0x50]// 0x7611d67e90
	UTBuffSyncData[] BuffSyncList;//[Offset: 0x1f8, Size: 0x10]// 0x7611d67950
	FString ServerBuffString;//[Offset: 0x208, Size: 0x10]// 0x7611d678e0
	float BuffSyncRemainingPeriod;//[Offset: 0x218, Size: 0x4]// 0x7611d67870
	float SimulateTickInterval;//[Offset: 0x21c, Size: 0x4]// 0x7611d67800
	Actor* ActorOwner;//[Offset: 0x220, Size: 0x8]// 0x7611d67780
	bool bSyncBuffRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]// 0x7611d67700
	TimerHandle ResetForDeathDelayTimerHandler;//[Offset: 0x280, Size: 0x8]// 0x7611d67680
	TimerHandle RepBuffListDelayTimerHandler;//[Offset: 0x288, Size: 0x8]// 0x7611d67600
	void SimpleBuffDelegate__DelegateSignature(out const FName BuffName);// 0xffffff8a17adf2b0
	bool SetBuffExpiry(int BuffInstanceID, float ExpirySeconds);// 0x492846c
	void ResetForDeath(bool bImmediately, bool bDetached);// 0x492839c
	void RepBuffSyncList();// 0x4928388
	bool RemoveBuffByInstanceID(int BuffInstanceID, bool bRemoveLayerOnly);// 0x49282b4
	bool RemoveBuff(FName BuffName, bool bRemoveLayerOnly, Actor* BuffApplierActor, Controller* pCauser);// 0x492816c
	BuffInstancedItem K2_GetBuffInstanceByName(FName BuffName);// 0x4927f7c
	BuffInstancedItem K2_GetBuffInstanceByInstanceID(int InstanceID);// 0x4927d8c
	bool IsInstanceValid(int InstanceID);// 0x4927cfc
	bool IsBuffPendingRemove(FName BuffName);// 0x4927c6c
	bool IsBufferMutexed(FName NewBuffName);// 0x4927bdc
	bool HasBuff(FName BuffName);// 0x4927b4c
	UAEBlackboard* GetUAEBlackboard(int BuffInstanceID);// 0x4927ac0
	Pawn* GetPawnOwner();// 0x4927a8c
	FName GetBuffName(int BuffID);// 0x4927a00
	int GetBuffMaxLayer(FName BuffName);// 0x4927974
	int GetBuffInstanceIDByName(FName BuffName);// 0x49278e8
	bool GetBuffInstanceByName(FName BuffName, out BuffInstancedItem BuffInstance);// 0x492773c
	int GetBuffIDByName(FName BuffName);// 0x49276b0
	float GetBuffExpiry(int InstanceID);// 0x4927624
	STBaseBuff* GetBuffByName(FName BuffName);// 0x4927598
	Actor* GetActorOwner();// 0x4927564
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x49273f0

--------------------------------
Class: UTBuffSyncData
	FName BuffName;//[Offset: 0x0, Size: 0x8]// 0x7611d67e20
	int BuffID;//[Offset: 0x8, Size: 0x4]// 0x7611d67db0
	int BuffInstanceID;//[Offset: 0xc, Size: 0x4]// 0x7611d67d40
	Controller* BuffCauser;//[Offset: 0x10, Size: 0x8]// 0x7611d67cc0
	int LayerCount;//[Offset: 0x18, Size: 0x4]// 0x7611d67c50
	Actor* BuffApplierActor;//[Offset: 0x20, Size: 0x8]// 0x7611d67bd0
	float RemainingTime;//[Offset: 0x28, Size: 0x4]// 0x7611d67b60
	float ExpireTime;//[Offset: 0x2c, Size: 0x4]// 0x7611d67af0

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 0x8]// 0x7611d65800
	int BuffID;//[Offset: 0x8, Size: 0x4]// 0x7611d65790
	STBaseBuff* Buff;//[Offset: 0x10, Size: 0x8]// 0x7611d65710
	int LayerCount;//[Offset: 0x18, Size: 0x4]// 0x7611d656a0
	Controller* CauserPawnController;//[Offset: 0x1c, Size: 0x8]// 0x7611d65620
	Actor* CauserActor;//[Offset: 0x24, Size: 0x8]// 0x7611d655a0
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x7611d65520
	float Expiry;//[Offset: 0x30, Size: 0x4]// 0x7611d654b0
	Actor* Target;//[Offset: 0x34, Size: 0x8]// 0x7611d65430
	Actor* BuffApplier;//[Offset: 0x3c, Size: 0x8]// 0x7611d653b0
	int BuffInstanceID;//[Offset: 0x44, Size: 0x4]// 0x7611d65340
	UAEBlackboard* UAEBlackboard;//[Offset: 0xa0, Size: 0x8]// 0x7611d652c0

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x38, Size: 0x10]// 0x75a7b89770
	FString DisplayName;//[Offset: 0x48, Size: 0x10]// 0x75a7b897e0
	FString Message;//[Offset: 0x58, Size: 0x10]// 0x75a7b89850
	Texture2D* Icon;//[Offset: 0x68, Size: 0x8]// 0x75a7b55500
	SoundBase* SoundData;//[Offset: 0x70, Size: 0x8]// 0x75a7b55580
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x75a7b55600
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]// 0x75a7b55680
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]// 0x75a7b55700
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]// 0x75a7b55780
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]// 0x75a7b55800
	bool NeedDetachAndAttachForAddLayerWhenReachMaxLayerCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]// 0x75a7b55880
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 0x1]// 0x75a7b55900
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 0x1]// 0x75a7b55980
	int LayerMax;//[Offset: 0x80, Size: 0x4]// 0x75a7b898c0
	int InitialLayerCount;//[Offset: 0x84, Size: 0x4]// 0x75a7b89930
	float ValidityTime;//[Offset: 0x88, Size: 0x4]// 0x75a7b899a0
	bool ValidityTimeAccumulable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]// 0x75a7b55a00
	float MaxValidityTime;//[Offset: 0x90, Size: 0x4]// 0x75a7b89a10
	float Internal;//[Offset: 0x94, Size: 0x4]// 0x75a7b89a80
	UTSkillCondition*[] BuffConditions;//[Offset: 0x98, Size: 0x10]// 0x75a7b55b00
	StatusChange[] StatusChanges;//[Offset: 0xa8, Size: 0x10]// 0x75a7b55c00
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]// 0x75a7b55c80
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]// 0x75a7b55d00
	byte SimulateAddBuffRole;//[Offset: 0xba, Size: 0x1]// 0x75a7b55d80
	FName[] MutexBuffers;//[Offset: 0xc0, Size: 0x10]// 0x75a7b55e00
	FName[] ExcludedBuffs;//[Offset: 0xd0, Size: 0x10]// 0x75a7b55e80
	BuffActionItem[] BuffActions;//[Offset: 0xe0, Size: 0x10]// 0x75a7b55f80
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xf0, Size: 0x10]// 0x75a7b56080
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]// 0x75a7b56100
	BuffUIConfig UIConfig;//[Offset: 0x108, Size: 0x58]// 0x75a7b56180
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0x168, Size: 0x10]// 0x75a7b56280
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x178, Size: 0x50]// 0x75a7b66680
	int InstancedNodesTotalSize;//[Offset: 0x1c8, Size: 0x4]// 0x75a7b89c40

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 0x8]// 0x760d23d580
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x760d23d600

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 0x8]// 0x760d23d900

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 0x8]// 0x760d23d980
	UTSkillAction* BuffEventAction;//[Offset: 0x8, Size: 0x8]// 0x760d23da00

--------------------------------
Class: STBaseBuffEventType.Object
	STBaseBuffSystemComponent* STBuffSystemComponent;//[Offset: 0x28, Size: 0x8]// 0x75d0b40100
	bool GetBuffInstance(out BuffInstancedItem OutOwnerBuffInstance);// 0x4925350
	bool Equals(out STBaseBuffEventContext Context);// 0x4925150
	bool DoAction(out STBaseBuffEventContext Context, UTSkillAction* SkillAction);// 0x4924f0c

--------------------------------
Class: STBaseBuffEventContext
	class STBaseBuffEventType* BuffEventClass;//[Offset: 0x0, Size: 0x8]// 0x760d23d100
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x8, Size: 0x3c0]// 0x760d23d500

--------------------------------
Class: BuffUIConfig
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 0x28]// 0x760d23d680
	int ZOrder;//[Offset: 0x28, Size: 0x4]// 0x76119c07d0
	Margin MarginData;//[Offset: 0x2c, Size: 0x10]// 0x760d23d780
	Anchors AnchorsData;//[Offset: 0x3c, Size: 0x10]// 0x760d23d800
	Vector2D Position;//[Offset: 0x4c, Size: 0x8]// 0x760d23d880

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x42ce0d8
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x42cdf24
	void S2A_EndEffectGraph(int UID);// 0x42cdea0
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x42cdcb4

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0x158, Size: 0x8]// 0x75a8426c00
	float UpdateHitBoxDeltaTime;//[Offset: 0x160, Size: 0x4]// 0x75a83fcf80
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]// 0x75a8426c80
	bool bOptimizeBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 0x1]// 0x75a8426d00
	bool bOptimizeBulletCache_Server;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166, Size: 0x1]// 0x75a8426d80
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0x168, Size: 0x10]// 0x75a8426e80
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0x178, Size: 0x10]// 0x75a8426f80
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0x188, Size: 0x10]// 0x75a8427080
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0x198, Size: 0x10]// 0x75a8427180
	BoxComponent* BoxEar;//[Offset: 0x1a8, Size: 0x8]// 0x75a8427200
	bool bEnableBoxEar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]// 0x75a8427280
	byte ClientHitPartJudgment;//[Offset: 0x1b1, Size: 0x1]// 0x75a8427300
	byte DSHitPartJudgment;//[Offset: 0x1b2, Size: 0x1]// 0x75a8427380
	bool bSwitchHitBoxByPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 0x1]// 0x75a8427400
	FString HitBox_Stand_Tag;//[Offset: 0x1b8, Size: 0x10]// 0x75a886f000
	FString HitBox_Prone_Tag;//[Offset: 0x1c8, Size: 0x10]// 0x75a886f070
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x1d8, Size: 0x4]// 0x75a886f0e0
	float Server_HitBox_Stand_Radius;//[Offset: 0x1dc, Size: 0x4]// 0x75a886f150
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x1e0, Size: 0x4]// 0x75a886f1c0
	float Server_HitBox_Prone_Radius;//[Offset: 0x1e4, Size: 0x4]// 0x75a886f230
	BodyTypeDef ProneBodyDef;//[Offset: 0x1e8, Size: 0x8]// 0x75a8427480
	BodyTypeDef StandBodyDef;//[Offset: 0x1f0, Size: 0x8]// 0x75a8427500
	BodyTypeDef CrouchBodyDef;//[Offset: 0x1f8, Size: 0x8]// 0x75a8427580
	BodyTypeDef DyingBodyDef;//[Offset: 0x200, Size: 0x8]// 0x75a8427600
	BodyTypeDef VechicleBodyDef;//[Offset: 0x208, Size: 0x8]// 0x75a8427680
	Vector NewStandHitBodyBoxScale;//[Offset: 0x210, Size: 0xc]// 0x75a8427700
	Vector NewProneHitBodyBoxScale;//[Offset: 0x21c, Size: 0xc]// 0x75a8427780
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x228, Size: 0x50]// 0x75a841a8c0
	float PawnCollisionCountdown;//[Offset: 0x278, Size: 0x4]// 0x75a886f310
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]// 0x75a8427900
	float BoxCollisionCountdown;//[Offset: 0x280, Size: 0x4]// 0x75a886f380
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]// 0x75a8427980
	void UpdatePoseCollisionShapes(byte PoseState);// 0x446d72c
	void UpdateAllInstanceBodyTransform(int Type);// 0x446d6a8
	void ResetData();// 0x446d68c
	void RefreshWorldPawnCollision(float CountDown);// 0x446d608
	void RefreshWorldBoxCollision(float CountDown);// 0x446d584
	void InitBodyHitBox(byte PoseState);// 0x446d500
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x446d474
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x446d3d0
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x446d334
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x446d1e4
	byte GetCurHitPartJugementType();// 0x446d1b0
	void CloseBodyBulletCollision();// 0x446d194
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x446cfec

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 0x4]// 0x76121b3310
	int DownThreshold;//[Offset: 0x4, Size: 0x4]// 0x76121b32a0

--------------------------------
Class: AIShootingOffsetComponent.ActorComponent.Object
	Vector AIShootingCenterOffset;//[Offset: 0x118, Size: 0xc]// 0x75c98c5200

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611e49400
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611e49380
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x7611e49300
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 0xc]// 0x7611e49280
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 0xc]// 0x7611e49200
	bool bUseSkinWeightProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]// 0x7611e49180

--------------------------------
Class: TurnAroundViewComponent.OnlyActorComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0x120, Size: 0x38]// 0x75a8546880
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75a8546900
	Character* MyChar;//[Offset: 0x198, Size: 0x8]// 0x75a8546980
	void OnRep_FocusTurnTargetChange();// 0x4750c98
	FString GetToString();// 0x4750c10

--------------------------------
Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 0x8]// 0x7612218740
	Vector Position;//[Offset: 0x8, Size: 0xc]// 0x76122186c0
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]// 0x7612218640
	float TurnTargetVelocity;//[Offset: 0x18, Size: 0x4]// 0x76122185d0
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 0xc]// 0x7612218550
	FString CurveName;//[Offset: 0x28, Size: 0x10]// 0x76122184e0

--------------------------------
Class: AimOffsetViewComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75a8819580
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]// 0x75a8819600
	VaultAnimDataAsset* VaultAnimDataAssetPtr;//[Offset: 0x160, Size: 0x8]// 0x75a8819680
	PlayerAIVaultCheckData[] AICheckDataList;//[Offset: 0x168, Size: 0x10]// 0x75a8819780
	bool isloadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]// 0x75a8819800
	int VaultEndZDeviation;//[Offset: 0x17c, Size: 0x4]// 0x75a83f1670
	float ForceSetToEndLocDis;//[Offset: 0x180, Size: 0x4]// 0x75a83f16e0
	AnimMontage*[] VaultMontageCacheList;//[Offset: 0x188, Size: 0x10]// 0x75a8819900
	bool VaultFromCPP();// 0x44b505c
	void Vault();// 0xffffff8a17adf2b0
	void UpdateVault_BluePrint();// 0x44b5040
	void SetZombieVaultAnim(FString AnimKey, float PlayRate);// 0x44b4f2c
	void SetPlayerVaultAnim(FString AnimKey, float PlayRate);// 0x44b4e18
	void PreSaveCacheData();// 0xffffff8a17adf2b0
	void PawnStartVault(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Vector EndPos, Rotator vaultRot, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir, bool bCheckDynamicBlock);// 0x44b4a74
	void OnRespawned_BlueprintImpl();// 0xffffff8a17adf2b0
	bool IsUnAttachToWorld();// 0x44b4a3c
	FString GetVaultKeyForAutoTest();// 0xffffff8a17adf2b0
	FString GetVaultKeyByBlockHeightAndBlockLengthWithJump(float Height, float BlockLength, bool bIsJump);// 0x44b48e8
	FString GetVaultKeyByBlockHeightAndBlockLength(float Height, float BlockLength);// 0x44b47d8
	FString GetVaultKeyByBlockHeight(float Height);// 0x44b4700
	AnimMontage* GetVaultFPPAnimByName(FString AnimKey);// 0x44b466c
	AnimMontage* GetVaultAnimByName(FString AnimKey);// 0x44b45d8
	bool GetShowZombieDebugInfo();// 0x44b45a0
	Rotator GetRelicateRotator();// 0x44b4568
	bool GetIsJumpByBlockHeightAndBlockLength(float Height, float BlockLength);// 0x44b4498
	FString GetAIVaultLengthKey(float blockHeightTemp, float TestHeight);// 0x44b4390
	FString GetAIVaultKeyWithJump(float blockHeightTemp, float BlockLengthTemp, float TestHeight, float TestBlocklength, bool bIsJump);// 0x44b41cc
	FString GetAIVaultKey(float blockHeightTemp, float BlockLengthTemp, float TestHeight, float TestBlocklength);// 0x44b4050
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x44b3e3c
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x44b3c28
	bool CheckCanVaultWithPosition(bool bUsePawnPosition, bool bCheckState, Vector WorldLocation, Rotator WorldRotation);// 0xffffff8a17adf2b0
	bool CheckCanVaultByBlockHeightAndBlockDis(float Height, float blockDis);// 0x44b3b58
	void CharacterStartVault(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir, AnimMontage* AnimMontage, bool bCheckDynamicBlock);// 0x44b37f8

--------------------------------
Class: VaultAnimDataAsset.DataAsset.Object
	<FString,VaultAnimInfo> VaultAnimMap;//[Offset: 0x30, Size: 0x50]// 0x75a8945040
	<FString,VaultAnimInfo> FPPVaultAnimMap;//[Offset: 0x80, Size: 0x50]// 0x75a8945100
	void OnPostLoadMapWithWorld(World* World);// 0x47b8cf8
	void OnAsyncLoadingFinished();// 0x47b8ce4

--------------------------------
Class: VaultAnimInfo
	AnimMontage* AnimSoftPtr;//[Offset: 0x0, Size: 0x28]// 0x7612227b00

--------------------------------
Class: PlayerAIVaultCheckData
	FString VaultKey;//[Offset: 0x0, Size: 0x10]// 0x76121c2d50
	float blockthickLength;//[Offset: 0x10, Size: 0x4]// 0x76121c2ce0
	float BlockHeight;//[Offset: 0x14, Size: 0x4]// 0x76121c2c70
	bool isFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x76121c2bf0
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x76121c2b70

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 0x1]// 0x7611ecd080
	float TotalTime;//[Offset: 0x4, Size: 0x4]// 0x7611ecd010
	float AttachWeaponTime;//[Offset: 0x8, Size: 0x4]// 0x7611eccfa0

--------------------------------
Class: MoveableBaseSmoothComp.ActorComponent.Object
	float SmoothNetUpdateTime;//[Offset: 0x158, Size: 0x4]// 0x75a887e2d0
	float SmoothNetUpdateRotationTime;//[Offset: 0x15c, Size: 0x4]// 0x75a887e340
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]// 0x75a8887780
	void OnRespawned();// 0x44266a4
	void OnRecycled();// 0x4426688

--------------------------------
Class: VelocitySimulatorSmoothComp.ActorComponent.Object
	float SmoothNetUpdateTime;//[Offset: 0x158, Size: 0x4]// 0x760d1485a0
	float SmoothNetUpdateRotationTime;//[Offset: 0x15c, Size: 0x4]// 0x760d148610
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]// 0x75a84cfd00
	void OnRespawned();// 0x47eb56c
	void OnRecycled();// 0x47eb550

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 0x8]// 0x7611ecc700
	FString SwitchGroupName;//[Offset: 0x8, Size: 0x10]// 0x7611ecc690
	FString SwitchValue;//[Offset: 0x18, Size: 0x10]// 0x7611ecc620

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	SoftClassPath NearDeath_Swim_AnimInstanceClass;//[Offset: 0x158, Size: 0x18]// 0x75a8159780
	delegate OnRescueSucceedWithRef;//[Offset: 0x170, Size: 0x10]// 0x75a8159800
	FName DeadBuffName;//[Offset: 0x180, Size: 0x8]// 0x75a8137810
	float BreathMax;//[Offset: 0x190, Size: 0x4]// 0x75a8137880
	float AssistAccountableDuration;//[Offset: 0x194, Size: 0x4]// 0x75a81378f0
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x198, Size: 0x4]// 0x75a8137960
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]// 0x75a8159880
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x1a0, Size: 0x8]// 0x75a8159900
	int MaxDeathTimes;//[Offset: 0x1a8, Size: 0x4]// 0x75a81379d0
	float ZombieInitHealth;//[Offset: 0x1ac, Size: 0x4]// 0x75a8137a40
	FString[] NearDeathAttrModifyNames;//[Offset: 0x1b0, Size: 0x10]// 0x75a8159980
	bool IsDirectlyDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]// 0x75a8159a00
	byte HealthStatusOnServer;//[Offset: 0x1c1, Size: 0x1]// 0x75a8159a80
	byte LastHealthStatusOnServer;//[Offset: 0x1c2, Size: 0x1]// 0x75a8159b00
	float BreathReduceRate;//[Offset: 0x1c4, Size: 0x4]// 0x75a8137b20
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x1d0, Size: 0x8]// 0x75a8159b80
	float EnterNearDeathSeconds;//[Offset: 0x1d8, Size: 0x4]// 0x75a8137b90
	float Breath;//[Offset: 0x1dc, Size: 0x4]// 0x75a8137c00
	int NearDeathRestoredOrignalHealth;//[Offset: 0x1e4, Size: 0x4]// 0x75a8137c70
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x1e8, Size: 0x4]// 0x75a8137ce0
	Controller* EventInstigatorRecorded;//[Offset: 0x1f0, Size: 0x8]// 0x75a8159c00
	Actor* DamageCauserRecorded;//[Offset: 0x1f8, Size: 0x8]// 0x75a8159c80
	DamageEvent DamageEventRecorded;//[Offset: 0x200, Size: 0x18]// 0x75a8159d00
	bool TryGotoZombieStatus(Controller* _EventInstigator, bool bIgnoreSelf);// 0x45656ac
	bool TryGotoLastBreathOrZombie(Controller* EventInstigator, Actor* DamageCauser, DamageEvent DamageEvent, float _finalDamage, bool IsDamageFromVehicleExplode);// 0x456550c
	void SuicideWhenNearDeath();// 0x45654f8
	void SetIsDirectlyDie(bool bIsDirectlyDie);// 0x4565474
	float SetHealthSafety(float AddVal);// 0x45653e8
	void S2C_HelpSelf(bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x45652e0
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x456519c
	void S2C_CarryOther(Character* CarryWho, bool IsTurnInfo);// 0x45650d4
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x4564f90
	void S2C_BeCarriedByOther(Character* ByWho, bool IsTurnInfo);// 0x4564ec8
	void RescueFinishSuccessfully(int HealthAddtive);// 0x4564e4c
	void OnRep_BreathChanged();// 0x4564e38
	void MakeSureOwnerEnterDeadState();// 0x4564e24
	bool IsNearDeathInvincible();// 0x4564dec
	bool IsHealthAlive();// 0x4564db4
	bool IsHaveLastBreathStatus();// 0x4564d7c
	bool IsFinishedLastBreathStatus();// 0x4564d44
	void InitializeOwner(Pawn* TempPawn);// 0x4564cc8
	bool HasAnyTeamatesCanHelp(bool bIgnoreSelf);// 0x4564c30
	void HandlePawnOwnerStateChanged(enum State);// 0x4564bb4
	void HandlePawnAnimInstanceChanged(STExtraBaseCharacter* Character);// 0x4564b38
	void HandleCharacterHealthStatusChanged(byte PrevStatus, byte NewStatus);// 0x4564a80
	float GetBreathMax();// 0x4564a64
	float GetBreath();// 0x4564a48
	void EnterSwimWhileDying();// 0x4564a34
	void DoFinishLastBreath();// 0x4564a20
	void ClearNearDeathTeammateIfNeeded(bool bIgnoreSelf);// 0x456499c
	bool CanSwimWhenNearDeath();// 0x4564964
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x4564894
	void AddDeadBuff();// 0x4564880

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	float WanderingRadius;//[Offset: 0x158, Size: 0x4]// 0x75a8137340
	anPickerData FanData;//[Offset: 0x15c, Size: 0x14]// 0x75a8158c00
	float RescueOtherDuration;//[Offset: 0x170, Size: 0x4]// 0x75a81373b0
	float RescueReduceTime;//[Offset: 0x174, Size: 0x4]// 0x75a8137420
	float ToTargetHealthAddtive;//[Offset: 0x178, Size: 0x4]// 0x75a8137490
	ItemDefineID[] RescuingSelfItemDefineIDs;//[Offset: 0x180, Size: 0x10]// 0x75a8158d00
	float RescuingSelfCDTimeSetting;//[Offset: 0x190, Size: 0x4]// 0x75a8137500
	int PromptIDInRescuingSelfCD;//[Offset: 0x194, Size: 0x4]// 0x75a8137570
	int RescuingSelfCircleIndexLimited;//[Offset: 0x198, Size: 0x4]// 0x75a81375e0
	int PromptIDInBlueCircleRadius;//[Offset: 0x19c, Size: 0x4]// 0x75a8137650
	float RescuingRefuseTipsCD;//[Offset: 0x1a0, Size: 0x4]// 0x75a81376c0
	int LogPeroidCount;//[Offset: 0x1a4, Size: 0x4]// 0x75a8137730
	STExtraBaseCharacter* RescueWho;//[Offset: 0x1a8, Size: 0x8]// 0x75a8158d80
	delegate OnRescueSucceed;//[Offset: 0x1b0, Size: 0x10]// 0x75a8158e00
	delegate OnRescueOtherEndWithRef;//[Offset: 0x1c0, Size: 0x10]// 0x75a8158e80
	delegate OnRescueOtherStartWithRef;//[Offset: 0x1d0, Size: 0x10]// 0x75a8158f00
	STExtraBaseCharacter* PawnOwner_Private;//[Offset: 0x1e4, Size: 0x8]// 0x75a8158f80
	void SetIsDisableRescue(bool _bDisableRescue);// 0x4566c88
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x4566bd8
	bool RescueSucImmediately(STExtraBaseCharacter* Target);// 0x4566b48
	void PlayerConfirmToRescueServerSide(STExtraBaseCharacter* _RescueWho);// 0x4566acc
	bool PlayerConfirmToRescueClientSide();// 0x4566a94
	void OnMyItemUpdate(ItemHandleBase* ItemHandleBase);// 0x4566a18
	float GetRescueOtherDuration();// 0x45669e4
	STExtraBaseCharacter* GetPawnOwner();// 0x4566940
	STCharacterNearDeathComp* GetNearDeathComponent();// 0x4566834
	bool FindRescuingSelfItem(out ItemDefineID Out);// 0x4566790
	void ClientPlayerRefuse(bool bResetRescue, bool bResetCarry);// 0x4566680
	void ClientPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x45665d0
	bool BeCanRescuingSelf();// 0x4566598

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 0x4]// 0x76121dd8e0
	float angle;//[Offset: 0x4, Size: 0x4]// 0x76121dd870
	float Offset;//[Offset: 0x8, Size: 0x4]// 0x76121dd800
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x76121dd780
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x76121dd700
	float LowerTraceRatio;//[Offset: 0x10, Size: 0x4]// 0x76121dd690

--------------------------------
Class: STCharacterCarryOtherComp.ActorComponent.Object
	CarryOther_FanPickerData FanData;//[Offset: 0x158, Size: 0x14]// 0x75a8161780
	FName AttachedSocketName;//[Offset: 0x170, Size: 0x8]// 0x75a86b73c0
	float CarryDetachedTeammateInterval;//[Offset: 0x178, Size: 0x4]// 0x75a86b7430
	class UTSkill* CarrySomeoneSkillTemplate;//[Offset: 0x180, Size: 0x28]// 0x75a8161800
	class UTSkill* BeCarriedSkillTemplate;//[Offset: 0x1a8, Size: 0x28]// 0x75a8161880
	int PutDownPhaseID;//[Offset: 0x1d0, Size: 0x4]// 0x75a86b74a0
	Vector2D PutDownCapsule;//[Offset: 0x1d4, Size: 0x8]// 0x75a8161900
	Vector2D PutDownDistance;//[Offset: 0x1dc, Size: 0x8]// 0x75a8161980
	float PutDownForwardCheckingExtraDist;//[Offset: 0x1e4, Size: 0x4]// 0x75a86b7510
	int TipID_NoEnoughPlace;//[Offset: 0x1e8, Size: 0x4]// 0x75a86b7580
	int TipID_CarryDetachedTeammate;//[Offset: 0x1ec, Size: 0x4]// 0x75a86b75f0
	int LogPeroidCount;//[Offset: 0x1f0, Size: 0x4]// 0x75a86b7660
	STExtraBaseCharacter* CarryWho;//[Offset: 0x1f8, Size: 0x8]// 0x75a8161a00
	AnimMontage* Montage_BeCarriedPawn_PutUp_Armed;//[Offset: 0x200, Size: 0x28]// 0x75a8161a80
	AnimMontage* Montage_BeCarriedPawn_PutUp_Unarmed;//[Offset: 0x228, Size: 0x28]// 0x75a8161b00
	AnimMontage* Montage_BeCarriedPawn_PutDown_Armed;//[Offset: 0x250, Size: 0x28]// 0x75a8161b80
	AnimMontage* Montage_BeCarriedPawn_PutDown_Unarmed;//[Offset: 0x278, Size: 0x28]// 0x75a8161c00
	CarryReplaceCharAnimData[] ReplaceAnimDataList_BeCarriedPawn_Armed;//[Offset: 0x2a0, Size: 0x10]// 0x75a8161d00
	CarryReplaceCharAnimData[] ReplaceAnimDataList_BeCarriedPawn_Unarmed;//[Offset: 0x2b0, Size: 0x10]// 0x75a8161e00
	CarryRepData PrevCarryRepData;//[Offset: 0x2c0, Size: 0x10]// 0x75a8161e80
	int SwitcherIndex;//[Offset: 0x2d0, Size: 0x4]// 0x75a86b76d0
	STExtraBaseCharacter* PawnOwner_Private;//[Offset: 0x2d4, Size: 0x8]// 0x75a8161f00
	STExtraBaseCharacter* CurAttachedCharacter;//[Offset: 0x2e0, Size: 0x8]// 0x75a8161f80
	UAECharacterAnimListComponent* CharAnimListComp;//[Offset: 0x2e8, Size: 0x8]// 0x75a8162000
	<STExtraBaseCharacter*,float> TeammateBreakAwayMap;//[Offset: 0x2f0, Size: 0x50]// 0x75a86c13c0
	void UnilateralInterruption(bool bIsCarrier);// 0x455a238
	void SuicideWhenBeCarriedByEnemy();// 0x455a1d8
	void SetPutDownLocOnServer();// 0x455a1c4
	void SetCarryRepData(CarryRepData NewCarryRepData);// 0x455a134
	void ServerPlayerPutDown();// 0x455a0d4
	void ServerPlayerConfirm(STExtraBaseCharacter* CarriedPawn);// 0x455a024
	void SelectedPickedTargetChangeNotifyHUD(Pawn* PrevCarriedPawn, int PrevSwitcherIndex);// 0x4559f6c
	void PutDownSuccessfully();// 0x4559f58
	void PostAttachmentReplication(Actor* AttachParent, Actor* AttachParent_Direct, SceneComponent* AttachComponent, FName AttachSocket);// 0x4559e30
	bool PlayerConfirmToPutDownClientSide();// 0x4559df8
	bool PlayerConfirmToCarryClientSide();// 0x4559dc0
	void InitializeOwner(Pawn* _OwnerPawn);// 0x4559d44
	STExtraBaseCharacter* GetPawnOwner();// 0x4559ca0
	CarryRepData GetCarryRepData();// 0x4559c68
	STExtraBaseCharacter* GetBeCarriedByWho();// 0x4559c34
	void ClientPlayerRefusedPuttingDown();// 0x4559bd4
	void ClientPlayerRefused(bool bResetRescue, bool bResetCarry);// 0x4559ac4
	void BreakAwayWhenBeCarriedByTeammate();// 0x4559a64

--------------------------------
Class: CarryOther_FanPickerData
	float Radius;//[Offset: 0x0, Size: 0x4]// 0x76121dbe90
	float angle;//[Offset: 0x4, Size: 0x4]// 0x76121dbe20
	float Offset;//[Offset: 0x8, Size: 0x4]// 0x76121dbdb0
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x76121dbd30
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x76121dbcb0
	float LowerTraceRatio;//[Offset: 0x10, Size: 0x4]// 0x76121dbc40

--------------------------------
Class: CarryReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]// 0x76121dc1a0
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]// 0x76121dc0a0
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0x10]// 0x76121dbfa0

--------------------------------
Class: CarryRepData
	enum CarringState;//[Offset: 0x0, Size: 0x1]// 0x7611ecbd60
	bool bIsCarrier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611ecbce0
	Vector PutDownLocOffset;//[Offset: 0x4, Size: 0xc]// 0x7611ecbc60

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x270, Size: 0x10]// 0x75a8994300
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x280, Size: 0x10]// 0x75a8994400
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x290, Size: 0x10]// 0x75a8994500
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x2a0, Size: 0x10]// 0x75a8994600
	CurveFloat* FallingIKCurve;//[Offset: 0x2b0, Size: 0x8]// 0x75a8994680
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x2b8, Size: 0x10]// 0x75a8994780
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x2c8, Size: 0x10]// 0x75a8994880
	DynamicLoadinigAnimData[] DynamicLoadinigAnimEditList;//[Offset: 0x2d8, Size: 0x10]// 0x75a8994980
	<int,AnimListMapValueData> AnimListEditMap;//[Offset: 0x2e8, Size: 0x50]// 0x75a79b7240
	float StandbyTimeOver;//[Offset: 0x338, Size: 0x4]// 0x75a80e84d0
	bool EnableStandbyAnimOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]// 0x75a8994a80
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]// 0x75a8994b00
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e, Size: 0x1]// 0x75a8994b80
	bool bNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f, Size: 0x1]// 0x75a8994c00
	void OnDynamicAnimAsyncLoadingFinished(DynamicLoadinigAnimAsynLoadParam LoadPrarm, SoftObjectPath TempPath);// 0x4eb9e78
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x4eb9cf0
	void InitDefaultDataForRuntimeCreate();// 0x4eb9cd4
	void InitDefaultData();// 0x4eb9cb8
	float GetStandbyTimeOver();// 0x4eb9c84
	bool GetEnableStandbyAnimOverride();// 0x4eb9c68
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x4eb9b98
	void AnimModifyByMask(int MaskValue);// 0x4eb9b14

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]// 0x7612223030
	FName AnimTypeName;//[Offset: 0x8, Size: 0x8]// 0x7612222fc0
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 0x38]// 0x7612222f40
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48, Size: 0x38]// 0x7612222ec0
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80, Size: 0x38]// 0x7612222c20

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 0x1]// 0x7612222e40
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]// 0x7612222dc0
	AnimationAsset* PoseAnim;//[Offset: 0x30, Size: 0x8]// 0x7612222d40

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 0x1]// 0x760d1fe280
	FName JumpTypeName;//[Offset: 0x8, Size: 0x8]// 0x760d2067e0
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 0x38]// 0x760d1fe300
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x48, Size: 0x38]// 0x760d1fe380
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x80, Size: 0x38]// 0x760d1fe400
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xb8, Size: 0x38]// 0x760d1fe480
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xf0, Size: 0x38]// 0x760d1fe680

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]// 0x760d1fe500
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]// 0x760d1fe580
	AnimationAsset* PhaseAnim;//[Offset: 0x30, Size: 0x8]// 0x760d1fe600

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 0x4]// 0x760d2069a0
	byte ModifyAnimListType;//[Offset: 0x4, Size: 0x1]// 0x760d1feb80
	byte AnimType;//[Offset: 0x5, Size: 0x1]// 0x760d1fec00
	byte PoseType;//[Offset: 0x6, Size: 0x1]// 0x760d1fec80
	byte JumpType;//[Offset: 0x7, Size: 0x1]// 0x760d1fed00
	byte JumpPhase;//[Offset: 0x8, Size: 0x1]// 0x760d1fed80
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]// 0x760d1fee00

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 0x1]// 0x760d230100
	int SeatIdx;//[Offset: 0x4, Size: 0x4]// 0x760d206a80
	byte VehicleAnimType;//[Offset: 0x8, Size: 0x1]// 0x760d230180
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 0x28]// 0x760d230200

--------------------------------
Class: DynamicLoadinigAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]// 0x760d230280
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x8, Size: 0x38]// 0x760d230300
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 0x38]// 0x760d230380
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x78, Size: 0x38]// 0x760d230400

--------------------------------
Class: DynamicLoadinigAnimAsynLoadParam

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	Vector2D screenCenter;//[Offset: 0x118, Size: 0x8]// 0x75a84c5980
	CDInfo CDInfo;//[Offset: 0x120, Size: 0xc]// 0x75a84c5a00
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x130, Size: 0x18]// 0x75a84c5a80
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0x148, Size: 0x18]// 0x75a84c5b00
	PlayerController* PlayerController;//[Offset: 0x160, Size: 0x8]// 0x75a84c5b80
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x168, Size: 0x8]// 0x75a84c5c00
	SurviveHUD* SurHUD;//[Offset: 0x170, Size: 0x8]// 0x75a84c5c80
	Actor*[] AllCharacters;//[Offset: 0x178, Size: 0x10]// 0x75a84c5d80
	byte EnemyRaycastReachChannel;//[Offset: 0x198, Size: 0x1]// 0x75a84c5e00
	byte SmokeChannel;//[Offset: 0x199, Size: 0x1]// 0x75a84c5e80
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x19c, Size: 0x4]// 0x760d1447f0
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x1a0, Size: 0x4]// 0x760d144860
	float DEFAULT_CD_TIME;//[Offset: 0x1a4, Size: 0x4]// 0x760d1448d0
	FName[] Bones;//[Offset: 0x240, Size: 0x10]// 0x75a84c5f00
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]// 0x75a84c5f80
	bool ReadAutoAimingConfigSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]// 0x75a84c6000
	STExtraBaseCharacter*[] CarriedPawns;//[Offset: 0x258, Size: 0x10]// 0x75a84c6100
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x268, Size: 0x8]// 0x75a84c6180
	void UpdateAutoAimInput(float DeltaSeconds, float Speed);// 0x48023b0
	void TryDoAiming(float DeltaTime);// 0x4802334
	void SetCD(float CDTime);// 0x48022b8
	void SelectAimTarget(float DeltaTime);// 0x480223c
	void RegisterCarryPawn(STExtraBaseCharacter* BeCarriedPawn, enum CarringState);// 0x4802184
	void OnUnEquipWeapon();// 0x4802170
	void OnShoot(STExtraWeapon* Weapon);// 0x48020f4
	void OnEquipWeapon();// 0x48020e0
	bool IsTeamMate(STExtraPlayerState* PlayerState, STExtraPlayerCharacter* Character);// 0x4802018
	bool isOpenFire();// 0x4801fe0
	bool IsCool();// 0x4801fa8
	void Init(Controller* Controller);// 0x4801f2c
	bool HoldFire();// 0x4801ef4
	Actor* GetCurSelectEnermy();// 0x4801ec0
	void FindInRangeEnemies(out AutoAimEnemyInfo[] InRangeEnemyList);// 0x4801e2c
	void FindBarrierFreeEnemy(out AutoAimEnemyInfo[] InRangeEnemyList);// 0x4801d98
	void ClearCD();// 0x4801d84
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x4801ca8
	bool CheckBuffStun();// 0x4801c70
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x4801b94

--------------------------------
Class: CDInfo
	float CDTime;//[Offset: 0x0, Size: 0x4]// 0x7612232ed0
	float FireTime;//[Offset: 0x4, Size: 0x4]// 0x7612232e60
	float followTime;//[Offset: 0x8, Size: 0x4]// 0x7612232df0

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 0x8]// 0x76122333f0
	float DisToScreenCenter;//[Offset: 0x8, Size: 0x4]// 0x7612233380
	Vector WorldLocation;//[Offset: 0xc, Size: 0xc]// 0x7612233300

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0x118, Size: 0x8]// 0x75a8160e80
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0x120, Size: 0x8]// 0x75a8160f00
	STExtraBaseCharacter* Target;//[Offset: 0x130, Size: 0x8]// 0x75a8160f80
	float CanFollowDist;//[Offset: 0x138, Size: 0x4]// 0x75a86b7040
	float QuitFollowAngleInput;//[Offset: 0x13c, Size: 0x4]// 0x75a86b70b0
	float QuitFollowDist;//[Offset: 0x140, Size: 0x4]// 0x75a86b7120
	float PointDensityTimeInterval;//[Offset: 0x144, Size: 0x4]// 0x75a86b7190
	float DistThrehold;//[Offset: 0x148, Size: 0x4]// 0x75a86b7200
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]// 0x75a8161000
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x150, Size: 0x8]// 0x75a8161080
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x158, Size: 0x8]// 0x75a8161100
	TargetKeyOperation*[] TargetOps;//[Offset: 0x198, Size: 0x10]// 0x75a8161200
	TargetKeyOperation* CurOp;//[Offset: 0x1a8, Size: 0x8]// 0x75a8161280
	bool WaitingConfirmState_IsConditionSatisfied();// 0x455af84
	void WaitingConfirmState_ActOnUnsatisfied();// 0x455af70
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x455aef4
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x455ae64
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x455ade8
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x455ad6c
	bool PlayerStopFollow();// 0x455ad34
	bool PlayerConfirmToFollow();// 0x455acfc
	void InitializeOwner(Pawn* _TempPawn);// 0x455ac80
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x455ac04
	bool FollowingState_IsConditionSatisfied();// 0x455abcc
	void FollowingState_ActOnUnsatisfied();// 0x455abb8
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x455ab3c

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x4705810
	byte Start();// 0x47057d4
	bool IsValidate();// 0x4705794
	void DebugDraw(Color debugColor, bool isPersist);// 0x47056d0
	void Awake();// 0x47056b4

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x80, Size: 0x8]// 0x75a85b6280
	STExtraBaseCharacter* Target;//[Offset: 0x88, Size: 0x8]// 0x75a85b6300
	byte Update(float DeltaTime);// 0x47045dc
	FString ToString();// 0x4704500
	void TaskRemoved();// 0x47044e4
	byte Start();// 0x47044a8
	bool IsValidate();// 0x4704468
	bool IsReachable();// 0x4704428
	byte Finish();// 0x47043ec
	void DebugDraw(Color debugColor, bool isPersist);// 0x4704328
	void Awake();// 0x470430c

--------------------------------
Class: STNewCharacterFollowComp.ActorComponent.Object
	int FollowStopDist;//[Offset: 0x158, Size: 0x4]// 0x75a85d9f60
	int TurnaroundSpeedScale;//[Offset: 0x15c, Size: 0x4]// 0x75a85d9fd0
	int TurnaroundAngleThreshold;//[Offset: 0x160, Size: 0x4]// 0x75a85da040
	bool bStartTurnInstantly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]// 0x75a85c2a80
	bool bNeedCorrectDirWhenFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 0x1]// 0x75a85c2b00
	FollowTargetTransferAreaItem[] FollowTargetTransferAreaList;//[Offset: 0x168, Size: 0x10]// 0x75a85c2c00
	SelfFollowLimitAreaItem[] SelfFollowLimitAreaList;//[Offset: 0x178, Size: 0x10]// 0x75a85c2d00
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x188, Size: 0x8]// 0x75a85c2d80
	STExtraPlayerController* OwnerController;//[Offset: 0x190, Size: 0x8]// 0x75a85c2e00
	void RPC_Server_StartFollowWithPlayerKey(uint32 PlayerKey);// 0x46eb078
	void RPC_Client_PreFollow(Vector followPos);// 0x46eafc0
	void OnCharacterMoveBlock(STExtraCharacter* BlockedCharacter, out const HitResult HitResult);// 0x46eaee4

--------------------------------
Class: FollowTargetTransferAreaItem
	Vector TopLeftVec;//[Offset: 0x0, Size: 0xc]// 0x76122031c0
	Vector BottomRightVec;//[Offset: 0xc, Size: 0xc]// 0x7612203140
	Vector TransferVec;//[Offset: 0x18, Size: 0xc]// 0x76122030c0

--------------------------------
Class: SelfFollowLimitAreaItem
	Vector TopLeftVec;//[Offset: 0x0, Size: 0xc]// 0x7612203360
	Vector BottomRightVec;//[Offset: 0xc, Size: 0xc]// 0x76122032e0

--------------------------------
Class: GiftTypeData
	byte GiftType;//[Offset: 0x0, Size: 0x1]// 0x7611ecb480
	int GiftSubType;//[Offset: 0x4, Size: 0x4]// 0x7611ecb410

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x520, Size: 0x4]// 0x7611549ab0
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]// 0x75d0b19980
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]// 0x75d0b19a00
	RoastMeatActor* curRoastMeat;//[Offset: 0x528, Size: 0x8]// 0x75d0b19a80
	void RemingLifeTimeChanged(float previousRemaining);// 0x41f5bb8
	void RecordBonFireSuccess();// 0x41f5ba4
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x41f5b28
	void OnRep_HasBurnOut();// 0x41f5b14
	void OnRep_HasBeenLit();// 0x41f5b00
	void OnRep_CurRoastMeat();// 0x41f5aec
	void IsBurnOutChanged();// 0x41f5ad0
	FString CastMsg_Implementation(FString Msg);// 0x41f59ec

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x510, Size: 0x8]// 0x75d0b19b00
	Controller* GetTheInstigatorController();// 0x4eb7564

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x510, Size: 0x8]// 0x75b4cc6b00
	enum AnimalType;//[Offset: 0x518, Size: 0x1]// 0x75b4cc6c00
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1]// 0x75b4cc6c80
	void RecordRoastMeatSuccess();// 0x44f5fe8
	void OnRep_IsDone();// 0x44f5fd4
	void CastActorMsg(FString Msg);// 0x44f5f48

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x558, Size: 0x4]// 0x75b4e06b20
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]// 0x75b4ddaf80
	enum PerspectiveMode;//[Offset: 0x569, Size: 0x1]// 0x75b4ddb080
	<enum,SpringArmParams> PerspectiveModeSpringArmParamMaps;//[Offset: 0x570, Size: 0x50]// 0x75b4dc2ec0
	SpringArmModifierTPP* ModifierTPP;//[Offset: 0x5c0, Size: 0x8]// 0x75b4ddb280
	class SpringArmModifier* ModifierTPPTemplate;//[Offset: 0x5c8, Size: 0x8]// 0x75b4ddb300
	SpringArmModifierFPP* ModifierFPP;//[Offset: 0x5d0, Size: 0x8]// 0x75b4ddb380
	class SpringArmModifier* ModifierFPPTemplate;//[Offset: 0x5d8, Size: 0x8]// 0x75b4ddb400
	SpringArmFreeCamera* FreeCamera;//[Offset: 0x5e0, Size: 0x8]// 0x75b4ddb480
	class SpringArmFreeCamera* FreeCameraTemplate;//[Offset: 0x5e8, Size: 0x8]// 0x75b4ddb500
	float FreeCamRotationReturnRate;//[Offset: 0x5f0, Size: 0x4]// 0x75b4e06b90
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]// 0x75b4ddb580
	CameraOffsetData ShoulderCameraData;//[Offset: 0x608, Size: 0x90]// 0x75b4ddb600
	bool bViewAtActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]// 0x75b4ddb680
	Rotator CameraRelativeActorRot;//[Offset: 0x72c, Size: 0xc]// 0x75b4ddb700
	Vector CameraRelativeActorLoc;//[Offset: 0x738, Size: 0xc]// 0x75b4ddb780
	Vector2D SocketOffsetPitchHipMapIn;//[Offset: 0x74c, Size: 0x8]// 0x75b4ddb800
	Vector2D SocketOffsetPitchHipMapOut;//[Offset: 0x754, Size: 0x8]// 0x75b4ddb880
	Vector2D SocketOffsetZRatioLengthMapIn;//[Offset: 0x75c, Size: 0x8]// 0x75b4ddb900
	Vector2D SocketOffsetZRatioLengthMapOut;//[Offset: 0x764, Size: 0x8]// 0x75b4ddb980
	Vector DefaultSocketOffset;//[Offset: 0x76c, Size: 0xc]// 0x75b4ddba00
	float SpringArmRestoreInterpSpeed;//[Offset: 0x778, Size: 0x4]// 0x75b4e06c00
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 0x1]// 0x75b4ddba80
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x788, Size: 0x8]// 0x75b4ddbb00
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x790, Size: 0x4]// 0x75b4e06c70
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x794, Size: 0x4]// 0x75b4e06ce0
	Actor* ResultActor;//[Offset: 0x798, Size: 0x8]// 0x75b4ddbb80
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 0x1]// 0x75b4ddbc00
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a2, Size: 0x1]// 0x75b4ddbc80
	float OffsetCountTime;//[Offset: 0x7a4, Size: 0x4]// 0x75b4e06d50
	float OffSetDurTime;//[Offset: 0x7a8, Size: 0x4]// 0x75b4e06dc0
	float RevertMoveSpeed;//[Offset: 0x7ac, Size: 0x4]// 0x75b4e06e30
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x7b0, Size: 0x8]// 0x75b4ddbd00
	Transform PrevRelativeTrans;//[Offset: 0x7c0, Size: 0x30]// 0x75b4ddbd80
	Vector PrevRelativeSocketLocation;//[Offset: 0x7f0, Size: 0xc]// 0x75b4ddbe00
	Quat PrevRelativeSocketRotation;//[Offset: 0x800, Size: 0x10]// 0x75b4ddbe80
	bool PrevCameraUseControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]// 0x75b4ddbf00
	bool bBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x811, Size: 0x1]// 0x75b4ddbf80
	void SetShoulderCameraMode(bool bShoulder);// 0x429c6a0
	void SetFPPCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x429c5e0
	void SetCustomCameraDataValueEnable(CameraOffsetData CustomCameraData, bool IsEnable);// 0x429c3fc
	void SetCustomCameraDataEnable(out const CameraOffsetData CustomCameraData, bool IsEnable);// 0x429c278
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x429c1b8
	bool GetUsePawnControlRotation();// 0x429c180
	SpringArmModifier* GetModifierByPerspectiveMode(enum Mode);// 0x429c0f4
	void EnterLandingHeavy();// 0x429c0e0
	void DelayRotationLagEnabledEnd();// 0x429c0cc
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x429c004

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x3a8, Size: 0x4]// 0x75b4e06f10
	float TargetOffsetInterpSpeed;//[Offset: 0x3ac, Size: 0x4]// 0x75b4e06f80
	float ArmLengthInterpSpeed;//[Offset: 0x3b0, Size: 0x4]// 0x75b4e06ff0
	CameraOffsetData CurCameraData;//[Offset: 0x3f0, Size: 0x90]// 0x75b4ddc880
	CameraOffsetData DefaultCameraData;//[Offset: 0x480, Size: 0x90]// 0x75b4ddc900
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]// 0x75b4ddc980
	PlayerController* CachedPC;//[Offset: 0x518, Size: 0x8]// 0x75b4ddca00
	SpringArmModifier* CurModifier;//[Offset: 0x520, Size: 0x8]// 0x75b4ddca80
	Rotator AddtiveRotation;//[Offset: 0x528, Size: 0xc]// 0x75b4ddcb00
	Actor*[] CachedIgonreActor;//[Offset: 0x538, Size: 0x10]// 0x75b4ddcc00
	PrimitiveComponent*[] CachedIgonrePrimitiveComponent;//[Offset: 0x548, Size: 0x10]// 0x75b4ddcd00
	void SetAddtiveRotation(Rotator Rotator);// 0x46bb2fc
	void RemoveIgonreComponent(PrimitiveComponent* Compoent);// 0x46bb280
	void RemoveIgonreActor(Actor* Actor);// 0x46bb204
	Rotator GetTargetRotation();// 0x46bb1c4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x46bb06c
	void ClearCameraData();// 0x46bb050
	void AddIgonreComponent(PrimitiveComponent* Compoent);// 0x46bafd4
	void AddIgonreActor(Actor* Actor);// 0x46baf58

--------------------------------
Class: SpringArmModifierTPP.SpringArmModifier.Object
	float AdditionalSocketOffetZMax;//[Offset: 0x194, Size: 0x4]// 0x75a86bedd0
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x198, Size: 0x8]// 0x75a86da180
	float CurrentAdditionalSocketOffetZ;//[Offset: 0x1a0, Size: 0x4]// 0x75a86bee40
	bool UpdateCurCameraDataTPPBlueprint(float DeltaTime);// 0xffffff8a17adf2b0
	void UpdateCurCameraData(float DeltaTime);// 0x45488b4
	bool SetCameraDataEnableBlueprint(enum CameraDataType, bool IsEnable);// 0xffffff8a17adf2b0
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x45487f4

--------------------------------
Class: SpringArmModifierFPP.SpringArmModifier.Object
	bool SetFPPCameraDataEnableBlueprint(enum CameraDataType, bool IsEnable);// 0xffffff8a17adf2b0
	void SetFPPCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x454833c

--------------------------------
Class: SpringArmFreeCamera.Object
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]// 0x75a86db980
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]// 0x75a86dba00
	float ResultMinPitch;//[Offset: 0x38, Size: 0x4]// 0x75a86bf770
	float ResultMaxPitch;//[Offset: 0x3c, Size: 0x4]// 0x75a86bf7e0
	SpringArmComponent* SpringArmComp;//[Offset: 0x40, Size: 0x8]// 0x75a86dba80
	float FreeCamRotationReturnRate;//[Offset: 0x48, Size: 0x4]// 0x75a86bf850

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 0x4]// 0x7611ebef40
	Vector AkLocation;//[Offset: 0x4, Size: 0xc]// 0x7611ebeec0

--------------------------------
Class: DamageCauserRecordData
	Controller* causer;//[Offset: 0x0, Size: 0x8]// 0x7611ebb180
	float Time;//[Offset: 0x8, Size: 0x4]// 0x7611ebb110
	float Damage;//[Offset: 0xc, Size: 0x4]// 0x7611ebb0a0
	int StatusChangeMargin;//[Offset: 0x10, Size: 0x4]// 0x7611ebb030
	int DamageType;//[Offset: 0x14, Size: 0x4]// 0x7611ebafc0
	int AdditionalParam;//[Offset: 0x18, Size: 0x4]// 0x7611ebaf50

--------------------------------
Class: ObserverSmoothComponent.ActorComponent.Object
	float SmoothNetUpdateLocationTime;//[Offset: 0x158, Size: 0x4]// 0x75a8872db0
	float SmoothNetUpdateRotationTime;//[Offset: 0x15c, Size: 0x4]// 0x75a8872e20
	float SmoothNetLocationTolerate;//[Offset: 0x160, Size: 0x4]// 0x75a8872e90
	float SmoothNetRotationTolerate;//[Offset: 0x164, Size: 0x4]// 0x75a8872f00
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x168, Size: 0x188]// 0x75a8441980
	bool bIsOpenExceededDSMaxDisLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]// 0x75a8441a00
	float ExceededDSMaxDisLimit;//[Offset: 0x2f4, Size: 0x4]// 0x75a8872f70
	float ZToFloorInterpSpeed;//[Offset: 0x2f8, Size: 0x4]// 0x75a8872fe0
	bool bIsOpenInterpToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]// 0x75a8441a80
	bool bIsOpenZToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]// 0x75a8441b00
	float MoveAlongFloorCheckMaxZDis;//[Offset: 0x300, Size: 0x4]// 0x75a8873050
	float CanMoveAlongFloorOffsetZ;//[Offset: 0x304, Size: 0x4]// 0x75a88730c0
	bool bIsOpenNotFloorZToServerZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]// 0x75a8441b80
	void OnRespawned();// 0x445cf94
	void OnRecycled();// 0x445cf78

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 0x4]// 0x7611ebdf90
	int AnchorPlatColorID;//[Offset: 0x4, Size: 0x4]// 0x7611ebdf20

--------------------------------
Class: CustomMovementRepData
	float Energy;//[Offset: 0x0, Size: 0x4]// 0x7611ebd3b0
	float BurstElapsedTime;//[Offset: 0x4, Size: 0x4]// 0x7611ebd340
	float JetElapsedTime;//[Offset: 0x8, Size: 0x4]// 0x7611ebd2d0

--------------------------------
Class: CustomSimulateMovementRepData
	int MoveMode;//[Offset: 0x0, Size: 0x4]// 0x7611ebd140

--------------------------------
Class: DamageReductionComponent.ActorComponent.Object
	<int,DamageReductionRule> DamageReductionMap;//[Offset: 0x118, Size: 0x50]// 0x75b4dbc140
	int DamageReductionKey;//[Offset: 0x168, Size: 0x4]// 0x75b4db2cf0
	void RemoveDamageReductionData(int Key);// 0x42a9104
	float DamageReductionByAction(float UntreatedDamage, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x42a8fe0
	int AddDamageReductionData(out DamageReductionRule Rule, int Key);// 0x42a8ec8

--------------------------------
Class: DamageReductionRule
	byte[] DamageTypeEnums;//[Offset: 0x0, Size: 0x10]// 0x7611e5f5f0
	class DamageType[] DamageTypeClasses;//[Offset: 0x10, Size: 0x10]// 0x7611e5f4f0
	class Object[] DamageCauserClasses;//[Offset: 0x20, Size: 0x10]// 0x7611e5f3f0
	float DamageReductionValue;//[Offset: 0x30, Size: 0x4]// 0x7611e5f380
	bool bIsMultiplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]// 0x7611e5f300
	bool bBasedOnBasicValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]// 0x7611e5f280

--------------------------------
Class: FootprintActorArrayInfo
	Transform[] CachedTransform;//[Offset: 0x0, Size: 0x10]// 0x7611ebc770

--------------------------------
Class: EmoteComponent.ActorComponent.Object
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x118, Size: 0x50]// 0x75b4d2e640
	bool bIsDebugCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]// 0x75b4d39400
	int CurrentPlayEmoteID;//[Offset: 0x16c, Size: 0x4]// 0x75b4d20970
	bool bIsCurrentEmoteCostSpecMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]// 0x75b4d39480
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x174, Size: 0x8]// 0x75b4d39500
	EmoteHitActor* EmoteHitActor;//[Offset: 0x180, Size: 0x8]// 0x75b4d39580
	EmoteSequenceInfo CurrentPlayEmoteSequence;//[Offset: 0x188, Size: 0x18]// 0x75b4d39600
	EmoteSequenceInfo NextPlayEmoteSequence;//[Offset: 0x1a0, Size: 0x18]// 0x75b4d39680
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1b8, Size: 0x8]// 0x75b4d39700
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1c0, Size: 0x4]// 0x75b4d209e0
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x1c4, Size: 0xc]// 0x75b4d39780
	STExtraBaseCharacter* InviteEmotePlayerPawn;//[Offset: 0x248, Size: 0x8]// 0x75b4d39800
	NetEmoteData NetEmoteData;//[Offset: 0x320, Size: 0x1]// 0x75b4d39880
	byte RepDisconnect;//[Offset: 0x321, Size: 0x1]// 0x75b4d39900
	bool StopPlayEmoteAnim(int EmoteID);// 0x42e0ba0
	void StopEmoteAnimTimer();// 0x42e0b8c
	bool StartPlayEmoteAnim(int EmoteID, bool IsCanCostSpecMotion);// 0x42e0ab8
	void StartEmoteAnimTimer(float AnimLength, float AnimRate);// 0x42e0a04
	void SetNetEmoteDataDirty();// 0x42e09f0
	void ReqStartPlaySkillEmote(int EmoteID, bool OpenCostSpec);// 0x42e08ec
	void ReqStartPlayEmote(int EmoteID, bool OpenCostSpec);// 0x42e07e8
	void ReqStartFollowPlayEmote(int EmoteID, uint32 FollowPlayer, bool IsCanCostSpecMotion);// 0x42e06ac
	void ReqSetEmoteAnimationRate(float Rate);// 0x42e05fc
	void ReqReplaceEmoteSuitSkin(int Index);// 0x42e054c
	void ReqRefuseInvitePlayPairEmote(int EmoteID);// 0x42e049c
	void ReqRecoverEmoteSuitSkin(int Index);// 0x42e03ec
	void ReqRecoverEmoteAnimationRate();// 0x42e038c
	void ReqReceiveInvitePlayPairEmote(int EmoteID, uint32 InvitePlayer);// 0x42e02a4
	void ReqInvitePlayPairEmote(int EmoteID, uint32 PairPlayer);// 0x42e01bc
	void ReqInterruptPlayEmote(int EmoteID);// 0x42e010c
	void ReqInterruptOtherPlayerPlayEmote(uint32 OtherPlayer, int EmoteID);// 0x42e0024
	void ReqEmotePlayFinished(int EmoteID);// 0x42dff74
	void ReqAcceptPlayPairEmote(int EmoteID, uint32 InvitePlayer);// 0x42dfe8c
	void PlayEmoteClient(int EmoteID);// 0x42dfe08
	void OnSetEmoteAnimationRate(float Rate);// 0x42dfd8c
	int OnReplaceEmoteSuitSkin();// 0x42dfd58
	void OnRep_RepDisconnect();// 0x42dfd44
	void OnRep_NetEmoteData();// 0x42dfd30
	void OnRecoverEmoteSuitSkin();// 0x42dfd1c
	void OnRecoverEmoteAnimationRate();// 0x42dfd08
	void OnPlayerOpenDoor(PUBGDoor* Door, int DoorState);// 0x42dfc50
	void OnPlayEmoteSequence(out const int[] PlayEmoteIDList, bool Loop);// 0x42dfb68
	void OnPlayEmoteReplayClient(int EmoteID);// 0x42dfaec
	void OnPlayEmote(int EmoteID, bool bCallBySequence);// 0x42dfa2c
	void OnPairEmoteItemHandleListLoaded(out const BattleItemHandleBase*[] handleList, int RequestID);// 0x42df94c
	void OnInterruptCurrentEmote();// 0x42df938
	void OnFollowNearPlayerEmote();// 0x42df924
	void OnEndCurrentEmote(int EmoteID, enum EndReason);// 0x42df86c
	void OnEmoteSequenceItemHandleListLoaded(out const BattleItemHandleBase*[] handleList, int RequestID);// 0x42df78c
	void OnCharacterAvatarLoadFinish(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x42df6d4
	void OnBubbleAssetLoaded(ParticleSystem* LoadedFX);// 0x42df5e4
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim);// 0x42df4f4
	void OnAcceptPlayPairEmote();// 0x42df4e0
	void MulticastStartPlayEmote(int EmoteID, bool IsCanCostSpecMotion, float Rate);// 0x42df39c
	void MulticastStartPairPlayEmote(int EmoteID, int PairEmoteID, uint32 PairPlayer);// 0x42df274
	void MulticastStartFollowPlayEmote(int EmoteID, uint32 FollowPlayer, bool IsCanCostSpecMotion);// 0x42df138
	void MulticastSetEmoteAnimationRate(float Rate);// 0x42df088
	void MulticastInterruptPlayEmote(int EmoteID);// 0x42defd8
	bool LocalStartPlaySkillEmote(int EmoteID, bool bOpenCost);// 0x42def04
	bool LocalStartPlayPairEmote(int EmoteID, bool bOpenCost);// 0x42dee30
	bool LocalStartPlayEmote(int EmoteID, bool bOpenCost);// 0x42ded5c
	bool LocalStartFollowPlayEmote(int EmoteID, uint32 FollowPlayer, bool IsCanCostSpecMotion);// 0x42dec50
	bool LocalInterruptPlayEmote(int EmoteID);// 0x42debc0
	bool IsPlayingEmoteSequence();// 0x42deb88
	bool IsPlayingEmote();// 0x42deb50
	bool IsEnableSetEmoteAnimationRate();// 0x42deb18
	bool IsCurrentEmoteCostSpecMotion();// 0x42deafc
	bool IsCanPlayEmote(int EmoteID);// 0x42dea6c
	void InitializeOwner(Pawn* TempPawn);// 0x42de9f0
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x42de974
	void HandleAcceptPairEmoteCloseWeapon(byte TargetChangeSlot);// 0x42de8f8
	int GetNextEmoteSuitSKinIndex();// 0x42de8c4
	int GetEmoteSuitSKinShowNumber();// 0x42de890
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x42de804
	int GetCurrentPlayEmoteID();// 0x42de7e8
	AnimMontage* GetCurPlayingEmote();// 0x42de7b4
	void FinishEmoteAnim(int EmoteID, enum EndReason);// 0x42de6fc
	void EnableFollowPlayEmote(bool Enable);// 0x42de678
	bool EmoteAnimFinishedSuccessfully();// 0x42de640
	void CostEmoteSpecMotion(bool IsCost, int ItemID);// 0x42de578

--------------------------------
Class: EmoteHitActor.Actor.Object
	BoxComponent* HitBoxComponent;//[Offset: 0x550, Size: 0x8]// 0x75b4d3b180

--------------------------------
Class: EmoteSequenceInfo
	int[] EmoteIDList;//[Offset: 0x0, Size: 0x10]// 0x7612187790
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x7612187710

--------------------------------
Class: LastEmoteInfo
	int EmoteID;//[Offset: 0x0, Size: 0x4]// 0x7612187b20
	int AreaID;//[Offset: 0x4, Size: 0x4]// 0x7612187ab0
	float EmoteTime;//[Offset: 0x8, Size: 0x4]// 0x7612187a40

--------------------------------
Class: NetEmoteData
	byte RepStamp;//[Offset: 0x0, Size: 0x1]// 0x7612187920

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	<enum,Vector2D> TraceRotPitchLimitConfigMap;//[Offset: 0x158, Size: 0x50]// 0x75a840d300
	float DetectInterval;//[Offset: 0x1a8, Size: 0x4]// 0x75a83f6c30
	int DetectThreshold;//[Offset: 0x1ac, Size: 0x4]// 0x75a83f6ca0
	float FoldFactor;//[Offset: 0x1b0, Size: 0x4]// 0x75a83f6d10
	STExtraBaseCharacter* pCharOwner;//[Offset: 0x1b8, Size: 0x8]// 0x75a83d1d80
	byte BlockChannel;//[Offset: 0x1c5, Size: 0x1]// 0x75a83d1e00
	Vector BoxHalfSize;//[Offset: 0x1c8, Size: 0xc]// 0x75a83d1e80
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x1d4, Size: 0xc]// 0x75a83d1f00
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x1e0, Size: 0xc]// 0x75a83d1f80
	Vector QEoffsetPeekLeft;//[Offset: 0x1ec, Size: 0xc]// 0x75a83d2000
	Vector QEoffsetPeekRight;//[Offset: 0x1f8, Size: 0xc]// 0x75a83d2080
	float StaticTraceLengthOffset;//[Offset: 0x204, Size: 0x4]// 0x75a83f6d80
	Vector QEoffsetPeekStandAdd;//[Offset: 0x208, Size: 0xc]// 0x75a83d2100
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x214, Size: 0xc]// 0x75a83d2180
	Vector QEoffsetPeekProneAdd;//[Offset: 0x220, Size: 0xc]// 0x75a83d2200
	int FoldFactorDelt;//[Offset: 0x22c, Size: 0x4]// 0x75a83f6df0
	int FoldFactorDeltChange;//[Offset: 0x230, Size: 0x4]// 0x75a83f6e60
	float TraceDisOffset;//[Offset: 0x234, Size: 0x4]// 0x75a83f6ed0
	float TraceDisForSfate;//[Offset: 0x238, Size: 0x4]// 0x75a83f6f40
	float TickDeltTime;//[Offset: 0x23c, Size: 0x4]// 0x75a83f6fb0
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x4491994
	void OnReconnectOnClient();// 0x4491980
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x449183c

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x118, Size: 0x10]// 0x75a881d500
	float SwimWaterSufaceOffset;//[Offset: 0x128, Size: 0x4]// 0x75a83f3890
	float OnVehicleWaterSufaceOffset;//[Offset: 0x12c, Size: 0x4]// 0x75a83f3900
	float DistoVolume;//[Offset: 0x130, Size: 0x4]// 0x75a83f3970
	float UpdateMeshZOffsetWithTheWaves;//[Offset: 0x134, Size: 0x4]// 0x75a83f39e0
	float MaxBreathAmount;//[Offset: 0x138, Size: 0x4]// 0x75a83f3a50
	float DrowningHurtHight;//[Offset: 0x13c, Size: 0x4]// 0x75a83f3ac0
	float BreathVauleChangeoffset;//[Offset: 0x140, Size: 0x4]// 0x75a83f3b30
	float OpBreathVauleChangeoffset;//[Offset: 0x144, Size: 0x4]// 0x75a83f3ba0
	float BreathDeltaTime;//[Offset: 0x148, Size: 0x4]// 0x75a83f3c10
	float MaxSpeedScaleHeightOffset;//[Offset: 0x14c, Size: 0x4]// 0x75a83f3c80
	float MinSpeedScale;//[Offset: 0x150, Size: 0x4]// 0x75a83f3cf0
	float MaxCrouchWaterHeight;//[Offset: 0x154, Size: 0x4]// 0x75a83f3d60
	float MaxProneWaterHeight;//[Offset: 0x158, Size: 0x4]// 0x75a83f3dd0
	float DeadInWaterLocZOffset;//[Offset: 0x15c, Size: 0x4]// 0x75a83f3e40
	float RollMaxAngle;//[Offset: 0x160, Size: 0x4]// 0x75a83f3eb0
	float UpdateMeshZWithTheWavesInterpolationSpeed;//[Offset: 0x164, Size: 0x4]// 0x75a83f3f20
	float UpdateMeshZWithTheWavesRatio;//[Offset: 0x168, Size: 0x4]// 0x75a83f3f90
	bool bIsUpdatingMeshZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]// 0x75a881d580
	bool bEnableConsumeBreathAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]// 0x75a881d600
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x188, Size: 0x8]// 0x75a881d680
	void UpdateSwimCollisionHeightCpp();// 0x449db78
	void LeaveWater();// 0x449db64
	Actor* GetWaterObject();// 0x449db30
	void EnterWater_BluePrint();// 0xffffff8a17adf2b0
	void EnterWater(Actor* WaterObject);// 0x449dab4

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 0x4]// 0x7611eba720
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 0x4]// 0x7611eba6b0
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 0x4]// 0x7611eba640
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 0x4]// 0x7611eba5d0

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x30, Size: 0x8]// 0x75d0b5b580

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x28, Size: 0x8]// 0x75d0b5b600

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x85c, Size: 0x4]// 0x75b4ebc310
	float AttachCheckDistance;//[Offset: 0x860, Size: 0x4]// 0x75b4ebc380
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x864, Size: 0x4]// 0x75b4ebc3f0
	int RefreshUITimesAfterReconnect;//[Offset: 0x868, Size: 0x4]// 0x75b4ebc460
	float WeaponReconnectStuckAutoRecoverInterval;//[Offset: 0x86c, Size: 0x4]// 0x75b4ebc4d0
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x870, Size: 0x8]// 0x75b4e8d100
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x890, Size: 0x10]// 0x75b4e8d200
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x8a0, Size: 0x10]// 0x75b4e8d300
	void UpdateDataWhenFinishPickInitialItemOnServer();// 0x42598ec
	void UpdateDataWhenBagChangedOnServer(out const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x42597d8
	void OnRecoverOnServer();// 0x42597bc
	void OnReconnectOnServer();// 0x42597a0
	void OnReconnectOnClient();// 0x4259784
	void OnDisconnectToClientOnServer();// 0x4259770
	void LocalUpdateDataWhenBagChanged();// 0x425975c
	int GetBagLevel();// 0x4259720
	void ForceUpdateWeaponPoseByBagLevelOnServer();// 0x4259704
	void ForceClearClientCreateWeaponCacheFinishToServer();// 0x42596a4
	void ForceClearClientCreateWeaponCache();// 0x4259644
	void ClearAllInventoryData();// 0x4259628
	void BuildWeaponReconnectData(byte Slot, int OpIndex);// 0x4259570

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 0x58]// 0x761216a200
	STExtraWeapon* Weapon;//[Offset: 0x58, Size: 0x8]// 0x761216a180

--------------------------------
Class: PlayerVehAnimList
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 0x8]// 0x7611e7cae0
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x10, Size: 0x8]// 0x7611e7ca60
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x18, Size: 0x8]// 0x7611e7c9e0
	AnimationAsset* VacateMotorbikeWithPassengerAnim;//[Offset: 0x20, Size: 0x8]// 0x7611e7c960
	AnimationAsset* IdleMotorBikeDirverLeaningAnim;//[Offset: 0x28, Size: 0x8]// 0x7611e7c8e0
	AnimationAsset* IdleMotorBikeDirverLeaningLowSpeedAnim;//[Offset: 0x30, Size: 0x8]// 0x7611e7c860
	AnimationAsset* IdleMotorBikeDirverLeaningWithPassengerAnim;//[Offset: 0x38, Size: 0x8]// 0x7611e7c7e0
	AnimationAsset* MotorBikeDirverLeaningGroundPitchAnim;//[Offset: 0x40, Size: 0x8]// 0x7611e7c760
	AnimationAsset* PassengerMotorBikeNoDirverAnim;//[Offset: 0x48, Size: 0x8]// 0x7611e7c6e0
	AnimationAsset* PassengerMotorBikeIdleLeaningAnim;//[Offset: 0x50, Size: 0x8]// 0x7611e7c660
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOffAnim;//[Offset: 0x58, Size: 0x8]// 0x7611e7c5e0
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOnAnim;//[Offset: 0x60, Size: 0x8]// 0x7611e7c560
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOffAnim;//[Offset: 0x68, Size: 0x8]// 0x7611e7c4e0
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOnAnim;//[Offset: 0x70, Size: 0x8]// 0x7611e7c460
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOffAnim;//[Offset: 0x78, Size: 0x8]// 0x7611e7c3e0
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOnAnim;//[Offset: 0x80, Size: 0x8]// 0x7611e7c360
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOffAnim;//[Offset: 0x88, Size: 0x8]// 0x7611e7c2e0
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOnAnim;//[Offset: 0x90, Size: 0x8]// 0x7611e7c260
	AnimationAsset* PassengerDriverOffAimAim;//[Offset: 0x98, Size: 0x8]// 0x7611e7c1e0
	AnimationAsset* LeanOutAnim;//[Offset: 0xa0, Size: 0x8]// 0x7611e7c160
	AnimationAsset* LeanInAnim;//[Offset: 0xa8, Size: 0x8]// 0x7611e7c0e0
	AnimationAsset* AimAnim;//[Offset: 0xb0, Size: 0x8]// 0x7611e7c060
	AnimationAsset* WeaponIdleAddition;//[Offset: 0xb8, Size: 0x8]// 0x7611e7bfe0
	AnimationAsset* WeaponAimAddition;//[Offset: 0xc0, Size: 0x8]// 0x7611e7bf60
	AnimationAsset* WeaponReloadAddition;//[Offset: 0xc8, Size: 0x8]// 0x7611e7bee0
	AnimationAsset* MountainBikeSprintAnim;//[Offset: 0xd0, Size: 0x8]// 0x7611e7be60
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0xd8, Size: 0x8]// 0x7611e7bde0
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0xe0, Size: 0x8]// 0x7611e7bd60
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0xe8, Size: 0x8]// 0x7611e7bce0
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0xf0, Size: 0x8]// 0x7611e7bc60
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0xf8, Size: 0x8]// 0x7611e7bbe0
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x100, Size: 0x8]// 0x7611e7bb60
	AnimationAsset* SurfBoard_ProneAnim;//[Offset: 0x108, Size: 0x8]// 0x7611e7bae0
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x110, Size: 0x8]// 0x7611e7ba60
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x118, Size: 0x8]// 0x7611e7b9e0
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x120, Size: 0x8]// 0x7611e7b960
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x128, Size: 0x8]// 0x7611e7b8e0
	AnimationAsset* Ski_Falling;//[Offset: 0x130, Size: 0x8]// 0x7611e7b860
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x138, Size: 0x8]// 0x7611e7b7e0
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x140, Size: 0x8]// 0x7611e7b760
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x148, Size: 0x8]// 0x7611e7b6e0
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x150, Size: 0x8]// 0x7611e7b660
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x158, Size: 0x8]// 0x7611e7b5e0
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0x160, Size: 0x8]// 0x7611e7b560
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0x168, Size: 0x8]// 0x7611e7b4e0
	AnimationAsset* BalloonManAnim;//[Offset: 0x170, Size: 0x8]// 0x7611e7b460
	AnimationAsset* BalloonCPManAnim;//[Offset: 0x178, Size: 0x8]// 0x7611e7b3e0
	AnimationAsset* BalloonWomanAnim;//[Offset: 0x180, Size: 0x8]// 0x7611e7b360
	AnimationAsset* BalloonCPWomanAnim;//[Offset: 0x188, Size: 0x8]// 0x7611e7b2e0

--------------------------------
Class: AnimVehParamList
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x7611e7d440
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x7611e7d3c0
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x7611e7d340
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]// 0x7611e7d2c0
	float VacateHight;//[Offset: 0x4, Size: 0x4]// 0x7611e7d250
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611e7d1d0
	Rotator VehViewRotation;//[Offset: 0xc, Size: 0xc]// 0x7611e7d150
	Vector VehMoveVelocity;//[Offset: 0x18, Size: 0xc]// 0x7611e7d0d0
	byte SeatWeaponHoldType;//[Offset: 0x24, Size: 0x1]// 0x7611e7cff0
	byte SeatSpecialType;//[Offset: 0x25, Size: 0x1]// 0x7611e7cf10
	enum VehicleType;//[Offset: 0x26, Size: 0x1]// 0x7611e7cdb0
	float LeanOutPercentage;//[Offset: 0x28, Size: 0x4]// 0x7611e7cd40

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x20, Size: 0x8]// 0x7611eb9cf0

--------------------------------
Class: DamageScale
	int[] TypeIDs;//[Offset: 0x0, Size: 0x10]// 0x7611eb8d00
	float DamageScale;//[Offset: 0x10, Size: 0x4]// 0x7611eb8c90

--------------------------------
Class: BodyPartCfg
	float Durability;//[Offset: 0x0, Size: 0x4]// 0x7611eb89e0
	float DamageReduceScale;//[Offset: 0x4, Size: 0x4]// 0x7611eb8970
	FString BodyDurabilityIndexName;//[Offset: 0x8, Size: 0x10]// 0x7611eb8900
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x18, Size: 0x8]// 0x7611eb8880
	FName HitEffectTagOverride;//[Offset: 0x20, Size: 0x8]// 0x7611eb8810
	bool bDamageReduceScaleClamped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x7611eb8790

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 0x10]// 0x7611e75d30
	float EnergyMax;//[Offset: 0x10, Size: 0x4]// 0x7611e75cc0
	float EnergyCurrent;//[Offset: 0x14, Size: 0x4]// 0x7611e75c50
	float AttenuationPeriod;//[Offset: 0x18, Size: 0x4]// 0x7611e75be0
	float AttenuationAmount;//[Offset: 0x1c, Size: 0x4]// 0x7611e75b70

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 0x4]// 0x7611e75f40
	FName BuffName;//[Offset: 0x8, Size: 0x8]// 0x7611e75ed0

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x160, Size: 0x4]// 0x75a8136930

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0x118, Size: 0x14]// 0x75a8162900
	float ReturnToFindNewTimer;//[Offset: 0x12c, Size: 0x4]// 0x75a86b7890
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x134, Size: 0x8]// 0x75a8162980
	BonfireActor*[] bonFireCandidates;//[Offset: 0x140, Size: 0x10]// 0x75a8162a80
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x4559330
	void InitializeOwner(Pawn* _TempPawn);// 0x45592b4
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x4559238

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0, Size: 0x4]// 0x76121dbb30
	float HightDiff;//[Offset: 0x4, Size: 0x4]// 0x76121dbac0
	float angle;//[Offset: 0x8, Size: 0x4]// 0x76121dba50
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]// 0x76121db9d0
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]// 0x76121db950
	float LowerTraceRatio;//[Offset: 0x10, Size: 0x4]// 0x76121db8e0

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 0x10]// 0x7611eb74b0
	byte ShowType;//[Offset: 0x10, Size: 0x1]// 0x7611eb73d0
	float Value;//[Offset: 0x14, Size: 0x4]// 0x7611eb7360
	float LimitValue;//[Offset: 0x18, Size: 0x4]// 0x7611eb72f0
	bool bPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]// 0x7611eb7270

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	void ReportVerifyInfoFlow();// 0x4517408
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x451734c
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x451728c
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x45171a0
	void ReportJoyStickFlow(const JoyStickFlow JoyStickFlow);// 0x45170d8
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x451700c
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x4516f3c
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x4516e6c
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x4516da8
	void ReportGameSetting(const GameSetting GameSetting);// 0x4516cd8
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x4516bd4
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x4516ad0
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x45169c4
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x45168f8
	void ReportAsianAttackFlow(const AsianAttackFlow AsianAttackFlow);// 0x4516824
	void ReportAimFlow(const AimFlow AimFlow);// 0x4516758

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 0x1]// 0x760d236700
	byte[] MrpcsFlowData;//[Offset: 0x8, Size: 0x10]// 0x760d236800

--------------------------------
Class: JoyStickFlow
	FString UID;//[Offset: 0x0, Size: 0x10]// 0x7611582130
	int StickAngle;//[Offset: 0x10, Size: 0x4]// 0x76115821a0
	FString RoleCoordinate;//[Offset: 0x18, Size: 0x10]// 0x7611582210
	int RoleMovingState;//[Offset: 0x28, Size: 0x4]// 0x7611582280

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 0x10]// 0x7611581720
	FString GVoiceRoomID;//[Offset: 0x10, Size: 0x10]// 0x7611581790
	int GVoiceTeamMemberID;//[Offset: 0x20, Size: 0x4]// 0x7611581800
	int GVoiceRoomMemberID;//[Offset: 0x24, Size: 0x4]// 0x7611581870
	uint64 UID;//[Offset: 0x28, Size: 0x8]// 0x76115818e0

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 0x10]// 0x76115814f0
	FString GVoiceRoomID;//[Offset: 0x10, Size: 0x10]// 0x7611581560
	int GVoiceTeamMemberID;//[Offset: 0x20, Size: 0x4]// 0x76115815d0
	int GVoiceRoomMemberID;//[Offset: 0x24, Size: 0x4]// 0x7611581640
	uint64 UID;//[Offset: 0x28, Size: 0x8]// 0x76115816b0

--------------------------------
Class: ClientGameStartFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 0x4]// 0x760d208680
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]// 0x760d231780
	FString MapName;//[Offset: 0x18, Size: 0x10]// 0x760d208760
	int8 WeatherID;//[Offset: 0x28, Size: 0x1]// 0x760d2087d0
	FString ItemList;//[Offset: 0x30, Size: 0x10]// 0x760d208840
	int8 TeamType;//[Offset: 0x40, Size: 0x1]// 0x760d2088b0
	int8 TeamID;//[Offset: 0x41, Size: 0x1]// 0x760d208920
	FString TeamPlayer1;//[Offset: 0x48, Size: 0x10]// 0x760d208990
	FString TeamPlayer2;//[Offset: 0x58, Size: 0x10]// 0x760d208a00
	FString TeamPlayer3;//[Offset: 0x68, Size: 0x10]// 0x760d208a70
	byte SecGameStartFlowFlowID;//[Offset: 0x78, Size: 0x1]// 0x760d231800
	FString GVoiceTeamID;//[Offset: 0x80, Size: 0x10]// 0x760d208ae0
	FString GVoiceRoomID;//[Offset: 0x90, Size: 0x10]// 0x760d208b50
	int GVoiceTeamMemberID;//[Offset: 0xa0, Size: 0x4]// 0x760d208bc0
	int GVoiceRoomMemberID;//[Offset: 0xa4, Size: 0x4]// 0x760d208c30
	byte[] MrpcsFlowData;//[Offset: 0xa8, Size: 0x10]// 0x760d231900

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 0x8]// 0x761157f810
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 0x54]// 0x760d235980
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x5c, Size: 0x8]// 0x760d235a80
	GameSetting_Operate Operate;//[Offset: 0x64, Size: 0x8]// 0x760d235b80
	GameSetting_Vehicle Vehicle;//[Offset: 0x6c, Size: 0x8]// 0x760d235c80
	GameSetting_Sensibility Sensibility;//[Offset: 0x74, Size: 0x70]// 0x760d235f00
	GameSetting_PickUp Pickup;//[Offset: 0xe8, Size: 0x58]// 0x760d236600
	GameSetting_Effect Effect;//[Offset: 0x140, Size: 0x8]// 0x760d236680

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 0x4]// 0x761157f880
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x760d235180
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]// 0x760d235200
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 0x4]// 0x761157f8f0
	int ShotGunShootMode;//[Offset: 0xc, Size: 0x4]// 0x761157f960
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x760d235280
	int LRShootMode;//[Offset: 0x14, Size: 0x4]// 0x761157f9d0
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x760d235300
	int LeftHandFire;//[Offset: 0x1c, Size: 0x4]// 0x761157fa40
	int Gyroscope;//[Offset: 0x20, Size: 0x4]// 0x761157fab0
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]// 0x760d235380
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]// 0x760d235400
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]// 0x760d235480
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]// 0x760d235500
	bool OneKeyScopeFire_OtherMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x760d235580
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]// 0x760d235600
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]// 0x760d235680
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]// 0x760d235700
	int InterruptReloadType;//[Offset: 0x2c, Size: 0x4]// 0x761157fb20
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]// 0x760d235780
	int OpenMirrorMode;//[Offset: 0x34, Size: 0x4]// 0x761157fb90
	int SideMirrorMode;//[Offset: 0x38, Size: 0x4]// 0x761157fc00
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]// 0x760d235800
	int FpViewValue;//[Offset: 0x40, Size: 0x4]// 0x761157fc70
	int TpViewValue;//[Offset: 0x44, Size: 0x4]// 0x761157fce0
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x760d235880
	bool QuickThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]// 0x760d235900
	int NormalJumpTypeSwitch;//[Offset: 0x4c, Size: 0x4]// 0x761157fd50
	int DeathMatchJumpTypeSwitch;//[Offset: 0x50, Size: 0x4]// 0x761157fdc0

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 0x4]// 0x761157fe30
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x760d235a00

--------------------------------
Class: GameSetting_Operate
	int fireMode;//[Offset: 0x0, Size: 0x4]// 0x761157fea0
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x760d235b00

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 0x4]// 0x761157ff10
	int DrivingViewMode;//[Offset: 0x4, Size: 0x4]// 0x761157ff80

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 0x4]// 0x761157fff0
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 0xc]// 0x760d235d00
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 0x20]// 0x760d235d80
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x30, Size: 0x20]// 0x760d235e00
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x50, Size: 0x20]// 0x760d235e80

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 0x4]// 0x7611580060
	float ParachuteEye;//[Offset: 0x4, Size: 0x4]// 0x76115800d0
	float CamFpFreeEye;//[Offset: 0x8, Size: 0x4]// 0x7611580140

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 0x4]// 0x76115801b0
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]// 0x7611580220
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 0x4]// 0x7611580290
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 0x4]// 0x7611580300
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 0x4]// 0x7611580370
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 0x4]// 0x76115803e0
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 0x4]// 0x7611580450
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 0x4]// 0x76115804c0

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 0x4]// 0x7611580530
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]// 0x76115805a0
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 0x4]// 0x7611580610
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 0x4]// 0x7611580680
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 0x4]// 0x76115806f0
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 0x4]// 0x7611580760
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 0x4]// 0x76115807d0
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 0x4]// 0x7611580840

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 0x4]// 0x76115808b0
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]// 0x7611580920
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 0x4]// 0x7611580990
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 0x4]// 0x7611580a00
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 0x4]// 0x7611580a70
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 0x4]// 0x7611580ae0
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 0x4]// 0x7611580b50
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 0x4]// 0x7611580bc0

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]// 0x760d235f80
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]// 0x760d236000
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]// 0x760d236080
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]// 0x760d236100
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x760d236180
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]// 0x760d236200
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]// 0x760d236280
	bool AKMAutoMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]// 0x760d236300
	GameSetting_PickUp_Drug Drug;//[Offset: 0x8, Size: 0x18]// 0x760d236380
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x20, Size: 0x10]// 0x760d236400
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x30, Size: 0x10]// 0x760d236500
	GameSetting_PickUp_SightingTelescope SightingTelescope;//[Offset: 0x40, Size: 0x18]// 0x760d236580

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 0x4]// 0x7611580c30
	int Bandage;//[Offset: 0x4, Size: 0x4]// 0x7611580ca0
	int PainKiller;//[Offset: 0x8, Size: 0x4]// 0x7611580d10
	int Adrenaline;//[Offset: 0xc, Size: 0x4]// 0x7611580d80
	int EnergyDrink;//[Offset: 0x10, Size: 0x4]// 0x7611580df0
	int FirstAidKit;//[Offset: 0x14, Size: 0x4]// 0x7611580e60

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 0x4]// 0x7611580ed0
	int ShockBomb;//[Offset: 0x4, Size: 0x4]// 0x7611580f40
	int SmokeBomb;//[Offset: 0x8, Size: 0x4]// 0x7611580fb0
	int GrenadeFragmented;//[Offset: 0xc, Size: 0x4]// 0x7611581020

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponID;//[Offset: 0x0, Size: 0x4]// 0x7611581090
	int BulletCount;//[Offset: 0x4, Size: 0x4]// 0x7611581100

--------------------------------
Class: GameSetting_PickUp_SightingTelescope
	int LimitSniper2X;//[Offset: 0x0, Size: 0x4]// 0x7611581170
	int LimitSniper3X;//[Offset: 0x4, Size: 0x4]// 0x76115811e0
	int LimitSniper4X;//[Offset: 0x8, Size: 0x4]// 0x7611581250
	int LimitSniper6X;//[Offset: 0xc, Size: 0x4]// 0x76115812c0
	int LimitSniper8X;//[Offset: 0x10, Size: 0x4]// 0x7611581330
	int NewLimitRedDotHolographic;//[Offset: 0x14, Size: 0x4]// 0x76115813a0

--------------------------------
Class: GameSetting_Effect
	int HitEffect_Type;//[Offset: 0x0, Size: 0x4]// 0x7611581410
	int HitEffect_Color;//[Offset: 0x4, Size: 0x4]// 0x7611581480

--------------------------------
Class: ClientGameEndFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 0x4]// 0x7611577070
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]// 0x760d232880
	FString ClientVersion;//[Offset: 0x18, Size: 0x10]// 0x7611577150
	uint16 OverTime;//[Offset: 0x28, Size: 0x2]// 0x76115771c0
	int8 EndType;//[Offset: 0x2a, Size: 0x1]// 0x7611577230
	byte KillCount;//[Offset: 0x2b, Size: 0x1]// 0x760d232900
	byte AssistsCount;//[Offset: 0x2c, Size: 0x1]// 0x760d232980
	byte DropCount;//[Offset: 0x2d, Size: 0x1]// 0x760d232a00
	byte SaveCount;//[Offset: 0x2e, Size: 0x1]// 0x760d232a80
	byte RebornCount;//[Offset: 0x2f, Size: 0x1]// 0x760d232b00
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]// 0x760d232b80
	int GoldGet;//[Offset: 0x34, Size: 0x4]// 0x76115772a0
	int DiamondGet;//[Offset: 0x38, Size: 0x4]// 0x7611577310
	int ExpGet;//[Offset: 0x3c, Size: 0x4]// 0x7611577380
	byte WinRank;//[Offset: 0x40, Size: 0x1]// 0x760d232c00
	byte TotalPlayers;//[Offset: 0x41, Size: 0x1]// 0x760d232c80
	int PlayerRank;//[Offset: 0x44, Size: 0x4]// 0x76115773f0
	int RankEnd;//[Offset: 0x48, Size: 0x4]// 0x7611577460
	int8 TeamID;//[Offset: 0x4c, Size: 0x1]// 0x76115774d0
	FString TeamPlayer1;//[Offset: 0x50, Size: 0x10]// 0x7611577540
	FString TeamPlayer2;//[Offset: 0x60, Size: 0x10]// 0x76115775b0
	FString TeamPlayer3;//[Offset: 0x70, Size: 0x10]// 0x7611577620
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]// 0x760d232d00
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]// 0x760d232d80
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]// 0x760d232e00
	byte TeamPlayer1Kill;//[Offset: 0x81, Size: 0x1]// 0x760d232e80
	byte TeamPlayer2Kill;//[Offset: 0x82, Size: 0x1]// 0x760d232f00
	byte TeamPlayer3Kill;//[Offset: 0x83, Size: 0x1]// 0x760d232f80
	byte GameEndFlowID;//[Offset: 0x84, Size: 0x1]// 0x760d233000
	byte RoundCircleCount;//[Offset: 0x85, Size: 0x1]// 0x760d233080
	byte[] MrpcsFlowData;//[Offset: 0x88, Size: 0x10]// 0x760d233180

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]// 0x76115791b0
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]// 0x7611579220
	FString GameAppID;//[Offset: 0x18, Size: 0x10]// 0x7611579290
	FString OpenID;//[Offset: 0x28, Size: 0x10]// 0x7611579300
	int8 AreaID;//[Offset: 0x38, Size: 0x1]// 0x7611579370
	int8 PlatID;//[Offset: 0x39, Size: 0x1]// 0x76115793e0
	FString ZoneID;//[Offset: 0x40, Size: 0x10]// 0x7611579450
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]// 0x76115794c0
	int64 ClientStartTime;//[Offset: 0x58, Size: 0x8]// 0x7611579530
	int64 ReportTimeSinceOnPlane;//[Offset: 0x60, Size: 0x8]// 0x76115795a0
	int8 MrpcsFlowcount_;//[Offset: 0x68, Size: 0x1]// 0x7611579610
	int[] MrpcsFlow;//[Offset: 0x70, Size: 0x10]// 0x760d234100
	FString UserName;//[Offset: 0x80, Size: 0x10]// 0x76115796f0
	uint64 RoleID;//[Offset: 0x90, Size: 0x8]// 0x7611579760
	int8 RoleType;//[Offset: 0x98, Size: 0x1]// 0x76115797d0
	FString TargetOpenID;//[Offset: 0xa0, Size: 0x10]// 0x7611579840
	FString TargetUserName;//[Offset: 0xb0, Size: 0x10]// 0x76115798b0
	uint64 TargetRoleID;//[Offset: 0xc0, Size: 0x8]// 0x7611579920
	int8 TargetRoleType;//[Offset: 0xc8, Size: 0x1]// 0x7611579990
	FString GunName;//[Offset: 0xd0, Size: 0x10]// 0x7611579a00
	FString GunPartsType;//[Offset: 0xe0, Size: 0x10]// 0x7611579a70
	int8 SightType;//[Offset: 0xf0, Size: 0x1]// 0x7611579ae0
	int BulletSpeed;//[Offset: 0xf4, Size: 0x4]// 0x7611579b50
	int8 MagazineMax;//[Offset: 0xf8, Size: 0x1]// 0x7611579bc0
	int8 MagazineLeft;//[Offset: 0xf9, Size: 0x1]// 0x7611579c30
	int ShotFrequency;//[Offset: 0xfc, Size: 0x4]// 0x7611579ca0
	int BulletDamage;//[Offset: 0x100, Size: 0x4]// 0x7611579d10
	int16 BulletDown;//[Offset: 0x104, Size: 0x2]// 0x7611579d80
	byte BulletDamageReduce;//[Offset: 0x106, Size: 0x1]// 0x760d234180
	int Recoil;//[Offset: 0x108, Size: 0x4]// 0x7611579df0
	int ReloadTime;//[Offset: 0x10c, Size: 0x4]// 0x7611579e60
	FString PlayerState;//[Offset: 0x110, Size: 0x10]// 0x7611579ed0
	byte ShotPose;//[Offset: 0x120, Size: 0x1]// 0x760d234280
	byte FireType;//[Offset: 0x121, Size: 0x1]// 0x760d234300
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x122, Size: 0x1]// 0x760d234380
	byte Sideways;//[Offset: 0x123, Size: 0x1]// 0x760d234400
	int ShootingDeviationX;//[Offset: 0x124, Size: 0x4]// 0x7611579f40
	int ShootingDeviationY;//[Offset: 0x128, Size: 0x4]// 0x7611579fb0
	uint32 ZeroDistance;//[Offset: 0x12c, Size: 0x4]// 0x761157a020
	uint32 ShotTime;//[Offset: 0x130, Size: 0x4]// 0x761157a090
	int HitTime;//[Offset: 0x134, Size: 0x4]// 0x761157a100
	int PlayerPositionX;//[Offset: 0x138, Size: 0x4]// 0x761157a170
	int PlayerPositionY;//[Offset: 0x13c, Size: 0x4]// 0x761157a1e0
	int PlayerPositionZ;//[Offset: 0x140, Size: 0x4]// 0x761157a250
	int GunPositionX;//[Offset: 0x144, Size: 0x4]// 0x761157a2c0
	int GunPositionY;//[Offset: 0x148, Size: 0x4]// 0x761157a330
	int GunPositionZ;//[Offset: 0x14c, Size: 0x4]// 0x761157a3a0
	int BulletsBornPositionX;//[Offset: 0x150, Size: 0x4]// 0x761157a410
	int BulletsBornPositionY;//[Offset: 0x154, Size: 0x4]// 0x761157a480
	int BulletsBornPositionZ;//[Offset: 0x158, Size: 0x4]// 0x761157a4f0
	uint32 LastHitTime;//[Offset: 0x15c, Size: 0x4]// 0x761157a560
	uint32 BulletFlyDistance;//[Offset: 0x160, Size: 0x4]// 0x761157a5d0
	uint32 BulletFlyTime;//[Offset: 0x164, Size: 0x4]// 0x761157a640
	int HitPositionX;//[Offset: 0x168, Size: 0x4]// 0x761157a6b0
	int HitPositionY;//[Offset: 0x16c, Size: 0x4]// 0x761157a720
	int HitPositionZ;//[Offset: 0x170, Size: 0x4]// 0x761157a790
	float DamageRate;//[Offset: 0x174, Size: 0x4]// 0x761157a800
	byte HitPart;//[Offset: 0x178, Size: 0x1]// 0x760d234480
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x179, Size: 0x1]// 0x760d234500
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x179, Size: 0x1]// 0x760d234580
	byte BulletCost;//[Offset: 0x17a, Size: 0x1]// 0x760d234600
	int HPStart;//[Offset: 0x17c, Size: 0x4]// 0x761157a870
	int HPEnd;//[Offset: 0x180, Size: 0x4]// 0x761157a8e0
	int ArmorHPStart;//[Offset: 0x184, Size: 0x4]// 0x761157a950
	int ArmorHPEnd;//[Offset: 0x188, Size: 0x4]// 0x761157a9c0
	int CarHPStart;//[Offset: 0x18c, Size: 0x4]// 0x761157aa30
	int CarHPEnd;//[Offset: 0x190, Size: 0x4]// 0x761157aaa0
	byte PlayerKill;//[Offset: 0x194, Size: 0x1]// 0x760d234680
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x195, Size: 0x1]// 0x760d234700
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x195, Size: 0x1]// 0x760d234780
	int RecoilMoveX;//[Offset: 0x198, Size: 0x4]// 0x761157ab10
	int RecoilMoveY;//[Offset: 0x19c, Size: 0x4]// 0x761157ab80
	int WeaponAimFOV;//[Offset: 0x1a0, Size: 0x4]// 0x761157abf0
	int BulletDamageDebuff;//[Offset: 0x1a4, Size: 0x4]// 0x761157ac60
	int BulletDamageBuff;//[Offset: 0x1a8, Size: 0x4]// 0x761157acd0
	uint32 AtackFlowID;//[Offset: 0x1ac, Size: 0x4]// 0x761157ad40
	int AutoAimSpeed;//[Offset: 0x1b0, Size: 0x4]// 0x761157adb0
	int AutoAimSpeedRateMax;//[Offset: 0x1b4, Size: 0x4]// 0x761157ae20
	int AutoAimRangeMax;//[Offset: 0x1b8, Size: 0x4]// 0x761157ae90
	int AutoAimRangeRateMax;//[Offset: 0x1bc, Size: 0x4]// 0x761157af00
	int GunID;//[Offset: 0x1c0, Size: 0x4]// 0x761157af70
	int SymbolWord;//[Offset: 0x1c4, Size: 0x4]// 0x761157afe0

--------------------------------
Class: AsianAttackFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 0x4]// 0x7611583780
	uint32 TrackNum;//[Offset: 0x4, Size: 0x4]// 0x76115837f0
	FString UserName;//[Offset: 0x8, Size: 0x10]// 0x7611583860
	uint64 RoleID;//[Offset: 0x18, Size: 0x8]// 0x76115838d0
	int WeaponID;//[Offset: 0x20, Size: 0x4]// 0x7611583940
	FString GunPartsType;//[Offset: 0x28, Size: 0x10]// 0x76115839b0
	uint32 SightType;//[Offset: 0x38, Size: 0x4]// 0x7611583a20
	uint32 HitPositionX;//[Offset: 0x3c, Size: 0x4]// 0x7611583a90
	uint32 HitPositionY;//[Offset: 0x40, Size: 0x4]// 0x7611583b00
	uint32 HitPositionZ;//[Offset: 0x44, Size: 0x4]// 0x7611583b70
	uint32 HPStart;//[Offset: 0x48, Size: 0x4]// 0x7611583be0
	uint32 HPEnd;//[Offset: 0x4c, Size: 0x4]// 0x7611583c50
	uint32 CriticalRatio;//[Offset: 0x50, Size: 0x4]// 0x7611583cc0
	uint32 HitTime;//[Offset: 0x54, Size: 0x4]// 0x7611583d30
	uint32 TargetType;//[Offset: 0x58, Size: 0x4]// 0x7611583da0
	uint32 ShootPositionX;//[Offset: 0x5c, Size: 0x4]// 0x7611583e10
	uint32 ShootPositionY;//[Offset: 0x60, Size: 0x4]// 0x7611583e80
	uint32 ShootPositionZ;//[Offset: 0x64, Size: 0x4]// 0x7611583ef0
	uint32 Distance;//[Offset: 0x68, Size: 0x4]// 0x7611583f60
	uint32 TeamID;//[Offset: 0x6c, Size: 0x4]// 0x7611583fd0
	int ShootGrade;//[Offset: 0x70, Size: 0x4]// 0x7611584040

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]// 0x7611578500
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]// 0x7611578570
	FString GameAppID;//[Offset: 0x18, Size: 0x10]// 0x76115785e0
	FString OpenID;//[Offset: 0x28, Size: 0x10]// 0x7611578650
	int8 AreaID;//[Offset: 0x38, Size: 0x1]// 0x76115786c0
	int8 PlatID;//[Offset: 0x39, Size: 0x1]// 0x7611578730
	FString ZoneID;//[Offset: 0x40, Size: 0x10]// 0x76115787a0
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]// 0x7611578810
	int64 ClientStartTime;//[Offset: 0x58, Size: 0x8]// 0x7611578880
	int8 MrpcsFlowcount_;//[Offset: 0x60, Size: 0x1]// 0x76115788f0
	int[] MrpcsFlow;//[Offset: 0x68, Size: 0x10]// 0x760d233f80
	FString UserName;//[Offset: 0x78, Size: 0x10]// 0x76115789d0
	uint64 RoleID;//[Offset: 0x88, Size: 0x8]// 0x7611578a40
	int8 RoleType;//[Offset: 0x90, Size: 0x1]// 0x7611578ab0
	int AimTime;//[Offset: 0x94, Size: 0x4]// 0x7611578b20
	FString ShotCDTime;//[Offset: 0x98, Size: 0x10]// 0x7611578b90
	int ShotCount;//[Offset: 0xa8, Size: 0x4]// 0x7611578c00
	int ShotHitCount;//[Offset: 0xac, Size: 0x4]// 0x7611578c70
	int ShotHeadHitCount;//[Offset: 0xb0, Size: 0x4]// 0x7611578ce0
	int ShotPersonHitCount;//[Offset: 0xb4, Size: 0x4]// 0x7611578d50
	int ShotPersonKillCount;//[Offset: 0xb8, Size: 0x4]// 0x7611578dc0
	FString HitDistance;//[Offset: 0xc0, Size: 0x10]// 0x7611578e30
	FString HitEachDistance;//[Offset: 0xd0, Size: 0x10]// 0x7611578ea0
	FString HitAngle;//[Offset: 0xe0, Size: 0x10]// 0x7611578f10
	FString HitEachCdTime;//[Offset: 0xf0, Size: 0x10]// 0x7611578f80
	FString HitPartInfo;//[Offset: 0x100, Size: 0x10]// 0x7611578ff0
	FString PlayerState;//[Offset: 0x110, Size: 0x10]// 0x7611579060
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]// 0x760d234000
	int8 SightType;//[Offset: 0x121, Size: 0x1]// 0x76115790d0
	uint32 AimFlowID;//[Offset: 0x124, Size: 0x4]// 0x7611579140

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]// 0x7611eb59a0
	float SteerInput;//[Offset: 0x4, Size: 0x4]// 0x7611eb5930
	int8 State;//[Offset: 0x8, Size: 0x1]// 0x7611eb58c0
	Rotator ControlRotation;//[Offset: 0xc, Size: 0xc]// 0x7611eb5840

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x270, Size: 0x10]// 0x75a8995080
	void ReleaseParachuteAnimAssets();// 0x4eb7c6c
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x4eb7b94
	void OnAnimListAsyncLoadingFinished();// 0x4eb7b80
	bool IsAnimAsyncLoading();// 0x4eb7b48
	bool HasAnimAsyncLoadingFinished();// 0x4eb7b10
	void HandleAsyncLoadingFinishedEvent();// 0x4eb7afc
	FString GetOwnerName();// 0x4eb7a7c
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x4eb79f0

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 0x1]// 0x760d230480
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 0x28]// 0x760d230500
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 0x8]// 0x760d230580

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 0xc]// 0x7611eb5620
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]// 0x7611eb55a0
	Vector_NetQuantize100 Velocity;//[Offset: 0x18, Size: 0xc]// 0x7611eb5520

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object
	void SetIsDisableParachuteFollow(bool bIsDisableParachuteFollow);// 0x4466874

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 0x1]// 0x7611e7a020
	int LeaderIdx;//[Offset: 0x4, Size: 0x4]// 0x7611e79fb0

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]// 0x75d0b58800
	delegate SwitchVehicleWeaponDelegate;//[Offset: 0x160, Size: 0x10]// 0x75d0b58880
	byte TempScopeType;//[Offset: 0x174, Size: 0x1]// 0x75d0b58900
	STExtraPlayerCharacter* Pawn;//[Offset: 0x178, Size: 0x8]// 0x75d0b58980
	FName FirstPersonCameraSocketName;//[Offset: 0x180, Size: 0x8]// 0x7611550960
	FName ScopeAimCameraSocketName;//[Offset: 0x188, Size: 0x8]// 0x76115509d0
	FName FPPSocketName;//[Offset: 0x190, Size: 0x8]// 0x7611550a40
	FName BoltActionCurveName;//[Offset: 0x198, Size: 0x8]// 0x7611550ab0
	class AimProcess[] AimProcessList;//[Offset: 0x1a0, Size: 0x10]// 0x75d0b58a80
	class Object[] AimProcessClassList;//[Offset: 0x1b0, Size: 0x10]// 0x75d0b58b80
	float ScopeZoomSpringArmLength;//[Offset: 0x1c0, Size: 0x4]// 0x7611550b20
	float ScopeZoomAlpha;//[Offset: 0x1c4, Size: 0x4]// 0x7611550b90
	float ScopeZoomSpeed;//[Offset: 0x1cc, Size: 0x4]// 0x7611550c00
	<FName,MaterialInterface*> ScopeMaterials;//[Offset: 0x1d0, Size: 0x50]// 0x75d0b66300
	int CurrentPlayAnimIndex;//[Offset: 0x220, Size: 0x4]// 0x7611550ce0
	DollyZoomParam ZoomScopeParam;//[Offset: 0x228, Size: 0xc]// 0x75d0b58c80
	<int,CurveFloat*> ScopeZoomFovCurveMap;//[Offset: 0x238, Size: 0x50]// 0x75d0b663c0
	<uint64,int> WeaponAngledSightState;//[Offset: 0x288, Size: 0x50]// 0x75d0b66480
	int NearClipCameraAimMode;//[Offset: 0x2d8, Size: 0x4]// 0x7611550ea0
	<uint64,int> WeaponSightState;//[Offset: 0x300, Size: 0x50]// 0x75d0b66540
	CharacterAvatarComponent* _AvatarComp;//[Offset: 0x358, Size: 0x8]// 0x75d0b58d80
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]// 0x75d0b58e00
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x370, Size: 0xc0]// 0x75d0b58e80
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x430, Size: 0xc0]// 0x75d0b58f00
	SpringArmParams TPPSpringArmParam;//[Offset: 0x4f0, Size: 0xc0]// 0x75d0b58f80
	SpringArmParams FPPSpringArmParam;//[Offset: 0x5b0, Size: 0xc0]// 0x75d0b59080
	SpringArmParams ShoulderSpringArmParam;//[Offset: 0x670, Size: 0xc0]// 0x75d0b59100
	SpringArmParams AIMSpringArmParam;//[Offset: 0x730, Size: 0xc0]// 0x75d0b59180
	CurveFloat* ADSCurve;//[Offset: 0x7f0, Size: 0x8]// 0x75d0b59200
	CurveFloat* SightAngledCurve;//[Offset: 0x7f8, Size: 0x8]// 0x75d0b59280
	FName SourceScopeAimCameraSocketName;//[Offset: 0x800, Size: 0x8]// 0x75bdddc000
	FName TargetScopeAimCameraSocketName;//[Offset: 0x808, Size: 0x8]// 0x75bdddc070
	CameraModifyData ADSModify;//[Offset: 0x810, Size: 0x170]// 0x75d0b59300
	CameraModifyData VehWeaponADSModify;//[Offset: 0x980, Size: 0x170]// 0x75d0b59380
	int MaterialID;//[Offset: 0xaf0, Size: 0x4]// 0x75bdddc0e0
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf4, Size: 0x1]// 0x75d0b59400
	int LODIndex;//[Offset: 0xaf8, Size: 0x4]// 0x75bdddc150
	int DeviceQualityLevel;//[Offset: 0xafc, Size: 0x4]// 0x75bdddc1c0
	int X8ScopeID;//[Offset: 0xb00, Size: 0x4]// 0x75bdddc230
	float CompoundBowAddtiveFOVSpeed;//[Offset: 0xb04, Size: 0x4]// 0x75bdddc2a0
	float CompoundBowAddtiveFOV;//[Offset: 0xb08, Size: 0x4]// 0x75bdddc310
	float CompoundBowAddtiveFOVCur;//[Offset: 0xb0c, Size: 0x4]// 0x75bdddc380
	float CurTimeLineUpdateAlpha;//[Offset: 0xb10, Size: 0x4]// 0x75bdddc3f0
	float CurTimeAddtive;//[Offset: 0xb14, Size: 0x4]// 0x75bdddc460
	float SourceAddtiveFOV;//[Offset: 0xb18, Size: 0x4]// 0x75bdddc4d0
	float AddtiveDelayTime;//[Offset: 0xb1c, Size: 0x4]// 0x75bdddc540
	CurveFloat* AddtiveFOVCurve;//[Offset: 0xb20, Size: 0x8]// 0x75d0b59480
	DollyZoomParam CurRealParam;//[Offset: 0xb28, Size: 0xc]// 0x75d0b59500
	DollyZoomParam CompoundBowAddtiveParam;//[Offset: 0xb34, Size: 0xc]// 0x75d0b59580
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight, float Alpha);// 0x41d5808
	void TickCompoundBowSecondFOV(float InDeltaTime);// 0x41d5784
	void SwitchVehicleShootWeapon(CustomSpringArmComponent* ThirdPersonSpringArm, STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x41d568c
	float SwitchSightConfigMaterial();// 0xffffff8a17adf2b0
	void SwitchScopeMeshAnim(byte Type);// 0x41d5610
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x41d5594
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x41d5518
	void SwitchCameraMode(byte Mode, bool IsUseLerpFPP);// 0x41d5458
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0xffffff8a17adf2b0
	void StopScopeIn();// 0xffffff8a17adf2b0
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0xffffff8a17adf2b0
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0xffffff8a17adf2b0
	void SetWeaponSightState(STExtraShootWeapon* Weapon, bool State);// 0x41d5390
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x41d52c8
	void SetTagCulling(bool IsUse);// 0xffffff8a17adf2b0
	void SetNearClipPlane(bool EnableNearClip);// 0x41d5244
	void SetCompoundBowSecondFOV(float InDestinFOV, float InSpeed, float InDelayTime, CurveFloat* AFOVCurve);// 0x41d5110
	void ScopingChange(bool InValue);// 0x41d508c
	void Scoping(byte NewType);// 0x41d5010
	void ScopeZoomUpdate(float Alpha);// 0x41d4f94
	void ScopeZoomTick(float DeltaTime);// 0x41d4f18
	bool ScopeTimelineUpdate(float Alpha);// 0x41d4e88
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x41d4dd4
	void ScopeOutLogic();// 0x41d4dc0
	void ScopeOutEnd();// 0xffffff8a17adf2b0
	void ScopeOut(byte NewType);// 0x41d4d44
	void ScopeNotHandFold();// 0x41d4d30
	void ScopeInterrupt(byte NewType, bool ForceInterrupt);// 0x41d4c70
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x41d4bbc
	bool ScopeInLogic();// 0x41d4b84
	void ScopeInEnd();// 0xffffff8a17adf2b0
	void ScopeInContinue();// 0x41d4b70
	void ScopeInAfterTimeline();// 0x41d4b5c
	bool ScopeIn(byte NewType);// 0x41d4acc
	void ScopeHandFold();// 0x41d4ab8
	void ResetCompoundBowSecondFOV();// 0x41d4a9c
	void PlayScopeInTimeline();// 0xffffff8a17adf2b0
	void OnRespawned();// 0x41d4a80
	void OnRecycled();// 0x41d4a64
	void OnLoadAimProcess();// 0x41d4a50
	bool IsWeaponSightByWeapon(STExtraShootWeapon* Weapon);// 0x41d49c0
	bool IsWeaponSight();// 0x41d4980
	bool IsUseZoomScope();// 0x41d4948
	int IsUseCameraProcess();// 0x41d4914
	bool IsScopeInTimelinePlaying();// 0xffffff8a17adf2b0
	bool IsRPGScopeIn();// 0x41d48dc
	bool IsEnableCameraPossess();// 0x41d48a4
	bool IsCurWeaponAttachedAngledSight();// 0x41d486c
	bool IsAngledSightBySlot(byte Slot);// 0x41d47d4
	bool IsAngledSight();// 0x41d4794
	void InitScopeZoom(int WeaponID, int ScopeID);// 0x41d46e0
	bool HaveWeaponSight();// 0x41d46a8
	bool HaveAngledSightBySlot(byte Slot);// 0x41d4618
	bool HaveAngledSight();// 0x41d45e0
	void HandleScopeMeshLoaded(enum Type);// 0x41d4564
	byte GetSightType();// 0x41d4530
	float GetScopeZoomValue(int WeaponID, int ScopeID);// 0x41d446c
	FName GetScopeZoomKey(int WeaponID, int ScopeID);// 0x41d43a8
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled);// 0xffffff8a17adf2b0
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x41d430c
	FName GetScopeAimCameraSocketName();// 0x41d42d8
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov, float InScopeZoomAlpha);// 0x41d41b4
	AimProcess* FindCurAimProcess(STExtraShootWeapon* InShootWeapon);// 0x41d4128
	void ErrorReport(FString ExceptionType, FString StackStr, FString DetailStr);// 0x41d4010
	bool CheckPawnIsAutonomousOrObTarget();// 0x41d3fd8
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x41d3e94
	void BoltAction(float DeltaSeconds);// 0x41d3e18
	void AttachToSightKeepTransform();// 0xffffff8a17adf2b0
	void AttachToSight();// 0xffffff8a17adf2b0
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x41d3d34
	void AngledSightMove(out const DollyZoomParam Param, Vector SourceLoc, Vector TargetLoc, float Alpha, MeshComponent* WeaponMesh, bool bSyncToPawn);// 0x41d3b50
	void ADSVehicleWeapon();// 0x41d3b3c
	void ADSUseCameraPossess();// 0x41d3b28
	void ADSRPG();// 0x41d3b14
	void ADSProne();// 0x41d3b00
	void ADSProcessAgainstWall();// 0x41d3aec
	void ADSNormal();// 0x41d3ad8
	void ADSLeaveWall();// 0x41d3ac4
	void ADSAgainstWall();// 0x41d3ab0
	void ActiveComponentTickable();// 0x41d3a9c

--------------------------------
Class: AimProcess.Object
	FString Name;//[Offset: 0x28, Size: 0x10]// 0x75c99171a0
	STExtraShootWeapon* ShootWeapon;//[Offset: 0x38, Size: 0x8]// 0x75c98d4300
	BaseFPPComponent* FPPComp;//[Offset: 0x40, Size: 0x8]// 0x75c98d4380
	void LeaveWall(STExtraShootWeapon* InShootWeapon, BaseFPPComponent* InFPPComp);// 0x4111358
	bool IsOK(STExtraShootWeapon* InShootWeapon, BaseFPPComponent* InFPPComp);// 0x4111288
	void AgainstWall(STExtraShootWeapon* InShootWeapon, BaseFPPComponent* InFPPComp);// 0x41111cc
	bool ADSOn(STExtraShootWeapon* InShootWeapon, BaseFPPComponent* InFPPComp);// 0x41110fc
	bool ADSOff(STExtraShootWeapon* InShootWeapon, BaseFPPComponent* InFPPComp);// 0x411102c

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 0x4]// 0x76121da890
	float Scale;//[Offset: 0x4, Size: 0x4]// 0x76121da820
	float Offset;//[Offset: 0x8, Size: 0x4]// 0x76121da7b0

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 0x4]// 0x7611eb3c40
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 0x4]// 0x7611eb3bd0
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 0x4]// 0x7611eb3b60
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 0x4]// 0x7611eb3af0
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 0x4]// 0x7611eb3a80
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 0x4]// 0x7611eb3a10
	float GameModeOverride_WeaponAimInTimeModifier;//[Offset: 0x18, Size: 0x4]// 0x7611eb39a0
	float GameModeOverride_AllReloadTimeModifier;//[Offset: 0x1c, Size: 0x4]// 0x7611eb3930

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 0x4]// 0x7611eb37a0
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 0x4]// 0x7611eb3730
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 0x4]// 0x7611eb36c0
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 0x4]// 0x7611eb3650

--------------------------------
Class: WeaponOwnerComponent.ActorComponent.Object
	FString WeaponMuduleConfigTablePath;//[Offset: 0x158, Size: 0x10]// 0x76120d0590
	FString WeaponAttrConfigTablePath;//[Offset: 0x168, Size: 0x10]// 0x76120d0520
	WeaponShootDisRecordDataConfig WeaponShootDisRecordDataConfig;//[Offset: 0x178, Size: 0x30]// 0x76120cfff0
	CurveFloat* DistanceAndRotations;//[Offset: 0x1a8, Size: 0x8]// 0x76120cff70
	CurveFloat* DistanceWeightCurve;//[Offset: 0x1b0, Size: 0x8]// 0x76120cfef0
	CurveFloat* AngleWeightCurve;//[Offset: 0x1b8, Size: 0x8]// 0x76120cfe70
	float IntervalAlternateTime;//[Offset: 0x1c0, Size: 0x4]// 0x76120cfe00
	WeaponRecordCircleData RecordCircleData;//[Offset: 0x1c4, Size: 0x10]// 0x76120cfb80
	delegate OnChangeAmmoDelegate;//[Offset: 0x1d8, Size: 0x10]// 0x76120cfb00
	delegate OnWeaponShootBulletDelegate;//[Offset: 0x1e8, Size: 0x10]// 0x76120cfa80
	delegate OnWeaponBulletHitDelegate;//[Offset: 0x1f8, Size: 0x10]// 0x76120cfa00
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]// 0x76120cf980
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]// 0x76120cf900
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x220, Size: 0x8]// 0x76120cf880
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x228, Size: 0x10]// 0x76120cf780
	Actor* AutoAimTargetCache;//[Offset: 0x288, Size: 0x8]// 0x76120cf700
	WeaponShootAlternateData AlternateData;//[Offset: 0x290, Size: 0x38]// 0x76120cf490
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x380, Size: 0x8]// 0x76120cf410
	byte ShootMode;//[Offset: 0x38c, Size: 0x1]// 0x76120cf390
	void SetCurShootMode(byte InShootMode);// 0x48156d0
	void ServerSetReloadMethod(byte reloadMethod);// 0x4815620
	void ServerDropWeapon(STExtraShootWeapon* CurrentWeapon);// 0x4815570
	byte SequenceSearchUseableWeaponSlot(STExtraShootWeapon* ShootWeapon);// 0x48154dc
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bAllowSwitch);// 0x48152ec
	void RPC_Server_SwapMainWeapon();// 0x481528c
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x48151c8
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x4815024
	void RPC_Client_SwapMainWeapon();// 0x4814fc4
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x4814f14
	void OnWeaponShootBulletDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0xffffff8a17adf2b0
	void OnWeaponDropStart();// 0x4814f00
	void OnWeaponDropFinished();// 0x4814eec
	void OnWeaponBulletHitDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitInfo, out const BulletHitInfoUploadData BulletHitInfoUploadData);// 0xffffff8a17adf2b0
	void OnOwnerPlayerChangeState(enum State);// 0x4814e70
	void OnCurEquipedShootWeaponReloadLastBullet(int RemainBulletNumToReload);// 0x4814df4
	void OnCurEquipedShootWeaponChangeState(enum LastState, enum State);// 0x4814d3c
	void OnChangeAmmoDelegate__DelegateSignature(ItemDefineID AmmoDefineID);// 0xffffff8a17adf2b0
	void LocalUnEquipWeapon(STExtraWeapon* Weapon, bool bIsAI, bool bSimulatedProxy);// 0x4814c30
	void LocalEquipWeapon(STExtraWeapon* Weapon, bool bIsAI, bool bLocalFPP, bool bSimulatedProxy, byte Slot);// 0x4814a9c
	bool IsNeedNoShootIcon();// 0x4814a64
	void HandleWeaponStartFire();// 0x4814a50
	void HandleWeaponOnShoot();// 0x4814a3c
	void HandleOnCharAnimLoadingFinished();// 0x4814a28
	byte GetCurShootMode();// 0x4814a0c
	void DrawRecordData();// 0x48149f8
	void DoAutoReloadVehicleWeapon();// 0x48149e4
	void DoAutoReloadCurrentWeapon();// 0x48149d0
	void DoAutoDropWeapon();// 0x48149bc

--------------------------------
Class: WeaponShootDisRecordDataConfig
	float DistanceNear;//[Offset: 0x0, Size: 0x4]// 0x76120d04b0
	float DistanceMiddle;//[Offset: 0x4, Size: 0x4]// 0x76120d0440
	float DistanceMiddleFar;//[Offset: 0x8, Size: 0x4]// 0x76120d03d0
	float DistanceFar;//[Offset: 0xc, Size: 0x4]// 0x76120d0360
	float AotoAimTargetCacheTime;//[Offset: 0x10, Size: 0x4]// 0x76120d02f0
	float ShootItemDataCacheTime;//[Offset: 0x14, Size: 0x4]// 0x76120d0280
	float FlushInterval;//[Offset: 0x18, Size: 0x4]// 0x76120d0210
	byte[] ShootTypeList;//[Offset: 0x20, Size: 0x10]// 0x76120d0110

--------------------------------
Class: WeaponRecordCircleData
	Vector2D centrePod;//[Offset: 0x0, Size: 0x8]// 0x76120cfd80
	float Radius;//[Offset: 0x8, Size: 0x4]// 0x76120cfd10
	float OpenTime;//[Offset: 0xc, Size: 0x4]// 0x76120cfca0

--------------------------------
Class: WeaponShootAlternateData
	float weight;//[Offset: 0x0, Size: 0x4]// 0x76120cf690
	float angle;//[Offset: 0x4, Size: 0x4]// 0x76120cf620
	float dis;//[Offset: 0x8, Size: 0x4]// 0x76120cf5b0

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 0x1]// 0x7611eb2800
	Transform AttachTransform;//[Offset: 0x10, Size: 0x30]// 0x7611eb2780
	byte AttachLocationType;//[Offset: 0x40, Size: 0x1]// 0x7611eb2700

--------------------------------
Class: KOFActivityData
	float ActivityHealth;//[Offset: 0x0, Size: 0x4]// 0x7611eb2200
	float ReActivityHealthTime;//[Offset: 0x4, Size: 0x4]// 0x7611eb2190
	float HitInterval;//[Offset: 0x8, Size: 0x4]// 0x7611eb2120
	float SwimParticleOffset;//[Offset: 0x10, Size: 0x4]// 0x7611eb20b0
	AkAudioEvent* ActivityHealthOverAudio;//[Offset: 0x18, Size: 0x28]// 0x7611eb2030
	ParticleSystem* ActivityHealthOverParticle;//[Offset: 0x40, Size: 0x28]// 0x7611eb1fb0
	ParticleSystem* ActivityHealthHitParticle;//[Offset: 0x68, Size: 0x28]// 0x7611eb1f30
	AnimationAsset* ActivityHealthOverAnim;//[Offset: 0x90, Size: 0x28]// 0x7611eb1eb0
	AnimationAsset* ActivityHealthHitAnim;//[Offset: 0xb8, Size: 0x28]// 0x7611eb1e30
	bool NeedHitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]// 0x7611eb1db0

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 0xc]// 0x7611eb1670
	Vector PitchOffset;//[Offset: 0xc, Size: 0xc]// 0x7611eb15f0
	Vector FootOffset;//[Offset: 0x18, Size: 0xc]// 0x7611eb1570
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 0xc]// 0x7611eb14f0

--------------------------------
Class: PersistClientStateComponent.ActorComponent.Object
	PersistForcePersonPerspectiveInfo ForcePersonPerspectiveInfo;//[Offset: 0x128, Size: 0x18]// 0x75a8420c80
	PersistUIMaskInfo UIMaskInfo;//[Offset: 0x140, Size: 0x28]// 0x75a8420d00
	PersistViewTargetInfo ViewTargetInfo;//[Offset: 0x168, Size: 0x28]// 0x75a8420d80
	PersistSubAnimInfo[] SubAnimInfoArray;//[Offset: 0x190, Size: 0x10]// 0x75a8420e80
	PersistMontageInfo MontageInfo;//[Offset: 0x1a0, Size: 0x40]// 0x75a8420f00
	PersistDoActionsInfo DoActionsInfo;//[Offset: 0x1e0, Size: 0x38]// 0x75a8420f80
	PersistVisPosUIInfo VisPosUIInfo;//[Offset: 0x218, Size: 0x18]// 0x75a8421000
	PersistAvatarHideInfo AvatarHideInfo;//[Offset: 0x230, Size: 0x30]// 0x75a8421080
	PersistUIStyleInfo UIStyleInfo;//[Offset: 0x260, Size: 0x30]// 0x75a8421100
	PersistActivityUIInfo ActivityUIInfo;//[Offset: 0x290, Size: 0x30]// 0x75a8421180
	PersistRTPCValueInfo RTPCValueInfo;//[Offset: 0x2c0, Size: 0x30]// 0x75a8421200
	STExtraBaseCharacter* Owner;//[Offset: 0x2f0, Size: 0x8]// 0x75a8421280
	void SetUpVisPosUIInfo(bool bSetUp);// 0x44769e0
	void SetUpUIStyleInfo(bool bSetUp, UserWidgetStyle* UserWidgetStyle);// 0x4476918
	void SetUpUIMaskServer(bool bSetUp, FString Param);// 0x44767fc
	void SetUpSubViewTargetServer(bool bSetUp, Actor* TargetActor, float BlendTime);// 0x44766f8
	void SetUpSubAnimInstanceServer(bool bSetUp, class AnimInstance SubInstanceClass, FName SlotName, Actor* OwningActor, int SubAnimTypes);// 0x4476580
	void SetUpRTPCValue(bool bSetUp, PersistRTPCKeyValue[] RTPCValues);// 0x4476440
	void SetUpForcePersonPerspective(bool bSetUp, bool bFpp);// 0x4476370
	void SetUpAvatarHideServer(bool bSetUp, enum[] SlotArray);// 0x4476254
	void SetUpActivityUIInfos(bool bSetUp, FName[] ShowUINames, Actor* OwningActor, enum ActivityUIShowMode);// 0x44760c0
	void SetUpActivityUIInfo(bool bSetUp, FName ShowUIName, Actor* OwningActor, enum ActivityUIShowMode);// 0x4475f84
	void SetUpActivityActionServer(bool bDo, out FName[] ActionName, Actor* OwningActor);// 0x4475e60
	void RecoverClientStateNetLoss(UAEPlayerController* PC);// 0x4475de4
	void RecoverClientStateApplicationReactivated();// 0x4475dd0
	void PlayMontage(bool bPlay, SoftObjectPath InMontage, float fTime);// 0x4475c70
	void OnRep_VisPosUIInfo();// 0x4475c20
	void OnRep_ViewTargetInfo();// 0x4475bd0
	void OnRep_UIStyleInfo();// 0x4475b80
	void OnRep_UIMaskInfo();// 0x4475b30
	void OnRep_SubAnimInfo();// 0x4475b1c
	void OnRep_RTPCValueInfo();// 0x4475acc
	void OnRep_MontageInfo();// 0x4475ab8
	void OnRep_ForcePersonPerspectiveInfo();// 0x4475a68
	void OnRep_DoActionsInfo();// 0x4475a18
	void OnRep_AvatarHideInfo();// 0x44759c8
	void OnRep_ActivityUIInfo();// 0x4475978
	void OnMainCharAnimInstanceInit();// 0x4475964
	void OnLoadMontageInfoDone();// 0x4475950
	UserWidgetStyle*[] GetUIStyleList();// 0x44758d0
	void ForceUndoActivityUI();// 0x4475898
	void ClearActivityActionServer();// 0x4475884

--------------------------------
Class: PersistForcePersonPerspectiveInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76121bbc70
	bool bFpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]// 0x76121bbbf0

--------------------------------
Class: PersistBase
	ScriptStruct* StructClass;//[Offset: 0x8, Size: 0x8]// 0x76121ba980

--------------------------------
Class: PersistUIMaskInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76121bbad0
	FString Param;//[Offset: 0x18, Size: 0x10]// 0x76121bba60

--------------------------------
Class: PersistViewTargetInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76121bbe80
	Actor* OwningActor;//[Offset: 0x18, Size: 0x8]// 0x76121bbe00
	float BlendTime;//[Offset: 0x20, Size: 0x4]// 0x76121bbd90

--------------------------------
Class: PersistSubAnimInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76121bc390
	class AnimInstance* SubInstanceClass;//[Offset: 0x18, Size: 0x8]// 0x76121bc310
	FName SlotName;//[Offset: 0x20, Size: 0x8]// 0x76121bc2a0
	Actor* OwningActor;//[Offset: 0x28, Size: 0x8]// 0x76121bc220
	int SubAnimTypes;//[Offset: 0x30, Size: 0x4]// 0x76121bc1b0

--------------------------------
Class: PersistMontageInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76121bc090
	SoftObjectPath TargetMontage;//[Offset: 0x18, Size: 0x18]// 0x76121bc010
	float PlayTime;//[Offset: 0x30, Size: 0x4]// 0x76121bbfa0

--------------------------------
Class: PersistDoActionsInfo.PersistBase
	FName[] Actions;//[Offset: 0x10, Size: 0x10]// 0x76121bb8d0
	Actor* OwningActor;//[Offset: 0x30, Size: 0x8]// 0x76121bb850

--------------------------------
Class: PersistVisPosUIInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]// 0x76121bb730

--------------------------------
Class: PersistAvatarHideInfo.PersistBase
	enum[] AvatarID;//[Offset: 0x10, Size: 0x10]// 0x76121bb510

--------------------------------
Class: PersistUIStyleInfo.PersistBase
	UserWidgetStyle*[] UserWidgetStyle;//[Offset: 0x10, Size: 0x10]// 0x76121bafd0

--------------------------------
Class: PersistActivityUIInfo.PersistBase
	ActivityUIInfo[] UINameAndShowModeArray;//[Offset: 0x10, Size: 0x10]// 0x76121bae30
	ActivityUIInfo[] OldUINameAndShowModeArray;//[Offset: 0x20, Size: 0x10]// 0x76121baaa0

--------------------------------
Class: ActivityUIInfo
	FName UIName;//[Offset: 0x0, Size: 0x8]// 0x76121badc0
	enum ShowMode;//[Offset: 0x8, Size: 0x1]// 0x76121bacc0
	Actor* OwningActor;//[Offset: 0x10, Size: 0x8]// 0x76121bac40

--------------------------------
Class: PersistRTPCValueInfo.PersistBase
	PersistRTPCKeyValue[] RTPCKeyValue;//[Offset: 0x10, Size: 0x10]// 0x76121bb170

--------------------------------
Class: PersistRTPCKeyValue
	FName RTPCKey;//[Offset: 0x0, Size: 0x8]// 0x76121bb400
	float RTPCValue;//[Offset: 0x8, Size: 0x4]// 0x76121bb390
	Actor* Actor;//[Offset: 0xc, Size: 0x8]// 0x76121bb310

--------------------------------
Class: PlayMontageData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]// 0x7611eb0c10
	float InPlayRate;//[Offset: 0x8, Size: 0x4]// 0x7611eb0ba0
	float InStartPosition;//[Offset: 0xc, Size: 0x4]// 0x7611eb0b30
	FName StartSectionName;//[Offset: 0x10, Size: 0x8]// 0x7611eb0ac0
	byte PlayType;//[Offset: 0x18, Size: 0x1]// 0x7611eb0a40
	bool IsPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]// 0x7611eb09c0
	bool PlayDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]// 0x7611eb0940

--------------------------------
Class: UGCMoveSpeedScaleModifyItem
	FString AttrModifyItemName;//[Offset: 0x0, Size: 0x10]// 0x7611eafde0
	FString AttrName;//[Offset: 0x10, Size: 0x10]// 0x7611eafd70
	enum[] ValidPawnStateList;//[Offset: 0x20, Size: 0x10]// 0x7611eafbf0
	float ModifierValue;//[Offset: 0x30, Size: 0x4]// 0x7611eafb80

--------------------------------
Class: Float_NetQuantize8.FloatNet

--------------------------------
Class: FloatNet

--------------------------------
Class: SubAnimInstanceMap.DataAsset.Object
	<enum,AnimMapData> AnimMap;//[Offset: 0x30, Size: 0x50]// 0x75a85b1ec0
	LoadAnimData[] AnimLoadList;//[Offset: 0x80, Size: 0x10]// 0x75a85bb000
	int SyncLoadIndex;//[Offset: 0xa0, Size: 0x4]// 0x75a85d66f0
	void UpdateFinishPending_GameThread();// 0x46f9c40
	void ResetSubAnimNodeBySubAnimType(enum SubAnimTypeName, AnimInstance* TargetAnim);// 0x46f9b88
	void ResetSubAnimNodeBySlot(FName SubAnimSlotName, AnimInstance* TargetAnim);// 0x46f9ad4
	void ReplaceSubAnimNodeBySubAnimType(enum SubAnimTypeName, AnimInstance* TagetAnim);// 0x46f9a1c
	void ReplaceSubAnimNodeByAnimData(out const AnimMapData AnimData, AnimInstance* TagetAnim);// 0x46f9920
	void RemoveLoadIndexLoadAnimData(out const LoadAnimData LoadAnimData);// 0x46f9860
	void ProcessLoadAnimData(out const LoadAnimData LoadAnimData);// 0x46f97a0
	void ProcessAsyncLoadFinishIndex(int SyncIndex);// 0x46f9724
	void OnLoadAnimComponent(int SyncIndex);// 0x46f96a8
	LoadAnimData GetLoadIndexLoadAnimData(int SyncIndex, out bool bFound);// 0x46f9584
	void EnqueueLoadIndexLoadAnimData(out const LoadAnimData LoadAnimData);// 0x46f94c4
	bool DequeueLoadIndexLoadAnimData(int SyncIndex, out LoadAnimData LoadAnimData);// 0x46f93b4

--------------------------------
Class: LoadAnimData
	int LoadIndex;//[Offset: 0x0, Size: 0x4]// 0x7612205a20
	AnimMapData AnimMapData;//[Offset: 0x8, Size: 0x30]// 0x76122059a0
	AnimInstance* TargetAnim;//[Offset: 0x38, Size: 0x8]// 0x7612205920
	class Object* LoadedAnimInstanceClass;//[Offset: 0x40, Size: 0x8]// 0x76122058a0

--------------------------------
Class: STExtraPlayerVaultComponent.ActorComponent.Object
	byte DrawDebugType;//[Offset: 0x158, Size: 0x1]// 0x75a8635c80
	float DrawTime;//[Offset: 0x15c, Size: 0x4]// 0x75bcaf5c40
	bool bPreLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]// 0x75a8635d00
	VaultAnimDataAsset* VaultAnimDataAssetPtr;//[Offset: 0x168, Size: 0x8]// 0x75a8635d80
	float SweepCapsuleRadius;//[Offset: 0x170, Size: 0x4]// 0x75bcaf5cb0
	byte[] SweepObjectTypes;//[Offset: 0x178, Size: 0x10]// 0x75a8635e80
	VaultCheckRule[] CheckRuleList;//[Offset: 0x188, Size: 0x10]// 0x75a8635f80
	float CheckDeviation;//[Offset: 0x198, Size: 0x4]// 0x75bcaf5d20
	float TPPCheckDist;//[Offset: 0x19c, Size: 0x4]// 0x75bcaf5d90
	float FPPCheckDist;//[Offset: 0x1a0, Size: 0x4]// 0x75bcaf5e00
	float InValidAngle;//[Offset: 0x1a4, Size: 0x4]// 0x75bcaf5e70
	float CheckHeightHalfDist;//[Offset: 0x1a8, Size: 0x4]// 0x75bcaf5ee0
	float MinCheckHeight;//[Offset: 0x1ac, Size: 0x4]// 0x75bcaf5f50
	float FPPMinCheckHeight;//[Offset: 0x1b0, Size: 0x4]// 0x75bcaf5fc0
	float MaxCheckHeight;//[Offset: 0x1b4, Size: 0x4]// 0x75bcaf6030
	float FPPMaxCheckHeight;//[Offset: 0x1b8, Size: 0x4]// 0x75bcaf60a0
	float LowWindowMinCheckHeight;//[Offset: 0x1bc, Size: 0x4]// 0x75bcaf6110
	float MinVaultHeightDiff;//[Offset: 0x1c0, Size: 0x4]// 0x75bcaf6180
	float VaultCheckDist;//[Offset: 0x1c4, Size: 0x4]// 0x75bcaf61f0
	float FPPVaultThickThreshold;//[Offset: 0x1c8, Size: 0x4]// 0x75bcaf6260
	<FString,CommonVaultData> VaultDataMap;//[Offset: 0x1d0, Size: 0x50]// 0x75a86816c0
	FPPVaultData[] FPPVaultDataArray;//[Offset: 0x220, Size: 0x10]// 0x75a8636100
	float VaultAnimPlayRatio;//[Offset: 0x230, Size: 0x4]// 0x75bcaf6340
	float StopVaultRelativeWallDist;//[Offset: 0x234, Size: 0x4]// 0x75bcaf63b0
	float FPPVaultShakeOffDeltaHeight;//[Offset: 0x238, Size: 0x4]// 0x75bcaf6420
	float FallingVaultMinHeightToFloor;//[Offset: 0x23c, Size: 0x4]// 0x75bcaf6490
	Vector ClimbDistance;//[Offset: 0x240, Size: 0xc]// 0x75a8636180
	float InclinationCheckHeight;//[Offset: 0x24c, Size: 0x4]// 0x75bcaf6500
	float MaxLandingAreaTiltAngle;//[Offset: 0x250, Size: 0x4]// 0x75bcaf6570
	Vector CheckThePathIsPurePlaneBoxHalfExtent;//[Offset: 0x254, Size: 0xc]// 0x75a8636200
	float MinJumpLandingHeightDiff;//[Offset: 0x260, Size: 0x4]// 0x75bcaf65e0
	float CheatingDist;//[Offset: 0x264, Size: 0x4]// 0x75bcaf6650
	bool bEnableLeaveStuckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]// 0x75a8636280
	float LeaveStuckAllowedPercentage;//[Offset: 0x26c, Size: 0x4]// 0x75bcaf66c0
	<FString,AIVaultData> AIVaultDataMap;//[Offset: 0x278, Size: 0x50]// 0x75a8681780
	byte ExtraSweepObjectType;//[Offset: 0x2c8, Size: 0x1]// 0x75a8636380
	CommonVaultData CurVaultData;//[Offset: 0x370, Size: 0x60]// 0x75a8636400
	FPPVaultData CurFPPVaultData;//[Offset: 0x428, Size: 0x28]// 0x75a8636480
	Actor* CheckActor;//[Offset: 0x458, Size: 0x8]// 0x75a8636500
	PrimitiveComponent* CheckComponent;//[Offset: 0x460, Size: 0x8]// 0x75a8636580
	AnimMontage* CurVaultMontage;//[Offset: 0x468, Size: 0x8]// 0x75a8636600
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x470, Size: 0x10]// 0x75a8636700
	bool Vault(bool bNeedCheck);// 0x469e6d4
	void PawnVaultNetMulticast(float _ForwardBlockDist, float _BlockHeight, float _VaultDist, byte VaultDataMapKeyIndex, Vector _PawnVaultStartLoc, Vector _PawnVaultEndLoc, Rotator _PawnVaultRot, Actor* _CheckActor, float _CurJumpLandingHeight, float _CurJumpLandingDist, Vector _ForwardHitPoint, Vector _ForwardBlockDir, bool bCheckDynamicBlock);// 0x469e338
	void OnStateLeave(enum State);// 0x469e2bc
	void OnStateInterrupted(int State, int InterruptedBy);// 0x469e208
	byte GetVaultKeyIndexForAI(float _BlockHeight, float _VaultThick, bool _bIsJumping);// 0x469e100
	void ForceCancelVaultOnServer();// 0x469e0ec
	bool CheckCanVault(bool bCheckPlayerState, bool bUseCustomLocAndRot, Vector CustomLoc, Rotator CustomRot);// 0x469df88
	void CancelVaultOnServer(bool bForce);// 0x469df04
	void BP_OnRecycled();// 0xffffff8a17adf2b0

--------------------------------
Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 0x4]// 0x76121fd5a0
	float StandCheckDist;//[Offset: 0x4, Size: 0x4]// 0x76121fd530
	float MoveCheckDist;//[Offset: 0x8, Size: 0x4]// 0x76121fd4c0
	float SprintCheckDist;//[Offset: 0xc, Size: 0x4]// 0x76121fd450

--------------------------------
Class: CommonVaultData
	FString MontageName;//[Offset: 0x0, Size: 0x10]// 0x76121fd340
	CurveFloat* UpwardCurve;//[Offset: 0x10, Size: 0x8]// 0x76121fd2c0
	CurveFloat* FowardCurve;//[Offset: 0x18, Size: 0x8]// 0x76121fd240
	float ForwardBlockDist;//[Offset: 0x20, Size: 0x4]// 0x76121fd1d0
	float BlockHeight;//[Offset: 0x24, Size: 0x4]// 0x76121fd160
	float VaultThickThreshold;//[Offset: 0x28, Size: 0x4]// 0x76121fd0f0
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]// 0x76121fd070
	bool bForceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]// 0x76121fcff0
	bool bForceZPostionStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]// 0x76121fcf70
	float VaultTime;//[Offset: 0x30, Size: 0x4]// 0x76121fcf00
	float PlaySpeedRatio;//[Offset: 0x34, Size: 0x4]// 0x76121fce90
	float SpeedChangeTime;//[Offset: 0x38, Size: 0x4]// 0x76121fce20
	float ChangeSpeedRatio;//[Offset: 0x3c, Size: 0x4]// 0x76121fcdb0
	bool bAllowStandState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x76121fcd30
	bool bAllowMoveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]// 0x76121fccb0
	bool bAllowSprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]// 0x76121fcc30
	bool bPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]// 0x76121fcbb0
	float BreakWindowDelayTime;//[Offset: 0x44, Size: 0x4]// 0x76121fcb40
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x76121fcac0
	float MinCancelTime;//[Offset: 0x4c, Size: 0x4]// 0x76121fca50
	float MaxCancelTime;//[Offset: 0x50, Size: 0x4]// 0x76121fc9e0
	bool bIsFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]// 0x76121fc960
	float FallingVaultMinHeight;//[Offset: 0x58, Size: 0x4]// 0x76121fc8f0
	float FallCrossMinHeight;//[Offset: 0x5c, Size: 0x4]// 0x76121fc880

--------------------------------
Class: FPPVaultData
	float VaultHeight;//[Offset: 0x0, Size: 0x4]// 0x76121fc770
	FString MontageName;//[Offset: 0x8, Size: 0x10]// 0x76121fc700
	float VaultTime;//[Offset: 0x18, Size: 0x4]// 0x76121fc690
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]// 0x76121fc610
	float VaultSpeed;//[Offset: 0x20, Size: 0x4]// 0x76121fc5a0
	float VaultSpeedRate;//[Offset: 0x24, Size: 0x4]// 0x76121fc530

--------------------------------
Class: AIVaultData
	float BlockHeight;//[Offset: 0x0, Size: 0x4]// 0x76121fc420
	float VaultThickThreshold;//[Offset: 0x4, Size: 0x4]// 0x76121fc3b0
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x76121fc330
	bool bIsFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]// 0x76121fc2b0

--------------------------------
Class: FeatureCustomModule.Object
	FName[] Tags;//[Offset: 0x28, Size: 0x10]// 0x75b4c93680
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]// 0x75b4c93700
	float TickDeltaTime;//[Offset: 0x3c, Size: 0x4]// 0x75d0b31f80
	Actor* OwnerActor;//[Offset: 0x48, Size: 0x8]// 0x75b4c93780

--------------------------------
Class: KillDataAdditional
	int DamageType;//[Offset: 0x0, Size: 0x4]// 0x7611e6b3c0
	int AdditionalParam;//[Offset: 0x4, Size: 0x4]// 0x7611e6b350
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]// 0x7611e6b2d0
	int ResultHealthStatus;//[Offset: 0xc, Size: 0x4]// 0x7611e6b260
	int KillerKillCount;//[Offset: 0x10, Size: 0x4]// 0x7611e6b1f0
	float FinalDamage;//[Offset: 0x14, Size: 0x4]// 0x7611e6b180
	bool IsKillEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]// 0x7611e6b100

--------------------------------
Class: STPoisonWaterDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: UGCRadialDamageEvent.STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	int DamageTypeID;//[Offset: 0x58, Size: 0x4]// 0x7611e67640

--------------------------------
Class: UGCPointDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	int DamageTypeID;//[Offset: 0xb4, Size: 0x4]// 0x7611e67190

--------------------------------
Class: LowTemperatureDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: LastBreathWithoutRescueDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ElectricDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ReplayWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	int LoadingCountLimit;//[Offset: 0x464, Size: 0x4]// 0x75a87c6b20
	STExtraPlayerController* pReplayExtraPC;//[Offset: 0x468, Size: 0x8]// 0x75b4ccee80
	FString ReplayTargetPlayerName;//[Offset: 0x4a8, Size: 0x10]// 0x75a87c6b90
	FString ReplayTargetUIDStr;//[Offset: 0x4b8, Size: 0x10]// 0x75a87c6c00
	int ReplayTargetTeamID;//[Offset: 0x4c8, Size: 0x4]// 0x75a87c6c70
	LiveUIRecordSetting[] UIRecordSetting;//[Offset: 0x4d0, Size: 0x10]// 0x75b4ccef80
	int[] GameModeIDIgnoreCheckPlayerList;//[Offset: 0x4e0, Size: 0x10]// 0x75b4ccf000
	void UpdateWeaponUI();// 0x44e76f8
	void UpdateIDPanel();// 0xffffff8a17adf2b0
	void UpdateBulletUI();// 0x44e76dc
	void SetupUIRoot_BP();// 0x44e76c0
	void SetIsResettingViewTarget(bool isResetting);// 0x44e763c
	void RefreshUIInfoOnAttachCameraViewFinished();// 0xffffff8a17adf2b0
	void OnWidgetRelease();// 0x44e7620
	void OnWidgetReInit();// 0x44e7604
	void OnWidgetInitialize();// 0x44e75e8
	void OnViewCharaterChangedVechileSeat();// 0x44e75cc
	void OnViewCharacterDetachedFromVehicle(STExtraVehicleBase* Vehicle);// 0x44e7548
	void OnViewCharacterAttachedToVehicle(STExtraVehicleBase* Vehicle);// 0x44e74c4
	void OnSimulatedWeaponChanged();// 0x44e74a8
	void OnResetViewTarget_BP(OnReplaySetViewTarget inSettingInfo);// 0x44e7418
	void OnReplayFinishPlay();// 0x44e73fc
	void OnInitChildWidget();// 0xffffff8a17adf2b0
	void OnBulletNumChanged();// 0x44e73e0
	bool GetIsResettingViewTarget();// 0x44e73a8
	void ForceRefreshUI();// 0x44e738c
	void ClearUIOnGotoTime();// 0x44e7370

--------------------------------
Class: LiveUIRecordSetting
	int UniqueUIIndex;//[Offset: 0x0, Size: 0x4]// 0x76121cb440
	FString WidgetName;//[Offset: 0x8, Size: 0x10]// 0x76121cb3d0
	FString OuterName;//[Offset: 0x18, Size: 0x10]// 0x76121cb360

--------------------------------
Class: OnReplaySetViewTarget
	int LastTeamID;//[Offset: 0x0, Size: 0x4]// 0x76121cb650
	bool IsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x76121cb5d0
	STExtraPlayerState* NewPlayerState;//[Offset: 0x8, Size: 0x8]// 0x76121cb550

--------------------------------
Class: ReplayProgressbarWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bPressedReplayFastForwardButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]// 0x75b4ccf400
	bool bPressedReplayRewindButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]// 0x75b4ccf480
	bool MouseIsHoveredOnProgressEventItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 0x1]// 0x75b4ccf500
	ReplayKillOrHitdownInfoUIModel[] KillOrHitdownInfoUIModels;//[Offset: 0x460, Size: 0x10]// 0x75b4ccf600
	ReplayKillOrHitdownInfoUIModel[] NextChunkKillOrHitdownInfoUIModels;//[Offset: 0x470, Size: 0x10]// 0x75b4ccf700
	void UpdateKillorHitDownUIData();// 0xffffff8a17adf2b0
	void ShowReplayProgressUI();// 0xffffff8a17adf2b0
	void ShowReplayEventListUI();// 0xffffff8a17adf2b0
	void ShowReConnetionLoadingUI();// 0xffffff8a17adf2b0
	void RefreshUIInfoOnAttachCameraViewFinished();// 0xffffff8a17adf2b0
	void RefreshKillorHitDownUIData(bool hasData, bool IsHadData);// 0xffffff8a17adf2b0
	void OnWidgetInitialize();// 0xffffff8a17adf2b0
	void OnResetViewTarget_BP();// 0xffffff8a17adf2b0
	void OnReplayFinishPlay();// 0xffffff8a17adf2b0
	void OnReleasedReplayRewindButton();// 0xffffff8a17adf2b0
	void OnReleasedReplayPauseButton();// 0xffffff8a17adf2b0
	void OnReleasedReplayFastForwardButton();// 0xffffff8a17adf2b0
	void OnPressedReplayRewindButton();// 0xffffff8a17adf2b0
	void OnPressedReplayFastForwardButton();// 0xffffff8a17adf2b0
	void OnPressedEnterButtonEvent();// 0xffffff8a17adf2b0
	void OnLeaveFreeView();// 0xffffff8a17adf2b0
	void OnEnterFreeView();// 0xffffff8a17adf2b0
	void OnChangeInDilation(float InDilation);// 0xffffff8a17adf2b0
	void HideReConnetionLoadingUI();// 0xffffff8a17adf2b0

--------------------------------
Class: ReplayKillOrHitdownInfoUIModel
	FString Attacker;//[Offset: 0x0, Size: 0x10]// 0x76121cb250
	FString Victim;//[Offset: 0x10, Size: 0x10]// 0x76121cb1e0
	FString AttackerUID;//[Offset: 0x20, Size: 0x10]// 0x76121cb170
	FString VictimUID;//[Offset: 0x30, Size: 0x10]// 0x76121cb100
	bool IsKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]// 0x76121cb080
	int KillTime;//[Offset: 0x44, Size: 0x4]// 0x76121cb010
	bool KilledByPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x76121caf90

--------------------------------
Class: Replay_SkeletalData_Manager.Object
	DemoNetDriver* ReplyDemoNd;//[Offset: 0x30, Size: 0x8]// 0x75b4cd0d00
	Transform[] EveryTicksBonesTransform;//[Offset: 0x38, Size: 0x10]// 0x75b4cd0e00
	FName[] BonesName;//[Offset: 0x48, Size: 0x10]// 0x75b4cd0e80
	float[] EveryTicktime;//[Offset: 0x58, Size: 0x10]// 0x75b4cd0f00
	Character* CurCharacter;//[Offset: 0x68, Size: 0x8]// 0x75b4cd0f80
	bool[] EveryTicksErrorBonesIndex;//[Offset: 0x70, Size: 0x10]// 0x75b4cd1080
	FString[] ErrorLog;//[Offset: 0x80, Size: 0x10]// 0x75b4cd1100
	FString[] FPSLog;//[Offset: 0x90, Size: 0x10]// 0x75b4cd1180
	FString[] OthersLog;//[Offset: 0xa0, Size: 0x10]// 0x75b4cd1200
	FString[] OutFileNames;//[Offset: 0xb0, Size: 0x10]// 0x75b4cd1280
	Transform[] ReadInBonesTransform;//[Offset: 0xc0, Size: 0x10]// 0x75b4cd1380
	ActorComponent*[] Meshes;//[Offset: 0xd0, Size: 0x10]// 0x75b4cd1480
	MaterialInterface*[] PreMaterials;//[Offset: 0xe0, Size: 0x10]// 0x75b4cd1580
	STExtraGameInstance* CurGameInstance;//[Offset: 0x130, Size: 0x8]// 0x75b4cd1600
	UserWidget* ReplaySkeletonGMUI;//[Offset: 0x138, Size: 0x8]// 0x75b4cd1680
	class UserWidget* ReplaySkeletonGMUIClass;//[Offset: 0x140, Size: 0x28]// 0x75b4cd1700
	FString AddtionalName;//[Offset: 0x168, Size: 0x10]// 0x75a87c74c0
	bool bPauseWhenCompareError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]// 0x75b4cd1780
	bool bUseErrorMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]// 0x75b4cd1800
	float Threshold;//[Offset: 0x17c, Size: 0x4]// 0x75a87c7530
	Material* ErrorMaterial;//[Offset: 0x180, Size: 0x8]// 0x75b4cd1880
	float FixedFPS;//[Offset: 0x188, Size: 0x4]// 0x75a87c75a0
	bool bIsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]// 0x75b4cd1900
	void ShowGMUI(bool isShow);// 0x44e25e4
	void PauseOrPlay();// 0x44e25d0
	void DoBatchTexture(Texture* tex);// 0xffffff8a17adf2b0
	void BP_StartWriteOrCompareData(bool compare);// 0x44e254c
	void BP_ShowCompare();// 0x44e2538
	void BP_SetReplayFile(FString FullPath);// 0x44e2460
	void BP_SetDataFile(FString FullPath);// 0x44e2388
	FString BP_OpenReplayFile();// 0x44e2308
	bool BP_GetIsWrite();// 0x44e22d0
	bool BP_GetCanShowCompare();// 0x44e2298
	bool AutoTestWriteStart(FString replay_fullpath);// 0x44e21b4
	bool AutoTestCompareStart(FString replay_fullpath, FString data_fullpath);// 0x44e2040

--------------------------------
Class: ReplayCameraDataManager.Object

--------------------------------
Class: AssetRefStrategicManager.Object
	delegate OnPreloadContentForURLDelegate;//[Offset: 0x30, Size: 0x10]// 0x7611efb1a0
	delegate OnCheckCacheObjectDelegate;//[Offset: 0x40, Size: 0x10]// 0x7611efafe0
	delegate OnAvatarAsyncLoadFinishedDelegate;//[Offset: 0x50, Size: 0x10]// 0x7611efada0
	class AssetRefStrategicBase[] InitStrategicClass;//[Offset: 0x60, Size: 0x10]// 0x7611efaca0
	FString LobbyMapName;//[Offset: 0x70, Size: 0x10]// 0x7611efac30
	AssetRefStrategicBase*[] Strategics;//[Offset: 0x80, Size: 0x10]// 0x7611efab30
	AssetRefStrategicBase*[] TickableStrategics;//[Offset: 0x90, Size: 0x10]// 0x7611efaa30

--------------------------------
Class: AssetRefStrategicBase.Object
	AssetRefStrategicManager* OwnerManager;//[Offset: 0x28, Size: 0x8]// 0x75bde13400
	<Object*> RefSet;//[Offset: 0x30, Size: 0x50]// 0x75d119c260
	<Object*> NoGCRefSet;//[Offset: 0x80, Size: 0x50]// 0x75d119c300

--------------------------------
Class: CompletePlayback.FilebasedPlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x4d0, Size: 0x28]// 0x75b4e02600
	UAEUserWidget* ReplayUI;//[Offset: 0x4f8, Size: 0x8]// 0x75b4e02680
	bool IsUsingMapPlayerItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]// 0x75b4e02700
	FString[] ExcludedGameModes;//[Offset: 0x508, Size: 0x10]// 0x75b4e02780
	bool bUseNewDuplicateComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]// 0x75b4e02800
	bool bFastForwardSkipRepNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1]// 0x75b4e02880
	int SpawnReplicatedActorMaxFrameDelay;//[Offset: 0x51c, Size: 0x4]// 0x75b4e116a0
	float SpawnReplicatedActorThreshold;//[Offset: 0x520, Size: 0x4]// 0x75b4e11710
	bool bEnableUIDisplaySystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]// 0x75b4e02900
	ReplayUIDisplayManager* pUIDisplayManager;//[Offset: 0x558, Size: 0x8]// 0x75b4e02980
	<STExtraPlayerCharacter*,StaticMeshComponent*> ChacterHaloMap;//[Offset: 0x5b0, Size: 0x50]// 0x75b4df37c0
	<STExtraPlayerCharacter*,StaticMeshComponent*> ChacterArrowMap;//[Offset: 0x600, Size: 0x50]// 0x75b4df3880
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x670, Size: 0x8]// 0x75b4e02c00
	<enum,MaterialInstance*> HaloMaterials;//[Offset: 0x720, Size: 0x50]// 0x75b4df3940
	<enum,MaterialInstance*> ArrowEffectMaterials;//[Offset: 0x770, Size: 0x50]// 0x75b4df3a00
	MaterialInstance* HaloMaterial;//[Offset: 0x7c0, Size: 0x8]// 0x75b4e02f80
	MaterialInstance* ArrowMaterial;//[Offset: 0x7c8, Size: 0x8]// 0x75b4e03000
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]// 0x75b4e03080
	uint32[] TeammateKeyArray;//[Offset: 0x800, Size: 0x10]// 0x75b4e03100
	UAEDataTable* ConfigTable;//[Offset: 0x870, Size: 0x8]// 0x75b4e03180
	void NotifyCharacterShoot(STExtraWeapon* Weapon);// 0x42855d4
	void GetReplayPathFromBrowser(out FString OutReplayFullName);// 0x4285540
	static CompletePlayback* GetInstance(Object* WorldContextObj);// 0x42854c4
	enum GetCharacterType(STExtraPlayerCharacter* Character);// 0x4285438

--------------------------------
Class: FilebasedPlayback.GameReplay.Object
	int MaxHoursForKeepingFiles;//[Offset: 0x2f0, Size: 0x4]// 0x75b4e11860
	ReplayFileHeader ReplayHeaderInfo;//[Offset: 0x3a8, Size: 0x60]// 0x75b4e03500
	void UploadReplayFile(FString FileFullPath, int Sponsor, FString BattleID);// 0x4324498
	bool StopRecordingReplay();// 0x4324458
	bool StopPlay();// 0x4324418
	bool StartRecordingReplay(bool bSkipConditionCheck, enum RecordCondition);// 0x432433c
	FString ReplayNameToFullPath(FString InReplayName);// 0x4324260
	bool PreloadReplayMap(FString MapId, int DelayFrame);// 0x4324180
	bool PlayReplayWithPreloadedMap(FString MapId, FString DemoName, int DelayFrame);// 0x4324058
	bool PlayReplay();// 0x4324018
	bool PlayLiveDemoWithGameId(FString DemoName);// 0x4323f78
	bool PlayDemoWithFilename(FString DemoName);// 0x4323ed8
	ReplayFileHeader GetReplayFileHeaderInfoByReplayName(FString InReplayName);// 0x4323d4c
	ReplayFileHeader GetReplayFileHeaderInfo(FString InSourceFile);// 0x4323bc0
	FString GetRemoteStorageDir();// 0x4323b40
	FString GetFileCacheDir();// 0x4323ab8
	bool EnumerateReplayFiles(out ReplayFileItem[] OutFileInfos);// 0x43239c4
	void DownloadReplayFile(FString InUrl, out const delegate Delegate);// 0x43238c8
	bool DeleteReplayFile(FString FileFullPath);// 0x4323830

--------------------------------
Class: ReplayUIDisplayManager.Object
	<int,Button*> CachedButtonMap;//[Offset: 0x38, Size: 0x50]// 0x75a87cfc80

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x148, Size: 0x8]// 0x75a7a9b800
	ButtonStyle WidgetStyle;//[Offset: 0x150, Size: 0x238]// 0x75a7a9b880
	LinearColor ColorAndOpacity;//[Offset: 0x388, Size: 0x10]// 0x75a7a9b900
	LinearColor BackgroundColor;//[Offset: 0x398, Size: 0x10]// 0x75a7a9b980
	byte ClickMethod;//[Offset: 0x3a8, Size: 0x1]// 0x75a7a9ba00
	byte TouchMethod;//[Offset: 0x3a9, Size: 0x1]// 0x75a7a9ba80
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 0x1]// 0x75a7a9bb00
	bool IsPassMouseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 0x1]// 0x75a7a9bb80
	bool IsImgAlphaBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]// 0x75a7a9bc00
	delegate OnClicked;//[Offset: 0x3b0, Size: 0x10]// 0x75a7a9bc80
	delegate OnPressed;//[Offset: 0x3c0, Size: 0x10]// 0x75a7a9bd00
	delegate OnReleased;//[Offset: 0x3d0, Size: 0x10]// 0x75a7a9bd80
	delegate OnHovered;//[Offset: 0x3e0, Size: 0x10]// 0x75a7a9be00
	delegate OnUnhovered;//[Offset: 0x3f0, Size: 0x10]// 0x75a7a9be80
	delegate OnPressedParam;//[Offset: 0x400, Size: 0x10]// 0x75a7a9bf00
	delegate OnReleasedParam;//[Offset: 0x410, Size: 0x10]// 0x75a7a9bf80
	delegate OnReplayRecordNotify;//[Offset: 0x420, Size: 0x10]// 0x75a7a9c000
	delegate OnMouseButtonDownEvent;//[Offset: 0x430, Size: 0x10]// 0x75a7a9c080
	delegate OnMouseButtonUpEvent;//[Offset: 0x440, Size: 0x10]// 0x75a7a9c100
	delegate OnMouseMoveEvent;//[Offset: 0x450, Size: 0x10]// 0x75a7a9c180
	bool IsThisFrameClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]// 0x75a7a9c200
	void SetTouchMethod(byte InTouchMethod);// 0x60967b4
	void SetStyle(out const ButtonStyle InStyle);// 0x6096714
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x6096698
	void SetClickMethod(byte InClickMethod);// 0x609661c
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x60965a0
	void Release();// 0x609658c
	bool IsPressed();// 0x6096554
	byte GetReleasedReason();// 0x6096538

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x6099f10
	PanelSlot* GetContentSlot();// 0x6099edc
	Widget* GetContent();// 0x6099ea8

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]// 0x75a797ae00

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x78]// 0x76120168d0
	SlateBrush Hovered;//[Offset: 0x80, Size: 0x78]// 0x7612016850
	SlateBrush Pressed;//[Offset: 0xf8, Size: 0x78]// 0x76120167d0
	SlateBrush Disabled;//[Offset: 0x170, Size: 0x78]// 0x7612016750
	Margin NormalPadding;//[Offset: 0x1e8, Size: 0x10]// 0x76120166d0
	Margin PressedPadding;//[Offset: 0x1f8, Size: 0x10]// 0x7612016650
	SlateSound PressedSlateSound;//[Offset: 0x208, Size: 0x18]// 0x76120165d0
	SlateSound HoveredSlateSound;//[Offset: 0x220, Size: 0x18]// 0x7612016550

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]// 0x7612016090

--------------------------------
Class: ReplayFileHeader
	int ReplayFileFormatRevision;//[Offset: 0x0, Size: 0x4]// 0x761218b790
	FString ReplayName;//[Offset: 0x8, Size: 0x10]// 0x761218b720
	FString ReplayVersion;//[Offset: 0x18, Size: 0x10]// 0x761218b6b0
	int64 DateTime;//[Offset: 0x28, Size: 0x8]// 0x761218b640
	float TotalTime;//[Offset: 0x30, Size: 0x4]// 0x761218b5d0
	FString RoomName;//[Offset: 0x38, Size: 0x10]// 0x761218b560
	int GameModeID;//[Offset: 0x48, Size: 0x4]// 0x761218b4f0
	int SubModeId;//[Offset: 0x4c, Size: 0x4]// 0x761218b480
	int MapId;//[Offset: 0x50, Size: 0x4]// 0x761218b410
	int PlayerNum;//[Offset: 0x54, Size: 0x4]// 0x761218b3a0
	int CustomGameModeId;//[Offset: 0x58, Size: 0x4]// 0x761218b330
	float FullDataStartTime;//[Offset: 0x5c, Size: 0x4]// 0x761218b2c0

--------------------------------
Class: ReplayFileItem
	ReplayFileHeader HeaderInfo;//[Offset: 0x0, Size: 0x60]// 0x761218b1a0
	FString FullPath;//[Offset: 0x60, Size: 0x10]// 0x761218b130
	int64 FileSize;//[Offset: 0x70, Size: 0x8]// 0x761218b0c0

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]// 0x75a7b60600
	int curPlayerTemaID;//[Offset: 0x29c, Size: 0x4]// 0x75a7b90460
	bool IsOpenWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]// 0x75a7b60680
	<FString,WonderfulReplayHeadInfo> headinfolist;//[Offset: 0x2a8, Size: 0x50]// 0x75a7b6f200
	delegate OnWonderfulReplayUIRelease;//[Offset: 0x2f8, Size: 0x10]// 0x75a7b60780
	delegate OnWonderfulReplayFastforwardFinished;//[Offset: 0x308, Size: 0x10]// 0x75a7b60800
	delegate WonderfulReplayGameStateReadyHandler;//[Offset: 0x318, Size: 0x10]// 0x75a7b60880
	void SetPlayListPerReplay(FString MVPPlayerUID);// 0x4835a18

--------------------------------
Class: WonderfulReplayHeadInfo
	FString PicURL;//[Offset: 0x0, Size: 0x10]// 0x76119bb4b0
	FString UID;//[Offset: 0x10, Size: 0x10]// 0x76119bb440
	int curAvatarBoxid;//[Offset: 0x20, Size: 0x4]// 0x76119bb3d0
	int VsTeamLevel;//[Offset: 0x24, Size: 0x4]// 0x76119bb360
	int[] BadgeID;//[Offset: 0x28, Size: 0x10]// 0x760d23fc80
	int Sex;//[Offset: 0x38, Size: 0x4]// 0x76119bb280
	int PlayerLevel;//[Offset: 0x3c, Size: 0x4]// 0x76119bb210
	FString Name;//[Offset: 0x40, Size: 0x10]// 0x76119bb1a0

--------------------------------
Class: ObPlayback.CompletePlayback.FilebasedPlayback.GameReplay.Object
	FString TmpViewTargetName;//[Offset: 0x878, Size: 0x10]// 0x75a88738a0
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x8e8, Size: 0x8]// 0x75a8442c80
	FString ReplayFileServerUrl;//[Offset: 0x8f8, Size: 0x10]// 0x75a8873910
	float ChunkUploadDelayInSeconds;//[Offset: 0x908, Size: 0x4]// 0x75a8873980
	float ChunkDownloadDelayInSeconds;//[Offset: 0x90c, Size: 0x4]// 0x75a88739f0
	float ChunkAdvancePlayInSeconds;//[Offset: 0x910, Size: 0x4]// 0x75a8873a60
	int StartNotifyStartLiveChunkNum;//[Offset: 0x914, Size: 0x4]// 0x75a8873ad0
	float ChunkUploadRetryDelayInSeconds;//[Offset: 0x918, Size: 0x4]// 0x75a8873b40
	int ChunkUploadRetryTimes;//[Offset: 0x91c, Size: 0x4]// 0x75a8873bb0
	float ChunkDownloadRetryDelayInSeconds;//[Offset: 0x920, Size: 0x4]// 0x75a8873c20
	int ChunkDownloadRetryTimes;//[Offset: 0x924, Size: 0x4]// 0x75a8873c90
	int MaxLiveUploadSpeed;//[Offset: 0x928, Size: 0x4]// 0x75a8873d00
	void SetOBUI(UAEUserWidget* InWidget);// 0x445a1a0

--------------------------------
Class: LivePlayback.CompletePlayback.FilebasedPlayback.GameReplay.Object
	void SetSpectatorName(FString SpectatorName, bool bgm, bool isChangeViewTarget, bool isAutoSetName);// 0x43e83bc
	bool PlayReplay();// 0x43e837c
	bool PlayDemoWithFilename(FString DemoName);// 0x43e82dc
	void OnLiveNumChanged();// 0x43e82c8
	void OnKillNumChanged(int KillNum);// 0x43e824c
	void OnGameOver(FName GameStatus);// 0x43e81d0
	void OnFinishOptimizeGotoTime();// 0x43e81bc
	void OnEnterFinalState(const int CircleReverseIndex);// 0x43e8140
	bool IsInSpectating();// 0x43e8108
	static LivePlayback* GetInstance(Object* WorldContextObj);// 0x43e808c

--------------------------------
Class: AntiCheatConfig.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x28, Size: 0x10]// 0x75b4c91980
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x38, Size: 0x10]// 0x75b4c91a80

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 0x10]// 0x761218adb0
	int bUseFeatureSet;//[Offset: 0x10, Size: 0x4]// 0x761218ad40
	FString[] ExcludeComponentsList_DS;//[Offset: 0x18, Size: 0x10]// 0x761218ac50
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x28, Size: 0x10]// 0x761218ab60
	FString[] ExcludeComponentsList_Team;//[Offset: 0x38, Size: 0x10]// 0x761218aa70
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x48, Size: 0x10]// 0x761218a980

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarVisibilityCollection.BlueprintFunctionLibrary.Object
	bool bUseAvatarVisibilityFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]// 0x75bdd83b80
	SlotVisiblityConfigItem[] NormalBattleSlotVisibilityConfigItemList;//[Offset: 0x30, Size: 0x10]// 0x75bdd83c80
	SlotVisiblityConfigItem[] RoomModeSlotVisibilityConfigItemList;//[Offset: 0x40, Size: 0x10]// 0x75bdd83d80
	SlotVisiblityConfigItem CurGameModeSlotVisibilityConfig;//[Offset: 0x50, Size: 0x38]// 0x75bdd83e00
	STExtraBaseCharacter*[] DelayedRefreshCharList;//[Offset: 0x98, Size: 0x10]// 0x75bdd83f00
	static void ResetCurBattleConfig(const Object* WorldContextObj);// 0x419583c
	static bool MarkDelayedRefreshForChar(const STExtraBaseCharacter* InCheckChar);// 0x41957bc
	static bool IsWeaponSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x41956bc
	static bool IsWeaponSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x41954e0
	static bool IsWeaponAttachmentSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x41953e0
	static bool IsWeaponAttachmentSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x4195204
	static bool IsSelfViewForChar(const STExtraBaseCharacter* InCheckChar);// 0x4195184
	static bool IsOBViewAlwaysVisibile(const Object* WorldContextObj);// 0x4195104
	static bool IsGMViewAlwaysVisibile(const Object* WorldContextObj);// 0x4195084
	static bool IsFeatureEnable(const Object* WorldContextObj);// 0x4195004
	static bool IsAvatarSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x4194f04
	static bool IsAvatarSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x4194d28
	static void DynamicSetWeaponSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsVisible, const byte InMask);// 0x4194bf8
	static void ClearDynamicWeaponSlotVisible(const Object* WorldContextObj);// 0x4194b84

--------------------------------
Class: SlotVisiblityConfigItem
	int GameModeID;//[Offset: 0x0, Size: 0x4]// 0x761214cc60
	bool bSelfAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]// 0x761214cbe0
	bool bOBAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]// 0x761214cb60
	bool bGMAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]// 0x761214cae0
	AvatarVisibilityConfig AvatarVisibilityConfig;//[Offset: 0x8, Size: 0x10]// 0x761214c720
	WeaponVisibilityConfig WeaponVisibilityConfig;//[Offset: 0x18, Size: 0x20]// 0x761214be10

--------------------------------
Class: AvatarVisibilityConfig
	AvatarSlotVisibilityConfigItem[] AvatarSlotVisibilityConfigList;//[Offset: 0x0, Size: 0x10]// 0x761214c840

--------------------------------
Class: AvatarSlotVisibilityConfigItem.SlotVisiblityItem
	enum ConfigSlot;//[Offset: 0x14, Size: 0x1]// 0x761214c9e0

--------------------------------
Class: SlotVisiblityItem
	SlotItemVisibilityCondition NormalVisibilityConfig;//[Offset: 0x8, Size: 0x4]// 0x761214c2e0
	SlotItemVisibilityCondition SkinVisibilityConfig;//[Offset: 0xc, Size: 0x4]// 0x761214c260
	SlotItemVisibilityCondition VehicleVisibilityConfig;//[Offset: 0x10, Size: 0x4]// 0x761214c0d0

--------------------------------
Class: SlotItemVisibilityCondition
	int VisibilityConfig;//[Offset: 0x0, Size: 0x4]// 0x761214c1f0

--------------------------------
Class: WeaponVisibilityConfig
	WeaponSlotVisiblityConfigItem[] WeaponSlotVisibilityConfigList;//[Offset: 0x0, Size: 0x10]// 0x761214c500
	WeaponAttachmentSlotVisibilityConfigItem[] WeaponAttachmentSlotVisibilityConfigList;//[Offset: 0x10, Size: 0x10]// 0x761214bf30

--------------------------------
Class: WeaponSlotVisiblityConfigItem.SlotVisiblityItem
	byte ConfigSlot;//[Offset: 0x14, Size: 0x1]// 0x761214c6a0

--------------------------------
Class: WeaponAttachmentSlotVisibilityConfigItem.SlotVisiblityItem
	enum ConfigSlot;//[Offset: 0x14, Size: 0x1]// 0x761214c400

--------------------------------
Class: FrequncyAccessActorList
	Actor*[] ActorList;//[Offset: 0x0, Size: 0x10]// 0x7611ef00a0

--------------------------------
Class: ObjectPoolConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 0x8]// 0x7611eefde0
	FString ObjectClassFullPath;//[Offset: 0x8, Size: 0x10]// 0x7611eefd70
	int MaxObjectNum;//[Offset: 0x18, Size: 0x4]// 0x7611eefd00
	int MinObjectNum;//[Offset: 0x1c, Size: 0x4]// 0x7611eefc90
	int CleanupTimeout;//[Offset: 0x20, Size: 0x4]// 0x7611eefc20

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0x260, Size: 0x10]// 0x75a87ac700
	LuaClassObj* LuaObject;//[Offset: 0x2e0, Size: 0x8]// 0x75a87ac780
	UAEUserWidget* GetWidgetFromName(FString WidgetName);// 0x4ce40b4
	UAEUserWidget* GetWidget(int Index);// 0x4ce4028
	LuaClassObj* GetLuaObject();// 0x4ce3ff4
	GameFrontendHUD* GetGameFrontendHUD();// 0x4ce3fc0
	UAEUserWidget* CreateDynamicSingleWidget(FName GameStatus, out const FString WidgetName);// 0x4ce3ed4

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 0x10]// 0x76119c3a90
	FString Container;//[Offset: 0x10, Size: 0x10]// 0x76119c3a20
	int ZOrder;//[Offset: 0x20, Size: 0x4]// 0x76119c39b0
	class Object* WidgetClass;//[Offset: 0x28, Size: 0x8]// 0x760d23b880

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x528, Size: 0x8]// 0x75a7a9d480
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1]// 0x75a7a9d500
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget, int inUIControlState, bool bAsyncLoad, bool bUIMsg);// 0x4d0ced0
	void SubSceneCameraBlendTime(int miliSeconds);// 0x4d0ce54
	void SubDefaultSceneCamera(int sceneCameraIndex);// 0x4d0cdd8
	void SubDefaultChildUI(out const FString[] childList);// 0x4d0cd1c
	void SubDefaultBaseUI(FString baseUI);// 0x4d0cc98
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x4d0cb90
	void ResetZOrderImm(int ZOrder, int Index);// 0x4d0cadc
	void ResetZOrder(int ZOrder, int Index);// 0x4d0ca28
	void ReplaceUIWidgetAbs(out const WidgetReplacePair[] InReplaceList);// 0x4d0c960
	void ReplaceUIWidget(out const WidgetReplacePair[] InReplaceList);// 0x4d0c898
	void PushPanel(FString srcTag, FString dstTag, bool Singleton);// 0x4d0c784
	void PopPanel();// 0x4d0c770
	bool IsTopStackPanel();// 0x4d0c738
	bool IsPushedPanel();// 0x4d0c700
	void HandleUIMessageNoFetch(FString UIMessage);// 0x4d0c67c
	void HandleUIMessage(FString UIMessage);// 0x4d0c5f8
	void HandleSingleDynamicCreation(FString WidgetName);// 0x4d0c520
	void HandleSceneReady();// 0x4d0c50c
	void HandleDynamicDestruction();// 0x4d0c4f8
	void HandleDynamicCreation();// 0x4d0c4e4
	UAEUserWidget* GetWidgetFromName(FString WidgetPath);// 0x4d0c404
	FString GetTopStackPanelSrcTag();// 0x4d0c384
	FString GetTopStackPanelDstTag();// 0x4d0c304
	FString GetGameStatus();// 0x4d0c284
	FString GetFriendlyName();// 0x4d0c204
	void DestroyUIWidget(UserWidget* UserWidget);// 0x4d0c188
	UserWidget* CreateUIWidgetWithClass(class Object WidgetClass);// 0x4d0c0fc
	UserWidget* CreateUIWidget(FString WidgetPath);// 0x4d0c01c
	void ClearReplaceUI();// 0x4d0c008
	void AddToTopStackPanel();// 0x4d0bff4

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x510, Size: 0x8]// 0x75a879e180
	Object* OwningObject;//[Offset: 0x518, Size: 0x8]// 0x75a879e200
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x520, Size: 0x8]// 0x75a879e280

--------------------------------
Class: LuaStateWrapper.Object
	void StatEnd(FString TagName);// 0x783e41c
	void StatBegin(FString TagName);// 0x783e398
	void PrintLuaLoadStatistics();// 0x783e384
	static int[] GetTestingValue(FString InTableName, int InKey);// 0x783e27c
	static FString[] GetTableStrKeys(FString InTableName);// 0x783e154
	static int[] GetTableKeys(FString InTableName);// 0x783e088
	static bool GetLuaTableValueWithStrKey(FString InTableName, FString InKey, ScriptStruct* InStruct, out TableRowBase OutRow);// 0x783db3c
	static bool GetLuaTableValueWithIntKey(FString InTableName, int InKey, ScriptStruct* InStruct, out TableRowBase OutRow);// 0x783d610
	static int[] GetAvatarTestingValue(int InKey);// 0x783d550
	static int[] GetAvatarTestingKeys();// 0x783d4d0

--------------------------------
Class: WidgetReplacePair
	FString TargetWidget;//[Offset: 0x0, Size: 0x10]// 0x76119c3940
	FString ReplaceDir;//[Offset: 0x10, Size: 0x10]// 0x76119c38d0

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x120, Size: 0x8]// 0x75a8244380
	void PushOneScriptPropertyValues(FString ParamName);// 0x783f658
	void PushAllScriptPropertyValues();// 0x783f63c
	void FetchOneScriptPropertyValues(FString ParamName);// 0x783f55c
	void FetchAllScriptPropertyValues();// 0x783f540
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x783f468
	void CallScriptFunction(FString FunctionName);// 0x783f390

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnFinishModifyUserSettings;//[Offset: 0x178, Size: 0x10]// 0x75a87a7180
	<FName,FString> GameStatusMap;//[Offset: 0x198, Size: 0x50]// 0x75a8798680
	<FString> TestMarkNameSet;//[Offset: 0x1f0, Size: 0x50]// 0x75d119a8c0
	GVoiceInterface* GVoice;//[Offset: 0x248, Size: 0x8]// 0x75a87a7200
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]// 0x75a87a7280
	LocalSettingManager* SettingManager;//[Offset: 0x258, Size: 0x8]// 0x75a87a7300
	<FName,Property*> SaveGamePropertyMap;//[Offset: 0x260, Size: 0x50]// 0x75a8798740
	HttpHelper* HttpHelper;//[Offset: 0x2b0, Size: 0x8]// 0x75a87a7400
	bool isInFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]// 0x75a87a7480
	BugReporter* BugReporter;//[Offset: 0x2c0, Size: 0x8]// 0x75a87a7500
	GDolphinUpdater* GDolphin;//[Offset: 0x2c8, Size: 0x8]// 0x75a87a7580
	bool bBgDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]// 0x75a87a7600
	FString[] pufferPakFileList;//[Offset: 0x2d8, Size: 0x10]// 0x75a87a7680
	GPufferUpdater* GPuffer;//[Offset: 0x2e8, Size: 0x8]// 0x75a87a7700
	<int,GPufferUpdater*> PufferUpdaterPool;//[Offset: 0x2f0, Size: 0x50]// 0x75a8798800
	CustomMapManager* CustomMapManager;//[Offset: 0x340, Size: 0x8]// 0x75a87a7800
	UGCActorLuaManager* UGCActorLuaManager;//[Offset: 0x348, Size: 0x8]// 0x75a87a7880
	ReplayManager* ReplayManager;//[Offset: 0x350, Size: 0x8]// 0x75a87a7900
	FName UnrealNetworkStatus;//[Offset: 0x368, Size: 0x8]// 0x75a7b23dc0
	float UnrealNetworkConnectingTimer;//[Offset: 0x388, Size: 0x4]// 0x75a7b23e30
	float UnrealNetworkConnectingDetectInterval;//[Offset: 0x394, Size: 0x4]// 0x75a7b23ea0
	float UnrealNetworkRecoverableLostDetectInterval;//[Offset: 0x398, Size: 0x4]// 0x75a7b23f10
	float UnrealNetworkLostAckDetectInterval;//[Offset: 0x39c, Size: 0x4]// 0x75a7b23f80
	float UnrealNetworkConnectingTime;//[Offset: 0x450, Size: 0x4]// 0x75a7b23ff0
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x478, Size: 0x8]// 0x75a87aa480
	FString ScriptBPRelativeDir;//[Offset: 0x480, Size: 0x10]// 0x75a7b24060
	bool bLuaUseLobbyEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]// 0x75a87a7980
	bool bReleaseGameSettingAfterUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]// 0x75a87a7a00
	bool bPrintObjListAfterShutdownLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 0x1]// 0x75a87a7a80
	FString[] DisableSMStreamingMaps;//[Offset: 0x498, Size: 0x10]// 0x75a87a7b00
	FString ScriptRelativeDir;//[Offset: 0x4a8, Size: 0x10]// 0x75a7b24140
	bool bWaitForGameRunningForLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]// 0x75a87a7b80
	FString InGameLuaDir;//[Offset: 0x4c0, Size: 0x10]// 0x75a7b241b0
	FString LuaEntryPath;//[Offset: 0x4d0, Size: 0x10]// 0x75a7b24220
	FString[] PreloadLuaDirList;//[Offset: 0x4e0, Size: 0x10]// 0x75a87a7c00
	FString LuaCSVDir;//[Offset: 0x4f0, Size: 0x10]// 0x75a7b24300
	FString LuaUMGDir;//[Offset: 0x500, Size: 0x10]// 0x75a7b24370
	float LuaTickTime;//[Offset: 0x510, Size: 0x4]// 0x75a7b243e0
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]// 0x75a87a7c80
	bool bDisableMNAOnGameAccelerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 0x1]// 0x75a87a7d00
	FString ZoneID;//[Offset: 0x518, Size: 0x10]// 0x75a7b24450
	GCloudLoginAccountInfo loginAccountInfo;//[Offset: 0x528, Size: 0x58]// 0x75a87a7d80
	FString UGC_OfferID_IOS;//[Offset: 0x588, Size: 0x10]// 0x75a7b244c0
	FString UGC_OfferID_Anroid;//[Offset: 0x598, Size: 0x10]// 0x75a7b24530
	GCloudLoginAccountInfo onTimeloginAccountInfo;//[Offset: 0x600, Size: 0x58]// 0x75a87a7e00
	delegate MidasPayDelegate_Other;//[Offset: 0x658, Size: 0x10]// 0x75a87a7e80
	float TApmTickReportTime;//[Offset: 0x668, Size: 0x4]// 0x75a7b245a0
	float TGPATickReportTime;//[Offset: 0x66c, Size: 0x4]// 0x75a7b24610
	TssManager* TssMgr;//[Offset: 0x670, Size: 0x8]// 0x75a87a7f00
	GCloudMidasManager* midasManager;//[Offset: 0x678, Size: 0x8]// 0x75a87a7f80
	bool bIsCutdownSettingQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x680, Size: 0x1]// 0x75a87a8000
	uint64 GameID;//[Offset: 0x6f8, Size: 0x8]// 0x75a7b24680
	FString GameKey;//[Offset: 0x700, Size: 0x10]// 0x75a7b246f0
	FString QQAppid;//[Offset: 0x710, Size: 0x10]// 0x75a7b24760
	FString WXAppid;//[Offset: 0x720, Size: 0x10]// 0x75a7b247d0
	uint64 GameId_CE;//[Offset: 0x730, Size: 0x8]// 0x75a7b24840
	FString GameKey_CE;//[Offset: 0x738, Size: 0x10]// 0x75a7b248b0
	FString QQAppid_CE;//[Offset: 0x748, Size: 0x10]// 0x75a7b24920
	FString WXAppid_CE;//[Offset: 0x758, Size: 0x10]// 0x75a7b24990
	FString payEnvironment;//[Offset: 0x768, Size: 0x10]// 0x75a7b24a00
	FString OfferID_IOS;//[Offset: 0x778, Size: 0x10]// 0x75a7b24a70
	FString OfferID_Anroid;//[Offset: 0x788, Size: 0x10]// 0x75a7b24ae0
	bool bWatchingDetailBtnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 0x1]// 0x75a87a8080
	delegate UIStackChangeDelegate;//[Offset: 0x7a0, Size: 0x10]// 0x75a87a8100
	delegate UIStackPopBottomDelegate;//[Offset: 0x7b0, Size: 0x10]// 0x75a87a8180
	delegate LoadingScreenVisibilityChanged;//[Offset: 0x7c0, Size: 0x10]// 0x75a87a8200
	delegate UIStackRecoverDelegate;//[Offset: 0x7d0, Size: 0x10]// 0x75a87a8280
	delegate MidasPayDelegate;//[Offset: 0x7e0, Size: 0x10]// 0x75a87a8300
	FString[] ListToPrintRefs;//[Offset: 0x7f0, Size: 0x10]// 0x75a87a8380
	bool PrintObjCompareList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]// 0x75a87a8400
	bool bSurportReupdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 0x1]// 0x75a87a8480
	bool bShowReleaseNoGCErrorMsgBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x802, Size: 0x1]// 0x75a87a8500
	bool bPrintObjListBeforeReinit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x803, Size: 0x1]// 0x75a87a8580
	FString SurportReupdateMapURL;//[Offset: 0x808, Size: 0x10]// 0x75a7b24bc0
	Object*[] PersistentAssetRefs;//[Offset: 0x818, Size: 0x10]// 0x75a87a8680
	FString[] NoGCPackage;//[Offset: 0x828, Size: 0x10]// 0x75a87a8700
	SoftObjectPath[] PersistentAssetList;//[Offset: 0x838, Size: 0x10]// 0x75a87a8800
	bool bUseOldSendTssOpenID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 0x1]// 0x75a87a8880
	FString UserSettingsClassName;//[Offset: 0x850, Size: 0x10]// 0x75a7b24ca0
	FString ReplayUserSettingsClassName;//[Offset: 0x860, Size: 0x10]// 0x75a7b24d10
	class Object* UserSettingsClass;//[Offset: 0x870, Size: 0x8]// 0x75a87a8900
	SaveGame* UserSettings;//[Offset: 0x878, Size: 0x8]// 0x75a87a8980
	FString UIElemSettingClassName;//[Offset: 0x880, Size: 0x10]// 0x75a7b24d80
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x890, Size: 0x10]// 0x75a87a8a80
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x900, Size: 0x8]// 0x75a87a8b00
	int FpsForWindowClient;//[Offset: 0x908, Size: 0x4]// 0x75a7b24df0
	int FpsForWindowClientReplay;//[Offset: 0x90c, Size: 0x4]// 0x75a7b24e60
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x910, Size: 0x10]// 0x75a87a8c00
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 0x1]// 0x75a87a8c80
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x921, Size: 0x1]// 0x75a87a8d00
	int NativeHUDTickIndex;//[Offset: 0x924, Size: 0x4]// 0x75a7b24ed0
	SoftObjectPath[] LobbyPreloadAssets;//[Offset: 0x938, Size: 0x10]// 0x75a87a8e00
	bool bEnableLobbyPreloadAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 0x1]// 0x75a87a8e80
	bool bEnablePreloadAssetFromFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x949, Size: 0x1]// 0x75a87a8f00
	FString[] AllowFlushPaths;//[Offset: 0x950, Size: 0x10]// 0x75a87a8f80
	FString[] AllowMissings;//[Offset: 0x960, Size: 0x10]// 0x75a87a9000
	bool ReportFlushLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 0x1]// 0x75a87a9080
	bool ReportMissingFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x971, Size: 0x1]// 0x75a87a9100
	bool ReporObjectArrayGrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x972, Size: 0x1]// 0x75a87a9180
	bool LowMemoryCloseMNA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x973, Size: 0x1]// 0x75a87a9200
	int LowMemoryAndroidLimitGB;//[Offset: 0x974, Size: 0x4]// 0x75a7b25020
	int LowMemoryIOSLimitGB;//[Offset: 0x978, Size: 0x4]// 0x75a7b25090
	delegate OnGameLanguageChanged;//[Offset: 0x980, Size: 0x10]// 0x75a87a9280
	delegate OnBattleBeginPlayDelegate;//[Offset: 0x990, Size: 0x10]// 0x75a87a9300
	GameOverrider* GameOverrider;//[Offset: 0x9f8, Size: 0x8]// 0x75a87a9380
	FString TableFlyTreeStr;//[Offset: 0xa00, Size: 0x10]// 0x75a7b25100
	bool UseStartupLevel();// 0x4ceb6d0
	void UpdateMidasPF(FString Pf, FString PfKey);// 0x4ceb568
	void UpdateAccountInfoByLua(int loginChannel, FString OpenID, FString PayToken, FString Pf, FString PfKey);// 0x4ceb2a0
	void UnserializeSaveGameProperties(out const PropertySerialize[] PropertyData);// 0x4ceb1d8
	void TryPreLoadLobbyAsset(const SoftObjectPath[] InAssetPathList, int AndroidMemoryLimit, int IOSMemoryLimit);// 0x4ceaff0
	void ToggleTGPAPingCheck(bool bIsOpen);// 0x4ceaf6c
	void TestSRP(FString resPath);// 0x4ceaee8
	void TestPrintGUObjectArray(FString Filename, FString RefName, int PrintLevel, bool bOnlyGCedObjects);// 0x4cead90
	void TestPrintCustomNoGC();// 0x4cead7c
	void TestMountPak(FString PakName, bool bMount);// 0x4ceacb0
	void TestMissing(FString resPath);// 0x4ceac2c
	void TestLoadNoGCPackages();// 0x4ceac18
	FString TestExecFunc(FString CmdStr, FString ExtralStr1, FString ExtralStr2);// 0x4ceaaac
	void TestBoundFunction();// 0x4ceaa98
	bool SurportReupdate();// 0x4ceaa58
	void StartPufferPreDownloadTask(FString[] FileNameList, FString[] Md5List, int64[] FileSizeList);// 0x4cea738
	bool StartGrayUpdate();// 0x4cea700
	void ShutdownUnrealNetwork();// 0x4cea6e4
	bool ShouldWatchingDetailBtnOpen();// 0x4cea6ac
	void SetZoneID(FString midasZoneId);// 0x4cea5d4
	void SetPufferPakFileList(FString[] pakFileList);// 0x4cea464
	void SetPayEnvironment(FString payEnvironment);// 0x4cea38c
	void SetPayEnable_Other(bool IsEnable);// 0x4cea308
	void SetLanguage(FString lang);// 0x4cea284
	void SetIsEnableOnTimeToken_Other(bool IsEnable);// 0x4cea200
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x4cea0e4
	void SetCheckPakFileRes(uint32 InKey, FString InDesc);// 0x4cea020
	void SetCheckIfNeedRegisterPay_Other(FString offerId, bool isNeed);// 0x4ce9f04
	void SetCharmViewParam(bool AllowViewCharmInfoInRank);// 0x4ce9e80
	void SetBLEDisableInfo(bool bDisable, int[] BlackList);// 0x4ce9d64
	void SetBgDownload(bool Value);// 0x4ce9ce0
	PropertySerialize[] SerializeSaveGameProperties(out const FString[] Properties);// 0x4ce9b60
	void RetryDownload();// 0x4ce9b4c
	void ResetUserSettings();// 0x4ce9b38
	void ResetIslandShowNicknameValue(bool flag);// 0x4ce9ab4
	void ReportGameInfoToXpcall(FString InfoType, FString InMsg, FString CallStack);// 0x4ce999c
	void ReportGameInfoToBugly(FString InfoType, FString InMsg, FString CallStack);// 0x4ce9884
	static void ReportCrashSight(int Type, FString Name, FString Msg, FString Stack, out const <FString,FString> InfoMap, bool bNativeStack);// 0x4ce965c
	void ReloadSettingPropertyMap();// 0x4ce9648
	void ReleaseLobbyPreloadAsset();// 0x4ce9634
	void ReInitLuaStateWrapper();// 0x4ce9618
	void ReInitialize();// 0x4ce9604
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x4ce9520
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x4ce943c
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x4ce9358
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x4ce9274
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x4ce91d8
	void RegisterPay_Other(FString offerId, FString midasZoneId);// 0x4ce9070
	void RegisterPay();// 0x4ce905c
	void RefreshAccountRecord();// 0x4ce9048
	void PrintFName();// 0x4ce9034
	static void PostUdpToTGPA(FString Host, int Port, int Count, int Interval, int Timeout, FString Content);// 0x4ce8dd4
	void PostSavedFileToTGPA(FString DirPath, FString FilePath);// 0x4ce8c6c
	static void PostPingToTGPA(FString Host, int Count, int Interval, int Timeout, FString Content);// 0x4ce8a48
	static void PostGameStatusToTGPASMap(FString OpenID, FString RoleID, FString appid, FString PlatID, FString appver, FString srcver);// 0x4ce86b0
	void PostFileToTGPA(FString ExtraStr, FString FilePath);// 0x4ce8548
	void Pay_Other(FString offerId, FString midasZoneId, int payItem, FString ProductID);// 0x4ce8310
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x4ce8268
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x4ce8104
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x4ce8034
	void OnQueryMyInfoNotify();// 0x4ce8020
	void OnNearByPersonInfoNotify();// 0x4ce800c
	void OnMidasPayNeedLogin_Other();// 0x4ce7ff8
	void OnMidasPayNeedLogin();// 0x4ce7fe4
	void OnMidasPayDelegate_Other(FString offerId, FString midasZoneId, int payItem, FString ProductID);// 0x4ce7dac
	void OnMidasPayDelegate(int payItem, FString ProductID);// 0x4ce7c94
	void OnMidasPayCallBack_Other(out const APPayResponseInfo Info);// 0x4ce7bcc
	void OnMidasPayCallBack(out const APPayResponseInfo Info);// 0x4ce7b04
	void OnMidasLauchMpInfoCallBack_Other(int ResultCode, FString resultString);// 0x4ce79ec
	void OnMidasLauchMpInfoCallBack(int ResultCode, FString resultString);// 0x4ce78d4
	void OnMidasInitCallBack_Other(FString Result);// 0x4ce77fc
	void OnMidasInitCallBack(FString Result);// 0x4ce7724
	void OnLocationInfoNotify(out const LocationInfoWrapper locationInfo);// 0x4ce769c
	void OnInGameEventNotified(byte gEvent);// 0x4ce7620
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* Downloader);// 0x4ce756c
	void OnHandleClassFieldAccessDenied(const FName InClassName, const FName InFieldName);// 0x4ce74b8
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x4ce73d4
	void OnGenQRImgNotify(int Ret, int Size, FString ImgPath);// 0x4ce72d4
	void OnDirectGroupNotify(out const GroupInfoWrapper groupInfo);// 0x4ce71f0
	FString OnCrashMessageNotify();// 0x4ce7158
	void OnAccountLoginInfoNotify(int Result, out const GCloudLoginAccountInfo Info);// 0x4ce7044
	void OnAccessTokenRefreshNotify(int Result, FString OpenID, FString OpenKey);// 0x4ce6e9c
	void NotifyUpdateFinalFinished(int ErrorCode);// 0x4ce6e18
	void MidasPay_Other(FString offerId, FString midasZoneId, int payItem, FString ProductID);// 0x4ce6be0
	void MidasPay(int payItem, FString ProductID);// 0x4ce6ac8
	void MidasMonthPay_Other(out APMonthPayInfo Info);// 0x4ce69fc
	void MidasMonthPay(out const APMonthPayInfo Info);// 0x4ce6930
	void MidasGoodsPay_Other(out APGoodsPayInfo Info);// 0x4ce6870
	void MidasGoodsPay(out const APGoodsPayInfo Info);// 0x4ce67b0
	void MatchVersion();// 0x4ce679c
	void MarkFName();// 0x4ce6788
	void LuaRecordStartCheckEnterBattle(FString Stack);// 0x4ce6704
	void LuaRecordReturnToLobby(FString Stack);// 0x4ce6680
	void LauchMpInfo_Other(FString offerId, FString midasZoneId);// 0x4ce6518
	void LauchMpInfo();// 0x4ce6504
	void KillPufferPreDownloadTask();// 0x4ce64f0
	bool IsUseAllNewIngameUI();// 0x4ce64b8
	bool IsSuspendTicking();// 0x4ce649c
	bool IsPayEnable();// 0x4ce6464
	bool IsOpenOnTimeToken();// 0x4ce642c
	bool IsMNAEnable();// 0x4ce63f4
	bool IsLowMemoryDevice();// 0x4ce63bc
	void InitMidasManager();// 0x4ce63a8
	void InitLuaStateWrapper();// 0x4ce638c
	FString HandleUQMCrashCallBack();// 0x4ce630c
	void HandleQuitGameReportToCrashSight();// 0x4ce62f8
	void HandlePermissionCallBack(int RequestCode, FString PermissionName, bool bGranted);// 0x4ce6194
	void HandleANRDetectCallBack();// 0x4ce6180
	SaveGame* GetUserSettings();// 0x4ce6144
	GDolphinUpdater* GetUpdater();// 0x4ce6128
	LocalSettingManager* GetSettingManager();// 0x4ce610c
	ReplayManager* GetReplayManager();// 0x4ce60d8
	GPufferUpdater* GetPufferUpdater();// 0x4ce60bc
	FString[] GetPufferPakFileList();// 0x4ce5fe0
	FString GetPlayerKeyStr();// 0x4ce5f60
	GCloudMidasManager* GetMidasManager();// 0x4ce5f2c
	LuaStateWrapper* GetLuaStateWrapper();// 0x4ce5ef8
	HttpHelper* GetHttpHelper();// 0x4ce5ec4
	GVoiceInterface* GetGVoiceInterface();// 0x4ce5e88
	FString GetDeviceInfo(FString DeviceInfoName);// 0x4ce5d64
	int GetDetailNetInfoFromGCloud();// 0x4ce5d30
	SaveGame* GetCustomSetting(FString InSlotName);// 0x4ce5c9c
	CustomMapManager* GetCustomMapManager();// 0x4ce5c68
	BugReporter* GetBugReporter();// 0x4ce5c34
	bool GetBgDownload();// 0x4ce5c18
	FString GetBattleIDHexStr();// 0x4ce5b98
	void FinishModifyUserSettings();// 0x4ce5b7c
	void DoClientLuaUrl(FString UrlStr);// 0x4ce5af8
	void DoClientLuaString(FString LuaString);// 0x4ce5a74
	void CreateLogicManager(FString Filename);// 0x4ce599c
	void CreateLobbyEnv();// 0x4ce5988
	int CountFNameMemory();// 0x4ce5954
	static FString ConvertTMap2JsonStr(out const <FString,FString> mapData);// 0x4ce583c
	void CompareFName();// 0x4ce5828
	static FString ClipboardPaste();// 0x4ce57a8
	static void ClipBoardCopy(FString Text);// 0x4ce56e0
	void ClearUIElemSettings();// 0x4ce56cc
	void ClearLobbyEnv();// 0x4ce56b8
	void CheckPufferEnd();// 0x4ce56a4
	enum CheckPakFileState(FString InPakName);// 0x4ce5610
	void CheckLocalizationLanguage();// 0x4ce55fc
	bool CheckIfNeedRegisterPay_Other(FString offerId);// 0x4ce5518
	bool CheckIfNeedRegisterPay(int loginChannel, FString OpenID, FString PayToken, FString Pf, FString PfKey, int replaceValue);// 0x4ce5200
	void CallLuaTableFunctionUGC(FString TableName, FString FunctionName, FString Title, FString Content);// 0x4ce5098
	FString CallLuaTableFunctionRetString(FString TableName, FString FunctionName);// 0x4ce4f6c
	bool CallLuaTableFunctionRetBool(FString TableName, FString FunctionName);// 0x4ce4e80
	void CallLuaTableFunctionPlus(FString TableName, FString FunctionName, FString Paramters);// 0x4ce4d60
	void CallLuaTableFunction(FString TableName, FString FunctionName);// 0x4ce4c88
	void CallGlobalScriptFunction(FString InFunctionName);// 0x4ce4bfc
	void BeginModifyUserSettings();// 0x4ce4be0
	void AddWidgetToViewport(UAEUserWidget* Widget, int ZOrder);// 0x4ce4b28
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x4ce4a64

--------------------------------
Class: GVoiceInterface.Object
	delegate JoinRoomDelegate;//[Offset: 0x30, Size: 0x10]// 0x75a879fe80
	float lbsRadiusWerewolf;//[Offset: 0x40, Size: 0x4]// 0x75a8788c60
	float lbsRadiusNormal;//[Offset: 0x44, Size: 0x4]// 0x75a8788cd0
	bool isInWerewolfMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]// 0x75a879ff00
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x118, Size: 0x8]// 0x75a879ff80
	bool isNormalInterphoneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 0x1]// 0x75a87a0000
	bool LobbyTeamMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 0x1]// 0x75a87a0080
	bool IngameTeamMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 0x1]// 0x75a87a0100
	bool IngameLbsMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]// 0x75a87a0180
	float uncleVoiceRate;//[Offset: 0x1f4, Size: 0x4]// 0x75a8788d40
	bool IsUnderagePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]// 0x75a87a0200
	void UploadRecordFile();// 0x4cfd4d8
	void TryToChangeVoice();// 0x4cfd4c4
	bool TeamSpeakerEnable();// 0x4cfd4a8
	bool TeamMicphoneEnable();// 0x4cfd48c
	void SwitchMicphoneWhenCorpsMode();// 0x4cfd478
	void SwitchAudioSession(bool IsOpen);// 0x4cfd3f4
	void SwitchAudioMix(bool IsOpen);// 0x4cfd370
	void StopRecord();// 0x4cfd35c
	void StopPlayRecordFile();// 0x4cfd348
	void StopInterphone();// 0x4cfd334
	bool StartTestVoiceChanger();// 0x4cfd2fc
	void StartRecord();// 0x4cfd2e8
	void StartInterphone();// 0x4cfd2d4
	void SpeechToText();// 0x4cfd2c0
	void ShowOpenSpeakerAtFirstMsg();// 0x4cfd2ac
	void ShowLbsNotSupportInRoomMode();// 0x4cfd298
	void ShowCorpsModeCannotUseLBSVoice();// 0x4cfd284
	void SetWerewolfModeAudience(int[] Members);// 0x4cfd1ac
	void SetVoiceStyle(int soundTag, float modifiedValue, FString TagName);// 0x4cfd0ac
	void SetVoiceMode(int Type);// 0x4cfd030
	void SetVoiceInBGSwitch(bool switchOpen);// 0x4cfcfac
	void SetUseOriginResume(bool useOrigin);// 0x4cfcf28
	void SetUseOriginPause(bool useOrigin);// 0x4cfcea4
	void SetTeammateAudienceList(int[] Members);// 0x4cfcdcc
	void SetSpeakerVolum(float Value);// 0x4cfcd50
	void SetSpeakerStatus(bool flag);// 0x4cfcccc
	void SetShowReportVoiceSwitch(bool flag);// 0x4cfcc48
	int SetServerInfo(FString URL);// 0x4cfcb68
	void SetPlayerVolume(FString OpenID, int Volume);// 0x4cfca54
	void SetPlayerIsUnderage();// 0x4cfca40
	void SetMicphoneVolum(float Value);// 0x4cfc9c4
	void SetMicphoneStatus(bool flag);// 0x4cfc940
	void SetMainVolume(float Value);// 0x4cfc8c8
	void SetMainSoundSwitch(bool flag);// 0x4cfc848
	void SetLobbyAndInGameMicState(bool lobbyTeamMic, bool ingameTeamMic, bool ingameLbsMic);// 0x4cfc734
	void SetLbsVoiceRadius(float Radius);// 0x4cfc6bc
	void SetLbsRoomEnableStatus(bool flag);// 0x4cfc638
	void SetGvoiceLogState();// 0x4cfc624
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x4cfc5a8
	void SetCurrentDownloadFieldID(FString filedId);// 0x4cfc4c0
	void SetCivilVoiceStatusForRstt(bool flag);// 0x4cfc43c
	void SetChangeVoiceSwitch(bool IsOpen);// 0x4cfc3b8
	void SetBGMVolume(float Value);// 0x4cfc340
	void SetBGMSwitch(bool flag);// 0x4cfc2c0
	void SetAutoChangeVoicerRange(bool allTime);// 0x4cfc23c
	int SetAudienceList(FString RoomName, int[] Members);// 0x4cfc0cc
	void Resume();// 0x4cfc0b8
	void ResetWhenLogOut();// 0x4cfc0a4
	void ResetBeforeInit();// 0x4cfc090
	int ReportUncivilVoice(bool isWerewolf);// 0x4cfbffc
	void ReactiveLbsStatus();// 0x4cfbfe8
	int QuitViceRoom(FString room);// 0x4cfbf08
	void QuitUgcRoom();// 0x4cfbef4
	void QuitRoomAbs(FString RoomName, FString pendingName);// 0x4cfbd8c
	void QuitRoom_Replay(FString room);// 0x4cfbcb4
	void QuitRoom();// 0x4cfbca0
	void QuitLbsRoom(bool needReenterLbs);// 0x4cfbc1c
	void QuitGroupRoom(bool mNeedReenter);// 0x4cfbb98
	void PlayRecordFile();// 0x4cfbb84
	void Pause();// 0x4cfbb70
	void OpenVoiceChanger();// 0x4cfbb5c
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x4cfbad8
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x4cfba44
	int OpenTeamInterphone(bool ShowTips);// 0x4cfb9b0
	int OpenSpeaker_Replay(bool Force);// 0x4cfb91c
	int OpenSpeaker_Raw();// 0x4cfb8e8
	int OpenSpeaker(bool Force);// 0x4cfb854
	void OpenMicAndSpeakerAfterJoinRoom();// 0x4cfb840
	int OpenMic_Replay(bool Force);// 0x4cfb7ac
	int OpenMic_Raw();// 0x4cfb778
	int OpenMic(bool Force);// 0x4cfb6e4
	bool OpenLocalFile(FString Filename);// 0x4cfb64c
	void OpenGroupSpeakerOnly(bool ShowTips);// 0x4cfb5c8
	int OpenGroupMicphoneOnly(bool ShowTips);// 0x4cfb534
	int OpenGroupInterphone();// 0x4cfb500
	void OpenAllSpeaker(bool ShowTips);// 0x4cfb47c
	int OpenAllMicphone(bool ShowTips);// 0x4cfb3e8
	int OpenAllInterphone(bool ShowTips);// 0x4cfb354
	void OnRoomTypeChanged(FString itemtext);// 0x4cfb27c
	void OnPlayerStateChanged();// 0x4cfb268
	void OnPlayerEnterJumping();// 0x4cfb254
	void OnKillClient();// 0x4cfb240
	void ManualPool();// 0x4cfb22c
	void ManualPoll_Replay();// 0x4cfb218
	void LeaveUgcSmallRoom();// 0x4cfb204
	void LeaveSilenceMode();// 0x4cfb1f0
	void LeaveHideAndSeekMode();// 0x4cfb1dc
	void LeaveGhostState();// 0x4cfb1c8
	bool LbsSpeakerEnable();// 0x4cfb1ac
	bool LbsMicphoneEnable();// 0x4cfb190
	int JoinViceRoom(FString room);// 0x4cfb0b0
	void JoinUgcRoom(FString roomId, FString OpenID);// 0x4cfaf48
	void JoinRoom_Replay(FString room);// 0x4cfae70
	void JoinRoom(FString room, FString UserID);// 0x4cfad08
	void JoinLbsRoom(FString lbsRoom, FString UserID);// 0x4cfaba0
	void JoinGroupRoom(FString groupRoom, FString UserID);// 0x4cfaa38
	bool IsVoiceChangerEnable();// 0x4cfaa00
	bool IsTeamInterphoneOpenned();// 0x4cfa9e4
	bool IsSupportLbsVoiceInRoomMode();// 0x4cfa9ac
	bool IsSpeaking();// 0x4cfa974
	bool IsSpeakerOpened_Replay();// 0x4cfa93c
	bool IsSpeakerOpened();// 0x4cfa904
	bool IsSpeakerEnabled();// 0x4cfa8cc
	bool IsRobotEnable();// 0x4cfa894
	bool IsMicOpened_Replay();// 0x4cfa85c
	bool IsMicOpened();// 0x4cfa824
	bool IsMicEnabled();// 0x4cfa7ec
	bool IsMemberBeForbidVoice(FString RoomName, int memberID);// 0x4cfa6cc
	bool IsLbsInterphoneOpenned();// 0x4cfa6b0
	bool IsInterphoneMode();// 0x4cfa68c
	bool IsInRobotWhiteList();// 0x4cfa654
	bool IsInReportCoolDown();// 0x4cfa61c
	bool IsIngameNow();// 0x4cfa5e4
	bool IsGVoiceInited_Replay();// 0x4cfa5ac
	bool IsGroupInterphoneOpenned();// 0x4cfa590
	void InitGVoiceComponent_Replay(FString UserID);// 0x4cfa4b8
	void InitGVoiceComponent(FString UserID);// 0x4cfa3e0
	bool HaveTeamRoom();// 0x4cfa3a8
	bool HaveLbsRoom();// 0x4cfa370
	bool HaveGroupRoom();// 0x4cfa338
	bool GroupSpeakerEnable();// 0x4cfa31c
	bool GroupMicphoneEnable();// 0x4cfa300
	bool GetVoteSilenceStatus();// 0x4cfa2e4
	VoiceRoomMemberInfo[] GetVoiceRoomMemberInfo_Replay(FString room);// 0x4cfa16c
	VoiceRoomMemberInfo[] GetVoiceRoomMemberInfo(FString room, int Limit);// 0x4cf9fb8
	float GetVoiceLength();// 0x4cf9f84
	FString GetTeamRoomName();// 0x4cf9f04
	int GetSpeakerState();// 0x4cf9ed0
	bool GetShowReportVoiceSwitch();// 0x4cf9e98
	int GetPlayerVolume(FString OpenID);// 0x4cf9db8
	FString GetPlayerVoiceRoom();// 0x4cf9cf8
	int GetMicState();// 0x4cf9cc4
	int GetMemberVoiceID();// 0x4cf9ca8
	FString GetLbsRoomName();// 0x4cf9c28
	int GetLBSRoomMemberID();// 0x4cf9c0c
	int GetGvoiceLogState();// 0x4cf9bd8
	bool GetCurrentVoiceChangerStatus();// 0x4cf9bbc
	FString GetCurrentSoundTagName();// 0x4cf9afc
	void GetAuthKey();// 0x4cf9ae8
	VoiceRoomMemberInfo[] GetAllTeammateMicState();// 0x4cf9a0c
	void ForbidVoiceById_Replay(FString room, int memberID, bool Enable);// 0x4cf98b4
	void ForbidTeammateVoiceByIdLBS(int memberID, bool IsEnable);// 0x4cf97f4
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x4cf9734
	void ForbidMemberVoiceById(FString RoomName, int memberID, bool Enable);// 0x4cf95dc
	bool FinishiTestVoiceChanger();// 0x4cf95a4
	void EnterWerewolfKilling();// 0x4cf9590
	void EnterUgcSmallRoom(int smallRoomIndex);// 0x4cf9514
	void EnterSilenceMode();// 0x4cf9500
	void EnterHideAndSeekMode();// 0x4cf94ec
	void EnterGhostState();// 0x4cf94d8
	void EndVoiceChangerRecording();// 0x4cf94c4
	int EnableTranslate(FString RoomName, bool Enable, int Type);// 0x4cf935c
	void EnableRoomVoice(int member, int roomType);// 0x4cf92a8
	void EnableRoomSpeaker_Replay(FString room, bool Enable);// 0x4cf918c
	void EnableRoomMicphone_Replay(FString room, bool Enable);// 0x4cf9070
	void EnableCivilVoice(bool flag);// 0x4cf8fec
	void EnableBluetoothSCO(bool flag);// 0x4cf8f68
	void DownloadRecordFile();// 0x4cf8f54
	void DisableRoomVoice(int member, int roomType);// 0x4cf8ea0
	void CloseVoiceChanger();// 0x4cf8e8c
	void CloseSpeakerCheck(bool Force);// 0x4cf8e08
	int CloseSpeaker_Replay(bool Force);// 0x4cf8d74
	int CloseSpeaker_Raw();// 0x4cf8d40
	void CloseSpeaker();// 0x4cf8d2c
	int CloseMic_Replay(bool Force);// 0x4cf8c98
	int CloseMic_Raw();// 0x4cf8c64
	void CloseMic();// 0x4cf8c50
	void CloseAllSpeaker(bool ShowTips);// 0x4cf8bcc
	void CloseAllMicphone(bool ShowTips);// 0x4cf8b48
	void ClearPlayerUnderageState();// 0x4cf8b34
	void ChangeSpeakerStateWithRoomName(FString RoomName, bool Status);// 0x4cf8a18
	void ChangeMicphoneStateWithRoomName(FString RoomName, bool Status);// 0x4cf88fc
	void BeginVoiceChangerRecording();// 0x4cf88e8

--------------------------------
Class: VoiceRoomMemberInfo
	FString OpenID;//[Offset: 0x0, Size: 0x10]// 0x76119bee00
	int memberID;//[Offset: 0x10, Size: 0x4]// 0x76119be620
	int micstatus;//[Offset: 0x14, Size: 0x4]// 0x76119c01b0

--------------------------------
Class: LocalSettingManager.Object
	void ReloadAllSetting(UAEGameInstance* GameInstance);// 0x4d0b3bc

--------------------------------
Class: HttpHelper.Object
	void HttpGet(FString URL);// 0x4d02cdc

--------------------------------
Class: BugReporter.Object
	FString ReportBaseURL;//[Offset: 0x30, Size: 0x10]// 0x75a7b2ee80
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x4cd4e60
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, int64 gid);// 0x4cd4bc8
	void ReadZipLog(FString Filename);// 0x4cd4af0
	byte[] CompressLog(bool pullAllLog);// 0x4cd4a18

--------------------------------
Class: GDolphinUpdater.Object
	bool bForceReInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x75a87a3d00
	FString AppStoreUrl;//[Offset: 0x80, Size: 0x10]// 0x75a878d260
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]// 0x75a87a3d80
	FString UpdateUrl;//[Offset: 0x98, Size: 0x10]// 0x75a878d2d0
	FString UpdateUrl_CE;//[Offset: 0xa8, Size: 0x10]// 0x75a878d340
	FString PreUpdateUrl;//[Offset: 0xb8, Size: 0x10]// 0x75a878d3b0
	FString PreUpdateUrl_CE;//[Offset: 0xc8, Size: 0x10]// 0x75a878d420
	uint32 UpdateChannel;//[Offset: 0xd8, Size: 0x4]// 0x75a878d490
	uint32 UpdateChannelIOS;//[Offset: 0xdc, Size: 0x4]// 0x75a878d500
	uint32 UpdateChannelIOS_CE;//[Offset: 0xe0, Size: 0x4]// 0x75a878d570
	uint32 UpdateChannelAndroid;//[Offset: 0xe4, Size: 0x4]// 0x75a878d5e0
	uint32 UpdateChannelAndroid_CE;//[Offset: 0xe8, Size: 0x4]// 0x75a878d650
	uint32 UpdateChannelIOS_PVRTC;//[Offset: 0xec, Size: 0x4]// 0x75a878d6c0
	uint32 UpdateChannelIOS_PVRTC_CE;//[Offset: 0xf0, Size: 0x4]// 0x75a878d730
	uint32 UpdateChannelIOS_PVRTC_Shipping;//[Offset: 0xf4, Size: 0x4]// 0x75a878d7a0
	bool PreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]// 0x75a87a3e00
	FString UpdateInfoPath;//[Offset: 0x100, Size: 0x10]// 0x75a878d810
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]// 0x75a87a3e80
	bool CheckMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]// 0x75a87a3f00
	bool bNeedFirstExtract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]// 0x75a87a3f80
	FString[] FirstExtractFileList;//[Offset: 0x118, Size: 0x10]// 0x75a87a4000
	bool EnableCDNGetVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]// 0x75a87a4080
	uint32 VersionGetMode;//[Offset: 0x12c, Size: 0x4]// 0x75a878d8f0
	FString Pre_CDNVersionUrl;//[Offset: 0x130, Size: 0x10]// 0x75a878d960
	FString CDNVersionUrl;//[Offset: 0x140, Size: 0x10]// 0x75a878d9d0
	bool EnableIOSBgDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]// 0x75a87a4100
	bool EnableSelectP2PDownEngine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]// 0x75a87a4180
	FString[] pakFilesNeedCheckedByDolphin;//[Offset: 0x158, Size: 0x10]// 0x75a87a4200
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x278, Size: 0x8]// 0x75a87a4280
	void StartAppUpdate();// 0x4cf49bc
	void SetDolphinPredownloadPath(FString preDownloadPath);// 0x4cf4938
	void SetCurlBufferSize(int msize);// 0x4cf48bc
	void SetCheckMap(bool CheckMap);// 0x4cf4838
	int MountExtraPak(FString[] InToMountPakFileFullNameList);// 0x4cf46b8
	void KillPakMountThread();// 0x4cf46a4
	bool IsUpdating();// 0x4cf466c
	bool IsGrayUpdate();// 0x4cf4634
	bool IsExamine();// 0x4cf45fc
	void Install();// 0x4cf45e8
	FString[] GetSkipMountPakKeyWordList();// 0x4cf450c
	FString GetPufferPredownloadJsonConfig();// 0x4cf448c
	FString GetDolphinPredownloadPath();// 0x4cf440c
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x4cf42c8
	void FinishUpdate();// 0x4cf42b4
	void ContinueUpdate();// 0x4cf42a0
	bool CheckIfPakInSkipMountList(FString InToCheckPakFullPath, FString[] InSkipMountPakKeyWordList);// 0x4cf408c
	void CancelUpdate();// 0x4cf4078
	void CancelResUpdate();// 0x4cf4064
	void CancelAppUpdate();// 0x4cf4050

--------------------------------
Class: GPufferUpdater.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x38, Size: 0x8]// 0x75a87a3180
	bool DisablePuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x75a87a3200
	bool PufferPreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]// 0x75a87a3280
	FString PrePufferServerUrl;//[Offset: 0x50, Size: 0x10]// 0x75a878b5f0
	FString PufferServerUrl;//[Offset: 0x60, Size: 0x10]// 0x75a878b660
	uint32 PufferProductId;//[Offset: 0x70, Size: 0x4]// 0x75a878b6d0
	uint32 PufferProductIdAndroid;//[Offset: 0x74, Size: 0x4]// 0x75a878b740
	uint32 PufferProductIdIOS;//[Offset: 0x78, Size: 0x4]// 0x75a878b7b0
	uint32 PufferProductIdIOSDev;//[Offset: 0x7c, Size: 0x4]// 0x75a878b820
	uint32 PufferProductId5S;//[Offset: 0x80, Size: 0x4]// 0x75a878b890
	FString PufferDownloadDir;//[Offset: 0x88, Size: 0x10]// 0x75a878b900
	FString PufferEifsDir1;//[Offset: 0x98, Size: 0x10]// 0x75a878b970
	FString PufferEifsDir2;//[Offset: 0xa8, Size: 0x10]// 0x75a878b9e0
	bool UnmountPak(FString pakFileFullPath);// 0x4cf777c
	bool StopTask(uint64 TaskID);// 0x4cf76ec
	int StopMergeBinDiff(int resID);// 0x4cf7660
	int StopCheckPakFileMD5(int resID);// 0x4cf75d4
	int ReturnPufferTempCacheFiles_LuaState();// 0x4cf75bc
	int ReturnLocalFiles_LuaState();// 0x4cf75a4
	void ResumePufferUpdater();// 0x4cf7590
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x4cf7464
	bool RemountPakFiles(FString downloadDir, FString PakPrefix);// 0x4cf72f0
	FString ReadFile(FString Filename);// 0x4cf71cc
	void PausePufferUpdater();// 0x4cf71b8
	int PatchPakFileFromBinDiff(const FString InPakFilenameOld, const FString InPakFilenameDiff, const FString InPakFileNew, bool bGenerateRecoredFile, bool bFast);// 0x4cf6f28
	int MoveFile(FString fromPath, FString toPath);// 0x4cf6db8
	bool MountPak(FString pakFileFullPath, uint32 pakOrder);// 0x4cf6c98
	int MergeBinDiffStart(int resID, const FString InPakFilenameOld, const FString InPakFilenameDiff, const FString InPakFileNew, bool bGenerateRecoredFile, bool bFast, int pufferInstanceID);// 0x4cf6984
	void MergeBinDiffReturn(int resID, int ErrorCode, int pufferInstanceID);// 0x4cf6894
	bool IsInitSuccess();// 0x4cf685c
	bool IsFileReady(FString FilePath);// 0x4cf67c4
	bool IsFileIdValid(FString FilePath);// 0x4cf672c
	bool IsFileExist(FString Filename, FString Extension);// 0x4cf6600
	int GetPufferInstanceID();// 0x4cf65e4
	FString GetPufferDownloadPath();// 0x4cf6564
	uint32 GetInitErrorCode();// 0x4cf6530
	uint32 GetFileSizeCompressed(FString FilePath);// 0x4cf6450
	float GetFileSize(FString Filename);// 0x4cf63bc
	bool DeleteFile(FString FileFullPath);// 0x4cf62d8
	int CheckPakFileStart(int resID, const FString ToCheckPakFileName, int pufferInstanceID);// 0x4cf6174
	void CheckPakFileReturn(int resID, FString retMD5, int pufferInstanceID);// 0x4cf6020
	bool CheckBinDiffPakFileMD5(const FString InPakFilenameNew, FString Extension, const FString InPakFilenameNewMD5);// 0x4cf5e1c

--------------------------------
Class: CustomMapManager.Object
	delegate OnMapStatusUpdated;//[Offset: 0x28, Size: 0x10]// 0x75a7b42200
	void UpdateMap(FString InUrl, FString InMapId, FString InSaveFileName, int InTargetSize, FString InMapServerHash, FString InMapServerVer);// 0x4cdf854
	int UnmountMaps();// 0x4cdf820
	bool UnmountMap(FString InMapId);// 0x4cdf788
	bool UninstallMap(FString InMapId);// 0x4cdf6f0
	void StopUpdate(FString InMapId);// 0x4cdf66c
	void StopAllUpdate();// 0x4cdf658
	bool SaveDiffVerToLocal(FString InMapId);// 0x4cdf5c0
	void OnUnzipFinished(FString InMapId, bool bSuccess);// 0x4cdf4f4
	void OnMergePakFinished(FString InMapId, int RetCode);// 0x4cdf430
	void OnCheckHashFinished(FString InMapId, FString InHash, bool bNotifyError);// 0x4cdf31c
	int MountMaps();// 0x4cdf2e8
	bool MountMap(FString InMapId);// 0x4cdf250
	void MarkPendingMount(FString InMapId);// 0x4cdf1cc
	bool IsUpdating(FString InMapId);// 0x4cdf134
	bool IsMerging(FString InMapId);// 0x4cdf09c
	bool IsMapNeedUpdate(FString InMapId, FString InMapServerVer);// 0x4cdefb8
	FString GetMapVerOnlyFromLocal(const FString InMapId);// 0x4cdee94
	enum GetMapUpdateType(FString InMapId, FString InMapDiffVer, FString InMapServerVer);// 0x4cded6c
	FString GetMapLocalVer(FString InMapId);// 0x4cdec90
	FString GetMapLocalHash(FString InMapId);// 0x4cdebb4
	<FString,FString> GetLocalMapVersions();// 0x4cdeaf4
	FString GetLastMountMapId();// 0x4cdea74
	FString GetLastMountId();// 0x4cde9f4
	void ForceSetMountIdByMapIdForAutoRunTest(FString InMapId, FString InMountId, FString InVersion);// 0x4cde8dc
	void DiffUpdateMap(FString InUrl, FString InMapId, FString InSaveFileName, int InDiffPakSize, FString InDiffMD5, FString InDiffVer, FString InDiffPakName);// 0x4cde6b0
	bool DeleteMap(FString InMapId);// 0x4cde618
	void ClearPendingMount();// 0x4cde604
	bool CheckMap(FString InMapId, FString InMapPakName, FString InMapServerHash, FString InMountId, FString InMapServerVer);// 0x4cde448

--------------------------------
Class: UGCActorLuaManager.Object

--------------------------------
Class: ReplayManager.Object
	delegate OnReplayStatusUpdated;//[Offset: 0x28, Size: 0x10]// 0x75a7a98500
	delegate OnPlayReplayEvent;//[Offset: 0x38, Size: 0x10]// 0x75a7a98580
	void StopDownload(FString InReplayId);// 0x4d1c308
	void StopAllDownload();// 0x4d1c2f4
	bool PlayReplay(FString InReplayFilename);// 0x4d1c25c
	bool IsDownloading(FString InReplayId);// 0x4d1c1c4
	void DownloadReplay(FString InUrl, FString InReplayId, int InIndex, FString InSaveFileName, int InTargetSize);// 0x4d1c034
	bool DeleteReplay(FString InReplayFilename);// 0x4d1bf9c
	enum CheckReplayStatus(FString InReplayId, int InIndex, FString InFileName);// 0x4d1be80
	void CancelDownload(FString InReplayId);// 0x4d1bdfc

--------------------------------
Class: GCloudLoginAccountInfo
	int loginChannel;//[Offset: 0x0, Size: 0x4]// 0x76119c3860
	FString OpenID;//[Offset: 0x8, Size: 0x10]// 0x76119c37f0
	FString OpenKey;//[Offset: 0x18, Size: 0x10]// 0x76119c3780
	FString PayToken;//[Offset: 0x28, Size: 0x10]// 0x76119c3710
	FString Pf;//[Offset: 0x38, Size: 0x10]// 0x76119c36a0
	FString PfKey;//[Offset: 0x48, Size: 0x10]// 0x76119c3630

--------------------------------
Class: TssManager.Object
	int SendSkdData_LuaState();// 0x4d554b0
	int SendEigeninfoData_LuaState();// 0x4d55498
	int OnRecvData_LuaState();// 0x4d55480

--------------------------------
Class: GCloudMidasManager.Object
	delegate MidasInitCallbackDelegate;//[Offset: 0x30, Size: 0x10]// 0x75a81d3000
	delegate PayNeedLoginDelegate;//[Offset: 0x40, Size: 0x10]// 0x75a81d3080
	delegate PayCallBackDelegate;//[Offset: 0x50, Size: 0x10]// 0x75a81d3100
	delegate LauchMpInfoCallbackDelegate;//[Offset: 0x60, Size: 0x10]// 0x75a81d3180
	interface class None* midasInterface;//[Offset: 0x70, Size: 0x10]// 0x75a81d3200
	UGCMidasInterface* midasInterface_other;//[Offset: 0x80, Size: 0x8]// 0x75a81d3280
	FString payEnvironment;//[Offset: 0x88, Size: 0x10]// 0x75a81bb0a0
	int CurrentPayItem;//[Offset: 0x98, Size: 0x4]// 0x75a81bb110
	bool bIsFirstPresent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]// 0x75a81d3300
	<int,int> PresentLevel;//[Offset: 0xa0, Size: 0x50]// 0x75a866d840
	bool bLauchedMpInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]// 0x75a81d3380
	<int,int> PresentLevel_Other;//[Offset: 0xf8, Size: 0x50]// 0x75a866d900
	delegate MidasInitCallbackDelegate_Other;//[Offset: 0x148, Size: 0x10]// 0x75a81d3400
	delegate PayNeedLoginDelegate_Other;//[Offset: 0x158, Size: 0x10]// 0x75a81d3480
	delegate PayCallBackDelegate_Other;//[Offset: 0x168, Size: 0x10]// 0x75a81d3500
	delegate LauchMpInfoCallbackDelegate_Other;//[Offset: 0x178, Size: 0x10]// 0x75a81d3580
	void UpdateMidasPF(FString Pf, FString PfKey);// 0x7a5d324
	void UnRegisterPay();// 0x7a5d308
	void SetPayEnvironment(FString Environment);// 0x7a5d230
	void RegisterPay_Other(int Platform, FString offerId, FString OpenID, FString OpenKey, FString Pf, FString PfKey, FString ZoneID);// 0x7a5ce38
	void RegisterPay(int Platform, FString offerId, FString OpenID, FString OpenKey, FString Pf, FString PfKey, FString ZoneID);// 0x7a5ca40
	void RefreshPay(FString OpenID, FString OpenKey);// 0x7a5c8d0
	void Pay_Other(int Platform, FString offerId, FString OpenID, FString OpenKey, FString Pf, FString PfKey, FString ZoneID, int payItem, FString ProductID);// 0x7a5c3fc
	void Pay(FString ZoneID, int payItem, FString ProductID);// 0x7a5c244
	void OnMidasPayNeedLogin_Other();// 0x7a5c228
	void OnMidasPayNeedLogin();// 0x7a5c20c
	void OnMidasPayCallBack_Other(out const APPayResponseInfo Info);// 0x7a5c13c
	void OnMidasPayCallBack(out const APPayResponseInfo Info);// 0x7a5c06c
	void OnMidasLauchMpInfoCallBack_Other(int ResultCode, FString resultString);// 0x7a5bf44
	void OnMidasLauchMpInfoCallBack(int ResultCode, FString resultString);// 0x7a5be1c
	void OnMidasInitCallBack_Other(FString resultString);// 0x7a5bd3c
	void OnMidasInitCallBack(FString resultString);// 0x7a5bc5c
	void MonthPay_Other(out const APMonthPayInfo Info);// 0x7a5bb88
	void MonthPay(out const APMonthPayInfo Info);// 0x7a5bab4
	void LauchMpInfo_Other(int Platform, FString offerId, FString OpenID, FString OpenKey, FString Pf, FString PfKey, FString ZoneID);// 0x7a5b6bc
	void LauchMpInfo(FString ZoneID);// 0x7a5b5dc
	bool IsPayEnable();// 0x7a5b59c
	bool IsFirstPresent();// 0x7a5b55c
	void Initialize();// 0x7a5b548
	void GoodsPay_Other(out const APGoodsPayInfo Info);// 0x7a5b480
	void GoodsPay(out const APGoodsPayInfo Info);// 0x7a5b3b8
	void GetSessonInfo(int Platform, out FString SessionId, out FString sessionType);// 0x7a5b278
	<int,int> GetPresentInfo_Other();// 0x7a5b238
	<int,int> GetPresentInfo();// 0x7a5b1f8
	int GetPresentCount(int payItem);// 0x7a5b164
	FString GetPayEnvironment();// 0x7a5b0a4
	bool CheckIfNeedRegisterPay(FString offerId, FString OpenID, FString OpenKey);// 0x7a5ae90

--------------------------------
Class: UGCMidasInterface.Object
	interface class * midasCallbackInterface;//[Offset: 0x40, Size: 0x10]// 0x75a81b2880
	void SetMidasCallbackInterface(interface classNone callbackInterface);// 0x7a6025c
	void RegisterPay(FString offerId, FString OpenID, FString OpenKey, FString SessionId, FString sessionType, FString Pf, FString PfKey, FString Environment, FString ZoneID);// 0x7a5fcf0
	void Pay(FString offerId, FString OpenID, FString OpenKey, FString SessionId, FString sessionType, FString Pf, FString PfKey, FString ZoneID, int payItem, FString ProductID);// 0x7a5f740
	void MonthPay(out const APMonthPayInfo Info);// 0x7a5f66c
	void LauchMpInfo(FString offerId, FString OpenID, FString OpenKey, FString SessionId, FString sessionType, FString Pf, FString PfKey, FString ZoneID);// 0x7a5f190
	void GoodsPay(out const APGoodsPayInfo Info);// 0x7a5f0c8

--------------------------------
Class: APMonthPayInfo
	FString offerId;//[Offset: 0x0, Size: 0x10]// 0x75c994c1f0
	FString Pf;//[Offset: 0x10, Size: 0x10]// 0x75c994c260
	bool bSubscribe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]// 0x75c9943a80
	bool autoPay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]// 0x75c9943b00
	FString ZoneID;//[Offset: 0x28, Size: 0x10]// 0x75c994c2d0
	int saveValue;//[Offset: 0x38, Size: 0x4]// 0x75c994c340
	FString ProductID;//[Offset: 0x40, Size: 0x10]// 0x75c994c3b0
	FString serviceCode;//[Offset: 0x50, Size: 0x10]// 0x75c994c420
	FString serviceName;//[Offset: 0x60, Size: 0x10]// 0x75c994c490
	FString remark;//[Offset: 0x70, Size: 0x10]// 0x75c994c500
	FString extras;//[Offset: 0x80, Size: 0x10]// 0x75c994c570
	FString reserv;//[Offset: 0x90, Size: 0x10]// 0x75c994c5e0
	FString drmInfo;//[Offset: 0xa0, Size: 0x10]// 0x75c994c650
	FString payChannel;//[Offset: 0xb0, Size: 0x10]// 0x75c994c6c0
	int serviceType;//[Offset: 0xc0, Size: 0x4]// 0x75c994c730
	FString OpenID;//[Offset: 0xc8, Size: 0x10]// 0x75c994c7a0
	FString SessionId;//[Offset: 0xd8, Size: 0x10]// 0x75c994c810
	FString sessionType;//[Offset: 0xe8, Size: 0x10]// 0x75c994c880
	FString OpenKey;//[Offset: 0xf8, Size: 0x10]// 0x75c994c8f0
	FString PfKey;//[Offset: 0x108, Size: 0x10]// 0x75c994c960

--------------------------------
Class: APGoodsPayInfo
	FString offerId;//[Offset: 0x0, Size: 0x10]// 0x75c994c9d0
	FString Pf;//[Offset: 0x10, Size: 0x10]// 0x75c994ca40
	FString PfKey;//[Offset: 0x20, Size: 0x10]// 0x75c994cab0
	FString ZoneID;//[Offset: 0x30, Size: 0x10]// 0x75c994cb20
	FString goodsZoneID;//[Offset: 0x40, Size: 0x10]// 0x75c994cb90
	int payItem;//[Offset: 0x50, Size: 0x4]// 0x75c994cc00
	int saveValue;//[Offset: 0x54, Size: 0x4]// 0x75c994cc70
	FString ProductID;//[Offset: 0x58, Size: 0x10]// 0x75c994cce0
	FString OpenID;//[Offset: 0x68, Size: 0x10]// 0x75c994cd50
	FString OpenKey;//[Offset: 0x78, Size: 0x10]// 0x75c994cdc0
	FString SessionId;//[Offset: 0x88, Size: 0x10]// 0x75c994ce30
	FString sessionType;//[Offset: 0x98, Size: 0x10]// 0x75c994cea0

--------------------------------
Class: APPayResponseInfo
	int ResultCode;//[Offset: 0x0, Size: 0x4]// 0x7612125ea0
	int payState;//[Offset: 0x4, Size: 0x4]// 0x7612125e30
	int provideState;//[Offset: 0x8, Size: 0x4]// 0x7612125dc0
	int netState;//[Offset: 0xc, Size: 0x4]// 0x7612125d50
	int realSaveNum;//[Offset: 0x10, Size: 0x4]// 0x7612125ce0
	int payItem;//[Offset: 0x14, Size: 0x4]// 0x7612125c70
	FString payChannel;//[Offset: 0x18, Size: 0x10]// 0x7612125c00
	FString ResultMsg;//[Offset: 0x28, Size: 0x10]// 0x7612125b90
	FString resultInerCode;//[Offset: 0x38, Size: 0x10]// 0x7612125b20
	bool isReprovide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]// 0x7612125aa0
	FString billno;//[Offset: 0x50, Size: 0x10]// 0x7612125a30

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 0x10]// 0x76119c3d30
	SaveGame* SaveGame;//[Offset: 0x10, Size: 0x8]// 0x760d23b800

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]// 0x76120def90
	delegate OnFail;//[Offset: 0x38, Size: 0x10]// 0x76120def10
	FString FileURL;//[Offset: 0x48, Size: 0x10]// 0x76120deea0
	FString FileSavePath;//[Offset: 0x58, Size: 0x10]// 0x76120dee30
	FString UrlHash;//[Offset: 0x68, Size: 0x10]// 0x76120dedc0
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]// 0x76120ded40
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]// 0x76120decc0
	bool LoadDiskImageAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]// 0x76120dec40
	void Start(FString URL);// 0x4d03e68
	static void SetSubDirTime(int sec);// 0x4d03df4
	static void SetRootDir(FString rootDir);// 0x4d03d2c
	static void ResetSubDirTime();// 0x4d03d18
	static void ResetRootDir();// 0x4d03d04
	void OnLoadImageCompleted(const ASyncLoadFileLoader* Loader, int InParam);// 0x4d03c4c
	static ImageDownloader* MakeDownloaderInGame();// 0x4d03c18
	static ImageDownloader* MakeDownloader();// 0x4d03be4
	void ImageDownloaderDelegate__DelegateSignature(Texture2D* Texture, ImageDownloader* ImageDownloader);// 0xffffff8a17adf2b0
	FString GetImageSavePath(FString URL);// 0x4d03ac0
	static bool CopyCacheFileFromUrl(FString UrlTo, FString UrlFrom);// 0x4d03954

--------------------------------
Class: ASyncLoadFileLoader.Object
	byte[] ReadBufferData;//[Offset: 0x28, Size: 0x10]// 0x75a7b5d180
	FString CacheFilePath;//[Offset: 0x38, Size: 0x10]// 0x75a7b8e940
	FString ReadBufferString;//[Offset: 0x48, Size: 0x10]// 0x75a7b8e9b0
	void OnLoadCompleted(bool InResult);// 0x48ffcb0
	bool LoadFileToByteFromDisk(FString FilePath);// 0x48ffbcc
	void LoadFileAsync(FString FilePath);// 0x48ffb40

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 0x4]// 0x76119c3da0
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 0x8]// 0x760d23b780

--------------------------------
Class: GameOverrider.Object
	STExtraPlayerController* CacheController;//[Offset: 0x38, Size: 0x8]// 0x75a87a4780
	GameInstance* OwnerGameInstance;//[Offset: 0x40, Size: 0x8]// 0x75a87a4800
	ConsoleVar[] ConsoleVars;//[Offset: 0x48, Size: 0x10]// 0x75a87a4900
	FString[] WorkOnMaps;//[Offset: 0x58, Size: 0x10]// 0x75a87a4980
	MapSetting[] MapSettings;//[Offset: 0x70, Size: 0x10]// 0x75a87a4a80
	void OnSpectatorChange();// 0x4cf3d10

--------------------------------
Class: ConsoleVar
	FString Key;//[Offset: 0x0, Size: 0x10]// 0x76119c4040
	float Value;//[Offset: 0x10, Size: 0x4]// 0x76119c3fd0

--------------------------------
Class: MapSetting
	FString MapName;//[Offset: 0x0, Size: 0x10]// 0x76119c40b0
	ConsoleVar[] ConsoleSetting;//[Offset: 0x10, Size: 0x10]// 0x760d23b700

--------------------------------
Class: PropertySerialize
	FString Name;//[Offset: 0x0, Size: 0x10]// 0x76119c3be0
	int Type;//[Offset: 0x10, Size: 0x4]// 0x76119c3b70
	FString Value;//[Offset: 0x18, Size: 0x10]// 0x76119c3b00

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 0x4]// 0x76119c43c0
	FString Reason;//[Offset: 0x8, Size: 0x10]// 0x76119c2fa0
	int Extend;//[Offset: 0x18, Size: 0x4]// 0x76119c2e50
	int Extend2;//[Offset: 0x1c, Size: 0x4]// 0x76119c2de0
	FString MsgData;//[Offset: 0x20, Size: 0x10]// 0x76119c3240

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: LocationInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 0x4]// 0x76119c35c0
	double Longitude;//[Offset: 0x8, Size: 0x8]// 0x76119c3550
	double Latitude;//[Offset: 0x10, Size: 0x8]// 0x76119c34e0

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 0x4]// 0x76119c3470
	int flag;//[Offset: 0x4, Size: 0x4]// 0x76119c3400
	int ErrorCode;//[Offset: 0x8, Size: 0x4]// 0x76119c3390
	int Platform;//[Offset: 0xc, Size: 0x4]// 0x76119c3320
	FString Desc;//[Offset: 0x10, Size: 0x10]// 0x76119c4430
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x20, Size: 0x30]// 0x760d23b900
	QQGroupInfomation qqGroupInfo;//[Offset: 0x50, Size: 0x20]// 0x760d23b980

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 0x10]// 0x76119c32b0
	FString MemberNum;//[Offset: 0x10, Size: 0x10]// 0x76119c31d0
	FString ChatRoomURL;//[Offset: 0x20, Size: 0x10]// 0x76119c3160

--------------------------------
Class: QQGroupInfomation
	FString guildId;//[Offset: 0x0, Size: 0x10]// 0x76119c30f0
	FString guildName;//[Offset: 0x10, Size: 0x10]// 0x76119c3080

--------------------------------
Class: UAELoginGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
